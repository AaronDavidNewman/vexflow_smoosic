{"version":3,"file":"vexflow-debug-with-tests.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;;;;ACVO;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACFP;AACA;AACA;AACA;AACsC;AACN;AACM;AACN;AACE;AAC+D;AAC3D;AACtC;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,+CAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6DAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2DAAsB;AAChD,QAAQ,8CAAO,+DAA+D,KAAK;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB;AACjD;AACA;AACA;AACA,oFAAoF;AACpF;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iDAAiD;AAChF;AACA;AACA,+BAA+B,sCAAsC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wCAAwC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB;AAC/D,6BAA6B,kEAA6B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+CAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,0BAA0B,yCAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAY;AACxC;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,wBAAwB,4DAAgB;AACxC;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yBAAyB,yCAAK;AAC9B;AACA;AACA,iCAAiC,yCAAK,CAAC,2DAAsB,GAAG;AAChE,kCAAkC,yCAAK,CAAC,2DAAsB,GAAG;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAAO;AACrC,+BAA+B,8CAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAO,2CAA2C,KAAK;AAC/D;AACA;AACA,YAAY,uDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAA8E,qCAAqC,IAAI;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAAO;AACrC,+BAA+B,8CAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC5dA;AACA;AACoC;AACoB;AAC1B;AACI;AACc;AACmB;AACtC;AAC7B;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,kEAAkE;AAC5D;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,8DAA8D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,+CAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAgB;AACtC;AACA;AACA;AACA,eAAe,2DAAmB;AAClC;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA,kCAAkC,gEAAoB;AACtD;AACA,8DAA8D,+DAA0B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,0CAAO;AACpF;AACA;AACA,gBAAgB,qDAAS;AACzB;AACA;AACA;AACA,kEAAkE,+DAA0B;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2DAAe;AACpC;AACA;AACA,8DAA8D,+DAA0B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAS;AAC7B;AACA;AACA,sCAAsC,0CAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAS;AAC7B;AACA;AACA,sCAAsC,4CAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,0CAAO;AAChF,8BAA8B,gEAAoB;AAClD,8CAA8C,6DAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+DAA0B;AAClE,8CAA8C,4CAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,+DAA0B;AACnF,8CAA8C,0CAAO;AACrD;AACA;AACA,mEAAmE,+DAA0B;AAC7F;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE,uDAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC5RA;AACA;AACA;AACgC;AACM;AACR;AACI;AAC2D;AACzC;AACpD;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA,QAAQ,eAAe,EAAE,wDAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uDAAW,UAAU,uDAAW;AACrE;AACA;AACA,YAAY,mCAAmC;AAC/C;AACA;AACA,kCAAkC,0CAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAS;AACtB;AACA,kCAAkC,0CAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA,YAAY,mCAAmC;AAC/C;AACA;AACA,kCAAkC,0CAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAS;AACtB;AACA,kCAAkC,0CAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,0CAAO;AAClF,2DAA2D,4CAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,+CAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uHAAuH,8CAAO;AAC9H;AACA;AACA;AACA;AACA,6EAA6E,0CAAO;AACpF;AACA;AACA,gBAAgB,2DAAe;AAC/B;AACA;AACA,8DAA8D,+DAA0B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0CAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4CAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,iCAAiC,8DAAuB;AACxD;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,6DAAwB;AACpD,6BAA6B,8CAAO,gEAAgE,UAAU;AAC9G;AACA,yBAAyB,yCAAK;AAC9B,sBAAsB,8CAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uCAAuC;AACvD;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA,gBAAgB,IAAI;AACpB;AACA;AACA,wBAAwB,4DAAuB,gCAAgC,gBAAgB;AAC/F;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE,OAAO,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjUA;AACA;AAC8B;AACwB;AACf;AACV;AAC7B;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,sBAAsB,uCAAI;AACjC,uBAAuB,6DAAkB;AACzC,gBAAgB,eAAe;AAC/B;AACA,sBAAsB;AACtB;AACA,qBAAqB,sDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,6DAAkB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA;AACoC;AACE;AACR;AACI;AACQ;AACqB;AACzB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,eAAe,4CAAS;AACxB;AACA,WAAW,0CAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACP;AACO,mBAAmB,6CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,0BAA0B,2DAAsB;AAChD,sBAAsB,+CAAY;AAClC;AACA,eAAe;AACf;AACA,8BAA8B,0CAAO;AACrC,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAW;AACpC;AACA;AACA,8BAA8B,qDAAS;AACvC;AACA;AACA,gDAAgD,0CAAO,GAAG,4CAAS;AACnE;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qDAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAQ;AACpC;AACA;AACA,4BAA4B,+CAAQ;AACpC;AACA;AACA,4BAA4B,+CAAQ;AACpC;AACA;AACA;AACA,6CAA6C,+CAAQ;AACrD;AACA,oBAAoB,+CAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,wBAAwB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,iCAAiC,+CAAQ;AACzC;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA,0CAA0C,sDAAiB;AAC3D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0FAA0F,+CAAQ;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAAQ;AACrD;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,iDAAiD,+CAAQ;AACzD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,2DAAsB;AAC9E;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,0CAAO;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,2DAAsB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAiE,4CAAS,GAAG,0DAAqB,GAAG,uDAAkB;AACvH;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAwD,oDAAoD,IAAI;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yCAAyC,oDAAoD,IAAI;AACjH;AACA;AACA;AACA,0BAA0B;AAC1B,kCAAkC;AAClC;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4CAAS;AAC5C;AACA;AACA;AACA;AACA,wCAAwC,0CAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAS;AACxC;AACA;AACA,oCAAoC,0CAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4CAAS;AAC7C;AACA;AACA,oCAAoC,0CAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAqE,8CAA8C,IAAI;AACvI;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA,yDAAyD,0CAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAuB,eAAe;AACzE,gDAAgD,2DAAsB;AACtE,gDAAgD,2DAAsB;AACtE,sCAAsC,2DAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2DAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6CAAU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnzBA;AACA;AACoC;AACE;AACU;AACE;AACZ;AACtC;AACO,mBAAmB,+CAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gCAAgC;AAC7D;AACA,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA,eAAe,qDAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA,gBAAgB,qDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gEAAoB;AAClD;AACA;AACA;AACA;AACA,8BAA8B,gEAAoB;AAClD;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,8DAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,+DAAwB;AAC7E;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,uDAAiB;;;;;;;;;;;;;;;ACvPpD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AAC8B;AACkB;AACJ;AACP;AACrC;AACA;AACA;AACA;AACO,4BAA4B,yDAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2CAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mDAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAY;AACxyBAAyB,gDAAa;AACtC,8BAA8B,mDAAgB;AAC9C,0BAA0B,+DAA4B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACqD;AACrB;AACM;AACJ;AACc;AACQ;AAC3B;AAC7B;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,oEAAoE;AAC9D;AACP;AACA;AACA;AACA,CAAC,gEAAgE;AAC1D;AACP;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B;AACP;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C;AACA;AACA;AACA;AACO,0BAA0B,+CAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAA4B;AACzD,4BAA4B,iDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,4BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2DAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAuB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAiB;AACrC,mBAAmB,mDAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,mBAAmB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;AACA,sCAAsC,qCAAqC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yCAAK,gCAAgC,yBAAyB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,iEAAiE,iBAAiB,kBAAkB;AACpG;AACA;AACA;AACA;AACA;AACA,qCAAqC,kCAAkC;AACvE;AACA;AACA;AACA;AACA;AACA,qCAAqC,kCAAkC;AACvE;AACA;AACA;AACA;AACA;AACA,qCAAqC,mCAAmC;AACxE;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iEAAiE,aAAa,mBAAmB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,iEAAiE,aAAa,mBAAmB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,8DAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mEAA8B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8BAA8B;AAC9D,gDAAgD,iDAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnsBA;AACA;AACA;AACgC;AACuC;AACrC;AACK;AACD;AACtC;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACO,mBAAmB,yDAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uEAA2B;AACpD;AACA,sBAAsB,4DAAuB,wBAAwB,UAAU;AAC/E;AACA;AACA;AACA,eAAe,qDAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB;AACjD,yDAAyD,UAAU;AACnE,yBAAyB,yCAAK;AAC9B,8BAA8B,eAAe,GAAG,UAAU;AAC1D,SAAS;AACT;AACA;AACA,oEAAoE,WAAW;AAC/E,qEAAqE,WAAW,GAAG,UAAU;AAC7F,oEAAoE,WAAW,GAAG,UAAU,GAAG,UAAU;AACzG,uEAAuE,WAAW,GAAG,UAAU,GAAG,UAAU;AAC5G,gCAAgC;AAChC,kCAAkC,yCAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8CAAO;AACjC;AACA,8BAA8B,4DAAuB;AACrD,mEAAmE,SAAS;AAC5E,oEAAoE,SAAS;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjLA;AACA;AACA;AAC8B;AACE;AACF;AACS;AACvC;AACO,uBAAuB,uCAAI;AAClC;AACA,gBAAgB,eAAe;AAC/B;AACA,4BAA4B,uCAAI;AAChC;AACA,yBAAyB,yCAAK;AAC9B;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAiB;AAChC;AACA;AACA;AACA;AACA,4BAA4B,uCAAI;AAChC;AACA,yBAAyB,yCAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yCAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8B;AACc;AACL;AACV;AAC7B;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,uCAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACoC;AACG;AACD;AAC/B;AACP;AACA;AACA;AACA,CAAC,sCAAsC;AAChC,oBAAoB,6CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe,sDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACsC;AACsC;AACtC;AAC/B,kBAAkB,+CAAQ;AACjC;AACA;AACA,wBAAwB,8DAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAS;AAC9B,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA,4BAA4B,sCAAsC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,sBAAsB;AACjG;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC1JA;AACA;AAC8C;AAClB;AACsB;AAClB;AACE;AACJ;AACsB;AACpD;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8BAA8B;AACrE,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA,sDAAsD;AACtD;AACA;AACA,qBAAqB,8CAAO;AAC5B;AACA,qBAAqB,8CAAO;AAC5B,gBAAgB,8BAA8B;AAC9C;AACA,iFAAiF,UAAU,WAAW,EAAE;AACxG;AACA,oCAAoC,qDAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,2CAA2C;AAC3C;AACA;AACA,kCAAkC,gBAAgB;AAClD,kCAAkC,6CAA6C;AAC/E;AACA,kDAAkD,0CAAO,GAAG,4CAAS;AACrE;AACA;AACA;AACA;AACA;AACA,wDAAwD,aAAa;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,UAAU;AAClC,YAAY,oDAAkB,WAAW,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,qDAAqD,+BAA+B,qEAA0B,EAAE,yEAA4B,wBAAwB,cAAc;AAClL,qBAAqB;AACrB;AACA;AACA;AACA,0BAA0B,2CAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA,8BAA8B,gBAAgB;AAC9C;AACA;AACA,4BAA4B;AAC5B,kCAAkC,oDAAoD;AACtF;AACA;AACA;AACA,6BAA6B;AAC7B,kCAAkC,0BAA0B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChaA;AACA;AACA;AACqD;AACf;AACC;AACN;AACjC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,cAAc,kEAA2B;AACzC;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sCAAsC;AAChE;AACA;AACA;AACA;AACA;AACA,0BAA0B,sCAAsC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sCAAsC;AAChgFAAgF,kCAAkC;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,4BAA4B,qDAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA,eAAe,+DAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAe;AAC3B,UAAU,4CAAS;AACnB,YAAY,oDAAiB;AAC7B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxVA;AACA;AACA;AAC0C;AACwD;AACpD;AACV;AACN;AACc;AACN;AACN;AACQ;AACJ;AACI;AACU;AACV;AACA;AACA;AACU;AACR;AACU;AACE;AACR;AACR;AACQ;AACR;AACI;AACV;AACkB;AACV;AACA;AACF;AACQ;AACZ;AACE;AACE;AACM;AACE;AACR;AACM;AACA;AACV;AACkB;AACF;AAClB;AACK;AACrC;AACA;AACA;AACA,QAAQ,2CAAG;AACX;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,kDAAkD,YAAY,6CAA6C,EAAE;AAC7G;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA,6BAA6B,YAAY,4BAA4B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,gBAAgB,uCAAuC;AACvD;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAY;AAC5B,0BAA0B,gEAAwB;AAClD;AACA;AACA,0BAA0B,6DAAqB;AAC/C;AACA;AACA,uBAAuB,6DAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8EAA8E,8CAA8C;AAC9J,0BAA0B,0CAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8EAA8E,8CAA8C;AAC9J,0BAA0B,gDAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,4BAA4B,6CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,eAAe;AACf,6BAA6B,+CAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAc;AACxC;AACA;AACA;AACA;AACA,0BAA0B,mDAAU;AACpC;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB,2EAAkC,YAAY,yEAAgC,EAAE;AACvI,+BAA+B,mDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uEAAuE;AACzG,gCAAgC,qDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+BAA+B;AACjE,iCAAiC,uDAAY;AAC7C;AACA;AACA;AACA;AACA;AACA,wCAAwC,mCAAmC;AAC3E,6BAA6B,gDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4CAA4C;AAC9E,yBAAyB,wDAAY;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+BAA+B;AACjE,8BAA8B,4DAAc;AAC5C;AACA;AACA;AACA;AACA;AACA,iCAAiC,wDAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAW;AAC9B;AACA;AACA,mBAAmB,8DAAe;AAClC;AACA;AACA,4BAA4B,+CAAO;AACnC,qCAAqC,gEAAgB;AACrD;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C,0BAA0B,0CAAK;AAC/B;AACA;AACA;AACA;AACA,8BAA8B,4DAAc;AAC5C;AACA;AACA;AACA;AACA;AACA,mBAAmB,kDAAS;AAC5B;AACA;AACA,kCAAkC,wBAAwB;AAC1D,2BAA2B,4CAAM;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B,yCAAK;AAC/B;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAQ;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAc;AACjD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,2BAA2B,4CAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY,6CAA6C;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,mBAAmB,iDAAS;AAC5B;AACA;AACA,kCAAkC;AAClC;AACA,eAAe;AACf,0BAA0B,wDAAY;AACtC,sBAAsB,mEAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW;AAC7C,0BAA0B,wDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE,uDAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1fvD,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AAC0C;AACwD;AACpD;AACV;AACN;AACA;AACc;AACsB;AAClB;AACqF;AACvG;AACQ;AACE;AACO;AACnB;AACY;AACJ;AACA;AACiB;AACb;AACF;AACY;AACV;AACR;AACQ;AACA;AACU;AACJ;AACJ;AACI;AACJ;AACc;AACJ;AACE;AACtB;AACF;AACQ;AACQ;AACR;AACM;AACV;AACY;AACR;AACU;AAC6B;AACnC;AACV;AACsB;AACJ;AACJ;AACN;AAC+B;AAC/B;AACO;AACL;AACF;AACF;AACU;AAClB;AACgB;AACX;AACO;AACR;AACA;AACE;AACE;AACA;AACJ;AAC+B;AACnB;AACE;AACS;AACb;AACI;AACJ;AACR;AACF;AACA;AACY;AACV;AACc;AACP;AACpC;AACP;AACA;AACA;AACA,qBAAqB,8CAAO;AAC5B;AACA,gBAAgB,yCAAE;AAClB;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,6CAAS;AAC3D,QAAQ,6DAAuB;AAC/B,QAAQ,2DAAsB;AAC9B,QAAQ,4DAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,6DAAuB;AAC7C;AACA;AACA;AACA,eAAe,oEAA8B;AAC7C;AACA;AACA,QAAQ,oEAA8B;AACtC;AACA;AACA,eAAe,2DAAqB;AACpC;AACA;AACA,QAAQ,2DAAqB;AAC7B;AACA;AACA,eAAe,gEAA0B;AACzC;AACA;AACA,QAAQ,gEAA0B;AAClC;AACA;AACA,eAAe,iEAA2B;AAC1C;AACA;AACA,QAAQ,iEAA2B;AACnC;AACA;AACA,eAAe,uDAAiB;AAChC;AACA;AACA,QAAQ,uDAAiB;AACzB;AACA;AACA,eAAe,iEAA2B;AAC1C;AACA;AACA,QAAQ,iEAA2B;AACnC;AACA;AACA,eAAe,gEAA0B;AACzC;AACA;AACA,QAAQ,gEAA0B;AAClC;AACA;AACA,eAAe,iEAA2B;AAC1C;AACA;AACA,QAAQ,iEAA2B;AACnC;AACA;AACA,eAAe,wDAAkB;AACjC;AACA;AACA,QAAQ,wDAAkB;AAC1B;AACA;AACA,eAAe,uDAAiB;AAChC;AACA;AACA,QAAQ,uDAAiB;AACzB;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA,eAAe,0DAAoB;AACnC;AACA;AACA,eAAe,oDAAc;AAC7B;AACA;AACA,eAAe,yDAAmB;AAClC;AACA;AACA,eAAe,4DAAsB;AACrC;AACA;AACA,eAAe,6DAAuB;AACtC;AACA;AACA,eAAe,2DAAqB;AACpC;AACA;AACA;AACA,eAAe,0DAAoB;AACnC;AACA;AACA,eAAe,4DAAsB;AACrC;AACA;AACA,kBAAkB,mDAAU;AAC5B,kBAAkB,mDAAU;AAC5B,oBAAoB,uDAAY;AAChC,eAAe,mDAAO;AACtB,eAAe,6CAAO;AACtB,YAAY,uCAAI;AAChB,YAAY,uCAAI;AAChB,mBAAmB,qDAAW;AAC9B,8BAA8B,2EAAsB;AACpD,qBAAqB,yDAAa;AAClC,mBAAmB,qDAAW;AAC9B,YAAY,wCAAI;AAChB,gBAAgB,gDAAQ;AACxB,iBAAiB,kDAAS;AAC1B,aAAa,0CAAK;AAClB,WAAW,sCAAG;AACd,iBAAiB,kDAAS;AAC1B,eAAe,8CAAO;AACtB,eAAe,8CAAO;AACtB,YAAY,wCAAI;AAChB,iBAAiB,kDAAS;AAC1B,gBAAgB,gDAAQ;AACxB,sBAAsB,4DAAc;AACpC,iBAAiB,kDAAS;AAC1B,aAAa,0CAAK;AAClB,iBAAiB,kDAAS;AAC1B,iBAAiB,kDAAS;AAC1B,sBAAsB,4DAAc;AACpC,oBAAoB,wDAAY;AAChC,kBAAkB,oDAAU;AAC5B,oBAAoB,wDAAY;AAChC,kBAAkB,oDAAU;AAC5B,gBAAgB,gDAAQ;AACxB,uBAAuB,8DAAe;AACtC,wBAAwB,gEAAgB;AACxC,aAAa,0CAAK;AAClB,YAAY,wCAAI;AAChB,gBAAgB,gDAAQ;AACxB,oBAAoB,wDAAY;AAChC,gBAAgB,gDAAQ;AACxB,mBAAmB,sDAAW;AAC9B,cAAc,4CAAM;AACpB,oBAAoB,wDAAY;AAChC,gBAAgB,gDAAQ;AACxB,qBAAqB,0DAAa;AAClC,gBAAgB,gDAAQ;AACxB,kBAAkB,oDAAU;AAC5B,kBAAkB,yDAAU;AAC5B,aAAa,0CAAK;AAClB,sBAAsB,4DAAc;AACpC,oBAAoB,wDAAY;AAChC,iBAAiB,kDAAS;AAC1B,qBAAqB,0DAAa;AAClC,iBAAiB,kDAAS;AAC1B,kBAAkB,oDAAU;AAC5B,iBAAiB,kDAAS;AAC1B,gBAAgB,gDAAQ;AACxB,YAAY,wCAAI;AAChB,oBAAoB,wDAAY;AAChC,cAAc,6CAAM;AACpB,kBAAkB,oDAAU;AAC5B,cAAc,4CAAM;AACpB,eAAe,8CAAO;AACtB,gBAAgB,gDAAQ;AACxB,gBAAgB,gDAAQ;AACxB,cAAc,4CAAM;AACpB,mBAAmB,sDAAW;AAC9B,oBAAoB,wDAAY;AAChC,qBAAqB,0DAAa;AAClC,gBAAgB,gDAAQ;AACxB,mBAAmB,sDAAW;AAC9B,qBAAqB,0DAAa;AAClC,mBAAmB,sDAAW;AAC9B,eAAe,8CAAO;AACtB,cAAc,4CAAM;AACpB,cAAc,4CAAM;AACpB,eAAe,8CAAO;AACtB,sBAAsB,4DAAc;AACpC,aAAa,0CAAK;AAClB,aAAa,+CAAK;AAClB;AACA;AACA,mCAAmC,oEAA2B;AAC9D,iCAAiC,kEAAyB;AAC1D,oCAAoC,sEAA4B;AAChE,kCAAkC,oEAA0B;AAC5D,mBAAmB,qDAAW;AAC9B,uBAAuB,yDAAe;AACtC,qBAAqB,kDAAa;AAClC,kBAAkB,8CAAU;AAC5B,iBAAiB,6CAAS;AAC1B,wBAAwB,wDAAgB;AACxC,wBAAwB,wDAAgB;AACxC,2BAA2B,2DAAmB;AAC9C,mBAAmB,uDAAW;AAC9B,6BAA6B,kEAAqB;AAClD,iBAAiB,mDAAS;AAC1B,2BAA2B,8DAAmB;AAC9C,yBAAyB,yDAAiB;AAC1C,iBAAiB,8CAAS;;;;;;;;;;;;;;;;;;AClV1B,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACiC;AAC1B;AACP;AACA;AACA;AACA,CAAC,gCAAgC;AAC1B;AACP;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAA8C;AAC9D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,sBAAsB,oBAAoB,EAAE,KAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,QAAQ;AAC3D,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqttGA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,mBAAmB,uBAAuB;AAC1C,mBAAmB,sBAAsB;AACzC,mBAAmB,sBAAsB;AACzC,mBAAmB,uBAAuB;AAC1C,mBAAmB,wBAAwB;AAC3C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,2BAA2B,uBAAuB;AAClD,yBAAyB,aAAa;AACtC,aAAa;AACb;AACA,2BAA2B,cAAc;AACzC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;AC/gBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;AC7EO;AACP;AACA;AACA,cAAc;AACd;;;;;;;;;;;;;;;ACJO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/1BA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,mBAAmB,uBAAuB;AAC1C,mBAAmB,sBAAsB;AACzC,mBAAmB,sBAAsB;AACzC,mBAAmB,uBAAuB;AAC1C,mBAAmB,wBAAwB;AAC3C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;AChbhiCO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,mBAAmB,uBAAuB;AAC1C,mBAAmB,sBAAsB;AACzC,mBAAmB,sBAAsB;AACzC,mBAAmB,uBAAuB;AAC1C,mBAAmB,wBAAwB;AAC3C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,2BAA2B,uBAAuB;AAClD,yBAAyB,aAAa;AACtC,aAAa;AACb;AACA,2BAA2B,cAAc;AACzC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;;ACneA;AACA;AACA;AACA;AAC6C;AACF;AACI;AACJ;AACI;AAC/C;AACA,YAAY,UAAU;AACtB;AACO;AACP,IAAI,0DAAW;AACf,IAAI,4DAAY;AAChB,IAAI,4DAAY;AAChB,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA;AACA;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+B;AACgB;AACI;AAC5C;AACP,IAAI,4CAAS,YAAY,wDAAW,EAAE,4DAAc;AACpD;;;;;;;;;;;;;;;;;;ACfA;AACA;AAC+B;AACc;AACI;AAC1C;AACP,IAAI,4CAAS,WAAW,sDAAU,EAAE,0DAAa;AACjD;;;;;;;;;;;;;;;;;;ACPA;AACA;AAC+B;AACkB;AACI;AAC9C;AACP,IAAI,4CAAS,aAAa,0DAAY,EAAE,8DAAe;AACvD;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+B;AACc;AACI;AAC1C;AACP,IAAI,4CAAS,WAAW,sDAAU,EAAE,0DAAa;AACjD;;;;;;;;;;;;;;;;;;ACfA;AACA;AAC+B;AACkB;AACI;AAC9C;AACP,IAAI,4CAAS,aAAa,0DAAY,EAAE,8DAAe;AACvD;;;;;;;;;;;;;;;ACPO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;;;;;;;;;;;;;;;ACt2CA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,mBAAmB,uBAAuB;AAC1C,mBAAmB,sBAAsB;AACzC,mBAAmB,sBAAsB;AACzC,mBAAmB,uBAAuB;AAC1C,mBAAmB,wBAAwB;AAC3C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,2BAA2B,uBAAuB;AAClD,yBAAyB,aAAa;AACtC,aAAa;AACb;AACA,2BAA2B,cAAc;AACzC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;AC1iBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;;;;;;;;;;;;;;;AC91BO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC91BA;AACA;AAC+B;AACkB;AACY;AACR;AAC9C;AACP;AACA;AACA,yBAAyB,8DAAc;AACvC,gBAAgB,iCAAiC;AACjD,QAAQ,4CAAS;AACjB;AACA;AACA;AACA,QAAQ,sEAA0B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yBAAyB,sEAAkB;AAC3C,gBAAgB,iCAAiC;AACjD,QAAQ,4CAAS;AACjB;AACA;AACA;AACA,QAAQ,sEAA0B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AAC8B;AACA;AACQ;AACc;AACpB;AACkB;AAChB;AACU;AACM;AACW;AAC7B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAQ;AACtC;AACA;AACA;AACA;AACA,iDAAiD,sBAAsB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0BAA0B;AACtE;AACA,YAAY,kDAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,gDAAgD,0DAA0D;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,sBAAsB,IAAI;AAClE;AACA,0CAA0C,6DAAe;AACzD,6BAA6B,qDAAW;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC,cAAc,4DAAuB,kCAAkC;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kDAAe;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,8BAA8B,uCAAuC,SAAS,wCAAwC,OAAO,6BAA6B;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD,+EAA+E,kBAAkB;AACjG;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA,0BAA0B,0CAAK,CAAC,mDAAc,UAAU,oDAAe;AACvE;AACA,0CAA0C,wDAAqB;AAC/D;AACA;AACA,wCAAwC,kCAAkC;AAC1E,6CAA6C,yCAAyC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,8BAA8B,0CAAK,CAAC,mDAAc,UAAU,oDAAe;AAC3E;AACA,6BAA6B,0CAAK,CAAC,mDAAc,UAAU,oDAAe;AAC1E;AACA,uCAAuC,wDAAqB;AAC5D;AACA;AACA,4CAA4C,+BAA+B;AAC3E;AACA,2DAA2D,+BAA+B;AAC1F;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA,oCAAoC,sDAAiB;AACrD,0BAA0B,+CAAY;AACtC;AACA,yCAAyC,mDAAY;AACrD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0DAA0D,6DAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,qDAAW;AACzE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gBAAgB,8CAA8C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8CAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yCAAyC;AAClF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6BAA6B;AACrE;AACA,2EAA2E,wDAAoB;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClzBA;AACA;AACA;AACA;AACA;AACuC;AACD;AACtC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,oCAAokBAAkB,eAAe,GAAG,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnNA;AACA;AACA;AACA;AACqD;AACG;AACtB;AACc;AACT;AACD;AAC/B,6BAA6B,+CAAQ;AAC5C;AACA;AACA;AACA;AACA,wBAAwB,6DAAsB,EAAE;AAChD;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA;AACA;AACA,eAAe,+DAAuB;AACtC;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA,kCAAkC,gEAAoB;AACtD;AACA,iCAAiC,6DAAsB;AACvD,oDAAoD,+DAA0B;AAC9E;AACA,iCAAiC,6DAAsB;AACvD,gDAAgD,+DAA0B;AAC1E;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6DAAsB;AAC9C;AACA,mDAAmD;AACnD;AACA;AACA,6BAA6B,8DAAuB;AACpD;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa,IAAI;AAC5C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8DAAuB;AACxC;AACA;AACA;AACA,iBAAiB,8DAAuB;AACxC;AACA;AACA;AACA,iBAAiB,6DAAsB;AACvC;AACA;AACA,iBAAiB,8DAAuB;AACxC;AACA;AACA;AACA,0BAA0B,+CAAY,oCAAoC,eAAe;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAe;AAC3B;AACA,YAAY,kDAAe;AAC3B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;ACnKA;AACA;AACA;AACgD;AACK;AACf;AACtC;AACO,wBAAwB,yDAAa;AAC5C;AACA,eAAe,0DAAkB;AACjC;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA,gBAAgB,wDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAC4C;AACsB;AAC9B;AACF;AACK;AACQ;AACxC;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,KAAK,GAAG,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mEAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oBAAoB,6CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qDAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAc;AAC7B;AACA;AACA,uCAAuC,SAAS,EAAE,KAAK,EAAE,IAAI;AAC7D,wCAAwC,SAAS,EAAE,IAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS,GAAG,KAAK,GAAG,IAAI;AACxE;AACA,sDAAsD,MAAM;AAC5D,gDAAgD,SAAS,GAAG,IAAI;AAChE;AACA;AACA;AACA;AACA,QAAQ,8CAAO;AACf;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA,yBAAyB;AACzB;AACA,kBAAkB,+CAAY,sBAAsB,MAAM;AAC1D;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA,sBAAsB,+CAAY,sBAAsB,MAAM;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2EAAsB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qDAAW;AACnC;AACA;AACA,eAAe,8CAAO,oCAAoC,WAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxYA;AAC8B;AACS;AAChC,wBAAwB,uCAAI;AACnC;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1DA;AACwC;AACV;AACI;AACK;AACD;AAC/B,wBAAwB,iDAAS;AACxC;AACA,8BAA8B,kBAAkB,+DAA0B,6DAA6D;AACvI;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAW,2BAA2B,8CAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,+DAA0B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4CAAS;AACpD;AACA;AACA,gEAAgE,4CAAS;AACzE,qCAAqC,uDAAkB;AACvD;AACA;AACA;AACA,mDAAmD,0CAAO;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC1IA;AACA;AACA;AACA;AACA;AACA;AAC8B;AACU;AACF;AACE;AACF;AACJ;AACA;AACkB;AACvB;AACG;AAChC;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACO,6BAA6B,+CAAQ;AAC5C;AACA;AACA;AACA;AACA,wBAAwB,6DAAsB;AAC9C;AACA;AACA;AACA;AACA,yBAAyB,yCAAK;AAC9B;AACA;AACA,wBAAwB,sDAAiB;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6BAA6B;AACrD;AACA;AACA,iCAAiC,uDAAW;AAC5C;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA,8BAA8B,yCAAyC;AACvE;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA,0GAA0G,oEAA4B;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iDAAS;AAC1C;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uCAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uDAAW;AAC5C,4CAA4C,+CAAQ,GAAG,2CAAM;AAC7D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8B;AACM;AACG;AAChC,2BAA2B,6CAAO;AACzC;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,2BAA2B,kDAAe,CAAC,GAAG;AAC9C;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AAC6B;AACA;AACE;AACL;AACH;AACA;AACO;AACW;AACT;AACF;AACP;AACI;AACC;AACJ;AACF;AACM;AACF;AACA;AACH;AACA;AACvB;AAC4B;AACD;AACM;AACL;AACJ;AACI;AACA;AACK;AACF;AACF;AACE;AACF;AACF;AACO;AACC;AACX;AACD;AACI;AACI;AACJ;AACG;AACL;AACM;AACJ;AACK;AACL;AACE;AACL;AACO;AACE;AACF;AACH;AACI;AACJ;AACM;AACH;AACF;AACD;AACD;AACE;AACN;AACS;AACD;AACL;AACG;AACJ;AACzB;AAC0B;AACC;AACA;AACF;AACK;AACC;AACC;AACL;AACA;AACG;AACC;AACC;AACF;AACJ;AACD;AACA;AACG;AACL;AACvB;AACsB;AACI;AACO;AACT;AACF;;;;;;;;;;;;;;;;;AC7FtB;AACA;AACA;AACA;AACA;AACgC;AACM;AAC/B;AACP;AACA,yBAAyB,yCAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAgB;AAClD;AACA,sBAAsB,+CAAY,0CAA0C,SAAS;AACrF;AACA,uFAAuF,oDAAgB;AACvG;AACA;AACA;AACA,6BAA6B,sDAAkB;AAC/C,wBAAwB,IAAI,sDAAkB,EAAE;AAChD,+CAA+C,sDAAkB;AACjE,6BAA6B,+CAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACgC;AACuC;AACrC;AACK;AACN;AAC1B,2BAA2B,yDAAa;AAC/C;AACA;AACA;AACA;AACA;AACA,yBAAyB,uEAA2B;AACpD,kCAAkC;AAClC;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAsB;AACnD,0BAA0B,yCAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wDAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA,6BAA6B,2BAA2B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,uBAAuB,wDAAmB,CAAC,8CAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,qEAAyB;AACrE;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;AC3RA;AACA;AAC8C;AAChB;AACS;AAChC,yBAAyB,uCAAI;AACpC;AACA,gBAAgB,eAAe;AAC/B,gCAAgC,uDAAY;AAC5C;AACA;AACA;AACA;AACA,eAAe,2DAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACoC;AACG;AACQ;AACxC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,6CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAO,sCAAsC,UAAU;AAC/D,eAAe,8CAAO,oCAAoC,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1LA;AACA;AACA;AACA;AACA;AACA;AAC0C;AACA;AACI;AAChB;AACc;AAChB;AACsB;AACA;AACJ;AACR;AACM;AACJ;AACM;AACX;AACI;AACI;AACP;AACpC;AACA;AACA;AACA;AACA,QAAQ,2CAAG;AACX;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAgB,SAAS,2DAAkB;AACnD,QAAQ,6DAAkB,SAAS,6DAAoB;AACvD,QAAQ,4CAAU,SAAS,qDAAY;AACvC,QAAQ,kEAAqB,SAAS,gEAAuB;AAC7D,QAAQ,0DAAiB,SAAS,4DAAmB;AACrD,QAAQ,oDAAa,SAAS,wDAAe;AAC7C,QAAQ,kEAAqB,SAAS,gEAAuB;AAC7D,QAAQ,8DAAmB,SAAS,8DAAqB;AACzD,QAAQ,+DAAmB,SAAS,8DAAqB;AACzD,QAAQ,8DAAmB,SAAS,8DAAqB;AACzD,QAAQ,sDAAe,SAAS,0DAAiB;AACjD,QAAQ,0DAAiB,SAAS,4DAAmB;AACrD,QAAQ,4DAAkB,SAAS,6DAAoB;AACvD,QAAQ,8CAAW,SAAS,sDAAa;AACzC,QAAQ,qDAAc,SAAS,yDAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAoB,iBAAiB,2DAAkB;AAC/D;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACoC;AACJ;AACM;AACkB;AACtB;AACc;AACE;AACjB;AACjC;AACA;AACA;AACA,6BAA6B,+CAAQ,GAAG,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,+BAA+B,6CAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB;AACjD,8CAA8C,yJAAyJ,+DAA0B,kDAAkD,+DAA0B,2EAA2E;AACxX;AACA;AACA;AACA;AACA,eAAe,iEAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,YAAY,qDAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,uEAA2B;AAC3E,yCAAyC,qDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yDAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7LA;AACA;AACsC;AACtC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wBAAwB;AAC9C,kBAAkB,yBAAyB;AAC3C,kBAAkB,wBAAwB;AAC1C,kBAAkB,yBAAyB;AAC3C,kBAAkB,wBAAwB;AAC1C,kBAAkB,wBAAwB;AAC1C,oBAAoB,yBAAyB;AAC7C,kBAAkB,wBAAwB;AAC1C,kBAAkB,yBAAyB;AAC3C,kBAAkB,wBAAwB;AAC1C,kBAAkB,yBAAyB;AAC3C,kBAAkB,wBAAwB;AAC1C,sBAAsB,wBAAwB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C,kBAAkB,2BAA2B;AAC7C,oBAAoB,2BAA2B;AAC/C,qBAAqB,2BAA2B;AAChD,kBAAkB,4BAA4B;AAC9C,mBAAmB,4BAA4B;AAC/C,iBAAiB,2BAA2B;AAC5C,kBAAkB,2BAA2B;AAC7C,oBAAoB,2BAA2B;AAC/C,qBAAqB,2BAA2B;AAChD,kBAAkB,2BAA2B;AAC7C,mBAAmB,2BAA2B;AAC9C,iBAAiB,2BAA2B;AAC5C,kBAAkB,2BAA2B;AAC7C,oBAAoB,2BAA2B;AAC/C,qBAAqB,2BAA2B;AAChD,kBAAkB,2BAA2B;AAC7C,mBAAmB,2BAA2B;AAC9C,iBAAiB,2BAA2B;AAC5C,kBAAkB,2BAA2B;AAC7C,oBAAoB,2BAA2B;AAC/C,qBAAqB,2BAA2B;AAChD,kBAAkB,2BAA2B;AAC7C,mBAAmB,2BAA2B;AAC9C,iBAAiB,2BAA2B;AAC5C,kBAAkB,2BAA2B;AAC7C,oBAAoB,2BAA2B;AAC/C,qBAAqB,2BAA2B;AAChD,kBAAkB,2BAA2B;AAC7C,mBAAmB,2BAA2B;AAC9C,iBAAiB,2BAA2B;AAC5C,kBAAkB,2BAA2B;AAC7C,oBAAoB,4BAA4B;AAChD,qBAAqB,4BAA4B;AACjD,kBAAkB,2BAA2B;AAC7C,mBAAmB,2BAA2B;AAC9C,iBAAiB,4BAA4B;AAC7C,kBAAkB,4BAA4B;AAC9C,oBAAoB,2BAA2B;AAC/C,qBAAqB,2BAA2B;AAChD,kBAAkB,4BAA4B;AAC9C,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,iCAAiC,UAAU;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,uCAAuC,WAAW;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,2CAA2C,eAAe;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,wCAAwC,UAAU;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,4CAA4C,cAAc;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,uCAAuC,UAAU;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY,uCAAuC,KAAK,IAAI,UAAU;AAChG;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,uCAAuC,KAAK,IAAI,UAAU;AAC5F;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,uCAAuC,UAAU;AACnF;AACA;AACA,sBAAsB,+CAAY,mCAAmC,MAAM,IAAI,MAAM;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AClXA;AACA;AAC8B;AACY;AACR;AACI;AACC;AACQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,mBAAmB,+CAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,wDAAwD,2BAA2B;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yDAAoB;AACzC,wDAAwD,yDAAoB;AAC5E;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,sCAAsC;AACtC,uCAAuC;AACvC,0BAA0B;AAC1B,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qDAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kDAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,QAAQ,uDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB,2DAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4DAAuB;AACzC;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4DAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC7eA;AACA;AAC4C;AACZ;AACF;AACA;AACI;AACK;AACa;AACpD;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gEAA2B;AAC7C;AACA,qBAAqB,sDAAiB;AACtC;AACA,QAAQ,4DAAuB;AAC/B;AACA;AACA;AACA,cAAc,sDAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAyB;AACjC;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,uCAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,0CAAO;AAClE;AACA;AACA;AACA,qBAAqB,yDAAoB;AACzC,QAAQ,8CAAO,6DAA6D,cAAc,cAAc,cAAc;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,6DAA6D,+DAA0B,EAAE;AACzF;AACA;AACA;AACA,eAAe,yDAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,6CAAU;AACrD,0BAA0B,4DAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,mBAAmB,qDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,0CAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB,MAAM,mBAAmB,0CAAO,iBAAiB;AACnG;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAiB;AAC7B,iEAAiE,eAAe,yBAAyB,eAAe;AACxH,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACF;AACJ;AACK;AACP;AACzB,2BAA2B,+CAAQ;AAC1C;AACA;AACA;AACA,wBAAwB,6DAAsB;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,iDAAS;AACtC,yBAAyB,yCAAK;AAC9B;AACA;AACA,wBAAwB,sDAAiB;AACzC,SAAS;AACT;AACA;AACA;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACgC;AACM;AACR;AACI;AACU;AACM;AACE;AACpD;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,+CAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yDAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,0CAA0C,UAAU;AACtF;AACA;AACA;AACA,yBAAyB,yCAAK;AAC9B,kCAAkC,mBAAmB;AACrD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,eAAe,yDAAiB;AAChC;AACA;AACA,0BAA0B,4DAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,6CAA6C;AAC7C;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8CAAO;AAC5C,oFAAoF,8DAAuB;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,8DAAuB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yCAAK,CAAC,2DAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yCAAK,CAAC,2DAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4CAAS;AACrC;AACA,YAAY,qDAAS;AACrB;AACA,gCAAgC,4CAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oEAA0B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnRA;AACA;AACA;AACgC;AACwB;AACtB;AACkB;AACpD;AACO,0BAA0B,+CAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,6DAAsB;AACpG,qBAAqB,4DAAuB;AAC5C,sBAAsB,4DAAuB;AAC7C;AACA;AACA,eAAe,4DAAoB;AACnC;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD,iDAAiD,4DAAqB;AACtE,iDAAiD,6DAAsB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA,wBAAwB,6DAAsB;AAC9C;AACA;AACA;AACA,wBAAwB,4DAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAuB;AAC5C,sBAAsB,4DAAuB;AAC7C,YAAY,uDAAW;AACvB,yBAAyB,4DAAuB;AAChD,0BAA0B,4DAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,sBAAsB;AACjG;AACA;AACA,6BAA6B,8DAAuB;AACpD,YAAY,qDAAiB;AAC7B;AACA,aAAa;AACb;AACA,kCAAkC,6DAAsB;AACxD,YAAY,qDAAiB;AAC7B;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAC2C;AAC3C;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,cAAc;AACnE,kDAAkD,4BAA4B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnNA;AACA;AACoC;AACiB;AACrB;AACE;AACK;AACI;AAC3C;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yCAAK,2BAA2B,0BAA0B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,6CAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB,gCAAgC,mCAAmC;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB,gCAAgC,mCAAmC;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAU;AACtB;AACA,YAAY,kDAAe;AAC3B,WAAW,mDAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,2BAA2B,yEAAyE;AACpG;AACA;AACA;AACA;AACA;AACA,oIAAoI;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnHA;AACA;AACuC;AAChC;AACP;AACA,eAAe,8DAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACgD;AACN;AACI;AACR;AACU;AACzC;AACP;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;AACO;AACP;AACA;AACA;AACA;AACA,CAAC,kDAAkD;AACnD;AACA;AACA;AACO;AACP;AACA,YAAY,2DAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAY,gDAAgD,aAAa;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAY;AACjC,8BAA8B,+CAAY;AAC1C;AACA;AACA;AACA,8BAA8B,+CAAY;AAC1C;AACA,+BAA+B,yDAAa;AAC5C;AACA;AACA,qBAAqB,+CAAS;AAC9B,8BAA8B,+CAAY;AAC1C;AACA,+BAA+B,mDAAU;AACzC;AACA;AACA,0BAA0B,+CAAY,8CAA8C,QAAQ;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9HA;AACgC;AACQ;AACN;AACK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,iDAAS;AACzC;AACA,eAAe,2DAAmB;AAClC;AACA;AACA,yCAAyC,+CAA+C;AACxF;AACA,0BAA0B,yCAAK,YAAY,4DAAuB;AAClE;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AAC4C;AACd;AACM;AACiB;AACP;AACQ;AACE;AACT;AACD;AACJ;AACF;AACH;AACH;AACc;AACE;AACZ;AACtC;AACA;AACA;AACA;AACA,KAAK,2DAAgB;AACrB,KAAK,gDAAa;AAClB,KAAK,gEAAqB;AAC1B,KAAK,mEAAsB;AAC3B;AACA;AACA,KAAK,mEAAsB;AAC3B,KAAK,gEAAqB;AAC1B,KAAK,2DAAgB;AACrB,KAAK,gDAAa;AAClB;AACO,oBAAoB,6CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,uCAAuC,wHAAwH,gEAA0B,oHAAoH;AAC7S,wBAAwB;AACxB,wCAAwC;AACxC;AACA;AACA,6BAA6B,kDAAO,yBAAyB,6DAAkB,GAAG,2DAAgB;AAClG;AACA,gCAAgC,kDAAO,0BAA0B,6DAAkB,GAAG,2DAAgB;AACtG;AACA;AACA,eAAe,uDAAc;AAC7B;AACA;AACA;AACA;AACA,0BAA0B,6DAAuB;AACjD;AACA;AACA;AACA;AACA,0BAA0B,6DAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD,4CAA4C,eAAe;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iEAA2B;AAChE;AACA;AACA,0DAA0D,iEAA2B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qFAAqF,iEAA2B,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA,8BAA8B,uEAA2B;AACzD;AACA;AACA;AACA,oDAAoD,uEAA2B;AAC/E;AACA;AACA;AACA;AACA,qCAAqC,mEAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wDAAU;AAC1C;AACA;AACA;AACA;AACA,gCAAgC,+CAAK;AACrC;AACA;AACA;AACA;AACA,iCAAiC,uDAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mDAAU;AAC1C;AACA;AACA;AACA,wCAAwC;AACxC,gCAAgC,kDAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qEAAyB;AAC5D;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B,EAAE,sDAAW;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uEAA2B;AAClD;AACA,yBAAyB,qEAAyB;AAClD;AACA;AACA;AACA;AACA;AACA,kDAAkD,gDAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qEAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uEAA2B;AAClD;AACA,0DAA0D,gEAAqB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,qEAAyB;AAC9E;AACA;AACA;AACA;AACA,uBAAuB,uEAA2B;AAClD;AACA,2DAA2D,mEAAsB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,qEAAyB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uEAA2B;AAClD;AACA,6BAA6B,uDAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,uEAA2B;AAC9E;AACA;AACA,8BAA8B,qEAAyB;AACvD;AACA;AACA,6BAA6B,uCAAI;AACjC;AACA;AACA;AACA,6CAA6C,qEAAyB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAa;AAC1C;AACA;AACA;AACA,uDAAuD,qEAAyB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,uEAA2B;AAC1E,+CAA+C,qEAAyB;AACxE;AACA;AACA,gEAAgE,mEAAwB;AACxF;AACA,0CAA0C,kDAAO,CAAC,6DAAkB;AACpE;AACA;AACA,0CAA0C,kDAAO,CAAC,2DAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA,6BAA6B,sDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAY;AAClC;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iDAAiD,uEAA2B,EAAE,yDAAgB;AAC9F;AACA,0CAA0C,mEAAwB;AAClE;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,iDAAiD,uEAA2B,EAAE,yDAAgB;AAC9F;AACA,0CAA0C,mEAAwB;AAClE;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,iDAAiD,uEAA2B,EAAE,+DAAsB;AACpG;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,iDAAiD,uEAA2B,EAAE,+DAAsB;AACpG;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,YAAY,kDAAe;AAC3B;AACA,YAAY,oDAAiB;AAC7B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;;AC5rBA;AACA;AACA;AACuE;AACrC;AACK;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B,sBAAsB,yDAAa;AAC1C;AACA;AACA,yBAAyB,gEAA2B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uEAA2B;AACpD;AACA;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjMA;AACA;AACoC;AACiB;AACrB;AACE;AACK;AACD;AACtC;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,6CAAO;AAC3C;AACA;AACA,yBAAyB,gEAA2B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAuB;AACtC;AACA;AACA;AACA,wBAAwB,2BAA2B,GAAG;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,qCAAqC,wBAAwB;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAiB;AACjC,gBAAgB,qDAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY,qDAAqD,UAAU;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAU;AACtB;AACA,YAAY,oDAAiB;AAC7B,WAAW,mDAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9OA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACE;AACC;AACD;AAC/B,2BAA2B,6CAAO;AACzC;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAuB,iBAAiB,8DAAuB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8DAAuB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACF;AACa;AACR;AACD;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,6CAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClmEAA8B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE,uDAAiB;AACzD;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAiB;;;;;;;;;;;;;;;;;;;ACjR/C;AACA;AACA;AACA;AACoC;AACG;AACN;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AAChD,4BAA4B,6CAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4C;AACN;AACA;AACR;AACkB;AACd;AACK;AACsB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA,iFAAiF,0CAAO;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAAO;AACrC;AACA;AACA;AACA;AACA;AACO,wBAAwB,yDAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yDAAoB;AACzC,QAAQ,8CAAO,6DAA6D,cAAc,cAAc,cAAc;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,6DAA6D,+DAA0B;AACvF;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG,0CAAO;AAC3G;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAkB;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,0CAAO;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,4CAAS;AACxB;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAuB;AACnD;AACA;AACA,iCAAiC,4DAAuB;AACxD;AACA;AACA,4BAA4B,4DAAuB;AACnD;AACA;AACA,iCAAiC,4DAAuB;AACxD;AACA;AACA;AACA,0DAA0D,oDAAY,2CAA2C,oDAAY;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI,GAAG,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+CAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,0CAAO,GAAG,4CAAS;AACzE;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,0BAA0B,yDAAoB;AAC9C;AACA,0BAA0B,+CAAY,qDAAqD,IAAI;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA,gBAAgB,2CAA2C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAyB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,6CAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA,gBAAgB,4BAA4B,EAAE,wDAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,0CAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,4CAAS;AACvF;AACA;AACA,kGAAkG,0CAAO;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,0CAAO;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB,QAAQ;AAC1B,kBAAkB,QAAQ;AAC1B,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B,kBAAkB,QAAQ;AAC1B;AACA,kBAAkB,QAAQ;AAC1B,kBAAkB,cAAc;AAChC;AACA,kBAAkB,cAAc;AAChC,kBAAkB,QAAQ;AAC1B,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yBAAyB,WAAW,IAAI;AACxD;AACA;AACA,iEAAiE,6CAAU;AAC3E;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA,gBAAgB,iKAAiK;AACjL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,4CAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mBAAmB;AACtE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uCAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,+BAA+B,0CAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/jCA;AACA;AACqD;AACrB;AACgB;AACd;AACK;AAChC,yBAAyB,yDAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAiB,sDAAsD,4DAAuB,+DAA+D,kBAAkB;AACvL;AACA;AACA;AACA;AACA,QAAQ,qDAAiB,sDAAsD,4DAAuB,iEAAiE,mBAAmB;AAC1L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAuB;AAC/C;AACA;AACA,wBAAwB,4DAAuB;AAC/C;AACA;AACA;AACA,wBAAwB,4DAAuB;AAC/C;AACA;AACA;AACA;AACA,YAAY,4DAAuB;AACnC;AACA,YAAY,qDAAiB,iCAAiC,kBAAkB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAU;AACtB;AACA,YAAY,kDAAe;AAC3B,WAAW,mDAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjKA;AACA;AACqD;AACL;AACT;AAChC,2BAA2B,yDAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAe;AAC3B;AACA,YAAY,kDAAe;AAC3B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACqD;AACrB;AACuC;AACrC;AACK;AAChC,yBAAyB,yDAAa;AAC7C;AACA;AACA;AACA,gCAAgC;AAChC;AACA,wBAAwB,uEAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,oBAAoB,mCAAmC;AAC7G;AACA;AACA;AACA;AACA;AACA,yBAAyB,yDAAoB;AAC7C;AACA,YAAY,qDAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAiB;AACrC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAU;AACtB;AACA,YAAY,kDAAe;AAC3B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AACqD;AACkB;AACd;AAClB;AACD;AAC/B,wBAAwB,yDAAa;AAC5C,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,uCAAuC,uCAAuC,oEAA6B,EAAE;AAC7G;AACA;AACA;AACA,eAAe,0DAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sEAA0B;AAC3C,iBAAiB,uEAA2B;AAC5C;AACA,sCAAsC,sEAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uEAA2B;AAC5C,iBAAiB,uEAA2B;AAC5C;AACA,mDAAmD,+DAAwB;AAC3E;AACA;AACA,wDAAwD,8DAAuB;AAC/E;AACA;AACA,sCAAsC,uEAA2B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAU;AACtB;AACA,YAAY,oDAAiB;AAC7B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACoC;AACG;AACD;AAC/B,uBAAuB,6CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE,uDAAiB;;;;;;;;;;;;;;;;;;;ACjLxD;AACA;AACqD;AACL;AACT;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AACxB,oBAAoB,yDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAe;AAC3B;AACA,YAAY,kDAAe;AAC3B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACoC;AACF;AACK;AACI;AAC3C;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO,mBAAmB,6CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qDAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAiB;AAChC;AACA;AACA,eAAe,uDAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6GAA6G;AAC7G;AACA;AACA;AACA,kBAAkB,+CAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4DAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChKA;AACA;AACA;AACA;AACA;AACgC;AACF;AACA;AACI;AACK;AACD;AAC/B,4BAA4B,uCAAI;AACvC;AACA;AACA;AACA;AACA,eAAe,8DAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI;AAC7B;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA,yDAAyD,4CAAS;AAClE,4BAA4B,yCAAK,mDAAmD,UAAU;AAC9F;AACA;AACA;AACA;AACA,wCAAwC,4CAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA,wBAAwB,0CAAO;AAC/B,0BAA0B,0CAAO,kBAAkB,4CAAS;AAC5D,sBAAsB,+CAAY,2CAA2C,UAAU;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAuB,iCAAiC,gBAAgB;AACpG;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0CAAO;AACtD;AACA;AACA;AACA;AACA;AACA,gDAAgD,8CAAW;AAC3D;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uCAAI;AAC7B;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC/NA;AACA;AACA;AACA;AACA;AACqD;AACG;AAClB;AACR;AACI;AACmC;AAC/B;AAC/B,2BAA2B,+CAAQ;AAC1C;AACA;AACA;AACA,wBAAwB,8DAAuB,EAAE;AACjD;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B,4BAA4B;AAC5B,mBAAmB,gEAAyB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA,eAAe,4DAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA,2DAA2D,+DAA0B;AACrF;AACA,4BAA4B,6DAAsB;AAClD;AACA;AACA;AACA,iCAAiC,6DAAsB;AACvD;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6DAAsB;AAC9C;AACA,oDAAoD;AACpD;AACA;AACA,6BAA6B,8DAAuB;AACpD;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gEAAyB,WAAW,gEAAyB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,0CAAO;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8DAAuB;AACxC;AACA;AACA;AACA,2DAA2D,0CAAO;AAClE;AACA;AACA,mGAAmG,+DAA0B;AAC7H;AACA;AACA,iBAAiB,8DAAuB;AACxC;AACA;AACA;AACA,2DAA2D,4CAAS;AACpE;AACA;AACA,mGAAmG,+DAA0B;AAC7H;AACA;AACA,iBAAiB,6DAAsB;AACvC;AACA;AACA,iBAAiB,8DAAuB;AACxC;AACA;AACA;AACA,0BAA0B,+CAAY,oCAAoC,eAAe;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAAuB;AACvC;AACA;AACA,gBAAgB,8DAAuB;AACvC;AACA;AACA;AACA;AACA,qBAAqB,8DAAuB;AAC5C;AACA;AACA,oBAAoB,8DAAuB;AAC3C;AACA,qBAAqB,gEAAyB;AAC9C;AACA;AACA,oBAAoB,8DAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAe;AAC3B,UAAU,4CAAS;AACnB,YAAY,kDAAe;AAC3B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;;;ACxPA;AACA;AACA;AACA;AACA;AACqD;AACrB;AACM;AACiC;AACjC;AAC/B,qBAAqB,+CAAQ;AACpC;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA,wBAAwB,6DAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA,wBAAwB,OAAO;AAC/B;AACA,yBAAyB;AACzB;AACA,qBAAqB,qDAAS;AAC9B;AACA,wBAAwB,cAAc;AACtC,yBAAyB;AACzB;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA,SAAS;AACT;AACA;AACA,oDAAoD,eAAe;AACnE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA,gBAAgB,kDAAM;AACtB;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,0BAA0B,+CAAY,mCAAmC,WAAW;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B,mCAAmC,WAAW;AAC9C,oBAAoB,qDAAiB;AACrC;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C,oBAAoB,qDAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,QAAQ,qDAAiB;AACzB,gCAAgC,MAAM,GAAG,WAAW;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAU;AACtB,UAAU,4CAAS;AACnB,YAAY,kDAAe;AAC3B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;ACvNA;AACA;AACA;AACqD;AACL;AACc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACO,yBAAyB,yDAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,2BAA2B,kDAAe;AAC1C,yBAAyB,4CAAS;AAClC,2BAA2B,oDAAiB;AAC5C,0BAA0B,mDAAgB;AAC1C;AACA,qCAAqC,SAAS,cAAc;AAC5D,0CAA0C,iFAAiF;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6CAAM;AAC9C;AACA,qCAAqC,6CAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF,wDAAwD,qBAAqB;AAC7E;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mDAAmD;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI,EAAE,IAAI,GAAG,QAAQ,EAAE,QAAQ,QAAQ,IAAI,EAAE,IAAI;AAC9E,6BAA6B,QAAQ,EAAE,QAAQ,QAAQ,IAAI,EAAE,GAAG;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qDAAc;AACvC,uBAAuB,qDAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI,EAAE,IAAI,GAAG,QAAQ,EAAE,QAAQ,IAAI,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,eAAe,KAAK,SAAS;AACvE;AACA;AACA;AACA;AACA,uDAAuD,sBAAsB,gBAAgB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,sBAAsB,4DAA4D;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,sBAAsB;AAC/E,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gDAAa;AACtC,6BAA6B,mDAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACjgBA;AACA;AAC4C;AACR;AACI;AACV;AACE;AACO;AACD;AACtC;AACA;AACA;AACA;AACA;AACO,qBAAqB,6CAAO;AACnC,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAe;AAC9B;AACA;AACA,2BAA2B;AAC3B;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,qDAAqD,iLAAiL,cAAc,yBAAyB,YAAY,mDAAmD,0BAA0B;AACtW;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yDAAyD,EAAE;AACpF;AACA;AACA;AACA,yBAAyB;AACzB,yDAAyD,WAAW;AACpE,iDAAiD,aAAa;AAC9D,UAAU,EAAE;AACZ;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D,gGAAgG,wFAAwF;AACxL,gDAAgD;AAChD;AACA,2FAA2F,aAAa,uBAAuB;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0BAA0B;AACpE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mDAAmD,sDAAkB;AACrE,aAAa;AACb;AACA;AACA;AACA;AACA,mEAAmE,wDAAoB;AACvF;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA,+BAA+B,qDAAW;AAC1C,QAAQ,4DAAwB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,YAAY,+DAAuB;AACnC;AACA;AACA,yDAAyD,mDAAgB;AACzE,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;AClJA;AACsC;AACN;AACM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ;AACjB,UAAU,QAAQ;AAClB,SAAS,kBAAkB;AAC3B,UAAU,kBAAkB;AAC5B,UAAU,kBAAkB;AAC5B,UAAU,kBAAkB;AAC5B,UAAU,kBAAkB;AAC5B,UAAU,kBAAkB;AAC5B,UAAU,kBAAkB;AAC5B,UAAU,kBAAkB;AAC5B,UAAU,kBAAkB;AAC5B,WAAW,kBAAkB;AAC7B,UAAU,kBAAkB;AAC5B,WAAW,kBAAkB;AAC7B,UAAU,kBAAkB;AAC5B,WAAW,kBAAkB;AAC7B,SAAS,kBAAkB;AAC3B,UAAU,kBAAkB;AAC5B,SAAS,kBAAkB;AAC3B,UAAU,kBAAkB;AAC5B,SAAS,kBAAkB;AAC3B,aAAa,kBAAkB;AAC/B,SAAS,kBAAkB;AAC3B,aAAa,kBAAkB;AAC/B,SAAS,kBAAkB;AAC3B,aAAa,kBAAkB;AAC/B,YAAY,kBAAkB;AAC9B,aAAa,kBAAkB;AAC/B,YAAY,kBAAkB;AAC9B,aAAa,kBAAkB;AAC/B;AACA;AACA,cAAc,eAAe;AAC7B,YAAY,eAAe;AAC3B,aAAa,eAAe;AAC5B,YAAY,eAAe;AAC3B,eAAe,eAAe;AAC9B,kBAAkB,eAAe;AACjC,uBAAuB,eAAe;AACtC,oBAAoB,eAAe;AACnC,oBAAoB,eAAe;AACnC,eAAe,eAAe;AAC9B,cAAc,gBAAgB;AAC9B;AACA;AACA,SAAS,sBAAsB;AAC/B,UAAU,uCAAuC;AACjD,YAAY,uCAAuC;AACnD,aAAa,wCAAwC;AACrD,UAAU,wCAAwC;AAClD,WAAW,yCAAyC;AACpD,SAAS,sBAAsB;AAC/B,UAAU,uCAAuC;AACjD,YAAY,uCAAuC;AACnD,aAAa,wCAAwC;AACrD,UAAU,uCAAuC;AACjD,WAAW,wCAAwC;AACnD,SAAS,sBAAsB;AAC/B,UAAU,uCAAuC;AACjD,YAAY,uCAAuC;AACnD,aAAa,wCAAwC;AACrD,UAAU,uCAAuC;AACjD,WAAW,wCAAwC;AACnD,SAAS,sBAAsB;AAC/B,UAAU,uCAAuC;AACjD,YAAY,uCAAuC;AACnD,aAAa,wCAAwC;AACrD,UAAU,uCAAuC;AACjD,WAAW,wCAAwC;AACnD,SAAS,sBAAsB;AAC/B,UAAU,uCAAuC;AACjD,YAAY,uCAAuC;AACnD,aAAa,wCAAwC;AACrD,UAAU,uCAAuC;AACjD,WAAW,wCAAwC;AACnD,SAAS,sBAAsB;AAC/B,UAAU,uCAAuC;AACjD,YAAY,wCAAwC;AACpD,aAAa,yCAAyC;AACtD,UAAU,uCAAuC;AACjD,WAAW,wCAAwC;AACnD,SAAS,uBAAuB;AAChC,UAAU,wCAAwC;AAClD,YAAY,wCAAwC;AACpD,aAAa,yCAAyC;AACtD,UAAU,wCAAwC;AAClD,WAAW,wCAAwC;AACnD,SAAS,sBAAsB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,SAAS,cAAc;AACvB,SAAS,cAAc;AACvB,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB;AACA;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,6BAA6B;AACvC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA,UAAU,iCAAiC;AAC3C,UAAU,gCAAgC;AAC1C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C;AACA,UAAU,wBAAwB;AAClC,UAAU,uBAAuB;AACjC,UAAU,wBAAwB;AAClC,UAAU,yBAAyB;AACnC;AACA,UAAU,6BAA6B;AACvC,UAAU,6BAA6B;AACvC;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA,WAAW,0DAA0D;AACrE,YAAY,gEAAgE;AAC5E,SAAS,yDAAyD;AAClE,UAAU,+DAA+D;AACzE,SAAS,4DAA4D;AACrE,MAAM,KAAK,+DAA+D;AAC1E,MAAM,KAAK,gEAAgE;AAC3E,UAAU,oFAAoF;AAC9F,SAAS,wEAAwE;AACjF,YAAY,gFAAgF;AAC5F,WAAW,0EAA0E;AACrF,YAAY,uEAAuE;AACnF,UAAU,+DAA+D;AACzE,WAAW,sEAAsE;AACjF,SAAS,yDAAyD;AAClE,SAAS,0DAA0D;AACnE,WAAW,mEAAmE;AAC9E,aAAa,mEAAmE;AAChF,YAAY,mEAAmE;AAC/E,YAAY,mEAAmE;AAC/E,+BAA+B,kEAAkE;AACjG,iCAAiC,oEAAoE;AACrG,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,kCAAkC,qEAAqE;AACvG,oCAAoC,uEAAuE;AAC3G,mCAAmC,sEAAsE;AACzG,qCAAqC,wEAAwE;AAC7G,mCAAmC,sEAAsE;AACzG,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,oCAAoC,uEAAuE;AAC3G,kCAAkC,qEAAqE;AACvG,oCAAoC,uEAAuE;AAC3G,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,8BAA8B,iEAAiE;AAC/F,2BAA2B,8DAA8D;AACzF,8BAA8B,iEAAiE;AAC/F,2BAA2B,8DAA8D;AACzF,gCAAgC,mEAAmE;AACnG,6BAA6B,gEAAgE;AAC7F,wBAAwB,2DAA2D;AACnF,uBAAuB,0DAA0D;AACjF,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,6BAA6B,gEAAgE;AAC7F,4BAA4B,+DAA+D;AAC3F,6BAA6B,gEAAgE;AAC7F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,oCAAoC,uEAAuE;AAC3G,iCAAiC,oEAAoE;AACrG,oCAAoC,uEAAuE;AAC3G,iCAAiC,oEAAoE;AACrG,sCAAsC,yEAAyE;AAC/G,mCAAmC,sEAAsE;AACzG,8BAA8B,iEAAiE;AAC/F,6BAA6B,gEAAgE;AAC7F,gCAAgC,mEAAmE;AACnG,kCAAkC,qEAAqE;AACvG,4BAA4B,+DAA+D;AAC3F,8BAA8B,iEAAiE;AAC/F,4BAA4B,+DAA+D;AAC3F,8BAA8B,iEAAiE;AAC/F,8BAA8B,iEAAiE;AAC/F,gCAAgC,mEAAmE;AACnG,oCAAoC,uEAAuE;AAC3G,sCAAsC,yEAAyE;AAC/G,iCAAiC,oEAAoE;AACrG,8BAA8B,iEAAiE;AAC/F,iCAAiC,oEAAoE;AACrG,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,iCAAiC,oEAAoE;AACrG,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,uCAAuC,0EAA0E;AACjH,oCAAoC,uEAAuE;AAC3G,uCAAuC,0EAA0E;AACjH,oCAAoC,uEAAuE;AAC3G,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,uCAAuC,0EAA0E;AACjH,oCAAoC,uEAAuE;AAC3G,4BAA4B,+DAA+D;AAC3F,8BAA8B,iEAAiE;AAC/F,8BAA8B,iEAAiE;AAC/F,gCAAgC,mEAAmE;AACnG,oCAAoC,uEAAuE;AAC3G,sCAAsC,yEAAyE;AAC/G,iCAAiC,oEAAoE;AACrG,8BAA8B,iEAAiE;AAC/F,iCAAiC,oEAAoE;AACrG,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,uCAAuC,0EAA0E;AACjH,oCAAoC,uEAAuE;AAC3G,uCAAuC,0EAA0E;AACjH,oCAAoC,uEAAuE;AAC3G,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,8BAA8B,iEAAiE;AAC/F,gCAAgC,mEAAmE;AACnG,8BAA8B,iEAAiE;AAC/F,gCAAgC,mEAAmE;AACnG,6BAA6B,gEAAgE;AAC7F,+BAA+B,kEAAkE;AACjG,+BAA+B,kEAAkE;AACjG,iCAAiC,oEAAoE;AACrG,4BAA4B,+DAA+D;AAC3F,8BAA8B,iEAAiE;AAC/F,8BAA8B,iEAAiE;AAC/F,gCAAgC,mEAAmE;AACnG,kCAAkC,qEAAqE;AACvG,oCAAoC,uEAAuE;AAC3G,kCAAkC,qEAAqE;AACvG,oCAAoC,uEAAuE;AAC3G,qCAAqC,wEAAwE;AAC7G,uCAAuC,0EAA0E;AACjH,sCAAsC,yEAAyE;AAC/G,wCAAwC,2EAA2E;AACnH,mCAAmC,sEAAsE;AACzG,qCAAqC,wEAAwE;AAC7G,qCAAqC,wEAAwE;AAC7G,uCAAuC,0EAA0E;AACjH,kCAAkC,qEAAqE;AACvG,oCAAoC,uEAAuE;AAC3G,qCAAqC,wEAAwE;AAC7G,uCAAuC,0EAA0E;AACjH,oCAAoC,uEAAuE;AAC3G,sCAAsC,yEAAyE;AAC/G,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,iCAAiC,oEAAoE;AACrG,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,kCAAkC,qEAAqE;AACvG,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,6BAA6B,gEAAgE;AAC7F,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,+BAA+B,kEAAkE;AACjG,4BAA4B,+DAA+D;AAC3F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,iCAAiC,oEAAoE;AACrG,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,gCAAgC,mEAAmE;AACnG,iCAAiC,oEAAoE;AACrG,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,6BAA6B,gEAAgE;AAC7F,8BAA8B,iEAAiE;AAC/F,gCAAgC,mEAAmE;AACnG,iCAAiC,oEAAoE;AACrG,+BAA+B,kEAAkE;AACjG,gCAAgC,mEAAmE;AACnG,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,uCAAuC,0EAA0E;AACjH,oCAAoC,uEAAuE;AAC3G,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,wCAAwC,2EAA2E;AACnH,qCAAqC,wEAAwE;AAC7G,sCAAsC,yEAAyE;AAC/G,mCAAmC,sEAAsE;AACzG,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,qCAAqC,wEAAwE;AAC7G,kCAAkC,qEAAqE;AACvG,0BAA0B,6DAA6D;AACvF,4BAA4B,+DAA+D;AAC3F,wBAAwB,2DAA2D;AACnF,wBAAwB,2DAA2D;AACnF,0BAA0B,6DAA6D;AACvF,4BAA4B,+DAA+D;AAC3F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,0BAA0B,6DAA6D;AACvF,4BAA4B,+DAA+D;AAC3F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,2BAA2B,8DAA8D;AACzF,6BAA6B,gEAAgE;AAC7F,mCAAmC,sEAAsE;AACzG,qCAAqC,wEAAwE;AAC7G,oCAAoC,uEAAuE;AAC3G;AACA;AACA;AACA,KAAK;AACL,4BAA4B,+DAA+D;AAC3F,6BAA6B,gEAAgE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,YAAY,8CAA8C;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,wDAAwD;AACpE;AACA;AACA;AACA;AACA,KAAK;AACL,UAAU,+CAA+C;AACzD,YAAY,4EAA4E;AACxF,aAAa,4CAA4C;AACzD,aAAa,4CAA4C;AACzD,aAAa,sFAAsF;AACnG,cAAc,iDAAiD;AAC/D,cAAc,iDAAiD;AAC/D,aAAa,oFAAoF;AACjG,cAAc,gDAAgD;AAC9D,cAAc,gDAAgD;AAC9D,cAAc,4FAA4F;AAC1G,eAAe,oDAAoD;AACnE,eAAe,oDAAoD;AACnE,YAAY,4CAA4C;AACxD,UAAU,8CAA8C;AACxD,YAAY,+CAA+C;AAC3D;AACA;AACA,eAAe,4BAA4B;AAC3C,wBAAwB,yBAAyB;AACjD,YAAY,sBAAsB;AAClC,qBAAqB,2BAA2B;AAChD,UAAU,uBAAuB;AACjC,eAAe,6CAA6C;AAC5D,iBAAiB,iDAAiD;AAClE,eAAe,4CAA4C;AAC3D,iBAAiB,yCAAyC;AAC1D,iBAAiB,uCAAuC;AACxD,mBAAmB,qDAAqD;AACxE,iBAAiB,oCAAoC;AACrD,kBAAkB,6BAA6B;AAC/C,aAAa,oBAAoB;AACjC,YAAY,yBAAyB;AACrC,YAAY,2BAA2B;AACvC,gBAAgB,yBAAyB;AACzC,gBAAgB,8BAA8B;AAC9C,YAAY,mBAAmB;AAC/B,qBAAqB,yBAAyB;AAC9C,mBAAmB,uBAAuB;AAC1C,YAAY,mBAAmB;AAC/B,gBAAgB,uBAAuB;AACvC,aAAa,oBAAoB;AACjC;AACO;AACP;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,2EAA2E;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA,gGAAgG,SAAS;AACzG;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,oDAAoD;AACpD;AACA;AACA;AACA,sBAAsB,+CAAY,kFAAkF,eAAe;AACnI;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,sBAAsB,+CAAY,8EAA8E,QAAQ;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,oDAAoD,QAAQ;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yCAAK;AAC1C;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,gDAAgD,KAAK;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,wDAAwD,SAAS;AACnG;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2CAA2C;AAC7F;AACA;AACA;AACA;AACA,iEAAiE,kDAAc;AAC/E;AACA,2DAA2D,kBAAkB,oBAAoB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;AC70CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8B;AACE;AACM;AACR;AACkB;AACd;AACY;AACC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACO,sBAAsB,yDAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA,4DAA4D;AAC5D;AACA,8BAA8B,gEAA2B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4CAAS,CAAC,KAAK,kDAAe,CAAC,GAAG;AACvD,qBAAqB,yDAAoB;AACzC,QAAQ,8CAAO,6DAA6D,cAAc,cAAc,cAAc;AACtH;AACA;AACA;AACA;AACA;AACA,kCAAkC,0CAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0CAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA,0BAA0B,sDAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA,yBAAyB,6DAAsB;AAC/C,wBAAwB;AACxB;AACA,8BAA8B,8DAAuB;AACrD,gCAAgC;AAChC;AACA,8BAA8B,8DAAuB,iBAAiB,8DAAuB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B,WAAW,IAAI;AAC9D;AACA;AACA;AACA;AACA;AACA,uDAAuD,4CAAS;AAChE;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B;AAChE;AACA,wFAAwF,0BAA0B;AAClH;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAK;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtYA;AACA;AACA;AACA;AACA;AACqD;AACnB;AACK;AACD;AAC/B,uBAAuB,2CAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAU;AACtB;AACA,YAAY,kDAAe;AAC3B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;ACpGA;AACgC;AACO;AAChC,uBAAuB,yCAAK;AACnC;AACA,eAAe,yDAAiB;AAChC;AACA;AACA,4CAA4C,kEAAkE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACsC;AACC;AAChC,qBAAqB,+CAAQ;AACpC;AACA,eAAe,uDAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACoC;AACiB;AACf;AACJ;AACK;AACI;AAC3C;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACO;AACP;AACA;AACA;AACA,CAAC,kDAAkD;AAC5C,0BAA0B,6CAAO;AACxC,kBAAkB,8EAA8E;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,mEAA8B;AACxG;AACA;AACA,0BAA0B,+CAAY,oCAAoC,eAAe;AACzF;AACA;AACA,wBAAwB;AACxB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8BAA8B;AAC9C;AACA,gCAAgC,iDAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAuB;AACnC;AACA;AACA,gBAAgB,8DAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAU;AACtB;AACA,YAAY,oDAAiB;AAC7B,WAAW,mDAAgB;AAC3B;;;;;;;;;;;;;;;;;;;ACvLA;AACA;AACgC;AACF;AACS;AACa;AACpD;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,uCAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,0BAA0B,qBAAqB;AAC3G;AACA;AACA;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC,yBAAyB,8CAAO;AAChC,8BAA8B,yCAAK,0BAA0B,sBAAsB;AACnF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChHA;AACA;AACqD;AACxB;AAC7B;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,MAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,mCAAmC,kDAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAW;AACpC,2BAA2B,gDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAA4B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kDAAe,GAAG,oDAAiB;AACtE,oCAAoC,mDAAgB,GAAG,mDAAgB;AACvE;AACA,2BAA2B,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,MAAM;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wDAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChRA;AACA;AACqD;AACrB;AACF;AACS;AACD;AAC/B;AACP;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,uCAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC,6BAA6B,yCAAK,oBAAoB,sBAAsB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA,oCAAoC,iDAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAe;AAC3B;AACA,YAAY,oDAAiB;AAC7B,WAAW,mDAAgB;AAC3B;AACA;;;;;;;;;;;;;;;;;;;;ACxMA;AACA;AACoC;AACE;AACJ;AACK;AACQ;AAC/C;AACA;AACA;AACA;AACO,uBAAuB,6CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+CAAQ,QAAQ;AACzC,iCAAiC;AACjC,kCAAkC,+CAAQ;AAC1C;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,yDAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,sDAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;;;;;;;;;;;;;;;;;AChSA;AACA;AACA;AACA;AACA;AACsC;AACA;AACtC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,+BAA+B,+CAAQ;AACvC,4BAA4B,+CAAQ;AACpC,sCAAsC;AACtC,mCAAmC;AACnC;AACA,0BAA0B;AAC1B;AACA,wBAAwB;AACxB,0BAA0B;AAC1B,6BAA6B;AAC7B,oCAAoC;AACpC;AACA,yBAAyB;AACzB,0BAA0B;AAC1B,sCAAsC;AACtC,uCAAuC;AACvC,4BAA4B;AAC5B,6BAA6B;AAC7B,8BAA8B;AAC9B,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uHAAuH;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjMA;AACA;AACA;AACA;AACA;AACgC;AACC;AAC1B,iCAAiC,yCAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAK;AACtC;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAK;AACtC;AACA,wBAAwB,8CAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA,YAAY,uDAAmB;AAC/B,uBAAuB,8CAAO;AAC9B;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA,YAAY,uDAAmB;AAC/B,uBAAuB,8CAAO;AAC9B;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACgC;AACuC;AACrC;AACkB;AACb;AACQ;AAC/C;AACA;AACA;AACA,kBAAkB,+CAAY,2CAA2C,SAAS;AAClF;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,2CAA2C,SAAS;AACtF;AACA,KAAK;AACL;AACO,4BAA4B,yDAAa;AAChD;AACA;AACA;AACA;AACA,0BAA0B,4DAAuB;AACjD;AACA;AACA;AACA;AACA,yBAAyB,uEAA2B;AACpD;AACA,sBAAsB,8CAAO;AAC7B;AACA;AACA;AACA,eAAe,8DAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA,2BAA2B,yCAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6DAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChGA;AACA;AAC8B;AACkB;AACT;AAChC,0BAA0B,uCAAI;AACrC;AACA,gBAAgB,eAAe;AAC/B,kCAAkC,yDAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACgC;AACQ;AACF;AACR;AACI;AACkB;AACpD;AACO,sBAAsB,+CAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+DAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uDAAW;AAC9B,2BAA2B,uDAAe;AAC1C,oCAAoC,yBAAyB;AAC7D,0BAA0B,4DAAuB;AACjD,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA,2CAA2C,SAAS;AACpD;AACA,oDAAoD,SAAS;AAC7D,uCAAuC,SAAS,cAAc,kBAAkB,0CAAO,iBAAiB;AACxG,wBAAwB,cAAc;AACtC,YAAY,qDAAiB,oCAAoC,0CAA0C;AAC3G;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDA;AACA;AACkC;AACI;AACtC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,2CAA2C,aAAa;AAC1F;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,wDAAwD,yBAAyB,GAAG,UAAU;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY,qDAAqD,QAAQ;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yDAAoB,QAAQ,GAAG,OAAO;AACxD;AACA;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AACI;AACR;AACF;AACI;AACK;AACQ;AACxC;AACP;AACA;AACA;AACA,CAAC,wCAAwC;AAClC,qBAAqB,6CAAO;AACnC,mCAAmC;AACnC;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAuB;AAC5C;AACA;AACA;AACA;AACA,QAAQ,mEAA2B;AACnC;AACA;AACA;AACA;AACA,eAAe,uDAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAuB;AACtC;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,yCAAK;AACnD;AACA;AACA;AACA;AACA;AACA,0CAA0C,yCAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,0CAAO;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,4BAA4B,uBAAuB;AACnD;AACA,0EAA0E,0CAAO;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,8CAAO;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAuB;AAC9C;AACA;AACA;AACA,wBAAwB,8CAAO;AAC/B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8CAAO;AACnC,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACntH7B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAM;AACrB,eAAe,qBAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM,6BAA6B,MAAM;AACjF;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AAC8B;AACa;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uCAAI;;;;;;;;;;;;;;;;;;;ACpEf;AACA;AAC8B;AACQ;AACJ;AACK;AACvC;AACO,sBAAsB,+CAAQ;AACrC;AACA;AACA,wBAAwB,8DAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gDAAa;AACtD;AACA,yGAAyG,+DAA0B;AACnI;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,8DAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAA4D;AAC5E;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClHA;AACA;AACA;AACoC;AACG;AACV;AACO;AACpC;AACA;AACA;AACA,QAAQ,0CAAG;AACX;AACA;AACO,6BAA6B,6CAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAqB;AAC7B;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACoC;AACE;AACJ;AACK;AACQ;AACxC;AACP;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACO,oBAAoB,6CAAO;AAClC;AACA;AACA;AACA;AACA;AACA,6BAA6B,+CAAQ;AACrC;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yCAAyC,sDAAiB,EAAE;AAChG;AACA,8BAA8B,+CAAQ;AACtC;AACA;AACA;AACA,eAAe,sDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,0BAA0B,+CAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,8CAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvPA;AACA;AACA;AACA;AACA;AACA;AACsC;AACtC;AACO;AACP;AACA;AACA,mBAAmB,mDAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,mBAAmB,mDAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACsD;AACP;AACZ;AACF;AACE;AACU;AACY;AACtB;AACE;AACQ;AACV;AACc;AACA;AACD;AACX;AACrC;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,kDAAkD,6DAAY;AAC9D;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA;AACA,gDAAgD,qDAAS;AACzD;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA,oBAAoB,8CAAK,WAAW,wDAAe;AACnD;AACA,IAAI,wEAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA,gBAAgB,8CAAK,WAAW,wDAAe;AAC/C;AACA,IAAI,wEAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,gCAAgC;AAC1C,UAAU,gCAAgC;AAC1C,UAAU,gCAAgC;AAC1C,UAAU,gCAAgC;AAC1C,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA,gBAAgB,8CAAK,WAAW,wDAAe;AAC/C;AACA,IAAI,wEAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA,SAAS,kBAAkB,uDAAU;AACrC,YAAY,qDAAS;AACrB;AACA;AACA,SAAS,kBAAkB,uDAAU;AACrC,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,6BAA6B,uDAAU;AACvC,6BAA6B,uDAAU;AACvC,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,6BAA6B,uDAAU;AACvC,6BAA6B,uDAAU;AACvC,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA,SAAS;AACT;AACA,IAAI,wDAAkB,eAAe,WAAW;AAChD,kBAAkB,yDAAkB;AACpC,sBAAsB,8CAAK;AAC3B;AACA;AACA,KAAK;AACL;AACA,0BAA0B,qDAAS,GAAG,eAAe;AACrD;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA,4BAA4B,uDAAgB;AAC5C,IAAI,sFAAmC;AACvC;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;AACA;AACA;AACA,yBAAyB,wEAAwE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAyE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAiE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAsB,cAAc,oBAAoB;AAC5D;AACA,QAAQ,uDAAgB;AACxB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,sFAAmC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,+BAA+B,yDAAkB,gCAAgC,iBAAiB;AAClG;AACA,gBAAgB,gBAAgB;AAChC,gCAAgC,kDAAkD;AAClF;AACA;AACA,oBAAoB,+CAA+C;AACnE;AACA;AACA;AACA,yBAAyB,8CAA8C,+CAAO,EAAE;AAChF,wCAAwC,iBAAiB;AACzD,2CAA2C,4BAA4B;AACvE;AACA;AACA;AACA,wEAAwE,gEAAmB;AAC3F;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,qCAAqC;AAC9D;AACA;AACA;AACA,yBAAyB,qCAAqC;AAC9D;AACA;AACA;AACA,yBAAyB,6CAA6C;AACtE;AACA;AACA;AACA;AACA,yBAAyB,oDAAoD;AAC7E;AACA;AACA;AACA;AACA,yBAAyB,mDAAmD;AAC5E;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAA0D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAsB,aAAa,oBAAoB;AAC3D;AACA,QAAQ,uDAAgB;AACxB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,sFAAmC;AACvC;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,gEAAgE;AACzF;AACA;AACA;AACA,yBAAyB,4FAA4F;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,6FAA6F;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAsB,aAAa,oBAAoB;AAC3D;AACA,QAAQ,uDAAgB;AACxB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,sFAAmC;AACvC;AACA;AACA;AACA;AACA;AACA,oCAAoC,iEAAe;AACnD;AACA;AACA,YAAY,0DAAW;AACvB;AACA;AACA,QAAQ,uDAAgB;AACxB,QAAQ,uDAAgB;AACxB;AACA,cAAc,2EAAwB;AACtC;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA,qBAAqB,gEAAgE;AACrF;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAA+D;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gEAAgE;AACrF;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAA+D;AACpF;AACA;AACA;AACA;AACA,qBAAqB,gEAAgE;AACrF;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAA+D;AACpF;AACA;AACA;AACA,IAAI,sFAAmC;AACvC;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;AACA;AACA,yBAAyB,wEAAwE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAyE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAiE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kEAAkE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAsB,aAAa,oBAAoB;AAC3D;AACA,QAAQ,uDAAgB;AACxB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,sFAAmC;AACvC;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;AACA;AACA,yBAAyB,wEAAwE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAyE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAiE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAoD;AAC7E;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAsB,aAAa,oBAAoB;AAC3D;AACA,QAAQ,uDAAgB;AACxB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,sFAAmC;AACvC;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,cAAc,0BAA0B;AACxC;AACA;AACA,yBAAyB,mDAAmD;AAC5E;AACA;AACA;AACA;AACA;AACA,yBAAyB,mDAAmD;AAC5E;AACA,sBAAsB,mDAAmD;AACzE;AACA,yBAAyB,mDAAmD;AAC5E;AACA;AACA;AACA;AACA,yBAAyB,mDAAmD;AAC5E;AACA;AACA;AACA;AACA,yBAAyB,mDAAmD;AAC5E;AACA,sBAAsB,mDAAmD;AACzE;AACA,yBAAyB,mDAAmD;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iDAAS;AAChC,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iDAAS;AAChC,SAAS;AACT,KAAK;AACL,aAAa,0BAA0B;AACvC,aAAa,0BAA0B;AACvC,IAAI,kEAAsB;AAC1B;AACA,QAAQ,uDAAgB;AACxB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,IAAI,sFAAmC;AACvC;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,UAAU,qCAAqC;AAC/C,UAAU,uCAAuC;AACjD,UAAU,uCAAuC;AACjD,UAAU,yCAAyC;AACnD,UAAU,yCAAyC;AACnD,UAAU,qCAAqC;AAC/C,UAAU,uCAAuC;AACjD,UAAU,yCAAyC;AACnD,UAAU,yCAAyC;AACnD,UAAU,uCAAuC;AACjD,UAAU,uCAAuC;AACjD,UAAU,qCAAqC;AAC/C;AACA,0BAA0B,6CAA6C;AACvE,4CAA4C,mBAAmB;AAC/D;AACA;AACA,iBAAiB,wDAAe;AAChC,yBAAyB,0DAAW;AACpC;AACA,IAAI,wEAA2B;AAC/B,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA,oCAAoC,wDAAe;AACnD,IAAI,wEAA2B;AAC/B,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC;AACA,oCAAoC,wDAAe;AACnD,IAAI,wEAA2B;AAC/B,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,gBAAgB,aAAa;AAC7B,oFAAoF,YAAY;AAChG,oCAAoC,wDAAe;AACnD,IAAI,wEAA2B;AAC/B,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA,qCAAqC,wDAAe;AACpD,qCAAqC,wDAAe;AACpD;AACA,IAAI,wEAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA,qCAAqC,wDAAe;AACpD,qCAAqC,wDAAe;AACpD;AACA,IAAI,wEAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA,qCAAqC,wDAAe;AACpD,IAAI,wEAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA,qCAAqC,wDAAe;AACpD,IAAI,wEAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA,qCAAqC,wDAAe;AACpD,IAAI,wEAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA,qCAAqC,wDAAe;AACpD,IAAI,wEAA2B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,cAAc,0BAA0B;AACxC;AACA;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;AACA;AACA,yBAAyB,wEAAwE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAyE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAiE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAsB;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,wEAAqB;AACM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACl+B3B;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACoB;AACvB;AAChB;AACA;AACA;AACuB;AACb;AACM;AACR;AACN;AACQ;AACV;AACM;AACE;AACF;AACJ;AACrC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB,yEAAsB;AACxC;AACA,oCAAoC,kDAAO;AAC3C,sCAAsC,sDAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mDAAQ;AACjC,IAAI,yEAA8B;AAClC,cAAc,2EAAwB;AACtC;AACA,oBAAoB,OAAO;AAC3B;AACA,oBAAoB,aAAa;AACjC,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D,yCAAyC,iEAAsB;AAC/D;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAQ;AAC9B;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS,kBAAkB,uDAAU;AACrC;AACA,0BAA0B,kBAAkB;AAC5C;AACA,SAAS,kBAAkB,2CAAI;AAC/B;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B,qCAAqC,uDAAU,eAAe,iDAAU;AACxE;AACA,oBAAoB,qCAAqC;AACzD,oBAAoB,4CAA4C;AAChE;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B,4CAA4C,uDAAU,eAAe,iDAAU;AAC/E;AACA,oBAAoB,qCAAqC,oCAAoC,mBAAmB;AAChH,oBAAoB,4CAA4C,sCAAsC,mBAAmB;AACzH;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAQ;AAC9B;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS,kBAAkB,uDAAU;AACrC;AACA,0BAA0B,iBAAiB;AAC3C;AACA,SAAS;AACT,6BAA6B,uDAAU,kBAAkB,iDAAU,aAAa,wDAAiB,EAAE,uDAAgB;AACnH,6BAA6B,uDAAU;AACvC;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAe;AAC/B,sBAAsB,oDAAQ;AAC9B,qCAAqC,uDAAU,eAAe,iDAAU,aAAa,wDAAiB,EAAE,uDAAgB;AACxH;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS,kBAAkB,kDAAO;AAClC;AACA,0BAA0B,iBAAiB;AAC3C;AACA,SAAS,uDAAuD,0EAA6B;AAC7F;AACA,0BAA0B,iBAAiB;AAC3C;AACA,SAAS,uDAAuD,0EAA6B;AAC7F;AACA,0BAA0B,iBAAiB;AAC3C;AACA,SAAS,uDAAuD,0EAA6B;AAC7F;AACA,0BAA0B,iBAAiB;AAC3C;AACA,SAAS,uDAAuD,0EAA6B;AAC7F;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B,mDAAmD,uDAAU,eAAe,iDAAU;AACtF;AACA,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,8CAA8C,0EAA6B;AAC3E,8CAA8C,0EAA6B;AAC3E,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,8CAA8C,0EAA6B;AAC3E,8CAA8C,0EAA6B;AAC3E,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,8CAA8C,0EAA6B;AAC3E,8CAA8C,0EAA6B;AAC3E,oBAAoB,8BAA8B;AAClD,8CAA8C,0EAA6B;AAC3E,8CAA8C,0EAA6B;AAC3E,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,8CAA8C,0EAA6B;AAC3E,8CAA8C,0EAA6B;AAC3E,oBAAoB,8BAA8B;AAClD,8CAA8C,0EAA6B;AAC3E,8CAA8C,0EAA6B;AAC3E,oBAAoB,8BAA8B;AAClD,8CAA8C,0EAA6B;AAC3E,8CAA8C,0EAA6B;AAC3E,oBAAoB,8BAA8B;AAClD,8CAA8C,6EAAgC;AAC9E,8CAA8C,6EAAgC;AAC9E,oBAAoB,8BAA8B;AAClD,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,8CAA8C,6EAAgC;AAC9E,8CAA8C,6EAAgC;AAC9E,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,8CAA8C,6EAAgC;AAC9E,8CAA8C,6EAAgC;AAC9E,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,8CAA8C,6EAAgC;AAC9E,8CAA8C,6EAAgC;AAC9E,oBAAoB,8BAA8B;AAClD,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,8CAA8C,6EAAgC;AAC9E,8CAA8C,6EAAgC;AAC9E;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B,qCAAqC,uDAAU,eAAe,iDAAU,sCAAsC,8EAAiC;AAC/I;AACA,oBAAoB,8BAA8B;AAClD,oBAAoB,8BAA8B;AAClD,oBAAoB,8BAA8B;AAClD,oBAAoB,8BAA8B;AAClD;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA,YAAY,sDAAS,GAAG,8BAA8B,kBAAkB,uDAAU,kCAAkC,8EAAiC;AACrJ,YAAY,sDAAS,GAAG,8BAA8B,kBAAkB,uDAAU,kCAAkC,8EAAiC;AACrJ,YAAY,sDAAS,GAAG,8BAA8B,kBAAkB,uDAAU,mCAAmC,8EAAiC;AACtJ,YAAY,sDAAS,GAAG,8BAA8B,kBAAkB,uDAAU,kCAAkC,8EAAiC;AACrJ;AACA,qBAAqB,2CAAI;AACzB,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uDAAU;AAC/E,iBAAiB,sDAAe;AAChC;AACA;AACA,oBAAoB,QAAQ;AAC5B,0BAA0B,8CAAK;AAC/B;AACA,wBAAwB,8BAA8B;AACtD,wBAAwB,8BAA8B;AACtD,wBAAwB,8BAA8B;AACtD,wBAAwB,8BAA8B;AACtD;AACA,QAAQ,mEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uDAAU;AAC/E,iBAAiB,sDAAe;AAChC;AACA;AACA,oBAAoB,QAAQ;AAC5B,0BAA0B,8CAAK;AAC/B;AACA,wBAAwB,kDAAkD;AAC1E,wBAAwB,kDAAkD;AAC1E,wBAAwB,kDAAkD;AAC1E,wBAAwB,kDAAkD;AAC1E;AACA,QAAQ,mEAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kDAAO;AAChC;AACA;AACA,KAAK;AACL;AACA,yBAAyB,kDAAO;AAChC;AACA;AACA;AACA,KAAK;AACL,+CAA+C,kDAAO;AACtD,8BAA8B,uDAAU,2DAA2D;AACnG,8BAA8B,uDAAU,2DAA2D;AACnG,8BAA8B,uDAAU,2DAA2D;AACnG,8BAA8B,uDAAU,2DAA2D;AACnG,8BAA8B,uDAAU,2DAA2D;AACnG,8BAA8B,uDAAU,2DAA2D;AACnG,8BAA8B,uDAAU,2DAA2D;AACnG,8BAA8B,uDAAU,2DAA2D;AACnG,8BAA8B,uDAAU,uCAAuC;AAC/E,8BAA8B,uDAAU,uCAAuC;AAC/E,8BAA8B,uDAAU,uCAAuC;AAC/E,8BAA8B,uDAAU,uCAAuC;AAC/E,sBAAsB,8CAAK,CAAC,mDAAY,UAAU,wDAAe;AACjE;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS,uDAAuD,OAAO;AAC/E;AACA;AACA;AACA,wEAAqB;AACM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrZ3B;AACA;AACA;AACA;AACsD;AACH;AAChB;AACA;AACA;AACU;AACM;AACd;AACS;AACD;AACV;AACM;AACE;AACN;AACrC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA,0EAA0E,wBAAwB;AAClG,iEAAiE,wBAAwB;AACzF,0EAA0E,wBAAwB;AAClG,0EAA0E,wBAAwB;AAClG,yEAAyE,wBAAwB;AACjG,iEAAiE,0BAA0B;AAC3F,uEAAuE,4BAA4B;AACnG,sEAAsE,4BAA4B;AAClG,2EAA2E,8BAA8B;AACzG,oEAAoE,wBAAwB;AAC5F,gDAAgD,wBAAwB;AACxE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAoB;AAC5C,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB,4DAAoB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE;AACA,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C;AACA,sDAAsD,gEAAiB;AACvE;AACA;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE;AACA,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C;AACA,sDAAsD,kEAAmB;AACzE;AACA;AACA,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE;AACA,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C;AACA,sDAAsD,gEAAiB;AACvE;AACA;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE;AACA,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C;AACA,iDAAiD,+DAAgB;AACjE;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,wBAAwB,4DAAoB;AAC5C;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB,4DAAoB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE;AACA,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,sDAAsD,gEAAiB;AACvE;AACA;AACA,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE;AACA,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C;AACA,iDAAiD,kEAAmB;AACpE;AACA;AACA;AACA;AACA;AACA,0CAA0C,qDAAS;AACnD,sBAAsB,6CAAK;AAC3B;AACA,oBAAoB,8BAA8B;AAClD,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,oBAAoB,8BAA8B;AAClD,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,oBAAoB,8BAA8B;AAClD,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,oBAAoB,8BAA8B;AAClD,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,oBAAoB,8BAA8B;AAClD,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,oBAAoB,8BAA8B;AAClD,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,iEAAsB;AAClF,6BAA6B,2DAAY,oBAAoB,iEAAsB;AACnF;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE;AACA;AACA,gBAAgB,QAAQ;AACxB,qCAAqC,2DAAY;AACjD,qCAAqC,2DAAY;AACjD;AACA,yCAAyC,2DAAY;AACrD;AACA;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE;AACA,gBAAgB,QAAQ;AACxB,qCAAqC,2DAAY;AACjD,qCAAqC,2DAAY;AACjD;AACA,yCAAyC,2DAAY;AACrD;AACA;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,qCAAqC,iDAAiD;AACtF,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,iCAAiC,2DAAY;AAC7C,IAAI,mEAAuB;AAC3B;AACA,uBAAuB,6CAAK;AAC5B;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,qCAAqC,2DAAY;AACjD;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA,yBAAyB,sDAAe;AACxC,sBAAsB,oDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,kDAAO;AACnC;AACA;AACA,KAAK;AACL;AACA,4BAA4B,kDAAO;AACnC;AACA;AACA;AACA,KAAK;AACL,+CAA+C,kDAAO;AACtD,8BAA8B,2DAAY,2BAA2B;AACrE,8BAA8B,2DAAY,2BAA2B;AACrE,8BAA8B,2DAAY,2BAA2B;AACrE,8BAA8B,2DAAY,2BAA2B;AACrE,8BAA8B,2DAAY;AAC1C,8BAA8B,2DAAY;AAC1C,8BAA8B,2DAAY;AAC1C,8BAA8B,2DAAY;AAC1C,8BAA8B,2DAAY;AAC1C,8BAA8B,2DAAY;AAC1C,8BAA8B,2DAAY;AAC1C,8BAA8B,2DAAY;AAC1C,sBAAsB,8CAAK,CAAC,mDAAY,UAAU,wDAAe;AACjE;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA,wEAAqB;AACQ;;;;;;;;;;;;;;;;;;;;ACnY7B;AACA;AACA;AACA;AACA;AACA;AAC8D;AAC3B;AACQ;AACN;AACF;AACnC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,yGAAyG,aAAa;AACtH;AACA,kBAAkB,4DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB,4DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,iGAAiG,aAAa;AAC9G;AACA,kBAAkB,4DAAqB;AACvC;AACA;AACA;AACA,uCAAuC,8CAAO;AAC9C,uCAAuC,8CAAO;AAC9C,uCAAuC,8CAAO;AAC9C,uCAAuC,8CAAO;AAC9C,uCAAuC,gDAAS;AAChD,uCAAuC,gDAAS;AAChD;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,mDAAQ;AAChC,kBAAkB,4DAAqB;AACvC,uCAAuC,gDAAS;AAChD,uCAAuC,gDAAS;AAChD,uCAAuC,8CAAO;AAC9C,uCAAuC,gDAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,sGAAsG,aAAa;AACnH,wBAAwB,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AACxE;AACA,kBAAkB,4DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,iFAAiF,aAAa;AAC9F,kBAAkB,4DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,4DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,yDAAkB;AACpC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,yDAAkB;AACpC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,yDAAkB;AACpC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,yIAAyI,aAAa;AACtJ,kBAAkB,yDAAkB;AACpC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY,KAAK,aAAa;AAClD,kBAAkB,yDAAkB;AACpC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY,KAAK,aAAa;AAClD,kBAAkB,yDAAkB;AACpC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,2EAA2E,aAAa;AACxF,kBAAkB,yDAAkB;AACpC,qBAAqB,mDAAQ;AAC7B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,uEAAuE,aAAa;AACpF,kBAAkB,yDAAkB;AACpC,qBAAqB,mDAAQ;AAC7B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,6BAA6B,OAAO;AACpC,0FAA0F,aAAa;AACvG,6BAA6B,QAAQ;AACrC,sEAAsE,aAAa;AACnF,6BAA6B,QAAQ;AACrC;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,4DAAqB,oBAAoB,gEAAyB;AAC7E,WAAW,4DAAqB,oBAAoB,gEAAyB;AAC7E,WAAW,4DAAqB,oBAAoB,gEAAyB;AAC7E;AACA;AACA,IAAI,gEAAwB;AAC5B;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,6BAA6B,OAAO;AACpC,0FAA0F,aAAa;AACvG,6BAA6B,QAAQ;AACrC,sEAAsE,aAAa;AACnF,6BAA6B,QAAQ;AACrC,uGAAuG,eAAe;AACtH,wBAAwB,mDAAQ;AAChC,wBAAwB,mDAAQ,YAAY,mDAAQ;AACpD,wBAAwB,mDAAQ,aAAa,mDAAQ,aAAa,mDAAQ;AAC1E;AACA;AACA;AACA,WAAW,4DAAqB;AAChC,WAAW,4DAAqB;AAChC,WAAW,4DAAqB;AAChC;AACA;AACA,IAAI,gEAAwB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA,yDAAyD,mCAAmC;AAC5F,SAAS,aAAa;AACtB,kBAAkB,4DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,gBAAgB;AAC5B,wGAAwG,aAAa;AACrH,kBAAkB,4DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,wGAAwG,aAAa;AACrH,kBAAkB,4DAAqB,mBAAmB,gEAAyB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,iFAAiF,aAAa;AAC9F,kBAAkB,4DAAqB,wBAAwB,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,8EAA8E,aAAa;AAC3F,kBAAkB,4DAAqB,wBAAwB,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA,KAAK;AACL,kBAAkB,4DAAqB,wBAAwB,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,+FAA+F,aAAa;AAC5G,kBAAkB,4DAAqB,wBAAwB,mDAAQ,YAAY,mDAAQ,YAAY,mDAAQ;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yDAAkB,yBAAyB,uBAAuB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAM;AACnB,kBAAkB,yDAAkB,yBAAyB,uBAAuB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAM;AACnB,kBAAkB,yDAAkB;AACpC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA,kBAAkB,yDAAkB;AACpC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA,kBAAkB,yDAAkB,yBAAyB,kBAAkB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA,kBAAkB,yDAAkB;AACpC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA,kBAAkB,yDAAkB;AACpC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA,kBAAkB,yDAAkB;AACpC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,kBAAkB,yDAAkB;AACpC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACc;;;;;;;;;;;;;;;;;ACzjBnC;AACA;AACA;AACA;AAC8D;AACT;AACrD;AACA;AACA;AACA,QAAQ,wEAAqB;AAC7B,KAAK;AACL;AACA;AACA,yBAAyB,gDAAQ;AACjC,IAAI,sEAA8B;AAClC;AACA;AACA,cAAc,2EAAwB;AACtC,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qCAAqC;AACvE;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA,6EAA6E,YAAY,WAAW,yDAAM;AAC1G,oCAAoC,4CAA4C;AAChF;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,qDAAqD;AACzE;AACA,oBAAoB,6CAA6C,cAAc,KAAK;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA,sBAAsB,sEAAsE;AAC5F,sBAAsB,gCAAgC,cAAc,KAAK;AACzE;AACA,2CAA2C,+BAA+B;AAC1E,2CAA2C,+BAA+B;AAC1E,2CAA2C,+BAA+B;AAC1E;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,kFAAkF,cAAc,WAAW,yDAAM;AACjH,KAAK;AACL,wCAAwC,gCAAgC;AACxE,sBAAsB,gCAAgC,cAAc,KAAK;AACzE;AACA;AACA;AACA,sBAAsB,sEAAsE;AAC5F,sBAAsB,gCAAgC,cAAc,KAAK;AACzE;AACA,2CAA2C,+BAA+B;AAC1E,2CAA2C,+BAA+B;AAC1E,2CAA2C,+BAA+B;AAC1E;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,kFAAkF,cAAc,WAAW,yDAAM;AACjH,KAAK;AACL,wCAAwC,gCAAgC;AACxE,sBAAsB,gCAAgC,cAAc,KAAK;AACzE;AACA;AACA;AACA;AACA,kFAAkF,YAAY,WAAW,yDAAM;AAC/G,KAAK;AACL,sBAAsB,gCAAgC,cAAc,KAAK;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,YAAY,WAAW,yDAAM;AACpH;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,iDAAiD,cAAc,KAAK;AACxF;AACA;AACA;AACA;AACA;AACA,wCAAwC,gCAAgC;AACxE,wCAAwC,aAAa;AACrD,wCAAwC,gCAAgC;AACxE;AACA;AACA,gCAAgC,yDAAyD;AACzF,sBAAsB,2CAA2C;AACjE;AACA;AACA;AACA,uBAAuB,cAAc;AACrC,4FAA4F,cAAc,WAAW,yDAAM;AAC3H;AACA,KAAK;AACL;AACA,wCAAwC,gCAAgC;AACxE,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,kFAAkF,YAAY,WAAW,yDAAM;AAC/G;AACA,KAAK;AACL,sBAAsB,qCAAqC,cAAc,KAAK;AAC9E;AACA,wCAAwC,aAAa;AACrD;AACA;AACA,sBAAsB,yEAAyE;AAC/F,sBAAsB,kDAAkD,cAAc,KAAK;AAC3F;AACA,4CAA4C,+BAA+B;AAC3E,4CAA4C,+BAA+B;AAC3E,4CAA4C,+BAA+B;AAC3E,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,mFAAmF,cAAc,WAAW,yDAAM;AAClH,KAAK;AACL,yCAAyC,gCAAgC;AACzE,sBAAsB,gCAAgC,cAAc,KAAK;AACzE;AACA;AACA;AACA,sBAAsB,yEAAyE;AAC/F;AACA;AACA;AACA,uBAAuB,cAAc;AACrC,8FAA8F,cAAc,WAAW,yDAAM;AAC7H;AACA,KAAK;AACL;AACA,4CAA4C,+BAA+B;AAC3E,4CAA4C,+BAA+B;AAC3E,4CAA4C,+BAA+B;AAC3E,yCAAyC,gCAAgC;AACzE,yCAAyC,gCAAgC;AACzE;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,mFAAmF,cAAc,WAAW,yDAAM;AAClH;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB,2DAA2D,cAAc,KAAK;AAClG;AACA;AACA;AACA;AACA;AACA,yCAAyC,gCAAgC;AACzE,yCAAyC,aAAa;AACtD,yCAAyC,gCAAgC;AACzE;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,wEAAwE,YAAY,WAAW,yDAAM;AACrG;AACA,KAAK;AACL,sBAAsB,2DAA2D,cAAc,KAAK;AACpG;AACA,yCAAyC,aAAa;AACtD,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,mFAAmF,YAAY,WAAW,yDAAM;AAChH;AACA,KAAK;AACL,sBAAsB,kDAAkD,cAAc,KAAK;AAC3F;AACA,yCAAyC,aAAa;AACtD,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB,2CAA2C,yDAAM;AAC9F,KAAK;AACL,uBAAuB,8DAAsB;AAC7C;AACA,oBAAoB,gDAAgD,cAAc,KAAK;AACvF,uBAAuB,8DAAsB;AAC7C;AACA,yCAAyC,aAAa;AACtD,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,mFAAmF,cAAc,WAAW,yDAAM;AAClH,oCAAoC,8CAA8C;AAClF;AACA,KAAK;AACL,uBAAuB,gEAAwB;AAC/C,sBAAsB,gCAAgC,cAAc,KAAK,gBAAgB,gEAAwB;AACjH;AACA;AACA,yCAAyC,gCAAgC;AACzE;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,8FAA8F,cAAc,WAAW,yDAAM;AAC7H;AACA,KAAK;AACL,sBAAsB,gCAAgC,cAAc,KAAK;AACzE;AACA,yCAAyC,gCAAgC;AACzE;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,IAAI,uEAA+B;AACnC;AACA;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;;ACxWzB;AACA;AACA;AACA;AACsD;AACK;AAC3D;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU,2DAAY,EAAE,0DAAW;AACnC,cAAc,iEAAqB;AACnC,cAAc,iEAAkB;AAChC;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,sBAAsB,gEAAgE;AACtF,oBAAoB,gBAAgB;AACpC;AACA,yBAAyB,gEAAgE;AACzF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,sBAAsB,gEAAgE;AACtF,oBAAoB,gBAAgB;AACpC;AACA,yBAAyB,gEAAgE;AACzF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD;AACA,wBAAwB,6EAA6E;AACrG;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACG;;;;;;;;;;;;;;;;;ACzDxB;AACA;AACA;AACA;AACA;AAC8D;AACiD;AAC/G;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,YAAY;AAC3F,aAAa,yDAAM,KAAK,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY,mCAAmC,YAAY,WAAW,yDAAM;AAC5H,gDAAgD,cAAc,qCAAqC,cAAc,WAAW,yDAAM;AAClI;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,YAAY;AAC1D,8CAA8C,YAAY;AAC1D,4BAA4B,YAAY;AACxC,iBAAiB,yDAAM;AACvB;AACA,uDAAuD,cAAc;AACrE,uDAAuD,cAAc;AACrE,4BAA4B,cAAc;AAC1C,iBAAiB,yDAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,YAAY,KAAK,6BAA6B;AACtH,sDAAsD,YAAY,KAAK,0BAA0B;AACjG,iBAAiB,yDAAM,KAAK,aAAa;AACzC;AACA,8EAA8E,cAAc;AAC5F;AACA,aAAa;AACb,sDAAsD,cAAc,KAAK,0BAA0B;AACnG,iBAAiB,yDAAM,KAAK,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,YAAY;AACjE;AACA,qDAAqD,YAAY,KAAK,yBAAyB,YAAY;AAC3G;AACA,qDAAqD,YAAY,KAAK,yBAAyB,YAAY;AAC3G,iBAAiB,yDAAM,KAAK,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D,+CAA+C,YAAY;AAC3D,aAAa,yDAAM;AACnB;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,qCAAqC,kBAAkB;AACxE,iBAAiB,qCAAqC,kBAAkB;AACxE,iBAAiB,qCAAqC,kBAAkB;AACxE,iBAAiB,qCAAqC,kBAAkB;AACxE,iBAAiB,sCAAsC,kBAAkB;AACzE,iBAAiB,uCAAuC,kBAAkB;AAC1E;AACA;AACA,eAAe,+CAAO;AACtB,iBAAiB,iDAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA,+HAA+H,YAAY;AAC3I,+HAA+H,cAAc;AAC7I;AACA;AACA;AACA;AACA,kCAAkC,wDAAwD;AAC1F;AACA;AACA;AACA;AACA,kCAAkC,wDAAwD;AAC1F;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA,KAAK,KAAK,eAAe;AACzB;AACA;AACA,KAAK,KAAK,eAAe;AACzB,aAAa,0CAA0C;AACvD,aAAa,2CAA2C;AACxD;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,8HAA8H,YAAY,KAAK,aAAa;AAC5J;AACA,aAAa,0BAA0B;AACvC,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,oKAAoK,eAAe;AACnL;AACA,aAAa,0BAA0B;AACvC,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC,aAAa,4BAA4B;AACzC;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,8FAA8F,YAAY;AAC1G;AACA,aAAa,0BAA0B;AACvC,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA,iIAAiI,YAAY;AAC7I;AACA,aAAa,0BAA0B;AACvC,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA,2EAA2E,YAAY,MAAM,aAAa;AAC1G;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,aAAa,0BAA0B;AACvC,sEAAsE,cAAc;AACpF;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,+BAA+B,OAAO;AACtC;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,UAAU,cAAc,iBAAiB,kBAAkB;AAC3D,UAAU,cAAc,iBAAiB,kBAAkB;AAC3D,UAAU,cAAc,iBAAiB,kBAAkB;AAC3D,UAAU,cAAc,iBAAiB,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC,eAAe,sCAAsC,iBAAiB;AACtE,oCAAoC,uDAAe;AACnD;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,+BAA+B,WAAW,iBAAiB;AAC3D;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,UAAU,kCAAkC,iBAAiB,kBAAkB;AAC/E,UAAU,kCAAkC,iBAAiB,kBAAkB;AAC/E,UAAU,kCAAkC,iBAAiB,kBAAkB;AAC/E,UAAU,kCAAkC,iBAAiB,kBAAkB;AAC/E,UAAU,kCAAkC,iBAAiB,kBAAkB;AAC/E,UAAU,kCAAkC,kBAAkB,kBAAkB;AAChF,UAAU,kCAAkC,kBAAkB,kBAAkB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,0DAAkB;AACtB,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC,eAAe,sCAAsC,gBAAgB;AACrE,eAAe,uCAAuC,gBAAgB;AACtE,oCAAoC,uDAAe;AACnD;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,oCAAoC,uDAAe;AACnD,kBAAkB,6DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,SAAS;AACT,UAAU,cAAc,iBAAiB,sCAAsC;AAC/E,UAAU,cAAc,iBAAiB,uCAAuC;AAChF,UAAU,cAAc,iBAAiB,uCAAuC;AAChF,UAAU,cAAc,iBAAiB,uCAAuC;AAChF,UAAU,cAAc,iBAAiB,sCAAsC;AAC/E,UAAU,cAAc,iBAAiB,sCAAsC;AAC/E,UAAU,cAAc,iBAAiB,sCAAsC;AAC/E,UAAU,cAAc,iBAAiB,uCAAuC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,aAAa,qCAAqC,kBAAkB;AACpE;AACA,aAAa,sCAAsC,kBAAkB;AACrE,oCAAoC,uDAAe;AACnD;AACA;AACA;AACA;AACA;AACA,oBAAoB,2EAAwB;AAC5C,kCAAkC,OAAO;AACzC;AACA,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,iDAAiD;AAC3D,UAAU,yDAAyD;AACnE,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA;AACA,UAAU,oDAAoD;AAC9D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,0DAA0D;AACpE,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D;AACA;AACA,gBAAgB,kDAAU;AAC1B;AACA,gBAAgB,uDAAe;AAC/B,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA,0CAA0C,qBAAqB,qEAA6B,QAAQ;AACpG;AACA;AACA,0CAA0C,qBAAqB,wEAAgC,QAAQ;AACvG,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,0CAA0C,uDAAe;AACzD,4EAA4E,cAAc;AAC1F;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,iDAAiD;AAC3D,UAAU,yDAAyD;AACnE,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA;AACA,UAAU,oDAAoD;AAC9D,UAAU,mDAAmD;AAC7D,UAAU,kDAAkD;AAC5D,UAAU,0DAA0D;AACpE,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D;AACA,uFAAuF,+BAA+B;AACtH,uFAAuF,+BAA+B;AACtH,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,oCAAoC,uDAAe;AACnD,sEAAsE,cAAc;AACpF;AACA;AACA;AACA,wEAAqB;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACjnBrB;AACA;AACA;AACA;AACsD;AACnB;AACA;AACU;AACY;AACtB;AACM;AACE;AACM;AACjD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iCAAiC,iDAAO;AACxC,oDAAoD,2CAAI;AACxD,uCAAuC,2CAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA,SAAS;AACT;AACA,IAAI,mEAAuB;AAC3B,4BAA4B,uDAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAsB;AAC/C,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA,SAAS;AACT;AACA,0BAA0B,iBAAiB;AAC3C;AACA,SAAS;AACT;AACA,IAAI,mEAAuB;AAC3B,4BAA4B,uDAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA,SAAS;AACT;AACA,oBAAoB,kBAAkB;AACtC;AACA,uBAAuB,iEAAe;AACtC;AACA,gCAAgC,yDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAS,WAAW,sDAAe,EAAE;AACpD,sBAAsB,mDAAQ;AAC9B;AACA,UAAU,MAAM,8CAAO,gBAAgB;AACvC,UAAU,MAAM,gDAAS,qBAAqB;AAC9C,UAAU,MAAM,8CAAO,eAAe;AACtC,UAAU,MAAM,gDAAS,YAAY;AACrC;AACA;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA,SAAS;AACT;AACA,oBAAoB,kBAAkB;AACtC;AACA,sCAAsC,iEAAe;AACrD,gCAAgC,yDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yEAAsB;AAC/C,sBAAsB,mDAAQ;AAC9B;AACA,UAAU,MAAM,8CAAO,gBAAgB;AACvC,UAAU,MAAM,gDAAS,YAAY;AACrC,UAAU,MAAM,8CAAO,eAAe;AACtC,UAAU,MAAM,gDAAS,YAAY;AACrC;AACA;AACA,UAAU,MAAM,8CAAO,gBAAgB;AACvC,UAAU,MAAM,8CAAO,gBAAgB;AACvC,UAAU,MAAM,8CAAO,eAAe;AACtC,UAAU,MAAM,gDAAS,YAAY;AACrC,UAAU,MAAM,gDAAS,gBAAgB;AACzC,UAAU,MAAM,gDAAS,gBAAgB;AACzC,UAAU,MAAM,8CAAO,eAAe;AACtC,UAAU,MAAM,gDAAS,YAAY;AACrC;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,IAAI,mEAAuB;AAC3B,IAAI,uDAAgB;AACpB;AACA;AACA,wEAAqB;AACA;;;;;;;;;;;;;;;;;ACrOrB;AACA;AACA;AACA;AACsD;AACX;AAC3C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,mDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mDAAW;AAChC,qBAAqB,mDAAW;AAChC,wBAAwB,mDAAW;AACnC,SAAS;AACT;AACA;AACA,qBAAqB,mDAAW;AAChC,qBAAqB,mDAAW;AAChC,wBAAwB,mDAAW;AACnC,SAAS;AACT;AACA;AACA,qBAAqB,mDAAW;AAChC,qBAAqB,mDAAW;AAChC,wBAAwB,mDAAW;AACnC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wEAAqB;AACO;;;;;;;;;;;;;;;;;ACxD5B;AACA;AACA;AACA;AACsD;AACoB;AAC1E;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA,kCAAkC,MAAM;AACxC,SAAS;AACT;AACA,8BAA8B,MAAM;AACpC,SAAS;AACT,KAAK;AACL;AACA;AACA,yBAAyB,8DAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB,WAAW,6DAAqB;AAC/D,iBAAiB,mEAA2B;AAC5C;AACA;AACA;AACA;AACA,IAAI,2DAAmB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,iBAAiB;AAC/E,8DAA8D,iBAAiB;AAC/E,iEAAiE,iBAAiB;AAClF,mEAAmE,kBAAkB;AACrF,wDAAwD,YAAY;AACpE,wDAAwD,YAAY;AACpE,wDAAwD,YAAY;AACpE,wDAAwD,YAAY;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB,WAAW,0DAAkB;AAC5D,iBAAiB,mEAA2B;AAC5C;AACA;AACA;AACA;AACA,IAAI,2DAAmB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,iBAAiB;AAC/E,8DAA8D,iBAAiB;AAC/E,iEAAiE,iBAAiB;AAClF,mEAAmE,kBAAkB;AACrF,wDAAwD,YAAY;AACpE,wDAAwD,YAAY;AACpE,wDAAwD,YAAY;AACpE,wDAAwD,YAAY;AACpE;AACA,wEAAqB;AACkB;;;;;;;;;;;;;;;;;;;;;;;;ACrNvC;AACA;AACA;AACA;AACsD;AACP;AACE;AACd;AACU;AACF;AACN;AACQ;AACN;AACvC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,gBAAgB,qFAAuC;AAC7E,oBAAoB,gBAAgB,mFAAqC;AACzE;AACA,2EAA2E,gBAAgB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAAuB;AAC7C;AACA;AACA,4BAA4B,4DAAqB;AACjD;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,mDAAQ;AACrE;AACA,6DAA6D,mDAAQ;AACrE;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA,gCAAgC,4DAAoB;AACpD;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,cAAc;AAC9C;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,cAAc;AAC9C;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D,wBAAwB,sCAAsC;AAC9D,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA,oEAAoE,uDAAU;AAC9E;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B;AACA,wEAAwE,uDAAU;AAClF;AACA;AACA,QAAQ,mEAAuB;AAC/B;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,6BAA6B,wBAAwB;AACrD;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA,2EAA2E,uDAAU;AACrF;AACA,2EAA2E,uDAAU;AACrF;AACA,QAAQ,mEAAuB;AAC/B;AACA;AACA,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qDAAS,GAAG,oCAAoC;AAC1G,0BAA0B,6CAAK;AAC/B;AACA;AACA,wEAAwE,uDAAU;AAClF;AACA,wEAAwE,uDAAU;AAClF;AACA,QAAQ,mEAAuB;AAC/B;AACA;AACA,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,qDAAS,GAAG,gBAAgB;AACrG,gCAAgC,sBAAsB;AACtD;AACA;AACA,+FAA+F,WAAW;AAC1G;AACA,+FAA+F,WAAW;AAC1G;AACA,QAAQ,mEAAuB;AAC/B;AACA;AACA,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C;AACA;AACA,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA,wEAAqB;AACO;;;;;;;;;;;;;;;;ACja5B;AACA;AACA;AACA;AACsD;AACtD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,sBAAsB,8CAA8C;AACpE,qBAAqB,yBAAyB,iBAAiB;AAC/D,sBAAsB,4CAA4C;AAClE,qBAAqB,0BAA0B,iBAAiB;AAChE,sBAAsB,6CAA6C;AACnE,qBAAqB,4BAA4B,iBAAiB;AAClE,sBAAsB,+CAA+C;AACrE,qBAAqB,yBAAyB,iBAAiB;AAC/D,sBAAsB,4CAA4C;AAClE,qBAAqB,kCAAkC,iBAAiB;AACxE,sBAAsB,qDAAqD;AAC3E,qBAAqB,+BAA+B,iBAAiB;AACrE,sBAAsB,kDAAkD;AACxE,qBAAqB,+BAA+B,iBAAiB;AACrE,sBAAsB,kDAAkD;AACxE,qBAAqB,4BAA4B,iBAAiB;AAClE,sBAAsB,+CAA+C;AACrE,qBAAqB,2BAA2B,iBAAiB;AACjE,sBAAsB,8CAA8C;AACpE,qBAAqB,2BAA2B,oCAAoC;AACpF,sBAAsB,gEAAgE;AACtF,qBAAqB,2BAA2B,oCAAoC;AACpF,sBAAsB,+DAA+D;AACrF;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA,wEAAqB;AACA;;;;;;;;;;;;;;;;;ACtIrB;AACA;AACA;AACA;AAC8D;AACjB;AAC7C;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAwB;AAChD,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAM;AACvB;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD,kDAAkD,YAAY;AAC9D,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD,oDAAoD,YAAY;AAChE,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,aAAa;AAC/B;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD,8CAA8C,YAAY;AAC1D,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8DAAsB;AAC5C,0BAA0B,+DAAuB;AACjD;AACA,kBAAkB,aAAa;AAC/B,kBAAkB,cAAc;AAChC;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD,wEAAqB;AACC;;;;;;;;;;;;;;;;;;;;;;;;;ACvItB;AACA;AACA;AACA;AACsD;AACnB;AACF;AACY;AACY;AACtB;AACE;AACQ;AACI;AACZ;AACrC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gCAAgC,iEAAe;AAC/C;AACA,QAAQ,yDAAW;AACnB;AACA,IAAI,uDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA,YAAY,qDAAS,GAAG,mDAAmD;AAC3E,YAAY,qDAAS,GAAG,+DAA+D;AACvF,YAAY,qDAAS,GAAG,gEAAgE;AACxF,YAAY,qDAAS,GAAG,mDAAmD;AAC3E,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS,GAAG,uEAAuE;AAC/F,YAAY,qDAAS,GAAG,sEAAsE;AAC9F,YAAY,qDAAS,GAAG,wEAAwE;AAChG,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS,GAAG,4FAA4F;AACpH,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS,GAAG,uEAAuE;AAC/F;AACA,IAAI,wDAAkB,UAAU,WAAW;AAC3C,IAAI,wDAAkB,mCAAmC,WAAW;AACpE,IAAI,wDAAkB,yBAAyB,WAAW;AAC1D,qBAAqB,2CAAI;AACzB,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA,IAAI,sFAAmC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA,YAAY,qDAAS,GAAG,gEAAgE;AACxF,YAAY,qDAAS,GAAG,gEAAgE;AACxF,YAAY,qDAAS,GAAG,gEAAgE;AACxF,YAAY,qDAAS,GAAG,gEAAgE;AACxF,YAAY,qDAAS,GAAG,gEAAgE;AACxF;AACA,IAAI,wDAAkB,iDAAiD,WAAW;AAClF,IAAI,wDAAkB,iDAAiD,WAAW;AAClF,IAAI,wDAAkB,gBAAgB,UAAU;AAChD,IAAI,wDAAkB,gBAAgB,UAAU;AAChD,IAAI,wDAAkB,gBAAgB,UAAU;AAChD,IAAI,wDAAkB,gBAAgB,UAAU;AAChD,IAAI,wDAAkB,gBAAgB,UAAU;AAChD,IAAI,wDAAkB,gBAAgB,UAAU;AAChD,IAAI,wDAAkB,gBAAgB,UAAU;AAChD,IAAI,wDAAkB;AACtB;AACA,YAAY,qDAAS,GAAG,+DAA+D;AACvF,YAAY,qDAAS,GAAG,+DAA+D;AACvF,YAAY,qDAAS,GAAG,+DAA+D;AACvF,YAAY,qDAAS,GAAG,sEAAsE;AAC9F,YAAY,qDAAS,GAAG,+DAA+D;AACvF;AACA,IAAI,wDAAkB,WAAW,WAAW;AAC5C,IAAI,wDAAkB,gBAAgB,WAAW;AACjD,uBAAuB,6CAAK,WAAW,uDAAe;AACtD,uBAAuB,6CAAK,WAAW,uDAAe;AACtD,0BAA0B,qDAAS;AACnC;AACA;AACA;AACA,6BAA6B,uDAAgB;AAC7C,6BAA6B,uDAAgB;AAC7C,IAAI,sFAAmC;AACvC;AACA;AACA,wEAAqB;AACD;;;;;;;;;;;;;;;;;;;;;;;;ACjIpB;AACA;AACA;AACA;AACsD;AACH;AACN;AACU;AACZ;AACM;AACM;AACpB;AACI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,0CAA0C,YAAY;AACtD;AACA,KAAK;AACL;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,KAAK;AACL;AACA,kCAAkC,4EAA2B;AAC7D;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,yCAAyC,YAAY;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,KAAK;AACL;AACA;AACA,kCAAkC,4EAA2B;AAC7D;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,oEAAoE,cAAc;AAClF,8CAA8C,YAAY;AAC1D;AACA,KAAK;AACL;AACA;AACA;AACA,sEAAsE,cAAc;AACpF,KAAK;AACL;AACA,kCAAkC,4EAA2B;AAC7D;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,oEAAoE,cAAc;AAClF,8CAA8C,YAAY;AAC1D;AACA,KAAK;AACL;AACA;AACA;AACA,sEAAsE,cAAc;AACpF,KAAK;AACL;AACA,kCAAkC,4EAA2B;AAC7D;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,oEAAoE,cAAc;AAClF,8CAA8C,YAAY;AAC1D;AACA,KAAK;AACL;AACA;AACA;AACA,sEAAsE,cAAc;AACpF,KAAK;AACL;AACA,kCAAkC,4EAA2B;AAC7D;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,uDAAuD,YAAY;AACnE,iEAAiE,YAAY;AAC7E,sDAAsD,YAAY;AAClE,iBAAiB,aAAa;AAC9B,gGAAgG,cAAc;AAC9G;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,0DAA0D,YAAY;AACtE,mEAAmE,YAAY;AAC/E,oDAAoD,YAAY;AAChE,iBAAiB,aAAa;AAC9B;AACA,0CAA0C,cAAc;AACxD,0DAA0D,cAAc;AACxE,kEAAkE,cAAc;AAChF,2DAA2D,cAAc;AACzE,iBAAiB,aAAa;AAC9B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,eAAe;AAC3B,+DAA+D,cAAc;AAC7E,IAAI,wEAA0B;AAC9B,2CAA2C,cAAc;AACzD,IAAI,wEAA0B;AAC9B;AACA;AACA;AACA,KAAK;AACL;AACA,0DAA0D,cAAc;AACxE,IAAI,wEAA0B;AAC9B;AACA;AACA;AACA,KAAK;AACL;AACA,kCAAkC,4EAA2B;AAC7D;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,2EAA2E,cAAc;AACzF,8CAA8C,YAAY;AAC1D;AACA,KAAK;AACL;AACA;AACA;AACA,+DAA+D,cAAc;AAC7E,KAAK;AACL;AACA,kCAAkC,4EAA2B;AAC7D;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,qBAAqB;AACjC;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E,wCAAwC,YAAY,iCAAiC,YAAY;AACjG;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,6BAA6B;AACzC;AACA,mEAAmE,cAAc;AACjF,kBAAkB,+DAAsB;AACxC,KAAK;AACL,wCAAwC,cAAc;AACtD;AACA;AACA,0CAA0C,YAAY;AACtD,gEAAgE,YAAY;AAC5E;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA,sBAAsB,8BAA8B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oEAAqB;AAC9D;AACA,yCAAyC,kEAAuB;AAChE,yCAAyC,oEAAqB;AAC9D;AACA,yCAAyC,kEAAuB;AAChE,oCAAoC,8CAAO;AAC3C,yCAAyC,oEAAqB;AAC9D;AACA,yCAAyC,kEAAuB;AAChE,uCAAuC,gDAAS;AAChD;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA,sBAAsB,8BAA8B;AACpD;AACA;AACA,yCAAyC,wEAAuB;AAChE;AACA,yCAAyC,iEAAsB;AAC/D;AACA,yCAAyC,wEAAuB;AAChE;AACA,yCAAyC,kEAAuB;AAChE;AACA,yCAAyC,wEAAuB;AAChE;AACA,yCAAyC,kEAAuB;AAChE;AACA;AACA;AACA;AACA,yCAAyC,wEAAuB;AAChE;AACA,yCAAyC,iEAAsB;AAC/D,yCAAyC,wEAAuB;AAChE;AACA,yCAAyC,iEAAsB;AAC/D,yCAAyC,wEAAuB;AAChE;AACA,yCAAyC,iEAAsB;AAC/D;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,oIAAoI,cAAc;AAClJ,sBAAsB,0DAA0D;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA,wEAAqB;AACK;;;;;;;;;;;;;;;;;;ACtf1B;AACA;AACA;AACA;AACsD;AACb;AACK;AAC9C;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,iDAAO,GAAG,YAAY,0CAA0C;AACrF,wBAAwB,iDAAO;AAC/B,oBAAoB,0CAA0C;AAC9D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kEAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,oBAAoB,2EAAwB;AAC5C,oCAAoC,YAAY;AAChD,wFAAwF,wEAAyB;AACjH,sEAAsE,eAAe;AACrF,sBAAsB,eAAe;AACrC,qEAAqE,wEAAyB;AAC9F,yEAAyE,eAAe;AACxF,sBAAsB,oCAAoC;AAC1D;AACA;AACA;AACA;AACA,wEAAqB;AACG;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDxB;AACA;AACA;AACA;AACsD;AACP;AACZ;AACkB;AACZ;AACN;AACuB;AACP;AACN;AACI;AACN;AACN;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6DAAa;AACjC;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA,8BAA8B,2DAAiB;AAC/C;AACA;AACA;AACA,qBAAqB,uDAAU;AAC/B;AACA;AACA,qCAAqC;AACrC;AACA,kDAAkD,uDAAgB;AAClE;AACA;AACA,uCAAuC,sDAAe;AACtD;AACA,uCAAuC,sDAAe,EAAE,uDAAgB;AACxE;AACA,uCAAuC,sDAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2CAAI;AACtB;AACA;AACA,sEAAsE,sDAAe;AACrF,oEAAoE,gDAAS;AAC7E,sEAAsE,wDAAiB;AACvF,qEAAqE,uDAAgB;AACrF;AACA,kBAAkB,oDAAQ,GAAG,uBAAuB,cAAc;AAClE;AACA,mBAAmB,qDAAS,GAAG,8BAA8B;AAC7D,mBAAmB,qDAAS,GAAG,8BAA8B;AAC7D,mBAAmB,yDAAW,GAAG,qBAAqB;AACtD;AACA;AACA,4DAA4D,uDAAgB;AAC5E;AACA,eAAe,yDAAkB;AACjC,uBAAuB,mEAA4B;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB,mEAA4B,SAAS,4DAAqB;AACnF;AACA;AACA;AACA;AACA,yBAAyB,mEAA4B;AACrD;AACA;AACA;AACA,0BAA0B,2DAAY;AACtC;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,8BAA8B,qDAAc,6BAA6B;AACzE;AACA,cAAc,qDAAc;AAC5B;AACA;AACA;AACA,oBAAoB,2EAAwB;AAC5C,kCAAkC,OAAO;AACzC;AACA;AACA,4BAA4B,gEAAgE;AAC5F,4BAA4B,yDAAyD;AACrF,4BAA4B,gEAAgE;AAC5F;AACA,wBAAwB,8DAAkB;AAC1C;AACA,IAAI,8DAAkB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oDAAoD;AAC5E,8BAA8B,uEAA2B;AACzD;AACA;AACA;AACA;AACA;AACA,IAAI,8DAAkB;AACtB;AACA;AACA;AACA,IAAI,wDAAiB;AACrB,oBAAoB,2EAAwB;AAC5C,kCAAkC,OAAO;AACzC;AACA;AACA,4BAA4B,gEAAgE;AAC5F,4BAA4B,yDAAyD;AACrF,4BAA4B,gEAAgE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3JrB;AACA;AACA;AACA;AACsD;AACP;AAC2B;AACvB;AAChB;AACA;AACF;AACE;AACY;AACF;AACU;AACJ;AAChB;AACQ;AACN;AACkB;AACV;AACV;AACgB;AACZ;AACA;AACF;AACE;AACvC;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,sBAAsB;AAC1G,qGAAqG,qBAAqB;AAC1H,gFAAgF,qBAAqB;AACrG;AACA;AACA,0DAA0D,aAAa;AACvE;AACA;AACA;AACA;AACA;AACA,mEAAmE,4BAA4B;AAC/F,0EAA0E,4CAA4C;AACtH,uEAAuE,yCAAyC;AAChH,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iEAAuB;AAC7C;AACA;AACA,4BAA4B,4DAAqB;AACjD;AACA;AACA;AACA,mBAAmB,iDAAY;AAC/B;AACA,sBAAsB,sDAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAK,CAAC,mDAAY;AACzC,uBAAuB,8CAAK,CAAC,mDAAY;AACzC;AACA;AACA,0BAA0B,qDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,4BAA4B,sDAAS,GAAG,6BAA6B;AACrE;AACA,mBAAmB,8CAAK;AACxB;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mDAAmD;AACpE,iBAAiB,mDAAmD;AACpE,iBAAiB,mDAAmD;AACpE,iBAAiB,mDAAmD;AACpE;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD,uBAAuB,wBAAwB;AAC/C,SAAS;AACT;AACA;AACA,uCAAuC,cAAc;AACrD;AACA,qCAAqC,0BAA0B;AAC/D;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA,4CAA4C,4BAA4B;AACxE;AACA,uCAAuC;AACvC;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAQ;AACjC,IAAI,0EAA8B;AAClC,cAAc,2EAAwB;AACtC;AACA,gBAAgB,aAAa;AAC7B;AACA,uBAAuB,2CAAI;AAC3B,uBAAuB,8CAAK,WAAW,wDAAe;AACtD,2DAA2D,gBAAgB;AAC3E,uBAAuB,8CAAK,WAAW,wDAAe;AACtD;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAoB;AACnD,6BAA6B,0BAA0B;AACvD,6BAA6B,2BAA2B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAQ;AACjC,IAAI,0EAA8B;AAClC,cAAc,2EAAwB;AACtC;AACA,gBAAgB,aAAa;AAC7B;AACA,uBAAuB,8CAAK,WAAW,wDAAe;AACtD,2JAA2J,cAAc;AACzK,uBAAuB,8CAAK,WAAW,wDAAe;AACtD;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB,6DAAoB,EAAE;AACzE,6BAA6B,uBAAuB,6DAAoB,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,2CAA2C,aAAa;AACxD;AACA,2CAA2C,aAAa;AACxD,gBAAgB,yDAAkB;AAClC,gCAAgC,yDAAkB;AAClD,yBAAyB,yDAAkB;AAC3C,oCAAoC,oBAAoB;AACxD;AACA,8BAA8B,sBAAsB,6DAAoB,EAAE;AAC1E,8BAA8B,uBAAuB,6DAAoB,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,sDAAS,GAAG,8BAA8B;AACtD,YAAY,sDAAS,GAAG,8BAA8B;AACtD,YAAY,sDAAS,GAAG,8BAA8B;AACtD;AACA;AACA,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD;AACA,IAAI,wDAAkB,iBAAiB,WAAW;AAClD;AACA,2CAA2C,aAAa,UAAU,wDAAe;AACjF,2CAA2C,aAAa,UAAU,wDAAe;AACjF,oBAAoB,yDAAkB;AACtC,oBAAoB,yDAAkB;AACtC,0BAA0B,qDAAS;AACnC;AACA;AACA;AACA,8BAA8B,sBAAsB,6DAAoB,EAAE;AAC1E,8BAA8B,uBAAuB,6DAAoB,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD,YAAY,sDAAS,GAAG,+BAA+B;AACvD;AACA;AACA,YAAY,sDAAS,GAAG,gCAAgC;AACxD,YAAY,sDAAS,GAAG,gCAAgC;AACxD,YAAY,sDAAS,GAAG,8BAA8B;AACtD,YAAY,sDAAS,GAAG,gCAAgC;AACxD,YAAY,sDAAS,GAAG,gCAAgC;AACxD,YAAY,sDAAS,GAAG,8BAA8B;AACtD;AACA,cAAc,2EAAwB;AACtC;AACA,uBAAuB,8CAAK,GAAG,6BAA6B;AAC5D;AACA,uBAAuB,8CAAK,GAAG,6BAA6B;AAC5D;AACA,0BAA0B,qDAAS,GAAG,iEAAiE;AACvG;AACA;AACA;AACA;AACA,uBAAuB,8CAAK,iBAAiB,6DAAoB;AACjE,uBAAuB,8CAAK,kBAAkB,6DAAoB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,sBAAsB,8CAAK;AAC3B,uBAAuB,8CAAK;AAC5B;AACA,YAAY,sDAAS,GAAG,8BAA8B;AACtD,6BAA6B,uDAAU;AACvC,6BAA6B,gEAAc,kBAAkB,kEAAsB;AACnF,6BAA6B,4DAAY,kBAAkB,kEAAsB;AACjF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,2DAAY,oBAAoB,kEAAsB;AACnF,6BAA6B,uDAAU,kCAAkC,6EAAgC;AACzG,6BAA6B,uDAAU,kCAAkC,6EAAgC;AACzG,6BAA6B,uDAAU,iCAAiC,6EAAgC;AACxG,YAAY,sDAAS,GAAG,8CAA8C,iDAAS,EAAE;AACjF,6BAA6B,4DAAY,kBAAkB,kEAAsB;AACjF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,YAAY,sDAAS,GAAG,8BAA8B;AACtD;AACA;AACA,YAAY,sDAAS,GAAG,8BAA8B;AACtD,6BAA6B,4DAAY,kBAAkB,kEAAsB;AACjF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,uDAAU,kCAAkC,0EAA6B;AACtG,YAAY,sDAAS,GAAG,8CAA8C,iDAAS,EAAE;AACjF,6BAA6B,gEAAc,kBAAkB,kEAAsB;AACnF,6BAA6B,4DAAY,kBAAkB,kEAAsB;AACjF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,2DAAY,mBAAmB,kEAAsB;AAClF,6BAA6B,2DAAY,oBAAoB,kEAAsB;AACnF,6BAA6B,uDAAU,kCAAkC,0EAA6B;AACtG,6BAA6B,uDAAU,kCAAkC,0EAA6B;AACtG,6BAA6B,uDAAU,iCAAiC,0EAA6B;AACrG,YAAY,sDAAS,GAAG,8BAA8B;AACtD;AACA,uBAAuB,gDAAM;AAC7B,wBAAwB,gDAAM;AAC9B,IAAI,mEAAuB;AAC3B,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA,qGAAqG,cAAc;AACnH,uFAAuF,YAAY;AACnG;AACA;AACA;AACA,qCAAqC,6DAAoB;AACzD;AACA,mDAAmD,wDAAgB,uBAAuB;AAC1F,mDAAmD,wDAAgB,sBAAsB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA,gCAAgC,MAAM;AACtC,yFAAyF,YAAY;AACrG;AACA,qBAAqB,MAAM;AAC3B;AACA,wBAAwB,cAAc,iBAAiB,kBAAkB,kBAAkB,2CAAI;AAC/F;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC,sBAAsB,iBAAiB;AACvC;AACA;AACA,aAAa;AACb,iCAAiC,2CAAI;AACrC,wBAAwB,cAAc,iBAAiB,kBAAkB;AACzE;AACA;AACA,sBAAsB,iBAAiB;AACvC,sBAAsB,iBAAiB;AACvC,sBAAsB,iBAAiB;AACvC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,cAAc;AAC5E;AACA,+BAA+B,aAAa;AAC5C,+BAA+B,aAAa;AAC5C,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2CAAI;AAChB,YAAY,2CAAI;AAChB,YAAY,2CAAI;AAChB,YAAY,2CAAI;AAChB;AACA;AACA,kFAAkF,6DAAoB;AACtG;AACA,kBAAkB,kCAAkC;AACpD,kBAAkB,kCAAkC;AACpD,kBAAkB,kCAAkC;AACpD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,YAAY;AACrF,8DAA8D,cAAc;AAC5E;AACA,+BAA+B,aAAa;AAC5C,+BAA+B,aAAa;AAC5C,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA,yBAAyB,6DAAoB;AAC7C;AACA,kBAAkB,6CAA6C;AAC/D,kBAAkB,6CAA6C;AAC/D,kBAAkB,6CAA6C;AAC/D;AACA;AACA;AACA;AACA,YAAY,2CAAI;AAChB,YAAY,2CAAI;AAChB;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA,mDAAmD,wDAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0EAA8B,KAAK,oDAAQ;AAC/C,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,KAAK;AACL;AACA;AACA;AACA,oDAAoD,mBAAmB;AACvE;AACA,6DAA6D,mBAAmB;AAChF,qEAAqE,mBAAmB;AACxF;AACA,wDAAwD,aAAa;AACrE;AACA,oBAAoB,0CAA0C;AAC9D;AACA;AACA;AACA,kCAAkC,6EAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA,IAAI,2EAA+B;AACnC;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,aAAa;AACnG;AACA,SAAS;AACT;AACA;AACA;AACA,4CAA4C,kBAAkB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB,gBAAgB,6DAAoB;AAC1E;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8CAAK;AAC/B;AACA;AACA;AACA;AACA;AACA,6BAA6B,sDAAS,GAAG,6BAA6B;AACtE;AACA,gBAAgB,wDAAkB,WAAW,WAAW;AACxD;AACA;AACA,qCAAqC,uDAAU;AAC/C,8CAA8C,8EAAiC;AAC/E,6BAA6B,iDAAU,MAAM,wDAAiB;AAC9D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,wDAAkB,WAAW,WAAW;AACxD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2CAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,2BAA2B,8CAAK,GAAG,wCAAwC,UAAU,wDAAe;AACpG,wBAAwB,qDAAS,GAAG,wCAAwC;AAC5E;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wEAAqB;AACK;;;;;;;;;;;;;;;;;ACzuB1B;AACA;AACA;AACA;AACsD;AACX;AAC3C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA,wBAAwB,mDAAQ;AAChC,wBAAwB,mDAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAa;AACvB,UAAU,wDAAa;AACvB,UAAU,wDAAa;AACvB,UAAU,wDAAa;AACvB,UAAU,wDAAa;AACvB,UAAU,wDAAa;AACvB,UAAU,wDAAa;AACvB;AACA,UAAU,uDAAY;AACtB,UAAU,uDAAY;AACtB,UAAU,uDAAY;AACtB,UAAU,uDAAY;AACtB,UAAU,uDAAY;AACtB;AACA;AACA,sBAAsB,mDAAQ;AAC9B,sBAAsB,mDAAQ;AAC9B,sBAAsB,mDAAQ;AAC9B,oBAAoB,mDAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;AChFzB;AACA;AACA;AACA;AACsD;AACtD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,YAAY;AAC5G;AACA,KAAK;AACL;AACA,aAAa,6BAA6B;AAC1C,aAAa,8BAA8B;AAC3C;AACA;AACA,sBAAsB,eAAe;AACrC,sBAAsB,kDAAkD;AACxE,sBAAsB,eAAe;AACrC,sBAAsB,kDAAkD;AACxE,sBAAsB,eAAe;AACrC,sBAAsB,kDAAkD,6BAA6B,YAAY;AACjH,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,SAAS,aAAa;AACtB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,iBAAiB;AACvC,sBAAsB,iDAAiD;AACvE,SAAS,aAAa;AACtB;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,iBAAiB;AACvC,sBAAsB,mDAAmD;AACzE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,SAAS,aAAa;AACtB;AACA;AACA,0EAA0E,MAAM;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC,aAAa,2BAA2B;AACxC,aAAa,2BAA2B;AACxC,CAAC;AACD,wEAAqB;AACK;;;;;;;;;;;;;;;;;;;;ACzF1B;AACA;AACA;AACA;AACsD;AACL;AACZ;AACM;AACY;AACvD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC,2DAA2D,gCAAgC;AAC3F,8CAA8C,gCAAgC;AAC9E,mDAAmD,8BAA8B;AACjF,kDAAkD,+BAA+B;AACjF,KAAK;AACL;AACA;AACA,IAAI,yEAA8B,KAAK,mDAAQ;AAC/C,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,KAAK;AACL;AACA;AACA,wBAAwB,6CAAK,0BAA0B,eAAe;AACtE,wBAAwB,6CAAK,0BAA0B,eAAe;AACtE,wBAAwB,6CAAK,0BAA0B,eAAe;AACtE,wBAAwB,6CAAK,0BAA0B,eAAe;AACtE;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA,qCAAqC,gBAAgB,qFAAuC,EAAE;AAC9F;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB,qFAAuC,EAAE;AAC1F,gCAAgC,gBAAgB,mFAAqC,EAAE;AACvF;AACA;AACA;AACA,sBAAsB,yDAAyD;AAC/E,kCAAkC,4EAA2B;AAC7D;AACA,IAAI,0EAA+B;AACnC;AACA;AACA;AACA,IAAI,yEAA8B,KAAK,mDAAQ;AAC/C,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,KAAK;AACL;AACA,qDAAqD,aAAa;AAClE,kDAAkD,yDAAyD;AAC3G;AACA,yBAAyB,6CAAK,sBAAsB,eAAe,IAAI,SAAS;AAChF,yBAAyB,6CAAK,uBAAuB,mCAAmC;AACxF;AACA,4BAA4B,6CAAK,0BAA0B,gBAAgB;AAC3E,4BAA4B,6CAAK,0BAA0B,gBAAgB;AAC3E,4BAA4B,6CAAK,uBAAuB,gBAAgB;AACxE,4BAA4B,6CAAK,0BAA0B,gBAAgB;AAC3E;AACA;AACA;AACA,kCAAkC,4EAA2B;AAC7D;AACA,IAAI,0EAA+B;AACnC;AACA;AACA;AACA,IAAI,yEAA8B,KAAK,mDAAQ;AAC/C,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,KAAK;AACL;AACA,wDAAwD,aAAa;AACrE,2DAA2D,yDAAyD;AACpH;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD,oCAAoC,gBAAgB;AACpD,oCAAoC,gBAAgB;AACpD,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA,kCAAkC,4EAA2B;AAC7D;AACA,IAAI,0EAA+B;AACnC;AACA;AACA,wEAAqB;AACK;;;;;;;;;;;;;;;;;;;;;ACpH1B;AACA;AACA;AACA;AACA;AACsD;AACP;AACA;AACI;AAClB;AACY;AAC7C;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA,2BAA2B,4CAA4C;AACvE,2BAA2B,2CAA2C;AACtE;AACA,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,qCAAqC;AAC/C,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA,6CAA6C,YAAY;AACzD,8CAA8C,YAAY;AAC1D,IAAI,wDAAkB,qBAAqB,WAAW;AACtD;AACA;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,mBAAmB;AAC/D;AACA,yBAAyB,+CAA+C;AACxE,wCAAwC,WAAW;AACnD,4CAA4C,oBAAoB;AAChE;AACA,yBAAyB,sDAAsD;AAC/E,4CAA4C,oBAAoB;AAChE;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,oBAAoB;AAChE;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,oBAAoB;AAChE;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD,0BAA0B,4CAA4C;AACtE;AACA;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,mBAAmB;AAC/D;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,mBAAmB;AAC/D,6BAA6B,2DAAY;AACzC;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,mBAAmB;AAC/D,6BAA6B,2DAAY;AACzC,6BAA6B,uDAAU;AACvC;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,mBAAmB;AAC/D,6BAA6B,2DAAY;AACzC,6BAA6B,uDAAU;AACvC;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,mBAAmB;AAC/D,6BAA6B,2DAAY;AACzC,6BAA6B,2DAAY;AACzC;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,mBAAmB;AAC/D,6BAA6B,2DAAY;AACzC,6BAA6B,2DAAY;AACzC,6BAA6B,2DAAY;AACzC;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA,2BAA2B,4CAA4C;AACvE,2BAA2B,2CAA2C;AACtE;AACA,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,qCAAqC;AAC/C,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA,8CAA8C,WAAW;AACzD,8CAA8C,WAAW;AACzD,8CAA8C,WAAW;AACzD,IAAI,wDAAkB,qBAAqB,WAAW;AACtD;AACA;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,gCAAgC;AAC5E;AACA,yBAAyB,+CAA+C;AACxE,wCAAwC,WAAW;AACnD,4CAA4C,gCAAgC;AAC5E;AACA,yBAAyB,sDAAsD;AAC/E,4CAA4C,gCAAgC;AAC5E;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,gCAAgC;AAC5E;AACA,yBAAyB,+CAA+C;AACxE,4CAA4C,gCAAgC;AAC5E,sBAAsB,+CAA+C;AACrE;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,mBAAmB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA,qCAAqC,+CAA+C;AACpF;AACA;AACA;AACA,cAAc,6DAA6D;AAC3E,cAAc,6DAA6D;AAC3E,cAAc,6DAA6D;AAC3E,cAAc,6DAA6D;AAC3E,cAAc,6DAA6D;AAC3E,cAAc,6DAA6D;AAC3E,cAAc,6DAA6D;AAC3E,cAAc,6DAA6D;AAC3E,cAAc,6DAA6D;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,qCAAqC,+CAA+C;AACpF;AACA;AACA;AACA;AACA,kBAAkB,6DAA6D;AAC/E,kBAAkB,8DAA8D;AAChF,kBAAkB,6DAA6D;AAC/E,kBAAkB,8DAA8D;AAChF,kBAAkB,6DAA6D;AAC/E,kBAAkB,8DAA8D;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kDAAkD,sBAAsB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA;AACA,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D;AACA,2BAA2B,8DAA8D;AACzF,2BAA2B,+DAA+D;AAC1F;AACA,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,iDAAiD;AAC3D;AACA;AACA,8CAA8C,WAAW;AACzD,4CAA4C,oBAAoB;AAChE,4CAA4C,oBAAoB;AAChE,6CAA6C,oBAAoB;AACjE,6CAA6C,oBAAoB;AACjE;AACA;AACA,aAAa,0BAA0B;AACvC,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D;AACA;AACA,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D;AACA,2BAA2B,8DAA8D;AACzF,2BAA2B,+DAA+D;AAC1F;AACA,UAAU,mDAAmD;AAC7D,UAAU,mDAAmD;AAC7D;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,kDAAkD;AAC5D,UAAU,iDAAiD;AAC3D;AACA;AACA,8CAA8C,WAAW;AACzD,4CAA4C,oBAAoB;AAChE,4CAA4C,oBAAoB;AAChE,6CAA6C,oBAAoB;AACjE,6CAA6C,oBAAoB;AACjE;AACA;AACA,aAAa,0BAA0B;AACvC,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACK;;;;;;;;;;;;;;;;;;;;;;;ACva1B;AACA;AACA;AACA;AACsD;AACnB;AACU;AACU;AACJ;AACV;AACE;AACN;AACrC;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,iDAAO;AAC3C,yCAAyC,2DAAY;AACrD;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B,aAAa;AACb;AACA;AACA,YAAY,iBAAiB;AAC7B,4BAA4B,cAAc,iBAAiB,kBAAkB;AAC7E,4BAA4B,cAAc,kBAAkB,kBAAkB;AAC9E,4BAA4B,cAAc,kBAAkB,kBAAkB;AAC9E,4BAA4B,cAAc,kBAAkB,kBAAkB;AAC9E,gCAAgC,cAAc,mBAAmB,kBAAkB;AACnF;AACA,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,kBAAkB,mBAAmB;AAC7D;AACA,gCAAgC,cAAc,iBAAiB,kBAAkB;AACjF;AACA,UAAU,cAAc,kBAAkB,kBAAkB;AAC5D,UAAU,cAAc,iBAAiB,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+DAAc;AACxC,0BAA0B,+DAAc;AACxC,0BAA0B,+DAAc;AACxC,0BAA0B,+DAAc;AACxC,sBAAsB,6CAAK,CAAC,mDAAY;AACxC;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B,4BAA4B,cAAc,kBAAkB,kBAAkB;AAC9E,4BAA4B,cAAc,kBAAkB,kBAAkB;AAC9E;AACA,UAAU,cAAc,iBAAiB,kBAAkB;AAC3D,UAAU,cAAc,kBAAkB,kBAAkB;AAC5D;AACA;AACA,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D,UAAU,cAAc,iBAAiB,mBAAmB;AAC5D;AACA;AACA;AACA,0BAA0B,+DAAc;AACxC,0BAA0B,+DAAc;AACxC,sBAAsB,6CAAK,CAAC,mDAAY;AACxC;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA,wEAAqB;AACQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxF7B;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACmC;AACA;AACE;AACQ;AAChB;AACG;AACH;AACA;AACO;AACW;AACX;AACP;AACC;AACF;AACM;AACF;AACH;AACK;AACD;AACC;AACA;AACA;AACG;AACJ;AACE;AACE;AACJ;AACQ;AACX;AACG;AACI;AACG;AACP;AACF;AACM;AACF;AACF;AACA;AACH;AACC;AACD;AACS;AACF;AACH;AACI;AACJ;AACD;AACI;AACL;AACF;AACE;AACC;AACA;AACF;AACK;AACE;AACL;AACE;AACC;AACE;AACN;AACD;AACA;AACG;AACA;AACF;AACO;AACT;;;;;;;;;;;;;;;;;;;ACnF9B;AACA;AACA;AACA;AACA;AAC8E;AACzC;AACc;AACd;AACrC;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC,2CAA2C,iBAAiB;AAC5D,2CAA2C,kBAAkB;AAC7D;AACA,KAAK;AACL;AACA;AACA,2BAA2B;AAC3B,uBAAuB,sDAAc;AACrC,sBAAsB,sDAAc;AACpC,0BAA0B;AAC1B,yBAAyB,sDAAc;AACvC,sBAAsB,sDAAc,uBAAuB;AAC3D,aAAa;AACb;AACA;AACA;AACA,gCAAgC;AAChC,0EAA0E,4DAAoB;AAC9F,wEAAwE,4DAAoB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6DAAU,GAAG,6DAAU;AACnE;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA,wBAAwB,6CAAK;AAC7B;AACA,uCAAuC,6CAAK;AAC5C;AACA,uBAAuB,UAAU;AACjC,yBAAyB,2DAAY;AACrC;AACA;AACA,wBAAwB,qBAAqB;AAC7C,yBAAyB,2DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,0EAA0E,4DAAoB;AAC9F,wEAAwE,4DAAoB;AAC5F;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACY;;;;;;;;;;;;;;;;;AC7GjC;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACZ;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,kDAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kDAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACM;;;;;;;;;;;;;;;;;;;;;AC5E3B;AACA;AACA;AACA;AACA;AAC8E;AAC3C;AACE;AACc;AACd;AACa;AAClD;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B;AAC3B,uBAAuB,sDAAc;AACrC,sBAAsB,sDAAc;AACpC,yBAAyB,sDAAc;AACvC,sBAAsB,sDAAc,2BAA2B;AAC/D,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,wDAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB;AACA;AACA;AACA;AACA,gCAAgC;AAChC,4BAA4B;AAC5B,yBAAyB;AACzB,sFAAsF,4DAAoB;AAC1G,oFAAoF,4DAAoB;AACxG;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,2DAAY;AACjC;AACA;AACA,oBAAoB,iBAAiB;AACrC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG,4DAAoB;AACzH,iGAAiG,4DAAoB;AACrH,kGAAkG,4DAAoB;AACtH,sGAAsG,4DAAoB;AAC1H;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,4DAAoB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAoB;AACpC,8BAA8B,6CAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sFAAsF,4DAAoB;AAC1G,oFAAoF,4DAAoB;AACxG;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B;AACA,oBAAoB,OAAO;AAC3B,qBAAqB,2DAAY;AACjC;AACA;AACA,oBAAoB,iBAAiB;AACrC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B;AACA;AACA,uBAAuB,uEAAwB;AAC/C,uBAAuB,qEAAsB;AAC7C;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,4BAA4B;AAC5B,yBAAyB;AACzB,sFAAsF,4DAAoB;AAC1G,oFAAoF,4DAAoB;AACxG;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,iBAAiB,6DAAU;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC,sBAAsB,8BAA8B;AACpD;AACA,uBAAuB,2BAA2B;AAClD,sBAAsB,8BAA8B;AACpD;AACA,uBAAuB,WAAW;AAClC,sBAAsB,8BAA8B;AACpD;AACA,uBAAuB,gCAAgC;AACvD,sBAAsB,8BAA8B;AACpD;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACQ;;;;;;;;;;;;;;;;;AC1T7B;AACA;AACA;AACA;AAC2C;AACA;AAC3C,2BAA2B,mDAAQ;AACnC;AACA;AACA,yBAAyB,mDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;;;;;;;;;;;;;;;;;AChFxB;AACA;AACA;AACA;AACsD;AACG;AACzD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,uDAAe;AAClC;AACA;AACA;AACA,mBAAmB,uDAAe;AAClC,0BAA0B,gDAAQ;AAClC,0BAA0B,gDAAQ;AAClC;AACA;AACA,oCAAoC,yDAAiB;AACrD;AACA;AACA,wEAAqB;AACW;;;;;;;;;;;;;;;;;;AC3BhC;AACA;AACA;AACA;AACsD;AACnB;AACA;AACnC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI,2CAA2C;AAC1D,WAAW,IAAI,uBAAuB;AACtC,WAAW,IAAI,8DAA8D;AAC7E,WAAW,IAAI,0CAA0C;AACzD,WAAW,IAAI,0CAA0C;AACzD,WAAW,IAAI,0CAA0C;AACzD,WAAW,IAAI,0CAA0C;AACzD,WAAW,IAAI,0CAA0C;AACzD,WAAW,IAAI,0CAA0C;AACzD,WAAW,IAAI,0CAA0C;AACzD,WAAW,IAAI,0CAA0C;AACzD,WAAW,IAAI,0CAA0C;AACzD,WAAW,IAAI,2CAA2C;AAC1D,WAAW,IAAI,2CAA2C;AAC1D,WAAW,IAAI,iFAAiF;AAChG,WAAW,IAAI,8DAA8D;AAC7E,WAAW,IAAI,qEAAqE;AACpF,WAAW,IAAI,oEAAoE;AACnF,8BAA8B,wBAAwB;AACtD,8BAA8B,0CAA0C;AACxE,8BAA8B,oFAAoF;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,+DAAwB;AACpE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA,WAAW,0BAA0B,cAAc,IAAI,uBAAuB;AAC9E,WAAW,uCAAuC,cAAc,IAAI,uBAAuB;AAC3F,WAAW,uDAAuD,cAAc,IAAI,uBAAuB;AAC3G,WAAW,2CAA2C,cAAc,IAAI,uBAAuB;AAC/F,WAAW,0CAA0C,cAAc,IAAI,uBAAuB;AAC9F,WAAW,6CAA6C,cAAc,IAAI,uBAAuB;AACjG,WAAW,8DAA8D,cAAc,IAAI,uBAAuB;AAClH;AACA,cAAc,8DAA8D,cAAc;AAC1F,cAAc,0CAA0C;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,wEAAqB;AACY;;;;;;;;;;;;;;;;;;ACvJjC;AACA;AACA;AACA;AACsD;AACP;AACV;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B,wBAAwB,uDAAU;AAClC,iEAAiE,0DAAkB;AACnF;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA,kEAAkE,2DAAmB;AACrF;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA,sEAAsE,+DAAuB;AAC7F;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6CAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACC;;;;;;;;;;;;;;;;;;;;;;;AC7KtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACnB;AACU;AACF;AACN;AACQ;AACI;AACZ;AACrC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA,0BAA0B,qDAAS;AACnC,sBAAsB,6CAAK,CAAC,mDAAY;AACxC,2BAA2B,mDAAQ,GAAG,wBAAwB;AAC9D,2BAA2B,mDAAQ,GAAG,0BAA0B;AAChE,2BAA2B,mDAAQ,GAAG,wBAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAS;AAC9B,QAAQ,yDAAW;AACnB;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,6BAA6B;AACvC,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,6BAA6B;AACvC,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,6BAA6B;AACvC,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,6BAA6B;AACvC,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C;AACA;AACA;AACA,2BAA2B,cAAc;AACzC,0BAA0B,6CAAK;AAC/B;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,wCAAwC;AAClD,UAAU,wCAAwC;AAClD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD,UAAU,2CAA2C;AACrD;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,0BAA0B,6CAAK;AAC/B,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA,0BAA0B,qDAAS;AACnC,sBAAsB,6CAAK,CAAC,mDAAY;AACxC,oBAAoB,mDAAQ,GAAG,wBAAwB;AACvD,oBAAoB,mDAAQ,GAAG,0BAA0B;AACzD,oBAAoB,mDAAQ,GAAG,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;;;;AC1JzB;AACA;AACA;AACA;AACA;AACsD;AACb;AACN;AACe;AAClD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wEAAwE,aAAa;AACrF,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,4BAA4B,YAAY;AACxC,YAAY,8CAA8C;AAC1D;AACA,UAAU,kDAAkD;AAC5D,UAAU,gEAAgE;AAC1E,UAAU,gEAAgE;AAC1E,UAAU,gEAAgE;AAC1E,UAAU,iEAAiE;AAC3E,UAAU,iEAAiE;AAC3E,UAAU,iEAAiE;AAC3E,UAAU,iEAAiE;AAC3E;AACA;AACA;AACA,wCAAwC,yBAAyB,iBAAiB;AAClF,wCAAwC,yBAAyB,iBAAiB;AAClF,wCAAwC,0BAA0B,iBAAiB,OAAO,iDAAO;AACjG,2CAA2C,aAAa;AACxD,+BAA+B,iDAAO,CAAC,uEAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAgB;AAC5C,IAAI,sFAAmC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,YAAY,8CAA8C;AAC1D;AACA,UAAU,iDAAiD;AAC3D,UAAU,+DAA+D;AACzE,UAAU,+DAA+D;AACzE,UAAU,kEAAkE;AAC5E;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,gEAAgE;AAC1E,UAAU,gEAAgE;AAC1E,UAAU,mEAAmE;AAC7E;AACA;AACA;AACA,qBAAqB,yBAAyB,iBAAiB;AAC/D,YAAY,iDAAO,CAAC,uEAAwB;AAC5C,wBAAwB,aAAa;AACrC;AACA;AACA,qBAAqB,yBAAyB,iBAAiB;AAC/D,wBAAwB,aAAa;AACrC,YAAY,iDAAO,CAAC,iEAAkB;AACtC;AACA,yCAAyC,4BAA4B,iBAAiB;AACtF;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA,6BAA6B,uDAAgB;AAC7C;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,YAAY,8CAA8C;AAC1D,6BAA6B,0BAA0B;AACvD;AACA,UAAU,iDAAiD;AAC3D,UAAU,+DAA+D;AACzE,UAAU,+DAA+D;AACzE,UAAU,kEAAkE;AAC5E;AACA;AACA,UAAU,kDAAkD;AAC5D,UAAU,gEAAgE;AAC1E,UAAU,gEAAgE;AAC1E,UAAU,mEAAmE;AAC7E;AACA,6BAA6B,2BAA2B;AACxD;AACA,UAAU,gEAAgE;AAC1E,UAAU,iEAAiE;AAC3E,UAAU,iEAAiE;AAC3E,UAAU,iEAAiE;AAC3E,UAAU,iEAAiE;AAC3E,UAAU,gEAAgE;AAC1E,UAAU,gEAAgE;AAC1E,UAAU,gEAAgE;AAC1E;AACA,uBAAuB,wDAAwD;AAC/E,uBAAuB,6DAA6D;AACpF,uBAAuB,8DAA8D;AACrF,aAAa,2BAA2B;AACxC,aAAa,wBAAwB;AACrC;AACA,yCAAyC,yBAAyB,iBAAiB,mBAAmB,aAAa;AACnH,yCAAyC,yBAAyB,iBAAiB,mBAAmB,aAAa;AACnH,yCAAyC,4BAA4B,iBAAiB;AACtF,yCAAyC,2BAA2B,iBAAiB;AACrF,yCAAyC,yBAAyB,iBAAiB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACQ;;;;;;;;;;;;;;;;;;;;;;AChK7B;AACA;AACA;AACA;AACsD;AACD;AACR;AACR;AACa;AACL;AACF;AAC3C;AACA;AACA;AACA,YAAY,uDAAY;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6DAAa;AACjC;AACA,sBAAsB,6CAAK;AAC3B,wBAAwB,8DAAe;AACvC;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,+BAA+B;AACvD,YAAY,qDAAS,GAAG,4CAA4C;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACW;;;;;;;;;;;;;;;;;;;;;;;;;ACxDhC;AACA;AACA;AACA;AACA;AACA;AACsD;AACP;AACZ;AACF;AACY;AACR;AACM;AACN;AACQ;AACG;AAChD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE;AACA,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,8BAA8B,mDAAQ;AACtC,8BAA8B,mDAAQ;AACtC,8BAA8B,mDAAQ;AACtC;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE,YAAY,qDAAS,GAAG,iDAAiD;AACzE;AACA,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,6BAA6B,mDAAQ;AACrC,8BAA8B,mDAAQ;AACtC,8BAA8B,mDAAQ;AACtC,8BAA8B,mDAAQ;AACtC;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE;AACA,8CAA8C,eAAe;AAC7D,uDAAuD,eAAe;AACtE,uDAAuD,eAAe;AACtE,8CAA8C,eAAe;AAC7D,aAAa;AACb;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,YAAY,wBAAwB;AACpC;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,YAAY,wBAAwB;AACpC;AACA;AACA,IAAI,mEAAuB;AAC3B,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE;AACA,iDAAiD,4CAA4C;AAC7F,uDAAuD,4CAA4C;AACnG,8CAA8C,8CAA8C;AAC5F,0DAA0D,8CAA8C;AACxG,uDAAuD,8CAA8C;AACrG,4CAA4C,4CAA4C;AACxF,iDAAiD,4CAA4C;AAC7F,mDAAmD,8CAA8C;AACjG,mDAAmD,gDAAgD;AACnG,oDAAoD,8CAA8C;AAClG,wDAAwD,4CAA4C;AACpG;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA,sBAAsB,sDAAc,eAAe;AACnD;AACA;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,+CAA+C;AACrF;AACA,iCAAiC,uDAAU;AAC3C;AACA;AACA,gBAAgB,wDAAkB,QAAQ,WAAW;AACrD;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAkB;AAC1B,0BAA0B,6CAAK;AAC/B;AACA;AACA,SAAS,UAAU,sDAAc;AACjC;AACA,8BAA8B,qDAAS;AACvC,0CAA0C,4DAAoB;AAC9D;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;;AChVzB;AACA;AACA;AACA;AACsD;AACf;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uDAAuD;AACpF,yCAAyC,uCAAuC;AAChF,yCAAyC,qCAAqC;AAC9E,8BAA8B,+FAA+F;AAC7H,yCAAyC,+DAA+D;AACxG,4BAA4B,eAAe;AAC3C,mCAAmC,eAAe;AAClD,+BAA+B,cAAc;AAC7C,qCAAqC,cAAc;AACnD,sCAAsC,cAAc;AACpD,4BAA4B,YAAY;AACxC;AACA;AACA,wBAAwB,sDAAsD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B,wBAAwB,MAAM,KAAK,OAAO,KAAK,aAAa,KAAK,cAAc,KAAK,oBAAoB;AACxG;AACA,yBAAyB,oBAAoB;AAC7C;AACA,yBAAyB;AACzB,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wDAAwD;AACxD;AACA,wEAAqB;AACE;;;;;;;;;;;;;;;;AC7IvB;AACA;AACA;AACA;AACA;AACsD;AACtD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2EAAwB;AAC1C;AACA,iCAAiC,YAAY;AAC7C,kFAAkF,YAAY;AAC9F;AACA,iCAAiC,oBAAoB;AACrD,qEAAqE,YAAY;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,KAAK;AACL;AACA;AACA,CAAC;AACD,wEAAqB;AACQ;;;;;;;;;;;;;;;;;ACvE7B;AACA;AACA;AACA;AACA;AACA;AACsD;AACmD;AACzG;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAS;AACnC,QAAQ,mDAAW;AACnB;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,6BAA6B;AACvC,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,6BAA6B;AACvC,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C,UAAU,iCAAiC;AAC3C;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,0BAA0B,6CAAK;AAC/B,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2EAAwB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD;AACA;AACA;AACA;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,4DAA4D;AAClF,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,4DAA4D;AAClF;AACA,aAAa,8BAA8B;AAC3C,aAAa,0CAA0C;AACvD,aAAa,0CAA0C;AACvD,CAAC;AACD;AACA;AACA,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD;AACA;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,4DAA4D;AAClF,sBAAsB,kDAAkD;AACxE,sBAAsB,4DAA4D;AAClF;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,8BAA8B;AACpD,sBAAsB,0CAA0C;AAChE,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD,sBAAsB,iCAAiC;AACvD;AACA,aAAa,0CAA0C;AACvD;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,4DAA4D;AAClF,sBAAsB,kDAAkD;AACxE,sBAAsB,6DAA6D;AACnF,sBAAsB,mDAAmD;AACzE;AACA,IAAI,0DAAkB,gBAAgB,WAAW;AACjD;AACA,aAAa,0CAA0C;AACvD,aAAa,0CAA0C;AACvD,CAAC;AACD;AACA;AACA,gBAAgB,kDAAU;AAC1B;AACA,gBAAgB,uDAAe;AAC/B,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA,yBAAyB,kDAAkD;AAC3E,0CAA0C,YAAY;AACtD,wCAAwC,iBAAiB;AACzD,sBAAsB,kDAAkD,6BAA6B,iBAAiB;AACtH,sBAAsB,kDAAkD,6BAA6B,iBAAiB;AACtH,sBAAsB,kDAAkD,6BAA6B,iBAAiB;AACtH;AACA,CAAC;AACD;AACA;AACA,sBAAsB,qDAAqD,+BAA+B,YAAY;AACtH,sBAAsB,qDAAqD;AAC3E,sBAAsB,qDAAqD,+BAA+B,YAAY;AACtH,sBAAsB,qDAAqD,+BAA+B,YAAY;AACtH;AACA,CAAC;AACD;AACA;AACA,sBAAsB,kDAAkD,kBAAkB,+CAAO;AACjG,sBAAsB,kDAAkD,kBAAkB,+CAAO;AACjG,sBAAsB,kDAAkD,kBAAkB,+CAAO;AACjG,sBAAsB,kDAAkD,kBAAkB,+CAAO;AACjG;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,4BAA4B,iDAAiD,kBAAkB,+CAAO;AACtG,4BAA4B,iDAAiD,kBAAkB,+CAAO;AACtG,4BAA4B,iDAAiD,kBAAkB,+CAAO;AACtG,4BAA4B,iDAAiD,kBAAkB,+CAAO;AACtG;AACA,CAAC;AACD,wEAAqB;AACM;;;;;;;;;;;;;;;;;ACjM3B;AACA;AACA;AACA;AACsD;AACiB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,yBAAyB,gDAAQ;AACjC,sBAAsB,iDAAS,GAAG,SAAS,gEAAwB,QAAQ;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gDAAQ;AACjC,sBAAsB,iDAAS,GAAG,SAAS,gEAAwB,QAAQ;AAC3E,IAAI,sEAA8B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAkB;AACvD;AACA,gDAAgD,0DAAkB;AAClE;AACA;AACA;AACA,yBAAyB,gDAAQ;AACjC,sBAAsB,iDAAS,GAAG,SAAS,gEAAwB,QAAQ;AAC3E,IAAI,sEAA8B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;;ACrEzB;AACA;AACA;AACA;AACA;AACsD;AACgF;AACtI;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,sBAAsB;AACtB;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+DAAuB;AAC3B,YAAY,iDAAS,GAAG,8BAA8B;AACtD,YAAY,iDAAS,GAAG,8BAA8B;AACtD,YAAY,iDAAS,GAAG,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA,+BAA+B,sBAAsB,EAAE,oBAAoB;AAC3E;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,0FAA0F,eAAe,gBAAgB;AACzH,uCAAuC,cAAc,qBAAqB,EAAE,qBAAqB,IAAI,SAAS;AAC9G;AACA,yCAAyC,sBAAsB,cAAc,YAAY,IAAI,YAAY;AACzG;AACA;AACA;AACA,yBAAyB,gDAAQ;AACjC;AACA;AACA,kBAAkB,6CAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAiE;AACrF;AACA,wBAAwB,+CAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAY;AACpB;AACA;AACA,sBAAsB,oDAAY,uCAAuC,kBAAkB;AAC3F;AACA,sBAAsB,qDAAa;AACnC;AACA;AACA,sBAAsB,kDAAU;AAChC;AACA,yBAAyB,gDAAQ;AACjC;AACA,kBAAkB,6CAAK;AACvB;AACA;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;;;;;;;;;AC5JzB;AACA;AACA;AACA;AACsD;AACnB;AACF;AACE;AACU;AACR;AACQ;AACN;AACF;AACrC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,kDAAkD;AAC1E,YAAY,qDAAS,GAAG,mDAAmD;AAC3E,YAAY,qDAAS,GAAG,mDAAmD;AAC3E,YAAY,qDAAS,GAAG,mDAAmD;AAC3E,YAAY,qDAAS,GAAG,oDAAoD;AAC5E;AACA,IAAI,wDAAkB,UAAU,WAAW;AAC3C,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA,iCAAiC,qDAAS;AAC1C;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,eAAe,iDAAiD;AAChE,eAAe,kDAAkD;AACjE,eAAe,iDAAiD;AAChE,eAAe,iDAAiD;AAChE,eAAe,+DAA+D;AAC9E,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,iDAAiD;AAChE,eAAe,+DAA+D;AAC9E,eAAe,iDAAiD;AAChE,eAAe,kDAAkD;AACjE,eAAe,iDAAiD;AAChE;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,gEAAgE;AAC/E,eAAe,mDAAmD;AAClE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,gEAAgE;AAC/E,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,eAAe,iDAAiD;AAChE,eAAe,iDAAiD;AAChE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,iDAAiD;AAChE,eAAe,iDAAiD;AAChE,eAAe,kDAAkD;AACjE,eAAe,iDAAiD;AAChE,eAAe,iDAAiD;AAChE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE;AACA,wBAAwB,+CAAM,sCAAsC,4DAAmB;AACvF,wBAAwB,+CAAM,sCAAsC,4DAAmB;AACvF,wBAAwB,+CAAM,sCAAsC,4DAAmB;AACvF,wBAAwB,+CAAM,uCAAuC,4DAAmB;AACxF,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,eAAe,mDAAmD;AAClE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,mDAAmD;AAClE;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,wBAAwB,+CAAM,sCAAsC,+DAAsB;AAC1F,wBAAwB,+CAAM,sCAAsC,+DAAsB;AAC1F,wBAAwB,+CAAM,sCAAsC,+DAAsB;AAC1F,wBAAwB,+CAAM,uCAAuC,+DAAsB;AAC3F,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,eAAe,mDAAmD;AAClE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,iDAAiD;AAChE,eAAe,kDAAkD;AACjE,eAAe,iDAAiD;AAChE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,mDAAmD;AAClE;AACA,qBAAqB,2CAAI;AACzB,uBAAuB,+CAAM,uCAAuC,4DAAmB;AACvF,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oBAAoB;AAChC;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,eAAe,mDAAmD;AAClE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,iDAAiD;AAChE,eAAe,kDAAkD;AACjE,eAAe,iDAAiD;AAChE,eAAe,kDAAkD;AACjE,eAAe,kDAAkD;AACjE,eAAe,mDAAmD;AAClE,eAAe,mDAAmD;AAClE;AACA,qBAAqB,2CAAI;AACzB,uBAAuB,+CAAM,uCAAuC,4DAAmB;AACvF,aAAa,oBAAoB;AACjC,IAAI,mEAAuB,0BAA0B,mBAAmB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B,4CAA4C,qDAAS;AACrD;AACA,sBAAsB,4CAA4C;AAClE,sBAAsB,+BAA+B;AACrD,sBAAsB,4CAA4C;AAClE,sBAAsB,+BAA+B;AACrD;AACA;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,mDAAmD;AACzE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE;AACA,uBAAuB,6CAAK,CAAC,mDAAY;AACzC,uBAAuB,6CAAK,CAAC,mDAAY;AACzC,aAAa,oBAAoB;AACjC,QAAQ,qDAAS,yEAAyE,mBAAmB;AAC7G,wBAAwB,2CAAI;AAC5B,wBAAwB,2CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACC;;;;;;;;;;;;;;;;;;;;;;AC3StB;AACA;AACA;AACA;AACsD;AACP;AACZ;AACU;AACR;AACa;AACL;AAC7C;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,oDAAoD;AAC1D,MAAM,oDAAoD;AAC1D,MAAM,oDAAoD;AAC1D;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,iEAAkB;AAC9C,4BAA4B,iEAAkB;AAC9C;AACA;AACA;AACA;AACA,2BAA2B,qDAAS,GAAG,mDAAmD;AAC1F;AACA,IAAI,mEAAuB;AAC3B;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,iEAAkB;AAC9C,4BAA4B,iEAAkB;AAC9C;AACA;AACA;AACA,YAAY,qDAAS,GAAG,mDAAmD;AAC3E,YAAY,qDAAS,GAAG,mDAAmD;AAC3E;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,iEAAkB;AAC9C,4BAA4B,iEAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,iEAAkB;AAC9C,4BAA4B,iEAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS,GAAG,mDAAmD;AAC3E;AACA,uCAAuC,uDAAU,wBAAwB,yEAAsB;AAC/F;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,2CAAI;AAC1B;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,iCAAiC,uDAAU,uBAAuB,yEAAsB;AACxF;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,iEAAkB;AAC9C,4BAA4B,iEAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,uCAAuC,uDAAU,wBAAwB,yEAAsB;AAC/F;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,iEAAkB;AAC9C,4BAA4B,iEAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT,YAAY,qDAAS;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,uCAAuC,uDAAU,wBAAwB,yEAAsB;AAC/F;AACA,sBAAsB,2CAAI;AAC1B;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA,wEAAqB;AACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1avB;AACA;AACA;AACA;AACA;AACA;AACsD;AACP;AACZ;AACA;AACU;AACM;AACR;AACN;AACsB;AACd;AACO;AACN;AACM;AACC;AACrD;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA,kFAAkF,cAAc;AAChG;AACA;AACA,0EAA0E,WAAW;AACrF,gFAAgF,aAAa;AAC7F,gFAAgF,aAAa;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,6CAAK;AAC3B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,8DAAa;AACnC,sBAAsB,8DAAa;AACnC,sBAAsB,8DAAa;AACnC,qBAAqB,2DAAY;AACjC,qBAAqB,2DAAY;AACjC,qBAAqB,2DAAY;AACjC,qBAAqB,sDAAO,CAAC,iEAAkB;AAC/C,qBAAqB,sDAAO,CAAC,iEAAkB;AAC/C,qBAAqB,sDAAO,CAAC,+DAAgB;AAC7C,wBAAwB;AACxB,wBAAwB;AACxB,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6CAAK,gBAAgB,iBAAiB;AAC1D;AACA;AACA,gBAAgB,6CAAK,iBAAiB,kBAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,uEAAwB;AACpD,4BAA4B,iEAAkB;AAC9C;AACA;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,+BAA+B;AACvD,YAAY,qDAAS,GAAG,4CAA4C;AACpE;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA,0BAA0B,6CAAK;AAC/B;AACA,4BAA4B,8DAAe;AAC3C;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,uEAAwB;AACpD,4BAA4B,qEAAsB;AAClD;AACA;AACA;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,+BAA+B;AACvD,YAAY,qDAAS,GAAG,4CAA4C;AACpE;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,uEAAwB;AACpD,4BAA4B,qEAAsB;AAClD;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA,uCAAuC,uDAAU;AACjD,uCAAuC,uDAAU;AACjD,uCAAuC,uDAAU;AACjD;AACA,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA,0BAA0B,6CAAK;AAC/B;AACA,2BAA2B,qDAAS,GAAG,+BAA+B;AACtE;AACA,IAAI,mEAAuB;AAC3B;AACA,0BAA0B,6CAAK;AAC/B,4BAA4B,uEAAwB;AACpD,4BAA4B,qEAAsB;AAClD;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,+BAA+B;AACvD,YAAY,qDAAS,GAAG,4CAA4C;AACpE;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6CAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAS,GAAG,8BAA8B;AAC9D,oBAAoB,qDAAS,GAAG,8BAA8B;AAC9D,oBAAoB,qDAAS,GAAG,+BAA+B;AAC/D,oBAAoB,qDAAS,GAAG,4CAA4C;AAC5E;AACA,YAAY,mEAAuB;AACnC;AACA,2CAA2C,SAAS,uEAAwB,+BAA+B,IAAI,mCAAmC;AAClJ;AACA,sCAAsC,SAAS,uEAAwB,EAAE,IAAI,kCAAkC;AAC/G;AACA,sCAAsC,SAAS,uEAAwB,EAAE,IAAI,qCAAqC;AAClH;AACA;AACA;AACA,sCAAsC,SAAS,uEAAwB,EAAE,IAAI,mDAAmD;AAChI;AACA,sCAAsC,SAAS,uEAAwB,EAAE,IAAI,mDAAmD;AAChI;AACA,sCAAsC,SAAS,uEAAwB,EAAE,IAAI,iEAAiE;AAC9I;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAkB;AAC3C;AACA;AACA;AACA,yBAAyB,iEAAkB;AAC3C;AACA;AACA;AACA,yBAAyB,qEAAsB;AAC/C;AACA;AACA;AACA,yBAAyB,sEAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6CAAK;AACzB;AACA,0BAA0B,6EAA0B;AACpD;AACA;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,0BAA0B,0EAAuB;AACjD;AACA;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,0BAA0B,6EAA0B;AACpD;AACA;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,0BAA0B,4EAAyB;AACnD;AACA;AACA;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6CAAK;AACzB,sBAAsB,uEAAwB;AAC9C,0BAA0B,6EAA0B;AACpD;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,0BAA0B,6EAA0B;AACpD;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,qBAAqB,6DAAe;AACpC;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,qBAAqB,2DAAa;AAClC;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,sBAAsB,qEAAsB;AAC5C,qBAAqB,2DAAa;AAClC;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,qBAAqB,iEAAmB;AACxC,sBAAsB,iEAAkB;AACxC;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,sBAAsB,iEAAkB;AACxC,0BAA0B,6EAA0B;AACpD;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,sBAAsB,8DAAe;AACrC,0BAA0B,4EAAyB;AACnD;AACA;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6CAAK;AACzB,sBAAsB,uEAAwB;AAC9C,qBAAqB,iEAAmB;AACxC;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE;AACA,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,sBAAsB,uEAAwB;AAC9C,0BAA0B,qEAAkB;AAC5C,qBAAqB,6DAAe;AACpC;AACA;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,qBAAqB,2DAAa;AAClC,0BAA0B,qEAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB,qBAAqB,2DAAa;AAClC,0BAA0B,qEAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB;AACA,sBAAsB,iEAAkB;AACxC,0BAA0B,qEAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE,IAAI,mEAAuB;AAC3B;AACA,oBAAoB,6CAAK;AACzB;AACA,0BAA0B,qEAAkB;AAC5C;AACA;AACA;AACA,0BAA0B,qDAAS,GAAG,8BAA8B;AACpE,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAK;AAClC;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAS,GAAG,8BAA8B;AAC1D,gBAAgB,qDAAS,GAAG,8BAA8B;AAC1D,gBAAgB,qDAAS,GAAG,8BAA8B;AAC1D,gBAAgB,qDAAS,GAAG,8BAA8B;AAC1D;AACA,QAAQ,mEAAuB;AAC/B;AACA;AACA,6BAA6B,iCAAiC;AAC9D,6BAA6B,iCAAiC;AAC9D,6BAA6B,kCAAkC;AAC/D,6BAA6B,yBAAyB;AACtD,6BAA6B,2BAA2B;AACxD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA;AACA;AACA,6BAA6B,wBAAwB;AACrD,6BAA6B,wBAAwB;AACrD,6BAA6B,wBAAwB;AACrD,6BAA6B,wBAAwB;AACrD,6BAA6B,0BAA0B;AACvD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA,+BAA+B,eAAe;AAC9C,+BAA+B,gBAAgB;AAC/C,+BAA+B,eAAe;AAC9C,+BAA+B,gBAAgB;AAC/C,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA,8BAA8B,gBAAgB,IAAI,IAAI,gBAAgB,IAAI,eAAe,IAAI,gBAAgB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B,4BAA4B,iEAAsB;AAClD,gCAAgC,kEAAuB;AACvD,gCAAgC,kEAAuB;AACvD,gCAAgC,kEAAuB;AACvD;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B,4BAA4B,iEAAsB,IAAI,cAAc;AACpE,8BAA8B,iEAAsB,IAAI,aAAa;AACrE,gCAAgC,kEAAuB,IAAI,cAAc;AACzE,8BAA8B,kEAAuB,IAAI,aAAa;AACtE,gCAAgC,kEAAuB,IAAI,cAAc;AACzE,8BAA8B,kEAAuB,IAAI,aAAa;AACtE,qCAAqC,kEAAuB,IAAI,6BAA6B,kEAAsB,EAAE;AACrH,sCAAsC,kEAAuB,IAAI,4BAA4B,mEAAuB,EAAE;AACtH;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,2BAA2B;AACvD,4BAA4B,iEAAsB,IAAI,cAAc;AACpE,8BAA8B,iEAAsB,IAAI,aAAa;AACrE;AACA;AACA;AACA,wEAAqB;AACC;;;;;;;;;;;;;;;;;;;;;ACtnBtB;AACA;AACA;AACA;AACA;AACsD;AACnB;AACQ;AACN;AACa;AACK;AACvD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,0BAA0B,+DAAc;AACxC,sBAAsB,2EAA0B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gEAAyB;AAClD,IAAI,gEAAyB;AAC7B;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,0BAA0B,+DAAc;AACxC,sBAAsB,2EAA0B;AAChD;AACA;AACA;AACA;AACA,IAAI,gEAAyB;AAC7B;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,2BAA2B,+DAAc;AACzC,uBAAuB,gFAA+B;AACtD;AACA,2BAA2B,+DAAc;AACzC,uBAAuB,iFAAgC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,0BAA0B,+DAAc;AACxC,qBAAqB,+DAAc;AACnC,sBAAsB,2EAA0B;AAChD;AACA,iBAAiB,2EAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,0BAA0B,+DAAc;AACxC,qBAAqB,+DAAc;AACnC,sBAAsB,0EAAyB;AAC/C;AACA;AACA,iBAAiB,2EAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,0BAA0B,+DAAc;AACxC,qBAAqB,+DAAc;AACnC,sBAAsB,0EAAyB;AAC/C;AACA,iBAAiB,2EAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,0BAA0B,+DAAc;AACxC,qBAAqB,+DAAc;AACnC,sBAAsB,4EAA2B;AACjD;AACA,iBAAiB,2EAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,qBAAqB,+DAAc;AACnC,iBAAiB,qFAAoC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,yBAAyB,qEAAsB;AAC/C,yBAAyB,qEAAsB;AAC/C,qBAAqB,+DAAc;AACnC,iBAAiB,sFAAqC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA,yBAAyB,iEAAkB;AAC3C,yBAAyB,iEAAkB;AAC3C,qBAAqB,+DAAc;AACnC,iBAAiB,gFAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA;AACA;AACA,yBAAyB,qEAAsB;AAC/C,yBAAyB,qEAAsB;AAC/C,yBAAyB,8DAAe;AACxC,yBAAyB,8DAAe;AACxC,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC;AACA;AACA;AACA;AACA,uBAAuB,qFAAoC;AAC3D,uBAAuB,sFAAqC;AAC5D,uBAAuB,qFAAoC;AAC3D,uBAAuB,sFAAqC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAsB;AAC/C,yBAAyB,qEAAsB;AAC/C,yBAAyB,8DAAe;AACxC,yBAAyB,8DAAe;AACxC,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC;AACA;AACA;AACA;AACA;AACA,uBAAuB,qFAAoC;AAC3D,uBAAuB,sFAAqC;AAC5D,uBAAuB,qFAAoC;AAC3D,uBAAuB,sFAAqC;AAC5D,uBAAuB,gFAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAsB;AAC/C,yBAAyB,qEAAsB;AAC/C,yBAAyB,8DAAe;AACxC,yBAAyB,8DAAe;AACxC,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,yBAAyB,uEAAwB;AACjD,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC,2BAA2B,+DAAc;AACzC;AACA;AACA;AACA;AACA;AACA,uBAAuB,qFAAoC;AAC3D,uBAAuB,sFAAqC;AAC5D,uBAAuB,qFAAoC;AAC3D,uBAAuB,sFAAqC;AAC5D,uBAAuB,gFAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,6BAA6B,iEAAsB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAAc;AAC1C,4BAA4B,+DAAc;AAC1C,6BAA6B,+DAAc;AAC3C,0BAA0B,+DAAc;AACxC,2BAA2B,+DAAc;AACzC,wBAAwB,2EAA0B;AAClD,wBAAwB,2EAA0B;AAClD,yBAAyB,4EAA2B;AACpD,uBAAuB,0EAAyB;AAChD;AACA;AACA,oCAAoC,cAAc;AAClD,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACU;;;;;;;;;;;;;;;;;ACtZ/B;AACA;AACA;AACA;AACA;AACA;AACsD;AACH;AACnD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAY,GAAG,uBAAuB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAwB;AAChD;AACA;AACA;AACA;AACA,6BAA6B,+DAA+D;AAC5F,kDAAkD,WAAW;AAC7D,kDAAkD,WAAW;AAC7D,gCAAgC,iDAAiD;AACjF,gCAAgC,iDAAiD;AACjF,gCAAgC,iDAAiD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,wEAAqB;AACQ;;;;;;;;;;;;;;;;;;AC3G7B;AACA;AACA;AACA;AACsD;AACrB;AACa;AAC9C;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,sBAAsB,8CAA8C;AACpE,sBAAsB,8CAA8C;AACpE,sBAAsB,4DAA4D;AAClF,sBAAsB,4DAA4D;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,iDAAU,mBAAmB,uDAAgB,EAAE;AAC3E;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,sBAAsB,0EAA0E;AAChG,sBAAsB,8CAA8C,6BAA6B,WAAW;AAC5G,sBAAsB,4DAA4D;AAClF;AACA,yBAAyB,4DAA4D;AACrF,wCAAwC,WAAW;AACnD,sBAAsB,8CAA8C,6BAA6B,WAAW;AAC5G,sBAAsB,0EAA0E;AAChG,sBAAsB,4DAA4D;AAClF;AACA,yBAAyB,4DAA4D;AACrF,wCAAwC,WAAW;AACnD;AACA,IAAI,wDAAkB,eAAe,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACK;;;;;;;;;;;;;;;;;;;AC7H1B;AACA;AACA;AACA;AACsD;AACjB;AACa;AACW;AAC7D;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA,wBAAwB,uEAAwB;AAChD;AACA;AACA;AACA,wBAAwB,iEAAkB;AAC1C;AACA;AACA,gBAAgB,yEAAyB;AACzC;AACA;AACA;AACA;AACA,wBAAwB,iEAAkB;AAC1C;AACA;AACA;AACA,wBAAwB,iEAAkB;AAC1C;AACA;AACA;AACA,wEAAqB;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvD9B;AACA;AACA;AACA;AACA;AACA;AACsD;AACP;AAC2B;AACvB;AAChB;AACF;AACE;AACU;AACF;AACY;AACZ;AACc;AACpB;AACQ;AACV;AACgB;AACX;AACS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC,oDAAoD,gDAAgD;AACpG,qEAAqE,gDAAgD;AACrH,kDAAkD,+CAA+C;AACjG,mDAAmD,gDAAgD;AACnG,kDAAkD,+CAA+C;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAuB;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,kCAAkC,sDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kEAAe;AACrD;AACA,QAAQ,0DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAS,GAAG,uDAAuD;AAC5F;AACA;AACA,KAAK;AACL,qBAAqB,sDAAS,GAAG,kDAAkD;AACnF,qBAAqB,sDAAS,GAAG,6CAA6C;AAC9E,qBAAqB,sDAAS,GAAG,gDAAgD;AACjF;AACA;AACA,sBAAsB,sDAAe;AACrC;AACA;AACA,yBAAyB,iBAAiB;AAC1C,yBAAyB,eAAe;AACxC,2BAA2B,eAAe;AAC1C,+BAA+B,wBAAwB;AACvD,uCAAuC,wBAAwB;AAC/D,sCAAsC,wBAAwB;AAC9D,+BAA+B,mCAAmC;AAClE,sCAAsC,mCAAmC;AACzE,sCAAsC,mCAAmC;AACzE,2CAA2C,mCAAmC;AAC9E,kDAAkD,mCAAmC;AACrF,kDAAkD,mCAAmC;AACrF,oCAAoC,mCAAmC;AACvE,2CAA2C,mCAAmC;AAC9E,2CAA2C,mCAAmC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAS;AAClC;AACA;AACA,KAAK;AACL,qBAAqB,sDAAS,GAAG,kDAAkD;AACnF,qBAAqB,sDAAS,GAAG,6CAA6C;AAC9E,qBAAqB,sDAAS,GAAG,gDAAgD;AACjF;AACA;AACA,qBAAqB,sDAAS,GAAG,4CAA4C;AAC7E,mCAAmC,+CAAO;AAC1C;AACA;AACA;AACA,gCAAgC,iDAAS;AACzC,gCAAgC,+CAAO;AACvC,kBAAkB,iDAAS;AAC3B,gCAAgC,iDAAS;AACzC,kBAAkB,iDAAS;AAC3B;AACA;AACA;AACA;AACA,yBAAyB,sDAAS,GAAG,4CAA4C;AACjF,2GAA2G,+CAAO;AAClH,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAO;AAC7B,qBAAqB,iDAAS;AAC9B;AACA;AACA,sBAAsB,iDAAS;AAC/B,qBAAqB,+CAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sDAAS,GAAG,4CAA4C;AAC/E;AACA;AACA,uBAAuB,sDAAS,GAAG,kEAAkE;AACrG;AACA;AACA;AACA,0BAA0B,8CAAK,gBAAgB,8BAA8B;AAC7E;AACA;AACA,iDAAiD,2BAA2B;AAC5E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAS,GAAG,6CAA6C,+CAAO,iBAAiB;AACtG;AACA,0BAA0B,iDAAS;AACnC;AACA,0BAA0B,+CAAO;AACjC;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B,qBAAqB,sDAAS,GAAG,4CAA4C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAS,GAAG,4CAA4C;AAC7E;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B,qBAAqB,sDAAS,GAAG,4CAA4C;AAC7E,QAAQ,0DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA,UAAU,+CAA+C;AACzD,UAAU,4CAA4C;AACtD,UAAU,6CAA6C;AACvD,UAAU,4CAA4C;AACtD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,8CAA8C;AACxD,UAAU,8CAA8C;AACxD,UAAU,+CAA+C;AACzD,UAAU,8DAA8D,iDAAS,EAAE;AACnF,UAAU,4DAA4D,iDAAS,EAAE;AACjF,UAAU,4DAA4D,iDAAS,EAAE;AACjF,UAAU,4DAA4D,iDAAS,EAAE;AACjF,UAAU,4DAA4D,iDAAS,EAAE;AACjF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,8DAA8D,iDAAS,EAAE;AACnF,UAAU,8CAA8C;AACxD,UAAU,4CAA4C;AACtD,UAAU,4CAA4C;AACtD,UAAU,4CAA4C;AACtD,UAAU,4CAA4C;AACtD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,8CAA8C;AACxD,UAAU,8BAA8B;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA,UAAU,+CAA+C;AACzD,UAAU,4CAA4C;AACtD,UAAU,6CAA6C;AACvD,UAAU,4CAA4C;AACtD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,8CAA8C;AACxD,UAAU,8CAA8C;AACxD,UAAU,+CAA+C;AACzD,UAAU,8DAA8D,iDAAS,EAAE;AACnF,UAAU,4DAA4D,iDAAS,EAAE;AACjF,UAAU,4DAA4D,iDAAS,EAAE;AACjF,UAAU,4DAA4D,iDAAS,EAAE;AACjF,UAAU,4DAA4D,iDAAS,EAAE;AACjF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,8CAA8C;AACxD,UAAU,8CAA8C;AACxD,UAAU,4CAA4C;AACtD,UAAU,4CAA4C;AACtD,UAAU,4CAA4C;AACtD,UAAU,4CAA4C;AACtD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,8CAA8C;AACxD,UAAU,8BAA8B;AACxC;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA;AACA,UAAU,4DAA4D;AACtE,UAAU,0DAA0D;AACpE,UAAU,0DAA0D;AACpE,UAAU,0DAA0D;AACpE,UAAU,0DAA0D;AACpE,UAAU,2DAA2D;AACrE,UAAU,2DAA2D;AACrE,UAAU,0EAA0E,iDAAS,EAAE;AAC/F,UAAU,0EAA0E,iDAAS,EAAE;AAC/F,UAAU,0EAA0E,iDAAS,EAAE;AAC/F,UAAU,2EAA2E,iDAAS,EAAE;AAChG,UAAU,2EAA2E,iDAAS,EAAE;AAChG,UAAU,iCAAiC;AAC3C,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,gCAAgC;AAC1C,UAAU,gCAAgC;AAC1C,UAAU,8BAA8B;AACxC;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA,UAAU,4DAA4D;AACtE,UAAU,0DAA0D;AACpE,UAAU,4CAA4C;AACtD,UAAU,mDAAmD;AAC7D,UAAU,wEAAwE;AAClF,UAAU,kEAAkE;AAC5E,UAAU,6CAA6C;AACvD,UAAU,oDAAoD;AAC9D,UAAU,mEAAmE,iDAAS,EAAE;AACxF,UAAU,4DAA4D,iDAAS,EAAE;AACjF,UAAU,mEAAmE,iDAAS,EAAE;AACxF,UAAU,kFAAkF,iDAAS,EAAE;AACvG,UAAU,yFAAyF,iDAAS,EAAE;AAC9G;AACA;AACA;AACA,4BAA4B,iDAAS;AACrC,SAAS;AACT;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA,UAAU,+CAA+C;AACzD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,8CAA8C;AACxD,UAAU,8CAA8C;AACxD,UAAU,8CAA8C;AACxD,UAAU,+CAA+C;AACzD,UAAU,+DAA+D,iDAAS,EAAE;AACpF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,8DAA8D,iDAAS,EAAE;AACnF,UAAU,8DAA8D,iDAAS,EAAE;AACnF,UAAU,8DAA8D,iDAAS,EAAE;AACnF,UAAU,+DAA+D,iDAAS,EAAE;AACpF,UAAU,+CAA+C;AACzD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,6CAA6C;AACvD,UAAU,8CAA8C;AACxD,UAAU,8CAA8C;AACxD,UAAU,8CAA8C;AACxD,UAAU,+CAA+C;AACzD,UAAU,+DAA+D,iDAAS,EAAE;AACpF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,6DAA6D,iDAAS,EAAE;AAClF,UAAU,8DAA8D,iDAAS,EAAE;AACnF,UAAU,8DAA8D,iDAAS,EAAE;AACnF,UAAU,8DAA8D,iDAAS,EAAE;AACnF,UAAU,+DAA+D,iDAAS,EAAE;AACpF;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA,UAAU,iDAAiD,iDAAS,EAAE;AACtE,UAAU,+CAA+C,iDAAS,EAAE;AACpE,UAAU,+CAA+C,iDAAS,EAAE;AACpE,UAAU,+CAA+C,iDAAS,EAAE;AACpE,UAAU,+CAA+C,iDAAS,EAAE;AACpE,UAAU,gDAAgD,iDAAS,EAAE;AACrE,UAAU,gDAAgD,iDAAS,EAAE;AACrE,UAAU,gDAAgD,iDAAS,EAAE;AACrE,UAAU,iDAAiD,iDAAS,EAAE;AACtE,UAAU,iDAAiD,+CAAO,EAAE;AACpE,UAAU,+CAA+C,+CAAO,EAAE;AAClE,UAAU,+CAA+C,+CAAO,EAAE;AAClE,UAAU,+CAA+C,+CAAO,EAAE;AAClE,UAAU,+CAA+C,+CAAO,EAAE;AAClE,UAAU,gDAAgD,+CAAO,EAAE;AACnE,UAAU,gDAAgD,+CAAO,EAAE;AACnE,UAAU,gDAAgD,+CAAO,EAAE;AACnE,UAAU,iDAAiD,+CAAO,EAAE;AACpE;AACA,UAAU,+CAA+C,iDAAS,EAAE;AACpE,UAAU,+CAA+C,iDAAS,EAAE;AACpE,UAAU,+CAA+C,+CAAO,EAAE;AAClE,UAAU,+CAA+C,+CAAO,EAAE;AAClE;AACA,kDAAkD,sDAAS;AAC3D,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B,qBAAqB,sDAAS,GAAG,6CAA6C;AAC9E;AACA,yBAAyB,uDAAU;AACnC,0BAA0B,uDAAuD;AACjF,QAAQ,0DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA,qBAAqB,sDAAS,GAAG,6CAA6C;AAC9E;AACA,yBAAyB,uDAAU;AACnC,oBAAoB,4EAA4E;AAChG,QAAQ,0DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA,qBAAqB,sDAAS,GAAG,6CAA6C;AAC9E;AACA,yBAAyB,uDAAU;AACnC,wBAAwB,4EAA4E;AACpG,QAAQ,0DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA,mBAAmB,sDAAS,GAAG,4CAA4C;AAC3E,YAAY,0DAAW;AACvB;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC,mBAAmB,sDAAS,GAAG,sCAAsC;AACrE,YAAY,0DAAW;AACvB;AACA;AACA;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA,qBAAqB,sDAAS,GAAG,6CAA6C;AAC9E;AACA,yBAAyB,uDAAU;AACnC,wBAAwB,4EAA4E;AACpG,QAAQ,0DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B,qBAAqB,sCAAsC;AAC3D;AACA;AACA;AACA;AACA,UAAU,8CAA8C,iDAAS,EAAE;AACnE,UAAU,8CAA8C,iDAAS,EAAE;AACnE;AACA,UAAU,8CAA8C,iDAAS,EAAE;AACnE;AACA,UAAU,8CAA8C,iDAAS,EAAE;AACnE,UAAU,8CAA8C,iDAAS,EAAE;AACnE;AACA,UAAU,8CAA8C,+CAAO,EAAE;AACjE,UAAU,8CAA8C,+CAAO,EAAE;AACjE;AACA,UAAU,8CAA8C,iDAAS,EAAE;AACnE,UAAU,qDAAqD,iDAAS,EAAE;AAC1E;AACA,UAAU,qDAAqD,iDAAS,EAAE;AAC1E;AACA,UAAU,qDAAqD,iDAAS,EAAE;AAC1E;AACA,+CAA+C,sDAAS;AACxD,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,sBAAsB,2CAAI;AAC1B,gCAAgC;AAChC,qBAAqB,wCAAwC;AAC7D,mCAAmC,qBAAqB;AACxD,iCAAiC,sBAAsB;AACvD,iCAAiC,uBAAuB;AACxD,mCAAmC,4BAA4B;AAC/D,6BAA6B,4CAA4C;AACzE,qBAAqB,oCAAoC;AACzD,uCAAuC,gEAAgE;AACvG,iCAAiC,4CAA4C;AAC7E,IAAI,mEAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA,oBAAoB,8CAA8C,+CAAO,EAAE;AAC3E,oBAAoB,8CAA8C,+CAAO,EAAE;AAC3E,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,gDAAgD,+CAAO,EAAE;AAC7E,oBAAoB,8CAA8C,+CAAO,EAAE;AAC3E,oBAAoB,8CAA8C,+CAAO,EAAE;AAC3E,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,+BAA+B;AACnD,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,gDAAgD,+CAAO,EAAE;AAC7E;AACA,IAAI,wDAAkB,UAAU,WAAW;AAC3C,IAAI,wDAAkB,0BAA0B,WAAW;AAC3D;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,gDAAgD,iDAAS,EAAE;AAC/E,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,gDAAgD,iDAAS,EAAE;AAC/E;AACA,IAAI,wDAAkB,eAAe,WAAW;AAChD;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA,oBAAoB,8CAA8C,+CAAO,EAAE;AAC3E,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,gDAAgD,+CAAO,EAAE;AAC7E,oBAAoB,8CAA8C,+CAAO,EAAE;AAC3E,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,+BAA+B;AACnD,oBAAoB,+CAA+C,+CAAO,EAAE;AAC5E,oBAAoB,gDAAgD,+CAAO,EAAE;AAC7E;AACA,IAAI,wDAAkB,eAAe,WAAW;AAChD,IAAI,wDAAkB,mCAAmC,WAAW;AACpE,qBAAqB,2CAAI;AACzB;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,gDAAgD,iDAAS,EAAE;AAC/E,oBAAoB,8CAA8C,iDAAS,EAAE;AAC7E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,+CAA+C,iDAAS,EAAE;AAC9E,oBAAoB,gDAAgD,iDAAS,EAAE;AAC/E;AACA,IAAI,wDAAkB,eAAe,WAAW;AAChD,qBAAqB,2CAAI;AACzB;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2EAAwB;AACvC;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA;AACA,mEAAmE,YAAY;AAC/E;AACA;AACA,KAAK;AACL;AACA;AACA,gCAAgC,4BAA4B;AAC5D;AACA;AACA,KAAK;AACL,gCAAgC,4BAA4B;AAC5D;AACA;AACA,KAAK;AACL,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,2EAAwB;AACvC;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA;AACA;AACA;AACA,mEAAmE,YAAY;AAC/E;AACA;AACA,KAAK;AACL;AACA;AACA,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA,KAAK;AACL,gCAAgC,4BAA4B;AAC5D;AACA;AACA,KAAK;AACL,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD,+BAA+B,mDAAmD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,qBAAqB,mDAAmD;AACxE,yBAAyB,2DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,qBAAqB,mDAAmD;AACxE,yBAAyB,uDAAU,gDAAgD,0EAA6B;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,mBAAmB,+DAAc;AACjC;AACA;AACA,qBAAqB,gEAAgE;AACrF,yBAAyB,uDAAU;AACnC,0BAA0B,iDAAM;AAChC,yBAAyB,uDAAU;AACnC,oCAAoC,kEAAsB;AAC1D,oCAAoC,kEAAsB;AAC1D,oCAAoC,mEAAuB;AAC3D,yBAAyB,4DAAY,kBAAkB,mEAAuB;AAC9E,IAAI,wDAAkB,WAAW,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,gCAAgC,mDAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA,yCAAyC,WAAW;AACpD,aAAa,eAAe;AAC5B,6BAA6B,aAAa;AAC1C,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA,wEAAqB;AACK;;;;;;;;;;;;;;;;;AC36B1B;AACA;AACA;AACA;AACsD;AACnB;AACnC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAwB;AAChD;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,cAAc;AACzE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,2DAA2D,YAAY;AACvE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,+DAA+D,cAAc;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,+DAA+D,cAAc;AAC7E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,iEAAiE,cAAc;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,iEAAiE,cAAc;AAC/E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,qEAAqE,cAAc;AACnF;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW,gDAAS,EAAE;AACzC,KAAK;AACL,CAAC;AACD,mEAAmE,cAAc;AACjF;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW,8CAAO,EAAE;AACvC,KAAK;AACL,CAAC;AACD,wEAAqB;AACI;;;;;;;;;;;;;;;;;;;;;ACnHzB;AACA;AACA;AACA;AACsD;AACjB;AACM;AACN;AACa;AACV;AACxC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA,6EAA6E,mBAAmB;AAChG;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,6BAA6B,YAAY,gBAAgB,iEAAkB;AAC3E,4FAA4F,cAAc;AAC1G;AACA,sCAAsC,gCAAgC;AACtE,sCAAsC,+BAA+B;AACrE,sCAAsC,gCAAgC;AACtE;AACA,oCAAoC,WAAW;AAC/C,sCAAsC,gCAAgC;AACtE,oCAAoC,WAAW;AAC/C;AACA,wBAAwB,gCAAgC;AACxD;AACA,wBAAwB,oEAAyB;AACjD;AACA,sCAAsC,+BAA+B;AACrE,sCAAsC,+BAA+B;AACrE,oCAAoC,WAAW;AAC/C;AACA,sCAAsC,gCAAgC;AACtE,sCAAsC,gCAAgC;AACtE,sCAAsC,gCAAgC;AACtE;AACA;AACA;AACA;AACA,iBAAiB,oEAAoE;AACrF,uBAAuB,iEAAkB;AACzC,qFAAqF,YAAY;AACjG;AACA,sCAAsC,gCAAgC;AACtE,sCAAsC,+BAA+B;AACrE,sCAAsC,gCAAgC;AACtE;AACA,oCAAoC,WAAW;AAC/C,sCAAsC,gCAAgC;AACtE,oCAAoC,WAAW;AAC/C;AACA,wBAAwB,gCAAgC;AACxD;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE,oCAAoC,WAAW;AAC/C;AACA,sCAAsC,gCAAgC;AACtE,sCAAsC,gCAAgC;AACtE,sCAAsC,gCAAgC;AACtE;AACA;AACA;AACA;AACA,iBAAiB,oEAAoE;AACrF,uBAAuB,8DAAe;AACtC;AACA;AACA,sCAAsC,gCAAgC;AACtE,sCAAsC,gCAAgC;AACtE,sCAAsC,+BAA+B;AACrE,sCAAsC,gCAAgC;AACtE,4CAA4C,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,6BAA6B,YAAY,gBAAgB,iEAAkB;AAC3E,qFAAqF,cAAc;AACnG;AACA,mCAAmC,+BAA+B;AAClE,mCAAmC,+BAA+B;AAClE,mCAAmC,+BAA+B;AAClE;AACA,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE;AACA,mCAAmC,gCAAgC;AACnE,mCAAmC,+BAA+B;AAClE,sCAAsC,+BAA+B;AACrE,mCAAmC,gCAAgC;AACnE,oCAAoC,WAAW;AAC/C;AACA,mCAAmC,gCAAgC;AACnE,sCAAsC,gCAAgC;AACtE,mCAAmC,gCAAgC;AACnE,sCAAsC,gCAAgC;AACtE,mCAAmC,gCAAgC;AACnE,sCAAsC,gCAAgC;AACtE;AACA;AACA;AACA;AACA,iBAAiB,oEAAoE;AACrF,uBAAuB,8DAAe;AACtC;AACA;AACA,KAAK;AACL;AACA,mCAAmC,gCAAgC;AACnE,mCAAmC,+BAA+B;AAClE,sCAAsC,gCAAgC;AACtE,mCAAmC,gCAAgC;AACnE;AACA,oCAAoC,WAAW;AAC/C,mCAAmC,gCAAgC;AACnE,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE;AACA,mCAAmC,gCAAgC;AACnE,mCAAmC,+BAA+B;AAClE,sCAAsC,+BAA+B;AACrE,mCAAmC,gCAAgC;AACnE,oCAAoC,WAAW;AAC/C;AACA,mCAAmC,gCAAgC;AACnE,sCAAsC,gCAAgC;AACtE,mCAAmC,gCAAgC;AACnE,sCAAsC,gCAAgC;AACtE,mCAAmC,gCAAgC;AACnE,sCAAsC,gCAAgC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,qFAAqF,YAAY;AACjG;AACA,0BAA0B,gDAAM;AAChC,mCAAmC,+BAA+B;AAClE,mCAAmC,+BAA+B;AAClE,mCAAmC,+BAA+B;AAClE,sCAAsC,+BAA+B;AACrE,sCAAsC,gCAAgC;AACtE;AACA,0BAA0B,gDAAM;AAChC,sCAAsC,gCAAgC;AACtE,sCAAsC,gCAAgC;AACtE,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C;AACA,0BAA0B,gDAAM;AAChC,mCAAmC,+BAA+B;AAClE,mCAAmC,gCAAgC;AACnE,sCAAsC,gCAAgC;AACtE,mCAAmC,+BAA+B;AAClE,sCAAsC,gCAAgC;AACtE;AACA,0BAA0B,gDAAM;AAChC,sCAAsC,+BAA+B;AACrE,sCAAsC,gCAAgC;AACtE,qEAAqE,cAAc;AACnF;AACA,mCAAmC,+BAA+B;AAClE,sCAAsC,gCAAgC;AACtE,yCAAyC,WAAW;AACpD,wCAAwC,+BAA+B;AACvE;AACA,2CAA2C,+BAA+B;AAC1E;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,2BAA2B;AAC3B,sBAAsB,sDAAc,uBAAuB;AAC3D;AACA,sBAAsB,oFAAoF;AAC1G,sBAAsB,oFAAoF;AAC1G,sBAAsB,qFAAqF;AAC3G,sBAAsB,qFAAqF;AAC3G;AACA;AACA,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE,sCAAsC,+BAA+B;AACrE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C,mCAAmC,gCAAgC;AACnE,sCAAsC,gCAAgC;AACtE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C;AACA,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C;AACA,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE,sCAAsC,+BAA+B;AACrE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C,mCAAmC,gCAAgC;AACnE,sCAAsC,gCAAgC;AACtE,oCAAoC,WAAW;AAC/C,mCAAmC,+BAA+B;AAClE,oCAAoC,WAAW;AAC/C;AACA,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA,qCAAqC,4DAAoB;AACzD;AACA;AACA;AACA,iBAAiB,0CAA0C;AAC3D;AACA,uBAAuB,iEAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACQ;;;;;;;;;;;;;;;;;ACnR7B;AACA;AACA;AACA;AACsD;AACK;AAC3D;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,6BAA6B,YAAY,gBAAgB,2DAAmB;AAC5E,qFAAqF,YAAY;AACjG,+BAA+B,8CAAM;AACrC;AACA,0BAA0B,8CAAM;AAChC,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,+BAA+B,8CAAM;AACrC,+BAA+B,8CAAM;AACrC;AACA;AACA;AACA;AACA,iBAAiB,oEAAoE;AACrF,uBAAuB,2DAAmB;AAC1C,qFAAqF,YAAY;AACjG,+BAA+B,8CAAM;AACrC,+BAA+B,8CAAM;AACrC,+BAA+B,8CAAM;AACrC;AACA,0BAA0B,8CAAM;AAChC,oCAAoC,YAAY;AAChD,oCAAoC,YAAY;AAChD,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,6BAA6B,oBAAoB,gBAAgB,2DAAmB;AACpF,2FAA2F,YAAY;AACvG;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC;AACA;AACA,8CAA8C,gCAAgC;AAC9E;AACA,+BAA+B,8CAAM;AACrC;AACA,0BAA0B,8CAAM;AAChC,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C;AACA,0BAA0B,8CAAM;AAChC,oCAAoC,WAAW;AAC/C;AACA,+BAA+B,8CAAM;AACrC,6BAA6B,2BAA2B,sCAAsC;AAC9F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,qFAAqF,YAAY;AACjG,+BAA+B,8CAAM;AACrC;AACA,0BAA0B,8CAAM;AAChC,oCAAoC,WAAW;AAC/C,oCAAoC,WAAW;AAC/C,+BAA+B,8CAAM;AACrC,+BAA+B,8CAAM;AACrC,qEAAqE,cAAc;AACnF,aAAa,2BAA2B;AACxC,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA,qFAAqF,YAAY;AACjG,+BAA+B,8CAAM,MAAM,mBAAmB;AAC9D,+BAA+B,8CAAM;AACrC,+BAA+B,8CAAM,MAAM,mBAAmB;AAC9D,+BAA+B,8CAAM;AACrC,qDAAqD,cAAc;AACnE,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA,kCAAkC,8CAAM,MAAM,mBAAmB;AACjE,kCAAkC,8CAAM;AACxC,kCAAkC,8CAAM,MAAM,mBAAmB;AACjE,kCAAkC,8CAAM;AACxC;AACA,oBAAoB,cAAc,iBAAiB,kBAAkB;AACrE,oBAAoB,cAAc,iBAAiB,kBAAkB;AACrE,oBAAoB,cAAc,iBAAiB,kBAAkB;AACrE,oBAAoB,cAAc,iBAAiB,kBAAkB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA;AACA;AACA,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,kBAAkB;AAC5B;AACA;AACA,KAAK;AACL;AACA;AACA,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B;AACA;AACA,KAAK;AACL;AACA;AACA,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B;AACA;AACA,KAAK;AACL;AACA;AACA,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAkD;AAChF;AACA;AACA;AACA;AACA,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B;AACA;AACA,KAAK;AACL;AACA;AACA,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B,UAAU,iBAAiB;AAC3B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA;AACA,yBAAyB,gEAAgE;AACzF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD,sBAAsB,yDAAyD;AAC/E,sBAAsB,sEAAsE;AAC5F;AACA,yBAAyB,oFAAoF;AAC7G,wCAAwC,WAAW;AACnD,sBAAsB,sEAAsE;AAC5F;AACA,yBAAyB,oFAAoF;AAC7G,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD;AACA;AACA,oBAAoB,qCAAqC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,6BAA6B,4CAAI;AACjC;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,6BAA6B,4CAAI;AACjC;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,8BAA8B,8CAAM;AACpC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC,iCAAiC,8CAAM;AACvC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB,6DAAqB;AACvC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wEAAqB;AACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtXxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACP;AACI;AAChB;AACU;AACM;AACA;AACR;AACkB;AACrB;AACC;AACE;AACU;AACrD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA,yEAAyE,kCAAkC;AAC3G;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,uBAAuB,2DAAY;AACnC;AACA;AACA;AACA,uCAAuC,2EAA2B,EAAE,uEAAsB;AAC1F;AACA;AACA;AACA,yBAAyB,+DAA+D;AACxF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD;AACA,yBAAyB,+DAA+D;AACxF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD,sBAAsB,iDAAiD;AACvE,sBAAsB,iDAAiD;AACvE;AACA,yBAAyB,6BAA6B;AACtD;AACA,sBAAsB,gBAAgB,kBAAkB,uDAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2DAAY;AACvC,2BAA2B,mDAAQ;AACnC,2BAA2B,uDAAU;AACrC,2BAA2B,2DAAY,eAAe,WAAW,iBAAiB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAQ;AAC9B;AACA;AACA,wCAAwC,kDAAO;AAC/C;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS,kBAAkB,uDAAU;AACrC;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,6BAA6B,2CAAI;AACjC,8BAA8B,gDAAM,MAAM,mBAAmB;AAC7D;AACA,IAAI,mEAAuB;AAC3B;AACA;AACA,wEAAqB;AACC;;;;;;;;;;;;;;;;;;;;;;;;;ACxHtB;AACA;AACA;AACA;AACsD;AACrB;AACE;AACY;AACF;AACR;AACI;AACE;AACM;AACD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,sDAAe;AACrC,mBAAmB,iDAAO,GAAG,cAAc,iBAAiB,kBAAkB;AAC9E;AACA,eAAe,iDAAO,GAAG,cAAc,iBAAiB,kBAAkB;AAC1E;AACA;AACA;AACA,qBAAqB,iDAAO;AAC5B;AACA,cAAc,iBAAiB;AAC/B,cAAc,iBAAiB;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iDAAO;AAC5B;AACA,cAAc,iBAAiB;AAC/B,cAAc,iBAAiB;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,iDAAO;AAC5B;AACA,cAAc,iBAAiB;AAC/B,cAAc,iBAAiB;AAC/B;AACA;AACA,KAAK;AACL,4BAA4B,yDAAW;AACvC;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA,UAAU,cAAc,iBAAiB,kBAAkB;AAC3D;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,mBAAmB;AACrC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,mBAAmB;AACrC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,iDAAO;AACnC,gCAAgC,yDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,iDAAO;AACnC;AACA;AACA,KAAK;AACL,sBAAsB,6CAAK,CAAC,mDAAY,UAAU,sDAAc;AAChE;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,iDAAO;AACnC;AACA;AACA;AACA,KAAK;AACL,sBAAsB,6CAAK,CAAC,mDAAY,UAAU,sDAAc;AAChE;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,iDAAO;AACnC;AACA;AACA;AACA,KAAK;AACL,gBAAgB,sDAAe,MAAM,sDAAe;AACpD,sBAAsB,6CAAK,CAAC,mDAAY,UAAU,sDAAc;AAChE;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ,gBAAgB,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,iDAAO;AACnC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB,6CAAK,CAAC,mDAAY,UAAU,sDAAc;AAChE;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA,4CAA4C,iDAAO;AACnD,IAAI,wDAAkB;AACtB,sBAAsB,6CAAK,CAAC,mDAAY,UAAU,sDAAc;AAChE;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA,wEAAqB;AACG;;;;;;;;;;;;;;;;;;;;;;AC9dxB;AACA;AACA;AACA;AACsD;AACnB;AACU;AACJ;AACE;AACA;AACN;AACrC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,6CAAK,CAAC,mDAAY;AACxC;AACA,QAAQ,qDAAS;AACjB;AACA,oBAAoB,mDAAQ;AAC5B;AACA;AACA;AACA;AACA,KAAK,EAAE,4DAAiB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B,aAAa;AACb;AACA;AACA,oCAAoC,iDAAO;AAC3C;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,kBAAkB,cAAc,kBAAkB,kBAAkB;AACpE,kBAAkB,cAAc,kBAAkB,kBAAkB;AACpE;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA,sBAAsB,6CAAK,CAAC,mDAAY;AACxC,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAsB;AAC7C;AACA;AACA;AACA,uBAAuB,mEAAwB;AAC/C;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;;AClJzB;AACA;AACA;AACA;AACsD;AACX;AAC3C;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;;;;;;;;AC1BzB;AACA;AACA;AACA;AACsD;AACP;AACZ;AACU;AACJ;AACE;AACJ;AACF;AACrC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oCAAoC,iDAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yEAAsB;AACnD,sBAAsB,mDAAQ;AAC9B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK,CAAC,mDAAY;AACxC;AACA,QAAQ,qDAAS;AACjB;AACA,oBAAoB,+CAAM;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B,4BAA4B,cAAc,iBAAiB,kBAAkB;AAC7E,4BAA4B,cAAc,iBAAiB,kBAAkB;AAC7E;AACA;AACA;AACA;AACA;AACA,uBAAuB,8DAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,6DAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,kBAAkB,cAAc,kBAAkB,kBAAkB;AACpE,kBAAkB,cAAc,kBAAkB,kBAAkB;AACpE;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,kBAAkB;AACpC;AACA;AACA,SAAS;AACT;AACA,sBAAsB,6CAAK,CAAC,mDAAY;AACxC,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B,4BAA4B,cAAc,kBAAkB,kBAAkB,kBAAkB,uDAAU;AAC1G,4BAA4B,cAAc,kBAAkB,kBAAkB;AAC9E;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE,kBAAkB,cAAc,iBAAiB,kBAAkB;AACnE;AACA,sBAAsB,6CAAK,CAAC,mDAAY;AACxC,QAAQ,qDAAS;AACjB;AACA,IAAI,8DAAqB;AACzB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI,6DAAoB;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wEAAqB;AACE;;;;;;;;;;;;;;;;AChMvB;AACA;AACA;AACA;AACsD;AACtD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,wDAAwD,YAAY;AACpE,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,wDAAwD,YAAY;AACpE,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAA8D;AACtF,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACO;;;;;;;;;;;;;;;;;ACxG5B;AACA;AACA;AACA;AACsD;AACD;AACrD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+BAA+B,6EAA6B;AAC5D;AACA;AACA;AACA;AACA,kCAAkC,qEAAqB;AACvD;AACA,uCAAuC,oEAAoB,GAAG,yCAAyC;AACvG;AACA;AACA,mCAAmC,oEAAoB,GAAG,uDAAuD;AACjH;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACS;;;;;;;;;;;;;;;;;;;;;;ACjC9B;AACA;AACA;AACA;AACsD;AACT;AACV;AACA;AACA;AACE;AACM;AAC3C;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA,yBAAyB,gEAAgE;AACzF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD,sBAAsB,gEAAgE;AACtF;AACA,yBAAyB,gEAAgE;AACzF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD;AACA;AACA,qBAAqB,6CAA6C,mBAAmB,wEAA6B;AAClH,qBAAqB,oCAAoC;AACzD,qBAAqB,8BAA8B,mBAAmB,uEAA4B;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,kDAAkD;AACxE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,mDAAmD;AACzE,sBAAsB,0DAA0D;AAChF,sBAAsB,0DAA0D;AAChF,sBAAsB,0DAA0D;AAChF,sBAAsB,yDAAyD;AAC/E,sBAAsB,yDAAyD;AAC/E,sBAAsB,yDAAyD;AAC/E,sBAAsB,wDAAwD;AAC9E;AACA;AACA,qBAAqB,2BAA2B,mBAAmB,wEAA6B;AAChG,qBAAqB,2BAA2B;AAChD,qBAAqB,2BAA2B,mBAAmB,uEAA4B;AAC/F,qBAAqB,2BAA2B,mBAAmB,wEAA6B;AAChG,qBAAqB,2BAA2B;AAChD,qBAAqB,2BAA2B,mBAAmB,uEAA4B;AAC/F,qBAAqB,2BAA2B,mBAAmB,wEAA6B;AAChG,qBAAqB,2BAA2B;AAChD,qBAAqB,2BAA2B,mBAAmB,uEAA4B;AAC/F,qBAAqB,2BAA2B,mBAAmB,wEAA6B;AAChG,qBAAqB,2BAA2B;AAChD,qBAAqB,2BAA2B,mBAAmB,uEAA4B;AAC/F,qBAAqB,0BAA0B,mBAAmB,uEAA4B;AAC9F;AACA;AACA,4CAA4C,uDAAgB;AAC5D;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA,yBAAyB,+DAA+D;AACxF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD,sBAAsB,+DAA+D;AACrF;AACA,yBAAyB,+DAA+D;AACxF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD;AACA;AACA,qBAAqB,MAAM,wDAAiB,0CAA0C;AACtF,qBAAqB,YAAY,yDAAkB,8CAA8C;AACjG,qBAAqB,6DAA6D;AAClF,qBAAqB,wBAAwB,4DAAqB,sCAAsC;AACxG,qBAAqB,0BAA0B,mEAA4B,uBAAuB;AAClG,qBAAqB,4CAA4C;AACjE;AACA;AACA;AACA,2BAA2B,QAAQ,iDAAU,YAAY;AACzD;AACA,kCAAkC,sEAA2B;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA,yBAAyB,gEAAgE;AACzF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD,sBAAsB,gEAAgE;AACtF,sBAAsB,gEAAgE;AACtF,sBAAsB,gEAAgE;AACtF,sBAAsB,gEAAgE;AACtF;AACA;AACA,qBAAqB,+BAA+B,mBAAmB,wEAA6B;AACpG,qBAAqB,2BAA2B;AAChD,qBAAqB,2BAA2B;AAChD,qBAAqB,2BAA2B;AAChD,qBAAqB,2BAA2B;AAChD,qBAAqB,wCAAwC;AAC7D,qBAAqB,wCAAwC;AAC7D,qBAAqB,+BAA+B;AACpD,qBAAqB,8BAA8B;AACnD;AACA,4DAA4D,wEAA6B;AACzF;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA;AACA,yBAAyB,gEAAgE;AACzF,wCAAwC,WAAW;AACnD,wCAAwC,WAAW;AACnD,sBAAsB,gEAAgE;AACtF,sBAAsB,gEAAgE;AACtF,sBAAsB,gEAAgE;AACtF,sBAAsB,gEAAgE;AACtF;AACA;AACA,qBAAqB,+BAA+B;AACpD,qBAAqB,wCAAwC;AAC7D,qBAAqB,oCAAoC;AACzD,qBAAqB,qCAAqC;AAC1D,qBAAqB,wCAAwC;AAC7D,qBAAqB,0CAA0C;AAC/D,qBAAqB,gCAAgC;AACrD,qBAAqB,8BAA8B;AACnD,qBAAqB,0CAA0C,mBAAmB,wEAA6B;AAC/G;AACA,4DAA4D,wEAA6B;AACzF;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,OAAO;AACnC;AACA;AACA,qBAAqB,4BAA4B;AACjD,YAAY,qDAAS,GAAG,gBAAgB;AACxC,qBAAqB,4BAA4B;AACjD,YAAY,qDAAS,GAAG,eAAe;AACvC,YAAY,qDAAS,GAAG,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,yBAAyB,4BAA4B;AACrD,yBAAyB,4BAA4B;AACrD,yBAAyB,2BAA2B;AACpD,yBAAyB,4BAA4B;AACrD,yBAAyB,4BAA4B;AACrD,yBAAyB,2BAA2B;AACpD,yBAAyB,4BAA4B;AACrD,SAAS,aAAa;AACtB;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,4BAA4B,sBAAsB,4DAAoB,EAAE;AACxE;AACA;AACA;AACA;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;;AC7NzB;AACA;AACA;AACA;AAC8D;AAC3B;AACnC;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAqB;AACjC,YAAY,4DAAqB;AACjC,YAAY,4DAAqB;AACjC,iBAAiB,yDAAM;AACvB;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,YAAY,2EAA2E,cAAc,0BAA0B,cAAc;AACvM,0DAA0D,+BAA+B;AACzF;AACA;AACA,mCAAmC,+BAA+B;AAClE,mCAAmC,+BAA+B;AAClE,CAAC;AACD;AACA;AACA;AACA,wFAAwF,YAAY,wFAAwF,cAAc,gCAAgC,cAAc;AACxP;AACA;AACA,mCAAmC,+BAA+B;AAClE,mCAAmC,gCAAgC;AACnE;AACA;AACA,mCAAmC,+BAA+B;AAClE,mCAAmC,+BAA+B;AAClE,CAAC;AACD;AACA;AACA;AACA,0EAA0E,YAAY,0CAA0C,cAAc,0BAA0B,cAAc;AACtL;AACA;AACA,mCAAmC,+BAA+B;AAClE,mCAAmC,+BAA+B;AAClE,0DAA0D,+BAA+B;AACzF,0DAA0D,+BAA+B;AACzF,CAAC;AACD;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iGAAiG,YAAY;AAC7G;AACA;AACA,aAAa;AACb,0BAA0B,2DAA2D;AACrF;AACA;AACA,6BAA6B,4DAAqB,uBAAuB,4DAAqB;AAC9F,wEAAwE,aAAa;AACrF;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA,kFAAkF,YAAY,KAAK,aAAa;AAChH,oFAAoF,cAAc,KAAK,aAAa;AACpH,kFAAkF,cAAc,KAAK,aAAa;AAClH;AACA,6BAA6B,2DAA2D;AACxF,6BAA6B,iDAAiD;AAC9E,iBAAiB,aAAa;AAC9B;AACA,wEAAwE,aAAa;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA,oFAAoF,aAAa;AACjG,sFAAsF,aAAa;AACnG,oFAAoF,aAAa;AACjG,sCAAsC,2DAA2D,MAAM,aAAa;AACpH;AACA,wEAAwE,aAAa;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACO;;;;;;;;;;;;;;;;;;;ACtJ5B;AACA;AACA;AACA;AACsD;AACnB;AACc;AACV;AACvC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,yDAAW;AAC9B;AACA;AACA;AACA,sBAAsB,sDAAe;AACrC;AACA,YAAY,gDAAY;AACxB,YAAY,gDAAY;AACxB,YAAY,gDAAY;AACxB;AACA,mBAAmB,yDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACO;;;;;;;;;;;;;;;;;;;ACvC5B;AACA;AACA;AACA;AACsD;AACjB;AACkB;AACF;AACrD;AACA;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,6DAAa;AACrC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,kBAAkB;AACtE,oFAAoF,SAAS;AAC7F,uBAAuB,6CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAK;AAC5B,uBAAuB,6CAAK;AAC5B,QAAQ,+DAAc;AACtB,QAAQ,+DAAc;AACtB,QAAQ,+DAAc;AACtB;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,YAAY;AACxC;AACA,sBAAsB,8CAA8C;AACpE,wBAAwB,aAAa;AACrC,sBAAsB,4CAA4C;AAClE,sBAAsB,6CAA6C;AACnE,wBAAwB,WAAW;AACnC,sBAAsB,0DAA0D;AAChF,wBAAwB,aAAa;AACrC,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACS;;;;;;;;;;;;;;;;;;AC1I9B;AACA;AACA;AACA;AACsD;AACR;AACL;AACzC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,6BAA6B,YAAY,gBAAgB,kEAAmB;AAC5E,qDAAqD,YAAY;AACjE,8BAA8B,iDAAO;AACrC,8BAA8B,iDAAO;AACrC,8BAA8B,iDAAO;AACrC;AACA;AACA;AACA;AACA,iBAAiB,oEAAoE;AACrF,uBAAuB,kEAAmB;AAC1C,qDAAqD,cAAc;AACnE,8BAA8B,iDAAO;AACrC,8BAA8B,iDAAO;AACrC,8BAA8B,iDAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC;AACA;AACA,6BAA6B,YAAY,gBAAgB,kEAAmB;AAC5E,qDAAqD,YAAY;AACjE,yBAAyB,iDAAO;AAChC;AACA;AACA,yBAAyB,iDAAO;AAChC;AACA;AACA,yBAAyB,iDAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAoE;AACrF,uBAAuB,kEAAmB;AAC1C,qDAAqD,cAAc;AACnE,yBAAyB,iDAAO;AAChC;AACA;AACA,yBAAyB,iDAAO;AAChC;AACA;AACA,yBAAyB,iDAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACG;;;;;;;;;;;;;;;;;AClFxB;AACA;AACA;AACA;AACsD;AACf;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACE;;;;;;;;;;;;;;;;;;;;ACtEvB;AACA;AACA;AACA;AACsD;AACrB;AACY;AACV;AACI;AACvC;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8CAAO;AAC1C,qCAAqC,gDAAS;AAC9C;AACA;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA,eAAe,0BAA0B;AACzC,eAAe,0BAA0B;AACzC;AACA;AACA,iBAAiB,QAAQ,+BAA+B;AACxD;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC,eAAe,0BAA0B;AACzC,eAAe,2BAA2B;AAC1C;AACA;AACA,iBAAiB,QAAQ,+BAA+B;AACxD;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,0BAA0B;AACtD;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,cAAc;AAC1C;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,UAAU,+DAAsB,EAAE;AACrD,KAAK;AACL;AACA;AACA,mBAAmB,UAAU,+DAAsB,EAAE;AACrD,KAAK;AACL;AACA,iBAAiB,QAAQ,+BAA+B;AACxD;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,cAAc;AAC1C;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,+DAAsB;AAC5C;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,sBAAsB,+DAAsB;AAC5C;AACA,SAAS;AACT,KAAK;AACL;AACA,iBAAiB,QAAQ,+BAA+B;AACxD;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,cAAc;AAC1C;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,cAAc;AAC1C;AACA,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,gCAAgC;AAC1C,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA,IAAI,wDAAkB,gBAAgB,WAAW;AACjD,sBAAsB,eAAe,IAAI,eAAe,IAAI,eAAe,IAAI,eAAe;AAC9F;AACA;AACA;AACA,aAAa,2BAA2B;AACxC,aAAa,2BAA2B;AACxC,aAAa,6BAA6B;AAC1C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,cAAc;AAC1C;AACA,UAAU,kCAAkC;AAC5C,UAAU,mCAAmC;AAC7C,UAAU,kCAAkC;AAC5C,UAAU,kCAAkC;AAC5C,UAAU,mCAAmC;AAC7C,UAAU,mCAAmC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,cAAc;AAC1C;AACA,UAAU,kCAAkC;AAC5C,UAAU,mCAAmC;AAC7C,UAAU,kCAAkC;AAC5C,UAAU,kCAAkC;AAC5C,UAAU,mCAAmC;AAC7C,UAAU,mCAAmC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,cAAc;AAC1C;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,+BAA+B;AACzC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA,cAAc,2EAAwB;AACtC,4BAA4B,cAAc;AAC1C;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,iBAAiB,QAAQ,+BAA+B;AACxD;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA,wEAAqB;AACE;;;;;;;;;;;;;;;;;;;;;ACrdvB;AACA;AACA;AACA;AACA;AACA;AACA;AACsD;AACD;AACR;AACQ;AACZ;AACuE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB,qDAAS,GAAG,8BAA8B;AAC5D,OAAO,2DAAW;AAClB,OAAO,0DAAU;AACjB,UAAU,yDAAS;AACnB,kBAAkB,iDAAO,GAAG,cAAc,iBAAiB,kBAAkB;AAC7E,OAAO,yDAAS;AAChB,UAAU,2DAAW;AACrB,OAAO,sDAAM;AACb,OAAO,+DAAe;AACtB,OAAO,sDAAM;AACb;AACA;AACA;AACA,oBAAoB,6DAAa;AACjC,OAAO,+DAAe;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO,+DAAe;AACtB,UAAU,sDAAM;AAChB,OAAO,0DAAU;AACjB,OAAO,2DAAW;AAClB,OAAO,0DAAU;AACjB,UAAU,sDAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sEAAsB;AACvD;AACA;AACA;AACA,6BAA6B,8DAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sEAAsB;AACvD;AACA;AACA,6BAA6B,8DAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAqB;AACK;;;;;;;;;;;;;;;;;;;;ACvG1B;AACA;AACA;AACA;AAC6D;AAClB;AAC3C,eAAe,uDAAY;AAC3B;AACA;AACA;AACA,wBAAwB,yDAAiB;AACzC,IAAI,yDAAiB;AACrB;AACA;AACA,IAAI,yDAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAwB;AACrC;AACA;AACA;AACA;AACA;AACA,aAAa,6DAAqB;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAwB;AACrC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY,kBAAkB;AAC5C;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ,IAAI,UAAU;AACnE;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC,mBAAmB,+CAAO,GAAG,YAAY,qCAAqC;AAC9E;AACA;AACA;AACA;AACA;AACA,qEAAqE,yBAAyB,gCAAgC;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,sBAAsB,gCAAgC;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uBAAuB,gCAAgC;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D,gCAAgC,2BAA2B,GAAG,WAAW,GAAG,SAAS,EAAE,SAAS;AAChG,0DAA0D;AAC1D;AACA,yEAAyE,oBAAoB;AAC7F;AACA;AACA;AACA;AACA,2BAA2B,wEAAwE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,kBAAkB;AACnF;AACA,gEAAgE,UAAU,IAAI,cAAc;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO,EAAE,yBAAyB,GAAG,mBAAmB,GAAG,cAAc;AAC5G;AACA,kCAAkC;AAClC,0CAA0C,6DAAqB;AAC/D,+CAA+C,8DAAsB,GAAG,iEAAyB;AACjG;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAS;;;;;;;;;;;;;;;;;ACjVT;AACA;AACA;AACA;AACA;AACA;AACsD;AAC+yB;AACr2B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,kDAAU;AACpB,UAAU,kDAAU;AACpB,UAAU,oDAAY;AACtB,UAAU,+CAAO;AACjB,UAAU,+CAAO;AACjB,UAAU,4CAAI;AACd,UAAU,4CAAI;AACd,UAAU,mDAAW;AACrB,UAAU,8DAAsB;AAChC,UAAU,mDAAW;AACrB,UAAU,4CAAI;AACd,UAAU,gDAAQ;AAClB,UAAU,iDAAS;AACnB,UAAU,6CAAK;AACf,UAAU,2CAAG;AACb,UAAU,iDAAS;AACnB,UAAU,+CAAO;AACjB,UAAU,+CAAO;AACjB,UAAU,uDAAe;AACzB,UAAU,4CAAI;AACd,UAAU,iDAAS;AACnB,kBAAkB,iDAAS;AAC3B,UAAU,gDAAQ;AAClB,UAAU,sDAAc;AACxB,UAAU,iDAAS;AACnB,UAAU,6CAAK;AACf,UAAU,iDAAS;AACnB,UAAU,iDAAS;AACnB,UAAU,sDAAc;AACxB,UAAU,oDAAY;AACtB,UAAU,kDAAU;AACpB,UAAU,oDAAY;AACtB,UAAU,kDAAU;AACpB,UAAU,gDAAQ;AAClB,UAAU,uDAAe;AACzB,UAAU,wDAAgB;AAC1B,UAAU,6CAAK;AACf,UAAU,4CAAI;AACd,UAAU,gDAAQ;AAClB,UAAU,oDAAY;AACtB,UAAU,gDAAQ;AAClB,UAAU,8CAAM;AAChB,UAAU,oDAAY;AACtB,UAAU,gDAAQ;AAClB,UAAU,gDAAQ;AAClB,UAAU,kDAAU;AACpB,UAAU,kDAAU;AACpB,UAAU,6CAAK;AACf,aAAa,6CAAK;AAClB,UAAU,sDAAc;AACxB,UAAU,oDAAY;AACtB,UAAU,iDAAS;AACnB,UAAU,qDAAa;AACvB,UAAU,iDAAS;AACnB,UAAU,kDAAU;AACpB,UAAU,iDAAS;AACnB,UAAU,gDAAQ;AAClB,UAAU,4CAAI;AACd,UAAU,oDAAY;AACtB,UAAU,8CAAM;AAChB,UAAU,8CAAM;AAChB,UAAU,+CAAO;AACjB,UAAU,gDAAQ;AAClB,UAAU,gDAAQ;AAClB,UAAU,8CAAM;AAChB,UAAU,mDAAW;AACrB,UAAU,oDAAY;AACtB,UAAU,qDAAa;AACvB,UAAU,gDAAQ;AAClB,UAAU,mDAAW;AACrB,UAAU,qDAAa;AACvB,UAAU,mDAAW;AACrB,UAAU,+CAAO;AACjB,UAAU,8CAAM;AAChB,UAAU,8CAAM;AAChB,UAAU,+CAAO;AACjB,UAAU,sDAAc;AACxB,UAAU,6CAAK;AACf,UAAU,6CAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,YAAY,wCAAwC;AACpD,UAAU,kDAAU;AACpB,UAAU,kDAAU;AACpB;AACA;AACA;AACA,qBAAqB,kDAAU;AAC/B;AACA;AACA,wEAAqB;AACI;;;;;;;;;;;;;;;;;AC9HzB;AACA;AACA;AACA;AACsD;AAC2B;AACjF;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,+CAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAQ;AAC9B;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS,kBAAkB,+CAAO;AAClC;AACA,0BAA0B,kBAAkB;AAC5C;AACA,SAAS,kBAAkB,+CAAO;AAClC;AACA,IAAI,+DAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAQ;AAC9B;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS,kBAAkB,+CAAO;AAClC;AACA,0BAA0B,kBAAkB;AAC5C;AACA,SAAS,kBAAkB,+CAAO;AAClC;AACA,IAAI,+DAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAe,EAAE,yEAAsB;AACvD,sBAAsB,gDAAQ;AAC9B;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,kBAAkB,iBAAiB;AACnC;AACA;AACA,SAAS;AACT,6BAA6B,4CAAI;AACjC,6BAA6B,4CAAI;AACjC,6BAA6B,+CAAO;AACpC;AACA,0BAA0B,kBAAkB;AAC5C;AACA,SAAS;AACT,6BAA6B,4CAAI;AACjC,6BAA6B,+CAAO;AACpC;AACA,0BAA0B,kBAAkB;AAC5C;AACA,SAAS,kBAAkB,+CAAO;AAClC;AACA,IAAI,+DAAuB;AAC3B;AACA;AACA,wEAAqB;AACG;;;;;;;;;;;;;;;;ACxGxB;AACA;AACA;AACA;AACA;AACA;AACsD;AACtD;AACA;AACA;AACA,oBAAoB,wEAAqB;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wBAAwB,2EAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,KAAK;AACL,CAAC;AACD,wEAAqB;AACU;;;;;;;;;;;;;;;;;;;;;;;ACnD/B;AACA;AACA;AACA;AACsD;AACnB;AACU;AACR;AACS;AACD;AACR;AACE;AACvC;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAqB;AAC7B,KAAK;AACL;AACA,kBAAkB,sDAAe;AACjC;AACA,iCAAiC,gDAAY;AAC7C;AACA;AACA;AACA,sBAAsB,6CAAK,CAAC,mDAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK,CAAC,mDAAY;AACxC;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAAK,sEAAsE,+DAAgB;AACjH;AACA,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,8BAA8B;AACtD,YAAY,qDAAS,GAAG,+BAA+B;AACvD;AACA;AACA,sBAAsB,6CAAK,CAAC,mDAAY,UAAU,uDAAe;AACjE,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qDAAS,GAAG,8BAA8B;AACjF;AACA,wEAAqB;AACC;;;;;;;UC3EtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACuC;AACI;AACR;AACuB;AACH;AACvD,sEAAiB;AACjB,wDAAiB;AACjB,mEAAa;AACb;AAC6B;AACE;AAC/B;AACA,iEAAe,8BAA8B,EAAE,uCAAM,GAAG,yCAAQ,CAAC,EAAC","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/./src/version.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/boundingboxcomputation.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/font.ts","webpack://Vex/./src/fonts/bravura_glyphs.ts","webpack://Vex/./src/fonts/bravura_metrics.ts","webpack://Vex/./src/fonts/custom_glyphs.ts","webpack://Vex/./src/fonts/custom_metrics.ts","webpack://Vex/./src/fonts/gonville_glyphs.ts","webpack://Vex/./src/fonts/gonville_metrics.ts","webpack://Vex/./src/fonts/leland_glyphs.ts","webpack://Vex/./src/fonts/leland_metrics.ts","webpack://Vex/./src/fonts/load_all.ts","webpack://Vex/./src/fonts/load_bravura.ts","webpack://Vex/./src/fonts/load_custom.ts","webpack://Vex/./src/fonts/load_gonville.ts","webpack://Vex/./src/fonts/load_leland.ts","webpack://Vex/./src/fonts/load_petaluma.ts","webpack://Vex/./src/fonts/petaluma_glyphs.ts","webpack://Vex/./src/fonts/petaluma_metrics.ts","webpack://Vex/./src/fonts/petalumascript_glyphs.ts","webpack://Vex/./src/fonts/robotoslab_glyphs.ts","webpack://Vex/./src/fonts/textfonts.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/glyph.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/index.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/parenthesis.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/rendercontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/textformatter.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/timesigglyph.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/util.ts","webpack://Vex/./src/vex.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/web.ts","webpack://Vex/./tests/accidental_tests.ts","webpack://Vex/./tests/annotation_tests.ts","webpack://Vex/./tests/articulation_tests.ts","webpack://Vex/./tests/auto_beam_formatting_tests.ts","webpack://Vex/./tests/bach_tests.ts","webpack://Vex/./tests/barline_tests.ts","webpack://Vex/./tests/beam_tests.ts","webpack://Vex/./tests/bend_tests.ts","webpack://Vex/./tests/boundingbox_tests.ts","webpack://Vex/./tests/boundingboxcomputation_tests.ts","webpack://Vex/./tests/chordsymbol_tests.ts","webpack://Vex/./tests/clef_tests.ts","webpack://Vex/./tests/curve_tests.ts","webpack://Vex/./tests/dot_tests.ts","webpack://Vex/./tests/easyscore_tests.ts","webpack://Vex/./tests/factory_tests.ts","webpack://Vex/./tests/font_tests.ts","webpack://Vex/./tests/formatter_tests.ts","webpack://Vex/./tests/fraction_tests.ts","webpack://Vex/./tests/ghostnote_tests.ts","webpack://Vex/./tests/glyphnote_tests.ts","webpack://Vex/./tests/gracenote_tests.ts","webpack://Vex/./tests/gracetabnote_tests.ts","webpack://Vex/./tests/index.ts","webpack://Vex/./tests/key_clef_tests.ts","webpack://Vex/./tests/keymanager_tests.ts","webpack://Vex/./tests/keysignature_tests.ts","webpack://Vex/./tests/mocks.ts","webpack://Vex/./tests/modifier_tests.ts","webpack://Vex/./tests/multimeasurerest_tests.ts","webpack://Vex/./tests/music_tests.ts","webpack://Vex/./tests/notehead_tests.ts","webpack://Vex/./tests/notesubgroup_tests.ts","webpack://Vex/./tests/offscreencanvas_tests.ts","webpack://Vex/./tests/ornament_tests.ts","webpack://Vex/./tests/parser_tests.ts","webpack://Vex/./tests/pedalmarking_tests.ts","webpack://Vex/./tests/percussion_tests.ts","webpack://Vex/./tests/registry_tests.ts","webpack://Vex/./tests/renderer_tests.ts","webpack://Vex/./tests/rests_tests.ts","webpack://Vex/./tests/rhythm_tests.ts","webpack://Vex/./tests/stave_tests.ts","webpack://Vex/./tests/staveconnector_tests.ts","webpack://Vex/./tests/stavehairpin_tests.ts","webpack://Vex/./tests/staveline_tests.ts","webpack://Vex/./tests/stavemodifier_tests.ts","webpack://Vex/./tests/stavenote_tests.ts","webpack://Vex/./tests/stavetie_tests.ts","webpack://Vex/./tests/stringnumber_tests.ts","webpack://Vex/./tests/strokes_tests.ts","webpack://Vex/./tests/style_tests.ts","webpack://Vex/./tests/tabnote_tests.ts","webpack://Vex/./tests/tabslide_tests.ts","webpack://Vex/./tests/tabstave_tests.ts","webpack://Vex/./tests/tabtie_tests.ts","webpack://Vex/./tests/textbracket_tests.ts","webpack://Vex/./tests/textformatter_tests.ts","webpack://Vex/./tests/textnote_tests.ts","webpack://Vex/./tests/threevoice_tests.ts","webpack://Vex/./tests/tickcontext_tests.ts","webpack://Vex/./tests/timesignature_tests.ts","webpack://Vex/./tests/tremolo_tests.ts","webpack://Vex/./tests/tuning_tests.ts","webpack://Vex/./tests/tuplet_tests.ts","webpack://Vex/./tests/typeguard_tests.ts","webpack://Vex/./tests/vexflow_test_helpers.ts","webpack://Vex/./tests/vf_prefix_tests.ts","webpack://Vex/./tests/vibrato_tests.ts","webpack://Vex/./tests/vibratobracket_tests.ts","webpack://Vex/./tests/voice_tests.ts","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/webpack/runtime/make namespace object","webpack://Vex/./entry/vexflow-debug-with-tests.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})((typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this), () => {\nreturn ","export const VERSION = '4.0.3';\r\nexport const ID = '88ab9d73512eb88c83f434a472da06dc554921cf';\r\nexport const DATE = '2022-06-12T21:33:04.318Z';\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// @author Mohit Cheppudira\r\n// @author Greg Ristow (modifications)\r\nimport { Fraction } from './fraction';\r\nimport { Glyph } from './glyph';\r\nimport { Modifier } from './modifier';\r\nimport { Music } from './music';\r\nimport { Tables } from './tables';\r\nimport { Category, isAccidental, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\r\nimport { defined, log } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Accidental.DEBUG)\r\n        log('Vex.Flow.Accidental', args);\r\n}\r\n/**\r\n * An `Accidental` inherits from `Modifier`, and is formatted within a\r\n * `ModifierContext`. Accidentals are modifiers that can be attached to\r\n * notes. Support is included for both western and microtonal accidentals.\r\n *\r\n * See `tests/accidental_tests.ts` for usage examples.\r\n */\r\nexport class Accidental extends Modifier {\r\n    /**\r\n     * Create accidental.\r\n     * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\r\n     * For example: `#`, `##`, `b`, `n`, etc.\r\n     */\r\n    constructor(type) {\r\n        super();\r\n        L('New accidental: ', type);\r\n        this.type = type;\r\n        this.position = Modifier.Position.LEFT;\r\n        this.render_options = {\r\n            // Font size for glyphs\r\n            font_scale: 38,\r\n            // Padding between accidental and parentheses on each side\r\n            parenLeftPadding: 2,\r\n            parenRightPadding: 2,\r\n        };\r\n        this.accidental = Tables.accidentalCodes(this.type);\r\n        defined(this.accidental, 'ArgumentError', `Unknown accidental type: ${type}`);\r\n        // Cautionary accidentals have parentheses around them\r\n        this.cautionary = false;\r\n        this.reset();\r\n    }\r\n    /** Accidentals category string. */\r\n    static get CATEGORY() {\r\n        return Category.Accidental;\r\n    }\r\n    /** Arrange accidentals inside a ModifierContext. */\r\n    static format(accidentals, state) {\r\n        // If there are no accidentals, no need to format their positions.\r\n        if (!accidentals || accidentals.length === 0)\r\n            return;\r\n        const musicFont = Tables.currentMusicFont();\r\n        const noteheadAccidentalPadding = musicFont.lookupMetric('accidental.noteheadAccidentalPadding');\r\n        const leftShift = state.left_shift + noteheadAccidentalPadding;\r\n        const accidentalSpacing = musicFont.lookupMetric('accidental.accidentalSpacing');\r\n        const additionalPadding = musicFont.lookupMetric('accidental.leftPadding'); // padding to the left of all accidentals\r\n        const accList = [];\r\n        let prevNote = undefined;\r\n        let shiftL = 0;\r\n        // First determine the accidentals' Y positions from the note.keys\r\n        for (let i = 0; i < accidentals.length; ++i) {\r\n            const acc = accidentals[i];\r\n            const note = acc.getNote();\r\n            const stave = note.getStave();\r\n            const index = acc.checkIndex();\r\n            const props = note.getKeyProps()[index];\r\n            if (note !== prevNote) {\r\n                // Iterate through all notes to get the displaced pixels\r\n                for (let n = 0; n < note.keys.length; ++n) {\r\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), shiftL);\r\n                }\r\n                prevNote = note;\r\n            }\r\n            if (stave) {\r\n                const lineSpace = stave.getSpacingBetweenLines();\r\n                const y = stave.getYForLine(props.line);\r\n                const accLine = Math.round((y / lineSpace) * 2) / 2;\r\n                accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\r\n            }\r\n            else {\r\n                accList.push({ line: props.line, shift: shiftL, acc });\r\n            }\r\n        }\r\n        // Sort accidentals by line number.\r\n        accList.sort((a, b) => b.line - a.line);\r\n        // FIXME: Confusing name. Each object in this array has a property called `line`.\r\n        // So if this is a list of lines, you end up with: `line.line` which is very awkward.\r\n        const lineList = [];\r\n        // amount by which all accidentals must be shifted right or left for\r\n        // stem flipping, notehead shifting concerns.\r\n        let accShift = 0;\r\n        let previousLine = undefined;\r\n        // Create an array of unique line numbers (lineList) from accList\r\n        for (let i = 0; i < accList.length; i++) {\r\n            const acc = accList[i];\r\n            // if this is the first line, or a new line, add a lineList\r\n            if (previousLine === undefined || previousLine !== acc.line) {\r\n                lineList.push({\r\n                    line: acc.line,\r\n                    flatLine: true,\r\n                    dblSharpLine: true,\r\n                    numAcc: 0,\r\n                    width: 0,\r\n                    column: 0,\r\n                });\r\n            }\r\n            // if this accidental is not a flat, the accidental needs 3.0 lines lower\r\n            // clearance instead of 2.5 lines for b or bb.\r\n            // FIXME: Naming could use work. acc.acc is very awkward\r\n            if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\r\n                lineList[lineList.length - 1].flatLine = false;\r\n            }\r\n            // if this accidental is not a double sharp, the accidental needs 3.0 lines above\r\n            if (acc.acc.type !== '##') {\r\n                lineList[lineList.length - 1].dblSharpLine = false;\r\n            }\r\n            // Track how many accidentals are on this line:\r\n            lineList[lineList.length - 1].numAcc++;\r\n            // Track the total x_offset needed for this line which will be needed\r\n            // for formatting lines w/ multiple accidentals:\r\n            // width = accidental width + universal spacing between accidentals\r\n            lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\r\n            // if this accShift is larger, use it to keep first column accidentals in the same line\r\n            accShift = acc.shift > accShift ? acc.shift : accShift;\r\n            previousLine = acc.line;\r\n        }\r\n        // ### Place Accidentals in Columns\r\n        //\r\n        // Default to a classic triangular layout (middle accidental farthest left),\r\n        // but follow exceptions as outlined in G. Read's _Music Notation_ and\r\n        // Elaine Gould's _Behind Bars_.\r\n        //\r\n        // Additionally, this implements different vertical collision rules for\r\n        // flats (only need 2.5 lines clearance below) and double sharps (only\r\n        // need 2.5 lines of clearance above or below).\r\n        //\r\n        // Classic layouts and exception patterns are found in the 'tables.js'\r\n        // in 'Tables.accidentalColumnsTable'\r\n        //\r\n        // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\r\n        // using as few columns as possible for the verticle structure.\r\n        //\r\n        // TODO (?): Allow column to be specified for an accidental at run-time?\r\n        let totalColumns = 0;\r\n        // establish the boundaries for a group of notes with clashing accidentals:\r\n        for (let i = 0; i < lineList.length; i++) {\r\n            let noFurtherConflicts = false;\r\n            const groupStart = i;\r\n            let groupEnd = i;\r\n            while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\r\n                // if this note conflicts with the next:\r\n                if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\r\n                    // include the next note in the group:\r\n                    groupEnd++;\r\n                }\r\n                else {\r\n                    noFurtherConflicts = true;\r\n                }\r\n            }\r\n            // Gets an a line from the `lineList`, relative to the current group\r\n            const getGroupLine = (index) => lineList[groupStart + index];\r\n            const getGroupLines = (indexes) => indexes.map(getGroupLine);\r\n            const lineDifference = (indexA, indexB) => {\r\n                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\r\n                return a - b;\r\n            };\r\n            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));\r\n            // Set columns for the lines in this group:\r\n            const groupLength = groupEnd - groupStart + 1;\r\n            // Set the accidental column for each line of the group\r\n            let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\r\n            switch (groupLength) {\r\n                case 3:\r\n                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\r\n                        endCase = 'second_on_bottom';\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    if (notColliding([0, 2], [1, 3])) {\r\n                        endCase = 'spaced_out_tetrachord';\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    if (endCase === 'b' && notColliding([1, 3])) {\r\n                        endCase = 'spaced_out_pentachord';\r\n                        if (notColliding([0, 2], [2, 4])) {\r\n                            endCase = 'very_spaced_out_pentachord';\r\n                        }\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    if (notColliding([0, 3], [1, 4], [2, 5])) {\r\n                        endCase = 'spaced_out_hexachord';\r\n                    }\r\n                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\r\n                        endCase = 'very_spaced_out_hexachord';\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            let groupMember;\r\n            let column;\r\n            // If the group contains seven members or more, use ascending parallel lines\r\n            // of accidentals, using as few columns as possible while avoiding collisions.\r\n            if (groupLength >= 7) {\r\n                // First, determine how many columns to use:\r\n                let patternLength = 2;\r\n                let collisionDetected = true;\r\n                while (collisionDetected === true) {\r\n                    collisionDetected = false;\r\n                    for (let line = 0; line + patternLength < lineList.length; line++) {\r\n                        if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\r\n                            collisionDetected = true;\r\n                            patternLength++;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                // Then, assign a column to each line of accidentals\r\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\r\n                    column = ((groupMember - i) % patternLength) + 1;\r\n                    lineList[groupMember].column = column;\r\n                    totalColumns = totalColumns > column ? totalColumns : column;\r\n                }\r\n            }\r\n            else {\r\n                // If the group contains fewer than seven members, use the layouts from\r\n                // the Tables.accidentalColumnsTable (See: tables.ts).\r\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\r\n                    column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\r\n                    lineList[groupMember].column = column;\r\n                    totalColumns = totalColumns > column ? totalColumns : column;\r\n                }\r\n            }\r\n            // Increment i to the last note that was set, so that if a lower set of notes\r\n            // does not conflict at all with this group, it can have its own classic shape.\r\n            i = groupEnd;\r\n        }\r\n        // ### Convert Columns to x_offsets\r\n        //\r\n        // This keeps columns aligned, even if they have different accidentals within them\r\n        // which sometimes results in a larger x_offset than is an accidental might need\r\n        // to preserve the symmetry of the accidental shape.\r\n        //\r\n        // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\r\n        // music with complex chord clusters.\r\n        //\r\n        // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\r\n        // parallel columns.\r\n        // track each column's max width, which will be used as initial shift of later columns:\r\n        const columnWidths = [];\r\n        const columnXOffsets = [];\r\n        for (let i = 0; i <= totalColumns; i++) {\r\n            columnWidths[i] = 0;\r\n            columnXOffsets[i] = 0;\r\n        }\r\n        columnWidths[0] = accShift + leftShift;\r\n        columnXOffsets[0] = accShift + leftShift;\r\n        // Fill columnWidths with widest needed x-space;\r\n        // this is what keeps the columns parallel.\r\n        lineList.forEach((line) => {\r\n            if (line.width > columnWidths[line.column])\r\n                columnWidths[line.column] = line.width;\r\n        });\r\n        for (let i = 1; i < columnWidths.length; i++) {\r\n            // this column's offset = this column's width + previous column's offset\r\n            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\r\n        }\r\n        const totalShift = columnXOffsets[columnXOffsets.length - 1];\r\n        // Set the xShift for each accidental according to column offsets:\r\n        let accCount = 0;\r\n        lineList.forEach((line) => {\r\n            let lineWidth = 0;\r\n            const lastAccOnLine = accCount + line.numAcc;\r\n            // handle all of the accidentals on a given line:\r\n            for (accCount; accCount < lastAccOnLine; accCount++) {\r\n                const xShift = columnXOffsets[line.column - 1] + lineWidth;\r\n                accList[accCount].acc.setXShift(xShift);\r\n                // keep track of the width of accidentals we've added so far, so that when\r\n                // we loop, we add space for them.\r\n                lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\r\n                L('Line, accCount, shift: ', line.line, accCount, xShift);\r\n            }\r\n        });\r\n        // update the overall layout with the full width of the accidental shapes:\r\n        state.left_shift += totalShift + additionalPadding;\r\n    }\r\n    /** Helper function to determine whether two lines of accidentals collide vertically */\r\n    static checkCollision(line1, line2) {\r\n        let clearance = line2.line - line1.line;\r\n        let clearanceRequired = 3;\r\n        // But less clearance is required for certain accidentals: b, bb and ##.\r\n        if (clearance > 0) {\r\n            // then line 2 is on top\r\n            clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\r\n            if (line1.dblSharpLine)\r\n                clearance -= 0.5;\r\n        }\r\n        else {\r\n            // line 1 is on top\r\n            clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\r\n            if (line2.dblSharpLine)\r\n                clearance -= 0.5;\r\n        }\r\n        const collision = Math.abs(clearance) < clearanceRequired;\r\n        L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\r\n        return collision;\r\n    }\r\n    /**\r\n     * Use this method to automatically apply accidentals to a set of `voices`.\r\n     * The accidentals will be remembered between all the voices provided.\r\n     * Optionally, you can also provide an initial `keySignature`.\r\n     */\r\n    static applyAccidentals(voices, keySignature) {\r\n        const tickPositions = [];\r\n        const tickNoteMap = {};\r\n        // Sort the tickables in each voice by their tick position in the voice.\r\n        voices.forEach((voice) => {\r\n            const tickPosition = new Fraction(0, 1);\r\n            const tickable = voice.getTickables();\r\n            tickable.forEach((t) => {\r\n                if (t.shouldIgnoreTicks())\r\n                    return;\r\n                const notesAtPosition = tickNoteMap[tickPosition.value()];\r\n                if (!notesAtPosition) {\r\n                    tickPositions.push(tickPosition.value());\r\n                    tickNoteMap[tickPosition.value()] = [t];\r\n                }\r\n                else {\r\n                    notesAtPosition.push(t);\r\n                }\r\n                tickPosition.add(t.getTicks());\r\n            });\r\n        });\r\n        const music = new Music();\r\n        // Default key signature is C major.\r\n        if (!keySignature)\r\n            keySignature = 'C';\r\n        // Get the scale map, which represents the current state of each pitch.\r\n        const scaleMapKey = music.createScaleMap(keySignature);\r\n        const scaleMap = {};\r\n        tickPositions.forEach((tickPos) => {\r\n            const tickables = tickNoteMap[tickPos];\r\n            // Array to store all pitches that modified accidental states\r\n            // at this tick position\r\n            const modifiedPitches = [];\r\n            const processNote = (t) => {\r\n                // Only StaveNote implements .addModifier(), which is used below.\r\n                if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\r\n                    return;\r\n                }\r\n                // Go through each key and determine if an accidental should be applied.\r\n                const staveNote = t;\r\n                staveNote.keys.forEach((keyString, keyIndex) => {\r\n                    const key = music.getNoteParts(keyString.split('/')[0]);\r\n                    const octave = keyString.split('/')[1];\r\n                    // Force a natural for every key without an accidental\r\n                    const accidentalString = key.accidental || 'n';\r\n                    const pitch = key.root + accidentalString;\r\n                    // Determine if the current pitch has the same accidental\r\n                    // as the scale state\r\n                    if (!scaleMap[key.root + octave])\r\n                        scaleMap[key.root + octave] = scaleMapKey[key.root];\r\n                    const sameAccidental = scaleMap[key.root + octave] === pitch;\r\n                    // Determine if an identical pitch in the chord already\r\n                    // modified the accidental state\r\n                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\r\n                    // Remove accidentals\r\n                    staveNote.getModifiers().forEach((modifier, index) => {\r\n                        if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {\r\n                            staveNote.getModifiers().splice(index, 1);\r\n                        }\r\n                    });\r\n                    // Add the accidental to the StaveNote\r\n                    if (!sameAccidental || (sameAccidental && previouslyModified)) {\r\n                        // Modify the scale map so that the root pitch has an\r\n                        // updated state\r\n                        scaleMap[key.root + octave] = pitch;\r\n                        // Create the accidental\r\n                        const accidental = new Accidental(accidentalString);\r\n                        // Attach the accidental to the StaveNote\r\n                        staveNote.addModifier(accidental, keyIndex);\r\n                        // Add the pitch to list of pitches that modified accidentals\r\n                        modifiedPitches.push(keyString);\r\n                    }\r\n                });\r\n                // process grace notes\r\n                staveNote.getModifiers().forEach((modifier) => {\r\n                    if (isGraceNoteGroup(modifier)) {\r\n                        modifier.getGraceNotes().forEach(processNote);\r\n                    }\r\n                });\r\n            };\r\n            tickables.forEach(processNote);\r\n        });\r\n    }\r\n    reset() {\r\n        const fontScale = this.render_options.font_scale;\r\n        this.glyph = new Glyph(this.accidental.code, fontScale);\r\n        this.glyph.setOriginX(1.0);\r\n        if (this.cautionary) {\r\n            this.parenLeft = new Glyph(Tables.accidentalCodes('{').code, fontScale);\r\n            this.parenRight = new Glyph(Tables.accidentalCodes('}').code, fontScale);\r\n            this.parenLeft.setOriginX(1.0);\r\n            this.parenRight.setOriginX(1.0);\r\n        }\r\n    }\r\n    /** Get width in pixels. */\r\n    getWidth() {\r\n        if (this.cautionary) {\r\n            const parenLeft = defined(this.parenLeft);\r\n            const parenRight = defined(this.parenRight);\r\n            const parenWidth = parenLeft.getMetrics().width +\r\n                parenRight.getMetrics().width +\r\n                this.render_options.parenLeftPadding +\r\n                this.render_options.parenRightPadding;\r\n            return this.glyph.getMetrics().width + parenWidth;\r\n        }\r\n        else {\r\n            return this.glyph.getMetrics().width;\r\n        }\r\n    }\r\n    /** Attach this accidental to `note`, which must be a `StaveNote`. */\r\n    setNote(note) {\r\n        defined(note, 'ArgumentError', `Bad note value: ${note}`);\r\n        this.note = note;\r\n        // Accidentals attached to grace notes are rendered smaller.\r\n        if (isGraceNote(note)) {\r\n            this.render_options.font_scale = 25;\r\n            this.reset();\r\n        }\r\n        return this;\r\n    }\r\n    /** If called, draws parenthesis around accidental. */\r\n    setAsCautionary() {\r\n        this.cautionary = true;\r\n        this.render_options.font_scale = 28;\r\n        this.reset();\r\n        return this;\r\n    }\r\n    /** Render accidental onto canvas. */\r\n    draw() {\r\n        const { type, position, index, cautionary, x_shift, y_shift, glyph, render_options: { parenLeftPadding, parenRightPadding }, } = this;\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        // Figure out the start `x` and `y` coordinates for note and index.\r\n        const start = note.getModifierStartXY(position, index);\r\n        let accX = start.x + x_shift;\r\n        const accY = start.y + y_shift;\r\n        L('Rendering: ', type, accX, accY);\r\n        if (!cautionary) {\r\n            glyph.render(ctx, accX, accY);\r\n        }\r\n        else {\r\n            const parenLeft = defined(this.parenLeft);\r\n            const parenRight = defined(this.parenRight);\r\n            // Render the accidental in parentheses.\r\n            parenRight.render(ctx, accX, accY);\r\n            accX -= parenRight.getMetrics().width;\r\n            accX -= parenRightPadding;\r\n            accX -= this.accidental.parenRightPaddingAdjustment;\r\n            glyph.render(ctx, accX, accY);\r\n            accX -= glyph.getMetrics().width;\r\n            accX -= parenLeftPadding;\r\n            parenLeft.render(ctx, accX, accY);\r\n        }\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\r\nAccidental.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Element } from './element';\r\nimport { Modifier, ModifierPosition } from './modifier';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { TextFormatter } from './textformatter';\r\nimport { Category, isStemmableNote, isTabNote } from './typeguard';\r\nimport { log } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Annotation.DEBUG)\r\n        log('Vex.Flow.Annotation', args);\r\n}\r\nexport var AnnotationHorizontalJustify;\r\n(function (AnnotationHorizontalJustify) {\r\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\r\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\r\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\r\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\r\n})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));\r\nexport var AnnotationVerticalJustify;\r\n(function (AnnotationVerticalJustify) {\r\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"TOP\"] = 1] = \"TOP\";\r\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER\"] = 2] = \"CENTER\";\r\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"BOTTOM\"] = 3] = \"BOTTOM\";\r\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\r\n})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));\r\n/**\r\n * Annotations are modifiers that can be attached to\r\n * notes.\r\n *\r\n * See `tests/annotation_tests.ts` for usage examples.\r\n */\r\nexport class Annotation extends Modifier {\r\n    /**\r\n     * Annotations inherit from `Modifier` and is positioned correctly when\r\n     * in a `ModifierContext`.\r\n     * Create a new `Annotation` with the string `text`.\r\n     */\r\n    constructor(text) {\r\n        super();\r\n        this.text = text;\r\n        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;\r\n        // warning: the default in the constructor is TOP, but in the factory the default is BOTTOM.\r\n        // this is to support legacy application that may expect this.\r\n        this.verticalJustification = AnnotationVerticalJustify.TOP;\r\n        this.resetFont();\r\n        // The default width is calculated from the text.\r\n        this.setWidth(Tables.textWidth(text));\r\n    }\r\n    /** Annotations category string. */\r\n    static get CATEGORY() {\r\n        return Category.Annotation;\r\n    }\r\n    // Use the same padding for annotations as note head so the\r\n    // words don't run into each other.\r\n    static get minAnnotationPadding() {\r\n        const musicFont = Tables.currentMusicFont();\r\n        return musicFont.lookupMetric('glyphs.noteHead.minPadding');\r\n    }\r\n    /** Arrange annotations within a `ModifierContext` */\r\n    static format(annotations, state) {\r\n        if (!annotations || annotations.length === 0)\r\n            return false;\r\n        let leftWidth = 0;\r\n        let rightWidth = 0;\r\n        let maxLeftGlyphWidth = 0;\r\n        let maxRightGlyphWidth = 0;\r\n        for (let i = 0; i < annotations.length; ++i) {\r\n            const annotation = annotations[i];\r\n            const textFormatter = TextFormatter.create(annotation.textFont);\r\n            // Text height is expressed in fractional stave spaces.\r\n            const textLines = (5 + textFormatter.maxHeight) / Tables.STAVE_LINE_DISTANCE;\r\n            let verticalSpaceNeeded = textLines;\r\n            const note = annotation.checkAttachedNote();\r\n            const glyphWidth = note.getGlyph().getWidth();\r\n            // Get the text width from the font metrics.\r\n            const textWidth = textFormatter.getWidthForTextInPx(annotation.text);\r\n            // Add padding on the left side so the annotation text is offset from the previous note\r\n            if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\r\n                maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\r\n                leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;\r\n            }\r\n            else if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\r\n                maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\r\n                rightWidth = Math.max(rightWidth, textWidth);\r\n            }\r\n            else {\r\n                leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;\r\n                rightWidth = Math.max(rightWidth, textWidth / 2);\r\n                maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\r\n                maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\r\n            }\r\n            const stave = note.getStave();\r\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\r\n            let stemHeight = 0;\r\n            let lines = 5;\r\n            if (isTabNote(note)) {\r\n                if (note.render_options.draw_stem) {\r\n                    const stem = note.getStem();\r\n                    if (stem) {\r\n                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\r\n                    }\r\n                }\r\n                else {\r\n                    stemHeight = 0;\r\n                }\r\n            }\r\n            else if (isStemmableNote(note)) {\r\n                const stem = note.getStem();\r\n                if (stem && note.getNoteType() === 'n') {\r\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\r\n                }\r\n            }\r\n            if (stave) {\r\n                lines = stave.getNumLines();\r\n            }\r\n            if (annotation.verticalJustification === this.VerticalJustify.TOP) {\r\n                let noteLine = note.getLineNumber(true);\r\n                if (isTabNote(note)) {\r\n                    noteLine = lines - (note.leastString() - 0.5);\r\n                }\r\n                if (stemDirection === Stem.UP) {\r\n                    noteLine += stemHeight;\r\n                }\r\n                const curTop = noteLine + state.top_text_line + 0.5;\r\n                if (curTop < lines) {\r\n                    annotation.setTextLine(lines - noteLine);\r\n                    verticalSpaceNeeded += lines - noteLine;\r\n                    state.top_text_line = verticalSpaceNeeded;\r\n                }\r\n                else {\r\n                    annotation.setTextLine(state.top_text_line);\r\n                    state.top_text_line += verticalSpaceNeeded;\r\n                }\r\n            }\r\n            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {\r\n                let noteLine = lines - note.getLineNumber();\r\n                if (isTabNote(note)) {\r\n                    noteLine = note.greatestString() - 1;\r\n                }\r\n                if (stemDirection === Stem.DOWN) {\r\n                    noteLine += stemHeight;\r\n                }\r\n                const curBottom = noteLine + state.text_line + 1;\r\n                if (curBottom < lines) {\r\n                    annotation.setTextLine(lines - curBottom);\r\n                    verticalSpaceNeeded += lines - curBottom;\r\n                    state.text_line = verticalSpaceNeeded;\r\n                }\r\n                else {\r\n                    annotation.setTextLine(state.text_line);\r\n                    state.text_line += verticalSpaceNeeded;\r\n                }\r\n            }\r\n            else {\r\n                annotation.setTextLine(state.text_line);\r\n            }\r\n        }\r\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.right_shift, 0));\r\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.left_shift, 0));\r\n        state.left_shift += leftOverlap;\r\n        state.right_shift += rightOverlap;\r\n        return true;\r\n    }\r\n    /**\r\n     * Set vertical position of text (above or below stave).\r\n     * @param just value in `AnnotationVerticalJustify`.\r\n     */\r\n    setVerticalJustification(just) {\r\n        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\r\n        return this;\r\n    }\r\n    /**\r\n     * Get horizontal justification.\r\n     */\r\n    getJustification() {\r\n        return this.horizontalJustification;\r\n    }\r\n    /**\r\n     * Set horizontal justification.\r\n     * @param justification value in `Annotation.Justify`.\r\n     */\r\n    setJustification(just) {\r\n        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;\r\n        return this;\r\n    }\r\n    /** Render text beside the note. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\r\n        const textFormatter = TextFormatter.create(this.textFont);\r\n        const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);\r\n        this.setRendered();\r\n        // We're changing context parameters. Save current state.\r\n        ctx.save();\r\n        // Apply style might not save context, if this.style is undefined, so we\r\n        // still need to save context state just before this, since we will be\r\n        // changing ctx parameters below.\r\n        this.applyStyle();\r\n        const classString = Object.keys(this.getAttribute('classes')).join(' ');\r\n        ctx.openGroup(classString, this.getAttribute('id'));\r\n        ctx.setFont(this.textFont);\r\n        const text_width = ctx.measureText(this.text).width;\r\n        const text_height = textFormatter.maxHeight + 2;\r\n        let x;\r\n        let y;\r\n        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\r\n            x = start.x;\r\n        }\r\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\r\n            x = start.x - text_width;\r\n        }\r\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {\r\n            x = start.x - text_width / 2;\r\n        } /* CENTER_STEM */\r\n        else {\r\n            x = note.getStemX() - text_width / 2;\r\n        }\r\n        let stem_ext = {};\r\n        let spacing = 0;\r\n        const has_stem = note.hasStem();\r\n        const stave = note.checkStave();\r\n        // The position of the text varies based on whether or not the note\r\n        // has a stem.\r\n        if (has_stem) {\r\n            stem_ext = note.checkStem().getExtents();\r\n            spacing = stave.getSpacingBetweenLines();\r\n        }\r\n        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {\r\n            // Use the largest (lowest) Y value\r\n            const ys = note.getYs();\r\n            y = ys.reduce((a, b) => (a > b ? a : b));\r\n            y += (this.text_line + 1) * Tables.STAVE_LINE_DISTANCE + text_height;\r\n            if (has_stem && stemDirection === Stem.DOWN) {\r\n                y = Math.max(y, stem_ext.topY + text_height + spacing * this.text_line);\r\n            }\r\n        }\r\n        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {\r\n            const yt = note.getYForTopText(this.text_line) - 1;\r\n            const yb = stave.getYForBottomText(this.text_line);\r\n            y = yt + (yb - yt) / 2 + text_height / 2;\r\n        }\r\n        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {\r\n            y = note.getYs()[0] - (this.text_line + 1) * Tables.STAVE_LINE_DISTANCE;\r\n            if (has_stem && stemDirection === Stem.UP) {\r\n                // If the stem is above the stave already, go with default line width vs. actual\r\n                // since the lines between don't really matter.\r\n                spacing = stem_ext.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;\r\n                y = Math.min(y, stem_ext.topY - spacing * (this.text_line + 1));\r\n            }\r\n        } /* CENTER_STEM */\r\n        else {\r\n            const extents = note.getStemExtents();\r\n            y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\r\n        }\r\n        L('Rendering annotation: ', this.text, x, y);\r\n        ctx.fillText(this.text, x, y);\r\n        ctx.closeGroup();\r\n        this.restoreStyle();\r\n        ctx.restore();\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\r\nAnnotation.DEBUG = false;\r\nAnnotation.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\r\n/** Text annotations can be positioned and justified relative to the note. */\r\nAnnotation.HorizontalJustify = AnnotationHorizontalJustify;\r\nAnnotation.HorizontalJustifyString = {\r\n    left: AnnotationHorizontalJustify.LEFT,\r\n    right: AnnotationHorizontalJustify.RIGHT,\r\n    center: AnnotationHorizontalJustify.CENTER,\r\n    centerStem: AnnotationHorizontalJustify.CENTER_STEM,\r\n};\r\nAnnotation.VerticalJustify = AnnotationVerticalJustify;\r\nAnnotation.VerticalJustifyString = {\r\n    above: AnnotationVerticalJustify.TOP,\r\n    top: AnnotationVerticalJustify.TOP,\r\n    below: AnnotationVerticalJustify.BOTTOM,\r\n    bottom: AnnotationVerticalJustify.BOTTOM,\r\n    center: AnnotationVerticalJustify.CENTER,\r\n    centerStem: AnnotationVerticalJustify.CENTER_STEM,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Larry Kuhns.\r\n// MIT License\r\nimport { Glyph } from './glyph';\r\nimport { Modifier } from './modifier';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { Category, isGraceNote, isStaveNote, isStemmableNote, isTabNote } from './typeguard';\r\nimport { defined, log, RuntimeError } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Articulation.DEBUG)\r\n        log('Vex.Flow.Articulation', args);\r\n}\r\nconst { ABOVE, BELOW } = Modifier.Position;\r\nfunction roundToNearestHalf(mathFn, value) {\r\n    return mathFn(value / 0.5) * 0.5;\r\n}\r\n// This includes both staff and ledger lines\r\nfunction isWithinLines(line, position) {\r\n    return position === ABOVE ? line <= 5 : line >= 1;\r\n}\r\nfunction getRoundingFunction(line, position) {\r\n    if (isWithinLines(line, position)) {\r\n        if (position === ABOVE) {\r\n            return Math.ceil;\r\n        }\r\n        else {\r\n            return Math.floor;\r\n        }\r\n    }\r\n    else {\r\n        return Math.round;\r\n    }\r\n}\r\nfunction snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\r\n    // Initially, snap to nearest staff line or space\r\n    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\r\n    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\r\n    const onStaffLine = snappedLine % 1 === 0;\r\n    if (canSnapToStaffSpace && onStaffLine) {\r\n        const HALF_STAFF_SPACE = 0.5;\r\n        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\r\n    }\r\n    else {\r\n        return snappedLine;\r\n    }\r\n}\r\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\r\nconst isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);\r\nfunction getTopY(note, textLine) {\r\n    const stemDirection = note.getStemDirection();\r\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\r\n    if (isStaveOrGraceNote(note)) {\r\n        if (note.hasStem()) {\r\n            if (stemDirection === Stem.UP) {\r\n                return stemTipY;\r\n            }\r\n            else {\r\n                return stemBaseY;\r\n            }\r\n        }\r\n        else {\r\n            return Math.min(...note.getYs());\r\n        }\r\n    }\r\n    else if (isTabNote(note)) {\r\n        if (note.hasStem()) {\r\n            if (stemDirection === Stem.UP) {\r\n                return stemTipY;\r\n            }\r\n            else {\r\n                return note.checkStave().getYForTopText(textLine);\r\n            }\r\n        }\r\n        else {\r\n            return note.checkStave().getYForTopText(textLine);\r\n        }\r\n    }\r\n    else {\r\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\r\n    }\r\n}\r\nfunction getBottomY(note, textLine) {\r\n    const stemDirection = note.getStemDirection();\r\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\r\n    if (isStaveOrGraceNote(note)) {\r\n        if (note.hasStem()) {\r\n            if (stemDirection === Stem.UP) {\r\n                return stemBaseY;\r\n            }\r\n            else {\r\n                return stemTipY;\r\n            }\r\n        }\r\n        else {\r\n            return Math.max(...note.getYs());\r\n        }\r\n    }\r\n    else if (isTabNote(note)) {\r\n        if (note.hasStem()) {\r\n            if (stemDirection === Stem.UP) {\r\n                return note.checkStave().getYForBottomText(textLine);\r\n            }\r\n            else {\r\n                return stemTipY;\r\n            }\r\n        }\r\n        else {\r\n            return note.checkStave().getYForBottomText(textLine);\r\n        }\r\n    }\r\n    else {\r\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\r\n    }\r\n}\r\n/**\r\n * Get the initial offset of the articulation from the y value of the starting position.\r\n * This is required because the top/bottom text positions already have spacing applied to\r\n * provide a \"visually pleasant\" default position. However the y values provided from\r\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\r\n * normalizes this asymmetry.\r\n * @param note\r\n * @param position\r\n * @returns\r\n */\r\nfunction getInitialOffset(note, position) {\r\n    const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||\r\n        (position === BELOW && note.getStemDirection() === Stem.DOWN);\r\n    if (isStaveOrGraceNote(note)) {\r\n        if (note.hasStem() && isOnStemTip) {\r\n            return 0.5;\r\n        }\r\n        else {\r\n            // this amount is larger than the stem-tip offset because we start from\r\n            // the center of the notehead\r\n            return 1;\r\n        }\r\n    }\r\n    else {\r\n        if (note.hasStem() && isOnStemTip) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Articulations and Accents are modifiers that can be\r\n * attached to notes. The complete list of articulations is available in\r\n * `tables.ts` under `Vex.Flow.articulationCodes`.\r\n *\r\n * See `tests/articulation_tests.ts` for usage examples.\r\n */\r\nexport class Articulation extends Modifier {\r\n    /**\r\n     * Create a new articulation.\r\n     * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts`\r\n     */\r\n    constructor(type) {\r\n        super();\r\n        this.type = type;\r\n        this.position = BELOW;\r\n        this.render_options = {\r\n            font_scale: 38,\r\n        };\r\n        this.reset();\r\n    }\r\n    /** Articulations category string. */\r\n    static get CATEGORY() {\r\n        return Category.Articulation;\r\n    }\r\n    /**\r\n     * FIXME:\r\n     * Most of the complex formatting logic (ie: snapping to space) is\r\n     * actually done in .render(). But that logic belongs in this method.\r\n     *\r\n     * Unfortunately, this isn't possible because, by this point, stem lengths\r\n     * have not yet been finalized. Finalized stem lengths are required to determine the\r\n     * initial position of any stem-side articulation.\r\n     *\r\n     * This indicates that all objects should have their stave set before being\r\n     * formatted. It can't be an optional if you want accurate vertical positioning.\r\n     * Consistently positioned articulations that play nice with other modifiers\r\n     * won't be possible until we stop relying on render-time formatting.\r\n     *\r\n     * Ideally, when this function has completed, the vertical articulation positions\r\n     * should be ready to render without further adjustment. But the current state\r\n     * is far from this ideal.\r\n     */\r\n    static format(articulations, state) {\r\n        if (!articulations || articulations.length === 0)\r\n            return false;\r\n        const margin = 0.5;\r\n        let maxGlyphWidth = 0;\r\n        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), defined(articulation.glyph.getMetrics().height) / 10 + margin);\r\n        articulations.forEach((articulation) => {\r\n            const note = articulation.checkAttachedNote();\r\n            maxGlyphWidth = Math.max(note.getGlyph().getWidth(), maxGlyphWidth);\r\n            let lines = 5;\r\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\r\n            let stemHeight = 0;\r\n            // Decide if we need to consider beam direction in placement.\r\n            if (isStemmableNote(note)) {\r\n                const stem = note.getStem();\r\n                if (stem) {\r\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\r\n                }\r\n            }\r\n            const stave = note.getStave();\r\n            if (stave) {\r\n                lines = stave.getNumLines();\r\n            }\r\n            if (articulation.getPosition() === ABOVE) {\r\n                let noteLine = note.getLineNumber(true);\r\n                if (stemDirection === Stem.UP) {\r\n                    noteLine += stemHeight;\r\n                }\r\n                let increment = getIncrement(articulation, state.top_text_line, ABOVE);\r\n                const curTop = noteLine + state.top_text_line + 0.5;\r\n                // If articulation must be above stave, add lines between note and stave top\r\n                if (!articulation.articulation.between_lines && curTop < lines) {\r\n                    increment += lines - curTop;\r\n                }\r\n                articulation.setTextLine(state.top_text_line);\r\n                state.top_text_line += increment;\r\n            }\r\n            else if (articulation.getPosition() === BELOW) {\r\n                let noteLine = Math.max(lines - note.getLineNumber(), 0);\r\n                if (stemDirection === Stem.DOWN) {\r\n                    noteLine += stemHeight;\r\n                }\r\n                let increment = getIncrement(articulation, state.text_line, BELOW);\r\n                const curBottom = noteLine + state.text_line + 0.5;\r\n                // if articulation must be below stave, add lines from note to stave bottom\r\n                if (!articulation.articulation.between_lines && curBottom < lines) {\r\n                    increment += lines - curBottom;\r\n                }\r\n                articulation.setTextLine(state.text_line);\r\n                state.text_line += increment;\r\n            }\r\n        });\r\n        const width = articulations\r\n            .map((articulation) => articulation.getWidth())\r\n            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\r\n        const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.left_shift + state.right_shift), 0));\r\n        state.left_shift += overlap / 2;\r\n        state.right_shift += overlap / 2;\r\n        return true;\r\n    }\r\n    static easyScoreHook({ articulations }, note, builder) {\r\n        if (!articulations)\r\n            return;\r\n        const articNameToCode = {\r\n            staccato: 'a.',\r\n            tenuto: 'a-',\r\n            accent: 'a>',\r\n        };\r\n        articulations\r\n            .split(',')\r\n            .map((articString) => articString.trim().split('.'))\r\n            .map(([name, position]) => {\r\n            const artic = { type: articNameToCode[name] };\r\n            if (position)\r\n                artic.position = Modifier.PositionString[position];\r\n            return builder.getFactory().Articulation(artic);\r\n        })\r\n            .map((artic) => note.addModifier(artic, 0));\r\n    }\r\n    reset() {\r\n        this.articulation = Tables.articulationCodes(this.type);\r\n        const articulation = defined(this.articulation, 'ArgumentError', `Articulation not found: ${this.type}`);\r\n        const code = (this.position === ABOVE ? articulation.aboveCode : articulation.belowCode) || articulation.code;\r\n        this.glyph = new Glyph(code !== null && code !== void 0 ? code : '', this.render_options.font_scale);\r\n        this.setWidth(defined(this.glyph.getMetrics().width));\r\n    }\r\n    /** Render articulation in position next to note. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const index = this.checkIndex();\r\n        const { position, glyph, text_line: textLine } = this;\r\n        const canSitBetweenLines = this.articulation.between_lines;\r\n        const stave = note.checkStave();\r\n        const staffSpace = stave.getSpacingBetweenLines();\r\n        const isTab = isTabNote(note);\r\n        // Articulations are centered over/under the note head.\r\n        const { x } = note.getModifierStartXY(position, index);\r\n        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\r\n        const initialOffset = getInitialOffset(note, position);\r\n        const padding = Tables.currentMusicFont().lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);\r\n        let y = {\r\n            [ABOVE]: () => {\r\n                glyph.setOrigin(0.5, 1);\r\n                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\r\n                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\r\n            },\r\n            [BELOW]: () => {\r\n                glyph.setOrigin(0.5, 0);\r\n                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\r\n                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\r\n            },\r\n        }[position]();\r\n        if (!isTab) {\r\n            const offsetDirection = position === ABOVE ? -1 : +1;\r\n            const noteLine = note.getKeyProps()[index].line;\r\n            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\r\n            const articLine = distanceFromNote + Number(noteLine);\r\n            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\r\n            if (isWithinLines(snappedLine, position))\r\n                glyph.setOrigin(0.5, 0.5);\r\n            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;\r\n        }\r\n        L(`Rendering articulation at (x: ${x}, y: ${y})`);\r\n        glyph.render(ctx, x, y);\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\r\nArticulation.DEBUG = false;\r\nArticulation.INITIAL_OFFSET = -0.5;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Note } from './note';\r\nimport { Barline, BarlineType } from './stavebarline';\r\nimport { Category } from './typeguard';\r\nimport { log } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (BarNote.DEBUG)\r\n        log('Vex.Flow.BarNote', args);\r\n}\r\n/**\r\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\r\n * be added to a voice and rendered in the middle of a stave. Since it has no\r\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\r\n *\r\n * See `tests/barnote_tests.ts` for usage examples.\r\n */\r\nexport class BarNote extends Note {\r\n    constructor(type = BarlineType.SINGLE) {\r\n        super({ duration: 'b' });\r\n        this.metrics = {\r\n            widths: {},\r\n        };\r\n        const TYPE = BarlineType;\r\n        this.metrics.widths = {\r\n            [TYPE.SINGLE]: 8,\r\n            [TYPE.DOUBLE]: 12,\r\n            [TYPE.END]: 15,\r\n            [TYPE.REPEAT_BEGIN]: 14,\r\n            [TYPE.REPEAT_END]: 14,\r\n            [TYPE.REPEAT_BOTH]: 18,\r\n            [TYPE.NONE]: 0,\r\n        };\r\n        // Tell the formatter that bar notes have no duration.\r\n        this.ignore_ticks = true;\r\n        this.setType(type);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.BarNote;\r\n    }\r\n    /** Get the type of bar note.*/\r\n    getType() {\r\n        return this.type;\r\n    }\r\n    /** Set the type of bar note. */\r\n    setType(type) {\r\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\r\n        // Set width to width of relevant `Barline`.\r\n        this.setWidth(this.metrics.widths[this.type]);\r\n        return this;\r\n    }\r\n    /* Overridden to ignore */\r\n    // eslint-disable-next-line\r\n    addToModifierContext(mc) {\r\n        // DO NOTHING.\r\n        return this;\r\n    }\r\n    /** Overridden to ignore. */\r\n    preFormat() {\r\n        this.preFormatted = true;\r\n        return this;\r\n    }\r\n    /** Render note to stave. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        L('Rendering bar line at: ', this.getAbsoluteX());\r\n        if (this.style)\r\n            this.applyStyle(ctx);\r\n        const barline = new Barline(this.type);\r\n        barline.setX(this.getAbsoluteX());\r\n        barline.draw(this.checkStave());\r\n        if (this.style)\r\n            this.restoreStyle(ctx);\r\n        this.setRendered();\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\r\nBarNote.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Element } from './element';\r\nimport { Fraction } from './fraction';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { TupletLocation } from './tuplet';\r\nimport { Category, isStaveNote, isTabNote } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nfunction calculateStemDirection(notes) {\r\n    let lineSum = 0;\r\n    notes.forEach((note) => {\r\n        if (note.keyProps) {\r\n            note.keyProps.forEach((keyProp) => {\r\n                lineSum += keyProp.line - 3;\r\n            });\r\n        }\r\n    });\r\n    if (lineSum >= 0) {\r\n        return Stem.DOWN;\r\n    }\r\n    return Stem.UP;\r\n}\r\nfunction getStemSlope(firstNote, lastNote) {\r\n    const firstStemTipY = firstNote.getStemExtents().topY;\r\n    const firstStemX = firstNote.getStemX();\r\n    const lastStemTipY = lastNote.getStemExtents().topY;\r\n    const lastStemX = lastNote.getStemX();\r\n    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\r\n}\r\nexport const BEAM_LEFT = 'L';\r\nexport const BEAM_RIGHT = 'R';\r\nexport const BEAM_BOTH = 'B';\r\n/** `Beams` span over a set of `StemmableNotes`. */\r\nexport class Beam extends Element {\r\n    constructor(notes, auto_stem = false) {\r\n        super();\r\n        this.slope = 0;\r\n        this.y_shift = 0;\r\n        /**\r\n         * Overrides to default beam directions for secondary-level beams that do not\r\n         * connect to any other note. See further explanation at\r\n         * `setPartialBeamSideAt`\r\n         */\r\n        this.forcedPartialDirections = {};\r\n        if (!notes || notes.length === 0) {\r\n            throw new RuntimeError('BadArguments', 'No notes provided for beam.');\r\n        }\r\n        if (notes.length === 1) {\r\n            throw new RuntimeError('BadArguments', 'Too few notes for beam.');\r\n        }\r\n        // Validate beam line, direction and ticks.\r\n        this.ticks = notes[0].getIntrinsicTicks();\r\n        if (this.ticks >= Tables.durationToTicks('4')) {\r\n            throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\r\n        }\r\n        let i; // shared iterator\r\n        let note;\r\n        this.stem_direction = Stem.UP;\r\n        for (i = 0; i < notes.length; ++i) {\r\n            note = notes[i];\r\n            if (note.hasStem()) {\r\n                this.stem_direction = note.getStemDirection();\r\n                break;\r\n            }\r\n        }\r\n        let stem_direction = this.stem_direction;\r\n        // Figure out optimal stem direction based on given notes\r\n        if (auto_stem && isStaveNote(notes[0])) {\r\n            stem_direction = calculateStemDirection(notes);\r\n        }\r\n        else if (auto_stem && isTabNote(notes[0])) {\r\n            // Auto Stem TabNotes\r\n            const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\r\n            stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\r\n        }\r\n        // Apply stem directions and attach beam to notes\r\n        for (i = 0; i < notes.length; ++i) {\r\n            note = notes[i];\r\n            if (auto_stem) {\r\n                note.setStemDirection(stem_direction);\r\n                this.stem_direction = stem_direction;\r\n            }\r\n            note.setBeam(this);\r\n        }\r\n        this.postFormatted = false;\r\n        this.notes = notes;\r\n        this.beam_count = this.getBeamCount();\r\n        this.break_on_indices = [];\r\n        this.render_options = {\r\n            beam_width: 5,\r\n            max_slope: 0.25,\r\n            min_slope: -0.25,\r\n            slope_iterations: 20,\r\n            slope_cost: 100,\r\n            show_stemlets: false,\r\n            stemlet_extension: 7,\r\n            partial_beam_length: 10,\r\n            flat_beams: false,\r\n            min_flat_beam_offset: 15,\r\n        };\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Beam;\r\n    }\r\n    /** Get the direction of the beam */\r\n    getStemDirection() {\r\n        return this.stem_direction;\r\n    }\r\n    /**\r\n     * Get the default beam groups for a provided time signature.\r\n     * Attempt to guess if the time signature is not found in table.\r\n     * Currently this is fairly naive.\r\n     */\r\n    static getDefaultBeamGroups(time_sig) {\r\n        if (!time_sig || time_sig === 'c') {\r\n            time_sig = '4/4';\r\n        }\r\n        const defaults = {\r\n            '1/2': ['1/2'],\r\n            '2/2': ['1/2'],\r\n            '3/2': ['1/2'],\r\n            '4/2': ['1/2'],\r\n            '1/4': ['1/4'],\r\n            '2/4': ['1/4'],\r\n            '3/4': ['1/4'],\r\n            '4/4': ['1/4'],\r\n            '1/8': ['1/8'],\r\n            '2/8': ['2/8'],\r\n            '3/8': ['3/8'],\r\n            '4/8': ['2/8'],\r\n            '1/16': ['1/16'],\r\n            '2/16': ['2/16'],\r\n            '3/16': ['3/16'],\r\n            '4/16': ['2/16'],\r\n        };\r\n        const groups = defaults[time_sig];\r\n        if (groups === undefined) {\r\n            // If no beam groups found, naively determine\r\n            // the beam groupings from the time signature\r\n            const beatTotal = parseInt(time_sig.split('/')[0], 10);\r\n            const beatValue = parseInt(time_sig.split('/')[1], 10);\r\n            const tripleMeter = beatTotal % 3 === 0;\r\n            if (tripleMeter) {\r\n                return [new Fraction(3, beatValue)];\r\n            }\r\n            else if (beatValue > 4) {\r\n                return [new Fraction(2, beatValue)];\r\n            }\r\n            else if (beatValue <= 4) {\r\n                return [new Fraction(1, beatValue)];\r\n            }\r\n        }\r\n        else {\r\n            return groups.map((group) => new Fraction().parse(group));\r\n        }\r\n        return [new Fraction(1, 4)];\r\n    }\r\n    /**\r\n     * A helper function to automatically build basic beams for a voice. For more\r\n     * complex auto-beaming use `Beam.generateBeams()`.\r\n     * @param voice the voice to generate the beams for\r\n     * @param stem_direction a stem direction to apply to the entire voice\r\n     * @param groups an array of `Fraction` representing beat groupings for the beam\r\n     */\r\n    static applyAndGetBeams(voice, stem_direction, groups) {\r\n        return Beam.generateBeams(voice.getTickables(), { groups, stem_direction });\r\n    }\r\n    /**\r\n     * A helper function to autimatically build beams for a voice with\r\n     * configuration options.\r\n     *\r\n     * Example configuration object:\r\n     *\r\n     * ```\r\n     * config = {\r\n     *   groups: [new Vex.Flow.Fraction(2, 8)],\r\n     *   stem_direction: -1,\r\n     *   beam_rests: true,\r\n     *   beam_middle_only: true,\r\n     *   show_stemlets: false\r\n     * };\r\n     * ```\r\n     * @param notes an array of notes to create the beams for\r\n     * @param config the configuration object\r\n     * @param config.stem_direction set to apply the same direction to all notes\r\n     * @param config.beam_rests set to `true` to include rests in the beams\r\n     * @param config.beam_middle_only set to `true` to only beam rests in the middle of the beat\r\n     * @param config.show_stemlets set to `true` to draw stemlets for rests\r\n     * @param config.maintain_stem_directions set to `true` to not apply new stem directions\r\n     * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\r\n     *\r\n     */\r\n    static generateBeams(notes, config = {}) {\r\n        if (!config.groups || !config.groups.length) {\r\n            config.groups = [new Fraction(2, 8)];\r\n        }\r\n        // Convert beam groups to tick amounts\r\n        const tickGroups = config.groups.map((group) => {\r\n            if (!group.multiply) {\r\n                throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\r\n            }\r\n            return group.clone().multiply(Tables.RESOLUTION, 1);\r\n        });\r\n        const unprocessedNotes = notes;\r\n        let currentTickGroup = 0;\r\n        let noteGroups = [];\r\n        let currentGroup = [];\r\n        function getTotalTicks(vf_notes) {\r\n            return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\r\n        }\r\n        function nextTickGroup() {\r\n            if (tickGroups.length - 1 > currentTickGroup) {\r\n                currentTickGroup += 1;\r\n            }\r\n            else {\r\n                currentTickGroup = 0;\r\n            }\r\n        }\r\n        function createGroups() {\r\n            let nextGroup = [];\r\n            // number of ticks in current group\r\n            let currentGroupTotalTicks = new Fraction(0, 1);\r\n            unprocessedNotes.forEach((unprocessedNote) => {\r\n                nextGroup = [];\r\n                if (unprocessedNote.shouldIgnoreTicks()) {\r\n                    noteGroups.push(currentGroup);\r\n                    currentGroup = nextGroup;\r\n                    return; // Ignore untickables (like bar notes)\r\n                }\r\n                currentGroup.push(unprocessedNote);\r\n                const ticksPerGroup = tickGroups[currentTickGroup].clone();\r\n                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\r\n                // Double the amount of ticks in a group, if it's an unbeamable tuplet\r\n                const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\r\n                if (unbeamable && unprocessedNote.getTuplet()) {\r\n                    ticksPerGroup.numerator *= 2;\r\n                }\r\n                // If the note that was just added overflows the group tick total\r\n                if (totalTicks.greaterThan(ticksPerGroup)) {\r\n                    // If the overflow note can be beamed, start the next group\r\n                    // with it. Unbeamable notes leave the group overflowed.\r\n                    if (!unbeamable) {\r\n                        const note = currentGroup.pop();\r\n                        if (note)\r\n                            nextGroup.push(note);\r\n                    }\r\n                    noteGroups.push(currentGroup);\r\n                    // We have overflown, so we're going to next tick group. As we might have\r\n                    // overflown by more than 1 group, we need to go forward as many times as\r\n                    // needed, decreasing currentGroupTotalTicks by as many ticks as there are\r\n                    // in current groups as we go forward.\r\n                    do {\r\n                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\r\n                        nextTickGroup();\r\n                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\r\n                    currentGroup = nextGroup;\r\n                }\r\n                else if (totalTicks.equals(ticksPerGroup)) {\r\n                    noteGroups.push(currentGroup);\r\n                    currentGroupTotalTicks = new Fraction(0, 1);\r\n                    currentGroup = nextGroup;\r\n                    nextTickGroup();\r\n                }\r\n            });\r\n            // Adds any remainder notes beam\r\n            if (currentGroup.length > 0) {\r\n                noteGroups.push(currentGroup);\r\n            }\r\n        }\r\n        function getBeamGroups() {\r\n            return noteGroups.filter((group) => {\r\n                if (group.length > 1) {\r\n                    let beamable = true;\r\n                    group.forEach((note) => {\r\n                        if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\r\n                            beamable = false;\r\n                        }\r\n                    });\r\n                    return beamable;\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n        // Splits up groups by Rest\r\n        function sanitizeGroups() {\r\n            const sanitizedGroups = [];\r\n            noteGroups.forEach((group) => {\r\n                let tempGroup = [];\r\n                group.forEach((note, index, group) => {\r\n                    const isFirstOrLast = index === 0 || index === group.length - 1;\r\n                    const prevNote = group[index - 1];\r\n                    const breaksOnEachRest = !config.beam_rests && note.isRest();\r\n                    const breaksOnFirstOrLastRest = config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\r\n                    let breakOnStemChange = false;\r\n                    if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\r\n                        const prevDirection = prevNote.getStemDirection();\r\n                        const currentDirection = note.getStemDirection();\r\n                        breakOnStemChange = currentDirection !== prevDirection;\r\n                    }\r\n                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\r\n                    // Determine if the group should be broken at this note\r\n                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\r\n                    if (shouldBreak) {\r\n                        // Add current group\r\n                        if (tempGroup.length > 0) {\r\n                            sanitizedGroups.push(tempGroup);\r\n                        }\r\n                        // Start a new group. Include the current note if the group\r\n                        // was broken up by stem direction, as that note needs to start\r\n                        // the next group of notes\r\n                        tempGroup = breakOnStemChange ? [note] : [];\r\n                    }\r\n                    else {\r\n                        // Add note to group\r\n                        tempGroup.push(note);\r\n                    }\r\n                });\r\n                // If there is a remaining group, add it as well\r\n                if (tempGroup.length > 0) {\r\n                    sanitizedGroups.push(tempGroup);\r\n                }\r\n            });\r\n            noteGroups = sanitizedGroups;\r\n        }\r\n        function formatStems() {\r\n            noteGroups.forEach((group) => {\r\n                let stemDirection;\r\n                if (config.maintain_stem_directions) {\r\n                    const note = findFirstNote(group);\r\n                    stemDirection = note ? note.getStemDirection() : Stem.UP;\r\n                }\r\n                else {\r\n                    if (config.stem_direction) {\r\n                        stemDirection = config.stem_direction;\r\n                    }\r\n                    else {\r\n                        stemDirection = calculateStemDirection(group);\r\n                    }\r\n                }\r\n                applyStemDirection(group, stemDirection);\r\n            });\r\n        }\r\n        function findFirstNote(group) {\r\n            for (let i = 0; i < group.length; i++) {\r\n                const note = group[i];\r\n                if (!note.isRest()) {\r\n                    return note;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        function applyStemDirection(group, direction) {\r\n            group.forEach((note) => {\r\n                note.setStemDirection(direction);\r\n            });\r\n        }\r\n        // Get all of the tuplets in all of the note groups\r\n        function getTuplets() {\r\n            const uniqueTuplets = [];\r\n            // Go through all of the note groups and inspect for tuplets\r\n            noteGroups.forEach((group) => {\r\n                let tuplet;\r\n                group.forEach((note) => {\r\n                    const noteTuplet = note.getTuplet();\r\n                    if (noteTuplet && tuplet !== noteTuplet) {\r\n                        tuplet = noteTuplet;\r\n                        uniqueTuplets.push(tuplet);\r\n                    }\r\n                });\r\n            });\r\n            return uniqueTuplets;\r\n        }\r\n        // Using closures to store the variables throughout the various functions\r\n        // IMO Keeps it this process lot cleaner - but not super consistent with\r\n        // the rest of the API's style - Silverwolf90 (Cyril)\r\n        createGroups();\r\n        sanitizeGroups();\r\n        formatStems();\r\n        // Get the notes to be beamed\r\n        const beamedNoteGroups = getBeamGroups();\r\n        // Get the tuplets in order to format them accurately\r\n        const allTuplets = getTuplets();\r\n        // Create a Vex.Flow.Beam from each group of notes to be beamed\r\n        const beams = [];\r\n        beamedNoteGroups.forEach((group) => {\r\n            const beam = new Beam(group);\r\n            if (config.show_stemlets) {\r\n                beam.render_options.show_stemlets = true;\r\n            }\r\n            if (config.secondary_breaks) {\r\n                beam.render_options.secondary_break_ticks = Tables.durationToTicks(config.secondary_breaks);\r\n            }\r\n            if (config.flat_beams === true) {\r\n                beam.render_options.flat_beams = true;\r\n                beam.render_options.flat_beam_offset = config.flat_beam_offset;\r\n            }\r\n            beams.push(beam);\r\n        });\r\n        // Reformat tuplets\r\n        allTuplets.forEach((tuplet) => {\r\n            // Set the tuplet location based on the stem direction\r\n            const direction = tuplet.notes[0].stem_direction === Stem.DOWN ? TupletLocation.BOTTOM : TupletLocation.TOP;\r\n            tuplet.setTupletLocation(direction);\r\n            // If any of the notes in the tuplet are not beamed, draw a bracket.\r\n            let bracketed = false;\r\n            for (let i = 0; i < tuplet.notes.length; i++) {\r\n                const note = tuplet.notes[i];\r\n                if (!note.hasBeam()) {\r\n                    bracketed = true;\r\n                    break;\r\n                }\r\n            }\r\n            tuplet.setBracketed(bracketed);\r\n        });\r\n        return beams;\r\n    }\r\n    /** Get the notes in this beam. */\r\n    getNotes() {\r\n        return this.notes;\r\n    }\r\n    /** Get the max number of beams in the set of notes. */\r\n    getBeamCount() {\r\n        const beamCounts = this.notes.map((note) => note.getGlyph().beam_count);\r\n        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\r\n        return maxBeamCount;\r\n    }\r\n    /** Set which note `indices` to break the secondary beam at. */\r\n    breakSecondaryAt(indices) {\r\n        this.break_on_indices = indices;\r\n        return this;\r\n    }\r\n    /**\r\n     * Forces the direction of a partial beam (a secondary-level beam that exists\r\n     * on one note only of the beam group). This is useful in rhythms such as 6/8\r\n     * eighth-sixteenth-eighth-sixteenth, where the direction of the beam on the\r\n     * first sixteenth note can help imply whether the rhythm is to be felt as\r\n     * three groups of eighth notes (typical) or as two groups of three-sixteenths\r\n     * (less common):\r\n     * ```\r\n     *  ┌───┬──┬──┐      ┌──┬──┬──┐\r\n     *  │   ├─ │ ─┤  vs  │ ─┤  │ ─┤\r\n     *  │   │  │  │      │  │  │  │\r\n     * ```\r\n     */\r\n    setPartialBeamSideAt(noteIndex, side) {\r\n        this.forcedPartialDirections[noteIndex] = side;\r\n        return this;\r\n    }\r\n    /**\r\n     * Restore the default direction of a partial beam (a secondary-level beam\r\n     * that does not connect to any other notes).\r\n     */\r\n    unsetPartialBeamSideAt(noteIndex) {\r\n        delete this.forcedPartialDirections[noteIndex];\r\n        return this;\r\n    }\r\n    /** Return the y coordinate for linear function. */\r\n    getSlopeY(x, first_x_px, first_y_px, slope) {\r\n        return first_y_px + (x - first_x_px) * slope;\r\n    }\r\n    /** Calculate the best possible slope for the provided notes. */\r\n    calculateSlope() {\r\n        const { notes, stem_direction: stemDirection, render_options: { max_slope, min_slope, slope_iterations, slope_cost }, } = this;\r\n        const firstNote = notes[0];\r\n        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\r\n        const increment = (max_slope - min_slope) / slope_iterations;\r\n        let minCost = Number.MAX_VALUE;\r\n        let bestSlope = 0;\r\n        let yShift = 0;\r\n        // iterate through slope values to find best weighted fit\r\n        for (let slope = min_slope; slope <= max_slope; slope += increment) {\r\n            let totalStemExtension = 0;\r\n            let yShiftTemp = 0;\r\n            // iterate through notes, calculating y shift and stem extension\r\n            for (let i = 1; i < notes.length; ++i) {\r\n                const note = notes[i];\r\n                if (note.hasStem() || note.isRest()) {\r\n                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\r\n                    const stemTipY = note.getStemExtents().topY;\r\n                    // beam needs to be shifted up to accommodate note\r\n                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\r\n                        const diff = Math.abs(stemTipY - adjustedStemTipY);\r\n                        yShiftTemp += diff * -stemDirection;\r\n                        totalStemExtension += diff * i;\r\n                    }\r\n                    else {\r\n                        // beam overshoots note, account for the difference\r\n                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\r\n                    }\r\n                }\r\n            }\r\n            // most engraving books suggest aiming for a slope about half the angle of the\r\n            // difference between the first and last notes' stem length;\r\n            const idealSlope = initialSlope / 2;\r\n            const distanceFromIdeal = Math.abs(idealSlope - slope);\r\n            // This tries to align most beams to something closer to the idealSlope, but\r\n            // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\r\n            const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\r\n            // update state when a more ideal slope is found\r\n            if (cost < minCost) {\r\n                minCost = cost;\r\n                bestSlope = slope;\r\n                yShift = yShiftTemp;\r\n            }\r\n        }\r\n        this.slope = bestSlope;\r\n        this.y_shift = yShift;\r\n    }\r\n    /** Calculate a slope and y-shift for flat beams. */\r\n    calculateFlatSlope() {\r\n        const { notes, stem_direction, render_options: { beam_width, min_flat_beam_offset, flat_beam_offset }, } = this;\r\n        // If a flat beam offset has not yet been supplied or calculated,\r\n        // generate one based on the notes in this particular note group\r\n        let total = 0;\r\n        let extremeY = 0; // Store the highest or lowest note here\r\n        let extremeBeamCount = 0; // The beam count of the extreme note\r\n        let currentExtreme = 0;\r\n        for (let i = 0; i < notes.length; i++) {\r\n            // Total up all of the offsets so we can average them out later\r\n            const note = notes[i];\r\n            const stemTipY = note.getStemExtents().topY;\r\n            total += stemTipY;\r\n            // Store the highest (stems-up) or lowest (stems-down) note so the\r\n            //  offset can be adjusted in case the average isn't enough\r\n            if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\r\n                currentExtreme = stemTipY;\r\n                extremeY = Math.max(...note.getYs());\r\n                extremeBeamCount = note.getBeamCount();\r\n            }\r\n            else if (stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\r\n                currentExtreme = stemTipY;\r\n                extremeY = Math.min(...note.getYs());\r\n                extremeBeamCount = note.getBeamCount();\r\n            }\r\n        }\r\n        // Average the offsets to try and come up with a reasonable one that\r\n        //  works for all of the notes in the beam group.\r\n        let offset = total / notes.length;\r\n        // In case the average isn't long enough, add or subtract some more\r\n        //  based on the highest or lowest note (again, based on the stem\r\n        //  direction). This also takes into account the added height due to\r\n        //  the width of the beams.\r\n        const beamWidth = beam_width * 1.5;\r\n        const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\r\n        const newOffset = extremeY + extremeTest * -stem_direction;\r\n        if (stem_direction === Stem.DOWN && offset < newOffset) {\r\n            offset = extremeY + extremeTest;\r\n        }\r\n        else if (stem_direction === Stem.UP && offset > newOffset) {\r\n            offset = extremeY - extremeTest;\r\n        }\r\n        if (!flat_beam_offset) {\r\n            // Set the offset for the group based on the calculations above.\r\n            this.render_options.flat_beam_offset = offset;\r\n        }\r\n        else if (stem_direction === Stem.DOWN && offset > flat_beam_offset) {\r\n            this.render_options.flat_beam_offset = offset;\r\n        }\r\n        else if (stem_direction === Stem.UP && offset < flat_beam_offset) {\r\n            this.render_options.flat_beam_offset = offset;\r\n        }\r\n        // for flat beams, the slope and y_shift are simply 0\r\n        this.slope = 0;\r\n        this.y_shift = 0;\r\n    }\r\n    /** Return the Beam y offset. */\r\n    getBeamYToDraw() {\r\n        const firstNote = this.notes[0];\r\n        const firstStemTipY = firstNote.getStemExtents().topY;\r\n        let beamY = firstStemTipY;\r\n        // For flat beams, set the first and last Y to the offset, rather than\r\n        //  using the note's stem extents.\r\n        if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\r\n            beamY = this.render_options.flat_beam_offset;\r\n        }\r\n        return beamY;\r\n    }\r\n    /**\r\n     * Create new stems for the notes in the beam, so that each stem\r\n     * extends into the beams.\r\n     */\r\n    applyStemExtensions() {\r\n        const { notes, slope, y_shift, stem_direction, beam_count, render_options: { show_stemlets, stemlet_extension, beam_width }, } = this;\r\n        const firstNote = notes[0];\r\n        const firstStemTipY = this.getBeamYToDraw();\r\n        const firstStemX = firstNote.getStemX();\r\n        for (let i = 0; i < notes.length; ++i) {\r\n            const note = notes[i];\r\n            const stem = note.getStem();\r\n            if (stem) {\r\n                const stemX = note.getStemX();\r\n                const { topY: stemTipY } = note.getStemExtents();\r\n                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\r\n                const preBeamExtension = stem.getExtension();\r\n                const beamExtension = stem_direction === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\r\n                stem.setExtension(preBeamExtension + beamExtension);\r\n                stem.adjustHeightForBeam();\r\n                if (note.isRest() && show_stemlets) {\r\n                    const beamWidth = beam_width;\r\n                    const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\r\n                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /** Return upper level beam direction. */\r\n    lookupBeamDirection(duration, prev_tick, tick, next_tick, noteIndex) {\r\n        if (duration === '4') {\r\n            return BEAM_LEFT;\r\n        }\r\n        const forcedBeamDirection = this.forcedPartialDirections[noteIndex];\r\n        if (forcedBeamDirection)\r\n            return forcedBeamDirection;\r\n        const lookup_duration = `${Tables.durationToNumber(duration) / 2}`;\r\n        const prev_note_gets_beam = prev_tick < Tables.durationToTicks(lookup_duration);\r\n        const next_note_gets_beam = next_tick < Tables.durationToTicks(lookup_duration);\r\n        const note_gets_beam = tick < Tables.durationToTicks(lookup_duration);\r\n        if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\r\n            return BEAM_BOTH;\r\n        }\r\n        else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\r\n            return BEAM_LEFT;\r\n        }\r\n        else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\r\n            return BEAM_RIGHT;\r\n        }\r\n        return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick, noteIndex);\r\n    }\r\n    /** Get the x coordinates for the beam lines of specific `duration`. */\r\n    getBeamLines(duration) {\r\n        const tick_of_duration = Tables.durationToTicks(duration);\r\n        let beam_started = false;\r\n        const beam_lines = [];\r\n        let current_beam = undefined;\r\n        const partial_beam_length = this.render_options.partial_beam_length;\r\n        let previous_should_break = false;\r\n        let tick_tally = 0;\r\n        for (let i = 0; i < this.notes.length; ++i) {\r\n            const note = this.notes[i];\r\n            // See if we need to break secondary beams on this note.\r\n            const ticks = note.getTicks().value();\r\n            tick_tally += ticks;\r\n            let should_break = false;\r\n            // 8th note beams are always drawn.\r\n            if (parseInt(duration, 10) >= 8) {\r\n                // First, check to see if any indices were set up through breakSecondaryAt()\r\n                should_break = this.break_on_indices.indexOf(i) !== -1;\r\n                // If the secondary breaks were auto-configured in the render options,\r\n                //  handle that as well.\r\n                if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\r\n                    tick_tally = 0;\r\n                    should_break = true;\r\n                }\r\n            }\r\n            const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\r\n            const stem_x = note.getStemX() - Stem.WIDTH / 2;\r\n            // Check to see if the next note in the group will get a beam at this\r\n            //  level. This will help to inform the partial beam logic below.\r\n            const prev_note = this.notes[i - 1];\r\n            const next_note = this.notes[i + 1];\r\n            const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\r\n            const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\r\n            const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\r\n            // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\r\n            if (note_gets_beam) {\r\n                // This note gets a beam at the current level\r\n                if (beam_started) {\r\n                    // We're currently in the middle of a beam. Just continue it on to\r\n                    //  the stem X of the current note.\r\n                    current_beam = beam_lines[beam_lines.length - 1];\r\n                    current_beam.end = stem_x;\r\n                    // If a secondary beam break is set up, end the beam right now.\r\n                    if (should_break) {\r\n                        beam_started = false;\r\n                        if (next_note && !next_note_gets_beam && current_beam.end === undefined) {\r\n                            // This note gets a beam,.but the next one does not. This means\r\n                            //  we need a partial pointing right.\r\n                            current_beam.end = current_beam.start - partial_beam_length;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // No beam started yet. Start a new one.\r\n                    current_beam = { start: stem_x, end: undefined };\r\n                    beam_started = true;\r\n                    if (beam_alone) {\r\n                        // previous and next beam exists and does not get a beam but current gets it.\r\n                        const prev_tick = prev_note.getIntrinsicTicks();\r\n                        const next_tick = next_note.getIntrinsicTicks();\r\n                        const tick = note.getIntrinsicTicks();\r\n                        const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick, i);\r\n                        if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\r\n                            current_beam.end = current_beam.start - partial_beam_length;\r\n                        }\r\n                        else {\r\n                            current_beam.end = current_beam.start + partial_beam_length;\r\n                        }\r\n                    }\r\n                    else if (!next_note_gets_beam) {\r\n                        // The next note doesn't get a beam. Draw a partial.\r\n                        if ((previous_should_break || i === 0) && next_note) {\r\n                            // This is the first note (but not the last one), or it is\r\n                            //  following a secondary break. Draw a partial to the right.\r\n                            current_beam.end = current_beam.start + partial_beam_length;\r\n                        }\r\n                        else {\r\n                            // By default, draw a partial to the left.\r\n                            current_beam.end = current_beam.start - partial_beam_length;\r\n                        }\r\n                    }\r\n                    else if (should_break) {\r\n                        // This note should have a secondary break after it. Even though\r\n                        //  we just started a beam, it needs to end immediately.\r\n                        current_beam.end = current_beam.start - partial_beam_length;\r\n                        beam_started = false;\r\n                    }\r\n                    beam_lines.push(current_beam);\r\n                }\r\n            }\r\n            else {\r\n                // The current note does not get a beam.\r\n                beam_started = false;\r\n            }\r\n            // Store the secondary break flag to inform the partial beam logic in\r\n            //  the next iteration of the loop.\r\n            previous_should_break = should_break;\r\n        }\r\n        // Add a partial beam pointing left if this is the last note in the group\r\n        const last_beam = beam_lines[beam_lines.length - 1];\r\n        if (last_beam && last_beam.end === undefined) {\r\n            last_beam.end = last_beam.start - partial_beam_length;\r\n        }\r\n        return beam_lines;\r\n    }\r\n    /** Render the stems for each note. */\r\n    drawStems(ctx) {\r\n        this.notes.forEach((note) => {\r\n            const stem = note.getStem();\r\n            if (stem) {\r\n                const stem_x = note.getStemX();\r\n                stem.setNoteHeadXBounds(stem_x, stem_x);\r\n                ctx.openGroup('stem', note.getAttribute('id') + '-stem');\r\n                stem.setContext(ctx).draw();\r\n                ctx.closeGroup();\r\n            }\r\n        }, this);\r\n    }\r\n    // Render the beam lines\r\n    drawBeamLines(ctx) {\r\n        const valid_beam_durations = ['4', '8', '16', '32', '64'];\r\n        const firstNote = this.notes[0];\r\n        let beamY = this.getBeamYToDraw();\r\n        const firstStemX = firstNote.getStemX();\r\n        const beamThickness = this.render_options.beam_width * this.stem_direction;\r\n        // Draw the beams.\r\n        for (let i = 0; i < valid_beam_durations.length; ++i) {\r\n            const duration = valid_beam_durations[i];\r\n            const beamLines = this.getBeamLines(duration);\r\n            for (let j = 0; j < beamLines.length; ++j) {\r\n                const beam_line = beamLines[j];\r\n                const startBeamX = beam_line.start;\r\n                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\r\n                const lastBeamX = beam_line.end;\r\n                if (lastBeamX) {\r\n                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\r\n                    this.setAttribute('el', ctx.openGroup('beam'));\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(startBeamX, startBeamY);\r\n                    ctx.lineTo(startBeamX, startBeamY + beamThickness);\r\n                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\r\n                    ctx.lineTo(lastBeamX + 1, lastBeamY);\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n                    ctx.closeGroup();\r\n                }\r\n                else {\r\n                    throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\r\n                }\r\n            }\r\n            beamY += beamThickness * 1.5;\r\n        }\r\n    }\r\n    /** Pre-format the beam. */\r\n    preFormat() {\r\n        return this;\r\n    }\r\n    /**\r\n     * Post-format the beam. This can only be called after\r\n     * the notes in the beam have both `x` and `y` values. ie: they've\r\n     * been formatted and have staves.\r\n     */\r\n    postFormat() {\r\n        if (this.postFormatted)\r\n            return;\r\n        // Calculate a smart slope if we're not forcing the beams to be flat.\r\n        if (isTabNote(this.notes[0]) || this.render_options.flat_beams) {\r\n            this.calculateFlatSlope();\r\n        }\r\n        else {\r\n            this.calculateSlope();\r\n        }\r\n        this.applyStemExtensions();\r\n        this.postFormatted = true;\r\n    }\r\n    /** Render the beam to the canvas context */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        if (this.unbeamable)\r\n            return;\r\n        if (!this.postFormatted) {\r\n            this.postFormat();\r\n        }\r\n        this.drawStems(ctx);\r\n        this.applyStyle();\r\n        this.drawBeamLines(ctx);\r\n        this.restoreStyle();\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Element } from './element';\r\nimport { Modifier } from './modifier';\r\nimport { TextFormatter } from './textformatter';\r\nimport { Category, isTabNote } from './typeguard';\r\nimport { RuntimeError } from './util';\r\n/** Bend implements tablature bends. */\r\nexport class Bend extends Modifier {\r\n    /**\r\n     * Example of a phrase:\r\n     * ```\r\n     *    [{\r\n     *     type: UP,\r\n     *     text: \"whole\"\r\n     *     width: 8;\r\n     *   },\r\n     *   {\r\n     *     type: DOWN,\r\n     *     text: \"whole\"\r\n     *     width: 8;\r\n     *   },\r\n     *   {\r\n     *     type: UP,\r\n     *     text: \"half\"\r\n     *     width: 8;\r\n     *   },\r\n     *   {\r\n     *     type: UP,\r\n     *     text: \"whole\"\r\n     *     width: 8;\r\n     *   },\r\n     *   {\r\n     *     type: DOWN,\r\n     *     text: \"1 1/2\"\r\n     *     width: 8;\r\n     *   }]\r\n     * ```\r\n     * @param text text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\r\n     * @param release if true, render a release. (DEPRECATED)\r\n     * @param phrase if set, ignore \"text\" and \"release\", and use the more sophisticated phrase specified\r\n     */\r\n    constructor(text, release = false, phrase) {\r\n        super();\r\n        this.text = text;\r\n        this.x_shift = 0;\r\n        this.release = release;\r\n        this.tap = '';\r\n        this.resetFont();\r\n        this.render_options = {\r\n            line_width: 1.5,\r\n            line_style: '#777777',\r\n            bend_width: 8,\r\n            release_width: 8,\r\n        };\r\n        if (phrase) {\r\n            this.phrase = phrase;\r\n        }\r\n        else {\r\n            // Backward compatibility\r\n            this.phrase = [{ type: Bend.UP, text: this.text }];\r\n            if (this.release)\r\n                this.phrase.push({ type: Bend.DOWN, text: '' });\r\n        }\r\n        this.updateWidth();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Bend;\r\n    }\r\n    static get UP() {\r\n        return 0;\r\n    }\r\n    static get DOWN() {\r\n        return 1;\r\n    }\r\n    // Arrange bends in `ModifierContext`\r\n    static format(bends, state) {\r\n        if (!bends || bends.length === 0)\r\n            return false;\r\n        let last_width = 0;\r\n        // Format Bends\r\n        for (let i = 0; i < bends.length; ++i) {\r\n            const bend = bends[i];\r\n            const note = bend.checkAttachedNote();\r\n            if (isTabNote(note)) {\r\n                const stringPos = note.leastString() - 1;\r\n                if (state.top_text_line < stringPos) {\r\n                    state.top_text_line = stringPos;\r\n                }\r\n            }\r\n            bend.setXShift(last_width);\r\n            last_width = bend.getWidth();\r\n            bend.setTextLine(state.top_text_line);\r\n        }\r\n        state.right_shift += last_width;\r\n        state.top_text_line += 1;\r\n        return true;\r\n    }\r\n    /** Set horizontal shift in pixels. */\r\n    setXShift(value) {\r\n        this.x_shift = value;\r\n        this.updateWidth();\r\n        return this;\r\n    }\r\n    setTap(value) {\r\n        this.tap = value;\r\n        return this;\r\n    }\r\n    /** Get text provided in the constructor. */\r\n    getText() {\r\n        return this.text;\r\n    }\r\n    getTextHeight() {\r\n        const textFormatter = TextFormatter.create(this.textFont);\r\n        return textFormatter.maxHeight;\r\n    }\r\n    /** Recalculate width. */\r\n    updateWidth() {\r\n        const textFormatter = TextFormatter.create(this.textFont);\r\n        const measureText = (text) => {\r\n            return textFormatter.getWidthForTextInPx(text);\r\n        };\r\n        let totalWidth = 0;\r\n        for (let i = 0; i < this.phrase.length; ++i) {\r\n            const bend = this.phrase[i];\r\n            if (bend.width !== undefined) {\r\n                totalWidth += bend.width;\r\n            }\r\n            else {\r\n                const additional_width = bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\r\n                bend.width = Math.max(additional_width, measureText(bend.text)) + 3;\r\n                bend.draw_width = bend.width / 2;\r\n                totalWidth += bend.width;\r\n            }\r\n        }\r\n        this.setWidth(totalWidth + this.x_shift);\r\n        return this;\r\n    }\r\n    /** Draw the bend on the rendering context. */\r\n    draw() {\r\n        var _a;\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\r\n        start.x += 3;\r\n        start.y += 0.5;\r\n        const x_shift = this.x_shift;\r\n        const stave = note.checkStave();\r\n        const spacing = stave.getSpacingBetweenLines();\r\n        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));\r\n        // this.text_line is relative to top string in the group.\r\n        const bend_height = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) + 3;\r\n        const annotation_y = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) - 1;\r\n        const renderBend = (x, y, width, height) => {\r\n            const cp_x = x + width;\r\n            const cp_y = y;\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.setLineWidth(this.render_options.line_width);\r\n            ctx.setStrokeStyle(this.render_options.line_style);\r\n            ctx.setFillStyle(this.render_options.line_style);\r\n            ctx.moveTo(x, y);\r\n            ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        };\r\n        const renderRelease = (x, y, width, height) => {\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.setLineWidth(this.render_options.line_width);\r\n            ctx.setStrokeStyle(this.render_options.line_style);\r\n            ctx.setFillStyle(this.render_options.line_style);\r\n            ctx.moveTo(x, height);\r\n            ctx.quadraticCurveTo(x + width, height, x + width, y);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        };\r\n        const renderArrowHead = (x, y, direction) => {\r\n            const width = 4;\r\n            const yBase = y + width * direction;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x, y); // tip of the arrow\r\n            ctx.lineTo(x - width, yBase);\r\n            ctx.lineTo(x + width, yBase);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        };\r\n        const renderText = (x, text) => {\r\n            ctx.save();\r\n            ctx.setFont(this.textFont);\r\n            const render_x = x - ctx.measureText(text).width / 2;\r\n            ctx.fillText(text, render_x, annotation_y);\r\n            ctx.restore();\r\n        };\r\n        let last_bend = undefined;\r\n        let last_bend_draw_width = 0;\r\n        let last_drawn_width = 0;\r\n        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {\r\n            const tapStart = note.getModifierStartXY(Modifier.Position.CENTER, this.index);\r\n            renderText(tapStart.x, this.tap);\r\n        }\r\n        for (let i = 0; i < this.phrase.length; ++i) {\r\n            const bend = this.phrase[i];\r\n            if (!bend.draw_width)\r\n                bend.draw_width = 0;\r\n            if (i === 0)\r\n                bend.draw_width += x_shift;\r\n            last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);\r\n            if (bend.type === Bend.UP) {\r\n                if (last_bend && last_bend.type === Bend.UP) {\r\n                    renderArrowHead(start.x, bend_height, +1);\r\n                }\r\n                renderBend(start.x, start.y, last_drawn_width, bend_height);\r\n            }\r\n            if (bend.type === Bend.DOWN) {\r\n                if (last_bend && last_bend.type === Bend.UP) {\r\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\r\n                }\r\n                if (last_bend && last_bend.type === Bend.DOWN) {\r\n                    renderArrowHead(start.x, start.y, -1);\r\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\r\n                }\r\n                if (!last_bend) {\r\n                    last_drawn_width = bend.draw_width;\r\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\r\n                }\r\n            }\r\n            renderText(start.x + last_drawn_width, bend.text);\r\n            last_bend = bend;\r\n            last_bend_draw_width = bend.draw_width;\r\n            last_bend.x = start.x;\r\n            start.x += last_drawn_width;\r\n        }\r\n        if (!last_bend || last_bend.x == undefined) {\r\n            throw new RuntimeError('NoLastBendForBend', 'Internal error.');\r\n        }\r\n        // Final arrowhead and text\r\n        if (last_bend.type === Bend.UP) {\r\n            renderArrowHead(last_bend.x + last_drawn_width, bend_height, +1);\r\n        }\r\n        else if (last_bend.type === Bend.DOWN) {\r\n            renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\r\n        }\r\n    }\r\n}\r\n/** Default text font. */\r\nBend.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nexport class BoundingBox {\r\n    constructor(x, y, w, h) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n    /**\r\n     * Create a new copy.\r\n     */\r\n    static copy(that) {\r\n        return new BoundingBox(that.x, that.y, that.w, that.h);\r\n    }\r\n    /** Get x position. */\r\n    getX() {\r\n        return this.x;\r\n    }\r\n    /** Get y position. */\r\n    getY() {\r\n        return this.y;\r\n    }\r\n    /** Get width. */\r\n    getW() {\r\n        return this.w;\r\n    }\r\n    /** Get height. */\r\n    getH() {\r\n        return this.h;\r\n    }\r\n    /** Set x position. */\r\n    setX(x) {\r\n        this.x = x;\r\n        return this;\r\n    }\r\n    /** Set y position. */\r\n    setY(y) {\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    /** Set width. */\r\n    setW(w) {\r\n        this.w = w;\r\n        return this;\r\n    }\r\n    /** Set height. */\r\n    setH(h) {\r\n        this.h = h;\r\n        return this;\r\n    }\r\n    /** Move to position. */\r\n    move(x, y) {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n    /** Clone. */\r\n    clone() {\r\n        return BoundingBox.copy(this);\r\n    }\r\n    /**\r\n     * Merge my box with given box. Creates a bigger bounding box unless\r\n     * the given box is contained in this one.\r\n     */\r\n    mergeWith(boundingBox) {\r\n        const that = boundingBox;\r\n        const new_x = this.x < that.x ? this.x : that.x;\r\n        const new_y = this.y < that.y ? this.y : that.y;\r\n        const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\r\n        const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\r\n        this.x = new_x;\r\n        this.y = new_y;\r\n        this.w = new_w;\r\n        this.h = new_h;\r\n        return this;\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n/**\r\n * BoundingBoxComputation computes metrics for a bounding box by continuously\r\n * taking canvas path commands.\r\n *\r\n * Warning: This class is merely a crutch to get bounding box information without\r\n * explicit metadata. This is likely to get deprecated following SMuFL support.\r\n *\r\n * based on: https://github.com/canvg/canvg/blob/master/src/BoundingBox.ts (MIT License)\r\n */\r\nexport class BoundingBoxComputation {\r\n    constructor() {\r\n        this.x1 = Number.NaN;\r\n        this.y1 = Number.NaN;\r\n        this.x2 = Number.NaN;\r\n        this.y2 = Number.NaN;\r\n    }\r\n    /** Get calculated X1. */\r\n    getX1() {\r\n        return this.x1;\r\n    }\r\n    /** Get calculated Y1. */\r\n    getY1() {\r\n        return this.y1;\r\n    }\r\n    /** Get calculated width. */\r\n    width() {\r\n        return this.x2 - this.x1;\r\n    }\r\n    /** Get calculated height. */\r\n    height() {\r\n        return this.y2 - this.y1;\r\n    }\r\n    /** Add point to BoundingBox. */\r\n    addPoint(x, y) {\r\n        if (isNaN(this.x1) || x < this.x1)\r\n            this.x1 = x;\r\n        if (isNaN(this.x2) || x > this.x2)\r\n            this.x2 = x;\r\n        if (isNaN(this.y1) || y < this.y1)\r\n            this.y1 = y;\r\n        if (isNaN(this.y2) || y > this.y2)\r\n            this.y2 = y;\r\n    }\r\n    /** Add X to BoundingBox. */\r\n    addX(x) {\r\n        this.addPoint(x, this.y1);\r\n    }\r\n    /** Add Y to BoundingBox. */\r\n    addY(y) {\r\n        this.addPoint(this.x1, y);\r\n    }\r\n    /** Add quadratic curve to BoundingBox. */\r\n    addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\r\n        this.addPoint(p0x, p0y);\r\n        this.addPoint(p2x, p2y);\r\n        const p01x = p1x - p0x;\r\n        const p12x = p2x - p1x;\r\n        let denom = p01x - p12x;\r\n        if (denom != 0) {\r\n            const t = p01x / denom;\r\n            if (t > 0 && t < 1) {\r\n                const it = 1 - t;\r\n                this.addX(it * it * p0x + 2 * it * t * p1x + t * t * p2x);\r\n            }\r\n        }\r\n        const p01y = p1y - p0y;\r\n        const p12y = p2y - p1y;\r\n        denom = p01y - p12y;\r\n        if (denom != 0) {\r\n            const t = p01y / denom;\r\n            if (t > 0 && t < 1) {\r\n                const it = 1 - t;\r\n                this.addY(it * it * p0y + 2 * it * t * p1y + t * t * p2y);\r\n            }\r\n        }\r\n    }\r\n    /** Add bezier curve to BoundingBox. */\r\n    addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\r\n        // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\r\n        const p0 = [p0x, p0y];\r\n        const p1 = [p1x, p1y];\r\n        const p2 = [p2x, p2y];\r\n        const p3 = [p3x, p3y];\r\n        let i;\r\n        this.addPoint(p0[0], p0[1]);\r\n        this.addPoint(p3[0], p3[1]);\r\n        const f = (t, i) => Math.pow(1 - t, 3) * p0[i] +\r\n            3 * Math.pow(1 - t, 2) * t * p1[i] +\r\n            3 * (1 - t) * Math.pow(t, 2) * p2[i] +\r\n            Math.pow(t, 3) * p3[i];\r\n        for (i = 0; i <= 1; i++) {\r\n            const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\r\n            const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\r\n            const c = 3 * p1[i] - 3 * p0[i];\r\n            if (a === 0) {\r\n                if (b === 0)\r\n                    continue;\r\n                const t = -c / b;\r\n                if (0 < t && t < 1) {\r\n                    if (i === 0)\r\n                        this.addX(f(t, i));\r\n                    if (i === 1)\r\n                        this.addY(f(t, i));\r\n                }\r\n                continue;\r\n            }\r\n            const b2ac = Math.pow(b, 2) - 4 * c * a;\r\n            if (b2ac < 0)\r\n                continue;\r\n            const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\r\n            if (0 < t1 && t1 < 1) {\r\n                if (i === 0)\r\n                    this.addX(f(t1, i));\r\n                if (i === 1)\r\n                    this.addY(f(t1, i));\r\n            }\r\n            const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\r\n            if (0 < t2 && t2 < 1) {\r\n                if (i === 0)\r\n                    this.addX(f(t2, i));\r\n                if (i === 1)\r\n                    this.addY(f(t2, i));\r\n            }\r\n        }\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Font } from './font';\r\nimport { RenderContext } from './rendercontext';\r\nimport { globalObject, warn } from './util';\r\nimport { isHTMLCanvas } from './web';\r\n/**\r\n * A rendering context for the Canvas backend. This class serves as a proxy for the\r\n * underlying CanvasRenderingContext2D object, part of the browser's API.\r\n */\r\nexport class CanvasContext extends RenderContext {\r\n    constructor(context) {\r\n        super();\r\n        /** Height of one line of text (in pixels). */\r\n        this.textHeight = 0;\r\n        this.context2D = context;\r\n        if (!context.canvas) {\r\n            this.canvas = {\r\n                width: CanvasContext.WIDTH,\r\n                height: CanvasContext.HEIGHT,\r\n            };\r\n        }\r\n        else {\r\n            this.canvas = context.canvas;\r\n        }\r\n    }\r\n    static get WIDTH() {\r\n        return 600;\r\n    }\r\n    static get HEIGHT() {\r\n        return 400;\r\n    }\r\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\r\n        return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\r\n    }\r\n    /**\r\n     * Ensure that width and height do not exceed the browser limit.\r\n     * @returns array of [width, height] clamped to the browser limit.\r\n     */\r\n    static sanitizeCanvasDims(width, height) {\r\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\r\n        if (Math.max(width, height) > limit) {\r\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\r\n            if (width > limit) {\r\n                width = limit;\r\n            }\r\n            if (height > limit) {\r\n                height = limit;\r\n            }\r\n        }\r\n        return [width, height];\r\n    }\r\n    /**\r\n     * Set all pixels to transparent black rgba(0,0,0,0).\r\n     */\r\n    clear() {\r\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n    // eslint-disable-next-line\r\n    openGroup(cls, id, attrs) {\r\n        // Containers not implemented.\r\n    }\r\n    closeGroup() {\r\n        // Containers not implemented.\r\n    }\r\n    // eslint-disable-next-line\r\n    add(child) {\r\n        // Containers not implemented.\r\n    }\r\n    setFillStyle(style) {\r\n        this.context2D.fillStyle = style;\r\n        return this;\r\n    }\r\n    /** CanvasContext ignores `setBackgroundFillStyle()`. */\r\n    // eslint-disable-next-line\r\n    setBackgroundFillStyle(style) {\r\n        // DO NOTHING\r\n        return this;\r\n    }\r\n    setStrokeStyle(style) {\r\n        this.context2D.strokeStyle = style;\r\n        return this;\r\n    }\r\n    setShadowColor(color) {\r\n        this.context2D.shadowColor = color;\r\n        return this;\r\n    }\r\n    setShadowBlur(blur) {\r\n        // CanvasRenderingContext2D does not scale the shadow blur by the current\r\n        // transform, so we have to do it manually. We assume uniform scaling\r\n        // (though allow for rotation) because the blur can only be scaled\r\n        // uniformly anyway.\r\n        const t = this.context2D.getTransform();\r\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\r\n        this.context2D.shadowBlur = scale * blur;\r\n        return this;\r\n    }\r\n    setLineWidth(width) {\r\n        this.context2D.lineWidth = width;\r\n        return this;\r\n    }\r\n    setLineCap(capType) {\r\n        this.context2D.lineCap = capType;\r\n        return this;\r\n    }\r\n    setLineDash(dash) {\r\n        this.context2D.setLineDash(dash);\r\n        return this;\r\n    }\r\n    scale(x, y) {\r\n        this.context2D.scale(x, y);\r\n        return this;\r\n    }\r\n    resize(width, height) {\r\n        const canvas = this.context2D.canvas;\r\n        const devicePixelRatio = globalObject().devicePixelRatio || 1;\r\n        // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\r\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * devicePixelRatio, height * devicePixelRatio);\r\n        // Divide back down by the pixel ratio and convert to integers.\r\n        width = (width / devicePixelRatio) | 0;\r\n        height = (height / devicePixelRatio) | 0;\r\n        canvas.width = width * devicePixelRatio;\r\n        canvas.height = height * devicePixelRatio;\r\n        // The canvas could be an instance of either HTMLCanvasElement or an OffscreenCanvas.\r\n        // Only HTMLCanvasElement has a style attribute.\r\n        if (isHTMLCanvas(canvas)) {\r\n            canvas.style.width = width + 'px';\r\n            canvas.style.height = height + 'px';\r\n        }\r\n        return this.scale(devicePixelRatio, devicePixelRatio);\r\n    }\r\n    rect(x, y, width, height) {\r\n        this.context2D.rect(x, y, width, height);\r\n        return this;\r\n    }\r\n    fillRect(x, y, width, height) {\r\n        this.context2D.fillRect(x, y, width, height);\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\r\n     */\r\n    clearRect(x, y, width, height) {\r\n        this.context2D.clearRect(x, y, width, height);\r\n        return this;\r\n    }\r\n    beginPath() {\r\n        this.context2D.beginPath();\r\n        return this;\r\n    }\r\n    moveTo(x, y) {\r\n        this.context2D.moveTo(x, y);\r\n        return this;\r\n    }\r\n    lineTo(x, y) {\r\n        this.context2D.lineTo(x, y);\r\n        return this;\r\n    }\r\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\r\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\r\n        return this;\r\n    }\r\n    quadraticCurveTo(cpx, cpy, x, y) {\r\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\r\n        return this;\r\n    }\r\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\r\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\r\n        return this;\r\n    }\r\n    fill() {\r\n        this.context2D.fill();\r\n        return this;\r\n    }\r\n    stroke() {\r\n        this.context2D.stroke();\r\n        return this;\r\n    }\r\n    closePath() {\r\n        this.context2D.closePath();\r\n        return this;\r\n    }\r\n    measureText(text) {\r\n        const metrics = this.context2D.measureText(text);\r\n        let y = 0;\r\n        let height = 0;\r\n        if (metrics.fontBoundingBoxAscent) {\r\n            y = -metrics.fontBoundingBoxAscent;\r\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\r\n        }\r\n        else {\r\n            y = -metrics.actualBoundingBoxAscent;\r\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\r\n        }\r\n        // Return x, y, width & height in the same manner as svg getBBox\r\n        return {\r\n            x: 0,\r\n            y: y,\r\n            width: metrics.width,\r\n            height: height,\r\n        };\r\n    }\r\n    fillText(text, x, y) {\r\n        this.context2D.fillText(text, x, y);\r\n        return this;\r\n    }\r\n    save() {\r\n        this.context2D.save();\r\n        return this;\r\n    }\r\n    restore() {\r\n        this.context2D.restore();\r\n        return this;\r\n    }\r\n    set fillStyle(style) {\r\n        this.context2D.fillStyle = style;\r\n    }\r\n    get fillStyle() {\r\n        return this.context2D.fillStyle;\r\n    }\r\n    set strokeStyle(style) {\r\n        this.context2D.strokeStyle = style;\r\n    }\r\n    get strokeStyle() {\r\n        return this.context2D.strokeStyle;\r\n    }\r\n    /**\r\n     * @param f is 1) a `FontInfo` object or\r\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\r\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\r\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\r\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\r\n     * @param style is a string (e.g., 'italic', 'normal').\r\n     */\r\n    setFont(f, size, weight, style) {\r\n        const fontInfo = Font.validate(f, size, weight, style);\r\n        this.context2D.font = Font.toCSSString(fontInfo);\r\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\r\n        return this;\r\n    }\r\n    /** Return a string of the form `'italic bold 15pt Arial'` */\r\n    getFont() {\r\n        return this.context2D.font;\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// Author: Aaron (@AaronDavidNewman)\r\n//\r\n// This implements chord symbols above/below a chord.\r\n// Chord symbols are modifiers that can be attached to notes.\r\n// They can contain multiple 'blocks' which represent text or\r\n// glyphs with various positioning options.\r\n//\r\n// See `tests/chordsymbol_tests.ts` for usage examples.\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Glyph } from './glyph';\r\nimport { Modifier } from './modifier';\r\nimport { Tables } from './tables';\r\nimport { TextFormatter } from './textformatter';\r\nimport { Category, isStemmableNote } from './typeguard';\r\nimport { log } from './util';\r\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (ChordSymbol.DEBUG)\r\n        log('Vex.Flow.ChordSymbol', args);\r\n}\r\nexport var ChordSymbolHorizontalJustify;\r\n(function (ChordSymbolHorizontalJustify) {\r\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\r\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\r\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\r\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\r\n})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));\r\nexport var ChordSymbolVerticalJustify;\r\n(function (ChordSymbolVerticalJustify) {\r\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"TOP\"] = 1] = \"TOP\";\r\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"BOTTOM\"] = 2] = \"BOTTOM\";\r\n})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));\r\nexport var SymbolTypes;\r\n(function (SymbolTypes) {\r\n    SymbolTypes[SymbolTypes[\"GLYPH\"] = 1] = \"GLYPH\";\r\n    SymbolTypes[SymbolTypes[\"TEXT\"] = 2] = \"TEXT\";\r\n    SymbolTypes[SymbolTypes[\"LINE\"] = 3] = \"LINE\";\r\n})(SymbolTypes || (SymbolTypes = {}));\r\nexport var SymbolModifiers;\r\n(function (SymbolModifiers) {\r\n    SymbolModifiers[SymbolModifiers[\"NONE\"] = 1] = \"NONE\";\r\n    SymbolModifiers[SymbolModifiers[\"SUBSCRIPT\"] = 2] = \"SUBSCRIPT\";\r\n    SymbolModifiers[SymbolModifiers[\"SUPERSCRIPT\"] = 3] = \"SUPERSCRIPT\";\r\n})(SymbolModifiers || (SymbolModifiers = {}));\r\n/**\r\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\r\n * As a modifier, it is attached to an existing note.\r\n */\r\nexport class ChordSymbol extends Modifier {\r\n    constructor() {\r\n        super();\r\n        this.symbolBlocks = [];\r\n        this.horizontal = ChordSymbolHorizontalJustify.LEFT;\r\n        this.vertical = ChordSymbolVerticalJustify.TOP;\r\n        this.useKerning = true;\r\n        this.reportWidth = true;\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.ChordSymbol;\r\n    }\r\n    static get superSubRatio() {\r\n        return ChordSymbol.metrics.global.superSubRatio;\r\n    }\r\n    /** Currently unused: Globally turn off text formatting, if the built-in formatting does not work for your font. */\r\n    static set NO_TEXT_FORMAT(val) {\r\n        ChordSymbol.noFormat = val;\r\n    }\r\n    static get NO_TEXT_FORMAT() {\r\n        return ChordSymbol.noFormat;\r\n    }\r\n    // eslint-disable-next-line\r\n    static getMetricForGlyph(glyphCode) {\r\n        if (ChordSymbol.metrics[glyphCode]) {\r\n            return ChordSymbol.metrics[glyphCode];\r\n        }\r\n        return undefined;\r\n    }\r\n    static get engravingFontResolution() {\r\n        return Tables.currentMusicFont().getResolution();\r\n    }\r\n    static get spacingBetweenBlocks() {\r\n        return ChordSymbol.metrics.global.spacing / ChordSymbol.engravingFontResolution;\r\n    }\r\n    static getWidthForGlyph(glyph) {\r\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\r\n        if (!metric) {\r\n            return 0.65; // probably should do something here.\r\n        }\r\n        return metric.advanceWidth / ChordSymbol.engravingFontResolution;\r\n    }\r\n    static getYShiftForGlyph(glyph) {\r\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\r\n        if (!metric) {\r\n            return 0;\r\n        }\r\n        return metric.yOffset / ChordSymbol.engravingFontResolution;\r\n    }\r\n    static getXShiftForGlyph(glyph) {\r\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\r\n        if (!metric) {\r\n            return 0;\r\n        }\r\n        return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;\r\n    }\r\n    static get superscriptOffset() {\r\n        return ChordSymbol.metrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;\r\n    }\r\n    static get subscriptOffset() {\r\n        return ChordSymbol.metrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;\r\n    }\r\n    static get kerningOffset() {\r\n        return ChordSymbol.metrics.global.kerningOffset / ChordSymbol.engravingFontResolution;\r\n    }\r\n    // eslint-disable-next-line\r\n    static get metrics() {\r\n        return Tables.currentMusicFont().getMetrics().glyphs.chordSymbol;\r\n    }\r\n    static get lowerKerningText() {\r\n        // For example, see: `bravura_metrics.ts`\r\n        // BravuraMetrics.glyphs.chordSymbol.global.lowerKerningText, which returns an array of letters.\r\n        // ['D', 'F', 'P', 'T', 'V', 'Y']\r\n        return ChordSymbol.metrics.global.lowerKerningText;\r\n    }\r\n    static get upperKerningText() {\r\n        return ChordSymbol.metrics.global.upperKerningText;\r\n    }\r\n    static isSuperscript(block) {\r\n        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUPERSCRIPT;\r\n    }\r\n    static isSubscript(block) {\r\n        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUBSCRIPT;\r\n    }\r\n    static get minPadding() {\r\n        const musicFont = Tables.currentMusicFont();\r\n        return musicFont.lookupMetric('glyphs.noteHead.minPadding');\r\n    }\r\n    /**\r\n     * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\r\n     * Estimate how many lines above/below the staff we need.\r\n     */\r\n    static format(symbols, state) {\r\n        var _a;\r\n        if (!symbols || symbols.length === 0)\r\n            return false;\r\n        let width = 0;\r\n        let nonSuperWidth = 0;\r\n        let leftWidth = 0;\r\n        let rightWidth = 0;\r\n        let maxLeftGlyphWidth = 0;\r\n        let maxRightGlyphWidth = 0;\r\n        for (const symbol of symbols) {\r\n            const fontSize = Font.convertSizeToPointValue((_a = symbol.textFont) === null || _a === void 0 ? void 0 : _a.size);\r\n            const fontAdj = Font.scaleSize(fontSize, 0.05);\r\n            const glyphAdj = fontAdj * 2;\r\n            const note = symbol.checkAttachedNote();\r\n            let symbolWidth = 0;\r\n            let lineSpaces = 1;\r\n            let vAlign = false;\r\n            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {\r\n                const block = symbol.symbolBlocks[j];\r\n                const sup = ChordSymbol.isSuperscript(block);\r\n                const sub = ChordSymbol.isSubscript(block);\r\n                const superSubScale = sup || sub ? ChordSymbol.superSubRatio : 1;\r\n                const adj = block.symbolType === SymbolTypes.GLYPH ? glyphAdj * superSubScale : fontAdj * superSubScale;\r\n                // If there are super/subscripts, they extend beyond the line so\r\n                // assume they take up 2 lines\r\n                if (sup || sub) {\r\n                    lineSpaces = 2;\r\n                }\r\n                // If there is a symbol-specific offset, add it but consider font\r\n                // size since font and glyphs will be interspersed.\r\n                const fontSize = symbol.textFormatter.fontSizeInPixels;\r\n                const superSubFontSize = fontSize * superSubScale;\r\n                if (block.symbolType === SymbolTypes.GLYPH && block.glyph !== undefined) {\r\n                    block.width = ChordSymbol.getWidthForGlyph(block.glyph) * superSubFontSize;\r\n                    block.yShift += ChordSymbol.getYShiftForGlyph(block.glyph) * superSubFontSize;\r\n                    block.xShift += ChordSymbol.getXShiftForGlyph(block.glyph) * superSubFontSize;\r\n                    block.glyph.scale = block.glyph.scale * adj;\r\n                }\r\n                else if (block.symbolType === SymbolTypes.TEXT) {\r\n                    block.width = block.width * superSubFontSize;\r\n                    block.yShift += symbol.getYOffsetForText(block.text) * adj;\r\n                }\r\n                if (block.symbolType === SymbolTypes.GLYPH &&\r\n                    block.glyph !== undefined &&\r\n                    block.glyph.code === ChordSymbol.glyphs.over.code) {\r\n                    lineSpaces = 2;\r\n                }\r\n                block.width += ChordSymbol.spacingBetweenBlocks * fontSize * superSubScale;\r\n                // If a subscript immediately  follows a superscript block, try to\r\n                // overlay them.\r\n                if (sup && j > 0) {\r\n                    const prev = symbol.symbolBlocks[j - 1];\r\n                    if (!ChordSymbol.isSuperscript(prev)) {\r\n                        nonSuperWidth = width;\r\n                    }\r\n                }\r\n                if (sub && nonSuperWidth > 0) {\r\n                    vAlign = true;\r\n                    // slide the symbol over so it lines up with superscript\r\n                    block.xShift = block.xShift + (nonSuperWidth - width);\r\n                    width = nonSuperWidth;\r\n                    nonSuperWidth = 0;\r\n                    // If we have vertically lined up, turn kerning off.\r\n                    symbol.setEnableKerning(false);\r\n                }\r\n                if (!sup && !sub) {\r\n                    nonSuperWidth = 0;\r\n                }\r\n                block.vAlign = vAlign;\r\n                width += block.width;\r\n                symbolWidth = width;\r\n            }\r\n            // make kerning adjustments after computing super/subscripts\r\n            symbol.updateKerningAdjustments();\r\n            symbol.updateOverBarAdjustments();\r\n            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {\r\n                symbol.setTextLine(state.top_text_line);\r\n                state.top_text_line += lineSpaces;\r\n            }\r\n            else {\r\n                symbol.setTextLine(state.text_line + 1);\r\n                state.text_line += lineSpaces + 1;\r\n            }\r\n            if (symbol.getReportWidth() && isStemmableNote(note)) {\r\n                const glyphWidth = note.getGlyph().getWidth();\r\n                if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {\r\n                    maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\r\n                    leftWidth = Math.max(leftWidth, symbolWidth) + ChordSymbol.minPadding;\r\n                }\r\n                else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {\r\n                    maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\r\n                    rightWidth = Math.max(rightWidth, symbolWidth);\r\n                }\r\n                else {\r\n                    leftWidth = Math.max(leftWidth, symbolWidth / 2) + ChordSymbol.minPadding;\r\n                    rightWidth = Math.max(rightWidth, symbolWidth / 2);\r\n                    maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\r\n                    maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\r\n                }\r\n            }\r\n            width = 0; // reset symbol width\r\n        }\r\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.right_shift, 0));\r\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.left_shift, 0));\r\n        state.left_shift += leftOverlap;\r\n        state.right_shift += rightOverlap;\r\n        return true;\r\n    }\r\n    /**\r\n     * Default text font.\r\n     * Choose a font family that works well with the current music engraving font.\r\n     * @override `Element.TEXT_FONT`.\r\n     */\r\n    static get TEXT_FONT() {\r\n        let family = 'Roboto Slab, Times, serif';\r\n        if (Tables.currentMusicFont().getName() === 'Petaluma') {\r\n            // Fixes Issue #1180\r\n            family = 'PetalumaScript, Arial, sans-serif';\r\n        }\r\n        return {\r\n            family,\r\n            size: 12,\r\n            weight: FontWeight.NORMAL,\r\n            style: FontStyle.NORMAL,\r\n        };\r\n    }\r\n    /**\r\n     * The offset is specified in `em`. Scale this value by the font size in pixels.\r\n     */\r\n    get superscriptOffset() {\r\n        return ChordSymbol.superscriptOffset * this.textFormatter.fontSizeInPixels;\r\n    }\r\n    get subscriptOffset() {\r\n        return ChordSymbol.subscriptOffset * this.textFormatter.fontSizeInPixels;\r\n    }\r\n    setReportWidth(value) {\r\n        this.reportWidth = value;\r\n        return this;\r\n    }\r\n    getReportWidth() {\r\n        return this.reportWidth;\r\n    }\r\n    updateOverBarAdjustments() {\r\n        const barIndex = this.symbolBlocks.findIndex(({ symbolType, glyph }) => symbolType === SymbolTypes.GLYPH && glyph !== undefined && glyph.code === 'csymDiagonalArrangementSlash');\r\n        if (barIndex < 0) {\r\n            return;\r\n        }\r\n        const bar = this.symbolBlocks[barIndex];\r\n        const xoff = bar.width / 4;\r\n        const yoff = 0.25 * this.textFormatter.fontSizeInPixels;\r\n        let symIndex = 0;\r\n        for (symIndex === 0; symIndex < barIndex; ++symIndex) {\r\n            const symbol = this.symbolBlocks[symIndex];\r\n            symbol.xShift = symbol.xShift + xoff;\r\n            symbol.yShift = symbol.yShift - yoff;\r\n        }\r\n        for (symIndex = barIndex + 1; symIndex < this.symbolBlocks.length; ++symIndex) {\r\n            const symbol = this.symbolBlocks[symIndex];\r\n            symbol.xShift = symbol.xShift - xoff;\r\n            symbol.yShift = symbol.yShift + yoff;\r\n        }\r\n    }\r\n    updateKerningAdjustments() {\r\n        let accum = 0;\r\n        for (let j = 0; j < this.symbolBlocks.length; ++j) {\r\n            const symbol = this.symbolBlocks[j];\r\n            accum += this.getKerningAdjustment(j);\r\n            symbol.xShift += accum;\r\n        }\r\n    }\r\n    /** Do some basic kerning so that letter chords like 'A' don't have the extensions hanging off to the right. */\r\n    getKerningAdjustment(j) {\r\n        if (!this.useKerning) {\r\n            return 0;\r\n        }\r\n        const currSymbol = this.symbolBlocks[j];\r\n        const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : undefined;\r\n        let adjustment = 0;\r\n        // Move things into the '/' over bar\r\n        if (currSymbol.symbolType === SymbolTypes.GLYPH &&\r\n            currSymbol.glyph !== undefined &&\r\n            currSymbol.glyph.code === ChordSymbol.glyphs.over.code) {\r\n            adjustment += currSymbol.glyph.metrics.x_shift;\r\n        }\r\n        if (prevSymbol !== undefined &&\r\n            prevSymbol.symbolType === SymbolTypes.GLYPH &&\r\n            prevSymbol.glyph !== undefined &&\r\n            prevSymbol.glyph.code === ChordSymbol.glyphs.over.code) {\r\n            adjustment += prevSymbol.glyph.metrics.x_shift;\r\n        }\r\n        // For superscripts that follow a letter without much top part, move it to the left slightly\r\n        let preKernUpper = false;\r\n        let preKernLower = false;\r\n        if (prevSymbol !== undefined && prevSymbol.symbolType === SymbolTypes.TEXT) {\r\n            preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\r\n            preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\r\n        }\r\n        const kerningOffsetPixels = ChordSymbol.kerningOffset * this.textFormatter.fontSizeInPixels;\r\n        // TODO: adjust kern for font size.\r\n        // Where should this constant live?\r\n        if (preKernUpper && currSymbol.symbolModifier === SymbolModifiers.SUPERSCRIPT) {\r\n            adjustment += kerningOffsetPixels;\r\n        }\r\n        if (preKernLower && currSymbol.symbolType === SymbolTypes.TEXT) {\r\n            if (currSymbol.text[0] >= 'a' && currSymbol.text[0] <= 'z') {\r\n                adjustment += kerningOffsetPixels / 2;\r\n            }\r\n            if (ChordSymbol.upperKerningText.some((xx) => xx === (prevSymbol === null || prevSymbol === void 0 ? void 0 : prevSymbol.text[prevSymbol.text.length - 1]))) {\r\n                adjustment += kerningOffsetPixels / 2;\r\n            }\r\n        }\r\n        return adjustment;\r\n    }\r\n    /**\r\n     * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\r\n     * Each block can have its own vertical orientation.\r\n     */\r\n    // eslint-disable-next-line\r\n    getSymbolBlock(params = {}) {\r\n        var _a, _b, _c;\r\n        const symbolType = (_a = params.symbolType) !== null && _a !== void 0 ? _a : SymbolTypes.TEXT;\r\n        const symbolBlock = {\r\n            text: (_b = params.text) !== null && _b !== void 0 ? _b : '',\r\n            symbolType,\r\n            symbolModifier: (_c = params.symbolModifier) !== null && _c !== void 0 ? _c : SymbolModifiers.NONE,\r\n            xShift: 0,\r\n            yShift: 0,\r\n            vAlign: false,\r\n            width: 0,\r\n        };\r\n        // Note: symbol widths are resolution and font-independent.\r\n        // We convert to pixel values when we know what the font is.\r\n        if (symbolType === SymbolTypes.GLYPH && typeof params.glyph === 'string') {\r\n            const glyphArgs = ChordSymbol.glyphs[params.glyph];\r\n            const glyphPoints = 20;\r\n            symbolBlock.glyph = new Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });\r\n            // Beware: glyph.metrics is not the same as glyph.getMetrics() !\r\n            // rv.glyph.point = rv.glyph.point * rv.glyph.metrics.scale;\r\n            // rv.width = rv.glyph.getMetrics().width;\r\n            // don't set yShift here, b/c we need to do it at formatting time after the font is set.\r\n        }\r\n        else if (symbolType === SymbolTypes.TEXT) {\r\n            symbolBlock.width = this.textFormatter.getWidthForTextInEm(symbolBlock.text);\r\n        }\r\n        else if (symbolType === SymbolTypes.LINE) {\r\n            symbolBlock.width = params.width;\r\n        }\r\n        return symbolBlock;\r\n    }\r\n    /** Add a symbol to this chord, could be text, glyph or line. */\r\n    // eslint-disable-next-line\r\n    addSymbolBlock(parameters) {\r\n        this.symbolBlocks.push(this.getSymbolBlock(parameters));\r\n        return this;\r\n    }\r\n    // ### Convenience functions for creating different types of chord symbol parts.\r\n    /** Add a text block. */\r\n    // eslint-disable-next-line\r\n    addText(text, parameters = {}) {\r\n        const symbolType = SymbolTypes.TEXT;\r\n        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text, symbolType }));\r\n    }\r\n    /** Add a text block with superscript modifier. */\r\n    addTextSuperscript(text) {\r\n        const symbolType = SymbolTypes.TEXT;\r\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\r\n        return this.addSymbolBlock({ text, symbolType, symbolModifier });\r\n    }\r\n    /** Add a text block with subscript modifier. */\r\n    addTextSubscript(text) {\r\n        const symbolType = SymbolTypes.TEXT;\r\n        const symbolModifier = SymbolModifiers.SUBSCRIPT;\r\n        return this.addSymbolBlock({ text, symbolType, symbolModifier });\r\n    }\r\n    /** Add a glyph block with superscript modifier. */\r\n    addGlyphSuperscript(glyph) {\r\n        const symbolType = SymbolTypes.GLYPH;\r\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\r\n        return this.addSymbolBlock({ glyph, symbolType, symbolModifier });\r\n    }\r\n    /** Add a glyph block. */\r\n    // eslint-disable-next-line\r\n    addGlyph(glyph, params = {}) {\r\n        const symbolType = SymbolTypes.GLYPH;\r\n        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { glyph, symbolType }));\r\n    }\r\n    /**\r\n     * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\r\n     * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\r\n     */\r\n    // eslint-disable-next-line\r\n    addGlyphOrText(text, params = {}) {\r\n        let str = '';\r\n        for (let i = 0; i < text.length; ++i) {\r\n            const char = text[i];\r\n            if (ChordSymbol.glyphs[char]) {\r\n                if (str.length > 0) {\r\n                    this.addText(str, params);\r\n                    str = '';\r\n                }\r\n                this.addGlyph(char, params);\r\n            }\r\n            else {\r\n                // Collect consecutive characters with no glyphs.\r\n                str += char;\r\n            }\r\n        }\r\n        if (str.length > 0) {\r\n            this.addText(str, params);\r\n        }\r\n        return this;\r\n    }\r\n    /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\r\n    // eslint-disable-next-line\r\n    addLine(width, params = {}) {\r\n        const symbolType = SymbolTypes.LINE;\r\n        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { symbolType, width }));\r\n    }\r\n    /**\r\n     * Set the chord symbol's font family, size, weight, style (e.g., `Arial`, `10pt`, `bold`, `italic`).\r\n     *\r\n     * @param f is 1) a `FontInfo` object or\r\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\r\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\r\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\r\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\r\n     * @param style is a string (e.g., 'italic', 'normal').\r\n     *\r\n     * @override See: Element.\r\n     */\r\n    setFont(f, size, weight, style) {\r\n        super.setFont(f, size, weight, style);\r\n        this.textFormatter = TextFormatter.create(this.textFont);\r\n        return this;\r\n    }\r\n    setEnableKerning(val) {\r\n        this.useKerning = val;\r\n        return this;\r\n    }\r\n    /** Set vertical position of text (above or below stave). */\r\n    setVertical(vj) {\r\n        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;\r\n        return this;\r\n    }\r\n    getVertical() {\r\n        return this.vertical;\r\n    }\r\n    /** Set horizontal justification. */\r\n    setHorizontal(hj) {\r\n        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;\r\n        return this;\r\n    }\r\n    getHorizontal() {\r\n        return this.horizontal;\r\n    }\r\n    getWidth() {\r\n        let width = 0;\r\n        this.symbolBlocks.forEach((symbol) => {\r\n            width += symbol.vAlign ? 0 : symbol.width;\r\n        });\r\n        return width;\r\n    }\r\n    getYOffsetForText(text) {\r\n        var _a;\r\n        let acc = 0;\r\n        let i = 0;\r\n        for (i = 0; i < text.length; ++i) {\r\n            const metrics = this.textFormatter.getGlyphMetrics(text[i]);\r\n            if (metrics) {\r\n                const yMax = (_a = metrics.y_max) !== null && _a !== void 0 ? _a : 0;\r\n                acc = yMax < acc ? yMax : acc;\r\n            }\r\n        }\r\n        const resolution = this.textFormatter.getResolution();\r\n        return i > 0 ? -1 * (acc / resolution) : 0;\r\n    }\r\n    /** Render text and glyphs above/below the note. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        // We're changing context parameters. Save current state.\r\n        ctx.save();\r\n        const classString = Object.keys(this.getAttribute('classes')).join(' ');\r\n        ctx.openGroup(classString, this.getAttribute('id'));\r\n        const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\r\n        ctx.setFont(this.textFont);\r\n        let y;\r\n        // The position of the text varies based on whether or not the note\r\n        // has a stem.\r\n        const hasStem = note.hasStem();\r\n        const stave = note.checkStave();\r\n        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {\r\n            // HACK: We need to compensate for the text's height since its origin is bottom-right.\r\n            y = stave.getYForBottomText(this.text_line + Tables.TEXT_HEIGHT_OFFSET_HACK);\r\n            if (hasStem) {\r\n                const stem_ext = note.checkStem().getExtents();\r\n                const spacing = stave.getSpacingBetweenLines();\r\n                const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\r\n                y = Math.max(y, stem_base + spacing * (this.text_line + 2));\r\n            }\r\n        }\r\n        else {\r\n            // (this.vertical === VerticalJustify.TOP)\r\n            y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\r\n            if (hasStem) {\r\n                const stem_ext = note.checkStem().getExtents();\r\n                const spacing = stave.getSpacingBetweenLines();\r\n                y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\r\n            }\r\n        }\r\n        let x = start.x;\r\n        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {\r\n            x = start.x;\r\n        }\r\n        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {\r\n            x = start.x + this.getWidth();\r\n        }\r\n        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {\r\n            x = start.x - this.getWidth() / 2;\r\n        }\r\n        else {\r\n            // HorizontalJustify.CENTER_STEM\r\n            x = note.getStemX() - this.getWidth() / 2;\r\n        }\r\n        L('Rendering ChordSymbol: ', this.textFormatter, x, y);\r\n        this.symbolBlocks.forEach((symbol) => {\r\n            const isSuper = ChordSymbol.isSuperscript(symbol);\r\n            const isSub = ChordSymbol.isSubscript(symbol);\r\n            let curY = y;\r\n            L('shift was ', symbol.xShift, symbol.yShift);\r\n            L('curY pre sub ', curY);\r\n            if (isSuper) {\r\n                curY += this.superscriptOffset;\r\n            }\r\n            if (isSub) {\r\n                curY += this.subscriptOffset;\r\n            }\r\n            L('curY sup/sub ', curY);\r\n            if (symbol.symbolType === SymbolTypes.TEXT) {\r\n                if (isSuper || isSub) {\r\n                    ctx.save();\r\n                    if (this.textFont) {\r\n                        const { family, size, weight, style } = this.textFont;\r\n                        const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);\r\n                        ctx.setFont(family, smallerFontSize, weight, style);\r\n                    }\r\n                }\r\n                // TODO???\r\n                // We estimate the text width, fill it in with the empirical value so the formatting is even.\r\n                // const textDim = ctx.measureText(symbol.text);\r\n                // symbol.width = textDim.width;\r\n                L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);\r\n                ctx.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);\r\n                if (isSuper || isSub) {\r\n                    ctx.restore();\r\n                }\r\n            }\r\n            else if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph) {\r\n                curY += symbol.yShift;\r\n                L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);\r\n                symbol.glyph.render(ctx, x + symbol.xShift, curY);\r\n            }\r\n            else if (symbol.symbolType === SymbolTypes.LINE) {\r\n                L('Rendering Line : ', symbol.width, x, curY);\r\n                ctx.beginPath();\r\n                ctx.setLineWidth(1); // ?\r\n                ctx.moveTo(x, y);\r\n                ctx.lineTo(x + symbol.width, curY);\r\n                ctx.stroke();\r\n            }\r\n            x += symbol.width;\r\n            if (symbol.vAlign) {\r\n                x += symbol.xShift;\r\n            }\r\n        });\r\n        ctx.closeGroup();\r\n        ctx.restore();\r\n    }\r\n}\r\nChordSymbol.DEBUG = false;\r\n// Chord symbols can be positioned and justified relative to the note.\r\nChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;\r\nChordSymbol.HorizontalJustifyString = {\r\n    left: ChordSymbolHorizontalJustify.LEFT,\r\n    right: ChordSymbolHorizontalJustify.RIGHT,\r\n    center: ChordSymbolHorizontalJustify.CENTER,\r\n    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,\r\n};\r\nChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;\r\nChordSymbol.VerticalJustifyString = {\r\n    top: ChordSymbolVerticalJustify.TOP,\r\n    above: ChordSymbolVerticalJustify.TOP,\r\n    below: ChordSymbolVerticalJustify.BOTTOM,\r\n    bottom: ChordSymbolVerticalJustify.BOTTOM,\r\n};\r\n// Glyph data\r\nChordSymbol.glyphs = {\r\n    diminished: {\r\n        code: 'csymDiminished',\r\n    },\r\n    dim: {\r\n        code: 'csymDiminished',\r\n    },\r\n    halfDiminished: {\r\n        code: 'csymHalfDiminished',\r\n    },\r\n    '+': {\r\n        code: 'csymAugmented',\r\n    },\r\n    augmented: {\r\n        code: 'csymAugmented',\r\n    },\r\n    majorSeventh: {\r\n        code: 'csymMajorSeventh',\r\n    },\r\n    minor: {\r\n        code: 'csymMinor',\r\n    },\r\n    '-': {\r\n        code: 'csymMinor',\r\n    },\r\n    '(': {\r\n        code: 'csymParensLeftTall',\r\n    },\r\n    leftParen: {\r\n        code: 'csymParensLeftTall',\r\n    },\r\n    ')': {\r\n        code: 'csymParensRightTall',\r\n    },\r\n    rightParen: {\r\n        code: 'csymParensRightTall',\r\n    },\r\n    leftBracket: {\r\n        code: 'csymBracketLeftTall',\r\n    },\r\n    rightBracket: {\r\n        code: 'csymBracketRightTall',\r\n    },\r\n    leftParenTall: {\r\n        code: 'csymParensLeftVeryTall',\r\n    },\r\n    rightParenTall: {\r\n        code: 'csymParensRightVeryTall',\r\n    },\r\n    '/': {\r\n        code: 'csymDiagonalArrangementSlash',\r\n    },\r\n    over: {\r\n        code: 'csymDiagonalArrangementSlash',\r\n    },\r\n    '#': {\r\n        code: 'accidentalSharp',\r\n    },\r\n    b: {\r\n        code: 'accidentalFlat',\r\n    },\r\n};\r\nChordSymbol.symbolTypes = SymbolTypes;\r\nChordSymbol.symbolModifiers = SymbolModifiers;\r\n/** Currently unused. */\r\nChordSymbol.noFormat = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\r\n// Co-author: Benjamin W. Bohl\r\n// MIT License\r\nimport { Glyph } from './glyph';\r\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { defined, log } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Clef.DEBUG)\r\n        log('Vex.Flow.Clef', args);\r\n}\r\n/**\r\n * Clef implements various types of clefs that can be rendered on a stave.\r\n *\r\n * See `tests/clef_tests.ts` for usage examples.\r\n */\r\nexport class Clef extends StaveModifier {\r\n    /** Create a new clef. */\r\n    constructor(type, size, annotation) {\r\n        super();\r\n        /**\r\n         * The attribute `clef` must be a key from\r\n         * `Clef.types`\r\n         */\r\n        this.clef = Clef.types['treble'];\r\n        this.setPosition(StaveModifierPosition.BEGIN);\r\n        this.setType(type, size, annotation);\r\n        this.setWidth(Tables.currentMusicFont().lookupMetric(`clef.${this.size}.width`));\r\n        L('Creating clef:', type);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Clef;\r\n    }\r\n    /**\r\n     * Every clef name is associated with a glyph code from the font file\r\n     * and a default stave line number.\r\n     */\r\n    static get types() {\r\n        return {\r\n            treble: {\r\n                code: 'gClef',\r\n                line: 3,\r\n                point: 0,\r\n            },\r\n            bass: {\r\n                code: 'fClef',\r\n                line: 1,\r\n                point: 0,\r\n            },\r\n            alto: {\r\n                code: 'cClef',\r\n                line: 2,\r\n                point: 0,\r\n            },\r\n            tenor: {\r\n                code: 'cClef',\r\n                line: 1,\r\n                point: 0,\r\n            },\r\n            percussion: {\r\n                code: 'restMaxima',\r\n                line: 2,\r\n                point: 0,\r\n            },\r\n            soprano: {\r\n                code: 'cClef',\r\n                line: 4,\r\n                point: 0,\r\n            },\r\n            'mezzo-soprano': {\r\n                code: 'cClef',\r\n                line: 3,\r\n                point: 0,\r\n            },\r\n            'baritone-c': {\r\n                code: 'cClef',\r\n                line: 0,\r\n                point: 0,\r\n            },\r\n            'baritone-f': {\r\n                code: 'fClef',\r\n                line: 2,\r\n                point: 0,\r\n            },\r\n            subbass: {\r\n                code: 'fClef',\r\n                line: 0,\r\n                point: 0,\r\n            },\r\n            french: {\r\n                code: 'gClef',\r\n                line: 4,\r\n                point: 0,\r\n            },\r\n            tab: {\r\n                code: '6stringTabClef',\r\n                point: 0,\r\n            },\r\n        };\r\n    }\r\n    /** Set clef type, size and annotation. */\r\n    setType(type, size, annotation) {\r\n        this.type = type;\r\n        this.clef = Clef.types[type];\r\n        if (size === undefined) {\r\n            this.size = 'default';\r\n        }\r\n        else {\r\n            this.size = size;\r\n        }\r\n        const musicFont = Tables.currentMusicFont();\r\n        this.clef.point = musicFont.lookupMetric(`clef.${this.size}.point`, 0);\r\n        this.glyph = new Glyph(this.clef.code, this.clef.point, {\r\n            category: `clef.${this.clef.code}.${this.size}`,\r\n        });\r\n        // If an annotation, such as 8va, is specified, add it to the Clef object.\r\n        if (annotation !== undefined) {\r\n            const code = musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\r\n            const point = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\r\n            const line = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\r\n            const x_shift = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\r\n            this.annotation = { code, point, line, x_shift };\r\n            this.attachment = new Glyph(this.annotation.code, this.annotation.point);\r\n            this.attachment.metrics.x_max = 0;\r\n            this.attachment.setXShift(this.annotation.x_shift);\r\n        }\r\n        else {\r\n            this.annotation = undefined;\r\n        }\r\n        return this;\r\n    }\r\n    /** Get clef width. */\r\n    getWidth() {\r\n        if (this.type === 'tab') {\r\n            defined(this.stave, 'ClefError', \"Can't get width without stave.\");\r\n        }\r\n        return this.width;\r\n    }\r\n    /** Set associated stave. */\r\n    setStave(stave) {\r\n        this.stave = stave;\r\n        if (this.type === 'tab') {\r\n            const glyph = defined(this.glyph, 'ClefError', \"Can't set stave without glyph.\");\r\n            const numLines = this.stave.getNumLines();\r\n            const musicFont = Tables.currentMusicFont();\r\n            const point = musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\r\n            const shiftY = musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\r\n            glyph.setPoint(point);\r\n            glyph.setYShift(shiftY);\r\n        }\r\n        return this;\r\n    }\r\n    /** Render clef. */\r\n    draw() {\r\n        const glyph = defined(this.glyph, 'ClefError', \"Can't draw clef without glyph.\");\r\n        const stave = this.checkStave();\r\n        const ctx = stave.checkContext();\r\n        this.setRendered();\r\n        ctx.openGroup('clef', this.getAttribute('id'));\r\n        glyph.setStave(stave);\r\n        glyph.setContext(ctx);\r\n        if (this.clef.line !== undefined) {\r\n            this.placeGlyphOnLine(glyph, stave, this.clef.line);\r\n        }\r\n        glyph.renderToStave(this.x);\r\n        if (this.annotation !== undefined && this.attachment !== undefined) {\r\n            this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\r\n            this.attachment.setStave(stave);\r\n            this.attachment.setContext(ctx);\r\n            this.attachment.renderToStave(this.x);\r\n        }\r\n        ctx.closeGroup();\r\n    }\r\n}\r\n/** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\r\nClef.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author Taehoon Moon 2014\r\n// MIT License\r\nimport { Clef } from './clef';\r\nimport { Glyph } from './glyph';\r\nimport { Note } from './note';\r\nimport { Category } from './typeguard';\r\n/** ClefNote implements clef annotations in measures. */\r\nexport class ClefNote extends Note {\r\n    constructor(type, size, annotation) {\r\n        super({ duration: 'b' });\r\n        this.type = type;\r\n        this.clef_obj = new Clef(type, size, annotation);\r\n        this.clef = this.clef_obj.clef;\r\n        this.glyph = new Glyph(this.clef.code, this.clef.point);\r\n        this.setWidth(this.glyph.getMetrics().width);\r\n        // Note properties\r\n        this.ignore_ticks = true;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.ClefNote;\r\n    }\r\n    /** Set clef type, size and annotation. */\r\n    setType(type, size, annotation) {\r\n        this.type = type;\r\n        this.clef_obj = new Clef(type, size, annotation);\r\n        this.clef = this.clef_obj.clef;\r\n        this.glyph = new Glyph(this.clef.code, this.clef.point);\r\n        this.setWidth(this.glyph.getMetrics().width);\r\n        return this;\r\n    }\r\n    /** Get associated clef. */\r\n    getClef() {\r\n        return this.clef;\r\n    }\r\n    /** Set associated context. */\r\n    setContext(context) {\r\n        super.setContext(context);\r\n        this.glyph.setContext(this.getContext());\r\n        return this;\r\n    }\r\n    /** Get bounding box. */\r\n    getBoundingBox() {\r\n        return super.getBoundingBox();\r\n    }\r\n    /* Overridden to ignore */\r\n    // eslint-disable-next-line\r\n    addToModifierContext(mc) {\r\n        // DO NOTHING.\r\n        return this;\r\n    }\r\n    preFormat() {\r\n        this.preFormatted = true;\r\n        return this;\r\n    }\r\n    /** Render clef note. */\r\n    draw() {\r\n        var _a;\r\n        const stave = this.checkStave();\r\n        if (!this.glyph.getContext()) {\r\n            this.glyph.setContext(this.getContext());\r\n        }\r\n        this.setRendered();\r\n        const abs_x = this.getAbsoluteX();\r\n        this.glyph.setStave(stave);\r\n        this.glyph.setYShift(stave.getYForLine((_a = this.clef.line) !== null && _a !== void 0 ? _a : 0) - stave.getYForGlyphs());\r\n        this.glyph.renderToStave(abs_x);\r\n        // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\r\n        if (this.clef_obj.annotation !== undefined) {\r\n            const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\r\n            if (!attachment.getContext()) {\r\n                attachment.setContext(this.getContext());\r\n            }\r\n            attachment.setStave(stave);\r\n            attachment.setYShift(stave.getYForLine(this.clef_obj.annotation.line) - stave.getYForGlyphs());\r\n            attachment.setXShift(this.clef_obj.annotation.x_shift);\r\n            attachment.renderToStave(abs_x);\r\n        }\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// This file implements the `Crescendo` object which draws crescendos and\r\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\r\n// duration and formatted as part of a `Voice` like any other `Note`\r\n// type in VexFlow. This object would most likely be formatted in a Voice\r\n// with `TextNotes` - which are used to represent other dynamics markings.\r\nimport { Note } from './note';\r\nimport { TickContext } from './tickcontext';\r\nimport { Category } from './typeguard';\r\nimport { log } from './util';\r\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Crescendo.DEBUG)\r\n        log('Vex.Flow.Crescendo', args);\r\n}\r\n// Private helper to draw the hairpin\r\nfunction renderHairpin(ctx, params) {\r\n    const begin_x = params.begin_x;\r\n    const end_x = params.end_x;\r\n    const y = params.y;\r\n    const half_height = params.height / 2;\r\n    ctx.beginPath();\r\n    if (params.reverse) {\r\n        ctx.moveTo(begin_x, y - half_height);\r\n        ctx.lineTo(end_x, y);\r\n        ctx.lineTo(begin_x, y + half_height);\r\n    }\r\n    else {\r\n        ctx.moveTo(end_x, y - half_height);\r\n        ctx.lineTo(begin_x, y);\r\n        ctx.lineTo(end_x, y + half_height);\r\n    }\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n}\r\nexport class Crescendo extends Note {\r\n    // Initialize the crescendo's properties\r\n    constructor(noteStruct) {\r\n        super(noteStruct);\r\n        this.options = {\r\n            // Extensions to the length of the crescendo on either side\r\n            extend_left: 0,\r\n            extend_right: 0,\r\n            // Vertical shift\r\n            y_shift: 0,\r\n        };\r\n        // Whether the object is a decrescendo\r\n        this.decrescendo = false;\r\n        // The staff line to be placed on\r\n        this.line = noteStruct.line || 0;\r\n        // The height at the open end of the cresc/decresc\r\n        this.height = 15;\r\n    }\r\n    /** Crescendo category string. */\r\n    static get CATEGORY() {\r\n        return Category.Crescendo;\r\n    }\r\n    // Set the line to center the element on\r\n    setLine(line) {\r\n        this.line = line;\r\n        return this;\r\n    }\r\n    // Set the full height at the open end\r\n    setHeight(height) {\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    // Set whether the sign should be a descresendo by passing a bool\r\n    // to `decresc`\r\n    setDecrescendo(decresc) {\r\n        this.decrescendo = decresc;\r\n        return this;\r\n    }\r\n    // Preformat the note\r\n    preFormat() {\r\n        this.preFormatted = true;\r\n        return this;\r\n    }\r\n    // Render the Crescendo object onto the canvas\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const stave = this.checkStave();\r\n        this.setRendered();\r\n        const tick_context = this.getTickContext();\r\n        const next_context = TickContext.getNextContext(tick_context);\r\n        const begin_x = this.getAbsoluteX();\r\n        const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();\r\n        const y = stave.getYForLine(this.line + -3) + 1;\r\n        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\r\n        renderHairpin(ctx, {\r\n            begin_x: begin_x - this.options.extend_left,\r\n            end_x: end_x + this.options.extend_right,\r\n            y: y + this.options.y_shift,\r\n            height: this.height,\r\n            reverse: this.decrescendo,\r\n        });\r\n    }\r\n}\r\nCrescendo.DEBUG = false;\r\n","// VexFlow - Music Engraving for HTML5\r\n// Copyright Mohit Muthanna 2010\r\n//\r\n// This class implements curves (for slurs)\r\nimport { Element } from './element';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport var CurvePosition;\r\n(function (CurvePosition) {\r\n    CurvePosition[CurvePosition[\"NEAR_HEAD\"] = 1] = \"NEAR_HEAD\";\r\n    CurvePosition[CurvePosition[\"NEAR_TOP\"] = 2] = \"NEAR_TOP\";\r\n})(CurvePosition || (CurvePosition = {}));\r\nexport class Curve extends Element {\r\n    // from: Start note\r\n    // to: End note\r\n    // options:\r\n    //    cps: List of control points\r\n    //    x_shift: pixels to shift\r\n    //    y_shift: pixels to shift\r\n    constructor(from, to, options) {\r\n        super();\r\n        this.render_options = Object.assign({ thickness: 2, x_shift: 0, y_shift: 10, position: CurvePosition.NEAR_HEAD, position_end: CurvePosition.NEAR_HEAD, invert: false, cps: [\r\n                { x: 0, y: 10 },\r\n                { x: 0, y: 10 },\r\n            ] }, options);\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Curve;\r\n    }\r\n    static get Position() {\r\n        return CurvePosition;\r\n    }\r\n    static get PositionString() {\r\n        return {\r\n            nearHead: CurvePosition.NEAR_HEAD,\r\n            nearTop: CurvePosition.NEAR_TOP,\r\n        };\r\n    }\r\n    setNotes(from, to) {\r\n        if (!from && !to) {\r\n            throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\r\n        }\r\n        this.from = from;\r\n        this.to = to;\r\n        return this;\r\n    }\r\n    /**\r\n     * @return {boolean} Returns true if this is a partial bar.\r\n     */\r\n    isPartial() {\r\n        return !this.from || !this.to;\r\n    }\r\n    renderCurve(params) {\r\n        const ctx = this.checkContext();\r\n        const x_shift = this.render_options.x_shift;\r\n        const y_shift = this.render_options.y_shift * params.direction;\r\n        const first_x = params.first_x + x_shift;\r\n        const first_y = params.first_y + y_shift;\r\n        const last_x = params.last_x - x_shift;\r\n        const last_y = params.last_y + y_shift;\r\n        const thickness = this.render_options.thickness;\r\n        const cps = this.render_options.cps;\r\n        const { x: cp0x, y: cp0y } = cps[0];\r\n        const { x: cp1x, y: cp1y } = cps[1];\r\n        const cp_spacing = (last_x - first_x) / (cps.length + 2);\r\n        ctx.beginPath();\r\n        ctx.moveTo(first_x, first_y);\r\n        ctx.bezierCurveTo(first_x + cp_spacing + cp0x, first_y + cp0y * params.direction, last_x - cp_spacing + cp1x, last_y + cp1y * params.direction, last_x, last_y);\r\n        ctx.bezierCurveTo(last_x - cp_spacing + cp1x, last_y + (cp1y + thickness) * params.direction, first_x + cp_spacing + cp0x, first_y + (cp0y + thickness) * params.direction, first_x, first_y);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n    draw() {\r\n        this.checkContext();\r\n        this.setRendered();\r\n        const first_note = this.from;\r\n        const last_note = this.to;\r\n        let first_x;\r\n        let last_x;\r\n        let first_y;\r\n        let last_y;\r\n        let stem_direction = 0;\r\n        let metric = 'baseY';\r\n        let end_metric = 'baseY';\r\n        function getPosition(position) {\r\n            return typeof position === 'string' ? Curve.PositionString[position] : position;\r\n        }\r\n        const position = getPosition(this.render_options.position);\r\n        const position_end = getPosition(this.render_options.position_end);\r\n        if (position === CurvePosition.NEAR_TOP) {\r\n            metric = 'topY';\r\n            end_metric = 'topY';\r\n        }\r\n        if (position_end === CurvePosition.NEAR_HEAD) {\r\n            end_metric = 'baseY';\r\n        }\r\n        else if (position_end === CurvePosition.NEAR_TOP) {\r\n            end_metric = 'topY';\r\n        }\r\n        if (first_note) {\r\n            first_x = first_note.getTieRightX();\r\n            stem_direction = first_note.getStemDirection();\r\n            first_y = first_note.getStemExtents()[metric];\r\n        }\r\n        else {\r\n            const stave = last_note.checkStave();\r\n            first_x = stave.getTieStartX();\r\n            first_y = last_note.getStemExtents()[metric];\r\n        }\r\n        if (last_note) {\r\n            last_x = last_note.getTieLeftX();\r\n            stem_direction = last_note.getStemDirection();\r\n            last_y = last_note.getStemExtents()[end_metric];\r\n        }\r\n        else {\r\n            const stave = first_note.checkStave();\r\n            last_x = stave.getTieEndX();\r\n            last_y = first_note.getStemExtents()[end_metric];\r\n        }\r\n        this.renderCurve({\r\n            first_x,\r\n            last_x,\r\n            first_y,\r\n            last_y,\r\n            direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\r\n        });\r\n        return true;\r\n    }\r\n}\r\n","// VexFlow - Music Engraving for HTML5\r\n// Copyright Mohit Muthanna 2010\r\n//\r\n// This class implements dot modifiers for notes.\r\nimport { Modifier } from './modifier';\r\nimport { Category, isGraceNote, isStaveNote, isTabNote } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class Dot extends Modifier {\r\n    constructor() {\r\n        super();\r\n        this.position = Modifier.Position.RIGHT;\r\n        this.radius = 2;\r\n        this.setWidth(5);\r\n        this.dot_shiftY = 0;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Dot;\r\n    }\r\n    /** Returns the dots associated to a Note. */\r\n    static getDots(note) {\r\n        return note.getModifiersByType(Dot.CATEGORY);\r\n    }\r\n    /** Add a dot on the specified keys to the notes. */\r\n    static buildAndAttach(notes, options) {\r\n        for (const note of notes) {\r\n            if (options === null || options === void 0 ? void 0 : options.all) {\r\n                for (let i = 0; i < note.keys.length; i++) {\r\n                    const dot = new Dot();\r\n                    dot.setDotShiftY(note.glyph.dot_shiftY);\r\n                    note.addModifier(dot, i);\r\n                }\r\n            }\r\n            else if ((options === null || options === void 0 ? void 0 : options.index) != undefined) {\r\n                const dot = new Dot();\r\n                dot.setDotShiftY(note.glyph.dot_shiftY);\r\n                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);\r\n            }\r\n            else {\r\n                const dot = new Dot();\r\n                dot.setDotShiftY(note.glyph.dot_shiftY);\r\n                note.addModifier(dot, 0);\r\n            }\r\n        }\r\n    }\r\n    // Arrange dots inside a ModifierContext.\r\n    static format(dots, state) {\r\n        const right_shift = state.right_shift;\r\n        const dot_spacing = 1;\r\n        if (!dots || dots.length === 0)\r\n            return false;\r\n        const dot_list = [];\r\n        const max_shift_map = {};\r\n        for (let i = 0; i < dots.length; ++i) {\r\n            const dot = dots[i];\r\n            const note = dot.getNote();\r\n            let props;\r\n            let shift;\r\n            if (isStaveNote(note)) {\r\n                const index = dot.checkIndex();\r\n                props = note.getKeyProps()[index];\r\n                // consider right displaced head with no previous modifier\r\n                shift = note.getFirstDotPx();\r\n            }\r\n            else if (isTabNote(note)) {\r\n                props = { line: 0.5 }; // Shim key props for dot placement\r\n                shift = right_shift;\r\n            }\r\n            else {\r\n                // note object is not StaveNote or TabNote.\r\n                throw new RuntimeError('Internal', 'Unexpected instance.');\r\n            }\r\n            const note_id = note.getAttribute('id');\r\n            dot_list.push({ line: props.line, note, note_id, dot });\r\n            max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\r\n        }\r\n        // Sort dots by line number.\r\n        dot_list.sort((a, b) => b.line - a.line);\r\n        let dot_shift = right_shift;\r\n        let x_width = 0;\r\n        let last_line = null;\r\n        let last_note = null;\r\n        let prev_dotted_space = null;\r\n        let half_shiftY = 0;\r\n        for (let i = 0; i < dot_list.length; ++i) {\r\n            const { dot, note, note_id, line } = dot_list[i];\r\n            // Reset the position of the dot every line.\r\n            if (line !== last_line || note !== last_note) {\r\n                dot_shift = max_shift_map[note_id];\r\n            }\r\n            if (!note.isRest() && line !== last_line) {\r\n                if (Math.abs(line % 1) === 0.5) {\r\n                    // note is on a space, so no dot shift\r\n                    half_shiftY = 0;\r\n                }\r\n                else {\r\n                    // note is on a line, so shift dot to space above the line\r\n                    half_shiftY = 0.5;\r\n                    if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {\r\n                        // previous note on a space, so shift dot to space below the line\r\n                        half_shiftY = -0.5;\r\n                    }\r\n                    else if (line + half_shiftY === prev_dotted_space) {\r\n                        // previous space is dotted, so shift dot to space below the line\r\n                        half_shiftY = -0.5;\r\n                    }\r\n                }\r\n            }\r\n            // convert half_shiftY to a multiplier for dots.draw()\r\n            if (note.isRest()) {\r\n                dot.dot_shiftY += -half_shiftY;\r\n            }\r\n            else {\r\n                dot.dot_shiftY = -half_shiftY;\r\n            }\r\n            prev_dotted_space = line + half_shiftY;\r\n            dot.setXShift(dot_shift);\r\n            dot_shift += dot.getWidth() + dot_spacing; // spacing\r\n            x_width = dot_shift > x_width ? dot_shift : x_width;\r\n            last_line = line;\r\n            last_note = note;\r\n        }\r\n        // Update state.\r\n        state.right_shift += x_width;\r\n        return true;\r\n    }\r\n    setNote(note) {\r\n        this.note = note;\r\n        if (isGraceNote(note)) {\r\n            this.radius *= 0.5;\r\n            this.setWidth(3);\r\n        }\r\n        return this;\r\n    }\r\n    setDotShiftY(y) {\r\n        this.dot_shiftY = y;\r\n        return this;\r\n    }\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const stave = note.checkStave();\r\n        const lineSpace = stave.getSpacingBetweenLines();\r\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\r\n        // Set the starting y coordinate to the base of the stem for TabNotes.\r\n        if (isTabNote(note)) {\r\n            start.y = note.getStemExtents().baseY;\r\n        }\r\n        const x = start.x + this.x_shift + this.width - this.radius;\r\n        const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\r\n        ctx.fill();\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Articulation } from './articulation';\r\nimport { Dot } from './dot';\r\nimport { FretHandFinger } from './frethandfinger';\r\nimport { Music } from './music';\r\nimport { Parser } from './parser';\r\nimport { Stem } from './stem';\r\nimport { defined, log, RuntimeError } from './util';\r\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (EasyScore.DEBUG)\r\n        log('Vex.Flow.EasyScore', args);\r\n}\r\nexport class EasyScoreGrammar {\r\n    constructor(builder) {\r\n        this.builder = builder;\r\n    }\r\n    begin() {\r\n        return this.LINE;\r\n    }\r\n    LINE() {\r\n        return {\r\n            expect: [this.PIECE, this.PIECES, this.EOL],\r\n        };\r\n    }\r\n    PIECE() {\r\n        return {\r\n            expect: [this.CHORDORNOTE, this.PARAMS],\r\n            run: () => this.builder.commitPiece(),\r\n        };\r\n    }\r\n    PIECES() {\r\n        return {\r\n            expect: [this.COMMA, this.PIECE],\r\n            zeroOrMore: true,\r\n        };\r\n    }\r\n    PARAMS() {\r\n        return {\r\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\r\n        };\r\n    }\r\n    CHORDORNOTE() {\r\n        return {\r\n            expect: [this.CHORD, this.SINGLENOTE],\r\n            or: true,\r\n        };\r\n    }\r\n    CHORD() {\r\n        return {\r\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\r\n            // eslint-disable-next-line\r\n            run: (state) => this.builder.addChord(state.matches[1]),\r\n        };\r\n    }\r\n    NOTES() {\r\n        return {\r\n            expect: [this.NOTE],\r\n            oneOrMore: true,\r\n        };\r\n    }\r\n    NOTE() {\r\n        return {\r\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\r\n        };\r\n    }\r\n    SINGLENOTE() {\r\n        return {\r\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\r\n            run: (state) => {\r\n                // eslint-disable-next-line\r\n                const s = state;\r\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\r\n            },\r\n        };\r\n    }\r\n    ACCIDENTAL() {\r\n        return {\r\n            expect: [this.MICROTONES, this.ACCIDENTALS],\r\n            maybe: true,\r\n            or: true,\r\n        };\r\n    }\r\n    DOTS() {\r\n        return {\r\n            expect: [this.DOT],\r\n            zeroOrMore: true,\r\n            // eslint-disable-next-line\r\n            run: (state) => this.builder.setNoteDots(state.matches),\r\n        };\r\n    }\r\n    TYPE() {\r\n        return {\r\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\r\n            maybe: true,\r\n            // eslint-disable-next-line\r\n            run: (state) => this.builder.setNoteType(state.matches[2]),\r\n        };\r\n    }\r\n    DURATION() {\r\n        return {\r\n            expect: [this.SLASH, this.DURATIONS],\r\n            maybe: true,\r\n            // eslint-disable-next-line\r\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\r\n        };\r\n    }\r\n    OPTS() {\r\n        return {\r\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\r\n            maybe: true,\r\n        };\r\n    }\r\n    KEYVALS() {\r\n        return {\r\n            expect: [this.COMMA, this.KEYVAL],\r\n            zeroOrMore: true,\r\n        };\r\n    }\r\n    KEYVAL() {\r\n        const unquote = (str) => str.slice(1, -1);\r\n        return {\r\n            expect: [this.KEY, this.EQUALS, this.VAL],\r\n            // eslint-disable-next-line\r\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\r\n        };\r\n    }\r\n    VAL() {\r\n        return {\r\n            expect: [this.SVAL, this.DVAL],\r\n            or: true,\r\n        };\r\n    }\r\n    KEY() {\r\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\r\n    }\r\n    DVAL() {\r\n        return { token: '[\"][^\"]*[\"]' };\r\n    }\r\n    SVAL() {\r\n        return { token: \"['][^']*[']\" };\r\n    }\r\n    NOTENAME() {\r\n        return { token: '[a-gA-G]' };\r\n    }\r\n    OCTAVE() {\r\n        return { token: '[0-9]+' };\r\n    }\r\n    ACCIDENTALS() {\r\n        return { token: 'bb|b|##|#|n' };\r\n    }\r\n    MICROTONES() {\r\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\r\n    }\r\n    DURATIONS() {\r\n        return { token: '[0-9whq]+' };\r\n    }\r\n    TYPES() {\r\n        return { token: '[rRsSmMhHgG]' };\r\n    }\r\n    LPAREN() {\r\n        return { token: '[(]' };\r\n    }\r\n    RPAREN() {\r\n        return { token: '[)]' };\r\n    }\r\n    COMMA() {\r\n        return { token: '[,]' };\r\n    }\r\n    DOT() {\r\n        return { token: '[.]' };\r\n    }\r\n    SLASH() {\r\n        return { token: '[/]' };\r\n    }\r\n    MAYBESLASH() {\r\n        return { token: '[/]?' };\r\n    }\r\n    EQUALS() {\r\n        return { token: '[=]' };\r\n    }\r\n    LBRACKET() {\r\n        return { token: '\\\\[' };\r\n    }\r\n    RBRACKET() {\r\n        return { token: '\\\\]' };\r\n    }\r\n    EOL() {\r\n        return { token: '$' };\r\n    }\r\n}\r\nexport class Piece {\r\n    constructor(duration) {\r\n        this.chord = [];\r\n        this.dots = 0;\r\n        this.options = {};\r\n        this.duration = duration;\r\n    }\r\n}\r\nexport class Builder {\r\n    constructor(factory) {\r\n        this.commitHooks = [];\r\n        this.factory = factory;\r\n        this.reset();\r\n    }\r\n    reset(options) {\r\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\r\n        this.elements = { notes: [], accidentals: [] };\r\n        this.rollingDuration = '8';\r\n        this.resetPiece();\r\n    }\r\n    getFactory() {\r\n        return this.factory;\r\n    }\r\n    getElements() {\r\n        return this.elements;\r\n    }\r\n    addCommitHook(commitHook) {\r\n        this.commitHooks.push(commitHook);\r\n    }\r\n    resetPiece() {\r\n        L('resetPiece');\r\n        this.piece = new Piece(this.rollingDuration);\r\n    }\r\n    setNoteDots(dots) {\r\n        L('setNoteDots:', dots);\r\n        if (dots)\r\n            this.piece.dots = dots.length;\r\n    }\r\n    setNoteDuration(duration) {\r\n        L('setNoteDuration:', duration);\r\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\r\n    }\r\n    setNoteType(type) {\r\n        L('setNoteType:', type);\r\n        if (type)\r\n            this.piece.type = type;\r\n    }\r\n    addNoteOption(key, value) {\r\n        L('addNoteOption: key:', key, 'value:', value);\r\n        this.piece.options[key] = value;\r\n    }\r\n    addNote(key, accid, octave) {\r\n        L('addNote:', key, accid, octave);\r\n        this.piece.chord.push({\r\n            key: key,\r\n            accid,\r\n            octave,\r\n        });\r\n    }\r\n    addSingleNote(key, accid, octave) {\r\n        L('addSingleNote:', key, accid, octave);\r\n        this.addNote(key, accid, octave);\r\n    }\r\n    // notes is an array with 3 entries\r\n    addChord(notes) {\r\n        L('startChord');\r\n        if (typeof notes[0] !== 'object') {\r\n            this.addSingleNote(notes[0]);\r\n        }\r\n        else {\r\n            notes.forEach((n) => {\r\n                if (n)\r\n                    this.addNote(...n); // n => [string, string | null, string]\r\n            });\r\n        }\r\n        L('endChord');\r\n    }\r\n    commitPiece() {\r\n        L('commitPiece');\r\n        const { factory } = this;\r\n        if (!factory)\r\n            return;\r\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\r\n        // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\r\n        // e.g., auto | up | down\r\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\r\n        // e.g., treble | bass\r\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\r\n        const { chord, duration, dots, type } = this.piece;\r\n        // Create a string[] that will be assigned to the .keys property of the StaveNote.\r\n        // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\r\n        // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\r\n        const standardAccidentals = Music.accidentals;\r\n        const keys = chord.map((notePiece) => {\r\n            var _a;\r\n            return notePiece.key +\r\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\r\n                '/' +\r\n                notePiece.octave;\r\n        });\r\n        const auto_stem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\r\n        // Build a GhostNote or StaveNote using the information we gathered.\r\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) == 'g'\r\n            ? factory.GhostNote({ duration, dots })\r\n            : factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });\r\n        if (!auto_stem)\r\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\r\n        // Attach accidentals.\r\n        const accidentals = [];\r\n        chord.forEach((notePiece, index) => {\r\n            const accid = notePiece.accid;\r\n            if (typeof accid === 'string') {\r\n                const accidental = factory.Accidental({ type: accid });\r\n                note.addModifier(accidental, index);\r\n                accidentals.push(accidental);\r\n            }\r\n            else {\r\n                accidentals.push(undefined);\r\n            }\r\n        });\r\n        // Attach dots.\r\n        for (let i = 0; i < dots; i++)\r\n            Dot.buildAndAttach([note], { all: true });\r\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\r\n        this.elements.notes.push(note);\r\n        this.elements.accidentals.push(accidentals);\r\n        this.resetPiece();\r\n    }\r\n}\r\n/**\r\n * Commit hook used by EasyScore.setOptions().\r\n */\r\nfunction setId(options, note) {\r\n    if (options.id === undefined)\r\n        return;\r\n    note.setAttribute('id', options.id);\r\n}\r\n// Used by setClass() below.\r\nconst commaSeparatedRegex = /\\s*,\\s*/;\r\n/**\r\n * Commit hook used by EasyScore.setOptions().\r\n */\r\nfunction setClass(options, note) {\r\n    if (options.class === undefined)\r\n        return;\r\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\r\n}\r\n/**\r\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\r\n */\r\nexport class EasyScore {\r\n    constructor(options = {}) {\r\n        this.defaults = {\r\n            clef: 'treble',\r\n            time: '4/4',\r\n            stem: 'auto',\r\n        };\r\n        this.setOptions(options);\r\n    }\r\n    /**\r\n     * Set the score defaults.\r\n     * clef must be set appropriately to avoid errors when adding Staves.\r\n     * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\r\n     * @param defaults.time default time signature ( 4/4 | 9/8 ...)\r\n     * @param defaults.stem default stem arrangement (auto | up | down)\r\n     * @returns this\r\n     */\r\n    set(defaults) {\r\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\r\n        return this;\r\n    }\r\n    /**\r\n     * @param options.factory is required.\r\n     * @returns this\r\n     */\r\n    setOptions(options) {\r\n        var _a, _b;\r\n        // eslint-disable-next-line\r\n        const factory = options.factory; // ! operator, because options.factory was set in Factory.EasyScore().\r\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\r\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\r\n            builder });\r\n        this.factory = factory;\r\n        this.builder = builder;\r\n        this.grammar = new EasyScoreGrammar(this.builder);\r\n        this.parser = new Parser(this.grammar);\r\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\r\n        return this;\r\n    }\r\n    setContext(context) {\r\n        this.factory.setContext(context);\r\n        return this;\r\n    }\r\n    parse(line, options = {}) {\r\n        this.builder.reset(options);\r\n        const result = this.parser.parse(line);\r\n        if (!result.success && this.options.throwOnError) {\r\n            L(result);\r\n            throw new RuntimeError('Error parsing line: ' + line);\r\n        }\r\n        return result;\r\n    }\r\n    beam(notes, options) {\r\n        this.factory.Beam({ notes, options });\r\n        return notes;\r\n    }\r\n    tuplet(notes, options) {\r\n        this.factory.Tuplet({ notes, options });\r\n        return notes;\r\n    }\r\n    notes(line, options = {}) {\r\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\r\n        this.parse(line, options);\r\n        return this.builder.getElements().notes;\r\n    }\r\n    voice(notes, options = {}) {\r\n        options = Object.assign({ time: this.defaults.time }, options);\r\n        return this.factory.Voice(options).addTickables(notes);\r\n    }\r\n    addCommitHook(commitHook) {\r\n        this.builder.addCommitHook(commitHook);\r\n    }\r\n}\r\nEasyScore.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// @author Mohit Cheppudira\r\n// MIT License\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Registry } from './registry';\r\nimport { Category } from './typeguard';\r\nimport { defined } from './util';\r\n/**\r\n * Element implements a generic base class for VexFlow, with implementations\r\n * of general functions and properties that can be inherited by all VexFlow elements.\r\n */\r\nexport class Element {\r\n    constructor() {\r\n        var _a;\r\n        this.children = [];\r\n        this.attrs = {\r\n            id: Element.newID(),\r\n            el: undefined,\r\n            type: this.getCategory(),\r\n            classes: {},\r\n        };\r\n        this.rendered = false;\r\n        // If a default registry exist, then register with it right away.\r\n        (_a = Registry.getDefaultRegistry()) === null || _a === void 0 ? void 0 : _a.register(this);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Element;\r\n    }\r\n    static newID() {\r\n        return `auto${Element.ID++}`;\r\n    }\r\n    addChildElement(child) {\r\n        this.children.push(child);\r\n        return this;\r\n    }\r\n    getCategory() {\r\n        return this.constructor.CATEGORY;\r\n    }\r\n    /**\r\n     * Set the element style used to render.\r\n     *\r\n     * Example:\r\n     * ```typescript\r\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\r\n     * element.draw();\r\n     * ```\r\n     * Note: If the element draws additional sub-elements (ie.: Modifiers in a Stave),\r\n     * the style can be applied to all of them by means of the context:\r\n     * ```typescript\r\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\r\n     * element.getContext().setFillStyle('red');\r\n     * element.getContext().setStrokeStyle('red');\r\n     * element.draw();\r\n     * ```\r\n     * or using drawWithStyle:\r\n     * ```typescript\r\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\r\n     * element.drawWithStyle();\r\n     * ```\r\n     */\r\n    setStyle(style) {\r\n        this.style = style;\r\n        return this;\r\n    }\r\n    /** Set the element & associated children style used for rendering. */\r\n    setGroupStyle(style) {\r\n        this.style = style;\r\n        this.children.forEach((child) => child.setGroupStyle(style));\r\n        return this;\r\n    }\r\n    /** Get the element style used for rendering. */\r\n    getStyle() {\r\n        return this.style;\r\n    }\r\n    /** Apply the element style to `context`. */\r\n    applyStyle(context = this.context, style = this.getStyle()) {\r\n        if (!style)\r\n            return this;\r\n        if (!context)\r\n            return this;\r\n        context.save();\r\n        if (style.shadowColor)\r\n            context.setShadowColor(style.shadowColor);\r\n        if (style.shadowBlur)\r\n            context.setShadowBlur(style.shadowBlur);\r\n        if (style.fillStyle)\r\n            context.setFillStyle(style.fillStyle);\r\n        if (style.strokeStyle)\r\n            context.setStrokeStyle(style.strokeStyle);\r\n        if (style.lineWidth)\r\n            context.setLineWidth(style.lineWidth);\r\n        return this;\r\n    }\r\n    /** Restore the style of `context`. */\r\n    restoreStyle(context = this.context, style = this.getStyle()) {\r\n        if (!style)\r\n            return this;\r\n        if (!context)\r\n            return this;\r\n        context.restore();\r\n        return this;\r\n    }\r\n    /**\r\n     * Draw the element and all its sub-elements (ie.: Modifiers in a Stave)\r\n     * with the element style.\r\n     */\r\n    drawWithStyle() {\r\n        this.checkContext();\r\n        this.applyStyle();\r\n        this.draw();\r\n        this.restoreStyle();\r\n    }\r\n    /** Check if it has a class label (An element can have multiple class labels).  */\r\n    hasClass(className) {\r\n        return this.attrs.classes[className] === true;\r\n    }\r\n    /** Add a class label (An element can have multiple class labels).  */\r\n    addClass(className) {\r\n        var _a;\r\n        this.attrs.classes[className] = true;\r\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({\r\n            id: this.attrs.id,\r\n            name: 'class',\r\n            value: className,\r\n            oldValue: undefined,\r\n        });\r\n        return this;\r\n    }\r\n    /** Remove a class label (An element can have multiple class labels).  */\r\n    removeClass(className) {\r\n        var _a;\r\n        delete this.attrs.classes[className];\r\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({\r\n            id: this.attrs.id,\r\n            name: 'class',\r\n            value: undefined,\r\n            oldValue: className,\r\n        });\r\n        return this;\r\n    }\r\n    /** Call back from registry after the element is registered. */\r\n    onRegister(registry) {\r\n        this.registry = registry;\r\n        return this;\r\n    }\r\n    /** Return the rendered status. */\r\n    isRendered() {\r\n        return this.rendered;\r\n    }\r\n    /** Set the rendered status. */\r\n    setRendered(rendered = true) {\r\n        this.rendered = rendered;\r\n        return this;\r\n    }\r\n    /** Return the element attributes. */\r\n    getAttributes() {\r\n        return this.attrs;\r\n    }\r\n    /** Return an attribute. */\r\n    // eslint-disable-next-line\r\n    getAttribute(name) {\r\n        return this.attrs[name];\r\n    }\r\n    /** Set an attribute. */\r\n    // eslint-disable-next-line\r\n    setAttribute(name, value) {\r\n        var _a;\r\n        const oldID = this.attrs.id;\r\n        const oldValue = this.attrs[name];\r\n        this.attrs[name] = value;\r\n        // Register with old id to support id changes.\r\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({ id: oldID, name, value, oldValue });\r\n        return this;\r\n    }\r\n    /** Get the boundingBox. */\r\n    getBoundingBox() {\r\n        return this.boundingBox;\r\n    }\r\n    /** Return the context. */\r\n    getContext() {\r\n        return this.context;\r\n    }\r\n    /** Set the context. */\r\n    setContext(context) {\r\n        this.context = context;\r\n        return this;\r\n    }\r\n    /** Validate and return the context. */\r\n    checkContext() {\r\n        return defined(this.context, 'NoContext', 'No rendering context attached to instance.');\r\n    }\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Font Handling\r\n    /**\r\n     * Provide a CSS compatible font string (e.g., 'bold 16px Arial').\r\n     */\r\n    set font(f) {\r\n        this.setFont(f);\r\n    }\r\n    /** Returns the CSS compatible font string. */\r\n    get font() {\r\n        return Font.toCSSString(this.textFont);\r\n    }\r\n    /**\r\n     * Set the element's font family, size, weight, style (e.g., `Arial`, `10pt`, `bold`, `italic`).\r\n     * @param font is 1) a `FontInfo` object or\r\n     *                2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\r\n     *                3) a string representing the font family (at least one of `size`, `weight`, or `style` must also be provided).\r\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\r\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\r\n     * @param style is a string (e.g., 'italic', 'normal').\r\n     * If no arguments are provided, then the font is set to the default font.\r\n     * Each Element subclass may specify its own default by overriding the static `TEXT_FONT` property.\r\n     */\r\n    setFont(font, size, weight, style) {\r\n        // Allow subclasses to override `TEXT_FONT`.\r\n        const defaultTextFont = this.constructor.TEXT_FONT;\r\n        const fontIsObject = typeof font === 'object';\r\n        const fontIsString = typeof font === 'string';\r\n        const fontIsUndefined = font === undefined;\r\n        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;\r\n        if (fontIsObject) {\r\n            // `font` is case 1) a FontInfo object\r\n            this.textFont = Object.assign(Object.assign({}, defaultTextFont), font);\r\n        }\r\n        else if (fontIsString && sizeWeightStyleAreUndefined) {\r\n            // `font` is case 2) CSS font shorthand.\r\n            this.textFont = Font.fromCSSString(font);\r\n        }\r\n        else if (fontIsUndefined && sizeWeightStyleAreUndefined) {\r\n            // All arguments are undefined. Do not check for `arguments.length === 0`,\r\n            // which fails on the edge case: `setFont(undefined)`.\r\n            // TODO: See if we can remove this case entirely without introducing a visual diff.\r\n            // The else case below seems like it should be equivalent to this case.\r\n            this.textFont = Object.assign({}, defaultTextFont);\r\n        }\r\n        else {\r\n            // `font` is case 3) a font family string (e.g., 'Times New Roman').\r\n            // The other parameters represent the size, weight, and style.\r\n            // It is okay for `font` to be undefined while one or more of the other arguments is provided.\r\n            // Following CSS conventions, unspecified params are reset to the default.\r\n            this.textFont = Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style);\r\n        }\r\n        return this;\r\n    }\r\n    getFont() {\r\n        if (!this.textFont) {\r\n            this.resetFont();\r\n        }\r\n        return Font.toCSSString(this.textFont);\r\n    }\r\n    /**\r\n     * Reset the text font to the style indicated by the static `TEXT_FONT` property.\r\n     * Subclasses can call this to initialize `textFont` for the first time.\r\n     */\r\n    resetFont() {\r\n        this.setFont();\r\n    }\r\n    /** Return a copy of the current FontInfo object. */\r\n    get fontInfo() {\r\n        if (!this.textFont) {\r\n            this.resetFont();\r\n        }\r\n        // We can cast to Required<FontInfo> here, because\r\n        // we just called resetFont() above to ensure this.textFont is set.\r\n        return Object.assign({}, this.textFont);\r\n    }\r\n    set fontInfo(fontInfo) {\r\n        this.setFont(fontInfo);\r\n    }\r\n    /** Change the font size, while keeping everything else the same. */\r\n    setFontSize(size) {\r\n        const fontInfo = this.fontInfo;\r\n        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\r\n     * See Element.fontSizeInPixels or Element.fontSizeInPoints if you need to get a number for calculation purposes.\r\n     */\r\n    getFontSize() {\r\n        return this.fontSize;\r\n    }\r\n    /**\r\n     * The size is 1) a string of the form '10pt' or '16px', compatible with the CSS font-size property.\r\n     *          or 2) a number, which is interpreted as a point size (i.e. 12 == '12pt').\r\n     */\r\n    set fontSize(size) {\r\n        this.setFontSize(size);\r\n    }\r\n    /**\r\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\r\n     */\r\n    get fontSize() {\r\n        let size = this.fontInfo.size;\r\n        if (typeof size === 'number') {\r\n            size = `${size}pt`;\r\n        }\r\n        return size;\r\n    }\r\n    /**\r\n     * @returns the font size in `pt`.\r\n     */\r\n    get fontSizeInPoints() {\r\n        return Font.convertSizeToPointValue(this.fontSize);\r\n    }\r\n    /**\r\n     * @returns the font size in `px`.\r\n     */\r\n    get fontSizeInPixels() {\r\n        return Font.convertSizeToPixelValue(this.fontSize);\r\n    }\r\n    /**\r\n     * @returns a CSS font-style string (e.g., 'italic').\r\n     */\r\n    get fontStyle() {\r\n        return this.fontInfo.style;\r\n    }\r\n    set fontStyle(style) {\r\n        const fontInfo = this.fontInfo;\r\n        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);\r\n    }\r\n    /**\r\n     * @returns a CSS font-weight string (e.g., 'bold').\r\n     * As in CSS, font-weight is always returned as a string, even if it was set as a number.\r\n     */\r\n    get fontWeight() {\r\n        return this.fontInfo.weight + '';\r\n    }\r\n    set fontWeight(weight) {\r\n        const fontInfo = this.fontInfo;\r\n        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);\r\n    }\r\n}\r\nElement.ID = 1000;\r\n/**\r\n * Default font for text. This is not related to music engraving. Instead, see `Flow.setMusicFont(...fontNames)`\r\n * to customize the font for musical symbols placed on the score.\r\n */\r\nElement.TEXT_FONT = {\r\n    family: Font.SANS_SERIF,\r\n    size: Font.SIZE,\r\n    weight: FontWeight.NORMAL,\r\n    style: FontStyle.NORMAL,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// @author Mohit Cheppudira\r\n// MIT License\r\nimport { Accidental } from './accidental';\r\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\r\nimport { Articulation } from './articulation';\r\nimport { BarNote } from './barnote';\r\nimport { Beam } from './beam';\r\nimport { ChordSymbol } from './chordsymbol';\r\nimport { ClefNote } from './clefnote';\r\nimport { Curve } from './curve';\r\nimport { EasyScore } from './easyscore';\r\nimport { Element } from './element';\r\nimport { Formatter } from './formatter';\r\nimport { FretHandFinger } from './frethandfinger';\r\nimport { GhostNote } from './ghostnote';\r\nimport { GlyphNote } from './glyphnote';\r\nimport { GraceNote } from './gracenote';\r\nimport { GraceNoteGroup } from './gracenotegroup';\r\nimport { KeySigNote } from './keysignote';\r\nimport { ModifierContext } from './modifiercontext';\r\nimport { MultiMeasureRest } from './multimeasurerest';\r\nimport { NoteSubGroup } from './notesubgroup';\r\nimport { Ornament } from './ornament';\r\nimport { PedalMarking } from './pedalmarking';\r\nimport { Renderer } from './renderer';\r\nimport { RepeatNote } from './repeatnote';\r\nimport { Stave } from './stave';\r\nimport { StaveConnector } from './staveconnector';\r\nimport { StaveLine } from './staveline';\r\nimport { StaveNote } from './stavenote';\r\nimport { StaveTie } from './stavetie';\r\nimport { StringNumber } from './stringnumber';\r\nimport { System } from './system';\r\nimport { TabNote } from './tabnote';\r\nimport { TabStave } from './tabstave';\r\nimport { TextBracket } from './textbracket';\r\nimport { TextDynamics } from './textdynamics';\r\nimport { TextNote } from './textnote';\r\nimport { TickContext } from './tickcontext';\r\nimport { TimeSigNote } from './timesignote';\r\nimport { Tuplet } from './tuplet';\r\nimport { defined, log, RuntimeError } from './util';\r\nimport { VibratoBracket } from './vibratobracket';\r\nimport { Voice } from './voice';\r\nimport { isHTMLCanvas } from './web';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Factory.DEBUG)\r\n        log('Vex.Flow.Factory', args);\r\n}\r\n/**\r\n * Factory implements a high level API around VexFlow.\r\n */\r\nexport class Factory {\r\n    /**\r\n     * Example:\r\n     *\r\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\r\n     *\r\n     * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\r\n     */\r\n    constructor(options = {}) {\r\n        L('New factory: ', options);\r\n        this.options = {\r\n            stave: {\r\n                space: 10,\r\n            },\r\n            renderer: {\r\n                elementId: '',\r\n                width: 500,\r\n                height: 200,\r\n                background: '#FFF',\r\n            },\r\n            font: Factory.TEXT_FONT,\r\n        };\r\n        this.setOptions(options);\r\n    }\r\n    /**\r\n     * Static simplified function to access constructor without providing FactoryOptions\r\n     *\r\n     * Example:\r\n     *\r\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\r\n     *\r\n     * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\r\n     */\r\n    static newFromElementId(elementId, width = 500, height = 200) {\r\n        return new Factory({ renderer: { elementId, width, height } });\r\n    }\r\n    reset() {\r\n        this.renderQ = [];\r\n        this.systems = [];\r\n        this.staves = [];\r\n        this.voices = [];\r\n        this.stave = undefined; // current stave\r\n    }\r\n    setOptions(options) {\r\n        this.options = Object.assign(Object.assign({}, this.options), options);\r\n        this.initRenderer();\r\n        this.reset();\r\n    }\r\n    initRenderer() {\r\n        const { elementId, width, height, background } = this.options.renderer;\r\n        if (elementId == null) {\r\n            return;\r\n        }\r\n        if (elementId == '') {\r\n            L(this);\r\n            throw new RuntimeError('renderer.elementId not set in FactoryOptions');\r\n        }\r\n        let backend = this.options.renderer.backend;\r\n        if (backend === undefined) {\r\n            const elem = document.getElementById(elementId);\r\n            // We use a custom type check here, because node-canvas mimics canvas,\r\n            // but is not an instance of window.HTMLCanvasElement.\r\n            // In fact, `window` might be undefined here.\r\n            // See: https://www.npmjs.com/package/canvas\r\n            if (isHTMLCanvas(elem)) {\r\n                backend = Renderer.Backends.CANVAS;\r\n            }\r\n            else {\r\n                backend = Renderer.Backends.SVG;\r\n            }\r\n        }\r\n        this.context = Renderer.buildContext(elementId, backend, width, height, background);\r\n    }\r\n    getContext() {\r\n        return this.context;\r\n    }\r\n    setContext(context) {\r\n        this.context = context;\r\n        return this;\r\n    }\r\n    getStave() {\r\n        return this.stave;\r\n    }\r\n    getVoices() {\r\n        return this.voices;\r\n    }\r\n    /** Return pixels from current stave spacing. */\r\n    Stave(params) {\r\n        const staveSpace = this.options.stave.space;\r\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.0 } }, params);\r\n        const stave = new Stave(p.x, p.y, p.width, p.options);\r\n        this.staves.push(stave);\r\n        stave.setContext(this.context);\r\n        this.stave = stave;\r\n        return stave;\r\n    }\r\n    TabStave(params) {\r\n        const staveSpace = this.options.stave.space;\r\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.3 } }, params);\r\n        const stave = new TabStave(p.x, p.y, p.width, p.options);\r\n        this.staves.push(stave);\r\n        stave.setContext(this.context);\r\n        this.stave = stave;\r\n        return stave;\r\n    }\r\n    StaveNote(noteStruct) {\r\n        const note = new StaveNote(noteStruct);\r\n        if (this.stave)\r\n            note.setStave(this.stave);\r\n        note.setContext(this.context);\r\n        this.renderQ.push(note);\r\n        return note;\r\n    }\r\n    GlyphNote(glyph, noteStruct, options) {\r\n        const note = new GlyphNote(glyph, noteStruct, options);\r\n        if (this.stave)\r\n            note.setStave(this.stave);\r\n        note.setContext(this.context);\r\n        this.renderQ.push(note);\r\n        return note;\r\n    }\r\n    RepeatNote(type, noteStruct, options) {\r\n        const note = new RepeatNote(type, noteStruct, options);\r\n        if (this.stave)\r\n            note.setStave(this.stave);\r\n        note.setContext(this.context);\r\n        this.renderQ.push(note);\r\n        return note;\r\n    }\r\n    GhostNote(noteStruct) {\r\n        const ghostNote = new GhostNote(noteStruct);\r\n        if (this.stave)\r\n            ghostNote.setStave(this.stave);\r\n        ghostNote.setContext(this.context);\r\n        this.renderQ.push(ghostNote);\r\n        return ghostNote;\r\n    }\r\n    TextNote(noteStruct) {\r\n        const textNote = new TextNote(noteStruct);\r\n        if (this.stave)\r\n            textNote.setStave(this.stave);\r\n        textNote.setContext(this.context);\r\n        this.renderQ.push(textNote);\r\n        return textNote;\r\n    }\r\n    BarNote(params = {}) {\r\n        const barNote = new BarNote(params.type);\r\n        if (this.stave)\r\n            barNote.setStave(this.stave);\r\n        barNote.setContext(this.context);\r\n        this.renderQ.push(barNote);\r\n        return barNote;\r\n    }\r\n    ClefNote(params) {\r\n        const p = Object.assign({ type: 'treble', options: {\r\n                size: 'default',\r\n                annotation: undefined,\r\n            } }, params);\r\n        const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\r\n        if (this.stave)\r\n            clefNote.setStave(this.stave);\r\n        clefNote.setContext(this.context);\r\n        this.renderQ.push(clefNote);\r\n        return clefNote;\r\n    }\r\n    TimeSigNote(params) {\r\n        const p = Object.assign({ time: '4/4' }, params);\r\n        const timeSigNote = new TimeSigNote(p.time);\r\n        if (this.stave)\r\n            timeSigNote.setStave(this.stave);\r\n        timeSigNote.setContext(this.context);\r\n        this.renderQ.push(timeSigNote);\r\n        return timeSigNote;\r\n    }\r\n    KeySigNote(params) {\r\n        const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\r\n        if (this.stave)\r\n            keySigNote.setStave(this.stave);\r\n        keySigNote.setContext(this.context);\r\n        this.renderQ.push(keySigNote);\r\n        return keySigNote;\r\n    }\r\n    TabNote(noteStruct) {\r\n        const note = new TabNote(noteStruct);\r\n        if (this.stave)\r\n            note.setStave(this.stave);\r\n        note.setContext(this.context);\r\n        this.renderQ.push(note);\r\n        return note;\r\n    }\r\n    GraceNote(noteStruct) {\r\n        const note = new GraceNote(noteStruct);\r\n        if (this.stave)\r\n            note.setStave(this.stave);\r\n        note.setContext(this.context);\r\n        return note;\r\n    }\r\n    GraceNoteGroup(params) {\r\n        const group = new GraceNoteGroup(params.notes, params.slur);\r\n        group.setContext(this.context);\r\n        return group;\r\n    }\r\n    Accidental(params) {\r\n        const accid = new Accidental(params.type);\r\n        accid.setContext(this.context);\r\n        return accid;\r\n    }\r\n    Annotation(params) {\r\n        const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);\r\n        const annotation = new Annotation(p.text);\r\n        annotation.setJustification(p.hJustify);\r\n        annotation.setVerticalJustification(p.vJustify);\r\n        annotation.setFont(p.font);\r\n        annotation.setContext(this.context);\r\n        return annotation;\r\n    }\r\n    ChordSymbol(params) {\r\n        const p = Object.assign({ vJustify: 'top', hJustify: 'center', kerning: true, reportWidth: true }, params);\r\n        const chordSymbol = new ChordSymbol();\r\n        chordSymbol.setHorizontal(p.hJustify);\r\n        chordSymbol.setVertical(p.vJustify);\r\n        chordSymbol.setEnableKerning(p.kerning);\r\n        chordSymbol.setReportWidth(p.reportWidth);\r\n        // There is a default font based on the engraving font.  Only set then\r\n        // font if it is specific, else use the default\r\n        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\r\n            if (typeof p.fontWeight === 'string')\r\n                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\r\n            else\r\n                chordSymbol.setFont(p.fontFamily, p.fontSize, '');\r\n        }\r\n        else if (typeof p.fontSize === 'number') {\r\n            chordSymbol.setFontSize(p.fontSize);\r\n        }\r\n        chordSymbol.setContext(this.context);\r\n        return chordSymbol;\r\n    }\r\n    Articulation(params) {\r\n        const p = Object.assign({ type: 'a.', position: 'above' }, params);\r\n        const articulation = new Articulation(p.type);\r\n        articulation.setPosition(p.position);\r\n        articulation.setContext(this.context);\r\n        return articulation;\r\n    }\r\n    Ornament(type, params) {\r\n        const options = Object.assign({ type, position: 0, accidental: '' }, params);\r\n        const ornament = new Ornament(type);\r\n        ornament.setPosition(options.position);\r\n        if (options.upperAccidental) {\r\n            ornament.setUpperAccidental(options.upperAccidental);\r\n        }\r\n        if (options.lowerAccidental) {\r\n            ornament.setLowerAccidental(options.lowerAccidental);\r\n        }\r\n        if (typeof options.delayed !== 'undefined') {\r\n            ornament.setDelayed(options.delayed);\r\n        }\r\n        ornament.setContext(this.context);\r\n        return ornament;\r\n    }\r\n    TextDynamics(params) {\r\n        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);\r\n        const text = new TextDynamics({\r\n            text: p.text,\r\n            line: p.line,\r\n            duration: p.duration,\r\n            dots: p.dots,\r\n        });\r\n        if (this.stave)\r\n            text.setStave(this.stave);\r\n        text.setContext(this.context);\r\n        this.renderQ.push(text);\r\n        return text;\r\n    }\r\n    Fingering(params) {\r\n        const p = Object.assign({ number: '0', position: 'left' }, params);\r\n        const fingering = new FretHandFinger(p.number);\r\n        fingering.setPosition(p.position);\r\n        fingering.setContext(this.context);\r\n        return fingering;\r\n    }\r\n    StringNumber(params, drawCircle = true) {\r\n        const stringNumber = new StringNumber(params.number);\r\n        stringNumber.setPosition(params.position);\r\n        stringNumber.setContext(this.context);\r\n        stringNumber.setDrawCircle(drawCircle);\r\n        return stringNumber;\r\n    }\r\n    TickContext() {\r\n        return new TickContext();\r\n    }\r\n    ModifierContext() {\r\n        return new ModifierContext();\r\n    }\r\n    MultiMeasureRest(params) {\r\n        const numMeasures = defined(params.number_of_measures, 'NoNumberOfMeasures');\r\n        const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\r\n        multiMeasureRest.setContext(this.context);\r\n        this.renderQ.push(multiMeasureRest);\r\n        return multiMeasureRest;\r\n    }\r\n    Voice(params) {\r\n        const p = Object.assign({ time: '4/4' }, params);\r\n        const voice = new Voice(p.time);\r\n        this.voices.push(voice);\r\n        return voice;\r\n    }\r\n    StaveConnector(params) {\r\n        const connector = new StaveConnector(params.top_stave, params.bottom_stave);\r\n        connector.setType(params.type).setContext(this.context);\r\n        this.renderQ.push(connector);\r\n        return connector;\r\n    }\r\n    Formatter(options) {\r\n        return new Formatter(options);\r\n    }\r\n    Tuplet(params) {\r\n        const p = Object.assign({ notes: [], options: {} }, params);\r\n        const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\r\n        this.renderQ.push(tuplet);\r\n        return tuplet;\r\n    }\r\n    Beam(params) {\r\n        var _a, _b, _c, _d, _e;\r\n        const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);\r\n        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);\r\n        if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {\r\n            Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {\r\n                beam.setPartialBeamSideAt(Number(noteIndex), direction);\r\n            });\r\n        }\r\n        this.renderQ.push(beam);\r\n        return beam;\r\n    }\r\n    Curve(params) {\r\n        const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\r\n        this.renderQ.push(curve);\r\n        return curve;\r\n    }\r\n    StaveTie(params) {\r\n        var _a;\r\n        const tie = new StaveTie({\r\n            first_note: params.from,\r\n            last_note: params.to,\r\n            first_indices: params.first_indices,\r\n            last_indices: params.last_indices,\r\n        }, params.text);\r\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)\r\n            tie.setDirection(params.options.direction);\r\n        tie.setContext(this.context);\r\n        this.renderQ.push(tie);\r\n        return tie;\r\n    }\r\n    StaveLine(params) {\r\n        var _a, _b;\r\n        const line = new StaveLine({\r\n            first_note: params.from,\r\n            last_note: params.to,\r\n            first_indices: params.first_indices,\r\n            last_indices: params.last_indices,\r\n        });\r\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)\r\n            line.setText(params.options.text);\r\n        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)\r\n            line.setFont(params.options.font);\r\n        line.setContext(this.context);\r\n        this.renderQ.push(line);\r\n        return line;\r\n    }\r\n    VibratoBracket(params) {\r\n        const vibratoBracket = new VibratoBracket({\r\n            start: params.from,\r\n            stop: params.to,\r\n        });\r\n        if (params.options.line)\r\n            vibratoBracket.setLine(params.options.line);\r\n        if (params.options.harsh)\r\n            vibratoBracket.setHarsh(params.options.harsh);\r\n        vibratoBracket.setContext(this.context);\r\n        this.renderQ.push(vibratoBracket);\r\n        return vibratoBracket;\r\n    }\r\n    TextBracket(params) {\r\n        const textBracket = new TextBracket({\r\n            start: params.from,\r\n            stop: params.to,\r\n            text: params.text,\r\n            superscript: params.options.superscript,\r\n            position: params.options.position,\r\n        });\r\n        if (params.options.line)\r\n            textBracket.setLine(params.options.line);\r\n        if (params.options.font)\r\n            textBracket.setFont(params.options.font);\r\n        textBracket.setContext(this.context);\r\n        this.renderQ.push(textBracket);\r\n        return textBracket;\r\n    }\r\n    System(params = {}) {\r\n        params.factory = this;\r\n        const system = new System(params).setContext(this.context);\r\n        this.systems.push(system);\r\n        return system;\r\n    }\r\n    /**\r\n     * Creates EasyScore. Normally the first step after constructing a Factory. For example:\r\n     * ```\r\n     * const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\r\n     * const score: EasyScore = vf.EasyScore();\r\n     * ```\r\n     * @param options.factory optional instance of Factory\r\n     * @param options.builder instance of Builder\r\n     * @param options.commitHooks function to call after a note element is created\r\n     * @param options.throwOnError throw error in case of parsing error\r\n     */\r\n    EasyScore(options = {}) {\r\n        options.factory = this;\r\n        return new EasyScore(options);\r\n    }\r\n    PedalMarking(params) {\r\n        const p = Object.assign({ notes: [], options: {\r\n                style: 'mixed',\r\n            } }, params);\r\n        const pedal = new PedalMarking(p.notes);\r\n        pedal.setType(PedalMarking.typeString[p.options.style]);\r\n        pedal.setContext(this.context);\r\n        this.renderQ.push(pedal);\r\n        return pedal;\r\n    }\r\n    NoteSubGroup(params) {\r\n        const p = Object.assign({ notes: [] }, params);\r\n        const group = new NoteSubGroup(p.notes);\r\n        group.setContext(this.context);\r\n        return group;\r\n    }\r\n    /** Render the score. */\r\n    draw() {\r\n        const ctx = this.context;\r\n        this.systems.forEach((s) => s.setContext(ctx).format());\r\n        this.staves.forEach((s) => s.setContext(ctx).draw());\r\n        this.voices.forEach((v) => v.setContext(ctx).draw());\r\n        this.renderQ.forEach((e) => {\r\n            if (!e.isRendered())\r\n                e.setContext(ctx).draw();\r\n        });\r\n        this.systems.forEach((s) => s.setContext(ctx).draw());\r\n        this.reset();\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\r\nFactory.DEBUG = false;\r\n/** Default text font. */\r\nFactory.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { Accidental } from './accidental';\r\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\r\nimport { Articulation } from './articulation';\r\nimport { BarNote } from './barnote';\r\nimport { Beam } from './beam';\r\nimport { Bend } from './bend';\r\nimport { BoundingBox } from './boundingbox';\r\nimport { BoundingBoxComputation } from './boundingboxcomputation';\r\nimport { CanvasContext } from './canvascontext';\r\nimport { ChordSymbol, ChordSymbolHorizontalJustify, ChordSymbolVerticalJustify, SymbolModifiers, SymbolTypes, } from './chordsymbol';\r\nimport { Clef } from './clef';\r\nimport { ClefNote } from './clefnote';\r\nimport { Crescendo } from './crescendo';\r\nimport { Curve, CurvePosition } from './curve';\r\nimport { Dot } from './dot';\r\nimport { EasyScore } from './easyscore';\r\nimport { Element } from './element';\r\nimport { Factory } from './factory';\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Formatter } from './formatter';\r\nimport { Fraction } from './fraction';\r\nimport { FretHandFinger } from './frethandfinger';\r\nimport { GhostNote } from './ghostnote';\r\nimport { Glyph } from './glyph';\r\nimport { GlyphNote } from './glyphnote';\r\nimport { GraceNote } from './gracenote';\r\nimport { GraceNoteGroup } from './gracenotegroup';\r\nimport { GraceTabNote } from './gracetabnote';\r\nimport { KeyManager } from './keymanager';\r\nimport { KeySignature } from './keysignature';\r\nimport { KeySigNote } from './keysignote';\r\nimport { Modifier, ModifierPosition } from './modifier';\r\nimport { ModifierContext } from './modifiercontext';\r\nimport { MultiMeasureRest } from './multimeasurerest';\r\nimport { Music } from './music';\r\nimport { Note } from './note';\r\nimport { NoteHead } from './notehead';\r\nimport { NoteSubGroup } from './notesubgroup';\r\nimport { Ornament } from './ornament';\r\nimport { Parenthesis } from './parenthesis';\r\nimport { Parser } from './parser';\r\nimport { PedalMarking } from './pedalmarking';\r\nimport { Registry } from './registry';\r\nimport { RenderContext } from './rendercontext';\r\nimport { Renderer, RendererBackends, RendererLineEndType } from './renderer';\r\nimport { RepeatNote } from './repeatnote';\r\nimport { Stave } from './stave';\r\nimport { Barline, BarlineType } from './stavebarline';\r\nimport { StaveConnector } from './staveconnector';\r\nimport { StaveHairpin } from './stavehairpin';\r\nimport { StaveLine } from './staveline';\r\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\r\nimport { StaveNote } from './stavenote';\r\nimport { Repetition } from './staverepetition';\r\nimport { StaveTempo } from './stavetempo';\r\nimport { StaveText } from './stavetext';\r\nimport { StaveTie } from './stavetie';\r\nimport { Volta, VoltaType } from './stavevolta';\r\nimport { Stem } from './stem';\r\nimport { StringNumber } from './stringnumber';\r\nimport { Stroke } from './strokes';\r\nimport { SVGContext } from './svgcontext';\r\nimport { System } from './system';\r\nimport { Tables } from './tables';\r\nimport { TabNote } from './tabnote';\r\nimport { TabSlide } from './tabslide';\r\nimport { TabStave } from './tabstave';\r\nimport { TabTie } from './tabtie';\r\nimport { TextBracket, TextBracketPosition } from './textbracket';\r\nimport { TextDynamics } from './textdynamics';\r\nimport { TextFormatter } from './textformatter';\r\nimport { TextJustification, TextNote } from './textnote';\r\nimport { TickContext } from './tickcontext';\r\nimport { TimeSignature } from './timesignature';\r\nimport { TimeSigNote } from './timesignote';\r\nimport { Tremolo } from './tremolo';\r\nimport { Tuning } from './tuning';\r\nimport { Tuplet } from './tuplet';\r\nimport { DATE, ID, VERSION } from './version';\r\nimport { Vibrato } from './vibrato';\r\nimport { VibratoBracket } from './vibratobracket';\r\nimport { Voice, VoiceMode } from './voice';\r\nexport class Flow {\r\n    static get BUILD() {\r\n        return {\r\n            /** version number. */\r\n            VERSION: VERSION,\r\n            /** git commit ID that this library was built from. */\r\n            ID: ID,\r\n            /** The date when this library was compiled. */\r\n            DATE: DATE,\r\n        };\r\n    }\r\n    /**\r\n     * Examples:\r\n     * ```\r\n     * Vex.Flow.setMusicFont('Petaluma');\r\n     * Vex.Flow.setMusicFont('Bravura', 'Gonville');\r\n     * ```\r\n     *\r\n     * **CASE 1**: You are using `vexflow.js`, which includes all music fonts (Bravura, Gonville, Petaluma, Custom).\r\n     * In this case, calling this method is optional, since VexFlow already defaults to a music font stack of:\r\n     * 'Bravura', 'Gonville', 'Custom'.\r\n     *\r\n     * **CASE 2**: You are using `vexflow-bravura.js` or `vexflow-petaluma.js` or `vexflow-gonville.js`,\r\n     * which includes a single music font. Calling this method is unnecessary.\r\n     *\r\n     * **CASE 3**: You are using the light weight `vexflow-core.js` to take advantage of lazy loading for fonts.\r\n     * In this case, the default music font stack is empty.\r\n     * Example:\r\n     * ```\r\n     * await Vex.Flow.fetchMusicFont('Petaluma');\r\n     * Vex.Flow.setMusicFont('Petaluma');\r\n     * ... (do VexFlow stuff) ...\r\n     * ```\r\n     * See `demos/fonts/` for more examples.\r\n     *\r\n     * @returns an array of Font objects corresponding to the provided `fontNames`.\r\n     */\r\n    static setMusicFont(...fontNames) {\r\n        // Convert the array of font names into an array of Font objects.\r\n        const fonts = fontNames.map((fontName) => Font.load(fontName));\r\n        Tables.MUSIC_FONT_STACK = fonts;\r\n        Glyph.MUSIC_FONT_STACK = fonts.slice();\r\n        Glyph.CURRENT_CACHE_KEY = fontNames.join(',');\r\n        return fonts;\r\n    }\r\n    /**\r\n     * Used with vexflow-core which supports dynamic font loading.\r\n     */\r\n    // eslint-disable-next-line\r\n    static fetchMusicFont(fontName, fontModuleOrPath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // The default implementation does nothing.\r\n            // See vexflow-core.ts for the implementation that vexflow-core.js uses.\r\n        });\r\n    }\r\n    static getMusicFont() {\r\n        const fonts = Tables.MUSIC_FONT_STACK;\r\n        return fonts.map((font) => font.getName());\r\n    }\r\n    static get RENDER_PRECISION_PLACES() {\r\n        return Tables.RENDER_PRECISION_PLACES;\r\n    }\r\n    static set RENDER_PRECISION_PLACES(precision) {\r\n        Tables.RENDER_PRECISION_PLACES = precision;\r\n    }\r\n    static get SOFTMAX_FACTOR() {\r\n        return Tables.SOFTMAX_FACTOR;\r\n    }\r\n    static set SOFTMAX_FACTOR(factor) {\r\n        Tables.SOFTMAX_FACTOR = factor;\r\n    }\r\n    static get NOTATION_FONT_SCALE() {\r\n        return Tables.NOTATION_FONT_SCALE;\r\n    }\r\n    static set NOTATION_FONT_SCALE(value) {\r\n        Tables.NOTATION_FONT_SCALE = value;\r\n    }\r\n    static get TABLATURE_FONT_SCALE() {\r\n        return Tables.TABLATURE_FONT_SCALE;\r\n    }\r\n    static set TABLATURE_FONT_SCALE(value) {\r\n        Tables.TABLATURE_FONT_SCALE = value;\r\n    }\r\n    static get RESOLUTION() {\r\n        return Tables.RESOLUTION;\r\n    }\r\n    static set RESOLUTION(value) {\r\n        Tables.RESOLUTION = value;\r\n    }\r\n    static get SLASH_NOTEHEAD_WIDTH() {\r\n        return Tables.SLASH_NOTEHEAD_WIDTH;\r\n    }\r\n    static set SLASH_NOTEHEAD_WIDTH(value) {\r\n        Tables.SLASH_NOTEHEAD_WIDTH = value;\r\n    }\r\n    static get STAVE_LINE_DISTANCE() {\r\n        return Tables.STAVE_LINE_DISTANCE;\r\n    }\r\n    static set STAVE_LINE_DISTANCE(value) {\r\n        Tables.STAVE_LINE_DISTANCE = value;\r\n    }\r\n    static get STAVE_LINE_THICKNESS() {\r\n        return Tables.STAVE_LINE_THICKNESS;\r\n    }\r\n    static set STAVE_LINE_THICKNESS(value) {\r\n        Tables.STAVE_LINE_THICKNESS = value;\r\n    }\r\n    static get STEM_HEIGHT() {\r\n        return Tables.STEM_HEIGHT;\r\n    }\r\n    static set STEM_HEIGHT(value) {\r\n        Tables.STEM_HEIGHT = value;\r\n    }\r\n    static get STEM_WIDTH() {\r\n        return Tables.STEM_WIDTH;\r\n    }\r\n    static set STEM_WIDTH(value) {\r\n        Tables.STEM_WIDTH = value;\r\n    }\r\n    static get TIME4_4() {\r\n        return Tables.TIME4_4;\r\n    }\r\n    static get accidentalMap() {\r\n        return Tables.accidentalMap;\r\n    }\r\n    static get unicode() {\r\n        return Tables.unicode;\r\n    }\r\n    static keySignature(spec) {\r\n        return Tables.keySignature(spec);\r\n    }\r\n    static hasKeySignature(spec) {\r\n        return Tables.hasKeySignature(spec);\r\n    }\r\n    static getKeySignatures() {\r\n        return Tables.getKeySignatures();\r\n    }\r\n    static clefProperties(clef) {\r\n        return Tables.clefProperties(clef);\r\n    }\r\n    // eslint-disable-next-line\r\n    static keyProperties(key, clef, params) {\r\n        return Tables.keyProperties(key, clef, params);\r\n    }\r\n    static durationToTicks(duration) {\r\n        return Tables.durationToTicks(duration);\r\n    }\r\n}\r\nFlow.Accidental = Accidental;\r\nFlow.Annotation = Annotation;\r\nFlow.Articulation = Articulation;\r\nFlow.Barline = Barline;\r\nFlow.BarNote = BarNote;\r\nFlow.Beam = Beam;\r\nFlow.Bend = Bend;\r\nFlow.BoundingBox = BoundingBox;\r\nFlow.BoundingBoxComputation = BoundingBoxComputation;\r\nFlow.CanvasContext = CanvasContext;\r\nFlow.ChordSymbol = ChordSymbol;\r\nFlow.Clef = Clef;\r\nFlow.ClefNote = ClefNote;\r\nFlow.Crescendo = Crescendo;\r\nFlow.Curve = Curve;\r\nFlow.Dot = Dot;\r\nFlow.EasyScore = EasyScore;\r\nFlow.Element = Element;\r\nFlow.Factory = Factory;\r\nFlow.Font = Font;\r\nFlow.Formatter = Formatter;\r\nFlow.Fraction = Fraction;\r\nFlow.FretHandFinger = FretHandFinger;\r\nFlow.GhostNote = GhostNote;\r\nFlow.Glyph = Glyph;\r\nFlow.GlyphNote = GlyphNote;\r\nFlow.GraceNote = GraceNote;\r\nFlow.GraceNoteGroup = GraceNoteGroup;\r\nFlow.GraceTabNote = GraceTabNote;\r\nFlow.KeyManager = KeyManager;\r\nFlow.KeySignature = KeySignature;\r\nFlow.KeySigNote = KeySigNote;\r\nFlow.Modifier = Modifier;\r\nFlow.ModifierContext = ModifierContext;\r\nFlow.MultiMeasureRest = MultiMeasureRest;\r\nFlow.Music = Music;\r\nFlow.Note = Note;\r\nFlow.NoteHead = NoteHead;\r\nFlow.NoteSubGroup = NoteSubGroup;\r\nFlow.Ornament = Ornament;\r\nFlow.Parenthesis = Parenthesis;\r\nFlow.Parser = Parser;\r\nFlow.PedalMarking = PedalMarking;\r\nFlow.Registry = Registry;\r\nFlow.RenderContext = RenderContext;\r\nFlow.Renderer = Renderer;\r\nFlow.RepeatNote = RepeatNote;\r\nFlow.Repetition = Repetition;\r\nFlow.Stave = Stave;\r\nFlow.StaveConnector = StaveConnector;\r\nFlow.StaveHairpin = StaveHairpin;\r\nFlow.StaveLine = StaveLine;\r\nFlow.StaveModifier = StaveModifier;\r\nFlow.StaveNote = StaveNote;\r\nFlow.StaveTempo = StaveTempo;\r\nFlow.StaveText = StaveText;\r\nFlow.StaveTie = StaveTie;\r\nFlow.Stem = Stem;\r\nFlow.StringNumber = StringNumber;\r\nFlow.Stroke = Stroke;\r\nFlow.SVGContext = SVGContext;\r\nFlow.System = System;\r\nFlow.TabNote = TabNote;\r\nFlow.TabSlide = TabSlide;\r\nFlow.TabStave = TabStave;\r\nFlow.TabTie = TabTie;\r\nFlow.TextBracket = TextBracket;\r\nFlow.TextDynamics = TextDynamics;\r\nFlow.TextFormatter = TextFormatter;\r\nFlow.TextNote = TextNote;\r\nFlow.TickContext = TickContext;\r\nFlow.TimeSignature = TimeSignature;\r\nFlow.TimeSigNote = TimeSigNote;\r\nFlow.Tremolo = Tremolo;\r\nFlow.Tuning = Tuning;\r\nFlow.Tuplet = Tuplet;\r\nFlow.Vibrato = Vibrato;\r\nFlow.VibratoBracket = VibratoBracket;\r\nFlow.Voice = Voice;\r\nFlow.Volta = Volta;\r\n// Exported Enums.\r\n// Sorted by the module / file they are exported from.\r\nFlow.AnnotationHorizontalJustify = AnnotationHorizontalJustify;\r\nFlow.AnnotationVerticalJustify = AnnotationVerticalJustify;\r\nFlow.ChordSymbolHorizontalJustify = ChordSymbolHorizontalJustify;\r\nFlow.ChordSymbolVerticalJustify = ChordSymbolVerticalJustify;\r\nFlow.SymbolTypes = SymbolTypes;\r\nFlow.SymbolModifiers = SymbolModifiers;\r\nFlow.CurvePosition = CurvePosition;\r\nFlow.FontWeight = FontWeight;\r\nFlow.FontStyle = FontStyle;\r\nFlow.ModifierPosition = ModifierPosition;\r\nFlow.RendererBackends = RendererBackends;\r\nFlow.RendererLineEndType = RendererLineEndType;\r\nFlow.BarlineType = BarlineType;\r\nFlow.StaveModifierPosition = StaveModifierPosition;\r\nFlow.VoltaType = VoltaType;\r\nFlow.TextBracketPosition = TextBracketPosition;\r\nFlow.TextJustification = TextJustification;\r\nFlow.VoiceMode = VoiceMode;\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { defined } from './util';\r\nexport var FontWeight;\r\n(function (FontWeight) {\r\n    FontWeight[\"NORMAL\"] = \"normal\";\r\n    FontWeight[\"BOLD\"] = \"bold\";\r\n})(FontWeight || (FontWeight = {}));\r\nexport var FontStyle;\r\n(function (FontStyle) {\r\n    FontStyle[\"NORMAL\"] = \"normal\";\r\n    FontStyle[\"ITALIC\"] = \"italic\";\r\n})(FontStyle || (FontStyle = {}));\r\n// Internal <span></span> element for parsing CSS font shorthand strings.\r\nlet fontParser;\r\nconst Fonts = {};\r\nexport class Font {\r\n    /**\r\n     * Use `Font.load(fontName)` to get a Font object.\r\n     * Do not call this constructor directly.\r\n     */\r\n    constructor(fontName) {\r\n        this.name = fontName;\r\n    }\r\n    /**\r\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\r\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\r\n     * units (e.g., pt, em, %).\r\n     * @returns the number of pixels that is equivalent to `fontSize`\r\n     */\r\n    static convertSizeToPixelValue(fontSize = Font.SIZE) {\r\n        var _a;\r\n        if (typeof fontSize === 'number') {\r\n            // Assume the numeric fontSize is specified in pt.\r\n            return fontSize * Font.scaleToPxFrom.pt;\r\n        }\r\n        else {\r\n            const value = parseFloat(fontSize);\r\n            if (isNaN(value)) {\r\n                return 0;\r\n            }\r\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\r\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\r\n            return value * conversionFactor;\r\n        }\r\n    }\r\n    /**\r\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\r\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\r\n     * units (e.g., pt, em, %).\r\n     * @returns the number of points that is equivalent to `fontSize`\r\n     */\r\n    static convertSizeToPointValue(fontSize = Font.SIZE) {\r\n        var _a;\r\n        if (typeof fontSize === 'number') {\r\n            // Assume the numeric fontSize is specified in pt.\r\n            return fontSize;\r\n        }\r\n        else {\r\n            const value = parseFloat(fontSize);\r\n            if (isNaN(value)) {\r\n                return 0;\r\n            }\r\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\r\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\r\n            return value * conversionFactor;\r\n        }\r\n    }\r\n    /**\r\n     * @param f\r\n     * @param size\r\n     * @param weight\r\n     * @param style\r\n     * @returns the `size` field will include the units (e.g., '12pt', '16px').\r\n     */\r\n    static validate(f, size, weight, style) {\r\n        // If f is a string but all other arguments are undefined, we assume that\r\n        // f is CSS font shorthand (e.g., 'italic bold 10pt Arial').\r\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\r\n            return Font.fromCSSString(f);\r\n        }\r\n        let family;\r\n        if (typeof f === 'object') {\r\n            // f is a FontInfo object, so we extract its fields.\r\n            family = f.family;\r\n            size = f.size;\r\n            weight = f.weight;\r\n            style = f.style;\r\n        }\r\n        else {\r\n            // f is a string representing the font family name or undefined.\r\n            family = f;\r\n        }\r\n        family = family !== null && family !== void 0 ? family : Font.SANS_SERIF;\r\n        size = size !== null && size !== void 0 ? size : Font.SIZE + 'pt';\r\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\r\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\r\n        if (weight === '') {\r\n            weight = FontWeight.NORMAL;\r\n        }\r\n        if (style === '') {\r\n            style = FontStyle.NORMAL;\r\n        }\r\n        // If size is a number, we assume the unit is `pt`.\r\n        if (typeof size === 'number') {\r\n            size = `${size}pt`;\r\n        }\r\n        // If weight is a number (e.g., 900), turn it into a string representation of that number.\r\n        if (typeof weight === 'number') {\r\n            weight = weight.toString();\r\n        }\r\n        // At this point, `family`, `size`, `weight`, and `style` are all strings.\r\n        return { family, size, weight, style };\r\n    }\r\n    /**\r\n     * @param cssFontShorthand a string formatted as CSS font shorthand (e.g., 'italic bold 15pt Arial').\r\n     */\r\n    static fromCSSString(cssFontShorthand) {\r\n        // Let the browser parse this string for us.\r\n        // First, create a span element.\r\n        // Then, set its style.font and extract it back out.\r\n        if (!fontParser) {\r\n            fontParser = document.createElement('span');\r\n        }\r\n        fontParser.style.font = cssFontShorthand;\r\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\r\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\r\n    }\r\n    /**\r\n     * @returns a CSS font shorthand string of the form `italic bold 16pt Arial`.\r\n     */\r\n    static toCSSString(fontInfo) {\r\n        var _a;\r\n        if (!fontInfo) {\r\n            return '';\r\n        }\r\n        let style;\r\n        const st = fontInfo.style;\r\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\r\n            style = ''; // no space! Omit the style section.\r\n        }\r\n        else {\r\n            style = st.trim() + ' ';\r\n        }\r\n        let weight;\r\n        const wt = fontInfo.weight;\r\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\r\n            weight = ''; // no space! Omit the weight section.\r\n        }\r\n        else if (typeof wt === 'number') {\r\n            weight = wt + ' ';\r\n        }\r\n        else {\r\n            weight = wt.trim() + ' ';\r\n        }\r\n        let size;\r\n        const sz = fontInfo.size;\r\n        if (sz === undefined) {\r\n            size = Font.SIZE + 'pt ';\r\n        }\r\n        else if (typeof sz === 'number') {\r\n            size = sz + 'pt ';\r\n        }\r\n        else {\r\n            // size is already a string.\r\n            size = sz.trim() + ' ';\r\n        }\r\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Font.SANS_SERIF;\r\n        return `${style}${weight}${size}${family}`;\r\n    }\r\n    /**\r\n     * @param fontSize a number representing a font size, or a string font size with units.\r\n     * @param scaleFactor multiply the size by this factor.\r\n     * @returns size * scaleFactor (e.g., 16pt * 3 = 48pt, 8px * 0.5 = 4px, 24 * 2 = 48).\r\n     * If the fontSize argument was a number, the return value will be a number.\r\n     * If the fontSize argument was a string, the return value will be a string.\r\n     */\r\n    static scaleSize(fontSize, scaleFactor) {\r\n        if (typeof fontSize === 'number') {\r\n            return (fontSize * scaleFactor);\r\n        }\r\n        else {\r\n            const value = parseFloat(fontSize);\r\n            const unit = fontSize.replace(/[\\d.\\s]/g, ''); // Remove all numbers, dots, spaces.\r\n            return `${value * scaleFactor}${unit}`;\r\n        }\r\n    }\r\n    /**\r\n     * @param weight a string (e.g., 'bold') or a number (e.g., 600 / semi-bold in the OpenType spec).\r\n     * @returns true if the font weight indicates bold.\r\n     */\r\n    static isBold(weight) {\r\n        if (!weight) {\r\n            return false;\r\n        }\r\n        else if (typeof weight === 'number') {\r\n            return weight >= 600;\r\n        }\r\n        else {\r\n            // a string can be 'bold' or '700'\r\n            const parsedWeight = parseInt(weight, 10);\r\n            if (isNaN(parsedWeight)) {\r\n                return weight.toLowerCase() === 'bold';\r\n            }\r\n            else {\r\n                return parsedWeight >= 600;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param style\r\n     * @returns true if the font style indicates 'italic'.\r\n     */\r\n    static isItalic(style) {\r\n        if (!style) {\r\n            return false;\r\n        }\r\n        else {\r\n            return style.toLowerCase() === FontStyle.ITALIC;\r\n        }\r\n    }\r\n    /**\r\n     * @param fontName\r\n     * @param woffURL The absolute or relative URL to the woff file.\r\n     * @param includeWoff2 If true, we assume that a woff2 file is in\r\n     * the same folder as the woff file, and will append a `2` to the url.\r\n     */\r\n    // Support distributions of the typescript compiler that do not yet include the FontFace API declarations.\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    static loadWebFont(fontName, woffURL, includeWoff2 = true) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const woff2URL = includeWoff2 ? `url(${woffURL}2) format('woff2'), ` : '';\r\n            const woff1URL = `url(${woffURL}) format('woff')`;\r\n            const woffURLs = woff2URL + woff1URL;\r\n            // eslint-disable-next-line\r\n            // @ts-ignore\r\n            const fontFace = new FontFace(fontName, woffURLs);\r\n            yield fontFace.load();\r\n            // eslint-disable-next-line\r\n            // @ts-ignore\r\n            document.fonts.add(fontFace);\r\n            return fontFace;\r\n        });\r\n    }\r\n    /**\r\n     * Load the web fonts that are used by ChordSymbol. For example, `flow.html` calls:\r\n     *   `await Vex.Flow.Font.loadWebFonts();`\r\n     * Alternatively, you may load web fonts with a stylesheet link (e.g., from Google Fonts),\r\n     * and a @font-face { font-family: ... } rule in your CSS.\r\n     * If you do not load either of these fonts, ChordSymbol will fall back to Times or Arial,\r\n     * depending on the current music engraving font.\r\n     *\r\n     * You can customize `Font.WEB_FONT_HOST` and `Font.WEB_FONT_FILES` to load different fonts\r\n     * for your app.\r\n     */\r\n    static loadWebFonts() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const host = Font.WEB_FONT_HOST;\r\n            const files = Font.WEB_FONT_FILES;\r\n            for (const fontName in files) {\r\n                const fontPath = files[fontName];\r\n                Font.loadWebFont(fontName, host + fontPath);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param fontName\r\n     * @param data optionally set the Font object's `.data` property.\r\n     *   This is usually done when setting up a font for the first time.\r\n     * @param metrics optionally set the Font object's `.metrics` property.\r\n     *   This is usually done when setting up a font for the first time.\r\n     * @returns a Font object with the given `fontName`.\r\n     *   Reuse an existing Font object if a matching one is found.\r\n     */\r\n    static load(fontName, data, metrics) {\r\n        let font = Fonts[fontName];\r\n        if (!font) {\r\n            font = new Font(fontName);\r\n            Fonts[fontName] = font;\r\n        }\r\n        if (data) {\r\n            font.setData(data);\r\n        }\r\n        if (metrics) {\r\n            font.setMetrics(metrics);\r\n        }\r\n        return font;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getData() {\r\n        return defined(this.data, 'FontError', 'Missing font data');\r\n    }\r\n    getMetrics() {\r\n        return defined(this.metrics, 'FontError', 'Missing metrics');\r\n    }\r\n    setData(data) {\r\n        this.data = data;\r\n    }\r\n    setMetrics(metrics) {\r\n        this.metrics = metrics;\r\n    }\r\n    hasData() {\r\n        return this.data !== undefined;\r\n    }\r\n    getResolution() {\r\n        return this.getData().resolution;\r\n    }\r\n    getGlyphs() {\r\n        return this.getData().glyphs;\r\n    }\r\n    /**\r\n     * Use the provided key to look up a value in this font's metrics file (e.g., bravura_metrics.ts, petaluma_metrics.ts).\r\n     * @param key is a string separated by periods (e.g., stave.endPaddingMax, clef.lineCount.'5'.shiftY).\r\n     * @param defaultValue is returned if the lookup fails.\r\n     * @returns the retrieved value (or `defaultValue` if the lookup fails).\r\n     */\r\n    // eslint-disable-next-line\r\n    lookupMetric(key, defaultValue) {\r\n        const keyParts = key.split('.');\r\n        // Start with the top level font metrics object, and keep looking deeper into the object (via each part of the period-delimited key).\r\n        let currObj = this.getMetrics();\r\n        for (let i = 0; i < keyParts.length; i++) {\r\n            const keyPart = keyParts[i];\r\n            const value = currObj[keyPart];\r\n            if (value === undefined) {\r\n                // If the key lookup fails, we fall back to the defaultValue.\r\n                return defaultValue;\r\n            }\r\n            // The most recent lookup succeeded, so we drill deeper into the object.\r\n            currObj = value;\r\n        }\r\n        // After checking every part of the key (i.e., the loop completed), return the most recently retrieved value.\r\n        return currObj;\r\n    }\r\n    /** For debugging. */\r\n    toString() {\r\n        return '[' + this.name + ' Font]';\r\n    }\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////////////////\r\n// STATIC MEMBERS\r\n/** Default sans-serif font family. */\r\nFont.SANS_SERIF = 'Arial, sans-serif';\r\n/** Default serif font family. */\r\nFont.SERIF = 'Times New Roman, serif';\r\n/** Default font size in `pt`. */\r\nFont.SIZE = 10;\r\n// CSS Font Sizes: 36pt == 48px == 3em == 300% == 0.5in\r\n/** Given a length (for units: pt, px, em, %, in, mm, cm) what is the scale factor to convert it to px? */\r\nFont.scaleToPxFrom = {\r\n    pt: 4 / 3,\r\n    px: 1,\r\n    em: 16,\r\n    '%': 4 / 25,\r\n    in: 96,\r\n    mm: 96 / 25.4,\r\n    cm: 96 / 2.54,\r\n};\r\n/**\r\n * Customize this field to specify a different CDN for delivering web fonts.\r\n * Alternative: https://cdn.jsdelivr.net/npm/vexflow-fonts@1.0.3/\r\n * Or you can use your own host.\r\n */\r\nFont.WEB_FONT_HOST = 'https://unpkg.com/vexflow-fonts@1.0.3/';\r\n/**\r\n * These font files will be loaded from the CDN specified by `Font.WEB_FONT_HOST` when\r\n * `await Font.loadWebFonts()` is called. Customize this field to specify a different\r\n * set of fonts to load. See: `Font.loadWebFonts()`.\r\n */\r\nFont.WEB_FONT_FILES = {\r\n    'Roboto Slab': 'robotoslab/RobotoSlab-Medium_2.001.woff',\r\n    PetalumaScript: 'petaluma/PetalumaScript_1.10_FS.woff',\r\n};\r\n","export const BravuraFont = {\r\n    glyphs: {\r\n        bracketTop: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: 0,\r\n            y_max: 295,\r\n            ha: 295,\r\n            o: 'm 0 0 l 180 0 b 674 390 410 43 616 150 b 675 405 675 396 675 400 b 664 425 675 416 671 422 b 628 405 651 425 635 415 b 157 179 613 389 432 199 l 12 179 b 0 168 3 179 0 177 z',\r\n        },\r\n        bracketBottom: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -295,\r\n            y_max: 0,\r\n            ha: 295,\r\n            o: 'm 0 -168 b 12 -179 0 -177 3 -179 l 157 -179 b 628 -405 432 -199 613 -389 b 664 -425 635 -415 651 -425 b 675 -405 671 -422 675 -416 b 674 -390 675 -400 675 -396 b 180 0 616 -150 410 -43 l 0 0 z',\r\n        },\r\n        barlineTick: {\r\n            x_min: 0,\r\n            x_max: 36,\r\n            y_min: 868,\r\n            y_max: 1120,\r\n            ha: 252,\r\n            o: 'm 52 1250 l 52 1613 l 0 1613 l 0 1250 z',\r\n        },\r\n        breathMarkTick: {\r\n            x_min: 0,\r\n            x_max: 500,\r\n            y_min: 0,\r\n            y_max: 502,\r\n            ha: 502,\r\n            o: 'm 9 367 b 0 374 6 372 3 374 b 9 334 0 367 0 343 b 179 19 40 312 164 121 b 192 0 179 3 186 0 b 210 19 197 0 207 6 b 698 701 245 197 507 658 b 720 714 714 704 720 711 b 698 723 720 720 711 723 b 197 186 455 714 210 202 b 186 176 194 179 189 176 b 176 186 179 176 176 186 b 9 367 143 266 27 359 z',\r\n        },\r\n        segno: {\r\n            x_min: 4,\r\n            x_max: 550,\r\n            y_min: -27,\r\n            y_max: 759,\r\n            ha: 786,\r\n            o: 'm 194 958 b 217 939 203 958 213 955 l 220 929 b 325 805 230 890 252 805 b 425 901 384 805 425 840 b 413 969 425 923 420 946 b 220 1060 390 1035 294 1060 b 6 793 120 1060 6 936 b 29 687 6 759 13 723 b 295 449 75 582 284 454 b 304 438 301 446 304 444 b 295 415 304 432 301 425 b 78 22 285 395 78 22 b 73 3 75 16 73 9 b 114 -39 73 -20 91 -39 b 150 -17 128 -39 143 -30 b 377 395 150 -17 373 386 b 395 402 377 393 389 402 b 704 176 416 397 704 312 b 621 75 704 120 670 82 l 616 73 b 562 138 586 73 562 94 l 562 154 b 485 249 562 209 526 249 b 468 246 480 249 474 248 b 366 153 415 233 366 210 b 540 -12 366 65 455 -12 b 600 -1 559 -12 579 -9 b 792 251 716 37 792 131 b 789 292 792 264 791 278 b 523 588 768 451 540 579 b 498 611 505 598 498 603 b 501 619 498 613 500 616 b 732 1032 508 631 732 1032 b 737 1053 736 1040 737 1045 b 697 1093 737 1076 719 1093 b 661 1073 683 1093 668 1086 b 423 647 661 1073 432 660 b 410 635 419 639 416 635 b 396 639 406 635 402 636 b 128 792 383 644 166 727 b 108 868 120 808 108 838 b 186 958 108 907 125 948 z m 598 671 b 680 589 598 626 635 589 b 762 671 726 589 762 626 b 680 753 762 717 726 753 b 598 671 635 753 598 717 z m 202 380 b 120 462 202 425 166 462 b 37 380 75 462 37 425 b 120 298 37 334 75 298 b 202 380 166 298 202 334 z',\r\n        },\r\n        coda: {\r\n            x_min: -4,\r\n            x_max: 955,\r\n            y_min: -158,\r\n            y_max: 898,\r\n            ha: 1056,\r\n            o: 'm 1349 576 l 1178 576 b 729 1083 1164 847 962 1064 l 729 1269 b 694 1293 729 1287 713 1293 b 660 1269 675 1293 660 1287 l 660 1083 b 210 576 426 1064 226 848 l 20 576 b -6 541 0 576 -6 560 b 20 507 -6 523 0 507 l 210 507 b 660 0 226 238 426 19 l 660 -202 b 694 -228 660 -222 675 -228 b 729 -202 713 -228 729 -222 l 729 0 b 1178 507 962 19 1164 238 l 1349 507 b 1375 541 1369 507 1375 523 b 1349 576 1375 560 1369 576 z m 940 576 l 729 576 l 729 1002 b 940 576 930 985 940 809 z m 660 1002 l 660 576 l 455 576 b 660 1002 455 809 455 985 z m 455 507 l 660 507 l 660 69 b 455 507 474 91 456 285 z m 729 69 l 729 507 l 940 507 b 729 69 936 287 909 91 z',\r\n        },\r\n        gClef: {\r\n            x_min: 0,\r\n            x_max: 671,\r\n            y_min: -658,\r\n            y_max: 1098,\r\n            ha: 1756,\r\n            o: 'm 541 598 b 550 625 539 615 541 616 b 824 1174 706 770 824 953 b 730 1509 824 1299 789 1423 b 655 1581 708 1541 671 1581 b 562 1512 635 1581 590 1544 b 420 1064 455 1394 420 1214 b 441 828 420 981 431 887 b 428 793 444 811 445 808 b 0 125 220 622 0 416 b 524 -363 0 -125 171 -363 b 624 -354 557 -363 595 -360 b 645 -367 639 -351 642 -350 b 684 -657 662 -464 684 -589 b 455 -896 684 -870 540 -896 b 340 -854 377 -896 340 -873 b 386 -829 340 -844 353 -840 b 482 -694 431 -816 482 -778 b 344 -547 482 -615 432 -547 b 190 -713 248 -547 190 -624 b 464 -948 190 -806 246 -948 b 747 -660 560 -948 747 -904 b 706 -351 747 -577 721 -441 b 724 -327 703 -334 704 -336 b 966 16 870 -269 966 -147 b 619 363 966 200 831 363 b 577 389 582 363 582 363 z m 677 1358 b 763 1240 724 1358 763 1319 b 513 851 763 1080 626 950 b 494 863 503 842 497 844 b 485 995 488 900 485 949 b 677 1358 485 1220 589 1358 z m 520 377 b 498 343 524 350 524 351 b 289 63 372 300 289 186 b 455 -192 289 -66 357 -158 b 494 -200 467 -196 484 -200 b 511 -184 505 -200 511 -193 b 490 -166 511 -174 500 -170 b 386 -12 429 -140 386 -78 b 530 157 386 71 442 132 b 559 145 553 163 556 161 l 631 -284 b 611 -304 634 -300 632 -300 b 530 -311 588 -308 559 -311 b 115 29 278 -311 115 -171 b 249 363 115 114 130 228 b 469 567 336 459 402 513 b 490 562 484 579 487 577 z m 619 148 b 635 168 616 166 618 170 b 848 -66 752 158 848 60 b 713 -271 848 -157 793 -230 b 690 -262 696 -279 693 -279 z',\r\n        },\r\n        cClef: {\r\n            x_min: 0,\r\n            x_max: 699,\r\n            y_min: -506,\r\n            y_max: 506,\r\n            ha: 1012,\r\n            o: 'm 331 694 b 301 724 331 714 321 724 l 300 724 b 269 694 279 724 269 714 l 269 -694 b 300 -724 269 -714 279 -724 l 301 -724 b 331 -694 321 -724 331 -714 l 331 -63 b 344 -55 331 -52 338 -53 b 472 -265 382 -65 442 -102 b 500 -301 477 -288 485 -301 b 530 -262 516 -301 523 -287 b 684 -128 549 -199 582 -128 b 804 -409 778 -128 804 -220 b 651 -683 804 -598 770 -683 b 528 -644 631 -683 528 -674 b 567 -622 528 -636 552 -628 b 625 -528 596 -612 625 -583 b 527 -429 625 -465 583 -429 b 416 -547 465 -429 416 -471 b 667 -729 416 -638 495 -729 b 1007 -413 903 -729 1007 -563 b 706 -76 1007 -215 897 -76 b 618 -89 664 -76 636 -84 b 576 -88 603 -94 589 -96 b 524 0 556 -75 524 -29 b 576 88 524 29 556 75 b 618 89 589 96 603 94 b 706 76 636 84 664 76 b 1007 413 897 76 1007 215 b 667 729 1007 563 903 729 b 416 547 495 729 416 638 b 527 429 416 471 465 429 b 625 528 583 429 625 465 b 567 622 625 583 596 612 b 528 644 552 628 528 636 b 651 683 528 674 631 683 b 804 409 770 683 804 598 b 684 128 804 220 778 128 b 530 262 582 128 549 199 b 500 301 523 287 516 301 b 472 265 485 301 477 288 b 344 55 442 102 382 65 b 331 63 338 53 331 52 z m 30 724 b 0 694 10 724 0 714 l 0 -694 b 30 -724 0 -714 10 -724 l 154 -724 b 184 -694 174 -724 184 -714 l 184 694 b 154 724 184 714 174 724 z',\r\n        },\r\n        fClef: {\r\n            x_min: -5,\r\n            x_max: 684,\r\n            y_min: -635,\r\n            y_max: 262,\r\n            ha: 897,\r\n            o: 'm 363 377 b 0 56 112 377 0 194 b 177 -158 0 -59 60 -158 b 330 -6 268 -158 330 -95 b 192 144 330 86 262 144 b 120 134 153 144 138 134 b 96 160 101 134 96 145 b 330 323 96 217 183 323 b 549 -53 482 323 549 173 b 14 -871 549 -455 350 -680 b -7 -897 1 -878 -7 -886 b 12 -914 -7 -906 -1 -914 b 36 -907 19 -914 27 -912 b 765 -40 390 -734 765 -478 b 363 377 765 210 612 377 z m 906 259 b 827 180 861 259 827 225 b 906 101 827 135 861 101 b 985 180 950 101 985 135 b 906 259 985 225 950 259 z m 907 -102 b 829 -180 863 -102 829 -135 b 907 -258 829 -225 863 -258 b 985 -180 952 -258 985 -225 b 907 -102 985 -135 952 -102 z',\r\n        },\r\n        unpitchedPercussionClef1: {\r\n            x_min: 0,\r\n            x_max: 382,\r\n            y_min: -250,\r\n            y_max: 250,\r\n            ha: 500,\r\n            o: 'm 230 -338 l 230 338 b 210 360 230 350 222 360 l 20 360 b 0 338 9 360 0 350 l 0 -338 b 20 -360 0 -350 9 -360 l 210 -360 b 230 -338 222 -360 230 -350 z m 550 338 b 530 360 550 350 541 360 l 340 360 b 320 338 328 360 320 350 l 320 -338 b 340 -360 320 -350 328 -360 l 530 -360 b 550 -338 541 -360 550 -350 z',\r\n        },\r\n        '6stringTabClef': {\r\n            x_min: -3,\r\n            x_max: 408,\r\n            y_min: -748,\r\n            y_max: 764,\r\n            ha: 1512,\r\n            o: 'm 557 1024 l 557 1100 l 26 1100 l 26 1024 l 249 1024 l 249 422 l 336 422 l 336 1024 z m 588 -328 l 350 348 l 238 348 l -4 -328 l 88 -328 l 160 -125 l 420 -125 l 491 -328 z m 397 -52 l 181 -52 l 292 256 z m 544 -883 b 420 -719 544 -802 507 -752 b 514 -572 482 -690 514 -639 b 314 -399 514 -472 442 -399 l 39 -399 l 39 -1077 l 344 -1077 b 544 -883 467 -1077 544 -995 z m 428 -583 b 292 -691 428 -652 389 -691 l 125 -691 l 125 -475 l 292 -475 b 428 -583 389 -475 428 -514 z m 458 -884 b 337 -1001 458 -949 418 -1001 l 125 -1001 l 125 -768 l 337 -768 b 458 -884 418 -768 458 -818 z',\r\n        },\r\n        timeSig0: {\r\n            x_min: 20,\r\n            x_max: 450,\r\n            y_min: -250,\r\n            y_max: 251,\r\n            ha: 501,\r\n            o: 'm 648 0 b 338 361 648 200 510 361 b 29 0 167 361 29 200 b 338 -360 29 -199 167 -360 b 648 0 510 -360 648 -199 z m 338 317 b 446 10 397 317 446 180 b 338 -295 446 -158 397 -295 b 230 10 278 -295 230 -158 b 338 317 230 180 278 317 z',\r\n        },\r\n        timeSig1: {\r\n            x_min: 20,\r\n            x_max: 314,\r\n            y_min: -250,\r\n            y_max: 251,\r\n            ha: 501,\r\n            o: 'm 35 19 b 29 0 35 19 29 10 b 45 -20 29 -7 33 -16 b 58 -23 50 -22 56 -23 b 78 -10 72 -23 78 -10 b 156 117 78 -10 140 89 b 170 131 161 127 167 131 b 179 111 176 131 179 120 l 179 -261 b 115 -315 179 -294 145 -315 b 91 -337 105 -315 91 -320 b 122 -360 91 -353 104 -360 l 429 -360 b 452 -337 452 -360 452 -337 b 431 -315 452 -337 452 -315 b 384 -265 410 -315 384 -289 l 384 328 b 356 361 384 351 376 360 b 281 356 336 361 300 356 b 206 360 253 356 228 357 b 199 361 203 360 200 361 b 173 334 184 361 179 347 z',\r\n        },\r\n        timeSig2: {\r\n            x_min: 20,\r\n            x_max: 426,\r\n            y_min: -257,\r\n            y_max: 254,\r\n            ha: 511,\r\n            o: 'm 606 -131 b 589 -111 606 -114 599 -111 b 570 -127 577 -111 573 -117 l 569 -128 b 513 -192 554 -164 543 -192 b 488 -187 505 -192 498 -190 b 445 -171 469 -180 459 -179 b 289 -137 416 -160 348 -137 b 236 -145 271 -137 252 -140 b 422 -42 268 -94 390 -50 b 613 147 523 -14 613 27 b 330 366 613 300 464 366 b 69 275 229 366 140 357 b 29 170 45 245 29 209 b 42 108 29 150 33 130 b 160 29 63 63 108 29 b 261 156 248 29 261 120 b 161 275 261 242 161 246 b 275 330 164 295 190 330 b 405 192 403 330 405 233 b 193 -102 405 60 297 -39 b 33 -317 114 -153 58 -223 l 32 -321 b 69 -370 32 -340 48 -370 b 203 -282 101 -370 118 -282 b 410 -360 261 -282 282 -360 b 606 -131 472 -360 583 -354 z',\r\n        },\r\n        timeSig3: {\r\n            x_min: 20,\r\n            x_max: 401,\r\n            y_min: -251,\r\n            y_max: 249,\r\n            ha: 500,\r\n            o: 'm 307 357 b 301 357 305 357 304 357 l 291 359 b 285 359 289 359 287 359 b 37 200 161 359 37 276 b 154 84 37 153 65 89 l 161 84 b 256 177 225 84 256 130 l 256 189 b 209 248 252 242 216 245 b 180 268 202 251 180 248 l 180 274 b 240 310 183 298 228 310 b 374 199 363 310 374 233 l 374 189 b 199 36 374 82 289 40 b 164 12 184 35 164 27 b 200 -6 164 -6 189 -6 b 379 -137 366 -6 379 -118 b 269 -307 379 -289 301 -307 b 256 -305 264 -307 258 -305 b 216 -282 245 -304 217 -304 l 216 -275 b 249 -180 216 -243 248 -222 b 145 -76 249 -120 207 -76 b 130 -78 140 -76 135 -76 b 60 -115 105 -82 78 -96 b 29 -203 36 -137 29 -171 b 275 -361 32 -315 134 -359 l 288 -361 b 577 -161 431 -361 577 -288 l 577 -151 b 537 -50 575 -109 564 -82 b 503 -20 528 -39 517 -29 l 472 -3 l 425 10 b 410 17 418 12 413 12 b 409 24 409 20 409 22 b 415 37 409 30 410 36 b 459 50 431 42 446 43 b 547 181 517 78 547 115 b 307 357 547 314 367 353 z',\r\n        },\r\n        timeSig4: {\r\n            x_min: 20,\r\n            x_max: 450,\r\n            y_min: -250,\r\n            y_max: 251,\r\n            ha: 501,\r\n            o: 'm 521 -107 l 521 202 b 504 226 521 213 520 226 b 475 213 491 226 484 223 l 338 48 b 325 14 333 40 325 32 l 325 -107 l 131 -107 b 481 336 246 -9 477 318 l 482 340 b 461 361 482 353 472 361 b 363 359 448 361 389 359 b 261 361 337 359 272 361 b 228 334 248 361 228 357 b 43 -105 228 156 86 -45 l 35 -117 b 35 -118 35 -117 35 -118 l 33 -120 b 29 -137 30 -127 29 -132 b 58 -161 29 -151 40 -161 l 325 -161 l 325 -252 b 268 -302 325 -291 294 -302 b 235 -330 245 -302 235 -315 b 262 -360 235 -344 240 -360 l 569 -360 b 598 -330 583 -360 598 -350 b 566 -301 598 -310 580 -301 b 521 -246 552 -301 521 -292 l 521 -161 l 626 -161 b 648 -134 641 -161 648 -151 b 626 -107 648 -117 642 -107 z',\r\n        },\r\n        timeSig5: {\r\n            x_min: 20,\r\n            x_max: 383,\r\n            y_min: -251,\r\n            y_max: 246,\r\n            ha: 497,\r\n            o: 'm 109 85 b 117 179 109 85 115 166 b 138 197 118 190 125 197 l 144 197 b 285 184 158 194 226 184 b 492 323 485 184 492 300 b 472 353 492 341 488 353 b 295 340 454 353 341 340 b 101 354 249 340 125 351 b 66 330 75 354 68 341 l 50 10 l 50 7 b 79 -14 50 -12 65 -14 b 111 14 94 -14 95 -1 b 209 62 125 29 160 62 b 357 -125 258 62 357 35 b 235 -304 357 -284 272 -304 b 202 -300 223 -304 212 -304 b 184 -279 194 -295 186 -289 b 202 -259 184 -269 194 -264 b 256 -163 235 -239 256 -203 b 144 -50 256 -99 206 -50 b 30 -157 66 -50 35 -107 b 29 -183 29 -166 29 -174 b 284 -361 29 -302 107 -361 b 552 -125 456 -361 552 -255 b 314 112 552 6 445 112 b 122 71 230 112 168 98 b 115 69 120 69 117 69 b 109 79 109 69 109 75 z',\r\n        },\r\n        timeSig6: {\r\n            x_min: 20,\r\n            x_max: 414,\r\n            y_min: -249,\r\n            y_max: 251,\r\n            ha: 500,\r\n            o: 'm 439 120 b 554 229 500 120 554 167 b 553 245 554 235 554 239 b 348 361 539 337 426 361 b 85 209 239 360 137 307 b 29 4 53 148 29 72 l 29 -1 b 73 -200 30 -68 42 -143 b 324 -359 132 -307 203 -359 b 513 -307 389 -359 461 -348 b 596 -137 563 -266 596 -202 b 379 72 596 -24 490 72 b 248 22 333 72 285 55 b 239 19 245 19 242 19 b 226 53 230 19 226 30 b 346 327 230 320 315 327 b 393 305 374 327 393 320 b 357 251 393 285 366 268 b 347 209 350 238 347 223 b 369 150 347 187 354 166 b 439 120 379 131 420 120 z m 320 3 b 405 -158 366 3 405 -69 b 320 -320 405 -248 366 -320 b 236 -158 274 -320 236 -248 b 320 3 236 -69 274 3 z',\r\n        },\r\n        timeSig7: {\r\n            x_min: 20,\r\n            x_max: 421,\r\n            y_min: -250,\r\n            y_max: 249,\r\n            ha: 499,\r\n            o: 'm 606 294 b 582 351 606 333 606 351 b 552 336 580 351 557 346 b 485 236 541 318 521 236 b 262 359 449 236 382 359 b 137 307 179 359 157 325 b 98 281 117 288 108 282 b 60 315 86 281 68 301 b 43 325 58 321 50 325 b 29 308 36 325 29 321 l 29 71 b 45 48 29 71 30 48 b 66 76 56 48 60 60 b 164 196 81 112 99 196 b 374 88 222 196 291 88 b 446 118 415 88 435 109 b 459 124 451 121 456 124 b 469 111 465 124 468 120 b 272 -112 469 71 359 -10 b 173 -315 217 -176 173 -259 b 200 -360 173 -346 173 -360 b 294 -347 226 -360 258 -347 b 412 -360 330 -347 397 -360 b 435 -307 426 -360 435 -348 b 606 288 435 -66 606 140 z',\r\n        },\r\n        timeSig8: {\r\n            x_min: 20,\r\n            x_max: 416,\r\n            y_min: -259,\r\n            y_max: 259,\r\n            ha: 518,\r\n            o: 'm 481 52 b 567 204 533 85 567 132 b 317 373 567 351 356 373 b 36 176 150 373 36 297 b 161 -16 36 76 92 23 b 29 -190 86 -52 29 -99 b 301 -373 29 -315 158 -373 b 599 -117 445 -373 599 -311 b 481 52 599 -30 549 17 z m 406 85 b 168 240 291 125 168 150 b 314 331 168 301 251 331 b 482 207 360 331 482 308 b 406 85 482 150 454 112 z m 295 -325 b 111 -183 199 -325 111 -276 b 225 -48 111 -125 161 -72 b 436 -219 330 -94 436 -124 b 295 -325 436 -276 392 -325 z',\r\n        },\r\n        timeSig9: {\r\n            x_min: 20,\r\n            x_max: 414,\r\n            y_min: -249,\r\n            y_max: 251,\r\n            ha: 500,\r\n            o: 'm 186 -117 b 71 -226 125 -117 71 -164 b 72 -242 71 -232 71 -236 b 276 -359 86 -334 199 -359 b 540 -206 386 -357 488 -304 b 596 -1 572 -145 596 -69 l 596 4 b 552 203 595 71 583 145 b 301 361 492 310 422 361 b 112 310 236 361 164 351 b 29 140 62 269 29 204 b 246 -69 29 27 135 -69 b 377 -19 292 -69 340 -52 b 386 -16 380 -16 383 -16 b 399 -50 395 -16 399 -27 b 279 -324 395 -317 310 -324 b 232 -302 251 -324 232 -317 b 268 -248 232 -282 259 -265 b 278 -206 275 -235 278 -220 b 256 -147 278 -184 271 -163 b 186 -117 246 -128 204 -117 z m 305 0 b 220 161 259 0 220 72 b 305 323 220 251 259 323 b 389 161 351 323 389 251 b 305 0 389 72 351 0 z',\r\n        },\r\n        timeSigCommon: {\r\n            x_min: 5,\r\n            x_max: 424,\r\n            y_min: -249,\r\n            y_max: 251,\r\n            ha: 500,\r\n            o: 'm 336 361 b 7 -14 131 361 7 180 b 101 -262 7 -108 42 -190 b 321 -359 156 -328 235 -359 b 611 -88 573 -359 611 -130 b 589 -56 611 -56 595 -56 b 567 -82 577 -56 567 -58 b 363 -311 567 -268 409 -311 b 184 40 246 -311 184 -197 b 372 327 184 278 294 327 b 477 278 446 327 477 292 b 451 246 477 265 472 246 b 360 140 393 246 360 184 b 471 32 360 58 431 32 b 580 156 471 32 580 36 b 336 361 580 344 363 361 z',\r\n        },\r\n        timeSigCutCommon: {\r\n            x_min: 0,\r\n            x_max: 418,\r\n            y_min: -359,\r\n            y_max: 361,\r\n            ha: 720,\r\n            o: 'm 573 -58 b 559 -82 567 -58 559 -60 b 354 -310 559 -266 400 -310 b 317 -305 340 -310 328 -308 b 302 -284 311 -304 302 -295 l 302 287 b 338 323 302 297 328 321 b 363 324 347 324 356 324 b 468 275 436 324 468 289 b 442 243 468 264 464 243 b 351 137 384 243 351 181 b 462 30 351 56 422 30 b 572 154 462 30 572 35 b 318 357 572 295 441 357 b 302 390 310 359 302 383 l 302 495 b 276 520 302 507 292 520 b 252 495 265 520 252 507 l 252 369 b 235 346 252 359 238 346 l 196 331 b 0 -14 66 275 0 122 b 225 -346 0 -150 86 -310 b 252 -382 235 -350 252 -369 l 252 -492 b 276 -517 252 -505 265 -517 b 302 -492 292 -517 302 -505 l 302 -379 b 318 -359 302 -370 308 -363 b 602 -85 563 -354 602 -130 b 579 -58 600 -58 586 -58 z m 252 -235 b 243 -252 252 -248 248 -252 b 236 -248 240 -252 238 -251 b 177 37 197 -193 177 -96 b 232 259 177 147 200 215 b 236 262 233 262 235 262 b 252 239 243 262 252 251 z',\r\n        },\r\n        timeSigPlus: {\r\n            x_min: -1,\r\n            x_max: 499,\r\n            y_min: -250,\r\n            y_max: 250,\r\n            ha: 500,\r\n            o: 'm 432 53 b 413 79 420 53 413 65 l 413 340 b 392 360 413 350 405 360 l 325 360 b 305 340 312 360 305 350 l 305 79 b 284 53 305 66 292 53 l 19 53 b -1 33 9 53 -1 46 l -1 -33 b 19 -55 -1 -46 9 -55 l 284 -55 b 305 -75 298 -55 305 -68 l 305 -340 b 325 -360 305 -350 312 -360 l 392 -360 b 413 -340 405 -360 413 -350 l 413 -78 b 433 -55 413 -63 423 -55 l 698 -55 b 719 -33 708 -55 719 -46 l 719 33 b 698 53 719 46 708 53 z',\r\n        },\r\n        timeSigPlusSmall: {\r\n            x_min: -1,\r\n            x_max: 255,\r\n            y_min: -133,\r\n            y_max: 123,\r\n            ha: 256,\r\n            o: 'm 220 20 b 210 33 215 20 210 26 l 210 166 b 200 177 210 171 206 177 l 166 177 b 156 166 160 177 156 171 l 156 33 b 145 20 156 27 150 20 l 10 20 b -1 10 4 20 -1 16 l -1 -24 b 10 -35 -1 -30 4 -35 l 145 -35 b 156 -46 153 -35 156 -42 l 156 -180 b 166 -192 156 -186 160 -192 l 200 -192 b 210 -180 206 -192 210 -186 l 210 -48 b 222 -35 210 -39 216 -35 l 356 -35 b 367 -24 361 -35 367 -30 l 367 10 b 356 20 367 16 361 20 z',\r\n        },\r\n        timeSigMinus: {\r\n            x_min: 0,\r\n            x_max: 448,\r\n            y_min: -35,\r\n            y_max: 40,\r\n            ha: 75,\r\n            o: 'm 645 39 b 619 58 645 49 634 58 l 27 58 b 0 39 12 58 0 49 l 0 -32 b 27 -50 0 -42 12 -50 l 619 -50 b 645 -32 634 -50 645 -42 z',\r\n        },\r\n        timeSigParensRight: {\r\n            x_min: 0,\r\n            x_max: 184,\r\n            y_min: -489,\r\n            y_max: 491,\r\n            ha: 980,\r\n            o: 'm 0 -696 b 3 -704 0 -698 1 -704 b 7 -703 4 -704 6 -704 b 265 1 187 -530 265 -282 b 12 701 265 289 187 531 b 4 707 12 701 6 707 b 0 696 1 707 0 703 l 0 665 b 4 644 0 665 0 651 b 167 1 112 503 167 315 b 6 -641 167 -311 109 -497 b 0 -658 3 -644 0 -651 z',\r\n        },\r\n        timeSigParensRightSmall: {\r\n            x_min: 0,\r\n            x_max: 110,\r\n            y_min: -251,\r\n            y_max: 249,\r\n            ha: 500,\r\n            o: 'm 0 -356 b 3 -361 0 -357 1 -361 b 158 0 112 -272 158 -145 b 4 359 158 147 109 272 b 0 353 3 359 0 357 l 0 338 b 3 327 0 338 0 330 b 91 0 60 246 91 160 b 4 -328 91 -160 62 -249 b 0 -337 3 -330 0 -333 z',\r\n        },\r\n        timeSigParensLeft: {\r\n            x_min: 0,\r\n            x_max: 184,\r\n            y_min: -489,\r\n            y_max: 491,\r\n            ha: 980,\r\n            o: 'm 265 -658 b 259 -641 265 -651 262 -644 b 98 1 156 -497 98 -311 b 261 644 98 315 153 503 b 265 665 265 651 265 665 l 265 696 b 261 707 265 703 264 707 b 253 701 259 707 253 701 b 0 1 78 531 0 289 b 258 -703 0 -282 78 -530 b 262 -704 259 -704 261 -704 b 265 -696 264 -704 265 -698 z',\r\n        },\r\n        timeSigParensLeftSmall: {\r\n            x_min: 0,\r\n            x_max: 110,\r\n            y_min: -251,\r\n            y_max: 249,\r\n            ha: 500,\r\n            o: 'm 158 -337 b 154 -328 158 -333 156 -330 b 68 0 96 -249 68 -160 b 156 327 68 160 98 246 b 158 338 158 330 158 338 l 158 353 b 154 359 158 357 156 359 b 0 0 49 272 0 147 b 156 -361 0 -145 46 -272 b 158 -356 157 -361 158 -357 z',\r\n        },\r\n        noteheadDoubleWhole: {\r\n            x_min: 0,\r\n            x_max: 599,\r\n            y_min: -155,\r\n            y_max: 155,\r\n            ha: 310,\r\n            o: 'm 13 223 b 0 212 4 223 0 217 l 0 -213 b 13 -223 0 -219 4 -223 l 32 -223 b 45 -213 39 -223 45 -219 l 45 212 b 32 223 45 217 39 223 z m 96 223 b 82 212 88 223 82 217 l 82 -213 b 96 -223 82 -219 88 -223 l 114 -223 b 128 -213 121 -223 128 -219 l 128 212 b 114 223 128 217 121 223 z m 747 223 b 733 212 740 223 733 217 l 733 -213 b 747 -223 733 -219 740 -223 l 766 -223 b 780 -213 773 -223 780 -219 l 780 212 b 766 223 780 217 773 223 z m 829 223 b 815 212 824 223 815 217 l 815 -213 b 829 -223 815 -219 824 -223 l 848 -223 b 863 -213 857 -223 863 -219 l 863 212 b 848 223 863 217 857 223 z m 438 180 b 130 1 248 180 130 101 b 423 -180 130 -92 210 -180 b 733 1 657 -180 733 -98 b 438 180 733 104 572 180 z m 469 -145 b 331 -71 409 -145 369 -112 b 284 58 305 -37 284 12 b 400 147 284 131 333 147 b 577 -45 498 147 577 42 b 469 -145 577 -115 533 -145 z',\r\n        },\r\n        noteheadWhole: {\r\n            x_min: 0,\r\n            x_max: 422,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 311 180 b 0 3 120 180 0 101 b 297 -180 0 -94 82 -180 b 608 3 533 -180 608 -98 b 311 180 608 105 445 180 z m 160 91 b 274 148 176 141 229 148 b 452 -45 373 148 452 42 b 386 -141 452 -89 433 -130 b 341 -147 372 -145 356 -147 b 206 -72 289 -147 236 -112 b 156 56 177 -39 156 10 b 160 91 156 68 157 79 z',\r\n        },\r\n        noteheadHalf: {\r\n            x_min: 0,\r\n            x_max: 295,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 140 -180 b 425 60 377 -180 425 13 b 282 180 425 134 366 180 b 0 -60 68 180 0 14 b 140 -180 0 -137 60 -180 z m 108 -125 b 50 -92 78 -125 60 -109 b 42 -63 46 -84 42 -73 b 318 121 42 7 251 121 b 372 91 346 121 361 108 b 380 63 376 82 380 73 b 108 -125 380 1 177 -125 z',\r\n        },\r\n        noteheadBlack: {\r\n            x_min: 0,\r\n            x_max: 295,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 140 -180 b 425 60 268 -180 425 -62 b 285 180 425 134 367 180 b 0 -60 127 180 0 63 b 140 -180 0 -135 62 -180 z',\r\n        },\r\n        noteheadXWhole: {\r\n            x_min: 0,\r\n            x_max: 377,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 272 -95 l 364 -171 b 384 -180 370 -177 377 -180 l 511 -180 b 543 -148 528 -180 543 -164 b 531 -124 543 -140 539 -131 l 412 0 l 531 124 b 541 148 539 131 541 140 b 513 180 541 164 528 180 l 384 180 b 364 171 377 180 370 177 l 272 94 l 179 171 b 158 180 173 177 166 180 l 30 180 b 0 148 16 180 0 164 b 12 124 0 140 4 131 l 132 0 l 12 -124 b 1 -148 4 -131 1 -140 b 32 -180 1 -164 14 -180 l 158 -180 b 179 -171 166 -180 173 -177 z m 386 -141 l 272 -45 l 157 -141 l 88 -141 l 245 0 l 88 141 l 157 141 l 272 45 l 386 141 l 456 141 l 300 0 l 456 -141 z',\r\n        },\r\n        noteheadXHalf: {\r\n            x_min: 0,\r\n            x_max: 334,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 295 180 b 271 170 287 180 278 177 l 209 98 l 115 171 b 95 180 109 177 104 180 l 36 180 b 4 148 19 180 4 164 b 14 124 4 140 7 132 l 140 22 l 7 -127 b 0 -148 3 -131 0 -138 b 32 -180 0 -166 14 -180 l 184 -180 b 209 -170 193 -180 203 -177 l 271 -99 l 363 -171 b 384 -180 370 -176 377 -180 l 445 -180 b 478 -147 461 -180 478 -163 b 465 -125 478 -138 474 -131 l 341 -22 l 474 127 b 481 148 480 131 481 138 b 448 180 481 166 468 180 z m 36 148 l 95 148 l 233 33 l 334 148 l 410 148 l 274 -6 l 445 -148 l 384 -148 l 248 -35 l 147 -148 l 71 -148 l 206 4 z',\r\n        },\r\n        noteheadXBlack: {\r\n            x_min: 0,\r\n            x_max: 290,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 410 -143 l 239 0 l 410 144 b 418 160 415 147 418 154 b 399 180 418 171 408 180 b 389 177 396 180 392 179 l 207 26 l 29 177 b 17 180 26 179 22 180 b 0 161 7 180 0 170 b 7 144 0 156 3 148 l 179 0 l 7 -143 b 0 -158 1 -147 0 -153 b 19 -180 0 -170 7 -180 b 29 -176 23 -180 26 -179 l 207 -24 l 389 -176 b 399 -180 392 -179 396 -180 b 418 -160 410 -180 418 -168 b 410 -143 418 -153 415 -147 z',\r\n        },\r\n        noteheadCircleX: {\r\n            x_min: 0,\r\n            x_max: 249,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 179 180 b 0 0 81 180 0 99 b 179 -180 0 -99 81 -180 b 359 0 278 -180 359 -99 b 179 180 359 99 278 180 z m 261 112 l 180 30 l 98 112 b 179 138 121 128 148 138 b 261 112 210 138 238 128 z m 317 0 b 292 -82 317 -30 308 -59 l 209 1 l 291 84 b 317 0 307 60 317 30 z m 40 0 b 69 84 40 32 50 60 l 151 1 l 68 -84 b 40 0 49 -60 40 -30 z m 95 -111 l 180 -27 l 262 -111 b 179 -138 239 -128 210 -138 b 95 -111 148 -138 120 -128 z',\r\n        },\r\n        noteheadTriangleUpWhole: {\r\n            x_min: 0,\r\n            x_max: 319,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 445 -180 b 459 -166 454 -180 459 -173 b 458 -158 459 -163 458 -160 l 239 173 b 228 180 238 177 233 180 b 216 173 225 180 219 177 l 1 -158 b 0 -166 1 -160 0 -163 b 14 -180 0 -173 6 -180 z m 170 -137 b 145 -96 157 -137 145 -109 b 228 108 145 -17 197 56 b 310 -98 259 55 310 -17 b 288 -137 310 -111 301 -137 z',\r\n        },\r\n        noteheadTriangleUpHalf: {\r\n            x_min: 0,\r\n            x_max: 285,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 215 180 b 202 173 210 180 204 177 l 3 -157 b 0 -166 1 -160 0 -163 b 14 -180 0 -173 7 -180 l 396 -180 b 410 -166 406 -180 410 -173 b 409 -158 410 -163 410 -161 l 228 173 b 215 180 226 174 220 180 z m 246 -138 l 115 -138 l 232 76 l 297 -37 z',\r\n        },\r\n        noteheadTriangleUpBlack: {\r\n            x_min: 0,\r\n            x_max: 293,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 422 -180 l 207 180 l 0 -180 z',\r\n        },\r\n        noteheadDiamondWhole: {\r\n            x_min: 0,\r\n            x_max: 270,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 386 -23 b 389 -16 387 -20 389 -19 b 383 -7 389 -13 386 -9 l 130 179 b 122 180 128 180 125 180 b 115 177 120 180 117 180 l 3 23 b 0 17 1 20 0 19 b 4 7 0 16 3 10 l 258 -179 b 264 -180 261 -179 262 -180 b 272 -176 268 -180 271 -179 z m 66 40 b 62 48 65 42 62 45 l 109 111 b 112 112 109 112 111 112 b 118 111 115 112 117 111 l 320 -37 b 324 -46 323 -39 324 -42 b 275 -111 278 -111 276 -111 b 268 -108 272 -111 271 -109 z',\r\n        },\r\n        noteheadDiamondHalf: {\r\n            x_min: 0,\r\n            x_max: 251,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 359 -7 b 361 0 360 -6 361 -3 b 359 7 361 3 360 4 l 189 177 b 180 180 186 179 183 180 b 174 177 179 180 176 179 l 4 7 b 0 0 1 4 0 3 b 4 -7 0 -3 1 -6 l 174 -177 b 180 -180 176 -180 179 -180 b 189 -177 183 -180 186 -180 z m 266 26 b 138 -71 266 -12 176 -71 b 96 -50 121 -71 108 -63 b 88 -24 89 -43 88 -32 b 215 73 88 13 177 73 b 266 26 238 73 266 50 z',\r\n        },\r\n        noteheadDiamondBlack: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 357 -6 b 360 1 359 -4 360 -1 b 357 9 360 4 359 7 l 189 177 b 180 180 187 179 184 180 b 171 177 177 180 173 179 l 3 9 b 0 1 0 6 0 4 b 4 -7 0 -1 1 -4 l 173 -177 b 180 -180 176 -180 177 -180 b 187 -177 181 -180 184 -180 z',\r\n        },\r\n        noteheadSquareWhite: {\r\n            x_min: 0,\r\n            x_max: 313,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 451 -180 l 451 180 l 0 180 l 0 -180 z m 40 -138 l 40 140 l 410 140 l 410 -138 z',\r\n        },\r\n        noteheadSquareBlack: {\r\n            x_min: 0,\r\n            x_max: 313,\r\n            y_min: -125,\r\n            y_max: 125,\r\n            ha: 250,\r\n            o: 'm 451 -180 l 451 180 l 0 180 l 0 -180 z',\r\n        },\r\n        noteheadParenthesis: {\r\n            x_min: -73,\r\n            x_max: 368,\r\n            y_min: -180,\r\n            y_max: 182,\r\n            ha: 362,\r\n            o: 'm 52 -249 b -30 -144 3 -212 -14 -190 b -52 4 -45 -102 -52 -56 b 52 252 -52 118 -36 179 l 46 262 b -105 3 -49 197 -105 124 b 45 -259 -105 -109 -48 -200 z m 382 -259 b 530 3 474 -202 530 -108 b 379 262 530 122 474 200 l 373 252 b 478 4 462 180 478 118 b 456 -144 478 -56 471 -102 b 373 -249 439 -190 422 -212 z',\r\n        },\r\n        noteheadParenthesisRight: {\r\n            x_min: -36,\r\n            x_max: 73,\r\n            y_min: -181,\r\n            y_max: 181,\r\n            ha: 362,\r\n            o: 'm -43 -261 b 105 1 49 -203 105 -109 b -46 261 105 121 49 199 l -52 251 b 53 3 37 179 53 117 b 32 -145 53 -58 46 -104 b -52 -251 14 -192 -3 -213 z',\r\n        },\r\n        noteheadParenthesisLeft: {\r\n            x_min: 0,\r\n            x_max: 109,\r\n            y_min: -181,\r\n            y_max: 181,\r\n            ha: 362,\r\n            o: 'm 157 -251 b 75 -145 108 -213 91 -192 b 53 3 60 -104 53 -58 b 157 251 53 117 69 177 l 151 261 b 0 1 56 196 0 122 b 150 -261 0 -111 58 -202 z',\r\n        },\r\n        augmentationDot: {\r\n            x_min: 0,\r\n            x_max: 100,\r\n            y_min: -50,\r\n            y_max: 50,\r\n            ha: 100,\r\n            o: 'm 144 0 b 72 72 144 40 112 72 b 0 0 32 72 0 40 b 72 -72 0 -40 32 -72 b 144 0 112 -72 144 -40 z',\r\n        },\r\n        tremolo1: {\r\n            x_min: -150,\r\n            x_max: 150,\r\n            y_min: -93,\r\n            y_max: 94,\r\n            ha: 187,\r\n            o: 'm 216 -45 l 216 135 l -216 46 l -216 -134 z',\r\n        },\r\n        flag8thUp: {\r\n            x_min: 0,\r\n            x_max: 264,\r\n            y_min: -810.1921176545985,\r\n            y_max: 9,\r\n            ha: 819.1921176545985,\r\n            o: 'm 343 -1138 b 380 -888 343 -1138 380 -1001 b 215 -395 380 -708 305 -539 b 58 -19 141 -281 81 -157 b 27 13 53 4 42 13 b 0 -9 12 13 0 9 l 0 -353 b 284 -688 95 -370 232 -566 b 318 -904 305 -737 318 -819 b 284 -1102 318 -969 308 -1037 b 279 -1123 281 -1110 279 -1117 b 302 -1165 279 -1146 294 -1159 b 343 -1138 311 -1171 336 -1162 z',\r\n        },\r\n        flag8thDown: {\r\n            x_min: 0,\r\n            x_max: 306,\r\n            y_min: -14,\r\n            y_max: 808,\r\n            ha: 822,\r\n            o: 'm 346 1094 b 376 897 366 1034 376 962 b 318 642 376 812 340 691 b 0 340 265 521 193 405 l 0 1 b 23 -20 0 -13 12 -20 b 58 12 36 -20 55 -12 b 262 387 82 148 189 274 b 441 881 353 530 441 701 b 400 1142 441 994 412 1096 b 377 1164 396 1158 387 1164 b 346 1094 356 1164 331 1136 z',\r\n        },\r\n        flag16thUp: {\r\n            x_min: 0,\r\n            x_max: 279,\r\n            y_min: -813,\r\n            y_max: 2,\r\n            ha: 815,\r\n            o: 'm 392 -1146 b 402 -988 397 -1139 402 -1057 l 402 -956 b 360 -783 402 -896 386 -837 b 359 -770 360 -779 359 -776 b 360 -760 359 -768 359 -765 b 396 -577 364 -752 396 -665 b 392 -526 396 -559 395 -543 b 236 -275 377 -428 340 -387 b 53 -16 158 -192 78 -168 b 24 3 50 0 33 3 b 0 -12 16 3 0 -1 l 0 -570 l 7 -570 b 298 -778 96 -573 199 -576 b 344 -992 331 -847 344 -917 b 333 -1120 344 -1034 340 -1077 b 331 -1133 331 -1126 331 -1129 b 363 -1171 331 -1152 343 -1171 b 392 -1146 373 -1171 383 -1165 z m 301 -661 b 223 -562 278 -625 253 -596 b 59 -331 156 -484 89 -449 b 58 -327 58 -330 58 -328 b 78 -312 58 -321 66 -312 l 89 -312 b 302 -464 177 -312 255 -393 b 341 -592 328 -501 341 -546 b 340 -621 341 -602 341 -611 b 330 -658 337 -632 337 -647 b 311 -667 328 -662 318 -667 b 301 -661 307 -667 304 -665 z',\r\n        },\r\n        flag16thDown: {\r\n            x_min: 0,\r\n            x_max: 290.8951581511223,\r\n            y_min: -9,\r\n            y_max: 812.0064,\r\n            ha: 821.0064,\r\n            o: 'm 346 1132 b 312 768 367 1011 367 880 b 7 559 213 566 96 562 l 0 559 l 0 1 b 24 -13 0 -6 10 -13 b 53 6 35 -13 50 -10 b 406 516 88 228 372 289 b 410 567 409 531 410 549 b 374 750 410 655 379 742 b 373 760 373 753 373 756 b 374 773 373 766 374 769 b 405 1138 426 881 428 1022 b 370 1169 397 1171 387 1169 b 346 1132 353 1168 341 1156 z m 325 657 b 344 647 333 657 343 652 b 354 611 351 636 351 622 b 356 582 356 600 356 590 b 317 454 356 534 343 491 b 89 302 269 383 177 302 l 78 302 b 58 317 66 302 58 310 b 59 321 58 318 58 320 b 238 552 89 439 170 472 b 315 651 268 585 292 613 b 325 657 318 655 321 657 z',\r\n        },\r\n        flag32ndUp: {\r\n            x_min: 0,\r\n            x_max: 261,\r\n            y_min: -812,\r\n            y_max: 149,\r\n            ha: 961,\r\n            o: 'm 374 -969 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 366 -289 369 -315 369 -302 b 220 -58 350 -202 317 -163 b 46 187 148 20 71 43 b 20 215 45 200 35 215 b 0 197 12 215 0 207 l 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 315 -657 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 56 -390 147 -527 88 -495 b 73 -367 53 -380 60 -367 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 z',\r\n        },\r\n        flag32ndDown: {\r\n            x_min: 0,\r\n            x_max: 273,\r\n            y_min: -172,\r\n            y_max: 812,\r\n            ha: 984,\r\n            o: 'm 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -229 b 20 -248 0 -242 9 -248 b 48 -219 35 -248 46 -232 b 229 36 72 -69 154 -46 b 380 278 330 145 364 186 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 356 783 356 782 356 783 l 351 791 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z m 330 350 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 z',\r\n        },\r\n        flag64thUp: {\r\n            x_min: 0,\r\n            x_max: 261,\r\n            y_min: -812,\r\n            y_max: 347,\r\n            ha: 1159,\r\n            o: 'm 374 -969 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 337 -203 369 -287 359 -242 b 369 -43 350 -167 369 -104 b 366 -4 369 -30 367 -17 b 220 228 350 84 317 122 b 46 472 148 305 71 328 b 20 500 45 485 32 500 b 0 482 10 500 0 492 l 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 z m 300 24 b 321 -45 315 -4 321 -26 b 317 -75 321 -56 318 -65 l 298 -145 b 220 -58 278 -121 253 -94 b 58 187 148 20 82 43 b 56 193 58 189 58 192 b 300 24 138 193 220 157 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 315 -657 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 55 -386 147 -527 84 -497 b 73 -367 52 -376 63 -367 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 z',\r\n        },\r\n        flag64thDown: {\r\n            x_min: 0,\r\n            x_max: 273,\r\n            y_min: -376,\r\n            y_max: 812,\r\n            ha: 1188,\r\n            o: 'm 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -523 b 20 -541 0 -534 9 -541 b 48 -513 35 -541 46 -526 b 229 -258 72 -363 154 -340 b 380 -16 330 -148 364 -108 b 384 27 383 -1 384 13 b 351 189 384 88 366 151 b 380 278 366 216 374 243 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 356 783 356 782 356 783 l 351 791 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z m 330 350 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 z m 330 56 b 334 26 331 46 334 37 b 311 -46 334 7 328 -16 b 56 -222 229 -184 137 -222 b 229 36 75 -86 145 -55 b 311 128 264 73 289 102 z',\r\n        },\r\n        flag128thUp: {\r\n            x_min: 0,\r\n            x_max: 261,\r\n            y_min: -812,\r\n            y_max: 533,\r\n            ha: 1345,\r\n            o: 'm 374 -969 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 337 -203 369 -287 359 -242 b 369 -43 350 -167 369 -104 b 366 -4 369 -30 367 -17 b 341 75 360 26 353 50 b 369 222 354 111 369 167 b 366 264 369 236 369 251 b 220 495 350 351 317 390 b 46 740 148 573 71 596 b 22 768 45 753 35 768 b 0 750 10 768 0 760 l 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 z m 300 292 b 321 223 315 264 321 242 b 317 193 321 212 318 203 b 301 135 314 180 308 158 b 220 228 281 161 255 190 b 55 461 151 304 79 327 b 300 292 134 461 220 426 z m 300 24 b 321 -45 315 -4 321 -26 b 317 -75 321 -56 318 -65 l 298 -145 b 220 -58 278 -121 253 -94 b 56 187 148 20 81 43 b 55 193 56 189 56 192 b 300 24 137 193 220 157 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 315 -657 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 55 -386 147 -527 84 -497 b 73 -367 53 -376 62 -367 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 z',\r\n        },\r\n        flag128thDown: {\r\n            x_min: 0,\r\n            x_max: 273,\r\n            y_min: -580,\r\n            y_max: 812,\r\n            ha: 1392,\r\n            o: 'm 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -816 b 20 -835 0 -828 7 -835 b 48 -806 33 -835 46 -819 b 229 -552 72 -657 154 -634 b 380 -310 330 -442 364 -402 b 384 -266 383 -295 384 -281 b 351 -105 384 -206 366 -143 b 384 27 372 -66 384 -16 b 351 189 384 88 366 151 b 380 278 366 216 374 243 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 356 783 356 782 356 783 l 351 791 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z m 330 350 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 z m 330 56 b 334 26 331 46 334 37 b 311 -46 334 7 328 -16 b 56 -222 229 -184 137 -222 b 229 36 75 -86 145 -55 b 311 128 264 73 289 102 z m 330 -238 b 334 -268 331 -248 334 -256 b 311 -340 334 -287 328 -310 b 56 -516 229 -478 137 -516 b 229 -258 75 -380 145 -348 b 311 -166 264 -220 289 -192 z',\r\n        },\r\n        accidentalFlat: {\r\n            x_min: 0,\r\n            x_max: 226,\r\n            y_min: -175,\r\n            y_max: 439,\r\n            ha: 614,\r\n            o: 'm 17 -245 b 30 -252 22 -251 26 -252 b 39 -249 35 -252 39 -249 b 153 -161 82 -225 117 -186 b 325 82 281 -72 325 16 b 196 220 325 164 262 216 b 117 196 171 220 137 209 b 85 176 108 189 92 176 b 78 177 82 176 81 176 b 62 202 68 181 62 192 b 72 608 63 233 72 579 b 45 632 72 624 59 632 b 0 592 24 632 1 618 b 17 -245 0 592 6 -230 z m 68 -117 b 63 27 68 -117 63 -30 b 66 73 63 50 65 68 b 167 144 76 102 134 144 b 226 60 209 144 226 96 b 98 -134 226 -17 160 -95 b 84 -138 92 -137 88 -138 b 68 -117 71 -138 68 -124 z',\r\n        },\r\n        accidentalNatural: {\r\n            x_min: 0,\r\n            x_max: 168,\r\n            y_min: -335,\r\n            y_max: 341,\r\n            ha: 676,\r\n            o: 'm 203 261 b 197 259 200 261 199 259 b 68 226 197 259 105 226 b 53 233 59 226 53 228 l 53 474 b 36 491 53 484 45 491 l 17 491 b 0 474 7 491 0 484 l 0 -268 b 13 -281 0 -276 4 -281 l 16 -279 b 22 -278 17 -279 20 -279 b 164 -235 42 -269 122 -235 b 189 -251 179 -235 189 -239 l 189 -465 b 206 -482 189 -475 196 -482 l 225 -482 b 242 -465 233 -482 242 -475 l 242 258 b 230 269 242 265 236 269 b 225 268 229 269 226 269 z m 53 56 b 176 114 53 76 141 114 b 189 107 184 114 189 112 l 189 -42 b 71 -101 189 -68 107 -101 b 53 -92 60 -101 53 -98 z',\r\n        },\r\n        accidentalSharp: {\r\n            x_min: 0,\r\n            x_max: 249,\r\n            y_min: -348,\r\n            y_max: 350,\r\n            ha: 698,\r\n            o: 'm 341 170 b 359 194 351 174 359 186 l 359 297 b 348 308 359 304 354 308 b 341 307 346 308 344 308 b 305 294 341 307 312 295 b 285 312 295 294 285 301 l 285 488 b 265 504 285 497 276 504 b 242 488 251 504 242 497 l 242 301 b 223 259 240 287 236 268 b 132 223 206 249 157 229 b 115 252 120 223 115 240 l 115 425 b 95 441 115 433 105 441 b 72 425 81 441 72 433 l 72 230 b 55 192 72 210 63 196 b 17 176 46 187 17 176 b 0 153 7 173 0 161 l 0 50 b 13 37 0 42 4 37 l 16 39 b 50 53 17 39 39 48 l 52 55 b 72 29 63 55 72 40 l 72 -114 b 56 -147 72 -130 65 -143 b 17 -163 48 -150 17 -163 b 0 -186 7 -166 0 -177 l 0 -288 b 13 -301 0 -297 4 -301 l 16 -300 b 50 -287 17 -300 37 -291 b 55 -285 52 -285 53 -285 b 72 -308 65 -285 72 -301 l 72 -485 b 91 -501 72 -494 81 -501 b 115 -485 105 -501 115 -494 l 115 -285 b 130 -253 115 -266 122 -256 l 217 -217 b 219 -217 217 -217 219 -217 l 222 -216 b 242 -242 235 -216 242 -233 l 242 -422 b 261 -438 242 -431 251 -438 b 285 -422 276 -438 285 -431 l 285 -217 b 301 -184 285 -206 291 -189 b 341 -168 311 -180 341 -168 b 359 -144 351 -164 359 -153 l 359 -42 b 348 -30 359 -35 354 -30 b 341 -32 346 -30 344 -30 l 304 -46 b 285 -20 295 -46 285 -37 l 285 114 b 304 156 285 124 292 151 z m 242 -65 b 132 -122 233 -94 166 -122 b 115 -115 124 -122 117 -120 b 111 -43 112 -109 111 -78 b 115 63 111 1 112 52 b 220 118 118 88 184 118 b 242 109 230 118 239 115 b 248 27 245 102 248 66 b 242 -65 248 -12 245 -52 z',\r\n        },\r\n        accidentalDoubleSharp: {\r\n            x_min: 0,\r\n            x_max: 247,\r\n            y_min: -125,\r\n            y_max: 127,\r\n            ha: 252,\r\n            o: 'm 274 -46 b 206 1 258 -37 206 -9 b 274 50 206 22 253 43 b 278 50 275 50 276 50 l 287 49 b 346 63 304 49 331 52 b 356 115 353 71 356 92 b 292 183 356 174 351 183 b 233 173 266 183 240 180 b 226 117 228 168 226 143 b 179 49 219 101 196 49 b 130 117 158 49 135 96 b 118 173 130 141 125 167 b 66 183 112 180 89 183 b 7 173 42 183 16 180 b 0 120 3 170 0 145 b 7 63 0 94 3 68 b 68 49 17 55 43 49 b 82 50 73 49 78 50 b 150 3 98 42 150 13 b 84 -46 150 -16 104 -39 l 69 -46 b 7 -56 43 -46 16 -49 b 0 -111 3 -60 0 -85 b 7 -166 0 -137 3 -163 b 65 -180 17 -174 40 -180 b 118 -166 86 -180 109 -176 b 130 -111 127 -158 130 -134 b 132 -105 130 -109 131 -107 b 177 -45 141 -85 158 -45 b 226 -111 196 -45 220 -91 b 233 -166 226 -137 228 -161 b 291 -180 243 -174 266 -180 b 356 -114 346 -180 356 -166 b 346 -56 356 -89 351 -63 b 288 -46 338 -49 312 -46 z',\r\n        },\r\n        accidentalDoubleFlat: {\r\n            x_min: 0,\r\n            x_max: 411,\r\n            y_min: -175,\r\n            y_max: 437,\r\n            ha: 612,\r\n            o: 'm 452 217 b 384 194 426 217 408 207 b 350 176 374 189 363 176 b 343 177 347 176 344 176 b 328 202 333 180 328 190 b 337 606 328 232 337 579 b 310 629 337 622 324 629 b 265 592 291 629 268 616 b 269 194 265 592 266 395 b 196 217 248 209 223 217 l 187 217 b 120 194 160 217 143 207 b 85 176 108 189 98 176 b 78 177 82 176 81 176 b 62 202 68 180 62 190 b 72 606 62 232 72 579 b 45 629 72 622 59 629 b 0 592 24 629 1 616 b 17 -245 0 592 7 -232 b 30 -252 22 -251 26 -252 b 39 -249 35 -252 39 -249 b 153 -161 84 -226 120 -186 b 274 -50 206 -124 246 -85 b 284 -245 276 -158 279 -240 b 295 -252 288 -251 292 -252 b 304 -249 300 -252 304 -249 b 416 -163 348 -226 383 -186 b 592 82 546 -72 592 16 b 461 217 592 163 528 216 z m 96 -134 b 84 -138 92 -137 86 -138 b 68 -115 72 -138 68 -124 b 63 26 68 -115 63 -30 b 66 72 63 49 65 66 b 168 144 75 101 134 144 b 226 59 212 144 226 95 b 96 -134 226 -22 161 -94 z m 361 -134 b 348 -138 356 -137 351 -138 b 333 -115 337 -138 333 -124 b 328 39 333 -115 328 -16 b 330 72 328 55 328 68 b 433 144 338 101 399 144 b 468 130 448 144 459 140 b 490 59 481 112 490 88 b 361 -134 490 -22 426 -94 z',\r\n        },\r\n        accidentalParensLeft: {\r\n            x_min: 0,\r\n            x_max: 141,\r\n            y_min: -248,\r\n            y_max: 247,\r\n            ha: 495,\r\n            o: 'm 203 331 l 203 351 b 202 356 203 354 203 356 b 0 0 60 281 0 140 b 199 -357 0 -144 60 -269 b 203 -354 200 -357 203 -356 l 203 -333 b 200 -327 203 -330 202 -328 b 86 0 118 -253 86 -160 b 200 324 86 158 120 251 b 203 331 202 325 203 327 z',\r\n        },\r\n        accidentalParensRight: {\r\n            x_min: 0,\r\n            x_max: 141,\r\n            y_min: -248,\r\n            y_max: 247,\r\n            ha: 495,\r\n            o: 'm 0 331 b 3 324 0 327 1 325 b 117 0 84 251 117 158 b 3 -327 117 -160 85 -253 b 0 -333 1 -328 0 -330 l 0 -354 b 4 -357 0 -356 3 -357 b 203 0 143 -269 203 -144 b 1 356 203 140 143 281 b 0 351 0 356 0 354 z',\r\n        },\r\n        accidentalQuarterToneFlatStein: {\r\n            x_min: 1,\r\n            x_max: 227,\r\n            y_min: -175,\r\n            y_max: 439,\r\n            ha: 614,\r\n            o: 'm 310 -245 b 327 592 321 -230 327 592 b 282 632 325 618 302 632 b 255 608 268 632 255 624 b 265 202 255 579 264 233 b 249 177 265 192 259 181 b 242 176 246 176 245 176 b 210 196 235 176 219 189 b 131 220 190 209 156 220 b 1 85 65 216 1 164 b 174 -161 1 16 46 -72 b 288 -249 210 -186 245 -225 b 297 -252 288 -249 292 -252 b 310 -245 301 -252 305 -251 z m 259 -117 b 243 -138 259 -124 256 -138 b 229 -134 239 -138 235 -137 b 101 60 167 -95 101 -17 b 160 144 101 96 118 144 b 261 73 193 144 251 102 b 264 27 262 68 264 50 b 259 -117 264 -30 259 -117 z',\r\n        },\r\n        accidentalThreeQuarterTonesFlatZimmermann: {\r\n            x_min: 1,\r\n            x_max: 466,\r\n            y_min: -175,\r\n            y_max: 439,\r\n            ha: 614,\r\n            o: 'm 363 -245 b 376 -252 367 -251 372 -252 b 384 -249 380 -252 384 -249 b 497 -161 428 -226 464 -186 b 671 84 625 -72 671 16 b 541 220 671 164 606 217 b 513 217 531 220 523 219 b 464 196 495 212 480 206 b 431 176 452 189 442 176 b 423 177 428 176 426 176 b 408 202 413 180 408 190 l 419 608 b 392 632 419 625 406 632 b 346 592 372 632 347 618 b 363 -245 346 592 351 -230 z m 289 -249 b 297 -252 289 -249 292 -252 b 310 -245 300 -252 305 -251 b 328 592 321 -230 328 592 b 282 631 327 618 302 631 b 255 608 268 631 255 624 l 266 202 b 251 177 266 190 261 180 b 243 176 248 176 246 176 b 210 196 232 176 222 189 b 164 216 196 204 180 210 l 163 217 b 132 220 151 219 143 220 b 1 84 65 217 1 163 b 177 -163 1 16 48 -72 b 289 -249 210 -186 245 -226 z m 262 72 b 265 26 264 66 265 49 b 261 -115 265 -30 261 -115 b 245 -138 261 -124 258 -138 b 230 -134 240 -138 236 -137 b 102 60 166 -92 102 -20 b 124 128 102 88 111 112 b 161 144 134 138 147 144 b 199 134 173 144 184 141 b 262 72 219 122 256 92 z m 413 -115 b 409 26 413 -115 409 -30 b 412 72 409 49 410 66 b 514 144 420 102 480 144 b 570 60 557 144 570 96 b 442 -134 570 -23 508 -91 b 429 -138 436 -137 433 -138 b 413 -115 418 -138 413 -124 z',\r\n        },\r\n        accidentalQuarterToneSharpStein: {\r\n            x_min: 0,\r\n            x_max: 179,\r\n            y_min: -353,\r\n            y_max: 307,\r\n            ha: 660,\r\n            o: 'm 258 240 b 246 252 258 248 252 252 b 240 251 245 252 242 252 b 168 225 240 251 171 225 b 150 253 156 225 150 240 l 150 426 b 130 442 150 435 141 442 b 105 418 108 442 105 429 l 105 230 b 91 193 105 219 101 202 b 17 161 65 183 42 171 b 0 138 9 158 0 147 l 0 36 b 13 23 0 27 4 23 l 16 24 b 86 53 17 24 73 49 l 88 55 b 107 30 98 55 107 42 l 107 -114 b 92 -145 107 -130 101 -143 l 17 -177 b 0 -200 9 -180 0 -192 l 0 -302 b 13 -315 0 -311 4 -315 l 16 -314 b 85 -285 17 -314 72 -291 b 105 -312 92 -282 105 -301 l 105 -492 b 125 -508 105 -501 114 -508 b 150 -484 147 -508 150 -498 l 150 -285 b 151 -274 150 -281 150 -278 b 164 -253 153 -265 158 -256 b 240 -225 176 -251 240 -225 b 258 -202 249 -222 258 -210 l 258 -99 b 245 -86 258 -91 253 -86 l 242 -88 b 240 -88 242 -88 240 -88 l 240 -86 b 168 -115 240 -86 174 -114 b 148 -91 158 -115 148 -107 l 148 43 b 167 85 148 55 156 81 b 240 114 180 91 240 114 b 258 138 249 118 258 128 z',\r\n        },\r\n        accidentalThreeQuarterTonesSharpStein: {\r\n            x_min: 3,\r\n            x_max: 317,\r\n            y_min: -347,\r\n            y_max: 369,\r\n            ha: 716,\r\n            o: 'm 456 324 b 448 336 456 330 454 336 b 393 317 445 336 400 320 b 389 315 392 315 390 315 b 383 325 386 315 383 318 l 383 508 b 360 531 383 528 379 531 b 337 508 341 531 337 527 l 337 318 b 325 291 337 300 334 294 b 268 268 320 288 287 276 b 253 281 256 268 253 274 l 253 464 b 230 487 253 484 249 487 b 207 464 212 487 207 482 l 207 264 b 194 240 207 253 204 245 l 132 217 b 131 217 132 217 132 217 l 130 216 b 118 229 122 216 118 220 l 118 420 b 95 444 118 439 114 444 b 72 420 76 444 72 439 l 72 212 b 60 190 72 197 68 193 l 16 173 b 4 161 9 170 4 167 l 4 50 b 13 39 4 45 9 39 b 58 55 16 39 46 49 b 63 56 60 56 62 56 b 72 42 71 56 72 50 l 72 -125 b 58 -150 72 -137 65 -147 l 16 -166 b 4 -177 9 -168 4 -171 l 4 -289 b 14 -301 4 -295 9 -301 b 53 -287 16 -301 40 -291 b 62 -285 56 -285 59 -285 b 72 -298 69 -285 72 -289 l 72 -477 b 95 -500 72 -495 76 -500 b 118 -477 114 -500 118 -495 l 118 -278 b 127 -259 118 -269 121 -261 l 196 -232 b 207 -243 204 -232 207 -235 l 207 -432 b 230 -455 207 -452 212 -455 b 253 -432 249 -455 253 -451 l 253 -228 b 268 -204 253 -216 259 -207 l 320 -186 b 328 -183 323 -184 325 -183 b 337 -194 334 -183 337 -187 l 337 -387 b 360 -410 337 -408 341 -410 b 383 -387 379 -410 383 -406 l 383 -174 b 395 -157 383 -166 390 -158 l 445 -138 b 456 -127 452 -135 456 -132 l 456 -14 b 448 -3 456 -10 454 -3 b 397 -22 445 -3 408 -17 l 396 -23 b 383 -6 387 -23 383 -16 l 383 163 b 392 181 383 173 384 179 b 445 202 397 183 445 202 b 456 213 452 203 456 207 z m 337 -45 b 266 -78 333 -56 287 -78 b 258 -75 262 -78 259 -76 b 253 19 255 -71 253 -27 b 258 130 253 69 255 122 b 333 163 264 141 315 163 b 337 161 334 163 337 161 b 341 78 340 157 341 120 b 337 -45 341 24 340 -37 z m 118 -127 b 114 -48 114 -121 114 -86 b 118 78 114 6 115 68 b 200 114 122 91 180 114 b 207 111 204 114 206 112 b 212 22 210 107 212 66 b 207 -94 212 -29 210 -85 b 127 -130 203 -108 148 -130 b 118 -127 122 -130 120 -128 z',\r\n        },\r\n        accidentalBuyukMucennebFlat: {\r\n            x_min: 1,\r\n            x_max: 287,\r\n            y_min: -174,\r\n            y_max: 438,\r\n            ha: 612,\r\n            o: 'm 379 452 b 370 464 379 458 377 464 b 164 389 366 464 170 392 b 156 396 163 389 156 393 b 157 436 157 409 157 428 b 167 452 157 445 161 449 b 366 526 173 455 366 526 b 379 540 374 528 379 534 l 379 611 b 370 622 379 616 377 622 b 170 550 366 622 174 552 b 160 557 163 550 160 554 b 161 608 160 585 161 602 b 134 631 161 624 148 631 b 89 590 114 631 91 616 l 89 528 b 81 517 89 526 88 518 b 16 491 76 514 16 491 b 1 480 6 490 1 485 l 1 406 b 13 395 1 400 4 395 l 14 396 b 79 419 16 396 72 415 b 89 412 86 419 89 415 b 91 376 89 399 89 386 b 82 359 91 364 89 361 b 16 331 76 356 16 331 b 1 321 6 331 1 328 l 1 248 b 13 236 1 242 4 236 b 79 262 16 236 71 258 b 92 251 89 262 92 256 b 107 -242 95 23 101 -236 b 120 -251 111 -249 115 -251 b 128 -248 124 -251 128 -248 b 240 -160 171 -225 207 -184 b 413 84 367 -71 413 16 b 284 220 413 166 350 216 b 207 196 259 220 229 209 b 170 176 196 190 184 176 l 168 177 b 151 203 157 181 151 192 b 153 269 151 210 151 236 b 163 292 153 275 153 289 b 366 367 173 297 366 367 b 379 383 374 370 379 376 z m 186 -132 b 173 -137 180 -135 176 -137 b 157 -114 161 -137 157 -122 b 153 35 157 -114 153 -22 b 154 73 153 53 153 68 b 219 135 160 92 197 124 b 255 144 232 141 243 144 b 292 130 269 144 282 140 b 314 62 305 114 314 91 b 186 -132 314 -17 251 -94 z',\r\n        },\r\n        accidentalBakiyeFlat: {\r\n            x_min: -1,\r\n            x_max: 286,\r\n            y_min: -175,\r\n            y_max: 439,\r\n            ha: 614,\r\n            o: 'm 377 454 b 369 467 377 458 376 467 b 363 465 367 467 364 467 b 161 390 363 465 167 393 b 153 399 154 390 153 395 b 157 608 154 494 157 593 b 130 632 157 624 144 632 b 86 592 111 632 88 618 b 88 377 86 592 86 501 b 76 356 88 373 88 360 l 12 331 b -1 320 3 330 -1 327 l -1 248 b 9 236 -1 242 1 236 b 81 264 12 236 78 261 b 89 258 86 264 89 261 b 104 -245 92 30 96 -236 b 115 -252 108 -251 112 -252 b 124 -249 120 -252 124 -249 b 239 -161 167 -226 203 -186 b 412 84 367 -72 412 17 b 282 220 412 166 348 216 b 255 216 274 220 264 219 b 203 196 238 212 222 206 b 171 177 193 189 177 177 b 163 179 168 177 166 177 b 147 202 153 181 147 192 b 147 216 147 204 147 209 l 150 262 b 150 276 150 269 150 275 b 158 291 150 287 154 289 b 363 370 163 292 363 370 b 377 384 373 373 377 379 z m 181 -134 b 167 -138 176 -137 171 -138 b 153 -117 156 -138 153 -125 b 148 27 153 -117 148 -30 b 151 73 148 50 150 68 b 255 144 161 105 219 144 b 312 62 298 144 312 99 b 181 -134 312 -19 249 -96 z',\r\n        },\r\n        accidentalKomaSharp: {\r\n            x_min: 0,\r\n            x_max: 229,\r\n            y_min: -337,\r\n            y_max: 322,\r\n            ha: 659,\r\n            o: 'm 312 151 b 330 176 323 156 330 166 l 330 278 b 320 289 330 285 327 289 b 312 288 318 289 315 289 b 200 246 312 288 203 248 b 181 275 187 246 181 264 l 181 448 b 163 464 181 456 173 464 b 138 441 140 464 138 452 l 138 253 b 122 215 137 240 132 225 b 17 177 92 203 45 177 b 0 153 7 173 0 163 l 0 50 b 10 39 0 43 4 39 b 17 40 13 39 14 39 l 128 81 b 138 52 138 81 138 63 l 138 -91 b 124 -124 138 -107 132 -120 b 17 -167 115 -127 17 -167 b 0 -192 7 -171 0 -181 l 0 -294 b 10 -305 0 -301 4 -305 b 17 -304 13 -305 14 -305 b 128 -261 17 -304 117 -264 l 130 -259 b 138 -276 137 -259 138 -268 l 138 -469 b 157 -485 138 -478 147 -485 b 181 -462 179 -485 181 -475 l 181 -262 b 183 -252 181 -258 181 -255 b 197 -232 186 -243 190 -235 b 312 -187 207 -228 312 -187 b 330 -163 323 -183 330 -173 l 330 -60 b 320 -49 330 -53 327 -49 b 312 -50 318 -49 315 -49 l 200 -94 b 193 -95 197 -95 194 -95 b 181 -68 183 -95 181 -85 l 181 66 b 200 108 181 92 189 104 z',\r\n        },\r\n        accidentalKucukMucennebSharp: {\r\n            x_min: -1,\r\n            x_max: 339,\r\n            y_min: -338,\r\n            y_max: 321,\r\n            ha: 659,\r\n            o: 'm 264 92 b 271 102 264 98 265 99 l 395 150 b 412 174 405 154 412 164 l 412 276 b 402 288 412 284 409 288 b 395 287 400 288 397 288 b 282 245 395 287 285 246 b 264 274 269 245 264 262 l 264 446 b 245 462 264 455 255 462 b 220 439 222 462 220 451 l 220 252 b 204 213 219 239 215 223 b 99 176 174 202 127 176 b 82 151 89 171 82 161 l 82 49 b 92 37 82 42 86 37 b 99 39 95 37 96 37 l 210 79 b 216 81 212 81 215 81 b 220 78 219 81 220 79 l 220 56 b 216 46 220 52 220 48 b 16 -29 210 45 16 -29 b -1 -45 4 -32 -1 -36 l -1 -138 b 12 -154 -1 -145 3 -154 l 215 -79 b 220 -84 219 -79 220 -81 l 220 -105 b 210 -122 220 -115 219 -120 b 99 -168 202 -127 99 -168 b 82 -193 89 -173 82 -183 l 82 -295 b 92 -307 82 -302 86 -307 b 99 -305 95 -307 96 -307 b 210 -262 99 -305 199 -265 l 212 -261 b 220 -278 219 -261 220 -269 l 220 -471 b 239 -487 220 -480 229 -487 b 264 -464 261 -487 264 -477 l 264 -264 b 265 -253 264 -259 264 -256 b 279 -233 268 -245 272 -236 b 395 -189 289 -229 395 -189 b 412 -164 405 -184 412 -174 l 412 -62 b 402 -50 412 -55 409 -50 b 395 -52 400 -50 397 -50 l 278 -96 b 264 -86 268 -96 264 -94 l 264 -68 b 269 -59 264 -62 265 -60 b 471 17 274 -58 471 17 b 488 36 484 22 488 27 l 488 127 b 475 144 488 134 487 144 l 472 141 b 471 141 472 141 471 141 l 471 143 b 272 68 471 143 282 71 l 269 66 b 264 71 264 66 264 69 z',\r\n        },\r\n        accidentalKoron: {\r\n            x_min: 0,\r\n            x_max: 300,\r\n            y_min: -472,\r\n            y_max: 157,\r\n            ha: 629,\r\n            o: 'm 432 -4 b 415 10 432 1 418 9 l 4 226 b 0 223 1 226 0 225 l 0 -672 b 7 -680 0 -677 3 -680 l 45 -680 b 52 -672 49 -680 52 -677 l 52 -193 l 415 -22 b 432 -4 418 -20 432 -13 z m 52 -137 l 52 144 l 327 -7 z',\r\n        },\r\n        accidentalSori: {\r\n            x_min: 0,\r\n            x_max: 421,\r\n            y_min: -318,\r\n            y_max: 328,\r\n            ha: 646,\r\n            o: 'm 606 10 b 589 23 606 16 592 22 l 382 109 l 382 465 b 374 472 382 469 379 472 l 337 472 b 330 465 333 472 330 469 l 330 132 l 183 194 l 183 425 b 176 432 183 429 180 432 l 138 432 b 131 425 134 432 131 429 l 131 216 l 3 269 b 0 265 0 269 0 266 l 0 223 b 3 213 0 216 0 215 l 131 160 l 131 -150 l 3 -203 b 0 -212 0 -204 0 -206 l 0 -255 b 3 -259 0 -258 1 -259 l 131 -204 l 131 -451 b 138 -458 131 -455 134 -458 l 176 -458 b 183 -451 180 -458 183 -455 l 183 -183 l 330 -120 l 330 -410 b 337 -418 330 -415 333 -418 l 374 -418 b 382 -410 379 -418 382 -415 l 382 -98 l 589 -9 b 606 10 592 -9 606 0 z m 183 -128 l 183 138 l 330 76 l 330 -66 z m 382 -45 l 382 55 l 501 6 z',\r\n        },\r\n        articAccentAbove: {\r\n            x_min: 0,\r\n            x_max: 339,\r\n            y_min: 1,\r\n            y_max: 245,\r\n            ha: 244,\r\n            o: 'm 469 151 b 488 177 488 156 488 166 b 469 203 488 189 488 197 l 37 350 b 24 353 32 351 26 353 b 3 333 12 353 7 344 b 0 318 1 327 0 323 b 20 298 0 311 4 304 b 346 187 20 298 331 193 b 356 177 353 186 356 181 b 344 167 356 173 353 170 b 20 58 328 163 20 58 b 0 36 4 50 0 43 b 3 23 0 32 1 27 b 23 1 7 13 13 1 b 29 3 24 1 27 1 z',\r\n        },\r\n        articAccentBelow: {\r\n            x_min: 0,\r\n            x_max: 339,\r\n            y_min: -244,\r\n            y_max: 0,\r\n            ha: 244,\r\n            o: 'm 469 -202 b 488 -176 488 -197 488 -187 b 469 -150 488 -164 488 -156 l 37 -3 b 24 0 32 -1 26 0 b 3 -20 12 0 7 -9 b 0 -35 1 -26 0 -30 b 20 -55 0 -42 4 -49 b 346 -166 20 -55 331 -160 b 356 -176 353 -167 356 -171 b 344 -186 356 -180 353 -183 b 20 -295 328 -190 20 -295 b 0 -317 4 -302 0 -310 b 3 -330 0 -321 1 -325 b 23 -351 7 -340 13 -351 b 29 -350 24 -351 27 -351 z',\r\n        },\r\n        articTenutoAbove: {\r\n            x_min: -1,\r\n            x_max: 338,\r\n            y_min: 0,\r\n            y_max: 48,\r\n            ha: 48,\r\n            o: 'm 452 0 b 487 35 485 0 487 16 b 452 69 487 53 487 69 l 33 69 b -1 35 -1 69 -1 53 b 33 0 -1 16 -1 0 z',\r\n        },\r\n        articTenutoBelow: {\r\n            x_min: -1,\r\n            x_max: 338,\r\n            y_min: -48,\r\n            y_max: 0,\r\n            ha: 48,\r\n            o: 'm 452 -69 b 487 -35 485 -69 487 -53 b 452 0 487 -16 487 0 l 33 0 b -1 -35 -1 0 -1 -16 b 33 -69 -1 -53 -1 -69 z',\r\n        },\r\n        articStaccatoAbove: {\r\n            x_min: 0,\r\n            x_max: 84,\r\n            y_min: 0,\r\n            y_max: 84,\r\n            ha: 84,\r\n            o: 'm 121 60 b 60 121 121 94 94 121 b 0 60 27 121 0 94 b 60 0 0 27 27 0 b 121 60 94 0 121 27 z',\r\n        },\r\n        articStaccatoBelow: {\r\n            x_min: 0,\r\n            x_max: 84,\r\n            y_min: -84,\r\n            y_max: 0,\r\n            ha: 84,\r\n            o: 'm 121 -60 b 60 0 121 -27 94 0 b 0 -60 27 0 0 -27 b 60 -121 0 -94 27 -121 b 121 -60 94 -121 121 -94 z',\r\n        },\r\n        articStaccatissimoAbove: {\r\n            x_min: 1,\r\n            x_max: 100,\r\n            y_min: -2,\r\n            y_max: 293,\r\n            ha: 295,\r\n            o: 'm 72 422 b 1 390 35 422 3 409 b 72 -3 1 369 39 -3 b 144 389 108 -3 144 356 b 72 422 144 410 111 422 z',\r\n        },\r\n        articStaccatissimoBelow: {\r\n            x_min: 1,\r\n            x_max: 100,\r\n            y_min: -295,\r\n            y_max: 0,\r\n            ha: 295,\r\n            o: 'm 72 -425 b 144 -392 111 -425 144 -413 b 72 0 144 -359 108 0 b 1 -393 39 0 1 -372 b 72 -425 3 -412 35 -425 z',\r\n        },\r\n        articMarcatoAbove: {\r\n            x_min: -1,\r\n            x_max: 235,\r\n            y_min: -1,\r\n            y_max: 253,\r\n            ha: 254,\r\n            o: 'm 181 356 b 167 364 177 361 173 364 b 153 356 157 364 153 356 l 0 23 b -1 16 -1 20 -1 19 b 9 0 -1 9 1 1 b 16 -1 10 -1 14 -1 b 32 9 22 -1 29 1 b 112 186 32 9 109 180 b 118 190 114 189 115 190 b 127 186 121 190 124 189 b 209 9 128 180 209 9 b 225 0 213 3 219 0 l 323 0 b 338 16 333 1 338 7 b 337 23 338 19 338 22 z',\r\n        },\r\n        articMarcatoBelow: {\r\n            x_min: -1,\r\n            x_max: 235,\r\n            y_min: -254,\r\n            y_max: 0,\r\n            ha: 254,\r\n            o: 'm 156 -357 b 170 -366 160 -363 164 -366 b 184 -357 180 -366 184 -357 l 337 -24 b 338 -17 338 -22 338 -20 b 328 -1 338 -10 336 -3 b 321 0 327 0 323 0 b 305 -10 315 0 308 -3 b 225 -187 305 -10 228 -181 b 219 -192 223 -190 222 -192 b 210 -187 216 -192 213 -190 b 128 -10 209 -181 128 -10 b 112 -1 124 -4 118 -1 l 14 -1 b -1 -17 4 -3 -1 -9 b 0 -24 -1 -20 -1 -23 z',\r\n        },\r\n        fermataAbove: {\r\n            x_min: 3,\r\n            x_max: 605,\r\n            y_min: -3,\r\n            y_max: 329,\r\n            ha: 332,\r\n            o: 'm 435 318 b 818 36 742 318 804 91 b 821 26 819 32 819 27 b 851 -4 831 6 837 -4 b 871 16 864 -4 871 1 b 870 30 871 20 871 24 b 438 474 780 471 480 474 b 6 30 392 474 94 471 b 4 14 4 24 4 19 b 23 -4 4 0 12 -4 b 52 26 36 -4 43 6 b 56 39 53 27 55 33 b 435 318 73 98 138 318 z m 516 75 b 436 153 516 117 480 153 b 359 75 395 153 359 117 b 436 -4 359 32 395 -4 b 516 75 480 -4 516 32 z',\r\n        },\r\n        fermataBelow: {\r\n            x_min: 3,\r\n            x_max: 605,\r\n            y_min: -332,\r\n            y_max: 0,\r\n            ha: 332,\r\n            o: 'm 435 -323 b 56 -43 138 -323 73 -102 b 52 -30 55 -37 53 -32 b 23 0 43 -10 36 0 b 4 -19 12 0 4 -4 b 6 -35 4 -23 4 -29 b 438 -478 94 -475 392 -478 b 870 -35 480 -478 780 -475 b 871 -20 871 -29 871 -24 b 851 0 871 -6 864 0 b 821 -30 837 0 831 -10 b 818 -40 819 -32 819 -36 b 435 -323 804 -95 742 -323 z m 516 -79 b 436 0 516 -36 480 0 b 359 -79 395 0 359 -36 b 436 -157 359 -121 395 -157 b 516 -79 480 -157 516 -121 z',\r\n        },\r\n        fermataLongAbove: {\r\n            x_min: 0,\r\n            x_max: 603,\r\n            y_min: -1,\r\n            y_max: 333,\r\n            ha: 334,\r\n            o: 'm 72 480 b 0 441 32 480 0 462 l 0 19 b 35 0 0 9 16 0 b 71 19 55 0 71 9 l 71 289 b 433 315 71 307 252 315 b 798 289 615 315 798 307 l 798 19 b 832 0 798 9 814 0 b 868 19 852 0 868 9 l 868 441 b 796 480 868 462 837 480 z m 513 78 b 433 156 513 121 478 156 b 356 78 390 156 356 121 b 433 -1 356 35 390 -1 b 513 78 478 -1 513 35 z',\r\n        },\r\n        fermataLongBelow: {\r\n            x_min: 0,\r\n            x_max: 603,\r\n            y_min: -333,\r\n            y_max: 1,\r\n            ha: 334,\r\n            o: 'm 513 -78 b 433 1 513 -35 478 1 b 356 -78 390 1 356 -35 b 433 -156 356 -121 390 -156 b 513 -78 478 -156 513 -121 z m 796 -480 b 868 -441 837 -480 868 -462 l 868 -19 b 832 0 868 -9 852 0 b 798 -19 814 0 798 -9 l 798 -289 b 433 -315 798 -307 615 -315 b 71 -289 252 -315 71 -307 l 71 -19 b 35 0 71 -9 55 0 b 0 -19 16 0 0 -9 l 0 -441 b 72 -480 0 -462 32 -480 z',\r\n        },\r\n        fermataVeryLongAbove: {\r\n            x_min: 0,\r\n            x_max: 715,\r\n            y_min: 0,\r\n            y_max: 408,\r\n            ha: 408,\r\n            o: 'm 76 588 b 0 546 35 588 0 569 l 0 22 b 37 1 0 10 17 1 b 75 22 59 1 75 10 l 75 431 b 514 458 75 449 294 458 b 955 431 734 458 955 449 l 955 22 b 991 1 955 10 971 1 b 1030 22 1012 1 1030 10 l 1030 546 b 953 588 1030 569 995 588 z m 215 389 b 138 347 171 389 138 370 l 138 22 b 174 1 138 10 154 1 b 213 22 196 1 213 10 l 213 217 b 514 245 213 235 363 245 b 816 217 665 245 816 235 l 816 22 b 854 1 816 10 834 1 b 891 22 876 1 891 10 l 891 347 b 815 389 891 370 858 389 z m 606 84 b 521 167 606 130 569 167 b 439 84 475 167 439 130 b 521 0 439 39 475 0 b 606 84 569 0 606 39 z',\r\n        },\r\n        fermataVeryLongBelow: {\r\n            x_min: 0,\r\n            x_max: 715,\r\n            y_min: -408,\r\n            y_max: 0,\r\n            ha: 408,\r\n            o: 'm 606 -84 b 521 0 606 -39 569 0 b 439 -84 475 0 439 -39 b 521 -167 439 -130 475 -167 b 606 -84 569 -167 606 -130 z m 815 -389 b 891 -347 858 -389 891 -370 l 891 -22 b 854 -1 891 -10 876 -1 b 816 -22 834 -1 816 -10 l 816 -217 b 514 -245 816 -235 665 -245 b 213 -217 363 -245 213 -235 l 213 -22 b 174 -1 213 -10 196 -1 b 138 -22 154 -1 138 -10 l 138 -347 b 215 -389 138 -370 171 -389 z m 953 -588 b 1030 -546 995 -588 1030 -569 l 1030 -22 b 991 -1 1030 -10 1012 -1 b 955 -22 971 -1 955 -10 l 955 -431 b 514 -458 955 -449 734 -458 b 75 -431 294 -458 75 -449 l 75 -22 b 37 -1 75 -10 59 -1 b 0 -22 17 -1 0 -10 l 0 -546 b 76 -588 0 -569 35 -588 z',\r\n        },\r\n        fermataShortAbove: {\r\n            x_min: 0,\r\n            x_max: 604,\r\n            y_min: 0,\r\n            y_max: 341,\r\n            ha: 341,\r\n            o: 'm 78 0 b 88 6 81 0 82 3 b 435 328 134 45 412 328 b 783 3 458 328 742 39 b 793 0 786 1 793 0 l 865 0 b 870 4 865 0 870 1 b 867 10 870 6 868 9 b 435 491 805 69 474 491 b 3 10 397 491 69 75 b 0 4 1 9 0 6 b 4 0 0 1 4 0 z m 513 94 b 433 171 513 135 477 171 b 354 94 390 171 354 135 b 433 13 354 49 390 13 b 513 94 477 13 513 49 z',\r\n        },\r\n        fermataShortBelow: {\r\n            x_min: 0,\r\n            x_max: 604,\r\n            y_min: -341,\r\n            y_max: 0,\r\n            ha: 341,\r\n            o: 'm 4 0 b 0 -4 4 0 0 -1 b 3 -10 0 -6 1 -9 b 435 -491 69 -75 397 -491 b 867 -10 474 -491 805 -69 b 870 -4 868 -9 870 -6 b 865 0 870 -1 865 0 l 793 0 b 783 -3 793 0 786 -1 b 435 -328 742 -39 458 -328 b 88 -6 412 -328 134 -45 b 78 0 82 -3 81 0 z m 513 -94 b 433 -13 513 -49 477 -13 b 354 -94 390 -13 354 -49 b 433 -171 354 -135 390 -171 b 513 -94 477 -171 513 -135 z',\r\n        },\r\n        breathMarkComma: {\r\n            x_min: 1,\r\n            x_max: 152,\r\n            y_min: 2,\r\n            y_max: 251,\r\n            ha: 249,\r\n            o: 'm 104 361 b 1 271 42 361 1 321 b 82 190 1 222 35 190 b 122 160 118 190 122 160 b 125 144 124 154 125 150 b 102 88 125 124 115 105 b 37 32 78 56 40 35 b 26 17 32 29 26 26 l 27 16 b 37 3 29 6 33 3 b 181 102 85 3 158 66 b 219 239 210 147 219 197 l 219 249 b 104 361 219 317 170 361 z',\r\n        },\r\n        breathMarkUpbow: {\r\n            x_min: 1,\r\n            x_max: 249,\r\n            y_min: 1,\r\n            y_max: 495,\r\n            ha: 494,\r\n            o: 'm 181 1 b 206 22 193 1 203 10 l 359 683 l 359 688 b 338 713 359 700 351 710 l 333 713 b 308 694 321 713 311 706 l 180 140 l 53 694 b 27 713 49 706 39 713 l 22 713 b 1 690 10 710 1 700 b 3 683 1 687 1 685 l 154 22 b 181 1 157 10 167 1 z',\r\n        },\r\n        caesura: {\r\n            x_min: 0,\r\n            x_max: 384,\r\n            y_min: -1,\r\n            y_max: 532,\r\n            ha: 533,\r\n            o: 'm 40 -1 b 78 26 58 -1 72 9 l 321 713 b 323 726 323 717 323 721 b 282 766 323 747 304 766 b 245 739 265 766 251 756 l 3 52 b 0 37 1 48 0 42 b 27 1 0 22 10 7 b 40 -1 32 -1 36 -1 z m 308 26 l 552 713 b 553 726 553 717 553 721 b 513 766 553 747 534 766 b 475 739 495 766 481 756 l 232 52 b 230 39 230 48 230 43 b 258 1 230 23 240 7 b 271 -1 262 -1 266 -1 b 308 26 287 -1 302 9 z',\r\n        },\r\n        caesuraCurved: {\r\n            x_min: 0,\r\n            x_max: 373,\r\n            y_min: 0,\r\n            y_max: 530,\r\n            ha: 530,\r\n            o: 'm 491 763 b 445 719 468 763 446 744 b 252 98 432 507 340 295 l 226 39 b 223 27 225 35 223 32 b 252 0 223 13 233 0 b 276 16 262 0 272 6 b 537 716 386 230 537 478 b 491 763 537 742 518 763 z m 29 0 b 53 16 39 0 48 6 l 82 69 b 314 716 187 264 314 498 b 268 763 314 742 295 763 b 222 719 245 763 223 744 b 29 98 209 507 117 295 l 3 39 b 0 29 1 36 0 33 b 29 0 0 14 12 0 z',\r\n        },\r\n        restMaxima: {\r\n            x_min: 0,\r\n            x_max: 381,\r\n            y_min: -249,\r\n            y_max: 250,\r\n            ha: 499,\r\n            o: 'm 180 -330 l 180 331 b 156 360 180 356 170 360 l 23 360 b 0 331 10 360 0 356 l 0 -330 b 23 -359 0 -354 10 -359 l 156 -359 b 180 -330 170 -359 180 -354 z m 549 -330 l 549 331 b 524 360 549 356 539 360 l 392 360 b 369 331 379 360 369 356 l 369 -330 b 392 -359 369 -354 379 -359 l 524 -359 b 549 -330 539 -359 549 -354 z',\r\n        },\r\n        restDoubleWhole: {\r\n            x_min: 0,\r\n            x_max: 125,\r\n            y_min: 0,\r\n            y_max: 250,\r\n            ha: 250,\r\n            o: 'm 180 22 l 180 338 b 156 360 180 350 170 360 l 23 360 b 0 338 10 360 0 350 l 0 22 b 23 0 0 10 10 0 l 156 0 b 180 22 170 0 180 10 z',\r\n        },\r\n        restWhole: {\r\n            x_min: 0,\r\n            x_max: 282,\r\n            y_min: -135,\r\n            y_max: 9,\r\n            ha: 144,\r\n            o: 'm 406 -157 l 406 -24 b 369 13 406 -3 389 13 l 37 13 b 0 -24 16 13 0 -3 l 0 -157 b 37 -194 0 -177 16 -194 l 369 -194 b 406 -157 389 -194 406 -177 z',\r\n        },\r\n        restHalf: {\r\n            x_min: 0,\r\n            x_max: 282,\r\n            y_min: -2,\r\n            y_max: 142,\r\n            ha: 144,\r\n            o: 'm 406 35 l 406 167 b 369 204 406 189 389 204 l 37 204 b 0 167 16 204 0 189 l 0 35 b 37 -3 0 14 16 -3 l 369 -3 b 406 35 389 -3 406 14 z',\r\n        },\r\n        restQuarter: {\r\n            x_min: 1,\r\n            x_max: 270,\r\n            y_min: -375,\r\n            y_max: 373,\r\n            ha: 748,\r\n            o: 'm 112 -55 b 174 -141 135 -84 156 -111 b 183 -161 177 -147 183 -158 b 181 -167 183 -163 183 -166 b 166 -174 179 -173 173 -174 b 143 -170 160 -174 148 -171 b 137 -170 141 -170 138 -170 l 125 -166 b 1 -304 50 -166 1 -233 b 168 -527 1 -376 63 -446 b 206 -540 180 -536 194 -540 b 228 -531 216 -540 226 -537 b 230 -521 229 -527 230 -524 b 207 -487 230 -508 219 -497 b 170 -435 189 -487 173 -448 b 164 -397 166 -423 164 -410 b 255 -292 164 -338 194 -292 b 369 -317 297 -292 344 -308 l 370 -318 b 382 -320 376 -320 379 -320 b 389 -314 386 -320 389 -318 b 336 -232 389 -297 351 -249 b 236 -32 281 -166 236 -112 b 236 -27 236 -30 236 -29 l 238 -17 b 238 -13 238 -16 238 -14 b 333 199 243 71 295 140 b 338 220 337 206 338 213 b 333 248 338 235 333 248 b 95 526 333 248 120 501 b 69 537 88 533 78 537 b 40 507 55 537 40 527 b 46 484 40 500 42 492 b 134 291 52 468 134 395 b 48 108 134 238 112 176 b 27 66 33 94 27 78 b 42 32 27 46 42 32 z',\r\n        },\r\n        rest8th: {\r\n            x_min: 0,\r\n            x_max: 247,\r\n            y_min: -251,\r\n            y_max: 174,\r\n            ha: 425,\r\n            o: 'm 193 154 b 96 251 193 207 150 251 b 0 154 43 251 0 207 b 39 81 0 124 17 98 b 117 56 62 65 89 56 b 173 66 137 56 157 60 b 225 88 193 72 206 78 b 232 89 228 89 230 89 b 239 76 238 89 239 84 b 238 60 239 72 239 66 b 104 -343 233 39 130 -248 b 145 -361 104 -360 137 -361 b 196 -347 161 -361 181 -359 b 341 161 200 -344 341 161 b 356 217 347 187 354 210 b 338 240 356 232 341 239 b 323 235 336 240 331 240 b 193 140 312 226 240 140 z',\r\n        },\r\n        rest16th: {\r\n            x_min: 0,\r\n            x_max: 320,\r\n            y_min: -500,\r\n            y_max: 179,\r\n            ha: 679,\r\n            o: 'm 300 160 b 202 258 300 215 256 258 b 104 160 148 258 104 215 b 219 62 104 101 164 62 b 331 94 258 62 298 75 b 341 96 336 95 338 96 b 348 86 346 96 348 94 b 265 -173 348 63 275 -151 b 194 -217 253 -200 215 -217 b 196 -203 196 -212 196 -207 b 98 -105 196 -148 151 -105 b 0 -203 43 -105 0 -148 b 115 -301 0 -262 60 -301 b 223 -271 153 -301 190 -288 b 229 -279 226 -271 229 -274 l 228 -281 b 228 -282 228 -282 228 -282 l 91 -690 b 91 -691 91 -690 91 -691 l 89 -693 b 134 -720 89 -706 102 -720 b 189 -687 176 -720 183 -703 l 356 -138 b 420 81 393 -16 420 81 b 459 226 420 81 456 207 b 461 232 459 229 461 230 b 446 248 461 240 449 246 b 431 242 439 248 435 245 b 300 145 420 233 348 147 z',\r\n        },\r\n        rest32nd: {\r\n            x_min: 0,\r\n            x_max: 363,\r\n            y_min: -500,\r\n            y_max: 426,\r\n            ha: 926,\r\n            o: 'm 508 603 b 492 598 501 603 497 600 b 361 503 482 590 410 503 l 361 516 b 264 613 361 570 318 613 b 166 516 210 613 166 570 b 206 444 166 487 183 461 b 246 423 217 433 232 428 b 284 418 258 420 269 418 b 393 449 321 418 360 432 b 399 451 395 451 397 451 b 415 426 409 451 415 436 l 413 423 b 413 422 413 423 413 422 l 357 192 b 279 140 350 168 302 140 b 281 153 281 144 281 148 b 183 251 281 207 236 251 b 85 153 128 251 85 207 b 125 81 85 124 102 98 b 164 60 137 71 150 65 b 203 55 176 58 189 55 b 311 86 240 55 278 69 b 315 88 312 88 314 88 b 325 69 323 88 325 76 l 268 -167 b 194 -217 261 -197 216 -216 b 196 -203 196 -212 196 -207 b 98 -105 196 -148 153 -105 b 0 -203 45 -105 0 -148 b 115 -301 0 -262 60 -301 b 228 -269 154 -301 194 -288 b 232 -268 229 -268 230 -268 b 240 -276 236 -268 240 -272 b 138 -688 240 -282 141 -678 b 137 -697 137 -691 137 -694 b 176 -720 137 -708 145 -720 b 232 -690 222 -720 226 -706 b 484 436 236 -672 484 436 b 521 582 484 436 518 564 b 523 588 521 585 523 586 b 508 603 523 600 511 603 z',\r\n        },\r\n        rest64th: {\r\n            x_min: 0,\r\n            x_max: 423,\r\n            y_min: -753,\r\n            y_max: 430,\r\n            ha: 1183,\r\n            o: 'm 596 609 b 580 603 589 609 585 606 b 448 507 569 595 497 507 b 449 521 449 511 449 516 b 351 619 449 575 405 619 b 253 521 297 619 253 575 b 372 422 253 461 317 422 b 481 454 410 422 446 438 b 491 456 484 455 488 456 b 504 441 498 456 504 451 b 501 426 504 436 503 432 b 445 202 500 422 451 217 b 359 144 435 174 383 144 l 359 158 b 261 256 359 212 315 256 b 163 158 207 256 163 212 b 243 65 163 112 202 78 b 279 60 255 62 266 60 b 397 91 320 60 360 73 b 403 92 400 92 402 92 b 412 79 409 92 412 86 b 410 72 412 76 412 75 b 351 -161 408 59 356 -150 b 281 -212 340 -199 301 -212 l 281 -197 b 183 -99 281 -144 238 -99 b 85 -197 130 -99 85 -144 b 125 -271 85 -228 102 -253 b 166 -291 138 -279 151 -287 b 204 -297 177 -294 192 -297 b 262 -287 225 -297 245 -292 b 305 -265 282 -279 287 -274 b 310 -264 307 -264 308 -264 b 318 -284 317 -264 318 -275 b 317 -295 318 -288 317 -294 b 259 -524 315 -302 265 -508 b 194 -567 251 -554 213 -567 b 196 -554 196 -563 196 -559 b 98 -456 196 -500 153 -456 b 0 -554 45 -456 0 -500 b 40 -626 0 -583 17 -609 b 118 -652 60 -644 92 -652 b 210 -629 145 -652 186 -642 b 216 -628 213 -628 215 -628 b 228 -647 226 -628 228 -639 l 226 -651 b 226 -652 226 -651 226 -652 l 122 -1054 b 121 -1064 121 -1058 121 -1061 b 167 -1084 121 -1077 134 -1084 b 215 -1060 202 -1084 209 -1076 b 402 -278 217 -1047 229 -1021 b 436 -135 403 -278 431 -161 l 570 441 b 609 588 570 441 605 569 b 596 609 609 603 602 608 z',\r\n        },\r\n        rest128th: {\r\n            x_min: 0,\r\n            x_max: 485,\r\n            y_min: -750,\r\n            y_max: 689,\r\n            ha: 1439,\r\n            o: 'm 537 894 b 439 992 537 949 494 992 b 341 894 386 992 341 949 b 382 822 341 865 359 840 b 459 796 402 805 433 796 b 518 806 480 796 501 801 l 520 808 b 569 828 539 814 552 819 b 580 831 572 829 577 831 b 598 812 589 831 598 825 b 596 801 598 809 598 805 b 540 575 590 773 546 595 b 448 510 534 553 475 510 l 448 524 b 350 622 448 577 405 622 b 252 524 297 622 252 577 b 292 451 252 494 269 468 b 369 426 318 433 337 426 b 429 435 389 426 412 429 b 494 464 449 442 475 455 b 498 465 495 465 497 465 b 505 446 504 465 505 456 b 503 426 505 439 504 432 l 446 202 b 366 144 439 173 389 144 l 366 158 b 268 256 366 212 323 256 b 170 158 215 256 170 212 b 289 59 170 98 235 59 b 347 69 310 59 330 63 b 397 91 367 76 379 82 b 406 94 400 92 403 94 b 415 79 412 94 415 88 b 412 63 415 75 413 69 b 357 -157 408 42 364 -134 b 281 -212 346 -196 302 -212 b 282 -197 281 -207 282 -203 b 184 -99 282 -144 238 -99 b 86 -197 130 -99 86 -144 b 204 -297 86 -258 150 -297 b 262 -287 225 -297 245 -292 b 312 -265 282 -279 294 -274 b 318 -264 314 -264 317 -264 b 327 -275 324 -264 327 -269 b 266 -517 324 -287 278 -490 b 200 -569 248 -566 220 -567 l 196 -554 b 98 -456 196 -500 153 -456 b 0 -554 45 -456 0 -500 b 118 -652 0 -615 63 -652 b 177 -642 138 -652 160 -648 l 179 -641 b 229 -621 197 -635 210 -629 l 230 -619 b 239 -626 236 -619 239 -622 b 238 -632 239 -628 239 -631 b 131 -1057 235 -642 134 -1050 b 173 -1080 131 -1071 140 -1080 b 230 -1057 219 -1080 225 -1074 l 658 815 b 697 960 658 815 694 942 b 698 966 697 963 698 965 b 684 982 698 975 687 981 b 668 976 677 982 672 979 b 537 880 658 969 586 881 z',\r\n        },\r\n        dynamicPiano: {\r\n            x_min: -89,\r\n            x_max: 366,\r\n            y_min: -142,\r\n            y_max: 274,\r\n            ha: 416,\r\n            o: 'm 395 395 b 292 357 350 395 318 380 b 262 328 272 340 268 328 b 246 363 255 328 259 338 b 177 393 236 380 215 393 b 1 251 92 393 46 333 b -9 223 -6 238 -9 230 b 7 207 -9 213 -1 207 b 30 229 17 207 23 216 b 127 338 72 301 101 338 b 143 321 138 338 143 331 b 134 285 143 310 138 295 l -43 -154 b -65 -168 -48 -166 -50 -168 l -109 -168 b -128 -187 -122 -168 -128 -174 b -111 -204 -128 -199 -122 -204 l 167 -204 b 186 -186 180 -204 186 -199 b 168 -168 186 -174 180 -168 l 111 -168 b 98 -164 102 -168 98 -168 b 101 -154 98 -163 99 -158 l 166 7 b 179 24 168 14 171 24 b 213 -1 186 24 190 10 b 276 -14 233 -12 252 -14 b 527 266 415 -14 527 130 b 395 395 527 350 475 395 z m 356 341 b 389 288 380 341 389 320 b 243 35 389 217 312 35 b 207 81 219 35 207 50 b 235 180 207 111 219 140 l 264 251 b 356 341 284 300 321 341 z',\r\n        },\r\n        dynamicMezzo: {\r\n            x_min: -20,\r\n            x_max: 446,\r\n            y_min: -10,\r\n            y_max: 274,\r\n            ha: 284,\r\n            o: 'm 528 395 b 431 350 487 395 454 374 b 409 330 416 336 415 330 b 397 360 402 330 406 341 b 334 395 389 379 370 395 b 236 350 292 395 259 374 b 215 330 222 336 220 330 b 203 360 207 330 212 340 b 147 393 194 379 174 393 b -19 251 71 393 26 331 b -29 223 -26 238 -29 230 b -13 207 -29 213 -22 207 b 9 226 -3 207 1 215 b 107 338 52 300 81 338 b 122 321 118 338 122 331 b 114 285 122 310 118 295 l 9 24 b 4 9 6 17 4 13 b 20 0 4 3 9 0 l 91 0 b 114 17 104 0 108 3 l 207 251 b 287 323 225 292 255 323 b 308 302 304 323 308 314 b 294 249 308 285 302 269 b 203 24 294 248 292 248 b 199 9 200 17 199 13 b 215 0 199 3 203 0 l 285 0 b 308 17 298 0 302 3 l 402 251 b 481 323 419 292 449 323 b 503 302 498 323 503 314 b 413 43 503 252 413 104 b 478 -14 413 6 436 -14 b 629 102 533 -14 583 26 b 642 132 638 117 642 125 b 629 145 642 141 636 145 b 608 127 619 145 615 138 b 534 49 580 84 553 49 b 523 62 526 49 523 53 b 606 317 523 112 606 238 b 528 395 606 353 588 395 z',\r\n        },\r\n        dynamicForte: {\r\n            x_min: -141,\r\n            x_max: 364,\r\n            y_min: -152,\r\n            y_max: 444,\r\n            ha: 596,\r\n            o: 'm 23 380 b 0 357 7 380 0 373 b 22 336 0 343 7 336 l 105 336 b 117 330 114 336 117 336 b 114 315 117 327 115 323 l 23 0 b -101 -187 -17 -141 -43 -187 b -127 -174 -120 -187 -127 -181 b -92 -156 -127 -163 -114 -170 b -63 -102 -75 -144 -63 -125 b -128 -43 -63 -65 -89 -43 b -203 -122 -171 -43 -203 -78 b -95 -219 -203 -186 -156 -219 b 161 17 14 -219 82 -145 b 269 317 203 105 235 194 l 271 318 b 289 336 271 323 282 336 l 383 336 b 406 359 399 336 406 343 b 384 380 406 373 399 380 l 298 380 b 284 387 288 380 284 380 b 287 405 284 392 285 396 b 419 606 315 530 347 606 b 442 595 431 606 442 603 b 419 580 442 586 435 588 b 389 526 400 572 389 552 b 454 465 389 485 418 465 b 524 543 491 465 524 490 b 400 639 524 596 491 639 b 135 402 261 639 183 540 b 107 380 128 380 127 380 z',\r\n        },\r\n        dynamicRinforzando: {\r\n            x_min: -20,\r\n            x_max: 277,\r\n            y_min: 0,\r\n            y_max: 274,\r\n            ha: 274,\r\n            o: 'm 324 395 b 235 350 287 395 256 374 b 215 330 222 336 220 330 b 203 360 207 330 213 337 b 145 393 194 379 174 393 b -19 251 75 393 27 337 b -29 223 -26 238 -29 230 b -13 207 -29 213 -22 207 b 9 226 -3 207 3 215 b 107 338 52 301 81 338 b 122 321 118 338 122 331 b 114 285 122 310 118 295 l 9 24 b 4 9 6 17 4 13 b 20 0 4 3 9 0 l 91 0 b 114 17 104 0 108 3 l 207 251 b 304 351 226 298 272 351 b 318 343 312 351 318 348 b 287 285 318 330 287 325 b 338 239 287 256 308 239 b 399 318 373 239 399 268 b 324 395 399 360 377 395 z',\r\n        },\r\n        dynamicSforzando: {\r\n            x_min: 0,\r\n            x_max: 229,\r\n            y_min: -10,\r\n            y_max: 273,\r\n            ha: 283,\r\n            o: 'm 212 393 b 68 274 127 393 68 350 b 145 161 68 223 95 196 b 200 85 187 132 200 114 b 127 20 200 53 173 20 b 66 42 91 20 66 32 b 91 56 66 49 75 46 b 111 98 104 65 111 79 b 59 145 111 127 86 145 b 0 78 24 145 0 117 b 125 -14 0 30 49 -14 b 291 120 219 -14 291 36 b 220 232 291 160 276 190 b 151 314 168 271 151 287 b 213 361 151 337 168 361 b 258 346 238 361 258 356 b 240 333 258 340 251 340 b 226 298 232 325 226 314 b 276 252 226 269 248 252 b 330 307 311 252 330 279 b 212 393 330 360 285 393 z',\r\n        },\r\n        dynamicZ: {\r\n            x_min: -30,\r\n            x_max: 244,\r\n            y_min: -10,\r\n            y_max: 268,\r\n            ha: 278,\r\n            o: 'm 333 386 b 298 377 321 386 314 382 b 239 370 282 373 259 370 b 94 383 153 370 111 383 b 68 364 79 383 72 377 l 33 264 b 29 242 30 255 29 248 b 45 228 29 232 36 228 b 66 249 55 228 60 236 l 81 279 b 96 297 85 288 88 297 b 168 292 102 297 127 292 b 223 302 194 292 215 302 b 196 269 229 302 197 271 l -26 45 b -43 16 -37 33 -43 27 b -24 -1 -43 6 -36 -1 b 4 16 -12 -1 -3 10 b 39 30 16 24 27 30 b 179 -14 79 30 108 -14 b 297 102 259 -14 297 43 b 245 166 297 147 271 166 b 197 115 219 166 197 145 b 236 72 197 88 216 72 b 259 79 251 72 255 79 b 264 75 262 79 264 78 b 258 60 264 72 261 66 b 229 45 252 50 242 45 b 117 95 186 45 173 95 b 85 86 98 95 89 86 b 102 111 85 86 95 104 l 333 338 b 351 370 344 350 351 359 b 333 386 351 380 343 386 z',\r\n        },\r\n        ornamentTrill: {\r\n            x_min: 0,\r\n            x_max: 521,\r\n            y_min: -10,\r\n            y_max: 390,\r\n            ha: 400,\r\n            o: 'm 383 562 b 364 557 377 562 369 559 l 294 534 b 269 511 281 530 275 526 l 217 384 b 206 367 212 370 210 367 b 179 380 200 367 192 374 b 118 393 158 389 140 393 b 0 292 50 393 0 353 b 95 210 0 248 30 210 b 140 213 112 210 131 213 b 144 209 143 213 144 212 b 140 194 144 206 143 202 l 124 156 b 96 58 108 117 96 88 b 179 -14 96 17 124 -14 b 325 153 253 -14 325 46 b 307 251 325 187 320 219 b 302 265 304 258 302 261 b 334 294 302 274 311 281 l 343 298 b 455 348 393 328 428 348 b 474 327 468 348 474 344 b 465 285 474 312 469 295 l 360 24 b 356 9 357 17 356 13 b 372 0 356 3 360 0 l 442 0 b 465 17 455 0 459 3 l 559 251 b 655 351 577 298 624 351 b 670 343 664 351 670 348 b 638 285 670 330 638 325 b 690 239 638 256 660 239 b 750 318 724 239 750 268 b 675 395 750 360 729 395 b 586 350 638 395 608 374 b 566 330 573 336 572 330 b 553 361 559 330 564 340 b 490 393 543 380 521 393 b 347 348 432 393 377 364 b 312 333 328 338 320 333 b 308 337 310 333 308 334 b 315 359 308 343 312 351 l 387 537 b 392 553 390 544 392 549 b 383 562 392 559 389 562 z m 118 360 b 192 325 134 360 192 347 b 186 307 192 321 189 314 l 180 292 b 148 265 173 274 167 269 b 98 258 130 261 112 258 b 39 301 50 258 39 281 b 118 360 39 327 60 360 z m 272 240 b 292 151 285 240 292 164 b 212 30 292 88 253 30 b 196 48 200 30 196 37 b 207 92 196 59 202 78 b 264 230 207 94 209 94 b 272 240 266 238 268 240 z',\r\n        },\r\n        ornamentTurn: {\r\n            x_min: 0,\r\n            x_max: 460,\r\n            y_min: 0,\r\n            y_max: 218,\r\n            ha: 218,\r\n            o: 'm 534 314 b 454 251 490 314 454 294 b 505 199 454 219 475 199 b 579 232 547 199 549 232 b 626 164 603 232 626 202 b 533 72 626 102 583 72 b 377 180 487 72 439 111 b 150 312 307 258 243 312 b 0 148 55 312 0 240 b 128 0 0 45 66 0 b 209 63 173 0 209 20 b 157 115 209 95 187 115 b 84 82 115 115 114 82 b 36 150 59 82 36 112 b 130 242 36 212 79 242 b 285 134 176 242 223 203 b 513 1 356 56 419 1 b 662 166 608 1 662 73 b 534 314 662 269 596 314 z',\r\n        },\r\n        ornamentTurnSlash: {\r\n            x_min: 0,\r\n            x_max: 460,\r\n            y_min: -90,\r\n            y_max: 306,\r\n            ha: 396,\r\n            o: 'm 333 441 b 310 418 315 441 310 433 l 310 274 b 302 252 310 258 308 252 b 261 278 294 252 287 262 b 150 311 228 298 192 311 b 0 147 55 311 0 239 b 128 -1 0 43 66 -1 b 209 62 173 -1 209 19 b 157 114 209 94 187 114 b 84 81 115 114 114 81 b 36 148 59 81 36 111 b 130 240 36 210 79 240 b 285 128 176 240 222 197 b 307 79 304 108 307 105 l 307 -107 b 330 -130 307 -122 312 -130 b 353 -107 347 -130 353 -122 l 353 37 b 360 59 353 53 353 59 b 402 33 369 59 376 49 b 513 0 435 13 471 0 b 662 164 608 0 662 72 b 534 312 662 268 596 312 b 454 249 490 312 454 292 b 505 197 454 217 475 197 b 579 230 547 197 549 230 b 626 163 603 230 626 200 b 533 71 626 101 583 71 b 377 183 487 71 441 114 b 356 232 359 203 356 206 l 356 418 b 333 441 356 433 350 441 z',\r\n        },\r\n        ornamentMordent: {\r\n            x_min: 1,\r\n            x_max: 729,\r\n            y_min: -73,\r\n            y_max: 319,\r\n            ha: 392,\r\n            o: 'm 546 265 l 546 459 l 501 459 l 501 216 l 459 167 b 439 167 454 160 445 160 b 302 327 387 228 310 317 b 258 353 291 338 282 351 b 226 340 245 353 238 348 l 20 107 b 1 73 12 98 1 84 b 30 59 1 65 9 59 b 88 94 53 59 73 79 b 144 143 107 109 124 127 b 176 161 158 154 168 161 b 197 144 183 161 189 156 l 323 10 b 351 0 328 3 340 0 b 377 9 361 0 372 3 b 498 114 392 17 475 94 l 498 -105 l 544 -105 l 544 153 b 562 160 550 157 556 160 b 585 144 569 160 576 156 b 710 10 590 135 697 24 b 737 0 716 3 727 0 b 765 9 749 0 759 3 b 1030 295 776 17 1011 274 l 1032 300 b 1050 328 1041 308 1050 318 b 1012 353 1050 343 1024 353 b 986 343 1002 353 994 348 b 854 190 971 330 871 206 b 828 176 842 180 835 176 b 802 190 818 176 809 183 b 681 333 791 202 696 320 b 645 353 668 344 657 353 b 613 340 634 353 626 350 b 580 304 600 330 590 315 z',\r\n        },\r\n        ornamentShortTrill: {\r\n            x_min: 0,\r\n            x_max: 725,\r\n            y_min: 0,\r\n            y_max: 245,\r\n            ha: 245,\r\n            o: 'm 429 167 l 301 325 b 256 353 291 338 282 350 b 225 340 246 353 238 350 b 16 105 158 268 88 186 b 0 72 9 96 0 86 b 29 58 0 63 7 58 b 71 76 42 58 55 62 l 158 154 b 174 160 163 158 168 160 b 197 143 181 160 187 154 b 321 10 203 135 310 24 b 350 0 327 3 338 0 b 377 7 361 0 372 3 l 533 148 b 554 160 543 158 550 160 b 577 143 562 160 566 156 b 703 10 585 135 690 24 b 732 0 708 3 720 0 b 759 7 743 0 753 3 b 1024 294 769 16 1005 272 b 1044 327 1032 305 1044 321 b 1005 353 1044 341 1018 353 b 979 343 996 353 988 348 b 848 189 963 330 864 204 b 821 174 837 179 828 174 b 796 189 811 174 804 181 b 674 331 783 202 688 318 b 641 351 662 343 651 351 b 606 340 628 351 619 350 b 573 304 593 328 583 315 b 444 167 533 259 491 213 b 429 167 439 161 433 161 z',\r\n        },\r\n        ornamentTremblement: {\r\n            x_min: 1,\r\n            x_max: 985,\r\n            y_min: 0,\r\n            y_max: 244,\r\n            ha: 244,\r\n            o: 'm 678 325 b 634 351 667 338 657 350 b 602 338 621 351 613 348 l 448 167 b 439 167 446 164 441 164 l 302 325 b 258 351 291 338 281 350 b 228 338 245 351 238 348 b 193 304 215 328 204 315 l 19 107 b 1 72 13 96 1 76 b 30 58 1 63 9 58 b 89 92 52 58 73 78 l 144 141 b 148 144 145 143 147 143 b 176 160 160 153 170 160 b 199 143 183 160 189 154 b 324 10 204 134 311 23 b 351 0 330 3 340 0 b 379 7 363 0 373 3 l 530 148 b 552 160 536 154 546 160 b 575 143 559 160 564 154 b 698 10 580 134 687 23 b 727 0 704 3 716 0 b 755 7 739 0 749 3 l 907 147 b 930 160 922 158 923 160 b 952 143 937 160 943 154 l 1077 10 b 1107 0 1084 3 1096 0 b 1133 7 1117 0 1128 3 b 1398 294 1143 16 1380 272 b 1418 327 1407 305 1418 321 b 1381 351 1418 343 1394 351 b 1354 341 1371 351 1362 348 b 1223 189 1338 328 1238 204 b 1195 174 1211 179 1202 174 b 1171 189 1185 174 1178 181 b 1048 331 1158 200 1063 318 b 1012 351 1035 343 1024 351 b 981 338 1002 351 994 350 b 948 304 968 328 958 315 b 827 166 907 258 865 212 b 815 166 824 163 818 163 b 678 325 760 226 732 264 z',\r\n        },\r\n        ornamentPrecompAppoggTrill: {\r\n            x_min: 0,\r\n            x_max: 1119,\r\n            y_min: 0,\r\n            y_max: 481,\r\n            ha: 481,\r\n            o: 'm 1015 163 b 873 328 963 223 880 318 b 828 354 860 344 847 353 b 796 341 816 354 809 351 b 763 305 783 331 773 317 b 642 168 721 261 681 215 b 636 163 641 167 639 164 b 494 328 585 223 501 318 b 449 354 481 344 468 353 b 418 341 438 354 431 351 b 384 305 405 331 395 317 b 264 168 343 261 302 215 l 242 144 b 144 88 232 124 171 88 b 79 197 81 88 79 189 l 79 648 b 60 693 79 683 71 693 b 52 691 58 693 55 693 b 0 616 3 672 0 625 l 0 207 b 121 0 0 40 68 0 b 249 68 168 0 232 53 b 279 94 262 75 271 86 b 336 144 298 111 315 128 b 367 163 350 156 360 163 b 389 145 374 163 380 157 b 514 12 395 137 501 26 b 543 1 520 4 531 1 b 569 9 553 1 563 4 b 636 73 576 14 605 43 l 658 94 b 714 144 677 111 694 128 b 746 163 729 156 739 163 b 768 145 753 163 759 157 b 893 12 773 137 880 26 b 922 1 899 4 910 1 b 948 9 932 1 942 4 l 1012 71 b 1037 94 1022 78 1030 86 b 1092 144 1054 111 1073 128 b 1123 161 1106 156 1115 161 b 1146 145 1130 161 1136 157 b 1270 12 1152 137 1259 26 b 1299 1 1276 4 1287 1 b 1326 9 1310 1 1320 4 b 1591 297 1336 19 1572 275 b 1611 328 1600 307 1611 320 b 1574 354 1611 343 1585 354 b 1548 344 1565 354 1555 350 b 1416 192 1532 331 1431 206 b 1388 177 1404 181 1395 177 b 1365 190 1380 177 1371 184 b 1243 333 1352 203 1256 321 b 1205 354 1228 346 1217 354 b 1174 341 1195 354 1187 351 b 1140 305 1161 330 1152 317 z',\r\n        },\r\n        ornamentPrecompSlideTrillDAnglebert: {\r\n            x_min: 2,\r\n            x_max: 1150,\r\n            y_min: -367,\r\n            y_max: 245,\r\n            ha: 612,\r\n            o: 'm 1058 160 b 916 327 1007 220 923 317 b 871 353 903 343 890 351 b 840 340 860 353 852 350 b 806 304 827 330 816 315 b 685 167 765 259 724 213 l 680 160 l 615 235 b 419 344 582 275 523 344 b 3 -144 258 344 3 26 b 4 -168 3 -153 3 -160 b 246 -482 24 -315 99 -422 b 458 -528 340 -521 410 -528 b 514 -526 485 -528 504 -526 b 552 -508 531 -526 552 -517 b 514 -497 552 -503 541 -498 l 503 -497 b 194 -390 432 -494 298 -488 b 69 -151 194 -390 69 -279 b 184 96 69 -60 128 27 b 328 183 202 118 258 183 b 477 96 413 183 454 118 b 559 10 510 62 552 19 b 588 0 566 3 576 0 b 613 7 598 0 609 3 b 723 112 622 14 681 73 b 789 161 733 122 776 161 b 811 144 796 161 802 156 b 936 10 816 135 923 24 b 965 0 942 3 953 0 b 991 7 975 0 985 3 b 1051 66 996 12 1022 37 b 1081 92 1063 73 1073 84 b 1136 143 1099 109 1117 127 b 1168 160 1151 154 1159 160 b 1191 144 1175 160 1181 156 b 1315 10 1197 135 1303 24 b 1344 0 1320 3 1332 0 b 1371 7 1355 0 1365 3 b 1636 295 1381 17 1617 274 b 1656 327 1644 305 1656 318 b 1619 353 1656 341 1630 353 b 1593 343 1610 353 1600 348 b 1460 190 1577 330 1476 204 b 1433 176 1449 180 1440 176 b 1410 189 1424 176 1416 183 b 1287 331 1397 202 1300 320 b 1250 353 1273 344 1261 353 b 1218 340 1240 353 1231 350 b 1185 304 1205 328 1197 315 z',\r\n        },\r\n        ornamentPrecompSlideTrillBach: {\r\n            x_min: 0,\r\n            x_max: 1048,\r\n            y_min: -367,\r\n            y_max: 331,\r\n            ha: 698,\r\n            o: 'm 1038 477 l 979 477 l 979 238 l 912 160 b 769 327 858 220 775 317 b 724 353 756 343 743 351 b 693 340 713 353 706 350 b 660 304 680 330 670 315 b 539 167 618 259 577 213 b 533 161 536 166 534 163 b 390 327 480 220 396 317 b 346 353 377 343 364 351 l 340 353 b 308 340 330 353 321 350 b 275 304 295 330 285 315 b 117 122 220 243 168 186 b 0 -144 68 62 0 -48 b 1 -168 0 -153 0 -160 b 243 -482 22 -315 96 -422 b 455 -528 337 -521 408 -528 b 511 -526 482 -528 501 -526 b 549 -508 528 -526 549 -517 b 511 -497 549 -503 539 -498 l 500 -497 b 192 -390 429 -494 295 -488 b 68 -177 192 -390 84 -298 b 66 -151 66 -168 66 -160 b 189 105 66 -58 127 35 b 232 143 203 118 216 131 b 264 161 246 154 256 161 b 285 144 271 161 276 156 b 410 10 291 135 397 24 b 439 0 416 3 428 0 b 465 7 449 0 459 3 l 531 72 b 554 92 540 78 547 86 b 611 143 573 109 590 127 b 642 161 625 154 635 161 b 664 144 649 161 655 156 b 789 10 670 135 776 24 b 818 0 795 3 806 0 b 844 7 828 0 838 3 b 904 66 850 12 876 37 b 935 92 916 73 924 84 b 979 134 949 107 963 121 l 979 -88 l 1037 -88 l 1037 151 l 1044 144 b 1168 10 1050 135 1156 24 b 1197 0 1174 3 1185 0 b 1224 7 1208 0 1218 3 b 1489 295 1234 17 1470 274 b 1509 327 1498 305 1509 318 b 1472 353 1509 341 1483 353 b 1446 343 1463 353 1453 348 b 1313 190 1430 330 1329 204 b 1286 176 1302 180 1293 176 b 1263 189 1277 176 1269 183 b 1140 331 1250 202 1153 320 b 1103 353 1126 344 1115 353 b 1071 340 1093 353 1084 350 b 1038 304 1058 328 1050 315 z',\r\n        },\r\n        ornamentPrecompTrillSuffixDandrieu: {\r\n            x_min: 0,\r\n            x_max: 949,\r\n            y_min: 0,\r\n            y_max: 381,\r\n            ha: 381,\r\n            o: 'm 1367 314 b 1250 521 1367 419 1318 482 b 1107 549 1211 537 1145 549 b 1083 546 1096 549 1087 549 b 1066 528 1071 540 1066 534 b 1079 520 1066 524 1070 520 b 1323 351 1187 517 1323 487 b 1201 171 1323 269 1260 219 b 1194 166 1201 171 1198 168 b 1056 327 1142 226 1063 317 b 1011 353 1043 343 1030 351 b 979 340 999 353 992 350 b 946 304 966 330 956 315 b 825 167 904 259 864 213 l 821 161 b 678 327 768 222 685 317 b 634 353 665 343 652 351 b 602 340 622 353 615 350 b 569 304 589 330 579 315 b 448 167 527 259 487 213 l 444 161 b 301 327 390 222 308 317 b 256 353 288 343 275 351 b 225 340 245 353 238 350 b 192 304 212 330 202 315 b 71 167 150 259 109 213 b 17 105 52 147 36 127 b 0 73 10 98 0 84 b 29 58 0 65 7 58 b 86 92 56 59 72 79 b 143 143 105 109 122 127 b 174 161 157 154 167 161 b 196 144 181 161 187 156 b 321 10 202 135 308 24 b 350 0 327 3 338 0 b 376 7 360 0 370 3 b 485 112 384 14 444 73 b 552 161 495 122 539 161 b 573 144 559 161 564 156 b 698 10 579 135 685 24 b 727 0 704 3 716 0 b 753 7 737 0 747 3 b 863 112 762 14 821 73 b 929 161 873 122 916 161 b 950 144 936 161 942 156 b 1076 10 956 135 1063 24 b 1104 0 1081 3 1093 0 b 1130 7 1115 0 1125 3 b 1236 108 1139 14 1195 69 b 1367 314 1297 160 1367 233 z',\r\n        },\r\n        ornamentPrecompDoubleCadenceUpperPrefix: {\r\n            x_min: 0,\r\n            x_max: 1278,\r\n            y_min: 0,\r\n            y_max: 247,\r\n            ha: 247,\r\n            o: 'm 1801 356 b 1776 346 1793 356 1783 351 b 1642 192 1760 333 1659 206 b 1614 177 1630 181 1621 177 b 1591 190 1606 177 1597 184 b 1469 334 1578 203 1482 323 b 1430 356 1453 347 1441 356 b 1398 343 1420 356 1411 353 b 1365 307 1385 331 1377 318 l 1240 164 b 1097 330 1187 226 1104 320 b 1053 356 1084 346 1071 354 b 1021 343 1041 356 1034 353 b 988 307 1008 333 998 318 b 865 168 946 262 904 216 l 861 163 b 717 330 808 223 724 320 b 672 356 704 346 691 354 b 641 343 661 356 654 353 b 608 307 628 333 618 318 b 485 168 566 262 524 216 l 455 134 b 284 46 409 88 351 46 b 16 285 148 46 32 265 b 3 295 9 292 4 295 b 0 291 1 295 0 292 b 1 285 0 288 1 285 b 308 0 42 190 157 0 b 530 120 415 1 482 63 b 559 144 539 128 549 137 b 590 163 573 156 583 163 b 612 145 598 163 603 157 b 739 10 618 137 724 24 b 768 0 744 3 756 0 b 793 7 778 0 788 3 b 903 114 802 14 861 75 l 939 144 b 971 163 953 156 963 163 b 992 145 978 163 984 157 b 1119 10 998 137 1106 24 b 1148 0 1125 3 1136 0 b 1174 7 1158 0 1168 3 b 1284 114 1182 14 1241 75 b 1316 144 1282 115 1312 141 b 1348 161 1331 156 1339 161 b 1371 145 1355 161 1361 157 b 1496 10 1377 137 1485 24 b 1525 0 1502 3 1513 0 b 1552 7 1536 0 1547 3 b 1819 298 1562 17 1800 276 b 1840 330 1829 308 1840 320 b 1832 344 1840 334 1837 340 b 1801 356 1820 351 1810 356 z',\r\n        },\r\n        ornamentPrecompDoubleCadenceUpperPrefixTurn: {\r\n            x_min: 0,\r\n            x_max: 1277,\r\n            y_min: -62,\r\n            y_max: 333,\r\n            ha: 395,\r\n            o: 'm 1273 202 l 1273 480 l 1230 480 l 1230 174 l 1097 328 b 1053 354 1084 344 1071 353 b 1021 341 1041 354 1034 351 b 988 305 1008 331 998 317 b 865 167 945 261 904 215 l 861 161 b 717 328 808 222 724 318 b 672 354 704 344 691 353 b 641 341 661 354 654 351 b 608 305 628 331 618 317 b 485 167 564 261 524 215 b 455 132 474 156 465 144 b 284 45 410 88 350 45 b 14 284 148 45 30 264 b 3 294 9 291 4 294 b 0 289 1 294 0 291 b 1 284 0 287 1 284 b 308 -1 42 189 157 -1 b 530 118 415 0 481 62 b 557 143 539 127 547 135 b 590 161 572 154 582 161 b 612 144 598 161 603 156 b 737 9 618 135 724 24 b 768 -1 743 1 755 -1 b 793 6 778 -1 788 1 b 903 112 802 13 861 73 l 937 143 b 971 161 953 154 963 161 b 992 144 978 161 984 156 b 1117 9 998 135 1104 24 b 1148 -1 1123 1 1136 -1 b 1174 6 1158 -1 1168 1 l 1230 60 l 1230 -89 l 1273 -89 l 1273 102 l 1283 112 b 1348 160 1295 125 1332 160 b 1371 144 1355 160 1361 156 b 1496 9 1377 135 1483 24 b 1525 -1 1502 1 1513 -1 b 1552 6 1536 -1 1547 1 b 1819 297 1562 16 1800 275 b 1839 328 1827 307 1839 320 b 1801 354 1839 343 1813 354 b 1776 344 1793 354 1783 350 b 1642 190 1760 331 1657 206 b 1614 176 1630 180 1621 176 b 1591 189 1606 176 1597 183 b 1467 333 1578 203 1480 321 b 1430 354 1453 346 1441 354 b 1398 341 1420 354 1411 351 b 1365 305 1385 330 1377 317 z',\r\n        },\r\n        ornamentPrecompTrillLowerSuffix: {\r\n            x_min: 0,\r\n            x_max: 859,\r\n            y_min: -222,\r\n            y_max: 246,\r\n            ha: 468,\r\n            o: 'm 1164 217 b 1031 351 1138 259 1063 351 b 1011 337 1020 351 1024 347 b 828 167 952 291 886 217 l 824 164 b 683 328 772 225 690 318 b 638 354 670 344 657 353 b 606 341 626 354 619 351 b 573 305 593 331 583 317 b 451 167 530 261 490 215 l 446 161 b 302 328 393 222 310 318 b 258 354 289 344 276 353 b 226 341 246 354 239 351 b 193 305 213 331 203 317 b 71 167 150 261 109 215 b 17 105 52 147 36 127 b 0 73 10 98 0 84 b 29 58 0 65 7 58 b 86 92 56 59 72 79 b 143 143 105 109 122 127 b 176 161 157 154 168 161 b 197 144 183 161 189 156 b 323 9 203 135 310 23 b 353 -1 328 1 340 -1 b 379 6 363 -1 373 1 b 488 112 387 13 446 73 l 523 143 b 556 161 539 154 549 161 b 577 144 563 161 569 156 b 703 9 583 135 690 23 b 733 -1 708 1 721 -1 b 759 6 743 -1 753 1 b 868 112 768 13 827 73 b 955 183 878 122 943 183 b 1081 107 965 183 1031 153 b 1156 -89 1128 63 1156 6 l 1156 -102 b 948 -297 1156 -204 1048 -297 b 806 -271 904 -297 850 -282 l 792 -266 b 801 -288 792 -268 795 -282 b 948 -320 809 -297 880 -320 b 1237 -50 1092 -320 1237 -199 b 1164 217 1237 75 1218 122 z',\r\n        },\r\n        brassScoop: {\r\n            x_min: 1,\r\n            x_max: 320,\r\n            y_min: -373,\r\n            y_max: 13,\r\n            ha: 386,\r\n            o: 'm 35 -537 b 461 -12 194 -518 461 -289 b 438 19 461 13 451 19 b 410 -9 425 19 413 9 b 35 -425 357 -366 92 -403 b 1 -482 13 -433 1 -438 l 1 -505 b 26 -537 1 -526 3 -537 z',\r\n        },\r\n        brassDoitMedium: {\r\n            x_min: 0,\r\n            x_max: 489,\r\n            y_min: -40,\r\n            y_max: 346,\r\n            ha: 386,\r\n            o: 'm 33 -58 b 704 468 255 -58 683 186 b 681 498 704 494 693 498 b 654 471 668 498 658 488 b 33 55 550 118 91 76 b 0 -3 12 46 0 42 l 0 -26 b 24 -58 0 -46 1 -58 z',\r\n        },\r\n        brassFallLipShort: {\r\n            x_min: 1,\r\n            x_max: 293,\r\n            y_min: -345,\r\n            y_max: 42,\r\n            ha: 387,\r\n            o: 'm 22 60 b 1 35 4 60 1 52 l 1 6 b 26 -50 3 -40 10 -43 b 32 -52 27 -50 30 -50 b 376 -469 85 -73 327 -111 b 400 -497 379 -487 387 -497 b 422 -467 412 -497 422 -491 b 32 60 422 -187 177 40 z',\r\n        },\r\n        brassLiftMedium: {\r\n            x_min: 0,\r\n            x_max: 811,\r\n            y_min: 0,\r\n            y_max: 852,\r\n            ha: 852,\r\n            o: 'm 1138 1220 b 1135 1225 1135 1223 1135 1224 b 1129 1227 1133 1227 1130 1227 b 1117 1207 1122 1227 1117 1212 l 1117 1201 b 1109 1164 1117 1187 1117 1172 b 1100 1156 1107 1161 1104 1158 b 959 1104 1058 1128 995 1140 b 929 1032 936 1081 929 1056 b 932 1007 929 1024 930 1015 b 923 976 932 995 930 985 l 914 971 b 773 919 873 942 809 955 b 743 847 750 896 743 870 b 746 821 743 838 744 829 b 737 791 746 809 744 799 l 729 783 b 588 733 687 756 624 769 b 557 661 564 710 557 684 b 560 635 557 652 559 644 b 552 605 560 624 559 612 l 543 598 b 402 547 501 570 438 583 b 372 475 379 524 372 498 b 374 449 372 467 373 458 b 366 419 374 438 373 426 l 357 412 b 216 361 315 384 252 397 b 186 289 193 338 186 312 b 189 264 186 281 187 272 b 180 233 189 252 187 240 b 171 226 177 232 174 229 b 30 176 130 199 66 212 b 0 104 7 153 0 128 b 33 0 0 88 14 0 b 49 17 40 0 49 10 b 71 63 52 35 56 49 b 212 115 102 95 154 59 b 239 186 230 134 239 160 b 236 210 239 194 238 202 b 256 249 239 225 243 236 b 397 301 288 281 340 245 b 425 372 416 320 425 346 b 422 396 425 380 423 387 b 442 435 425 410 429 422 b 583 487 474 467 526 431 b 611 557 602 505 611 531 b 608 582 611 566 609 573 b 628 621 611 596 615 608 b 769 672 660 652 711 618 b 796 743 788 691 796 717 b 793 768 796 752 795 759 b 814 806 796 782 801 793 b 955 858 845 838 897 804 b 982 929 973 877 982 903 b 979 953 982 937 981 945 b 999 992 982 968 986 979 b 1140 1045 1031 1024 1083 989 b 1168 1116 1161 1066 1168 1090 b 1138 1220 1168 1162 1145 1207 z',\r\n        },\r\n        brassFallRoughMedium: {\r\n            x_min: 0,\r\n            x_max: 811,\r\n            y_min: 0,\r\n            y_max: 852,\r\n            ha: 852,\r\n            o: 'm 30 1220 b 0 1116 23 1207 0 1162 b 27 1045 0 1090 7 1066 b 168 992 85 989 137 1024 b 189 953 181 979 186 968 b 186 929 187 945 186 937 b 213 858 186 903 194 877 b 354 806 271 804 323 838 b 374 768 367 793 372 782 b 372 743 373 759 372 752 b 399 672 372 717 380 691 b 540 621 456 618 508 652 b 560 582 553 608 557 596 b 557 557 559 573 557 566 b 585 487 557 531 566 505 b 726 435 642 431 694 467 b 746 396 739 422 743 410 b 743 372 744 387 743 380 b 770 301 743 346 752 320 b 912 249 828 245 880 281 b 932 210 924 236 929 225 b 929 186 930 202 929 194 b 956 115 929 160 937 134 b 1097 63 1014 59 1066 95 b 1119 17 1112 49 1116 35 b 1135 0 1119 10 1128 0 b 1168 104 1153 0 1168 91 b 1138 176 1168 128 1161 153 b 996 226 1102 212 1038 199 b 988 233 994 229 991 232 b 979 264 981 240 979 252 b 982 289 981 272 982 281 b 952 361 982 312 975 338 b 811 412 916 397 852 384 l 802 419 b 793 449 795 426 793 438 b 796 475 795 458 796 467 b 766 547 796 498 789 524 b 625 598 730 583 667 570 l 616 605 b 608 635 609 612 608 624 b 611 661 609 644 611 652 b 580 733 611 684 603 710 b 439 783 544 769 481 756 l 431 791 b 422 821 423 799 422 809 b 425 847 423 829 425 838 b 395 919 425 870 418 896 b 253 971 359 955 295 942 l 245 976 b 236 1007 238 985 236 995 b 239 1032 238 1015 239 1024 b 209 1104 239 1056 232 1081 b 68 1156 173 1140 109 1128 b 59 1164 63 1158 60 1161 b 50 1201 50 1172 50 1187 l 50 1207 b 39 1227 50 1212 46 1227 b 33 1225 37 1227 35 1227 b 30 1220 33 1224 33 1223 z',\r\n        },\r\n        brassBend: {\r\n            x_min: 0,\r\n            x_max: 392,\r\n            y_min: 0,\r\n            y_max: 282,\r\n            ha: 282,\r\n            o: 'm 282 0 b 552 72 369 0 456 23 b 564 92 560 75 564 84 l 564 383 b 541 406 564 395 554 406 b 518 383 528 406 518 395 l 518 107 b 282 46 435 65 357 46 b 46 107 207 46 130 65 l 46 383 b 23 406 46 395 36 406 b 0 383 10 406 0 395 l 0 92 b 13 72 0 84 4 75 b 282 0 108 23 196 0 z',\r\n        },\r\n        brassMuteClosed: {\r\n            x_min: 0,\r\n            x_max: 272,\r\n            y_min: 0,\r\n            y_max: 272,\r\n            ha: 272,\r\n            o: 'm 392 219 l 219 219 l 219 392 l 173 392 l 173 219 l 0 219 l 0 173 l 173 173 l 173 0 l 219 0 l 219 173 l 392 173 z',\r\n        },\r\n        brassMuteOpen: {\r\n            x_min: 0,\r\n            x_max: 304,\r\n            y_min: 0,\r\n            y_max: 304,\r\n            ha: 304,\r\n            o: 'm 219 0 b 438 219 340 0 438 98 b 219 438 438 340 340 438 b 0 219 98 438 0 340 b 219 0 0 98 98 0 z m 219 392 b 392 219 314 392 392 314 b 219 46 392 124 314 46 b 46 219 124 46 46 124 b 219 392 46 314 124 392 z',\r\n        },\r\n        brassFlip: {\r\n            x_min: 0,\r\n            x_max: 379,\r\n            y_min: 0,\r\n            y_max: 282,\r\n            ha: 282,\r\n            o: 'm 523 0 b 541 9 530 0 536 3 b 546 22 544 13 546 17 b 536 42 546 29 541 36 l 36 402 b 23 406 33 405 27 406 b 0 383 12 406 0 395 l 0 23 b 23 0 0 10 10 0 b 46 23 36 0 46 10 l 46 337 l 508 4 b 523 0 513 1 517 0 z',\r\n        },\r\n        brassJazzTurn: {\r\n            x_min: 0,\r\n            x_max: 620,\r\n            y_min: 0,\r\n            y_max: 245,\r\n            ha: 245,\r\n            o: 'm 792 190 b 765 176 780 179 772 176 b 740 190 755 176 747 183 b 629 325 727 202 644 312 b 593 347 616 338 605 347 b 562 334 583 346 575 344 b 528 298 549 323 539 310 l 406 176 b 389 168 406 176 399 168 b 374 176 384 168 379 170 b 245 325 360 192 245 325 b 200 353 232 343 219 351 b 168 340 190 353 181 350 l 17 156 b 0 121 10 147 0 132 b 16 107 0 114 4 108 b 84 143 26 107 76 137 b 118 160 92 150 108 160 b 141 143 125 160 131 154 b 265 10 147 135 253 24 b 294 0 271 3 282 0 b 321 7 305 0 315 3 b 498 160 321 7 478 158 b 521 143 505 160 513 154 b 647 10 528 135 635 24 b 675 0 652 3 664 0 b 703 7 687 0 697 3 b 874 186 713 16 855 164 b 893 220 881 196 893 212 b 873 245 890 235 883 243 b 796 194 847 245 815 213 z',\r\n        },\r\n        brassSmear: {\r\n            x_min: 1,\r\n            x_max: 306,\r\n            y_min: 0,\r\n            y_max: 170,\r\n            ha: 170,\r\n            o: 'm 193 79 b 308 0 219 50 264 0 b 439 117 396 0 438 102 b 439 120 439 118 439 118 l 441 125 b 441 128 441 127 441 127 b 433 141 441 135 439 141 b 416 130 429 141 423 137 b 343 94 390 107 370 94 b 269 153 315 94 294 121 l 265 158 b 144 245 239 190 180 245 b 6 134 62 245 10 143 b 1 114 3 125 1 118 b 7 107 1 108 4 107 b 36 122 13 107 22 112 b 92 151 55 137 65 151 b 183 89 125 151 161 112 b 189 84 184 88 187 86 z',\r\n        },\r\n        stringsDownBow: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: 0,\r\n            y_max: 318,\r\n            ha: 318,\r\n            o: 'm 37 458 b 0 420 17 458 0 441 l 0 17 b 17 0 0 7 9 0 l 37 0 b 55 17 46 0 55 7 l 55 253 b 225 278 55 269 140 278 b 395 253 310 278 395 269 l 395 17 b 413 0 395 7 403 0 l 432 0 b 449 17 441 0 449 7 l 449 420 b 412 458 449 441 432 458 z',\r\n        },\r\n        stringsUpBow: {\r\n            x_min: 1,\r\n            x_max: 249,\r\n            y_min: 1,\r\n            y_max: 495,\r\n            ha: 494,\r\n            o: 'm 181 1 b 206 22 193 1 203 10 l 359 683 l 359 688 b 338 713 359 700 351 710 l 333 713 b 308 694 321 713 311 706 l 180 140 l 53 694 b 27 713 49 706 39 713 l 22 713 b 1 690 10 710 1 700 b 3 683 1 687 1 685 l 154 22 b 181 1 157 10 167 1 z',\r\n        },\r\n        stringsHarmonic: {\r\n            x_min: 0,\r\n            x_max: 200,\r\n            y_min: 0,\r\n            y_max: 200,\r\n            ha: 200,\r\n            o: 'm 288 144 b 144 288 288 225 223 288 b 0 144 65 288 0 225 b 144 0 0 65 65 0 b 288 144 223 0 288 65 z m 144 249 b 249 144 203 249 249 203 b 144 39 249 86 203 39 b 39 144 86 39 39 86 b 144 249 39 203 86 249 z',\r\n        },\r\n        pluckedSnapPizzicatoAbove: {\r\n            x_min: 0,\r\n            x_max: 200,\r\n            y_min: 0,\r\n            y_max: 300,\r\n            ha: 300,\r\n            o: 'm 0 144 b 144 0 0 63 65 0 b 288 144 223 0 288 63 b 167 285 288 215 235 275 l 167 432 l 121 432 l 121 285 b 0 144 52 275 0 215 z m 121 246 l 121 144 l 167 144 l 167 246 b 249 144 213 236 249 193 b 144 39 249 85 202 39 b 39 144 85 39 39 85 b 121 246 39 193 73 236 z',\r\n        },\r\n        pluckedSnapPizzicatoBelow: {\r\n            x_min: 0,\r\n            x_max: 200,\r\n            y_min: 0,\r\n            y_max: 300,\r\n            ha: 300,\r\n            o: 'm 288 288 b 144 432 288 369 223 432 b 0 288 65 432 0 369 b 121 145 0 216 52 157 l 121 0 l 167 0 l 167 145 b 288 288 235 157 288 216 z m 167 186 l 167 288 l 121 288 l 121 186 b 39 288 75 196 39 238 b 144 393 39 347 86 393 b 249 288 203 393 249 347 b 167 186 249 238 215 196 z',\r\n        },\r\n        pluckedLeftHandPizzicato: {\r\n            x_min: 0,\r\n            x_max: 272,\r\n            y_min: 0,\r\n            y_max: 272,\r\n            ha: 272,\r\n            o: 'm 392 219 l 219 219 l 219 392 l 173 392 l 173 219 l 0 219 l 0 173 l 173 173 l 173 0 l 219 0 l 219 173 l 392 173 z',\r\n        },\r\n        keyboardPedalPed: {\r\n            x_min: 0,\r\n            x_max: 1019,\r\n            y_min: -8,\r\n            y_max: 555,\r\n            ha: 563,\r\n            o: 'm 413 799 b 179 749 327 798 261 789 b 0 517 107 713 0 632 b 122 376 0 454 37 376 b 240 540 189 376 240 452 b 225 586 240 579 233 586 b 204 549 213 586 212 573 b 138 480 199 527 181 480 b 85 549 96 480 85 517 l 85 554 b 353 762 89 690 230 762 b 373 752 364 762 373 760 b 351 708 373 740 360 723 b 274 546 330 675 274 585 b 353 416 274 508 333 444 b 412 304 372 390 412 351 b 382 228 412 275 403 256 b 334 190 363 202 361 200 b 147 29 271 167 147 88 b 196 -12 147 4 171 -12 b 343 108 239 -12 279 33 l 363 132 b 387 150 370 141 376 150 b 543 -4 445 150 467 -4 b 631 42 567 -4 586 0 l 668 78 b 685 89 674 84 680 89 b 696 75 688 89 690 86 b 809 -9 717 29 753 -9 b 946 66 854 -9 894 13 b 988 107 971 92 981 107 b 1002 89 994 107 996 99 b 1152 -4 1030 36 1077 -4 b 1329 248 1238 -4 1329 82 b 792 717 1329 556 1047 665 b 766 720 785 719 775 720 b 747 703 752 720 747 711 b 780 680 747 693 756 685 b 1223 222 1028 621 1223 504 b 1152 39 1223 122 1205 39 b 1073 229 1104 39 1073 132 b 1132 423 1073 314 1086 377 b 1142 442 1140 432 1142 436 b 1126 458 1142 451 1136 458 b 1093 446 1119 458 1109 455 b 975 216 1022 408 975 337 l 975 190 b 943 121 975 160 972 150 b 852 69 899 76 877 69 b 776 148 816 69 786 117 b 773 163 775 154 773 158 b 786 177 773 167 776 170 l 801 187 b 937 366 867 235 937 284 b 844 454 937 422 900 454 b 665 217 711 454 665 331 b 671 153 665 197 667 176 l 671 147 b 662 134 671 143 670 140 b 605 111 639 118 625 111 b 521 160 572 111 546 135 b 451 203 497 184 474 197 b 426 212 435 207 426 206 b 436 230 426 216 429 220 b 510 389 464 269 510 340 b 429 521 510 435 480 462 b 369 629 387 570 369 599 b 402 720 369 648 384 691 b 462 763 425 759 446 763 b 611 624 540 763 611 704 b 564 575 611 592 590 575 b 501 602 540 575 520 582 b 474 622 492 611 487 622 b 459 603 465 622 459 615 b 603 471 459 570 510 471 b 711 588 670 471 711 524 b 422 799 711 742 554 799 z m 815 403 b 848 343 838 403 848 383 b 780 226 848 295 824 261 b 765 217 773 220 768 217 b 759 228 762 217 759 220 b 756 282 757 245 756 262 b 815 403 756 346 772 403 z m 1405 124 b 1344 62 1369 124 1344 98 b 1405 0 1344 26 1369 0 b 1467 62 1441 0 1467 26 b 1405 124 1467 98 1441 124 z',\r\n        },\r\n        keyboardPedalUp: {\r\n            x_min: 0,\r\n            x_max: 450,\r\n            y_min: 0,\r\n            y_max: 450,\r\n            ha: 450,\r\n            o: 'm 582 396 b 516 367 554 396 533 384 b 465 340 495 347 487 340 l 458 340 b 412 377 432 340 412 348 b 432 409 412 387 419 396 l 438 415 b 490 429 451 428 464 429 b 575 501 534 429 575 452 b 501 575 575 541 541 575 b 429 490 452 575 429 534 b 415 438 429 464 428 451 l 409 432 b 377 412 396 419 387 412 b 340 458 348 412 340 432 l 340 465 b 367 516 340 487 347 495 b 396 582 384 533 396 554 b 324 648 396 625 363 648 b 252 582 285 648 252 625 b 281 516 252 554 264 533 b 308 465 301 495 308 487 l 308 458 b 271 412 308 432 300 412 b 239 432 261 412 252 419 l 233 438 b 219 490 220 451 219 464 b 147 575 219 534 196 575 b 73 501 107 575 73 541 b 158 429 73 452 114 429 b 210 415 184 429 197 428 l 216 409 b 236 377 229 396 236 387 b 190 340 236 348 216 340 l 183 340 b 132 367 161 340 153 347 b 66 396 115 384 94 396 b 0 324 23 396 0 363 b 66 252 0 285 23 252 b 132 281 94 252 115 264 b 183 308 153 301 161 308 l 190 308 b 236 271 216 308 236 300 b 216 239 236 261 229 252 l 210 233 b 158 219 197 220 184 219 b 73 147 114 219 73 196 b 147 73 73 107 107 73 b 219 158 196 73 219 114 b 233 210 219 184 220 197 l 239 216 b 271 236 252 229 261 236 b 308 190 300 236 308 216 l 308 183 b 281 132 308 161 301 153 b 252 66 264 115 252 94 b 324 0 252 23 285 0 b 396 66 363 0 396 23 b 367 132 396 94 384 115 b 340 183 347 153 340 161 l 340 190 b 377 236 340 216 348 236 b 409 216 387 236 396 229 l 415 210 b 429 158 428 197 429 184 b 501 73 429 114 452 73 b 575 147 541 73 575 107 b 490 219 575 196 534 219 b 438 233 464 219 451 220 l 432 239 b 412 271 419 252 412 261 b 458 308 412 300 432 308 l 465 308 b 516 281 487 308 495 301 b 582 252 533 264 554 252 b 648 324 625 252 648 285 b 582 396 648 363 625 396 z m 324 271 b 271 324 291 271 271 291 b 324 377 271 357 291 377 b 377 324 357 377 377 357 b 324 271 377 291 357 271 z',\r\n        },\r\n        pictChokeCymbal: {\r\n            x_min: 1,\r\n            x_max: 152,\r\n            y_min: 2,\r\n            y_max: 251,\r\n            ha: 249,\r\n            o: 'm 104 361 b 1 271 42 361 1 321 b 82 190 1 222 35 190 b 122 160 118 190 122 160 b 125 144 124 154 125 150 b 102 88 125 124 115 105 b 37 32 78 56 40 35 b 26 17 32 29 26 26 l 27 16 b 37 3 29 6 33 3 b 181 102 85 3 158 66 b 219 239 210 147 219 197 l 219 249 b 104 361 219 317 170 361 z',\r\n        },\r\n        wiggleArpeggiatoUp: {\r\n            x_min: -33,\r\n            x_max: 292,\r\n            y_min: 0,\r\n            y_max: 119,\r\n            ha: 119,\r\n            o: 'm 130 171 b -39 68 16 171 -14 91 b -48 53 -45 62 -48 58 b -29 42 -48 46 -39 42 b -10 46 -23 42 -16 43 b 56 63 12 56 29 63 b 248 0 121 63 135 0 b 419 127 361 0 410 104 b 420 132 420 130 420 131 b 412 140 420 137 416 140 b 386 130 403 140 392 134 b 334 107 367 117 353 107 b 318 108 330 107 324 107 b 240 138 289 112 265 128 b 130 171 209 153 168 171 z',\r\n        },\r\n        arrowheadBlackUp: {\r\n            x_min: 0,\r\n            x_max: 228,\r\n            y_min: 0,\r\n            y_max: 299,\r\n            ha: 299,\r\n            o: 'm 166 431 b 0 20 111 274 0 30 b 16 0 0 12 6 0 l 17 1 b 166 50 43 16 160 50 b 310 1 171 50 289 13 l 311 0 b 328 20 321 0 328 12 b 166 431 328 30 220 274 z',\r\n        },\r\n        arrowheadBlackDown: {\r\n            x_min: 0,\r\n            x_max: 228,\r\n            y_min: 0,\r\n            y_max: 299,\r\n            ha: 299,\r\n            o: 'm 166 0 b 328 410 220 157 328 400 b 311 431 328 419 321 431 l 310 429 b 166 380 289 418 171 380 b 17 429 160 380 43 415 l 16 431 b 0 410 6 431 0 419 b 166 0 0 400 111 157 z',\r\n        },\r\n        arpeggiatoUp: {\r\n            x_min: 1,\r\n            x_max: 229,\r\n            y_min: 7,\r\n            y_max: 1511,\r\n            ha: 1504,\r\n            o: 'm 219 1848 l 330 1848 l 164 2176 l 1 1848 l 121 1848 b 92 1778 115 1822 101 1800 l 89 1773 b 59 1668 75 1741 59 1702 b 96 1555 59 1614 76 1580 b 99 1551 98 1554 99 1551 l 102 1547 b 124 1496 115 1531 124 1515 b 122 1482 124 1492 124 1488 b 92 1404 118 1453 102 1428 b 59 1293 78 1372 59 1332 b 105 1172 59 1234 81 1198 b 124 1120 118 1155 124 1143 l 122 1113 b 122 1110 122 1113 122 1112 b 92 1032 118 1081 102 1057 b 59 922 78 1001 59 960 b 115 792 59 855 86 816 b 124 760 121 782 124 773 b 122 744 124 756 124 750 b 92 667 118 716 102 693 b 59 556 78 635 59 595 b 108 433 59 495 82 458 b 124 389 117 420 124 408 b 122 374 124 384 124 379 b 92 298 118 346 102 323 l 89 292 b 59 186 75 261 59 222 b 163 19 59 73 140 42 b 177 10 168 13 173 10 b 189 29 184 10 189 19 b 184 48 189 35 187 42 b 167 114 174 69 167 85 b 230 305 167 179 229 193 b 181 423 230 357 209 396 b 167 484 173 442 167 458 b 230 675 167 547 229 563 b 179 796 230 729 206 769 b 167 850 171 812 167 827 b 230 1040 167 913 229 929 b 183 1158 230 1092 209 1130 b 167 1220 173 1178 167 1194 b 230 1411 167 1284 229 1300 b 186 1526 230 1462 210 1499 b 167 1594 176 1529 167 1584 b 230 1786 167 1659 229 1673 b 219 1848 230 1809 226 1829 z',\r\n        },\r\n        arpeggiatoDown: {\r\n            x_min: 1,\r\n            x_max: 229,\r\n            y_min: -4,\r\n            y_max: 1500,\r\n            ha: 1504,\r\n            o: 'm 219 323 b 230 384 226 341 230 361 b 167 576 229 497 167 511 b 186 644 167 586 176 641 b 230 759 210 671 230 708 b 167 950 229 870 167 886 b 183 1012 167 976 173 992 b 230 1130 209 1040 230 1079 b 167 1320 229 1241 167 1257 b 179 1374 167 1344 171 1358 b 230 1495 206 1401 230 1441 b 167 1686 229 1607 167 1623 b 181 1747 167 1712 173 1728 b 230 1865 209 1774 230 1813 b 167 2056 229 1977 167 1992 b 184 2123 167 2085 174 2101 b 189 2141 187 2128 189 2136 b 177 2160 189 2151 184 2160 b 163 2151 173 2160 168 2157 b 59 1984 140 2128 59 2097 b 89 1878 59 1948 75 1909 l 92 1872 b 122 1796 102 1848 118 1824 b 124 1781 124 1791 124 1786 b 108 1737 124 1763 117 1750 b 59 1614 82 1712 59 1675 b 92 1503 59 1575 78 1535 b 122 1426 102 1477 118 1454 b 124 1410 124 1420 124 1414 b 115 1378 124 1397 121 1388 b 59 1248 86 1354 59 1315 b 92 1138 59 1210 78 1169 b 122 1060 102 1113 118 1089 b 122 1057 122 1058 122 1058 l 124 1050 b 105 998 124 1027 118 1015 b 59 877 81 972 59 936 b 92 766 59 838 78 798 b 122 688 102 742 118 717 b 124 674 124 683 124 678 b 102 624 124 655 115 639 l 99 619 b 96 615 99 619 98 616 b 59 503 76 590 59 556 b 89 397 59 468 75 429 l 92 392 b 121 323 101 370 115 348 l 1 323 l 164 -6 l 330 323 z',\r\n        },\r\n        repeat1Bar: {\r\n            x_min: 0,\r\n            x_max: 532,\r\n            y_min: -250,\r\n            y_max: 279,\r\n            ha: 529,\r\n            o: 'm 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z m 89 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 z m 675 -71 b 586 -161 626 -71 586 -111 b 675 -251 586 -210 626 -251 b 766 -161 726 -251 766 -210 b 675 -71 766 -111 726 -71 z',\r\n        },\r\n        repeat2Bars: {\r\n            x_min: 0,\r\n            x_max: 762,\r\n            y_min: -250,\r\n            y_max: 279,\r\n            ha: 529,\r\n            o: 'm 1090 380 b 1097 395 1094 386 1097 390 b 1089 402 1097 399 1094 402 l 936 402 b 910 380 927 402 920 393 l 336 -340 b 331 -350 333 -343 331 -347 b 343 -360 331 -356 336 -360 l 485 -360 b 516 -340 498 -360 508 -348 z m 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z m 89 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 z m 1007 -71 b 917 -161 958 -71 917 -111 b 1007 -251 917 -210 958 -251 b 1097 -161 1057 -251 1097 -210 b 1007 -71 1097 -111 1057 -71 z',\r\n        },\r\n        repeat4Bars: {\r\n            x_min: 0,\r\n            x_max: 1232,\r\n            y_min: -250,\r\n            y_max: 279,\r\n            ha: 529,\r\n            o: 'm 1767 380 b 1774 395 1771 386 1774 390 b 1765 402 1774 399 1771 402 l 1613 402 b 1587 380 1604 402 1597 393 l 1012 -340 b 1008 -350 1009 -343 1008 -347 b 1020 -360 1008 -356 1012 -360 l 1162 -360 b 1192 -340 1175 -360 1185 -348 z m 1436 380 b 1443 395 1440 386 1443 390 b 1434 402 1443 399 1440 402 l 1282 402 b 1256 380 1273 402 1266 393 l 681 -340 b 677 -350 678 -343 677 -347 b 688 -360 677 -356 681 -360 l 831 -360 b 861 -340 844 -360 854 -348 z m 1090 380 b 1097 395 1094 386 1097 390 b 1089 402 1097 399 1094 402 l 936 402 b 910 380 927 402 920 393 l 336 -340 b 331 -350 333 -343 331 -347 b 343 -360 331 -356 336 -360 l 485 -360 b 516 -340 498 -360 508 -348 z m 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z m 89 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 z m 1683 -71 b 1594 -161 1634 -71 1594 -111 b 1683 -251 1594 -210 1634 -251 b 1774 -161 1734 -251 1774 -210 b 1683 -71 1774 -111 1734 -71 z',\r\n        },\r\n        repeatBarSlash: {\r\n            x_min: 0,\r\n            x_max: 532,\r\n            y_min: -250,\r\n            y_max: 279,\r\n            ha: 529,\r\n            o: 'm 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 z',\r\n        },\r\n        csymDiminished: {\r\n            x_min: 0,\r\n            x_max: 473,\r\n            y_min: 0,\r\n            y_max: 473,\r\n            ha: 473,\r\n            o: 'm 341 681 b 0 341 153 681 0 530 b 341 0 0 153 153 0 b 681 341 530 0 681 153 b 341 681 681 530 530 681 z m 341 618 b 618 341 495 618 618 495 b 341 63 618 189 494 63 b 63 341 187 63 63 187 b 341 618 63 494 189 618 z',\r\n        },\r\n        csymHalfDiminished: {\r\n            x_min: -16,\r\n            x_max: 488,\r\n            y_min: -15,\r\n            y_max: 489,\r\n            ha: 504,\r\n            o: 'm 703 660 l 658 704 l 557 603 b 340 681 498 652 422 681 b -1 341 151 681 -1 530 b 78 124 -1 259 29 183 l -23 23 l 22 -22 l 122 79 b 340 0 181 30 258 0 b 680 341 528 0 680 153 b 602 559 680 423 651 500 z m 62 341 b 340 618 62 494 187 618 b 513 559 403 618 464 598 l 122 168 b 62 341 84 217 62 278 z m 616 341 b 340 63 616 189 492 63 b 167 124 276 63 216 85 l 557 514 b 616 341 596 465 616 405 z',\r\n        },\r\n        csymAugmented: {\r\n            x_min: 0,\r\n            x_max: 395,\r\n            y_min: 1,\r\n            y_max: 396,\r\n            ha: 395,\r\n            o: 'm 569 318 l 317 318 l 317 570 l 253 570 l 253 318 l 0 318 l 0 255 l 253 255 l 253 1 l 317 1 l 317 255 l 569 255 z',\r\n        },\r\n        csymMajorSeventh: {\r\n            x_min: 0,\r\n            x_max: 558,\r\n            y_min: 1,\r\n            y_max: 477,\r\n            ha: 476,\r\n            o: 'm 402 687 l 0 1 l 804 1 z m 402 562 l 693 65 l 111 65 z',\r\n        },\r\n        csymMinor: {\r\n            x_min: 0,\r\n            x_max: 325,\r\n            y_min: 216,\r\n            y_max: 260,\r\n            ha: 44,\r\n            o: 'm 468 374 l 0 374 l 0 311 l 468 311 z',\r\n        },\r\n        csymParensLeftTall: {\r\n            x_min: 1,\r\n            x_max: 185,\r\n            y_min: 0,\r\n            y_max: 997,\r\n            ha: 997,\r\n            o: 'm 266 48 b 261 65 266 55 264 62 b 92 719 157 212 92 400 b 262 1371 92 1037 154 1228 b 266 1394 266 1378 266 1394 l 266 1424 b 264 1436 266 1431 266 1436 b 259 1434 262 1436 259 1434 b 1 719 84 1261 1 1011 b 259 1 1 429 79 177 b 264 0 261 0 262 0 b 266 9 265 0 266 6 z',\r\n        },\r\n        csymParensRightTall: {\r\n            x_min: -20,\r\n            x_max: 164,\r\n            y_min: 0,\r\n            y_max: 997,\r\n            ha: 997,\r\n            o: 'm -29 9 b -26 0 -29 6 -27 0 b -22 1 -24 0 -23 0 b 236 719 158 177 236 429 b -22 1434 236 1011 154 1261 b -26 1436 -22 1434 -24 1436 b -29 1424 -29 1436 -29 1431 l -29 1394 b -24 1371 -29 1394 -29 1378 b 145 719 84 1228 145 1037 b -23 65 145 400 81 212 b -29 48 -26 62 -29 55 z',\r\n        },\r\n        csymBracketLeftTall: {\r\n            x_min: 0,\r\n            x_max: 155,\r\n            y_min: 0,\r\n            y_max: 1000,\r\n            ha: 1000,\r\n            o: 'm 217 0 b 223 9 220 0 223 4 l 223 37 b 217 46 223 42 220 46 l 92 46 l 92 1394 l 217 1394 b 223 1403 220 1394 223 1398 l 223 1431 b 217 1440 223 1436 220 1440 l 6 1440 b 0 1436 3 1440 0 1439 l 0 4 b 6 0 0 1 3 0 z',\r\n        },\r\n        csymBracketRightTall: {\r\n            x_min: 1,\r\n            x_max: 156,\r\n            y_min: 0,\r\n            y_max: 1000,\r\n            ha: 1000,\r\n            o: 'm 219 0 b 225 4 222 0 225 1 l 225 1436 b 219 1440 225 1439 222 1440 l 7 1440 b 1 1431 4 1440 1 1436 l 1 1403 b 7 1394 1 1398 4 1394 l 132 1394 l 132 46 l 7 46 b 1 37 4 46 1 42 l 1 9 b 7 0 1 4 4 0 z',\r\n        },\r\n        csymParensLeftVeryTall: {\r\n            x_min: 0,\r\n            x_max: 122,\r\n            y_min: 0,\r\n            y_max: 993,\r\n            ha: 993,\r\n            o: 'm 176 32 b 171 49 176 39 174 46 b 60 716 104 194 60 399 b 173 1382 60 1032 101 1241 b 176 1405 176 1390 176 1405 l 176 1427 b 173 1430 176 1428 174 1430 b 0 716 40 1297 0 978 b 170 3 0 428 50 179 b 171 0 170 1 170 0 b 176 6 173 0 176 4 z',\r\n        },\r\n        csymParensRightVeryTall: {\r\n            x_min: -15,\r\n            x_max: 107,\r\n            y_min: 0,\r\n            y_max: 993,\r\n            ha: 993,\r\n            o: 'm -22 6 b -17 0 -22 4 -19 0 b -16 3 -16 0 -16 1 b 154 716 104 179 154 428 b -19 1430 154 978 114 1297 b -22 1427 -20 1430 -22 1428 l -22 1405 b -19 1382 -22 1405 -22 1390 b 94 716 53 1241 94 1032 b -17 49 94 399 50 194 b -22 32 -20 46 -22 39 z',\r\n        },\r\n        csymDiagonalArrangementSlash: {\r\n            x_min: 0,\r\n            x_max: 999,\r\n            y_min: 0,\r\n            y_max: 1000,\r\n            ha: 1000,\r\n            o: 'm 1439 1380 l 1377 1440 l 0 60 l 62 0 z',\r\n        },\r\n        accSagittal5v7KleismaUp: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 -35 b 135 -112 68 -86 99 -112 b 225 68 194 -112 225 -53 l 180 68 b 144 -4 180 20 168 -4 b 122 0 138 -4 131 -3 b 23 248 86 14 52 96 l 0 248 z',\r\n        },\r\n        accSagittal5v7KleismaDown: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 23 -248 b 122 0 52 -96 86 -14 b 144 4 131 3 138 4 b 180 -68 168 4 180 -20 l 225 -68 b 135 112 225 53 194 112 b 45 35 99 112 68 86 l 45 517 l 0 517 z',\r\n        },\r\n        accSagittal5CommaUp: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 225 -517 l 225 248 l 203 248 l 0 -112 l 0 -284 l 180 33 l 180 -517 z',\r\n        },\r\n        accSagittal5CommaDown: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 180 517 l 180 -33 l 0 284 l 0 112 l 203 -248 l 225 -248 l 225 517 z',\r\n        },\r\n        accSagittal7CommaUp: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 248 l 0 -517 l 45 -517 l 45 112 l 89 112 b 180 -68 150 112 180 53 l 180 -248 l 225 -248 l 225 68 b 135 248 225 187 194 248 z',\r\n        },\r\n        accSagittal7CommaDown: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 135 -248 b 225 -68 194 -248 225 -187 l 225 248 l 180 248 l 180 68 b 89 -112 180 -53 150 -112 l 45 -112 l 45 517 l 0 517 l 0 -248 z',\r\n        },\r\n        accSagittal25SmallDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -157 l 0 -259 l 315 -89 l 315 -517 l 360 -517 l 360 248 l 337 248 l 0 68 l 0 -33 l 315 135 l 315 10 z',\r\n        },\r\n        accSagittal25SmallDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 315 -10 l 315 -135 l 0 33 l 0 -68 l 337 -248 l 360 -248 l 360 517 l 315 517 l 315 89 l 0 259 l 0 157 z',\r\n        },\r\n        accSagittal35MediumDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -68 330 112 360 53 l 360 -248 l 405 -248 l 405 68 b 315 248 405 187 374 248 l 203 248 l 0 -112 z',\r\n        },\r\n        accSagittal35MediumDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 112 l 203 -248 l 315 -248 b 405 -68 374 -248 405 -187 l 405 248 l 360 248 l 360 68 b 271 -112 360 -53 330 -112 l 225 -112 l 225 517 l 180 517 l 180 -33 l 0 284 z',\r\n        },\r\n        accSagittal11MediumDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 225 53 l 225 -517 l 271 -517 l 271 53 l 495 -248 l 495 -89 l 248 248 l 0 -89 l 0 -248 z',\r\n        },\r\n        accSagittal11MediumDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 248 l 0 89 l 248 -248 l 495 89 l 495 248 l 271 -53 l 271 517 l 225 517 l 225 -53 z',\r\n        },\r\n        accSagittal11LargeDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 112 l 315 112 b 449 -68 405 112 449 53 l 449 -248 l 495 -248 l 495 68 b 360 248 495 187 449 248 l 135 248 b 0 68 45 248 0 187 z',\r\n        },\r\n        accSagittal11LargeDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 360 -248 b 495 -68 449 -248 495 -187 l 495 248 l 449 248 l 449 68 b 315 -112 449 -53 405 -112 l 271 -112 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittal35LargeDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 248 -248 l 540 112 l 540 274 l 271 -58 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittal35LargeDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 248 -248 l 540 112 l 540 274 l 269 -58 l 269 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalSharp25SDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 b 112 -112 0 -53 36 -112 l 135 -112 l 135 -517 l 180 -517 l 180 -89 b 248 26 206 -65 229 -27 b 315 -89 264 -27 287 -65 l 315 -517 l 360 -517 l 360 -112 l 383 -112 b 495 68 458 -112 495 -53 l 449 68 b 399 -4 449 20 433 -4 b 248 248 297 -4 261 171 b 122 0 216 96 176 14 b 94 -4 112 -3 102 -4 b 45 68 60 -4 45 20 z',\r\n        },\r\n        accSagittalFlat25SUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 45 -68 b 94 4 45 -20 60 4 b 122 0 102 4 112 3 b 248 -248 176 -14 216 -96 b 399 4 261 -171 297 4 b 449 -68 433 4 449 -20 l 495 -68 b 383 112 495 53 458 112 l 360 112 l 360 517 l 315 517 l 315 89 b 248 -26 287 65 264 27 b 180 89 229 27 206 65 l 180 517 l 135 517 l 135 112 l 112 112 b 0 -68 36 112 0 53 z',\r\n        },\r\n        accSagittalSharp7CDown: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 112 l 89 112 b 180 104 124 112 154 109 l 180 -517 l 225 -517 l 225 89 b 315 -68 285 60 315 9 l 315 -248 l 360 -248 l 360 68 b 135 248 360 187 285 248 l 0 248 z',\r\n        },\r\n        accSagittalFlat7CUp: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 135 -248 b 360 -68 285 -248 360 -187 l 360 248 l 315 248 l 315 68 b 225 -89 315 -9 285 -60 l 225 517 l 180 517 l 180 -104 b 89 -112 154 -109 124 -112 l 45 -112 l 45 517 l 0 517 z',\r\n        },\r\n        accSagittalSharp5CDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -517 l 45 71 l 180 -56 l 180 -517 l 225 -517 l 225 -98 l 405 -268 l 405 -112 l 23 248 l 0 248 l 0 -517 z',\r\n        },\r\n        accSagittalFlat5CUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 517 l 0 -248 l 23 -248 l 405 112 l 405 268 l 225 98 l 225 517 l 180 517 l 180 56 l 45 -71 l 45 517 z',\r\n        },\r\n        accSagittalSharp5v7kDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -112 l 0 -276 l 135 -82 l 135 -517 l 180 -517 l 180 -17 l 271 112 l 315 112 l 315 -517 l 360 -517 l 360 107 b 449 -68 420 89 449 30 l 449 -248 l 495 -248 l 495 68 b 360 248 495 189 449 248 l 248 248 z',\r\n        },\r\n        accSagittalFlat5v7kUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 248 -248 l 360 -248 b 495 -68 449 -248 495 -189 l 495 248 l 449 248 l 449 68 b 360 -107 449 -30 420 -89 l 360 517 l 315 517 l 315 -112 l 271 -112 l 180 17 l 180 517 l 135 517 l 135 82 l 0 276 l 0 112 z',\r\n        },\r\n        accSagittalSharp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 180 -53 l 180 -517 l 225 -517 l 225 0 l 292 85 l 360 0 l 360 -517 l 405 -517 l 405 -53 l 585 -274 l 585 -112 l 292 248 l 0 -112 l 0 -274 z',\r\n        },\r\n        accSagittalFlat: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 274 l 0 112 l 292 -248 l 585 112 l 585 274 l 405 53 l 405 517 l 360 517 l 360 0 l 292 -85 l 225 0 l 225 517 l 180 517 l 180 53 z',\r\n        },\r\n        accSagittalSharp5v7kUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -361,\r\n            y_max: 172,\r\n            ha: 533,\r\n            o: 'm 45 -517 l 45 -10 b 135 -92 68 -48 98 -75 l 135 -520 l 180 -520 l 180 -108 b 248 -115 203 -112 225 -115 b 271 -112 256 -115 264 -115 l 271 -517 l 315 -517 l 315 -107 b 449 68 405 -89 449 -30 l 405 68 b 297 -4 405 19 369 -4 b 23 248 131 -4 56 85 l 0 248 l 0 -517 z',\r\n        },\r\n        accSagittalFlat5v7kDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 361,\r\n            ha: 533,\r\n            o: 'm 0 517 l 0 -248 l 23 -248 b 297 4 56 -85 131 4 b 405 -68 369 4 405 -19 l 449 -68 b 315 107 449 30 405 89 l 315 517 l 271 517 l 271 112 b 248 115 264 115 256 115 b 180 108 225 115 203 112 l 180 520 l 135 520 l 135 92 b 45 10 98 75 68 48 l 45 517 z',\r\n        },\r\n        accSagittalSharp5CUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -266 l 135 -153 l 135 -517 l 180 -517 l 180 -115 l 271 -39 l 271 -517 l 315 -517 l 315 0 l 405 75 l 405 -517 l 449 -517 l 449 248 l 428 248 l 0 -112 z',\r\n        },\r\n        accSagittalFlat5CDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 112 l 428 -248 l 449 -248 l 449 517 l 405 517 l 405 -75 l 315 0 l 315 517 l 271 517 l 271 39 l 180 115 l 180 517 l 135 517 l 135 153 l 0 266 z',\r\n        },\r\n        accSagittalSharp7CUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 112 l 135 112 l 135 -517 l 180 -517 l 180 108 b 271 89 213 105 243 99 l 271 -517 l 315 -517 l 315 73 b 405 -68 374 45 405 -3 l 405 -248 l 449 -248 l 449 68 b 135 248 449 187 346 248 l 0 248 z',\r\n        },\r\n        accSagittalFlat7CDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 135 -248 b 449 -68 346 -248 449 -187 l 449 248 l 405 248 l 405 68 b 315 -73 405 3 374 -45 l 315 517 l 271 517 l 271 -89 b 180 -108 243 -99 213 -105 l 180 517 l 135 517 l 135 -112 l 45 -112 l 45 517 l 0 517 z',\r\n        },\r\n        accSagittalSharp25SUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -30 l 495 143 l 495 14 l 0 -157 l 0 -255 l 225 -177 l 225 -517 l 271 -517 l 271 -161 l 360 -130 l 360 -517 l 405 -517 l 405 -115 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 517 248 l 0 68 z',\r\n        },\r\n        accSagittalFlat25SDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 l 517 -248 l 540 -248 l 540 517 l 495 517 l 495 84 l 405 115 l 405 517 l 360 517 l 360 130 l 271 161 l 271 517 l 225 517 l 225 177 l 0 255 l 0 157 l 495 -14 l 495 -143 l 0 30 z',\r\n        },\r\n        accSagittalSharp35MUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -112 l 0 -274 l 135 -108 l 135 -517 l 180 -517 l 180 -53 l 271 58 l 271 -517 l 315 -517 l 315 112 l 360 112 b 405 109 376 112 390 112 l 405 -517 l 449 -517 l 449 96 b 540 -68 510 72 540 17 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 z',\r\n        },\r\n        accSagittalFlat35MDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 292 -248 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 449 -96 540 -17 510 -72 l 449 517 l 405 517 l 405 -109 b 360 -112 390 -112 376 -112 l 315 -112 l 315 517 l 271 517 l 271 -58 l 180 53 l 180 517 l 135 517 l 135 108 l 0 274 l 0 112 z',\r\n        },\r\n        accSagittalSharp11MUp: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -112 l 0 -271 l 180 -79 l 180 -517 l 225 -517 l 225 -30 l 315 65 l 315 -517 l 360 -517 l 360 65 l 449 -30 l 449 -517 l 495 -517 l 495 -79 l 675 -271 l 675 -112 l 337 248 z',\r\n        },\r\n        accSagittalFlat11MDown: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 337 -248 l 675 112 l 675 271 l 495 79 l 495 517 l 449 517 l 449 30 l 360 -65 l 360 517 l 315 517 l 315 -65 l 225 30 l 225 517 l 180 517 l 180 79 l 0 271 l 0 112 z',\r\n        },\r\n        accSagittalSharp11LUp: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 112 l 449 112 l 449 -517 l 495 -517 l 495 104 b 631 -68 585 82 631 26 l 631 -248 l 675 -248 l 675 68 b 449 248 675 187 600 248 l 225 248 b 0 68 75 248 0 187 z',\r\n        },\r\n        accSagittalFlat11LDown: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 449 -248 b 675 -68 600 -248 675 -187 l 675 248 l 631 248 l 631 68 b 495 -104 631 -26 585 -82 l 495 517 l 449 517 l 449 -112 l 360 -112 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalSharp35LUp: {\r\n            x_min: 0,\r\n            x_max: 500,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 71 l 452 -17 l 452 -517 l 495 -517 l 495 -56 l 720 -268 l 720 -112 l 337 248 l 225 248 b 0 68 75 248 0 187 z',\r\n        },\r\n        accSagittalFlat35LDown: {\r\n            x_min: 0,\r\n            x_max: 500,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 337 -248 l 720 112 l 720 268 l 495 56 l 495 517 l 452 517 l 452 17 l 360 -71 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalDoubleSharp25SDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 b 135 -112 0 -53 45 -112 b 243 -62 180 -112 215 -95 l 89 -503 l 143 -517 l 292 -82 l 445 -517 l 495 -503 l 343 -62 b 449 -112 372 -95 408 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 315 148 b 112 -4 274 148 236 -4 b 45 68 68 -4 45 20 z',\r\n        },\r\n        accSagittalDoubleFlat25SUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 45 -68 b 112 4 45 -20 68 4 b 292 -248 236 4 274 -148 b 475 4 315 -148 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 b 343 62 408 112 372 95 l 495 503 l 445 517 l 292 82 l 143 517 l 89 503 l 243 62 b 135 112 215 95 180 112 b 0 -68 45 112 0 53 z',\r\n        },\r\n        accSagittalDoubleSharp7CDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -503 l 52 -517 l 203 -82 l 354 -517 l 405 -503 l 230 0 l 271 108 b 495 -68 420 92 495 35 l 495 -248 l 540 -248 l 540 68 b 225 248 540 187 435 248 l 89 248 l 89 112 l 135 112 l 174 0 z m 213 112 l 203 82 l 192 112 z',\r\n        },\r\n        accSagittalDoubleFlat7CUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 174 0 l 135 -112 l 89 -112 l 89 -248 l 225 -248 b 540 -68 435 -248 540 -187 l 540 248 l 495 248 l 495 68 b 271 -108 495 -35 420 -92 l 230 0 l 405 503 l 354 517 l 203 82 l 52 517 l 0 503 z m 192 -112 l 203 -82 l 213 -112 z',\r\n        },\r\n        accSagittalDoubleSharp5CDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 405 -503 l 230 0 l 232 4 l 585 -264 l 585 -112 l 112 248 l 89 248 l 89 112 l 151 68 l 174 0 l 0 -503 l 52 -517 l 203 -82 l 354 -517 z',\r\n        },\r\n        accSagittalDoubleFlat5CUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 354 517 l 203 82 l 52 517 l 0 503 l 174 0 l 151 -68 l 89 -112 l 89 -248 l 112 -248 l 585 112 l 585 264 l 232 -4 l 230 0 l 405 503 z',\r\n        },\r\n        accSagittalDoubleSharp5v7kDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -274 l 252 35 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 360 112 b 540 -68 480 112 540 53 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 l 0 -112 z',\r\n        },\r\n        accSagittalDoubleFlat5v7kUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 112 l 292 -248 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 360 -112 540 -53 480 -112 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 252 -35 l 0 274 z',\r\n        },\r\n        accSagittalDoubleSharp: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 540 -503 l 366 0 l 380 45 l 675 -271 l 675 -112 l 337 248 l 0 -112 l 0 -271 l 295 45 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 z',\r\n        },\r\n        accSagittalDoubleFlat: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 488 517 l 337 82 l 186 517 l 135 503 l 310 0 l 295 -45 l 0 271 l 0 112 l 337 -248 l 675 112 l 675 271 l 380 -45 l 366 0 l 540 503 z',\r\n        },\r\n        accSagittal7v11KleismaUp: {\r\n            x_min: 0,\r\n            x_max: 219,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 68 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 -45 b 248 -112 200 -89 225 -112 b 315 68 292 -112 315 -53 l 271 68 b 248 -4 271 20 264 -4 b 236 0 245 -4 240 -3 b 157 248 213 14 187 96 b 78 0 127 96 101 14 b 65 -4 73 -3 68 -4 b 45 68 50 -4 45 20 l 0 68 b 68 -112 0 -53 23 -112 z',\r\n        },\r\n        accSagittal7v11KleismaDown: {\r\n            x_min: 0,\r\n            x_max: 219,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 68 112 b 0 -68 23 112 0 53 l 45 -68 b 65 4 45 -20 50 4 b 78 0 68 4 73 3 b 157 -248 101 -14 127 -96 b 236 0 187 -96 213 -14 b 248 4 240 3 245 4 b 271 -68 264 4 271 -20 l 315 -68 b 248 112 315 53 292 112 b 180 45 225 112 200 89 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 z',\r\n        },\r\n        accSagittal17CommaUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 -40 b 315 -118 248 -92 279 -118 b 405 62 374 -118 405 -59 l 360 62 b 324 -10 360 14 348 -10 b 302 -6 318 -10 311 -9 b 206 217 268 9 235 84 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',\r\n        },\r\n        accSagittal17CommaDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 206 -217 b 302 6 235 -84 268 -9 b 324 10 311 9 318 10 b 360 -62 348 10 360 -14 l 405 -62 b 315 118 405 59 374 118 b 225 40 279 118 248 92 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\r\n        },\r\n        accSagittal55CommaUp: {\r\n            x_min: 0,\r\n            x_max: 219,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 248 l 0 -517 l 45 -517 l 45 58 l 315 -274 l 315 -112 l 23 248 z',\r\n        },\r\n        accSagittal55CommaDown: {\r\n            x_min: 0,\r\n            x_max: 219,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 23 -248 l 315 112 l 315 274 l 45 -58 l 45 517 l 0 517 l 0 -248 z',\r\n        },\r\n        accSagittal7v11CommaUp: {\r\n            x_min: 0,\r\n            x_max: 188,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 248 l 135 248 b 0 68 45 248 0 187 z',\r\n        },\r\n        accSagittal7v11CommaDown: {\r\n            x_min: 0,\r\n            x_max: 188,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 135 -248 0 -187 45 -248 l 271 -248 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittal5v11SmallDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 73 l 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 -40 b 360 -118 295 -92 325 -118 b 449 62 420 -118 449 -59 l 405 62 b 369 -10 405 14 393 -10 b 348 -6 363 -10 356 -9 b 251 217 312 9 279 84 l 248 248 l 135 248 b 0 73 45 248 0 189 z',\r\n        },\r\n        accSagittal5v11SmallDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -73 b 135 -248 0 -189 45 -248 l 248 -248 l 251 -217 b 348 6 279 -84 312 -9 b 369 10 356 9 363 10 b 405 -62 393 10 405 -14 l 449 -62 b 360 118 449 59 420 118 b 271 40 325 118 295 92 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalSharp5v11SDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 242 37 203 -23 225 -3 b 315 -89 262 -23 285 -63 l 315 -517 l 360 -517 l 360 -112 l 383 -112 b 495 68 458 -112 495 -53 l 449 68 b 399 -4 449 20 433 -4 b 248 248 297 -4 261 171 b 157 68 222 127 192 68 l 89 68 b 0 -203 30 68 0 -23 z',\r\n        },\r\n        accSagittalFlat5v11SUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 89 -68 0 23 30 -68 l 157 -68 b 248 -248 192 -68 222 -127 b 399 4 261 -171 297 4 b 449 -68 433 4 449 -20 l 495 -68 b 383 112 495 53 458 112 l 360 112 l 360 517 l 315 517 l 315 89 b 242 -37 285 63 262 23 b 180 23 225 3 203 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 84 z',\r\n        },\r\n        accSagittalSharp7v11CDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 89 -112 l 89 -517 l 135 -517 l 135 -95 b 206 37 163 -73 187 -30 b 271 -23 225 -3 248 -23 l 271 -517 l 315 -517 l 315 -23 l 383 -23 b 449 -203 428 -23 449 -84 l 495 -203 b 405 68 495 -23 465 68 l 292 68 b 203 248 258 68 228 127 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 20 l 0 68 b 89 -112 0 -52 30 -112 z',\r\n        },\r\n        accSagittalFlat7v11CUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 89 112 b 0 -68 30 112 0 52 l 45 -68 b 81 3 45 -20 56 3 b 101 0 86 3 94 0 b 203 -248 138 -16 173 -98 b 292 -68 228 -127 258 -68 l 405 -68 b 495 203 465 -68 495 23 l 449 203 b 383 23 449 84 428 23 l 315 23 l 315 517 l 271 517 l 271 23 b 206 -37 248 23 225 3 b 135 95 187 30 163 73 l 135 517 l 89 517 z',\r\n        },\r\n        accSagittalSharp55CDown: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -271 l 135 -125 l 135 -517 l 180 -517 l 180 -78 l 315 65 l 315 -517 l 360 -517 l 360 248 l 337 248 l 0 -112 z',\r\n        },\r\n        accSagittalFlat55CUp: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 112 l 337 -248 l 360 -248 l 360 517 l 315 517 l 315 -65 l 180 78 l 180 517 l 135 517 l 135 125 l 0 271 z',\r\n        },\r\n        accSagittalSharp17CDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -248 l 45 -68 b 180 109 45 36 89 95 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -89 292 13 321 -55 l 360 -517 l 405 -517 l 405 -112 l 428 -112 b 540 68 504 -112 540 -53 l 495 68 b 445 -4 495 20 480 -4 b 292 248 343 -4 307 171 l 180 248 b 0 68 60 248 0 187 l 0 -248 z',\r\n        },\r\n        accSagittalFlat17CUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 248 l 0 -68 b 180 -248 0 -187 60 -248 l 292 -248 b 445 4 307 -171 343 4 b 495 -68 480 4 495 -20 l 540 -68 b 428 112 540 53 504 112 l 405 112 l 405 517 l 360 517 l 360 89 b 271 -112 321 55 292 -13 l 225 -112 l 225 517 l 180 517 l 180 -109 b 45 68 89 -95 45 -36 l 45 248 z',\r\n        },\r\n        accSagittalSharp7v11kDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -32 l 405 138 l 405 13 l 0 -157 l 0 -256 l 225 -161 l 225 -517 l 271 -517 l 271 -144 l 405 -86 l 405 -517 l 449 -517 l 449 248 l 428 248 l 0 68 z',\r\n        },\r\n        accSagittalFlat7v11kUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 l 428 -248 l 449 -248 l 449 517 l 405 517 l 405 86 l 271 144 l 271 517 l 225 517 l 225 161 l 0 256 l 0 157 l 405 -13 l 405 -138 l 0 32 z',\r\n        },\r\n        accSagittalSharp7v11kUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 135 -112 l 135 -517 l 180 -517 l 180 -105 b 271 -23 217 -94 248 -65 l 271 -517 l 315 -517 l 315 -23 b 405 -105 337 -65 369 -94 l 405 -517 l 449 -517 l 449 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 315 148 b 112 -4 274 148 236 -4 b 45 68 68 -4 45 20 l 0 68 b 135 -112 0 -53 45 -112 z',\r\n        },\r\n        accSagittalFlat7v11kDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 135 112 b 0 -68 45 112 0 53 l 45 -68 b 112 4 45 -20 68 4 b 292 -248 236 4 274 -148 b 475 4 315 -148 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 l 449 517 l 405 517 l 405 105 b 315 23 369 94 337 65 l 315 517 l 271 517 l 271 23 b 180 105 248 65 217 94 l 180 517 l 135 517 z',\r\n        },\r\n        accSagittalSharp17CUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 -23 b 405 -105 337 -65 369 -94 l 405 -517 l 449 -517 l 449 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 312 150 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\r\n        },\r\n        accSagittalFlat17CDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 b 475 4 312 -150 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 l 449 517 l 405 517 l 405 105 b 315 23 369 94 337 65 l 315 517 l 271 517 l 271 -14 b 203 23 251 10 229 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\r\n        },\r\n        accSagittalSharp55CUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -517 l 45 78 l 135 10 l 135 -517 l 180 -517 l 180 -23 l 271 -92 l 271 -517 l 315 -517 l 315 -127 l 495 -264 l 495 -112 l 23 248 l 0 248 l 0 -517 z',\r\n        },\r\n        accSagittalFlat55CDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 517 l 0 -248 l 23 -248 l 495 112 l 495 264 l 315 127 l 315 517 l 271 517 l 271 92 l 180 23 l 180 517 l 135 517 l 135 -10 l 45 -78 l 45 517 z',\r\n        },\r\n        accSagittalSharp7v11CUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 86 45 6 89 58 l 180 -517 l 225 -517 l 225 98 b 315 109 252 104 282 108 l 315 -517 l 360 -517 l 360 112 l 449 112 l 449 -517 l 495 -517 l 495 248 l 360 248 b 0 68 121 248 0 189 z',\r\n        },\r\n        accSagittalFlat7v11CDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 360 -248 0 -189 121 -248 l 495 -248 l 495 517 l 449 517 l 449 -112 l 360 -112 l 360 517 l 315 517 l 315 -109 b 225 -98 282 -108 252 -104 l 225 517 l 180 517 l 180 -86 b 45 68 89 -58 45 -6 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalSharp5v11SUp: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 -23 b 449 -105 383 -65 415 -94 l 449 -517 l 495 -517 l 495 -112 b 631 68 585 -112 631 -53 l 585 68 b 520 -4 585 20 563 -4 b 337 248 396 -4 360 150 l 225 248 b 0 68 76 248 0 187 z',\r\n        },\r\n        accSagittalFlat5v11SDown: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 225 -248 0 -187 76 -248 l 337 -248 b 520 4 360 -150 396 4 b 585 -68 563 4 585 -20 l 631 -68 b 495 112 631 53 585 112 l 495 517 l 449 517 l 449 105 b 360 23 415 94 383 65 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalDoubleSharp5v11SDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 341 -60 b 449 -112 370 -95 405 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 312 150 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\r\n        },\r\n        accSagittalDoubleFlat5v11SUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 b 475 4 312 -150 350 4 b 540 -68 517 4 540 -20 l 585 -68 b 449 112 585 53 540 112 b 341 60 405 112 370 95 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 262 -4 b 203 23 245 13 225 23 l 135 23 b 45 203 75 23 45 84 z',\r\n        },\r\n        accSagittalDoubleSharp7v11CDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 112 -112 b 193 -73 143 -112 170 -99 l 45 -501 l 95 -517 l 248 -81 l 397 -517 l 449 -503 l 275 0 l 278 4 b 337 -23 295 -13 315 -23 l 405 -23 b 495 -203 465 -23 495 -84 l 540 -203 b 428 68 540 -23 503 68 l 360 68 b 248 248 310 68 271 127 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 112 -112 0 -52 36 -112 z',\r\n        },\r\n        accSagittalDoubleFlat7v11CUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 112 112 b 0 -68 36 112 0 52 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 b 360 -68 271 -127 310 -68 l 428 -68 b 540 203 503 -68 540 23 l 495 203 b 405 23 495 84 465 23 l 337 23 b 278 -4 315 23 295 13 l 275 0 l 449 503 l 397 517 l 248 81 l 95 517 l 45 501 l 193 73 b 112 112 170 99 143 112 z',\r\n        },\r\n        accSagittalDoubleSharp55CDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 428 248 l 0 -112 l 0 -266 l 307 -7 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 386 59 l 449 112 l 449 248 z',\r\n        },\r\n        accSagittalDoubleFlat55CUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 449 -248 l 449 -112 l 386 -59 l 366 0 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 307 7 l 0 266 l 0 112 l 428 -248 z',\r\n        },\r\n        accSagittalDoubleSharp17CDown: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -248 l 45 -68 b 271 112 45 53 120 112 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 387 -62 b 495 -112 416 -95 452 -112 b 631 68 585 -112 631 -53 l 585 68 b 520 -4 585 20 563 -4 b 337 248 396 -4 360 150 l 225 248 b 0 68 76 248 0 187 l 0 -248 z',\r\n        },\r\n        accSagittalDoubleFlat17CUp: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 248 l 0 -68 b 225 -248 0 -187 76 -248 l 337 -248 b 520 4 360 -150 396 4 b 585 -68 563 4 585 -20 l 631 -68 b 495 112 631 53 585 112 b 387 62 452 112 416 95 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 310 0 l 271 -112 b 45 68 120 -112 45 -53 l 45 248 z',\r\n        },\r\n        accSagittalDoubleSharp7v11kDown: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 l 0 -30 l 366 96 l 399 0 l 392 -23 l 0 -157 l 0 -255 l 353 -135 l 225 -503 l 276 -517 l 428 -82 l 579 -517 l 631 -503 l 455 0 l 507 145 l 540 157 l 540 248 l 517 248 z m 416 115 l 442 124 l 428 82 z',\r\n        },\r\n        accSagittalDoubleFlat7v11kUp: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 517 -248 l 540 -248 l 540 -157 l 507 -145 l 455 0 l 631 503 l 579 517 l 428 82 l 276 517 l 225 503 l 353 135 l 0 255 l 0 157 l 392 23 l 399 0 l 366 -96 l 0 30 l 0 -68 z m 428 -82 l 442 -124 l 416 -115 z',\r\n        },\r\n        accSagittal23CommaUp: {\r\n            x_min: 0,\r\n            x_max: 188,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 -4 b 68 -23 53 -17 60 -23 l 180 -23 b 225 -203 210 -23 225 -82 l 271 -203 b 206 68 271 -23 248 68 l 89 68 b 23 248 71 68 48 127 l 0 248 z',\r\n        },\r\n        accSagittal23CommaDown: {\r\n            x_min: 0,\r\n            x_max: 188,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 23 -248 b 89 -68 48 -127 71 -68 l 206 -68 b 271 203 248 -68 271 23 l 225 203 b 180 23 225 82 210 23 l 68 23 b 45 4 60 23 53 17 l 45 517 l 0 517 z',\r\n        },\r\n        accSagittal5v19CommaUp: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 248 l 203 248 b 86 112 151 157 112 112 b 45 157 59 112 45 127 l 0 157 b 76 23 0 72 26 27 l 0 -112 z',\r\n        },\r\n        accSagittal5v19CommaDown: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 112 l 76 -23 b 0 -157 26 -27 0 -72 l 45 -157 b 86 -112 45 -127 59 -112 b 203 -248 112 -112 151 -157 l 225 -248 l 225 517 l 180 517 l 180 -33 l 0 284 z',\r\n        },\r\n        accSagittal5v23SmallDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 -4 b 248 -23 233 -17 240 -23 l 360 -23 b 405 -203 390 -23 405 -82 l 449 -203 b 386 68 449 -23 428 68 l 271 68 b 203 248 251 68 228 127 l 0 -112 z',\r\n        },\r\n        accSagittal5v23SmallDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 112 l 203 -248 b 271 -68 228 -127 251 -68 l 386 -68 b 449 203 428 -68 449 23 l 405 203 b 360 23 405 82 390 23 l 248 23 b 225 4 240 23 233 17 l 225 517 l 180 517 l 180 -33 l 0 284 z',\r\n        },\r\n        accSagittalSharp5v23SDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 6 b 89 -23 59 -13 73 -23 l 180 -23 l 180 -517 l 225 -517 l 225 -23 l 292 -23 b 360 -203 337 -23 360 -84 l 405 -203 b 315 68 405 -23 374 68 l 112 68 b 23 248 78 68 48 127 l 0 248 z',\r\n        },\r\n        accSagittalFlat5v23SUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 23 -248 b 112 -68 48 -127 78 -68 l 315 -68 b 405 203 374 -68 405 23 l 360 203 b 292 23 360 84 337 23 l 225 23 l 225 517 l 180 517 l 180 23 l 89 23 b 45 -6 73 23 59 13 l 45 517 l 0 517 z',\r\n        },\r\n        accSagittalSharp5v19CDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 b 89 -112 0 -52 30 -112 l 89 -517 l 135 -517 l 135 -95 b 225 112 173 -65 203 4 l 271 112 l 271 -517 l 315 -517 l 315 107 b 405 -68 374 89 405 30 l 405 -248 l 449 -248 l 449 68 b 315 248 449 189 405 248 l 203 248 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 23 z',\r\n        },\r\n        accSagittalFlat5v19CUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 45 -68 b 81 3 45 -23 56 3 b 101 0 86 3 94 0 b 203 -248 138 -16 173 -98 l 315 -248 b 449 -68 405 -248 449 -189 l 449 248 l 405 248 l 405 68 b 315 -107 405 -30 374 -89 l 315 517 l 271 517 l 271 -112 l 225 -112 b 135 95 203 -4 173 65 l 135 517 l 89 517 l 89 112 b 0 -68 30 112 0 52 z',\r\n        },\r\n        accSagittalSharp23CDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 135 -82 l 135 -517 l 180 -517 l 180 -17 l 239 68 b 315 -23 261 7 287 -23 l 315 -517 l 360 -517 l 360 -23 l 428 -23 b 495 -203 472 -23 495 -84 l 540 -203 b 449 68 540 -23 510 68 l 337 68 b 248 248 302 68 271 127 l 0 -112 l 0 -276 z',\r\n        },\r\n        accSagittalFlat23CUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 276 l 0 112 l 248 -248 b 337 -68 271 -127 302 -68 l 449 -68 b 540 203 510 -68 540 23 l 495 203 b 428 23 495 84 472 23 l 360 23 l 360 517 l 315 517 l 315 23 b 239 -68 287 23 261 -7 l 180 17 l 180 517 l 135 517 l 135 82 z',\r\n        },\r\n        accSagittalSharp23CUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 14 b 112 -23 63 -10 86 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 360 -23 b 449 -203 420 -23 449 -84 l 495 -203 b 383 68 495 -23 458 68 l 135 68 b 23 248 85 68 48 127 l 0 248 z',\r\n        },\r\n        accSagittalFlat23CDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 23 -248 b 135 -68 48 -127 85 -68 l 383 -68 b 495 203 458 -68 495 23 l 449 203 b 360 23 449 84 420 23 l 315 23 l 315 517 l 271 517 l 271 23 l 180 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 -14 86 23 63 10 l 45 517 l 0 517 z',\r\n        },\r\n        accSagittalSharp5v19CUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -112 l 0 -266 l 135 -153 l 135 -517 l 180 -517 l 180 -115 l 271 -39 l 271 -517 l 315 -517 l 315 0 l 405 75 l 405 -517 l 449 -517 l 449 248 l 428 248 b 130 68 285 127 186 68 b 45 157 73 68 45 98 l 0 157 b 112 -20 0 53 37 -6 z',\r\n        },\r\n        accSagittalFlat5v19CDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 112 20 b 0 -157 37 6 0 -53 l 45 -157 b 130 -68 45 -98 73 -68 b 428 -248 186 -68 285 -127 l 449 -248 l 449 517 l 405 517 l 405 -75 l 315 0 l 315 517 l 271 517 l 271 39 l 180 115 l 180 517 l 135 517 l 135 153 l 0 266 l 0 112 z',\r\n        },\r\n        accSagittalSharp5v23SUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 135 -108 l 135 -517 l 180 -517 l 180 -53 l 271 58 l 271 -517 l 315 -517 l 315 14 b 383 -23 334 -10 357 -23 l 405 -23 l 405 -517 l 449 -517 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 405 68 b 292 248 356 68 318 127 l 0 -112 l 0 -274 z',\r\n        },\r\n        accSagittalFlat5v23SDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 274 l 0 112 l 292 -248 b 405 -68 318 -127 356 -68 l 472 -68 b 585 203 547 -68 585 23 l 540 203 b 449 23 540 84 510 23 l 449 517 l 405 517 l 405 23 l 383 23 b 315 -14 357 23 334 10 l 315 517 l 271 517 l 271 -58 l 180 53 l 180 517 l 135 517 l 135 108 z',\r\n        },\r\n        accSagittalDoubleSharp5v23SDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 52 -517 l 203 -81 l 354 -517 l 405 -503 l 239 -23 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 225 68 b 112 248 176 68 138 127 l 89 248 l 89 112 b 170 -14 109 45 135 0 l 0 -501 z',\r\n        },\r\n        accSagittalDoubleFlat5v23SUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 501 l 170 14 b 89 -112 135 0 109 -45 l 89 -248 l 112 -248 b 225 -68 138 -127 176 -68 l 472 -68 b 585 203 547 -68 585 23 l 540 203 b 449 23 540 84 510 23 l 239 23 l 405 503 l 354 517 l 203 81 l 52 517 z',\r\n        },\r\n        accSagittalDoubleSharp5v19CDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 b 112 -112 0 -52 36 -112 b 193 -73 143 -112 170 -99 l 45 -501 l 95 -517 l 248 -81 l 397 -517 l 449 -501 l 275 0 l 315 112 b 495 -68 435 112 495 53 l 495 -248 l 540 -248 l 540 68 b 360 248 540 189 480 248 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 z',\r\n        },\r\n        accSagittalDoubleFlat5v19CUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 l 360 -248 b 540 -68 480 -248 540 -189 l 540 248 l 495 248 l 495 68 b 315 -112 495 -53 435 -112 l 275 0 l 449 501 l 397 517 l 248 81 l 95 517 l 45 501 l 193 73 b 112 112 170 99 143 112 b 0 -68 36 112 0 52 z',\r\n        },\r\n        accSagittalDoubleSharp23CDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 252 35 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 323 4 b 383 -23 340 -13 360 -23 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 405 68 b 292 248 356 68 318 127 l 0 -112 l 0 -274 z',\r\n        },\r\n        accSagittalDoubleFlat23CUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 274 l 0 112 l 292 -248 b 405 -68 318 -127 356 -68 l 472 -68 b 585 203 547 -68 585 23 l 540 203 b 449 23 540 84 510 23 l 383 23 b 323 -4 360 23 340 13 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 252 -35 z',\r\n        },\r\n        accSagittal19SchismaUp: {\r\n            x_min: 0,\r\n            x_max: 125,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 68 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 248 l 157 248 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 l 0 68 b 68 -112 0 -52 23 -112 z',\r\n        },\r\n        accSagittal19SchismaDown: {\r\n            x_min: 0,\r\n            x_max: 125,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 68 112 b 0 -68 23 112 0 52 l 45 -68 b 68 3 45 -20 52 3 b 79 0 68 3 73 0 b 157 -248 101 -16 127 -98 l 180 -248 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 z',\r\n        },\r\n        accSagittal17KleismaUp: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 248 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',\r\n        },\r\n        accSagittal17KleismaDown: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 225 -248 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\r\n        },\r\n        accSagittal143CommaUp: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -203 l 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 248 l 203 248 b 135 68 177 127 154 68 l 105 68 b 45 157 65 68 45 98 l 0 157 b 23 20 0 95 7 50 b 0 -203 7 -23 0 -98 z',\r\n        },\r\n        accSagittal143CommaDown: {\r\n            x_min: 0,\r\n            x_max: 156,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 23 -20 0 98 7 23 b 0 -157 7 -50 0 -95 l 45 -157 b 105 -68 45 -98 65 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 225 -248 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\r\n        },\r\n        accSagittal11v49CommaUp: {\r\n            x_min: 0,\r\n            x_max: 188,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -292 b 89 -157 45 -203 60 -157 l 203 -157 b 225 -143 210 -157 217 -153 l 225 -517 l 271 -517 l 271 248 l 248 248 b 180 157 233 187 210 157 l 68 157 b 0 -68 23 157 0 82 l 45 -68 b 89 68 45 23 60 68 l 203 68 b 225 84 209 68 216 72 l 225 -36 b 180 -68 213 -58 199 -68 l 68 -68 b 0 -292 23 -68 0 -143 z',\r\n        },\r\n        accSagittal11v49CommaDown: {\r\n            x_min: 0,\r\n            x_max: 188,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 292 b 68 68 0 143 23 68 l 180 68 b 225 36 199 68 213 58 l 225 -84 b 203 -68 216 -72 209 -68 l 89 -68 b 45 68 60 -68 45 -23 l 0 68 b 68 -157 0 -82 23 -157 l 180 -157 b 248 -248 210 -157 233 -187 l 271 -248 l 271 517 l 225 517 l 225 143 b 203 157 217 153 210 157 l 89 157 b 45 292 60 157 45 203 z',\r\n        },\r\n        accSagittal19CommaUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 b 68 -112 0 -52 23 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 -4 b 203 -23 187 -17 196 -23 l 315 -23 b 360 -203 346 -23 360 -82 l 405 -203 b 341 68 405 -23 383 68 l 225 68 b 157 248 206 68 183 127 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 z',\r\n        },\r\n        accSagittal19CommaDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 45 -68 b 68 3 45 -20 52 3 b 79 0 68 3 73 0 b 157 -248 101 -16 127 -98 b 225 -68 183 -127 206 -68 l 341 -68 b 405 203 383 -68 405 23 l 360 203 b 315 23 360 82 346 23 l 203 23 b 180 4 196 23 187 17 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 b 0 -68 23 112 0 52 z',\r\n        },\r\n        accSagittal7v19CommaUp: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 b 68 -112 0 -52 23 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 112 l 225 112 b 315 -68 285 112 315 53 l 315 -248 l 360 -248 l 360 68 b 271 248 360 187 330 248 l 157 248 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 z',\r\n        },\r\n        accSagittal7v19CommaDown: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 45 -68 b 68 3 45 -20 52 3 b 79 0 68 3 73 0 b 157 -248 101 -16 127 -98 l 271 -248 b 360 -68 330 -248 360 -187 l 360 248 l 315 248 l 315 68 b 225 -112 315 -53 285 -112 l 180 -112 l 180 517 l 135 517 l 135 45 b 68 112 112 89 89 112 b 0 -68 23 112 0 52 z',\r\n        },\r\n        accSagittal49SmallDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -203 l 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -68 330 112 360 53 l 360 -248 l 405 -248 l 405 68 b 315 248 405 187 374 248 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',\r\n        },\r\n        accSagittal49SmallDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 315 -248 b 405 -68 374 -248 405 -187 l 405 248 l 360 248 l 360 68 b 271 -112 360 -53 330 -112 l 225 -112 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\r\n        },\r\n        accSagittal23SmallDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 58 l 495 -274 l 495 -112 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z',\r\n        },\r\n        accSagittal23SmallDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 68 -68 0 23 23 -68 l 135 -68 b 203 -248 154 -68 177 -127 l 495 112 l 495 274 l 225 -58 l 225 517 l 180 517 l 180 4 b 157 23 173 17 164 23 l 89 23 b 45 203 60 23 45 82 z',\r\n        },\r\n        accSagittal5v13MediumDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -259 l 315 -89 l 315 -517 l 360 -517 l 360 248 l 337 248 b 128 180 253 203 184 180 b 45 248 73 180 45 203 l 0 248 b 52 95 0 170 17 120 l 0 68 l 0 -33 l 315 135 l 315 10 l 0 -157 z',\r\n        },\r\n        accSagittal5v13MediumDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 157 l 315 -10 l 315 -135 l 0 33 l 0 -68 l 52 -95 b 0 -248 17 -120 0 -170 l 45 -248 b 128 -180 45 -203 73 -180 b 337 -248 184 -180 253 -203 l 360 -248 l 360 517 l 315 517 l 315 89 l 0 259 z',\r\n        },\r\n        accSagittal11v19MediumDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 -4 b 292 -23 278 -17 285 -23 l 405 -23 b 449 -203 435 -23 449 -82 l 495 -203 b 431 68 495 -23 472 68 l 315 68 b 248 248 295 68 271 127 l 135 248 b 0 68 45 248 0 187 l 0 -248 z',\r\n        },\r\n        accSagittal11v19MediumDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 248 l 0 -68 b 135 -248 0 -187 45 -248 l 248 -248 b 315 -68 271 -127 295 -68 l 431 -68 b 495 203 472 -68 495 23 l 449 203 b 405 23 449 82 435 23 l 292 23 b 271 4 285 23 278 17 l 271 517 l 225 517 l 225 -112 l 180 -112 b 45 68 89 -112 45 -53 l 45 248 z',\r\n        },\r\n        accSagittal49MediumDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -68 l 0 -248 l 45 -248 l 315 -94 l 315 -517 l 360 -517 l 360 248 l 225 248 b 0 -68 75 248 0 143 z m 45 -68 b 225 112 45 53 105 112 l 315 112 l 315 10 l 45 -145 z',\r\n        },\r\n        accSagittal49MediumDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 68 b 225 -248 0 -143 75 -248 l 360 -248 l 360 517 l 315 517 l 315 94 l 45 248 l 0 248 z m 45 145 l 315 -10 l 315 -112 l 225 -112 b 45 68 105 -112 45 -53 z',\r\n        },\r\n        accSagittal5v49MediumDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -89 l 0 -248 l 225 53 l 225 -517 l 271 -517 l 271 53 l 495 -248 l 495 -89 l 248 248 b 89 89 170 143 118 89 b 45 157 60 89 45 112 l 0 157 b 68 3 0 68 23 16 z',\r\n        },\r\n        accSagittal5v49MediumDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 68 -3 b 0 -157 23 -16 0 -68 l 45 -157 b 89 -89 45 -112 60 -89 b 248 -248 118 -89 170 -143 l 495 89 l 495 248 l 271 -53 l 271 517 l 225 517 l 225 -53 l 0 248 l 0 89 z',\r\n        },\r\n        accSagittal49LargeDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 -89 l 360 -248 l 405 -248 l 405 -68 b 180 248 405 143 330 248 l 0 248 z m 45 12 l 45 112 l 180 112 b 360 -68 300 112 360 53 l 360 -147 z',\r\n        },\r\n        accSagittal49LargeDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 180 -248 b 405 68 330 -248 405 -143 l 405 248 l 360 248 l 45 89 l 45 517 l 0 517 z m 360 147 l 360 68 b 180 -112 360 -53 300 -112 l 45 -112 l 45 -12 z',\r\n        },\r\n        accSagittal11v19LargeDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 -86 l 449 -256 l 449 -157 l 45 13 l 45 138 l 449 -30 l 449 68 l 23 248 l 0 248 z',\r\n        },\r\n        accSagittal11v19LargeDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 23 -248 l 449 -68 l 449 30 l 45 -138 l 45 -13 l 449 157 l 449 256 l 45 86 l 45 517 l 0 517 z',\r\n        },\r\n        accSagittal5v13LargeDiesisUp: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 b 89 -112 0 -52 30 -112 b 180 -35 125 -112 157 -86 l 180 -517 l 225 -517 l 225 -86 l 631 -256 l 631 -157 l 225 13 l 225 138 l 631 -30 l 631 68 l 203 248 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 20 z',\r\n        },\r\n        accSagittal5v13LargeDiesisDown: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 45 -68 b 81 3 45 -20 56 3 b 101 0 86 3 94 0 b 203 -248 138 -16 173 -98 l 631 -68 l 631 30 l 225 -138 l 225 -13 l 631 157 l 631 256 l 225 86 l 225 517 l 180 517 l 180 35 b 89 112 157 86 125 112 b 0 -68 30 112 0 52 z',\r\n        },\r\n        accSagittalSharp23SDown: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -203 l 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 b 315 6 287 -23 301 -13 l 315 -517 l 360 -517 l 360 248 l 337 248 b 248 68 312 127 282 68 l 194 68 b 89 157 125 68 89 98 l 45 157 b 60 59 45 118 50 85 b 0 -203 20 30 0 -56 z',\r\n        },\r\n        accSagittalFlat23SUp: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 60 -59 0 56 20 -30 b 45 -157 50 -85 45 -118 l 89 -157 b 194 -68 89 -98 125 -68 l 248 -68 b 337 -248 282 -68 312 -127 l 360 -248 l 360 517 l 315 517 l 315 -6 b 271 23 301 13 287 23 l 180 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 84 z',\r\n        },\r\n        accSagittalSharp49SDown: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -292 l 45 -292 b 112 -157 45 -203 68 -157 l 135 -157 l 135 -517 l 180 -517 l 180 -157 l 271 -157 b 315 -135 285 -157 300 -150 l 315 -517 l 360 -517 l 360 248 l 337 248 b 248 157 323 187 292 157 l 89 157 b 0 -68 30 157 0 82 l 45 -68 b 112 68 45 23 68 68 l 271 68 b 315 89 284 68 300 75 l 315 -32 b 248 -68 298 -56 275 -68 l 89 -68 b 0 -292 29 -68 0 -143 z',\r\n        },\r\n        accSagittalFlat49SUp: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 292 b 89 68 0 143 29 68 l 248 68 b 315 32 275 68 298 56 l 315 -89 b 271 -68 300 -75 284 -68 l 112 -68 b 45 68 68 -68 45 -23 l 0 68 b 89 -157 0 -82 30 -157 l 248 -157 b 337 -248 292 -157 323 -187 l 360 -248 l 360 517 l 315 517 l 315 135 b 271 157 300 150 285 157 l 180 157 l 180 517 l 135 517 l 135 157 l 112 157 b 45 292 68 157 45 203 z',\r\n        },\r\n        accSagittalSharp7v19CDown: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -112 l 0 -271 l 135 -125 l 135 -517 l 180 -517 l 180 -78 l 315 65 l 315 -517 l 360 -517 l 360 248 l 337 248 b 118 89 239 143 166 89 b 45 157 68 89 45 112 l 0 157 b 89 -20 0 53 29 -6 z',\r\n        },\r\n        accSagittalFlat7v19CUp: {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 89 20 b 0 -157 29 6 0 -53 l 45 -157 b 118 -89 45 -112 68 -89 b 337 -248 166 -89 239 -143 l 360 -248 l 360 517 l 315 517 l 315 -65 l 180 78 l 180 517 l 135 517 l 135 125 l 0 271 l 0 112 z',\r\n        },\r\n        accSagittalSharp19CDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 96 45 17 89 72 l 180 -517 l 225 -517 l 225 107 b 315 112 252 112 282 112 l 360 112 l 360 -517 l 405 -517 l 405 248 l 271 248 b 0 68 89 248 0 187 z',\r\n        },\r\n        accSagittalFlat19CUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 271 -248 0 -187 89 -248 l 405 -248 l 405 517 l 360 517 l 360 -112 l 315 -112 b 225 -107 282 -112 252 -112 l 225 517 l 180 517 l 180 -96 b 45 68 89 -72 45 -17 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalSharp11v49CDown: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 112 -23 45 -82 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 271 112 215 -23 245 23 l 315 112 l 315 -517 l 360 -517 l 360 107 b 449 -68 420 89 449 30 l 449 -248 l 495 -248 l 495 68 b 360 248 495 189 449 248 l 248 248 b 157 68 222 128 192 68 l 89 68 b 0 -203 30 68 0 -23 z',\r\n        },\r\n        accSagittalFlat11v49CUp: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 89 -68 0 23 30 -68 l 157 -68 b 248 -248 192 -68 222 -128 l 360 -248 b 495 -68 449 -248 495 -189 l 495 248 l 449 248 l 449 68 b 360 -107 449 -30 420 -89 l 360 517 l 315 517 l 315 -112 l 271 -112 b 180 23 245 -23 215 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 82 z',\r\n        },\r\n        accSagittalSharp143CDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 259 76 210 -23 236 10 l 315 17 l 315 -517 l 360 -517 l 360 -30 l 585 -271 l 585 -112 l 248 248 b 157 68 222 127 192 68 l 89 68 b 0 -203 30 68 0 -23 z',\r\n        },\r\n        accSagittalFlat143CUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 89 -68 0 23 30 -68 l 157 -68 b 248 -248 192 -68 222 -127 l 585 112 l 585 271 l 360 30 l 360 517 l 315 517 l 315 -17 l 259 -76 b 180 23 236 -10 210 23 l 180 517 l 135 517 l 135 23 l 112 23 b 45 203 68 23 45 84 z',\r\n        },\r\n        accSagittalSharp17kDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -157 l 0 -256 l 225 -161 l 225 -517 l 271 -517 l 271 -144 l 405 -86 l 405 -517 l 449 -517 l 449 248 l 428 248 b 145 171 305 196 210 171 b 45 248 78 171 45 196 l 0 248 b 79 101 0 170 26 121 l 0 68 l 0 -32 l 405 138 l 405 13 z',\r\n        },\r\n        accSagittalFlat17kUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 405 -13 l 405 -138 l 0 32 l 0 -68 l 79 -101 b 0 -248 26 -121 0 -170 l 45 -248 b 145 -171 45 -196 78 -171 b 428 -248 210 -171 305 -196 l 449 -248 l 449 517 l 405 517 l 405 86 l 271 144 l 271 517 l 225 517 l 225 161 l 0 256 l 0 157 z',\r\n        },\r\n        accSagittalSharp19sDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 180 109 45 36 89 95 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -23 295 23 325 -23 l 360 -517 l 405 -517 l 405 -23 l 472 -23 b 540 -203 517 -23 540 -84 l 585 -203 b 495 68 585 -23 554 68 l 383 68 b 292 248 348 68 318 127 l 180 248 b 0 68 60 248 0 187 z',\r\n        },\r\n        accSagittalFlat19sUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 180 -248 0 -187 60 -248 l 292 -248 b 383 -68 318 -127 348 -68 l 495 -68 b 585 203 554 -68 585 23 l 540 203 b 472 23 540 84 517 23 l 405 23 l 405 517 l 360 517 l 360 23 b 271 -112 325 23 295 -23 l 225 -112 l 225 517 l 180 517 l 180 -109 b 45 68 89 -95 45 -36 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalSharp19sUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 89 -96 l 89 -517 l 135 -517 l 135 -108 b 180 -112 148 -112 163 -112 b 225 -108 196 -112 210 -112 l 225 -517 l 271 -517 l 271 -94 b 360 -12 305 -78 337 -50 l 360 -517 l 405 -517 l 405 248 l 383 248 b 190 0 353 98 288 16 b 138 -3 171 0 153 -3 b 45 68 75 -3 45 20 l 0 68 b 89 -96 0 -17 30 -72 z',\r\n        },\r\n        accSagittalFlat19sDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 89 96 b 0 -68 30 72 0 17 l 45 -68 b 138 3 45 -20 75 3 b 190 0 153 3 171 0 b 383 -248 288 -16 353 -98 l 405 -248 l 405 517 l 360 517 l 360 12 b 271 94 337 50 305 78 l 271 517 l 225 517 l 225 108 b 180 112 210 112 196 112 b 135 108 163 112 148 112 l 135 517 l 89 517 z',\r\n        },\r\n        accSagittalSharp17kUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 337 -23 b 405 14 363 -23 386 -10 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 68 402 127 364 68 l 112 68 b 0 -203 37 68 0 -23 z',\r\n        },\r\n        accSagittalFlat17kDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 315 -68 b 428 -248 364 -68 402 -127 l 449 -248 l 449 517 l 405 517 l 405 -14 b 337 23 386 10 363 23 l 315 23 l 315 517 l 271 517 l 271 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\r\n        },\r\n        accSagittalSharp143CUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 337 -23 b 405 14 363 -23 386 -10 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 68 402 127 364 68 l 240 68 b 89 157 140 68 89 98 l 45 157 b 68 53 45 115 52 81 b 0 -203 23 23 0 -63 z',\r\n        },\r\n        accSagittalFlat143CDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 68 -53 0 63 23 -23 b 45 -157 52 -81 45 -115 l 89 -157 b 240 -68 89 -98 140 -68 l 315 -68 b 428 -248 364 -68 402 -127 l 449 -248 l 449 517 l 405 517 l 405 -14 b 337 23 386 10 363 23 l 315 23 l 315 517 l 271 517 l 271 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\r\n        },\r\n        accSagittalSharp11v49CUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -68 b 135 68 45 23 76 68 l 337 68 b 405 95 363 68 386 76 l 405 -27 b 315 -68 386 -55 356 -68 l 112 -68 b 0 -292 37 -68 0 -143 l 45 -292 b 135 -157 45 -203 75 -157 l 135 -517 l 180 -517 l 180 -157 l 271 -157 l 271 -517 l 315 -517 l 315 -157 l 337 -157 b 405 -130 360 -157 383 -148 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 157 413 187 376 157 l 112 157 b 0 -68 37 157 0 82 z',\r\n        },\r\n        accSagittalFlat11v49CDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 68 b 112 -157 0 -82 37 -157 l 315 -157 b 428 -248 376 -157 413 -187 l 449 -248 l 449 517 l 405 517 l 405 130 b 337 157 383 148 360 157 l 315 157 l 315 517 l 271 517 l 271 157 l 180 157 l 180 517 l 135 517 l 135 157 b 45 292 75 157 45 203 l 0 292 b 112 68 0 143 37 68 l 315 68 b 405 27 356 68 386 55 l 405 -95 b 337 -68 386 -76 363 -68 l 135 -68 b 45 68 76 -68 45 -23 z',\r\n        },\r\n        accSagittalSharp19CUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 14 b 337 -23 289 -10 311 -23 l 360 -23 l 360 -517 l 405 -517 l 405 -23 b 495 -203 465 -23 495 -82 l 540 -203 b 428 68 540 -23 503 68 l 360 68 b 248 248 310 68 271 128 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z',\r\n        },\r\n        accSagittalFlat19CDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 89 109 b 0 -68 30 98 0 39 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 b 360 -68 271 -128 310 -68 l 428 -68 b 540 203 503 -68 540 23 l 495 203 b 405 23 495 82 465 23 l 405 517 l 360 517 l 360 23 l 337 23 b 271 -14 311 23 289 10 l 271 517 l 225 517 l 225 27 b 135 109 200 75 170 102 l 135 517 l 89 517 z',\r\n        },\r\n        accSagittalSharp7v19CUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 112 l 315 112 b 360 109 331 112 346 112 l 360 -517 l 405 -517 l 405 98 b 495 -68 465 73 495 19 l 495 -248 l 540 -248 l 540 68 b 360 248 540 189 480 248 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z',\r\n        },\r\n        accSagittalFlat7v19CDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 89 109 b 0 -68 30 98 0 39 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 l 360 -248 b 540 -68 480 -248 540 -189 l 540 248 l 495 248 l 495 68 b 405 -98 495 -19 465 -73 l 405 517 l 360 517 l 360 -109 b 315 -112 346 -112 331 -112 l 271 -112 l 271 517 l 225 517 l 225 27 b 135 109 200 75 170 102 l 135 517 l 89 517 z',\r\n        },\r\n        accSagittalSharp49SUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 112 l 360 112 b 405 109 376 112 390 112 l 405 -517 l 449 -517 l 449 96 b 540 -68 510 72 540 17 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\r\n        },\r\n        accSagittalFlat49SDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 449 -96 540 -17 510 -72 l 449 517 l 405 517 l 405 -109 b 360 -112 390 -112 376 -112 l 315 -112 l 315 517 l 271 517 l 271 -14 b 203 23 251 10 229 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\r\n        },\r\n        accSagittalSharp23SUp: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 71 l 405 -14 l 405 -517 l 449 -517 l 449 -56 l 675 -268 l 675 -112 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\r\n        },\r\n        accSagittalFlat23SDown: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 675 112 l 675 268 l 449 56 l 449 517 l 405 517 l 405 14 l 315 -71 l 315 517 l 271 517 l 271 -14 b 203 23 251 10 229 23 l 180 23 l 180 517 l 135 517 l 135 23 b 45 203 75 23 45 84 z',\r\n        },\r\n        accSagittalSharp5v13MUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 495 141 l 495 14 l 0 -157 l 0 -256 l 225 -180 l 225 -517 l 271 -517 l 271 -161 l 360 -130 l 360 -517 l 405 -517 l 405 -115 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 517 248 b 167 168 366 194 248 168 b 45 248 85 168 45 194 l 0 248 b 95 99 0 170 30 120 l 0 68 l 0 -30 z',\r\n        },\r\n        accSagittalFlat5v13MDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 30 l 0 -68 l 95 -99 b 0 -248 30 -120 0 -170 l 45 -248 b 167 -168 45 -194 85 -168 b 517 -248 248 -168 366 -194 l 540 -248 l 540 517 l 495 517 l 495 84 l 405 115 l 405 517 l 360 517 l 360 130 l 271 161 l 271 517 l 225 517 l 225 180 l 0 256 l 0 157 l 495 -14 l 495 -141 z',\r\n        },\r\n        accSagittalSharp11v19MUp: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 315 112 l 315 -517 l 360 -517 l 360 14 b 428 -23 379 -10 402 -23 l 449 -23 l 449 -517 l 495 -517 l 495 -23 b 585 -203 554 -23 585 -84 l 631 -203 b 517 68 631 -23 593 68 l 449 68 b 337 248 400 68 363 127 l 225 248 b 0 68 75 248 0 187 z',\r\n        },\r\n        accSagittalFlat11v19MDown: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 337 -248 b 449 -68 363 -127 400 -68 l 517 -68 b 631 203 593 -68 631 23 l 585 203 b 495 23 585 84 554 23 l 495 517 l 449 517 l 449 23 l 428 23 b 360 -14 402 23 379 10 l 360 517 l 315 517 l 315 -112 l 225 -112 l 225 517 l 180 517 l 180 -104 b 45 68 89 -82 45 -26 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalSharp49MUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 45 -248 l 225 -180 l 225 -517 l 271 -517 l 271 -166 l 360 -132 l 360 -517 l 405 -517 l 405 -117 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 360 248 b 0 -68 120 248 0 143 z m 45 -145 l 45 -68 b 360 112 45 53 150 112 l 495 112 l 495 14 z',\r\n        },\r\n        accSagittalFlat49MDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 68 b 360 -248 0 -143 120 -248 l 540 -248 l 540 517 l 495 517 l 495 84 l 405 117 l 405 517 l 360 517 l 360 132 l 271 166 l 271 517 l 225 517 l 225 180 l 45 248 l 0 248 z m 495 -14 l 495 -112 l 360 -112 b 45 68 150 -112 45 -53 l 45 145 z',\r\n        },\r\n        accSagittalSharp5v49MUp: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -271 l 180 -79 l 180 -517 l 225 -517 l 225 -30 l 315 65 l 315 -517 l 360 -517 l 360 65 l 449 -30 l 449 -517 l 495 -517 l 495 -79 l 675 -271 l 675 -112 l 337 248 b 118 89 239 143 166 89 b 45 157 68 89 45 112 l 0 157 b 107 0 0 62 36 10 l 0 -112 z',\r\n        },\r\n        accSagittalFlat5v49MDown: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 112 l 107 0 b 0 -157 36 -10 0 -62 l 45 -157 b 118 -89 45 -112 68 -89 b 337 -248 166 -89 239 -143 l 675 112 l 675 271 l 495 79 l 495 517 l 449 517 l 449 30 l 360 -65 l 360 517 l 315 517 l 315 -65 l 225 30 l 225 517 l 180 517 l 180 79 l 0 271 z',\r\n        },\r\n        accSagittalSharp49LUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 -82 l 135 -112 l 135 -517 l 180 -517 l 180 -127 l 271 -157 l 271 -517 l 315 -517 l 315 -173 l 540 -248 l 585 -248 l 585 -68 b 180 248 585 143 449 248 l 0 248 z m 45 112 l 180 112 b 540 -68 420 112 540 53 l 540 -145 l 45 16 z',\r\n        },\r\n        accSagittalFlat49LDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 180 -248 b 585 68 449 -248 585 -143 l 585 248 l 540 248 l 315 173 l 315 517 l 271 517 l 271 157 l 180 127 l 180 517 l 135 517 l 135 112 l 45 82 l 45 517 l 0 517 z m 45 -16 l 540 145 l 540 68 b 180 -112 540 -53 420 -112 l 45 -112 z',\r\n        },\r\n        accSagittalSharp11v19LUp: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -517 l 45 -517 l 45 -81 l 135 -108 l 135 -517 l 180 -517 l 180 -121 l 271 -148 l 271 -517 l 315 -517 l 315 -161 l 631 -255 l 631 -157 l 45 16 l 45 144 l 631 -30 l 631 68 l 23 248 l 0 248 z',\r\n        },\r\n        accSagittalFlat11v19LDown: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 23 -248 l 631 -68 l 631 30 l 45 -144 l 45 -16 l 631 157 l 631 255 l 315 161 l 315 517 l 271 517 l 271 148 l 180 121 l 180 517 l 135 517 l 135 108 l 45 81 l 45 517 l 0 517 z',\r\n        },\r\n        accSagittalSharp5v13LUp: {\r\n            x_min: 0,\r\n            x_max: 500,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 -85 l 360 -120 l 360 -517 l 405 -517 l 405 -135 l 720 -256 l 720 -157 l 271 14 l 271 141 l 720 -30 l 720 68 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z',\r\n        },\r\n        accSagittalFlat5v13LDown: {\r\n            x_min: 0,\r\n            x_max: 500,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 89 109 b 0 -68 30 98 0 39 l 45 -68 b 95 3 45 -20 60 3 b 122 0 104 3 112 0 b 248 -248 176 -16 217 -98 l 720 -68 l 720 30 l 271 -141 l 271 -14 l 720 157 l 720 256 l 405 135 l 405 517 l 360 517 l 360 120 l 271 85 l 271 517 l 225 517 l 225 27 b 135 109 200 75 170 102 l 135 517 l 89 517 z',\r\n        },\r\n        accSagittalDoubleSharp23SDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -203 l 45 -203 b 135 -23 45 -82 76 -23 l 301 -23 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 370 -14 b 449 112 423 10 449 53 l 449 248 l 428 248 b 315 68 402 127 364 68 l 240 68 b 89 157 140 68 89 98 l 45 157 b 68 53 45 115 52 81 b 0 -203 23 23 0 -63 z',\r\n        },\r\n        accSagittalDoubleFlat23SUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 68 -53 0 63 23 -23 b 45 -157 52 -81 45 -115 l 89 -157 b 240 -68 89 -98 140 -68 l 315 -68 b 428 -248 364 -68 402 -127 l 449 -248 l 449 -112 b 370 14 449 -53 423 -10 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 301 23 l 135 23 b 45 203 76 23 45 82 z',\r\n        },\r\n        accSagittalDoubleSharp49SDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -292 l 45 -292 b 112 -157 45 -203 68 -157 l 256 -157 l 135 -503 l 187 -517 l 337 -82 l 490 -517 l 540 -503 l 366 0 l 396 89 b 449 157 416 102 435 125 l 449 248 l 428 248 b 315 157 413 187 376 157 l 112 157 b 0 -68 39 157 0 82 l 45 -68 b 135 68 45 23 76 68 l 287 68 l 311 0 l 288 -68 l 89 -68 b 0 -292 32 -68 0 -144 z',\r\n        },\r\n        accSagittalDoubleFlat49SUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 292 b 89 68 0 144 32 68 l 288 68 l 311 0 l 287 -68 l 135 -68 b 45 68 76 -68 45 -23 l 0 68 b 112 -157 0 -82 39 -157 l 315 -157 b 428 -248 376 -157 413 -187 l 449 -248 l 449 -157 b 396 -89 435 -125 416 -102 l 366 0 l 540 503 l 490 517 l 337 82 l 187 517 l 135 503 l 256 157 l 112 157 b 45 292 68 157 45 203 z',\r\n        },\r\n        accSagittalDoubleSharp7v19CDown: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -112 l 0 -266 l 307 -7 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 386 59 l 449 112 l 449 248 l 428 248 b 130 68 285 127 186 68 b 45 157 73 68 45 98 l 0 157 b 112 -20 0 53 37 -6 z',\r\n        },\r\n        accSagittalDoubleFlat7v19CUp: {\r\n            x_min: 0,\r\n            x_max: 375,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 112 20 b 0 -157 37 6 0 -53 l 45 -157 b 130 -68 45 -98 73 -68 b 428 -248 186 -68 285 -127 l 449 -248 l 449 -112 l 386 -59 l 366 0 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 307 7 l 0 266 l 0 112 z',\r\n        },\r\n        accSagittalDoubleSharp19CDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 68 l 0 -248 l 45 -248 l 45 -68 b 315 109 45 36 135 95 l 354 0 l 180 -503 l 232 -517 l 383 -82 l 534 -517 l 585 -503 l 410 0 l 449 112 l 495 112 l 495 248 l 360 248 b 0 68 120 248 0 187 z m 372 112 l 393 112 l 383 82 z',\r\n        },\r\n        accSagittalDoubleFlat19CUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 360 -248 0 -187 120 -248 l 495 -248 l 495 -112 l 449 -112 l 410 0 l 585 503 l 534 517 l 383 82 l 232 517 l 180 503 l 354 0 l 315 -109 b 45 68 135 -95 45 -36 l 45 248 l 0 248 z m 383 -82 l 393 -112 l 372 -112 z',\r\n        },\r\n        accSagittalDoubleSharp11v49CDown: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 360 112 b 540 -68 480 112 540 53 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\r\n        },\r\n        accSagittalDoubleFlat11v49CUp: {\r\n            x_min: 0,\r\n            x_max: 406,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 405 -248 b 585 -68 526 -248 585 -187 l 585 248 l 540 248 l 540 68 b 360 -112 540 -53 480 -112 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 262 -4 b 203 23 245 13 225 23 l 135 23 b 45 203 75 23 45 84 z',\r\n        },\r\n        accSagittalDoubleSharp143CDown: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 337 49 l 675 -268 l 675 -112 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z',\r\n        },\r\n        accSagittalDoubleFlat143CUp: {\r\n            x_min: 0,\r\n            x_max: 469,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 203 b 112 -68 0 23 37 -68 l 180 -68 b 292 -248 230 -68 268 -127 l 675 112 l 675 268 l 337 -49 l 321 0 l 495 503 l 444 517 l 292 82 l 141 517 l 89 503 l 265 0 l 262 -4 b 203 23 245 13 225 23 l 135 23 b 45 203 75 23 45 84 z',\r\n        },\r\n        accSagittalDoubleSharp17kDown: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 248 b 95 101 0 170 30 121 l 0 68 l 0 -30 l 364 96 l 399 0 l 390 -23 l 0 -157 l 0 -255 l 353 -135 l 225 -503 l 275 -517 l 428 -82 l 577 -517 l 631 -503 l 455 0 l 507 145 l 540 157 l 540 248 l 517 248 b 167 168 366 194 248 168 b 45 248 85 168 45 194 z m 416 115 l 442 124 l 428 82 z',\r\n        },\r\n        accSagittalDoubleFlat17kUp: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 45 -248 b 167 -168 45 -194 85 -168 b 517 -248 248 -168 366 -194 l 540 -248 l 540 -157 l 507 -145 l 455 0 l 631 503 l 577 517 l 428 82 l 275 517 l 225 503 l 353 135 l 0 255 l 0 157 l 390 23 l 399 0 l 364 -96 l 0 30 l 0 -68 l 95 -101 b 0 -248 30 -121 0 -170 z m 428 -82 l 442 -124 l 416 -115 z',\r\n        },\r\n        accSagittalDoubleSharp19sDown: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 -248 l 45 -248 l 45 -68 b 271 112 45 53 120 112 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 367 4 b 428 -23 386 -13 405 -23 l 495 -23 b 585 -203 554 -23 585 -84 l 631 -203 b 517 68 631 -23 593 68 l 449 68 b 337 248 400 68 363 127 l 225 248 b 0 68 75 248 0 187 z',\r\n        },\r\n        accSagittalDoubleFlat19sUp: {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 0 -68 b 225 -248 0 -187 75 -248 l 337 -248 b 449 -68 363 -127 400 -68 l 517 -68 b 631 203 593 -68 631 23 l 585 203 b 495 23 585 84 554 23 l 428 23 b 367 -4 405 23 386 13 l 366 0 l 540 503 l 488 517 l 337 82 l 186 517 l 135 503 l 310 0 l 271 -112 b 45 68 120 -112 45 -53 l 45 248 l 0 248 z',\r\n        },\r\n        accSagittalShaftUp: {\r\n            x_min: 0,\r\n            x_max: 31,\r\n            y_min: -359,\r\n            y_max: 172,\r\n            ha: 531,\r\n            o: 'm 0 112 l 0 -517 l 45 -517 l 45 112 l 23 248 z',\r\n        },\r\n        accSagittalShaftDown: {\r\n            x_min: 0,\r\n            x_max: 31,\r\n            y_min: -172,\r\n            y_max: 359,\r\n            ha: 531,\r\n            o: 'm 23 -248 l 45 -112 l 45 517 l 0 517 l 0 -112 z',\r\n        },\r\n        accSagittalAcute: {\r\n            x_min: 0,\r\n            x_max: 125,\r\n            y_min: -62,\r\n            y_max: 125,\r\n            ha: 187,\r\n            o: 'm 0 0 l 0 -89 l 180 89 l 180 180 z',\r\n        },\r\n        accSagittalGrave: {\r\n            x_min: 0,\r\n            x_max: 125,\r\n            y_min: -125,\r\n            y_max: 62,\r\n            ha: 187,\r\n            o: 'm 180 -180 l 180 -89 l 0 89 l 0 0 z',\r\n        },\r\n        accSagittal1MinaUp: {\r\n            x_min: -7,\r\n            x_max: 124,\r\n            y_min: 16,\r\n            y_max: 106.31676725154982,\r\n            ha: 90.31676725154982,\r\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 134 150 179 112 163 135 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\r\n        },\r\n        accSagittal1MinaDown: {\r\n            x_min: -7,\r\n            x_max: 124,\r\n            y_min: -106.31676725154983,\r\n            y_max: -16,\r\n            ha: 90.31676725154983,\r\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 179 -23 163 -135 179 -112 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\r\n        },\r\n        accSagittal2MinasUp: {\r\n            x_min: -7,\r\n            x_max: 218,\r\n            y_min: 16,\r\n            y_max: 106.31676725154982,\r\n            ha: 90.31676725154982,\r\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 207 65 179 23 200 55 b 252 107 223 86 240 107 b 271 23 264 107 272 86 l 314 23 b 269 150 314 112 298 135 b 203 130 252 158 220 150 b 173 92 190 115 181 104 b 134 150 167 127 154 140 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\r\n        },\r\n        accSagittal2MinasDown: {\r\n            x_min: -7,\r\n            x_max: 218,\r\n            y_min: -106.31676725154983,\r\n            y_max: -16,\r\n            ha: 90.31676725154983,\r\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 173 -92 154 -140 167 -127 b 203 -130 181 -104 190 -115 b 269 -150 220 -150 252 -158 b 314 -23 298 -135 314 -112 l 271 -23 b 252 -107 272 -86 264 -107 b 207 -65 240 -107 223 -86 b 179 -23 200 -55 179 -23 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\r\n        },\r\n        accSagittal1TinaUp: {\r\n            x_min: 0,\r\n            x_max: 93,\r\n            y_min: 16,\r\n            y_max: 107,\r\n            ha: 91,\r\n            o: 'm 134 154 l 91 154 b 81 76 91 101 91 86 b 0 68 73 69 48 68 l 0 23 b 134 154 122 23 134 36 z',\r\n        },\r\n        accSagittal1TinaDown: {\r\n            x_min: 0,\r\n            x_max: 93,\r\n            y_min: -107,\r\n            y_max: -16,\r\n            ha: 91,\r\n            o: 'm 134 -154 b 0 -23 134 -36 122 -23 l 0 -68 b 81 -76 48 -68 73 -69 b 91 -154 91 -86 91 -101 z',\r\n        },\r\n        accSagittal2TinasUp: {\r\n            x_min: 0,\r\n            x_max: 94,\r\n            y_min: 16,\r\n            y_max: 107,\r\n            ha: 91,\r\n            o: 'm 135 68 b 89 154 94 68 89 124 l 46 154 b 36 92 45 131 42 105 b 0 68 32 82 23 68 l 0 23 b 68 63 29 23 53 40 b 135 23 84 39 104 23 z',\r\n        },\r\n        accSagittal2TinasDown: {\r\n            x_min: 0,\r\n            x_max: 94,\r\n            y_min: -107,\r\n            y_max: -16,\r\n            ha: 91,\r\n            o: 'm 135 -23 b 68 -63 104 -23 84 -39 b 0 -23 53 -40 29 -23 l 0 -68 b 36 -92 23 -68 32 -82 b 46 -154 42 -105 45 -131 l 89 -154 b 135 -68 89 -124 94 -68 z',\r\n        },\r\n        accSagittal3TinasUp: {\r\n            x_min: -7,\r\n            x_max: 124,\r\n            y_min: 16,\r\n            y_max: 106.31676725154982,\r\n            ha: 90.31676725154982,\r\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 134 150 179 112 163 135 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\r\n        },\r\n        accSagittal3TinasDown: {\r\n            x_min: -7,\r\n            x_max: 124,\r\n            y_min: -106.31676725154983,\r\n            y_max: -16,\r\n            ha: 90.31676725154983,\r\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 179 -23 163 -135 179 -112 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\r\n        },\r\n        accSagittal4TinasUp: {\r\n            x_min: 0,\r\n            x_max: 187,\r\n            y_min: 16,\r\n            y_max: 106.69999999999997,\r\n            ha: 90.69999999999997,\r\n            o: 'm 0 68 l 0 23 b 143 45 105 23 124 26 b 203 107 153 55 183 107 b 226 23 216 107 226 86 l 269 23 b 225 150 269 112 253 135 b 160 132 207 158 181 153 b 115 81 138 112 124 88 b 0 68 104 71 94 68 z',\r\n        },\r\n        accSagittal4TinasDown: {\r\n            x_min: 0,\r\n            x_max: 187,\r\n            y_min: -106.69999999999999,\r\n            y_max: -16,\r\n            ha: 90.69999999999999,\r\n            o: 'm 0 -68 b 115 -81 94 -68 104 -71 b 160 -132 124 -88 138 -112 b 225 -150 181 -153 207 -158 b 269 -23 253 -135 269 -112 l 226 -23 b 203 -107 226 -86 216 -107 b 143 -45 183 -107 153 -55 b 0 -23 124 -26 105 -23 z',\r\n        },\r\n        accSagittal5TinasUp: {\r\n            x_min: 0,\r\n            x_max: 218,\r\n            y_min: 16,\r\n            y_max: 107,\r\n            ha: 91,\r\n            o: 'm 135 23 b 187 45 156 23 168 26 b 249 107 197 55 228 107 b 271 23 262 107 271 86 l 314 23 b 269 150 314 112 298 135 b 204 132 252 158 226 153 b 160 81 183 112 168 88 b 135 68 148 71 147 68 b 89 154 94 68 89 124 l 46 154 b 36 92 45 131 42 105 b 0 68 32 82 23 68 l 0 23 b 68 63 29 23 53 40 b 135 23 84 39 104 23 z',\r\n        },\r\n        accSagittal5TinasDown: {\r\n            x_min: 0,\r\n            x_max: 218,\r\n            y_min: -107,\r\n            y_max: -16,\r\n            ha: 91,\r\n            o: 'm 135 -23 b 68 -63 104 -23 84 -39 b 0 -23 53 -40 29 -23 l 0 -68 b 36 -92 23 -68 32 -82 b 46 -154 42 -105 45 -131 l 89 -154 b 135 -68 89 -124 94 -68 b 160 -81 147 -68 148 -71 b 204 -132 168 -88 183 -112 b 269 -150 226 -153 252 -158 b 314 -23 298 -135 314 -112 l 271 -23 b 249 -107 271 -86 262 -107 b 187 -45 228 -107 197 -55 b 135 -23 168 -26 156 -23 z',\r\n        },\r\n        accSagittal6TinasUp: {\r\n            x_min: -7,\r\n            x_max: 218,\r\n            y_min: 16,\r\n            y_max: 106.31676725154982,\r\n            ha: 90.31676725154982,\r\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 207 65 179 23 200 55 b 252 107 223 86 240 107 b 271 23 264 107 272 86 l 314 23 b 269 150 314 112 298 135 b 203 130 252 158 220 150 b 173 92 190 115 181 104 b 134 150 167 127 154 140 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\r\n        },\r\n        accSagittal6TinasDown: {\r\n            x_min: -7,\r\n            x_max: 218,\r\n            y_min: -106.31676725154983,\r\n            y_max: -16,\r\n            ha: 90.31676725154983,\r\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 173 -92 154 -140 167 -127 b 203 -130 181 -104 190 -115 b 269 -150 220 -150 252 -158 b 314 -23 298 -135 314 -112 l 271 -23 b 252 -107 272 -86 264 -107 b 207 -65 240 -107 223 -86 b 179 -23 200 -55 179 -23 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\r\n        },\r\n        accSagittal7TinasUp: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: 16,\r\n            y_max: 106.69999999999997,\r\n            ha: 90.69999999999997,\r\n            o: 'm 0 68 l 0 23 b 143 45 105 23 124 26 b 203 107 153 55 183 107 b 226 23 216 107 226 86 l 269 23 b 298 65 269 23 291 55 b 343 107 314 86 331 107 b 361 23 354 107 363 86 l 405 23 b 360 150 405 112 389 135 b 294 130 343 158 311 150 b 264 92 281 115 272 104 b 225 150 258 127 245 140 b 160 132 207 158 181 153 b 115 81 138 112 124 88 b 0 68 104 71 94 68 z',\r\n        },\r\n        accSagittal7TinasDown: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -106.69999999999999,\r\n            y_max: -16,\r\n            ha: 90.69999999999999,\r\n            o: 'm 0 -68 b 115 -81 94 -68 104 -71 b 160 -132 124 -88 138 -112 b 225 -150 181 -153 207 -158 b 264 -92 245 -140 258 -127 b 294 -130 272 -104 281 -115 b 360 -150 311 -150 343 -158 b 405 -23 389 -135 405 -112 l 361 -23 b 343 -107 363 -86 354 -107 b 298 -65 331 -107 314 -86 b 269 -23 291 -55 269 -23 l 226 -23 b 203 -107 226 -86 216 -107 b 143 -45 183 -107 153 -55 b 0 -23 124 -26 105 -23 z',\r\n        },\r\n        accSagittal8TinasUp: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: 16,\r\n            y_max: 107,\r\n            ha: 91,\r\n            o: 'm 135 23 b 187 45 156 23 168 26 b 249 107 197 55 228 107 b 271 23 262 107 271 86 l 314 23 b 343 65 314 23 336 55 b 387 107 359 86 376 107 b 406 23 399 107 408 86 l 449 23 b 405 150 449 112 433 135 b 338 130 387 158 356 150 b 308 92 325 115 317 104 b 269 150 302 127 289 140 b 204 132 252 158 226 153 b 160 81 183 112 168 88 b 135 68 148 71 147 68 b 89 154 94 68 89 124 l 46 154 b 36 92 45 131 42 105 b 0 68 32 82 23 68 l 0 23 b 68 63 29 23 53 40 b 135 23 84 39 104 23 z',\r\n        },\r\n        accSagittal8TinasDown: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: -107,\r\n            y_max: -16,\r\n            ha: 91,\r\n            o: 'm 135 -23 b 68 -63 104 -23 84 -39 b 0 -23 53 -40 29 -23 l 0 -68 b 36 -92 23 -68 32 -82 b 46 -154 42 -105 45 -131 l 89 -154 b 135 -68 89 -124 94 -68 b 160 -81 147 -68 148 -71 b 204 -132 168 -88 183 -112 b 269 -150 226 -153 252 -158 b 308 -92 289 -140 302 -127 b 338 -130 317 -104 325 -115 b 405 -150 356 -150 387 -158 b 449 -23 433 -135 449 -112 l 406 -23 b 387 -107 408 -86 399 -107 b 343 -65 376 -107 359 -86 b 314 -23 336 -55 314 -23 l 271 -23 b 249 -107 271 -86 262 -107 b 187 -45 228 -107 197 -55 b 135 -23 168 -26 156 -23 z',\r\n        },\r\n        accSagittal9TinasUp: {\r\n            x_min: -7,\r\n            x_max: 312,\r\n            y_min: 16,\r\n            y_max: 106.31676725154982,\r\n            ha: 90.31676725154982,\r\n            o: 'm -10 23 l 43 23 b 72 65 43 23 65 55 b 117 107 88 86 105 107 b 135 23 128 107 137 86 l 179 23 b 207 65 179 23 200 55 b 252 107 223 86 240 107 b 271 23 264 107 272 86 l 314 23 b 343 65 314 23 336 55 b 387 107 359 86 376 107 b 406 23 399 107 408 86 l 449 23 b 405 150 449 112 433 135 b 338 130 387 158 356 150 b 308 92 325 115 317 104 b 269 150 302 127 289 140 b 203 130 252 158 220 150 b 173 92 190 115 181 104 b 134 150 167 127 154 140 b 68 130 117 158 85 150 b -10 23 43 101 13 58 z',\r\n        },\r\n        accSagittal9TinasDown: {\r\n            x_min: -7,\r\n            x_max: 312,\r\n            y_min: -106.31676725154983,\r\n            y_max: -16,\r\n            ha: 90.31676725154983,\r\n            o: 'm -10 -23 b 68 -130 13 -58 43 -101 b 134 -150 85 -150 117 -158 b 173 -92 154 -140 167 -127 b 203 -130 181 -104 190 -115 b 269 -150 220 -150 252 -158 b 308 -92 289 -140 302 -127 b 338 -130 317 -104 325 -115 b 405 -150 356 -150 387 -158 b 449 -23 433 -135 449 -112 l 406 -23 b 387 -107 408 -86 399 -107 b 343 -65 376 -107 359 -86 b 314 -23 336 -55 314 -23 l 271 -23 b 252 -107 272 -86 264 -107 b 207 -65 240 -107 223 -86 b 179 -23 200 -55 179 -23 l 135 -23 b 117 -107 137 -86 128 -107 b 72 -65 105 -107 88 -86 b 43 -23 65 -55 43 -23 z',\r\n        },\r\n        accSagittalFractionalTinaUp: {\r\n            x_min: -3,\r\n            x_max: 35,\r\n            y_min: 73,\r\n            y_max: 111,\r\n            ha: 38,\r\n            o: 'm -4 132 b 23 105 -4 118 9 105 b 50 132 37 105 50 118 b 23 160 50 147 37 160 b -4 132 9 160 -4 147 z',\r\n        },\r\n        accSagittalFractionalTinaDown: {\r\n            x_min: -3,\r\n            x_max: 35,\r\n            y_min: -111,\r\n            y_max: -73,\r\n            ha: 38,\r\n            o: 'm -4 -132 b 23 -160 -4 -147 9 -160 b 50 -132 37 -160 50 -147 b 23 -105 50 -118 37 -105 b -4 -132 9 -105 -4 -118 z',\r\n        },\r\n        accidentalNarrowReversedFlat: {\r\n            x_min: 0,\r\n            x_max: 164,\r\n            y_min: -194,\r\n            y_max: 421,\r\n            ha: 615,\r\n            o: 'm 236 -279 l 236 606 l 192 606 l 192 179 b 85 243 150 222 114 243 b 0 84 23 243 0 134 b 112 -158 0 3 37 -78 z m 192 112 l 192 -163 l 135 -98 b 82 40 101 -50 82 -3 b 138 144 82 73 96 144 b 192 112 153 144 170 132 z',\r\n        },\r\n        accidentalNarrowReversedFlatAndFlat: {\r\n            x_min: 0,\r\n            x_max: 414,\r\n            y_min: -194,\r\n            y_max: 421,\r\n            ha: 615,\r\n            o: 'm 281 606 l 281 -268 l 438 -158 b 596 84 547 -82 596 3 b 475 243 596 154 556 243 b 325 179 435 243 384 222 l 325 606 z m 235 -279 l 235 606 l 190 606 l 190 179 b 85 243 148 222 114 243 b 12 158 52 243 27 215 b 0 84 3 134 0 108 b 112 -158 0 3 37 -78 z m 325 111 b 410 144 359 132 386 144 b 498 36 462 144 498 84 b 413 -107 498 -9 469 -58 l 325 -173 z m 192 112 l 192 -163 l 135 -98 b 81 40 99 -50 81 -3 b 91 94 81 59 84 76 b 137 144 102 127 118 144 b 192 112 153 144 170 132 z',\r\n        },\r\n        accidentalWilsonPlus: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -203,\r\n            y_max: 203,\r\n            ha: 406,\r\n            o: 'm 405 268 l 225 98 l 225 292 l 180 292 l 180 56 l 0 -112 l 0 -268 l 180 -98 l 180 -292 l 225 -292 l 225 -56 l 405 112 z',\r\n        },\r\n        accidentalWilsonMinus: {\r\n            x_min: 0,\r\n            x_max: 281,\r\n            y_min: -186,\r\n            y_max: 186,\r\n            ha: 372,\r\n            o: 'm 0 112 l 405 -268 l 405 -112 l 0 268 z',\r\n        },\r\n    },\r\n    fontFamily: 'Bravura',\r\n    resolution: 1000,\r\n    generatedOn: '2022-05-17T21:05:48.796Z',\r\n};\r\n","/**\r\n * The Bravura font was created by Daniel Spreadbury @ Steinberg.\r\n * https://github.com/steinbergmedia/bravura/\r\n */\r\nexport const BravuraMetrics = {\r\n    name: 'Bravura',\r\n    smufl: true,\r\n    stave: {\r\n        padding: 12,\r\n        endPaddingMax: 10,\r\n        endPaddingMin: 5,\r\n        unalignedNotePadding: 10,\r\n    },\r\n    accidental: {\r\n        noteheadAccidentalPadding: 1,\r\n        leftPadding: 2,\r\n        accidentalSpacing: 3,\r\n    },\r\n    clef: {\r\n        default: {\r\n            point: 32,\r\n            width: 26,\r\n        },\r\n        small: {\r\n            point: 26,\r\n            width: 20,\r\n        },\r\n        annotations: {\r\n            '8va': {\r\n                smuflCode: 'timeSig8',\r\n                default: {\r\n                    point: 18,\r\n                    treble: {\r\n                        line: -1.4,\r\n                        shiftX: 12,\r\n                    },\r\n                },\r\n                small: {\r\n                    point: 16,\r\n                    treble: {\r\n                        line: -0.2,\r\n                        shiftX: 8,\r\n                    },\r\n                },\r\n            },\r\n            '8vb': {\r\n                smuflCode: 'timeSig8',\r\n                default: {\r\n                    point: 18,\r\n                    treble: {\r\n                        line: 6,\r\n                        shiftX: 10,\r\n                    },\r\n                    bass: {\r\n                        line: 3.5,\r\n                        shiftX: 1,\r\n                    },\r\n                },\r\n                small: {\r\n                    point: 16,\r\n                    treble: {\r\n                        line: 5.3,\r\n                        shiftX: 6,\r\n                    },\r\n                    bass: {\r\n                        line: 3.1,\r\n                        shiftX: 0.5,\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        // These may no longer be necessary\r\n        lineCount: {\r\n            '8': { point: 55, shiftY: 14 },\r\n            '7': { point: 47, shiftY: 8 },\r\n            '6': { point: 32, shiftY: 1 },\r\n            '5': { point: 30, shiftY: -6 },\r\n            '4': { point: 23, shiftY: -12 },\r\n        },\r\n    },\r\n    parenthesis: {\r\n        default: {\r\n            point: 39,\r\n            width: 7,\r\n        },\r\n        gracenote: {\r\n            point: (39 * 3) / 5,\r\n            width: 3,\r\n        },\r\n    },\r\n    pedalMarking: {\r\n        up: {\r\n            point: 40,\r\n        },\r\n        down: {\r\n            point: 34,\r\n        },\r\n    },\r\n    // These are for numeric digits, such as in time signatures\r\n    digits: {\r\n        // used by timesig\r\n        shiftLine: -1,\r\n        point: 34,\r\n        // used by tuplets\r\n        tupletPoint: 22,\r\n        shiftY: -6,\r\n    },\r\n    articulation: {\r\n        articStaccatissimoAbove: {\r\n            padding: 2,\r\n        },\r\n        articStaccatissimoBelow: {\r\n            padding: 2,\r\n        },\r\n    },\r\n    tremolo: {\r\n        default: {\r\n            point: 25,\r\n            spacing: 5,\r\n            offsetYStemUp: -5,\r\n            offsetYStemDown: 5,\r\n            offsetXStemUp: 11,\r\n            offsetXStemDown: 1,\r\n        },\r\n        grace: {\r\n            point: 18,\r\n            spacing: 4,\r\n            offsetYStemUp: -5,\r\n            offsetYStemDown: 5,\r\n            offsetXStemUp: 7,\r\n            offsetXStemDown: 1,\r\n        },\r\n    },\r\n    staveRepetition: {\r\n        symbolText: {\r\n            offsetX: 12,\r\n            offsetY: 25,\r\n            spacing: 5,\r\n        },\r\n        coda: {\r\n            offsetY: 25,\r\n        },\r\n        segno: {\r\n            offsetY: 10,\r\n        },\r\n    },\r\n    // noteHead: {\r\n    // },\r\n    stem: {\r\n        heightAdjustmentForFlag: -3,\r\n        // These are stem (Y) offsets to the note heads. To shift the\r\n        // noteheads (x-position) themselves, see glyphs.notehead.custom.\r\n        noteHead: {\r\n            noteheadTriangleUpHalf: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadTriangleUpBlack: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadTriangleUpWhole: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXHalf: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXBlack: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXWhole: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadHalf: {\r\n                offsetYBaseStemUp: -2.55,\r\n                offsetYBaseStemDown: 2.65,\r\n            },\r\n            noteheadBlack: {\r\n                offsetYBaseStemUp: -2,\r\n                offsetYBaseStemDown: 2,\r\n            },\r\n            noteheadSquareWhite: {\r\n                offsetYBaseStemDown: -5,\r\n                offsetYBaseStemUp: 5,\r\n            },\r\n        },\r\n    },\r\n    // Values under here are used by the Glyph class to reposition and rescale\r\n    // glyphs based on their category. This should be the first stop for\r\n    // custom font glyph repositioning.\r\n    //\r\n    // The glyph loader first looks up a specific set of settings based on the\r\n    // glyph code, and if not found, uses the defaults from the category. See\r\n    // glyphs.textNote for an example of this.\r\n    //\r\n    // Details in Glyph.lookupFontMetrics.\r\n    glyphs: {\r\n        coda: {\r\n            point: 20,\r\n            shiftX: -7,\r\n            shiftY: 8,\r\n        },\r\n        segno: {\r\n            shiftX: -7,\r\n        },\r\n        flag: {\r\n            shiftX: -0.75,\r\n            staveTempo: {\r\n                shiftX: -1,\r\n            },\r\n        },\r\n        clef: {\r\n            gClef: {\r\n                default: { scale: 1.1, shiftY: 1 },\r\n                small: { shiftY: 1.5 },\r\n            },\r\n            fClef: {\r\n                default: { shiftY: -0.5 },\r\n            },\r\n        },\r\n        ornament: {\r\n            ornamentTurn: {\r\n                scale: 1.2,\r\n            },\r\n            ornamentTurnSlash: {\r\n                scale: 1.2,\r\n            },\r\n        },\r\n        stringNumber: {\r\n            verticalPadding: 8,\r\n            stemPadding: 2,\r\n            leftPadding: 5,\r\n            rightPadding: 6,\r\n        },\r\n        stroke: {\r\n            arrowheadBlackDown: {\r\n                straight: {\r\n                    shiftX: -4.5,\r\n                },\r\n                wiggly: {\r\n                    shiftX: -1,\r\n                    shiftY: 1,\r\n                },\r\n            },\r\n            arrowheadBlackUp: {\r\n                straight: {\r\n                    shiftX: -0.85,\r\n                },\r\n                wiggly: {\r\n                    shiftX: -1,\r\n                    shiftY: 1,\r\n                },\r\n            },\r\n        },\r\n        textNote: {\r\n            point: 34,\r\n            breathMarkTick: {\r\n                point: 36,\r\n                shiftY: 9,\r\n            },\r\n            breathMarkComma: {\r\n                point: 36,\r\n            },\r\n            segno: {\r\n                point: 30,\r\n                shiftX: -7,\r\n                shiftY: 8,\r\n            },\r\n            coda: {\r\n                point: 20,\r\n                shiftX: -7,\r\n                shiftY: 8,\r\n            },\r\n            ornamentTrill: {\r\n                shiftX: -8,\r\n                shiftY: 8,\r\n            },\r\n            ornamentTurn: {\r\n                point: 42,\r\n            },\r\n            ornamentTurnSlash: {\r\n                point: 42,\r\n            },\r\n            ornamentMordent: {\r\n                shiftX: -8,\r\n            },\r\n            ornamentShortTrill: {\r\n                shiftX: -8,\r\n            },\r\n        },\r\n        noteHead: {\r\n            minPadding: 2,\r\n            standard: {\r\n                restQuarterStemUp: {\r\n                    point: 35,\r\n                },\r\n                restQuarterStemDown: {\r\n                    point: 35,\r\n                },\r\n            },\r\n            custom: {\r\n                noteheadCircleXStemUp: {\r\n                    shiftX: 1.5,\r\n                },\r\n                noteheadCircleXStemDown: {\r\n                    shiftX: 0.25,\r\n                },\r\n                noteheadDiamondHalfStemUp: {\r\n                    shiftX: 1.5,\r\n                },\r\n                noteheadDiamondBlackStemUp: {\r\n                    shiftX: 1.5,\r\n                },\r\n                noteheadDiamondWholeStemUp: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadXHalfStemUp: {\r\n                    shiftX: -2,\r\n                },\r\n                noteheadXHalfStemDown: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadXWholeStemUp: {\r\n                    shiftX: -4,\r\n                },\r\n                noteheadXWholeStemDown: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadSquareWhiteStemDown: {\r\n                    shiftX: 0.25,\r\n                },\r\n                noteheadSquareWhiteStemUp: {\r\n                    shiftX: -0.75,\r\n                },\r\n                noteheadSquareBlackStemUp: {\r\n                    shiftX: -0.75,\r\n                },\r\n                noteheadTriangleUpWholeStemUp: {\r\n                    shiftX: -0.75,\r\n                },\r\n            },\r\n        },\r\n        chordSymbol: {\r\n            global: {\r\n                superscriptOffset: -400,\r\n                subscriptOffset: 300,\r\n                kerningOffset: -250,\r\n                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\r\n                upperKerningText: ['A', 'L'],\r\n                spacing: 100,\r\n                superSubRatio: 0.66,\r\n            },\r\n            csymDiminished: {\r\n                scale: 0.8,\r\n                leftSideBearing: -32,\r\n                advanceWidth: 506,\r\n                yOffset: 0,\r\n            },\r\n            csymHalfDiminished: {\r\n                scale: 0.8,\r\n                leftSideBearing: -32,\r\n                advanceWidth: 506,\r\n                yOffset: 0,\r\n            },\r\n            csymAugmented: {\r\n                scale: 1,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 530,\r\n                yOffset: 0,\r\n            },\r\n            csymParensLeftTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: -20,\r\n                advanceWidth: 184,\r\n                yOffset: 250,\r\n            },\r\n            csymParensRightTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 189,\r\n                yOffset: 250,\r\n            },\r\n            csymBracketLeftTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 328,\r\n                yOffset: 0,\r\n            },\r\n            csymBracketRightTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 1,\r\n                advanceWidth: 600,\r\n                yOffset: 0,\r\n            },\r\n            csymParensLeftVeryTall: {\r\n                scale: 0.9,\r\n                leftSideBearing: 50,\r\n                advanceWidth: 121,\r\n                yOffset: 350,\r\n            },\r\n            csymParensRightVeryTall: {\r\n                scale: 0.9,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 111,\r\n                yOffset: 350,\r\n            },\r\n            csymDiagonalArrangementSlash: {\r\n                scale: 0.6,\r\n                leftSideBearing: -1,\r\n                advanceWidth: 990,\r\n                yOffset: 0,\r\n            },\r\n            csymMinor: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 482,\r\n                yOffset: 0,\r\n            },\r\n            csymMajorSeventh: {\r\n                scale: 0.9,\r\n                leftSideBearing: 200,\r\n                yOffset: 0,\r\n                advanceWidth: 600,\r\n            },\r\n            accidentalSharp: {\r\n                scale: 0.75,\r\n                leftSideBearing: 20,\r\n                advanceWidth: 250,\r\n                yOffset: -302,\r\n            },\r\n            accidentalFlat: {\r\n                scale: 0.9,\r\n                leftSideBearing: -20,\r\n                advanceWidth: 226,\r\n                yOffset: -184,\r\n            },\r\n        },\r\n        jazzOrnaments: {\r\n            brassScoop: {\r\n                scale: 1.0,\r\n                xOffset: -12,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 20,\r\n            },\r\n            brassDoitMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 22,\r\n            },\r\n            brassFallLipShort: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 15,\r\n            },\r\n            brassLiftMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 5,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassFallRoughMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 28,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassBend: {\r\n                scale: 1.0,\r\n                xOffset: 2,\r\n                yOffset: -8,\r\n                stemUpYOffset: 25,\r\n                reportedWidth: 5,\r\n            },\r\n            brassMuteClosed: {\r\n                scale: 1.0,\r\n                xOffset: 3,\r\n                yOffset: -8,\r\n                stemUpYOffset: 25,\r\n                reportedWidth: 5,\r\n            },\r\n            brassMuteOpen: {\r\n                scale: 1.0,\r\n                xOffset: 3,\r\n                yOffset: -7,\r\n                stemUpYOffset: 25,\r\n                reportedWidth: 5,\r\n            },\r\n            brassFlip: {\r\n                scale: 1.0,\r\n                xOffset: 10,\r\n                yOffset: 0,\r\n                stemUpYOffset: 7,\r\n                reportedWidth: 10,\r\n            },\r\n            brassJazzTurn: {\r\n                scale: 1.0,\r\n                xOffset: 0,\r\n                yOffset: 0,\r\n                stemUpYOffset: 8,\r\n                reportedWidth: 31,\r\n            },\r\n            brassSmear: {\r\n                scale: 1.0,\r\n                xOffset: 10,\r\n                yOffset: 0,\r\n                stemUpYOffset: 8,\r\n                reportedWidth: 5,\r\n            },\r\n        },\r\n        tuplet: {\r\n            noteHeadOffset: 20,\r\n            stemOffset: 10,\r\n            bottomLine: 4,\r\n            topModifierOffset: 15,\r\n        },\r\n    },\r\n};\r\n","export const CustomFont = {\r\n    resolution: 1000,\r\n    fontFamily: 'VexFlowCustom',\r\n    glyphs: {\r\n        noteheadSquareWhite: {\r\n            x_min: 0,\r\n            x_max: 430.75,\r\n            ha: 386,\r\n            o: 'm 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 l 50 150 l 380 150 l 380 -150 l 50 -150 l 50 150 ',\r\n        },\r\n        noteheadSquareBlack: {\r\n            x_min: 0,\r\n            x_max: 430.75,\r\n            ha: 386,\r\n            o: 'm 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 ',\r\n        },\r\n        accidentalBuyukMucennebFlat: {\r\n            x_min: -171.5,\r\n            x_max: 251.8125,\r\n            ha: 257,\r\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\r\n        },\r\n        accidentalBakiyeFlat: {\r\n            x_min: -176.9375,\r\n            x_max: 251.8125,\r\n            ha: 257,\r\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\r\n        },\r\n        accidentalKucukMucennebSharp: {\r\n            x_min: -1.359375,\r\n            x_max: 255.890625,\r\n            ha: 261,\r\n            o: 'm 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 ',\r\n        },\r\n        accidentalKoron: {\r\n            x_min: -20,\r\n            x_max: 320,\r\n            ha: 257,\r\n            o: 'm -8 200 b -8 210 8 200 16 200 l 20 148 -199 l 23 -615 b 0 -629 9 -629 6 -629 l -21 -612 l -21 -201 l -21 216 l -20 200 m 16 200 l 310 0 l 240 0 l 16 140 l 16 -120 l 240 0 l 310 0 l 16 -200 ',\r\n        },\r\n        accidentalSori: {\r\n            x_min: -10.890625,\r\n            x_max: 299.4375,\r\n            ha: 294,\r\n            o: 'm 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 m 205 110 l 205 300 b 205 330 245 330 245 300 l 245 300 l 245 -300 b 245 -330 205 -330 205 -300 l 205 -300 l 205 110 l 345 90 m 345 90 l 345 330 b 345 360 385 360 385 330 l 385 330 l 385 -270 b 385 -300 345 -300 345 -270 l 345 -270 l 345 90 ',\r\n        },\r\n        vexAccidentalMicrotonal2: {\r\n            x_min: -1.359375,\r\n            x_max: 386.5625,\r\n            ha: 394,\r\n            o: 'm 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 ',\r\n        },\r\n        vexAccidentalMicrotonal3: {\r\n            x_min: 0,\r\n            x_max: 430.75,\r\n            ha: 360,\r\n            o: 'm -146 537 b -138 538 -143 538 -141 538 b -118 525 -129 538 -121 533 b -117 390 -117 522 -117 521 b -115 259 -117 268 -117 259 b -115 259 -115 259 -115 259 b -59 272 -104 263 -62 272 b -39 259 -50 272 -42 267 b -37 209 -38 257 -37 233 b -39 159 -37 185 -38 162 b -85 138 -43 149 -44 149 l -117 131 l -117 21 b -115 -88 -117 -80 -117 -88 b -115 -88 -115 -88 -115 -88 b -59 -75 -104 -84 -62 -75 b -44 -81 -52 -75 -48 -77 b -38 -124 -38 -87 -38 -85 b -38 -138 -38 -124 -38 -138 b -38 -152 -38 -138 -38 -152 b -44 -195 -38 -191 -38 -190 b -85 -209 -48 -200 -48 -200 l -117 -217 l -117 -349 b -118 -486 -117 -481 -117 -482 b -138 -499 -121 -494 -129 -499 b -153 -493 -143 -499 -149 -497 b -159 -415 -158 -487 -159 -496 b -159 -355 -159 -398 -159 -379 b -159 -227 -159 -284 -159 -227 b -205 -238 -159 -227 -180 -232 b -250 -249 -230 -244 -250 -249 b -251 -386 -251 -249 -251 -311 b -252 -525 -251 -521 -251 -522 b -272 -538 -255 -534 -264 -538 b -287 -532 -277 -538 -283 -536 b -293 -452 -292 -527 -293 -536 b -293 -391 -293 -436 -293 -415 b -294 -260 -293 -269 -293 -260 b -294 -260 -294 -260 -294 -260 b -348 -272 -306 -264 -345 -272 b -368 -259 -357 -272 -365 -267 b -369 -209 -369 -257 -369 -233 b -368 -159 -369 -185 -369 -162 b -323 -139 -364 -149 -362 -148 l -293 -131 l -293 -22 b -294 87 -293 80 -293 87 b -294 87 -294 87 -294 87 b -348 75 -306 84 -345 75 b -368 88 -357 75 -365 80 b -369 138 -369 91 -369 114 b -368 188 -369 162 -369 186 b -323 209 -364 198 -362 199 l -293 216 l -293 349 b -292 486 -293 481 -293 482 b -272 499 -288 494 -280 499 b -257 493 -266 499 -261 497 b -251 414 -251 487 -251 496 b -251 354 -251 398 -251 378 b -251 226 -251 284 -251 226 b -205 238 -250 226 -230 231 b -159 249 -180 244 -159 249 b -159 385 -159 249 -159 310 b -157 525 -159 521 -159 522 b -146 537 -156 530 -151 535 z m -159 11 b -159 120 -159 98 -159 120 l -159 120 b -175 116 -160 120 -167 119 b -221 105 -184 114 -204 109 l -251 98 l -251 -12 b -251 -121 -251 -72 -251 -121 b -205 -110 -250 -121 -230 -116 b -159 -99 -180 -104 -159 -99 b -159 11 -159 -99 -159 -49 z m 89 517 b 97 519 92 518 94 519 b 117 505 106 519 114 513 b 119 376 119 502 119 501 l 119 249 l 145 258 b 176 267 169 266 172 267 b 177 267 176 267 177 267 b 196 255 186 267 192 263 l 197 252 l 197 205 b 197 181 197 195 197 187 b 193 149 197 153 197 153 b 152 131 190 144 187 143 l 119 120 l 119 10 b 119 -100 119 -62 119 -100 b 145 -91 120 -100 131 -96 b 173 -82 159 -86 171 -82 b 176 -81 174 -81 175 -81 b 196 -94 185 -81 193 -87 b 198 -151 197 -97 198 -125 b 197 -194 198 -172 197 -192 b 153 -218 193 -203 192 -204 l 119 -230 l 119 -367 l 118 -504 l 117 -507 b 97 -519 113 -514 105 -519 b 82 -512 92 -519 87 -517 b 76 -434 77 -507 76 -516 b 76 -374 76 -418 76 -398 b 76 -245 76 -303 76 -245 b 52 -254 76 -245 65 -249 b 19 -263 34 -260 25 -263 b 6 -257 13 -263 10 -261 b 0 -214 0 -251 0 -253 b 0 -200 0 -210 0 -205 b 0 -188 0 -196 0 -192 b 6 -143 0 -147 0 -149 b 46 -126 10 -139 10 -139 l 76 -115 l 76 -5 b 76 106 76 56 76 106 b 51 98 76 106 64 102 b 18 89 34 92 25 89 b 6 95 13 89 10 91 b 0 139 0 101 0 99 b 0 153 0 143 0 148 b 0 179 0 163 0 172 b 44 225 0 215 3 211 l 76 236 l 76 369 b 78 505 76 501 76 502 b 89 517 80 510 85 515 z ',\r\n        },\r\n        vexAccidentalMicrotonal4: {\r\n            x_min: 0,\r\n            x_max: 430.75,\r\n            ha: 360,\r\n            o: 'm 283 633 b 291 634 286 634 289 634 b 311 621 300 634 308 629 b 313 505 313 618 313 617 b 313 393 313 443 313 393 b 378 425 313 393 343 407 l 443 458 l 448 458 b 449 458 449 458 449 458 b 471 437 462 458 471 448 b 469 429 471 434 470 432 b 387 382 466 421 469 423 l 313 344 l 313 247 l 313 150 l 315 152 b 433 201 353 184 394 201 b 479 193 448 201 464 198 b 549 86 524 177 549 135 b 526 1 549 59 541 29 b 395 -143 504 -39 475 -71 b 316 -214 351 -182 341 -191 b 292 -229 302 -228 300 -229 b 272 -216 283 -229 275 -224 b 271 55 271 -212 271 -212 b 270 323 271 203 270 323 b 205 291 270 323 241 308 l 140 258 l 135 258 b 134 258 135 258 134 258 b 112 279 121 258 112 267 b 114 287 112 281 113 284 b 196 334 117 295 114 293 l 271 371 l 271 495 b 272 621 271 617 271 618 b 283 633 274 626 279 631 z m 404 133 b 391 134 400 134 395 134 b 384 134 388 134 386 134 b 318 88 358 130 335 114 l 313 81 l 313 -37 l 313 -156 l 316 -152 b 439 83 391 -71 439 22 l 439 84 b 404 133 439 115 430 128 z m -8 633 l -8 633 b 0 634 -6 634 -3 634 b 20 621 8 634 17 629 b 21 384 21 618 21 617 l 21 150 l 24 152 b 141 201 62 184 102 201 b 187 193 157 201 172 198 b 257 86 232 177 257 135 b 234 1 257 59 250 29 b 103 -143 212 -39 183 -71 b 24 -214 60 -182 49 -191 b 0 -229 10 -228 8 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 203 l -21 618 l -20 621 b -8 633 -18 626 -13 631 z m 113 133 l 113 133 b 99 134 109 134 103 134 b 93 134 97 134 94 134 b 26 88 66 130 43 114 l 21 81 l 21 -37 l 21 -156 l 25 -152 b 148 83 99 -71 148 22 l 148 84 b 113 133 148 115 138 128 z ',\r\n        },\r\n        vexNoteHeadRectBlack: {\r\n            x_min: 0,\r\n            x_max: 430.75,\r\n            ha: 360,\r\n            o: 'm 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 ',\r\n        },\r\n        vexNoteHeadRectWhite: {\r\n            x_min: 0,\r\n            x_max: 430.75,\r\n            ha: 360,\r\n            o: 'm 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 l 50 100 l 380 100 l 380 -100 l 50 -100 l 50 100',\r\n        },\r\n    },\r\n};\r\n","export const CustomMetrics = {\r\n    name: 'VexFlowCustom',\r\n    smufl: false,\r\n    glyphs: {},\r\n};\r\n","export const GonvilleFont = {\r\n    glyphs: {\r\n        bracketTop: {\r\n            x_min: 0,\r\n            x_max: 559.421875,\r\n            ha: 571,\r\n            o: 'm 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 ',\r\n        },\r\n        bracketBottom: {\r\n            x_min: 0,\r\n            x_max: 559.421875,\r\n            ha: 571,\r\n            o: 'm 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 ',\r\n        },\r\n        barlineTick: {\r\n            x_min: -80.3125,\r\n            x_max: 78.9375,\r\n            ha: 81,\r\n            o: 'm 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 ',\r\n        },\r\n        breathMarkTick: {\r\n            x_min: -80.3125,\r\n            x_max: 78.9375,\r\n            ha: 81,\r\n            o: 'm 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 ',\r\n        },\r\n        segno: {\r\n            x_min: -330.75,\r\n            x_max: 329.390625,\r\n            ha: 336,\r\n            o: 'm -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 ',\r\n        },\r\n        coda: {\r\n            x_min: -311.6875,\r\n            x_max: 310.328125,\r\n            ha: 317,\r\n            o: 'm -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 ',\r\n        },\r\n        gClef: {\r\n            x_min: -1.359375,\r\n            x_max: 847.96875,\r\n            ha: 865,\r\n            o: 'm 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 ',\r\n        },\r\n        cClef: {\r\n            x_min: 0,\r\n            x_max: 873.828125,\r\n            ha: 892,\r\n            o: 'm 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 ',\r\n        },\r\n        fClef: {\r\n            x_min: -1.359375,\r\n            x_max: 899.703125,\r\n            ha: 918,\r\n            o: 'm 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 ',\r\n        },\r\n        unpitchedPercussionClef1: {\r\n            x_min: 0,\r\n            x_max: 464.140625,\r\n            ha: 474,\r\n            o: 'm 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 ',\r\n        },\r\n        '6stringTabClef': {\r\n            x_min: -1.359375,\r\n            x_max: 680.5625,\r\n            ha: 694,\r\n            o: 'm 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 ',\r\n        },\r\n        timeSig0: {\r\n            x_min: 0,\r\n            x_max: 514.5,\r\n            ha: 525,\r\n            o: 'm 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 ',\r\n        },\r\n        timeSig1: {\r\n            x_min: -1.359375,\r\n            x_max: 344.359375,\r\n            ha: 351,\r\n            o: 'm 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 ',\r\n        },\r\n        timeSig2: {\r\n            x_min: -1.359375,\r\n            x_max: 458.6875,\r\n            ha: 468,\r\n            o: 'm 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 ',\r\n        },\r\n        timeSig3: {\r\n            x_min: -1.359375,\r\n            x_max: 409.6875,\r\n            ha: 418,\r\n            o: 'm 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 ',\r\n        },\r\n        timeSig4: {\r\n            x_min: 0,\r\n            x_max: 468.21875,\r\n            ha: 478,\r\n            o: 'm 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 ',\r\n        },\r\n        timeSig5: {\r\n            x_min: 0,\r\n            x_max: 409.6875,\r\n            ha: 418,\r\n            o: 'm 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 ',\r\n        },\r\n        timeSig6: {\r\n            x_min: 0,\r\n            x_max: 475.03125,\r\n            ha: 485,\r\n            o: 'm 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 ',\r\n        },\r\n        timeSig7: {\r\n            x_min: 0,\r\n            x_max: 442.359375,\r\n            ha: 451,\r\n            o: 'm 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 ',\r\n        },\r\n        timeSig8: {\r\n            x_min: 0,\r\n            x_max: 488.640625,\r\n            ha: 499,\r\n            o: 'm 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 ',\r\n        },\r\n        timeSig9: {\r\n            x_min: 0,\r\n            x_max: 475.03125,\r\n            ha: 485,\r\n            o: 'm 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 ',\r\n        },\r\n        timeSigCommon: {\r\n            x_min: -1.359375,\r\n            x_max: 556.6875,\r\n            ha: 568,\r\n            o: 'm 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 ',\r\n        },\r\n        timeSigCutCommon: {\r\n            x_min: 0,\r\n            x_max: 556.6875,\r\n            ha: 568,\r\n            o: 'm 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 ',\r\n        },\r\n        timeSigPlus: {\r\n            x_min: 0,\r\n            x_max: 319.859375,\r\n            ha: 326,\r\n            o: 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ',\r\n        },\r\n        timeSigPlusSmall: {\r\n            x_min: 0,\r\n            x_max: 319.859375,\r\n            ha: 326,\r\n            o: 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ',\r\n        },\r\n        timeSigMinus: {\r\n            x_min: 0,\r\n            x_max: 318.5,\r\n            ha: 325,\r\n            o: 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ',\r\n        },\r\n        timeSigParensRight: {\r\n            x_min: 25.859375,\r\n            x_max: 164.6875,\r\n            ha: 168,\r\n            o: 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ',\r\n        },\r\n        timeSigParensRightSmall: {\r\n            x_min: 25.859375,\r\n            x_max: 164.6875,\r\n            ha: 168,\r\n            o: 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ',\r\n        },\r\n        timeSigParensLeft: {\r\n            x_min: -166.0625,\r\n            x_max: -25.859375,\r\n            ha: 0,\r\n            o: 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ',\r\n        },\r\n        timeSigParensLeftSmall: {\r\n            x_min: -166.0625,\r\n            x_max: -25.859375,\r\n            ha: 0,\r\n            o: 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ',\r\n        },\r\n        noteheadDoubleWhole: {\r\n            x_min: 0,\r\n            x_max: 902.421875,\r\n            ha: 921,\r\n            o: 'm 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 ',\r\n        },\r\n        noteheadWhole: {\r\n            x_min: 0,\r\n            x_max: 619.3125,\r\n            ha: 632,\r\n            o: 'm 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 ',\r\n        },\r\n        noteheadHalf: {\r\n            x_min: 0,\r\n            x_max: 428.75,\r\n            ha: 438,\r\n            o: 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 ',\r\n        },\r\n        noteheadBlack: {\r\n            x_min: 0,\r\n            x_max: 428.75,\r\n            ha: 438,\r\n            o: 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 ',\r\n        },\r\n        noteheadXWhole: {\r\n            x_min: 0,\r\n            x_max: 598.890625,\r\n            ha: 611,\r\n            o: 'm 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 ',\r\n        },\r\n        noteheadXHalf: {\r\n            x_min: 0,\r\n            x_max: 406.96875,\r\n            ha: 415,\r\n            o: 'm 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 ',\r\n        },\r\n        noteheadXBlack: {\r\n            x_min: 0,\r\n            x_max: 406.96875,\r\n            ha: 415,\r\n            o: 'm 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 ',\r\n        },\r\n        noteheadCircleX: {\r\n            x_min: 0,\r\n            x_max: 484.5625,\r\n            ha: 494,\r\n            o: 'm 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 ',\r\n        },\r\n        noteheadTriangleUpWhole: {\r\n            x_min: 0,\r\n            x_max: 630.203125,\r\n            ha: 643,\r\n            o: 'm 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 ',\r\n        },\r\n        noteheadTriangleUpHalf: {\r\n            x_min: 0,\r\n            x_max: 438.28125,\r\n            ha: 447,\r\n            o: 'm 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 ',\r\n        },\r\n        noteheadTriangleUpBlack: {\r\n            x_min: -1.359375,\r\n            x_max: 436.921875,\r\n            ha: 446,\r\n            o: 'm 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 ',\r\n        },\r\n        noteheadDiamondWhole: {\r\n            x_min: 0,\r\n            x_max: 627.46875,\r\n            ha: 640,\r\n            o: 'm 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 ',\r\n        },\r\n        noteheadDiamondHalf: {\r\n            x_min: 0,\r\n            x_max: 438.28125,\r\n            ha: 447,\r\n            o: 'm 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 ',\r\n        },\r\n        noteheadDiamondBlack: {\r\n            x_min: 0,\r\n            x_max: 432.828125,\r\n            ha: 442,\r\n            o: 'm 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 ',\r\n        },\r\n        augmentationDot: {\r\n            x_min: 0,\r\n            x_max: 133.390625,\r\n            ha: 136,\r\n            o: 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ',\r\n        },\r\n        tremolo1: {\r\n            x_min: -206.890625,\r\n            x_max: 428.75,\r\n            ha: 438,\r\n            o: 'm 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 ',\r\n        },\r\n        flag8thUp: {\r\n            x_min: -24.5,\r\n            x_max: 317.140625,\r\n            ha: 324,\r\n            o: 'm -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 ',\r\n        },\r\n        flag8thDown: {\r\n            x_min: -21.78125,\r\n            x_max: 367.5,\r\n            ha: 375,\r\n            o: 'm 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 ',\r\n        },\r\n        flag16thUp: {\r\n            x_min: -24.5,\r\n            x_max: 317.140625,\r\n            ha: 324,\r\n            o: 'm -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 ',\r\n        },\r\n        flag16thDown: {\r\n            x_min: -21.78125,\r\n            x_max: 362.0625,\r\n            ha: 369,\r\n            o: 'm 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 ',\r\n        },\r\n        flag32ndUp: {\r\n            x_min: -24.5,\r\n            x_max: 315.78125,\r\n            ha: 322,\r\n            o: 'm -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 ',\r\n        },\r\n        flag32ndDown: {\r\n            x_min: -21.78125,\r\n            x_max: 366.140625,\r\n            ha: 374,\r\n            o: 'm 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 ',\r\n        },\r\n        flag64thUp: {\r\n            x_min: -24.5,\r\n            x_max: 314.421875,\r\n            ha: 321,\r\n            o: 'm -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 ',\r\n        },\r\n        flag64thDown: {\r\n            x_min: -21.78125,\r\n            x_max: 367.5,\r\n            ha: 375,\r\n            o: 'm 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 ',\r\n        },\r\n        flag128thUp: {\r\n            x_min: -24.5,\r\n            x_max: 313.0625,\r\n            ha: 319,\r\n            o: 'm -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 ',\r\n        },\r\n        flag128thDown: {\r\n            x_min: -21.78125,\r\n            x_max: 367.5,\r\n            ha: 375,\r\n            o: 'm 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 ',\r\n        },\r\n        accidentalFlat: {\r\n            x_min: -21.78125,\r\n            x_max: 251.8125,\r\n            ha: 257,\r\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\r\n        },\r\n        accidentalNatural: {\r\n            x_min: 0,\r\n            x_max: 239.5625,\r\n            ha: 244,\r\n            o: 'm 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 ',\r\n        },\r\n        accidentalSharp: {\r\n            x_min: 0,\r\n            x_max: 323.9375,\r\n            ha: 331,\r\n            o: 'm 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 ',\r\n        },\r\n        accidentalDoubleSharp: {\r\n            x_min: 0,\r\n            x_max: 367.5,\r\n            ha: 375,\r\n            o: 'm 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 ',\r\n        },\r\n        accidentalDoubleFlat: {\r\n            x_min: -21.78125,\r\n            x_max: 483.1875,\r\n            ha: 493,\r\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 ',\r\n        },\r\n        accidentalParensLeft: {\r\n            x_min: -166.0625,\r\n            x_max: -25.859375,\r\n            ha: 0,\r\n            o: 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ',\r\n        },\r\n        accidentalParensRight: {\r\n            x_min: 25.859375,\r\n            x_max: 164.6875,\r\n            ha: 168,\r\n            o: 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ',\r\n        },\r\n        accidentalQuarterToneFlatStein: {\r\n            x_min: 0,\r\n            x_max: 272.21875,\r\n            ha: 278,\r\n            o: 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 ',\r\n        },\r\n        accidentalThreeQuarterTonesFlatZimmermann: {\r\n            x_min: 0,\r\n            x_max: 607.0625,\r\n            ha: 619,\r\n            o: 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 ',\r\n        },\r\n        accidentalQuarterToneSharpStein: {\r\n            x_min: 0,\r\n            x_max: 193.28125,\r\n            ha: 197,\r\n            o: 'm 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 ',\r\n        },\r\n        accidentalThreeQuarterTonesSharpStein: {\r\n            x_min: -1.359375,\r\n            x_max: 455.96875,\r\n            ha: 465,\r\n            o: 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 ',\r\n        },\r\n        accidentalBuyukMucennebFlat: {\r\n            x_min: -171.5,\r\n            x_max: 251.8125,\r\n            ha: 257,\r\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\r\n        },\r\n        accidentalBakiyeFlat: {\r\n            x_min: -176.9375,\r\n            x_max: 251.8125,\r\n            ha: 257,\r\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ',\r\n        },\r\n        accidentalKomaSharp: {\r\n            x_min: -1.359375,\r\n            x_max: 455.96875,\r\n            ha: 465,\r\n            o: 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 ',\r\n        },\r\n        accidentalKucukMucennebSharp: {\r\n            x_min: -1.359375,\r\n            x_max: 255.890625,\r\n            ha: 261,\r\n            o: 'm 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 ',\r\n        },\r\n        articAccentAbove: {\r\n            x_min: -348.4375,\r\n            x_max: 24.5,\r\n            ha: 25,\r\n            o: 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 ',\r\n        },\r\n        articAccentBelow: {\r\n            x_min: -348.4375,\r\n            x_max: 24.5,\r\n            ha: 25,\r\n            o: 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 ',\r\n        },\r\n        articTenutoAbove: {\r\n            x_min: 0,\r\n            x_max: 318.5,\r\n            ha: 325,\r\n            o: 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ',\r\n        },\r\n        articTenutoBelow: {\r\n            x_min: 0,\r\n            x_max: 318.5,\r\n            ha: 325,\r\n            o: 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ',\r\n        },\r\n        articStaccatoAbove: {\r\n            x_min: 0,\r\n            x_max: 133.390625,\r\n            ha: 136,\r\n            o: 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ',\r\n        },\r\n        articStaccatoBelow: {\r\n            x_min: 0,\r\n            x_max: 133.390625,\r\n            ha: 136,\r\n            o: 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ',\r\n        },\r\n        articStaccatissimoAbove: {\r\n            x_min: -73.5,\r\n            x_max: 72.140625,\r\n            ha: 74,\r\n            o: 'm -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 ',\r\n        },\r\n        articStaccatissimoBelow: {\r\n            x_min: -73.5,\r\n            x_max: 72.140625,\r\n            ha: 74,\r\n            o: 'm -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 ',\r\n        },\r\n        articMarcatoAbove: {\r\n            x_min: -149.71875,\r\n            x_max: 148.359375,\r\n            ha: 151,\r\n            o: 'm -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 ',\r\n        },\r\n        articMarcatoBelow: {\r\n            x_min: -149.71875,\r\n            x_max: 148.359375,\r\n            ha: 151,\r\n            o: 'm -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 ',\r\n        },\r\n        fermataAbove: {\r\n            x_min: -442.359375,\r\n            x_max: 441,\r\n            ha: 450,\r\n            o: 'm -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 ',\r\n        },\r\n        fermataBelow: {\r\n            x_min: -441,\r\n            x_max: 439.640625,\r\n            ha: 449,\r\n            o: 'm -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',\r\n        },\r\n        fermataLongAbove: {\r\n            x_min: -390.640625,\r\n            x_max: 389.28125,\r\n            ha: 397,\r\n            o: 'm -378 502 l -374 503 l 0 503 l 372 503 l 377 502 b 387 491 381 499 385 496 l 389 488 l 389 251 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 174 l 347 335 l 0 335 l -348 335 l -348 174 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 251 l -390 488 l -389 491 b -378 502 -386 496 -382 499 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 ',\r\n        },\r\n        fermataLongBelow: {\r\n            x_min: -390.640625,\r\n            x_max: 389.28125,\r\n            ha: 397,\r\n            o: 'm -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -176 l -348 -337 l 0 -337 l 347 -337 l 347 -176 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -252 l 389 -489 l 387 -492 b 377 -503 385 -498 381 -501 l 372 -505 l 0 -505 l -374 -505 l -378 -503 b -389 -492 -382 -501 -386 -498 l -390 -489 l -390 -252 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',\r\n        },\r\n        fermataVeryLongAbove: {\r\n            x_min: -390.640625,\r\n            x_max: 389.28125,\r\n            ha: 397,\r\n            o: 'm -378 573 l -374 576 l 0 576 l 372 576 l 377 573 b 387 563 381 571 385 567 l 389 559 l 389 287 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 210 l 347 406 l 0 406 l -348 406 l -348 210 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 287 l -390 559 l -389 563 b -378 573 -386 567 -382 571 m -274 337 l -270 338 l 0 338 l 269 338 l 273 337 b 284 326 279 334 281 330 l 285 323 l 285 169 l 285 15 l 284 12 b 265 -1 280 4 272 -1 b 245 12 257 -1 249 4 l 245 15 l 243 108 l 243 201 l 0 201 l -245 201 l -245 108 l -245 15 l -246 12 b -266 -1 -250 4 -258 -1 b -285 12 -273 -1 -281 4 l -287 15 l -287 169 l -287 323 l -285 326 b -274 337 -283 330 -280 334 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 ',\r\n        },\r\n        fermataVeryLongBelow: {\r\n            x_min: -390.640625,\r\n            x_max: 389.28125,\r\n            ha: 397,\r\n            o: 'm -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -212 l -348 -408 l 0 -408 l 347 -408 l 347 -212 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -288 l 389 -560 l 387 -564 b 377 -574 385 -569 381 -573 l 372 -577 l 0 -577 l -374 -577 l -378 -574 b -389 -564 -382 -573 -386 -569 l -390 -560 l -390 -288 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -274 -2 b -266 -1 -272 -1 -270 -1 b -246 -13 -257 -1 -250 -5 l -245 -16 l -245 -109 l -245 -202 l 0 -202 l 243 -202 l 243 -109 l 245 -16 l 245 -13 b 265 0 249 -5 257 0 b 284 -13 272 0 280 -5 l 285 -16 l 285 -170 l 285 -324 l 284 -327 b 273 -338 281 -331 279 -335 l 269 -340 l 0 -340 l -270 -340 l -274 -338 b -285 -327 -280 -335 -283 -331 l -287 -324 l -287 -170 l -287 -16 l -285 -13 b -274 -2 -283 -8 -280 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',\r\n        },\r\n        fermataShortAbove: {\r\n            x_min: -390.640625,\r\n            x_max: 389.28125,\r\n            ha: 397,\r\n            o: 'm -9 650 b -1 652 -6 650 -4 652 b 19 639 6 652 13 648 l 23 631 b 28 623 24 628 27 626 l 34 614 l 39 606 l 43 598 l 49 588 l 54 580 l 59 571 l 65 563 l 69 555 l 74 546 l 80 537 l 85 528 b 89 520 87 526 89 523 l 95 512 l 100 503 l 106 494 l 111 487 l 115 478 l 121 470 l 126 462 l 130 453 l 136 445 l 141 437 l 147 427 l 151 419 l 156 410 l 161 402 l 167 394 l 172 385 l 176 376 b 182 367 179 374 181 370 l 187 359 l 193 351 l 198 342 l 202 334 l 208 326 l 212 317 l 217 309 l 223 301 l 228 292 l 234 284 l 238 274 l 243 266 l 249 258 l 254 249 l 259 241 l 264 233 l 269 224 b 274 216 270 222 273 217 l 280 206 l 285 198 l 295 180 l 299 174 l 304 165 l 310 156 l 315 148 l 321 140 l 325 131 l 330 123 l 336 113 l 341 105 l 347 97 l 351 88 l 356 80 l 360 72 b 364 66 362 70 363 68 b 370 58 366 65 368 61 l 379 41 b 389 19 386 31 389 24 b 382 4 389 13 386 8 b 347 0 377 0 378 0 b 337 0 344 0 340 0 b 336 0 336 0 336 0 b 287 11 294 0 294 0 l 281 19 l 276 27 l 272 37 l 266 45 l 261 54 l 255 62 l 250 70 l 246 79 l 240 87 l 235 97 l 230 105 l 224 113 l 220 122 l 215 130 l 209 140 l 204 148 l 200 155 l 194 163 b 189 172 193 165 191 169 l 185 180 l 179 188 l 174 198 l 168 206 l 163 215 l 159 223 l 153 231 l 148 240 l 142 249 l 138 258 l 133 266 l 127 274 l 122 283 l 117 292 l 111 301 l 107 308 l 102 316 b 98 324 102 317 99 322 l 92 333 l 87 341 l 81 349 l 77 359 l 72 367 l 66 376 l 61 384 l 55 392 l 51 401 l 46 410 l 40 419 l 35 427 l 31 435 l 24 444 l 20 453 l 14 460 l 10 469 b 5 477 9 470 6 474 l 0 485 l -5 494 l -9 502 l -14 512 b -20 519 -16 513 -19 517 l -24 526 l -28 534 b -31 537 -29 535 -31 537 b -35 533 -32 537 -32 535 l -88 444 l -187 280 l -285 117 l -343 23 b -362 1 -352 6 -356 2 b -368 0 -364 0 -367 0 b -390 20 -381 0 -390 8 l -390 20 b -359 77 -390 27 -390 27 l -80 539 l -25 631 b -9 650 -17 644 -13 648 m -13 133 b -1 134 -9 133 -5 134 b 50 105 19 134 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 70 -57 40 -62 55 b -13 133 -62 98 -44 126 ',\r\n        },\r\n        fermataShortBelow: {\r\n            x_min: -390.640625,\r\n            x_max: 389.28125,\r\n            ha: 397,\r\n            o: 'm -377 -1 b -368 0 -375 -1 -372 0 b -362 -1 -366 0 -363 -1 b -343 -24 -356 -4 -352 -8 l -285 -119 l -187 -280 l -88 -444 l -35 -533 b -31 -538 -32 -537 -32 -538 b -28 -534 -31 -538 -29 -537 l -23 -526 l -19 -517 l -13 -509 l -8 -501 l -2 -492 l 2 -483 l 6 -476 l 17 -458 l 23 -449 l 32 -433 l 38 -424 l 42 -416 l 47 -408 l 53 -399 l 58 -391 l 63 -381 l 68 -373 l 73 -365 l 78 -356 l 84 -348 l 89 -340 l 93 -330 l 99 -322 l 104 -315 l 114 -297 l 125 -280 l 129 -272 l 134 -263 l 140 -255 l 145 -247 l 151 -238 l 155 -230 l 160 -220 l 166 -212 l 171 -204 l 176 -195 l 181 -187 l 186 -177 l 191 -169 l 196 -162 l 201 -154 l 206 -144 l 217 -127 l 221 -119 l 227 -111 l 232 -102 l 238 -94 l 242 -86 l 247 -77 l 253 -69 l 258 -59 l 262 -51 l 268 -43 l 273 -34 l 279 -26 l 283 -18 b 321 -1 292 -2 292 -1 b 338 -1 326 -1 332 -1 b 382 -6 378 -1 375 -1 b 389 -20 386 -9 389 -15 b 382 -38 389 -26 386 -31 l 378 -47 l 372 -55 l 367 -63 l 362 -72 l 356 -80 l 351 -90 l 347 -98 l 341 -106 l 336 -115 l 330 -123 l 325 -131 l 321 -141 l 315 -149 l 310 -158 l 304 -166 l 299 -174 b 295 -183 298 -177 296 -181 l 289 -191 l 285 -199 l 280 -208 l 274 -216 l 269 -224 l 264 -233 l 259 -242 l 254 -251 l 249 -259 l 243 -267 l 238 -276 l 234 -284 l 228 -292 l 223 -302 l 217 -310 l 213 -319 l 208 -327 b 202 -335 206 -330 204 -334 l 197 -344 l 193 -351 l 187 -360 l 182 -369 l 176 -377 l 172 -385 l 167 -394 l 161 -403 l 156 -412 l 152 -420 l 147 -428 l 141 -437 l 136 -445 l 130 -455 l 126 -463 l 121 -471 l 115 -480 b 110 -488 114 -483 111 -487 l 106 -496 l 100 -503 l 96 -512 l 89 -521 l 85 -530 l 80 -538 l 74 -546 l 69 -555 l 65 -564 l 59 -573 l 54 -581 l 49 -589 l 43 -598 l 39 -606 l 34 -616 l 28 -624 l 23 -632 b 19 -641 21 -635 20 -638 b 0 -653 14 -649 8 -653 b -25 -631 -10 -653 -14 -649 l -80 -541 l -359 -79 b -389 -29 -375 -52 -389 -30 b -390 -22 -389 -26 -390 -24 b -377 -1 -390 -13 -385 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 51 -36 19 -8 39 -19 b 61 -72 58 -47 61 -59 b 51 -106 61 -84 58 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -127 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ',\r\n        },\r\n        breathMarkComma: {\r\n            x_min: -1.359375,\r\n            x_max: 193.28125,\r\n            ha: 197,\r\n            o: 'm 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 ',\r\n        },\r\n        breathMarkUpbow: {\r\n            x_min: -170.140625,\r\n            x_max: 168.78125,\r\n            ha: 172,\r\n            o: 'm -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 ',\r\n        },\r\n        caesura: {\r\n            x_min: 0,\r\n            x_max: 622.03125,\r\n            ha: 635,\r\n            o: 'm 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 ',\r\n        },\r\n        caesuraCurved: {\r\n            x_min: 0,\r\n            x_max: 503.609375,\r\n            ha: 514,\r\n            o: 'm 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 ',\r\n        },\r\n        restMaxima: {\r\n            x_min: 0,\r\n            x_max: 464.140625,\r\n            ha: 474,\r\n            o: 'm 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 ',\r\n        },\r\n        restDoubleWhole: {\r\n            x_min: 0,\r\n            x_max: 386.5625,\r\n            ha: 394,\r\n            o: 'm 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 ',\r\n        },\r\n        restWhole: {\r\n            x_min: 0,\r\n            x_max: 447.8125,\r\n            ha: 457,\r\n            o: 'm 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 ',\r\n        },\r\n        restHalf: {\r\n            x_min: 0,\r\n            x_max: 447.8125,\r\n            ha: 457,\r\n            o: 'm 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 ',\r\n        },\r\n        restQuarter: {\r\n            x_min: 0,\r\n            x_max: 300.8125,\r\n            ha: 307,\r\n            o: 'm 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 ',\r\n        },\r\n        rest8th: {\r\n            x_min: 0,\r\n            x_max: 349.8125,\r\n            ha: 357,\r\n            o: 'm 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 ',\r\n        },\r\n        rest16th: {\r\n            x_min: 0,\r\n            x_max: 450.53125,\r\n            ha: 460,\r\n            o: 'm 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 ',\r\n        },\r\n        rest32nd: {\r\n            x_min: 0,\r\n            x_max: 551.25,\r\n            ha: 563,\r\n            o: 'm 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 ',\r\n        },\r\n        rest64th: {\r\n            x_min: -1.359375,\r\n            x_max: 651.96875,\r\n            ha: 665,\r\n            o: 'm 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 ',\r\n        },\r\n        rest128th: {\r\n            x_min: -1.359375,\r\n            x_max: 752.703125,\r\n            ha: 768,\r\n            o: 'm 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 ',\r\n        },\r\n        dynamicPiano: {\r\n            x_min: -53.078125,\r\n            x_max: 513.140625,\r\n            ha: 485,\r\n            o: 'm 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 ',\r\n        },\r\n        dynamicMezzo: {\r\n            x_min: 46.28125,\r\n            x_max: 669.671875,\r\n            ha: 563,\r\n            o: 'm 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 ',\r\n        },\r\n        dynamicForte: {\r\n            x_min: -118.421875,\r\n            x_max: 597.53125,\r\n            ha: 381,\r\n            o: 'm 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 ',\r\n        },\r\n        dynamicRinforzando: {\r\n            x_min: 78.9375,\r\n            x_max: 485.921875,\r\n            ha: 417,\r\n            o: 'm 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 ',\r\n        },\r\n        dynamicSforzando: {\r\n            x_min: 70.78125,\r\n            x_max: 378.390625,\r\n            ha: 315,\r\n            o: 'm 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 ',\r\n        },\r\n        dynamicZ: {\r\n            x_min: 29.9375,\r\n            x_max: 420.578125,\r\n            ha: 371,\r\n            o: 'm 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 ',\r\n        },\r\n        ornamentTrill: {\r\n            x_min: -340.28125,\r\n            x_max: 338.921875,\r\n            ha: 346,\r\n            o: 'm -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 ',\r\n        },\r\n        ornamentTurn: {\r\n            x_min: -423.3125,\r\n            x_max: 421.9375,\r\n            ha: 431,\r\n            o: 'm -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 ',\r\n        },\r\n        ornamentTurnSlash: {\r\n            x_min: -423.3125,\r\n            x_max: 421.9375,\r\n            ha: 431,\r\n            o: 'm -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 ',\r\n        },\r\n        ornamentMordent: {\r\n            x_min: -402.890625,\r\n            x_max: 401.53125,\r\n            ha: 410,\r\n            o: 'm -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 ',\r\n        },\r\n        ornamentShortTrill: {\r\n            x_min: -402.890625,\r\n            x_max: 401.53125,\r\n            ha: 410,\r\n            o: 'm -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 ',\r\n        },\r\n        ornamentTremblement: {\r\n            x_min: -571.671875,\r\n            x_max: 570.3125,\r\n            ha: 582,\r\n            o: 'm -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 ',\r\n        },\r\n        ornamentPrecompAppoggTrill: {\r\n            x_min: -571.671875,\r\n            x_max: 570.3125,\r\n            ha: 582,\r\n            o: 'm -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 ',\r\n        },\r\n        ornamentPrecompSlideTrillDAnglebert: {\r\n            x_min: -590.71875,\r\n            x_max: 589.359375,\r\n            ha: 601,\r\n            o: 'm -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 ',\r\n        },\r\n        ornamentPrecompSlideTrillBach: {\r\n            x_min: -590.71875,\r\n            x_max: 589.359375,\r\n            ha: 601,\r\n            o: 'm 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 ',\r\n        },\r\n        ornamentPrecompTrillSuffixDandrieu: {\r\n            x_min: -590.71875,\r\n            x_max: 589.359375,\r\n            ha: 601,\r\n            o: 'm 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 ',\r\n        },\r\n        ornamentPrecompDoubleCadenceUpperPrefix: {\r\n            x_min: -597.53125,\r\n            x_max: 596.171875,\r\n            ha: 608,\r\n            o: 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 ',\r\n        },\r\n        ornamentPrecompDoubleCadenceUpperPrefixTurn: {\r\n            x_min: -597.53125,\r\n            x_max: 596.171875,\r\n            ha: 608,\r\n            o: 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 ',\r\n        },\r\n        ornamentPrecompTrillLowerSuffix: {\r\n            x_min: -597.53125,\r\n            x_max: 596.171875,\r\n            ha: 608,\r\n            o: 'm -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 ',\r\n        },\r\n        stringsDownBow: {\r\n            x_min: -228.671875,\r\n            x_max: 227.3125,\r\n            ha: 232,\r\n            o: 'm -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 ',\r\n        },\r\n        stringsUpBow: {\r\n            x_min: -149.71875,\r\n            x_max: 148.359375,\r\n            ha: 151,\r\n            o: 'm -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 ',\r\n        },\r\n        stringsHarmonic: {\r\n            x_min: -122.5,\r\n            x_max: 121.140625,\r\n            ha: 124,\r\n            o: 'm -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 ',\r\n        },\r\n        pluckedSnapPizzicatoAbove: {\r\n            x_min: -149.71875,\r\n            x_max: 148.359375,\r\n            ha: 151,\r\n            o: 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 ',\r\n        },\r\n        pluckedSnapPizzicatoBelow: {\r\n            x_min: -149.71875,\r\n            x_max: 148.359375,\r\n            ha: 151,\r\n            o: 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 ',\r\n        },\r\n        pluckedLeftHandPizzicato: {\r\n            x_min: 0,\r\n            x_max: 319.859375,\r\n            ha: 326,\r\n            o: 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ',\r\n        },\r\n        keyboardPedalPed: {\r\n            x_min: -1.359375,\r\n            x_max: 1064.390625,\r\n            ha: 1086,\r\n            o: 'm 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 ',\r\n        },\r\n        keyboardPedalUp: {\r\n            x_min: -1.359375,\r\n            x_max: 592.078125,\r\n            ha: 604,\r\n            o: 'm 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 ',\r\n        },\r\n        pictChokeCymbal: {\r\n            x_min: 0,\r\n            x_max: 227.3125,\r\n            ha: 232,\r\n            o: 'm 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 ',\r\n        },\r\n        wiggleArpeggiatoUp: {\r\n            x_min: 58.53125,\r\n            x_max: 228.671875,\r\n            ha: 294,\r\n            o: 'm 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 ',\r\n        },\r\n        arrowheadBlackUp: {\r\n            x_min: -10.890625,\r\n            x_max: 299.4375,\r\n            ha: 294,\r\n            o: 'm 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 ',\r\n        },\r\n        arrowheadBlackDown: {\r\n            x_min: -10.890625,\r\n            x_max: 298.078125,\r\n            ha: 294,\r\n            o: 'm 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 ',\r\n        },\r\n        vexAccidentalMicrotonal1: {\r\n            x_min: -171.5,\r\n            x_max: 483.1875,\r\n            ha: 493,\r\n            o: 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 ',\r\n        },\r\n        vexAccidentalMicrotonal2: {\r\n            x_min: -1.359375,\r\n            x_max: 386.5625,\r\n            ha: 394,\r\n            o: 'm 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 ',\r\n        },\r\n        vexWiggleArpeggioUp: {\r\n            x_min: 58.53125,\r\n            x_max: 228.671875,\r\n            ha: 294,\r\n            o: 'm 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 ',\r\n        },\r\n        vexNoteHeadMutedBreve: {\r\n            x_min: 0,\r\n            x_max: 370.21875,\r\n            ha: 378,\r\n            o: 'm 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 ',\r\n        },\r\n    },\r\n    cssFontWeight: 'normal',\r\n    ascender: 1903,\r\n    underlinePosition: -125,\r\n    cssFontStyle: 'normal',\r\n    boundingBox: {\r\n        yMin: -2065.375,\r\n        xMin: -695.53125,\r\n        yMax: 1901.578125,\r\n        xMax: 1159.671875,\r\n    },\r\n    resolution: 1000,\r\n    original_font_information: {\r\n        postscript_name: 'Gonville-18',\r\n        version_string: 'Version 0.1.8904 ',\r\n        vendor_url: '',\r\n        full_font_name: 'Gonville-18',\r\n        font_family_name: 'Gonville-18',\r\n        copyright: 'No copyright is claimed on this font file.',\r\n        description: '',\r\n        trademark: '',\r\n        designer: '',\r\n        designer_url: '',\r\n        unique_font_identifier: 'FontForge 2.0 : Gonville-18 : 17-3-2010',\r\n        license_url: '',\r\n        license_description: '',\r\n        manufacturer_name: '',\r\n        font_sub_family_name: '18',\r\n    },\r\n    descender: -2066,\r\n    fontFamily: 'Gonville-18',\r\n    lineHeight: 4093,\r\n    underlineThickness: 50,\r\n};\r\n","/**\r\n * The Gonville font was created by Simon Tatham.\r\n * https://www.chiark.greenend.org.uk/~sgtatham/gonville/\r\n */\r\nexport const GonvilleMetrics = {\r\n    name: 'Gonville',\r\n    smufl: false,\r\n    stave: {\r\n        padding: 12,\r\n        endPaddingMax: 10,\r\n        endPaddingMin: 5,\r\n        unalignedNotePadding: 10,\r\n    },\r\n    accidental: {\r\n        noteheadAccidentalPadding: 1,\r\n        leftPadding: 2,\r\n        accidentalSpacing: 3,\r\n    },\r\n    clef: {\r\n        default: {\r\n            point: 40,\r\n            width: 26,\r\n        },\r\n        small: {\r\n            point: 32,\r\n            width: 20,\r\n        },\r\n        annotations: {\r\n            '8va': {\r\n                smuflCode: 'timeSig8',\r\n                default: {\r\n                    point: 20,\r\n                    treble: {\r\n                        line: -1.2,\r\n                        shiftX: 11,\r\n                    },\r\n                },\r\n                small: {\r\n                    point: 18,\r\n                    treble: {\r\n                        line: -0.4,\r\n                        shiftX: 8,\r\n                    },\r\n                },\r\n            },\r\n            '8vb': {\r\n                smuflCode: 'timeSig8',\r\n                default: {\r\n                    point: 20,\r\n                    treble: {\r\n                        line: 6.3,\r\n                        shiftX: 10,\r\n                    },\r\n                    bass: {\r\n                        line: 4,\r\n                        shiftX: 1,\r\n                    },\r\n                },\r\n                small: {\r\n                    point: 18,\r\n                    treble: {\r\n                        line: 5.8,\r\n                        shiftX: 6,\r\n                    },\r\n                    bass: {\r\n                        line: 3.5,\r\n                        shiftX: 0.5,\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        // May not need these anymore\r\n        lineCount: {\r\n            '8': { point: 55, shiftY: 14 },\r\n            '7': { point: 47, shiftY: 8 },\r\n            '6': { point: 40, shiftY: 1 },\r\n            '5': { point: 30, shiftY: -6 },\r\n            '4': { point: 23, shiftY: -12 },\r\n        },\r\n    },\r\n    parenthesis: {\r\n        default: {\r\n            point: 39,\r\n            width: 7,\r\n        },\r\n        gracenote: {\r\n            point: (39 * 3) / 5,\r\n            width: 3,\r\n        },\r\n    },\r\n    pedalMarking: {\r\n        up: {\r\n            point: 40,\r\n        },\r\n        down: {\r\n            point: 40,\r\n        },\r\n    },\r\n    // These are for numeric digits, such as in time signatures\r\n    digits: {\r\n        point: 40,\r\n        tupletPoint: 28,\r\n    },\r\n    // articulation: {\r\n    // },\r\n    tremolo: {\r\n        default: {\r\n            point: 25,\r\n            spacing: 4,\r\n            offsetYStemUp: -7,\r\n            offsetYStemDown: 7,\r\n            offsetXStemUp: 9,\r\n            offsetXStemDown: -0.5,\r\n        },\r\n        grace: {\r\n            point: 15,\r\n            spacing: 4,\r\n            offsetYStemUp: -7,\r\n            offsetYStemDown: 7,\r\n            offsetXStemUp: 6.5,\r\n            offsetXStemDown: -0.5,\r\n        },\r\n    },\r\n    staveRepetition: {\r\n        symbolText: {\r\n            offsetX: 12,\r\n            offsetY: 25,\r\n            spacing: 5,\r\n        },\r\n        coda: {\r\n            offsetY: 25,\r\n        },\r\n        segno: {\r\n            offsetY: 0,\r\n        },\r\n    },\r\n    // noteHead: {\r\n    // },\r\n    stem: {\r\n        heightAdjustmentForFlag: -3,\r\n        // These are stem (Y) offsets to the note heads. To shift the\r\n        // noteheads (x-position) themselves, see glyphs.notehead.custom.\r\n        noteHead: {\r\n            noteheadTriangleUpHalf: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadTriangleUpBlack: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadTriangleUpWhole: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXHalf: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXBlack: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXWhole: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadHalf: {\r\n                offsetYBaseStemUp: -1.5,\r\n                offsetYBaseStemDown: 1.5,\r\n            },\r\n            noteheadBlack: {\r\n                offsetYBaseStemUp: -1.5,\r\n                offsetYBaseStemDown: 1.5,\r\n            },\r\n            noteheadSquareWhite: {\r\n                offsetYBaseStemDown: -5,\r\n                offsetYBaseStemUp: 5,\r\n            },\r\n        },\r\n    },\r\n    glyphs: {\r\n        flag: {\r\n            shiftX: -0.08,\r\n            flag8thDown: {\r\n                shiftX: -0.16,\r\n            },\r\n            flag16thDown: {\r\n                shiftX: -0.16,\r\n            },\r\n            flag32ndDown: {\r\n                shiftX: -0.16,\r\n                shiftY: 9,\r\n            },\r\n            flag64thDown: {\r\n                shiftX: -0.16,\r\n                shiftY: 13,\r\n            },\r\n            flag128thDown: {\r\n                shiftX: -0.16,\r\n                shiftY: 22,\r\n            },\r\n            flag32ndUp: {\r\n                shiftY: -9,\r\n            },\r\n            flag64thUp: {\r\n                shiftY: -13,\r\n            },\r\n            flag128thUp: {\r\n                shiftY: -22,\r\n            },\r\n        },\r\n        stringNumber: {\r\n            verticalPadding: 8,\r\n            stemPadding: 2,\r\n            leftPadding: 5,\r\n            rightPadding: 6,\r\n        },\r\n        textNote: {\r\n            point: 40,\r\n            default: {},\r\n            ornamentTrill: {\r\n                shiftX: -5,\r\n                shiftY: 4,\r\n            },\r\n        },\r\n        noteHead: {\r\n            minPadding: 2,\r\n            custom: {\r\n                noteheadDiamondWholeStemUp: {\r\n                    shiftX: -6,\r\n                },\r\n                noteheadCircleXStemUp: {\r\n                    shiftX: -1.5,\r\n                },\r\n                noteheadXWholeStemUp: {\r\n                    shiftX: -5,\r\n                },\r\n                noteheadTriangleUpWholeStemUp: {\r\n                    shiftX: -6,\r\n                },\r\n            },\r\n        },\r\n        chordSymbol: {\r\n            global: {\r\n                superscriptOffset: -400,\r\n                subscriptOffset: 300,\r\n                kerningOffset: -250,\r\n                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\r\n                upperKerningText: ['A', 'L'],\r\n                spacing: 100,\r\n                superSubRatio: 0.66,\r\n            },\r\n            csymDiminished: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 506,\r\n                yOffset: 0,\r\n            },\r\n            csymHalfDiminished: {\r\n                scale: 0.8,\r\n                leftSideBearing: -32,\r\n                advanceWidth: 506,\r\n                yOffset: 0,\r\n            },\r\n            csymAugmented: {\r\n                scale: 1,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 530,\r\n                yOffset: 0,\r\n            },\r\n            csymParensLeftTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 155,\r\n                yOffset: 250,\r\n            },\r\n            csymParensRightTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: -40,\r\n                advanceWidth: 189,\r\n                yOffset: 250,\r\n            },\r\n            csymBracketLeftTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 328,\r\n                yOffset: 0,\r\n            },\r\n            csymBracketRightTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 1,\r\n                advanceWidth: 600,\r\n                yOffset: 0,\r\n            },\r\n            csymParensLeftVeryTall: {\r\n                scale: 0.9,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 121,\r\n                yOffset: 350,\r\n            },\r\n            csymParensRightVeryTall: {\r\n                scale: 0.9,\r\n                leftSideBearing: 50,\r\n                advanceWidth: 111,\r\n                yOffset: 350,\r\n            },\r\n            csymDiagonalArrangementSlash: {\r\n                scale: 0.6,\r\n                leftSideBearing: -1,\r\n                advanceWidth: 990,\r\n                yOffset: 0,\r\n            },\r\n            csymMinor: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 482,\r\n                yOffset: 0,\r\n            },\r\n            csymMajorSeventh: {\r\n                scale: 0.9,\r\n                leftSideBearing: 200,\r\n                yOffset: 0,\r\n                advanceWidth: 600,\r\n            },\r\n            accidentalSharp: {\r\n                scale: 0.75,\r\n                leftSideBearing: 40,\r\n                advanceWidth: 250,\r\n                yOffset: -402,\r\n            },\r\n            accidentalFlat: {\r\n                scale: 0.95,\r\n                leftSideBearing: -50,\r\n                advanceWidth: 208,\r\n                yOffset: -184,\r\n            },\r\n        },\r\n        jazzOrnaments: {\r\n            brassScoop: {\r\n                scale: 1.0,\r\n                xOffset: -12,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 15,\r\n            },\r\n            brassDoitMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 22,\r\n            },\r\n            brassFallLipShort: {\r\n                scale: 1.0,\r\n                xOffset: 17,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 15,\r\n            },\r\n            brassLiftMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 5,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassFallRoughMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 28,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassBend: {\r\n                scale: 1.0,\r\n                xOffset: 2,\r\n                yOffset: -8,\r\n                stemUpYOffset: 24,\r\n                reportedWidth: 5,\r\n            },\r\n            brassMuteClosed: {\r\n                scale: 1.0,\r\n                xOffset: 3,\r\n                yOffset: -9,\r\n                stemUpYOffset: 24,\r\n                reportedWidth: 5,\r\n            },\r\n            brassMuteOpen: {\r\n                scale: 1.0,\r\n                xOffset: 3,\r\n                yOffset: -7,\r\n                stemUpYOffset: 25,\r\n                reportedWidth: 5,\r\n            },\r\n            brassFlip: {\r\n                scale: 1.0,\r\n                xOffset: 10,\r\n                yOffset: -4,\r\n                stemUpYOffset: 7,\r\n                reportedWidth: 5,\r\n            },\r\n            brassJazzTurn: {\r\n                scale: 1.0,\r\n                xOffset: 3,\r\n                yOffset: -4,\r\n                stemUpYOffset: 10,\r\n                reportedWidth: 28,\r\n            },\r\n            brassSmear: {\r\n                scale: 1.0,\r\n                xOffset: 10,\r\n                yOffset: -4,\r\n                stemUpYOffset: 9,\r\n                reportedWidth: 5,\r\n            },\r\n        },\r\n        tremolo: {\r\n            default: {\r\n                shiftY: -10,\r\n            },\r\n            grace: {\r\n                shiftY: -5,\r\n            },\r\n        },\r\n        tuplet: {\r\n            noteHeadOffset: 20,\r\n            stemOffset: 10,\r\n            bottomLine: 4,\r\n            topModifierOffset: 15,\r\n        },\r\n    },\r\n};\r\n","export const LelandFont = {\r\n    glyphs: {\r\n        bracketTop: {\r\n            x_min: 0,\r\n            x_max: 491,\r\n            y_min: 0,\r\n            y_max: 279,\r\n            ha: 279,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 491,\r\n            o: 'm 697 399 b 687 402 694 400 690 402 b 671 395 681 402 674 400 b 249 168 668 390 524 168 l 20 168 b 0 150 9 168 0 161 l 0 20 l 0 0 l 176 0 b 706 374 619 0 704 370 b 707 382 706 376 707 379 b 697 399 707 389 703 395 z',\r\n        },\r\n        bracketBottom: {\r\n            x_min: 0,\r\n            x_max: 491,\r\n            y_min: -279,\r\n            y_max: 0,\r\n            ha: 279,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 491,\r\n            o: 'm 697 -399 b 707 -382 703 -395 707 -389 b 706 -374 707 -379 706 -376 b 176 0 704 -370 619 0 l 0 0 l 0 -20 l 0 -150 b 20 -168 0 -161 9 -168 l 249 -168 b 671 -395 524 -168 668 -390 b 687 -402 674 -400 681 -402 b 697 -399 690 -402 694 -400 z',\r\n        },\r\n        segno: {\r\n            x_min: 0,\r\n            x_max: 654,\r\n            y_min: 0,\r\n            y_max: 869,\r\n            ha: 869,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 654,\r\n            o: 'm 821 549 l 546 690 l 838 1207 b 841 1215 840 1210 841 1212 b 832 1233 841 1221 837 1230 l 809 1248 b 798 1251 806 1250 801 1251 b 780 1241 792 1251 783 1247 l 487 721 l 217 860 b 99 995 147 897 99 924 b 236 1165 99 1120 179 1165 b 343 1073 288 1165 325 1130 b 454 988 357 1022 405 988 b 477 991 461 988 469 989 b 541 1076 526 1002 541 1045 b 540 1089 541 1080 541 1084 b 294 1225 534 1116 514 1225 b 0 939 72 1225 0 1053 b 125 706 0 825 42 753 l 397 563 l 104 45 b 102 35 102 42 102 37 b 111 19 102 29 107 22 l 132 3 b 144 0 135 1 141 0 l 148 0 b 161 10 153 1 158 6 l 456 531 l 704 403 b 842 256 780 361 842 318 b 706 86 842 131 763 86 b 599 177 654 86 616 120 b 488 262 585 228 537 262 b 465 259 481 262 472 261 b 402 177 418 248 402 206 b 403 163 402 171 402 167 b 649 26 409 135 429 26 b 942 312 871 26 942 199 b 821 549 942 426 901 507 z m 52 444 b 118 416 69 426 95 416 b 183 444 141 416 166 426 b 210 508 200 461 210 485 b 183 573 210 531 200 556 b 118 600 166 590 141 600 b 52 573 95 600 69 590 b 24 508 35 556 24 531 b 52 444 24 485 35 461 z m 760 730 b 825 703 778 713 802 703 b 890 730 848 703 873 713 b 917 795 907 747 917 772 b 890 861 917 818 907 844 b 825 888 873 878 848 888 b 760 861 802 888 778 878 b 733 795 743 844 733 818 b 760 730 733 772 743 747 z',\r\n        },\r\n        coda: {\r\n            x_min: 0,\r\n            x_max: 745,\r\n            y_min: -113,\r\n            y_max: 735,\r\n            ha: 848,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 745,\r\n            o: 'm 1054 467 l 924 467 b 560 896 916 697 757 881 l 560 1038 b 540 1058 560 1050 552 1058 l 524 1058 b 505 1038 513 1058 505 1050 l 505 896 b 150 467 311 877 158 693 l 20 467 b 0 446 9 467 0 458 l 0 432 b 20 412 0 420 9 412 l 150 412 b 505 0 166 193 317 17 l 505 -143 b 524 -163 505 -154 513 -163 l 540 -163 b 560 -143 552 -163 560 -154 l 560 0 b 923 412 753 13 907 190 l 1054 412 b 1073 432 1066 412 1073 420 l 1073 446 b 1054 467 1073 458 1066 467 z m 773 467 l 560 467 l 560 852 b 773 467 716 837 770 671 z m 505 851 l 505 467 l 301 467 b 505 851 304 668 357 831 z m 301 412 l 505 412 l 505 45 b 301 412 366 65 307 219 z m 560 45 l 560 412 l 772 412 b 560 45 766 215 706 60 z',\r\n        },\r\n        gClef: {\r\n            x_min: -20,\r\n            x_max: 639.9766931127763,\r\n            y_min: -667,\r\n            y_max: 1112.099609375,\r\n            ha: 1779.099609375,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 640,\r\n            o: 'm 912 85 b 845 233 895 163 857 218 b 674 355 799 294 742 335 b 551 366 629 367 586 369 b 509 616 536 453 522 538 b 672 850 587 705 639 789 b 739 1014 722 945 739 1011 b 754 1318 764 1089 769 1200 b 675 1570 739 1427 709 1524 b 630 1601 660 1591 645 1601 b 535 1544 613 1601 576 1584 b 418 1369 502 1512 455 1456 b 377 1034 375 1268 372 1131 b 398 847 382 930 398 848 b 409 787 398 846 402 824 b 398 777 405 784 402 781 b 346 726 383 763 366 746 b 306 687 334 714 320 701 b 0 117 184 570 0 392 b 39 -72 0 49 13 -15 b 137 -213 61 -124 95 -172 b 502 -365 248 -322 401 -368 b 617 -355 545 -364 583 -361 b 660 -671 643 -493 660 -594 b 581 -862 661 -765 637 -822 b 461 -902 546 -887 506 -900 b 371 -892 424 -904 391 -897 l 370 -892 b 366 -887 370 -892 366 -890 b 371 -884 366 -885 371 -884 l 371 -884 b 484 -813 399 -878 450 -860 b 496 -653 510 -776 523 -710 b 363 -570 480 -619 444 -576 b 266 -591 327 -567 295 -574 b 203 -659 240 -607 218 -631 b 219 -865 168 -727 174 -810 b 407 -959 262 -917 329 -950 b 444 -960 419 -960 431 -960 b 622 -911 507 -960 571 -943 b 715 -736 675 -874 705 -817 b 697 -468 723 -669 718 -584 b 675 -340 692 -438 684 -394 b 872 -177 758 -312 818 -261 b 912 85 919 -94 933 -6 z m 420 -293 b 235 -189 353 -275 289 -239 b 168 -91 216 -171 189 -140 b 139 56 148 -45 139 4 b 195 262 140 123 159 193 b 390 498 237 342 303 422 b 450 554 411 517 431 535 b 485 355 461 492 472 425 b 317 210 430 336 361 291 b 278 -15 266 115 268 35 b 378 -163 292 -79 328 -133 b 477 -194 391 -171 451 -202 b 488 -184 483 -192 486 -189 b 459 -144 496 -167 481 -158 b 430 -125 450 -139 440 -133 b 377 38 382 -89 361 -25 b 430 128 385 73 403 104 b 518 176 454 150 483 166 b 600 -267 547 14 577 -147 b 606 -296 602 -277 604 -287 b 420 -293 543 -310 480 -309 z m 583 185 b 806 15 732 192 793 85 b 790 -146 813 -21 813 -85 b 664 -280 774 -192 738 -250 b 661 -261 663 -274 662 -268 b 583 185 639 -135 611 23 z m 477 1207 b 571 1361 503 1289 542 1336 b 633 1393 596 1383 620 1393 b 638 1392 635 1393 637 1393 b 659 1370 645 1390 653 1382 b 663 1147 693 1308 682 1211 b 470 850 639 1070 597 989 b 464 896 468 866 466 881 b 477 1207 446 1015 450 1120 z m -29 3 z',\r\n        },\r\n        cClef: {\r\n            x_min: 0,\r\n            x_max: 627,\r\n            y_min: -480,\r\n            y_max: 482,\r\n            ha: 962,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 627,\r\n            o: 'm 122 675 l 19 675 b 0 657 9 675 0 667 l 0 -654 b 19 -672 0 -664 9 -672 l 122 -672 b 141 -654 132 -672 141 -664 l 141 657 b 122 675 141 667 132 675 z m 641 -58 l 619 -58 b 505 -95 586 -58 562 -60 b 426 1 505 -95 474 -32 b 505 98 474 35 505 98 b 619 60 562 63 586 60 l 641 60 b 903 379 816 60 903 223 b 580 694 903 580 755 694 b 356 615 422 694 356 615 b 318 517 330 583 318 549 b 340 445 318 491 325 467 b 438 400 360 416 400 400 b 505 422 464 400 488 408 b 546 510 530 444 546 475 b 530 569 546 530 540 550 b 441 616 507 611 464 616 b 425 615 432 616 425 615 b 547 651 458 638 503 651 b 654 621 588 651 626 641 b 723 400 704 583 723 504 b 593 128 723 289 720 128 b 438 279 467 128 438 279 b 418 300 438 279 438 300 b 396 279 397 300 396 279 b 346 117 396 279 384 206 b 264 29 323 63 288 39 l 264 657 b 246 675 264 667 256 675 b 228 657 236 675 228 667 l 228 -654 b 246 -672 228 -664 236 -672 b 264 -654 256 -672 264 -664 l 264 -26 b 346 -114 288 -36 323 -60 b 396 -278 384 -203 396 -278 b 418 -297 396 -278 397 -297 b 438 -278 438 -297 438 -278 b 593 -125 438 -278 467 -125 b 723 -397 720 -125 723 -287 b 654 -618 723 -501 704 -580 b 547 -648 626 -638 588 -648 b 425 -612 503 -648 458 -635 b 441 -613 425 -612 432 -613 b 530 -566 464 -613 507 -608 b 546 -507 540 -547 546 -527 b 505 -419 546 -472 530 -441 b 438 -397 488 -405 464 -397 b 340 -442 400 -397 360 -413 b 318 -514 325 -464 318 -488 b 356 -612 318 -546 330 -580 b 580 -691 356 -612 422 -691 b 903 -376 755 -691 903 -577 b 641 -58 903 -220 816 -58 z',\r\n        },\r\n        fClef: {\r\n            x_min: 0.32179930795847755,\r\n            x_max: 664,\r\n            y_min: -617,\r\n            y_max: 251,\r\n            ha: 868,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 663,\r\n            o: 'm 366 361 b 167 298 256 361 168 298 b 37 112 84 236 50 163 b 27 36 30 86 27 60 b 46 -58 27 1 33 -30 b 140 -138 63 -96 96 -124 b 194 -147 157 -144 176 -147 b 287 -122 226 -147 259 -138 b 359 10 331 -98 359 -46 b 289 134 359 60 333 107 b 206 160 259 154 230 160 b 160 153 189 160 173 157 b 109 122 145 147 121 132 b 147 215 114 150 131 192 b 219 279 163 238 194 266 b 351 308 255 300 301 308 b 570 -52 498 308 570 190 b 477 -399 570 -186 520 -314 b 310 -635 429 -494 366 -585 b 17 -837 160 -772 19 -837 b 1 -871 17 -837 -4 -850 b 27 -888 6 -886 19 -888 b 35 -887 29 -888 33 -887 b 331 -717 36 -887 200 -819 b 528 -544 405 -664 471 -606 b 661 -367 580 -488 625 -428 b 760 -50 724 -259 760 -147 b 670 239 760 69 729 168 b 366 361 602 320 500 361 z m 818 179 b 887 107 818 138 850 107 b 956 179 924 107 956 138 b 887 252 956 219 924 252 b 818 179 850 252 818 219 z m 818 -177 b 887 -251 818 -217 850 -251 b 956 -177 924 -251 956 -217 b 887 -104 956 -137 924 -104 b 818 -177 850 -104 818 -137 z',\r\n        },\r\n        unpitchedPercussionClef1: {\r\n            x_min: 0,\r\n            x_max: 352,\r\n            y_min: -252,\r\n            y_max: 252,\r\n            ha: 504,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 352,\r\n            o: 'm 177 363 l 19 363 b 0 344 9 363 0 354 l 0 -344 b 19 -363 0 -354 9 -363 l 177 -363 b 196 -344 187 -363 196 -354 l 196 344 b 177 363 196 354 187 363 z m 488 363 l 330 363 b 311 344 320 363 311 354 l 311 -344 b 330 -363 311 -354 320 -363 l 488 -363 b 507 -344 498 -363 507 -354 l 507 344 b 488 363 507 354 498 363 z',\r\n        },\r\n        '6stringTabClef': {\r\n            x_min: 0,\r\n            x_max: 439,\r\n            y_min: -743,\r\n            y_max: 746,\r\n            ha: 1489,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 439,\r\n            o: 'm 583 1074 l 52 1074 l 52 958 l 249 958 l 249 419 l 387 419 l 387 958 l 583 958 z m 238 334 l 0 -333 l 145 -333 l 192 -196 l 436 -196 l 481 -333 l 632 -333 l 396 334 z m 229 -81 l 315 181 l 400 -81 z m 566 -474 b 393 -402 531 -428 475 -403 l 71 -402 l 71 -1070 l 372 -1070 l 374 -1070 b 465 -1061 405 -1070 435 -1067 b 541 -1027 494 -1056 520 -1043 b 588 -975 560 -1012 575 -995 b 618 -868 608 -943 618 -907 b 592 -770 618 -829 609 -798 b 514 -711 575 -743 549 -724 b 566 -674 537 -700 554 -688 b 596 -576 586 -649 596 -616 b 566 -474 596 -536 586 -503 z m 203 -518 l 348 -518 b 428 -528 380 -518 408 -521 b 464 -590 452 -539 464 -559 b 436 -649 464 -619 455 -638 b 366 -665 418 -661 395 -665 l 203 -665 z m 203 -776 l 367 -776 b 435 -788 396 -776 419 -780 b 477 -858 464 -801 477 -824 b 433 -942 477 -900 462 -927 b 366 -953 418 -949 395 -953 l 203 -953 z',\r\n        },\r\n        timeSig0: {\r\n            x_min: 15,\r\n            x_max: 389,\r\n            y_min: -254,\r\n            y_max: 255,\r\n            ha: 509,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 404,\r\n            o: 'm 291 367 b 22 0 138 367 22 209 b 291 -366 22 -209 138 -366 b 560 0 444 -366 560 -209 b 291 367 560 209 444 367 z m 376 200 l 376 -200 b 291 -308 376 -252 353 -308 b 206 -200 229 -308 206 -252 l 206 200 b 291 308 206 252 229 308 b 376 200 353 308 376 252 z',\r\n        },\r\n        timeSig1: {\r\n            x_min: 15,\r\n            x_max: 336,\r\n            y_min: -243,\r\n            y_max: 245,\r\n            ha: 488,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 351,\r\n            o: 'm 468 -284 l 359 -284 l 359 336 b 341 353 359 346 351 353 l 199 353 b 190 350 196 353 193 351 l 184 344 l 23 65 b 22 56 22 62 22 59 b 30 42 22 50 26 45 l 58 26 b 66 23 60 24 63 23 b 81 32 72 23 78 27 l 183 207 l 183 -284 l 73 -284 b 56 -301 63 -284 56 -291 l 56 -333 b 73 -350 56 -343 63 -350 l 468 -350 b 484 -333 478 -350 484 -343 l 484 -301 b 468 -284 484 -291 478 -284 z',\r\n        },\r\n        timeSig2: {\r\n            x_min: 15,\r\n            x_max: 377,\r\n            y_min: -243,\r\n            y_max: 245,\r\n            ha: 488,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 392,\r\n            o: 'm 492 -56 b 382 -192 481 -88 452 -192 b 190 -134 288 -192 268 -134 b 153 -138 179 -134 167 -135 b 341 -36 153 -138 189 -84 b 533 173 494 12 533 86 b 288 353 533 233 505 353 b 30 156 71 353 30 222 b 138 49 30 96 79 49 b 245 156 197 49 245 96 b 179 255 245 196 216 240 b 168 271 174 256 168 264 b 202 297 168 279 176 289 b 251 304 209 300 229 304 b 311 288 271 304 294 300 b 348 180 338 271 348 245 b 65 -150 348 12 148 -24 b 22 -278 65 -150 22 -210 b 73 -350 22 -346 56 -350 b 121 -305 96 -350 121 -331 b 117 -287 121 -300 120 -294 b 105 -239 108 -266 105 -251 b 107 -226 105 -235 105 -230 b 154 -203 108 -217 120 -203 b 238 -289 196 -203 212 -252 b 350 -350 264 -327 304 -350 b 484 -264 396 -350 458 -317 b 543 -63 510 -210 543 -102 b 518 -36 543 -45 531 -36 b 492 -56 508 -36 498 -42 z',\r\n        },\r\n        timeSig3: {\r\n            x_min: 15.000407235939647,\r\n            x_max: 364.171875,\r\n            y_min: -244,\r\n            y_max: 244,\r\n            ha: 488,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 379,\r\n            o: 'm 389 23 l 392 23 b 514 168 507 68 514 143 l 514 176 b 262 351 514 189 510 351 b 22 176 15 351 22 176 l 23 176 l 22 173 b 115 81 22 121 64 81 b 208 173 167 81 208 121 b 136 264 208 215 176 255 l 140 268 b 215 289 160 282 187 289 b 340 176 275 289 340 253 b 255 69 340 85 272 72 b 140 60 238 66 157 60 b 121 40 123 60 121 40 l 121 12 b 140 -6 121 12 124 -4 b 244 -14 164 -7 198 -7 b 340 -167 307 -23 340 -66 b 215 -289 340 -264 275 -289 b 121 -266 174 -289 137 -278 b 208 -174 169 -264 208 -222 b 115 -81 208 -122 167 -81 b 22 -174 64 -81 22 -122 b 78 -298 22 -174 15 -239 b 236 -351 134 -350 205 -351 b 524 -147 375 -351 524 -304 b 389 23 524 -42 452 3 z',\r\n        },\r\n        timeSig4: {\r\n            x_min: 13.762786846608147,\r\n            x_max: 442,\r\n            y_min: -248,\r\n            y_max: 248.90506713461872,\r\n            ha: 496.9050671346187,\r\n            leftSideBearing: 13,\r\n            advanceWidth: 457,\r\n            o: 'm 52 -182 l 299 -182 l 299 -289 l 181 -289 b 160 -309 169 -289 160 -298 l 160 -337 b 181 -357 160 -348 169 -357 l 616 -357 b 636 -337 627 -357 636 -348 l 636 -309 b 616 -289 636 -298 627 -289 l 487 -289 l 487 -182 l 616 -182 b 636 -162 627 -182 636 -173 l 636 -134 b 616 -114 636 -123 627 -114 l 487 -114 l 487 116 b 476 134 487 124 483 130 l 459 143 b 436 139 451 146 442 145 l 306 19 b 299 4 301 16 299 10 l 299 -114 l 133 -114 b 464 286 133 -114 293 59 b 466 321 476 303 469 318 l 435 353 b 421 358 431 356 426 358 b 207 358 412 358 217 358 b 187 341 196 359 188 350 b 142 118 187 341 180 235 b 24 -123 105 1 62 -71 b 22 -148 24 -123 16 -137 b 36 -175 27 -159 36 -175 b 52 -182 36 -175 39 -182 z',\r\n        },\r\n        timeSig5: {\r\n            x_min: 15,\r\n            x_max: 362,\r\n            y_min: -244,\r\n            y_max: 246,\r\n            ha: 490,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 377,\r\n            o: 'm 39 314 b 46 170 39 314 46 245 l 46 151 b 39 -24 45 71 39 -24 b 49 -48 39 -24 36 -45 b 99 -59 62 -50 92 -58 b 121 -49 108 -60 117 -60 b 235 45 128 -30 144 45 b 356 -112 337 45 356 -43 b 238 -292 356 -184 333 -288 l 226 -292 b 166 -282 193 -292 174 -288 b 164 -264 157 -279 156 -269 b 222 -168 177 -255 222 -239 b 117 -71 222 -98 173 -71 b 22 -171 60 -71 22 -122 b 111 -318 22 -220 36 -275 b 252 -351 147 -338 199 -351 b 456 -275 325 -351 405 -328 b 521 -109 503 -228 521 -167 b 433 79 521 -32 487 43 b 271 124 397 104 336 124 b 131 84 223 124 173 112 b 125 82 130 82 127 82 b 115 92 120 82 115 86 l 115 183 b 131 199 115 192 122 199 l 132 199 b 252 192 154 197 202 192 b 372 209 295 192 340 196 b 474 320 439 236 462 289 b 477 334 475 324 477 330 b 451 354 477 346 469 354 b 431 351 445 354 439 353 b 252 328 360 334 305 328 b 88 343 200 328 150 334 b 71 344 88 343 81 344 b 39 314 55 344 36 340 z',\r\n        },\r\n        timeSig6: {\r\n            x_min: 15,\r\n            x_max: 387,\r\n            y_min: -244,\r\n            y_max: 245,\r\n            ha: 489,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 402,\r\n            o: 'm 356 69 b 216 22 268 69 236 43 b 209 98 212 52 209 75 b 216 167 209 121 212 141 b 338 287 225 220 261 287 b 410 259 374 287 396 275 b 356 174 380 246 356 207 b 448 82 356 122 396 82 b 541 174 500 82 541 122 l 541 177 l 541 179 b 533 225 541 192 539 213 b 310 353 514 276 454 353 b 58 163 180 353 86 229 b 22 -23 43 128 22 58 b 131 -285 22 -111 46 -210 b 318 -351 215 -348 268 -351 b 557 -125 369 -351 557 -292 b 356 69 557 16 446 69 z m 302 -291 b 216 -145 255 -291 216 -226 b 302 1 216 -65 255 1 b 390 -145 350 1 390 -65 b 302 -291 390 -226 350 -291 z',\r\n        },\r\n        timeSig7: {\r\n            x_min: 15,\r\n            x_max: 366.0948158519084,\r\n            y_min: -250.0148966199921,\r\n            y_max: 251,\r\n            ha: 501.0148966199921,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 381,\r\n            o: 'm 526 341 b 512 361 526 358 512 361 l 484 361 b 467 341 468 361 467 341 b 407 228 467 341 468 228 b 235 352 346 228 329 352 b 87 252 146 352 92 260 l 87 321 b 71 337 87 330 80 337 l 38 337 b 22 321 29 337 22 330 l 22 55 b 38 39 22 46 29 39 l 71 39 b 87 55 80 39 87 46 l 87 101 b 159 179 87 134 109 179 b 328 123 209 179 217 123 b 426 142 328 123 410 126 b 234 -177 426 142 285 -104 b 160 -332 163 -279 160 -332 b 181 -360 159 -340 158 -360 b 264 -351 203 -360 218 -354 b 370 -360 310 -348 358 -360 b 391 -352 382 -360 387 -355 b 398 -345 393 -350 396 -347 b 405 -327 402 -341 408 -336 b 408 -130 404 -322 384 -216 b 503 151 426 -62 471 60 b 526 341 535 239 526 341 z',\r\n        },\r\n        timeSig8: {\r\n            x_min: 15,\r\n            x_max: 393,\r\n            y_min: -248,\r\n            y_max: 246,\r\n            ha: 494,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 408,\r\n            o: 'm 466 26 b 547 166 514 62 547 108 b 294 354 547 270 434 354 b 40 166 154 354 40 270 b 123 13 40 108 54 56 b 22 -146 57 -25 22 -78 b 294 -357 22 -263 143 -357 b 566 -146 444 -357 566 -263 b 466 26 566 -78 541 -12 z m 294 -276 b 122 -146 202 -276 122 -226 b 197 -26 122 -49 197 -26 b 435 -187 295 -59 435 -108 b 294 -276 435 -226 385 -276 z m 386 65 b 180 209 288 96 180 143 b 294 288 180 265 232 288 b 444 180 382 288 444 246 b 386 65 444 111 412 78 z',\r\n        },\r\n        timeSig9: {\r\n            x_min: 15,\r\n            x_max: 387,\r\n            y_min: -244,\r\n            y_max: 245,\r\n            ha: 489,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 402,\r\n            o: 'm 223 -68 b 363 -20 311 -68 343 -42 b 370 -96 367 -50 370 -73 b 363 -166 370 -120 367 -140 b 240 -285 354 -219 318 -285 b 168 -258 204 -285 183 -274 b 223 -173 199 -245 223 -206 b 131 -81 223 -121 183 -81 b 37 -173 79 -81 37 -121 l 37 -176 l 37 -177 b 46 -223 37 -190 40 -212 b 269 -351 65 -275 125 -351 b 521 -161 399 -351 492 -228 b 557 24 536 -127 557 -56 b 448 287 557 112 533 212 b 261 353 364 350 311 353 b 22 127 210 353 22 294 b 223 -68 22 -14 132 -68 z m 276 294 b 363 147 324 294 363 228 b 276 1 363 66 324 1 b 189 147 229 1 189 66 b 276 294 189 228 229 294 z',\r\n        },\r\n        timeSigCommon: {\r\n            x_min: 0,\r\n            x_max: 463,\r\n            y_min: -256,\r\n            y_max: 258,\r\n            ha: 514,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 463,\r\n            o: 'm 468 258 b 406 147 432 235 406 193 b 408 130 406 141 406 135 b 521 17 415 71 462 24 l 537 17 b 667 147 609 17 667 75 l 667 156 b 664 177 667 161 665 171 b 350 372 651 239 595 372 b 0 17 36 372 0 111 b 382 -369 0 -154 22 -369 b 641 -131 524 -369 635 -285 b 629 -120 641 -124 636 -120 l 611 -120 b 599 -131 605 -120 599 -125 b 382 -323 593 -251 508 -323 b 196 -128 256 -323 196 -255 l 196 147 b 356 320 196 228 228 320 b 469 271 423 320 454 295 b 468 258 472 265 472 261 z',\r\n        },\r\n        timeSigCutCommon: {\r\n            x_min: 0,\r\n            x_max: 463,\r\n            y_min: -376,\r\n            y_max: 388,\r\n            ha: 764,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 463,\r\n            o: 'm 629 -120 l 611 -120 b 599 -131 605 -120 599 -125 b 382 -323 593 -251 508 -323 l 369 -323 l 369 320 b 469 269 428 317 455 292 b 468 258 472 264 472 261 b 406 147 432 235 406 193 b 408 130 406 141 406 135 b 523 17 415 71 464 24 l 537 17 b 667 147 609 17 667 75 l 667 156 b 664 177 667 161 665 171 b 369 370 651 236 598 364 l 369 543 b 353 559 369 552 361 559 l 314 559 b 298 543 305 559 298 552 l 298 369 b 0 17 32 341 0 105 b 298 -364 0 -140 17 -334 l 298 -526 b 314 -541 298 -534 305 -541 l 353 -541 b 369 -526 361 -541 369 -534 l 369 -369 l 382 -369 b 641 -131 524 -369 635 -285 b 629 -120 641 -124 636 -120 z m 196 -128 l 196 147 b 298 312 196 215 216 289 l 298 -310 b 196 -128 229 -285 196 -223 z',\r\n        },\r\n        noteheadDoubleWhole: {\r\n            x_min: 0,\r\n            x_max: 383,\r\n            y_min: -180,\r\n            y_max: 177,\r\n            ha: 357,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 383,\r\n            o: 'm 531 255 l 518 255 b 500 235 507 255 500 246 l 500 118 b 276 196 459 163 389 196 b 53 118 164 196 94 163 l 53 235 b 33 255 53 246 45 255 l 20 255 b 0 235 9 255 0 246 l 0 -232 b 20 -252 0 -243 9 -252 l 33 -252 b 53 -232 45 -252 53 -243 l 53 -115 b 276 -193 94 -160 164 -193 b 500 -115 389 -193 459 -160 l 500 -239 b 518 -259 500 -251 507 -259 l 531 -259 b 552 -239 543 -259 552 -251 l 552 235 b 531 255 552 246 543 255 z m 156 65 b 154 79 154 69 154 75 b 164 115 154 92 158 105 b 213 144 174 130 190 140 b 279 151 230 147 243 151 l 281 151 b 373 43 338 151 357 98 l 377 29 b 395 -63 389 -7 395 -39 b 384 -109 395 -82 390 -98 b 338 -141 376 -125 363 -135 b 304 -145 325 -144 304 -145 b 285 -147 297 -145 291 -147 b 190 -68 240 -147 210 -130 b 156 65 173 -14 168 1 z',\r\n        },\r\n        noteheadWhole: {\r\n            x_min: 0,\r\n            x_max: 373,\r\n            y_min: -134,\r\n            y_max: 136,\r\n            ha: 270,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 373,\r\n            o: 'm 269 196 b 0 1 71 196 0 95 b 269 -193 0 -92 71 -193 b 537 1 468 -193 537 -92 b 269 196 537 95 468 196 z m 150 65 b 148 82 148 71 148 76 b 157 115 148 94 151 105 b 206 144 167 130 184 140 b 272 151 225 148 235 151 l 274 151 b 366 43 331 151 350 98 l 370 29 b 387 -65 382 -9 387 -40 b 379 -109 387 -82 384 -98 b 331 -141 370 -125 356 -135 b 297 -145 318 -144 297 -145 b 278 -147 289 -145 284 -147 b 183 -68 232 -147 203 -130 b 150 65 166 -14 163 1 z',\r\n        },\r\n        noteheadHalf: {\r\n            x_min: 0,\r\n            x_max: 325,\r\n            y_min: -133,\r\n            y_max: 132,\r\n            ha: 265,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 325,\r\n            o: 'm 454 117 b 307 190 428 164 373 190 b 153 148 258 190 204 176 b 0 -60 58 98 0 13 b 14 -120 0 -81 4 -101 b 161 -192 40 -167 95 -192 b 315 -151 210 -192 264 -179 b 468 58 410 -101 468 -16 b 454 117 468 78 464 98 z m 392 19 b 266 -65 367 -6 318 -36 b 128 -122 215 -94 163 -115 b 107 -125 121 -124 114 -125 b 56 -98 84 -125 66 -117 b 49 -73 52 -91 49 -82 b 75 -23 49 -58 59 -39 b 199 60 99 1 147 32 b 337 118 251 89 302 111 b 359 121 344 120 351 121 b 410 94 382 121 400 112 b 416 69 415 86 416 78 b 392 19 416 53 408 36 z',\r\n        },\r\n        noteheadBlack: {\r\n            x_min: 0,\r\n            x_max: 325,\r\n            y_min: -133,\r\n            y_max: 132,\r\n            ha: 265,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 325,\r\n            o: 'm 454 117 b 307 190 428 164 373 190 b 153 148 258 190 204 176 b 0 -60 58 98 0 13 b 14 -120 0 -81 4 -101 b 161 -192 40 -167 95 -192 b 315 -151 210 -192 264 -179 b 468 58 410 -101 468 -16 b 454 117 468 78 464 98 z',\r\n        },\r\n        noteheadXBlack: {\r\n            x_min: 0,\r\n            x_max: 325,\r\n            y_min: -132,\r\n            y_max: 132,\r\n            ha: 264,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 325,\r\n            o: 'm 285 0 l 461 138 b 468 153 465 141 468 147 l 468 154 b 462 167 468 160 465 164 l 445 184 b 431 190 441 187 436 190 b 418 186 426 190 420 189 l 235 40 l 50 186 b 37 190 48 189 42 190 b 24 184 32 190 29 187 l 6 167 b 0 153 3 164 0 158 b 7 138 0 147 3 141 l 183 0 l 7 -138 b 0 -153 3 -141 0 -147 b 6 -166 0 -157 3 -163 l 23 -184 b 37 -190 26 -189 32 -190 b 50 -186 42 -190 48 -189 l 235 -40 l 418 -186 b 431 -190 420 -189 426 -190 b 445 -184 436 -190 442 -189 l 462 -166 b 468 -153 465 -163 468 -157 b 461 -138 468 -147 465 -141 z',\r\n        },\r\n        noteheadCircleX: {\r\n            x_min: 0,\r\n            x_max: 325,\r\n            y_min: -162,\r\n            y_max: 163,\r\n            ha: 325,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 325,\r\n            o: 'm 387 -115 l 265 0 l 395 105 b 426 0 415 75 426 39 b 387 -115 426 -43 412 -84 z m 99 -137 l 233 -27 l 360 -145 b 235 -192 327 -174 282 -192 b 99 -137 183 -192 134 -171 z m 81 115 l 202 1 l 73 -105 b 42 0 53 -75 42 -39 b 81 115 42 43 56 84 z m 369 138 l 235 29 l 108 145 b 233 193 141 174 186 193 b 369 138 285 193 334 173 z m 233 235 b 0 0 104 235 0 130 b 233 -233 0 -130 104 -233 b 468 0 363 -233 468 -130 b 233 235 468 130 363 235 z',\r\n        },\r\n        noteheadDiamondHalf: {\r\n            x_min: 0,\r\n            x_max: 325,\r\n            y_min: -141,\r\n            y_max: 141,\r\n            ha: 282,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 325,\r\n            o: 'm 468 0 b 462 14 468 6 467 12 l 246 199 b 235 203 243 202 239 203 b 222 199 230 203 225 202 l 7 14 b 0 0 3 12 0 6 b 7 -14 0 -6 3 -12 l 222 -197 b 233 -203 225 -200 229 -203 l 235 -203 b 246 -197 239 -203 243 -200 l 461 -14 b 468 0 465 -12 468 -6 z m 281 -120 l 94 40 l 187 120 l 374 -39 z',\r\n        },\r\n        noteheadDiamondBlack: {\r\n            x_min: 0,\r\n            x_max: 325,\r\n            y_min: -140,\r\n            y_max: 142,\r\n            ha: 282,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 325,\r\n            o: 'm 461 14 l 246 199 b 235 204 243 202 239 204 b 222 199 230 204 225 202 l 7 14 b 0 0 3 12 0 6 b 7 -14 0 -6 3 -12 l 222 -197 b 235 -202 225 -200 230 -202 b 246 -197 239 -202 243 -200 l 461 -14 b 468 0 465 -12 468 -6 b 461 14 468 6 465 12 z',\r\n        },\r\n        augmentationDot: {\r\n            x_min: 0,\r\n            x_max: 100,\r\n            y_min: -49.9833984375,\r\n            y_max: 50.0166015625,\r\n            ha: 100,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 100,\r\n            o: 'm 0 0 b 72 -72 0 -40 32 -72 b 144 0 112 -72 144 -40 b 72 72 144 40 112 72 b 0 0 32 72 0 40 z',\r\n        },\r\n        tremolo1: {\r\n            x_min: 0,\r\n            x_max: 290,\r\n            y_min: -92.625,\r\n            y_max: 96.375,\r\n            ha: 189,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 290,\r\n            o: 'm 418 139 l 0 48 l 0 -133 l 418 -43 z',\r\n        },\r\n        flag8thUp: {\r\n            x_min: 0,\r\n            x_max: 289,\r\n            y_min: -818.0519211765461,\r\n            y_max: 12,\r\n            ha: 830.0519211765461,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 289,\r\n            o: 'm 50 -50 b 36 7 49 -46 36 4 b 19 17 35 13 26 17 b 0 -1 9 17 0 9 l 0 -238 l 0 -327 b 12 -343 0 -334 6 -340 b 291 -600 72 -361 197 -441 b 359 -827 317 -645 359 -706 b 317 -1140 359 -930 343 -1040 b 324 -1176 312 -1156 308 -1171 b 351 -1156 340 -1182 346 -1171 b 416 -808 403 -1030 416 -897 l 416 -780 b 302 -458 409 -595 302 -458 b 131 -220 307 -458 170 -281 b 50 -50 78 -138 52 -56 z',\r\n        },\r\n        flag8thDown: {\r\n            x_min: 0,\r\n            x_max: 289,\r\n            y_min: -12,\r\n            y_max: 815.9030850945703,\r\n            ha: 827.9030850945703,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 289,\r\n            o: 'm 36 -6 b 50 50 36 -3 49 46 b 131 220 52 56 78 138 b 302 458 170 281 307 458 b 416 780 302 458 409 595 l 416 814 b 354 1151 416 901 405 1025 b 327 1174 348 1165 343 1179 b 320 1135 311 1168 315 1151 b 360 827 346 1034 360 930 b 291 600 360 706 317 645 b 12 343 196 441 72 363 b 0 327 4 340 0 334 l 0 238 l 0 1 b 19 -17 0 -9 9 -17 b 36 -6 26 -17 35 -12 z',\r\n        },\r\n        flag16thUp: {\r\n            x_min: 0,\r\n            x_max: 280,\r\n            y_min: -818.2621968775015,\r\n            y_max: 18,\r\n            ha: 836.2621968775015,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 280,\r\n            o: 'm 403 -655 b 334 -438 402 -580 384 -503 b 120 -225 265 -348 174 -304 b 42 9 65 -145 42 9 b 20 26 40 19 37 26 b 0 9 3 26 0 19 l 0 -220 l 0 -305 l 0 -474 l 0 -543 b 20 -557 0 -546 10 -554 b 258 -770 58 -572 171 -642 b 318 -955 310 -850 318 -903 l 318 -971 b 287 -1138 317 -1007 308 -1080 b 289 -1176 282 -1151 275 -1169 b 320 -1158 304 -1184 312 -1168 b 383 -958 346 -1116 383 -1040 b 376 -851 383 -917 380 -881 b 403 -667 390 -799 403 -734 z m 301 -675 b 148 -508 262 -625 219 -579 b 56 -366 92 -452 66 -403 b 53 -353 55 -363 55 -357 l 55 -359 b 262 -495 120 -364 207 -429 b 340 -690 327 -573 340 -634 b 338 -732 340 -704 340 -717 b 301 -675 330 -716 312 -690 z',\r\n        },\r\n        flag16thDown: {\r\n            x_min: -0.5,\r\n            x_max: 280.0582797238116,\r\n            y_min: -20.1201171875,\r\n            y_max: 816.5341815666969,\r\n            ha: 836.6542987541969,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 280,\r\n            o: 'm -1 -11 b 21 -29 -1 -21 4 -29 b 42 -11 37 -29 40 -22 b 119 222 42 -11 64 142 b 333 436 174 302 264 347 b 403 652 384 500 402 577 b 375 848 404 724 391 793 b 383 955 380 879 383 914 b 319 1156 383 1036 346 1114 b 290 1174 312 1166 305 1181 b 286 1135 275 1166 281 1148 b 318 968 307 1077 317 1004 b 258 768 320 910 316 854 b 21 554 172 640 58 568 b -1 540 11 551 -1 544 z m 338 730 b 262 493 343 661 344 591 b 55 356 208 426 120 361 l 54 350 b 56 362 55 355 55 359 b 149 506 66 399 92 449 b 301 673 219 577 262 623 b 338 730 313 688 329 713 z',\r\n        },\r\n        flag32ndUp: {\r\n            x_min: 0,\r\n            x_max: 280,\r\n            y_min: -817.3491250321853,\r\n            y_max: 150,\r\n            ha: 967.3491250321853,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 280,\r\n            o: 'm 403 -664 b 392 -580 403 -641 397 -603 b 403 -451 397 -537 403 -491 l 403 -436 b 334 -219 402 -361 384 -284 b 120 -6 265 -130 174 -85 b 42 197 65 73 42 197 b 20 216 40 207 37 216 b 0 197 3 216 0 207 l 0 -32 l 0 -115 l 0 -117 l 0 -206 l 0 -230 l 0 -314 l 0 -472 l 0 -543 b 20 -556 0 -546 10 -553 b 258 -770 58 -570 171 -642 b 318 -953 310 -850 318 -901 l 318 -969 b 287 -1136 317 -1005 308 -1079 b 289 -1175 282 -1149 275 -1168 b 320 -1158 304 -1182 312 -1168 b 383 -956 346 -1116 383 -1038 l 383 -952 b 377 -857 383 -926 382 -883 b 403 -675 390 -805 403 -742 z m 262 -276 b 340 -471 327 -356 340 -415 b 328 -455 336 -465 333 -461 b 117 -256 259 -366 197 -330 b 56 -140 75 -217 60 -167 b 262 -276 121 -145 207 -210 z m 301 -675 b 150 -507 262 -625 220 -577 b 58 -369 95 -452 68 -405 b 262 -504 122 -376 207 -438 b 340 -698 327 -582 340 -642 b 338 -732 340 -710 340 -720 b 301 -675 330 -714 312 -690 z',\r\n        },\r\n        flag32ndDown: {\r\n            x_min: 0,\r\n            x_max: 280,\r\n            y_min: -151,\r\n            y_max: 816.3491250321852,\r\n            ha: 967.3491250321852,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 280,\r\n            o: 'm 403 662 l 403 674 b 377 855 403 740 390 804 b 383 950 382 881 383 924 l 383 955 b 320 1156 383 1037 346 1115 b 289 1174 312 1166 305 1181 b 287 1135 274 1166 282 1148 b 318 968 308 1077 317 1004 l 318 952 b 258 769 318 900 310 848 b 20 554 171 641 58 569 b 0 541 10 552 0 544 l 0 471 l 0 312 l 0 229 l 0 204 l 0 115 l 0 114 l 0 30 l 0 -199 b 20 -217 0 -209 3 -217 b 42 -199 37 -217 40 -209 b 120 4 42 -199 65 -75 b 334 217 174 84 265 128 b 403 435 384 282 402 360 l 403 449 b 392 579 403 490 397 536 b 403 662 397 602 403 639 z m 301 674 b 338 732 312 688 330 714 b 340 698 340 720 340 710 b 262 504 340 642 327 582 b 58 367 207 438 122 374 b 148 507 68 403 94 452 b 301 674 219 577 262 624 z m 262 275 b 56 138 207 209 121 144 b 117 255 60 166 75 216 b 328 454 197 328 259 364 b 340 469 333 459 336 464 b 262 275 340 413 327 354 z',\r\n        },\r\n        flag64thUp: {\r\n            x_min: 0,\r\n            x_max: 280,\r\n            y_min: -817.3491250321853,\r\n            y_max: 330,\r\n            ha: 1147.3491250321854,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 280,\r\n            o: 'm 1 -543 b 23 -557 1 -546 13 -554 b 261 -770 60 -570 174 -642 b 323 -955 314 -850 323 -901 l 323 -969 b 291 -1136 321 -1005 311 -1079 b 294 -1175 287 -1149 279 -1168 b 324 -1158 308 -1182 317 -1168 b 386 -956 350 -1116 386 -1038 b 379 -850 386 -914 383 -880 b 403 -675 392 -799 403 -739 l 403 -664 b 389 -572 403 -632 397 -602 b 403 -442 396 -533 403 -488 l 403 -429 b 389 -337 403 -403 396 -361 b 403 -206 396 -297 403 -252 l 403 -193 b 334 23 402 -118 384 -42 b 120 225 265 112 174 145 b 42 456 65 304 42 456 b 20 475 40 467 37 475 b 0 456 3 475 0 467 z m 328 -454 b 115 -255 259 -364 196 -328 b 55 -127 66 -210 58 -148 l 55 -132 b 262 -269 120 -138 207 -203 b 340 -464 327 -347 340 -408 l 340 -472 b 328 -454 336 -467 333 -459 z m 262 -33 b 340 -228 327 -112 340 -171 l 340 -238 b 328 -220 336 -232 333 -226 b 117 -22 259 -131 197 -95 b 53 111 65 26 55 94 l 56 104 b 262 -33 121 98 207 33 z m 304 -675 b 150 -508 265 -625 220 -579 b 58 -367 94 -454 68 -403 b 262 -504 122 -374 209 -439 b 340 -697 327 -582 340 -641 b 338 -729 340 -707 338 -719 b 304 -675 330 -713 315 -690 z',\r\n        },\r\n        flag64thDown: {\r\n            x_min: 0,\r\n            x_max: 280,\r\n            y_min: -331,\r\n            y_max: 816.2621968775015,\r\n            ha: 1147.2621968775015,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 280,\r\n            o: 'm 0 -458 b 22 -477 0 -468 4 -477 b 43 -458 39 -477 42 -468 b 120 -226 43 -458 65 -305 b 334 -24 174 -147 265 -114 b 403 192 384 40 402 117 l 403 204 b 389 336 403 251 396 295 b 403 428 396 360 403 402 l 403 441 b 389 570 403 487 396 531 b 403 662 397 600 403 631 l 403 674 b 379 848 403 737 392 798 b 387 955 383 878 387 913 b 324 1155 387 1037 350 1113 b 295 1174 317 1165 311 1181 b 291 1135 279 1166 287 1148 b 323 968 311 1077 321 1004 l 323 953 b 261 769 323 900 314 848 b 23 556 174 641 60 569 b 1 541 13 553 1 546 z m 340 471 l 340 461 b 264 268 340 405 327 346 b 56 131 209 202 121 137 l 55 125 b 117 255 58 147 68 210 b 328 454 197 328 259 364 b 340 471 333 459 336 465 z m 56 -105 l 55 -112 b 117 20 56 -95 65 -27 b 328 219 197 94 259 130 b 340 236 333 225 336 230 l 340 225 b 264 32 340 168 328 109 b 56 -105 209 -35 121 -99 z m 340 727 b 341 696 340 717 341 706 b 264 503 341 639 328 580 b 59 366 210 438 124 373 b 151 507 69 402 95 452 b 304 674 222 577 265 624 b 340 727 315 688 331 711 z',\r\n        },\r\n        flag128thUp: {\r\n            x_min: 0,\r\n            x_max: 280,\r\n            y_min: -817.3491250321853,\r\n            y_max: 514,\r\n            ha: 1331.3491250321854,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 280,\r\n            o: 'm 1 -544 b 23 -557 1 -547 13 -554 b 261 -770 60 -570 174 -642 b 323 -955 314 -850 323 -901 l 323 -969 b 291 -1136 321 -1005 311 -1079 b 295 -1175 287 -1149 281 -1168 b 324 -1158 310 -1182 317 -1168 b 387 -956 350 -1116 387 -1038 b 377 -844 387 -913 383 -876 b 403 -665 390 -792 403 -730 l 403 -655 b 389 -560 403 -628 397 -586 b 403 -431 397 -520 403 -477 l 403 -415 b 387 -317 403 -387 396 -343 b 403 -181 396 -275 403 -229 l 403 -168 b 389 -73 403 -141 397 -99 b 403 58 397 -33 403 12 l 403 73 b 334 289 402 148 384 225 b 120 490 265 379 174 410 b 43 723 65 569 43 723 b 22 740 42 733 39 740 b 0 723 4 740 0 733 z m 328 -204 b 117 -6 259 -115 197 -79 b 53 128 60 45 53 115 l 56 128 b 264 -9 121 122 209 58 b 340 -202 327 -86 340 -145 l 340 -222 b 328 -204 336 -216 333 -210 z m 264 232 b 340 42 327 156 340 96 l 340 23 b 328 40 336 29 333 35 b 117 239 259 130 197 166 b 55 370 66 285 56 350 l 56 370 b 264 232 121 364 209 298 z m 304 -675 b 151 -508 265 -625 222 -579 b 58 -366 95 -452 68 -402 b 56 -359 58 -364 56 -361 b 264 -495 121 -364 209 -429 b 340 -688 328 -573 340 -632 b 338 -727 340 -701 340 -714 b 304 -675 330 -711 315 -690 z m 328 -445 b 117 -246 259 -356 197 -320 b 55 -118 66 -200 56 -140 l 56 -118 b 264 -255 121 -124 209 -189 b 340 -451 330 -334 340 -395 l 340 -464 b 328 -445 336 -458 333 -451 z',\r\n        },\r\n        flag128thDown: {\r\n            x_min: 0,\r\n            x_max: 280,\r\n            y_min: -516,\r\n            y_max: 816.2621968775015,\r\n            ha: 1332.2621968775015,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 280,\r\n            o: 'm 0 -726 b 22 -743 0 -736 4 -743 b 43 -726 39 -743 42 -736 b 120 -492 43 -726 65 -572 b 334 -292 174 -413 265 -382 b 403 -75 384 -228 402 -150 l 403 -59 b 389 71 403 -13 397 30 b 403 166 397 96 403 138 l 403 179 b 387 314 403 226 396 272 b 403 412 396 340 403 384 l 403 428 b 389 557 403 474 397 517 b 403 652 397 583 403 625 l 403 662 b 377 842 403 727 390 791 b 387 955 383 874 387 912 b 324 1155 387 1037 350 1113 b 295 1174 317 1165 311 1181 b 291 1135 279 1166 287 1148 b 323 968 311 1077 321 1004 l 323 953 b 261 768 323 900 314 847 b 23 556 174 639 60 569 b 1 541 13 553 1 546 z m 340 220 l 340 200 b 264 6 340 144 327 84 b 56 -131 209 -60 121 -125 l 53 -131 b 117 4 53 -118 60 -46 b 328 203 197 78 259 114 b 340 220 333 209 336 215 z m 56 -372 l 55 -372 b 117 -242 56 -351 66 -288 b 328 -43 197 -168 259 -132 b 340 -26 333 -37 336 -32 l 340 -45 b 264 -235 340 -99 327 -158 b 56 -372 209 -301 121 -366 z m 338 726 b 340 687 340 713 340 700 b 264 492 340 631 328 570 b 56 356 209 426 121 361 b 58 363 56 359 58 361 b 151 507 68 399 95 451 b 304 672 222 577 265 622 b 338 726 314 687 330 710 z m 340 461 l 340 448 b 264 252 340 392 330 331 b 56 115 209 186 121 121 l 55 115 b 117 245 56 137 66 199 b 328 444 197 318 259 354 b 340 461 333 449 336 455 z',\r\n        },\r\n        accidentalFlat: {\r\n            x_min: 0,\r\n            x_max: 203,\r\n            y_min: -176,\r\n            y_max: 453,\r\n            ha: 629,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 212,\r\n            o: 'm 289 114 b 173 223 281 170 246 223 b 52 170 101 223 59 179 l 58 632 b 37 652 58 644 49 652 l 20 652 b 0 632 9 652 0 644 l 7 -233 b 27 -253 7 -245 16 -253 b 39 -251 30 -253 36 -252 b 216 -114 45 -248 138 -202 b 292 78 271 -52 292 19 b 289 114 292 91 291 102 z m 190 58 b 148 -85 190 36 184 -30 b 48 -183 124 -122 75 -161 l 52 98 b 134 153 55 111 76 153 b 190 73 186 153 190 104 z',\r\n        },\r\n        accidentalNatural: {\r\n            x_min: 0,\r\n            x_max: 171,\r\n            y_min: -323,\r\n            y_max: 325,\r\n            ha: 648,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 171,\r\n            o: 'm 239 264 b 228 268 236 266 232 268 b 222 266 226 268 223 266 l 40 216 l 40 468 l 0 468 l 0 -245 b 20 -264 0 -256 9 -264 l 26 -264 l 207 -213 l 207 -465 l 246 -465 l 246 248 b 239 264 246 253 243 261 z m 207 -94 l 40 -140 l 40 96 l 207 144 z',\r\n        },\r\n        accidentalSharp: {\r\n            x_min: 0,\r\n            x_max: 244,\r\n            y_min: -332,\r\n            y_max: 335,\r\n            ha: 667,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 244,\r\n            o: 'm 336 153 b 351 173 344 154 351 164 l 351 258 b 331 278 351 269 343 278 l 328 278 l 281 268 l 281 482 l 240 482 l 240 259 l 112 233 l 112 436 l 72 436 l 72 225 l 16 213 b 0 193 7 212 0 202 l 0 190 l 0 107 l 0 109 b 20 89 0 98 9 89 l 24 89 l 72 99 l 72 -138 l 16 -150 b 0 -170 7 -151 0 -161 l 0 -253 b 20 -274 0 -265 9 -274 l 24 -274 l 72 -264 l 72 -478 l 112 -478 l 112 -255 l 240 -229 l 240 -432 l 281 -432 l 281 -220 l 336 -210 b 351 -190 344 -209 351 -199 l 351 -105 b 331 -85 351 -94 343 -85 l 328 -85 l 281 -95 l 281 143 z m 112 -131 l 112 108 l 240 134 l 240 -104 z',\r\n        },\r\n        accidentalDoubleSharp: {\r\n            x_min: 0,\r\n            x_max: 275,\r\n            y_min: -137,\r\n            y_max: 138,\r\n            ha: 275,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 275,\r\n            o: 'm 300 73 l 360 73 l 376 73 b 396 94 387 73 396 82 l 396 179 b 376 199 396 190 387 199 l 291 199 b 271 179 279 199 271 190 l 271 161 l 271 102 l 200 30 l 196 30 l 124 102 l 124 179 b 105 199 124 190 117 199 l 20 199 b 0 179 9 199 0 190 l 0 94 b 20 73 0 82 9 73 l 35 73 l 36 73 l 96 73 l 167 3 l 167 -1 l 96 -73 l 36 -73 l 35 -73 l 20 -73 b 0 -92 9 -73 0 -81 l 0 -177 b 20 -197 0 -189 9 -197 l 105 -197 b 124 -177 117 -197 124 -189 l 124 -101 l 196 -32 l 200 -32 l 271 -101 l 271 -161 l 271 -163 l 271 -177 b 291 -197 271 -189 279 -197 l 376 -197 b 396 -177 387 -197 396 -189 l 396 -92 b 376 -73 396 -81 387 -73 l 361 -73 l 360 -73 l 300 -73 l 228 -1 l 228 1 z',\r\n        },\r\n        accidentalDoubleFlat: {\r\n            x_min: 0,\r\n            x_max: 371,\r\n            y_min: -176,\r\n            y_max: 453,\r\n            ha: 629,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 371,\r\n            o: 'm 531 115 b 415 223 523 171 488 223 b 294 171 343 223 301 180 l 300 632 b 279 652 300 644 291 652 l 262 652 b 242 632 251 652 242 644 l 246 199 b 173 223 228 213 204 223 b 52 170 101 223 59 179 l 58 632 b 37 652 58 644 49 652 l 20 652 b 0 632 9 652 0 644 l 7 -233 b 27 -253 7 -245 16 -253 b 39 -249 30 -253 36 -251 b 216 -114 45 -246 138 -202 b 248 -69 226 -102 239 -82 l 249 -233 b 269 -253 249 -245 258 -253 b 281 -249 272 -253 278 -251 b 458 -112 287 -246 380 -200 b 534 79 513 -50 534 20 b 531 115 534 92 533 104 z m 190 58 b 148 -85 190 36 184 -30 b 48 -183 124 -122 75 -161 l 52 98 b 134 153 55 111 76 153 b 190 73 186 153 190 104 z m 432 58 b 390 -85 432 36 426 -30 b 289 -183 366 -122 317 -161 l 294 98 b 376 153 297 111 318 153 b 432 73 428 153 432 104 z',\r\n        },\r\n        accidentalParensLeft: {\r\n            x_min: 0,\r\n            x_max: 74.99751101813285,\r\n            y_min: -211.5,\r\n            y_max: 209.46164665716316,\r\n            ha: 420.96164665716316,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 75,\r\n            o: 'm 98 -305 b 103 -303 100 -305 102 -304 b 107 -290 108 -300 109 -295 b 107 287 105 -287 -42 2 b 103 300 109 292 108 297 b 90 298 99 303 93 302 b 0 0 87 293 0 175 b 90 -301 0 -175 87 -295 b 98 -305 92 -303 95 -305 z',\r\n        },\r\n        accidentalParensRight: {\r\n            x_min: 0.0024889818671534614,\r\n            x_max: 75,\r\n            y_min: -209.46164665716316,\r\n            y_max: 211.5,\r\n            ha: 420.96164665716316,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 75,\r\n            o: 'm 10 305 b 5 303 8 305 6 304 b 1 290 0 300 -1 295 b 1 -287 3 287 150 -2 b 5 -300 -1 -292 0 -297 b 18 -298 9 -303 15 -302 b 108 0 21 -293 108 -175 b 18 301 108 175 21 295 b 10 305 16 303 13 305 z',\r\n        },\r\n        accidentalQuarterToneFlatStein: {\r\n            x_min: 0,\r\n            x_max: 193,\r\n            y_min: -176,\r\n            y_max: 452,\r\n            ha: 628,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 193,\r\n            o: 'm 0 84 b 107 -145 0 -26 65 -105 b 245 -249 166 -202 245 -249 b 253 -253 248 -251 249 -253 b 272 -235 264 -253 272 -245 l 278 632 b 259 651 278 642 269 651 l 248 651 b 229 632 238 651 229 642 l 232 174 b 125 217 223 186 192 217 b 0 84 53 217 0 173 z m 148 154 b 232 102 212 154 232 115 b 233 107 232 99 233 102 l 235 -179 b 134 -72 207 -156 160 -111 b 92 58 98 -17 92 36 l 92 75 b 148 154 92 105 96 154 z',\r\n        },\r\n        accidentalThreeQuarterTonesFlatZimmermann: {\r\n            x_min: 0,\r\n            x_max: 422,\r\n            y_min: -176,\r\n            y_max: 452,\r\n            ha: 628,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 422,\r\n            o: 'm 608 84 b 482 217 608 173 554 217 b 376 174 416 217 384 186 l 379 632 b 360 651 379 642 370 651 l 348 651 b 330 632 338 651 330 642 l 336 -235 b 354 -253 336 -245 344 -253 b 363 -249 359 -253 360 -251 b 501 -145 363 -249 442 -202 b 608 84 543 -105 608 -26 z m 459 154 b 516 75 511 154 516 105 l 516 58 b 474 -72 516 36 510 -17 b 373 -179 448 -111 400 -156 l 374 107 b 376 102 374 102 376 99 b 459 154 376 115 396 154 z m 0 84 b 107 -145 0 -26 65 -105 b 245 -249 166 -202 245 -249 b 253 -253 248 -251 249 -253 b 272 -235 264 -253 272 -245 l 278 632 b 259 651 278 642 269 651 l 248 651 b 229 632 238 651 229 642 l 232 174 b 125 217 223 186 192 217 b 0 84 53 217 0 173 z m 148 154 b 232 102 212 154 232 115 b 233 107 232 99 233 102 l 235 -179 b 134 -72 207 -156 160 -111 b 92 58 98 -17 92 36 l 92 75 b 148 154 92 105 96 154 z',\r\n        },\r\n        accidentalQuarterToneSharpStein: {\r\n            x_min: 0,\r\n            x_max: 180,\r\n            y_min: -316,\r\n            y_max: 320,\r\n            ha: 636,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 180,\r\n            o: 'm 243 144 b 259 164 252 145 259 156 l 259 249 b 239 269 259 261 251 269 b 235 268 238 269 236 268 l 150 251 l 150 461 l 109 461 l 109 242 l 16 222 b 0 203 7 220 0 212 l 0 120 b 20 99 0 108 9 99 l 24 99 l 109 117 l 109 -121 l 16 -141 b 0 -160 7 -143 0 -151 l 0 -243 b 20 -264 0 -255 9 -264 l 24 -264 l 109 -246 l 109 -455 l 150 -455 l 150 -238 l 243 -219 b 259 -199 252 -217 259 -207 l 259 -114 b 239 -95 259 -102 251 -95 l 235 -95 l 150 -112 l 150 125 z',\r\n        },\r\n        accidentalThreeQuarterTonesSharpStein: {\r\n            x_min: 0,\r\n            x_max: 290,\r\n            y_min: -327,\r\n            y_max: 340,\r\n            ha: 667,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 290,\r\n            o: 'm 400 160 b 416 180 409 161 416 171 l 416 265 b 397 285 416 276 409 285 l 393 285 l 348 275 l 348 490 l 308 490 l 308 266 l 223 249 l 223 467 l 184 467 l 184 242 l 108 226 l 108 444 l 69 444 l 69 217 l 16 206 b 0 187 7 204 0 196 l 0 104 b 20 84 0 92 9 84 l 24 84 l 69 94 l 69 -145 l 16 -157 b 0 -176 7 -158 0 -167 l 0 -259 b 20 -279 0 -271 9 -279 l 24 -279 l 69 -271 l 69 -471 l 108 -471 l 108 -262 l 184 -246 l 184 -449 l 223 -449 l 223 -239 l 308 -222 l 308 -425 l 348 -425 l 348 -213 l 400 -203 b 418 -183 409 -202 418 -192 l 418 -98 b 397 -78 418 -86 409 -78 l 393 -78 l 348 -88 l 348 150 z m 184 117 l 184 -121 l 108 -137 l 108 101 z m 223 -114 l 223 124 l 308 141 l 308 -96 z',\r\n        },\r\n        accidentalBuyukMucennebFlat: {\r\n            x_min: 0,\r\n            x_max: 277,\r\n            y_min: -176,\r\n            y_max: 454,\r\n            ha: 630,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 277,\r\n            o: 'm 396 115 b 279 225 387 173 354 225 b 158 171 204 225 164 179 l 160 317 l 336 419 l 336 482 l 161 380 l 161 488 l 336 590 l 336 654 l 163 552 l 164 634 b 144 654 164 645 156 654 l 127 654 b 107 634 115 654 107 645 l 108 520 l 0 456 l 0 393 l 108 456 l 109 350 l 0 285 l 0 222 l 109 287 l 114 -235 b 134 -253 114 -246 122 -253 b 145 -251 138 -253 141 -252 b 323 -114 145 -251 242 -204 b 399 79 377 -52 399 20 b 396 115 399 92 397 104 z m 297 58 b 255 -85 297 36 291 -30 b 154 -184 230 -122 181 -163 l 158 96 b 240 153 161 109 181 153 b 297 73 292 153 297 104 z',\r\n        },\r\n        accidentalBakiyeFlat: {\r\n            x_min: 0,\r\n            x_max: 277,\r\n            y_min: -176,\r\n            y_max: 454,\r\n            ha: 630,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 277,\r\n            o: 'm 396 115 b 279 225 387 173 354 225 b 158 171 204 225 164 179 l 161 348 l 336 452 l 336 516 l 161 413 l 164 634 b 144 654 164 645 156 654 l 127 654 b 107 634 115 654 107 645 l 109 382 l 0 318 l 0 255 l 109 318 l 114 -235 b 134 -253 114 -246 122 -253 b 145 -251 138 -253 143 -252 b 323 -114 145 -251 242 -204 b 399 79 377 -52 399 20 b 396 115 399 92 397 104 z m 297 58 b 255 -85 297 36 291 -30 b 156 -184 230 -122 183 -163 l 158 96 b 240 153 161 109 181 153 b 297 73 292 153 297 104 z',\r\n        },\r\n        accidentalKucukMucennebSharp: {\r\n            x_min: 0,\r\n            x_max: 348,\r\n            y_min: -316,\r\n            y_max: 318,\r\n            ha: 634,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 348,\r\n            o: 'm 494 121 b 482 125 491 124 487 125 b 478 124 481 125 480 124 l 269 68 l 269 127 l 412 164 b 425 181 420 167 425 173 l 425 266 b 418 282 425 272 422 279 b 406 285 415 285 410 285 l 402 285 l 269 249 l 269 458 l 232 458 l 232 239 l 89 200 b 76 181 81 197 76 190 l 76 98 b 84 84 76 92 79 86 b 95 79 86 81 91 79 b 99 81 96 79 98 81 l 232 115 l 232 58 l 14 -3 b 0 -20 6 -6 0 -12 l 0 -104 b 7 -118 0 -109 3 -115 b 19 -122 10 -121 14 -122 l 23 -122 l 232 -66 l 232 -124 l 89 -163 b 76 -180 81 -166 76 -171 l 76 -264 b 84 -279 76 -269 79 -276 b 95 -282 86 -282 91 -282 l 99 -282 l 232 -246 l 232 -455 l 269 -455 l 269 -236 l 412 -199 b 425 -180 420 -196 425 -189 l 425 -95 b 418 -81 425 -89 422 -84 b 406 -76 415 -78 410 -76 b 402 -78 405 -76 403 -78 l 269 -114 l 269 -55 l 487 4 b 501 22 495 7 501 13 l 501 107 b 494 121 501 112 498 118 z',\r\n        },\r\n        articAccentAbove: {\r\n            x_min: 0,\r\n            x_max: 361,\r\n            y_min: 0,\r\n            y_max: 235,\r\n            ha: 235,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 360,\r\n            o: 'm 505 189 l 26 337 b 20 338 24 337 22 338 b 0 318 9 338 0 330 l 0 285 b 14 266 0 276 7 269 l 323 170 l 14 72 b 0 53 7 69 0 62 l 0 20 b 20 0 0 9 9 0 b 26 1 22 0 24 1 l 505 150 b 520 170 513 153 520 161 b 505 189 520 179 513 186 z',\r\n        },\r\n        articAccentBelow: {\r\n            x_min: 0,\r\n            x_max: 361,\r\n            y_min: -235,\r\n            y_max: 0,\r\n            ha: 235,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 360,\r\n            o: 'm 505 -150 l 26 -1 b 20 0 24 -1 22 0 b 0 -20 9 0 0 -9 l 0 -53 b 14 -72 0 -62 7 -69 l 323 -168 l 14 -266 b 0 -285 7 -269 0 -276 l 0 -318 b 20 -338 0 -330 9 -338 b 26 -337 22 -338 24 -337 l 505 -189 b 520 -168 513 -186 520 -177 b 505 -150 520 -160 513 -153 z',\r\n        },\r\n        articTenutoAbove: {\r\n            x_min: 0,\r\n            x_max: 316,\r\n            y_min: 0,\r\n            y_max: 46,\r\n            ha: 46,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 316,\r\n            o: 'm 435 66 l 20 66 b 0 46 9 66 0 58 l 0 20 b 20 0 0 9 9 0 l 435 0 b 455 20 446 0 455 9 l 455 46 b 435 66 455 58 446 66 z',\r\n        },\r\n        articTenutoBelow: {\r\n            x_min: 0,\r\n            x_max: 316,\r\n            y_min: -46,\r\n            y_max: 0,\r\n            ha: 46,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 316,\r\n            o: 'm 435 0 l 20 0 b 0 -20 9 0 0 -9 l 0 -46 b 20 -66 0 -58 9 -66 l 435 -66 b 455 -46 446 -66 455 -58 l 455 -20 b 435 0 455 -9 446 0 z',\r\n        },\r\n        articStaccatoAbove: {\r\n            x_min: 0,\r\n            x_max: 78,\r\n            y_min: -0.0869140625,\r\n            y_max: 77.9130859375,\r\n            ha: 78,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 78,\r\n            o: 'm 16 16 b 96 16 38 -6 74 -6 b 96 96 118 38 118 74 b 16 96 74 118 38 118 b 16 16 -5 74 -5 38 z',\r\n        },\r\n        articStaccatoBelow: {\r\n            x_min: 0,\r\n            x_max: 78,\r\n            y_min: -78.0869140625,\r\n            y_max: -0.0869140625,\r\n            ha: 78,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 78,\r\n            o: 'm 16 -96 b 96 -96 38 -118 74 -118 b 96 -17 118 -74 118 -39 b 16 -17 74 5 38 5 b 16 -96 -5 -39 -5 -74 z',\r\n        },\r\n        articStaccatissimoAbove: {\r\n            x_min: 0,\r\n            x_max: 126,\r\n            y_min: 0,\r\n            y_max: 208,\r\n            ha: 208,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 126,\r\n            o: 'm 171 297 b 161 300 168 298 164 300 b 148 295 157 300 151 298 l 95 239 b 89 236 94 238 91 236 b 84 239 88 236 85 238 l 32 295 b 19 300 29 298 23 300 b 0 279 7 300 0 291 l 0 274 l 71 14 b 91 0 73 6 82 0 b 109 14 99 0 107 6 l 180 274 b 181 279 180 275 181 278 b 171 297 181 285 176 294 z',\r\n        },\r\n        articStaccatissimoBelow: {\r\n            x_min: 0,\r\n            x_max: 126,\r\n            y_min: -208,\r\n            y_max: 0,\r\n            ha: 208,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 126,\r\n            o: 'm 171 -297 b 181 -279 176 -294 181 -285 b 180 -274 181 -278 180 -275 l 109 -14 b 91 0 107 -6 99 0 b 71 -14 82 0 73 -6 l 0 -274 l 0 -279 b 19 -300 0 -291 7 -300 b 32 -295 23 -300 29 -298 l 84 -239 b 89 -236 85 -238 88 -236 b 95 -239 91 -236 94 -238 l 148 -295 b 161 -300 151 -298 157 -300 b 171 -297 164 -300 168 -298 z',\r\n        },\r\n        articMarcatoAbove: {\r\n            x_min: 1,\r\n            x_max: 296,\r\n            y_min: 0,\r\n            y_max: 253,\r\n            ha: 253,\r\n            leftSideBearing: 1,\r\n            advanceWidth: 295,\r\n            o: 'm 1 30 l 36 10 l 173 239 l 298 10 b 317 0 301 4 310 0 l 408 0 b 426 20 419 0 426 9 b 425 30 426 23 426 27 l 230 356 b 213 364 226 361 222 363 b 196 356 207 364 199 361 z',\r\n        },\r\n        articMarcatoBelow: {\r\n            x_min: 0,\r\n            x_max: 295,\r\n            y_min: -253,\r\n            y_max: 0,\r\n            ha: 253,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 296,\r\n            o: 'm 425 -30 l 390 -10 l 253 -239 l 128 -10 b 109 0 125 -4 117 0 l 19 0 b 0 -20 7 0 0 -9 b 1 -30 0 -23 0 -27 l 196 -356 b 213 -364 200 -361 204 -363 b 230 -356 219 -364 228 -361 z',\r\n        },\r\n        fermataAbove: {\r\n            x_min: 0,\r\n            x_max: 622,\r\n            y_min: 0,\r\n            y_max: 368,\r\n            ha: 368,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 622,\r\n            o: 'm 778 374 b 448 530 642 521 523 530 b 120 374 373 530 255 521 b 0 65 49 297 0 143 b 20 19 0 37 6 19 b 161 265 60 19 40 143 b 445 373 268 372 410 373 l 448 373 l 451 373 b 734 265 485 373 628 372 b 876 19 855 143 835 19 b 896 65 890 19 896 36 b 778 374 896 143 848 298 z m 348 99 b 448 0 348 45 393 0 b 547 99 503 0 547 45 b 448 199 547 154 503 199 b 348 99 393 199 348 154 z',\r\n        },\r\n        fermataBelow: {\r\n            x_min: 0,\r\n            x_max: 622,\r\n            y_min: -368,\r\n            y_max: 0,\r\n            ha: 368,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 622,\r\n            o: 'm 778 -374 b 896 -65 848 -298 896 -143 b 876 -19 896 -36 890 -19 b 734 -265 835 -19 855 -143 b 451 -373 628 -372 485 -373 l 448 -373 l 445 -373 b 161 -265 410 -373 268 -372 b 20 -19 40 -143 60 -19 b 0 -65 6 -19 0 -37 b 120 -374 0 -143 49 -297 b 448 -530 255 -521 373 -530 b 778 -374 523 -530 642 -521 z m 348 -99 b 448 -199 348 -154 393 -199 b 547 -99 503 -199 547 -154 b 448 0 547 -45 503 0 b 348 -99 393 0 348 -45 z',\r\n        },\r\n        caesura: {\r\n            x_min: 0,\r\n            x_max: 379.951171875,\r\n            y_min: 0,\r\n            y_max: 490,\r\n            ha: 490,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 380,\r\n            o: 'm 320 706 l 285 706 l 285 706 b 271 696 279 706 273 701 l 1 21 b 0 15 1 20 0 17 b 15 0 0 7 7 0 l 50 0 b 64 10 56 0 62 4 l 334 684 b 335 690 335 686 335 688 b 320 706 335 699 328 706 z m 483 696 l 213 21 b 212 16 213 20 212 17 b 227 0 212 7 219 0 l 262 0 b 276 10 268 0 274 4 l 546 684 b 547 690 547 686 547 689 b 532 706 547 699 540 706 l 497 706 b 483 696 491 706 485 701 z',\r\n        },\r\n        caesuraCurved: {\r\n            x_min: -0.3940184184244736,\r\n            x_max: 368,\r\n            y_min: 0,\r\n            y_max: 491,\r\n            ha: 491,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 368,\r\n            o: 'm 301 707 l 262 707 b 245 693 253 707 246 701 b 1 26 233 603 177 348 b 16 0 -4 14 3 0 b 30 7 22 0 27 3 b 318 687 259 341 304 602 l 318 690 b 301 707 318 698 310 707 z m 514 707 l 474 707 b 458 693 465 707 459 701 b 213 26 446 603 389 348 b 229 0 207 14 216 0 b 243 7 235 0 240 3 b 530 687 472 341 516 602 l 530 690 b 514 707 530 698 523 707 z',\r\n        },\r\n        restMaxima: {\r\n            x_min: 0,\r\n            x_max: 450,\r\n            y_min: -250,\r\n            y_max: 250,\r\n            ha: 500,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 450,\r\n            o: 'm 0 -360 l 180 -360 l 180 360 l 0 360 z m 468 -360 l 648 -360 l 648 360 l 468 360 z',\r\n        },\r\n        restDoubleWhole: {\r\n            x_min: 0,\r\n            x_max: 125,\r\n            y_min: -11,\r\n            y_max: 262,\r\n            ha: 273,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 125,\r\n            o: 'm 160 377 l 20 377 b 0 357 9 377 0 369 l 0 4 b 20 -16 0 -7 9 -16 l 160 -16 b 180 4 171 -16 180 -7 l 180 357 b 160 377 180 369 171 377 z',\r\n        },\r\n        restWhole: {\r\n            x_min: 0,\r\n            x_max: 325,\r\n            y_min: -131,\r\n            y_max: 5,\r\n            ha: 136,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 325,\r\n            o: 'm 448 7 l 20 7 b 0 -13 9 7 0 -1 l 0 -168 b 20 -189 0 -180 9 -189 l 448 -189 b 468 -168 459 -189 468 -180 l 468 -13 b 448 7 468 -1 459 7 z',\r\n        },\r\n        restHalf: {\r\n            x_min: 0,\r\n            x_max: 325,\r\n            y_min: -4,\r\n            y_max: 132,\r\n            ha: 136,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 325,\r\n            o: 'm 0 170 l 0 14 b 20 -6 0 -6 0 -6 l 448 -6 b 468 14 468 -6 468 -6 l 468 170 b 448 190 468 190 468 190 l 20 190 b 0 170 0 190 0 190 z',\r\n        },\r\n        restQuarter: {\r\n            x_min: 0,\r\n            x_max: 235.04550444040407,\r\n            y_min: -331.3305588585018,\r\n            y_max: 401.3471074380165,\r\n            ha: 732.6776662965183,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 235,\r\n            o: 'm 334 -243 l 331 -239 b 323 -229 330 -238 327 -235 l 157 -24 b 157 -3 153 -20 154 -9 l 304 219 b 307 229 305 222 307 226 l 307 242 b 302 253 307 246 305 251 l 69 569 b 43 573 69 569 58 586 b 40 543 29 562 40 543 l 150 393 b 150 359 156 384 156 367 l 4 137 b 1 125 3 134 1 128 l 1 112 b 6 101 1 108 3 104 l 167 -99 b 131 -95 161 -98 148 -95 b 49 -124 107 -95 75 -101 b 0 -229 17 -153 0 -193 b 16 -285 0 -249 4 -269 b 154 -468 46 -331 154 -468 b 180 -474 154 -468 167 -484 b 186 -444 193 -464 190 -451 b 135 -353 181 -436 135 -353 b 125 -307 135 -353 125 -333 b 150 -246 125 -288 131 -265 b 206 -223 167 -229 187 -223 b 252 -236 225 -223 240 -229 l 308 -272 b 334 -268 308 -272 325 -281 b 334 -243 341 -256 338 -251 z',\r\n        },\r\n        rest8th: {\r\n            x_min: 0,\r\n            x_max: 276.0703833817838,\r\n            y_min: -255.400390625,\r\n            y_max: 203.607617657064,\r\n            ha: 459.008008282064,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 276,\r\n            o: 'm 385 292 b 360 282 374 296 364 291 b 245 141 355 273 309 188 b 180 112 225 126 203 117 b 206 181 196 131 206 155 b 103 284 206 238 160 284 b 0 181 46 284 0 238 b 65 85 0 137 27 100 b 144 68 87 75 114 68 b 269 109 185 68 230 80 b 320 158 287 122 304 139 l 156 -356 l 194 -368 l 396 267 b 385 292 400 278 396 288 z',\r\n        },\r\n        rest16th: {\r\n            x_min: 0.9541398268254265,\r\n            x_max: 343.8943427695615,\r\n            y_min: -507.25,\r\n            y_max: 203.80442456185935,\r\n            ha: 711.0544245618594,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 344,\r\n            o: 'm 482 292 b 457 282 471 296 462 291 b 350 146 453 273 412 195 b 286 115 330 130 308 120 b 309 184 301 134 310 158 b 203 283 307 241 260 285 b 104 177 146 281 102 233 b 172 84 105 133 133 97 b 251 69 194 74 222 68 b 375 114 292 71 337 84 b 424 165 392 128 409 146 l 424 165 l 359 -65 b 359 -65 359 -65 359 -65 l 359 -65 b 248 -213 352 -79 305 -168 b 183 -244 228 -229 206 -239 b 207 -175 199 -226 208 -202 b 101 -76 205 -119 157 -74 b 1 -183 44 -78 -1 -126 b 70 -276 3 -226 31 -262 b 149 -290 92 -285 120 -291 b 272 -245 190 -288 234 -275 b 321 -195 290 -231 306 -213 l 174 -720 l 213 -730 l 482 223 l 494 268 b 482 292 497 279 493 289 z',\r\n        },\r\n        rest32nd: {\r\n            x_min: -0.17098561188277978,\r\n            x_max: 390.77294012579665,\r\n            y_min: -507.25,\r\n            y_max: 459.7265334202139,\r\n            ha: 966.9765334202139,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 391,\r\n            o: 'm 549 661 b 524 650 538 664 529 659 b 425 520 520 641 485 571 b 362 487 406 504 384 493 b 383 556 377 506 385 530 b 273 652 379 613 330 656 b 178 542 217 648 174 599 b 249 451 181 499 210 464 b 329 440 272 442 300 438 b 451 489 370 443 414 458 b 498 541 468 504 484 522 l 441 310 b 335 150 434 290 390 197 b 271 117 316 134 294 123 b 292 186 286 136 294 160 b 183 282 289 243 239 285 b 88 172 126 278 84 229 b 159 81 91 129 120 94 b 239 70 182 72 209 68 b 360 119 280 73 323 88 b 407 171 377 134 393 152 l 354 -47 b 247 -208 348 -60 303 -160 b 184 -241 228 -224 206 -235 b 205 -171 199 -222 207 -197 b 95 -76 201 -115 152 -72 b 0 -186 39 -80 -4 -129 b 71 -276 3 -229 32 -264 b 151 -287 94 -285 122 -290 b 273 -238 192 -285 236 -270 b 320 -186 290 -224 306 -206 l 189 -721 l 228 -730 l 562 637 b 549 661 565 648 560 658 z',\r\n        },\r\n        rest64th: {\r\n            x_min: -0.39348479958929933,\r\n            x_max: 422.50772023490237,\r\n            y_min: -758.349609375,\r\n            y_max: 463.7099168081096,\r\n            ha: 1222.0595261831095,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 423,\r\n            o: 'm 593 667 b 587 668 591 668 589 668 b 569 654 579 667 572 662 b 474 521 564 639 530 572 b 412 486 456 505 434 493 b 431 556 426 506 434 530 b 318 648 425 613 375 654 b 227 535 262 642 221 591 b 301 447 231 492 262 458 b 381 438 324 438 352 435 b 501 492 422 442 465 459 b 546 545 518 507 533 525 l 547 546 l 500 322 b 399 160 492 299 452 208 b 338 125 381 143 360 132 b 356 195 352 145 359 169 b 243 287 350 252 300 293 b 152 174 187 281 146 230 b 226 86 156 131 187 97 b 307 77 249 78 277 74 b 426 131 347 82 391 98 b 471 183 443 146 458 164 l 424 -45 b 324 -205 414 -70 375 -158 b 262 -240 305 -222 284 -233 b 280 -170 276 -221 283 -196 b 167 -78 274 -113 224 -72 b 76 -191 111 -84 70 -135 b 150 -280 80 -235 111 -269 b 231 -288 174 -288 201 -291 b 350 -235 271 -284 315 -267 b 395 -183 367 -220 382 -202 l 350 -398 b 348 -405 350 -399 348 -405 b 248 -565 343 -420 303 -514 b 186 -600 229 -581 208 -593 b 204 -530 200 -580 207 -555 b 91 -438 198 -473 148 -432 b 0 -551 35 -444 -6 -495 b 74 -639 4 -594 35 -628 b 155 -648 97 -647 125 -651 b 274 -594 195 -643 239 -627 b 320 -541 291 -579 307 -561 l 319 -546 l 207 -1084 l 246 -1092 l 608 644 b 593 667 610 655 603 665 z',\r\n        },\r\n        rest128th: {\r\n            x_min: -0.3922883924783287,\r\n            x_max: 475.40811085990237,\r\n            y_min: -758.349609375,\r\n            y_max: 717.5106980581096,\r\n            ha: 1475.8603074331095,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 475,\r\n            o: 'm 669 1033 b 663 1033 667 1033 665 1033 b 645 1019 655 1033 648 1027 b 550 887 641 1004 606 938 b 488 851 532 870 510 858 b 507 922 502 871 510 896 b 394 1013 501 978 450 1019 b 302 900 337 1007 296 957 b 377 812 307 857 337 823 b 457 804 400 804 428 801 b 577 857 498 808 541 824 b 623 910 594 872 609 891 l 623 912 l 576 688 b 475 526 568 664 528 573 b 413 490 457 509 435 497 b 432 561 427 510 435 535 b 319 652 426 617 375 658 b 227 539 263 646 221 596 b 302 451 232 496 263 462 b 382 443 325 443 353 440 b 502 496 423 447 466 463 b 547 549 519 511 534 529 l 500 320 b 399 160 490 295 451 207 b 337 125 381 143 359 132 b 356 195 352 145 359 169 b 243 287 350 252 300 293 b 151 174 187 281 146 230 b 226 86 156 131 187 97 b 306 77 249 78 277 74 b 426 131 347 82 391 98 b 471 183 443 145 457 164 l 426 -33 b 424 -40 426 -33 424 -40 b 323 -200 419 -55 379 -149 b 261 -235 305 -216 283 -228 b 280 -164 275 -215 283 -190 b 167 -73 274 -108 223 -67 b 75 -186 110 -79 69 -129 b 150 -274 80 -229 110 -263 b 230 -282 173 -282 201 -285 b 350 -229 271 -278 314 -262 b 396 -176 367 -214 383 -195 l 395 -180 l 349 -403 b 248 -565 340 -426 301 -517 b 186 -600 230 -582 208 -593 b 205 -530 200 -581 207 -556 b 92 -438 199 -473 148 -432 b 0 -551 35 -444 -6 -495 b 75 -639 4 -594 35 -628 b 155 -648 98 -648 126 -651 b 275 -595 196 -644 239 -627 b 320 -542 291 -580 306 -561 l 207 -1084 l 246 -1092 l 684 1009 b 669 1033 686 1020 680 1031 z',\r\n        },\r\n        dynamicPiano: {\r\n            x_min: -95,\r\n            x_max: 317,\r\n            y_min: -163,\r\n            y_max: 263,\r\n            ha: 426,\r\n            leftSideBearing: -95,\r\n            advanceWidth: 350,\r\n            o: 'm -137 -235 l 186 -235 l 186 -206 l 78 -206 l 161 26 l 166 16 b 229 -29 166 16 180 -16 b 256 -32 238 -32 248 -32 b 445 166 336 -32 415 49 b 456 246 454 197 456 223 b 374 373 456 343 396 367 b 356 376 369 374 361 376 b 242 314 311 376 266 338 l 238 310 l 235 315 b 154 377 235 315 204 370 b 138 379 148 377 144 379 b 0 226 91 379 42 346 l 26 213 b 63 301 32 232 46 278 b 102 328 72 314 89 325 b 120 325 109 330 115 328 b 127 304 125 321 127 314 b 94 192 127 269 101 206 l -49 -206 l -137 -206 z m 226 17 b 215 19 223 17 217 17 b 187 81 193 27 187 53 b 204 180 187 125 203 177 b 297 317 217 235 259 295 b 336 324 311 325 324 327 b 350 311 341 323 347 317 b 356 278 354 302 356 291 b 333 161 356 239 341 187 b 242 20 314 105 278 37 b 226 17 238 17 230 17 z',\r\n        },\r\n        dynamicMezzo: {\r\n            x_min: -7,\r\n            x_max: 374,\r\n            y_min: -2,\r\n            y_max: 251,\r\n            ha: 253,\r\n            leftSideBearing: -7,\r\n            advanceWidth: 391,\r\n            o: 'm 488 63 b 467 48 481 50 474 48 b 459 49 464 48 462 48 b 449 65 452 52 449 58 b 461 112 449 76 455 94 b 474 157 464 121 471 150 b 492 281 482 183 492 242 b 491 301 492 288 492 295 b 436 359 484 340 467 359 b 340 307 399 359 359 331 l 337 301 l 334 308 b 272 359 334 308 311 359 b 177 310 232 359 202 343 l 173 304 l 171 311 b 117 360 171 311 153 353 b 96 361 109 361 102 361 b 29 328 60 361 39 340 b -10 252 20 318 0 284 l 12 240 b 68 318 12 240 36 318 b 75 317 71 318 72 318 b 86 295 84 314 86 307 b 59 194 86 275 75 240 b 1 20 59 193 6 33 b 0 13 1 17 0 16 b 3 4 0 10 1 7 b 14 -1 6 1 9 -1 l 36 -1 l 91 -1 b 107 22 94 -1 101 -1 b 127 99 114 53 121 79 b 235 310 132 121 186 310 b 243 305 238 310 242 308 b 248 289 246 302 248 297 b 216 160 248 265 233 219 b 173 22 194 89 173 22 l 173 16 b 176 3 173 12 173 6 b 187 -1 179 0 183 -1 l 266 -1 b 282 16 272 -1 279 0 b 284 26 282 17 284 22 b 392 302 312 228 359 288 b 396 304 393 302 395 304 l 397 304 b 400 302 399 304 399 302 b 408 289 403 301 408 297 b 369 140 408 275 399 217 b 356 75 360 117 356 95 b 370 23 356 55 360 37 b 428 -3 382 6 408 -3 b 536 99 492 -3 517 49 b 539 108 537 102 537 105 l 514 120 b 488 63 514 120 498 81 z',\r\n        },\r\n        dynamicForte: {\r\n            x_min: -137,\r\n            x_max: 334,\r\n            y_min: -193,\r\n            y_max: 421,\r\n            ha: 614,\r\n            leftSideBearing: -137,\r\n            advanceWidth: 367,\r\n            o: 'm -122 -86 b -197 -161 -161 -86 -197 -122 b -81 -278 -197 -236 -147 -278 b 35 -228 -35 -278 -1 -264 b 202 173 98 -164 167 50 b 238 297 215 219 228 264 l 238 300 l 341 300 b 356 314 350 300 356 305 l 356 346 b 341 360 356 354 350 360 l 256 360 l 256 364 b 330 554 297 511 308 537 b 366 564 346 567 360 566 b 380 553 373 563 377 559 b 373 528 384 544 380 533 b 351 478 359 517 351 498 b 354 458 351 471 353 465 b 384 426 359 445 370 432 b 410 420 390 423 400 420 b 445 431 420 420 432 423 b 478 472 459 438 474 456 b 481 497 481 480 481 488 b 467 550 481 514 477 533 b 376 605 455 572 422 598 b 351 606 369 606 360 606 b 225 553 317 606 272 595 b 122 363 187 520 154 456 l 122 360 l 13 360 b -1 346 4 360 -1 354 l -1 314 b 13 300 -1 305 4 300 l 102 300 l 102 294 b 66 140 88 236 76 187 b 24 -35 55 86 42 32 l 20 -52 b -53 -235 -10 -170 -19 -212 b -78 -242 -60 -239 -69 -242 b -98 -235 -85 -242 -92 -239 b -105 -219 -102 -232 -107 -226 b -94 -204 -104 -213 -101 -207 b -58 -144 -66 -193 -58 -167 b -122 -86 -58 -124 -71 -86 z',\r\n        },\r\n        dynamicRinforzando: {\r\n            x_min: -12,\r\n            x_max: 230,\r\n            y_min: 0,\r\n            y_max: 254,\r\n            ha: 254,\r\n            leftSideBearing: -12,\r\n            advanceWidth: 247,\r\n            o: 'm 272 364 b 200 341 239 364 212 348 b 168 310 187 333 177 321 l 164 304 b 109 363 164 304 151 353 b 88 366 102 364 95 366 b 22 331 52 366 32 343 b -17 255 13 321 -7 287 l 4 243 b 60 321 4 243 29 321 b 68 320 63 321 65 321 b 78 297 75 317 78 308 b 49 180 78 272 65 230 l 0 23 l 0 17 b 3 4 0 13 0 7 b 14 0 6 1 10 0 l 94 0 b 109 17 99 0 107 1 b 111 27 109 19 111 23 b 209 302 140 230 186 279 b 225 311 215 308 220 311 b 229 310 226 311 228 311 b 233 304 233 307 233 305 l 233 301 b 216 268 220 291 216 279 b 225 243 216 259 219 249 b 262 229 235 232 249 229 b 304 242 279 229 295 235 b 331 308 320 255 331 275 b 272 364 331 341 304 364 z',\r\n        },\r\n        dynamicSforzando: {\r\n            x_min: 0,\r\n            x_max: 208,\r\n            y_min: -5,\r\n            y_max: 263,\r\n            ha: 268,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 208,\r\n            o: 'm 242 328 b 217 289 222 317 217 300 b 258 249 217 274 230 249 b 298 284 285 249 295 269 b 300 295 300 287 300 291 b 189 379 300 328 272 379 b 49 259 92 379 49 315 b 99 173 49 229 59 196 b 164 137 117 163 140 151 b 194 88 189 122 194 102 b 124 24 194 73 177 24 b 72 46 82 24 72 39 b 73 49 72 48 72 49 b 96 96 78 52 96 62 b 50 150 96 134 72 150 b 0 91 29 150 0 134 b 124 -7 0 26 49 -7 b 282 111 199 -7 282 24 b 171 239 282 197 207 219 b 128 292 135 259 128 268 b 193 347 128 317 156 347 b 242 328 230 347 242 328 z',\r\n        },\r\n        dynamicZ: {\r\n            x_min: -42,\r\n            x_max: 239,\r\n            y_min: -1,\r\n            y_max: 258,\r\n            ha: 259,\r\n            leftSideBearing: -42,\r\n            advanceWidth: 256,\r\n            o: 'm 229 292 b 235 288 232 292 233 291 b 236 284 236 285 236 285 b 233 278 236 281 235 279 b -42 55 232 276 -4 85 b -60 24 -56 43 -60 33 b -50 4 -60 12 -50 4 b -35 0 -45 1 -40 0 b 9 29 -14 0 1 19 b 50 69 17 43 26 69 b 89 35 75 69 81 50 b 170 -1 104 10 137 -1 b 243 22 197 -1 223 6 b 304 147 288 56 304 118 b 264 196 304 176 294 196 b 226 156 239 196 226 174 b 251 117 226 128 249 122 l 251 108 b 243 79 251 98 249 88 b 212 56 236 68 223 56 b 202 59 209 56 204 56 b 163 92 194 63 186 75 b 108 122 140 109 114 120 b 105 125 105 124 105 124 b 107 128 105 127 107 128 b 312 304 107 128 302 294 b 341 340 324 315 336 327 b 344 347 343 341 344 346 l 344 356 b 333 369 343 367 336 369 l 331 369 l 262 363 b 217 361 245 361 230 361 b 156 366 193 361 174 363 b 114 372 147 367 125 372 b 107 370 111 372 108 370 b 86 344 98 367 89 360 b 37 222 72 265 42 232 l 37 219 b 50 207 37 213 43 207 l 66 207 b 81 225 75 207 76 215 b 108 291 85 235 105 285 b 118 297 111 297 112 297 b 167 289 125 295 144 291 l 181 289 b 229 292 202 289 222 291 z',\r\n        },\r\n        ornamentTrill: {\r\n            x_min: -12,\r\n            x_max: 383,\r\n            y_min: 0,\r\n            y_max: 383,\r\n            ha: 383,\r\n            leftSideBearing: -12,\r\n            advanceWidth: 433,\r\n            o: 'm 464 396 b 376 359 408 396 376 359 l 364 370 b 346 377 357 377 346 377 l 197 377 l 246 528 b 226 552 249 539 238 552 l 213 552 b 199 544 209 552 202 547 b 124 482 196 541 130 487 b 117 471 118 478 117 471 b 84 377 117 471 102 431 l 3 377 b -17 360 -14 377 -17 360 l -17 341 b 3 324 -17 325 3 324 l 66 324 b 0 85 35 229 0 117 b 92 0 0 16 48 0 b 186 35 137 0 186 35 b 194 13 186 35 190 24 b 212 0 199 1 212 0 l 276 0 b 298 16 295 0 298 16 l 298 43 b 321 147 298 75 321 147 l 382 284 b 412 325 382 284 396 311 b 452 340 428 338 445 344 b 428 288 432 327 428 305 b 485 233 428 271 446 233 b 552 308 534 233 552 264 b 464 396 552 353 520 396 z m 222 143 b 147 78 210 104 171 78 b 137 79 143 78 140 78 b 121 115 125 85 121 99 b 137 190 121 148 137 190 l 180 324 l 275 324 b 279 320 279 324 279 320 b 222 143 279 320 235 187 z',\r\n        },\r\n        ornamentTurn: {\r\n            x_min: 0,\r\n            x_max: 456,\r\n            y_min: 0,\r\n            y_max: 232,\r\n            ha: 232,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 456,\r\n            o: 'm 527 334 b 442 269 488 334 442 312 b 501 204 442 228 468 204 b 570 226 533 204 540 226 b 613 164 598 226 613 204 l 613 163 b 550 98 613 127 586 98 b 448 143 508 98 485 109 l 328 255 l 298 284 b 174 334 262 317 223 334 b 0 170 92 334 0 278 b 131 0 0 68 58 0 b 215 65 170 0 215 22 b 156 130 215 107 189 130 b 86 108 124 130 117 108 b 43 170 59 108 43 130 l 43 171 b 108 236 43 207 72 236 b 209 192 150 236 171 225 l 328 79 l 360 50 b 482 0 396 17 433 0 b 657 164 564 0 657 56 b 527 334 657 266 600 334 z',\r\n        },\r\n        ornamentTurnSlash: {\r\n            x_min: 0,\r\n            x_max: 456,\r\n            y_min: -80,\r\n            y_max: 313,\r\n            ha: 393,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 456,\r\n            o: 'm 527 334 b 442 269 488 334 442 312 b 501 204 442 228 468 204 b 570 226 533 204 540 226 b 613 164 598 226 613 204 l 613 163 b 550 98 613 127 586 98 b 448 143 508 98 485 109 l 354 230 l 354 431 b 336 451 354 442 347 451 l 323 451 b 302 431 311 451 302 442 l 302 279 l 298 284 b 174 334 262 317 223 334 b 0 170 92 334 0 278 b 131 0 0 68 58 0 b 215 65 170 0 215 22 b 156 130 215 107 189 130 b 86 108 124 130 117 108 b 43 170 59 108 43 130 l 43 171 b 108 236 43 207 72 236 b 209 192 150 236 171 225 l 302 104 l 302 -96 b 323 -115 302 -108 311 -115 l 336 -115 b 354 -96 347 -115 354 -108 l 354 55 l 360 50 b 482 0 396 17 433 0 b 657 164 564 0 657 56 b 527 334 657 266 600 334 z',\r\n        },\r\n        ornamentMordent: {\r\n            x_min: 0,\r\n            x_max: 473,\r\n            y_min: -77,\r\n            y_max: 316,\r\n            ha: 393,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 473,\r\n            o: 'm 681 281 l 647 302 l 562 166 l 446 347 b 429 357 444 353 435 357 b 413 347 423 357 416 353 l 363 262 l 363 435 b 343 455 363 446 354 455 l 331 455 b 311 435 320 455 311 446 l 311 173 l 310 171 l 203 347 b 186 357 200 353 192 357 b 168 347 180 357 171 353 l 0 69 l 35 48 l 120 189 l 226 10 b 243 0 229 4 238 0 b 261 10 249 0 258 4 l 311 95 l 311 -91 b 331 -111 311 -102 320 -111 l 343 -111 b 363 -91 354 -111 363 -102 l 363 184 l 366 189 l 478 10 b 495 0 481 4 490 0 b 513 10 501 0 510 4 z',\r\n        },\r\n        ornamentShortTrill: {\r\n            x_min: 0,\r\n            x_max: 473,\r\n            y_min: 0,\r\n            y_max: 248,\r\n            ha: 248,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 473,\r\n            o: 'm 681 281 l 647 302 l 562 166 l 446 347 b 431 357 444 353 436 357 b 413 347 425 357 416 353 l 310 171 l 203 347 b 186 357 200 353 192 357 b 168 347 180 357 173 353 l 0 69 l 35 48 l 120 189 l 226 10 b 243 0 229 4 238 0 b 261 10 249 0 258 4 l 366 189 l 478 9 b 495 0 481 3 490 0 b 513 10 501 0 510 4 z',\r\n        },\r\n        ornamentTremblement: {\r\n            x_min: 0,\r\n            x_max: 654,\r\n            y_min: 0,\r\n            y_max: 248,\r\n            ha: 248,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 654,\r\n            o: 'm 942 282 l 907 302 l 822 166 l 708 348 b 691 357 704 354 701 357 b 674 347 685 357 677 353 l 648 302 l 563 166 l 449 348 b 432 357 446 354 438 357 b 415 347 426 357 418 353 l 415 346 l 311 171 l 203 348 b 186 357 200 354 192 357 b 168 348 177 357 171 354 l 168 347 l 0 69 l 35 48 l 120 190 l 226 10 b 243 0 229 4 238 0 l 245 0 b 261 10 251 0 258 4 l 367 189 l 480 10 b 497 0 482 4 491 0 b 513 10 503 0 510 4 l 625 192 l 739 10 b 756 0 742 4 750 0 b 772 10 762 0 769 4 z',\r\n        },\r\n        ornamentPrecompAppoggTrill: {\r\n            x_min: 0,\r\n            x_max: 680,\r\n            y_min: 0,\r\n            y_max: 388,\r\n            ha: 388,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 680,\r\n            o: 'm 945 307 l 860 170 l 746 353 b 729 361 743 359 737 361 b 713 351 723 361 716 357 l 685 307 l 600 170 l 487 353 b 481 359 485 356 484 357 b 469 361 478 360 472 361 b 452 351 464 361 455 357 l 348 176 l 240 353 b 223 361 238 359 229 361 b 206 353 215 361 209 359 l 40 76 l 40 541 b 20 559 39 552 30 559 b 0 541 10 559 1 552 l 0 26 b 19 1 0 16 9 4 b 26 0 20 1 24 0 b 48 13 35 0 43 6 l 72 52 l 157 194 l 265 14 b 282 4 268 9 276 4 b 298 14 288 4 295 9 l 405 193 l 517 14 b 534 4 520 9 528 4 b 550 14 540 4 547 9 l 664 196 l 776 14 b 793 4 779 9 788 4 b 811 14 799 4 808 9 l 979 287 z',\r\n        },\r\n        ornamentPrecompSlideTrillDAnglebert: {\r\n            x_min: 0.23333479818886538,\r\n            x_max: 662,\r\n            y_min: -158.30859375,\r\n            y_max: 248.2998046875,\r\n            ha: 406.6083984375,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 662,\r\n            o: 'm 919 303 l 834 166 l 721 348 b 704 358 717 354 712 357 b 687 348 697 357 690 353 l 660 303 l 660 303 l 575 166 l 461 348 b 454 355 460 351 457 353 b 444 358 452 356 447 358 b 427 348 438 358 430 353 l 323 172 l 215 347 b 213 350 215 348 214 349 b 213 350 213 350 213 350 l 212 351 l 211 352 l 211 353 l 210 353 l 210 353 l 208 354 b 208 355 208 354 208 355 b 198 357 205 356 201 357 l 198 357 b 180 348 189 358 184 354 l 179 345 l 69 164 b 49 -218 -15 23 -22 -98 b 66 -228 52 -224 60 -228 b 76 -225 69 -228 73 -227 b 86 -208 81 -222 86 -214 b 83 -198 86 -205 85 -200 b 103 143 21 -92 27 17 l 131 190 l 239 10 b 256 0 242 4 249 0 l 256 0 b 273 10 262 0 270 5 l 379 189 l 491 10 b 508 0 494 4 502 0 l 508 0 l 508 0 b 525 10 514 0 522 4 l 637 191 l 751 10 b 768 0 754 4 761 0 l 768 0 b 784 10 774 0 781 4 l 785 10 l 953 282 z',\r\n        },\r\n        ornamentPrecompSlideTrillBach: {\r\n            x_min: 0.2186051563662117,\r\n            x_max: 662,\r\n            y_min: -158,\r\n            y_max: 321,\r\n            ha: 479,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 662,\r\n            o: 'm 919 302 l 834 166 l 720 348 b 704 357 716 354 713 357 b 687 348 698 357 690 354 l 660 304 l 660 302 l 632 259 l 632 442 b 612 462 632 454 624 462 l 599 462 b 579 442 588 462 579 454 l 579 173 l 575 166 l 461 348 b 455 356 459 351 458 354 b 445 359 452 357 448 359 b 428 348 439 359 431 354 l 323 171 l 215 347 b 213 350 215 348 213 350 l 213 351 l 212 353 l 210 353 l 210 354 l 207 354 b 197 357 204 356 200 357 b 180 348 189 357 183 354 l 179 346 l 69 164 b 49 -217 -16 24 -22 -96 b 66 -228 52 -223 60 -228 b 76 -225 69 -228 73 -226 b 86 -207 82 -222 86 -213 b 84 -197 86 -204 85 -200 b 104 144 22 -91 27 17 l 131 190 l 239 10 b 256 0 242 4 251 0 b 274 10 262 0 271 4 l 379 190 l 491 10 b 508 0 494 4 503 0 b 526 10 514 0 523 4 l 579 98 l 579 -84 b 599 -104 579 -95 588 -104 l 612 -104 b 632 -84 624 -104 632 -95 l 632 183 l 638 192 l 750 10 b 768 0 753 4 762 0 b 785 10 773 0 782 4 l 953 282 z',\r\n        },\r\n        ornamentPrecompTrillSuffixDandrieu: {\r\n            x_min: 0,\r\n            x_max: 661.7813948436337,\r\n            y_min: 0,\r\n            y_max: 406,\r\n            ha: 406,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 662,\r\n            o: 'm 904 575 b 887 585 901 580 893 585 b 877 582 884 585 880 583 b 867 564 871 579 867 570 b 870 554 867 562 868 557 b 850 213 932 448 926 340 l 822 167 l 714 348 b 697 357 711 354 703 357 b 680 348 691 357 683 354 l 575 168 l 462 348 b 445 357 459 354 451 357 b 428 348 439 357 431 354 l 315 167 l 203 348 b 186 357 200 354 192 357 b 168 348 180 357 171 354 l 0 76 l 35 55 l 120 192 l 233 10 b 249 0 238 4 240 0 b 266 10 255 0 264 4 l 294 55 l 379 192 l 492 9 b 498 3 494 6 495 4 b 508 0 501 1 505 0 b 526 10 514 0 523 4 l 631 186 l 737 13 b 746 3 739 10 743 4 b 756 0 749 1 753 0 b 773 9 762 0 770 3 l 884 193 b 904 575 969 333 975 454 z',\r\n        },\r\n        ornamentPrecompTrillLowerSuffix: {\r\n            x_min: 0,\r\n            x_max: 721.4072261045861,\r\n            y_min: -171,\r\n            y_max: 249,\r\n            ha: 420,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 722,\r\n            o: 'm 937 312 b 923 320 935 317 927 320 b 910 314 919 320 913 317 l 906 310 l 821 170 l 714 348 b 697 359 711 354 703 359 b 680 348 691 359 683 354 l 575 168 l 462 348 b 445 359 459 354 451 359 b 428 348 439 359 431 354 l 315 167 l 203 348 b 186 359 200 354 192 359 b 168 348 180 359 171 354 l 0 76 l 35 55 l 118 192 l 233 10 b 249 0 236 4 240 0 b 266 10 255 0 264 4 l 294 55 l 379 192 l 492 10 b 498 3 494 7 495 4 b 508 0 501 1 505 0 b 526 10 514 0 523 4 l 631 186 l 739 10 b 756 0 742 4 750 0 b 773 10 765 0 770 4 l 818 85 l 926 265 b 927 -215 1012 145 1037 -62 b 923 -226 926 -217 923 -223 b 932 -242 923 -232 927 -239 b 943 -246 935 -243 940 -246 b 959 -238 949 -246 956 -242 b 937 312 1087 -59 1047 187 z',\r\n        },\r\n        stringsDownBow: {\r\n            x_min: 0,\r\n            x_max: 315,\r\n            y_min: 0,\r\n            y_max: 293,\r\n            ha: 293,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 315,\r\n            o: 'm 0 0 l 40 0 l 40 291 l 413 291 l 413 0 l 454 0 l 454 402 b 433 422 454 413 445 422 l 20 422 b 0 402 9 422 0 402 z',\r\n        },\r\n        stringsUpBow: {\r\n            x_min: 0,\r\n            x_max: 262,\r\n            y_min: 0,\r\n            y_max: 343,\r\n            ha: 343,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 262,\r\n            o: 'm 374 485 b 357 494 372 490 363 494 l 337 494 b 318 481 330 494 321 488 l 189 118 l 59 481 b 40 494 56 488 48 494 l 20 494 b 0 474 9 494 0 485 b 1 467 0 472 1 468 l 170 13 b 189 0 173 6 181 0 b 207 13 196 0 204 6 l 376 467 b 377 474 376 468 377 472 b 374 485 377 477 376 482 z',\r\n        },\r\n        stringsHarmonic: {\r\n            x_min: 0,\r\n            x_max: 181,\r\n            y_min: 0,\r\n            y_max: 181,\r\n            ha: 181,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 181,\r\n            o: 'm 131 220 b 220 131 181 220 220 181 b 131 40 220 81 181 40 b 40 131 81 40 40 81 b 131 220 40 181 81 220 z m 131 261 b 0 131 59 261 0 203 b 131 0 0 59 59 0 b 261 131 203 0 261 59 b 131 261 261 203 203 261 z',\r\n        },\r\n        pluckedSnapPizzicatoAbove: {\r\n            x_min: 0,\r\n            x_max: 269,\r\n            y_min: 0,\r\n            y_max: 389.099609375,\r\n            ha: 389.099609375,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 269,\r\n            o: 'm 214 386 l 214 540 b 194 560 214 551 205 560 b 174 540 183 560 174 551 l 174 386 b 0 193 76 376 0 293 b 194 0 0 87 87 0 b 387 193 301 0 387 87 b 214 386 387 293 311 376 z m 194 40 b 40 193 109 40 40 109 b 174 346 40 271 98 336 l 174 193 b 194 173 174 182 183 173 b 214 193 205 173 214 182 l 214 346 b 347 193 289 336 347 271 b 194 40 347 109 278 40 z',\r\n        },\r\n        pluckedSnapPizzicatoBelow: {\r\n            x_min: 0,\r\n            x_max: 269,\r\n            y_min: 0,\r\n            y_max: 389.099609375,\r\n            ha: 389.099609375,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 269,\r\n            o: 'm 214 175 b 387 367 311 184 387 267 b 194 560 387 473 301 560 b 0 367 87 560 0 473 b 174 175 0 267 76 184 l 174 20 b 194 0 174 9 183 0 b 214 20 205 0 214 9 z m 194 520 b 347 367 278 520 347 452 b 214 215 347 289 289 224 l 214 367 b 194 387 214 378 205 387 b 174 367 183 387 174 378 l 174 215 b 40 367 98 224 40 289 b 194 520 40 452 109 520 z',\r\n        },\r\n        keyboardPedalPed: {\r\n            x_min: 0,\r\n            x_max: 981,\r\n            y_min: -9.677302194242635,\r\n            y_max: 545.0234210524716,\r\n            ha: 554.7007232467142,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 981,\r\n            o: 'm 272 452 b 372 323 297 416 350 354 b 350 222 395 292 395 260 b 230 140 301 180 252 154 b 135 12 212 128 99 80 b 264 40 164 -46 232 7 b 332 98 281 58 303 98 b 389 39 358 98 373 61 b 478 -11 417 1 435 -11 b 622 97 527 -11 559 44 b 740 -10 622 97 666 -10 b 928 95 827 -10 928 95 b 1120 -7 955 27 1042 -28 b 1262 247 1222 21 1275 132 b 815 664 1228 545 907 647 b 758 653 790 668 761 676 b 786 618 755 631 786 618 b 818 606 797 614 808 610 b 1072 434 1007 534 1072 434 b 910 142 900 376 905 198 b 787 78 898 126 844 78 b 708 151 726 78 708 151 b 799 231 708 151 742 181 b 758 457 920 335 850 457 b 609 141 613 457 580 249 b 563 104 609 141 594 123 b 460 139 533 85 486 111 b 398 184 413 189 398 184 b 476 279 398 184 453 226 b 449 410 499 332 449 410 b 362 533 449 410 383 503 b 386 652 341 564 366 611 b 429 713 405 692 429 713 b 549 569 549 682 574 589 b 460 592 514 541 473 581 b 409 608 447 603 429 622 b 408 552 390 593 400 571 b 608 479 458 455 549 438 b 429 778 682 531 672 734 b 0 507 160 827 0 615 b 124 365 0 431 55 365 b 246 498 124 365 236 362 b 221 545 248 535 232 543 b 185 510 209 546 192 540 b 133 465 178 474 159 461 b 140 614 101 469 82 532 b 356 721 220 723 356 721 b 276 560 356 721 298 617 b 272 452 276 560 242 495 z m 751 393 b 771 286 797 393 811 331 b 692 203 738 249 692 203 b 751 393 678 324 705 393 z m 1092 88 b 1004 203 1043 78 1004 132 b 1108 376 1004 360 1108 376 b 1149 209 1129 335 1149 287 b 1092 88 1148 117 1130 96 z m 1353 11 b 1413 78 1386 11 1413 41 b 1353 145 1413 115 1386 145 b 1293 78 1320 145 1293 115 b 1353 11 1293 41 1320 11 z',\r\n        },\r\n        keyboardPedalUp: {\r\n            x_min: 0,\r\n            x_max: 473,\r\n            y_min: 0,\r\n            y_max: 473,\r\n            ha: 473,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 473,\r\n            o: 'm 99 99 b 164 69 120 79 143 69 b 199 82 177 69 190 73 b 210 114 206 89 210 102 b 206 137 210 122 209 130 b 200 160 203 145 200 154 b 210 179 200 166 203 171 l 245 215 b 285 213 255 225 272 219 l 287 213 l 288 212 b 318 183 301 206 318 196 l 318 134 b 291 102 318 112 308 112 b 258 58 274 92 258 76 b 340 0 258 26 294 0 b 423 58 386 0 423 26 b 390 102 423 76 408 92 b 361 134 373 112 361 112 l 361 183 b 392 212 361 196 379 206 b 395 213 393 212 393 213 b 436 215 408 219 426 225 l 471 179 b 480 161 478 171 480 167 b 474 137 480 154 477 147 b 471 115 472 130 471 122 b 482 82 471 102 474 91 b 517 69 491 73 504 69 b 582 99 539 69 562 79 b 612 164 602 120 612 143 b 599 199 612 177 608 190 b 567 210 592 206 579 210 b 544 206 559 210 552 209 b 521 200 536 203 528 200 b 501 210 514 200 508 203 l 467 245 b 468 285 456 255 462 272 l 468 287 b 469 288 468 287 469 287 b 498 318 475 301 485 318 l 547 318 b 579 291 569 318 569 308 b 624 258 589 274 605 258 b 681 340 655 258 681 294 b 624 423 681 386 655 423 b 579 390 605 423 589 408 b 547 361 569 373 569 361 l 498 361 b 469 392 485 361 475 379 b 468 395 469 393 468 393 b 467 436 462 408 456 426 l 501 471 b 520 480 508 478 514 480 b 544 474 527 480 534 477 b 566 471 552 472 559 471 b 599 482 579 471 590 474 b 612 516 608 491 612 503 b 582 580 612 536 602 560 b 516 612 562 600 537 612 b 482 599 503 612 491 608 b 471 566 474 590 471 579 b 474 544 471 559 472 552 b 480 520 477 534 480 527 b 471 501 480 514 478 508 l 436 467 b 395 468 426 456 408 462 b 392 469 393 468 393 469 b 361 498 379 475 361 485 l 361 547 b 390 579 361 569 373 569 b 423 624 408 589 423 605 b 340 681 423 655 386 681 b 258 624 294 681 258 655 b 291 579 258 605 274 589 b 318 547 308 569 318 569 l 318 498 b 288 469 318 485 301 475 l 287 468 l 285 468 b 245 467 272 462 255 456 l 210 501 b 200 521 203 508 200 514 b 206 544 200 528 203 536 b 210 567 209 552 210 559 b 199 599 210 579 206 592 b 164 612 190 608 177 612 b 99 582 143 612 120 602 b 69 517 79 562 69 539 b 82 482 69 504 73 491 b 115 471 91 474 102 471 b 137 474 122 471 130 472 b 161 480 147 477 154 480 b 180 471 167 480 173 478 l 215 436 b 213 395 225 426 219 408 b 212 392 213 393 212 393 b 183 361 206 379 196 361 l 134 361 b 102 390 112 361 112 373 b 58 423 92 408 76 423 b 0 340 26 423 0 386 b 58 258 0 294 26 258 b 102 291 76 258 92 274 b 134 318 112 308 112 318 l 183 318 b 212 288 196 318 206 301 b 213 287 212 287 213 288 l 213 285 b 215 245 219 272 225 255 l 179 210 b 160 200 171 203 166 200 b 137 206 154 200 145 203 b 114 210 130 209 122 210 b 82 199 102 210 89 206 b 69 164 73 190 69 177 b 99 99 69 143 79 120 z m 276 276 b 249 340 262 291 249 320 b 340 432 249 390 289 432 b 432 340 390 432 432 390 b 405 276 432 320 419 291 b 340 249 390 262 360 249 b 276 276 320 249 291 262 z',\r\n        },\r\n        wiggleArpeggiatoUp: {\r\n            x_min: -22,\r\n            x_max: 242,\r\n            y_min: 0,\r\n            y_max: 164,\r\n            ha: 164,\r\n            leftSideBearing: -22,\r\n            advanceWidth: 220,\r\n            o: 'm 343 122 b 323 143 343 122 334 132 b 308 148 318 147 312 148 b 298 144 304 148 301 147 l 282 128 b 274 124 279 125 276 124 b 265 128 268 124 265 128 b 158 220 265 128 173 207 b 112 236 143 232 127 236 b 43 206 82 236 55 219 l -26 137 b -32 125 -30 132 -32 130 b -26 112 -32 118 -26 112 b -6 92 -26 112 -17 102 b 7 86 -1 88 3 86 b 17 91 12 86 14 88 l 33 107 b 42 111 36 109 39 111 b 52 107 48 111 52 107 b 158 16 52 107 144 29 b 204 0 174 4 190 0 b 274 30 235 0 262 17 l 343 99 b 348 111 347 104 348 108 b 343 122 348 118 343 122 z',\r\n        },\r\n        brassMuteClosed: {\r\n            x_min: 0,\r\n            x_max: 312,\r\n            y_min: 0,\r\n            y_max: 312,\r\n            ha: 312,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 312,\r\n            o: 'm 22 256 b 0 225 7 256 0 240 b 22 193 0 209 7 193 l 193 193 l 193 22 b 225 0 193 7 209 0 b 256 22 240 0 256 7 l 256 193 l 428 193 b 449 225 442 193 449 209 b 428 256 449 240 442 256 l 256 256 l 256 428 b 225 449 256 442 240 449 b 193 428 209 449 193 442 l 193 256 z',\r\n        },\r\n    },\r\n    fontFamily: 'Leland',\r\n    resolution: 1000,\r\n    generatedOn: '2021-02-15T19:00:18.664Z',\r\n};\r\n","export const LelandMetrics = {\r\n    name: 'Leland',\r\n    smufl: true,\r\n    stave: {\r\n        padding: 12,\r\n        endPaddingMax: 12,\r\n        endPaddingMin: 6,\r\n        unalignedNotePadding: 10,\r\n    },\r\n    accidental: {\r\n        noteheadAccidentalPadding: 1,\r\n        leftPadding: 2,\r\n        accidentalSpacing: 3,\r\n    },\r\n    clef: {\r\n        default: {\r\n            point: 32,\r\n            width: 26,\r\n        },\r\n        small: {\r\n            point: 26,\r\n            width: 20,\r\n        },\r\n        annotations: {\r\n            '8va': {\r\n                smuflCode: 'timeSig8',\r\n                default: {\r\n                    point: 18,\r\n                    treble: {\r\n                        line: -1.4,\r\n                        shiftX: 12,\r\n                    },\r\n                },\r\n                small: {\r\n                    point: 16,\r\n                    treble: {\r\n                        line: -0.2,\r\n                        shiftX: 8,\r\n                    },\r\n                },\r\n            },\r\n            '8vb': {\r\n                smuflCode: 'timeSig8',\r\n                default: {\r\n                    point: 18,\r\n                    treble: {\r\n                        line: 6,\r\n                        shiftX: 10,\r\n                    },\r\n                    bass: {\r\n                        line: 3.5,\r\n                        shiftX: 1,\r\n                    },\r\n                },\r\n                small: {\r\n                    point: 16,\r\n                    treble: {\r\n                        line: 5.3,\r\n                        shiftX: 6,\r\n                    },\r\n                    bass: {\r\n                        line: 3.1,\r\n                        shiftX: 0.5,\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        // These may no longer be necessary\r\n        lineCount: {\r\n            '8': { point: 55, shiftY: 14 },\r\n            '7': { point: 47, shiftY: 8 },\r\n            '6': { point: 32, shiftY: 1 },\r\n            '5': { point: 30, shiftY: -6 },\r\n            '4': { point: 23, shiftY: -12 },\r\n        },\r\n    },\r\n    pedalMarking: {\r\n        up: {\r\n            point: 40,\r\n        },\r\n        down: {\r\n            point: 34,\r\n        },\r\n    },\r\n    // These are for numeric digits, such as in time signatures\r\n    digits: {\r\n        // used by timesig\r\n        shiftLine: -1,\r\n        point: 34,\r\n        // used by tuplets\r\n        tupletPoint: 22,\r\n        shiftY: -6,\r\n    },\r\n    articulation: {\r\n        articStaccatissimoAbove: {\r\n            padding: 2,\r\n        },\r\n        articStaccatissimoBelow: {\r\n            padding: 2,\r\n        },\r\n    },\r\n    tremolo: {\r\n        default: {\r\n            point: 25,\r\n            spacing: 5,\r\n            offsetYStemUp: -5,\r\n            offsetYStemDown: 5,\r\n            offsetXStemUp: 11,\r\n            offsetXStemDown: 1,\r\n        },\r\n        grace: {\r\n            point: 18,\r\n            spacing: 4,\r\n            offsetYStemUp: -5,\r\n            offsetYStemDown: 5,\r\n            offsetXStemUp: 7,\r\n            offsetXStemDown: 1,\r\n        },\r\n    },\r\n    stem: {\r\n        // These are stem (Y) offsets to the note heads. To shift the\r\n        // noteheads (x-position) themselves, see glyphs.notehead.custom.\r\n        noteHead: {\r\n            noteheadTriangleUpHalf: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadTriangleUpBlack: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadTriangleUpWhole: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXHalf: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXBlack: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXWhole: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadBlack: {\r\n                offsetYBaseStemDown: 2,\r\n            },\r\n            noteheadSquareWhite: {\r\n                offsetYBaseStemDown: -5,\r\n                offsetYBaseStemUp: 5,\r\n            },\r\n        },\r\n    },\r\n    // Values under here are used by the Glyph class to reposition and rescale\r\n    // glyphs based on their category. This should be the first stop for\r\n    // custom font glyph repositioning.\r\n    //\r\n    // The glyph loader first looks up a specific set of settings based on the\r\n    // glyph code, and if not found, uses the defaults from the category. See\r\n    // glyphs.textNote for an example of this.\r\n    //\r\n    // Details in Glyph.lookupFontMetrics.\r\n    glyphs: {\r\n        coda: {\r\n            point: 20,\r\n            shiftX: -7,\r\n            shiftY: 8,\r\n        },\r\n        segno: {\r\n            shiftX: -7,\r\n        },\r\n        flag: {\r\n            shiftX: -0.75,\r\n            tabStem: {\r\n                shiftX: -1.75,\r\n            },\r\n            staveTempo: {\r\n                shiftX: -1,\r\n            },\r\n        },\r\n        clef: {\r\n            gClef: {\r\n                default: { scale: 1.1, shiftY: 1 },\r\n                small: { shiftY: 1.5 },\r\n            },\r\n            fClef: {\r\n                default: { shiftY: -0.5 },\r\n            },\r\n        },\r\n        ornament: {\r\n            ornamentTurn: {\r\n                scale: 1.2,\r\n            },\r\n            ornamentTurnSlash: {\r\n                scale: 1.2,\r\n            },\r\n        },\r\n        stroke: {\r\n            arrowheadBlackDown: {\r\n                straight: {\r\n                    shiftX: -4.5,\r\n                },\r\n                wiggly: {\r\n                    shiftX: -1,\r\n                    shiftY: 1,\r\n                },\r\n            },\r\n            arrowheadBlackUp: {\r\n                straight: {\r\n                    shiftX: -0.85,\r\n                },\r\n                wiggly: {\r\n                    shiftX: -1,\r\n                    shiftY: 1,\r\n                },\r\n            },\r\n        },\r\n        textNote: {\r\n            point: 34,\r\n            breathMarkTick: {\r\n                point: 36,\r\n                shiftY: 9,\r\n            },\r\n            breathMarkComma: {\r\n                point: 36,\r\n            },\r\n            segno: {\r\n                point: 30,\r\n                shiftX: -7,\r\n                shiftY: 8,\r\n            },\r\n            coda: {\r\n                point: 20,\r\n                shiftX: -7,\r\n                shiftY: 8,\r\n            },\r\n            ornamentTrill: {\r\n                shiftX: -8,\r\n                shiftY: 8,\r\n            },\r\n            ornamentTurn: {\r\n                point: 42,\r\n            },\r\n            ornamentTurnSlash: {\r\n                point: 42,\r\n            },\r\n            ornamentMordent: {\r\n                shiftX: -8,\r\n            },\r\n            ornamentShortTrill: {\r\n                shiftX: -8,\r\n            },\r\n        },\r\n        noteHead: {\r\n            minPadding: 2,\r\n            standard: {\r\n                restQuarterStemUp: {\r\n                    point: 35,\r\n                },\r\n                restQuarterStemDown: {\r\n                    point: 35,\r\n                },\r\n            },\r\n            custom: {\r\n                noteheadCircleXStemUp: {\r\n                    shiftX: 1.5,\r\n                },\r\n                noteheadCircleXStemDown: {\r\n                    shiftX: 0.25,\r\n                },\r\n                noteheadDiamondHalfStemUp: {\r\n                    shiftX: 1.5,\r\n                },\r\n                noteheadDiamondBlackStemUp: {\r\n                    shiftX: 1.5,\r\n                },\r\n                noteheadDiamondWholeStemUp: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadXHalfStemUp: {\r\n                    shiftX: -2,\r\n                },\r\n                noteheadXHalfStemDown: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadXWholeStemUp: {\r\n                    shiftX: -4,\r\n                },\r\n                noteheadXWholeStemDown: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadSquareWhiteStemDown: {\r\n                    shiftX: 0.25,\r\n                },\r\n                noteheadSquareWhiteStemUp: {\r\n                    shiftX: -0.75,\r\n                },\r\n                noteheadSquareBlackStemUp: {\r\n                    shiftX: -0.75,\r\n                },\r\n                noteheadTriangleUpWholeStemUp: {\r\n                    shiftX: -0.75,\r\n                },\r\n            },\r\n        },\r\n        chordSymbol: {\r\n            global: {\r\n                superscriptOffset: -400,\r\n                subscriptOffset: 300,\r\n                kerningOffset: -250,\r\n                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\r\n                upperKerningText: ['A', 'L'],\r\n                spacing: 100,\r\n                superSubRatio: 0.66,\r\n            },\r\n            csymDiminished: {\r\n                scale: 0.8,\r\n                leftSideBearing: -32,\r\n                advanceWidth: 506,\r\n                yOffset: 0,\r\n            },\r\n            csymHalfDiminished: {\r\n                scale: 0.8,\r\n                leftSideBearing: -32,\r\n                advanceWidth: 506,\r\n                yOffset: 0,\r\n            },\r\n            csymAugmented: {\r\n                scale: 1,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 530,\r\n                yOffset: 0,\r\n            },\r\n            csymParensLeftTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: -20,\r\n                advanceWidth: 184,\r\n                yOffset: 250,\r\n            },\r\n            csymParensRightTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 189,\r\n                yOffset: 250,\r\n            },\r\n            csymBracketLeftTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 328,\r\n                yOffset: 0,\r\n            },\r\n            csymBracketRightTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 1,\r\n                advanceWidth: 600,\r\n                yOffset: 0,\r\n            },\r\n            csymParensLeftVeryTall: {\r\n                scale: 0.9,\r\n                leftSideBearing: 50,\r\n                advanceWidth: 121,\r\n                yOffset: 350,\r\n            },\r\n            csymParensRightVeryTall: {\r\n                scale: 0.9,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 111,\r\n                yOffset: 350,\r\n            },\r\n            csymDiagonalArrangementSlash: {\r\n                scale: 0.6,\r\n                leftSideBearing: -1,\r\n                advanceWidth: 990,\r\n                yOffset: 0,\r\n            },\r\n            csymMinor: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 482,\r\n                yOffset: 0,\r\n            },\r\n            csymMajorSeventh: {\r\n                scale: 0.9,\r\n                leftSideBearing: 200,\r\n                yOffset: 0,\r\n                advanceWidth: 600,\r\n            },\r\n            accidentalSharp: {\r\n                scale: 0.75,\r\n                leftSideBearing: 20,\r\n                advanceWidth: 250,\r\n                yOffset: -302,\r\n            },\r\n            accidentalFlat: {\r\n                scale: 0.9,\r\n                leftSideBearing: -20,\r\n                advanceWidth: 226,\r\n                yOffset: -184,\r\n            },\r\n        },\r\n        jazzOrnaments: {\r\n            brassScoop: {\r\n                scale: 1.0,\r\n                xOffset: -12,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 10,\r\n            },\r\n            brassDoitMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 15,\r\n            },\r\n            brassFallLipShort: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassLiftMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 5,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassFallRoughMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 28,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassBend: {\r\n                scale: 1.0,\r\n                xOffset: 2,\r\n                yOffset: -8,\r\n                stemUpYOffset: 25,\r\n                reportedWidth: 5,\r\n            },\r\n            brassMuteClosed: {\r\n                scale: 1.0,\r\n                xOffset: 3,\r\n                yOffset: -8,\r\n                stemUpYOffset: 25,\r\n                reportedWidth: 5,\r\n            },\r\n            brassMuteOpen: {\r\n                scale: 1.0,\r\n                xOffset: 3,\r\n                yOffset: -7,\r\n                stemUpYOffset: 25,\r\n                reportedWidth: 5,\r\n            },\r\n            brassFlip: {\r\n                scale: 1.0,\r\n                xOffset: 10,\r\n                yOffset: -4,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassJazzTurn: {\r\n                scale: 1.0,\r\n                xOffset: 6,\r\n                yOffset: -4,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassSmear: {\r\n                scale: 1.0,\r\n                xOffset: 10,\r\n                yOffset: -4,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n        },\r\n    },\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// vexflow.js statically bundles & preloads all of our music engraving fonts.\r\nimport { loadBravura } from './load_bravura';\r\nimport { loadCustom } from './load_custom';\r\nimport { loadGonville } from './load_gonville';\r\nimport { loadLeland } from './load_leland';\r\nimport { loadPetaluma } from './load_petaluma';\r\n// ADD_MUSIC_FONT\r\n// import { loadXXX } from './load_xxx';\r\n// Populate our font \"database\" with all our music fonts.\r\nexport function loadAllMusicFonts() {\r\n    loadBravura();\r\n    loadGonville();\r\n    loadPetaluma();\r\n    loadCustom();\r\n    loadLeland();\r\n    // ADD_MUSIC_FONT\r\n    // loadXXX();\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// If you are adding a new music engraving font, search for instances of ADD_MUSIC_FONT throughout the code base.\r\n// To compile your new font into vexflow.js, take a look at src/fonts/load_all.ts\r\n// You can export a font module which can be dynamically loaded by vexflow-core.js (see: Gruntfile.js).\r\n// ADD_MUSIC_FONT\r\n// To add a new music engraving font XXX, make a copy of this file and name it load_xxx.ts.\r\n// Then you will need to generate xxx_glyphs.ts and xxx_metrics.ts.\r\n// xxx_glyphs.ts is created by tools/fonts/fontgen_smufl.js\r\n// xxx_metrics.ts is created by hand. You could copy bravura_metrics.ts and modify/remove/add entries where necessary.\r\nimport { Font } from '../font';\r\nimport { BravuraFont } from './bravura_glyphs';\r\nimport { BravuraMetrics } from './bravura_metrics';\r\nexport function loadBravura() {\r\n    Font.load('Bravura', BravuraFont, BravuraMetrics);\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Font } from '../font';\r\nimport { CustomFont } from './custom_glyphs';\r\nimport { CustomMetrics } from './custom_metrics';\r\nexport function loadCustom() {\r\n    Font.load('Custom', CustomFont, CustomMetrics);\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Font } from '../font';\r\nimport { GonvilleFont } from './gonville_glyphs';\r\nimport { GonvilleMetrics } from './gonville_metrics';\r\nexport function loadGonville() {\r\n    Font.load('Gonville', GonvilleFont, GonvilleMetrics);\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// If you are adding a new music engraving font, search for instances of ADD_MUSIC_FONT throughout the code base.\r\n// To compile your new font into vexflow.js, take a look at src/fonts/load_all.ts\r\n// You can export a font module which can be dynamically loaded by vexflow-core.js (see: Gruntfile.js).\r\n// ADD_MUSIC_FONT\r\n// To add a new music engraving font XXX, make a copy of this file and name it load_xxx.ts.\r\n// Then you will need to generate xxx_glyphs.ts and xxx_metrics.ts.\r\n// xxx_glyphs.ts is created by tools/fonts/fontgen_smufl.js\r\n// xxx_metrics.ts is created by hand. You could copy bravura_metrics.ts and modify/remove/add entries where necessary.\r\nimport { Font } from '../font';\r\nimport { LelandFont } from './leland_glyphs';\r\nimport { LelandMetrics } from './leland_metrics';\r\nexport function loadLeland() {\r\n    Font.load('Leland', LelandFont, LelandMetrics);\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Font } from '../font';\r\nimport { PetalumaFont } from './petaluma_glyphs';\r\nimport { PetalumaMetrics } from './petaluma_metrics';\r\nexport function loadPetaluma() {\r\n    Font.load('Petaluma', PetalumaFont, PetalumaMetrics);\r\n}\r\n","export const PetalumaFont = {\r\n    glyphs: {\r\n        bracketTop: {\r\n            x_min: 0,\r\n            x_max: 508,\r\n            y_min: 0,\r\n            y_max: 370,\r\n            ha: 370,\r\n            o: 'm 22 0 b 122 0 55 1 89 0 l 157 0 b 713 376 425 0 622 137 b 732 467 724 406 732 436 b 726 514 732 482 730 498 b 711 533 723 528 719 533 b 693 526 707 533 700 530 b 674 498 683 520 678 508 b 635 406 662 467 652 435 b 310 164 560 281 458 193 b 154 151 258 154 206 151 b 39 154 117 151 78 154 b 1 120 17 154 4 145 b 0 84 0 108 0 96 b 0 20 0 63 1 40 b 22 0 0 4 7 0 z',\r\n        },\r\n        bracketBottom: {\r\n            x_min: 0,\r\n            x_max: 496,\r\n            y_min: -393,\r\n            y_max: 0,\r\n            ha: 393,\r\n            o: 'm 696 -566 b 711 -539 713 -566 708 -549 b 714 -521 713 -533 714 -527 b 713 -508 714 -517 713 -513 b 661 -327 706 -445 688 -384 b 392 -42 603 -203 513 -109 b 206 0 331 -7 266 0 b 160 -1 190 0 174 -1 b 26 -1 107 -1 66 -3 b 0 -19 12 -1 0 -4 l 0 -23 b 3 -50 1 -32 3 -42 b 1 -86 3 -62 1 -73 b 4 -118 1 -96 1 -108 b 45 -151 10 -145 23 -154 b 180 -143 89 -144 135 -145 b 621 -419 392 -135 523 -236 b 662 -539 641 -456 655 -497 b 696 -566 667 -557 680 -566 z',\r\n        },\r\n        barlineTick: {\r\n            x_min: 0,\r\n            x_max: 56.036101509664164,\r\n            y_min: 876.905249806889,\r\n            y_max: 1121.5430338167066,\r\n            ha: 244.63778400981766,\r\n            o: 'm 42 1263 b 66 1287 62 1261 66 1272 b 81 1583 65 1387 72 1485 b 35 1614 82 1610 53 1610 b 14 1591 17 1619 16 1604 b 0 1408 7 1525 0 1459 l 0 1292 b 42 1263 1 1263 23 1266 z',\r\n        },\r\n        breathMarkTick: {\r\n            x_min: 0,\r\n            x_max: 568,\r\n            y_min: 0,\r\n            y_max: 621,\r\n            ha: 621,\r\n            o: 'm 258 0 b 278 39 276 0 274 24 b 279 56 279 45 279 50 l 279 73 b 278 117 279 88 278 102 b 281 148 278 127 279 138 b 536 600 312 330 387 487 b 744 719 600 651 670 690 b 815 779 775 730 808 740 b 818 824 818 793 818 808 b 815 868 818 838 818 852 b 796 894 814 881 808 894 b 779 888 791 894 786 893 b 719 864 760 878 739 871 b 372 602 580 806 459 724 b 229 252 298 498 251 383 b 220 268 225 262 222 264 b 209 302 217 279 213 291 b 75 527 181 387 143 467 b 16 563 58 543 39 573 b 0 539 3 557 0 549 b 12 492 0 524 9 507 b 56 400 19 459 22 425 b 163 269 104 367 138 323 b 238 36 197 194 216 115 b 258 0 242 22 243 0 z',\r\n        },\r\n        segno: {\r\n            x_min: 0,\r\n            x_max: 798,\r\n            y_min: -65,\r\n            y_max: 806,\r\n            ha: 871,\r\n            o: 'm 16 -94 b 66 -69 39 -92 53 -85 b 177 59 102 -26 138 17 b 543 456 298 192 420 324 b 726 300 615 420 680 373 b 753 217 744 271 753 243 b 655 112 753 170 719 131 b 599 104 636 107 618 104 b 461 173 544 104 495 128 b 432 190 454 183 444 190 b 409 179 425 190 418 187 b 359 118 390 160 373 141 b 341 72 347 101 341 86 b 373 24 341 56 351 40 b 409 6 384 17 396 10 b 550 -13 454 -12 501 -14 b 599 -6 566 -12 583 -10 b 864 213 720 27 806 104 b 886 300 878 242 886 271 b 857 395 886 331 877 363 b 799 467 840 420 821 445 b 648 572 755 513 704 546 b 1110 1083 802 743 955 914 b 1140 1129 1123 1097 1136 1110 b 1149 1148 1142 1135 1149 1142 b 1145 1153 1149 1149 1148 1152 b 1123 1161 1139 1158 1130 1161 b 1109 1156 1119 1161 1113 1159 b 1089 1138 1102 1151 1094 1145 b 946 988 1040 1089 989 1041 b 595 602 834 855 711 732 l 590 598 l 549 615 b 432 793 462 647 432 723 b 534 888 432 851 474 888 b 671 834 588 888 631 864 b 710 818 684 824 696 818 b 724 821 714 818 719 819 b 809 883 757 834 788 852 b 816 901 814 890 816 896 b 802 923 816 910 812 916 b 706 984 770 945 742 971 b 593 1011 668 998 631 1011 b 516 991 567 1011 541 1005 b 333 799 433 949 380 876 b 302 693 312 765 302 729 b 330 589 302 658 311 624 b 469 488 360 533 415 511 b 485 482 475 487 480 485 b 266 249 412 405 338 327 b 121 88 217 196 170 141 b 9 -65 78 40 37 -7 b 0 -85 4 -72 0 -79 b 16 -94 0 -91 4 -94 z m 861 536 b 927 575 890 539 909 557 b 965 628 952 598 965 613 b 926 680 965 644 952 658 b 865 713 900 701 883 713 b 805 667 845 713 828 698 b 768 611 791 649 770 631 b 812 564 766 589 798 582 b 861 536 824 550 840 537 z m 251 350 b 363 436 285 348 353 403 b 354 456 366 448 360 452 b 271 518 327 477 298 497 b 243 528 261 526 252 528 b 210 513 232 528 222 523 b 157 454 190 494 176 472 b 141 428 147 444 141 436 b 158 406 141 420 147 413 b 216 361 180 393 197 376 b 245 350 225 356 235 350 z',\r\n        },\r\n        coda: {\r\n            x_min: 0,\r\n            x_max: 1380,\r\n            y_min: -196,\r\n            y_max: 1037,\r\n            ha: 1233,\r\n            o: 'm 1028 -282 b 1057 -245 1045 -282 1053 -261 b 1060 -203 1060 -232 1060 -217 b 1063 9 1060 -132 1061 -62 b 1390 194 1192 22 1303 81 b 1531 543 1467 298 1512 415 b 1532 556 1531 547 1532 552 b 1904 559 1656 557 1780 559 b 1950 582 1920 559 1941 569 b 1987 674 1970 609 1987 638 b 1984 698 1987 681 1986 690 b 1950 700 1973 698 1961 700 l 1941 700 l 1545 696 b 1535 776 1545 723 1541 749 b 1103 1113 1477 996 1326 1107 b 1080 1115 1096 1115 1087 1115 b 1081 1322 1080 1184 1080 1253 b 1079 1467 1083 1371 1081 1418 b 1061 1493 1079 1476 1080 1493 l 1060 1493 b 1028 1467 1044 1490 1031 1485 b 1020 1403 1025 1446 1020 1424 b 1017 1110 1020 1305 1018 1208 l 962 1106 b 569 914 808 1087 671 1035 b 451 683 510 844 472 766 l 161 678 b 118 680 148 678 132 680 b 79 670 101 680 86 678 b 0 544 48 636 29 592 l 37 544 l 429 549 b 428 518 428 539 428 528 b 488 285 428 435 458 360 b 681 81 526 192 593 124 b 946 9 763 40 854 19 b 1008 6 966 7 988 6 b 1005 -137 1008 -42 1005 -89 b 1012 -243 1005 -173 1005 -209 b 1028 -282 1015 -258 1011 -282 z m 1074 690 b 1079 935 1077 772 1077 852 b 1326 855 1166 932 1250 909 b 1446 694 1385 814 1426 759 b 1269 693 1387 694 1328 693 b 1074 690 1204 693 1139 691 z m 577 684 b 766 874 618 763 678 828 b 989 932 837 912 913 923 b 1015 933 998 932 1007 933 b 1014 822 1015 896 1014 860 b 1011 688 1012 791 1012 743 z m 1067 184 b 1071 553 1070 307 1068 429 b 1439 556 1194 553 1316 554 b 1437 554 1439 554 1437 554 b 1341 337 1413 478 1387 402 b 1119 192 1286 261 1211 212 b 1067 184 1102 189 1084 186 z m 1008 180 b 660 264 886 181 770 212 b 524 471 570 305 524 374 b 528 524 524 488 526 505 l 533 549 b 792 552 619 550 706 550 b 1009 553 865 553 937 552 b 1008 180 1009 428 1008 288 z',\r\n        },\r\n        gClef: {\r\n            x_min: 0,\r\n            x_max: 664,\r\n            y_min: -559,\r\n            y_max: 1009,\r\n            ha: 1568,\r\n            o: 'm 343 -805 b 366 -801 350 -805 357 -804 b 409 -773 383 -795 397 -786 b 582 -328 528 -648 577 -497 b 583 -294 582 -315 583 -294 b 612 -279 583 -294 603 -282 b 747 -197 660 -256 706 -230 b 949 143 857 -109 920 10 b 956 206 955 164 956 186 b 791 384 956 297 906 363 b 704 393 762 390 733 393 b 498 336 632 393 563 374 b 481 325 490 331 481 325 l 444 465 b 442 485 442 472 442 485 b 609 880 442 485 589 746 b 619 996 616 919 619 958 b 613 1084 619 1027 618 1056 b 534 1387 599 1188 560 1286 b 482 1453 527 1417 517 1453 b 422 1407 456 1453 438 1428 b 305 1063 348 1305 312 1188 b 304 1002 304 1043 304 1022 b 338 654 304 886 323 769 b 343 629 338 645 341 636 b 144 356 278 537 206 451 b 23 144 101 288 53 220 b 0 20 7 107 0 63 b 82 -210 0 -69 30 -160 b 207 -288 112 -239 160 -271 b 410 -328 274 -312 340 -328 b 474 -324 431 -328 452 -327 l 491 -321 b 491 -341 491 -321 492 -334 b 402 -585 475 -428 454 -513 b 294 -668 374 -622 348 -664 b 271 -693 278 -670 271 -680 b 274 -708 271 -698 272 -703 b 302 -775 282 -730 292 -753 b 343 -805 311 -795 325 -805 z m 400 717 b 382 922 389 786 382 854 b 481 1286 382 1047 408 1169 b 507 1125 498 1233 507 1179 b 500 1040 507 1097 504 1068 b 400 717 481 927 455 818 z m 252 -135 b 196 -121 232 -134 215 -127 b 117 -69 158 -108 127 -94 b 111 -32 112 -58 111 -45 b 117 19 111 -16 114 1 b 130 56 118 27 127 52 b 324 337 186 156 253 246 l 384 416 l 395 384 b 416 291 406 348 416 291 b 350 213 416 291 376 239 b 243 -42 278 143 243 55 b 251 -117 243 -66 246 -91 b 252 -135 252 -122 252 -127 z m 563 -91 b 510 168 552 3 530 78 b 513 192 508 179 508 186 b 624 202 550 199 586 202 b 730 192 660 202 694 199 b 850 141 773 183 816 176 b 858 134 852 138 855 135 b 595 -121 801 19 716 -68 l 569 -131 z m 410 -160 b 311 -147 360 -160 311 -147 b 307 -98 311 -147 307 -127 b 314 -33 307 -79 308 -56 b 429 131 328 36 377 85 b 441 138 433 135 438 138 b 449 122 446 138 448 132 b 490 -131 462 37 484 -46 b 490 -153 491 -140 490 -153 b 410 -160 490 -153 452 -163 z',\r\n        },\r\n        cClef: {\r\n            x_min: 0,\r\n            x_max: 731,\r\n            y_min: -543,\r\n            y_max: 543,\r\n            ha: 1086,\r\n            o: 'm 131 -782 b 141 -755 138 -782 140 -773 b 147 -490 143 -667 145 -577 b 160 207 150 -258 153 -24 b 168 618 164 344 158 481 b 81 768 173 690 132 732 b 45 782 66 778 55 782 b 3 740 26 782 13 768 b 0 724 1 736 0 730 l 1 710 b 4 596 4 672 4 634 l 4 382 b 9 102 4 288 4 196 b 17 -301 13 -32 10 -166 l 17 -672 b 50 -736 17 -701 27 -720 b 109 -772 69 -749 91 -759 b 131 -782 120 -778 127 -782 z m 615 -770 b 881 -684 710 -770 801 -739 b 1020 -395 986 -612 1020 -510 b 1017 -334 1020 -374 1018 -354 b 769 -62 1007 -209 896 -75 b 746 -60 762 -60 755 -60 b 639 -73 710 -60 675 -69 b 524 -109 598 -79 560 -92 b 528 -36 526 -85 528 -60 b 527 -4 528 -26 528 -14 b 528 39 527 10 528 24 b 526 99 528 59 527 79 b 592 94 549 95 570 94 b 648 99 611 94 629 95 b 912 157 744 94 844 117 b 1053 377 1009 215 1053 284 b 1050 425 1053 393 1053 409 b 914 665 1037 521 986 602 b 717 753 855 717 791 753 b 626 734 688 753 658 747 l 462 665 b 347 500 374 628 347 580 b 350 449 347 484 348 468 b 392 419 353 428 367 416 b 492 438 425 425 459 428 b 541 498 524 448 541 468 b 540 514 541 503 541 508 b 537 546 537 524 537 536 b 573 639 537 580 550 611 b 606 657 582 649 593 657 l 609 657 b 716 622 647 652 684 647 b 834 372 801 556 834 469 b 831 323 834 356 832 338 b 743 187 825 266 795 217 b 710 176 732 180 720 176 b 694 179 704 176 700 177 b 527 223 638 193 582 206 b 495 229 516 228 505 229 b 454 220 481 229 468 225 b 395 189 432 213 415 200 b 363 180 384 186 374 181 b 348 168 356 179 348 176 b 340 161 343 167 340 164 b 347 150 340 157 343 154 b 356 147 348 148 353 147 b 364 92 361 130 363 111 b 369 -37 367 49 369 6 b 363 -154 369 -76 367 -115 b 357 -236 360 -183 357 -210 b 376 -264 357 -253 361 -259 b 456 -289 402 -284 429 -289 b 521 -282 478 -289 500 -285 b 549 -255 537 -279 546 -271 b 598 -177 556 -225 577 -202 b 622 -164 605 -168 613 -164 b 636 -167 626 -164 631 -166 b 749 -225 678 -177 714 -199 b 848 -405 814 -276 848 -337 b 824 -507 848 -436 840 -471 b 657 -657 792 -582 730 -625 b 608 -668 638 -664 622 -668 b 534 -602 572 -668 547 -645 b 513 -575 530 -589 523 -575 b 507 -576 510 -575 508 -575 b 478 -582 497 -580 488 -582 b 405 -570 454 -582 428 -570 b 389 -572 399 -570 395 -570 l 363 -572 b 321 -575 348 -572 333 -569 l 321 631 b 323 662 323 641 323 652 b 315 716 323 681 321 698 b 304 736 314 723 317 736 l 302 736 b 281 716 294 734 285 729 b 275 665 276 700 275 683 l 275 382 b 276 99 275 288 275 193 b 279 -170 278 10 276 -81 b 284 -399 282 -246 284 -323 b 282 -629 284 -475 282 -553 b 289 -721 282 -660 289 -690 b 300 -736 289 -727 291 -736 b 312 -724 307 -736 310 -730 b 321 -667 323 -706 321 -687 l 321 -632 l 328 -644 l 340 -657 b 510 -757 386 -707 445 -740 b 615 -770 546 -766 580 -770 z',\r\n        },\r\n        fClef: {\r\n            x_min: 0,\r\n            x_max: 776,\r\n            y_min: -496,\r\n            y_max: 216,\r\n            ha: 712,\r\n            o: 'm 402 -706 b 804 -405 592 -678 716 -566 b 876 -53 861 -298 874 -183 b 868 33 876 -32 873 1 b 560 311 845 217 723 311 b 524 310 549 311 536 311 b 131 134 373 297 239 242 b 17 -29 84 86 37 39 b 9 -89 12 -50 9 -71 b 112 -238 9 -154 43 -206 b 124 -243 117 -239 120 -242 b 186 -261 145 -255 166 -261 b 268 -228 215 -261 242 -249 b 351 -59 325 -181 351 -124 b 343 10 351 -36 348 -13 b 340 36 341 19 340 27 b 409 105 340 75 363 102 b 441 107 420 107 431 107 b 624 36 510 107 573 86 b 744 -200 688 -27 724 -109 b 747 -230 747 -210 747 -222 b 717 -323 747 -264 736 -292 b 608 -445 688 -370 654 -410 b 307 -541 518 -513 415 -541 l 213 -541 b 39 -521 154 -541 96 -539 b 0 -552 17 -514 0 -531 b 1 -564 0 -556 0 -560 b 17 -611 6 -580 10 -596 b 101 -694 35 -648 50 -684 b 288 -714 164 -707 225 -714 b 402 -706 325 -714 363 -711 z m 1018 92 b 1080 118 1041 91 1068 96 b 1117 219 1099 150 1117 180 b 1113 252 1117 229 1116 240 b 1045 288 1102 297 1068 276 b 1017 262 1028 297 1024 274 b 984 124 989 220 996 170 b 1008 91 979 108 986 91 z m 972 -281 b 1070 -148 1024 -279 1070 -210 b 1025 -105 1070 -105 1045 -112 b 989 -127 1004 -96 998 -114 b 949 -249 963 -164 963 -209 b 969 -281 943 -265 949 -281 z',\r\n        },\r\n        unpitchedPercussionClef1: {\r\n            x_min: 0,\r\n            x_max: 379.13761966945304,\r\n            y_min: -250,\r\n            y_max: 250,\r\n            ha: 500,\r\n            o: 'm 481 -360 b 507 -357 491 -360 500 -360 b 546 -295 541 -346 547 -325 b 536 79 543 -170 540 -46 b 523 311 533 157 534 235 b 475 359 518 340 508 359 b 425 360 459 359 442 360 b 400 359 416 360 409 360 b 337 294 348 353 340 347 l 337 -73 b 336 -264 337 -137 337 -200 b 343 -294 336 -274 338 -284 b 481 -360 359 -330 431 -360 z m 144 -341 b 207 -320 167 -341 189 -331 b 217 -301 215 -315 217 -308 b 210 -262 217 -289 210 -275 b 228 187 212 -112 209 37 b 228 287 228 220 229 253 b 174 353 228 336 222 343 b 120 359 157 357 138 359 b 48 357 96 359 72 356 b 17 323 29 357 19 344 b 7 120 16 255 9 187 b 6 -109 6 43 6 -33 l 6 -204 b 0 -251 6 -220 0 -235 b 3 -269 0 -256 0 -262 b 127 -340 24 -330 79 -328 b 144 -341 132 -341 138 -341 z',\r\n        },\r\n        '6stringTabClef': {\r\n            x_min: 0,\r\n            x_max: 438,\r\n            y_min: -768,\r\n            y_max: 767,\r\n            ha: 1535,\r\n            o: 'm 369 438 b 374 439 370 438 372 438 b 384 462 383 444 384 452 l 384 474 b 390 697 386 547 390 622 b 373 1002 390 799 390 901 l 533 1002 b 560 1001 541 1004 552 1001 b 573 1007 567 1001 572 1002 b 546 1050 579 1025 559 1038 b 536 1056 543 1053 539 1053 b 324 1104 472 1102 397 1104 b 72 1090 238 1104 154 1099 b 55 1093 66 1090 60 1092 b 37 1073 46 1093 37 1089 b 60 1045 37 1061 48 1051 b 203 1001 105 1022 151 1001 b 233 1004 213 1001 223 1002 b 246 1005 238 1004 243 1005 b 272 975 264 1005 272 996 l 272 965 b 258 596 264 842 265 719 b 315 474 253 540 272 504 l 343 455 b 369 438 351 448 357 438 z m 114 -320 b 127 -304 120 -320 124 -315 b 171 -174 141 -261 158 -219 b 222 -135 179 -147 196 -137 b 426 -122 289 -131 359 -128 b 498 -164 462 -120 482 -127 b 628 -301 521 -226 575 -264 b 631 -288 631 -295 631 -291 b 628 -269 631 -281 629 -276 b 569 -134 616 -220 589 -179 b 408 225 514 -14 462 107 b 314 357 384 274 351 318 b 278 380 298 372 288 379 b 251 351 268 380 261 372 b 4 -209 156 171 75 -17 b 0 -228 1 -215 0 -222 b 19 -258 0 -240 7 -249 b 102 -314 45 -279 75 -294 b 114 -320 107 -318 111 -320 z m 425 6 b 360 20 403 17 382 20 b 274 14 331 20 302 14 l 246 14 l 340 206 b 425 6 369 137 395 75 z m 245 -1106 b 281 -1104 256 -1106 269 -1106 b 511 -888 400 -1094 511 -1035 b 454 -688 511 -814 504 -744 b 448 -678 449 -685 448 -681 b 454 -667 448 -675 449 -671 b 504 -497 503 -619 507 -559 b 324 -288 500 -383 436 -308 b 295 -287 314 -287 304 -287 l 282 -287 b 115 -330 223 -287 168 -307 b 94 -366 102 -336 94 -348 l 94 -370 b 96 -435 96 -392 96 -413 b 73 -858 89 -576 71 -717 b 78 -919 73 -878 78 -899 b 72 -950 78 -930 76 -940 b 63 -992 66 -965 63 -978 b 66 -1015 63 -999 65 -1008 b 173 -1104 84 -1106 84 -1106 b 245 -1106 197 -1104 220 -1104 z m 161 -622 b 147 -618 156 -622 151 -621 b 140 -600 141 -612 140 -606 b 144 -564 140 -589 144 -575 b 143 -554 144 -560 144 -557 l 143 -546 b 220 -451 144 -467 143 -465 b 278 -445 239 -446 259 -444 b 418 -497 328 -445 376 -461 b 429 -516 426 -504 429 -510 b 415 -533 429 -521 423 -527 b 219 -608 357 -579 287 -590 b 215 -609 217 -608 216 -609 b 161 -622 197 -609 177 -622 z m 154 -953 b 130 -933 135 -953 130 -948 l 130 -865 l 128 -865 b 135 -788 130 -838 124 -808 b 203 -769 145 -769 180 -776 b 259 -762 223 -765 242 -762 b 441 -852 330 -762 386 -805 b 449 -867 446 -858 449 -863 b 436 -884 449 -874 444 -878 b 318 -942 402 -914 363 -935 b 154 -953 264 -950 209 -953 z',\r\n        },\r\n        timeSig0: {\r\n            x_min: 20,\r\n            x_max: 513,\r\n            y_min: -358.159536277652,\r\n            y_max: 359,\r\n            ha: 717.159536277652,\r\n            o: 'm 341 -516 b 420 -510 367 -516 395 -514 b 675 -338 533 -494 622 -448 b 737 -92 716 -256 734 -171 b 739 -35 739 -73 739 -53 b 680 305 739 86 720 207 b 400 517 622 449 537 517 b 337 514 380 517 359 517 b 289 507 321 511 305 513 b 91 317 192 477 127 412 b 29 9 50 212 29 108 b 217 -458 29 -157 88 -312 b 341 -516 251 -494 291 -518 z m 412 -452 b 359 -425 393 -452 376 -444 b 187 14 242 -301 179 -158 b 268 334 193 127 212 235 b 387 448 295 383 330 428 b 406 452 395 451 400 452 b 428 444 413 452 420 449 b 517 324 471 413 497 372 b 586 -29 560 222 586 86 b 556 -271 586 -112 585 -193 b 468 -422 536 -327 508 -377 b 412 -452 449 -442 431 -452 z',\r\n        },\r\n        timeSig1: {\r\n            x_min: 20,\r\n            x_max: 283,\r\n            y_min: -364,\r\n            y_max: 366,\r\n            ha: 730,\r\n            o: 'm 264 -524 b 357 -510 297 -524 325 -516 b 374 -490 369 -508 374 -501 b 380 -438 376 -472 380 -455 l 406 246 b 408 301 408 265 408 282 b 400 445 408 348 405 396 b 288 527 395 491 338 527 b 253 520 276 527 264 526 b 240 508 249 517 245 513 b 49 409 192 445 127 413 b 29 396 33 408 29 403 b 32 380 29 392 30 386 b 59 363 36 366 49 364 b 164 348 95 356 130 348 b 222 357 183 348 203 351 b 238 361 228 360 233 360 b 252 334 248 361 252 353 b 243 59 252 242 249 150 b 219 -490 229 -124 233 -307 b 264 -524 217 -516 232 -524 z',\r\n        },\r\n        timeSig2: {\r\n            x_min: 20,\r\n            x_max: 660.4636303241031,\r\n            y_min: -378.7201231608281,\r\n            y_max: 382,\r\n            ha: 760.720123160828,\r\n            o: 'm 99 -543 b 130 -533 111 -550 121 -540 b 255 -448 168 -501 213 -475 b 338 -425 282 -431 310 -425 b 392 -431 356 -425 374 -426 b 485 -462 423 -438 454 -451 b 648 -497 540 -482 595 -497 b 834 -441 711 -497 773 -480 b 950 -242 906 -395 958 -334 b 942 -210 950 -230 950 -215 b 912 -220 932 -204 920 -213 b 861 -264 894 -235 877 -248 b 775 -317 835 -289 808 -305 b 675 -334 742 -328 708 -334 b 510 -295 619 -334 563 -318 b 372 -264 465 -278 420 -264 b 305 -272 350 -264 328 -266 b 331 -242 318 -256 324 -249 b 490 -73 386 -187 438 -131 b 675 340 595 43 664 180 b 677 369 677 350 677 360 b 556 536 677 461 638 508 b 468 550 526 546 497 550 b 297 508 409 550 353 533 b 111 354 220 475 168 412 b 29 197 65 308 29 261 b 32 164 29 187 29 176 b 29 140 33 157 29 147 b 43 125 29 132 32 125 b 73 147 55 125 65 138 b 86 163 79 153 82 158 b 238 320 134 219 183 272 b 425 389 292 367 360 389 b 575 341 480 389 531 373 b 606 298 590 330 606 317 b 600 278 606 292 603 285 b 501 107 576 217 544 158 b 304 -104 439 33 372 -35 b 111 -356 230 -180 167 -265 b 84 -446 92 -386 84 -415 b 86 -481 84 -458 85 -469 b 88 -514 88 -491 88 -503 b 99 -543 89 -526 91 -537 z',\r\n        },\r\n        timeSig3: {\r\n            x_min: 19.824321427094187,\r\n            x_max: 540,\r\n            y_min: -392,\r\n            y_max: 392,\r\n            ha: 784,\r\n            o: 'm 216 -540 b 354 -564 264 -556 310 -564 b 605 -465 445 -564 530 -530 b 729 -161 697 -383 729 -275 b 724 -82 729 -135 727 -108 b 589 95 716 -1 670 62 b 523 114 567 102 546 108 b 750 418 606 213 677 315 b 778 503 769 444 778 472 b 773 540 778 514 776 527 b 750 564 769 557 762 564 b 736 562 746 564 742 563 b 641 552 704 553 672 552 b 402 554 562 552 481 554 l 346 554 b 84 546 258 554 170 554 b 36 501 55 543 40 531 b 29 412 30 472 32 442 b 52 384 27 393 32 384 l 56 384 b 210 392 107 389 158 392 l 602 392 b 354 108 523 285 445 192 b 246 -65 300 58 246 12 b 252 -108 246 -78 248 -92 l 252 -111 b 264 -141 251 -122 251 -135 b 291 -132 274 -145 284 -140 b 425 -72 328 -95 377 -84 b 475 -65 442 -68 459 -65 b 592 -108 517 -65 557 -79 b 645 -179 615 -125 645 -147 b 642 -194 645 -184 644 -189 b 485 -376 616 -278 569 -344 b 361 -399 444 -392 402 -399 b 151 -340 289 -399 219 -376 b 88 -275 122 -323 98 -310 b 71 -249 86 -268 85 -249 b 63 -251 68 -249 66 -249 b 36 -288 48 -255 36 -266 b 55 -423 33 -336 45 -377 b 101 -482 60 -448 78 -468 b 216 -540 138 -504 174 -526 z',\r\n        },\r\n        timeSig4: {\r\n            x_min: 20,\r\n            x_max: 633.0785282750762,\r\n            y_min: -489.59088556716864,\r\n            y_max: 491.18559127100053,\r\n            ha: 980.7764768381692,\r\n            o: 'm 608 -704 b 641 -684 622 -708 634 -696 b 667 -602 660 -660 662 -631 b 685 -190 683 -465 680 -327 l 685 -176 b 831 -127 736 -166 783 -148 b 912 0 901 -94 913 -76 b 886 53 912 36 904 52 b 848 40 877 53 864 49 l 838 36 b 687 -13 789 14 739 -3 b 681 177 687 50 684 114 b 672 338 678 230 677 285 b 654 373 671 350 672 373 b 622 340 636 373 624 361 b 615 262 621 314 613 288 b 619 -22 616 167 619 72 b 569 -22 602 -23 585 -23 b 305 -3 481 -16 395 -1 b 210 -9 274 -3 242 -4 b 301 163 242 52 268 108 b 513 552 377 288 459 412 b 536 652 526 585 536 618 b 533 683 536 662 534 672 b 520 707 531 691 531 707 b 487 693 508 708 494 704 b 474 668 482 684 477 677 b 384 490 454 603 418 547 b 253 281 343 419 295 351 b 73 -13 194 181 145 78 b 29 -108 50 -42 29 -72 b 37 -147 29 -121 32 -134 b 50 -186 43 -160 50 -173 b 68 -216 52 -207 56 -215 b 92 -207 73 -216 82 -213 b 288 -166 156 -180 220 -166 b 556 -186 377 -166 467 -180 b 586 -189 566 -187 576 -187 b 616 -186 596 -189 606 -189 b 606 -432 613 -268 612 -350 b 596 -625 603 -495 596 -559 b 598 -670 596 -641 596 -655 b 608 -704 598 -683 596 -700 z',\r\n        },\r\n        timeSig5: {\r\n            x_min: 19.663871085403297,\r\n            x_max: 583,\r\n            y_min: -389,\r\n            y_max: 389,\r\n            ha: 778,\r\n            o: 'm 132 -536 b 249 -560 168 -553 209 -559 b 507 -462 351 -560 454 -514 b 677 -183 588 -384 642 -289 b 694 -85 688 -150 694 -117 b 540 138 694 12 642 94 b 422 173 501 154 462 167 b 400 187 408 174 400 177 b 405 202 400 190 402 196 b 428 284 416 228 426 255 b 469 312 431 307 442 312 b 757 372 569 312 662 343 b 840 490 821 392 840 432 b 812 560 840 540 834 560 b 763 546 801 560 785 556 b 757 543 762 546 759 544 b 465 484 665 505 570 484 b 396 484 452 484 425 487 b 353 454 377 482 366 474 b 281 300 323 405 304 351 b 245 164 262 255 245 212 b 246 144 245 158 246 151 b 233 63 249 115 243 89 b 225 35 228 50 225 40 b 264 14 225 22 236 19 b 445 -26 325 7 387 0 b 569 -151 501 -52 547 -89 b 575 -180 573 -161 575 -170 b 527 -275 575 -217 547 -245 b 347 -367 484 -334 419 -367 b 261 -351 318 -367 289 -363 b 95 -300 206 -333 154 -307 b 55 -321 73 -297 65 -302 b 29 -468 29 -367 40 -419 b 56 -505 26 -482 36 -500 b 132 -536 82 -514 108 -524 z',\r\n        },\r\n        timeSig6: {\r\n            x_min: 20,\r\n            x_max: 565,\r\n            y_min: -363,\r\n            y_max: 363,\r\n            ha: 726,\r\n            o: 'm 390 -518 b 621 -458 469 -507 549 -494 b 814 -134 753 -390 814 -281 b 652 59 814 -16 750 58 b 580 48 629 59 606 55 b 233 -334 392 -9 276 -138 b 115 -228 181 -314 143 -278 b 98 -160 104 -206 98 -183 b 107 -109 98 -144 101 -127 b 167 37 124 -59 145 -12 b 508 340 236 189 347 292 b 575 353 530 347 553 353 b 648 327 600 353 625 346 b 665 320 654 321 661 320 b 687 336 674 320 681 325 b 703 405 697 359 703 382 b 684 472 703 429 697 451 b 593 523 664 504 631 521 b 576 521 588 523 582 523 b 297 403 472 508 380 465 b 115 177 217 344 164 264 b 29 -121 60 82 29 -17 b 53 -278 29 -173 36 -225 b 226 -497 82 -374 131 -454 b 347 -523 265 -514 305 -523 b 390 -518 361 -523 376 -521 z m 351 -357 b 312 -351 337 -356 320 -363 b 325 -315 304 -340 320 -327 b 543 -120 373 -222 448 -158 b 622 -104 570 -108 596 -102 b 717 -132 655 -104 687 -112 b 740 -167 732 -143 740 -153 b 730 -196 740 -176 737 -184 b 563 -321 690 -258 634 -300 b 359 -357 497 -341 428 -354 z',\r\n        },\r\n        timeSig7: {\r\n            x_min: 20.3617407597707,\r\n            x_max: 592,\r\n            y_min: -345,\r\n            y_max: 345,\r\n            ha: 690,\r\n            o: 'm 253 -497 b 318 -485 276 -497 297 -487 b 366 -441 348 -482 360 -468 b 487 -104 390 -323 433 -210 b 835 403 580 82 701 246 b 852 436 847 416 852 428 b 815 467 852 451 840 461 b 762 474 798 471 779 474 b 674 445 732 474 701 465 b 603 410 652 431 628 420 b 383 360 533 379 459 360 b 200 435 315 360 249 382 b 88 494 168 469 131 485 b 66 497 81 495 73 497 b 33 484 52 497 39 492 b 50 436 22 469 39 451 b 295 310 114 360 199 324 b 406 301 331 304 369 301 b 593 324 468 301 530 308 b 585 307 589 314 588 310 b 265 -249 451 137 338 -46 b 207 -442 242 -312 223 -377 b 204 -462 206 -449 204 -456 b 253 -497 204 -487 220 -497 z',\r\n        },\r\n        timeSig8: {\r\n            x_min: 20,\r\n            x_max: 504.15101530718516,\r\n            y_min: -428,\r\n            y_max: 428,\r\n            ha: 856,\r\n            o: 'm 265 -616 b 289 -615 274 -616 281 -616 b 710 -271 492 -592 657 -485 b 726 -148 721 -229 727 -187 b 585 108 726 -48 687 42 b 572 127 576 114 573 120 b 576 144 572 132 575 138 b 598 301 590 196 598 249 b 586 413 598 338 593 376 b 356 616 559 531 467 616 b 233 582 317 616 275 606 b 29 233 101 505 29 384 b 104 9 29 153 46 72 b 189 -48 127 -16 160 -27 b 92 -158 141 -73 114 -114 b 37 -343 63 -217 50 -279 b 33 -390 35 -359 33 -374 b 265 -616 33 -524 148 -616 z m 258 105 b 124 148 215 105 167 117 b 96 196 105 163 96 177 b 99 217 96 202 96 209 b 197 384 120 281 151 337 b 350 451 242 429 297 451 b 516 364 412 451 472 422 b 530 331 523 354 530 343 l 530 327 l 530 320 b 468 151 520 261 507 200 b 419 122 455 135 442 125 b 258 105 370 117 320 105 z m 328 -438 b 158 -276 233 -436 160 -359 b 166 -239 158 -264 161 -252 b 230 -157 176 -203 202 -179 b 367 -72 274 -125 320 -98 b 448 -49 396 -56 423 -49 b 562 -118 491 -49 528 -72 b 611 -251 590 -157 611 -199 b 569 -341 611 -288 595 -318 b 328 -438 500 -402 416 -432 z',\r\n        },\r\n        timeSig9: {\r\n            x_min: 20,\r\n            x_max: 494,\r\n            y_min: -421,\r\n            y_max: 421,\r\n            ha: 842,\r\n            o: 'm 235 -606 b 361 -564 275 -606 318 -593 b 619 -229 487 -482 566 -366 b 706 127 664 -114 694 4 b 711 233 708 163 711 197 b 700 346 711 271 708 308 b 389 606 658 517 530 606 b 351 605 376 606 364 606 b 56 272 171 586 56 441 b 96 98 56 216 69 156 b 334 -53 144 -3 238 -53 b 544 36 408 -53 484 -24 b 652 176 586 78 622 124 b 631 71 645 141 639 105 b 467 -302 599 -63 562 -196 b 271 -442 412 -364 354 -422 b 225 -448 255 -446 239 -448 b 95 -305 148 -448 98 -395 b 89 -255 95 -288 94 -271 b 73 -233 86 -246 85 -233 b 52 -248 65 -233 56 -239 b 29 -317 42 -271 30 -291 b 49 -448 29 -361 40 -405 b 235 -606 69 -541 144 -606 z m 340 104 b 144 209 264 108 194 141 b 127 258 132 225 127 240 b 137 297 127 271 130 284 b 366 449 184 396 269 449 b 517 408 415 449 467 436 b 595 348 546 392 572 372 b 616 305 608 336 616 321 b 609 281 616 298 613 289 b 340 104 557 184 477 104 z',\r\n        },\r\n        timeSigCommon: {\r\n            x_min: 20,\r\n            x_max: 585,\r\n            y_min: -298,\r\n            y_max: 294.49658092772603,\r\n            ha: 592.496580927726,\r\n            o: 'm 444 -405 b 829 -45 626 -346 740 -207 b 842 26 842 -23 842 1 b 821 58 842 39 841 58 b 795 40 811 58 802 48 b 765 3 785 29 773 16 b 469 -223 690 -104 596 -183 b 354 -242 431 -235 392 -242 b 180 -177 292 -242 235 -223 b 135 -99 154 -157 140 -131 b 132 -59 134 -85 132 -72 b 141 7 132 -37 135 -16 b 449 274 189 160 297 243 b 477 278 459 276 468 276 b 546 203 517 278 539 253 b 517 157 550 177 533 166 b 485 143 507 153 497 143 l 482 143 b 467 148 478 143 472 144 b 374 183 438 170 406 181 b 264 118 333 183 292 161 b 238 48 246 92 238 69 b 261 -9 238 29 245 10 b 383 -73 287 -39 337 -73 b 412 -68 392 -73 402 -72 b 631 164 526 -27 586 59 b 649 252 644 193 649 222 b 636 328 649 278 645 304 b 504 423 615 400 579 429 b 242 318 408 415 317 387 b 29 -158 104 190 29 33 b 30 -176 29 -164 29 -170 b 115 -364 42 -246 52 -315 b 307 -429 177 -410 240 -429 b 444 -405 351 -429 397 -420 z',\r\n        },\r\n        timeSigCutCommon: {\r\n            x_min: 20,\r\n            x_max: 695,\r\n            y_min: -687.0379164869064,\r\n            y_max: 687,\r\n            ha: 1374.0379164869064,\r\n            o: 'm 564 -989 b 595 -945 585 -991 589 -963 l 599 -922 b 605 -628 600 -824 603 -726 l 609 -399 b 878 -251 706 -363 798 -320 b 996 -85 932 -204 976 -153 b 1001 -63 998 -78 1001 -71 b 989 -46 1001 -56 998 -49 b 978 -43 985 -45 982 -43 b 950 -59 968 -43 959 -49 b 733 -216 894 -132 815 -177 b 611 -259 694 -235 652 -249 b 616 -20 612 -179 615 -99 b 680 29 642 -7 665 9 b 698 43 685 36 690 40 b 870 251 792 82 840 160 b 877 294 874 265 877 279 b 818 410 877 338 855 382 b 683 458 779 442 730 448 b 625 468 664 462 644 465 l 625 514 b 638 958 626 662 636 811 b 626 989 638 979 635 989 b 603 981 621 989 613 986 b 422 840 534 945 481 888 b 412 805 412 832 413 818 b 426 713 410 773 420 743 b 445 678 429 690 435 678 b 474 691 452 678 461 683 b 563 755 503 710 530 732 b 564 724 564 740 564 733 b 559 469 563 639 560 554 b 462 454 526 469 494 464 b 112 143 302 399 199 281 b 33 -94 66 71 45 -10 b 29 -148 30 -112 29 -131 b 105 -351 29 -223 52 -291 b 359 -455 171 -426 258 -451 b 517 -431 409 -451 464 -446 l 539 -422 l 539 -477 b 533 -739 536 -563 539 -651 b 530 -824 531 -768 530 -795 b 546 -948 530 -865 533 -907 b 564 -989 552 -962 543 -989 z m 410 -288 b 193 -197 328 -288 253 -264 b 141 -60 160 -161 141 -108 b 157 6 141 -35 147 -12 b 259 158 189 58 217 112 b 438 291 311 215 364 266 b 528 305 468 301 498 305 b 554 304 537 305 546 304 b 553 212 554 274 554 242 b 426 115 498 199 446 164 b 416 68 419 99 416 84 b 425 12 416 49 420 30 b 474 -39 432 -17 448 -32 b 513 -43 487 -42 498 -43 b 547 -40 524 -43 536 -42 l 543 -272 b 461 -285 516 -278 488 -281 b 410 -288 444 -287 426 -288 z m 694 197 b 668 203 685 197 677 199 b 621 216 654 210 638 215 b 622 294 622 242 622 268 b 706 268 651 287 678 278 b 746 235 721 261 734 249 b 752 222 749 230 752 226 b 743 213 752 219 749 215 b 694 197 727 206 711 197 z',\r\n        },\r\n        timeSigPlus: {\r\n            x_min: 0,\r\n            x_max: 661,\r\n            y_min: -358,\r\n            y_max: 358,\r\n            ha: 716,\r\n            o: 'm 605 -516 b 629 -490 624 -516 629 -507 b 628 -475 629 -485 628 -481 b 613 -131 624 -405 616 -174 b 612 -96 612 -114 612 -96 l 647 -98 b 897 -115 730 -99 814 -109 b 940 -89 919 -117 935 -109 b 952 -24 946 -69 952 -46 b 948 9 952 -14 950 -3 b 912 39 942 26 933 37 b 609 60 822 48 609 60 b 616 392 609 60 608 291 b 567 488 619 436 605 467 b 511 516 550 498 531 514 b 498 511 507 516 503 514 b 478 446 475 501 480 469 b 467 150 474 348 469 249 b 465 59 465 121 465 59 l 372 49 b 73 14 272 36 173 24 b 49 13 65 13 56 13 b 0 -33 9 13 0 6 b 60 -141 0 -117 6 -140 b 112 -135 73 -141 91 -140 b 413 -102 213 -125 314 -112 b 464 -98 441 -99 464 -98 l 464 -145 b 477 -456 464 -249 468 -353 b 526 -510 478 -488 491 -507 b 589 -513 546 -511 569 -510 b 605 -516 595 -514 600 -516 z',\r\n        },\r\n        timeSigPlusSmall: {\r\n            x_min: 0,\r\n            x_max: 418,\r\n            y_min: -197,\r\n            y_max: 199,\r\n            ha: 396,\r\n            o: 'm 301 -284 b 330 -238 320 -284 324 -255 b 348 -46 350 -176 341 -111 b 374 -20 351 -27 356 -23 b 481 -17 409 -16 445 -17 b 566 -9 510 -17 537 -16 b 602 3 579 -7 602 -16 b 566 29 602 19 582 24 b 526 33 553 32 539 33 b 384 39 478 36 432 39 b 356 62 363 39 356 42 l 356 68 b 359 177 359 104 359 141 l 359 251 b 341 287 359 264 361 285 b 311 255 324 287 314 272 b 310 228 311 246 310 236 l 301 69 b 275 39 301 49 295 39 l 271 39 b 210 40 251 40 230 40 b 167 39 196 40 181 40 b 89 40 141 37 115 40 b 24 30 68 40 46 37 b 0 17 17 27 0 30 l 0 13 b 27 -17 3 0 7 -13 b 91 -22 49 -22 71 -22 b 153 -22 115 -22 137 -20 l 275 -22 b 295 -40 289 -22 295 -27 l 295 -48 b 288 -235 288 -109 287 -171 b 287 -264 288 -243 287 -253 b 301 -284 287 -275 289 -284 z',\r\n        },\r\n        timeSigMinus: {\r\n            x_min: 0,\r\n            x_max: 662,\r\n            y_min: -54,\r\n            y_max: 55,\r\n            ha: 109,\r\n            o: 'm 39 -78 b 49 -76 42 -78 45 -76 b 452 -75 94 -75 272 -75 b 861 -76 632 -75 814 -76 b 953 -20 927 -79 953 -66 b 948 27 953 -7 950 9 b 946 37 948 30 948 35 b 896 79 940 63 929 79 b 471 78 827 78 648 78 l 42 78 b 0 37 14 78 0 69 b 23 -66 0 0 17 -32 b 39 -78 24 -75 32 -76 z',\r\n        },\r\n        timeSigParensRight: {\r\n            x_min: 0,\r\n            x_max: 274.26483738379414,\r\n            y_min: -722.6326530612245,\r\n            y_max: 725,\r\n            ha: 1447.6326530612246,\r\n            o: 'm 37 -1038 b 69 -1031 48 -1044 59 -1038 b 88 -1015 76 -1027 82 -1021 b 164 -886 120 -976 147 -933 b 333 -351 233 -711 292 -534 b 395 118 366 -204 399 -59 b 389 245 392 144 392 194 b 120 996 369 521 265 766 b 68 1044 99 1030 84 1044 b 19 988 50 1044 36 1024 b 0 922 7 965 0 945 b 20 858 0 901 6 881 b 259 215 141 660 236 449 b 271 -1 266 143 271 71 b 252 -239 271 -82 265 -161 b 148 -667 228 -384 183 -524 b 39 -1009 120 -785 66 -893 b 33 -1031 37 -1017 33 -1024 b 37 -1038 33 -1034 35 -1037 z',\r\n        },\r\n        timeSigParensRightSmall: {\r\n            x_min: 0,\r\n            x_max: 154.4025307335204,\r\n            y_min: -422,\r\n            y_max: 422,\r\n            ha: 844,\r\n            o: 'm 43 -608 b 60 -598 48 -608 53 -605 b 117 -511 82 -572 102 -543 b 222 23 193 -350 219 -177 b 213 166 225 55 216 109 b 115 531 206 294 174 416 b 45 603 99 562 76 588 b 30 608 39 606 35 608 b 10 598 23 608 17 603 b 0 546 3 590 0 570 b 23 451 0 507 9 458 b 102 351 66 429 84 390 b 167 42 150 252 167 148 b 163 -49 167 12 166 -19 b 35 -449 151 -192 121 -330 b 14 -504 22 -467 14 -485 b 17 -527 14 -511 16 -520 l 30 -590 b 43 -608 33 -603 37 -608 z',\r\n        },\r\n        timeSigParensLeft: {\r\n            x_min: 0.5555555555555556,\r\n            x_max: 399.6216117372966,\r\n            y_min: -728,\r\n            y_max: 728,\r\n            ha: 1456,\r\n            o: 'm 562 -1048 b 573 -1043 566 -1048 570 -1047 b 553 -988 582 -1025 564 -1004 b 472 -884 527 -952 497 -920 b 210 -354 366 -717 275 -541 b 148 -6 170 -240 148 -124 b 160 148 148 45 153 96 b 315 678 189 331 242 508 b 431 901 350 755 380 834 b 459 950 451 926 461 939 b 435 995 459 962 451 972 b 364 1048 405 1034 383 1048 b 305 996 343 1048 325 1028 b 127 624 226 881 174 753 b 1 30 56 432 9 235 b 1 -32 1 9 0 -12 b 180 -629 13 -245 92 -438 b 363 -936 230 -739 298 -835 b 526 -1041 402 -995 448 -1041 b 562 -1048 537 -1040 552 -1048 z',\r\n        },\r\n        timeSigParensLeftSmall: {\r\n            x_min: 0,\r\n            x_max: 173.45497224367904,\r\n            y_min: -405,\r\n            y_max: 404,\r\n            ha: 809,\r\n            o: 'm 197 -583 b 222 -553 212 -582 219 -566 b 229 -497 226 -534 229 -516 b 213 -425 229 -472 225 -448 b 102 -177 173 -344 132 -262 b 62 30 78 -111 58 -42 b 91 183 66 82 75 134 b 215 426 118 271 156 356 b 249 552 246 465 252 505 b 230 582 249 563 246 582 b 197 563 219 582 206 576 b 71 356 144 500 105 429 b 0 50 26 259 3 158 b 13 -112 4 -3 7 -58 b 176 -559 29 -275 105 -416 b 196 -583 180 -569 186 -583 z',\r\n        },\r\n        noteheadDoubleWhole: {\r\n            x_min: -0.4444444444444444,\r\n            x_max: 614.1875,\r\n            y_min: -223.03296670127517,\r\n            y_max: 223,\r\n            ha: 446.0329667012752,\r\n            o: 'm 35 -321 b 62 -266 58 -318 58 -288 l 62 -194 b 63 50 62 -114 63 -32 b 60 189 63 96 63 143 b 43 300 59 226 60 265 b 29 321 40 308 39 321 l 26 321 b 0 292 13 318 0 310 b 0 248 0 278 -1 262 b 6 147 4 215 6 181 b 4 48 6 114 4 81 b 6 0 4 32 6 16 b 7 -36 7 -12 7 -24 l 7 -52 b 6 -156 7 -86 6 -121 b 19 -275 6 -196 9 -236 b 35 -321 23 -291 16 -323 z m 847 -314 b 871 -288 860 -315 867 -300 b 884 -187 881 -255 886 -222 b 876 115 878 -86 876 14 b 877 255 876 161 876 209 b 868 291 877 268 873 279 b 855 304 867 301 863 304 b 844 301 852 304 848 304 b 822 265 825 292 822 278 b 824 251 822 259 822 255 b 822 170 822 225 822 197 l 822 -20 b 835 -284 827 -86 825 -186 b 847 -314 837 -295 835 -311 z m 757 -291 b 793 -171 796 -255 792 -212 b 795 -49 795 -131 795 -91 b 786 207 795 36 791 121 b 779 240 786 217 783 229 b 766 258 776 246 776 258 b 762 256 765 258 763 256 b 739 236 752 253 740 252 b 733 177 737 216 732 197 b 737 20 737 125 739 73 l 737 -107 b 740 -202 737 -138 739 -170 b 757 -291 740 -230 743 -261 z m 128 -261 b 144 -251 135 -264 141 -256 b 158 -203 156 -236 157 -220 b 161 -137 161 -181 161 -158 b 157 30 161 -81 157 -26 b 158 76 157 45 157 60 l 158 101 b 156 225 158 141 158 183 b 137 253 156 235 154 253 l 134 253 b 109 222 120 251 109 242 b 104 91 108 179 104 134 b 108 -58 104 42 109 -9 b 107 -105 108 -73 108 -89 b 105 -127 107 -112 107 -120 b 118 -245 105 -167 114 -204 b 128 -261 118 -252 121 -259 z m 488 -242 b 693 -79 595 -249 685 -166 l 693 -55 b 690 0 693 -36 691 -17 b 540 187 684 84 621 164 b 449 200 508 196 480 200 b 210 104 363 200 282 163 b 186 56 196 92 186 76 b 207 -82 186 9 192 -37 b 300 -204 225 -132 248 -181 b 488 -242 356 -229 415 -240 z m 490 -88 b 449 -86 477 -88 464 -88 b 287 -56 399 -85 341 -78 b 258 -33 275 -52 258 -48 b 282 -7 258 -20 272 -13 b 458 43 340 23 399 43 b 580 14 497 43 537 35 b 618 -20 606 1 619 -9 b 592 -58 618 -30 609 -42 b 490 -88 562 -82 528 -88 z',\r\n        },\r\n        noteheadWhole: {\r\n            x_min: 0,\r\n            x_max: 380.16649762501584,\r\n            y_min: -186.17102907059297,\r\n            y_max: 165,\r\n            ha: 351.17102907059297,\r\n            o: 'm 547 40 b 223 -268 543 -151 367 -259 b 102 -233 180 -271 143 -248 l 62 -216 b 0 -127 22 -197 0 -166 b 6 -91 0 -115 1 -104 b 122 141 33 -9 69 71 b 327 238 170 204 249 238 b 514 158 397 238 467 212 b 547 40 544 125 549 84 z m 248 -107 b 384 -63 295 -102 341 -88 b 426 -23 402 -53 415 -40 b 435 3 432 -14 435 -6 b 413 32 435 14 428 24 b 301 73 376 49 343 73 b 272 69 291 73 282 72 b 121 -35 207 53 157 20 b 111 -58 117 -42 111 -50 b 125 -75 111 -65 115 -71 b 248 -107 164 -89 202 -107 z',\r\n        },\r\n        noteheadHalf: {\r\n            x_min: 0,\r\n            x_max: 334,\r\n            y_min: -174,\r\n            y_max: 175,\r\n            ha: 349,\r\n            o: 'm 480 56 b 167 -251 478 -115 331 -251 b 94 -242 143 -251 118 -248 b 9 -141 43 -229 20 -192 b 0 -68 3 -115 0 -91 b 284 249 0 95 127 200 b 304 252 289 251 297 252 b 481 78 374 252 481 170 b 480 56 481 71 481 63 z m 213 -102 b 399 6 274 -81 341 -48 b 402 17 400 7 402 13 b 399 27 402 22 400 26 b 311 94 373 53 353 88 b 292 95 305 95 300 95 b 130 27 230 95 181 55 b 69 -62 98 9 62 -29 b 161 -98 76 -98 128 -91 b 213 -102 174 -101 186 -101 z',\r\n        },\r\n        noteheadBlack: {\r\n            x_min: 0,\r\n            x_max: 334.04644433966797,\r\n            y_min: -164,\r\n            y_max: 164,\r\n            ha: 328,\r\n            o: 'm 112 -233 b 141 -236 122 -235 131 -236 b 481 104 279 -236 485 -48 b 403 222 477 141 478 192 b 334 236 382 232 359 236 b 1 -59 180 236 13 59 b 0 -85 1 -68 0 -76 b 112 -233 0 -157 32 -215 z',\r\n        },\r\n        noteheadXWhole: {\r\n            x_min: 0,\r\n            x_max: 506,\r\n            y_min: -143.0823320899293,\r\n            y_max: 144,\r\n            ha: 287.0823320899293,\r\n            o: 'm 53 -206 b 219 -163 117 -207 170 -196 b 314 -102 249 -141 282 -122 b 377 -63 334 -89 356 -76 b 514 -161 422 -96 468 -128 b 576 -196 534 -174 552 -196 b 589 -193 580 -196 585 -196 b 688 -174 625 -194 657 -181 b 711 -158 698 -171 711 -173 b 696 -143 711 -151 701 -147 b 503 -9 632 -98 567 -52 l 485 4 b 704 145 559 49 634 95 b 729 164 711 150 729 151 l 729 168 b 696 196 726 183 710 193 b 621 207 671 202 645 207 b 528 177 589 207 557 200 b 373 76 480 140 426 108 b 246 164 330 104 287 132 b 122 206 207 193 167 203 b 66 192 102 207 72 207 b 99 147 58 173 85 158 b 274 14 157 102 215 58 b 16 -164 184 -42 96 -98 b 0 -179 12 -168 0 -170 b 1 -183 0 -180 0 -183 b 26 -204 6 -193 12 -204 b 53 -206 37 -206 49 -206 z m 611 -177 b 376 -9 530 -118 452 -63 l 164 -143 b 104 -164 147 -154 130 -164 b 82 -161 96 -164 89 -164 b 230 -65 137 -125 183 -95 l 347 12 b 327 26 341 16 334 22 l 196 121 b 163 147 184 128 173 137 b 140 173 154 154 140 163 b 143 180 140 176 141 177 b 179 166 154 194 167 174 l 372 27 l 566 153 b 613 171 580 161 596 170 b 635 160 624 171 635 174 b 621 147 635 153 626 150 l 429 24 b 400 6 419 19 409 13 b 569 -117 456 -35 513 -75 b 611 -177 588 -130 608 -143 z',\r\n        },\r\n        noteheadXHalf: {\r\n            x_min: 0,\r\n            x_max: 421,\r\n            y_min: -145.51844828189743,\r\n            y_max: 151,\r\n            ha: 296.51844828189746,\r\n            o: 'm 490 -209 b 539 -207 505 -207 521 -207 b 606 -209 560 -207 583 -209 b 598 -196 602 -203 600 -199 l 406 -19 l 540 130 b 547 144 546 135 547 140 b 536 156 547 148 543 153 b 488 192 518 166 503 176 b 416 217 471 209 444 217 b 323 180 380 217 344 204 l 264 115 b 239 138 256 122 248 131 b 33 197 180 196 108 200 b 3 186 23 197 6 193 b 19 154 -1 174 10 163 b 171 12 69 107 120 59 b 19 -157 120 -45 69 -101 b 0 -177 14 -163 0 -166 b 1 -181 0 -179 0 -180 b 39 -203 9 -197 22 -203 l 186 -203 b 197 -202 190 -202 193 -200 l 213 -202 b 262 -180 228 -202 246 -199 l 314 -122 b 490 -209 363 -170 412 -216 z m 435 -148 b 291 -30 379 -112 337 -69 l 213 -118 b 190 -137 207 -125 202 -137 b 145 -111 173 -130 154 -127 b 160 -79 137 -98 151 -88 b 238 16 184 -48 212 -16 b 141 99 204 43 173 72 l 124 117 b 115 132 121 121 115 127 b 118 137 115 134 117 137 b 141 132 127 147 135 138 l 253 36 b 347 150 285 75 315 112 b 370 164 354 160 363 163 b 403 145 382 164 393 156 b 416 127 412 140 416 132 b 405 102 416 118 412 111 l 307 -10 b 413 -105 343 -42 379 -73 b 435 -148 425 -115 436 -125 z',\r\n        },\r\n        noteheadXBlack: {\r\n            x_min: 0,\r\n            x_max: 289,\r\n            y_min: -156,\r\n            y_max: 157,\r\n            ha: 313,\r\n            o: 'm 23 -225 b 69 -204 40 -223 56 -219 b 137 -131 92 -180 115 -157 l 209 -50 b 377 -197 264 -101 321 -148 b 403 -210 384 -203 393 -210 l 408 -210 b 416 -192 416 -207 416 -199 l 416 -186 b 403 -148 416 -171 413 -158 b 344 -81 384 -125 367 -101 b 252 -1 312 -55 282 -29 b 377 157 297 49 340 101 b 402 202 387 170 402 187 b 395 217 402 207 400 213 b 376 226 389 223 382 226 b 334 192 360 226 346 204 b 206 42 289 143 248 94 b 96 161 167 81 131 120 b 60 193 86 174 76 189 b 33 206 52 196 42 206 b 22 199 29 206 26 204 b 10 173 14 190 10 181 b 22 147 10 166 14 157 b 148 7 62 98 104 52 b 164 -7 154 1 158 -3 b 10 -189 111 -66 55 -122 b 0 -212 6 -197 0 -203 b 1 -217 0 -213 0 -216 b 23 -225 4 -226 14 -222 z',\r\n        },\r\n        noteheadCircleX: {\r\n            x_min: 0,\r\n            x_max: 344,\r\n            y_min: -179,\r\n            y_max: 175.12551922594866,\r\n            ha: 354.12551922594866,\r\n            o: 'm 99 -210 b 236 -258 137 -242 186 -258 b 418 -183 305 -258 374 -230 b 495 33 475 -120 495 -48 b 494 66 495 45 494 55 b 302 252 487 183 405 256 b 181 243 262 249 222 248 b 46 171 128 236 79 219 b 0 19 14 127 0 73 b 99 -210 0 -68 35 -156 z m 245 42 l 124 156 b 200 176 145 166 170 173 b 337 183 245 181 291 184 b 377 176 351 183 364 180 b 245 42 333 131 288 86 z m 392 -99 l 285 3 l 400 121 b 418 154 409 131 418 140 b 465 50 448 130 465 94 b 405 -112 462 -17 439 -73 z m 89 -120 b 48 0 56 -82 48 -42 b 89 112 48 35 59 76 b 109 101 96 111 102 108 l 210 7 l 187 -17 b 89 -120 151 -53 125 -82 z m 176 -183 b 127 -163 158 -179 141 -171 l 252 -32 l 372 -144 b 233 -189 334 -173 285 -189 b 176 -183 215 -189 196 -187 z',\r\n        },\r\n        noteheadTriangleUpWhole: {\r\n            x_min: 0,\r\n            x_max: 366,\r\n            y_min: -145,\r\n            y_max: 138,\r\n            ha: 283,\r\n            o: 'm 504 -209 b 527 -199 520 -209 527 -206 b 520 -180 527 -193 524 -187 b 459 -94 501 -151 480 -122 b 279 170 400 -6 341 82 b 242 199 266 190 253 199 b 206 167 230 199 219 189 b 10 -145 140 63 76 -42 b 0 -171 3 -156 0 -164 b 23 -200 0 -183 9 -192 b 55 -209 33 -206 45 -209 z m 202 -161 b 176 -137 183 -163 176 -156 b 187 -62 176 -111 179 -86 b 253 95 206 -10 228 42 b 337 -132 307 24 334 -49 b 311 -161 338 -153 334 -161 b 256 -160 294 -161 275 -160 b 202 -161 238 -160 220 -161 z',\r\n        },\r\n        noteheadTriangleUpHalf: {\r\n            x_min: 0,\r\n            x_max: 341.0833130378007,\r\n            y_min: -159,\r\n            y_max: 159,\r\n            ha: 318,\r\n            o: 'm 458 -226 b 478 -229 462 -223 469 -229 b 490 -222 482 -229 487 -228 b 477 -184 495 -207 484 -196 b 281 176 410 -65 346 56 b 238 225 269 194 261 213 b 225 229 232 226 228 228 b 209 215 217 229 213 225 b 4 -153 141 92 73 -30 b 0 -170 1 -158 0 -164 b 12 -189 0 -177 4 -183 b 66 -215 27 -202 43 -213 b 458 -226 194 -217 323 -222 z m 151 -167 b 298 75 204 -89 240 -1 b 301 82 300 76 301 79 l 357 -22 b 344 -43 353 -27 350 -37 b 285 -163 317 -79 312 -127 b 278 -170 282 -166 279 -167 z',\r\n        },\r\n        noteheadTriangleUpBlack: {\r\n            x_min: 0,\r\n            x_max: 346,\r\n            y_min: -149,\r\n            y_max: 149,\r\n            ha: 298,\r\n            o: 'm 481 -215 b 498 -209 487 -215 492 -215 b 482 -173 498 -194 488 -184 l 284 173 b 259 202 278 184 269 194 b 229 215 248 210 238 215 b 196 189 216 215 206 206 l 13 -150 b 3 -168 9 -156 6 -163 b 0 -180 1 -173 0 -177 b 12 -197 0 -187 4 -193 b 63 -213 29 -206 45 -213 b 481 -215 203 -213 343 -215 z',\r\n        },\r\n        noteheadDiamondWhole: {\r\n            x_min: 0,\r\n            x_max: 271,\r\n            y_min: -132,\r\n            y_max: 132,\r\n            ha: 264,\r\n            o: 'm 230 -177 b 256 -190 240 -186 249 -190 b 281 -173 265 -190 272 -184 b 382 -29 314 -124 347 -76 b 390 -10 387 -22 390 -14 b 376 12 390 -3 386 4 b 173 177 308 66 240 121 b 144 190 166 183 160 190 b 98 153 127 186 112 170 b 13 40 69 115 42 76 b 0 13 4 29 0 20 b 22 -19 0 3 7 -9 b 230 -177 92 -69 163 -122 z m 279 -128 b 261 -122 274 -134 266 -127 l 66 30 b 56 45 59 35 56 39 b 62 56 56 48 59 52 b 122 122 91 101 105 122 b 194 76 138 122 158 107 l 320 -26 b 336 -50 325 -32 336 -35 b 279 -128 318 -75 300 -102 z',\r\n        },\r\n        noteheadDiamondHalf: {\r\n            x_min: 0,\r\n            x_max: 295,\r\n            y_min: -148,\r\n            y_max: 148,\r\n            ha: 296,\r\n            o: 'm 228 -207 b 245 -213 235 -210 240 -213 b 264 -203 252 -213 258 -210 b 415 -46 314 -150 364 -98 b 425 -27 420 -40 425 -35 b 416 -10 425 -22 422 -16 b 217 200 350 60 284 131 b 194 213 212 207 204 213 b 170 196 181 213 177 203 b 14 33 118 143 68 86 b 0 7 4 23 0 16 b 17 -20 0 -1 6 -10 b 118 -114 52 -50 82 -85 b 228 -207 156 -144 184 -184 z m 209 -157 b 134 -69 177 -138 141 -115 b 130 -26 131 -55 130 -40 b 215 148 130 42 160 99 b 225 156 217 151 220 156 b 230 153 226 156 228 156 b 323 -26 276 104 321 55 b 298 -75 324 -42 315 -59 b 265 -109 287 -86 276 -99 b 209 -157 245 -125 228 -167 z',\r\n        },\r\n        noteheadDiamondBlack: {\r\n            x_min: 0,\r\n            x_max: 310,\r\n            y_min: -146,\r\n            y_max: 146,\r\n            ha: 292,\r\n            o: 'm 266 -210 b 289 -194 278 -209 284 -200 b 406 -76 330 -156 367 -115 b 446 -23 433 -49 446 -36 b 412 29 446 -10 435 3 b 405 36 409 30 408 33 b 252 196 354 89 304 143 b 225 210 243 204 235 210 b 204 202 219 210 212 209 b 10 24 141 141 75 82 b 0 9 4 19 0 14 b 9 -6 0 4 3 0 l 232 -192 b 266 -210 242 -200 256 -204 z',\r\n        },\r\n        noteheadSquareWhite: {\r\n            x_min: 0,\r\n            x_max: 350,\r\n            y_min: -131,\r\n            y_max: 131,\r\n            ha: 262,\r\n            o: 'm 468 -189 b 485 -187 474 -189 480 -189 b 500 -176 495 -187 500 -183 b 498 -168 500 -174 498 -171 b 497 -166 498 -167 497 -167 l 498 -164 b 504 -154 503 -163 504 -158 b 503 -138 504 -150 503 -144 l 503 -135 l 503 -94 b 492 66 500 -45 494 10 b 488 135 492 89 488 112 b 484 150 488 141 485 145 b 482 154 482 151 482 153 b 429 189 472 177 456 189 b 53 184 304 186 179 186 l 39 184 b 33 181 36 183 35 183 b 12 160 20 181 12 177 b 0 -109 9 71 4 -19 b 19 -137 0 -125 7 -134 b 23 -151 19 -141 20 -145 b 85 -187 37 -173 55 -187 b 468 -189 212 -187 340 -187 z m 246 -125 l 63 -125 b 66 -111 65 -122 66 -117 b 73 72 69 -50 71 10 l 73 130 b 88 128 78 128 82 128 b 148 130 108 130 128 130 b 271 128 190 130 230 128 l 271 130 l 420 130 b 428 20 425 92 425 56 l 436 -127 l 246 -127 z',\r\n        },\r\n        noteheadSquareBlack: {\r\n            x_min: 0,\r\n            x_max: 342,\r\n            y_min: -129.98961937716263,\r\n            y_max: 132.44444444444446,\r\n            ha: 262.4340638216071,\r\n            o: 'm 217 190 b 439 186 304 190 372 190 b 467 180 448 184 458 183 b 492 145 484 176 492 167 b 490 -124 490 56 490 -33 b 488 -141 490 -130 488 -135 b 456 -170 488 -163 478 -168 b 118 -183 344 -176 230 -181 b 29 -184 89 -183 60 -192 b 0 -148 4 -180 0 -168 b 1 29 1 -89 1 -30 l 1 156 b 36 190 3 187 4 190 b 217 190 102 192 168 190 z',\r\n        },\r\n        noteheadParenthesis: {\r\n            x_min: -70.190112022022,\r\n            x_max: 329,\r\n            y_min: -196,\r\n            y_max: 201,\r\n            ha: 397,\r\n            o: 'm 344 -279 b 382 -262 361 -288 370 -272 b 405 -233 390 -255 399 -245 b 474 9 455 -158 468 -73 b 416 228 474 78 448 174 b 364 282 403 249 387 271 b 344 289 359 285 350 288 b 331 279 338 289 333 287 b 325 248 328 269 325 258 b 338 225 325 238 328 229 b 412 138 379 207 396 174 b 445 1 433 92 445 45 b 346 -217 445 -81 410 -154 b 336 -252 340 -223 336 -238 b 344 -279 336 -265 338 -276 z m 19 -274 b 35 -282 24 -279 30 -281 b 49 -265 42 -282 46 -275 b 52 -243 50 -256 52 -249 b 36 -210 52 -230 49 -220 b -60 -59 -16 -173 -35 -114 b -73 9 -69 -39 -73 -16 b 33 223 -73 92 -24 189 b 50 265 43 229 50 249 b 33 288 50 278 46 289 b 4 272 23 288 14 275 b -9 261 0 269 -4 265 b -101 23 -58 193 -105 124 b -37 -206 -104 -52 -75 -130 b 19 -274 -23 -232 -6 -255 z',\r\n        },\r\n        noteheadParenthesisRight: {\r\n            x_min: -30,\r\n            x_max: 82,\r\n            y_min: -199.08429092881173,\r\n            y_max: 206,\r\n            ha: 405.0842909288117,\r\n            o: 'm -17 -282 b 24 -264 -6 -297 12 -272 b 60 -219 40 -253 52 -236 b 117 1 96 -150 112 -75 b 118 16 118 6 118 12 b 109 73 118 36 112 55 b 4 279 99 154 68 226 b -23 297 -4 287 -13 297 b -37 289 -27 297 -32 294 b -43 266 -42 285 -43 276 b -32 225 -43 251 -37 229 b 84 -7 48 170 84 82 b 32 -184 84 -69 65 -132 b -10 -222 22 -200 4 -209 b -24 -258 -20 -232 -24 -245 b -17 -282 -24 -266 -22 -276 z',\r\n        },\r\n        noteheadParenthesisLeft: {\r\n            x_min: 0,\r\n            x_max: 106,\r\n            y_min: -197,\r\n            y_max: 197,\r\n            ha: 394,\r\n            o: 'm 134 -284 b 138 -281 135 -284 137 -284 b 145 -268 144 -278 145 -274 l 144 -253 b 107 -180 138 -225 121 -204 b 42 13 71 -120 42 -56 b 49 73 42 32 43 52 b 137 210 62 128 95 171 b 153 255 147 219 153 239 b 145 278 153 265 151 274 b 130 284 140 281 135 284 b 98 259 117 284 108 268 b 0 37 35 203 1 131 b 118 -268 9 -69 53 -173 b 134 -284 121 -274 127 -284 z',\r\n        },\r\n        augmentationDot: {\r\n            x_min: 0,\r\n            x_max: 96,\r\n            y_min: -57,\r\n            y_max: 57,\r\n            ha: 114,\r\n            o: 'm 13 -82 b 16 -81 14 -82 14 -82 b 105 -73 46 -76 75 -76 b 131 -48 121 -72 131 -60 b 138 26 134 -24 138 0 b 137 48 138 33 138 40 b 108 82 134 71 125 82 b 95 81 104 82 99 82 b 33 71 75 78 53 75 b 4 46 20 68 6 62 b 0 -66 1 9 0 -29 b 13 -82 0 -73 1 -82 z',\r\n        },\r\n        tremolo1: {\r\n            x_min: -158,\r\n            x_max: 156.19381479578487,\r\n            y_min: -88,\r\n            y_max: 88,\r\n            ha: 176,\r\n            o: 'm -206 -127 b -194 -125 -203 -127 -199 -127 b 173 -36 -72 -94 50 -65 b 220 16 202 -29 215 -12 b 225 50 223 30 225 45 b 216 107 226 76 222 91 b 194 127 210 120 204 127 b 183 124 192 127 189 127 l -192 33 b -226 -9 -213 27 -222 14 b -228 -32 -226 -16 -228 -23 b -222 -108 -228 -58 -222 -82 b -206 -127 -222 -120 -217 -127 z',\r\n        },\r\n        flag8thUp: {\r\n            x_min: 0,\r\n            x_max: 261,\r\n            y_min: -819,\r\n            y_max: 0,\r\n            ha: 819,\r\n            o: 'm 265 -1171 b 351 -1035 301 -1130 336 -1087 b 376 -867 369 -979 376 -923 b 367 -755 376 -829 373 -792 b 233 -422 350 -632 311 -520 b 131 -291 199 -379 166 -334 b 65 -125 91 -239 66 -192 b 62 -75 65 -112 62 -91 b 42 0 62 -49 52 -24 l 35 0 b 0 -63 6 -13 0 -36 l 0 -144 b 96 -445 0 -255 29 -356 b 177 -547 124 -478 150 -514 b 308 -831 246 -629 298 -721 b 317 -890 310 -851 317 -871 b 311 -919 317 -900 315 -910 b 256 -1005 297 -950 282 -984 b 228 -1068 233 -1024 228 -1045 b 230 -1106 228 -1080 229 -1093 b 240 -1162 232 -1125 239 -1143 b 251 -1179 242 -1174 246 -1179 b 265 -1171 255 -1179 259 -1176 z',\r\n        },\r\n        flag8thDown: {\r\n            x_min: 0,\r\n            x_max: 261,\r\n            y_min: 0,\r\n            y_max: 819,\r\n            ha: 819,\r\n            o: 'm 265 1171 b 251 1179 259 1176 255 1179 b 240 1162 246 1179 242 1174 b 230 1106 239 1143 232 1125 b 228 1068 229 1093 228 1080 b 256 1005 228 1045 233 1024 b 311 919 282 984 297 950 b 317 890 315 910 317 900 b 308 831 317 871 310 851 b 177 547 298 721 246 629 b 96 445 150 514 124 478 b 0 144 29 356 0 255 l 0 63 b 35 0 0 36 6 13 l 42 0 b 62 75 52 24 62 49 b 59 117 62 91 59 104 b 131 291 60 183 91 239 b 233 422 166 334 199 379 b 367 755 311 520 350 632 b 376 867 373 792 376 829 b 351 1035 376 923 369 979 b 265 1171 336 1087 301 1130 z',\r\n        },\r\n        flag16thUp: {\r\n            x_min: 0,\r\n            x_max: 327.1591498636094,\r\n            y_min: -819.3972596310256,\r\n            y_max: 0,\r\n            ha: 819.3972596310256,\r\n            o: 'm 415 -1179 b 435 -1168 423 -1182 429 -1174 b 451 -1138 442 -1159 446 -1149 b 465 -1020 464 -1102 467 -1064 b 461 -962 464 -1004 464 -984 b 471 -821 467 -916 472 -870 b 465 -721 472 -791 467 -756 b 415 -520 459 -651 441 -585 b 200 -245 370 -408 284 -327 b 96 -114 160 -206 118 -168 b 75 -24 84 -85 85 -53 b 59 0 72 -16 72 0 b 53 -1 58 0 56 -1 b 27 -32 40 -6 27 -10 b 29 -68 27 -43 29 -55 b 10 -79 20 -69 13 -72 b 1 -109 6 -89 1 -99 b 0 -170 0 -130 0 -148 b 35 -410 0 -252 12 -333 b 258 -793 76 -557 156 -681 b 409 -1158 350 -896 410 -1014 b 415 -1179 409 -1165 405 -1175 z m 413 -816 b 331 -681 392 -769 364 -723 b 145 -420 266 -596 189 -521 b 86 -281 125 -374 102 -330 b 156 -370 105 -312 128 -343 b 318 -539 210 -425 269 -478 b 413 -816 383 -621 420 -713 z',\r\n        },\r\n        flag16thDown: {\r\n            x_min: 0,\r\n            x_max: 327.1591498636094,\r\n            y_min: 0,\r\n            y_max: 819,\r\n            ha: 819,\r\n            o: 'm 59 0 b 75 24 72 0 72 16 b 96 114 85 53 84 85 b 200 245 118 168 160 206 b 415 520 284 327 370 408 b 465 721 441 585 459 651 b 471 821 467 756 472 791 b 461 962 472 870 467 916 b 465 1020 464 984 464 1004 b 451 1138 467 1064 464 1102 b 435 1168 446 1149 442 1159 b 418 1179 431 1172 425 1179 l 415 1179 b 408 1169 409 1176 408 1174 b 409 1158 408 1165 409 1161 b 258 793 410 1014 350 896 b 35 410 156 681 76 557 b 0 170 12 333 0 252 l 0 88 b 29 7 0 71 6 23 b 59 0 33 4 58 0 z m 86 281 b 145 420 102 330 125 374 b 331 681 189 521 266 596 b 413 816 364 723 392 769 b 415 791 413 808 415 799 b 318 539 415 698 377 613 b 156 370 269 478 210 425 b 86 281 128 343 105 312 z',\r\n        },\r\n        flag32ndUp: {\r\n            x_min: -0.19862981551275186,\r\n            x_max: 268.0942440943661,\r\n            y_min: -849.4710740978672,\r\n            y_max: 149.0769891455102,\r\n            ha: 998.5480632433774,\r\n            o: 'm 323 -1223 b 351 -1198 337 -1227 344 -1210 b 359 -1184 354 -1194 356 -1188 b 386 -999 377 -1122 387 -1060 b 341 -783 386 -927 372 -855 b 330 -736 334 -769 330 -753 b 333 -708 330 -727 330 -717 b 344 -621 340 -678 344 -649 b 341 -579 344 -608 343 -593 b 328 -500 338 -553 328 -526 b 331 -475 328 -491 328 -484 b 347 -370 343 -438 348 -402 b 151 27 348 -212 288 -56 b 53 176 98 59 50 102 b 45 197 53 183 48 192 b 33 215 40 203 40 216 l 30 215 b 6 194 22 212 9 209 b 0 120 3 170 -1 145 b 0 -43 4 65 0 13 b 0 -98 0 -60 1 -79 b 4 -276 0 -157 6 -216 b 7 -456 4 -337 7 -397 b 66 -638 7 -523 22 -585 b 158 -724 94 -671 127 -697 b 318 -1011 246 -801 295 -899 b 321 -1044 321 -1021 321 -1032 b 312 -1152 321 -1080 312 -1116 b 317 -1192 312 -1165 314 -1179 b 323 -1223 320 -1202 311 -1220 z m 285 -376 b 121 -180 249 -289 173 -245 b 91 -105 104 -158 92 -135 b 288 -354 181 -144 288 -269 b 285 -376 288 -363 287 -370 z m 275 -657 b 111 -492 226 -589 163 -547 b 65 -376 78 -456 66 -418 b 71 -323 65 -360 68 -341 b 275 -657 164 -418 265 -504 z',\r\n        },\r\n        flag32ndDown: {\r\n            x_min: -2.800802874905624,\r\n            x_max: 268.09424409436605,\r\n            y_min: -169.07698914551014,\r\n            y_max: 829.4710740978672,\r\n            ha: 998.5480632433773,\r\n            o: 'm 323 1194 b 317 1164 311 1191 320 1174 b 312 1123 314 1151 312 1136 b 321 1015 312 1087 321 1051 b 318 982 321 1004 321 992 b 158 696 295 870 246 772 b 66 609 127 668 94 642 b 7 428 22 556 7 494 b 4 248 7 369 4 308 b -1 78 6 187 -10 137 b 0 14 0 59 0 32 l 0 -148 b 6 -223 0 -174 3 -199 b 30 -243 9 -238 22 -240 l 33 -243 b 45 -226 40 -245 40 -232 b 53 -204 48 -220 53 -212 b 151 -56 50 -131 98 -88 b 347 341 288 27 348 183 b 331 446 348 373 343 409 b 328 471 328 455 328 462 b 341 550 328 497 338 524 b 344 592 343 564 344 579 b 333 680 344 621 340 649 b 330 707 330 688 330 698 b 341 755 330 724 334 740 b 386 971 372 827 386 899 b 359 1155 387 1031 377 1093 b 351 1169 356 1159 354 1165 b 323 1194 344 1181 337 1198 z m 275 628 b 71 294 265 475 164 389 b 65 347 68 312 65 331 b 111 464 66 389 78 428 b 275 628 163 518 226 560 z m 285 347 b 288 325 287 341 288 334 b 91 76 288 240 181 115 b 121 151 92 107 104 130 b 285 347 173 216 249 261 z',\r\n        },\r\n        flag64thUp: {\r\n            x_min: -4,\r\n            x_max: 282,\r\n            y_min: -823.5430338167067,\r\n            y_max: 347,\r\n            ha: 1170.5430338167066,\r\n            o: 'm 350 -1185 b 380 -1162 364 -1189 374 -1175 b 406 -1022 399 -1119 406 -1071 b 359 -798 406 -945 384 -871 b 348 -756 353 -785 348 -772 b 350 -744 348 -753 350 -749 b 363 -621 356 -704 363 -664 b 360 -580 363 -608 363 -593 b 359 -560 359 -573 359 -567 b 373 -490 359 -536 366 -513 b 393 -346 386 -444 393 -395 b 387 -269 393 -320 390 -294 b 348 -127 382 -219 348 -173 b 351 -104 348 -120 348 -111 b 353 -65 351 -91 353 -78 b 341 37 353 -26 348 6 b 226 215 323 108 278 164 b 86 336 181 258 127 288 b 62 395 72 353 62 370 b 42 481 62 423 55 454 b 27 500 37 488 36 500 b 24 498 26 500 26 500 b -1 480 14 497 1 492 b -6 444 -4 467 -6 455 l -6 435 b -1 341 -1 403 -1 372 l -1 266 b 6 156 -1 230 0 193 b 13 35 12 117 13 75 l 13 -35 b 14 -85 13 -52 14 -68 b 29 -276 19 -150 33 -213 b 20 -448 24 -334 20 -392 b 24 -534 20 -477 22 -505 b 114 -708 30 -605 59 -664 b 197 -780 143 -732 171 -755 b 344 -1153 301 -884 341 -1011 b 343 -1172 344 -1159 343 -1166 b 350 -1185 343 -1176 344 -1182 z m 287 -88 b 62 193 186 -17 79 48 b 229 52 121 144 174 98 b 289 -33 256 29 274 -3 b 295 -56 294 -42 295 -49 b 287 -88 295 -66 292 -76 z m 298 -410 b 118 -235 238 -351 176 -295 b 76 -88 82 -197 78 -147 b 268 -252 137 -153 203 -202 b 330 -360 304 -279 330 -315 b 323 -402 330 -373 327 -387 b 311 -418 318 -413 315 -418 b 298 -410 307 -418 302 -415 z m 300 -691 b 117 -508 243 -616 168 -575 b 82 -408 94 -480 82 -448 b 84 -379 82 -397 82 -387 b 259 -553 135 -451 206 -492 b 301 -667 287 -583 301 -619 b 300 -691 301 -674 301 -683 z',\r\n        },\r\n        flag64thDown: {\r\n            x_min: -5,\r\n            x_max: 281,\r\n            y_min: -375,\r\n            y_max: 795.5430338167066,\r\n            ha: 1170.5430338167066,\r\n            o: 'm 348 1145 b 341 1132 343 1142 341 1136 b 343 1113 341 1126 343 1119 b 196 740 340 971 300 844 b 112 668 170 714 141 691 b 23 494 58 624 29 564 b 19 408 20 465 19 436 b 27 236 19 351 23 294 b 13 45 32 173 17 109 b 12 -6 13 27 12 12 l 12 -75 b 4 -196 12 -115 10 -157 b -3 -307 -1 -233 -3 -271 l -3 -382 b -7 -475 -3 -412 -3 -444 l -7 -484 b -3 -520 -7 -495 -6 -507 b 23 -539 0 -533 13 -537 b 26 -540 24 -540 24 -540 b 40 -521 35 -540 36 -528 b 60 -435 53 -494 60 -464 b 85 -376 60 -410 71 -393 b 225 -255 125 -328 180 -298 b 340 -78 276 -204 321 -148 b 351 24 347 -46 351 -14 b 350 63 351 37 350 50 b 347 86 347 71 347 79 b 386 229 347 132 380 179 b 392 305 389 253 392 279 b 372 449 392 354 384 403 b 357 520 364 472 357 495 b 359 540 357 527 357 533 b 361 580 361 553 361 567 b 348 704 361 624 354 664 b 347 716 348 708 347 713 b 357 757 347 732 351 744 b 405 982 383 831 405 904 b 379 1122 405 1031 397 1079 b 348 1145 373 1135 363 1149 z m 298 651 b 300 626 300 642 300 634 b 258 513 300 579 285 543 b 82 338 204 452 134 410 b 81 367 81 347 81 357 b 115 468 81 408 92 439 b 298 651 167 534 242 576 z m 297 370 b 310 377 301 374 305 377 b 321 361 314 377 317 373 b 328 320 325 347 328 333 b 266 212 328 275 302 239 b 75 48 202 161 135 112 b 117 194 76 107 81 157 b 297 370 174 255 236 311 z m 285 48 b 294 16 291 36 294 26 b 288 -7 294 9 292 1 b 228 -92 272 -37 255 -69 b 60 -233 173 -138 120 -184 b 285 48 78 -88 184 -23 z',\r\n        },\r\n        flag128thUp: {\r\n            x_min: 0,\r\n            x_max: 252,\r\n            y_min: -804,\r\n            y_max: 530,\r\n            ha: 1334,\r\n            o: 'm 298 -1158 b 328 -1126 312 -1158 320 -1139 b 330 -1116 330 -1123 330 -1119 b 347 -996 343 -1076 347 -1037 b 328 -837 347 -943 338 -890 b 320 -778 324 -816 320 -798 b 330 -733 320 -763 323 -749 b 340 -665 338 -714 337 -688 b 341 -645 340 -660 341 -652 b 333 -534 341 -609 333 -572 b 343 -471 333 -513 334 -492 b 361 -366 356 -436 361 -402 b 331 -202 361 -311 348 -256 b 328 -187 330 -197 328 -193 b 331 -179 328 -184 328 -181 b 363 -55 353 -137 363 -96 b 337 79 363 -12 351 33 b 327 114 333 92 327 104 b 344 144 327 124 331 132 b 359 174 353 150 357 163 b 361 228 360 193 361 210 b 243 517 361 337 325 435 b 147 596 213 546 179 569 b 75 708 111 626 75 655 b 62 744 75 723 68 733 b 50 763 58 752 58 763 b 46 762 49 763 48 762 b 17 742 36 757 22 757 b 0 697 14 726 0 711 b 1 595 0 662 3 631 b 0 469 0 552 0 511 b 1 429 0 456 0 442 b 22 289 6 382 22 337 b 24 128 22 238 24 184 b 22 66 24 108 23 86 b 19 -19 20 37 19 10 b 20 -132 19 -56 20 -95 b 13 -276 20 -180 19 -229 b 9 -359 10 -304 9 -330 b 12 -487 9 -402 12 -445 b 56 -582 12 -526 29 -554 b 197 -742 107 -632 160 -681 b 288 -1100 265 -851 276 -976 b 288 -1122 288 -1107 287 -1115 b 287 -1145 289 -1129 287 -1138 b 298 -1158 287 -1153 288 -1158 z m 304 150 b 75 475 229 256 112 334 b 304 150 233 357 305 287 z m 271 -73 b 127 72 233 -14 179 26 b 81 167 96 98 81 127 b 84 194 81 176 82 184 b 271 -73 148 102 242 39 z m 279 -396 b 132 -223 233 -330 180 -279 b 81 -112 104 -192 81 -156 b 82 -91 81 -105 81 -98 b 279 -396 167 -125 269 -281 z m 249 -609 b 69 -357 197 -520 88 -471 b 249 -609 131 -441 229 -498 z',\r\n        },\r\n        flag128thDown: {\r\n            x_min: -0.8888888888888888,\r\n            x_max: 252,\r\n            y_min: -580,\r\n            y_max: 754,\r\n            ha: 1334,\r\n            o: 'm 298 1086 b 287 1073 288 1086 287 1081 b 288 1050 287 1066 289 1057 b 288 1028 287 1043 288 1035 b 197 670 276 904 265 779 b 56 510 160 609 107 560 b 12 415 29 482 12 454 b 9 287 12 373 9 330 b 13 204 9 258 10 232 b 20 60 19 157 20 108 b 19 -53 20 23 19 -16 b 22 -138 19 -82 20 -109 b 24 -200 23 -158 24 -180 b 22 -361 24 -256 22 -310 b 1 -501 22 -409 6 -454 b 0 -541 0 -514 0 -528 b 0 -667 0 -583 -3 -624 b 0 -809 0 -675 -3 -791 b 46 -834 4 -825 36 -829 b 50 -835 48 -834 49 -835 b 62 -816 58 -835 58 -824 b 75 -780 68 -805 75 -795 b 147 -668 75 -727 111 -698 b 243 -589 179 -641 213 -618 b 361 -300 325 -507 361 -409 b 359 -246 361 -282 360 -265 b 344 -216 357 -235 353 -222 b 327 -186 331 -204 327 -196 b 337 -151 327 -176 333 -164 b 363 -17 351 -105 363 -60 b 331 107 363 24 353 65 b 328 115 328 109 328 112 b 331 130 328 121 330 125 b 361 294 348 184 361 239 b 343 399 361 330 356 364 b 333 462 334 420 333 441 b 341 573 333 500 341 537 b 340 593 341 580 340 588 b 330 661 337 616 338 642 b 320 706 323 677 320 691 b 328 765 320 726 324 744 b 347 924 338 818 347 871 b 330 1044 347 965 343 1004 b 328 1054 330 1047 330 1051 b 298 1086 320 1067 312 1086 z m 249 537 b 69 285 229 426 131 369 b 249 537 88 399 197 448 z m 279 324 b 82 19 269 209 167 53 b 81 40 81 26 81 33 b 132 151 81 84 104 120 b 279 324 180 207 233 258 z m 271 1 b 84 -266 242 -111 148 -174 b 81 -239 82 -256 81 -248 b 127 -144 81 -199 96 -170 b 271 1 179 -98 233 -58 z m 304 -222 b 75 -547 305 -359 233 -429 b 304 -222 112 -406 229 -328 z',\r\n        },\r\n        accidentalFlat: {\r\n            x_min: 1,\r\n            x_max: 209,\r\n            y_min: -208,\r\n            y_max: 472,\r\n            ha: 680,\r\n            o: 'm 29 -300 b 46 -289 33 -300 39 -297 b 107 -243 65 -274 86 -258 b 301 127 233 -153 301 -30 b 298 186 301 147 301 166 b 190 297 291 256 251 297 b 147 289 177 297 163 294 b 86 265 127 284 107 274 l 85 264 l 85 301 b 91 465 85 356 88 410 b 94 559 91 497 94 527 b 84 651 94 589 91 621 b 66 680 81 661 81 680 l 65 680 b 37 645 49 678 37 665 b 33 523 36 605 32 563 l 33 478 b 26 223 33 393 29 308 b 1 -141 22 101 1 -19 b 17 -287 1 -189 4 -239 b 29 -300 20 -295 23 -300 z m 68 -105 b 76 12 71 -68 72 -29 b 81 107 79 43 81 75 l 86 109 b 171 135 114 121 141 135 b 204 128 181 135 193 132 b 238 92 228 120 239 108 b 230 63 238 84 236 75 b 68 -105 193 -10 132 -59 z',\r\n        },\r\n        accidentalNatural: {\r\n            x_min: 0,\r\n            x_max: 213.5,\r\n            y_min: -456,\r\n            y_max: 462,\r\n            ha: 918,\r\n            o: 'm 255 -657 b 281 -624 271 -657 275 -636 b 285 -599 282 -615 285 -608 b 292 -300 288 -500 289 -400 b 289 -161 292 -253 289 -207 b 300 128 292 -65 297 32 b 304 168 300 128 302 150 l 304 173 l 305 190 l 305 199 l 307 225 b 304 259 307 229 310 246 b 272 298 297 274 302 305 b 63 266 204 279 134 272 b 72 514 68 348 72 432 b 71 595 72 541 72 567 b 56 665 71 619 66 642 b 17 579 9 651 17 608 b 3 144 19 433 7 289 b 0 -7 1 94 0 43 b 3 -134 0 -50 1 -92 b 7 -219 3 -163 7 -192 b 35 -251 7 -243 17 -251 b 49 -249 39 -251 43 -251 l 223 -223 l 230 -222 l 230 -359 b 223 -516 230 -410 223 -464 b 236 -619 223 -550 226 -585 b 255 -657 240 -634 236 -657 z m 58 -63 b 55 81 56 -14 53 33 l 56 99 b 85 99 65 99 75 98 b 232 108 134 104 183 107 l 240 109 l 236 66 b 232 -48 235 29 232 -10 b 58 -81 174 -63 115 -73 z',\r\n        },\r\n        accidentalSharp: {\r\n            x_min: -22,\r\n            x_max: 390,\r\n            y_min: -384,\r\n            y_max: 383,\r\n            ha: 767,\r\n            o: 'm 202 -553 b 219 -526 213 -552 216 -536 b 226 -471 225 -507 226 -488 b 225 -425 226 -455 225 -441 b 226 -392 225 -415 225 -402 b 233 -305 229 -363 232 -334 l 297 -292 b 331 -469 300 -353 311 -412 b 347 -485 333 -477 338 -485 b 363 -469 356 -487 359 -477 b 374 -418 373 -454 374 -435 b 376 -382 376 -405 376 -393 b 372 -276 376 -347 373 -311 l 455 -259 b 550 -156 534 -243 544 -232 b 550 -109 550 -137 552 -124 b 526 -78 549 -91 541 -78 l 523 -78 b 507 -79 517 -78 513 -78 b 403 -101 474 -88 438 -95 l 379 -105 b 382 -42 380 -85 380 -63 b 384 96 383 4 384 50 b 503 131 425 107 464 118 b 549 173 524 138 543 150 b 562 249 554 199 562 223 b 554 294 562 264 560 279 b 536 315 549 308 544 315 l 533 315 b 517 312 528 315 523 315 b 382 266 472 294 428 279 l 377 344 b 359 531 374 406 372 469 b 348 552 356 539 357 552 l 347 552 l 343 552 b 315 528 331 549 317 544 l 315 501 b 320 249 315 416 318 333 l 243 232 b 239 361 243 275 242 318 b 226 425 238 383 238 403 b 199 359 194 409 199 382 b 193 223 196 312 194 268 b 72 202 153 215 112 209 b 4 118 13 192 4 183 b 10 66 0 102 12 84 b 33 29 7 39 14 30 b 48 32 37 29 42 30 b 187 55 95 39 141 46 l 183 -75 b 176 -145 181 -99 179 -122 b 16 -179 122 -156 69 -166 b -32 -232 -14 -186 -32 -197 b -17 -331 -32 -266 -19 -298 b -1 -356 -17 -347 -13 -354 b 12 -353 1 -356 6 -354 b 167 -320 63 -341 115 -331 b 166 -377 166 -338 166 -357 b 189 -526 166 -428 171 -477 b 202 -553 192 -536 189 -553 z m 240 -132 b 243 -37 242 -101 242 -69 b 245 65 245 -3 245 30 b 315 79 269 69 292 73 b 301 -120 308 13 305 -53 z',\r\n        },\r\n        accidentalDoubleSharp: {\r\n            x_min: 0,\r\n            x_max: 287,\r\n            y_min: -159,\r\n            y_max: 159,\r\n            ha: 318,\r\n            o: 'm 84 -229 b 107 -216 91 -229 98 -225 b 200 -125 138 -186 167 -154 b 232 -95 212 -115 222 -105 b 347 -189 271 -125 310 -157 b 370 -200 356 -196 363 -200 b 396 -179 380 -200 389 -192 b 412 -102 410 -154 406 -125 b 377 -27 410 -69 400 -46 l 325 14 b 402 91 350 42 374 68 b 413 127 410 96 413 107 b 382 200 409 148 397 176 b 350 229 370 220 360 229 b 314 210 340 229 328 223 b 274 174 300 199 285 187 b 212 104 252 151 232 128 b 92 187 173 132 132 161 b 78 193 86 192 82 193 b 68 190 75 193 72 193 b 48 179 62 186 53 187 b 40 137 43 168 40 154 b 81 16 40 92 56 32 b 107 -3 89 10 98 4 b 14 -94 76 -32 45 -62 b 0 -124 6 -102 0 -114 b 12 -154 0 -134 3 -144 b 62 -215 26 -176 48 -193 b 84 -229 69 -225 76 -229 z',\r\n        },\r\n        accidentalDoubleFlat: {\r\n            x_min: 0,\r\n            x_max: 359,\r\n            y_min: -220,\r\n            y_max: 446,\r\n            ha: 666,\r\n            o: 'm 43 -317 b 72 -301 55 -317 63 -310 b 160 -186 108 -268 134 -226 b 236 -60 186 -145 212 -102 b 233 -131 235 -85 233 -108 b 239 -220 233 -161 235 -190 b 259 -246 240 -233 239 -240 b 301 -228 284 -252 291 -238 b 465 -7 369 -163 416 -85 b 517 173 500 48 517 108 b 451 307 517 229 505 284 b 409 315 436 312 422 315 b 331 287 382 315 356 305 b 311 274 324 282 320 274 l 310 274 l 310 566 b 305 621 310 585 312 603 b 294 642 301 628 305 642 l 292 642 b 264 622 282 641 266 636 b 253 575 259 606 256 590 b 246 418 248 523 246 471 b 248 243 246 360 248 302 l 248 187 b 164 238 220 225 193 238 b 85 213 140 238 112 226 b 84 229 85 220 84 225 b 86 315 85 258 86 287 b 81 528 86 386 82 458 b 71 582 81 547 78 566 b 56 603 66 590 68 603 l 53 603 b 23 580 40 600 26 598 b 19 537 20 566 19 552 b 20 514 19 530 19 521 b 26 390 24 472 26 432 b 14 66 26 282 16 174 b 0 -168 13 -12 0 -91 b 12 -279 0 -206 3 -242 b 30 -314 16 -294 14 -308 b 43 -317 35 -317 39 -317 z m 301 -72 b 302 7 302 -45 302 -19 l 302 86 b 351 158 304 121 321 145 b 383 166 361 163 373 166 b 435 143 402 166 419 157 b 445 127 441 138 445 132 b 441 114 445 122 444 118 b 301 -72 397 49 354 -14 z m 75 -147 b 73 30 75 -86 75 -29 b 118 82 73 62 92 76 b 132 84 124 84 128 84 b 190 52 156 84 174 69 b 193 40 192 49 193 45 b 192 33 193 37 193 35 b 75 -147 157 -30 125 -95 z',\r\n        },\r\n        accidentalParensLeft: {\r\n            x_min: 0,\r\n            x_max: 130.18934911242604,\r\n            y_min: -270,\r\n            y_max: 267.6082500723851,\r\n            ha: 537.6082500723851,\r\n            o: 'm 107 -389 b 127 -374 114 -389 120 -384 b 141 -347 132 -367 137 -357 b 151 -294 148 -330 151 -311 b 122 -207 151 -265 141 -236 b 63 -65 94 -164 72 -117 b 59 -10 60 -46 59 -27 b 145 223 59 78 94 153 b 187 354 176 262 189 305 b 177 384 187 364 190 380 b 143 373 166 387 153 383 b 124 354 137 367 130 361 b 0 -35 33 240 0 108 l 0 -92 b 85 -372 4 -193 27 -287 b 107 -389 92 -383 99 -389 z',\r\n        },\r\n        accidentalParensRight: {\r\n            x_min: -0.4444444444444445,\r\n            x_max: 139,\r\n            y_min: -275,\r\n            y_max: 277,\r\n            ha: 552,\r\n            o: 'm 58 -396 b 96 -354 75 -396 85 -370 b 200 13 168 -238 200 -111 b 153 268 200 109 184 190 b 49 392 131 320 101 364 b 26 399 40 397 33 399 b 0 366 10 399 0 387 b 0 318 -1 350 0 334 l 0 291 b 27 238 -3 266 7 253 b 143 9 105 180 143 98 b 141 -20 143 -1 143 -10 b 63 -225 135 -92 108 -164 b 36 -307 45 -251 36 -278 b 40 -344 36 -320 37 -331 b 42 -356 42 -347 42 -351 b 58 -396 42 -374 37 -396 z',\r\n        },\r\n        accidentalQuarterToneFlatStein: {\r\n            x_min: 0,\r\n            x_max: 208,\r\n            y_min: -240,\r\n            y_max: 440,\r\n            ha: 680,\r\n            o: 'm 272 -346 b 284 -333 278 -346 281 -341 b 300 -187 297 -285 300 -235 b 275 177 300 -65 279 55 b 268 432 272 262 268 347 l 268 477 b 264 599 269 517 265 559 b 236 634 264 619 252 632 l 235 634 b 217 605 220 634 220 615 b 207 513 210 575 207 543 b 210 419 207 481 210 451 b 216 255 213 364 216 310 l 216 217 l 215 219 b 154 243 194 228 174 238 b 111 251 138 248 124 251 b 3 140 50 251 10 210 b 0 81 0 120 0 101 b 194 -289 0 -76 68 -199 b 255 -336 215 -304 236 -320 b 272 -346 262 -343 268 -346 z m 233 -151 b 71 17 168 -105 108 -56 b 63 46 65 29 63 37 b 96 82 62 62 73 73 b 130 89 108 86 120 89 b 215 63 160 89 187 75 l 220 60 b 225 -35 220 29 222 -3 b 233 -151 229 -75 230 -114 z',\r\n        },\r\n        accidentalThreeQuarterTonesFlatZimmermann: {\r\n            x_min: 0,\r\n            x_max: 422,\r\n            y_min: -240,\r\n            y_max: 440,\r\n            ha: 680,\r\n            o: 'm 272 -346 b 284 -333 278 -346 281 -341 b 300 -187 297 -285 300 -235 b 275 177 300 -65 279 55 b 268 432 272 262 268 347 l 268 477 b 264 599 269 517 265 559 b 236 634 264 619 252 632 l 235 634 b 217 605 220 634 220 615 b 207 513 210 575 207 543 b 210 419 207 481 210 451 b 216 255 213 364 216 310 l 216 217 l 215 219 b 154 243 194 228 174 238 b 111 251 138 248 124 251 b 3 140 50 251 10 210 b 0 81 0 120 0 101 b 194 -289 0 -76 68 -199 b 255 -336 215 -304 236 -320 b 272 -346 262 -343 268 -346 z m 336 -346 b 353 -336 340 -346 346 -343 b 413 -289 372 -320 393 -304 b 608 81 540 -199 608 -76 b 605 140 608 101 608 120 b 497 251 598 210 557 251 b 454 243 484 251 469 248 b 393 219 433 238 413 228 l 392 217 l 392 255 b 397 419 392 310 395 364 b 400 513 397 451 400 481 b 390 605 400 543 397 575 b 373 634 387 615 387 634 l 372 634 b 344 599 356 632 344 619 b 340 477 343 559 338 517 l 340 432 b 333 177 340 347 336 262 b 308 -187 328 55 308 -65 b 324 -333 308 -235 311 -285 b 336 -346 327 -341 330 -346 z m 233 -151 b 71 17 168 -105 108 -56 b 63 46 65 29 63 37 b 96 82 62 62 73 73 b 130 89 108 86 120 89 b 215 63 160 89 187 75 l 220 60 b 225 -35 220 29 222 -3 b 233 -151 229 -75 230 -114 z m 374 -151 b 383 -35 377 -114 379 -75 b 387 60 386 -3 387 29 l 393 63 b 478 89 420 75 448 89 b 511 82 488 89 500 86 b 544 46 534 73 546 62 b 537 17 544 37 543 29 b 374 -151 500 -56 439 -105 z',\r\n        },\r\n        accidentalQuarterToneSharpStein: {\r\n            x_min: 0,\r\n            x_max: 300,\r\n            y_min: -338,\r\n            y_max: 351,\r\n            ha: 689,\r\n            o: 'm 194 -487 b 225 -432 215 -469 223 -452 b 238 -232 229 -366 236 -298 b 377 -199 285 -220 331 -209 b 418 -164 397 -193 410 -181 b 432 -88 428 -138 432 -114 b 412 -42 432 -55 428 -42 b 389 -46 406 -42 399 -43 l 235 -85 b 233 -20 235 -63 233 -42 b 233 105 232 22 233 63 b 312 121 259 111 285 117 b 406 226 390 134 400 145 b 373 284 409 268 402 284 b 344 281 364 284 356 282 b 232 258 307 276 269 266 b 230 308 232 275 232 291 b 210 505 229 374 232 441 b 183 471 189 501 184 490 b 180 406 181 449 180 428 b 184 246 180 353 184 300 b 48 222 140 236 94 228 b 0 168 6 216 0 209 b 7 86 1 141 4 114 b 27 66 9 73 13 66 l 35 66 b 184 94 85 66 135 84 b 187 -1 184 62 186 30 b 190 -96 189 -33 190 -65 l 112 -114 b 35 -213 27 -132 35 -132 b 33 -253 35 -226 35 -240 b 49 -276 33 -269 37 -276 b 62 -275 52 -276 56 -276 l 186 -245 l 186 -256 b 179 -387 180 -300 177 -343 b 194 -487 180 -419 179 -454 z',\r\n        },\r\n        accidentalThreeQuarterTonesSharpStein: {\r\n            x_min: -23,\r\n            x_max: 388,\r\n            y_min: -373,\r\n            y_max: 445,\r\n            ha: 818,\r\n            o: 'm 114 -537 b 138 -475 137 -518 138 -495 b 147 -292 138 -413 144 -353 b 212 -278 168 -287 190 -282 b 243 -444 215 -333 225 -389 b 261 -467 248 -454 251 -465 b 281 -446 272 -469 276 -455 b 292 -347 292 -416 288 -384 b 288 -262 289 -320 288 -291 l 374 -245 b 376 -311 374 -266 374 -288 b 390 -456 379 -357 379 -405 b 416 -396 412 -436 415 -418 b 423 -287 420 -360 423 -323 b 422 -235 423 -269 423 -252 b 451 -229 432 -233 441 -232 b 547 -98 524 -215 547 -199 l 547 -89 b 521 -49 546 -59 540 -49 b 497 -52 516 -49 507 -49 b 418 -68 469 -56 444 -63 b 423 52 419 -29 422 12 b 426 140 425 81 425 109 b 495 160 449 145 472 153 b 552 219 526 170 546 189 b 559 279 557 240 553 262 b 530 341 559 324 552 341 b 490 331 520 341 507 338 b 432 311 471 324 452 318 b 449 552 436 392 442 471 b 452 588 451 563 452 575 b 446 622 452 599 451 611 b 436 641 444 629 448 641 b 418 628 428 641 420 636 b 409 602 413 621 410 611 b 386 297 396 501 390 399 b 297 274 356 288 327 281 b 291 403 295 317 294 360 b 274 550 288 452 284 501 b 259 569 271 564 265 569 b 240 559 253 569 248 563 b 230 537 232 554 230 546 l 230 488 b 233 369 230 448 232 409 b 236 261 236 333 238 297 b 156 245 210 255 183 251 b 154 396 154 295 154 346 b 150 416 154 403 153 410 b 140 438 145 423 150 438 l 138 438 b 118 413 128 436 118 428 b 112 354 118 393 114 374 b 109 238 109 315 109 276 b 49 226 89 233 69 230 b 3 163 16 222 3 202 b 7 91 3 138 9 114 b 29 62 7 69 13 62 b 39 63 32 62 35 63 b 104 73 60 66 82 71 b 101 -10 104 46 102 17 l 92 -132 l 10 -150 b -33 -204 -19 -157 -33 -170 b -19 -310 -32 -240 -19 -274 b -6 -324 -19 -321 -13 -324 b 6 -323 -1 -324 1 -324 b 82 -307 32 -317 58 -311 b 81 -376 82 -330 81 -353 b 114 -537 81 -431 94 -484 z m 294 -92 b 297 -37 295 -73 295 -56 b 300 49 300 -9 300 20 l 300 108 b 379 127 325 114 353 120 b 374 -76 376 59 374 -9 b 294 -92 347 -82 320 -86 z m 154 -120 b 157 20 154 -73 156 -26 b 158 82 158 40 158 62 b 230 95 183 86 206 89 b 225 0 229 63 226 32 b 217 -107 223 -35 220 -71 z',\r\n        },\r\n        accidentalBuyukMucennebFlat: {\r\n            x_min: 1.8692317181955784,\r\n            x_max: 287,\r\n            y_min: -248,\r\n            y_max: 432.4720949426819,\r\n            ha: 680.4720949426819,\r\n            o: 'm 410 128 b 302 239 403 199 363 239 b 259 232 289 239 275 236 b 199 207 239 226 219 216 l 197 206 l 197 243 l 197 251 b 347 317 248 272 298 295 b 376 347 360 324 372 334 b 389 435 387 376 393 405 b 348 454 384 462 377 465 b 202 387 300 432 251 409 b 203 408 203 395 203 402 l 203 431 b 347 490 252 451 300 469 b 376 517 360 495 372 505 b 389 599 387 546 393 572 b 348 616 384 625 377 628 l 203 556 b 196 593 202 569 199 582 b 179 622 193 603 193 622 l 177 622 b 150 588 161 621 150 608 b 147 533 150 570 148 552 b 29 488 108 517 69 503 b 3 455 12 482 3 472 b 12 353 1 422 9 389 b 145 408 56 372 101 389 b 145 363 145 392 145 377 l 29 315 b 3 281 12 310 3 298 b 12 170 1 245 9 209 l 141 226 b 138 166 140 206 138 186 b 114 -199 134 43 115 -76 b 130 -344 114 -246 117 -297 b 141 -357 132 -353 135 -357 b 158 -347 145 -357 151 -354 b 219 -301 177 -331 199 -315 b 413 69 346 -210 413 -88 b 410 128 413 89 413 108 z m 350 35 b 343 6 350 26 348 17 b 180 -163 308 -69 245 -117 b 189 -46 183 -125 184 -86 b 193 49 192 -14 193 17 l 199 52 b 284 78 226 63 253 78 b 317 71 294 78 305 75 b 350 35 340 62 351 50 z',\r\n        },\r\n        accidentalBakiyeFlat: {\r\n            x_min: 1.8692317181955784,\r\n            x_max: 287,\r\n            y_min: -236,\r\n            y_max: 444,\r\n            ha: 680,\r\n            o: 'm 141 -340 b 158 -330 145 -340 151 -337 b 219 -284 177 -314 199 -298 b 413 86 346 -193 413 -71 b 410 145 413 107 413 125 b 302 256 403 216 363 256 b 259 249 289 256 275 253 b 199 225 239 243 219 233 l 197 223 l 197 261 b 199 334 197 285 199 310 b 347 406 249 357 298 382 b 376 439 360 413 372 425 b 390 516 384 465 390 490 b 389 537 390 523 390 530 b 372 564 384 556 382 564 b 348 557 367 564 359 562 b 204 487 300 537 253 510 b 206 518 206 497 206 507 b 196 611 206 549 203 580 b 179 639 193 621 193 639 l 177 639 b 150 605 161 638 150 625 b 145 482 148 564 144 523 l 145 458 b 29 405 107 439 68 420 b 3 366 12 397 3 386 b 12 243 1 325 9 287 b 143 307 56 265 99 285 l 138 183 b 114 -181 134 60 114 -59 b 130 -327 114 -229 117 -279 b 141 -340 132 -336 135 -340 z m 180 -145 b 189 -29 183 -108 184 -69 b 193 66 192 3 193 35 l 199 69 b 284 95 226 81 253 95 b 317 88 294 95 305 92 b 350 52 340 79 351 68 b 343 23 350 43 348 35 b 180 -145 305 -50 245 -99 z',\r\n        },\r\n        accidentalKomaSharp: {\r\n            x_min: 0,\r\n            x_max: 300,\r\n            y_min: -338,\r\n            y_max: 351,\r\n            ha: 689,\r\n            o: 'm 194 -487 b 225 -432 215 -469 223 -452 b 238 -232 229 -366 236 -298 b 377 -199 285 -220 331 -209 b 418 -164 397 -193 410 -181 b 432 -88 428 -138 432 -114 b 412 -42 432 -55 428 -42 b 389 -46 406 -42 399 -43 l 235 -85 b 233 -20 235 -63 233 -42 b 233 105 232 22 233 63 b 312 121 259 111 285 117 b 406 226 390 134 400 145 b 373 284 409 268 402 284 b 344 281 364 284 356 282 b 232 258 307 276 269 266 b 230 308 232 275 232 291 b 210 505 229 374 232 441 b 183 471 189 501 184 490 b 180 406 181 449 180 428 b 184 246 180 353 184 300 b 48 222 140 236 94 228 b 0 168 6 216 0 209 b 7 86 1 141 4 114 b 27 66 9 73 13 66 l 35 66 b 184 94 85 66 135 84 b 187 -1 184 62 186 30 b 190 -96 189 -33 190 -65 l 112 -114 b 35 -213 27 -132 35 -132 b 33 -253 35 -226 35 -240 b 49 -276 33 -269 37 -276 b 62 -275 52 -276 56 -276 l 186 -245 l 186 -256 b 179 -387 180 -300 177 -343 b 194 -487 180 -419 179 -454 z',\r\n        },\r\n        accidentalKucukMucennebSharp: {\r\n            x_min: -0.15206251809627475,\r\n            x_max: 359,\r\n            y_min: -420,\r\n            y_max: 343,\r\n            ha: 763,\r\n            o: 'm 236 -605 b 262 -543 256 -583 261 -564 b 269 -423 268 -503 269 -464 b 266 -340 269 -396 268 -367 l 361 -318 b 405 -276 384 -312 399 -298 b 413 -189 412 -248 416 -219 b 395 -164 412 -171 409 -164 b 382 -166 392 -164 387 -164 b 264 -193 343 -176 304 -184 b 269 -102 265 -163 268 -132 b 454 -62 331 -89 392 -78 b 501 -23 477 -58 494 -45 b 517 62 511 6 517 33 b 487 112 517 95 513 112 b 471 111 482 112 477 112 b 274 66 406 95 340 81 b 276 138 275 91 276 114 b 350 154 301 144 325 148 b 402 203 377 160 396 176 b 412 284 408 230 412 258 b 392 311 412 302 406 311 b 372 308 386 311 379 310 b 287 291 343 301 314 297 l 295 405 b 298 441 297 416 298 428 b 292 475 298 452 297 464 b 282 494 289 482 294 494 b 264 481 274 494 266 490 b 255 455 259 474 256 464 b 239 282 248 397 243 340 b 148 268 209 278 179 274 b 62 164 62 252 62 253 l 62 132 b 79 108 60 117 65 108 l 86 108 l 230 130 b 229 92 230 118 229 105 b 228 56 228 79 228 68 b 66 20 173 43 120 32 b 0 -59 6 7 3 1 l 0 -138 b 14 -160 -1 -156 4 -160 b 27 -158 19 -160 23 -160 b 222 -112 92 -141 157 -127 b 220 -203 220 -143 220 -173 b 147 -217 196 -207 171 -213 b 89 -288 92 -228 89 -229 b 95 -347 85 -305 96 -325 b 112 -374 92 -366 98 -374 b 125 -373 117 -374 121 -374 l 220 -351 b 222 -458 220 -386 220 -422 b 236 -605 223 -504 225 -552 z',\r\n        },\r\n        accidentalKoron: {\r\n            x_min: 0,\r\n            x_max: 303,\r\n            y_min: -462.4598053473055,\r\n            y_max: 180,\r\n            ha: 642.4598053473055,\r\n            o: 'm 59 -665 b 72 -649 69 -662 72 -657 b 69 -626 72 -642 69 -634 b 69 -622 69 -625 69 -624 l 69 -600 b 55 -156 60 -456 68 -311 b 86 -170 66 -166 76 -170 b 112 -163 95 -170 104 -166 b 390 -35 204 -120 298 -78 b 436 -1 409 -27 436 -27 b 396 46 436 22 413 33 l 382 55 b 46 243 271 121 157 179 b 12 259 29 253 17 259 b 0 219 1 259 0 248 b 3 -372 0 22 3 -176 b 6 -616 3 -454 6 -536 b 59 -665 6 -638 40 -671 z m 55 199 b 363 24 156 141 258 84 b 55 -118 259 -24 160 -69 z',\r\n        },\r\n        accidentalSori: {\r\n            x_min: 0,\r\n            x_max: 434,\r\n            y_min: -295,\r\n            y_max: 325,\r\n            ha: 620,\r\n            o: 'm 194 -425 b 196 -409 194 -418 196 -413 b 194 -194 196 -337 196 -266 b 364 -127 251 -171 308 -150 b 361 -321 363 -192 364 -256 b 410 -387 360 -357 373 -377 b 413 -373 412 -382 413 -377 b 418 -114 418 -287 418 -200 l 418 -105 b 595 -35 477 -82 536 -59 b 625 0 612 -27 625 -22 b 593 48 624 23 618 39 l 419 117 b 423 370 419 202 423 285 b 426 403 423 382 426 393 b 418 436 426 415 425 426 b 384 468 409 449 399 468 b 369 448 370 468 369 459 b 369 436 369 444 369 441 l 369 428 l 369 423 b 367 138 369 328 367 233 l 353 143 l 192 207 l 192 367 b 173 406 192 383 184 396 b 151 422 167 413 160 422 b 144 420 148 422 147 422 b 137 403 138 416 137 410 l 137 392 l 137 229 b 33 271 102 243 68 256 b 13 276 26 274 19 276 b 0 262 6 276 0 272 b 35 199 1 239 0 212 l 138 160 b 140 -148 138 58 138 -45 b 56 -181 111 -158 84 -170 b 24 -215 35 -189 24 -199 b 29 -235 24 -220 26 -228 b 49 -253 35 -249 42 -253 b 78 -240 59 -253 69 -243 b 140 -216 98 -233 120 -225 l 140 -356 b 194 -425 140 -406 141 -406 z m 194 -125 b 193 138 194 -37 193 50 b 315 89 233 122 275 107 b 366 71 333 84 350 76 b 364 -58 366 27 366 -16 b 194 -125 308 -81 251 -104 z m 419 49 l 526 7 l 485 -10 l 419 -36 z',\r\n        },\r\n        articAccentAbove: {\r\n            x_min: 0,\r\n            x_max: 425,\r\n            y_min: 0,\r\n            y_max: 326,\r\n            ha: 326,\r\n            o: 'm 27 1 b 78 12 46 0 62 6 b 347 112 168 45 253 91 b 521 184 409 128 459 167 b 608 259 557 194 589 220 b 612 274 611 265 612 271 b 598 292 612 281 608 287 b 477 347 559 312 518 331 b 176 465 374 384 275 425 b 156 469 168 468 161 469 b 125 456 145 469 137 465 b 53 370 96 432 78 399 b 45 353 48 363 45 357 b 68 333 45 344 52 337 b 360 225 166 298 262 261 b 192 154 302 203 249 171 b 13 36 120 132 53 105 b 0 13 9 29 0 22 l 0 9 b 16 0 3 1 10 0 l 26 0 b 27 1 27 0 27 0 z',\r\n        },\r\n        articAccentBelow: {\r\n            x_min: 0,\r\n            x_max: 425,\r\n            y_min: -326,\r\n            y_max: 0,\r\n            ha: 326,\r\n            o: 'm 26 -469 l 27 -469 b 78 -458 46 -469 62 -464 b 347 -357 168 -426 253 -380 b 521 -285 409 -341 459 -302 b 608 -210 557 -276 589 -249 b 612 -196 611 -204 612 -200 b 598 -179 612 -189 608 -183 b 477 -122 559 -157 518 -138 b 176 -4 374 -85 275 -45 b 156 0 168 -1 161 0 b 125 -13 145 0 137 -4 b 53 -99 96 -37 78 -71 b 45 -117 48 -107 45 -112 b 68 -137 45 -125 52 -132 b 360 -245 166 -171 262 -209 b 192 -315 302 -266 249 -300 b 13 -433 120 -337 53 -366 b 0 -456 9 -442 0 -448 l 0 -461 b 16 -469 3 -468 10 -469 z',\r\n        },\r\n        articTenutoAbove: {\r\n            x_min: 0.35192668236256364,\r\n            x_max: 471.1238660564107,\r\n            y_min: 0,\r\n            y_max: 56,\r\n            ha: 56,\r\n            o: 'm 137 0 b 197 1 156 0 179 1 b 409 6 268 1 338 6 b 482 4 432 6 459 6 b 556 0 508 3 534 0 b 651 10 588 0 621 3 b 678 27 662 12 678 10 b 654 59 680 45 672 53 b 511 75 606 73 560 73 b 255 81 426 78 341 81 b 160 79 222 81 193 79 l 36 79 b 1 71 24 78 7 85 b 19 32 -3 56 9 43 b 45 16 26 24 36 20 b 137 0 76 3 108 0 z',\r\n        },\r\n        articTenutoBelow: {\r\n            x_min: 0.35192668236256364,\r\n            x_max: 471.1238660564107,\r\n            y_min: -59,\r\n            y_max: -3,\r\n            ha: 56,\r\n            o: 'm 137 -85 b 197 -84 156 -85 179 -84 b 409 -79 268 -84 338 -79 b 482 -81 432 -79 459 -79 b 556 -85 508 -82 534 -85 b 651 -75 588 -85 621 -82 b 678 -58 662 -73 678 -75 b 654 -26 680 -40 672 -32 b 511 -10 606 -12 560 -12 b 255 -4 426 -7 341 -4 b 160 -6 222 -4 193 -6 l 36 -6 b 1 -14 24 -7 7 0 b 19 -53 -3 -29 9 -42 b 45 -69 26 -60 36 -65 b 137 -85 76 -82 108 -85 z',\r\n        },\r\n        articStaccatoAbove: {\r\n            x_min: 1.4151102965496913,\r\n            x_max: 112,\r\n            y_min: 0,\r\n            y_max: 156,\r\n            ha: 156,\r\n            o: 'm 98 0 b 132 23 109 0 122 7 b 161 112 150 50 161 79 b 158 148 161 124 161 137 b 125 186 154 167 131 167 b 63 225 117 215 85 216 b 23 197 45 222 30 219 b 3 91 12 163 12 127 b 19 66 0 79 4 69 b 65 27 40 62 53 46 b 98 0 76 9 88 0 z',\r\n        },\r\n        articStaccatoBelow: {\r\n            x_min: 1.4151102965496913,\r\n            x_max: 112.08403222864916,\r\n            y_min: -156,\r\n            y_max: 0,\r\n            ha: 156,\r\n            o: 'm 132 -202 b 161 -112 151 -174 163 -145 b 158 -76 161 -101 161 -88 b 125 -39 153 -58 131 -58 b 63 0 115 -10 85 -9 b 23 -27 45 -3 30 -6 b 3 -134 12 -62 10 -98 b 19 -158 0 -145 4 -156 b 65 -197 40 -164 53 -179 b 98 -225 75 -216 88 -225 b 132 -202 109 -225 122 -217 z',\r\n        },\r\n        articStaccatissimoAbove: {\r\n            x_min: 0,\r\n            x_max: 139,\r\n            y_min: 0,\r\n            y_max: 411,\r\n            ha: 411,\r\n            o: 'm 104 0 b 144 115 143 29 138 75 b 197 423 158 217 180 320 b 200 454 199 433 200 444 b 181 540 200 482 193 513 b 112 592 167 573 141 592 b 55 567 92 592 72 585 b 0 490 32 546 3 527 l 0 484 b 27 279 14 416 14 347 b 84 20 43 193 52 104 b 96 0 86 13 92 6 z',\r\n        },\r\n        articStaccatissimoBelow: {\r\n            x_min: 0,\r\n            x_max: 139,\r\n            y_min: -411,\r\n            y_max: 0,\r\n            ha: 411,\r\n            o: 'm 88 -592 b 145 -567 108 -592 128 -585 b 200 -490 168 -546 197 -527 l 200 -484 b 173 -279 186 -416 186 -347 b 117 -20 157 -193 148 -104 b 104 0 114 -13 108 -6 l 96 0 b 56 -115 58 -29 62 -75 b 3 -423 42 -217 20 -320 b 0 -454 1 -433 0 -444 b 19 -540 0 -482 7 -513 b 88 -592 33 -573 59 -592 z',\r\n        },\r\n        articMarcatoAbove: {\r\n            x_min: 0.04121419527862119,\r\n            x_max: 396,\r\n            y_min: 0,\r\n            y_max: 328.0000000000001,\r\n            ha: 328.0000000000001,\r\n            o: 'm 477 0 b 510 13 488 0 500 6 b 570 124 546 40 563 81 b 547 183 570 147 560 166 b 356 422 487 265 405 330 b 346 442 354 429 350 436 l 346 444 b 318 465 340 456 330 464 l 312 469 b 274 449 294 480 284 461 b 242 413 262 438 253 425 b 56 196 177 343 112 274 b 1 56 26 154 13 105 b 27 20 -4 35 9 20 b 42 23 32 20 37 20 b 84 53 59 29 72 39 b 255 269 141 125 193 200 b 275 229 262 255 266 242 b 448 14 324 151 390 86 b 477 0 456 4 467 0 z',\r\n        },\r\n        articMarcatoBelow: {\r\n            x_min: 0,\r\n            x_max: 395.9587858047214,\r\n            y_min: -328.0000000000001,\r\n            y_max: 0,\r\n            ha: 328.0000000000001,\r\n            o: 'm 258 -469 b 297 -449 276 -480 287 -461 b 328 -413 308 -438 317 -425 b 514 -196 393 -343 458 -274 b 569 -56 544 -154 557 -105 b 543 -20 575 -35 562 -20 b 528 -23 539 -20 533 -20 b 487 -53 511 -29 498 -39 b 315 -269 429 -125 377 -200 b 295 -229 308 -255 304 -242 b 122 -14 246 -151 180 -86 b 94 0 114 -4 104 0 b 60 -13 82 0 71 -6 b 0 -124 24 -40 7 -81 b 23 -183 0 -147 10 -166 b 215 -422 84 -265 166 -330 b 225 -442 216 -429 220 -436 l 225 -444 b 252 -465 230 -456 240 -464 z',\r\n        },\r\n        fermataAbove: {\r\n            x_min: -0.04550444040404433,\r\n            x_max: 472,\r\n            y_min: 2.015071727506986,\r\n            y_max: 454,\r\n            ha: 451.984928272493,\r\n            o: 'm 39 10 b 78 108 66 37 71 73 b 163 311 92 181 111 252 b 284 423 199 353 239 392 b 373 458 312 444 340 454 b 433 431 395 458 410 446 b 603 153 530 361 596 276 b 595 121 603 144 595 131 l 595 88 b 602 50 596 75 589 55 b 639 73 619 43 631 60 b 651 102 645 82 648 92 b 667 194 660 132 662 163 b 680 278 671 222 672 248 b 560 567 680 386 638 481 b 396 654 508 625 452 649 b 291 632 364 654 325 644 b 161 526 235 613 200 566 b 4 249 85 446 26 357 b 4 174 0 222 -3 196 b 10 19 4 124 4 69 b 29 4 12 6 16 0 b 39 10 35 4 33 4 z m 338 37 b 370 40 350 36 357 36 b 380 75 387 40 380 43 b 389 94 382 79 382 85 b 356 132 389 111 374 122 b 269 154 328 147 300 156 b 225 125 252 154 228 157 b 261 48 222 81 232 56 b 338 37 287 40 312 40 z',\r\n        },\r\n        fermataBelow: {\r\n            x_min: -0.310835055998654,\r\n            x_max: 518.570567335755,\r\n            y_min: -430,\r\n            y_max: -0.9161449836506543,\r\n            ha: 429.08385501634933,\r\n            o: 'm 344 -615 b 500 -543 402 -602 452 -576 b 713 -253 605 -471 661 -364 b 746 -98 737 -204 750 -153 b 727 -59 744 -82 744 -59 b 688 -88 711 -59 694 -68 b 678 -109 687 -96 683 -102 b 562 -314 648 -183 611 -252 b 387 -439 516 -373 458 -416 b 328 -449 367 -446 347 -449 b 180 -386 274 -449 225 -423 b 69 -179 111 -330 69 -262 b 75 -121 69 -160 71 -141 b 84 -58 78 -101 84 -79 b 82 -39 84 -52 84 -45 b 68 -1 79 -26 82 -4 b 26 -32 49 0 33 -12 b 20 -52 24 -39 22 -45 b 0 -223 9 -107 -3 -161 b 141 -553 1 -348 27 -468 b 304 -619 192 -590 243 -619 b 344 -615 317 -619 330 -618 z m 415 -190 b 435 -157 429 -192 435 -184 b 308 -27 435 -86 379 -27 b 271 -46 287 -27 272 -35 b 269 -69 269 -55 269 -62 b 364 -183 269 -128 302 -170 z',\r\n        },\r\n        fermataLongAbove: {\r\n            x_min: 0,\r\n            x_max: 591.4911182523068,\r\n            y_min: -6,\r\n            y_max: 337.10134960318186,\r\n            ha: 343.10134960318186,\r\n            o: 'm 20 -9 b 36 14 29 -9 35 3 b 49 109 45 45 49 78 b 48 143 49 121 49 131 b 42 312 40 200 45 256 b 63 338 42 331 46 338 b 68 340 65 338 66 338 b 279 333 138 336 209 334 b 760 317 439 330 599 323 b 783 298 775 317 782 315 l 796 161 b 814 17 801 115 802 68 b 851 144 840 45 855 102 b 824 396 842 228 834 312 b 760 468 816 459 812 467 l 55 485 b 1 433 12 487 1 478 l 1 387 b 0 203 1 325 0 264 b 9 17 0 141 3 79 b 20 -9 9 7 6 -9 z m 403 3 b 439 6 413 3 425 4 b 477 42 464 9 474 22 b 478 62 478 49 478 55 l 478 84 b 465 160 478 109 478 135 b 449 173 461 167 459 173 b 354 105 386 179 354 156 b 359 71 354 95 356 84 b 360 65 360 69 360 66 b 403 3 372 14 373 3 z',\r\n        },\r\n        fermataLongBelow: {\r\n            x_min: 0,\r\n            x_max: 602,\r\n            y_min: -335,\r\n            y_max: 7,\r\n            ha: 342,\r\n            o: 'm 793 -482 b 851 -444 822 -482 842 -471 b 867 -357 860 -416 867 -387 b 865 -336 867 -350 867 -343 b 851 -189 858 -287 855 -238 b 832 -32 847 -135 840 -84 b 824 -17 832 -26 832 -17 l 822 -17 b 805 -30 816 -19 806 -20 b 798 -88 802 -50 798 -69 b 805 -292 798 -157 801 -225 b 772 -327 806 -318 801 -327 b 360 -324 635 -327 497 -325 b 78 -327 265 -323 171 -327 b 50 -304 59 -327 50 -320 l 50 -297 b 62 -187 55 -261 60 -225 b 71 -60 62 -144 71 -102 b 68 -20 71 -48 71 -33 b 53 10 66 -10 69 10 l 52 10 b 22 -22 37 9 24 -1 b 14 -121 17 -55 16 -89 b 0 -359 10 -200 0 -279 b 6 -452 0 -390 3 -420 b 42 -481 9 -478 20 -481 l 415 -481 l 415 -482 z m 409 -183 b 454 -179 420 -183 435 -181 b 505 -124 487 -176 504 -158 b 505 -89 507 -112 505 -101 b 507 -58 505 -79 507 -68 b 505 -42 507 -52 507 -48 b 485 -10 503 -29 501 -10 b 448 -9 472 -9 461 -9 b 380 -22 425 -9 402 -12 b 363 -46 372 -27 363 -35 l 363 -49 b 364 -114 363 -71 361 -94 b 409 -183 374 -168 377 -183 z',\r\n        },\r\n        fermataVeryLongAbove: {\r\n            x_min: 0,\r\n            x_max: 715,\r\n            y_min: -14.096346766617495,\r\n            y_max: 437,\r\n            ha: 451.0963467666175,\r\n            o: 'm 26 -20 b 42 -4 36 -22 39 -12 b 49 53 49 14 49 33 l 49 448 b 69 478 49 467 52 478 l 72 478 b 81 480 75 478 78 478 b 144 477 102 477 122 477 l 207 477 b 943 471 452 477 698 471 b 978 442 966 471 976 467 b 989 99 985 327 985 213 b 999 -19 991 60 995 22 b 1030 62 1028 6 1030 35 b 1021 507 1028 210 1025 359 b 1012 596 1021 537 1017 567 b 976 624 1009 618 998 624 b 507 626 819 624 662 625 b 46 629 353 628 200 629 b 7 590 19 629 7 618 b 0 101 7 428 0 264 b 16 -4 0 65 13 32 b 26 -20 17 -10 22 -19 z m 187 -9 b 207 30 206 -7 204 14 b 207 55 209 37 207 46 b 200 240 210 117 197 179 b 219 262 200 256 203 262 l 223 262 b 456 252 301 258 379 255 l 772 239 b 804 209 792 238 802 235 b 818 69 806 163 809 115 b 834 -4 821 46 816 19 b 857 56 852 13 857 35 b 851 183 857 99 858 141 b 827 360 841 242 841 301 b 786 390 821 383 809 389 b 189 409 588 403 387 402 b 153 377 163 409 153 400 b 173 27 153 259 150 143 b 187 -9 176 13 177 -9 z m 478 3 b 536 10 491 3 510 6 b 582 60 569 14 580 32 l 582 89 l 580 89 b 580 117 580 98 582 107 b 540 171 577 158 572 171 b 521 171 534 171 528 170 b 459 166 500 170 480 168 b 423 132 436 164 423 154 b 428 88 423 118 425 102 b 478 3 438 22 439 4 z',\r\n        },\r\n        fermataVeryLongBelow: {\r\n            x_min: -0.012345679012345682,\r\n            x_max: 686.4443937550029,\r\n            y_min: -427,\r\n            y_max: 30,\r\n            ha: 457,\r\n            o: 'm 56 -615 b 282 -612 132 -612 207 -613 b 924 -606 497 -608 710 -606 b 973 -570 953 -606 968 -593 b 988 -455 984 -533 991 -494 b 982 -262 984 -390 982 -327 b 976 -69 982 -197 981 -134 b 976 -14 975 -50 976 -33 b 966 43 976 4 975 23 b 940 20 953 37 943 35 b 933 -76 936 -12 933 -45 b 935 -121 933 -91 933 -107 b 940 -307 940 -183 940 -245 l 940 -435 b 919 -458 940 -451 935 -458 b 894 -459 910 -458 903 -458 b 206 -467 665 -461 435 -467 b 88 -467 167 -467 127 -468 b 45 -425 45 -467 42 -465 b 46 -400 46 -416 46 -408 b 43 -325 46 -376 43 -350 b 42 -59 42 -236 42 -148 b 22 17 42 -32 36 -6 b 0 -27 -1 7 0 -10 b 7 -420 0 -158 7 -289 l 7 -474 b 16 -579 7 -510 7 -544 b 56 -615 22 -603 27 -615 z m 789 -390 b 835 -357 816 -392 829 -380 b 850 -256 844 -324 850 -291 b 848 -230 850 -248 850 -239 b 845 -135 845 -199 845 -167 l 845 -72 b 837 23 845 -40 848 -9 b 809 -27 809 14 809 -7 l 809 -222 b 788 -242 809 -238 805 -242 l 203 -229 b 180 -209 186 -229 180 -223 l 180 -160 b 179 -115 180 -145 180 -131 b 179 -50 177 -94 179 -72 b 163 24 179 -26 176 0 b 137 -6 145 19 140 10 b 134 -39 134 -17 134 -27 b 138 -105 134 -60 137 -82 l 138 -197 b 145 -343 138 -246 138 -294 b 179 -377 148 -364 151 -377 b 789 -390 383 -377 586 -380 z m 480 -164 b 566 -65 549 -164 566 -140 b 527 1 566 -10 564 1 b 436 -71 426 1 436 -9 l 436 -88 l 436 -143 b 454 -163 436 -153 439 -161 b 480 -164 464 -163 472 -164 z',\r\n        },\r\n        fermataShortAbove: {\r\n            x_min: 0,\r\n            x_max: 545,\r\n            y_min: -18.08551453529649,\r\n            y_max: 348,\r\n            ha: 366.0855145352965,\r\n            o: 'm 16 -26 b 36 -9 26 -27 30 -16 b 354 340 143 107 249 223 b 369 348 360 346 364 348 b 382 341 373 348 377 346 l 530 199 b 743 0 599 131 672 68 b 753 -7 747 -3 750 -7 b 762 -1 756 -7 759 -6 b 785 84 776 10 785 48 b 768 150 785 112 779 138 l 399 491 b 379 501 392 498 384 501 b 357 488 372 501 364 495 b 27 137 248 370 141 251 b 1 84 12 121 1 105 b 3 69 1 79 1 75 b 0 55 1 65 0 59 b 9 1 0 36 9 20 b 16 -26 10 -7 3 -22 z m 357 24 b 367 27 360 24 363 24 b 431 118 422 42 431 49 b 429 151 431 130 431 141 b 400 193 428 171 429 193 b 333 147 359 193 333 176 b 341 42 333 111 337 78 b 357 24 343 30 346 24 z',\r\n        },\r\n        fermataShortBelow: {\r\n            x_min: 0,\r\n            x_max: 565,\r\n            y_min: -335,\r\n            y_max: 10,\r\n            ha: 345,\r\n            o: 'm 386 -482 b 422 -455 395 -482 405 -474 b 732 -117 526 -343 631 -232 b 814 12 765 -79 799 -42 b 752 -22 780 14 768 -7 b 436 -320 645 -120 540 -219 b 419 -328 429 -325 425 -328 b 400 -318 413 -328 408 -325 b 35 0 279 -212 157 -105 b 16 14 29 4 23 14 b 7 12 13 14 10 14 b 0 -3 1 7 0 1 b 7 -23 0 -10 3 -17 b 20 -48 12 -30 14 -39 b 167 -238 60 -117 115 -177 b 351 -455 229 -310 289 -383 b 386 -482 367 -474 377 -482 z m 382 -213 b 406 -207 389 -213 396 -210 b 452 -156 431 -199 446 -180 b 461 -85 456 -132 458 -108 b 448 -32 461 -66 454 -49 b 418 -6 442 -12 431 -6 b 397 -9 410 -6 405 -7 b 348 -50 376 -14 350 -14 b 356 -170 348 -91 354 -130 b 382 -213 357 -199 363 -213 z',\r\n        },\r\n        breathMarkComma: {\r\n            x_min: 0,\r\n            x_max: 148,\r\n            y_min: 0,\r\n            y_max: 275,\r\n            ha: 275,\r\n            o: 'm 120 0 b 187 78 156 20 174 48 b 213 209 206 121 213 164 b 206 294 213 238 210 265 b 140 390 200 337 171 367 b 122 396 134 395 128 396 b 68 382 105 396 85 384 b 46 379 60 382 53 382 b 0 328 12 369 0 357 b 1 311 0 323 1 317 b 30 210 4 275 22 243 b 66 167 39 179 46 167 b 94 171 73 167 82 168 b 143 180 109 174 124 180 b 160 179 148 180 154 180 b 120 66 124 145 120 107 b 120 0 120 45 121 23 z',\r\n        },\r\n        breathMarkUpbow: {\r\n            x_min: 0,\r\n            x_max: 254,\r\n            y_min: 0,\r\n            y_max: 595,\r\n            ha: 595,\r\n            o: 'm 233 0 b 256 48 251 14 253 30 b 272 183 264 92 265 138 b 311 455 289 274 295 364 b 350 716 327 541 341 628 b 366 815 354 749 366 782 b 359 857 366 829 363 842 b 327 815 334 852 330 832 b 302 674 315 769 310 721 b 248 357 288 567 269 462 b 225 226 240 314 242 268 b 210 251 212 232 213 243 b 69 721 163 408 117 564 b 32 835 58 760 53 801 b 20 851 29 841 27 851 b 14 850 19 851 16 851 b 0 828 6 847 0 838 l 0 825 b 12 765 1 804 7 785 b 194 125 73 552 132 338 b 233 0 206 84 213 42 z',\r\n        },\r\n        caesura: {\r\n            x_min: 0,\r\n            x_max: 565.5831864753837,\r\n            y_min: -0.09016994374947417,\r\n            y_max: 562.4481112129314,\r\n            ha: 562.5382811566809,\r\n            o: 'm 0 76 b 49 122 24 92 37 107 b 444 613 180 287 305 455 b 528 770 484 660 518 708 b 531 792 530 778 531 785 b 524 808 531 799 530 805 b 490 792 513 815 498 802 b 390 683 456 756 420 721 b 48 262 275 543 164 400 b 0 76 0 207 7 145 z m 226 1 b 248 13 238 -4 243 7 l 353 137 b 759 638 490 302 632 464 b 814 805 795 688 819 740 b 779 786 796 805 788 796 b 628 609 724 732 678 668 b 310 242 523 485 416 363 b 217 69 265 190 217 140 b 222 30 217 58 219 45 b 222 23 222 29 220 26 b 220 12 222 20 220 16 b 226 1 220 7 222 3 z',\r\n        },\r\n        caesuraCurved: {\r\n            x_min: 0,\r\n            x_max: 386,\r\n            y_min: -10,\r\n            y_max: 584,\r\n            ha: 594,\r\n            o: 'm 180 -14 b 246 14 213 -13 230 0 b 347 144 288 52 315 99 b 526 471 420 246 488 350 b 556 671 546 537 556 603 b 543 798 556 713 553 756 b 504 837 537 822 521 828 b 490 841 500 840 494 841 b 472 832 482 841 477 838 b 406 678 436 785 406 737 b 410 638 406 665 408 652 b 425 511 419 595 425 553 b 315 186 425 395 387 287 b 180 -14 271 122 228 58 z m 14 24 b 49 39 29 24 40 32 b 120 114 76 60 99 85 b 216 276 156 166 184 223 b 317 626 281 384 317 501 b 315 664 317 639 317 651 b 301 773 314 701 311 737 b 262 808 295 795 278 808 b 245 799 256 808 249 805 b 170 641 209 750 170 706 b 171 621 170 634 170 628 b 177 511 176 585 177 549 b 114 229 177 415 160 320 b 0 26 79 161 42 95 b 14 24 6 24 10 24 z',\r\n        },\r\n        restMaxima: {\r\n            x_min: 0,\r\n            x_max: 366,\r\n            y_min: -255,\r\n            y_max: 255,\r\n            ha: 510,\r\n            o: 'm 397 -367 b 504 -343 436 -367 468 -347 b 518 -318 516 -341 518 -330 b 527 -30 518 -217 527 -117 b 526 33 527 -7 527 13 l 526 301 b 501 350 526 323 520 341 b 428 367 477 361 452 367 b 374 359 410 367 393 364 b 357 333 361 354 357 347 b 356 91 357 252 356 171 l 356 30 b 340 -307 357 -82 346 -194 b 397 -367 337 -354 350 -367 z m 46 -357 b 58 -356 49 -357 53 -357 b 154 -333 91 -351 121 -338 b 173 -305 168 -330 173 -320 l 173 302 b 132 356 173 330 157 348 b 68 364 112 363 89 364 b 3 304 19 363 1 348 l 3 4 l 0 4 b 1 -302 0 -98 0 -200 b 46 -357 1 -331 16 -357 z',\r\n        },\r\n        restDoubleWhole: {\r\n            x_min: 0,\r\n            x_max: 122,\r\n            y_min: 0,\r\n            y_max: 249,\r\n            ha: 249,\r\n            o: 'm 43 0 b 58 1 48 0 52 0 b 124 20 81 6 102 17 b 176 96 173 27 176 58 b 173 220 174 138 173 179 b 176 304 173 248 176 276 b 140 353 176 331 163 346 b 95 359 125 356 111 359 b 32 346 73 359 52 354 b 0 315 20 340 0 337 b 1 243 0 291 1 268 l 1 174 l 4 174 l 4 48 b 43 0 4 16 17 0 z',\r\n        },\r\n        restWhole: {\r\n            x_min: 0.8908513171538642,\r\n            x_max: 500,\r\n            y_min: -120,\r\n            y_max: 14,\r\n            ha: 134,\r\n            o: 'm 356 -173 l 356 -171 l 642 -171 b 719 -115 680 -171 717 -145 b 720 -82 719 -104 720 -92 b 711 -20 720 -60 719 -40 b 672 17 704 0 694 10 b 649 20 664 20 657 20 b 605 17 634 20 621 17 b 92 19 433 17 262 17 b 29 7 69 20 49 12 b 9 -17 12 4 9 -6 b 10 -43 9 -26 10 -35 b 1 -84 10 -58 3 -72 b 76 -173 0 -147 7 -173 z',\r\n        },\r\n        restHalf: {\r\n            x_min: 0,\r\n            x_max: 518.3998530468286,\r\n            y_min: 0,\r\n            y_max: 162,\r\n            ha: 162,\r\n            o: 'm 98 0 l 556 0 b 665 1 592 0 629 0 b 746 82 720 3 743 29 b 736 174 749 114 740 144 b 670 232 729 215 708 232 b 570 229 636 232 603 229 b 356 233 498 229 426 233 l 73 233 b 0 179 19 233 0 220 b 1 154 0 171 0 164 b 6 95 4 135 6 115 b 98 0 3 27 29 0 z',\r\n        },\r\n        restQuarter: {\r\n            x_min: -0.3784452492533808,\r\n            x_max: 263,\r\n            y_min: -415,\r\n            y_max: 415,\r\n            ha: 830,\r\n            o: 'm 151 -596 b 164 -563 163 -589 161 -575 b 160 -546 164 -557 161 -552 b 124 -396 148 -495 135 -446 b 122 -380 122 -390 122 -384 b 199 -255 122 -331 158 -272 b 228 -256 209 -249 217 -253 b 324 -346 274 -271 298 -310 b 353 -369 331 -356 341 -369 b 360 -367 356 -369 357 -369 b 379 -336 373 -361 379 -348 l 377 -325 b 344 -232 372 -292 366 -258 b 249 -58 301 -180 278 -117 b 242 -36 245 -49 242 -42 b 258 -7 242 -26 248 -17 b 328 78 284 20 311 45 b 354 158 344 104 354 131 b 337 216 354 177 350 196 b 213 435 294 288 249 359 b 115 575 189 487 158 536 b 78 598 105 585 92 598 b 59 592 72 598 66 596 b 39 562 45 583 39 572 b 53 527 39 550 45 539 b 168 344 98 469 125 402 b 187 307 181 328 187 317 b 153 269 187 294 176 284 b 62 213 122 252 91 235 b 40 180 48 203 40 192 b 46 158 40 173 43 166 b 99 65 60 125 79 95 b 183 -79 131 20 160 -29 b 156 -86 173 -88 164 -85 b 0 -261 58 -99 -7 -173 b 96 -557 10 -366 49 -464 b 124 -585 102 -569 109 -580 b 145 -598 132 -588 138 -598 b 151 -596 147 -598 150 -598 z',\r\n        },\r\n        rest8th: {\r\n            x_min: 0,\r\n            x_max: 289,\r\n            y_min: -260,\r\n            y_max: 261,\r\n            ha: 521,\r\n            o: 'm 164 -374 b 212 -340 190 -373 203 -357 b 276 -190 238 -292 258 -242 b 410 285 333 -36 359 128 b 416 314 413 294 416 304 l 416 321 b 393 354 415 341 410 354 b 382 353 389 354 386 354 b 292 311 347 347 315 333 b 174 225 256 276 216 251 b 157 219 168 222 163 219 b 140 228 151 219 145 222 b 131 246 134 233 131 240 b 135 262 131 252 132 256 b 147 298 141 272 147 285 b 127 367 147 323 154 354 b 94 376 114 373 102 376 b 48 336 75 376 63 363 b 3 181 20 288 12 235 b 0 150 1 170 0 160 b 109 24 0 84 35 24 b 171 36 127 24 148 27 b 289 101 213 52 248 75 b 164 -374 256 -62 193 -213 z',\r\n        },\r\n        rest16th: {\r\n            x_min: 0,\r\n            x_max: 333,\r\n            y_min: -328.283950617284,\r\n            y_max: 244,\r\n            ha: 572.2839506172841,\r\n            o: 'm 209 -471 b 246 -458 222 -477 236 -468 b 307 -338 279 -425 300 -384 b 324 -226 312 -301 317 -262 b 428 161 350 -94 386 35 b 480 318 445 215 480 259 b 467 347 480 331 477 341 b 445 351 461 350 454 351 b 408 337 432 351 419 347 b 402 333 405 336 403 334 b 223 215 344 294 294 245 b 236 259 229 233 235 246 b 238 276 238 265 238 271 b 212 338 238 302 226 334 b 193 341 206 340 199 341 b 86 289 156 341 104 317 b 59 180 66 255 59 217 b 156 27 59 76 92 27 b 236 46 179 27 204 35 b 338 101 271 59 298 82 b 289 -49 312 49 302 0 b 196 -122 276 -99 235 -107 b 176 -114 187 -127 176 -127 l 176 -111 b 157 -53 177 -88 164 -72 b 69 -9 141 -7 101 -16 b 17 -48 43 -3 29 -27 b 0 -127 4 -73 0 -99 b 6 -186 0 -147 1 -167 b 82 -294 17 -262 37 -294 b 160 -276 102 -294 128 -289 b 219 -242 181 -268 203 -259 b 236 -230 223 -236 229 -230 b 243 -232 239 -230 240 -230 b 235 -275 248 -246 239 -261 b 202 -456 220 -334 202 -395 b 209 -471 202 -462 203 -468 z',\r\n        },\r\n        rest32nd: {\r\n            x_min: 0,\r\n            x_max: 347,\r\n            y_min: -497.5023916875033,\r\n            y_max: 483,\r\n            ha: 980.5023916875033,\r\n            o: 'm 177 -716 b 217 -690 194 -720 209 -704 b 233 -655 225 -680 230 -668 b 292 -390 253 -567 275 -480 b 361 -48 312 -275 336 -161 b 452 400 393 102 422 252 b 497 629 467 477 482 553 b 500 647 498 635 500 641 b 480 691 500 665 492 684 b 464 696 475 694 469 696 b 418 674 448 696 431 685 l 361 626 b 333 611 353 618 343 612 b 308 629 325 611 317 616 b 239 667 292 651 265 661 b 204 670 228 668 216 670 b 86 559 141 670 95 628 b 85 537 86 552 85 544 b 107 416 85 495 95 455 b 161 372 114 389 134 372 b 174 373 166 372 170 372 b 226 383 192 374 209 377 b 387 478 285 402 330 444 b 364 386 379 444 364 415 b 276 271 364 323 320 298 b 265 266 272 268 268 266 b 252 276 261 266 256 269 b 143 333 229 311 186 333 b 107 327 130 333 118 330 b 43 243 62 314 46 291 b 58 145 43 210 52 179 b 150 63 68 92 99 63 b 315 132 213 63 259 98 b 266 -58 297 63 281 4 b 207 -101 259 -91 230 -96 b 186 -66 186 -107 199 -75 b 180 -50 181 -63 183 -55 b 101 -3 160 -23 135 -3 b 9 -66 59 -3 20 -32 b 0 -118 3 -84 0 -101 b 10 -196 0 -144 6 -170 b 104 -287 20 -256 52 -287 b 137 -282 114 -287 125 -287 b 184 -269 151 -281 171 -269 b 196 -275 190 -269 193 -271 b 199 -287 197 -278 199 -282 b 184 -343 199 -304 189 -325 b 181 -348 184 -346 183 -347 b 134 -595 158 -429 131 -508 b 156 -677 134 -624 150 -648 b 177 -716 158 -693 160 -713 z',\r\n        },\r\n        rest64th: {\r\n            x_min: 0,\r\n            x_max: 428,\r\n            y_min: -720,\r\n            y_max: 473.6797408388932,\r\n            ha: 1193.6797408388932,\r\n            o: 'm 200 -1037 b 229 -1012 215 -1037 222 -1025 b 238 -984 233 -1004 236 -994 b 282 -780 248 -914 265 -848 b 386 -369 317 -644 354 -507 b 491 104 422 -212 451 -53 b 600 541 528 249 550 399 b 616 629 611 570 616 599 b 600 680 616 648 615 671 b 550 665 586 687 566 677 b 480 618 527 649 501 635 b 464 611 474 613 468 611 b 448 622 458 611 454 615 b 366 662 425 651 397 662 b 331 658 354 662 343 661 b 242 572 285 647 253 619 b 236 528 239 557 236 543 b 266 400 236 484 251 442 b 325 373 274 377 301 373 b 436 409 366 373 403 383 l 494 452 b 474 360 485 416 474 389 b 383 248 474 297 435 269 b 320 328 377 288 351 310 b 276 341 305 337 291 341 b 186 269 235 341 194 311 b 181 230 183 256 181 243 b 187 153 181 204 186 179 b 279 63 192 86 233 63 b 304 65 288 63 295 63 b 416 115 344 72 379 92 b 387 -14 406 69 397 27 b 320 -95 380 -52 369 -86 b 318 -79 320 -89 320 -84 b 223 0 305 -29 271 0 b 122 -81 171 0 135 -30 b 118 -127 120 -96 118 -112 l 118 -196 b 137 -242 118 -215 125 -229 b 209 -275 157 -266 181 -275 b 249 -269 222 -275 235 -274 b 318 -248 272 -264 294 -255 b 281 -390 315 -301 292 -344 b 276 -400 279 -393 279 -397 b 259 -420 272 -408 266 -416 b 246 -429 255 -425 251 -429 b 233 -415 242 -429 238 -426 b 176 -359 225 -389 200 -372 b 121 -346 158 -348 140 -346 b 14 -408 73 -346 27 -370 b 0 -498 4 -438 0 -468 b 6 -564 0 -520 3 -543 b 91 -635 12 -611 45 -635 b 131 -629 104 -635 117 -634 b 223 -590 163 -622 190 -603 b 166 -824 203 -671 189 -747 b 148 -912 157 -852 148 -881 b 156 -955 148 -926 150 -940 b 177 -1008 161 -972 170 -991 b 200 -1037 181 -1020 183 -1037 z',\r\n        },\r\n        rest128th: {\r\n            x_min: 0.6717818579024267,\r\n            x_max: 491,\r\n            y_min: -711,\r\n            y_max: 719,\r\n            ha: 1430,\r\n            o: 'm 233 -1015 b 271 -956 256 -1002 266 -981 l 314 -723 b 393 -350 337 -598 366 -474 b 543 312 442 -128 492 91 b 687 841 583 490 635 665 b 707 958 698 880 707 919 b 706 986 707 968 707 976 b 688 1025 704 999 704 1024 b 670 1027 683 1025 677 1027 b 629 1007 655 1027 639 1022 b 559 945 613 981 586 968 b 541 1004 553 968 559 991 b 456 1035 516 1024 488 1035 b 419 1030 444 1035 431 1034 b 344 953 379 1018 353 995 b 340 900 341 936 340 917 b 341 847 340 881 341 864 b 380 779 340 815 354 793 b 464 763 406 765 435 762 b 592 814 510 763 549 786 b 546 660 575 757 556 710 b 480 585 537 619 517 598 b 478 599 480 590 478 595 b 386 678 472 641 428 678 b 294 612 343 678 304 651 b 279 477 282 567 278 521 b 363 395 281 428 317 395 b 380 396 369 395 374 395 b 488 436 416 403 449 419 b 384 233 469 357 468 275 b 359 291 373 252 377 276 b 282 318 337 310 310 318 b 181 264 243 318 203 298 b 154 107 153 216 154 161 b 242 6 154 42 187 6 b 278 10 253 6 265 7 b 408 88 330 22 366 55 b 387 -1 400 56 393 27 b 301 -112 379 -55 354 -94 b 289 -65 297 -95 302 -79 b 219 -32 269 -42 245 -32 b 183 -37 207 -32 196 -35 b 112 -109 144 -46 121 -71 b 105 -219 104 -145 108 -183 b 186 -315 101 -276 134 -315 b 230 -307 199 -315 215 -312 b 324 -256 264 -295 292 -275 b 180 -491 323 -383 266 -471 b 183 -459 180 -480 180 -469 b 184 -442 184 -454 184 -448 l 184 -436 b 135 -369 184 -403 170 -383 b 102 -363 125 -364 114 -363 b 29 -399 73 -363 45 -376 b 1 -556 -4 -448 6 -503 b 109 -670 -4 -625 43 -670 b 140 -667 118 -670 130 -668 b 253 -616 180 -658 213 -638 b 238 -688 248 -644 242 -665 b 192 -959 220 -779 192 -867 b 193 -992 192 -971 192 -981 b 210 -1024 194 -1014 199 -1024 b 233 -1015 216 -1024 223 -1021 z',\r\n        },\r\n        dynamicPiano: {\r\n            x_min: -49,\r\n            x_max: 326.5019318364244,\r\n            y_min: -142,\r\n            y_max: 515,\r\n            ha: 657,\r\n            o: 'm -56 -204 b -42 -202 -52 -204 -46 -203 b -19 -194 -35 -202 -26 -197 b 147 -138 35 -170 91 -151 b 249 -58 194 -127 223 -95 b 262 -29 255 -50 262 -39 b 258 -17 262 -24 261 -20 b 232 -7 252 -10 242 -7 b 210 -12 225 -7 217 -9 b 125 -40 184 -23 157 -30 b 183 140 153 19 171 79 b 251 167 207 144 230 153 b 469 518 383 262 480 382 b 357 687 472 626 420 687 b 315 678 344 687 330 684 b 204 600 279 664 240 634 b 210 704 206 635 209 670 b 215 721 212 710 215 716 b 206 733 215 727 212 730 b 180 742 197 736 189 742 b 164 734 176 742 170 740 b 1 575 108 684 36 645 b -7 557 -1 569 -7 563 b -6 553 -7 556 -7 554 b 7 547 -3 547 3 547 l 17 547 b 82 575 43 547 59 567 l 82 452 b 56 46 82 317 81 180 b 17 -66 49 7 46 -36 b -62 -173 -13 -99 -37 -135 b -71 -192 -66 -179 -71 -184 b -68 -199 -71 -193 -69 -196 b -56 -204 -65 -203 -60 -204 z m 196 258 b 197 266 197 261 197 264 b 200 510 200 347 199 429 b 233 543 210 521 222 533 b 281 560 249 554 266 560 b 340 503 310 560 333 540 b 344 461 343 488 344 474 b 321 323 344 413 333 369 b 268 272 315 300 295 281 b 196 258 245 265 220 261 z',\r\n        },\r\n        dynamicMezzo: {\r\n            x_min: -18,\r\n            x_max: 559,\r\n            y_min: -50,\r\n            y_max: 365,\r\n            ha: 415,\r\n            o: 'm 43 -71 b 160 19 86 -71 143 -26 b 230 264 189 99 200 184 b 282 363 243 297 259 327 b 287 320 285 347 287 333 b 284 279 287 305 285 292 l 249 -12 b 275 -43 248 -29 245 -43 b 395 45 321 -43 389 3 b 462 271 406 124 436 197 b 523 387 475 310 490 348 l 523 346 b 504 130 521 274 513 202 b 501 81 501 114 501 98 b 510 3 501 55 504 29 b 580 -72 521 -48 543 -72 b 625 -63 593 -72 608 -69 b 789 50 690 -43 744 -3 b 805 72 795 56 805 63 b 798 85 805 76 802 81 b 778 94 792 91 785 94 b 755 85 770 94 763 91 l 693 40 b 675 33 685 36 680 33 b 658 52 668 33 662 39 b 645 144 651 82 645 112 b 658 448 641 246 660 346 b 606 507 658 485 638 507 b 583 504 599 507 592 505 b 495 446 547 497 521 471 b 420 373 471 423 448 399 b 413 458 418 406 418 432 b 361 507 408 490 386 507 b 320 491 347 507 333 501 b 160 307 256 444 207 382 l 160 337 b 174 488 160 387 174 438 b 156 521 174 501 173 513 b 137 526 148 524 143 526 b 109 513 127 526 118 520 b -16 399 66 477 23 439 b -26 383 -20 395 -26 389 l -26 379 b -14 370 -24 372 -20 370 b -6 372 -12 370 -9 372 b 19 376 4 374 12 376 b 36 359 32 376 36 370 b 30 330 36 350 35 341 l 30 323 b 9 -35 23 203 17 85 b 43 -71 6 -65 19 -71 z',\r\n        },\r\n        dynamicForte: {\r\n            x_min: -144,\r\n            x_max: 311.30112136775,\r\n            y_min: -115.3876295915697,\r\n            y_max: 504,\r\n            ha: 619.3876295915697,\r\n            o: 'm -101 -166 b 173 76 7 -153 150 -30 b 206 344 192 164 202 253 b 268 338 226 343 246 341 b 384 395 317 333 353 361 b 397 419 393 405 397 412 b 367 442 397 429 387 436 b 350 444 361 444 356 444 b 206 455 302 449 255 454 l 206 474 b 202 540 204 495 202 518 b 209 593 202 557 203 576 b 236 624 215 613 225 624 b 265 612 245 624 253 619 b 308 552 287 596 302 577 b 336 533 312 534 323 533 b 448 611 366 533 444 583 b 399 696 452 648 423 671 b 382 706 395 700 387 703 b 308 726 357 720 333 726 b 207 684 272 726 239 711 b 60 455 135 622 60 560 l 10 455 b -23 448 -1 455 -13 454 b -102 372 -55 426 -76 397 b -109 357 -108 367 -109 361 b -95 347 -109 353 -105 348 b -63 346 -84 346 -73 346 b 0 344 -43 344 -22 344 l 63 344 b 53 186 63 291 59 239 b 23 0 46 124 42 60 b -35 -60 10 -42 -6 -60 b -73 -52 -45 -60 -58 -58 b -91 -48 -79 -49 -85 -48 b -109 -53 -96 -48 -102 -49 b -199 -124 -143 -72 -168 -99 b -207 -137 -203 -128 -207 -132 b -194 -148 -207 -141 -203 -145 b -101 -166 -164 -160 -132 -168 z',\r\n        },\r\n        dynamicRinforzando: {\r\n            x_min: -75,\r\n            x_max: 322.0960720195126,\r\n            y_min: -90,\r\n            y_max: 325,\r\n            ha: 415,\r\n            o: 'm 23 -130 b 40 -125 27 -130 33 -128 b 128 -9 81 -114 125 -53 b 145 200 132 62 141 130 b 148 238 147 212 148 225 b 308 321 184 291 245 321 b 363 314 325 321 344 318 b 377 310 369 312 373 310 b 384 311 380 310 382 310 b 464 415 410 317 464 389 b 446 433 465 429 455 429 b 390 445 428 441 409 445 b 305 429 361 445 334 438 b 167 346 252 413 202 393 b 153 325 163 338 158 333 b 148 438 154 363 151 399 b 121 468 147 456 134 468 b 101 458 115 468 108 465 b -63 310 46 409 -16 367 b -108 240 -78 289 -98 271 b 32 330 -50 256 -13 297 b 37 304 37 320 37 312 l 37 292 b 10 -101 27 161 20 30 b 23 -130 9 -120 12 -130 z',\r\n        },\r\n        dynamicSforzando: {\r\n            x_min: 0,\r\n            x_max: 296,\r\n            y_min: 0,\r\n            y_max: 379,\r\n            ha: 379,\r\n            o: 'm 151 0 b 174 1 160 0 166 0 b 392 158 272 14 346 71 b 405 207 400 174 405 190 b 359 287 405 236 389 265 b 261 325 328 308 294 315 b 168 413 216 340 181 366 b 166 426 167 418 166 423 b 176 438 166 432 167 436 b 199 441 183 441 190 441 b 310 393 238 441 295 422 b 334 370 317 376 325 370 b 363 386 343 370 353 379 b 422 445 386 402 408 420 b 426 458 425 449 426 454 b 422 469 426 462 425 465 b 274 546 395 518 333 546 b 161 503 232 546 190 531 b 86 405 132 472 108 439 b 71 347 75 387 71 367 b 112 256 71 312 85 279 b 209 215 141 232 176 226 b 284 168 238 206 266 197 b 300 131 291 157 300 144 b 298 120 300 127 298 122 b 278 107 294 109 285 108 b 262 108 271 107 266 108 l 259 108 b 114 157 200 107 156 125 b 96 181 104 163 96 170 l 96 184 b 102 202 96 190 102 196 b 96 209 102 204 101 207 b 63 194 82 215 72 204 b 7 109 42 168 26 138 b 0 86 3 101 0 94 b 13 60 0 78 4 68 b 151 0 53 23 101 0 z',\r\n        },\r\n        dynamicZ: {\r\n            x_min: -42.73880183193087,\r\n            x_max: 331,\r\n            y_min: 0,\r\n            y_max: 328,\r\n            ha: 328,\r\n            o: 'm -45 0 b -6 16 -32 0 -17 10 b 3 20 -3 16 0 19 b 144 60 49 48 96 60 b 284 22 190 60 238 46 b 348 4 305 10 327 4 b 461 75 393 4 435 30 b 468 91 464 81 467 86 b 456 104 468 95 465 99 b 287 173 402 131 348 167 b 239 176 271 174 255 176 b 168 174 217 176 194 174 b 367 340 236 236 298 294 b 459 423 402 363 432 392 b 477 454 467 431 475 442 b 474 462 477 456 475 459 b 454 472 469 469 462 472 b 432 468 446 472 439 469 b 356 448 406 461 380 455 b 210 422 307 433 258 422 b 109 442 177 422 144 428 b 94 445 104 444 99 445 b 69 433 85 445 76 442 b 27 390 56 419 39 406 b -9 343 16 373 -17 357 b 63 311 3 320 36 314 l 78 311 b 132 307 95 308 114 307 b 240 314 168 307 203 311 l 193 271 b -37 50 117 196 19 145 b -59 7 -46 36 -69 20 b -45 0 -55 3 -50 0 z',\r\n        },\r\n        ornamentTrill: {\r\n            x_min: 1,\r\n            x_max: 551,\r\n            y_min: -18,\r\n            y_max: 539,\r\n            ha: 557,\r\n            o: 'm 321 612 b 190 602 278 605 235 605 l 190 638 b 187 693 190 652 190 667 b 161 776 184 717 193 776 b 137 747 150 776 137 766 b 130 654 135 716 131 685 l 130 596 l 52 588 b 4 539 23 585 7 570 b 1 477 3 530 1 500 b 3 448 1 461 3 448 l 3 452 b 53 432 6 436 23 432 b 134 435 75 432 102 433 b 151 117 138 328 147 223 b 170 13 153 82 157 46 b 209 -26 179 -10 193 -26 b 222 -22 213 -26 217 -24 b 269 -17 233 -16 253 -27 b 343 135 325 19 346 66 b 343 158 343 147 344 147 b 323 192 341 171 337 187 b 291 176 311 194 300 184 l 264 148 b 229 131 261 145 238 131 b 212 170 209 131 213 154 b 194 438 203 259 199 348 l 272 442 b 284 452 276 441 279 441 b 305 462 287 461 295 462 l 312 462 b 346 477 325 462 340 464 b 366 560 357 503 366 531 b 321 612 366 598 356 618 z m 759 588 b 711 560 749 592 733 570 b 588 500 671 541 631 521 b 583 533 586 514 586 524 b 560 576 577 549 577 572 b 517 550 541 582 528 564 b 416 423 482 508 452 462 b 382 353 392 397 384 370 b 387 305 380 341 386 318 b 392 275 389 295 392 285 b 409 243 393 262 393 243 b 431 262 419 243 425 255 b 521 373 459 298 488 333 b 523 354 521 366 523 360 b 520 337 523 346 521 340 b 508 295 513 323 508 310 b 530 102 508 279 524 122 b 549 66 533 88 530 66 b 577 99 563 66 572 84 b 580 131 580 109 580 121 l 580 302 b 600 347 580 318 582 337 b 701 392 632 364 665 384 b 793 518 785 409 793 435 b 759 588 793 559 785 576 z',\r\n        },\r\n        ornamentTurn: {\r\n            x_min: 0,\r\n            x_max: 574,\r\n            y_min: 0,\r\n            y_max: 312,\r\n            ha: 312,\r\n            o: 'm 651 0 b 816 132 727 0 796 46 b 827 223 822 163 827 193 b 808 340 827 262 821 301 b 665 449 785 408 729 449 b 636 446 655 449 647 448 b 589 384 600 441 586 422 l 602 300 b 611 285 603 291 605 285 b 621 288 613 285 616 287 b 655 295 632 294 644 295 b 711 284 674 295 693 289 b 773 209 740 275 773 232 b 697 156 773 184 734 160 b 664 154 685 154 675 154 b 579 168 635 154 608 158 b 455 242 533 186 495 213 b 261 400 387 291 331 354 b 160 432 225 422 190 432 b 20 328 98 432 49 392 b 0 229 6 295 0 262 b 30 71 0 176 14 122 b 144 3 43 29 96 3 b 168 6 153 3 160 4 b 248 122 233 20 248 39 b 246 147 248 124 248 135 b 226 177 243 164 239 177 b 206 170 220 177 215 174 b 144 154 186 158 166 154 b 79 170 122 154 101 160 b 53 202 62 179 53 189 b 60 228 53 209 55 217 b 161 281 81 261 120 281 b 183 279 168 281 176 281 b 325 190 243 269 284 229 b 572 16 402 124 475 53 b 651 0 598 6 625 0 z',\r\n        },\r\n        ornamentTurnSlash: {\r\n            x_min: 0,\r\n            x_max: 574,\r\n            y_min: -106,\r\n            y_max: 405,\r\n            ha: 511,\r\n            o: 'm 441 -153 b 456 -60 455 -118 456 -89 b 455 81 455 -14 455 33 b 572 14 491 55 530 30 b 651 -1 598 4 625 -1 b 816 131 727 -1 796 45 b 827 222 822 161 827 192 b 808 338 827 261 821 300 b 665 448 785 406 729 448 b 636 445 655 448 647 446 b 589 383 600 439 586 420 l 602 298 b 611 284 603 289 605 284 b 621 287 613 284 616 285 b 655 294 632 292 644 294 b 711 282 674 294 693 288 b 773 207 740 274 773 230 b 697 154 773 183 734 158 b 664 153 685 153 675 153 b 579 167 635 153 608 157 b 455 240 533 183 495 212 b 454 242 455 240 455 242 l 454 337 b 452 488 454 386 452 439 b 433 570 452 517 451 546 b 425 583 431 575 431 583 l 422 583 b 403 566 415 582 408 573 b 402 546 400 560 402 553 l 397 287 b 261 399 353 325 310 366 b 160 431 225 420 190 431 b 20 327 98 431 48 390 b 0 228 6 294 0 261 b 30 69 0 174 14 121 b 144 1 43 27 96 1 b 168 4 153 1 160 3 b 248 121 233 19 248 37 b 246 145 248 122 248 134 b 226 176 243 163 239 176 b 206 168 220 176 215 173 b 144 153 186 157 166 153 b 79 168 122 153 101 158 b 53 200 62 177 53 187 b 60 226 53 207 55 216 b 161 279 79 259 120 279 b 183 278 168 279 176 279 b 325 189 243 266 282 226 b 395 130 348 168 372 148 b 393 71 393 109 393 89 b 441 -153 390 -6 402 -78 z',\r\n        },\r\n        ornamentMordent: {\r\n            x_min: 0,\r\n            x_max: 700,\r\n            y_min: 0,\r\n            y_max: 497,\r\n            ha: 497,\r\n            o: 'm 513 0 b 528 39 526 14 527 27 b 531 72 531 50 531 60 b 528 138 531 94 528 117 l 528 347 b 552 359 537 354 544 359 b 579 338 560 359 569 353 b 674 217 609 297 639 255 b 719 190 690 200 704 190 b 759 215 732 190 744 197 b 940 395 815 279 877 337 b 1001 490 968 422 986 455 b 1008 513 1004 495 1008 505 b 1002 524 1008 517 1007 521 b 968 516 994 530 978 524 b 960 508 965 513 963 510 b 798 356 900 464 848 410 b 778 341 791 347 783 341 b 757 354 772 341 765 346 b 661 475 720 392 690 432 b 611 517 644 504 629 517 b 563 498 598 517 583 511 b 527 471 550 490 539 481 l 527 570 b 492 716 526 619 523 671 b 472 677 480 704 472 694 b 465 399 474 585 468 491 b 439 366 456 387 448 376 b 384 320 415 336 399 320 b 330 367 369 320 354 336 b 325 376 328 369 327 373 b 226 490 291 413 265 456 b 189 505 213 500 202 505 b 157 491 177 505 167 500 b 0 229 75 420 0 346 b 1 202 0 220 0 212 b 22 215 12 203 16 209 b 124 327 55 252 89 289 b 147 343 132 337 140 343 b 171 323 156 343 164 336 b 266 197 196 276 232 236 b 337 157 291 170 314 157 b 410 207 361 157 386 174 b 461 274 428 229 444 252 b 462 166 461 238 461 202 b 513 0 465 108 487 55 z',\r\n        },\r\n        ornamentShortTrill: {\r\n            x_min: 0,\r\n            x_max: 747,\r\n            y_min: 0,\r\n            y_max: 243,\r\n            ha: 243,\r\n            o: 'm 379 0 b 428 14 395 0 410 4 b 474 56 445 26 461 39 b 552 157 500 89 526 122 b 566 168 556 163 560 168 b 575 157 569 168 572 166 b 664 36 592 107 628 72 b 733 1 685 13 710 1 b 802 35 757 1 780 13 b 1007 249 871 105 940 177 b 1067 324 1028 272 1054 295 b 1076 340 1068 330 1076 334 b 1073 346 1076 341 1076 343 b 1057 350 1068 348 1063 350 b 1047 347 1053 350 1050 350 b 1001 310 1031 336 1015 324 l 857 157 b 844 143 852 153 848 143 b 835 150 841 143 838 144 b 757 242 815 186 780 209 b 685 298 739 268 713 284 b 641 310 670 305 655 310 b 590 288 625 310 608 304 b 497 179 554 256 527 215 b 480 164 490 170 485 164 b 462 179 474 164 469 168 b 372 295 436 220 405 258 b 278 344 346 324 312 344 b 199 310 252 344 226 334 b 92 196 161 274 128 233 b 0 24 46 148 23 89 b 42 48 22 27 32 37 b 156 168 84 85 114 132 b 196 192 174 184 186 192 b 228 158 206 192 215 181 b 312 36 252 114 282 75 b 379 0 331 12 354 0 z',\r\n        },\r\n        ornamentTremblement: {\r\n            x_min: 0,\r\n            x_max: 982.17691453624,\r\n            y_min: 0,\r\n            y_max: 224,\r\n            ha: 224,\r\n            o: 'm 0 0 b 63 36 30 12 48 23 b 157 124 94 66 125 94 b 177 135 164 131 170 135 b 196 122 183 135 189 131 b 268 40 217 94 245 68 b 323 6 288 16 304 6 b 369 20 336 6 350 10 b 412 53 384 29 399 40 b 501 145 442 84 472 114 b 523 158 508 154 516 158 b 543 145 528 158 536 154 b 641 45 576 112 608 78 b 698 17 658 27 677 17 b 729 23 708 17 719 20 b 804 65 756 32 780 46 b 904 154 837 95 871 124 b 920 163 910 160 916 163 b 936 153 924 163 930 160 b 1024 60 965 121 996 92 b 1112 13 1053 29 1080 13 b 1184 39 1135 13 1158 22 b 1359 194 1248 84 1305 138 b 1413 301 1388 223 1403 261 b 1404 323 1417 315 1413 323 b 1391 320 1400 323 1395 321 b 1344 294 1375 314 1358 307 b 1224 186 1305 258 1269 216 b 1194 173 1212 179 1202 173 b 1165 193 1184 173 1175 179 b 1096 271 1145 222 1122 248 b 1001 318 1061 302 1031 318 b 903 268 969 318 937 301 b 806 186 871 239 841 210 b 782 174 796 179 789 174 b 756 193 773 174 765 180 b 652 291 729 232 693 266 b 596 308 634 302 615 308 b 530 278 573 308 552 298 l 415 168 b 393 157 408 161 400 157 b 373 171 387 157 380 161 b 305 245 353 197 330 222 b 248 276 285 266 266 278 b 189 245 229 276 210 266 b 81 144 156 209 120 174 b 0 0 33 109 26 56 z',\r\n        },\r\n        ornamentPrecompAppoggTrill: {\r\n            x_min: -0.11067192132025548,\r\n            x_max: 1066,\r\n            y_min: -50,\r\n            y_max: 533.1706452421108,\r\n            ha: 583.1706452421108,\r\n            o: 'm 187 -46 b 213 -14 197 -37 204 -26 b 285 151 251 36 266 94 b 304 189 294 177 297 189 b 337 168 311 189 320 181 b 458 33 386 131 415 76 b 495 12 472 19 484 12 b 531 40 508 12 518 22 b 580 168 557 79 569 124 b 622 235 592 213 603 235 b 683 194 636 235 655 222 b 838 26 737 140 791 86 b 919 -33 860 -1 881 -39 b 984 53 960 -27 971 19 b 1022 156 998 86 1008 122 b 1054 190 1032 179 1041 190 b 1089 167 1063 190 1074 183 b 1208 32 1129 122 1171 78 b 1244 10 1221 17 1231 10 b 1273 22 1253 10 1263 14 b 1496 206 1352 78 1427 137 b 1535 310 1526 236 1535 272 b 1531 359 1535 325 1534 343 b 1496 343 1515 360 1506 351 l 1309 192 b 1269 167 1289 176 1279 167 b 1234 199 1260 167 1251 177 b 1122 324 1200 243 1168 289 b 1074 344 1106 337 1089 344 b 1014 301 1051 344 1030 328 b 952 144 985 252 971 197 b 933 121 946 128 940 121 b 910 137 927 121 920 125 b 850 210 888 161 870 186 b 687 369 799 266 750 325 b 631 390 665 383 647 390 b 567 327 602 390 580 369 b 527 199 554 284 543 242 b 508 168 520 179 514 168 b 482 192 503 168 495 177 b 353 328 444 240 405 292 b 312 343 338 338 324 343 b 266 297 292 343 276 327 b 204 125 248 239 232 180 b 143 79 193 102 173 79 b 92 122 117 79 105 102 b 81 154 86 131 84 143 b 48 423 59 242 50 333 b 45 544 46 464 45 504 b 53 730 45 606 48 668 b 40 768 55 744 52 766 b 13 730 19 770 14 747 b 0 514 7 658 -1 586 b 26 122 3 383 6 252 b 75 -36 35 66 40 10 b 134 -72 92 -59 112 -72 b 187 -46 151 -72 170 -63 z',\r\n        },\r\n        ornamentPrecompSlideTrillDAnglebert: {\r\n            x_min: 0,\r\n            x_max: 1088,\r\n            y_min: -380,\r\n            y_max: 252,\r\n            ha: 632,\r\n            o: 'm 560 -539 b 439 -481 527 -497 484 -485 b 354 -461 409 -478 380 -477 b 131 -154 236 -389 161 -285 b 124 -98 127 -135 124 -117 b 196 55 124 -40 148 10 b 308 99 230 86 268 99 b 399 81 337 99 367 92 b 514 22 441 66 477 43 b 619 -30 567 -9 590 -30 b 719 17 642 -30 670 -16 b 861 131 769 52 818 88 b 899 150 874 144 887 150 b 936 117 913 150 926 138 b 965 43 948 94 956 68 b 1007 -1 973 24 978 -1 b 1048 30 1025 -1 1037 16 b 1070 65 1057 40 1064 52 b 1110 148 1084 92 1096 121 b 1145 190 1120 164 1120 190 b 1191 153 1169 192 1179 168 b 1256 29 1218 115 1231 68 b 1292 1 1267 10 1277 1 b 1320 10 1300 1 1309 4 b 1369 48 1339 19 1355 33 b 1515 196 1418 96 1464 148 b 1567 343 1558 238 1567 287 b 1555 363 1565 357 1562 363 b 1539 356 1551 363 1547 360 b 1433 268 1502 330 1466 301 b 1335 171 1401 236 1374 199 b 1310 163 1325 166 1318 163 b 1286 183 1302 163 1293 168 b 1218 311 1264 226 1247 272 b 1164 351 1200 337 1182 351 b 1110 308 1146 351 1128 337 b 1031 176 1084 265 1058 219 b 1015 161 1025 166 1021 161 b 999 179 1009 161 1005 167 b 955 279 985 213 973 248 b 913 307 943 300 930 307 b 887 302 904 307 896 305 b 852 281 874 298 863 291 b 693 167 804 236 747 204 b 612 140 667 150 639 140 b 549 157 592 140 570 145 b 403 220 503 181 452 202 b 271 248 360 236 315 248 b 179 229 239 248 209 242 b 0 -29 65 180 0 85 b 9 -104 0 -53 3 -78 b 397 -526 56 -317 183 -464 b 505 -547 432 -536 468 -547 b 560 -539 524 -547 541 -544 z',\r\n        },\r\n        ornamentPrecompSlideTrillBach: {\r\n            x_min: 0,\r\n            x_max: 1185,\r\n            y_min: -380,\r\n            y_max: 465,\r\n            ha: 845,\r\n            o: 'm 624 -544 b 642 -528 638 -543 642 -537 b 639 -514 642 -524 642 -520 b 590 -444 629 -487 609 -467 b 523 -413 573 -422 553 -410 b 498 -415 514 -415 507 -415 b 399 -389 464 -415 431 -405 b 89 -157 281 -330 176 -255 b 72 -117 78 -144 72 -131 b 73 -101 72 -111 72 -107 b 187 186 91 3 147 91 b 246 230 200 216 222 230 b 300 209 262 230 281 223 b 456 48 359 163 403 101 b 540 -10 494 10 518 -10 b 625 59 566 -10 589 13 b 690 148 648 88 668 118 b 711 167 697 160 704 167 b 733 153 719 167 724 163 b 844 14 769 105 808 60 b 903 -42 873 -23 886 -42 b 973 -1 919 -42 937 -27 b 1008 33 986 7 996 20 b 1048 81 1021 48 1035 65 b 1050 37 1048 66 1050 52 b 1047 -24 1050 17 1048 -3 b 1038 -275 1038 -108 1040 -192 l 1037 -289 b 1045 -302 1037 -295 1038 -301 b 1068 -284 1056 -304 1064 -292 b 1084 -242 1076 -271 1081 -256 b 1099 -109 1096 -199 1099 -154 b 1106 158 1099 -19 1106 71 b 1128 187 1113 167 1120 177 b 1168 223 1143 212 1155 223 b 1210 193 1179 223 1191 213 b 1220 183 1214 190 1215 186 b 1329 36 1261 138 1292 84 b 1374 7 1345 16 1358 7 b 1411 20 1384 7 1395 12 b 1479 84 1437 37 1459 59 b 1610 235 1521 135 1564 186 b 1706 403 1655 282 1695 334 b 1614 346 1663 400 1637 373 b 1464 170 1564 287 1515 228 b 1440 150 1453 156 1447 150 b 1414 173 1433 150 1426 158 b 1283 336 1371 228 1333 288 b 1220 366 1261 356 1240 366 b 1148 318 1194 366 1169 350 b 1103 255 1133 297 1119 275 b 1097 301 1102 271 1100 285 b 1099 334 1099 312 1099 324 b 1092 428 1099 367 1094 397 b 1071 647 1087 501 1079 575 b 1058 670 1071 657 1071 670 b 1035 648 1047 670 1038 661 b 1018 516 1024 605 1015 560 b 1041 203 1025 412 1037 307 b 1043 180 1041 196 1043 187 b 992 127 1027 161 1009 143 b 965 111 981 117 972 111 b 936 132 955 111 946 120 b 829 268 900 179 867 225 b 760 317 801 301 780 317 b 691 258 739 317 719 297 b 605 147 664 219 641 177 b 589 138 599 141 593 138 b 572 148 583 138 579 141 b 415 317 520 206 467 261 b 327 372 390 343 366 366 b 300 373 317 373 308 373 b 154 295 239 373 190 348 b 55 138 120 243 85 192 b 0 -53 22 79 0 13 b 160 -317 0 -156 49 -252 b 209 -354 177 -327 192 -343 b 510 -531 305 -419 397 -495 b 593 -547 537 -540 564 -547 b 624 -544 603 -547 613 -546 z',\r\n        },\r\n        ornamentPrecompTrillSuffixDandrieu: {\r\n            x_min: 0,\r\n            x_max: 1003,\r\n            y_min: -20,\r\n            y_max: 521,\r\n            ha: 541,\r\n            o: 'm 791 -16 b 844 33 812 -3 829 14 b 981 271 900 107 937 190 b 994 288 984 278 985 288 b 1009 269 1004 288 1007 278 b 1077 112 1034 217 1051 163 b 1158 43 1103 62 1129 43 b 1231 69 1179 43 1204 55 b 1348 189 1280 98 1315 143 b 1444 451 1407 271 1444 357 b 1431 547 1444 482 1440 514 b 1188 750 1401 665 1299 750 b 1158 747 1178 750 1168 749 b 1079 684 1119 742 1089 727 b 1063 632 1076 665 1071 648 b 1056 609 1058 622 1056 615 b 1071 599 1056 602 1060 599 b 1086 600 1076 599 1080 600 b 1130 605 1102 603 1116 605 b 1244 569 1171 605 1210 595 b 1349 346 1322 511 1349 433 b 1348 312 1349 334 1349 324 b 1289 197 1345 266 1325 228 b 1238 174 1270 181 1253 174 b 1188 215 1220 174 1202 187 b 1145 308 1172 245 1159 276 b 1096 413 1129 343 1120 382 b 1053 438 1084 431 1068 438 b 1011 413 1038 438 1022 431 b 955 324 989 384 971 354 b 850 127 920 258 886 192 b 838 112 847 121 842 112 b 824 128 828 109 825 121 b 802 193 815 150 809 171 b 730 400 779 264 766 337 b 688 431 719 420 703 431 b 647 403 674 431 660 422 b 606 338 632 383 619 361 b 513 167 575 282 546 223 b 480 122 503 150 498 122 b 452 171 459 122 459 153 b 420 255 442 199 432 228 b 337 408 399 308 380 364 b 276 436 317 428 297 436 b 215 397 253 436 230 423 b 23 72 148 289 81 184 b 0 29 17 59 0 40 b 7 17 0 23 1 20 b 59 58 26 7 46 39 b 190 276 111 127 143 206 b 216 301 202 292 207 301 b 245 279 223 301 232 294 b 311 166 278 248 292 206 b 367 16 331 117 346 65 b 402 -19 377 -7 387 -19 b 438 -4 412 -19 423 -13 b 518 88 474 17 495 55 b 628 284 562 150 592 216 b 657 223 648 266 651 243 b 717 13 677 154 696 84 b 755 -29 726 -16 737 -29 b 791 -16 765 -29 776 -24 z',\r\n        },\r\n        ornamentPrecompDoubleCadenceUpperPrefix: {\r\n            x_min: 0,\r\n            x_max: 1246,\r\n            y_min: -30,\r\n            y_max: 296.0302860502196,\r\n            ha: 326.0302860502196,\r\n            o: 'm 360 -43 b 559 59 445 -43 503 7 b 698 236 615 111 652 179 b 714 248 704 243 710 248 b 727 235 719 248 721 243 l 848 42 b 883 12 860 22 870 12 b 917 32 891 12 903 19 b 946 62 927 42 939 50 b 1037 192 972 108 1009 147 b 1057 210 1044 204 1051 210 b 1076 190 1063 210 1068 203 l 1176 12 b 1215 -19 1188 -9 1201 -19 b 1250 -6 1225 -19 1237 -14 b 1284 27 1264 3 1274 16 b 1380 190 1323 78 1351 135 b 1395 210 1384 197 1385 210 b 1413 190 1405 210 1410 197 b 1508 40 1436 134 1467 85 b 1564 3 1529 14 1547 3 b 1617 32 1580 3 1597 12 b 1767 238 1678 92 1719 167 b 1794 310 1781 259 1791 282 b 1752 294 1776 317 1764 304 b 1656 164 1711 258 1689 206 b 1629 144 1646 151 1637 144 b 1603 161 1620 144 1613 150 b 1502 315 1562 207 1525 258 b 1452 357 1490 344 1470 357 b 1397 320 1431 357 1411 344 b 1316 170 1368 271 1345 219 b 1280 127 1306 154 1303 127 b 1244 171 1256 127 1254 154 b 1145 337 1210 226 1179 282 b 1110 363 1135 354 1122 363 b 1070 338 1097 363 1084 354 b 1050 311 1063 330 1057 320 b 959 181 1017 271 992 223 b 939 167 950 173 945 167 b 920 184 933 167 927 173 b 818 343 887 238 852 291 b 759 395 795 377 778 395 b 701 344 742 395 724 377 b 698 338 700 341 700 340 b 544 154 652 272 605 207 b 412 98 501 117 458 98 b 304 130 377 98 341 108 b 95 373 204 187 144 275 b 58 426 85 393 82 428 b 19 366 26 426 26 389 b 0 307 13 346 0 327 b 4 287 0 300 1 294 b 174 36 49 194 91 102 b 360 -43 230 -9 289 -43 z',\r\n        },\r\n        ornamentPrecompDoubleCadenceUpperPrefixTurn: {\r\n            x_min: 0,\r\n            x_max: 1226,\r\n            y_min: -237,\r\n            y_max: 436,\r\n            ha: 673,\r\n            o: 'm 1279 -341 b 1293 -252 1293 -307 1295 -278 b 1277 36 1287 -156 1282 -59 l 1273 118 b 1318 176 1289 137 1303 157 b 1349 203 1332 193 1342 203 b 1378 168 1359 203 1367 192 b 1456 35 1401 122 1428 78 b 1511 -12 1476 3 1493 -12 b 1568 23 1526 -12 1544 0 b 1597 53 1578 32 1588 42 b 1705 186 1629 101 1669 143 b 1761 284 1728 216 1751 246 b 1765 300 1763 288 1765 295 b 1763 307 1765 302 1765 305 b 1737 302 1754 311 1744 308 b 1718 287 1729 298 1725 292 b 1598 145 1673 245 1637 194 b 1578 130 1590 135 1584 130 b 1557 147 1571 130 1565 135 b 1447 321 1516 202 1488 265 b 1403 351 1433 341 1417 351 b 1358 323 1388 351 1372 341 b 1269 209 1329 285 1299 248 b 1254 521 1264 314 1259 418 b 1228 616 1253 554 1247 588 b 1218 628 1224 621 1223 628 l 1215 628 b 1201 613 1210 626 1202 619 b 1200 600 1200 609 1200 605 l 1200 586 b 1211 348 1204 507 1207 428 b 1217 166 1214 288 1215 226 b 1202 181 1212 168 1208 174 b 1094 334 1168 233 1130 284 b 1048 366 1079 356 1064 366 b 1004 331 1034 366 1018 354 b 904 154 969 275 930 220 b 873 202 887 171 880 187 b 778 356 845 256 819 311 b 737 379 763 372 750 379 b 698 353 724 379 711 370 l 621 232 b 415 114 570 154 495 114 b 302 138 377 114 340 121 b 73 400 187 192 117 284 b 55 420 69 415 62 420 b 42 410 50 420 45 416 b 0 292 23 373 0 334 b 4 262 0 282 1 272 b 168 39 32 168 92 99 b 359 -26 225 -6 292 -26 b 585 76 446 -26 530 10 b 668 202 616 115 641 160 b 693 228 680 219 687 228 b 720 203 700 228 707 219 b 801 63 752 160 775 111 b 844 7 812 42 818 7 b 910 66 877 6 894 39 b 923 94 916 75 919 85 b 995 219 945 137 968 179 b 1025 184 1009 210 1017 197 b 1119 56 1054 141 1087 98 b 1166 20 1138 32 1152 20 b 1215 50 1181 20 1195 30 b 1221 56 1217 52 1218 55 b 1228 -163 1223 -17 1225 -89 b 1279 -341 1231 -223 1251 -278 z',\r\n        },\r\n        ornamentPrecompTrillLowerSuffix: {\r\n            x_min: 0,\r\n            x_max: 833,\r\n            y_min: -309,\r\n            y_max: 319,\r\n            ha: 628,\r\n            o: 'm 778 -444 b 801 -445 785 -444 793 -445 b 1037 -338 894 -445 969 -397 b 1200 37 1149 -240 1200 -109 b 1084 406 1200 171 1172 300 b 1024 444 1064 431 1043 444 b 960 390 999 444 978 426 b 841 163 923 314 886 236 b 812 128 832 150 827 128 b 786 167 796 130 793 153 b 660 418 744 251 716 341 b 599 459 639 445 619 459 b 541 410 577 459 557 444 b 439 197 507 340 474 269 b 422 179 435 190 435 179 b 338 393 392 251 379 328 b 275 439 320 423 298 439 b 212 396 253 439 230 425 b 71 219 170 333 128 268 b 0 45 17 173 16 112 b 68 98 32 62 50 78 b 194 264 112 150 153 209 b 230 292 209 282 219 292 b 264 261 240 292 251 282 b 274 242 268 255 269 248 b 346 46 304 179 325 112 b 376 10 351 32 354 10 b 412 35 392 10 403 22 b 452 107 429 56 441 82 b 541 291 481 168 511 230 b 556 307 547 302 552 307 b 573 295 562 307 567 302 b 624 217 595 272 611 246 b 721 1 657 145 685 72 b 755 -27 732 -19 742 -27 b 786 -16 765 -27 775 -24 b 857 73 819 7 840 39 b 952 256 887 134 920 194 b 978 289 963 279 969 289 b 1009 262 985 289 994 281 b 1030 235 1017 253 1024 245 b 1110 -4 1071 161 1099 81 b 1116 -68 1113 -26 1116 -48 b 1009 -243 1116 -140 1090 -200 b 848 -291 956 -272 901 -291 b 730 -261 809 -291 770 -282 b 696 -248 714 -252 703 -248 b 671 -284 684 -248 678 -258 l 662 -312 b 657 -357 658 -330 657 -344 b 744 -439 657 -403 683 -425 z',\r\n        },\r\n        brassScoop: {\r\n            x_min: -0.4444444444444445,\r\n            x_max: 312,\r\n            y_min: -390,\r\n            y_max: 28,\r\n            ha: 418,\r\n            o: 'm 0 -562 b 393 -256 171 -504 307 -412 b 449 -39 431 -189 449 -115 b 448 -1 449 -26 449 -14 b 433 40 446 14 448 40 b 408 -3 410 40 412 14 b 396 -66 403 -23 402 -46 b 45 -397 346 -243 209 -337 b 0 -451 13 -409 1 -423 b 0 -562 -1 -485 0 -520 z',\r\n        },\r\n        brassDoitMedium: {\r\n            x_min: -0.32815253965710617,\r\n            x_max: 476.21251177608565,\r\n            y_min: -50,\r\n            y_max: 333.1535583875376,\r\n            ha: 383.1535583875376,\r\n            o: 'm 16 -72 b 27 -71 19 -72 23 -72 b 215 -33 89 -56 153 -48 b 521 114 327 -7 435 35 b 685 432 615 199 691 295 b 670 480 684 449 688 475 b 642 441 654 482 648 456 b 403 183 599 321 513 240 b 79 89 301 130 192 105 b 0 -1 -12 76 0 76 b 0 -50 0 -17 1 -33 b 16 -72 0 -65 3 -72 z',\r\n        },\r\n        brassFallLipShort: {\r\n            x_min: 0,\r\n            x_max: 298,\r\n            y_min: -344,\r\n            y_max: 65,\r\n            ha: 409,\r\n            o: 'm 396 -495 b 420 -461 412 -487 418 -474 b 429 -382 428 -435 429 -409 b 426 -330 429 -364 428 -347 b 285 -6 410 -209 356 -104 b 98 94 239 59 173 94 b 39 86 79 94 58 92 b 0 49 20 81 0 73 l 0 -52 b 10 -69 0 -62 1 -69 b 20 -68 13 -69 16 -69 b 88 -56 45 -59 66 -56 b 261 -160 156 -56 213 -95 b 396 -495 333 -259 382 -369 z',\r\n        },\r\n        brassLiftMedium: {\r\n            x_min: 0,\r\n            x_max: 807,\r\n            y_min: 0,\r\n            y_max: 838,\r\n            ha: 838,\r\n            o: 'm 50 0 b 55 1 52 0 53 0 b 58 23 65 7 59 16 b 55 58 56 36 55 48 b 130 117 55 99 75 112 b 220 213 202 121 220 141 b 315 308 220 289 238 308 l 336 308 b 408 380 393 310 406 321 b 461 452 409 438 416 452 b 485 451 468 452 477 451 b 569 510 531 448 556 464 b 573 543 572 520 572 531 b 657 619 580 605 595 618 b 698 621 670 619 684 619 b 788 700 749 625 778 649 b 798 778 792 726 793 752 b 873 857 806 841 809 845 b 985 950 927 867 973 887 b 1084 1047 1002 1035 1004 1034 b 1162 1128 1133 1056 1162 1087 b 1146 1182 1162 1145 1158 1164 b 1125 1207 1140 1191 1136 1207 l 1122 1207 b 1110 1191 1113 1205 1110 1198 b 1112 1174 1110 1185 1112 1178 b 1048 1110 1109 1126 1096 1113 b 1028 1109 1043 1110 1035 1109 b 939 1022 969 1102 948 1081 b 845 922 929 949 917 936 b 746 812 773 909 753 886 b 744 780 744 802 744 791 b 635 681 737 700 717 683 b 524 583 553 680 536 665 b 439 510 514 520 503 510 b 357 431 377 510 360 492 l 357 406 b 314 364 356 379 343 364 b 238 361 288 364 264 364 b 173 300 202 357 180 334 b 167 245 168 281 167 262 b 105 174 166 192 157 180 b 75 171 95 173 85 171 b 6 112 30 166 14 153 b 0 73 1 98 0 85 b 37 10 0 45 13 26 b 50 0 42 7 46 0 z',\r\n        },\r\n        brassFallRoughMedium: {\r\n            x_min: 0,\r\n            x_max: 791,\r\n            y_min: 0,\r\n            y_max: 819,\r\n            ha: 819,\r\n            o: 'm 1117 0 b 1139 101 1129 26 1139 71 b 1138 121 1139 109 1139 115 b 1084 193 1125 171 1110 193 b 1044 183 1073 193 1060 189 b 1022 177 1035 179 1028 177 b 1007 209 1012 177 1008 186 b 876 324 1004 292 959 330 b 799 317 850 321 825 320 b 759 354 772 314 755 320 b 760 373 760 360 760 366 b 759 392 760 379 760 384 b 681 477 753 451 730 477 b 654 474 672 477 664 475 b 606 467 638 471 622 468 b 586 465 599 465 592 465 b 564 481 570 465 564 469 b 569 505 564 487 566 495 b 575 553 572 521 575 537 b 572 585 575 564 573 575 b 481 665 560 657 539 668 b 412 665 458 664 435 665 b 382 690 392 667 382 672 b 383 700 382 693 383 696 b 386 773 387 724 387 749 b 297 858 382 828 351 857 b 229 861 274 858 251 858 b 190 897 207 863 193 871 b 163 1012 186 936 180 976 b 79 1084 145 1050 124 1084 b 66 1083 75 1084 71 1083 b 43 1096 49 1081 43 1087 b 48 1112 43 1100 45 1106 b 53 1130 52 1119 53 1125 b 39 1169 53 1145 45 1158 b 26 1179 36 1175 30 1179 b 16 1171 22 1179 17 1176 b 0 1103 10 1149 0 1126 b 9 1067 0 1092 1 1079 b 91 1021 26 1031 52 1018 b 145 978 122 1024 141 1011 b 156 913 147 956 151 935 b 291 795 170 831 210 795 b 346 768 337 795 346 796 b 344 743 346 760 344 753 b 343 716 344 733 343 724 b 455 600 343 651 390 602 b 505 605 471 599 490 605 b 528 598 514 605 523 603 b 536 579 534 592 536 586 b 524 523 536 562 526 541 b 523 505 524 517 523 511 b 621 405 523 442 560 405 b 639 406 626 405 634 406 b 677 413 652 408 664 410 b 701 416 687 415 696 416 b 721 392 716 416 721 410 b 720 373 721 386 720 380 b 831 255 714 301 759 252 b 897 261 854 255 876 261 b 926 262 909 261 919 262 b 969 197 963 262 965 252 b 971 184 969 193 971 189 b 1031 115 979 137 998 115 b 1071 122 1043 115 1056 118 b 1096 130 1079 125 1086 127 b 1087 59 1094 107 1087 82 b 1117 0 1087 37 1094 17 z',\r\n        },\r\n        brassBend: {\r\n            x_min: 0,\r\n            x_max: 381,\r\n            y_min: 0,\r\n            y_max: 367,\r\n            ha: 367,\r\n            o: 'm 298 0 b 472 50 359 0 418 14 b 537 135 501 71 530 92 b 543 216 543 163 543 190 l 543 266 b 544 308 543 281 543 295 b 549 433 546 354 549 395 b 543 507 549 459 547 482 b 533 528 541 516 544 528 b 511 508 524 528 514 520 b 508 478 510 498 508 488 b 504 318 507 425 504 372 b 505 264 504 300 505 282 b 446 181 505 220 484 199 b 294 150 396 160 344 150 b 92 194 226 150 158 167 b 45 269 62 207 45 230 b 46 359 46 300 46 328 b 37 497 46 405 45 451 b 27 523 36 507 37 523 b 4 498 14 524 6 513 b 3 481 3 492 3 487 b 0 409 1 456 0 433 b 4 228 0 348 4 288 b 3 177 4 210 4 194 b 68 53 1 125 20 84 b 200 10 108 27 154 17 b 298 0 233 4 266 0 z',\r\n        },\r\n        brassMuteClosed: {\r\n            x_min: 0,\r\n            x_max: 274,\r\n            y_min: 0,\r\n            y_max: 260,\r\n            ha: 260,\r\n            o: 'm 203 0 b 209 1 206 0 207 0 b 216 13 215 4 216 9 l 215 27 l 215 153 b 216 161 216 156 216 158 b 372 164 268 163 318 164 b 395 184 383 164 395 166 l 395 189 b 357 229 392 209 386 229 b 219 228 311 229 265 228 l 223 310 b 209 357 225 328 219 344 b 189 374 203 364 197 374 b 184 373 187 374 186 373 b 177 359 179 372 177 366 l 177 348 l 173 222 l 39 222 b 0 206 12 222 0 219 b 10 174 0 199 3 189 b 46 157 19 157 30 157 b 108 160 68 158 88 160 b 171 161 130 161 150 161 l 167 58 b 184 16 167 40 171 26 b 203 0 192 12 196 0 z',\r\n        },\r\n        brassMuteOpen: {\r\n            x_min: 1,\r\n            x_max: 313.01193341111656,\r\n            y_min: 0,\r\n            y_max: 309,\r\n            ha: 309,\r\n            o: 'm 265 0 b 451 189 363 7 452 88 l 451 215 b 348 383 441 285 405 343 b 209 445 288 426 248 445 b 84 379 168 445 132 420 b 69 364 79 373 73 369 b 1 213 30 323 1 275 b 230 0 1 88 94 0 z m 210 62 b 128 73 181 62 154 66 b 40 171 71 91 42 125 b 52 226 40 187 45 206 b 197 374 79 295 130 344 b 228 382 207 380 217 382 b 300 361 252 382 276 370 b 374 308 328 350 353 331 b 410 223 397 284 410 253 b 393 163 410 202 405 181 b 210 62 354 91 288 63 z',\r\n        },\r\n        brassFlip: {\r\n            x_min: 0,\r\n            x_max: 402,\r\n            y_min: 0,\r\n            y_max: 361,\r\n            ha: 361,\r\n            o: 'm 579 0 b 511 153 579 68 557 117 b 52 504 359 271 206 387 b 29 520 45 510 39 520 b 20 517 26 520 23 518 b 0 477 3 510 0 494 l 0 125 b 17 20 1 92 1 56 b 40 84 37 40 40 60 b 42 287 40 151 42 219 l 42 363 z',\r\n        },\r\n        brassJazzTurn: {\r\n            x_min: 0,\r\n            x_max: 646,\r\n            y_min: 0,\r\n            y_max: 212,\r\n            ha: 212,\r\n            o: 'm 310 0 b 367 33 327 0 344 10 b 389 55 374 40 382 49 b 490 145 423 85 456 114 b 507 154 495 151 501 154 b 524 144 513 154 517 151 b 598 72 547 120 575 98 b 700 24 625 42 662 24 b 765 43 721 24 744 30 b 893 147 812 72 855 105 b 930 212 910 166 923 186 b 912 215 923 213 917 215 b 871 199 896 215 883 209 b 812 153 852 183 832 167 b 789 144 805 148 796 144 b 773 156 782 144 776 147 b 691 251 757 199 720 222 b 603 301 658 282 631 301 b 527 258 580 301 556 288 b 420 156 494 222 455 190 b 399 143 412 147 405 143 b 377 157 392 143 386 147 b 259 282 340 200 300 242 b 219 305 245 298 232 305 b 177 279 204 305 192 297 b 55 127 137 228 95 177 b 0 52 36 104 20 79 b 14 50 6 50 10 50 b 53 66 32 50 45 58 b 115 131 75 88 98 108 b 135 148 124 143 130 148 b 157 132 141 148 148 143 b 252 33 186 96 219 65 b 310 0 275 12 292 0 z',\r\n        },\r\n        brassSmear: {\r\n            x_min: 0,\r\n            x_max: 334,\r\n            y_min: 0,\r\n            y_max: 151,\r\n            ha: 151,\r\n            o: 'm 321 0 b 475 125 390 0 436 43 b 481 143 478 131 481 137 b 475 154 481 147 480 151 b 449 148 468 158 458 154 b 395 132 432 137 413 132 b 343 140 377 132 360 137 b 229 194 301 148 266 173 b 168 217 206 209 186 217 b 109 192 148 217 130 209 b 0 26 59 148 32 89 b 59 63 32 29 45 48 b 98 84 72 78 84 84 b 130 73 108 84 118 81 b 213 26 157 58 183 37 b 321 0 255 9 289 0 z',\r\n        },\r\n        stringsDownBow: {\r\n            x_min: 0,\r\n            x_max: 306,\r\n            y_min: -0.09607201951262866,\r\n            y_max: 366,\r\n            ha: 366.09607201951263,\r\n            o: 'm 405 0 b 425 17 413 -1 420 9 b 439 66 435 32 439 48 b 441 268 439 137 441 202 b 436 412 441 314 439 361 l 435 413 b 423 469 435 436 431 456 b 344 508 406 501 373 501 b 204 527 298 520 251 527 b 60 498 156 527 108 518 b 7 438 32 485 10 468 l 7 426 b 4 337 7 396 7 367 b 0 140 0 272 0 206 b 1 42 0 107 0 73 b 13 3 1 27 -3 4 b 40 39 29 3 35 24 b 42 53 42 43 40 49 b 49 141 48 84 49 112 b 48 215 49 167 48 192 b 49 252 48 228 48 240 l 49 312 b 130 343 72 331 99 340 b 206 347 156 346 180 347 b 372 314 262 347 318 338 l 390 307 l 390 245 b 390 138 392 212 390 176 b 397 23 390 101 392 62 b 405 0 399 14 393 1 z',\r\n        },\r\n        stringsUpBow: {\r\n            x_min: 0,\r\n            x_max: 219.2842808242076,\r\n            y_min: 0,\r\n            y_max: 489,\r\n            ha: 489,\r\n            o: 'm 151 0 b 184 42 170 12 180 26 b 297 554 223 212 261 382 b 315 690 305 598 318 645 b 304 704 315 697 311 704 b 276 670 288 704 282 697 b 157 131 236 490 196 311 l 157 144 b 73 526 134 276 104 396 b 30 677 60 576 52 638 b 13 694 26 684 22 694 b 0 674 9 694 0 691 l 0 671 b 10 603 3 649 6 626 b 105 174 42 461 72 317 b 150 0 117 117 128 58 z',\r\n        },\r\n        stringsHarmonic: {\r\n            x_min: 0,\r\n            x_max: 191,\r\n            y_min: 0,\r\n            y_max: 202,\r\n            ha: 202,\r\n            o: 'm 143 0 b 275 122 217 0 275 53 b 127 291 275 206 202 291 b 0 154 63 291 0 222 b 143 0 0 76 71 0 z m 122 68 b 43 105 89 66 59 75 b 39 124 40 111 39 117 b 79 199 39 148 56 180 b 145 226 101 216 122 226 b 199 210 163 226 180 220 b 235 150 223 196 235 173 b 203 92 235 128 225 107 b 122 68 181 76 150 68 z',\r\n        },\r\n        pluckedSnapPizzicatoAbove: {\r\n            x_min: 0,\r\n            x_max: 201,\r\n            y_min: 0,\r\n            y_max: 325,\r\n            ha: 325,\r\n            o: 'm 171 0 b 289 99 240 0 289 45 b 258 183 289 130 274 156 b 174 269 236 217 203 240 l 174 408 b 174 429 174 415 176 422 b 131 468 168 451 153 468 b 117 451 120 468 117 461 b 118 429 117 444 118 435 b 115 307 117 389 115 347 b 0 166 59 295 0 223 b 171 0 0 85 89 0 z m 134 55 b 52 131 84 55 52 85 b 115 233 52 179 81 209 b 114 192 114 220 114 206 b 174 120 114 137 114 137 l 174 228 b 233 148 200 207 223 183 b 236 130 235 143 236 135 b 197 72 236 105 223 85 b 134 55 177 60 157 55 z',\r\n        },\r\n        pluckedSnapPizzicatoBelow: {\r\n            x_min: 0,\r\n            x_max: 211,\r\n            y_min: 0,\r\n            y_max: 307,\r\n            ha: 307,\r\n            o: 'm 145 7 b 163 0 153 3 158 0 b 173 23 170 0 173 7 l 173 140 l 170 140 l 170 163 l 171 163 b 206 170 179 164 193 166 b 304 287 264 186 304 233 b 281 354 304 308 297 333 b 118 442 240 412 186 439 b 0 324 69 442 0 370 b 115 176 0 266 55 202 l 115 56 b 145 7 114 33 125 19 z m 115 220 b 62 256 92 223 73 230 b 53 292 56 269 53 281 b 78 344 53 311 60 328 b 168 384 105 372 135 384 b 213 376 183 384 199 382 b 253 321 239 366 253 346 b 246 291 253 311 251 301 b 170 226 230 256 203 236 l 170 258 b 148 305 171 278 163 292 b 128 315 143 310 135 315 l 124 315 b 115 301 117 314 115 308 z',\r\n        },\r\n        pluckedLeftHandPizzicato: {\r\n            x_min: 0,\r\n            x_max: 271,\r\n            y_min: 0,\r\n            y_max: 284,\r\n            ha: 284,\r\n            o: 'm 213 0 b 223 14 222 0 223 7 b 222 35 223 22 222 29 l 222 176 b 373 170 272 174 323 170 b 390 180 382 170 390 171 l 390 184 b 347 232 386 207 382 232 b 219 238 307 233 266 235 l 219 364 b 171 409 219 395 193 409 b 156 393 160 409 156 402 b 158 370 156 384 158 376 l 158 240 b 16 239 115 240 66 239 b 0 226 7 239 0 238 l 0 223 b 50 179 1 203 29 179 b 158 177 86 179 122 179 l 158 63 b 161 29 158 52 158 40 b 213 0 166 -1 194 1 z',\r\n        },\r\n        keyboardPedalPed: {\r\n            x_min: 0,\r\n            x_max: 944,\r\n            y_min: -13,\r\n            y_max: 550,\r\n            ha: 563,\r\n            o: 'm 22 0 b 109 78 53 0 105 46 l 144 333 b 163 376 147 347 140 372 b 364 465 238 390 301 426 b 454 599 416 497 454 540 b 452 618 454 605 454 612 b 320 770 442 694 396 747 b 248 779 295 778 272 779 b 193 778 229 779 212 779 b 160 780 181 778 167 775 b 137 792 153 789 144 791 b 109 789 128 792 118 789 b 7 719 59 789 48 737 b 23 708 16 714 20 708 b 36 710 29 710 33 710 b 53 684 52 710 53 698 l 53 674 b 43 386 53 577 53 482 b 20 164 36 312 30 238 b 1 30 14 120 7 75 b 0 19 0 26 0 22 b 22 0 0 9 4 0 z m 171 425 b 156 442 160 425 156 429 b 157 475 157 452 157 464 b 164 602 161 517 164 560 b 161 698 164 635 163 667 b 184 729 161 720 167 729 l 193 729 b 348 563 278 719 348 641 b 346 539 348 554 347 547 b 171 425 328 459 229 422 z m 979 6 b 1008 13 986 6 995 9 b 1081 101 1047 29 1079 46 b 1116 449 1087 217 1104 333 b 1143 654 1123 518 1133 586 b 1148 685 1145 664 1148 675 b 1140 704 1148 693 1146 700 b 1107 716 1130 713 1119 716 b 1056 706 1092 716 1073 710 b 1037 671 1035 703 1038 685 b 1004 439 1025 595 1014 517 b 986 419 1001 428 999 419 b 979 419 985 419 982 420 b 935 426 965 423 949 425 b 795 376 884 426 838 405 b 664 153 714 323 664 249 b 665 130 664 145 665 138 b 753 29 671 65 704 29 b 815 40 773 29 792 33 b 975 147 873 65 923 101 b 965 45 971 108 968 76 b 979 6 963 17 966 6 z m 393 -17 b 634 145 494 16 579 52 b 638 160 636 151 638 156 b 625 168 638 166 634 168 b 621 167 624 168 622 168 b 524 118 582 164 544 160 b 495 79 517 104 505 92 b 435 33 471 49 452 33 b 380 96 416 33 397 55 b 369 145 373 114 369 131 b 442 225 369 186 395 213 b 468 232 451 228 459 229 b 654 344 539 255 606 285 b 677 395 667 360 677 376 b 672 415 677 402 675 408 b 612 459 661 442 639 455 b 589 461 602 461 592 461 b 348 328 500 461 409 408 b 269 120 302 268 269 199 b 379 -19 269 45 318 -19 b 393 -17 383 -19 389 -19 z m 395 240 b 494 383 418 300 452 344 l 521 405 b 544 419 528 409 536 418 b 554 415 547 419 550 418 b 570 383 564 406 570 396 l 570 379 b 552 331 570 360 562 344 b 395 240 511 285 462 253 z m 827 89 b 792 111 815 89 804 96 b 766 204 775 131 766 158 b 845 360 772 256 799 314 b 871 372 854 369 863 372 b 897 366 880 372 888 369 b 978 279 942 353 963 320 b 976 259 981 272 981 265 b 858 104 942 203 909 147 b 827 89 847 94 837 89 z m 1282 12 b 1336 35 1303 14 1320 23 b 1359 71 1351 45 1359 58 b 1338 102 1359 82 1352 95 b 1254 130 1312 118 1284 130 b 1187 88 1223 130 1202 109 b 1178 65 1182 81 1178 72 b 1195 37 1178 55 1182 45 b 1282 12 1223 23 1253 19 z',\r\n        },\r\n        keyboardPedalUp: {\r\n            x_min: 0,\r\n            x_max: 436.6015132318337,\r\n            y_min: 0,\r\n            y_max: 461,\r\n            ha: 461,\r\n            o: 'm 330 0 b 334 1 331 0 333 0 b 340 12 338 4 340 7 l 338 26 b 340 264 338 105 338 184 b 526 95 400 206 461 148 b 559 71 536 88 547 71 b 564 72 560 71 563 71 b 580 121 580 79 580 102 l 580 127 b 543 203 585 158 573 184 b 472 259 518 219 495 238 l 445 285 b 590 292 494 288 541 291 b 622 318 609 294 618 302 b 628 359 625 331 626 346 b 586 402 632 393 621 405 b 464 395 546 399 504 396 l 559 491 b 567 524 567 500 567 510 b 564 543 567 527 567 536 b 539 596 559 563 560 590 b 494 564 521 600 508 577 b 340 413 442 514 390 464 l 340 560 b 287 664 340 600 321 632 b 271 518 274 612 272 566 b 268 445 269 494 269 469 b 117 569 219 488 168 530 b 96 579 109 575 102 579 b 85 560 89 579 85 573 b 124 446 85 518 82 477 b 209 380 153 426 181 403 b 45 374 154 377 99 376 b 0 324 9 374 0 359 b 63 266 0 265 1 265 b 144 272 89 269 117 272 l 196 272 b 108 193 167 246 138 219 b 60 135 76 164 60 151 b 99 73 60 121 73 105 b 104 68 101 72 102 71 b 114 58 107 60 111 58 b 130 66 120 58 124 62 b 259 186 173 107 217 145 b 256 117 259 163 256 140 b 311 13 256 72 271 37 b 330 0 317 10 323 0 z',\r\n        },\r\n        pictChokeCymbal: {\r\n            x_min: 1,\r\n            x_max: 147,\r\n            y_min: 0,\r\n            y_max: 242,\r\n            ha: 242,\r\n            o: 'm 79 4 b 207 158 153 32 192 88 b 212 200 210 173 212 187 b 143 336 212 253 187 298 b 98 348 131 344 115 348 b 4 295 60 348 16 327 b 1 276 1 289 1 282 b 9 249 1 266 3 258 b 121 183 35 206 72 183 b 156 186 132 183 144 183 b 26 53 134 115 91 73 b 7 39 13 49 7 45 b 19 20 7 33 12 27 b 59 0 30 9 43 0 b 79 4 65 0 72 1 z',\r\n        },\r\n        wiggleArpeggiatoUp: {\r\n            x_min: -22,\r\n            x_max: 300,\r\n            y_min: 0,\r\n            y_max: 176,\r\n            ha: 176,\r\n            o: 'm 173 4 b 196 0 180 1 189 0 b 246 26 215 0 230 9 b 301 117 271 53 285 85 b 312 131 305 125 307 131 b 327 124 315 131 321 128 b 373 86 341 112 353 101 b 412 69 389 75 402 69 b 432 94 425 69 432 79 b 373 181 432 117 413 154 b 235 252 323 216 285 245 b 220 253 229 253 225 253 b 168 215 196 253 181 240 b 111 112 151 180 140 141 b 94 102 105 105 99 102 b 78 111 89 102 84 105 b 0 181 55 135 35 160 b -32 153 -20 194 -32 168 b 0 86 -32 124 -32 109 b 94 36 22 71 73 46 b 173 4 134 16 131 17 z',\r\n        },\r\n        arpeggiatoUp: {\r\n            x_min: 0,\r\n            x_max: 262,\r\n            y_min: 0,\r\n            y_max: 1459,\r\n            ha: 1459,\r\n            o: 'm 190 0 b 160 63 187 29 170 45 b 145 108 150 81 145 95 b 183 163 145 128 157 145 b 300 246 222 190 262 216 b 347 318 333 272 347 295 b 301 393 347 341 331 364 b 258 413 289 403 272 408 b 145 449 220 425 183 436 b 117 464 135 452 120 452 b 140 491 115 477 128 484 b 294 593 192 526 243 557 b 330 647 318 611 330 626 b 314 693 330 660 324 675 b 262 736 302 714 285 729 b 170 763 230 744 200 753 b 122 783 153 768 125 768 b 160 831 120 804 143 818 b 288 922 202 861 246 890 b 333 999 318 945 333 972 b 266 1083 333 1032 310 1064 b 189 1115 240 1094 215 1103 b 122 1178 145 1133 122 1153 b 168 1250 122 1200 138 1223 l 180 1257 b 269 1333 210 1283 240 1306 b 305 1405 294 1356 305 1381 b 284 1469 305 1426 298 1447 b 228 1525 269 1492 251 1511 b 183 1600 197 1545 183 1571 b 190 1640 183 1613 184 1626 b 197 1670 193 1650 194 1660 b 272 1735 213 1719 230 1735 b 295 1734 279 1735 287 1735 b 323 1732 305 1732 314 1732 b 350 1731 333 1732 341 1732 b 377 1742 369 1729 377 1732 b 370 1761 377 1747 374 1754 l 301 1898 b 217 2066 274 1954 248 2012 b 186 2101 204 2089 196 2101 b 154 2069 177 2101 167 2091 b 12 1824 105 1987 59 1907 b 0 1787 4 1810 0 1797 b 59 1744 0 1761 20 1745 b 160 1738 92 1744 125 1740 b 145 1692 156 1721 151 1706 b 135 1633 138 1672 135 1652 b 184 1518 135 1591 151 1552 b 229 1475 199 1503 213 1488 b 259 1431 249 1456 259 1444 b 229 1388 259 1420 249 1407 b 151 1325 203 1365 177 1345 b 105 1279 134 1310 118 1296 b 73 1202 84 1251 73 1227 b 108 1123 73 1176 85 1152 b 255 1031 148 1077 199 1051 b 282 1014 274 1025 282 1021 b 262 991 282 1008 275 1001 b 151 914 226 963 189 939 b 79 851 125 896 99 877 b 63 809 69 837 63 824 b 79 769 63 796 68 783 b 202 697 111 729 154 710 b 266 670 225 690 266 688 b 210 622 266 648 232 635 b 82 534 167 593 120 570 b 55 491 63 518 55 505 b 79 448 55 478 63 465 b 255 361 127 395 192 380 b 288 343 269 359 288 357 b 266 312 288 331 275 320 b 144 223 229 278 184 253 b 85 134 104 193 85 166 b 118 53 85 111 96 85 b 190 0 135 29 160 14 z',\r\n        },\r\n        arpeggiatoDown: {\r\n            x_min: 0,\r\n            x_max: 218,\r\n            y_min: 0,\r\n            y_max: 1440,\r\n            ha: 1440,\r\n            o: 'm 161 16 b 310 261 210 98 259 180 b 314 275 312 266 314 271 b 302 295 314 282 310 289 b 252 311 287 308 269 311 b 217 310 240 311 229 310 b 190 333 202 310 194 315 b 151 412 186 363 171 389 b 102 501 120 452 102 477 b 150 588 102 524 118 547 b 161 603 154 592 158 598 b 181 661 176 622 181 641 b 173 704 181 675 179 690 b 86 795 156 746 121 770 b 53 829 63 811 53 819 b 78 868 53 840 62 851 b 102 888 85 876 94 883 b 180 956 128 912 156 933 b 216 1028 204 979 216 1002 b 203 1081 216 1044 212 1061 b 115 1171 186 1123 148 1145 b 75 1221 88 1191 75 1207 b 114 1272 75 1237 88 1251 b 173 1308 132 1284 154 1296 b 226 1339 190 1318 209 1328 b 265 1405 253 1359 265 1380 b 258 1447 265 1418 264 1431 b 154 1541 242 1499 199 1521 b 109 1581 124 1555 109 1567 b 141 1627 109 1594 121 1608 b 204 1680 163 1646 184 1662 b 233 1742 223 1699 233 1719 b 226 1777 233 1752 230 1764 b 135 1862 210 1822 173 1840 b 104 1895 114 1875 104 1884 b 118 1930 104 1904 109 1914 b 192 2006 135 1961 161 1986 b 206 2029 203 2013 206 2022 b 192 2064 206 2040 197 2052 b 180 2074 187 2071 184 2074 b 156 2061 171 2074 163 2065 b 84 1983 125 2040 102 2013 b 65 1921 71 1961 65 1941 b 88 1853 65 1899 72 1876 b 171 1784 108 1820 138 1801 b 190 1764 184 1777 190 1770 b 174 1741 190 1757 184 1750 b 107 1683 153 1722 128 1704 b 68 1610 81 1659 68 1636 b 88 1548 68 1591 75 1571 b 177 1470 109 1512 141 1489 b 223 1431 209 1453 223 1443 b 179 1390 223 1420 209 1408 b 128 1361 163 1380 145 1371 b 71 1322 108 1348 88 1338 b 32 1253 45 1300 32 1277 b 48 1198 32 1236 37 1218 b 147 1090 71 1152 108 1120 b 174 1057 166 1076 174 1067 b 153 1022 174 1047 167 1037 b 109 982 140 1008 124 995 b 37 919 85 962 59 942 b 9 860 17 899 9 880 b 26 806 9 844 14 827 b 120 717 50 769 84 740 b 138 691 132 708 138 700 b 130 668 138 684 135 677 b 92 618 118 651 105 635 b 59 531 71 589 59 560 b 84 455 59 507 68 481 b 132 386 98 431 115 408 b 148 341 144 372 148 357 b 144 317 148 333 147 324 b 121 305 140 307 131 305 l 98 305 b 82 304 94 304 88 304 l 32 304 b 0 292 10 304 0 302 b 12 266 0 287 4 279 b 60 164 32 233 46 199 b 127 20 84 117 105 68 b 144 0 132 9 137 0 b 161 16 150 0 154 4 z',\r\n        },\r\n        repeat1Bar: {\r\n            x_min: 0,\r\n            x_max: 599.1057280164835,\r\n            y_min: -250,\r\n            y_max: 175,\r\n            ha: 425,\r\n            o: 'm 216 98 b 255 75 236 84 246 75 b 291 104 265 75 274 85 b 323 147 304 117 327 125 b 289 215 323 168 314 184 b 238 252 269 239 253 252 b 187 222 222 252 207 242 b 173 206 183 216 177 212 b 157 170 163 194 157 183 b 174 138 157 160 161 150 b 216 98 189 127 200 109 z m 76 -334 b 181 -285 111 -315 148 -302 b 831 52 396 -168 613 -58 b 863 114 855 63 864 82 b 828 202 855 140 855 176 b 808 213 821 209 815 213 b 793 209 804 213 799 212 l 422 19 b 26 -179 291 -48 164 -124 b 0 -213 10 -186 0 -196 b 3 -232 0 -219 0 -225 b 52 -325 14 -265 37 -294 b 66 -337 55 -331 59 -337 b 76 -334 69 -337 72 -336 z m 769 -360 b 829 -264 779 -360 829 -284 b 769 -176 822 -232 799 -200 b 742 -163 760 -167 750 -163 b 716 -184 733 -163 723 -168 b 683 -228 708 -202 693 -213 b 672 -253 675 -236 672 -245 b 683 -281 672 -262 675 -271 b 752 -353 703 -308 732 -327 b 769 -360 756 -357 763 -360 z',\r\n        },\r\n        repeat2Bars: {\r\n            x_min: 0.008571918423331715,\r\n            x_max: 775,\r\n            y_min: -246.92374029115243,\r\n            y_max: 362.82068246705313,\r\n            ha: 609.7444227582056,\r\n            o: 'm 909 412 b 873 351 906 384 893 367 b 436 50 729 249 585 147 l 91 -179 b 62 -174 76 -189 68 -183 b 12 -96 48 -147 24 -125 b 36 -16 -7 -53 -6 -43 b 220 104 96 24 158 65 b 819 507 425 232 624 369 b 881 495 852 530 861 528 b 909 412 899 469 900 439 z m 333 338 b 302 240 330 307 317 274 b 276 235 297 225 287 228 l 233 269 b 203 376 186 307 183 318 b 225 441 212 397 217 419 b 246 454 228 452 232 458 b 333 338 284 441 333 380 z m 1116 228 b 1067 158 1115 192 1092 174 b 910 59 1015 125 963 92 b 478 -240 762 -33 622 -140 b 311 -350 423 -279 366 -314 b 285 -344 298 -360 289 -356 b 239 -258 272 -314 251 -288 b 261 -196 228 -228 235 -210 b 517 -29 348 -144 436 -91 b 1030 321 681 98 861 202 b 1093 307 1060 343 1076 340 b 1116 228 1107 281 1109 252 z m 1070 -105 b 1020 -210 1057 -143 1038 -176 b 998 -210 1014 -219 1004 -215 l 924 -153 b 913 -88 899 -135 897 -112 b 949 -22 926 -66 939 -45 b 998 -7 960 6 976 9 b 1070 -105 1032 -32 1058 -63 z',\r\n        },\r\n        repeat4Bars: {\r\n            x_min: 0,\r\n            x_max: 1374,\r\n            y_min: -304,\r\n            y_max: 304,\r\n            ha: 608,\r\n            o: 'm 78 -266 b 92 -258 82 -266 88 -264 b 114 -240 98 -251 107 -246 b 638 107 289 -125 467 -14 b 873 271 716 161 793 216 b 907 337 894 285 906 305 b 887 400 901 354 897 379 b 852 438 877 426 867 438 b 814 420 842 438 829 432 b 135 -33 592 262 366 111 b 12 -121 92 -60 48 -84 b 0 -144 4 -128 0 -135 b 4 -160 0 -148 1 -154 b 63 -255 17 -196 45 -223 b 78 -266 68 -262 72 -266 z m 291 148 b 325 223 302 148 308 170 b 333 256 328 235 330 246 b 264 363 330 305 298 336 b 242 373 255 369 248 373 b 220 347 232 373 225 364 b 202 288 216 327 213 305 b 190 252 193 275 190 262 b 222 200 190 232 202 215 b 291 148 264 170 279 148 z m 815 -367 b 829 -359 819 -367 824 -364 b 851 -343 835 -353 844 -347 b 1375 6 1027 -228 1205 -117 l 1610 170 b 1644 235 1632 184 1643 203 b 1626 300 1639 253 1634 276 b 1590 337 1614 325 1604 337 b 1551 320 1580 337 1567 330 b 873 -135 1329 161 1103 10 b 749 -222 829 -161 785 -184 b 737 -245 742 -230 737 -238 b 742 -261 737 -249 739 -255 b 802 -357 755 -297 782 -325 b 815 -367 805 -363 809 -367 z m 396 -360 b 408 -356 400 -360 403 -359 b 609 -223 471 -307 543 -269 b 896 -19 706 -156 795 -81 b 1164 154 985 37 1074 96 b 1214 223 1189 170 1211 187 b 1176 321 1204 253 1205 292 b 1159 330 1169 327 1165 330 b 1145 324 1155 330 1151 328 b 1048 258 1113 302 1081 278 b 357 -202 809 117 598 -65 b 333 -238 341 -212 333 -223 b 338 -262 333 -245 334 -253 b 384 -350 350 -294 372 -318 b 396 -360 386 -354 390 -360 z m 1162 -438 b 1174 -433 1166 -438 1169 -436 b 1374 -300 1237 -384 1309 -346 b 1660 -96 1470 -233 1561 -158 b 1930 76 1751 -39 1840 19 b 1979 147 1954 92 1977 109 b 1943 243 1968 177 1971 216 b 1924 253 1935 251 1930 253 b 1911 248 1920 253 1915 252 b 1814 181 1878 225 1848 202 b 1123 -279 1575 40 1364 -141 b 1099 -315 1106 -289 1099 -300 b 1103 -338 1099 -321 1100 -330 b 1149 -426 1115 -370 1138 -396 b 1162 -438 1151 -432 1156 -438 z m 1875 -295 b 1882 -291 1878 -295 1879 -294 b 1934 -189 1904 -258 1921 -223 b 1872 -96 1925 -147 1901 -120 b 1840 -78 1858 -84 1848 -78 b 1812 -109 1830 -78 1823 -88 l 1777 -173 b 1770 -199 1773 -181 1770 -190 b 1786 -230 1770 -210 1774 -220 b 1862 -289 1809 -253 1837 -269 b 1875 -295 1865 -292 1871 -295 z',\r\n        },\r\n        repeatBarSlash: {\r\n            x_min: 0,\r\n            x_max: 630,\r\n            y_min: -225.19160170741762,\r\n            y_max: 265.12618221237005,\r\n            ha: 490.31778391978764,\r\n            o: 'm 78 -324 b 92 -314 82 -325 88 -321 b 114 -298 96 -307 107 -302 b 638 49 289 -183 467 -72 b 873 215 716 104 792 161 b 907 279 894 229 906 248 b 887 344 901 298 897 321 b 852 382 877 369 867 380 b 814 363 842 383 829 376 b 135 -91 603 192 364 55 b 12 -177 92 -118 45 -137 b 0 -202 4 -186 0 -192 b 4 -217 0 -206 1 -212 b 63 -312 17 -253 42 -284 b 78 -324 68 -318 72 -323 z',\r\n        },\r\n        csymDiminished: {\r\n            x_min: 0,\r\n            x_max: 506,\r\n            y_min: -0.011036179317259481,\r\n            y_max: 500,\r\n            ha: 500.0110361793173,\r\n            o: 'm 397 0 b 729 265 576 -1 729 95 b 711 367 729 297 723 331 b 472 670 668 498 586 595 b 315 720 423 701 372 720 b 253 713 295 720 275 719 b 32 514 144 687 75 615 b 0 374 12 468 0 420 b 27 251 0 333 9 292 b 140 117 52 196 92 153 b 397 0 223 52 317 4 z m 340 95 b 132 314 233 84 122 216 b 324 589 145 438 200 539 b 415 611 360 603 389 611 b 544 505 469 611 505 576 b 590 392 564 471 583 432 b 596 343 593 374 596 359 b 340 95 596 210 485 96 z',\r\n        },\r\n        csymHalfDiminished: {\r\n            x_min: -32,\r\n            x_max: 496,\r\n            y_min: -33,\r\n            y_max: 492,\r\n            ha: 525,\r\n            o: 'm -29 -48 b 0 -36 -19 -48 -9 -40 b 17 -20 7 -32 12 -24 b 134 94 56 19 95 56 b 372 0 207 43 282 0 b 455 13 397 0 426 4 b 677 258 556 45 671 141 b 678 289 677 268 678 278 b 593 539 678 380 654 467 b 592 541 593 540 592 540 l 684 632 b 713 678 700 647 711 665 b 714 691 714 684 714 688 b 707 704 714 698 711 701 b 691 708 701 707 696 708 b 660 691 680 708 670 701 l 552 585 b 478 634 530 606 507 624 b 361 684 438 648 397 661 b 301 703 341 697 320 703 b 226 677 275 703 251 693 b 27 449 140 618 72 543 b 0 324 9 410 -4 370 b 88 128 -1 243 30 177 b -30 -7 43 86 0 46 b -46 -33 -35 -16 -46 -24 b -42 -42 -46 -36 -45 -39 b -29 -48 -37 -46 -33 -48 z m 141 179 b 121 251 128 200 121 225 b 128 297 121 265 124 281 b 351 575 163 420 248 505 b 377 582 359 579 369 580 b 501 536 422 586 468 567 b 141 179 382 416 261 298 z m 281 105 b 179 137 240 105 206 117 b 210 168 189 147 200 157 l 537 487 b 547 455 541 477 544 467 b 556 370 552 426 556 397 b 429 154 556 274 503 207 b 281 105 384 122 336 105 z',\r\n        },\r\n        csymAugmented: {\r\n            x_min: 0,\r\n            x_max: 530,\r\n            y_min: 0,\r\n            y_max: 539,\r\n            ha: 539,\r\n            o: 'm 380 0 b 393 14 384 4 390 9 b 397 46 397 24 397 36 l 397 333 b 736 327 511 331 624 330 b 763 343 755 327 763 333 b 755 361 763 348 760 354 b 635 431 726 402 688 431 l 390 431 l 390 485 b 386 606 392 526 386 566 b 392 664 386 625 387 645 b 395 690 393 672 395 681 b 376 753 395 711 389 734 b 357 776 372 762 369 776 b 350 775 354 776 353 776 b 327 740 337 769 327 759 b 327 621 328 700 327 661 b 330 438 328 559 328 498 l 29 438 b 4 431 20 438 7 442 b 0 413 3 425 0 419 b 7 399 0 408 1 403 b 131 338 45 369 85 340 b 331 334 199 336 265 334 b 333 163 333 276 333 220 b 366 13 333 109 348 63 b 380 0 367 7 374 4 z',\r\n        },\r\n        csymMajorSeventh: {\r\n            x_min: 0,\r\n            x_max: 593.1050509327923,\r\n            y_min: 0,\r\n            y_max: 569,\r\n            ha: 569,\r\n            o: 'm 124 1 l 497 27 b 819 50 605 35 711 43 b 854 98 847 52 855 63 b 812 200 845 128 835 166 b 564 585 730 328 648 456 b 435 786 521 652 480 720 b 397 819 419 809 408 819 b 369 792 387 819 379 811 b 7 173 248 585 128 379 b 0 150 3 166 0 158 b 7 128 0 143 3 135 b 89 10 30 86 65 50 b 109 0 95 1 102 0 z m 163 147 b 153 153 158 147 156 148 b 164 179 147 163 158 170 b 426 644 251 334 338 488 b 442 660 432 655 436 660 b 458 645 446 660 452 655 b 727 220 547 503 636 361 b 736 202 732 213 736 206 b 714 190 736 196 730 192 b 179 148 537 177 359 163 b 163 147 174 150 168 147 z',\r\n        },\r\n        csymMinor: {\r\n            x_min: 0,\r\n            x_max: 481.64484584675915,\r\n            y_min: 193,\r\n            y_max: 265.20435472429375,\r\n            ha: 72.20435472429375,\r\n            o: 'm 168 278 b 197 279 177 278 187 278 b 431 292 275 287 353 288 l 431 291 b 661 302 508 295 585 300 b 693 311 672 304 688 300 b 674 346 697 324 685 338 b 564 382 641 366 606 384 l 27 360 b 0 347 17 360 1 366 b 19 314 0 333 3 321 b 168 278 66 291 115 278 z',\r\n        },\r\n        csymParensLeftTall: {\r\n            x_min: 0,\r\n            x_max: 185,\r\n            y_min: 0,\r\n            y_max: 1034,\r\n            ha: 1034,\r\n            o: 'm 215 0 b 226 17 223 1 223 10 b 229 37 229 24 229 32 b 220 81 229 52 225 66 b 167 203 206 124 181 160 b 86 616 124 338 89 474 b 82 765 85 665 82 716 b 91 886 82 805 84 845 b 245 1319 120 1038 171 1184 b 266 1397 259 1346 266 1371 b 259 1443 266 1411 264 1427 b 226 1489 253 1463 248 1489 b 193 1454 212 1489 203 1467 b 114 1292 158 1404 140 1346 b 0 806 40 1138 0 978 b 3 721 0 779 0 750 b 1 677 1 707 1 693 b 36 418 1 593 16 504 b 144 96 62 307 95 199 b 196 12 158 66 179 39 b 212 0 200 7 204 0 z',\r\n        },\r\n        csymParensRightTall: {\r\n            x_min: -40,\r\n            x_max: 188.5411603861406,\r\n            y_min: 0.20204102886728756,\r\n            y_max: 1058,\r\n            ha: 1057.7979589711326,\r\n            o: 'm 30 1 b 63 14 42 -3 55 6 b 122 99 86 40 108 68 b 189 258 145 153 166 204 b 271 667 239 379 268 503 b 246 852 275 708 261 780 b 10 1495 197 1077 128 1295 b -14 1524 4 1505 1 1524 b -16 1522 -14 1524 -16 1524 b -46 1489 -33 1521 -43 1503 b -58 1417 -53 1464 -58 1440 b -36 1335 -58 1390 -52 1364 b 68 1138 0 1270 35 1204 b 163 883 108 1056 137 969 b 206 668 184 814 200 742 b 207 631 207 655 207 642 b 166 426 207 560 192 492 b 46 143 130 330 111 228 b 19 29 19 109 17 69 b 30 1 20 19 24 3 z',\r\n        },\r\n        csymBracketLeftTall: {\r\n            x_min: 0,\r\n            x_max: 328,\r\n            y_min: 2,\r\n            y_max: 807,\r\n            ha: 805,\r\n            o: 'm 68 3 b 76 4 71 3 73 3 b 186 13 112 12 150 13 b 240 13 204 13 222 13 l 287 13 b 379 17 317 13 348 13 b 472 121 435 24 472 69 b 467 156 472 132 469 144 b 446 174 462 168 456 174 l 439 174 b 327 166 402 167 364 166 b 265 167 307 166 285 167 l 209 167 b 187 475 199 269 189 372 b 166 985 186 645 187 815 l 377 1002 b 415 1001 389 1002 402 1001 b 456 1027 432 1001 448 1005 b 472 1096 467 1048 472 1073 b 464 1146 472 1113 469 1130 b 439 1162 459 1161 452 1162 b 40 1129 305 1151 173 1139 b 1 1093 17 1128 1 1120 b 0 1009 0 1064 0 1037 b 13 975 0 991 3 981 b 30 670 23 873 30 772 b 29 608 30 649 29 628 l 29 563 b 56 88 29 405 49 246 b 53 22 55 66 55 43 b 68 3 53 12 56 3 z',\r\n        },\r\n        csymBracketRightTall: {\r\n            x_min: 0.8519422934604696,\r\n            x_max: 306,\r\n            y_min: -0.17180889215212544,\r\n            y_max: 829.1037519824849,\r\n            ha: 829.2755608746371,\r\n            o: 'm 117 0 b 372 29 203 -3 287 20 l 373 29 b 406 32 383 30 395 30 b 436 60 428 33 432 43 b 441 109 439 76 441 92 b 433 200 441 140 436 170 b 409 696 422 366 409 530 b 416 887 409 763 416 831 b 415 920 416 899 415 910 l 415 1106 b 412 1135 415 1116 415 1126 l 412 1145 b 373 1189 413 1171 408 1192 b 321 1189 356 1189 338 1189 l 215 1189 l 215 1194 l 56 1194 b 6 1153 27 1195 10 1187 b 1 1064 3 1123 4 1093 b 22 1043 0 1050 6 1043 b 84 1044 42 1044 63 1044 b 264 1038 144 1044 203 1040 b 265 958 264 1011 265 985 b 262 845 265 920 264 883 b 259 710 259 801 259 755 b 279 243 259 554 271 399 b 285 170 281 219 284 194 b 95 151 222 161 158 156 b 29 81 27 147 27 147 l 29 73 b 105 0 33 0 33 0 z',\r\n        },\r\n        csymParensLeftVeryTall: {\r\n            x_min: 0,\r\n            x_max: 116,\r\n            y_min: 0,\r\n            y_max: 934.1531437146923,\r\n            ha: 934.1531437146923,\r\n            o: 'm 128 0 b 147 17 137 0 144 9 b 167 102 160 45 167 73 b 158 154 167 120 164 137 b 117 307 141 204 130 256 b 63 698 84 435 71 567 b 62 788 62 729 62 757 b 69 916 62 829 63 873 b 109 1172 81 1001 94 1087 b 132 1320 118 1221 137 1269 b 124 1345 131 1329 134 1342 b 96 1332 114 1346 102 1341 b 71 1269 82 1313 75 1292 b 39 1104 59 1214 48 1159 b 0 742 19 988 0 871 b 10 559 3 688 6 624 b 58 226 16 446 33 336 b 112 20 73 157 94 89 b 128 0 115 13 118 0 z',\r\n        },\r\n        csymParensRightVeryTall: {\r\n            x_min: -20,\r\n            x_max: 111.4332498248095,\r\n            y_min: -0.07657185734616112,\r\n            y_max: 1009,\r\n            ha: 1009.0765718573462,\r\n            o: 'm -3 0 b 20 22 9 -1 14 12 b 36 56 26 33 32 45 b 99 274 58 128 84 199 b 160 788 135 439 163 605 b 122 1181 164 912 145 1047 b 50 1431 108 1267 86 1351 b 36 1453 48 1439 46 1453 l 35 1453 l 30 1453 b 7 1423 17 1449 7 1440 b 27 1287 9 1377 10 1331 b 96 963 71 1184 85 1074 b 105 818 102 914 105 867 b 91 624 105 753 99 688 b -4 213 72 484 48 344 b -29 101 -19 174 -29 138 b -16 27 -29 76 -24 52 b -3 0 -13 17 -14 3 z',\r\n        },\r\n        csymDiagonalArrangementSlash: {\r\n            x_min: -0.19862981551275186,\r\n            x_max: 990,\r\n            y_min: -26.946823529189132,\r\n            y_max: 1027.5514326488437,\r\n            ha: 1054.4982561780328,\r\n            o: 'm 14 -37 b 58 -9 35 -45 46 -22 b 392 333 170 105 279 217 l 765 711 b 1372 1329 968 916 1168 1125 b 1424 1439 1403 1359 1417 1397 b 1426 1457 1424 1444 1426 1450 b 1416 1477 1426 1466 1423 1475 b 1374 1462 1400 1485 1385 1473 b 1181 1269 1309 1397 1246 1331 b 736 831 1031 1122 884 979 b 356 452 609 704 485 576 b 32 132 246 347 143 236 b 0 50 7 109 1 84 b 6 9 -1 37 3 23 b 14 -37 10 -9 0 -32 z',\r\n        },\r\n        accidentalNarrowReversedFlat: {\r\n            x_min: 0,\r\n            x_max: 208,\r\n            y_min: -231,\r\n            y_max: 449,\r\n            ha: 680,\r\n            o: 'm 272 -333 b 284 -320 278 -333 281 -328 b 300 -174 297 -272 300 -222 b 275 190 298 -52 279 68 b 268 445 272 275 268 360 l 268 490 b 264 612 269 530 265 572 b 236 647 264 632 252 645 l 235 647 b 217 618 220 647 220 628 b 207 526 210 588 207 556 b 210 432 207 494 210 464 b 216 268 213 377 215 323 l 216 230 l 215 232 b 154 256 194 240 174 251 b 111 264 138 261 124 264 b 3 153 50 264 10 223 b 0 94 0 132 0 114 b 194 -276 0 -63 68 -186 b 255 -323 215 -291 236 -307 b 272 -333 262 -330 268 -333 z m 233 -138 b 71 30 168 -92 105 -45 b 63 59 65 42 63 50 b 96 95 62 75 73 86 b 130 102 108 99 120 102 b 215 76 160 102 187 88 l 220 73 b 225 -22 220 42 222 10 b 233 -138 229 -62 230 -101 z',\r\n        },\r\n        accidentalNarrowReversedFlatAndFlat: {\r\n            x_min: 0,\r\n            x_max: 335,\r\n            y_min: -231,\r\n            y_max: 449,\r\n            ha: 680,\r\n            o: 'm 151 490 b 148 612 151 530 150 572 b 132 647 148 632 141 645 b 122 618 124 647 124 628 b 117 526 118 588 117 556 b 118 432 117 494 118 464 b 121 268 120 377 121 323 l 121 232 b 86 256 109 240 98 251 b 62 264 78 261 69 264 b 1 153 29 264 6 223 b 0 94 0 132 0 114 b 109 -276 0 -63 37 -186 b 144 -323 121 -291 132 -307 b 153 -333 147 -330 151 -333 b 160 -320 157 -333 158 -328 b 168 -174 167 -272 168 -222 b 154 190 168 -52 157 68 b 151 445 153 275 151 360 z m 480 153 b 372 264 472 223 432 264 b 328 256 359 264 344 261 b 268 232 308 251 288 240 l 266 230 l 266 268 b 272 432 266 323 269 377 b 275 526 272 464 275 494 b 265 618 275 556 272 588 b 248 647 262 628 262 647 l 246 647 b 219 612 230 645 219 632 b 215 490 217 572 213 530 l 215 445 b 207 190 215 360 210 275 b 183 -174 203 68 183 -52 b 199 -320 183 -222 186 -272 b 210 -333 202 -328 204 -333 b 228 -323 215 -333 220 -330 b 288 -276 246 -307 268 -291 b 482 94 415 -186 482 -63 b 480 153 482 114 482 132 z m 40 30 b 36 59 36 42 36 50 b 55 95 35 75 42 86 b 73 102 60 99 68 102 b 121 76 89 102 105 88 l 124 73 b 127 -22 124 42 125 10 l 131 -138 b 40 30 95 -92 60 -43 z m 419 59 b 412 30 419 50 418 42 b 249 -138 374 -43 314 -92 b 258 -22 252 -101 253 -62 b 262 73 261 10 262 42 l 268 76 b 353 102 295 88 323 102 b 386 95 363 102 374 99 b 419 59 409 86 420 75 z',\r\n        },\r\n        accidentalWilsonPlus: {\r\n            x_min: 0,\r\n            x_max: 298,\r\n            y_min: -218,\r\n            y_max: 218,\r\n            ha: 436,\r\n            o: 'm 232 -314 b 236 -301 236 -310 236 -305 l 236 -295 b 243 -52 239 -213 242 -132 l 369 62 b 429 200 413 101 425 147 b 416 243 429 216 428 236 b 383 225 406 251 393 232 l 377 220 b 246 98 336 177 291 138 b 249 242 248 145 246 193 b 225 304 251 265 242 287 b 209 314 220 308 215 314 b 204 312 207 314 206 312 b 196 292 196 310 196 300 b 193 184 194 256 194 220 b 187 48 192 140 190 94 b 46 -72 141 7 94 -32 b 0 -163 13 -98 0 -127 b 1 -187 0 -170 0 -179 b 10 -235 4 -203 6 -219 b 20 -255 12 -242 14 -251 b 36 -245 26 -259 30 -249 b 181 -109 85 -200 132 -154 b 176 -258 180 -158 176 -209 b 232 -314 176 -298 186 -307 z',\r\n        },\r\n        accidentalWilsonMinus: {\r\n            x_min: 0,\r\n            x_max: 284.2093390143919,\r\n            y_min: -163,\r\n            y_max: 163,\r\n            ha: 326,\r\n            o: 'm 386 -232 b 409 -163 415 -222 408 -180 b 382 -69 410 -120 408 -89 b 32 228 264 30 141 118 b 17 235 26 233 22 235 b 3 219 9 235 3 228 b 0 157 3 199 0 179 b 29 69 0 125 6 95 b 323 -194 115 -29 222 -111 b 374 -235 338 -206 353 -235 b 386 -232 377 -235 382 -233 z',\r\n        },\r\n    },\r\n    fontFamily: 'Petaluma',\r\n    resolution: 1000,\r\n    generatedOn: '2022-05-17T21:06:04.502Z',\r\n};\r\n","/**\r\n * The Petaluma font was created by Steinberg Media.\r\n * https://github.com/steinbergmedia/petaluma\r\n */\r\nexport const PetalumaMetrics = {\r\n    name: 'Petaluma',\r\n    smufl: true,\r\n    stave: {\r\n        padding: 15,\r\n        endPaddingMax: 15,\r\n        endPaddingMin: 7,\r\n        unalignedNotePadding: 12,\r\n    },\r\n    accidental: {\r\n        noteheadAccidentalPadding: 1,\r\n        leftPadding: 2,\r\n        accidentalSpacing: 3,\r\n    },\r\n    clef: {\r\n        default: {\r\n            point: 32,\r\n            width: 26,\r\n        },\r\n        small: {\r\n            point: 26,\r\n            width: 20,\r\n        },\r\n        annotations: {\r\n            '8va': {\r\n                smuflCode: 'timeSig8',\r\n                default: {\r\n                    point: 18,\r\n                    treble: {\r\n                        line: -1.4,\r\n                        shiftX: 12,\r\n                    },\r\n                },\r\n                small: {\r\n                    point: 16,\r\n                    treble: {\r\n                        line: -0.2,\r\n                        shiftX: 8,\r\n                    },\r\n                },\r\n            },\r\n            '8vb': {\r\n                smuflCode: 'timeSig8',\r\n                default: {\r\n                    point: 18,\r\n                    treble: {\r\n                        line: 6,\r\n                        shiftX: 10,\r\n                    },\r\n                    bass: {\r\n                        line: 3.5,\r\n                        shiftX: 1,\r\n                    },\r\n                },\r\n                small: {\r\n                    point: 16,\r\n                    treble: {\r\n                        line: 5.3,\r\n                        shiftX: 6,\r\n                    },\r\n                    bass: {\r\n                        line: 3.1,\r\n                        shiftX: 0.5,\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        // These may no longer be necessary\r\n        lineCount: {\r\n            '8': { point: 55, shiftY: 14 },\r\n            '7': { point: 47, shiftY: 8 },\r\n            '6': { point: 32, shiftY: 1 },\r\n            '5': { point: 30, shiftY: -6 },\r\n            '4': { point: 23, shiftY: -12 },\r\n        },\r\n    },\r\n    parenthesis: {\r\n        default: {\r\n            point: 39,\r\n            width: 7,\r\n        },\r\n        gracenote: {\r\n            point: (39 * 3) / 5,\r\n            width: 3,\r\n        },\r\n    },\r\n    pedalMarking: {\r\n        up: {\r\n            point: 40,\r\n        },\r\n        down: {\r\n            point: 34,\r\n        },\r\n    },\r\n    // These are for numeric digits, such as in time signatures\r\n    digits: {\r\n        // used by timesig\r\n        shiftLine: -1,\r\n        point: 22,\r\n        // used by tuplets\r\n        tupletPoint: 16,\r\n        shiftY: -2,\r\n    },\r\n    articulation: {\r\n        articStaccatissimoAbove: {\r\n            padding: 2,\r\n        },\r\n        articStaccatissimoBelow: {\r\n            padding: 2,\r\n        },\r\n    },\r\n    tremolo: {\r\n        default: {\r\n            point: 25,\r\n            spacing: 5,\r\n            offsetYStemUp: -5,\r\n            offsetYStemDown: 5,\r\n            offsetXStemUp: 13,\r\n            offsetXStemDown: 1,\r\n        },\r\n        grace: {\r\n            point: 18,\r\n            spacing: 4,\r\n            offsetYStemUp: -5,\r\n            offsetYStemDown: 5,\r\n            offsetXStemUp: 8,\r\n            offsetXStemDown: 1,\r\n        },\r\n    },\r\n    staveRepetition: {\r\n        symbolText: {\r\n            offsetX: 12,\r\n            offsetY: 25,\r\n            spacing: 5,\r\n        },\r\n        coda: {\r\n            offsetY: 25,\r\n        },\r\n        segno: {\r\n            offsetY: 10,\r\n        },\r\n    },\r\n    noteHead: {\r\n        displaced: {\r\n            shiftX: -2,\r\n        },\r\n    },\r\n    stem: {\r\n        heightAdjustmentForFlag: -3,\r\n        // These are stem (Y) offsets to the note heads. To shift the\r\n        // noteheads (x-position) themselves, see glyphs.notehead.custom.\r\n        noteHead: {\r\n            noteheadTriangleUpHalf: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadTriangleUpBlack: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadTriangleUpWhole: {\r\n                offsetYBaseStemUp: 5,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXHalf: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXBlack: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadXWhole: {\r\n                offsetYBaseStemUp: -4,\r\n                offsetYBaseStemDown: 4,\r\n            },\r\n            noteheadHalf: {\r\n                offsetYBaseStemDown: 1.8,\r\n                offsetYBaseStemUp: -1.8,\r\n            },\r\n            noteheadBlack: {\r\n                offsetYBaseStemDown: 2,\r\n                offsetYBaseStemUp: -2,\r\n            },\r\n            noteheadSquareWhite: {\r\n                offsetYBaseStemDown: -5,\r\n                offsetYBaseStemUp: 5,\r\n            },\r\n        },\r\n    },\r\n    // Values under here are used by the Glyph class to reposition and rescale\r\n    // glyphs based on their category. This should be the first stop for\r\n    // custom font glyph repositioning.\r\n    //\r\n    // The glyph loader first looks up a specific set of settings based on the\r\n    // glyph code, and if not found, uses the defaults from the category. See\r\n    // glyphs.textNote for an example of this.\r\n    //\r\n    // Details in Glyph.lookupFontMetrics.\r\n    glyphs: {\r\n        coda: {\r\n            point: 20,\r\n            shiftX: -7,\r\n            shiftY: 8,\r\n        },\r\n        segno: {\r\n            shiftX: -7,\r\n        },\r\n        flag: {\r\n            shiftX: -0.77,\r\n            flag16thUp: {\r\n                shiftX: -0.75,\r\n            },\r\n            flag32ndUp: {\r\n                shiftX: -0.85,\r\n            },\r\n            flag64thUp: {\r\n                shiftX: -1.55,\r\n            },\r\n            flag128thUp: {\r\n                shiftX: -1.3,\r\n            },\r\n            flag16thDown: {\r\n                shiftX: -0.75,\r\n            },\r\n            flag32ndDown: {\r\n                shiftX: -0.76,\r\n            },\r\n            flag64thDown: {\r\n                shiftX: -1.5,\r\n            },\r\n            flag128thDown: {\r\n                shiftX: -1.2,\r\n            },\r\n            staveTempo: {\r\n                shiftX: -1,\r\n            },\r\n        },\r\n        clef: {\r\n            gClef: {\r\n                default: { scale: 1.1, shiftY: 1 },\r\n                small: { shiftY: 1.5 },\r\n            },\r\n            fClef: {\r\n                default: { shiftY: -0.5 },\r\n            },\r\n        },\r\n        ornament: {\r\n            ornamentTurn: {\r\n                scale: 1.2,\r\n            },\r\n            ornamentTurnSlash: {\r\n                scale: 1.2,\r\n            },\r\n        },\r\n        stringNumber: {\r\n            verticalPadding: 8,\r\n            stemPadding: 2,\r\n            leftPadding: 5,\r\n            rightPadding: 6,\r\n        },\r\n        stroke: {\r\n            arrowheadBlackDown: {\r\n                straight: {\r\n                    shiftX: -4.5,\r\n                },\r\n                wiggly: {\r\n                    shiftX: -1,\r\n                    shiftY: 1,\r\n                },\r\n            },\r\n            arrowheadBlackUp: {\r\n                straight: {\r\n                    shiftX: -0.85,\r\n                },\r\n                wiggly: {\r\n                    shiftX: -1,\r\n                    shiftY: 1,\r\n                },\r\n            },\r\n        },\r\n        textNote: {\r\n            point: 34,\r\n            breathMarkTick: {\r\n                point: 36,\r\n                shiftY: 9,\r\n            },\r\n            breathMarkComma: {\r\n                point: 36,\r\n            },\r\n            segno: {\r\n                point: 30,\r\n                shiftX: -7,\r\n                shiftY: 8,\r\n            },\r\n            coda: {\r\n                point: 20,\r\n                shiftX: -7,\r\n                shiftY: 8,\r\n            },\r\n            ornamentTrill: {\r\n                shiftX: -10,\r\n                shiftY: 8,\r\n            },\r\n            ornamentMordent: {\r\n                shiftX: -8,\r\n            },\r\n            ornamentShortTrill: {\r\n                shiftX: -8,\r\n            },\r\n        },\r\n        noteHead: {\r\n            minPadding: 2,\r\n            standard: {\r\n                noteheadBlackStemUp: {\r\n                    shiftX: 0.5,\r\n                },\r\n                noteheadHalfStemUp: {\r\n                    shiftX: 0.725,\r\n                },\r\n                noteheadWholeStemUp: {\r\n                    shiftX: 1,\r\n                },\r\n            },\r\n            custom: {\r\n                noteheadCircleXStemUp: {\r\n                    shiftX: -1,\r\n                },\r\n                noteheadCircleXStemDown: {\r\n                    shiftX: 0.25,\r\n                },\r\n                noteheadDiamondHalfStemUp: {\r\n                    shiftX: 1.5,\r\n                },\r\n                noteheadDiamondBlackStemUp: {\r\n                    shiftX: 1.5,\r\n                },\r\n                noteheadDiamondWholeStemUp: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadXBlackStemUp: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadXHalfStemUp: {\r\n                    shiftX: -3,\r\n                },\r\n                noteheadXHalfStemDown: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadXWholeStemUp: {\r\n                    shiftX: -7,\r\n                },\r\n                noteheadXWholeStemDown: {\r\n                    shiftX: 1,\r\n                },\r\n                noteheadSquareWhiteStemDown: {\r\n                    shiftX: 0.25,\r\n                },\r\n                noteheadSquareWhiteStemUp: {\r\n                    shiftX: -0.75,\r\n                },\r\n                noteheadSquareBlackStemUp: {\r\n                    shiftX: -0.75,\r\n                },\r\n                noteheadTriangleUpWholeStemUp: {\r\n                    shiftX: -0.75,\r\n                },\r\n            },\r\n        },\r\n        chordSymbol: {\r\n            global: {\r\n                superscriptOffset: -400,\r\n                subscriptOffset: 300,\r\n                kerningOffset: -150,\r\n                lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\r\n                upperKerningText: ['L'],\r\n                spacing: 20,\r\n                superSubRatio: 0.73,\r\n            },\r\n            csymDiminished: {\r\n                scale: 0.8,\r\n                leftSideBearing: -95,\r\n                advanceWidth: 506,\r\n                yOffset: 0,\r\n            },\r\n            csymHalfDiminished: {\r\n                scale: 0.8,\r\n                leftSideBearing: -32,\r\n                advanceWidth: 506,\r\n                yOffset: 0,\r\n            },\r\n            csymAugmented: {\r\n                scale: 1,\r\n                leftSideBearing: -25,\r\n                advanceWidth: 530,\r\n                yOffset: 0,\r\n            },\r\n            csymParensLeftTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 155,\r\n                yOffset: 150,\r\n            },\r\n            csymParensRightTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 40,\r\n                advanceWidth: 189,\r\n                yOffset: 150,\r\n            },\r\n            csymBracketLeftTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 328,\r\n                yOffset: 0,\r\n            },\r\n            csymBracketRightTall: {\r\n                scale: 0.8,\r\n                leftSideBearing: 1,\r\n                advanceWidth: 600,\r\n                yOffset: 0,\r\n            },\r\n            csymParensLeftVeryTall: {\r\n                scale: 0.95,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 210,\r\n                yOffset: 250,\r\n            },\r\n            csymParensRightVeryTall: {\r\n                scale: 0.9,\r\n                leftSideBearing: -100,\r\n                advanceWidth: 111,\r\n                yOffset: 250,\r\n            },\r\n            csymDiagonalArrangementSlash: {\r\n                scale: 0.6,\r\n                leftSideBearing: -1,\r\n                advanceWidth: 990,\r\n                yOffset: 0,\r\n            },\r\n            csymMinor: {\r\n                scale: 0.7,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 482,\r\n                yOffset: 0,\r\n            },\r\n            csymMajorSeventh: {\r\n                scale: 0.8,\r\n                leftSideBearing: 100,\r\n                yOffset: 0,\r\n                advanceWidth: 600,\r\n            },\r\n            accidentalSharp: {\r\n                scale: 0.7,\r\n                leftSideBearing: 0,\r\n                advanceWidth: 425,\r\n                yOffset: -422,\r\n            },\r\n            accidentalFlat: {\r\n                scale: 0.8,\r\n                leftSideBearing: -10,\r\n                advanceWidth: 228,\r\n                yOffset: -284,\r\n            },\r\n        },\r\n        jazzOrnaments: {\r\n            brassScoop: {\r\n                scale: 1.0,\r\n                xOffset: -12,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 15,\r\n            },\r\n            brassDoitMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 19,\r\n            },\r\n            brassFallLipShort: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 0,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 19,\r\n            },\r\n            brassLiftMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 5,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 15,\r\n            },\r\n            brassFallRoughMedium: {\r\n                scale: 1.0,\r\n                xOffset: 16,\r\n                yOffset: 26,\r\n                stemUpYOffset: 0,\r\n                reportedWidth: 5,\r\n            },\r\n            brassBend: {\r\n                scale: 1.0,\r\n                xOffset: 3,\r\n                yOffset: -8,\r\n                stemUpYOffset: 28,\r\n                reportedWidth: 5,\r\n            },\r\n            brassMuteClosed: {\r\n                scale: 1.0,\r\n                xOffset: 3,\r\n                yOffset: -8,\r\n                stemUpYOffset: 26,\r\n                reportedWidth: 5,\r\n            },\r\n            brassMuteOpen: {\r\n                scale: 1.0,\r\n                xOffset: 4,\r\n                yOffset: -8,\r\n                stemUpYOffset: 27,\r\n                reportedWidth: 5,\r\n            },\r\n            brassFlip: {\r\n                scale: 1.0,\r\n                xOffset: 10,\r\n                yOffset: -4,\r\n                stemUpYOffset: 7,\r\n                reportedWidth: 5,\r\n            },\r\n            brassJazzTurn: {\r\n                scale: 1.0,\r\n                xOffset: 6,\r\n                yOffset: -4,\r\n                stemUpYOffset: 5,\r\n                reportedWidth: 30,\r\n            },\r\n            brassSmear: {\r\n                scale: 1.0,\r\n                xOffset: 10,\r\n                yOffset: -4,\r\n                stemUpYOffset: 5,\r\n                reportedWidth: 5,\r\n            },\r\n        },\r\n        tuplet: {\r\n            noteHeadOffset: 20,\r\n            stemOffset: 10,\r\n            bottomLine: 4,\r\n            topModifierOffset: 20,\r\n        },\r\n    },\r\n};\r\n","export const PetalumaScriptFont = {\r\n    spacing: 50,\r\n    glyphs: {\r\n        ' ': {\r\n            x_min: 0,\r\n            x_max: 250,\r\n            y_min: 0,\r\n            y_max: 500,\r\n            ha: 500,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 250,\r\n        },\r\n        '0': {\r\n            x_min: 33,\r\n            x_max: 534,\r\n            y_min: -13,\r\n            y_max: 751,\r\n            ha: 764,\r\n            leftSideBearing: 33,\r\n            advanceWidth: 570,\r\n        },\r\n        '1': {\r\n            x_min: 48,\r\n            x_max: 235,\r\n            y_min: -17,\r\n            y_max: 734,\r\n            ha: 751,\r\n            leftSideBearing: 48,\r\n            advanceWidth: 286,\r\n        },\r\n        '2': {\r\n            x_min: 56,\r\n            x_max: 571,\r\n            y_min: -19,\r\n            y_max: 741,\r\n            ha: 760,\r\n            leftSideBearing: 56,\r\n            advanceWidth: 626,\r\n        },\r\n        '3': {\r\n            x_min: 50,\r\n            x_max: 528,\r\n            y_min: -7,\r\n            y_max: 731,\r\n            ha: 738,\r\n            leftSideBearing: 50,\r\n            advanceWidth: 589,\r\n        },\r\n        '4': {\r\n            x_min: 38,\r\n            x_max: 564,\r\n            y_min: -13,\r\n            y_max: 743,\r\n            ha: 756,\r\n            leftSideBearing: 38,\r\n            advanceWidth: 614,\r\n        },\r\n        '5': {\r\n            x_min: 42,\r\n            x_max: 601,\r\n            y_min: -34,\r\n            y_max: 743,\r\n            ha: 777,\r\n            leftSideBearing: 42,\r\n            advanceWidth: 648,\r\n        },\r\n        '6': {\r\n            x_min: 47,\r\n            x_max: 606,\r\n            y_min: -16,\r\n            y_max: 743,\r\n            ha: 759,\r\n            leftSideBearing: 47,\r\n            advanceWidth: 667,\r\n        },\r\n        '7': {\r\n            x_min: 47,\r\n            x_max: 567,\r\n            y_min: 5,\r\n            y_max: 739,\r\n            ha: 734,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 615,\r\n        },\r\n        '8': {\r\n            x_min: 40,\r\n            x_max: 541,\r\n            y_min: -15,\r\n            y_max: 752,\r\n            ha: 767,\r\n            leftSideBearing: 40,\r\n            advanceWidth: 585,\r\n        },\r\n        '9': {\r\n            x_min: 40,\r\n            x_max: 537,\r\n            y_min: -52,\r\n            y_max: 736,\r\n            ha: 788,\r\n            leftSideBearing: 40,\r\n            advanceWidth: 592,\r\n        },\r\n        '!': {\r\n            x_min: 49,\r\n            x_max: 180,\r\n            y_min: -7,\r\n            y_max: 761,\r\n            ha: 768,\r\n            leftSideBearing: 49,\r\n            advanceWidth: 230,\r\n        },\r\n        '\"': {\r\n            x_min: 39,\r\n            x_max: 304,\r\n            y_min: 596,\r\n            y_max: 804,\r\n            ha: 208,\r\n            leftSideBearing: 39,\r\n            advanceWidth: 353,\r\n        },\r\n        '#': {\r\n            x_min: 33,\r\n            x_max: 599,\r\n            y_min: -8,\r\n            y_max: 765,\r\n            ha: 773,\r\n            leftSideBearing: 33,\r\n            advanceWidth: 648,\r\n        },\r\n        $: {\r\n            x_min: 53,\r\n            x_max: 495,\r\n            y_min: -111,\r\n            y_max: 823,\r\n            ha: 934,\r\n            leftSideBearing: 53,\r\n            advanceWidth: 560,\r\n        },\r\n        '%': {\r\n            x_min: 35,\r\n            x_max: 656,\r\n            y_min: -128,\r\n            y_max: 808,\r\n            ha: 936,\r\n            leftSideBearing: 35,\r\n            advanceWidth: 711,\r\n        },\r\n        '&': {\r\n            x_min: 53,\r\n            x_max: 441,\r\n            y_min: -3,\r\n            y_max: 753,\r\n            ha: 756,\r\n            leftSideBearing: 53,\r\n            advanceWidth: 500,\r\n        },\r\n        \"'\": {\r\n            x_min: 43,\r\n            x_max: 161,\r\n            y_min: 590,\r\n            y_max: 811,\r\n            ha: 221,\r\n            leftSideBearing: 43,\r\n            advanceWidth: 217,\r\n        },\r\n        '(': {\r\n            x_min: 41,\r\n            x_max: 311,\r\n            y_min: -36,\r\n            y_max: 845,\r\n            ha: 881,\r\n            leftSideBearing: 41,\r\n            advanceWidth: 308,\r\n        },\r\n        ')': {\r\n            x_min: -8,\r\n            x_max: 257,\r\n            y_min: -21,\r\n            y_max: 852,\r\n            ha: 873,\r\n            leftSideBearing: -8,\r\n            advanceWidth: 280,\r\n        },\r\n        '*': {\r\n            x_min: 59,\r\n            x_max: 539,\r\n            y_min: 175,\r\n            y_max: 589,\r\n            ha: 414,\r\n            leftSideBearing: 59,\r\n            advanceWidth: 601,\r\n        },\r\n        '+': {\r\n            x_min: 33,\r\n            x_max: 361,\r\n            y_min: 180,\r\n            y_max: 587,\r\n            ha: 407,\r\n            leftSideBearing: 33,\r\n            advanceWidth: 400,\r\n        },\r\n        ',': {\r\n            x_min: 15,\r\n            x_max: 176,\r\n            y_min: -129,\r\n            y_max: 92,\r\n            ha: 221,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 205,\r\n        },\r\n        '-': {\r\n            x_min: 40,\r\n            x_max: 380,\r\n            y_min: 317,\r\n            y_max: 452,\r\n            ha: 135,\r\n            leftSideBearing: 40,\r\n            advanceWidth: 422,\r\n        },\r\n        '.': {\r\n            x_min: 48,\r\n            x_max: 185,\r\n            y_min: -56,\r\n            y_max: 84,\r\n            ha: 140,\r\n            leftSideBearing: 48,\r\n            advanceWidth: 227,\r\n        },\r\n        '/': {\r\n            x_min: -58,\r\n            x_max: 654,\r\n            y_min: -122,\r\n            y_max: 844,\r\n            ha: 966,\r\n            leftSideBearing: -58,\r\n            advanceWidth: 626,\r\n        },\r\n        ':': {\r\n            x_min: 65,\r\n            x_max: 225,\r\n            y_min: 97,\r\n            y_max: 536,\r\n            ha: 439,\r\n            leftSideBearing: 65,\r\n            advanceWidth: 302,\r\n        },\r\n        ';': {\r\n            x_min: 13,\r\n            x_max: 295,\r\n            y_min: -139,\r\n            y_max: 536,\r\n            ha: 675,\r\n            leftSideBearing: 13,\r\n            advanceWidth: 334,\r\n        },\r\n        '<': {\r\n            x_min: 28,\r\n            x_max: 438,\r\n            y_min: -1,\r\n            y_max: 607,\r\n            ha: 608,\r\n            leftSideBearing: 28,\r\n            advanceWidth: 475,\r\n        },\r\n        '=': {\r\n            x_min: 40,\r\n            x_max: 383,\r\n            y_min: 199.9598640852289,\r\n            y_max: 541,\r\n            ha: 341.0401359147711,\r\n            leftSideBearing: 40,\r\n            advanceWidth: 422,\r\n        },\r\n        '>': {\r\n            x_min: 35,\r\n            x_max: 421,\r\n            y_min: 28,\r\n            y_max: 632,\r\n            ha: 604,\r\n            leftSideBearing: 35,\r\n            advanceWidth: 466,\r\n        },\r\n        '?': {\r\n            x_min: 45,\r\n            x_max: 548,\r\n            y_min: -17,\r\n            y_max: 767,\r\n            ha: 784,\r\n            leftSideBearing: 45,\r\n            advanceWidth: 592,\r\n        },\r\n        '@': {\r\n            x_min: 51,\r\n            x_max: 730,\r\n            y_min: -78,\r\n            y_max: 753,\r\n            ha: 831,\r\n            leftSideBearing: 51,\r\n            advanceWidth: 781,\r\n        },\r\n        A: {\r\n            x_min: 37,\r\n            x_max: 554,\r\n            y_min: -4,\r\n            y_max: 746,\r\n            ha: 750,\r\n            leftSideBearing: 37,\r\n            advanceWidth: 617,\r\n        },\r\n        B: {\r\n            x_min: 37,\r\n            x_max: 532,\r\n            y_min: 3,\r\n            y_max: 783,\r\n            ha: 780,\r\n            leftSideBearing: 37,\r\n            advanceWidth: 579,\r\n        },\r\n        C: {\r\n            x_min: 37,\r\n            x_max: 583,\r\n            y_min: -3,\r\n            y_max: 775,\r\n            ha: 778,\r\n            leftSideBearing: 37,\r\n            advanceWidth: 623,\r\n        },\r\n        D: {\r\n            x_min: 50,\r\n            x_max: 530,\r\n            y_min: -15,\r\n            y_max: 749,\r\n            ha: 764,\r\n            leftSideBearing: 50,\r\n            advanceWidth: 579,\r\n        },\r\n        E: {\r\n            x_min: 45,\r\n            x_max: 531,\r\n            y_min: -1,\r\n            y_max: 743,\r\n            ha: 744,\r\n            leftSideBearing: 45,\r\n            advanceWidth: 585,\r\n        },\r\n        F: {\r\n            x_min: 45,\r\n            x_max: 459,\r\n            y_min: 23,\r\n            y_max: 727,\r\n            ha: 704,\r\n            leftSideBearing: 45,\r\n            advanceWidth: 510,\r\n        },\r\n        G: {\r\n            x_min: 31,\r\n            x_max: 577,\r\n            y_min: -8,\r\n            y_max: 733,\r\n            ha: 741,\r\n            leftSideBearing: 31,\r\n            advanceWidth: 611,\r\n        },\r\n        H: {\r\n            x_min: 37,\r\n            x_max: 493,\r\n            y_min: -22,\r\n            y_max: 758,\r\n            ha: 780,\r\n            leftSideBearing: 37,\r\n            advanceWidth: 535,\r\n        },\r\n        I: {\r\n            x_min: 47,\r\n            x_max: 501,\r\n            y_min: -3,\r\n            y_max: 731,\r\n            ha: 734,\r\n            leftSideBearing: 47,\r\n            advanceWidth: 541,\r\n        },\r\n        J: {\r\n            x_min: 33,\r\n            x_max: 531,\r\n            y_min: -23,\r\n            y_max: 725,\r\n            ha: 748,\r\n            leftSideBearing: 33,\r\n            advanceWidth: 573,\r\n        },\r\n        K: {\r\n            x_min: 43,\r\n            x_max: 505,\r\n            y_min: -10,\r\n            y_max: 740,\r\n            ha: 750,\r\n            leftSideBearing: 43,\r\n            advanceWidth: 560,\r\n        },\r\n        L: {\r\n            x_min: 49,\r\n            x_max: 457,\r\n            y_min: -2,\r\n            y_max: 746,\r\n            ha: 748,\r\n            leftSideBearing: 49,\r\n            advanceWidth: 510,\r\n        },\r\n        M: {\r\n            x_min: 35,\r\n            x_max: 699,\r\n            y_min: 1,\r\n            y_max: 744,\r\n            ha: 743,\r\n            leftSideBearing: 35,\r\n            advanceWidth: 743,\r\n        },\r\n        N: {\r\n            x_min: 34,\r\n            x_max: 533,\r\n            y_min: -17,\r\n            y_max: 761,\r\n            ha: 778,\r\n            leftSideBearing: 34,\r\n            advanceWidth: 579,\r\n        },\r\n        O: {\r\n            x_min: 41,\r\n            x_max: 608,\r\n            y_min: -5,\r\n            y_max: 735,\r\n            ha: 740,\r\n            leftSideBearing: 41,\r\n            advanceWidth: 667,\r\n        },\r\n        P: {\r\n            x_min: 53,\r\n            x_max: 451,\r\n            y_min: -18,\r\n            y_max: 735,\r\n            ha: 753,\r\n            leftSideBearing: 53,\r\n            advanceWidth: 497,\r\n        },\r\n        Q: {\r\n            x_min: 40,\r\n            x_max: 599,\r\n            y_min: -67,\r\n            y_max: 744,\r\n            ha: 811,\r\n            leftSideBearing: 40,\r\n            advanceWidth: 648,\r\n        },\r\n        R: {\r\n            x_min: 39,\r\n            x_max: 487,\r\n            y_min: 16,\r\n            y_max: 735,\r\n            ha: 719,\r\n            leftSideBearing: 39,\r\n            advanceWidth: 535,\r\n        },\r\n        S: {\r\n            x_min: 35,\r\n            x_max: 552,\r\n            y_min: -47,\r\n            y_max: 708,\r\n            ha: 755,\r\n            leftSideBearing: 35,\r\n            advanceWidth: 604,\r\n        },\r\n        T: {\r\n            x_min: 26,\r\n            x_max: 656,\r\n            y_min: -13,\r\n            y_max: 718,\r\n            ha: 731,\r\n            leftSideBearing: 26,\r\n            advanceWidth: 705,\r\n        },\r\n        U: {\r\n            x_min: 41,\r\n            x_max: 518,\r\n            y_min: -20,\r\n            y_max: 748,\r\n            ha: 768,\r\n            leftSideBearing: 41,\r\n            advanceWidth: 567,\r\n        },\r\n        V: {\r\n            x_min: 47,\r\n            x_max: 509,\r\n            y_min: -26,\r\n            y_max: 744,\r\n            ha: 770,\r\n            leftSideBearing: 47,\r\n            advanceWidth: 567,\r\n        },\r\n        W: {\r\n            x_min: 44,\r\n            x_max: 789,\r\n            y_min: -35,\r\n            y_max: 720,\r\n            ha: 755,\r\n            leftSideBearing: 44,\r\n            advanceWidth: 833,\r\n        },\r\n        X: {\r\n            x_min: 63,\r\n            x_max: 635,\r\n            y_min: -10,\r\n            y_max: 745,\r\n            ha: 755,\r\n            leftSideBearing: 63,\r\n            advanceWidth: 680,\r\n        },\r\n        Y: {\r\n            x_min: 43,\r\n            x_max: 503,\r\n            y_min: -21,\r\n            y_max: 734,\r\n            ha: 755,\r\n            leftSideBearing: 43,\r\n            advanceWidth: 541,\r\n        },\r\n        Z: {\r\n            x_min: 42,\r\n            x_max: 584,\r\n            y_min: -10,\r\n            y_max: 739,\r\n            ha: 749,\r\n            leftSideBearing: 42,\r\n            advanceWidth: 629,\r\n        },\r\n        '[': {\r\n            x_min: 46,\r\n            x_max: 346,\r\n            y_min: -150,\r\n            y_max: 884,\r\n            ha: 1034,\r\n            leftSideBearing: 46,\r\n            advanceWidth: 291,\r\n        },\r\n        '\\\\': {\r\n            x_min: 20,\r\n            x_max: 616,\r\n            y_min: -100,\r\n            y_max: 797,\r\n            ha: 897,\r\n            leftSideBearing: 20,\r\n            advanceWidth: 645,\r\n        },\r\n        ']': {\r\n            x_min: -76,\r\n            x_max: 226,\r\n            y_min: -150,\r\n            y_max: 881,\r\n            ha: 1031,\r\n            leftSideBearing: -76,\r\n            advanceWidth: 297,\r\n        },\r\n        '^': {\r\n            x_min: 43,\r\n            x_max: 437,\r\n            y_min: 517,\r\n            y_max: 812,\r\n            ha: 295,\r\n            leftSideBearing: 43,\r\n            advanceWidth: 478,\r\n        },\r\n        _: {\r\n            x_min: 29,\r\n            x_max: 563,\r\n            y_min: -110,\r\n            y_max: -1,\r\n            ha: 109,\r\n            leftSideBearing: 29,\r\n            advanceWidth: 598,\r\n        },\r\n        '`': {\r\n            x_min: 54,\r\n            x_max: 321,\r\n            y_min: 540,\r\n            y_max: 747,\r\n            ha: 207,\r\n            leftSideBearing: 54,\r\n            advanceWidth: 368,\r\n        },\r\n        a: {\r\n            x_min: 20,\r\n            x_max: 447,\r\n            y_min: -17,\r\n            y_max: 495,\r\n            ha: 512,\r\n            leftSideBearing: 20,\r\n            advanceWidth: 494,\r\n        },\r\n        b: {\r\n            x_min: 37,\r\n            x_max: 466,\r\n            y_min: -27,\r\n            y_max: 770,\r\n            ha: 797,\r\n            leftSideBearing: 37,\r\n            advanceWidth: 510,\r\n        },\r\n        c: {\r\n            x_min: 35,\r\n            x_max: 456,\r\n            y_min: -9,\r\n            y_max: 507,\r\n            ha: 516,\r\n            leftSideBearing: 35,\r\n            advanceWidth: 460,\r\n        },\r\n        d: {\r\n            x_min: 45,\r\n            x_max: 520,\r\n            y_min: -15,\r\n            y_max: 764,\r\n            ha: 779,\r\n            leftSideBearing: 45,\r\n            advanceWidth: 560,\r\n        },\r\n        e: {\r\n            x_min: 33,\r\n            x_max: 370,\r\n            y_min: -5,\r\n            y_max: 501,\r\n            ha: 506,\r\n            leftSideBearing: 33,\r\n            advanceWidth: 397,\r\n        },\r\n        f: {\r\n            x_min: 35,\r\n            x_max: 411,\r\n            y_min: -13,\r\n            y_max: 695,\r\n            ha: 708,\r\n            leftSideBearing: 35,\r\n            advanceWidth: 453,\r\n        },\r\n        g: {\r\n            x_min: 33,\r\n            x_max: 551,\r\n            y_min: -257,\r\n            y_max: 505,\r\n            ha: 762,\r\n            leftSideBearing: 33,\r\n            advanceWidth: 611,\r\n        },\r\n        h: {\r\n            x_min: 32,\r\n            x_max: 458,\r\n            y_min: -29,\r\n            y_max: 743,\r\n            ha: 772,\r\n            leftSideBearing: 32,\r\n            advanceWidth: 491,\r\n        },\r\n        i: {\r\n            x_min: 45,\r\n            x_max: 167,\r\n            y_min: -13,\r\n            y_max: 631,\r\n            ha: 644,\r\n            leftSideBearing: 45,\r\n            advanceWidth: 220,\r\n        },\r\n        j: {\r\n            x_min: -127,\r\n            x_max: 261,\r\n            y_min: -231,\r\n            y_max: 601,\r\n            ha: 832,\r\n            leftSideBearing: -127,\r\n            advanceWidth: 308,\r\n        },\r\n        k: {\r\n            x_min: 39,\r\n            x_max: 443,\r\n            y_min: -3,\r\n            y_max: 700,\r\n            ha: 703,\r\n            leftSideBearing: 39,\r\n            advanceWidth: 497,\r\n        },\r\n        l: {\r\n            x_min: 58,\r\n            x_max: 168,\r\n            y_min: -8,\r\n            y_max: 686,\r\n            ha: 694,\r\n            leftSideBearing: 58,\r\n            advanceWidth: 227,\r\n        },\r\n        m: {\r\n            x_min: 39,\r\n            x_max: 688,\r\n            y_min: -14,\r\n            y_max: 501,\r\n            ha: 515,\r\n            leftSideBearing: 39,\r\n            advanceWidth: 718,\r\n        },\r\n        n: {\r\n            x_min: 45,\r\n            x_max: 491,\r\n            y_min: -32,\r\n            y_max: 512,\r\n            ha: 544,\r\n            leftSideBearing: 45,\r\n            advanceWidth: 541,\r\n        },\r\n        o: {\r\n            x_min: 41,\r\n            x_max: 424,\r\n            y_min: -12,\r\n            y_max: 493,\r\n            ha: 505,\r\n            leftSideBearing: 41,\r\n            advanceWidth: 447,\r\n        },\r\n        p: {\r\n            x_min: 25,\r\n            x_max: 529,\r\n            y_min: -260,\r\n            y_max: 500,\r\n            ha: 760,\r\n            leftSideBearing: 25,\r\n            advanceWidth: 573,\r\n        },\r\n        q: {\r\n            x_min: 53,\r\n            x_max: 603,\r\n            y_min: -235,\r\n            y_max: 514,\r\n            ha: 749,\r\n            leftSideBearing: 53,\r\n            advanceWidth: 623,\r\n        },\r\n        r: {\r\n            x_min: 32,\r\n            x_max: 407,\r\n            y_min: -7,\r\n            y_max: 492,\r\n            ha: 499,\r\n            leftSideBearing: 32,\r\n            advanceWidth: 460,\r\n        },\r\n        s: {\r\n            x_min: 49,\r\n            x_max: 416,\r\n            y_min: -12,\r\n            y_max: 519,\r\n            ha: 531,\r\n            leftSideBearing: 49,\r\n            advanceWidth: 460,\r\n        },\r\n        t: {\r\n            x_min: 32,\r\n            x_max: 442,\r\n            y_min: -5,\r\n            y_max: 684,\r\n            ha: 689,\r\n            leftSideBearing: 32,\r\n            advanceWidth: 469,\r\n        },\r\n        u: {\r\n            x_min: 41,\r\n            x_max: 487,\r\n            y_min: -5,\r\n            y_max: 507,\r\n            ha: 512,\r\n            leftSideBearing: 41,\r\n            advanceWidth: 510,\r\n        },\r\n        v: {\r\n            x_min: 16,\r\n            x_max: 441,\r\n            y_min: -20,\r\n            y_max: 542,\r\n            ha: 562,\r\n            leftSideBearing: 16,\r\n            advanceWidth: 456,\r\n        },\r\n        w: {\r\n            x_min: 39,\r\n            x_max: 639,\r\n            y_min: -22,\r\n            y_max: 505,\r\n            ha: 527,\r\n            leftSideBearing: 39,\r\n            advanceWidth: 661,\r\n        },\r\n        x: {\r\n            x_min: 15,\r\n            x_max: 505,\r\n            y_min: -39,\r\n            y_max: 539,\r\n            ha: 578,\r\n            leftSideBearing: 15,\r\n            advanceWidth: 541,\r\n        },\r\n        y: {\r\n            x_min: -98,\r\n            x_max: 501,\r\n            y_min: -242,\r\n            y_max: 511,\r\n            ha: 753,\r\n            leftSideBearing: -98,\r\n            advanceWidth: 548,\r\n        },\r\n        z: {\r\n            x_min: 27,\r\n            x_max: 479,\r\n            y_min: -3,\r\n            y_max: 494,\r\n            ha: 497,\r\n            leftSideBearing: 27,\r\n            advanceWidth: 494,\r\n        },\r\n        '{': {\r\n            x_min: 0,\r\n            x_max: 0,\r\n            y_min: 0,\r\n            y_max: 0,\r\n            ha: 0,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 308,\r\n        },\r\n        '|': {\r\n            x_min: 0,\r\n            x_max: 0,\r\n            y_min: 0,\r\n            y_max: 0,\r\n            ha: 0,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 308,\r\n        },\r\n        '}': {\r\n            x_min: 0,\r\n            x_max: 0,\r\n            y_min: 0,\r\n            y_max: 0,\r\n            ha: 0,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 308,\r\n        },\r\n        '~': {\r\n            x_min: 0,\r\n            x_max: 0,\r\n            y_min: 0,\r\n            y_max: 0,\r\n            ha: 0,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 308,\r\n        },\r\n    },\r\n    fontFamily: 'PetalumaScript',\r\n    resolution: 1000,\r\n    generatedOn: '2020-06-14T18:33:25.407Z',\r\n};\r\n","export const RobotoSlabFont = {\r\n    spacing: 50,\r\n    glyphs: {\r\n        ' ': {\r\n            x_min: 0,\r\n            x_max: 509,\r\n            y_min: 0,\r\n            y_max: 2000,\r\n            ha: 2000,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 509,\r\n        },\r\n        '0': {\r\n            x_min: 121,\r\n            x_max: 1048,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 121,\r\n            advanceWidth: 1168,\r\n        },\r\n        '1': {\r\n            x_min: 117,\r\n            x_max: 767,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 117,\r\n            advanceWidth: 844,\r\n        },\r\n        '2': {\r\n            x_min: 75.8474576645637,\r\n            x_max: 1040,\r\n            y_min: 0,\r\n            y_max: 1477,\r\n            ha: 1477,\r\n            leftSideBearing: 75,\r\n            advanceWidth: 1131,\r\n        },\r\n        '3': {\r\n            x_min: 74.85365853658536,\r\n            x_max: 994,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 74,\r\n            advanceWidth: 1106,\r\n        },\r\n        '4': {\r\n            x_min: 63,\r\n            x_max: 1114,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 63,\r\n            advanceWidth: 1187,\r\n        },\r\n        '5': {\r\n            x_min: 96.8448275474953,\r\n            x_max: 982,\r\n            y_min: -21,\r\n            y_max: 1456,\r\n            ha: 1477,\r\n            leftSideBearing: 96,\r\n            advanceWidth: 1081,\r\n        },\r\n        '6': {\r\n            x_min: 121,\r\n            x_max: 1067,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 121,\r\n            advanceWidth: 1144,\r\n        },\r\n        '7': {\r\n            x_min: 76,\r\n            x_max: 1060,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: -30,\r\n            advanceWidth: 1128,\r\n        },\r\n        '8': {\r\n            x_min: 92,\r\n            x_max: 1039,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 92,\r\n            advanceWidth: 1131,\r\n        },\r\n        '9': {\r\n            x_min: 84,\r\n            x_max: 1026,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 84,\r\n            advanceWidth: 1154,\r\n        },\r\n        '!': {\r\n            x_min: 143,\r\n            x_max: 340,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 143,\r\n            advanceWidth: 483,\r\n        },\r\n        '\"': {\r\n            x_min: 166,\r\n            x_max: 634,\r\n            y_min: 1055,\r\n            y_max: 1560,\r\n            ha: 505,\r\n            leftSideBearing: 166,\r\n            advanceWidth: 770,\r\n        },\r\n        '#': {\r\n            x_min: 63,\r\n            x_max: 1179,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 63,\r\n            advanceWidth: 1246,\r\n        },\r\n        $: {\r\n            x_min: 81.92156915727656,\r\n            x_max: 1012,\r\n            y_min: -208,\r\n            y_max: 1693,\r\n            ha: 1901,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1110,\r\n        },\r\n        '%': {\r\n            x_min: 77,\r\n            x_max: 1384,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 77,\r\n            advanceWidth: 1460,\r\n        },\r\n        '&': {\r\n            x_min: 74,\r\n            x_max: 1242,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 74,\r\n            advanceWidth: 1289,\r\n        },\r\n        \"'\": {\r\n            x_min: 166,\r\n            x_max: 324,\r\n            y_min: 1055,\r\n            y_max: 1560,\r\n            ha: 505,\r\n            leftSideBearing: 166,\r\n            advanceWidth: 460,\r\n        },\r\n        '(': {\r\n            x_min: 114,\r\n            x_max: 650,\r\n            y_min: -463,\r\n            y_max: 1636,\r\n            ha: 2099,\r\n            leftSideBearing: 114,\r\n            advanceWidth: 662,\r\n        },\r\n        ')': {\r\n            x_min: 11,\r\n            x_max: 547,\r\n            y_min: -463,\r\n            y_max: 1636,\r\n            ha: 2099,\r\n            leftSideBearing: 11,\r\n            advanceWidth: 654,\r\n        },\r\n        '*': {\r\n            x_min: 66,\r\n            x_max: 893,\r\n            y_min: 607,\r\n            y_max: 1456,\r\n            ha: 849,\r\n            leftSideBearing: 66,\r\n            advanceWidth: 958,\r\n        },\r\n        '+': {\r\n            x_min: 73,\r\n            x_max: 1071,\r\n            y_min: 146,\r\n            y_max: 1206,\r\n            ha: 1060,\r\n            leftSideBearing: 73,\r\n            advanceWidth: 1145,\r\n        },\r\n        ',': {\r\n            x_min: 23,\r\n            x_max: 315,\r\n            y_min: -311,\r\n            y_max: 221,\r\n            ha: 532,\r\n            leftSideBearing: 23,\r\n            advanceWidth: 404,\r\n        },\r\n        '-': {\r\n            x_min: 154,\r\n            x_max: 643,\r\n            y_min: 538,\r\n            y_max: 692,\r\n            ha: 154,\r\n            leftSideBearing: 154,\r\n            advanceWidth: 797,\r\n        },\r\n        '.': {\r\n            x_min: 145,\r\n            x_max: 342,\r\n            y_min: 0,\r\n            y_max: 202,\r\n            ha: 202,\r\n            leftSideBearing: 145,\r\n            advanceWidth: 493,\r\n        },\r\n        '/': {\r\n            x_min: 0,\r\n            x_max: 774,\r\n            y_min: -125,\r\n            y_max: 1456,\r\n            ha: 1581,\r\n            leftSideBearing: 0,\r\n            advanceWidth: 824,\r\n        },\r\n        ':': {\r\n            x_min: 145,\r\n            x_max: 342,\r\n            y_min: 0,\r\n            y_max: 1082,\r\n            ha: 1082,\r\n            leftSideBearing: 145,\r\n            advanceWidth: 419,\r\n        },\r\n        ';': {\r\n            x_min: 53,\r\n            x_max: 345,\r\n            y_min: -311,\r\n            y_max: 1082,\r\n            ha: 1393,\r\n            leftSideBearing: 53,\r\n            advanceWidth: 424,\r\n        },\r\n        '<': {\r\n            x_min: 76,\r\n            x_max: 892,\r\n            y_min: 107,\r\n            y_max: 1013,\r\n            ha: 906,\r\n            leftSideBearing: 76,\r\n            advanceWidth: 1017,\r\n        },\r\n        '=': {\r\n            x_min: 147,\r\n            x_max: 981,\r\n            y_min: 407,\r\n            y_max: 987,\r\n            ha: 580,\r\n            leftSideBearing: 147,\r\n            advanceWidth: 1127,\r\n        },\r\n        '>': {\r\n            x_min: 125,\r\n            x_max: 980,\r\n            y_min: 87,\r\n            y_max: 993,\r\n            ha: 906,\r\n            leftSideBearing: 125,\r\n            advanceWidth: 1060,\r\n        },\r\n        '?': {\r\n            x_min: 65.92660602419838,\r\n            x_max: 890,\r\n            y_min: 0,\r\n            y_max: 1477,\r\n            ha: 1477,\r\n            leftSideBearing: 65,\r\n            advanceWidth: 953,\r\n        },\r\n        '@': {\r\n            x_min: 84.3592218305664,\r\n            x_max: 1705.2346925277395,\r\n            y_min: -453,\r\n            y_max: 1431,\r\n            ha: 1884,\r\n            leftSideBearing: 84,\r\n            advanceWidth: 1821,\r\n        },\r\n        A: {\r\n            x_min: 70,\r\n            x_max: 1463,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 70,\r\n            advanceWidth: 1533,\r\n        },\r\n        B: {\r\n            x_min: 81,\r\n            x_max: 1253,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1322,\r\n        },\r\n        C: {\r\n            x_min: 80,\r\n            x_max: 1174,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 80,\r\n            advanceWidth: 1290,\r\n        },\r\n        D: {\r\n            x_min: 81,\r\n            x_max: 1291,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1356,\r\n        },\r\n        E: {\r\n            x_min: 81,\r\n            x_max: 1190,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1306,\r\n        },\r\n        F: {\r\n            x_min: 81,\r\n            x_max: 1176,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1256,\r\n        },\r\n        G: {\r\n            x_min: 80,\r\n            x_max: 1226,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 80,\r\n            advanceWidth: 1346,\r\n        },\r\n        H: {\r\n            x_min: 81,\r\n            x_max: 1497,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1578,\r\n        },\r\n        I: {\r\n            x_min: 81,\r\n            x_max: 604,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 685,\r\n        },\r\n        J: {\r\n            x_min: 60,\r\n            x_max: 1100,\r\n            y_min: -21,\r\n            y_max: 1456,\r\n            ha: 1477,\r\n            leftSideBearing: 60,\r\n            advanceWidth: 1169,\r\n        },\r\n        K: {\r\n            x_min: 81,\r\n            x_max: 1427,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1501,\r\n        },\r\n        L: {\r\n            x_min: 81,\r\n            x_max: 1130,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1210,\r\n        },\r\n        M: {\r\n            x_min: 94,\r\n            x_max: 1888,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 94,\r\n            advanceWidth: 1982,\r\n        },\r\n        N: {\r\n            x_min: 83,\r\n            x_max: 1509,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 83,\r\n            advanceWidth: 1592,\r\n        },\r\n        O: {\r\n            x_min: 70,\r\n            x_max: 1281,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 70,\r\n            advanceWidth: 1351,\r\n        },\r\n        P: {\r\n            x_min: 81,\r\n            x_max: 1242,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1297,\r\n        },\r\n        Q: {\r\n            x_min: 70,\r\n            x_max: 1348,\r\n            y_min: -245,\r\n            y_max: 1477,\r\n            ha: 1722,\r\n            leftSideBearing: 70,\r\n            advanceWidth: 1376,\r\n        },\r\n        R: {\r\n            x_min: 81,\r\n            x_max: 1285,\r\n            y_min: 0,\r\n            y_max: 1455,\r\n            ha: 1455,\r\n            leftSideBearing: 81,\r\n            advanceWidth: 1385,\r\n        },\r\n        S: {\r\n            x_min: 115,\r\n            x_max: 1116,\r\n            y_min: -21,\r\n            y_max: 1477,\r\n            ha: 1498,\r\n            leftSideBearing: 115,\r\n            advanceWidth: 1206,\r\n        },\r\n        T: {\r\n            x_min: 96,\r\n            x_max: 1306,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 96,\r\n            advanceWidth: 1406,\r\n        },\r\n        U: {\r\n            x_min: 70,\r\n            x_max: 1452,\r\n            y_min: -21,\r\n            y_max: 1456,\r\n            ha: 1477,\r\n            leftSideBearing: 70,\r\n            advanceWidth: 1522,\r\n        },\r\n        V: {\r\n            x_min: 65,\r\n            x_max: 1443,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 65,\r\n            advanceWidth: 1508,\r\n        },\r\n        W: {\r\n            x_min: 72,\r\n            x_max: 2057,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 72,\r\n            advanceWidth: 2129,\r\n        },\r\n        X: {\r\n            x_min: 80,\r\n            x_max: 1449,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 80,\r\n            advanceWidth: 1529,\r\n        },\r\n        Y: {\r\n            x_min: 65,\r\n            x_max: 1396,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 65,\r\n            advanceWidth: 1461,\r\n        },\r\n        Z: {\r\n            x_min: 90,\r\n            x_max: 1107,\r\n            y_min: 0,\r\n            y_max: 1456,\r\n            ha: 1456,\r\n            leftSideBearing: 90,\r\n            advanceWidth: 1197,\r\n        },\r\n        '[': {\r\n            x_min: 157,\r\n            x_max: 541,\r\n            y_min: -312,\r\n            y_max: 1664,\r\n            ha: 1976,\r\n            leftSideBearing: 157,\r\n            advanceWidth: 573,\r\n        },\r\n        '\\\\': {\r\n            x_min: 36,\r\n            x_max: 830,\r\n            y_min: -125,\r\n            y_max: 1456,\r\n            ha: 1581,\r\n            leftSideBearing: 36,\r\n            advanceWidth: 841,\r\n        },\r\n        ']': {\r\n            x_min: 23,\r\n            x_max: 408,\r\n            y_min: -312,\r\n            y_max: 1664,\r\n            ha: 1976,\r\n            leftSideBearing: 23,\r\n            advanceWidth: 552,\r\n        },\r\n        '^': {\r\n            x_min: 71,\r\n            x_max: 802,\r\n            y_min: 729,\r\n            y_max: 1456,\r\n            ha: 727,\r\n            leftSideBearing: 71,\r\n            advanceWidth: 864,\r\n        },\r\n        _: {\r\n            x_min: 119,\r\n            x_max: 1041,\r\n            y_min: -154,\r\n            y_max: 0,\r\n            ha: 154,\r\n            leftSideBearing: 119,\r\n            advanceWidth: 1168,\r\n        },\r\n        '`': {\r\n            x_min: 40,\r\n            x_max: 456,\r\n            y_min: 1288,\r\n            y_max: 1560,\r\n            ha: 272,\r\n            leftSideBearing: 40,\r\n            advanceWidth: 496,\r\n        },\r\n        a: {\r\n            x_min: 79,\r\n            x_max: 1053,\r\n            y_min: -21,\r\n            y_max: 1102,\r\n            ha: 1123,\r\n            leftSideBearing: 79,\r\n            advanceWidth: 1132,\r\n        },\r\n        b: {\r\n            x_min: -16,\r\n            x_max: 1071,\r\n            y_min: -21,\r\n            y_max: 1560,\r\n            ha: 1581,\r\n            leftSideBearing: -16,\r\n            advanceWidth: 1145,\r\n        },\r\n        c: {\r\n            x_min: 78,\r\n            x_max: 988,\r\n            y_min: -21,\r\n            y_max: 1102,\r\n            ha: 1123,\r\n            leftSideBearing: 78,\r\n            advanceWidth: 1067,\r\n        },\r\n        d: {\r\n            x_min: 78,\r\n            x_max: 1156,\r\n            y_min: -21,\r\n            y_max: 1560,\r\n            ha: 1581,\r\n            leftSideBearing: 78,\r\n            advanceWidth: 1218,\r\n        },\r\n        e: {\r\n            x_min: 74,\r\n            x_max: 980,\r\n            y_min: -21,\r\n            y_max: 1102,\r\n            ha: 1123,\r\n            leftSideBearing: 74,\r\n            advanceWidth: 1059,\r\n        },\r\n        f: {\r\n            x_min: 64,\r\n            x_max: 731,\r\n            y_min: 0,\r\n            y_max: 1581,\r\n            ha: 1581,\r\n            leftSideBearing: 64,\r\n            advanceWidth: 725,\r\n        },\r\n        g: {\r\n            x_min: 78,\r\n            x_max: 1133,\r\n            y_min: -437,\r\n            y_max: 1102,\r\n            ha: 1539,\r\n            leftSideBearing: 78,\r\n            advanceWidth: 1157,\r\n        },\r\n        h: {\r\n            x_min: 49,\r\n            x_max: 1255,\r\n            y_min: 0,\r\n            y_max: 1560,\r\n            ha: 1560,\r\n            leftSideBearing: 49,\r\n            advanceWidth: 1315,\r\n        },\r\n        i: {\r\n            x_min: 67,\r\n            x_max: 590,\r\n            y_min: 0,\r\n            y_max: 1560,\r\n            ha: 1560,\r\n            leftSideBearing: 67,\r\n            advanceWidth: 652,\r\n        },\r\n        j: {\r\n            x_min: -56,\r\n            x_max: 381,\r\n            y_min: -437,\r\n            y_max: 1560,\r\n            ha: 1997,\r\n            leftSideBearing: -56,\r\n            advanceWidth: 525,\r\n        },\r\n        k: {\r\n            x_min: 64,\r\n            x_max: 1248,\r\n            y_min: 0,\r\n            y_max: 1560,\r\n            ha: 1560,\r\n            leftSideBearing: 64,\r\n            advanceWidth: 1287,\r\n        },\r\n        l: {\r\n            x_min: 64,\r\n            x_max: 587,\r\n            y_min: 0,\r\n            y_max: 1560,\r\n            ha: 1560,\r\n            leftSideBearing: 64,\r\n            advanceWidth: 653,\r\n        },\r\n        m: {\r\n            x_min: 74,\r\n            x_max: 1905,\r\n            y_min: 0,\r\n            y_max: 1102,\r\n            ha: 1102,\r\n            leftSideBearing: 74,\r\n            advanceWidth: 1977,\r\n        },\r\n        n: {\r\n            x_min: 74,\r\n            x_max: 1278,\r\n            y_min: 0,\r\n            y_max: 1102,\r\n            ha: 1102,\r\n            leftSideBearing: 74,\r\n            advanceWidth: 1343,\r\n        },\r\n        o: {\r\n            x_min: 78,\r\n            x_max: 1046,\r\n            y_min: -21,\r\n            y_max: 1102,\r\n            ha: 1123,\r\n            leftSideBearing: 78,\r\n            advanceWidth: 1124,\r\n        },\r\n        p: {\r\n            x_min: 34,\r\n            x_max: 1119,\r\n            y_min: -416,\r\n            y_max: 1102,\r\n            ha: 1518,\r\n            leftSideBearing: 34,\r\n            advanceWidth: 1197,\r\n        },\r\n        q: {\r\n            x_min: 78,\r\n            x_max: 1135,\r\n            y_min: -416,\r\n            y_max: 1102,\r\n            ha: 1518,\r\n            leftSideBearing: 78,\r\n            advanceWidth: 1139,\r\n        },\r\n        r: {\r\n            x_min: 72,\r\n            x_max: 808,\r\n            y_min: 0,\r\n            y_max: 1102,\r\n            ha: 1102,\r\n            leftSideBearing: 72,\r\n            advanceWidth: 854,\r\n        },\r\n        s: {\r\n            x_min: 104,\r\n            x_max: 933,\r\n            y_min: -21,\r\n            y_max: 1102,\r\n            ha: 1123,\r\n            leftSideBearing: 104,\r\n            advanceWidth: 1022,\r\n        },\r\n        t: {\r\n            x_min: 24,\r\n            x_max: 678,\r\n            y_min: -17,\r\n            y_max: 1343,\r\n            ha: 1360,\r\n            leftSideBearing: 24,\r\n            advanceWidth: 730,\r\n        },\r\n        u: {\r\n            x_min: 52,\r\n            x_max: 1181,\r\n            y_min: -21,\r\n            y_max: 1082,\r\n            ha: 1103,\r\n            leftSideBearing: 52,\r\n            advanceWidth: 1245,\r\n        },\r\n        v: {\r\n            x_min: 26,\r\n            x_max: 1176,\r\n            y_min: 0,\r\n            y_max: 1082,\r\n            ha: 1082,\r\n            leftSideBearing: 26,\r\n            advanceWidth: 1206,\r\n        },\r\n        w: {\r\n            x_min: 52,\r\n            x_max: 1777,\r\n            y_min: 0,\r\n            y_max: 1082,\r\n            ha: 1082,\r\n            leftSideBearing: 52,\r\n            advanceWidth: 1823,\r\n        },\r\n        x: {\r\n            x_min: 42,\r\n            x_max: 1163,\r\n            y_min: 0,\r\n            y_max: 1082,\r\n            ha: 1082,\r\n            leftSideBearing: 42,\r\n            advanceWidth: 1203,\r\n        },\r\n        y: {\r\n            x_min: 24,\r\n            x_max: 1172,\r\n            y_min: -437,\r\n            y_max: 1082,\r\n            ha: 1519,\r\n            leftSideBearing: 24,\r\n            advanceWidth: 1192,\r\n        },\r\n        z: {\r\n            x_min: 88,\r\n            x_max: 960,\r\n            y_min: 0,\r\n            y_max: 1082,\r\n            ha: 1082,\r\n            leftSideBearing: 88,\r\n            advanceWidth: 1032,\r\n        },\r\n        '{': {\r\n            x_min: 63,\r\n            x_max: 671,\r\n            y_min: -364,\r\n            y_max: 1597,\r\n            ha: 1961,\r\n            leftSideBearing: 63,\r\n            advanceWidth: 701,\r\n        },\r\n        '|': {\r\n            x_min: 150,\r\n            x_max: 307,\r\n            y_min: -270,\r\n            y_max: 1456,\r\n            ha: 1726,\r\n            leftSideBearing: 150,\r\n            advanceWidth: 451,\r\n        },\r\n        '}': {\r\n            x_min: 27,\r\n            x_max: 635,\r\n            y_min: -364,\r\n            y_max: 1597,\r\n            ha: 1961,\r\n            leftSideBearing: 27,\r\n            advanceWidth: 701,\r\n        },\r\n        '~': {\r\n            x_min: 121,\r\n            x_max: 1257,\r\n            y_min: 401,\r\n            y_max: 803,\r\n            ha: 402,\r\n            leftSideBearing: 121,\r\n            advanceWidth: 1386,\r\n        },\r\n    },\r\n    fontFamily: 'Roboto Slab',\r\n    resolution: 2048,\r\n    generatedOn: '2020-06-15T19:12:58.120Z',\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Font } from '../font';\r\nimport { TextFormatter } from '../textformatter';\r\nimport { PetalumaScriptFont } from './petalumascript_glyphs';\r\nimport { RobotoSlabFont } from './robotoslab_glyphs';\r\nexport function loadTextFonts() {\r\n    // Roboto Slab\r\n    {\r\n        const fontData = RobotoSlabFont;\r\n        const { fontFamily, resolution, glyphs } = fontData;\r\n        Font.load(fontFamily, fontData);\r\n        // Previously we used 'H', but it isn't actually the tallest or the widest.\r\n        // Interestingly, the lowercase 'b' is the tallest glyph.\r\n        const maxSizeGlyph = 'b';\r\n        TextFormatter.registerInfo({\r\n            family: fontFamily,\r\n            resolution,\r\n            glyphs,\r\n            maxSizeGlyph,\r\n            monospaced: false,\r\n            bold: false,\r\n            italic: false,\r\n            superscriptOffset: 0.66,\r\n            subscriptOffset: 0.66,\r\n            serifs: true,\r\n            description: 'Text font to pair with the Bravura / Gonville music fonts.',\r\n        });\r\n    }\r\n    // PetalumaScript\r\n    {\r\n        const fontData = PetalumaScriptFont;\r\n        const { fontFamily, resolution, glyphs } = fontData;\r\n        Font.load(fontFamily, fontData);\r\n        // M is wider, but H is taller. :-)\r\n        // Lowercase b is also taller in this font.\r\n        const maxSizeGlyph = 'b';\r\n        TextFormatter.registerInfo({\r\n            family: fontFamily,\r\n            resolution,\r\n            glyphs,\r\n            maxSizeGlyph,\r\n            monospaced: false,\r\n            bold: false,\r\n            italic: false,\r\n            superscriptOffset: 0.66,\r\n            subscriptOffset: 0.66,\r\n            serifs: false,\r\n            description: 'Text font to pair with the Petaluma music font.',\r\n        });\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Beam } from './beam';\r\nimport { Font } from './font';\r\nimport { Fraction } from './fraction';\r\nimport { ModifierContext } from './modifiercontext';\r\nimport { Stave } from './stave';\r\nimport { StaveConnector } from './staveconnector';\r\nimport { Tables } from './tables';\r\nimport { TickContext } from './tickcontext';\r\nimport { isNote, isStaveNote } from './typeguard';\r\nimport { defined, log, midLine, RuntimeError } from './util';\r\nimport { Voice } from './voice';\r\n// Helper function\r\nconst sumArray = (arr) => arr.reduce((a, b) => a + b, 0);\r\n/**\r\n * Create `Alignment`s for each tick in `voices`. Also calculate the\r\n * total number of ticks in voices.\r\n */\r\nfunction createContexts(voices, makeContext, addToContext) {\r\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\r\n    // Initialize tick maps.\r\n    const tickToContextMap = {};\r\n    const tickList = [];\r\n    const contexts = [];\r\n    // For each voice, extract notes and create a context for every\r\n    // new tick that hasn't been seen before.\r\n    voices.forEach((voice, voiceIndex) => {\r\n        // Use resolution multiplier as denominator so that no additional expansion\r\n        // of fractional tick values is needed.\r\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\r\n        voice.getTickables().forEach((tickable) => {\r\n            const integerTicks = ticksUsed.numerator;\r\n            // If we have no tick context for this tick, create one.\r\n            if (!tickToContextMap[integerTicks]) {\r\n                const newContext = makeContext({ tickID: integerTicks });\r\n                contexts.push(newContext);\r\n                tickToContextMap[integerTicks] = newContext;\r\n                // Maintain a list of unique integerTicks.\r\n                tickList.push(integerTicks);\r\n            }\r\n            // Add this tickable to the TickContext.\r\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\r\n            ticksUsed.add(tickable.getTicks());\r\n        });\r\n    });\r\n    return {\r\n        map: tickToContextMap,\r\n        array: contexts,\r\n        list: tickList.sort((a, b) => a - b),\r\n        resolutionMultiplier,\r\n    };\r\n}\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Formatter.DEBUG)\r\n        log('Vex.Flow.Formatter', args);\r\n}\r\n/**\r\n * Get the rest line number of the next non-rest note(s).\r\n * @param notes array of Notes\r\n * @param currRestLine\r\n * @param currNoteIndex current note index\r\n * @param compare if true, return the midpoint between the current rest line and the next rest line\r\n * @returns a line number, which determines the vertical position of a rest.\r\n */\r\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\r\n    // If no valid next note group, nextRestLine is same as current.\r\n    let nextRestLine = currRestLine;\r\n    // Start with the next note and keep going until we find a valid non-rest note group.\r\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\r\n        const note = notes[noteIndex];\r\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\r\n            nextRestLine = note.getLineForRest();\r\n            break;\r\n        }\r\n    }\r\n    // Locate the mid point between two lines.\r\n    if (compare && currRestLine !== nextRestLine) {\r\n        const top = Math.max(currRestLine, nextRestLine);\r\n        const bot = Math.min(currRestLine, nextRestLine);\r\n        nextRestLine = midLine(top, bot);\r\n    }\r\n    return nextRestLine;\r\n}\r\n/**\r\n * Format implements the formatting and layout algorithms that are used\r\n * to position notes in a voice. The algorithm can align multiple voices both\r\n * within a stave, and across multiple staves.\r\n *\r\n * To do this, the formatter breaks up voices into a grid of rational-valued\r\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\r\n * to each tick based on the widths of the notes and modifiers in that tick. This\r\n * establishes the smallest amount of space required for each tick.\r\n *\r\n * Finally, the formatter distributes the left over space proportionally to\r\n * all the ticks, setting the `x` values of the notes in each tick.\r\n *\r\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\r\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\r\n */\r\nexport class Formatter {\r\n    constructor(options) {\r\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: 2, maxIterations: 5 }, options);\r\n        this.justifyWidth = 0;\r\n        this.totalCost = 0;\r\n        this.totalShift = 0;\r\n        this.durationStats = {};\r\n        // Minimum width required to render all the notes in the voices.\r\n        this.minTotalWidth = 0;\r\n        // This is set to `true` after `minTotalWidth` is calculated.\r\n        this.hasMinTotalWidth = false;\r\n        // Arrays of tick and modifier contexts.\r\n        this.tickContexts = undefined;\r\n        this.modifierContexts = undefined;\r\n        // Gaps between contexts, for free movement of notes post\r\n        // formatting.\r\n        this.contextGaps = {\r\n            total: 0,\r\n            gaps: [],\r\n        };\r\n        this.voices = [];\r\n        this.lossHistory = [];\r\n    }\r\n    /**\r\n     * Helper function to layout \"notes\" one after the other without\r\n     * regard for proportions. Useful for tests and debugging.\r\n     */\r\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\r\n        notes.reduce((accumulator, note) => {\r\n            note.addToModifierContext(new ModifierContext());\r\n            const tick = new TickContext().addTickable(note).preFormat();\r\n            const metrics = tick.getMetrics();\r\n            tick.setX(accumulator + metrics.totalLeftPx);\r\n            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\r\n        }, x);\r\n    }\r\n    /** Helper function to plot formatter debug info. */\r\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\r\n        options = Object.assign({ stavePadding: Tables.currentMusicFont().lookupMetric('stave.padding') }, options);\r\n        const x = xPos + options.stavePadding;\r\n        const contextGaps = formatter.contextGaps;\r\n        function stroke(x1, x2, color) {\r\n            ctx.beginPath();\r\n            ctx.setStrokeStyle(color);\r\n            ctx.setFillStyle(color);\r\n            ctx.setLineWidth(1);\r\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\r\n        }\r\n        ctx.save();\r\n        ctx.setFont(Font.SANS_SERIF, 8);\r\n        contextGaps.gaps.forEach((gap) => {\r\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\r\n            ctx.setFillStyle('green');\r\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\r\n        });\r\n        ctx.setFillStyle('red');\r\n        ctx.fillText(`Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\r\n        ctx.restore();\r\n    }\r\n    /**\r\n     * Helper function to format and draw a single voice. Returns a bounding\r\n     * box for the notation.\r\n     * @param ctx  the rendering context\r\n     * @param stave the stave to which to draw (`Stave` or `TabStave`)\r\n     * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\r\n     * @param params one of below:\r\n     *    * Setting `autobeam` only `(context, stave, notes, true)` or\r\n     *      `(ctx, stave, notes, {autobeam: true})`\r\n     *    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\r\n     *    * Setting both a struct is needed `(context, stave, notes, {\r\n     *      autobeam: true, align_rests: true})`\r\n     *    * `autobeam` automatically generates beams for the notes.\r\n     *    * `align_rests` aligns rests with nearby notes.\r\n     */\r\n    static FormatAndDraw(ctx, stave, notes, params) {\r\n        let options = {\r\n            auto_beam: false,\r\n            align_rests: false,\r\n        };\r\n        if (typeof params === 'object') {\r\n            options = Object.assign(Object.assign({}, options), params);\r\n        }\r\n        else if (typeof params === 'boolean') {\r\n            options.auto_beam = params;\r\n        }\r\n        // Start by creating a voice and adding all the notes to it.\r\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\r\n        // Then create beams, if requested.\r\n        const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\r\n        // Instantiate a `Formatter` and format the notes.\r\n        new Formatter()\r\n            .joinVoices([voice]) // , { align_rests: options.align_rests })\r\n            .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\r\n        // Render the voice and beams to the stave.\r\n        voice.setStave(stave).draw(ctx, stave);\r\n        beams.forEach((beam) => beam.setContext(ctx).draw());\r\n        // Return the bounding box of the voice.\r\n        return voice.getBoundingBox();\r\n    }\r\n    /**\r\n     * Helper function to format and draw aligned tab and stave notes in two\r\n     * separate staves.\r\n     * @param ctx the rendering context\r\n     * @param tabstave a `TabStave` instance on which to render `TabNote`s.\r\n     * @param stave a `Stave` instance on which to render `Note`s.\r\n     * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\r\n     * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\r\n     * @param autobeam automatically generate beams.\r\n     * @param params a configuration object:\r\n     *    * `autobeam` automatically generates beams for the notes.\r\n     *    * `align_rests` aligns rests with nearby notes.\r\n     */\r\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {\r\n        let opts = {\r\n            auto_beam: autobeam,\r\n            align_rests: false,\r\n        };\r\n        if (typeof params === 'object') {\r\n            opts = Object.assign(Object.assign({}, opts), params);\r\n        }\r\n        else if (typeof params === 'boolean') {\r\n            opts.auto_beam = params;\r\n        }\r\n        // Create a `4/4` voice for `notes`.\r\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\r\n        // Create a `4/4` voice for `tabnotes`.\r\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\r\n        // Then create beams, if requested.\r\n        const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\r\n        // Instantiate a `Formatter` and align tab and stave notes.\r\n        new Formatter()\r\n            .joinVoices([notevoice]) // , { align_rests: opts.align_rests })\r\n            .joinVoices([tabvoice])\r\n            .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\r\n        // Render voices and beams to staves.\r\n        notevoice.draw(ctx, stave);\r\n        tabvoice.draw(ctx, tabstave);\r\n        beams.forEach((beam) => beam.setContext(ctx).draw());\r\n        // Draw a connector between tab and note staves.\r\n        new StaveConnector(stave, tabstave).setContext(ctx).draw();\r\n    }\r\n    /**\r\n     * Automatically set the vertical position of rests based on previous/next note positions.\r\n     * @param tickables an array of Tickables.\r\n     * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\r\n     * @param alignTuplets If `false`, ignores tuplets.\r\n     */\r\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\r\n        tickables.forEach((currTickable, index) => {\r\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\r\n                if (currTickable.getTuplet() && !alignTuplets) {\r\n                    return;\r\n                }\r\n                // If activated rests not on default can be rendered as specified.\r\n                const position = currTickable.getGlyph().position.toUpperCase();\r\n                if (position !== 'R/4' && position !== 'B/4') {\r\n                    return;\r\n                }\r\n                if (alignAllNotes || currTickable.getBeam()) {\r\n                    // Align rests with previous/next notes.\r\n                    const props = currTickable.getKeyProps()[0];\r\n                    if (index === 0) {\r\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\r\n                    }\r\n                    else if (index > 0 && index < tickables.length) {\r\n                        // If previous tickable is a rest, use its line number.\r\n                        const prevTickable = tickables[index - 1];\r\n                        if (isStaveNote(prevTickable)) {\r\n                            if (prevTickable.isRest()) {\r\n                                props.line = prevTickable.getKeyProps()[0].line;\r\n                            }\r\n                            else {\r\n                                const restLine = prevTickable.getLineForRest();\r\n                                // Get the rest line for next valid non-rest note group.\r\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\r\n                            }\r\n                        }\r\n                    }\r\n                    currTickable.setKeyLine(0, props.line);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Find all the rests in each of the `voices` and align them to neighboring notes.\r\n     *\r\n     * @param voices\r\n     * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\r\n     */\r\n    alignRests(voices, alignAllNotes) {\r\n        if (!voices || !voices.length) {\r\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\r\n        }\r\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\r\n    }\r\n    /**\r\n     * Estimate the width required to render 'voices'.  This is done by:\r\n     * 1. Sum the widths of all the tick contexts\r\n     * 2. Estimate the padding.\r\n     * The latter is done by calculating the padding 3 different ways, and taking the\r\n     * greatest value:\r\n     * 1. the padding required for unaligned notes in different voices\r\n     * 2. the padding based on the stddev of the tickable widths\r\n     * 3. the padding based on the stddev of the tickable durations.\r\n     *\r\n     * The last 2 quantities estimate a 'width entropy', where notes might need more\r\n     * room than the proportional formatting gives them.  A measure of all same duration\r\n     * and width will need no extra padding, and all these quantities will be\r\n     * zero in that case.\r\n     *\r\n     * @param voices the voices that contain the notes\r\n     * @returns the estimated width in pixels\r\n     */\r\n    preCalculateMinTotalWidth(voices) {\r\n        const unalignedPadding = Tables.currentMusicFont().lookupMetric('stave.unalignedNotePadding');\r\n        // Calculate additional padding based on 3 methods:\r\n        // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\r\n        let unalignedCtxCount = 0;\r\n        let wsum = 0;\r\n        let dsum = 0;\r\n        const widths = [];\r\n        const durations = [];\r\n        // Cache results.\r\n        if (this.hasMinTotalWidth)\r\n            return this.minTotalWidth;\r\n        // Create tick contexts if not already created.\r\n        if (!this.tickContexts) {\r\n            if (!voices) {\r\n                throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\r\n            }\r\n            this.createTickContexts(voices);\r\n        }\r\n        // eslint-disable-next-line\r\n        const { list: contextList, map: contextMap } = this.tickContexts;\r\n        this.minTotalWidth = 0;\r\n        // Go through each tick context and calculate total width,\r\n        // and also accumulate values used in padding hints\r\n        contextList.forEach((tick) => {\r\n            const context = contextMap[tick];\r\n            context.preFormat();\r\n            // If this TC doesn't have all the voices on it, it's unaligned.\r\n            // so increment the unaligned padding accumulator\r\n            if (context.getTickables().length < voices.length) {\r\n                unalignedCtxCount += 1;\r\n            }\r\n            // Calculate the 'width entropy' over all the Tickables.\r\n            context.getTickables().forEach((t) => {\r\n                wsum += t.getMetrics().width;\r\n                dsum += t.getTicks().value();\r\n                widths.push(t.getMetrics().width);\r\n                durations.push(t.getTicks().value());\r\n            });\r\n            const width = context.getWidth();\r\n            this.minTotalWidth += width;\r\n        });\r\n        this.hasMinTotalWidth = true;\r\n        // normalized (0-1) STDDEV of widths/durations gives us padding hints.\r\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\r\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\r\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\r\n        const davg = dsum / durations.length;\r\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\r\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\r\n        // Find max of 3 methods pad the width with that\r\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\r\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\r\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\r\n    }\r\n    /**\r\n     * Get minimum width required to render all voices. Either `format` or\r\n     * `preCalculateMinTotalWidth` must be called before this method.\r\n     */\r\n    getMinTotalWidth() {\r\n        if (!this.hasMinTotalWidth) {\r\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\r\n        }\r\n        return this.minTotalWidth;\r\n    }\r\n    /** Calculate the resolution multiplier for `voices`. */\r\n    static getResolutionMultiplier(voices) {\r\n        if (!voices || !voices.length) {\r\n            throw new RuntimeError('BadArgument', 'No voices to format');\r\n        }\r\n        const totalTicks = voices[0].getTotalTicks();\r\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\r\n            if (!voice.getTotalTicks().equals(totalTicks)) {\r\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\r\n            }\r\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\r\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\r\n            }\r\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\r\n        }, 1);\r\n        return resolutionMultiplier;\r\n    }\r\n    /** Create a `ModifierContext` for each tick in `voices`. */\r\n    createModifierContexts(voices) {\r\n        const fn = (tickable, context) => tickable.addToModifierContext(context);\r\n        const contexts = createContexts(voices, () => new ModifierContext(), fn);\r\n        this.modifierContexts = contexts;\r\n        return contexts;\r\n    }\r\n    /**\r\n     * Create a `TickContext` for each tick in `voices`. Also calculate the\r\n     * total number of ticks in voices.\r\n     */\r\n    createTickContexts(voices) {\r\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\r\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\r\n        this.tickContexts = contexts;\r\n        const contextArray = this.tickContexts.array;\r\n        contextArray.forEach((context) => {\r\n            context.tContexts = contextArray;\r\n        });\r\n        return contexts;\r\n    }\r\n    /**\r\n     * This is the core formatter logic. Format voices and justify them\r\n     * to `justifyWidth` pixels. `renderingContext` is required to justify elements\r\n     * that can't retreive widths without a canvas. This method sets the `x` positions\r\n     * of all the tickables/notes in the formatter.\r\n     */\r\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\r\n        // Initialize context maps.\r\n        const contexts = this.tickContexts;\r\n        if (!contexts) {\r\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\r\n        }\r\n        const { list: contextList, map: contextMap } = contexts;\r\n        // Reset loss history for evaluator.\r\n        this.lossHistory = [];\r\n        // If voices and a stave were provided, set the Stave for each voice\r\n        // and preFormat to apply Y values to the notes;\r\n        if (voicesParam && stave) {\r\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\r\n        }\r\n        // Now distribute the ticks to each tick context, and assign them their\r\n        // own X positions.\r\n        let x = 0;\r\n        let shift = 0;\r\n        this.minTotalWidth = 0;\r\n        let totalTicks = 0;\r\n        // Pass 1: Give each note maximum width requested by context.\r\n        contextList.forEach((tick) => {\r\n            const context = contextMap[tick];\r\n            // Make sure that all tickables in this context have calculated their\r\n            // space requirements.\r\n            context.preFormat();\r\n            const width = context.getWidth();\r\n            this.minTotalWidth += width;\r\n            const maxTicks = context.getMaxTicks().value();\r\n            totalTicks += maxTicks;\r\n            const metrics = context.getMetrics();\r\n            x = x + shift + metrics.totalLeftPx;\r\n            context.setX(x);\r\n            // Calculate shift for the next tick.\r\n            shift = width - metrics.totalLeftPx;\r\n        });\r\n        // Use softmax based on all notes across all staves. (options.globalSoftmax)\r\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\r\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\r\n        const expTicksUsed = sumArray(contextList.map(exp));\r\n        this.minTotalWidth = x + shift;\r\n        this.hasMinTotalWidth = true;\r\n        // No justification needed. End formatting.\r\n        if (justifyWidth <= 0)\r\n            return this.evaluate();\r\n        // Start justification. Subtract the right extra pixels of the final context because the formatter\r\n        // justifies based on the context's X position, which is the left-most part of the note head.\r\n        const firstContext = contextMap[contextList[0]];\r\n        const lastContext = contextMap[contextList[contextList.length - 1]];\r\n        // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\r\n        // the softmax of the ticks.\r\n        function calculateIdealDistances(adjustedJustifyWidth) {\r\n            const distances = contextList.map((tick, i) => {\r\n                const context = contextMap[tick];\r\n                const voices = context.getTickablesByVoice();\r\n                let backTickable;\r\n                if (i > 0) {\r\n                    const prevContext = contextMap[contextList[i - 1]];\r\n                    // Go through each tickable and search backwards for another tickable\r\n                    // in the same voice. If found, use that duration (ticks) to calculate\r\n                    // the expected distance.\r\n                    for (let j = i - 1; j >= 0; j--) {\r\n                        const backTick = contextMap[contextList[j]];\r\n                        const backVoices = backTick.getTickablesByVoice();\r\n                        // Look for matching voices between tick contexts.\r\n                        const matchingVoices = [];\r\n                        Object.keys(voices).forEach((v) => {\r\n                            if (backVoices[v]) {\r\n                                matchingVoices.push(v);\r\n                            }\r\n                        });\r\n                        if (matchingVoices.length > 0) {\r\n                            // Found matching voices, get largest duration\r\n                            let maxTicks = 0;\r\n                            let maxNegativeShiftPx = Infinity;\r\n                            let expectedDistance = 0;\r\n                            matchingVoices.forEach((v) => {\r\n                                const ticks = backVoices[v].getTicks().value();\r\n                                if (ticks > maxTicks) {\r\n                                    backTickable = backVoices[v];\r\n                                    maxTicks = ticks;\r\n                                }\r\n                                // Calculate the limits of the shift based on modifiers, etc.\r\n                                const thisTickable = voices[v];\r\n                                const insideLeftEdge = thisTickable.getX() -\r\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\r\n                                const backMetrics = backVoices[v].getMetrics();\r\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\r\n                                // Don't allow shifting if notes in the same voice can collide\r\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\r\n                            });\r\n                            // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\r\n                            // so that two different tick contexts don't align across staves.\r\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\r\n                            // Calculate the expected distance of the current context from the last matching tickable. The\r\n                            // distance is scaled down by the softmax for the voice.\r\n                            if (globalSoftmax) {\r\n                                const t = totalTicks;\r\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\r\n                            }\r\n                            else if (typeof backTickable !== 'undefined') {\r\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\r\n                            }\r\n                            return {\r\n                                expectedDistance,\r\n                                maxNegativeShiftPx,\r\n                                fromTickable: backTickable,\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\r\n            });\r\n            return distances;\r\n        }\r\n        function shiftToIdealDistances(idealDistances) {\r\n            // Distribute ticks to the contexts based on the calculated distance error.\r\n            const centerX = adjustedJustifyWidth / 2;\r\n            let spaceAccum = 0;\r\n            contextList.forEach((tick, index) => {\r\n                const context = contextMap[tick];\r\n                if (index > 0) {\r\n                    const contextX = context.getX();\r\n                    const ideal = idealDistances[index];\r\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\r\n                    let negativeShiftPx = 0;\r\n                    if (errorPx > 0) {\r\n                        spaceAccum += errorPx;\r\n                    }\r\n                    else if (errorPx < 0) {\r\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\r\n                        spaceAccum += -negativeShiftPx;\r\n                    }\r\n                    context.setX(contextX + spaceAccum);\r\n                }\r\n                // Move center aligned tickables to middle\r\n                context.getCenterAlignedTickables().forEach((tickable) => {\r\n                    tickable.setCenterXShift(centerX - context.getX());\r\n                });\r\n            });\r\n            return lastContext.getX() - firstContext.getX();\r\n        }\r\n        const adjustedJustifyWidth = justifyWidth -\r\n            lastContext.getMetrics().notePx -\r\n            lastContext.getMetrics().totalRightPx -\r\n            firstContext.getMetrics().totalLeftPx;\r\n        const musicFont = Tables.currentMusicFont();\r\n        const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');\r\n        const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');\r\n        const leftPadding = musicFont.lookupMetric('stave.padding');\r\n        let targetWidth = adjustedJustifyWidth;\r\n        const distances = calculateIdealDistances(targetWidth);\r\n        let actualWidth = shiftToIdealDistances(distances);\r\n        // Just one context. Done formatting.\r\n        if (contextList.length === 1)\r\n            return 0;\r\n        const calcMinDistance = (targetWidth, distances) => {\r\n            let mdCalc = targetWidth / 2;\r\n            if (distances.length > 1) {\r\n                for (let di = 1; di < distances.length; ++di) {\r\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\r\n                }\r\n            }\r\n            return mdCalc;\r\n        };\r\n        const minDistance = calcMinDistance(targetWidth, distances);\r\n        // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\r\n        // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\r\n        // existing visual regression tests.\r\n        const paddingMaxCalc = (curTargetWidth) => {\r\n            let lastTickablePadding = 0;\r\n            const lastTickable = lastContext && lastContext.getMaxTickable();\r\n            if (lastTickable) {\r\n                const voice = lastTickable.getVoice();\r\n                // If the number of actual ticks in the measure <> configured ticks, right-justify\r\n                // because the softmax won't yield the correct value\r\n                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\r\n                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\r\n                }\r\n                const tickWidth = lastTickable.getWidth();\r\n                lastTickablePadding =\r\n                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\r\n            }\r\n            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\r\n        };\r\n        let paddingMax = paddingMaxCalc(targetWidth);\r\n        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\r\n        const maxX = adjustedJustifyWidth - paddingMin;\r\n        let iterations = maxIterations;\r\n        // Adjust justification width until the right margin is as close as possible to the calculated padding,\r\n        // without going over\r\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\r\n            targetWidth -= actualWidth - maxX;\r\n            paddingMax = paddingMaxCalc(targetWidth);\r\n            paddingMin = paddingMax - (configMaxPadding - configMinPadding);\r\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\r\n            iterations--;\r\n        }\r\n        this.justifyWidth = justifyWidth;\r\n        return this.evaluate();\r\n    }\r\n    /** Calculate the total cost of this formatting decision. */\r\n    evaluate() {\r\n        if (!this.tickContexts)\r\n            return 0;\r\n        const contexts = this.tickContexts;\r\n        const justifyWidth = this.justifyWidth;\r\n        // Calculate available slack per tick context. This works out how much freedom\r\n        // to move a context has in either direction, without affecting other notes.\r\n        this.contextGaps = { total: 0, gaps: [] };\r\n        contexts.list.forEach((tick, index) => {\r\n            if (index === 0)\r\n                return;\r\n            const prevTick = contexts.list[index - 1];\r\n            const prevContext = contexts.map[prevTick];\r\n            const context = contexts.map[tick];\r\n            const prevMetrics = prevContext.getMetrics();\r\n            const currMetrics = context.getMetrics();\r\n            // Calculate X position of right edge of previous note\r\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\r\n            // Calculate X position of left edge of current note\r\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\r\n            const gap = insideLeftEdge - insideRightEdge;\r\n            this.contextGaps.total += gap;\r\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\r\n            // Tell the tick contexts how much they can reposition themselves.\r\n            context.getFormatterMetrics().freedom.left = gap;\r\n            prevContext.getFormatterMetrics().freedom.right = gap;\r\n        });\r\n        // Calculate mean distance in each voice for each duration type, then calculate\r\n        // how far each note is from the mean.\r\n        this.durationStats = {};\r\n        const durationStats = this.durationStats;\r\n        function updateStats(duration, space) {\r\n            const stats = durationStats[duration];\r\n            if (stats === undefined) {\r\n                durationStats[duration] = { mean: space, count: 1 };\r\n            }\r\n            else {\r\n                stats.count += 1;\r\n                stats.mean = (stats.mean + space) / 2;\r\n            }\r\n        }\r\n        this.voices.forEach((voice) => {\r\n            voice.getTickables().forEach((note, i, notes) => {\r\n                const duration = note.getTicks().clone().simplify().toString();\r\n                const metrics = note.getMetrics();\r\n                const formatterMetrics = note.getFormatterMetrics();\r\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\r\n                let space = 0;\r\n                if (i < notes.length - 1) {\r\n                    const rightNote = notes[i + 1];\r\n                    const rightMetrics = rightNote.getMetrics();\r\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\r\n                    space = rightNoteEdge - leftNoteEdge;\r\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\r\n                    rightNote.getFormatterMetrics().freedom.left = space;\r\n                }\r\n                else {\r\n                    space = justifyWidth - leftNoteEdge;\r\n                    formatterMetrics.space.used = justifyWidth - note.getX();\r\n                }\r\n                formatterMetrics.freedom.right = space;\r\n                updateStats(duration, formatterMetrics.space.used);\r\n            });\r\n        });\r\n        // Calculate how much each note deviates from the mean. Loss function is square\r\n        // root of the sum of squared deviations.\r\n        let totalDeviation = 0;\r\n        this.voices.forEach((voice) => {\r\n            voice.getTickables().forEach((note) => {\r\n                const duration = note.getTicks().clone().simplify().toString();\r\n                const metrics = note.getFormatterMetrics();\r\n                metrics.space.mean = durationStats[duration].mean;\r\n                metrics.duration = duration;\r\n                metrics.iterations += 1;\r\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\r\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\r\n            });\r\n        });\r\n        this.totalCost = Math.sqrt(totalDeviation);\r\n        this.lossHistory.push(this.totalCost);\r\n        return this.totalCost;\r\n    }\r\n    /**\r\n     * Run a single iteration of rejustification. At a high level, this method calculates\r\n     * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\r\n     * attempt to reduce the cost. You can call this method multiple times until it finds\r\n     * and oscillates around a global minimum.\r\n     * @param alpha the \"learning rate\" for the formatter. It determines how much of a shift\r\n     * the formatter should make based on its cost function.\r\n     */\r\n    tune(options) {\r\n        var _a;\r\n        const contexts = this.tickContexts;\r\n        if (!contexts) {\r\n            return 0;\r\n        }\r\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\r\n        // Move `current` tickcontext by `shift` pixels, and adjust the freedom\r\n        // on adjacent tickcontexts.\r\n        function move(current, shift, prev, next) {\r\n            current.setX(current.getX() + shift);\r\n            current.getFormatterMetrics().freedom.left += shift;\r\n            current.getFormatterMetrics().freedom.right -= shift;\r\n            if (prev)\r\n                prev.getFormatterMetrics().freedom.right += shift;\r\n            if (next)\r\n                next.getFormatterMetrics().freedom.left -= shift;\r\n        }\r\n        let shift = 0;\r\n        this.totalShift = 0;\r\n        contexts.list.forEach((tick, index, list) => {\r\n            const context = contexts.map[tick];\r\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\r\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\r\n            move(context, shift, prevContext, nextContext);\r\n            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\r\n            if (cost > 0) {\r\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\r\n            }\r\n            else if (cost < 0) {\r\n                if (nextContext) {\r\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\r\n                }\r\n                else {\r\n                    shift = 0;\r\n                }\r\n            }\r\n            shift *= alpha;\r\n            this.totalShift += shift;\r\n        });\r\n        return this.evaluate();\r\n    }\r\n    /**\r\n     * This is the top-level call for all formatting logic completed\r\n     * after `x` *and* `y` values have been computed for the notes\r\n     * in the voices.\r\n     */\r\n    postFormat() {\r\n        const postFormatContexts = (contexts) => contexts.list.forEach((tick) => contexts.map[tick].postFormat());\r\n        if (this.modifierContexts)\r\n            postFormatContexts(this.modifierContexts);\r\n        if (this.tickContexts)\r\n            postFormatContexts(this.tickContexts);\r\n        return this;\r\n    }\r\n    /**\r\n     * Take all `voices` and create `ModifierContext`s out of them. This tells\r\n     * the formatters that the voices belong on a single stave.\r\n     */\r\n    joinVoices(voices) {\r\n        this.createModifierContexts(voices);\r\n        this.hasMinTotalWidth = false;\r\n        return this;\r\n    }\r\n    /**\r\n     * Align rests in voices, justify the contexts, and position the notes\r\n     * so voices are aligned and ready to render onto the stave. This method\r\n     * mutates the `x` positions of all tickables in `voices`.\r\n     *\r\n     * Voices are full justified to fit in `justifyWidth` pixels.\r\n     *\r\n     * Set `options.context` to the rendering context. Set `options.align_rests`\r\n     * to true to enable rest alignment.\r\n     */\r\n    format(voices, justifyWidth, options) {\r\n        const opts = Object.assign({ align_rests: false }, options);\r\n        this.voices = voices;\r\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\r\n        if (softmaxFactor) {\r\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\r\n        }\r\n        this.alignRests(voices, opts.align_rests);\r\n        this.createTickContexts(voices);\r\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\r\n        // Only postFormat if a stave was supplied for y value formatting\r\n        if (opts.stave)\r\n            this.postFormat();\r\n        return this;\r\n    }\r\n    // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\r\n    formatToStave(voices, stave, optionsParam) {\r\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\r\n        // eslint-disable-next-line\r\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\r\n        L('Formatting voices to width: ', justifyWidth);\r\n        return this.format(voices, justifyWidth, options);\r\n    }\r\n    getTickContext(tick) {\r\n        var _a;\r\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\r\n    }\r\n}\r\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\r\nFormatter.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Author: Joshua Koo / @zz85\r\n// Author: @incompleteopus\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\n/** Fraction represents a rational number. */\r\nexport class Fraction {\r\n    /** Set the numerator and denominator. */\r\n    constructor(numerator, denominator) {\r\n        this.numerator = 1;\r\n        this.denominator = 1;\r\n        this.set(numerator, denominator);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Fraction;\r\n    }\r\n    /**\r\n     * GCD: Greatest common divisor using the Euclidean algorithm.\r\n     * Note: GCD(0, 0) => 0 and GCD(0, n) => n.\r\n     */\r\n    static GCD(a, b) {\r\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\r\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\r\n        }\r\n        let t;\r\n        while (b !== 0) {\r\n            t = b;\r\n            b = a % b;\r\n            a = t;\r\n        }\r\n        return a;\r\n    }\r\n    /** LCM: Lowest common multiple. */\r\n    static LCM(a, b) {\r\n        return (a * b) / Fraction.GCD(a, b);\r\n    }\r\n    /** Lowest common multiple for more than two numbers. */\r\n    static LCMM(args) {\r\n        if (args.length === 0) {\r\n            return 0;\r\n        }\r\n        else if (args.length === 1) {\r\n            return args[0];\r\n        }\r\n        else if (args.length === 2) {\r\n            return Fraction.LCM(args[0], args[1]);\r\n        }\r\n        else {\r\n            // args.shift() removes the first number.\r\n            // LCM the first number with the rest of the numbers.\r\n            return Fraction.LCM(args.shift(), Fraction.LCMM(args));\r\n        }\r\n    }\r\n    /** Set the numerator and denominator. */\r\n    set(numerator = 1, denominator = 1) {\r\n        this.numerator = numerator;\r\n        this.denominator = denominator;\r\n        return this;\r\n    }\r\n    /** Return the value of the fraction. */\r\n    value() {\r\n        return this.numerator / this.denominator;\r\n    }\r\n    /** Simplify numerator and denominator using GCD. */\r\n    simplify() {\r\n        let u = this.numerator;\r\n        let d = this.denominator;\r\n        const gcd = Fraction.GCD(u, d);\r\n        u /= gcd;\r\n        d /= gcd;\r\n        if (d < 0) {\r\n            d = -d;\r\n            u = -u;\r\n        }\r\n        return this.set(u, d);\r\n    }\r\n    /** Add value of another fraction. */\r\n    add(param1 = 0, param2 = 1) {\r\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\r\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\r\n        const a = lcm / this.denominator;\r\n        const b = lcm / otherDenominator;\r\n        const u = this.numerator * a + otherNumerator * b;\r\n        return this.set(u, lcm);\r\n    }\r\n    /** Substract value of another fraction. */\r\n    subtract(param1 = 0, param2 = 1) {\r\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\r\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\r\n        const a = lcm / this.denominator;\r\n        const b = lcm / otherDenominator;\r\n        const u = this.numerator * a - otherNumerator * b;\r\n        return this.set(u, lcm);\r\n    }\r\n    /** Multiply by value of another fraction. */\r\n    multiply(param1 = 1, param2 = 1) {\r\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\r\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\r\n    }\r\n    /** Divide by value of another Fraction. */\r\n    divide(param1 = 1, param2 = 1) {\r\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\r\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\r\n    }\r\n    /** Simplify both sides and check if they are equal. */\r\n    equals(compare) {\r\n        const a = Fraction.__staticFractionA.copy(compare).simplify();\r\n        const b = Fraction.__staticFractionB.copy(this).simplify();\r\n        return a.numerator === b.numerator && a.denominator === b.denominator;\r\n    }\r\n    /** Greater than operator. */\r\n    greaterThan(compare) {\r\n        const a = Fraction.__staticFractionB.copy(this);\r\n        a.subtract(compare);\r\n        return a.numerator > 0;\r\n    }\r\n    /** Greater than or equals operator. */\r\n    greaterThanEquals(compare) {\r\n        const a = Fraction.__staticFractionB.copy(this);\r\n        a.subtract(compare);\r\n        return a.numerator >= 0;\r\n    }\r\n    /** Less than operator. */\r\n    lessThan(compare) {\r\n        return !this.greaterThanEquals(compare);\r\n    }\r\n    /** Less than or equals operator. */\r\n    lessThanEquals(compare) {\r\n        return !this.greaterThan(compare);\r\n    }\r\n    /** Return a new copy with current values. */\r\n    clone() {\r\n        return new Fraction(this.numerator, this.denominator);\r\n    }\r\n    /** Copy value of another fraction. */\r\n    copy(other) {\r\n        if (typeof other === 'number') {\r\n            return this.set(other, 1);\r\n        }\r\n        else {\r\n            return this.set(other.numerator, other.denominator);\r\n        }\r\n    }\r\n    /** Return the integer component (eg. 5/2 => 2). */\r\n    quotient() {\r\n        return Math.floor(this.numerator / this.denominator);\r\n    }\r\n    /** Return the remainder component (eg. 5/2 => 1). */\r\n    remainder() {\r\n        return this.numerator % this.denominator;\r\n    }\r\n    /** Calculate absolute value. */\r\n    makeAbs() {\r\n        this.denominator = Math.abs(this.denominator);\r\n        this.numerator = Math.abs(this.numerator);\r\n        return this;\r\n    }\r\n    /** Return a raw string representation (eg. \"5/2\"). */\r\n    toString() {\r\n        return `${this.numerator}/${this.denominator}`;\r\n    }\r\n    /** Return a simplified string respresentation. */\r\n    toSimplifiedString() {\r\n        return Fraction.__staticFractionTmp.copy(this).simplify().toString();\r\n    }\r\n    /** Return string representation in mixed form. */\r\n    toMixedString() {\r\n        let s = '';\r\n        const q = this.quotient();\r\n        const f = Fraction.__staticFractionTmp.copy(this);\r\n        if (q < 0) {\r\n            f.makeAbs();\r\n        }\r\n        if (q !== 0) {\r\n            s += q;\r\n            if (f.numerator !== 0) {\r\n                s += ` ${f.toSimplifiedString()}`;\r\n            }\r\n        }\r\n        else if (f.numerator === 0) {\r\n            s = '0';\r\n        }\r\n        else {\r\n            s = f.toSimplifiedString();\r\n        }\r\n        return s;\r\n    }\r\n    /** Parse a fraction string. */\r\n    parse(str) {\r\n        const i = str.split('/');\r\n        const n = parseInt(i[0], 10);\r\n        const d = i[1] ? parseInt(i[1], 10) : 1;\r\n        return this.set(n, d);\r\n    }\r\n}\r\n// Cached objects for comparisons.\r\nFraction.__staticFractionA = new Fraction();\r\nFraction.__staticFractionB = new Fraction();\r\nFraction.__staticFractionTmp = new Fraction();\r\n/** Helper function to extract the numerator and denominator from another fraction. */\r\nfunction getNumeratorAndDenominator(n, d = 1) {\r\n    if (typeof n === 'number') {\r\n        // Both params are numbers, so we return them as [numerator, denominator].\r\n        return [n, d];\r\n    }\r\n    else {\r\n        // First param is a Fraction object. We ignore the second param.\r\n        return [n.numerator, n.denominator];\r\n    }\r\n}\r\n","// VexFlow - Music Engraving for HTML5\r\n// Copyright Mohit Muthanna 2010\r\n// Author Larry Kuhns 2013\r\n// Class to draws string numbers into the notation.\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Modifier, ModifierPosition } from './modifier';\r\nimport { Tables } from './tables';\r\nimport { TextFormatter } from './textformatter';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class FretHandFinger extends Modifier {\r\n    constructor(finger) {\r\n        super();\r\n        this.finger = finger;\r\n        this.width = 7;\r\n        this.position = Modifier.Position.LEFT; // Default position above stem or note head\r\n        this.x_shift = 0;\r\n        this.y_shift = 0;\r\n        this.x_offset = 0; // Horizontal offset from default\r\n        this.y_offset = 0; // Vertical offset from default\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.FretHandFinger;\r\n    }\r\n    // Arrange fingerings inside a ModifierContext.\r\n    static format(nums, state) {\r\n        const { left_shift, right_shift } = state;\r\n        const num_spacing = 1;\r\n        if (!nums || nums.length === 0)\r\n            return false;\r\n        const nums_list = [];\r\n        let prev_note = null;\r\n        let shiftLeft = 0;\r\n        let shiftRight = 0;\r\n        for (let i = 0; i < nums.length; ++i) {\r\n            const num = nums[i];\r\n            const note = num.getNote();\r\n            const pos = num.getPosition();\r\n            const index = num.checkIndex();\r\n            const props = note.getKeyProps()[index];\r\n            const textFormatter = TextFormatter.create(num.textFont);\r\n            const textHeight = textFormatter.maxHeight;\r\n            if (num.position === ModifierPosition.ABOVE) {\r\n                state.top_text_line += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\r\n            }\r\n            if (num.position === ModifierPosition.BELOW) {\r\n                state.text_line += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\r\n            }\r\n            if (note !== prev_note) {\r\n                for (let n = 0; n < note.keys.length; ++n) {\r\n                    if (left_shift === 0) {\r\n                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\r\n                    }\r\n                    if (right_shift === 0) {\r\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\r\n                    }\r\n                }\r\n                prev_note = note;\r\n            }\r\n            nums_list.push({\r\n                note,\r\n                num,\r\n                pos,\r\n                line: props.line,\r\n                shiftL: shiftLeft,\r\n                shiftR: shiftRight,\r\n            });\r\n        }\r\n        // Sort fingernumbers by line number.\r\n        nums_list.sort((a, b) => b.line - a.line);\r\n        let numShiftL = 0;\r\n        let numShiftR = 0;\r\n        let xWidthL = 0;\r\n        let xWidthR = 0;\r\n        let lastLine = null;\r\n        let lastNote = null;\r\n        for (let i = 0; i < nums_list.length; ++i) {\r\n            let num_shift = 0;\r\n            const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\r\n            // Reset the position of the string number every line.\r\n            if (line !== lastLine || note !== lastNote) {\r\n                numShiftL = left_shift + shiftL;\r\n                numShiftR = right_shift + shiftR;\r\n            }\r\n            const numWidth = num.getWidth() + num_spacing;\r\n            if (pos === Modifier.Position.LEFT) {\r\n                num.setXShift(left_shift + numShiftL);\r\n                num_shift = left_shift + numWidth; // spacing\r\n                xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\r\n            }\r\n            else if (pos === Modifier.Position.RIGHT) {\r\n                num.setXShift(numShiftR);\r\n                num_shift = shiftRight + numWidth; // spacing\r\n                xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\r\n            }\r\n            lastLine = line;\r\n            lastNote = note;\r\n        }\r\n        state.left_shift += xWidthL;\r\n        state.right_shift += xWidthR;\r\n        return true;\r\n    }\r\n    static easyScoreHook({ fingerings } = {}, note, builder) {\r\n        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {\r\n            const split = fingeringString.trim().split('.');\r\n            const params = { number: split[0] };\r\n            if (split[1])\r\n                params.position = split[1];\r\n            return builder.getFactory().Fingering(params);\r\n        }).map((fingering, index) => note.addModifier(fingering, index));\r\n    }\r\n    setFretHandFinger(finger) {\r\n        this.finger = finger;\r\n        return this;\r\n    }\r\n    getFretHandFinger() {\r\n        return this.finger;\r\n    }\r\n    setOffsetX(x) {\r\n        this.x_offset = x;\r\n        return this;\r\n    }\r\n    setOffsetY(y) {\r\n        this.y_offset = y;\r\n        return this;\r\n    }\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const start = note.getModifierStartXY(this.position, this.index);\r\n        let dot_x = start.x + this.x_shift + this.x_offset;\r\n        let dot_y = start.y + this.y_shift + this.y_offset + 5;\r\n        switch (this.position) {\r\n            case Modifier.Position.ABOVE:\r\n                dot_x -= 4;\r\n                dot_y -= 12;\r\n                break;\r\n            case Modifier.Position.BELOW:\r\n                dot_x -= 2;\r\n                dot_y += 10;\r\n                break;\r\n            case Modifier.Position.LEFT:\r\n                dot_x -= this.width;\r\n                break;\r\n            case Modifier.Position.RIGHT:\r\n                dot_x += 1;\r\n                break;\r\n            default:\r\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\r\n        }\r\n        ctx.save();\r\n        ctx.setFont(this.textFont);\r\n        ctx.fillText('' + this.finger, dot_x, dot_y);\r\n        ctx.restore();\r\n    }\r\n}\r\nFretHandFinger.TEXT_FONT = {\r\n    family: Font.SANS_SERIF,\r\n    size: 9,\r\n    weight: FontWeight.BOLD,\r\n    style: FontStyle.NORMAL,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\nimport { StemmableNote } from './stemmablenote';\r\nimport { Category, isAnnotation } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\r\nexport class GhostNote extends StemmableNote {\r\n    static get CATEGORY() {\r\n        return Category.GhostNote;\r\n    }\r\n    constructor(parameter) {\r\n        if (!parameter) {\r\n            throw new RuntimeError('BadArguments', ERROR_MSG);\r\n        }\r\n        let noteStruct;\r\n        if (typeof parameter === 'string') {\r\n            // Preserve backwards-compatibility\r\n            noteStruct = { duration: parameter };\r\n        }\r\n        else if (typeof parameter === 'object') {\r\n            noteStruct = parameter;\r\n        }\r\n        else {\r\n            throw new RuntimeError('BadArguments', ERROR_MSG);\r\n        }\r\n        super(noteStruct);\r\n        // Note properties\r\n        this.setWidth(0);\r\n    }\r\n    /**\r\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\r\n     */\r\n    isRest() {\r\n        return true;\r\n    }\r\n    setStave(stave) {\r\n        super.setStave(stave);\r\n        return this;\r\n    }\r\n    /* Overridden to ignore */\r\n    // eslint-disable-next-line\r\n    addToModifierContext(mc) {\r\n        // DO NOTHING.\r\n        return this;\r\n    }\r\n    preFormat() {\r\n        this.preFormatted = true;\r\n        return this;\r\n    }\r\n    draw() {\r\n        // Draw Annotations\r\n        this.setRendered();\r\n        for (let i = 0; i < this.modifiers.length; ++i) {\r\n            const modifier = this.modifiers[i];\r\n            if (isAnnotation(modifier)) {\r\n                modifier.setContext(this.getContext());\r\n                modifier.drawWithStyle();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { BoundingBox } from './boundingbox';\r\nimport { BoundingBoxComputation } from './boundingboxcomputation';\r\nimport { Element } from './element';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { defined, RuntimeError } from './util';\r\nexport var OutlineCode;\r\n(function (OutlineCode) {\r\n    OutlineCode[OutlineCode[\"MOVE\"] = 0] = \"MOVE\";\r\n    OutlineCode[OutlineCode[\"LINE\"] = 1] = \"LINE\";\r\n    OutlineCode[OutlineCode[\"QUADRATIC\"] = 2] = \"QUADRATIC\";\r\n    OutlineCode[OutlineCode[\"BEZIER\"] = 3] = \"BEZIER\";\r\n})(OutlineCode || (OutlineCode = {}));\r\nclass GlyphCacheEntry {\r\n    constructor(fontStack, code, category) {\r\n        this.point = -1;\r\n        this.metrics = Glyph.loadMetrics(fontStack, code, category);\r\n        this.bbox = Glyph.getOutlineBoundingBox(this.metrics.outline, this.metrics.scale, this.metrics.x_shift, this.metrics.y_shift);\r\n        if (category) {\r\n            this.point = Glyph.lookupFontMetric(this.metrics.font, category, code, 'point', -1);\r\n        }\r\n    }\r\n}\r\nclass GlyphCache {\r\n    constructor() {\r\n        this.cache = new Map();\r\n    }\r\n    lookup(code, category) {\r\n        let entries = this.cache.get(Glyph.CURRENT_CACHE_KEY);\r\n        if (entries === undefined) {\r\n            entries = {};\r\n            this.cache.set(Glyph.CURRENT_CACHE_KEY, entries);\r\n        }\r\n        const key = category ? `${code}%${category}` : code;\r\n        let entry = entries[key];\r\n        if (entry === undefined) {\r\n            entry = new GlyphCacheEntry(Glyph.MUSIC_FONT_STACK, code, category);\r\n            entries[key] = entry;\r\n        }\r\n        return entry;\r\n    }\r\n}\r\nclass GlyphOutline {\r\n    constructor(outline, originX, originY, scale) {\r\n        this.outline = outline;\r\n        this.originX = originX;\r\n        this.originY = originY;\r\n        this.scale = scale;\r\n        this.i = 0;\r\n        this.precision = 1;\r\n        // Automatically assign private properties: this.outline, this.originX, this.originY, and this.scale.\r\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\r\n    }\r\n    done() {\r\n        return this.i >= this.outline.length;\r\n    }\r\n    next() {\r\n        return Math.round((this.outline[this.i++] * this.precision) / this.precision);\r\n    }\r\n    nextX() {\r\n        return Math.round((this.originX + this.outline[this.i++] * this.scale) * this.precision) / this.precision;\r\n    }\r\n    nextY() {\r\n        return Math.round((this.originY - this.outline[this.i++] * this.scale) * this.precision) / this.precision;\r\n    }\r\n    static parse(str) {\r\n        const result = [];\r\n        const parts = str.split(' ');\r\n        let i = 0;\r\n        while (i < parts.length) {\r\n            switch (parts[i++]) {\r\n                case 'm':\r\n                    result.push(OutlineCode.MOVE, parseInt(parts[i++]), parseInt(parts[i++]));\r\n                    break;\r\n                case 'l':\r\n                    result.push(OutlineCode.LINE, parseInt(parts[i++]), parseInt(parts[i++]));\r\n                    break;\r\n                case 'q':\r\n                    result.push(OutlineCode.QUADRATIC, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));\r\n                    break;\r\n                case 'b':\r\n                    result.push(OutlineCode.BEZIER, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));\r\n                    break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport class Glyph extends Element {\r\n    /**\r\n     * @param code\r\n     * @param point\r\n     * @param options\r\n     */\r\n    constructor(code, point, options) {\r\n        super();\r\n        //////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // INSTANCE MEMBERS\r\n        this.bbox = new BoundingBox(0, 0, 0, 0);\r\n        this.topGlyphs = [];\r\n        this.botGlyphs = [];\r\n        this.options = {};\r\n        this.scale = 1;\r\n        this.code = code;\r\n        this.point = point;\r\n        this.originShift = { x: 0, y: 0 };\r\n        this.x_shift = 0;\r\n        this.y_shift = 0;\r\n        if (options) {\r\n            this.setOptions(options);\r\n        }\r\n        else {\r\n            this.reset();\r\n        }\r\n    }\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // STATIC MEMBERS\r\n    static get CATEGORY() {\r\n        return Category.Glyph;\r\n    }\r\n    /**\r\n     * Pass a key of the form `glyphs.{category}.{code}.{key}` to Font.lookupMetric(). If the initial lookup fails,\r\n     * try again with the path `glyphs.{category}.{key}`. If the second lookup fails, return the defaultValue.\r\n     *\r\n     * @param font\r\n     * @param category any metric path under 'glyphs', so 'stem.up' could resolve to glyphs.stem.up.shiftX, glyphs.stem.up.shiftY, etc.\r\n     * @param code\r\n     * @param key\r\n     * @param defaultValue\r\n     */\r\n    static lookupFontMetric(font, category, code, key, defaultValue) {\r\n        let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);\r\n        if (value === undefined) {\r\n            // The first lookup failed, so we omit .${code} and try again (with a defaultValue this time).\r\n            value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);\r\n        }\r\n        return value;\r\n    }\r\n    static lookupGlyph(fontStack, code) {\r\n        defined(fontStack, 'BadFontStack', 'Font stack is misconfigured');\r\n        let glyph;\r\n        let font;\r\n        for (let i = 0; i < fontStack.length; i++) {\r\n            font = fontStack[i];\r\n            glyph = font.getGlyphs()[code];\r\n            if (glyph)\r\n                return { glyph, font };\r\n        }\r\n        throw new RuntimeError('BadGlyph', `Glyph ${code} does not exist in font.`);\r\n    }\r\n    static loadMetrics(fontStack, code, category) {\r\n        const { glyph, font } = Glyph.lookupGlyph(fontStack, code);\r\n        if (!glyph.o)\r\n            throw new RuntimeError('BadGlyph', `Glyph ${code} has no outline defined.`);\r\n        let x_shift = 0;\r\n        let y_shift = 0;\r\n        let scale = 1;\r\n        if (category && font) {\r\n            x_shift = Glyph.lookupFontMetric(font, category, code, 'shiftX', 0);\r\n            y_shift = Glyph.lookupFontMetric(font, category, code, 'shiftY', 0);\r\n            scale = Glyph.lookupFontMetric(font, category, code, 'scale', 1);\r\n        }\r\n        const x_min = glyph.x_min;\r\n        const x_max = glyph.x_max;\r\n        const ha = glyph.ha;\r\n        if (!glyph.cached_outline) {\r\n            glyph.cached_outline = GlyphOutline.parse(glyph.o);\r\n        }\r\n        return {\r\n            x_min,\r\n            x_max,\r\n            x_shift,\r\n            y_shift,\r\n            scale,\r\n            ha,\r\n            outline: glyph.cached_outline,\r\n            font,\r\n            width: x_max - x_min,\r\n            height: ha,\r\n        };\r\n    }\r\n    /**\r\n     * Renders glyphs from the default font stack.\r\n     *\r\n     * @param ctx Canvas or SVG context\r\n     * @param x_pos x coordinate\r\n     * @param y_pos y coordinate\r\n     * @param point the point size of the font\r\n     * @param code the glyph code in font.getGlyphs()\r\n     * @param options\r\n     * @returns\r\n     */\r\n    static renderGlyph(ctx, x_pos, y_pos, point, code, options) {\r\n        var _a;\r\n        const data = Glyph.cache.lookup(code, options === null || options === void 0 ? void 0 : options.category);\r\n        const metrics = data.metrics;\r\n        if (data.point != -1) {\r\n            point = data.point;\r\n        }\r\n        const customScale = (_a = options === null || options === void 0 ? void 0 : options.scale) !== null && _a !== void 0 ? _a : 1;\r\n        const scale = ((point * 72.0) / (metrics.font.getResolution() * 100.0)) * metrics.scale * customScale;\r\n        Glyph.renderOutline(ctx, metrics.outline, scale, x_pos + metrics.x_shift * customScale, y_pos + metrics.y_shift * customScale);\r\n        return metrics;\r\n    }\r\n    static renderOutline(ctx, outline, scale, x_pos, y_pos) {\r\n        const go = new GlyphOutline(outline, x_pos, y_pos, scale);\r\n        ctx.beginPath();\r\n        let x, y;\r\n        while (!go.done()) {\r\n            switch (go.next()) {\r\n                case OutlineCode.MOVE:\r\n                    ctx.moveTo(go.nextX(), go.nextY());\r\n                    break;\r\n                case OutlineCode.LINE:\r\n                    ctx.lineTo(go.nextX(), go.nextY());\r\n                    break;\r\n                case OutlineCode.QUADRATIC:\r\n                    x = go.nextX();\r\n                    y = go.nextY();\r\n                    ctx.quadraticCurveTo(go.nextX(), go.nextY(), x, y);\r\n                    break;\r\n                case OutlineCode.BEZIER:\r\n                    x = go.nextX();\r\n                    y = go.nextY();\r\n                    ctx.bezierCurveTo(go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\r\n                    break;\r\n            }\r\n        }\r\n        ctx.fill();\r\n    }\r\n    static getOutlineBoundingBox(outline, scale, x_pos, y_pos) {\r\n        const go = new GlyphOutline(outline, x_pos, y_pos, scale);\r\n        const bboxComp = new BoundingBoxComputation();\r\n        // (penX, penY) hold the pen position: the start of each stroke.\r\n        let penX = x_pos;\r\n        let penY = y_pos;\r\n        let x, y;\r\n        while (!go.done()) {\r\n            switch (go.next()) {\r\n                case OutlineCode.MOVE:\r\n                    // Note that we don't add any points to the bounding box until a srroke is actually drawn.\r\n                    penX = go.nextX();\r\n                    penY = go.nextY();\r\n                    break;\r\n                case OutlineCode.LINE:\r\n                    bboxComp.addPoint(penX, penY);\r\n                    penX = go.nextX();\r\n                    penY = go.nextY();\r\n                    bboxComp.addPoint(penX, penY);\r\n                    break;\r\n                case OutlineCode.QUADRATIC:\r\n                    x = go.nextX();\r\n                    y = go.nextY();\r\n                    bboxComp.addQuadraticCurve(penX, penY, go.nextX(), go.nextY(), x, y);\r\n                    penX = x;\r\n                    penY = y;\r\n                    break;\r\n                case OutlineCode.BEZIER:\r\n                    x = go.nextX();\r\n                    y = go.nextY();\r\n                    bboxComp.addBezierCurve(penX, penY, go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\r\n                    penX = x;\r\n                    penY = y;\r\n                    break;\r\n            }\r\n        }\r\n        return new BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());\r\n    }\r\n    static getWidth(code, point, category) {\r\n        const data = Glyph.cache.lookup(code, category);\r\n        if (data.point != -1) {\r\n            point = data.point;\r\n        }\r\n        const scale = (point * 72) / (data.metrics.font.getResolution() * 100);\r\n        return data.bbox.getW() * scale;\r\n    }\r\n    // eslint-disable-next-line\r\n    draw(...args) {\r\n        // DO NOTHING.\r\n    }\r\n    getCode() {\r\n        return this.code;\r\n    }\r\n    // eslint-disable-next-line\r\n    setOptions(options) {\r\n        this.options = Object.assign(Object.assign({}, this.options), options);\r\n        this.reset();\r\n    }\r\n    setPoint(point) {\r\n        this.point = point;\r\n        return this;\r\n    }\r\n    setStave(stave) {\r\n        this.stave = stave;\r\n        return this;\r\n    }\r\n    getXShift() {\r\n        return this.x_shift;\r\n    }\r\n    setXShift(x_shift) {\r\n        this.x_shift = x_shift;\r\n        return this;\r\n    }\r\n    getYshift() {\r\n        return this.y_shift;\r\n    }\r\n    setYShift(y_shift) {\r\n        this.y_shift = y_shift;\r\n        return this;\r\n    }\r\n    reset() {\r\n        const data = Glyph.cache.lookup(this.code, this.options.category);\r\n        this.metrics = data.metrics;\r\n        // Override point from metrics file\r\n        if (data.point != -1) {\r\n            this.point = data.point;\r\n        }\r\n        this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);\r\n        this.bbox = new BoundingBox(data.bbox.getX() * this.scale, data.bbox.getY() * this.scale, data.bbox.getW() * this.scale, data.bbox.getH() * this.scale);\r\n    }\r\n    checkMetrics() {\r\n        return defined(this.metrics, 'BadGlyph', `Glyph ${this.code} is not initialized.`);\r\n    }\r\n    getMetrics() {\r\n        const metrics = this.checkMetrics();\r\n        const metricsScale = metrics.scale;\r\n        return {\r\n            x_min: metrics.x_min * this.scale * metricsScale,\r\n            x_max: metrics.x_max * this.scale * metricsScale,\r\n            width: this.bbox.getW(),\r\n            height: this.bbox.getH(),\r\n            scale: this.scale * metricsScale,\r\n            x_shift: metrics.x_shift,\r\n            y_shift: metrics.y_shift,\r\n            outline: metrics.outline,\r\n            font: metrics.font,\r\n            ha: metrics.ha,\r\n        };\r\n    }\r\n    setOriginX(x) {\r\n        const { bbox } = this;\r\n        const originX = Math.abs(bbox.getX() / bbox.getW());\r\n        const xShift = (x - originX) * bbox.getW();\r\n        this.originShift.x = -xShift;\r\n    }\r\n    setOriginY(y) {\r\n        const { bbox } = this;\r\n        const originY = Math.abs(bbox.getY() / bbox.getH());\r\n        const yShift = (y - originY) * bbox.getH();\r\n        this.originShift.y = -yShift;\r\n    }\r\n    setOrigin(x, y) {\r\n        this.setOriginX(x);\r\n        this.setOriginY(y);\r\n    }\r\n    render(ctx, x, y) {\r\n        const metrics = this.checkMetrics();\r\n        const outline = metrics.outline;\r\n        const scale = this.scale * metrics.scale;\r\n        this.setRendered();\r\n        this.applyStyle(ctx);\r\n        const xPos = x + this.originShift.x + metrics.x_shift;\r\n        const yPos = y + this.originShift.y + metrics.y_shift;\r\n        Glyph.renderOutline(ctx, outline, scale, xPos, yPos);\r\n        this.restoreStyle(ctx);\r\n    }\r\n    checkStave() {\r\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\r\n    }\r\n    renderToStave(x) {\r\n        const context = this.checkContext();\r\n        const metrics = this.checkMetrics();\r\n        const stave = this.checkStave();\r\n        const outline = metrics.outline;\r\n        const scale = this.scale * metrics.scale;\r\n        this.setRendered();\r\n        this.applyStyle();\r\n        const xPos = x + this.x_shift + metrics.x_shift;\r\n        const yPos = stave.getYForGlyphs() + this.y_shift + metrics.y_shift;\r\n        Glyph.renderOutline(context, outline, scale, xPos, yPos);\r\n        this.restoreStyle();\r\n    }\r\n}\r\nGlyph.cache = new GlyphCache();\r\n// The current cache key for GlyphCache above.\r\n// Computed when Flow.setMusicFont(...) is called.\r\n// It is set to a comma separated list of font names.\r\nGlyph.CURRENT_CACHE_KEY = '';\r\n// Used by the GlyphCache above.\r\n// Set when Flow.setMusicFont(...) is called.\r\nGlyph.MUSIC_FONT_STACK = [];\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\nimport { Note } from './note';\r\nimport { Category } from './typeguard';\r\nexport class GlyphNote extends Note {\r\n    constructor(glyph, noteStruct, options) {\r\n        super(noteStruct);\r\n        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);\r\n        // Note properties\r\n        this.ignore_ticks = this.options.ignoreTicks;\r\n        if (glyph) {\r\n            this.setGlyph(glyph);\r\n        }\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.GlyphNote;\r\n    }\r\n    setGlyph(glyph) {\r\n        this.glyph = glyph;\r\n        this.setWidth(this.glyph.getMetrics().width);\r\n        return this;\r\n    }\r\n    getBoundingBox() {\r\n        return this.glyph.getBoundingBox();\r\n    }\r\n    preFormat() {\r\n        if (!this.preFormatted && this.modifierContext) {\r\n            this.modifierContext.preFormat();\r\n        }\r\n        this.preFormatted = true;\r\n        return this;\r\n    }\r\n    drawModifiers() {\r\n        const ctx = this.checkContext();\r\n        ctx.openGroup('modifiers');\r\n        for (let i = 0; i < this.modifiers.length; i++) {\r\n            const modifier = this.modifiers[i];\r\n            modifier.setContext(ctx);\r\n            modifier.drawWithStyle();\r\n        }\r\n        ctx.closeGroup();\r\n    }\r\n    draw() {\r\n        const stave = this.checkStave();\r\n        const ctx = stave.checkContext();\r\n        this.setRendered();\r\n        ctx.openGroup('glyphNote', this.getAttribute('id'));\r\n        // Context is set when setStave is called on Note\r\n        const glyph = this.glyph;\r\n        if (!glyph.getContext()) {\r\n            glyph.setContext(ctx);\r\n        }\r\n        glyph.setStave(stave);\r\n        glyph.setYShift(stave.getYForLine(this.options.line) - stave.getYForGlyphs());\r\n        const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\r\n        glyph.renderToStave(x);\r\n        this.drawModifiers();\r\n        ctx.closeGroup();\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\nimport { StaveNote } from './stavenote';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class GraceNote extends StaveNote {\r\n    constructor(noteStruct) {\r\n        super(Object.assign({ glyph_font_scale: Tables.NOTATION_FONT_SCALE * GraceNote.SCALE, stroke_px: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\r\n        this.slash = noteStruct.slash || false;\r\n        this.slur = true;\r\n        this.buildNoteHeads();\r\n        this.width = 3;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.GraceNote;\r\n    }\r\n    static get LEDGER_LINE_OFFSET() {\r\n        return 2;\r\n    }\r\n    static get SCALE() {\r\n        return 0.66;\r\n    }\r\n    getStemExtension() {\r\n        if (this.stem_extension_override) {\r\n            return this.stem_extension_override;\r\n        }\r\n        const glyph = this.getGlyph();\r\n        if (glyph) {\r\n            let ret = super.getStemExtension();\r\n            if (glyph.stem) {\r\n                const staveNoteScale = this.getStaveNoteScale();\r\n                ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\r\n            }\r\n            return ret;\r\n        }\r\n        return 0;\r\n    }\r\n    getStaveNoteScale() {\r\n        return this.render_options.glyph_font_scale / Tables.NOTATION_FONT_SCALE;\r\n    }\r\n    draw() {\r\n        super.draw();\r\n        this.setRendered();\r\n        const stem = this.stem;\r\n        if (this.slash && stem) {\r\n            const staveNoteScale = this.getStaveNoteScale();\r\n            // some magic numbers are based on the staveNoteScale 0.66.\r\n            const offsetScale = staveNoteScale / 0.66;\r\n            let slashBBox = undefined;\r\n            const beam = this.beam;\r\n            if (beam) {\r\n                // FIXME: should render slash after beam?\r\n                if (!beam.postFormatted) {\r\n                    beam.postFormat();\r\n                }\r\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\r\n                    stem: 6 * offsetScale,\r\n                    beam: 5 * offsetScale,\r\n                });\r\n            }\r\n            else {\r\n                const stem_direction = this.getStemDirection();\r\n                const noteHeadBounds = this.getNoteHeadBounds();\r\n                const noteStemHeight = stem.getHeight();\r\n                let x = this.getAbsoluteX();\r\n                let y = stem_direction === Stem.DOWN\r\n                    ? noteHeadBounds.y_top - noteStemHeight\r\n                    : noteHeadBounds.y_bottom - noteStemHeight;\r\n                const defaultStemExtention = stem_direction === Stem.DOWN ? this.glyph.stem_down_extension : this.glyph.stem_up_extension;\r\n                let defaultOffsetY = Tables.STEM_HEIGHT;\r\n                defaultOffsetY -= defaultOffsetY / 2.8;\r\n                defaultOffsetY += defaultStemExtention;\r\n                y += defaultOffsetY * staveNoteScale * stem_direction;\r\n                const offsets = stem_direction === Stem.UP\r\n                    ? {\r\n                        x1: 1,\r\n                        y1: 0,\r\n                        x2: 13,\r\n                        y2: -9,\r\n                    }\r\n                    : {\r\n                        x1: -4,\r\n                        y1: 1,\r\n                        x2: 13,\r\n                        y2: 9,\r\n                    };\r\n                x += offsets.x1 * offsetScale;\r\n                y += offsets.y1 * offsetScale;\r\n                slashBBox = {\r\n                    x1: x,\r\n                    y1: y,\r\n                    x2: x + offsets.x2 * offsetScale,\r\n                    y2: y + offsets.y2 * offsetScale,\r\n                };\r\n            }\r\n            // FIXME: avoid staff lines, ledger lines or others.\r\n            const ctx = this.checkContext();\r\n            ctx.save();\r\n            ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\r\n            ctx.beginPath();\r\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\r\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        }\r\n    }\r\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\r\n        const beam = this.beam;\r\n        if (!beam)\r\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\r\n        const beam_slope = beam.slope;\r\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\r\n        const scaleX = isBeamEndNote ? -1 : 1;\r\n        const beam_angle = Math.atan(beam_slope * scaleX);\r\n        // slash line intersecting point on beam.\r\n        const iPointOnBeam = {\r\n            dx: Math.cos(beam_angle) * slashBeamOffset,\r\n            dy: Math.sin(beam_angle) * slashBeamOffset,\r\n        };\r\n        slashStemOffset *= this.getStemDirection();\r\n        const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\r\n        const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\r\n        const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\r\n        const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\r\n        const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\r\n        const stemX = this.getStemX();\r\n        const stem0X = beam.notes[0].getStemX();\r\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\r\n        const ret = {\r\n            x1: stemX - protrusion_stem_dx,\r\n            y1: stemY + slashStemOffset - protrusion_stem_dy,\r\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\r\n            y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\r\n        };\r\n        return ret;\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n//\r\n// This file implements `GraceNoteGroup` which is used to format and\r\n// render grace notes.\r\nimport { Beam } from './beam';\r\nimport { Formatter } from './formatter';\r\nimport { Modifier } from './modifier';\r\nimport { StaveNote } from './stavenote';\r\nimport { StaveTie } from './stavetie';\r\nimport { Tables } from './tables';\r\nimport { TabTie } from './tabtie';\r\nimport { Category, isStaveNote } from './typeguard';\r\nimport { log } from './util';\r\nimport { Voice } from './voice';\r\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (GraceNoteGroup.DEBUG)\r\n        log('Vex.Flow.GraceNoteGroup', args);\r\n}\r\n/** GraceNoteGroup is used to format and render grace notes. */\r\nexport class GraceNoteGroup extends Modifier {\r\n    //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\r\n    constructor(grace_notes, show_slur) {\r\n        super();\r\n        this.preFormatted = false;\r\n        this.position = Modifier.Position.LEFT;\r\n        this.grace_notes = grace_notes;\r\n        this.width = 0;\r\n        this.show_slur = show_slur;\r\n        this.slur = undefined;\r\n        this.voice = new Voice({\r\n            num_beats: 4,\r\n            beat_value: 4,\r\n            resolution: Tables.RESOLUTION,\r\n        }).setStrict(false);\r\n        this.render_options = {\r\n            slur_y_shift: 0,\r\n        };\r\n        this.beams = [];\r\n        this.voice.addTickables(this.grace_notes);\r\n        return this;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.GraceNoteGroup;\r\n    }\r\n    /** Arranges groups inside a `ModifierContext`. */\r\n    static format(gracenote_groups, state) {\r\n        const group_spacing_stave = 4;\r\n        const group_spacing_tab = 0;\r\n        if (!gracenote_groups || gracenote_groups.length === 0)\r\n            return false;\r\n        const group_list = [];\r\n        let prev_note = null;\r\n        let shiftL = 0;\r\n        for (let i = 0; i < gracenote_groups.length; ++i) {\r\n            const gracenote_group = gracenote_groups[i];\r\n            const note = gracenote_group.getNote();\r\n            const is_stavenote = isStaveNote(note);\r\n            const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\r\n            if (is_stavenote && note !== prev_note) {\r\n                // Iterate through all notes to get the displaced pixels\r\n                for (let n = 0; n < note.keys.length; ++n) {\r\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\r\n                }\r\n                prev_note = note;\r\n            }\r\n            group_list.push({ shift: shiftL, gracenote_group, spacing });\r\n        }\r\n        // If first note left shift in case it is displaced\r\n        let group_shift = group_list[0].shift;\r\n        let formatWidth;\r\n        for (let i = 0; i < group_list.length; ++i) {\r\n            const gracenote_group = group_list[i].gracenote_group;\r\n            gracenote_group.preFormat();\r\n            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\r\n            group_shift = Math.max(formatWidth, group_shift);\r\n        }\r\n        for (let i = 0; i < group_list.length; ++i) {\r\n            const gracenote_group = group_list[i].gracenote_group;\r\n            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\r\n            gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift) + StaveNote.minNoteheadPadding);\r\n        }\r\n        state.left_shift += group_shift;\r\n        return true;\r\n    }\r\n    preFormat() {\r\n        if (this.preFormatted)\r\n            return;\r\n        if (!this.formatter) {\r\n            this.formatter = new Formatter();\r\n        }\r\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\r\n        this.setWidth(this.formatter.getMinTotalWidth());\r\n        this.preFormatted = true;\r\n    }\r\n    beamNotes(grace_notes) {\r\n        grace_notes = grace_notes || this.grace_notes;\r\n        if (grace_notes.length > 1) {\r\n            const beam = new Beam(grace_notes);\r\n            beam.render_options.beam_width = 3;\r\n            beam.render_options.partial_beam_length = 4;\r\n            this.beams.push(beam);\r\n        }\r\n        return this;\r\n    }\r\n    setWidth(width) {\r\n        this.width = width;\r\n        return this;\r\n    }\r\n    getWidth() {\r\n        return this.width + StaveNote.minNoteheadPadding;\r\n    }\r\n    getGraceNotes() {\r\n        return this.grace_notes;\r\n    }\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        L('Drawing grace note group for:', note);\r\n        this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\r\n        // Draw grace notes.\r\n        this.grace_notes.forEach((graceNote) => graceNote.setContext(ctx).draw());\r\n        // Draw beams.\r\n        this.beams.forEach((beam) => beam.setContext(ctx).draw());\r\n        if (this.show_slur) {\r\n            // Create and draw slur.\r\n            const is_stavenote = isStaveNote(note);\r\n            const TieClass = is_stavenote ? StaveTie : TabTie;\r\n            this.slur = new TieClass({\r\n                last_note: this.grace_notes[0],\r\n                first_note: note,\r\n                first_indices: [0],\r\n                last_indices: [0],\r\n            });\r\n            this.slur.render_options.cp2 = 12;\r\n            this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\r\n            this.slur.setContext(ctx).draw();\r\n        }\r\n    }\r\n}\r\nGraceNoteGroup.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// @author Balazs Forian-Szabo\r\n//\r\n// ## Description\r\n//\r\n// A basic implementation of grace notes\r\n// to be rendered on a tab stave.\r\n//\r\n// See `tests/gracetabnote_tests.ts` for usage examples.\r\nimport { Font } from './font';\r\nimport { TabNote } from './tabnote';\r\nimport { Category } from './typeguard';\r\nexport class GraceTabNote extends TabNote {\r\n    static get CATEGORY() {\r\n        return Category.GraceTabNote;\r\n    }\r\n    constructor(noteStruct) {\r\n        super(noteStruct, false);\r\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \r\n            // vertical shift from stave line\r\n            y_shift: 0.3, \r\n            // grace glyph scale\r\n            scale: 0.6, \r\n            // grace tablature font\r\n            font: `7.5pt ${Font.SANS_SERIF}` });\r\n        this.updateWidth();\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nexport * from './accidental';\r\nexport * from './annotation';\r\nexport * from './articulation';\r\nexport * from './barnote';\r\nexport * from './beam';\r\nexport * from './bend';\r\nexport * from './boundingbox';\r\nexport * from './boundingboxcomputation';\r\nexport * from './canvascontext';\r\nexport * from './chordsymbol';\r\nexport * from './clef';\r\nexport * from './clefnote';\r\nexport * from './crescendo';\r\nexport * from './curve';\r\nexport * from './dot';\r\nexport * from './easyscore';\r\nexport * from './element';\r\nexport * from './factory';\r\nexport * from './flow';\r\nexport * from './font';\r\n// Do not export './fonts/*' because they are used by the entry/* files.\r\nexport * from './formatter';\r\nexport * from './fraction';\r\nexport * from './frethandfinger';\r\nexport * from './ghostnote';\r\nexport * from './glyph';\r\nexport * from './glyphnote';\r\nexport * from './gracenote';\r\nexport * from './gracenotegroup';\r\nexport * from './gracetabnote';\r\nexport * from './keymanager';\r\nexport * from './keysignature';\r\nexport * from './keysignote';\r\nexport * from './modifier';\r\nexport * from './modifiercontext';\r\nexport * from './multimeasurerest';\r\nexport * from './music';\r\nexport * from './note';\r\nexport * from './notehead';\r\nexport * from './notesubgroup';\r\nexport * from './ornament';\r\nexport * from './parenthesis';\r\nexport * from './parser';\r\nexport * from './pedalmarking';\r\nexport * from './registry';\r\nexport * from './rendercontext';\r\nexport * from './renderer';\r\nexport * from './repeatnote';\r\nexport * from './stave';\r\nexport * from './stavebarline';\r\nexport * from './staveconnector';\r\nexport * from './stavehairpin';\r\nexport * from './staveline';\r\nexport * from './stavemodifier';\r\nexport * from './stavenote';\r\nexport * from './staverepetition';\r\nexport * from './stavesection';\r\nexport * from './stavetempo';\r\nexport * from './stavetext';\r\nexport * from './stavetie';\r\nexport * from './stavevolta';\r\nexport * from './stem';\r\nexport * from './stemmablenote';\r\nexport * from './stringnumber';\r\nexport * from './strokes';\r\nexport * from './svgcontext';\r\nexport * from './system';\r\n// Do not export './tables' because it is internal. Its public API is accessible via Vex.Flow.*.\r\nexport * from './tabnote';\r\nexport * from './tabslide';\r\nexport * from './tabstave';\r\nexport * from './tabtie';\r\nexport * from './textbracket';\r\nexport * from './textdynamics';\r\nexport * from './textformatter';\r\nexport * from './textnote';\r\nexport * from './tickable';\r\nexport * from './tickcontext';\r\nexport * from './timesigglyph';\r\nexport * from './timesignature';\r\nexport * from './timesignote';\r\nexport * from './tremolo';\r\nexport * from './tuning';\r\nexport * from './tuplet';\r\nexport * from './typeguard';\r\nexport * from './util';\r\n// Do not export './version'. It is accessible via Vex.Flow.BUILD.\r\nexport * from './vex';\r\nexport * from './vibrato';\r\nexport * from './vibratobracket';\r\nexport * from './voice';\r\nexport * from './web';\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n//\r\n// This class implements diatonic key management.\r\nimport { Music } from './music';\r\nimport { RuntimeError } from './util';\r\nexport class KeyManager {\r\n    constructor(key) {\r\n        this.music = new Music();\r\n        this.setKey(key);\r\n    }\r\n    setKey(key) {\r\n        this.key = key;\r\n        this.reset();\r\n        return this;\r\n    }\r\n    getKey() {\r\n        return this.key;\r\n    }\r\n    reset() {\r\n        this.keyParts = this.music.getKeyParts(this.key);\r\n        this.keyString = this.keyParts.root;\r\n        if (this.keyParts.accidental)\r\n            this.keyString += this.keyParts.accidental;\r\n        const is_supported_type = Music.scaleTypes[this.keyParts.type];\r\n        if (!is_supported_type) {\r\n            throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\r\n        }\r\n        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);\r\n        this.scaleMap = {};\r\n        this.scaleMapByValue = {};\r\n        this.originalScaleMapByValue = {};\r\n        const noteLocation = Music.root_indices[this.keyParts.root];\r\n        for (let i = 0; i < Music.roots.length; ++i) {\r\n            const index = (noteLocation + i) % Music.roots.length;\r\n            const rootName = Music.roots[index];\r\n            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\r\n            this.scaleMap[rootName] = noteName;\r\n            this.scaleMapByValue[this.scale[i]] = noteName;\r\n            this.originalScaleMapByValue[this.scale[i]] = noteName;\r\n        }\r\n        return this;\r\n    }\r\n    getAccidental(key) {\r\n        const root = this.music.getKeyParts(key).root;\r\n        const parts = this.music.getNoteParts(this.scaleMap[root]);\r\n        return {\r\n            note: this.scaleMap[root],\r\n            accidental: parts.accidental,\r\n        };\r\n    }\r\n    selectNote(note) {\r\n        note = note.toLowerCase();\r\n        const parts = this.music.getNoteParts(note);\r\n        // First look for matching note in our altered scale\r\n        const scaleNote = this.scaleMap[parts.root];\r\n        const modparts = this.music.getNoteParts(scaleNote);\r\n        if (scaleNote === note) {\r\n            return {\r\n                note: scaleNote,\r\n                accidental: parts.accidental,\r\n                change: false,\r\n            };\r\n        }\r\n        // Then search for a note of equivalent value in our altered scale\r\n        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\r\n        if (valueNote != null) {\r\n            return {\r\n                note: valueNote,\r\n                accidental: this.music.getNoteParts(valueNote).accidental,\r\n                change: false,\r\n            };\r\n        }\r\n        // Then search for a note of equivalent value in the original scale\r\n        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\r\n        if (originalValueNote != null) {\r\n            this.scaleMap[modparts.root] = originalValueNote;\r\n            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\r\n            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\r\n            return {\r\n                note: originalValueNote,\r\n                accidental: this.music.getNoteParts(originalValueNote).accidental,\r\n                change: true,\r\n            };\r\n        }\r\n        // Then try to unmodify a currently modified note.\r\n        if (modparts.root === note) {\r\n            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\r\n            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\r\n            this.scaleMap[modparts.root] = modparts.root;\r\n            return {\r\n                note: modparts.root,\r\n                accidental: undefined,\r\n                change: true,\r\n            };\r\n        }\r\n        // Last resort -- shitshoot\r\n        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\r\n        this.scaleMapByValue[this.music.getNoteValue(note)] = note;\r\n        delete this.scaleMap[modparts.root];\r\n        this.scaleMap[modparts.root] = note;\r\n        return {\r\n            note,\r\n            accidental: parts.accidental,\r\n            change: true,\r\n        };\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Cyril Silverman\r\n//\r\n// ## Description\r\n//\r\n// This file implements key signatures. A key signature sits on a stave\r\n// and indicates the notes with implicit accidentals.\r\nimport { Glyph } from './glyph';\r\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { defined } from './util';\r\nexport class KeySignature extends StaveModifier {\r\n    // Create a new Key Signature based on a `key_spec`\r\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\r\n        super();\r\n        this.accList = [];\r\n        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\r\n        this.setPosition(StaveModifierPosition.BEGIN);\r\n        this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\r\n        this.glyphs = [];\r\n        this.xPositions = []; // relative to this.x\r\n        this.paddingForced = false;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.KeySignature;\r\n    }\r\n    // Add an accidental glyph to the `KeySignature` instance which represents\r\n    // the provided `acc`. If `nextAcc` is also provided, the appropriate\r\n    // spacing will be included in the glyph's position\r\n    convertToGlyph(acc, nextAcc) {\r\n        const accGlyphData = Tables.accidentalCodes(acc.type);\r\n        const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\r\n        // Determine spacing between current accidental and the next accidental\r\n        let extraWidth = 1;\r\n        if (acc.type === 'n' && nextAcc) {\r\n            const spacing = KeySignature.accidentalSpacing[nextAcc.type];\r\n            if (spacing) {\r\n                const isAbove = nextAcc.line >= acc.line;\r\n                extraWidth = isAbove ? spacing.above : spacing.below;\r\n            }\r\n        }\r\n        // Place the glyph on the stave\r\n        this.placeGlyphOnLine(glyph, this.checkStave(), acc.line);\r\n        this.glyphs.push(glyph);\r\n        const xPosition = this.xPositions[this.xPositions.length - 1];\r\n        const glyphWidth = glyph.getMetrics().width + extraWidth;\r\n        // Store the next accidental's x position\r\n        this.xPositions.push(xPosition + glyphWidth);\r\n        // Expand size of key signature\r\n        this.width += glyphWidth;\r\n    }\r\n    // Cancel out a key signature provided in the `spec` parameter. This will\r\n    // place appropriate natural accidentals before the key signature.\r\n    cancelKey(spec) {\r\n        this.formatted = false;\r\n        this.cancelKeySpec = spec;\r\n        return this;\r\n    }\r\n    convertToCancelAccList(spec) {\r\n        // Get the accidental list for the cancelled key signature\r\n        const cancel_accList = Tables.keySignature(spec);\r\n        // If the cancelled key has a different accidental type, ie: # vs b\r\n        const different_types = this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\r\n        // Determine how many naturals needed to add\r\n        const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\r\n        // Return if no naturals needed\r\n        if (naturals < 1)\r\n            return undefined;\r\n        // Get the line position for each natural\r\n        const cancelled = [];\r\n        for (let i = 0; i < naturals; i++) {\r\n            let index = i;\r\n            if (!different_types) {\r\n                index = cancel_accList.length - naturals + i;\r\n            }\r\n            const acc = cancel_accList[index];\r\n            cancelled.push({ type: 'n', line: acc.line });\r\n        }\r\n        // Combine naturals with main accidental list for the key signature\r\n        this.accList = cancelled.concat(this.accList);\r\n        return {\r\n            accList: cancelled,\r\n            type: cancel_accList[0].type,\r\n        };\r\n    }\r\n    // Deprecated\r\n    addToStave(stave) {\r\n        this.paddingForced = true;\r\n        stave.addModifier(this);\r\n        return this;\r\n    }\r\n    // Apply the accidental staff line placement based on the `clef` and\r\n    // the  accidental `type` for the key signature ('# or 'b').\r\n    convertAccLines(clef, type, accList = this.accList) {\r\n        let offset = 0.0; // if clef === \"treble\"\r\n        let customLines; // when clef doesn't follow treble key sig shape\r\n        switch (clef) {\r\n            // Treble & Subbass both have offsets of 0, so are not included.\r\n            case 'soprano':\r\n                if (type === '#')\r\n                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\r\n                else\r\n                    offset = -1;\r\n                break;\r\n            case 'mezzo-soprano':\r\n                if (type === 'b')\r\n                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\r\n                else\r\n                    offset = 1.5;\r\n                break;\r\n            case 'alto':\r\n                offset = 0.5;\r\n                break;\r\n            case 'tenor':\r\n                if (type === '#')\r\n                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\r\n                else\r\n                    offset = -0.5;\r\n                break;\r\n            case 'baritone-f':\r\n            case 'baritone-c':\r\n                if (type === 'b')\r\n                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\r\n                else\r\n                    offset = 2;\r\n                break;\r\n            case 'bass':\r\n            case 'french':\r\n                offset = 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // If there's a special case, assign those lines/spaces:\r\n        let i;\r\n        if (typeof customLines !== 'undefined') {\r\n            for (i = 0; i < accList.length; ++i) {\r\n                accList[i].line = customLines[i];\r\n            }\r\n        }\r\n        else if (offset !== 0) {\r\n            for (i = 0; i < accList.length; ++i) {\r\n                accList[i].line += offset;\r\n            }\r\n        }\r\n    }\r\n    getPadding(index) {\r\n        if (!this.formatted)\r\n            this.format();\r\n        return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\r\n    }\r\n    getWidth() {\r\n        if (!this.formatted)\r\n            this.format();\r\n        return this.width;\r\n    }\r\n    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\r\n        this.formatted = false;\r\n        this.keySpec = keySpec;\r\n        this.cancelKeySpec = cancelKeySpec;\r\n        this.alterKeySpec = alterKeySpec;\r\n        return this;\r\n    }\r\n    // Alter the accidentals of a key spec one by one.\r\n    // Each alteration is a new accidental that replaces the\r\n    // original accidental (or the canceled one).\r\n    alterKey(alterKeySpec) {\r\n        this.formatted = false;\r\n        this.alterKeySpec = alterKeySpec;\r\n        return this;\r\n    }\r\n    convertToAlterAccList(alterKeySpec) {\r\n        const max = Math.min(alterKeySpec.length, this.accList.length);\r\n        for (let i = 0; i < max; ++i) {\r\n            if (alterKeySpec[i]) {\r\n                this.accList[i].type = alterKeySpec[i];\r\n            }\r\n        }\r\n    }\r\n    format() {\r\n        const stave = this.checkStave();\r\n        this.width = 0;\r\n        this.glyphs = [];\r\n        this.xPositions = [0]; // initialize with initial x position\r\n        this.accList = Tables.keySignature(defined(this.keySpec));\r\n        const accList = this.accList;\r\n        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\r\n        let cancelAccList;\r\n        if (this.cancelKeySpec) {\r\n            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\r\n        }\r\n        if (this.alterKeySpec) {\r\n            this.convertToAlterAccList(this.alterKeySpec);\r\n        }\r\n        if (this.accList.length > 0) {\r\n            const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\r\n            if (cancelAccList) {\r\n                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\r\n            }\r\n            this.convertAccLines(clef, firstAccidentalType, accList);\r\n            for (let i = 0; i < this.accList.length; ++i) {\r\n                this.convertToGlyph(this.accList[i], this.accList[i + 1]);\r\n            }\r\n        }\r\n        this.formatted = true;\r\n    }\r\n    draw() {\r\n        const stave = this.checkStave();\r\n        const ctx = stave.checkContext();\r\n        if (!this.formatted)\r\n            this.format();\r\n        this.setRendered();\r\n        ctx.openGroup('keysignature', this.getAttribute('id'));\r\n        for (let i = 0; i < this.glyphs.length; i++) {\r\n            const glyph = this.glyphs[i];\r\n            const x = this.x + this.xPositions[i];\r\n            glyph.setStave(stave);\r\n            glyph.setContext(ctx);\r\n            glyph.renderToStave(x);\r\n        }\r\n        ctx.closeGroup();\r\n    }\r\n}\r\n// Space between natural and following accidental depending\r\n// on vertical position\r\nKeySignature.accidentalSpacing = {\r\n    '#': {\r\n        above: 6,\r\n        below: 4,\r\n    },\r\n    b: {\r\n        above: 4,\r\n        below: 7,\r\n    },\r\n    n: {\r\n        above: 4,\r\n        below: 1,\r\n    },\r\n    '##': {\r\n        above: 6,\r\n        below: 4,\r\n    },\r\n    bb: {\r\n        above: 4,\r\n        below: 7,\r\n    },\r\n    db: {\r\n        above: 4,\r\n        below: 7,\r\n    },\r\n    d: {\r\n        above: 4,\r\n        below: 7,\r\n    },\r\n    bbs: {\r\n        above: 4,\r\n        below: 7,\r\n    },\r\n    '++': {\r\n        above: 6,\r\n        below: 4,\r\n    },\r\n    '+': {\r\n        above: 6,\r\n        below: 4,\r\n    },\r\n    '+-': {\r\n        above: 6,\r\n        below: 4,\r\n    },\r\n    '++-': {\r\n        above: 6,\r\n        below: 4,\r\n    },\r\n    bs: {\r\n        above: 4,\r\n        below: 10,\r\n    },\r\n    bss: {\r\n        above: 4,\r\n        below: 10,\r\n    },\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author Mark Meeus 2019\r\nimport { KeySignature } from './keysignature';\r\nimport { Note } from './note';\r\nimport { Category } from './typeguard';\r\nexport class KeySigNote extends Note {\r\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\r\n        super({ duration: 'b' });\r\n        this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\r\n        // Note properties\r\n        this.ignore_ticks = true;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.KeySigNote;\r\n    }\r\n    /* Overridden to ignore */\r\n    // eslint-disable-next-line\r\n    addToModifierContext(mc) {\r\n        // DO NOTHING.\r\n        return this;\r\n    }\r\n    preFormat() {\r\n        this.preFormatted = true;\r\n        this.keySignature.setStave(this.checkStave());\r\n        this.setWidth(this.keySignature.getWidth());\r\n        return this;\r\n    }\r\n    draw() {\r\n        const ctx = this.checkStave().checkContext();\r\n        this.setRendered();\r\n        this.keySignature.setX(this.getAbsoluteX());\r\n        this.keySignature.setContext(ctx);\r\n        this.keySignature.draw();\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Element } from './element';\r\nimport { Category } from './typeguard';\r\nimport { defined, RuntimeError } from './util';\r\nexport var ModifierPosition;\r\n(function (ModifierPosition) {\r\n    ModifierPosition[ModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\r\n    ModifierPosition[ModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\r\n    ModifierPosition[ModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\r\n    ModifierPosition[ModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\r\n    ModifierPosition[ModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\r\n})(ModifierPosition || (ModifierPosition = {}));\r\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\r\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\r\n/**\r\n * `Modifier` is an abstract interface for notational elements that modify\r\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\r\n *\r\n * For a `Modifier` instance to be positioned correctly, it must be part of\r\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\r\n * one another.\r\n *\r\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\r\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\r\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\r\n */\r\nexport class Modifier extends Element {\r\n    constructor() {\r\n        super();\r\n        this.width = 0;\r\n        // The `text_line` is reserved space above or below a stave.\r\n        this.text_line = 0;\r\n        this.position = Modifier.Position.LEFT;\r\n        this.x_shift = 0;\r\n        this.y_shift = 0;\r\n        this.spacingFromNextModifier = 0;\r\n    }\r\n    /**\r\n     * Modifiers category string. Every modifier has a different category.\r\n     * The `ModifierContext` uses this to determine the type and order of the modifiers.\r\n     */\r\n    static get CATEGORY() {\r\n        return Category.Modifier;\r\n    }\r\n    /** Modifiers can be positioned almost anywhere, relative to a note. */\r\n    static get Position() {\r\n        return ModifierPosition;\r\n    }\r\n    static get PositionString() {\r\n        return {\r\n            center: ModifierPosition.CENTER,\r\n            above: ModifierPosition.ABOVE,\r\n            below: ModifierPosition.BELOW,\r\n            left: ModifierPosition.LEFT,\r\n            right: ModifierPosition.RIGHT,\r\n        };\r\n    }\r\n    /** Called when position changes. */\r\n    reset() {\r\n        // DO NOTHING.\r\n    }\r\n    /** Get modifier widths. */\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    /** Set modifier widths. */\r\n    setWidth(width) {\r\n        this.width = width;\r\n        return this;\r\n    }\r\n    /** Get attached note (`StaveNote`, `TabNote`, etc.) */\r\n    getNote() {\r\n        return defined(this.note, 'NoNote', 'Modifier has no note.');\r\n    }\r\n    /**\r\n     * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\r\n     * Also verifies that the index is valid.\r\n     */\r\n    checkAttachedNote() {\r\n        const category = this.getCategory();\r\n        defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\r\n        return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\r\n    }\r\n    /**\r\n     * Set attached note.\r\n     * @param note (`StaveNote`, `TabNote`, etc.)\r\n     */\r\n    setNote(note) {\r\n        this.note = note;\r\n        return this;\r\n    }\r\n    /** Get note index, which is a specific note in a chord. */\r\n    getIndex() {\r\n        return this.index;\r\n    }\r\n    /** Check and get note index, which is a specific note in a chord. */\r\n    checkIndex() {\r\n        return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\r\n    }\r\n    /** Set note index, which is a specific note in a chord. */\r\n    setIndex(index) {\r\n        this.index = index;\r\n        return this;\r\n    }\r\n    /** Get `ModifierContext`. */\r\n    getModifierContext() {\r\n        return this.modifierContext;\r\n    }\r\n    /** Check and get `ModifierContext`. */\r\n    checkModifierContext() {\r\n        return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');\r\n    }\r\n    /** Every modifier must be part of a `ModifierContext`. */\r\n    setModifierContext(c) {\r\n        this.modifierContext = c;\r\n        return this;\r\n    }\r\n    /** Get position. */\r\n    getPosition() {\r\n        return this.position;\r\n    }\r\n    /**\r\n     * Set position.\r\n     * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\r\n     */\r\n    setPosition(position) {\r\n        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\r\n        this.reset();\r\n        return this;\r\n    }\r\n    /** Set the `text_line` for the modifier. */\r\n    setTextLine(line) {\r\n        this.text_line = line;\r\n        return this;\r\n    }\r\n    /** Shift modifier down `y` pixels. Negative values shift up. */\r\n    setYShift(y) {\r\n        this.y_shift = y;\r\n        return this;\r\n    }\r\n    /** Set spacing from next modifier. */\r\n    setSpacingFromNextModifier(x) {\r\n        this.spacingFromNextModifier = x;\r\n    }\r\n    /** Get spacing from next modifier. */\r\n    getSpacingFromNextModifier() {\r\n        return this.spacingFromNextModifier;\r\n    }\r\n    /**\r\n     * Shift modifier `x` pixels in the direction of the modifier. Negative values\r\n     * shift reverse.\r\n     */\r\n    setXShift(x) {\r\n        this.x_shift = 0;\r\n        if (this.position === Modifier.Position.LEFT) {\r\n            this.x_shift -= x;\r\n        }\r\n        else {\r\n            this.x_shift += x;\r\n        }\r\n        return this;\r\n    }\r\n    /** Get shift modifier `x` */\r\n    getXShift() {\r\n        return this.x_shift;\r\n    }\r\n    /** Render the modifier onto the canvas. */\r\n    draw() {\r\n        this.checkContext();\r\n        throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\r\n    }\r\n    // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\r\n    alignSubNotesWithNote(subNotes, note) {\r\n        // Shift over the tick contexts of each note\r\n        const tickContext = note.getTickContext();\r\n        const metrics = tickContext.getMetrics();\r\n        const stave = note.getStave();\r\n        const subNoteXOffset = tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\r\n        subNotes.forEach((subNote) => {\r\n            const subTickContext = subNote.getTickContext();\r\n            if (stave)\r\n                subNote.setStave(stave);\r\n            subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\r\n        });\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n//\r\n// This class implements various types of members to notes (e.g. bends,\r\n// fingering positions etc.)\r\nimport { Accidental } from './accidental';\r\nimport { Annotation } from './annotation';\r\nimport { Articulation } from './articulation';\r\nimport { Bend } from './bend';\r\nimport { ChordSymbol } from './chordsymbol';\r\nimport { Dot } from './dot';\r\nimport { FretHandFinger } from './frethandfinger';\r\nimport { GraceNoteGroup } from './gracenotegroup';\r\nimport { NoteSubGroup } from './notesubgroup';\r\nimport { Ornament } from './ornament';\r\nimport { Parenthesis } from './parenthesis';\r\nimport { StaveNote } from './stavenote';\r\nimport { StringNumber } from './stringnumber';\r\nimport { Stroke } from './strokes';\r\nimport { Category } from './typeguard';\r\nimport { log, RuntimeError } from './util';\r\nimport { Vibrato } from './vibrato';\r\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (ModifierContext.DEBUG)\r\n        log('Vex.Flow.ModifierContext', args);\r\n}\r\nexport class ModifierContext {\r\n    constructor() {\r\n        // Formatting data.\r\n        this.state = {\r\n            left_shift: 0,\r\n            right_shift: 0,\r\n            text_line: 0,\r\n            top_text_line: 0,\r\n        };\r\n        // Current members\r\n        this.members = {};\r\n        this.preFormatted = false;\r\n        this.postFormatted = false;\r\n        this.formatted = false;\r\n        this.width = 0;\r\n        this.spacing = 0;\r\n    }\r\n    addModifier(member) {\r\n        L('addModifier is deprecated, use addMember instead.');\r\n        return this.addMember(member);\r\n    }\r\n    /**\r\n     * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\r\n     * Here we add a new member to this.members, and create a new array if needed.\r\n     * @param member\r\n     * @returns this\r\n     */\r\n    addMember(member) {\r\n        const category = member.getCategory();\r\n        if (!this.members[category]) {\r\n            this.members[category] = [];\r\n        }\r\n        this.members[category].push(member);\r\n        member.setModifierContext(this);\r\n        this.preFormatted = false;\r\n        return this;\r\n    }\r\n    /**\r\n     * @deprecated\r\n     */\r\n    getModifiers(category) {\r\n        L('getModifiers is deprecated, use getMembers instead.');\r\n        return this.getMembers(category);\r\n    }\r\n    getMembers(category) {\r\n        var _a;\r\n        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];\r\n    }\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    getLeftShift() {\r\n        return this.state.left_shift;\r\n    }\r\n    getRightShift() {\r\n        return this.state.right_shift;\r\n    }\r\n    getState() {\r\n        return this.state;\r\n    }\r\n    getMetrics() {\r\n        if (!this.formatted) {\r\n            throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\r\n        }\r\n        return {\r\n            width: this.state.left_shift + this.state.right_shift + this.spacing,\r\n            spacing: this.spacing,\r\n        };\r\n    }\r\n    preFormat() {\r\n        if (this.preFormatted)\r\n            return;\r\n        L('Preformatting ModifierContext');\r\n        const state = this.state;\r\n        const members = this.members;\r\n        // The ordering below determines when different members are formatted and rendered.\r\n        StaveNote.format(members[Category.StaveNote], state);\r\n        Parenthesis.format(members[Category.Parenthesis], state);\r\n        Dot.format(members[Category.Dot], state);\r\n        FretHandFinger.format(members[Category.FretHandFinger], state);\r\n        Accidental.format(members[Category.Accidental], state);\r\n        Stroke.format(members[Category.Stroke], state);\r\n        GraceNoteGroup.format(members[Category.GraceNoteGroup], state);\r\n        NoteSubGroup.format(members[Category.NoteSubGroup], state);\r\n        StringNumber.format(members[Category.StringNumber], state);\r\n        Articulation.format(members[Category.Articulation], state);\r\n        Ornament.format(members[Category.Ornament], state);\r\n        Annotation.format(members[Category.Annotation], state);\r\n        ChordSymbol.format(members[Category.ChordSymbol], state);\r\n        Bend.format(members[Category.Bend], state);\r\n        Vibrato.format(members[Category.Vibrato], state, this);\r\n        // Update width of this member context\r\n        this.width = state.left_shift + state.right_shift;\r\n        this.preFormatted = true;\r\n    }\r\n    postFormat() {\r\n        if (this.postFormatted)\r\n            return;\r\n        L('Postformatting ModifierContext');\r\n        // If post-formatting is required for an element, add more lines below.\r\n        StaveNote.postFormat(this.getMembers(Category.StaveNote));\r\n    }\r\n}\r\nModifierContext.DEBUG = false;\r\n","// VexFlow - Music Engraving for HTML5\r\n// Copyright Mohit Muthanna 2010\r\n//\r\n// This class implements multiple measure rests.\r\nimport { Element } from './element';\r\nimport { Glyph } from './glyph';\r\nimport { NoteHead } from './notehead';\r\nimport { StaveModifierPosition } from './stavemodifier';\r\nimport { Tables } from './tables';\r\nimport { TimeSignature } from './timesignature';\r\nimport { Category, isBarline } from './typeguard';\r\nimport { defined } from './util';\r\nlet semibreve_rest;\r\nfunction get_semibreve_rest() {\r\n    if (!semibreve_rest) {\r\n        const noteHead = new NoteHead({ duration: 'w', note_type: 'r' });\r\n        semibreve_rest = {\r\n            glyph_font_scale: noteHead.render_options.glyph_font_scale,\r\n            glyph_code: noteHead.glyph_code,\r\n            width: noteHead.getWidth(),\r\n        };\r\n    }\r\n    return semibreve_rest;\r\n}\r\nexport class MultiMeasureRest extends Element {\r\n    /**\r\n     *\r\n     * @param number_of_measures Number of measures.\r\n     * @param options The options object.\r\n     */\r\n    constructor(number_of_measures, options) {\r\n        super();\r\n        this.xs = { left: NaN, right: NaN };\r\n        this.hasPaddingLeft = false;\r\n        this.hasPaddingRight = false;\r\n        this.hasLineThickness = false;\r\n        this.hasSymbolSpacing = false;\r\n        this.number_of_measures = number_of_measures;\r\n        // Keep track of whether these four options were provided.\r\n        this.hasPaddingLeft = typeof options.padding_left === 'number';\r\n        this.hasPaddingRight = typeof options.padding_right === 'number';\r\n        this.hasLineThickness = typeof options.line_thickness === 'number';\r\n        this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';\r\n        const musicFont = Tables.currentMusicFont();\r\n        this.render_options = Object.assign({ use_symbols: false, show_number: true, number_line: -0.5, number_glyph_point: musicFont.lookupMetric('digits.point'), line: 2, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, serif_thickness: 2, semibreve_rest_glyph_scale: Tables.NOTATION_FONT_SCALE, padding_left: 0, padding_right: 0, line_thickness: 5, symbol_spacing: 0 }, options);\r\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\r\n        this.render_options.number_line += fontLineShift;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.MultiMeasureRest;\r\n    }\r\n    getXs() {\r\n        return this.xs;\r\n    }\r\n    setStave(stave) {\r\n        this.stave = stave;\r\n        return this;\r\n    }\r\n    getStave() {\r\n        return this.stave;\r\n    }\r\n    checkStave() {\r\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\r\n    }\r\n    drawLine(stave, ctx, left, right, spacingBetweenLines) {\r\n        const options = this.render_options;\r\n        const y = stave.getYForLine(options.line);\r\n        const padding = (right - left) * 0.1;\r\n        left += padding;\r\n        right -= padding;\r\n        let lineThicknessHalf;\r\n        if (this.hasLineThickness) {\r\n            lineThicknessHalf = options.line_thickness * 0.5;\r\n        }\r\n        else {\r\n            lineThicknessHalf = spacingBetweenLines * 0.25;\r\n        }\r\n        const serifThickness = options.serif_thickness;\r\n        const top = y - spacingBetweenLines;\r\n        const bot = y + spacingBetweenLines;\r\n        const leftIndented = left + serifThickness;\r\n        const rightIndented = right - serifThickness;\r\n        const lineTop = y - lineThicknessHalf;\r\n        const lineBottom = y + lineThicknessHalf;\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.moveTo(left, top);\r\n        ctx.lineTo(leftIndented, top);\r\n        ctx.lineTo(leftIndented, lineTop);\r\n        ctx.lineTo(rightIndented, lineTop);\r\n        ctx.lineTo(rightIndented, top);\r\n        ctx.lineTo(right, top);\r\n        ctx.lineTo(right, bot);\r\n        ctx.lineTo(rightIndented, bot);\r\n        ctx.lineTo(rightIndented, lineBottom);\r\n        ctx.lineTo(leftIndented, lineBottom);\r\n        ctx.lineTo(leftIndented, bot);\r\n        ctx.lineTo(left, bot);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n    drawSymbols(stave, ctx, left, right, spacingBetweenLines) {\r\n        const n4 = Math.floor(this.number_of_measures / 4);\r\n        const n = this.number_of_measures % 4;\r\n        const n2 = Math.floor(n / 2);\r\n        const n1 = n % 2;\r\n        const options = this.render_options;\r\n        // FIXME: TODO: invalidate semibreve_rest at the appropriate time\r\n        // (e.g., if the system font settings are changed).\r\n        semibreve_rest = undefined;\r\n        const rest = get_semibreve_rest();\r\n        const rest_scale = options.semibreve_rest_glyph_scale;\r\n        const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);\r\n        const glyphs = {\r\n            2: {\r\n                width: rest_width * 0.5,\r\n                height: spacingBetweenLines,\r\n            },\r\n            1: {\r\n                width: rest_width,\r\n            },\r\n        };\r\n        /* 10: normal spacingBetweenLines */\r\n        const spacing = this.hasSymbolSpacing ? options.symbol_spacing : 10;\r\n        const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\r\n        let x = left + (right - left) * 0.5 - width * 0.5;\r\n        const line = options.line;\r\n        const yTop = stave.getYForLine(line - 1);\r\n        const yMiddle = stave.getYForLine(line);\r\n        const yBottom = stave.getYForLine(line + 1);\r\n        ctx.save();\r\n        ctx.setStrokeStyle('none');\r\n        ctx.setLineWidth(0);\r\n        for (let i = 0; i < n4; ++i) {\r\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\r\n            ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\r\n            x += glyphs[2].width + spacing;\r\n        }\r\n        for (let i = 0; i < n2; ++i) {\r\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\r\n            x += glyphs[2].width + spacing;\r\n        }\r\n        for (let i = 0; i < n1; ++i) {\r\n            Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);\r\n            x += glyphs[1].width + spacing;\r\n        }\r\n        ctx.restore();\r\n    }\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        const stave = this.checkStave();\r\n        let left = stave.getNoteStartX();\r\n        let right = stave.getNoteEndX();\r\n        // FIXME: getNoteStartX() returns x + 5(barline width)\r\n        //        getNoteEndX() returns x + width(no barline width)\r\n        // See Stave constructor. How do we fix this?\r\n        // Here, we subtract the barline width.\r\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\r\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\r\n            left -= begModifiers[0].getWidth();\r\n        }\r\n        const options = this.render_options;\r\n        if (this.hasPaddingLeft) {\r\n            left = stave.getX() + options.padding_left;\r\n        }\r\n        if (this.hasPaddingRight) {\r\n            right = stave.getX() + stave.getWidth() - options.padding_right;\r\n        }\r\n        this.xs.left = left;\r\n        this.xs.right = right;\r\n        const spacingBetweenLines = options.spacing_between_lines_px;\r\n        if (options.use_symbols) {\r\n            this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\r\n        }\r\n        else {\r\n            this.drawLine(stave, ctx, left, right, spacingBetweenLines);\r\n        }\r\n        if (options.show_number) {\r\n            const timeSpec = '/' + this.number_of_measures;\r\n            const timeSig = new TimeSignature(timeSpec, 0, false);\r\n            timeSig.point = options.number_glyph_point;\r\n            timeSig.setTimeSig(timeSpec);\r\n            timeSig.setStave(stave);\r\n            timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\r\n            timeSig.bottomLine = options.number_line;\r\n            timeSig.setContext(ctx).draw();\r\n        }\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { RuntimeError } from './util';\r\n/** Music implements some standard music theory routines. */\r\nexport class Music {\r\n    /** Number of an canonical notes (12). */\r\n    static get NUM_TONES() {\r\n        return this.canonical_notes.length;\r\n    }\r\n    /** Names of root notes ('c', 'd',...) */\r\n    static get roots() {\r\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\r\n    }\r\n    /** Values of the root notes.*/\r\n    static get root_values() {\r\n        return [0, 2, 4, 5, 7, 9, 11];\r\n    }\r\n    /** Indices of the root notes.*/\r\n    static get root_indices() {\r\n        return {\r\n            c: 0,\r\n            d: 1,\r\n            e: 2,\r\n            f: 3,\r\n            g: 4,\r\n            a: 5,\r\n            b: 6,\r\n        };\r\n    }\r\n    /** Names of canonical notes ('c', 'c#', 'd',...). */\r\n    static get canonical_notes() {\r\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\r\n    }\r\n    /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\r\n    static get diatonic_intervals() {\r\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\r\n    }\r\n    /** NoteAccidental associated to diatonic intervals. */\r\n    static get diatonic_accidentals() {\r\n        return {\r\n            unison: { note: 0, accidental: 0 },\r\n            m2: { note: 1, accidental: -1 },\r\n            M2: { note: 1, accidental: 0 },\r\n            m3: { note: 2, accidental: -1 },\r\n            M3: { note: 2, accidental: 0 },\r\n            p4: { note: 3, accidental: 0 },\r\n            dim5: { note: 4, accidental: -1 },\r\n            p5: { note: 4, accidental: 0 },\r\n            m6: { note: 5, accidental: -1 },\r\n            M6: { note: 5, accidental: 0 },\r\n            b7: { note: 6, accidental: -1 },\r\n            M7: { note: 6, accidental: 0 },\r\n            octave: { note: 7, accidental: 0 },\r\n        };\r\n    }\r\n    /** Semitones shift associated to intervals .*/\r\n    static get intervals() {\r\n        return {\r\n            u: 0,\r\n            unison: 0,\r\n            m2: 1,\r\n            b2: 1,\r\n            min2: 1,\r\n            S: 1,\r\n            H: 1,\r\n            2: 2,\r\n            M2: 2,\r\n            maj2: 2,\r\n            T: 2,\r\n            W: 2,\r\n            m3: 3,\r\n            b3: 3,\r\n            min3: 3,\r\n            M3: 4,\r\n            3: 4,\r\n            maj3: 4,\r\n            4: 5,\r\n            p4: 5,\r\n            '#4': 6,\r\n            b5: 6,\r\n            aug4: 6,\r\n            dim5: 6,\r\n            5: 7,\r\n            p5: 7,\r\n            '#5': 8,\r\n            b6: 8,\r\n            aug5: 8,\r\n            6: 9,\r\n            M6: 9,\r\n            maj6: 9,\r\n            b7: 10,\r\n            m7: 10,\r\n            min7: 10,\r\n            dom7: 10,\r\n            M7: 11,\r\n            maj7: 11,\r\n            8: 12,\r\n            octave: 12,\r\n        };\r\n    }\r\n    /** Semitones shifts associated with scales. */\r\n    static get scales() {\r\n        return {\r\n            major: [2, 2, 1, 2, 2, 2, 1],\r\n            minor: [2, 1, 2, 2, 1, 2, 2],\r\n            ionian: [2, 2, 1, 2, 2, 2, 1],\r\n            dorian: [2, 1, 2, 2, 2, 1, 2],\r\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\r\n            lydian: [2, 2, 2, 1, 2, 2, 1],\r\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\r\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\r\n            locrian: [1, 2, 2, 1, 2, 2, 2],\r\n        };\r\n    }\r\n    /** Scales associated with m (minor) and M (major). */\r\n    static get scaleTypes() {\r\n        return {\r\n            M: Music.scales.major,\r\n            m: Music.scales.minor,\r\n        };\r\n    }\r\n    /** Accidentals abbreviations. */\r\n    static get accidentals() {\r\n        return ['bb', 'b', 'n', '#', '##'];\r\n    }\r\n    /** Note values. */\r\n    static get noteValues() {\r\n        return {\r\n            c: { root_index: 0, int_val: 0 },\r\n            cn: { root_index: 0, int_val: 0 },\r\n            'c#': { root_index: 0, int_val: 1 },\r\n            'c##': { root_index: 0, int_val: 2 },\r\n            cb: { root_index: 0, int_val: 11 },\r\n            cbb: { root_index: 0, int_val: 10 },\r\n            d: { root_index: 1, int_val: 2 },\r\n            dn: { root_index: 1, int_val: 2 },\r\n            'd#': { root_index: 1, int_val: 3 },\r\n            'd##': { root_index: 1, int_val: 4 },\r\n            db: { root_index: 1, int_val: 1 },\r\n            dbb: { root_index: 1, int_val: 0 },\r\n            e: { root_index: 2, int_val: 4 },\r\n            en: { root_index: 2, int_val: 4 },\r\n            'e#': { root_index: 2, int_val: 5 },\r\n            'e##': { root_index: 2, int_val: 6 },\r\n            eb: { root_index: 2, int_val: 3 },\r\n            ebb: { root_index: 2, int_val: 2 },\r\n            f: { root_index: 3, int_val: 5 },\r\n            fn: { root_index: 3, int_val: 5 },\r\n            'f#': { root_index: 3, int_val: 6 },\r\n            'f##': { root_index: 3, int_val: 7 },\r\n            fb: { root_index: 3, int_val: 4 },\r\n            fbb: { root_index: 3, int_val: 3 },\r\n            g: { root_index: 4, int_val: 7 },\r\n            gn: { root_index: 4, int_val: 7 },\r\n            'g#': { root_index: 4, int_val: 8 },\r\n            'g##': { root_index: 4, int_val: 9 },\r\n            gb: { root_index: 4, int_val: 6 },\r\n            gbb: { root_index: 4, int_val: 5 },\r\n            a: { root_index: 5, int_val: 9 },\r\n            an: { root_index: 5, int_val: 9 },\r\n            'a#': { root_index: 5, int_val: 10 },\r\n            'a##': { root_index: 5, int_val: 11 },\r\n            ab: { root_index: 5, int_val: 8 },\r\n            abb: { root_index: 5, int_val: 7 },\r\n            b: { root_index: 6, int_val: 11 },\r\n            bn: { root_index: 6, int_val: 11 },\r\n            'b#': { root_index: 6, int_val: 0 },\r\n            'b##': { root_index: 6, int_val: 1 },\r\n            bb: { root_index: 6, int_val: 10 },\r\n            bbb: { root_index: 6, int_val: 9 },\r\n        };\r\n    }\r\n    isValidNoteValue(note) {\r\n        return note >= 0 && note < Music.canonical_notes.length;\r\n    }\r\n    isValidIntervalValue(interval) {\r\n        return interval >= 0 && interval < Music.diatonic_intervals.length;\r\n    }\r\n    /** Return root and accidental associated to a note. */\r\n    getNoteParts(noteString) {\r\n        if (!noteString || noteString.length < 1) {\r\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\r\n        }\r\n        if (noteString.length > 3) {\r\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\r\n        }\r\n        const note = noteString.toLowerCase();\r\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\r\n        const match = regex.exec(note);\r\n        if (match !== null) {\r\n            const root = match[1];\r\n            const accidental = match[2];\r\n            return {\r\n                root,\r\n                accidental,\r\n            };\r\n        }\r\n        else {\r\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\r\n        }\r\n    }\r\n    /** Return root, accidental and type associated to a key. */\r\n    getKeyParts(keyString) {\r\n        if (!keyString || keyString.length < 1) {\r\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\r\n        }\r\n        const key = keyString.toLowerCase();\r\n        // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\r\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\r\n        const match = regex.exec(key);\r\n        if (match !== null) {\r\n            const root = match[1];\r\n            const accidental = match[2];\r\n            let type = match[3];\r\n            // Unspecified type implies major\r\n            if (!type)\r\n                type = 'M';\r\n            return {\r\n                root,\r\n                accidental,\r\n                type,\r\n            };\r\n        }\r\n        else {\r\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\r\n        }\r\n    }\r\n    /** Note value associated to a note name. */\r\n    getNoteValue(noteString) {\r\n        const value = Music.noteValues[noteString];\r\n        if (value === undefined) {\r\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\r\n        }\r\n        return value.int_val;\r\n    }\r\n    /** Interval value associated to an interval name. */\r\n    getIntervalValue(intervalString) {\r\n        const value = Music.intervals[intervalString];\r\n        if (value === undefined) {\r\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\r\n        }\r\n        return value;\r\n    }\r\n    /** Canonical note name associated to a value. */\r\n    getCanonicalNoteName(noteValue) {\r\n        if (!this.isValidNoteValue(noteValue)) {\r\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\r\n        }\r\n        return Music.canonical_notes[noteValue];\r\n    }\r\n    /** Interval name associated to a value. */\r\n    getCanonicalIntervalName(intervalValue) {\r\n        if (!this.isValidIntervalValue(intervalValue)) {\r\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\r\n        }\r\n        return Music.diatonic_intervals[intervalValue];\r\n    }\r\n    /**\r\n     * Given a note, interval, and interval direction, produce the relative note.\r\n     */\r\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\r\n        if (direction !== 1 && direction !== -1) {\r\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\r\n        }\r\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\r\n        if (sum < 0)\r\n            sum += Music.NUM_TONES;\r\n        return sum;\r\n    }\r\n    /**\r\n     * Given a root and note value, produce the relative note name.\r\n     */\r\n    getRelativeNoteName(root, noteValue) {\r\n        const parts = this.getNoteParts(root);\r\n        const rootValue = this.getNoteValue(parts.root);\r\n        let interval = noteValue - rootValue;\r\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\r\n            let multiplier = 1;\r\n            if (interval > 0)\r\n                multiplier = -1;\r\n            // Possibly wrap around. (Add +1 for modulo operator)\r\n            const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\r\n            if (Math.abs(reverse_interval) > 2) {\r\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\r\n            }\r\n            else {\r\n                interval = reverse_interval;\r\n            }\r\n        }\r\n        if (Math.abs(interval) > 2) {\r\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\r\n        }\r\n        let relativeNoteName = parts.root;\r\n        if (interval > 0) {\r\n            for (let i = 1; i <= interval; ++i) {\r\n                relativeNoteName += '#';\r\n            }\r\n        }\r\n        else if (interval < 0) {\r\n            for (let i = -1; i >= interval; --i) {\r\n                relativeNoteName += 'b';\r\n            }\r\n        }\r\n        return relativeNoteName;\r\n    }\r\n    /**\r\n     * Return scale tones, given intervals. Each successive interval is\r\n     * relative to the previous one, e.g., Major Scale:\r\n     *\r\n     *   TTSTTTS = [2,2,1,2,2,2,1]\r\n     *\r\n     * When used with key = 0, returns C scale (which is isomorphic to\r\n     * interval list).\r\n     */\r\n    getScaleTones(key, intervals) {\r\n        const tones = [key];\r\n        let nextNote = key;\r\n        for (let i = 0; i < intervals.length; i++) {\r\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\r\n            if (nextNote !== key)\r\n                tones.push(nextNote);\r\n        }\r\n        return tones;\r\n    }\r\n    /**\r\n     * Return the interval of a note, given a diatonic scale.\r\n     * e.g., given the scale C, and the note E, returns M3.\r\n     */\r\n    getIntervalBetween(note1, note2, direction = 1) {\r\n        if (direction !== 1 && direction !== -1) {\r\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\r\n        }\r\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\r\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\r\n        }\r\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\r\n        if (difference < 0)\r\n            difference += Music.NUM_TONES;\r\n        return difference;\r\n    }\r\n    /**\r\n     * Create a scale map that represents the pitch state for a\r\n     * `keySignature`. For example, passing a `G` to `keySignature` would\r\n     * return a scale map with every note naturalized except for `F` which\r\n     * has an `F#` state.\r\n     */\r\n    createScaleMap(keySignature) {\r\n        const keySigParts = this.getKeyParts(keySignature);\r\n        if (!keySigParts.type)\r\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\r\n        const scaleName = Music.scaleTypes[keySigParts.type];\r\n        let keySigString = keySigParts.root;\r\n        if (keySigParts.accidental)\r\n            keySigString += keySigParts.accidental;\r\n        if (!scaleName)\r\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\r\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\r\n        const noteLocation = Music.root_indices[keySigParts.root];\r\n        const scaleMap = {};\r\n        for (let i = 0; i < Music.roots.length; ++i) {\r\n            const index = (noteLocation + i) % Music.roots.length;\r\n            const rootName = Music.roots[index];\r\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\r\n            if (noteName.length === 1) {\r\n                noteName += 'n';\r\n            }\r\n            scaleMap[rootName] = noteName;\r\n        }\r\n        return scaleMap;\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Font } from './font';\r\nimport { drawDot } from './rendercontext';\r\nimport { Tables } from './tables';\r\nimport { Tickable } from './tickable';\r\nimport { Category } from './typeguard';\r\nimport { defined, RuntimeError } from './util';\r\n/**\r\n * Note implements an abstract interface for notes and chords that\r\n * are rendered on a stave. Notes have some common properties: All of them\r\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\r\n *\r\n * Some notes have stems, heads, dots, etc. Most notational elements that\r\n * surround a note are called *modifiers*, and every note has an associated\r\n * array of them. All notes also have a rendering context and belong to a stave.\r\n */\r\nexport class Note extends Tickable {\r\n    /**\r\n     * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\r\n     * positioning and layout.\r\n     *\r\n     * @param noteStruct To create a new note you need to provide a `noteStruct`.\r\n     */\r\n    constructor(noteStruct) {\r\n        super();\r\n        if (!noteStruct) {\r\n            throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\r\n        }\r\n        /** Parses `noteStruct` and get note properties. */\r\n        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\r\n        if (!parsedNoteStruct) {\r\n            throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\r\n        }\r\n        // Set note properties from parameters.\r\n        this.keys = noteStruct.keys || [];\r\n        // per-pitch properties\r\n        this.keyProps = [];\r\n        this.duration = parsedNoteStruct.duration;\r\n        this.noteType = parsedNoteStruct.type;\r\n        this.customTypes = parsedNoteStruct.customTypes;\r\n        if (noteStruct.duration_override) {\r\n            // Custom duration\r\n            this.setDuration(noteStruct.duration_override);\r\n        }\r\n        else {\r\n            // Default duration\r\n            this.setIntrinsicTicks(parsedNoteStruct.ticks);\r\n        }\r\n        this.modifiers = [];\r\n        // Get the glyph code for this note from the font.\r\n        this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\r\n        this.customGlyphs = this.customTypes.map((t) => Tables.getGlyphProps(this.duration, t));\r\n        // Note to play for audio players.\r\n        this.playNote = undefined;\r\n        // Positioning contexts used by the Formatter.\r\n        this.ignore_ticks = false;\r\n        // Positioning variables\r\n        this.width = 0; // Width in pixels calculated after preFormat\r\n        this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\r\n        this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\r\n        this.x_shift = 0; // X shift from tick context X\r\n        this.ys = []; // list of y coordinates for each note\r\n        // we need to hold on to these for ties and beams.\r\n        if (noteStruct.align_center) {\r\n            this.setCenterAlignment(noteStruct.align_center);\r\n        }\r\n        // The render surface.\r\n        this.render_options = {\r\n            annotation_spacing: 5,\r\n            glyph_font_scale: 1,\r\n            stroke_px: 1,\r\n            scale: 1,\r\n            font: '',\r\n            y_shift: 0,\r\n        };\r\n    }\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // STATIC MEMBERS\r\n    static get CATEGORY() {\r\n        return Category.Note;\r\n    }\r\n    /** Debug helper. Displays various note metrics for the given note. */\r\n    static plotMetrics(ctx, note, yPos) {\r\n        const metrics = note.getMetrics();\r\n        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\r\n        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\r\n        const xAbs = note.getAbsoluteX();\r\n        const xPost1 = note.getAbsoluteX() + metrics.notePx;\r\n        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\r\n        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\r\n        const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);\r\n        const xWidth = xEnd - xStart;\r\n        ctx.save();\r\n        ctx.setFont(Font.SANS_SERIF, 8);\r\n        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\r\n        const y = yPos + 7;\r\n        function stroke(x1, x2, color, yy = y) {\r\n            ctx.beginPath();\r\n            ctx.setStrokeStyle(color);\r\n            ctx.setFillStyle(color);\r\n            ctx.setLineWidth(3);\r\n            ctx.moveTo(x1 + note.getXShift(), yy);\r\n            ctx.lineTo(x2 + note.getXShift(), yy);\r\n            ctx.stroke();\r\n        }\r\n        stroke(xStart, xPre1, 'red');\r\n        stroke(xPre1, xAbs, '#999');\r\n        stroke(xAbs, xPost1, 'green');\r\n        stroke(xPost1, xPost2, '#999');\r\n        stroke(xPost2, xEnd, 'red');\r\n        stroke(xEnd, xFreedomRight, '#DD0');\r\n        stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\r\n        drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\r\n        const formatterMetrics = note.getFormatterMetrics();\r\n        if (formatterMetrics.iterations > 0) {\r\n            const spaceDeviation = formatterMetrics.space.deviation;\r\n            const prefix = spaceDeviation >= 0 ? '+' : '';\r\n            ctx.setFillStyle('red');\r\n            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\r\n        }\r\n        ctx.restore();\r\n    }\r\n    static parseDuration(durationString) {\r\n        if (!durationString) {\r\n            return undefined;\r\n        }\r\n        const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\r\n        const result = regexp.exec(durationString);\r\n        if (!result) {\r\n            return undefined;\r\n        }\r\n        const duration = result[1];\r\n        const dots = result[2].length;\r\n        const type = result[3] || 'n';\r\n        return { duration, dots, type };\r\n    }\r\n    static parseNoteStruct(noteStruct) {\r\n        // Preserve backwards-compatibility\r\n        const durationProps = Note.parseDuration(noteStruct.duration);\r\n        if (!durationProps) {\r\n            return undefined;\r\n        }\r\n        // If specified type is invalid, return undefined.\r\n        let type = noteStruct.type;\r\n        if (type && !Tables.validTypes[type]) {\r\n            return undefined;\r\n        }\r\n        // If no type specified, check duration or custom types\r\n        const customTypes = [];\r\n        if (!type) {\r\n            type = durationProps.type || 'n';\r\n            // If we have keys, try and check if we've got a custom glyph\r\n            if (noteStruct.keys !== undefined) {\r\n                noteStruct.keys.forEach((k, i) => {\r\n                    const result = k.split('/');\r\n                    // We have a custom glyph specified after the note eg. /X2\r\n                    customTypes[i] = (result && result.length === 3 ? result[2] : type);\r\n                });\r\n            }\r\n        }\r\n        // Calculate the tick duration of the note\r\n        let ticks = Tables.durationToTicks(durationProps.duration);\r\n        if (!ticks) {\r\n            return undefined;\r\n        }\r\n        // Are there any dots?\r\n        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\r\n        if (typeof dots !== 'number') {\r\n            return undefined;\r\n        }\r\n        // Add ticks as necessary depending on the numbr of dots\r\n        let currentTicks = ticks;\r\n        for (let i = 0; i < dots; i++) {\r\n            if (currentTicks <= 1)\r\n                return undefined;\r\n            currentTicks = currentTicks / 2;\r\n            ticks += currentTicks;\r\n        }\r\n        return {\r\n            duration: durationProps.duration,\r\n            type,\r\n            customTypes,\r\n            dots,\r\n            ticks,\r\n        };\r\n    }\r\n    /**\r\n     * Get the play note, which is arbitrary data that can be used by an\r\n     * audio player.\r\n     */\r\n    getPlayNote() {\r\n        return this.playNote;\r\n    }\r\n    /**\r\n     * Set the play note, which is arbitrary data that can be used by an\r\n     * audio player.\r\n     */\r\n    setPlayNote(note) {\r\n        this.playNote = note;\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns true if this note is a type of rest.\r\n     *\r\n     * Rests don't have pitches, but take up space in the score.\r\n     * Subclasses should override this default implementation.\r\n     */\r\n    isRest() {\r\n        return false;\r\n    }\r\n    /** Add stroke. */\r\n    addStroke(index, stroke) {\r\n        stroke.setNote(this);\r\n        stroke.setIndex(index);\r\n        this.modifiers.push(stroke);\r\n        this.preFormatted = false;\r\n        return this;\r\n    }\r\n    /** Get the target stave. */\r\n    getStave() {\r\n        return this.stave;\r\n    }\r\n    /** Check and get the target stave. */\r\n    checkStave() {\r\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\r\n    }\r\n    /** Set the target stave. */\r\n    setStave(stave) {\r\n        this.stave = stave;\r\n        this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\r\n        this.setContext(this.stave.getContext());\r\n        return this;\r\n    }\r\n    /** Get spacing to the left of the notes. */\r\n    getLeftDisplacedHeadPx() {\r\n        return this.leftDisplacedHeadPx;\r\n    }\r\n    /** Get spacing to the right of the notes. */\r\n    getRightDisplacedHeadPx() {\r\n        return this.rightDisplacedHeadPx;\r\n    }\r\n    /** Set spacing to the left of the notes. */\r\n    setLeftDisplacedHeadPx(x) {\r\n        this.leftDisplacedHeadPx = x;\r\n        return this;\r\n    }\r\n    /** Set spacing to the right of the notes. */\r\n    setRightDisplacedHeadPx(x) {\r\n        this.rightDisplacedHeadPx = x;\r\n        return this;\r\n    }\r\n    /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\r\n    shouldIgnoreTicks() {\r\n        return this.ignore_ticks;\r\n    }\r\n    /** Get the stave line number for the note. */\r\n    // eslint-disable-next-line\r\n    getLineNumber(isTopNote) {\r\n        return 0;\r\n    }\r\n    /** Get the stave line number for rest. */\r\n    getLineForRest() {\r\n        return 0;\r\n    }\r\n    /** Get the glyph associated with this note. */\r\n    // eslint-disable-next-line\r\n    getGlyph() {\r\n        return this.glyph;\r\n    }\r\n    /** Get the glyph width. */\r\n    getGlyphWidth() {\r\n        // TODO: FIXME (multiple potential values for this.glyph)\r\n        if (this.glyph) {\r\n            if (this.glyph.getMetrics) {\r\n                return this.glyph.getMetrics().width;\r\n            }\r\n            else if (this.glyph.getWidth) {\r\n                return this.glyph.getWidth(this.render_options.glyph_font_scale);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * Set Y positions for this note. Each Y value is associated with\r\n     * an individual pitch/key within the note/chord.\r\n     */\r\n    setYs(ys) {\r\n        this.ys = ys;\r\n        return this;\r\n    }\r\n    /**\r\n     * Get Y positions for this note. Each Y value is associated with\r\n     * an individual pitch/key within the note/chord.\r\n     */\r\n    getYs() {\r\n        if (this.ys.length === 0) {\r\n            throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\r\n        }\r\n        return this.ys;\r\n    }\r\n    /**\r\n     * Get the Y position of the space above the stave onto which text can\r\n     * be rendered.\r\n     */\r\n    getYForTopText(text_line) {\r\n        return this.checkStave().getYForTopText(text_line);\r\n    }\r\n    /** Return the voice that this note belongs in. */\r\n    getVoice() {\r\n        if (!this.voice)\r\n            throw new RuntimeError('NoVoice', 'Note has no voice.');\r\n        return this.voice;\r\n    }\r\n    /** Attach this note to `voice`. */\r\n    setVoice(voice) {\r\n        this.voice = voice;\r\n        this.preFormatted = false;\r\n        return this;\r\n    }\r\n    /** Get the `TickContext` for this note. */\r\n    getTickContext() {\r\n        return this.checkTickContext();\r\n    }\r\n    /** Set the `TickContext` for this note. */\r\n    setTickContext(tc) {\r\n        this.tickContext = tc;\r\n        this.preFormatted = false;\r\n        return this;\r\n    }\r\n    /** Accessor to duration. */\r\n    getDuration() {\r\n        return this.duration;\r\n    }\r\n    /** Accessor to isDotted. */\r\n    isDotted() {\r\n        return this.getModifiersByType('Dot').length > 0;\r\n    }\r\n    /** Accessor to hasStem. */\r\n    hasStem() {\r\n        return false;\r\n    }\r\n    /** Accessor to note type. */\r\n    getNoteType() {\r\n        return this.noteType;\r\n    }\r\n    /** Get the beam. */\r\n    getBeam() {\r\n        return this.beam;\r\n    }\r\n    /** Check and get the beam. */\r\n    checkBeam() {\r\n        return defined(this.beam, 'NoBeam', 'No beam attached to instance');\r\n    }\r\n    /** Check it has a beam. */\r\n    hasBeam() {\r\n        return this.beam != undefined;\r\n    }\r\n    /** Set the beam. */\r\n    setBeam(beam) {\r\n        this.beam = beam;\r\n        return this;\r\n    }\r\n    /**\r\n     * Attach a modifier to this note.\r\n     * @param modifier the Modifier to add.\r\n     * @param index of the key to modify.\r\n     * @returns this\r\n     */\r\n    addModifier(modifier, index = 0) {\r\n        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';\r\n        // Backwards compatibility with 3.0.9.\r\n        if (typeof index === 'string') {\r\n            index = parseInt(index);\r\n            // eslint-disable-next-line\r\n            console.warn(signature + ' expected a number for `index`, but received a string.');\r\n        }\r\n        // Some versions of VexFlow had the two parameters reversed.\r\n        // Check here and throw an error if the argument types are not correct.\r\n        if (typeof modifier !== 'object' || typeof index !== 'number') {\r\n            throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');\r\n        }\r\n        modifier.setNote(this);\r\n        modifier.setIndex(index);\r\n        super.addModifier(modifier);\r\n        return this;\r\n    }\r\n    /** Get all modifiers of a specific type in `this.modifiers`. */\r\n    getModifiersByType(type) {\r\n        return this.modifiers.filter((modifier) => modifier.getCategory() === type);\r\n    }\r\n    /** Get the coordinates for where modifiers begin. */\r\n    // eslint-disable-next-line\r\n    getModifierStartXY(position, index, options) {\r\n        if (!this.preFormatted) {\r\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\r\n        }\r\n        return {\r\n            x: this.getAbsoluteX(),\r\n            y: this.ys[0],\r\n        };\r\n    }\r\n    getRightParenthesisPx(index) {\r\n        const props = this.getKeyProps()[index];\r\n        return props.displaced ? this.getRightDisplacedHeadPx() : 0;\r\n    }\r\n    getLeftParenthesisPx(index) {\r\n        const props = this.getKeyProps()[index];\r\n        return props.displaced ? this.getLeftDisplacedHeadPx() - this.x_shift : -this.x_shift;\r\n    }\r\n    getFirstDotPx() {\r\n        let px = this.getRightDisplacedHeadPx();\r\n        if (this.checkModifierContext().getMembers('Parenthesis').length !== 0)\r\n            px += Tables.currentMusicFont().lookupMetric('parenthesis.default.width');\r\n        return px;\r\n    }\r\n    /** Get the metrics for this note. */\r\n    getMetrics() {\r\n        if (!this.preFormatted) {\r\n            throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\r\n        }\r\n        const modLeftPx = this.modifierContext ? this.modifierContext.getState().left_shift : 0;\r\n        const modRightPx = this.modifierContext ? this.modifierContext.getState().right_shift : 0;\r\n        const width = this.getWidth();\r\n        const glyphWidth = this.getGlyphWidth();\r\n        const notePx = width -\r\n            modLeftPx - // subtract left modifiers\r\n            modRightPx - // subtract right modifiers\r\n            this.leftDisplacedHeadPx - // subtract left displaced head\r\n            this.rightDisplacedHeadPx; // subtract right displaced head\r\n        // NOTE: If you change this, remember to update MockTickable.getMetrics() in the tests/ directory.\r\n        return {\r\n            width,\r\n            glyphWidth,\r\n            notePx,\r\n            // Modifier spacing.\r\n            modLeftPx,\r\n            modRightPx,\r\n            // Displaced note head on left or right.\r\n            leftDisplacedHeadPx: this.leftDisplacedHeadPx,\r\n            rightDisplacedHeadPx: this.rightDisplacedHeadPx,\r\n            glyphPx: 0,\r\n        };\r\n    }\r\n    /**\r\n     * Get the absolute `X` position of this note's tick context. This\r\n     * excludes x_shift, so you'll need to factor it in if you're\r\n     * looking for the post-formatted x-position.\r\n     */\r\n    getAbsoluteX() {\r\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\r\n        // Position note to left edge of tick context.\r\n        let x = tickContext.getX();\r\n        if (this.stave) {\r\n            x += this.stave.getNoteStartX() + Tables.currentMusicFont().lookupMetric('stave.padding');\r\n        }\r\n        if (this.isCenterAligned()) {\r\n            x += this.getCenterXShift();\r\n        }\r\n        return x;\r\n    }\r\n    /** Get the direction of the stem. */\r\n    getStemDirection() {\r\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\r\n    }\r\n    /** Get the top and bottom `y` values of the stem. */\r\n    getStemExtents() {\r\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\r\n    }\r\n    /** Get the `x` coordinate to the right of the note. */\r\n    getTieRightX() {\r\n        let tieStartX = this.getAbsoluteX();\r\n        const note_glyph_width = this.glyph.getWidth();\r\n        tieStartX += note_glyph_width / 2;\r\n        tieStartX += -this.width / 2 + this.width + 2;\r\n        return tieStartX;\r\n    }\r\n    /** Get the `x` coordinate to the left of the note. */\r\n    getTieLeftX() {\r\n        let tieEndX = this.getAbsoluteX();\r\n        const note_glyph_width = this.glyph.getWidth();\r\n        tieEndX += note_glyph_width / 2;\r\n        tieEndX -= this.width / 2 + 2;\r\n        return tieEndX;\r\n    }\r\n    // Get the pitches in the note\r\n    getKeys() {\r\n        return this.keys;\r\n    }\r\n    // Get the properties for all the keys in the note\r\n    getKeyProps() {\r\n        return this.keyProps;\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { BoundingBox } from './boundingbox';\r\nimport { Glyph } from './glyph';\r\nimport { Note } from './note';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { defined, log, RuntimeError } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (NoteHead.DEBUG)\r\n        log('Vex.Flow.NoteHead', args);\r\n}\r\n/**\r\n * Draw slashnote head manually. No glyph exists for this.\r\n * @param ctx the Canvas context\r\n * @param duration the duration of the note. ex: \"4\"\r\n * @param x the x coordinate to draw at\r\n * @param y the y coordinate to draw at\r\n * @param stem_direction the direction of the stem\r\n */\r\nfunction drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {\r\n    const width = Tables.SLASH_NOTEHEAD_WIDTH;\r\n    ctx.save();\r\n    ctx.setLineWidth(Tables.STEM_WIDTH);\r\n    let fill = false;\r\n    if (Tables.durationToNumber(duration) > 2) {\r\n        fill = true;\r\n    }\r\n    if (!fill)\r\n        x -= (Tables.STEM_WIDTH / 2) * stem_direction;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, y + staveSpace);\r\n    ctx.lineTo(x, y + 1);\r\n    ctx.lineTo(x + width, y - staveSpace);\r\n    ctx.lineTo(x + width, y);\r\n    ctx.lineTo(x, y + staveSpace);\r\n    ctx.closePath();\r\n    if (fill) {\r\n        ctx.fill();\r\n    }\r\n    else {\r\n        ctx.stroke();\r\n    }\r\n    if (Tables.durationToFraction(duration).equals(0.5)) {\r\n        const breve_lines = [-3, -1, width + 1, width + 3];\r\n        for (let i = 0; i < breve_lines.length; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(x + breve_lines[i], y - 10);\r\n            ctx.lineTo(x + breve_lines[i], y + 11);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    ctx.restore();\r\n}\r\n/**\r\n * `NoteHeads` are typically not manipulated\r\n * directly, but used internally in `StaveNote`.\r\n *\r\n * See `tests/notehead_tests.ts` for usage examples.\r\n */\r\nexport class NoteHead extends Note {\r\n    constructor(noteStruct) {\r\n        super(noteStruct);\r\n        this.custom_glyph = false;\r\n        this.stem_up_x_offset = 0;\r\n        this.stem_down_x_offset = 0;\r\n        this.index = noteStruct.index;\r\n        this.x = noteStruct.x || 0;\r\n        this.y = noteStruct.y || 0;\r\n        if (noteStruct.note_type)\r\n            this.noteType = noteStruct.note_type;\r\n        this.displaced = noteStruct.displaced || false;\r\n        this.stem_direction = noteStruct.stem_direction || Stem.UP;\r\n        this.line = noteStruct.line || 0;\r\n        // Get glyph code based on duration and note type. This could be\r\n        // regular notes, rests, or other custom codes.\r\n        this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\r\n        defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\r\n        this.glyph_code = this.glyph.code_head;\r\n        this.x_shift = noteStruct.x_shift || 0;\r\n        if (noteStruct.custom_glyph_code) {\r\n            this.custom_glyph = true;\r\n            this.glyph_code = noteStruct.custom_glyph_code;\r\n            this.stem_up_x_offset = noteStruct.stem_up_x_offset || 0;\r\n            this.stem_down_x_offset = noteStruct.stem_down_x_offset || 0;\r\n        }\r\n        this.style = noteStruct.style;\r\n        this.slashed = noteStruct.slashed || false;\r\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \r\n            // font size for note heads\r\n            glyph_font_scale: noteStruct.glyph_font_scale || Tables.NOTATION_FONT_SCALE });\r\n        this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.NoteHead;\r\n    }\r\n    /** Get the width of the notehead. */\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    /** Determine if the notehead is displaced. */\r\n    isDisplaced() {\r\n        return this.displaced === true;\r\n    }\r\n    /** Get the glyph data. */\r\n    getGlyph() {\r\n        return this.glyph;\r\n    }\r\n    /** Set the X coordinate. */\r\n    setX(x) {\r\n        this.x = x;\r\n        return this;\r\n    }\r\n    /** Get the Y coordinate. */\r\n    getY() {\r\n        return this.y;\r\n    }\r\n    /** Set the Y coordinate. */\r\n    setY(y) {\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    /** Get the stave line the notehead is placed on. */\r\n    getLine() {\r\n        return this.line;\r\n    }\r\n    /** Set the stave line the notehead is placed on. */\r\n    setLine(line) {\r\n        this.line = line;\r\n        return this;\r\n    }\r\n    /** Get the canvas `x` coordinate position of the notehead. */\r\n    getAbsoluteX() {\r\n        // If the note has not been preformatted, then get the static x value\r\n        // Otherwise, it's been formatted and we should use it's x value relative\r\n        // to its tick context\r\n        const x = !this.preFormatted ? this.x : super.getAbsoluteX();\r\n        // For a more natural displaced notehead, we adjust the displacement amount\r\n        // by half the stem width in order to maintain a slight overlap with the stem\r\n        const displacementStemAdjustment = Stem.WIDTH / 2;\r\n        const musicFont = Tables.currentMusicFont();\r\n        const fontShift = musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\r\n        const displacedFontShift = musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;\r\n        return (x +\r\n            fontShift +\r\n            (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0));\r\n    }\r\n    /** Get the `BoundingBox` for the `NoteHead`. */\r\n    getBoundingBox() {\r\n        if (!this.preFormatted) {\r\n            throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\r\n        }\r\n        const spacing = this.checkStave().getSpacingBetweenLines();\r\n        const half_spacing = spacing / 2;\r\n        const min_y = this.y - half_spacing;\r\n        return new BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\r\n    }\r\n    /** Set notehead to a provided `stave`. */\r\n    setStave(stave) {\r\n        const line = this.getLine();\r\n        this.stave = stave;\r\n        if (this.stave) {\r\n            this.setY(this.stave.getYForNote(line));\r\n            this.setContext(this.stave.getContext());\r\n        }\r\n        return this;\r\n    }\r\n    /** Pre-render formatting. */\r\n    preFormat() {\r\n        if (this.preFormatted)\r\n            return this;\r\n        const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\r\n        this.setWidth(width);\r\n        this.preFormatted = true;\r\n        return this;\r\n    }\r\n    /** Draw the notehead. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        let head_x = this.getAbsoluteX();\r\n        if (this.custom_glyph) {\r\n            // head_x += this.x_shift;\r\n            head_x += this.stem_direction === Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;\r\n        }\r\n        const y = this.y;\r\n        L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", head_x, y);\r\n        // Begin and end positions for head.\r\n        const stem_direction = this.stem_direction;\r\n        const glyph_font_scale = this.render_options.glyph_font_scale;\r\n        if (this.style) {\r\n            this.applyStyle(ctx);\r\n        }\r\n        const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\r\n        if (this.noteType === 's') {\r\n            const staveSpace = this.checkStave().getSpacingBetweenLines();\r\n            drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\r\n        }\r\n        else {\r\n            Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\r\n                category: this.custom_glyph ? `noteHead.custom.${categorySuffix}` : `noteHead.standard.${categorySuffix}`,\r\n            });\r\n        }\r\n        if (this.style) {\r\n            this.restoreStyle(ctx);\r\n        }\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\r\nNoteHead.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author Taehoon Moon 2016\r\n//\r\n// ## Description\r\n//\r\n// This file implements `NoteSubGroup` which is used to format and\r\n// render notes as a `Modifier`\r\n// ex) ClefNote, TimeSigNote and BarNote.\r\nimport { Formatter } from './formatter';\r\nimport { Modifier } from './modifier';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { Voice } from './voice';\r\nexport class NoteSubGroup extends Modifier {\r\n    constructor(subNotes) {\r\n        super();\r\n        this.preFormatted = false;\r\n        this.position = Modifier.Position.LEFT;\r\n        this.subNotes = subNotes;\r\n        this.subNotes.forEach((subNote) => {\r\n            subNote.setIgnoreTicks(false);\r\n        });\r\n        this.width = 0;\r\n        this.formatter = new Formatter();\r\n        this.voice = new Voice({\r\n            num_beats: 4,\r\n            beat_value: 4,\r\n            resolution: Tables.RESOLUTION,\r\n        }).setStrict(false);\r\n        this.voice.addTickables(this.subNotes);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.NoteSubGroup;\r\n    }\r\n    // Arrange groups inside a `ModifierContext`\r\n    static format(groups, state) {\r\n        if (!groups || groups.length === 0)\r\n            return false;\r\n        let width = 0;\r\n        for (let i = 0; i < groups.length; ++i) {\r\n            const group = groups[i];\r\n            group.preFormat();\r\n            width += group.getWidth();\r\n        }\r\n        state.left_shift += width;\r\n        return true;\r\n    }\r\n    preFormat() {\r\n        if (this.preFormatted)\r\n            return;\r\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0);\r\n        this.setWidth(this.formatter.getMinTotalWidth());\r\n        this.preFormatted = true;\r\n    }\r\n    setWidth(width) {\r\n        this.width = width;\r\n        return this;\r\n    }\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\r\n        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Cyril Silverman\r\n// MIT License\r\nimport { Glyph } from './glyph';\r\nimport { Modifier } from './modifier';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { TickContext } from './tickcontext';\r\nimport { Category, isTabNote } from './typeguard';\r\nimport { defined, log, RuntimeError } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Ornament.DEBUG)\r\n        log('Vex.Flow.Ornament', args);\r\n}\r\n/**\r\n * Ornament implements ornaments as modifiers that can be\r\n * attached to notes. The complete list of ornaments is available in\r\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\r\n *\r\n * See `tests/ornament_tests.ts` for usage examples.\r\n */\r\nexport class Ornament extends Modifier {\r\n    /**\r\n     * Create a new ornament of type `type`, which is an entry in\r\n     * `Vex.Flow.ornamentCodes` in `tables.ts`.\r\n     */\r\n    constructor(type) {\r\n        super();\r\n        this.type = type;\r\n        this.delayed = false;\r\n        this.render_options = {\r\n            font_scale: 38,\r\n            accidentalLowerPadding: 3,\r\n            accidentalUpperPadding: 3,\r\n        };\r\n        this.ornament = Tables.ornamentCodes(this.type);\r\n        // new ornaments have their origin at the origin, and have more specific\r\n        // metrics.  Legacy ornaments do some\r\n        // x scaling, and have hard-coded metrics\r\n        const metrics = this.getMetrics();\r\n        // some jazz ornaments are above or below depending on stem direction.\r\n        this.adjustForStemDirection = false;\r\n        // some jazz ornaments like falls are supposed to overlap with future bars\r\n        // and so we report a different width than they actually take up.\r\n        this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;\r\n        this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;\r\n        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\r\n        if (!this.ornament) {\r\n            throw new RuntimeError('ArgumentError', `Ornament not found: '${this.type}'`);\r\n        }\r\n        this.x_shift = metrics ? metrics.xOffset : 0;\r\n        this.y_shift = metrics ? metrics.yOffset : 0;\r\n        this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale, {\r\n            category: `ornament.${this.ornament.code}`,\r\n        });\r\n        // Is this a jazz ornament that goes between this note and the next note.\r\n        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\r\n            this.delayed = true;\r\n        }\r\n        // Legacy ornaments need this.  I don't know why, but horizontal spacing issues\r\n        // happen if I don't set it.\r\n        if (!metrics) {\r\n            this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\r\n        }\r\n    }\r\n    /** Ornaments category string. */\r\n    static get CATEGORY() {\r\n        return Category.Ornament;\r\n    }\r\n    static get minPadding() {\r\n        const musicFont = Tables.currentMusicFont();\r\n        return musicFont.lookupMetric('glyphs.noteHead.minPadding');\r\n    }\r\n    /** Arrange ornaments inside `ModifierContext` */\r\n    static format(ornaments, state) {\r\n        if (!ornaments || ornaments.length === 0)\r\n            return false;\r\n        let width = 0; // width is used by ornaments, which are always centered on the note head\r\n        let right_shift = state.right_shift; // jazz ornaments calculate r/l shift separately\r\n        let left_shift = state.left_shift;\r\n        let yOffset = 0;\r\n        for (let i = 0; i < ornaments.length; ++i) {\r\n            const ornament = ornaments[i];\r\n            const increment = 2;\r\n            if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {\r\n                ornament.x_shift += right_shift + 2;\r\n            }\r\n            if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {\r\n                ornament.x_shift -= left_shift + 2;\r\n            }\r\n            if (ornament.reportedWidth && ornament.x_shift < 0) {\r\n                left_shift += ornament.reportedWidth;\r\n            }\r\n            else if (ornament.reportedWidth && ornament.x_shift >= 0) {\r\n                right_shift += ornament.reportedWidth + Ornament.minPadding;\r\n            }\r\n            else {\r\n                width = Math.max(ornament.getWidth(), width);\r\n            }\r\n            // articulations above/below the line can be stacked.\r\n            if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {\r\n                // Unfortunately we don't know the stem direction.  So we base it\r\n                // on the line number, but also allow it to be overridden.\r\n                const ornamentNote = defined(ornament.note, 'NoAttachedNote');\r\n                if (ornamentNote.getLineNumber() >= 3 || ornament.getPosition() === Modifier.Position.ABOVE) {\r\n                    state.top_text_line += increment;\r\n                    ornament.y_shift += yOffset;\r\n                    yOffset -= ornament.glyph.bbox.getH();\r\n                }\r\n                else {\r\n                    state.text_line += increment;\r\n                    ornament.y_shift += yOffset;\r\n                    yOffset += ornament.glyph.bbox.getH();\r\n                }\r\n            }\r\n            else {\r\n                if (ornament.getPosition() === Modifier.Position.ABOVE) {\r\n                    ornament.setTextLine(state.top_text_line);\r\n                    state.top_text_line += increment;\r\n                }\r\n                else {\r\n                    ornament.setTextLine(state.text_line);\r\n                    state.text_line += increment;\r\n                }\r\n            }\r\n        }\r\n        // Note: 'legit' ornaments don't consider other modifiers when calculating their\r\n        // X position, but jazz ornaments sometimes need to.\r\n        state.left_shift = left_shift + width / 2;\r\n        state.right_shift = right_shift + width / 2;\r\n        return true;\r\n    }\r\n    /**\r\n     * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\r\n     * these are generally on the top of the staff.\r\n     */\r\n    static get ornamentNoteTransition() {\r\n        return ['flip', 'jazzTurn', 'smear'];\r\n    }\r\n    /**\r\n     * ornamentAttack indicates something that happens in the attach, placed before the note and\r\n     * any accidentals\r\n     */\r\n    static get ornamentAttack() {\r\n        return ['scoop'];\r\n    }\r\n    /**\r\n     * The ornament is aligned based on the note head, but without regard to whether the\r\n     * stem goes up or down.\r\n     */\r\n    static get ornamentAlignWithNoteHead() {\r\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];\r\n    }\r\n    /**\r\n     * An ornament that happens on the release of the note, generally placed after the\r\n     * note and overlapping the next beat/measure..\r\n     */\r\n    static get ornamentRelease() {\r\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\r\n    }\r\n    /** ornamentArticulation goes above/below the note based on space availablity */\r\n    static get ornamentArticulation() {\r\n        return ['bend', 'plungerClosed', 'plungerOpen'];\r\n    }\r\n    /**\r\n     * Legacy ornaments have hard-coded metrics.  If additional ornament types are\r\n     * added, get their metrics here.\r\n     */\r\n    // eslint-disable-next-line\r\n    getMetrics() {\r\n        return Tables.currentMusicFont().getMetrics().glyphs.jazzOrnaments[this.ornament.code];\r\n    }\r\n    /** Set whether the ornament is to be delayed. */\r\n    setDelayed(delayed) {\r\n        this.delayed = delayed;\r\n        return this;\r\n    }\r\n    /** Set the upper accidental for the ornament. */\r\n    setUpperAccidental(accid) {\r\n        const scale = this.render_options.font_scale / 1.3;\r\n        this.accidentalUpper = new Glyph(Tables.accidentalCodes(accid).code, scale);\r\n        this.accidentalUpper.setOrigin(0.5, 1.0);\r\n        return this;\r\n    }\r\n    /** Set the lower accidental for the ornament. */\r\n    setLowerAccidental(accid) {\r\n        const scale = this.render_options.font_scale / 1.3;\r\n        this.accidentalLower = new Glyph(Tables.accidentalCodes(accid).code, scale);\r\n        this.accidentalLower.setOrigin(0.5, 1.0);\r\n        return this;\r\n    }\r\n    /** Render ornament in position next to note. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const stemDir = note.getStemDirection();\r\n        const stave = note.checkStave();\r\n        const classString = Object.keys(this.getAttribute('classes')).join(' ');\r\n        ctx.openGroup(classString, this.getAttribute('id'));\r\n        // Get stem extents\r\n        const stemExtents = note.checkStem().getExtents();\r\n        let y = stemDir === Stem.DOWN ? stemExtents.baseY : stemExtents.topY;\r\n        // TabNotes don't have stems attached to them. Tab stems are rendered outside the stave.\r\n        if (isTabNote(note)) {\r\n            if (note.hasStem()) {\r\n                if (stemDir === Stem.DOWN) {\r\n                    y = stave.getYForTopText(this.text_line);\r\n                }\r\n            }\r\n            else {\r\n                // Without a stem\r\n                y = stave.getYForTopText(this.text_line);\r\n            }\r\n        }\r\n        const isPlacedOnNoteheadSide = stemDir === Stem.DOWN;\r\n        const spacing = stave.getSpacingBetweenLines();\r\n        let lineSpacing = 1;\r\n        // Beamed stems are longer than quarter note stems, adjust accordingly\r\n        if (!isPlacedOnNoteheadSide && note.hasBeam()) {\r\n            lineSpacing += 0.5;\r\n        }\r\n        const totalSpacing = spacing * (this.text_line + lineSpacing);\r\n        const glyphYBetweenLines = y - totalSpacing;\r\n        // Get initial coordinates for the modifier position\r\n        const start = note.getModifierStartXY(this.position, this.index);\r\n        let glyphX = start.x;\r\n        // If the ornament is aligned with the note head, don't consider the stave y\r\n        // but use the 'natural' modifier y\r\n        let glyphY = this.ornamentAlignWithNoteHead\r\n            ? start.y\r\n            : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\r\n        glyphY += this.y_shift;\r\n        // Ajdust x position if ornament is delayed\r\n        if (this.delayed) {\r\n            let delayXShift = 0;\r\n            const startX = glyphX - (stave.getX() - 10);\r\n            if (this.delayXShift !== undefined) {\r\n                delayXShift = this.delayXShift;\r\n            }\r\n            else {\r\n                delayXShift += this.glyph.getMetrics().width / 2;\r\n                const nextContext = TickContext.getNextContext(note.getTickContext());\r\n                if (nextContext) {\r\n                    delayXShift += (nextContext.getX() - startX) * 0.5;\r\n                }\r\n                else {\r\n                    delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\r\n                }\r\n                this.delayXShift = delayXShift;\r\n            }\r\n            glyphX += delayXShift;\r\n        }\r\n        L('Rendering ornament: ', this.ornament, glyphX, glyphY);\r\n        if (this.accidentalLower) {\r\n            this.accidentalLower.render(ctx, glyphX, glyphY);\r\n            glyphY -= this.accidentalLower.getMetrics().height;\r\n            glyphY -= this.render_options.accidentalLowerPadding;\r\n        }\r\n        if (this.stemUpYOffset && note.hasStem() && note.getStemDirection() === 1) {\r\n            glyphY += this.stemUpYOffset;\r\n        }\r\n        if (note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\r\n            glyphY = note.checkStave().getBoundingBox().getY() + 40;\r\n        }\r\n        this.glyph.render(ctx, glyphX + this.x_shift, glyphY);\r\n        if (this.accidentalUpper) {\r\n            glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;\r\n            this.accidentalUpper.render(ctx, glyphX, glyphY);\r\n        }\r\n        ctx.closeGroup();\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\r\nOrnament.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Rodrigo Vilar\r\n// MIT License\r\nimport { Glyph } from './glyph';\r\nimport { Modifier, ModifierPosition } from './modifier';\r\nimport { Tables } from './tables';\r\nimport { Category, isGraceNote } from './typeguard';\r\n/** Parenthesis implements parenthesis modifiers for notes. */\r\nexport class Parenthesis extends Modifier {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param position Modifier.Position.LEFT (default) or Modifier.Position.RIGHT\r\n     */\r\n    constructor(position) {\r\n        super();\r\n        this.position = position !== null && position !== void 0 ? position : Modifier.Position.LEFT;\r\n        this.point = Tables.currentMusicFont().lookupMetric('parenthesis.default.point');\r\n        this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Parenthesis;\r\n    }\r\n    /** Add parentheses to the notes. */\r\n    static buildAndAttach(notes) {\r\n        for (const note of notes) {\r\n            for (let i = 0; i < note.keys.length; i++) {\r\n                note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);\r\n                note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);\r\n            }\r\n        }\r\n    }\r\n    /** Arrange parentheses inside a ModifierContext. */\r\n    static format(parentheses, state) {\r\n        if (!parentheses || parentheses.length === 0)\r\n            return false;\r\n        let x_widthL = 0;\r\n        let x_widthR = 0;\r\n        for (let i = 0; i < parentheses.length; ++i) {\r\n            const parenthesis = parentheses[i];\r\n            const note = parenthesis.getNote();\r\n            const pos = parenthesis.getPosition();\r\n            const index = parenthesis.checkIndex();\r\n            let shift = 0;\r\n            if (pos === ModifierPosition.RIGHT) {\r\n                shift = note.getRightParenthesisPx(index);\r\n                x_widthR = x_widthR > shift + parenthesis.width ? x_widthR : shift + parenthesis.width;\r\n            }\r\n            if (pos === ModifierPosition.LEFT) {\r\n                shift = note.getLeftParenthesisPx(index);\r\n                x_widthL = x_widthL > shift + parenthesis.width ? x_widthL : shift + parenthesis.width;\r\n            }\r\n            parenthesis.setXShift(shift);\r\n        }\r\n        state.left_shift += x_widthL;\r\n        state.right_shift += x_widthR;\r\n        return true;\r\n    }\r\n    /** Set the associated note. */\r\n    setNote(note) {\r\n        this.note = note;\r\n        this.point = Tables.currentMusicFont().lookupMetric('parenthesis.default.point');\r\n        this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));\r\n        if (isGraceNote(note)) {\r\n            this.point = Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.point');\r\n            this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.width'));\r\n        }\r\n        return this;\r\n    }\r\n    /** Render the parenthesis. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\r\n        const x = start.x + this.x_shift;\r\n        const y = start.y + this.y_shift;\r\n        if (this.position == Modifier.Position.RIGHT) {\r\n            Glyph.renderGlyph(ctx, x + 1, y, this.point, 'noteheadParenthesisRight', {\r\n                category: `noteHead.standard.noteheadParenthesisRight`,\r\n            });\r\n        }\r\n        else if (this.position == Modifier.Position.LEFT) {\r\n            Glyph.renderGlyph(ctx, x - 2, y, this.point, 'noteheadParenthesisLeft', {\r\n                category: `noteHead.standard.noteheadParenthesisLeft`,\r\n            });\r\n        }\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// A generic text parsing class for VexFlow.\r\nimport { log, RuntimeError } from './util';\r\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Parser.DEBUG)\r\n        log('Vex.Flow.Parser', args);\r\n}\r\nconst NO_ERROR_POS = -1;\r\n// Converts parser results into an easy to reference list that can be\r\n// used in triggers. This function returns:\r\n// - nested array in which the leaf elements are string or null\r\n// - string (including empty strings)\r\n// - null\r\nfunction flattenMatches(r) {\r\n    if ('matchedString' in r)\r\n        return r.matchedString; // string\r\n    if ('results' in r)\r\n        return flattenMatches(r.results);\r\n    const results = r;\r\n    if (results.length === 1)\r\n        return flattenMatches(results[0]);\r\n    if (results.length === 0)\r\n        return null;\r\n    return results.map(flattenMatches); // nested array\r\n}\r\n// This is the base parser class. Given an arbitrary context-free grammar, it\r\n// can parse any line and execute code when specific rules are met (e.g.,\r\n// when a string is terminated.)\r\nexport class Parser {\r\n    // For an example of a simple grammar, take a look at tests/parser_tests.ts or\r\n    // the EasyScore grammar in easyscore.ts.\r\n    constructor(grammar) {\r\n        this.grammar = grammar;\r\n        this.line = '';\r\n        this.pos = 0;\r\n        this.errorPos = NO_ERROR_POS;\r\n    }\r\n    // Parse `line` using current grammar. Returns `{success: true}` if the\r\n    // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\r\n    // where `errorPos` is the location of the error in the string.\r\n    parse(line) {\r\n        this.line = line;\r\n        this.pos = 0;\r\n        this.errorPos = NO_ERROR_POS;\r\n        const result = this.expect(this.grammar.begin());\r\n        result.errorPos = this.errorPos;\r\n        return result;\r\n    }\r\n    matchFail(returnPos) {\r\n        if (this.errorPos === NO_ERROR_POS)\r\n            this.errorPos = this.pos;\r\n        this.pos = returnPos;\r\n    }\r\n    matchSuccess() {\r\n        this.errorPos = NO_ERROR_POS;\r\n    }\r\n    // Look for `token` in this.line[this.pos], and return success\r\n    // if one is found. `token` is specified as a regular expression.\r\n    matchToken(token, noSpace = false) {\r\n        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\r\n        const workingLine = this.line.slice(this.pos);\r\n        const result = workingLine.match(regexp);\r\n        if (result !== null) {\r\n            return {\r\n                success: true,\r\n                matchedString: result[2],\r\n                incrementPos: result[1].length,\r\n                pos: this.pos,\r\n            };\r\n        }\r\n        else {\r\n            return { success: false, pos: this.pos };\r\n        }\r\n    }\r\n    // Execute rule to match a sequence of tokens (or rules). If `maybe` is\r\n    // set, then return success even if the token is not found, but reset\r\n    // the position before exiting.\r\n    // TODO: expectOne(...) is never called with the `maybe` parameter.\r\n    expectOne(rule, maybe = false) {\r\n        const results = [];\r\n        const pos = this.pos;\r\n        let allMatches = true;\r\n        let oneMatch = false;\r\n        maybe = maybe === true || rule.maybe === true;\r\n        // Execute all sub rules in sequence.\r\n        if (rule.expect) {\r\n            for (const next of rule.expect) {\r\n                const localPos = this.pos;\r\n                const result = this.expect(next);\r\n                // If `rule.or` is set, then return success if any one\r\n                // of the subrules match, else all subrules must match.\r\n                if (result.success) {\r\n                    results.push(result);\r\n                    oneMatch = true;\r\n                    if (rule.or)\r\n                        break;\r\n                }\r\n                else {\r\n                    allMatches = false;\r\n                    if (!rule.or) {\r\n                        this.pos = localPos;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const gotOne = (rule.or && oneMatch) || allMatches;\r\n        const success = gotOne || maybe === true;\r\n        const numMatches = gotOne ? 1 : 0;\r\n        if (maybe && !gotOne)\r\n            this.pos = pos;\r\n        if (success) {\r\n            this.matchSuccess();\r\n        }\r\n        else {\r\n            this.matchFail(pos);\r\n        }\r\n        return { success, results, numMatches };\r\n    }\r\n    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\r\n    // then a failed match is also a success (but the position is reset).\r\n    expectOneOrMore(rule, maybe = false) {\r\n        const results = [];\r\n        const pos = this.pos;\r\n        let numMatches = 0;\r\n        let more = true;\r\n        do {\r\n            const result = this.expectOne(rule);\r\n            if (result.success && result.results) {\r\n                numMatches++;\r\n                results.push(result.results);\r\n            }\r\n            else {\r\n                more = false;\r\n            }\r\n        } while (more);\r\n        const success = numMatches > 0 || maybe === true;\r\n        if (maybe && !(numMatches > 0))\r\n            this.pos = pos;\r\n        if (success) {\r\n            this.matchSuccess();\r\n        }\r\n        else {\r\n            this.matchFail(pos);\r\n        }\r\n        return { success, results, numMatches };\r\n    }\r\n    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\r\n    expectZeroOrMore(rule) {\r\n        return this.expectOneOrMore(rule, true);\r\n    }\r\n    // Execute the rule produced by the provided `rules` function. This\r\n    // offloads to one of the above matchers and consolidates the results. It is also\r\n    // responsible for executing any code triggered by the rule (in `rule.run`.)\r\n    expect(ruleFunc) {\r\n        L('Evaluating rule function:', ruleFunc);\r\n        if (!ruleFunc) {\r\n            throw new RuntimeError('Invalid rule function');\r\n        }\r\n        let result;\r\n        // Get rule from Grammar class.\r\n        // expect(...) handles both lexing & parsing:\r\n        // - lexer rules produce tokens.\r\n        // - parser rules produce expressions which may trigger code via the\r\n        //   { run: () => ... } trigger functions in easyscore.ts.\r\n        //   These functions build the VexFlow objects that are displayed on screen.\r\n        const rule = ruleFunc.bind(this.grammar)();\r\n        if (rule.token) {\r\n            // A lexer rule has a `token` property.\r\n            // Base case: parse the regex and throw an error if the\r\n            // line doesn't match.\r\n            result = this.matchToken(rule.token, rule.noSpace === true);\r\n            if (result.success) {\r\n                // Token match! Update position and throw away parsed portion\r\n                // of string.\r\n                this.pos += result.incrementPos;\r\n            }\r\n        }\r\n        else if (rule.expect) {\r\n            // A parser rule has an `expect` property.\r\n            if (rule.oneOrMore) {\r\n                result = this.expectOneOrMore(rule);\r\n            }\r\n            else if (rule.zeroOrMore) {\r\n                result = this.expectZeroOrMore(rule);\r\n            }\r\n            else {\r\n                result = this.expectOne(rule);\r\n            }\r\n        }\r\n        else {\r\n            L(rule);\r\n            throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\r\n        }\r\n        // If there's a trigger attached to this rule, then run it.\r\n        // Make the matches accessible through `state.matches` in the\r\n        // `run: (state) => ...` trigger.\r\n        const matches = [];\r\n        result.matches = matches;\r\n        if (result.results) {\r\n            result.results.forEach((r) => matches.push(flattenMatches(r)));\r\n        }\r\n        if (rule.run && result.success) {\r\n            rule.run({ matches });\r\n        }\r\n        return result;\r\n    }\r\n}\r\nParser.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Element } from './element';\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Glyph } from './glyph';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { log, RuntimeError } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (PedalMarking.DEBUG)\r\n        log('Vex.Flow.PedalMarking', args);\r\n}\r\n/**\r\n * Draws a pedal glyph with the provided `name` on a rendering `context`\r\n * at the coordinates `x` and `y. Takes into account the glyph data\r\n * coordinate shifts.\r\n */\r\nfunction drawPedalGlyph(name, context, x, y, point) {\r\n    const glyph_data = PedalMarking.GLYPHS[name];\r\n    const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\r\n    glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\r\n}\r\n/**\r\n * PedalMarking implements different types of pedal markings. These notation\r\n * elements indicate to the performer when to depress and release the a pedal.\r\n *\r\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\r\n * custom text for the release/depress pedal markings.\r\n */\r\nexport class PedalMarking extends Element {\r\n    constructor(notes) {\r\n        super();\r\n        this.notes = notes;\r\n        this.type = PedalMarking.type.TEXT;\r\n        this.line = 0;\r\n        // Custom text for the release/depress markings\r\n        this.custom_depress_text = '';\r\n        this.custom_release_text = '';\r\n        this.resetFont();\r\n        this.render_options = {\r\n            bracket_height: 10,\r\n            text_margin_right: 6,\r\n            bracket_line_width: 1,\r\n            color: 'black',\r\n        };\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.PedalMarking;\r\n    }\r\n    /**\r\n     * Create a sustain pedal marking. Returns the defaults PedalMarking.\r\n     * Which uses the traditional \"Ped\" and \"*\"\" markings.\r\n     */\r\n    static createSustain(notes) {\r\n        const pedal = new PedalMarking(notes);\r\n        return pedal;\r\n    }\r\n    /** Create a sostenuto pedal marking */\r\n    static createSostenuto(notes) {\r\n        const pedal = new PedalMarking(notes);\r\n        pedal.setType(PedalMarking.type.MIXED);\r\n        pedal.setCustomText('Sost. Ped.');\r\n        return pedal;\r\n    }\r\n    /** Create an una corda pedal marking */\r\n    static createUnaCorda(notes) {\r\n        const pedal = new PedalMarking(notes);\r\n        pedal.setType(PedalMarking.type.TEXT);\r\n        pedal.setCustomText('una corda', 'tre corda');\r\n        return pedal;\r\n    }\r\n    /** Set pedal type. */\r\n    setType(type) {\r\n        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\r\n        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\r\n            this.type = type;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Set custom text for the `depress`/`release` pedal markings. No text is\r\n     * set if the parameter is falsy.\r\n     */\r\n    setCustomText(depress, release) {\r\n        this.custom_depress_text = depress || '';\r\n        this.custom_release_text = release || '';\r\n        return this;\r\n    }\r\n    /** Set the staff line to render the markings on. */\r\n    setLine(line) {\r\n        this.line = line;\r\n        return this;\r\n    }\r\n    /** Draw the bracket based pedal markings. */\r\n    drawBracketed() {\r\n        const ctx = this.checkContext();\r\n        let is_pedal_depressed = false;\r\n        let prev_x;\r\n        let prev_y;\r\n        // Iterate through each note\r\n        this.notes.forEach((note, index, notes) => {\r\n            // Each note triggers the opposite pedal action\r\n            is_pedal_depressed = !is_pedal_depressed;\r\n            // Get the initial coordinates for the note\r\n            const x = note.getAbsoluteX();\r\n            const y = note.checkStave().getYForBottomText(this.line + 3);\r\n            // Throw if current note is positioned before the previous note\r\n            if (x < prev_x) {\r\n                throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\r\n            }\r\n            // Determine if the previous or next note are the same\r\n            // as the current note. We need to keep track of this for\r\n            // when adjustments are made for the release+depress action\r\n            const next_is_same = notes[index + 1] === note;\r\n            const prev_is_same = notes[index - 1] === note;\r\n            let x_shift = 0;\r\n            const point = Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\r\n            if (is_pedal_depressed) {\r\n                // Adjustment for release+depress\r\n                x_shift = prev_is_same ? 5 : 0;\r\n                if (this.type === PedalMarking.type.MIXED && !prev_is_same) {\r\n                    // For MIXED style, start with text instead of bracket\r\n                    if (this.custom_depress_text) {\r\n                        // If we have custom text, use instead of the default \"Ped\" glyph\r\n                        const text_width = ctx.measureText(this.custom_depress_text).width;\r\n                        ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\r\n                        x_shift = text_width / 2 + this.render_options.text_margin_right;\r\n                    }\r\n                    else {\r\n                        // Render the Ped glyph in position\r\n                        drawPedalGlyph('pedal_depress', ctx, x, y, point);\r\n                        x_shift = 20 + this.render_options.text_margin_right;\r\n                    }\r\n                }\r\n                else {\r\n                    // Draw start bracket\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(x, y - this.render_options.bracket_height);\r\n                    ctx.lineTo(x + x_shift, y);\r\n                    ctx.stroke();\r\n                    ctx.closePath();\r\n                }\r\n            }\r\n            else {\r\n                // Adjustment for release+depress\r\n                x_shift = next_is_same ? -5 : 0;\r\n                // Draw end bracket\r\n                ctx.beginPath();\r\n                ctx.moveTo(prev_x, prev_y);\r\n                ctx.lineTo(x + x_shift, y);\r\n                ctx.lineTo(x, y - this.render_options.bracket_height);\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n            }\r\n            // Store previous coordinates\r\n            prev_x = x + x_shift;\r\n            prev_y = y;\r\n        });\r\n    }\r\n    /**\r\n     * Draw the text based pedal markings. This defaults to the traditional\r\n     * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\r\n     */\r\n    drawText() {\r\n        const ctx = this.checkContext();\r\n        let is_pedal_depressed = false;\r\n        // Iterate through each note, placing glyphs or custom text accordingly\r\n        this.notes.forEach((note) => {\r\n            is_pedal_depressed = !is_pedal_depressed;\r\n            const stave = note.checkStave();\r\n            const x = note.getAbsoluteX();\r\n            const y = stave.getYForBottomText(this.line + 3);\r\n            const point = Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\r\n            let text_width = 0;\r\n            if (is_pedal_depressed) {\r\n                if (this.custom_depress_text) {\r\n                    text_width = ctx.measureText(this.custom_depress_text).width;\r\n                    ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\r\n                }\r\n                else {\r\n                    drawPedalGlyph('pedal_depress', ctx, x, y, point);\r\n                }\r\n            }\r\n            else {\r\n                if (this.custom_release_text) {\r\n                    text_width = ctx.measureText(this.custom_release_text).width;\r\n                    ctx.fillText(this.custom_release_text, x - text_width / 2, y);\r\n                }\r\n                else {\r\n                    drawPedalGlyph('pedal_release', ctx, x, y, point);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /** Render the pedal marking in position on the rendering context. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        ctx.save();\r\n        ctx.setStrokeStyle(this.render_options.color);\r\n        ctx.setFillStyle(this.render_options.color);\r\n        ctx.setFont(this.textFont);\r\n        L('Rendering Pedal Marking');\r\n        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\r\n            ctx.setLineWidth(this.render_options.bracket_line_width);\r\n            this.drawBracketed();\r\n        }\r\n        else if (this.type === PedalMarking.type.TEXT) {\r\n            this.drawText();\r\n        }\r\n        ctx.restore();\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\r\nPedalMarking.DEBUG = false;\r\nPedalMarking.TEXT_FONT = {\r\n    family: Font.SERIF,\r\n    size: 12,\r\n    weight: FontWeight.BOLD,\r\n    style: FontStyle.ITALIC,\r\n};\r\n/** Glyph data */\r\nPedalMarking.GLYPHS = {\r\n    pedal_depress: {\r\n        code: 'keyboardPedalPed',\r\n        x_shift: -10,\r\n        y_shift: 0,\r\n    },\r\n    pedal_release: {\r\n        code: 'keyboardPedalUp',\r\n        x_shift: -2,\r\n        y_shift: 3,\r\n    },\r\n};\r\n/** Pedal type as number. */\r\nPedalMarking.type = {\r\n    TEXT: 1,\r\n    BRACKET: 2,\r\n    MIXED: 3,\r\n};\r\n/** Pedal type as string. */\r\nPedalMarking.typeString = {\r\n    text: PedalMarking.type.TEXT,\r\n    bracket: PedalMarking.type.BRACKET,\r\n    mixed: PedalMarking.type.MIXED,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// @author Mohit Cheppudira\r\n//\r\n// ## Description\r\n//\r\n// This file implements a registry for VexFlow elements. It allows users\r\n// to track, query, and manage some subset of generated elements, and\r\n// dynamically get and set attributes.\r\n//\r\n// There are two ways to register with a registry:\r\n//\r\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\r\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\r\n//    elements will automatically register with it.\r\n//\r\n// Once an element is registered, selected attributes are tracked and indexed by\r\n// the registry. This allows fast look up of elements by attributes like id, type,\r\n// and class.\r\nimport { RuntimeError } from './util';\r\n// Indexes are represented as maps of maps of maps. This allows\r\n// for both multi-labeling (e.g., an element can have multiple classes)\r\n// and efficient lookup.\r\nclass Index {\r\n    constructor() {\r\n        this.id = {};\r\n        this.type = {};\r\n        this.class = {};\r\n    }\r\n}\r\nexport class Registry {\r\n    constructor() {\r\n        this.index = new Index();\r\n    }\r\n    static getDefaultRegistry() {\r\n        return Registry.defaultRegistry;\r\n    }\r\n    // If you call `enableDefaultRegistry`, any new elements will auto-register with\r\n    // the provided registry as soon as they're constructed.\r\n    static enableDefaultRegistry(registry) {\r\n        Registry.defaultRegistry = registry;\r\n    }\r\n    static disableDefaultRegistry() {\r\n        Registry.defaultRegistry = undefined;\r\n    }\r\n    clear() {\r\n        this.index = new Index();\r\n        return this;\r\n    }\r\n    setIndexValue(name, value, id, elem) {\r\n        const index = this.index;\r\n        if (!index[name][value]) {\r\n            index[name][value] = {};\r\n        }\r\n        index[name][value][id] = elem;\r\n    }\r\n    // Updates the indexes for element 'id'. If an element's attribute changes\r\n    // from A -> B, make sure to remove the element from A.\r\n    updateIndex({ id, name, value, oldValue }) {\r\n        const elem = this.getElementById(id);\r\n        if (oldValue !== undefined && this.index[name][oldValue]) {\r\n            delete this.index[name][oldValue][id];\r\n        }\r\n        if (value && elem) {\r\n            this.setIndexValue(name, value, elem.getAttribute('id'), elem);\r\n        }\r\n    }\r\n    /**\r\n     * Register element `elem` with this registry.\r\n     * This adds the element to its index and watches it for attribute changes.\r\n     * @param elem\r\n     * @param id\r\n     * @returns this\r\n     */\r\n    register(elem, id) {\r\n        id = id || elem.getAttribute('id');\r\n        if (!id) {\r\n            throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\r\n        }\r\n        // Manually add id to index, then update other indexes.\r\n        elem.setAttribute('id', id);\r\n        this.setIndexValue('id', id, id, elem);\r\n        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\r\n        elem.onRegister(this);\r\n        return this;\r\n    }\r\n    getElementById(id) {\r\n        var _a, _b;\r\n        return (_b = (_a = this.index.id) === null || _a === void 0 ? void 0 : _a[id]) === null || _b === void 0 ? void 0 : _b[id]; // return undefined if the id is not found.\r\n    }\r\n    getElementsByAttribute(attribute, value) {\r\n        const index_attr = this.index[attribute];\r\n        if (index_attr) {\r\n            const index_attr_val = index_attr[value];\r\n            if (index_attr_val) {\r\n                const keys = Object.keys(index_attr_val);\r\n                return keys.map((k) => index_attr_val[k]);\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n    getElementsByType(type) {\r\n        return this.getElementsByAttribute('type', type);\r\n    }\r\n    getElementsByClass(className) {\r\n        return this.getElementsByAttribute('class', className);\r\n    }\r\n    // This is called by the element when an attribute value changes. If an indexed\r\n    // attribute changes, then update the local index.\r\n    onUpdate(info) {\r\n        const allowedNames = ['id', 'type', 'class'];\r\n        if (allowedNames.includes(info.name)) {\r\n            this.updateIndex(info);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2021.\r\n// MIT License\r\nimport { Category } from './typeguard';\r\nexport class RenderContext {\r\n    static get CATEGORY() {\r\n        return Category.RenderContext;\r\n    }\r\n    set font(f) {\r\n        this.setFont(f);\r\n    }\r\n    get font() {\r\n        return this.getFont();\r\n    }\r\n    /**\r\n     * This is kept for backwards compatibility with 3.0.9.\r\n     * @deprecated use `setFont(...)` instead since it now supports CSS font shorthand.\r\n     */\r\n    setRawFont(f) {\r\n        this.setFont(f);\r\n        return this;\r\n    }\r\n}\r\n/**\r\n * Draw a tiny dot marker on the specified context. A great debugging aid.\r\n * @param ctx context\r\n * @param x dot x coordinate\r\n * @param y dot y coordinate\r\n * @param color\r\n */\r\nexport function drawDot(ctx, x, y, color = '#F55') {\r\n    ctx.save();\r\n    ctx.setFillStyle(color);\r\n    // draw a circle\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, 3, 0, Math.PI * 2, true);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.restore();\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { CanvasContext } from './canvascontext';\r\nimport { SVGContext } from './svgcontext';\r\nimport { isRenderContext } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nimport { isHTMLCanvas, isHTMLDiv } from './web';\r\nexport var RendererBackends;\r\n(function (RendererBackends) {\r\n    RendererBackends[RendererBackends[\"CANVAS\"] = 1] = \"CANVAS\";\r\n    RendererBackends[RendererBackends[\"SVG\"] = 2] = \"SVG\";\r\n})(RendererBackends || (RendererBackends = {}));\r\n// End of line types\r\nexport var RendererLineEndType;\r\n(function (RendererLineEndType) {\r\n    RendererLineEndType[RendererLineEndType[\"NONE\"] = 1] = \"NONE\";\r\n    RendererLineEndType[RendererLineEndType[\"UP\"] = 2] = \"UP\";\r\n    RendererLineEndType[RendererLineEndType[\"DOWN\"] = 3] = \"DOWN\";\r\n})(RendererLineEndType || (RendererLineEndType = {}));\r\n/**\r\n * Support Canvas & SVG rendering contexts.\r\n */\r\nexport class Renderer {\r\n    constructor(arg0, arg1) {\r\n        if (isRenderContext(arg0)) {\r\n            // The user has provided what looks like a RenderContext, let's just use it.\r\n            this.ctx = arg0;\r\n        }\r\n        else {\r\n            if (arg1 === undefined) {\r\n                // The backend must be specified if the render context isn't directly provided.\r\n                throw new RuntimeError('InvalidArgument', 'Missing backend argument');\r\n            }\r\n            const backend = arg1;\r\n            let element;\r\n            if (typeof arg0 == 'string') {\r\n                const maybeElement = document.getElementById(arg0);\r\n                if (!maybeElement) {\r\n                    throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\r\n                }\r\n                element = maybeElement;\r\n            }\r\n            else {\r\n                element = arg0;\r\n            }\r\n            // Verify backend and create context\r\n            if (backend === Renderer.Backends.CANVAS) {\r\n                if (!isHTMLCanvas(element)) {\r\n                    throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');\r\n                }\r\n                const context = element.getContext('2d');\r\n                if (!context) {\r\n                    throw new RuntimeError('BadElement', \"Can't get canvas context\");\r\n                }\r\n                this.ctx = new CanvasContext(context);\r\n            }\r\n            else if (backend === Renderer.Backends.SVG) {\r\n                if (!isHTMLDiv(element)) {\r\n                    throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\r\n                }\r\n                this.ctx = new SVGContext(element);\r\n            }\r\n            else {\r\n                throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\r\n            }\r\n        }\r\n    }\r\n    static buildContext(elementId, backend, width, height, background = '#FFF') {\r\n        const renderer = new Renderer(elementId, backend);\r\n        if (width && height) {\r\n            renderer.resize(width, height);\r\n        }\r\n        const ctx = renderer.getContext();\r\n        ctx.setBackgroundFillStyle(background);\r\n        Renderer.lastContext = ctx;\r\n        return ctx;\r\n    }\r\n    static getCanvasContext(elementId, width, height, background) {\r\n        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\r\n    }\r\n    static getSVGContext(elementId, width, height, background) {\r\n        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\r\n    }\r\n    // Draw a dashed line (horizontal, vertical or diagonal\r\n    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\r\n    // setting the second number to 0 draws a solid line.\r\n    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\r\n        context.beginPath();\r\n        const dx = toX - fromX;\r\n        const dy = toY - fromY;\r\n        const angle = Math.atan2(dy, dx);\r\n        let x = fromX;\r\n        let y = fromY;\r\n        context.moveTo(fromX, fromY);\r\n        let idx = 0;\r\n        let draw = true;\r\n        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\r\n            const dashLength = dashPattern[idx++ % dashPattern.length];\r\n            const nx = x + Math.cos(angle) * dashLength;\r\n            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\r\n            const ny = y + Math.sin(angle) * dashLength;\r\n            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\r\n            if (draw) {\r\n                context.lineTo(x, y);\r\n            }\r\n            else {\r\n                context.moveTo(x, y);\r\n            }\r\n            draw = !draw;\r\n        }\r\n        context.closePath();\r\n        context.stroke();\r\n    }\r\n    resize(width, height) {\r\n        this.ctx.resize(width, height);\r\n        return this;\r\n    }\r\n    getContext() {\r\n        return this.ctx;\r\n    }\r\n}\r\nRenderer.Backends = RendererBackends;\r\nRenderer.LineEndType = RendererLineEndType;\r\n// Used by vexflow_test_helpers.ts\r\n// Should this be private?\r\n// Can we do this in a cleaner way?\r\nRenderer.lastContext = undefined;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\nimport { Glyph } from './glyph';\r\nimport { GlyphNote } from './glyphnote';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\n// Map `type` to SMuFL glyph code.\r\nconst CODES = {\r\n    '1': 'repeat1Bar',\r\n    '2': 'repeat2Bars',\r\n    '4': 'repeat4Bars',\r\n    slash: 'repeatBarSlash',\r\n};\r\nexport class RepeatNote extends GlyphNote {\r\n    static get CATEGORY() {\r\n        return Category.RepeatNote;\r\n    }\r\n    constructor(type, noteStruct, options) {\r\n        super(undefined, Object.assign({ duration: 'q', align_center: type !== 'slash' }, noteStruct), options);\r\n        const glyphCode = CODES[type] || 'repeat1Bar';\r\n        const glyph = new Glyph(glyphCode, Tables.currentMusicFont().lookupMetric('repeatNote.point', 40), {\r\n            category: 'repeatNote',\r\n        });\r\n        this.setGlyph(glyph);\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { BoundingBox } from './boundingbox';\r\nimport { Clef } from './clef';\r\nimport { Element } from './element';\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { KeySignature } from './keysignature';\r\nimport { Barline, BarlineType } from './stavebarline';\r\nimport { StaveModifierPosition } from './stavemodifier';\r\nimport { Repetition } from './staverepetition';\r\nimport { StaveSection } from './stavesection';\r\nimport { StaveTempo } from './stavetempo';\r\nimport { StaveText } from './stavetext';\r\nimport { Volta } from './stavevolta';\r\nimport { Tables } from './tables';\r\nimport { TimeSignature } from './timesignature';\r\nimport { Category, isBarline } from './typeguard';\r\nimport { RuntimeError } from './util';\r\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\r\n// The keys (computed property names) match the CATEGORY property in the\r\n// Barline, Clef, KeySignature, TimeSignature classes.\r\nconst SORT_ORDER_BEG_MODIFIERS = {\r\n    [Barline.CATEGORY]: 0,\r\n    [Clef.CATEGORY]: 1,\r\n    [KeySignature.CATEGORY]: 2,\r\n    [TimeSignature.CATEGORY]: 3,\r\n};\r\nconst SORT_ORDER_END_MODIFIERS = {\r\n    [TimeSignature.CATEGORY]: 0,\r\n    [KeySignature.CATEGORY]: 1,\r\n    [Barline.CATEGORY]: 2,\r\n    [Clef.CATEGORY]: 3,\r\n};\r\nexport class Stave extends Element {\r\n    constructor(x, y, width, options) {\r\n        super();\r\n        // Initialized by the constructor via this.resetLines().\r\n        this.height = 0;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.formatted = false;\r\n        this.start_x = x + 5;\r\n        this.end_x = x + width;\r\n        this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\r\n        this.measure = 0;\r\n        this.clef = 'treble';\r\n        this.endClef = undefined;\r\n        this.resetFont();\r\n        this.options = Object.assign({ vertical_bar_width: 10, num_lines: 5, fill_style: '#999999', left_bar: true, right_bar: true, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, space_above_staff_ln: 4, space_below_staff_ln: 4, top_text_position: 1, bottom_text_position: 4, line_config: [] }, options);\r\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\r\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\r\n        this.resetLines();\r\n        // beg bar\r\n        this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\r\n        // end bar\r\n        this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Stave;\r\n    }\r\n    // This is the sum of the padding that normally goes on left + right of a stave during\r\n    // drawing. Used to size staves correctly with content width.\r\n    static get defaultPadding() {\r\n        const musicFont = Tables.currentMusicFont();\r\n        return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\r\n    }\r\n    // Right padding, used by system if startX is already determined.\r\n    static get rightPadding() {\r\n        const musicFont = Tables.currentMusicFont();\r\n        return musicFont.lookupMetric('stave.endPaddingMax');\r\n    }\r\n    /** Set default style for ledger lines. */\r\n    setDefaultLedgerLineStyle(style) {\r\n        this.defaultLedgerLineStyle = style;\r\n    }\r\n    /** Get default style for ledger lines. */\r\n    getDefaultLedgerLineStyle() {\r\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\r\n    }\r\n    space(spacing) {\r\n        return this.options.spacing_between_lines_px * spacing;\r\n    }\r\n    resetLines() {\r\n        this.options.line_config = [];\r\n        for (let i = 0; i < this.options.num_lines; i++) {\r\n            this.options.line_config.push({ visible: true });\r\n        }\r\n        this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\r\n        this.options.bottom_text_position = this.options.num_lines;\r\n    }\r\n    setNoteStartX(x) {\r\n        if (!this.formatted)\r\n            this.format();\r\n        this.start_x = x;\r\n        return this;\r\n    }\r\n    getNoteStartX() {\r\n        if (!this.formatted)\r\n            this.format();\r\n        return this.start_x;\r\n    }\r\n    getNoteEndX() {\r\n        if (!this.formatted)\r\n            this.format();\r\n        return this.end_x;\r\n    }\r\n    getTieStartX() {\r\n        return this.start_x;\r\n    }\r\n    getTieEndX() {\r\n        return this.end_x;\r\n    }\r\n    getX() {\r\n        return this.x;\r\n    }\r\n    getNumLines() {\r\n        return this.options.num_lines;\r\n    }\r\n    setNumLines(n) {\r\n        this.options.num_lines = n;\r\n        this.resetLines();\r\n        return this;\r\n    }\r\n    setY(y) {\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    getY() {\r\n        return this.y;\r\n    }\r\n    getTopLineTopY() {\r\n        return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\r\n    }\r\n    getBottomLineBottomY() {\r\n        return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\r\n    }\r\n    setX(x) {\r\n        const shift = x - this.x;\r\n        this.formatted = false;\r\n        this.x = x;\r\n        this.start_x += shift;\r\n        this.end_x += shift;\r\n        for (let i = 0; i < this.modifiers.length; i++) {\r\n            const mod = this.modifiers[i];\r\n            mod.setX(mod.getX() + shift);\r\n        }\r\n        return this;\r\n    }\r\n    setWidth(width) {\r\n        this.formatted = false;\r\n        this.width = width;\r\n        this.end_x = this.x + width;\r\n        // reset the x position of the end barline (TODO(0xfe): This makes no sense)\r\n        // this.modifiers[1].setX(this.end_x);\r\n        return this;\r\n    }\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    getStyle() {\r\n        return Object.assign({ fillStyle: this.options.fill_style, strokeStyle: this.options.fill_style, lineWidth: Tables.STAVE_LINE_THICKNESS }, this.style);\r\n    }\r\n    setMeasure(measure) {\r\n        this.measure = measure;\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets the pixels to shift from the beginning of the stave\r\n     * following the modifier at the provided index\r\n     * @param  {Number} index The index from which to determine the shift\r\n     * @return {Number}       The amount of pixels shifted\r\n     */\r\n    getModifierXShift(index = 0) {\r\n        if (typeof index !== 'number') {\r\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\r\n        }\r\n        if (!this.formatted)\r\n            this.format();\r\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\r\n            return 0;\r\n        }\r\n        // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\r\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\r\n            return 0;\r\n        }\r\n        let start_x = this.start_x - this.x;\r\n        const begBarline = this.modifiers[0];\r\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\r\n            start_x -= begBarline.getWidth();\r\n        }\r\n        return start_x;\r\n    }\r\n    /** Coda & Segno Symbol functions */\r\n    setRepetitionType(type, yShift = 0) {\r\n        this.modifiers.push(new Repetition(type, this.x, yShift));\r\n        return this;\r\n    }\r\n    // Volta functions\r\n    setVoltaType(type, number_t, y) {\r\n        this.modifiers.push(new Volta(type, number_t, this.x, y));\r\n        return this;\r\n    }\r\n    // Section functions\r\n    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {\r\n        const staveSection = new StaveSection(section, this.x + xOffset, y, drawRect);\r\n        if (fontSize)\r\n            staveSection.setFontSize(fontSize);\r\n        this.modifiers.push(staveSection);\r\n        return this;\r\n    }\r\n    // Tempo functions\r\n    setTempo(tempo, y) {\r\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\r\n        return this;\r\n    }\r\n    // Text functions\r\n    setText(text, position, options = {}) {\r\n        this.modifiers.push(new StaveText(text, position, options));\r\n        return this;\r\n    }\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n    getSpacingBetweenLines() {\r\n        return this.options.spacing_between_lines_px;\r\n    }\r\n    getBoundingBox() {\r\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\r\n    }\r\n    getBottomY() {\r\n        const options = this.options;\r\n        const spacing = options.spacing_between_lines_px;\r\n        const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\r\n        return score_bottom;\r\n    }\r\n    getBottomLineY() {\r\n        return this.getYForLine(this.options.num_lines);\r\n    }\r\n    // This returns\r\n    /** @returns the y for the *center* of a staff line */\r\n    getYForLine(line) {\r\n        const options = this.options;\r\n        const spacing = options.spacing_between_lines_px;\r\n        const headroom = options.space_above_staff_ln;\r\n        const y = this.y + line * spacing + headroom * spacing;\r\n        return y;\r\n    }\r\n    getLineForY(y) {\r\n        // Does the reverse of getYForLine - somewhat dumb and just calls\r\n        // getYForLine until the right value is reaches\r\n        const options = this.options;\r\n        const spacing = options.spacing_between_lines_px;\r\n        const headroom = options.space_above_staff_ln;\r\n        return (y - this.y) / spacing - headroom;\r\n    }\r\n    getYForTopText(line = 0) {\r\n        return this.getYForLine(-line - this.options.top_text_position);\r\n    }\r\n    getYForBottomText(line = 0) {\r\n        return this.getYForLine(this.options.bottom_text_position + line);\r\n    }\r\n    getYForNote(line) {\r\n        const options = this.options;\r\n        const spacing = options.spacing_between_lines_px;\r\n        const headroom = options.space_above_staff_ln;\r\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\r\n    }\r\n    getYForGlyphs() {\r\n        return this.getYForLine(3);\r\n    }\r\n    // This method adds a stave modifier to the stave. Note that the first two\r\n    // modifiers (BarLines) are automatically added upon construction.\r\n    addModifier(modifier, position) {\r\n        if (position !== undefined) {\r\n            modifier.setPosition(position);\r\n        }\r\n        modifier.setStave(this);\r\n        this.formatted = false;\r\n        this.modifiers.push(modifier);\r\n        return this;\r\n    }\r\n    addEndModifier(modifier) {\r\n        this.addModifier(modifier, StaveModifierPosition.END);\r\n        return this;\r\n    }\r\n    // Bar Line functions\r\n    setBegBarType(type) {\r\n        // Only valid bar types at beginning of stave is none, single or begin repeat\r\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\r\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\r\n            this.modifiers[0].setType(type);\r\n            this.formatted = false;\r\n        }\r\n        return this;\r\n    }\r\n    setEndBarType(type) {\r\n        // Repeat end not valid at end of stave\r\n        if (type !== BarlineType.REPEAT_BEGIN) {\r\n            this.modifiers[1].setType(type);\r\n            this.formatted = false;\r\n        }\r\n        return this;\r\n    }\r\n    setClef(clefSpec, size, annotation, position) {\r\n        if (position === undefined) {\r\n            position = StaveModifierPosition.BEGIN;\r\n        }\r\n        if (position === StaveModifierPosition.END) {\r\n            this.endClef = clefSpec;\r\n        }\r\n        else {\r\n            this.clef = clefSpec;\r\n        }\r\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\r\n        if (clefs.length === 0) {\r\n            this.addClef(clefSpec, size, annotation, position);\r\n        }\r\n        else {\r\n            clefs[0].setType(clefSpec, size, annotation);\r\n        }\r\n        return this;\r\n    }\r\n    getClef() {\r\n        return this.clef;\r\n    }\r\n    setEndClef(clefSpec, size, annotation) {\r\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\r\n        return this;\r\n    }\r\n    getEndClef() {\r\n        return this.endClef;\r\n    }\r\n    setKeySignature(keySpec, cancelKeySpec, position) {\r\n        if (position === undefined) {\r\n            position = StaveModifierPosition.BEGIN;\r\n        }\r\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\r\n        if (keySignatures.length === 0) {\r\n            this.addKeySignature(keySpec, cancelKeySpec, position);\r\n        }\r\n        else {\r\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\r\n        }\r\n        return this;\r\n    }\r\n    setEndKeySignature(keySpec, cancelKeySpec) {\r\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\r\n        return this;\r\n    }\r\n    setTimeSignature(timeSpec, customPadding, position) {\r\n        if (position === undefined) {\r\n            position = StaveModifierPosition.BEGIN;\r\n        }\r\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\r\n        if (timeSignatures.length === 0) {\r\n            this.addTimeSignature(timeSpec, customPadding, position);\r\n        }\r\n        else {\r\n            timeSignatures[0].setTimeSig(timeSpec);\r\n        }\r\n        return this;\r\n    }\r\n    setEndTimeSignature(timeSpec, customPadding) {\r\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a key signature to the stave.\r\n     *\r\n     * Example:\r\n     * `stave.addKeySignature('Db');`\r\n     * @param keySpec new key specification `[A-G][b|#]?`\r\n     * @param cancelKeySpec\r\n     * @param position\r\n     * @returns\r\n     */\r\n    addKeySignature(keySpec, cancelKeySpec, position) {\r\n        if (position === undefined) {\r\n            position = StaveModifierPosition.BEGIN;\r\n        }\r\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a clef to the stave.\r\n     *\r\n     * Example:\r\n     *\r\n     * stave.addClef('treble')\r\n     * @param clef clef (treble|bass|...) see {@link Clef.types}\r\n     * @param size\r\n     * @param annotation\r\n     * @param position\r\n     * @returns\r\n     */\r\n    addClef(clef, size, annotation, position) {\r\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\r\n            this.clef = clef;\r\n        }\r\n        else if (position === StaveModifierPosition.END) {\r\n            this.endClef = clef;\r\n        }\r\n        this.addModifier(new Clef(clef, size, annotation), position);\r\n        return this;\r\n    }\r\n    addEndClef(clef, size, annotation) {\r\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a time signature to the stave\r\n     *\r\n     * Example:\r\n     *\r\n     * `stave.addTimeSignature('4/4');`\r\n     * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\r\n     * @param customPadding\r\n     * @param position\r\n     * @returns\r\n     */\r\n    addTimeSignature(timeSpec, customPadding, position) {\r\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\r\n        return this;\r\n    }\r\n    addEndTimeSignature(timeSpec, customPadding) {\r\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\r\n        return this;\r\n    }\r\n    // Deprecated\r\n    addTrebleGlyph() {\r\n        this.addClef('treble');\r\n        return this;\r\n    }\r\n    /**\r\n     * @param position\r\n     * @param category\r\n     * @returns array of StaveModifiers that match the provided position and category.\r\n     */\r\n    getModifiers(position, category) {\r\n        const noPosition = position === undefined;\r\n        const noCategory = category === undefined;\r\n        if (noPosition && noCategory) {\r\n            return this.modifiers;\r\n        }\r\n        else if (noPosition) {\r\n            // A category was provided.\r\n            return this.modifiers.filter((m) => category === m.getCategory());\r\n        }\r\n        else if (noCategory) {\r\n            // A position was provided.\r\n            return this.modifiers.filter((m) => position === m.getPosition());\r\n        }\r\n        else {\r\n            // Both position and category were provided!\r\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\r\n        }\r\n    }\r\n    /**\r\n     * Use the modifier's `getCategory()` as a key for the `order` array.\r\n     * The retrieved value is used to sort modifiers from left to right (0 to to 3).\r\n     */\r\n    sortByCategory(items, order) {\r\n        for (let i = items.length - 1; i >= 0; i--) {\r\n            for (let j = 0; j < i; j++) {\r\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\r\n                    const temp = items[j];\r\n                    items[j] = items[j + 1];\r\n                    items[j + 1] = temp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    format() {\r\n        const begBarline = this.modifiers[0];\r\n        const endBarline = this.modifiers[1];\r\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\r\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\r\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\r\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\r\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\r\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\r\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\r\n        }\r\n        if (endModifiers.indexOf(endBarline) > 0) {\r\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\r\n        }\r\n        let width;\r\n        let padding;\r\n        let modifier;\r\n        let offset = 0;\r\n        let x = this.x;\r\n        for (let i = 0; i < begModifiers.length; i++) {\r\n            modifier = begModifiers[i];\r\n            padding = modifier.getPadding(i + offset);\r\n            width = modifier.getWidth();\r\n            x += padding;\r\n            modifier.setX(x);\r\n            x += width;\r\n            if (padding + width === 0)\r\n                offset--;\r\n        }\r\n        this.start_x = x;\r\n        x = this.x + this.width;\r\n        const widths = {\r\n            left: 0,\r\n            right: 0,\r\n            paddingRight: 0,\r\n            paddingLeft: 0,\r\n        };\r\n        let lastBarlineIdx = 0;\r\n        for (let i = 0; i < endModifiers.length; i++) {\r\n            modifier = endModifiers[i];\r\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\r\n            widths.right = 0;\r\n            widths.left = 0;\r\n            widths.paddingRight = 0;\r\n            widths.paddingLeft = 0;\r\n            const layoutMetrics = modifier.getLayoutMetrics();\r\n            if (layoutMetrics) {\r\n                if (i !== 0) {\r\n                    widths.right = layoutMetrics.xMax || 0;\r\n                    widths.paddingRight = layoutMetrics.paddingRight || 0;\r\n                }\r\n                widths.left = -layoutMetrics.xMin || 0;\r\n                widths.paddingLeft = layoutMetrics.paddingLeft || 0;\r\n                if (i === endModifiers.length - 1) {\r\n                    widths.paddingLeft = 0;\r\n                }\r\n            }\r\n            else {\r\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\r\n                if (i !== 0) {\r\n                    widths.right = modifier.getWidth();\r\n                }\r\n                if (i === 0) {\r\n                    widths.left = modifier.getWidth();\r\n                }\r\n            }\r\n            x -= widths.paddingRight;\r\n            x -= widths.right;\r\n            modifier.setX(x);\r\n            x -= widths.left;\r\n            x -= widths.paddingLeft;\r\n        }\r\n        this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\r\n        this.formatted = true;\r\n    }\r\n    /**\r\n     * All drawing functions below need the context to be set.\r\n     */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        ctx.openGroup('stave', this.getAttribute('id'));\r\n        if (!this.formatted)\r\n            this.format();\r\n        const num_lines = this.options.num_lines;\r\n        const width = this.width;\r\n        const x = this.x;\r\n        let y;\r\n        // Render lines\r\n        for (let line = 0; line < num_lines; line++) {\r\n            y = this.getYForLine(line);\r\n            this.applyStyle();\r\n            if (this.options.line_config[line].visible) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(x, y);\r\n                ctx.lineTo(x + width, y);\r\n                ctx.stroke();\r\n            }\r\n            this.restoreStyle();\r\n        }\r\n        // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\r\n        for (let i = 0; i < this.modifiers.length; i++) {\r\n            const modifier = this.modifiers[i];\r\n            // Only draw modifier if it has a draw function\r\n            if (typeof modifier.draw === 'function') {\r\n                modifier.applyStyle(ctx);\r\n                modifier.draw(this, this.getModifierXShift(i));\r\n                modifier.restoreStyle(ctx);\r\n            }\r\n        }\r\n        // Render measure numbers\r\n        if (this.measure > 0) {\r\n            ctx.save();\r\n            ctx.setFont(this.textFont);\r\n            const textWidth = ctx.measureText('' + this.measure).width;\r\n            y = this.getYForTopText(0) + 3;\r\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\r\n            ctx.restore();\r\n        }\r\n        ctx.closeGroup();\r\n        return this;\r\n    }\r\n    getVerticalBarWidth() {\r\n        return this.options.vertical_bar_width;\r\n    }\r\n    /**\r\n     * Get the current configuration for the Stave.\r\n     * @return {Array} An array of configuration objects.\r\n     */\r\n    getConfigForLines() {\r\n        return this.options.line_config;\r\n    }\r\n    /**\r\n     * Configure properties of the lines in the Stave\r\n     * @param line_number The index of the line to configure.\r\n     * @param line_config An configuration object for the specified line.\r\n     * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\r\n     *   range of the number of lines specified in the constructor.\r\n     */\r\n    setConfigForLine(line_number, line_config) {\r\n        if (line_number >= this.options.num_lines || line_number < 0) {\r\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\r\n        }\r\n        if (line_config.visible === undefined) {\r\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\r\n        }\r\n        if (typeof line_config.visible !== 'boolean') {\r\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\r\n        }\r\n        this.options.line_config[line_number] = line_config;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the staff line configuration array for all of the lines at once.\r\n     * @param lines_configuration An array of line configuration objects.  These objects\r\n     *   are of the same format as the single one passed in to setLineConfiguration().\r\n     *   The caller can set null for any line config entry if it is desired that the default be used\r\n     * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\r\n     *   exactly the same number of elements as the num_lines configuration object set in\r\n     *   the constructor.\r\n     */\r\n    setConfigForLines(lines_configuration) {\r\n        if (lines_configuration.length !== this.options.num_lines) {\r\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\r\n        }\r\n        // Make sure the defaults are present in case an incomplete set of\r\n        //  configuration options were supplied.\r\n        // eslint-disable-next-line\r\n        for (const line_config in lines_configuration) {\r\n            // Allow '{}' to be used if the caller just wants the default for a particular node.\r\n            if (lines_configuration[line_config].visible == undefined) {\r\n                lines_configuration[line_config] = this.options.line_config[line_config];\r\n            }\r\n            this.options.line_config[line_config] = Object.assign(Object.assign({}, this.options.line_config[line_config]), lines_configuration[line_config]);\r\n        }\r\n        this.options.line_config = lines_configuration;\r\n        return this;\r\n    }\r\n    static formatBegModifiers(staves) {\r\n        let maxX = 0;\r\n        // align note start\r\n        staves.forEach((stave) => {\r\n            if (stave.getNoteStartX() > maxX)\r\n                maxX = stave.getNoteStartX();\r\n        });\r\n        staves.forEach((stave) => {\r\n            stave.setNoteStartX(maxX);\r\n        });\r\n        maxX = 0;\r\n        // align REPEAT_BEGIN\r\n        staves.forEach((stave) => {\r\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\r\n            modifiers.forEach((modifier) => {\r\n                if (modifier.getType() == BarlineType.REPEAT_BEGIN)\r\n                    if (modifier.getX() > maxX)\r\n                        maxX = modifier.getX();\r\n            });\r\n        });\r\n        staves.forEach((stave) => {\r\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\r\n            modifiers.forEach((modifier) => {\r\n                if (modifier.getType() == BarlineType.REPEAT_BEGIN)\r\n                    modifier.setX(maxX);\r\n            });\r\n        });\r\n        maxX = 0;\r\n        // Align time signatures\r\n        staves.forEach((stave) => {\r\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.TimeSignature);\r\n            modifiers.forEach((modifier) => {\r\n                if (modifier.getX() > maxX)\r\n                    maxX = modifier.getX();\r\n            });\r\n        });\r\n        staves.forEach((stave) => {\r\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.TimeSignature);\r\n            modifiers.forEach((modifier) => {\r\n                modifier.setX(maxX);\r\n            });\r\n        });\r\n    }\r\n}\r\nStave.TEXT_FONT = {\r\n    family: Font.SANS_SERIF,\r\n    size: 8,\r\n    weight: FontWeight.NORMAL,\r\n    style: FontStyle.NORMAL,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// Author Larry Kuhns 2011\r\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nexport var BarlineType;\r\n(function (BarlineType) {\r\n    BarlineType[BarlineType[\"SINGLE\"] = 1] = \"SINGLE\";\r\n    BarlineType[BarlineType[\"DOUBLE\"] = 2] = \"DOUBLE\";\r\n    BarlineType[BarlineType[\"END\"] = 3] = \"END\";\r\n    BarlineType[BarlineType[\"REPEAT_BEGIN\"] = 4] = \"REPEAT_BEGIN\";\r\n    BarlineType[BarlineType[\"REPEAT_END\"] = 5] = \"REPEAT_END\";\r\n    BarlineType[BarlineType[\"REPEAT_BOTH\"] = 6] = \"REPEAT_BOTH\";\r\n    BarlineType[BarlineType[\"NONE\"] = 7] = \"NONE\";\r\n})(BarlineType || (BarlineType = {}));\r\nexport class Barline extends StaveModifier {\r\n    constructor(type) {\r\n        super();\r\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\r\n        const TYPE = BarlineType;\r\n        this.widths = {};\r\n        this.widths[TYPE.SINGLE] = 5;\r\n        this.widths[TYPE.DOUBLE] = 5;\r\n        this.widths[TYPE.END] = 5;\r\n        this.widths[TYPE.REPEAT_BEGIN] = 5;\r\n        this.widths[TYPE.REPEAT_END] = 5;\r\n        this.widths[TYPE.REPEAT_BOTH] = 5;\r\n        this.widths[TYPE.NONE] = 5;\r\n        this.paddings = {};\r\n        this.paddings[TYPE.SINGLE] = 0;\r\n        this.paddings[TYPE.DOUBLE] = 0;\r\n        this.paddings[TYPE.END] = 0;\r\n        this.paddings[TYPE.REPEAT_BEGIN] = 15;\r\n        this.paddings[TYPE.REPEAT_END] = 15;\r\n        this.paddings[TYPE.REPEAT_BOTH] = 15;\r\n        this.paddings[TYPE.NONE] = 0;\r\n        this.layoutMetricsMap = {};\r\n        this.layoutMetricsMap[TYPE.SINGLE] = {\r\n            xMin: 0,\r\n            xMax: 1,\r\n            paddingLeft: 5,\r\n            paddingRight: 5,\r\n        };\r\n        this.layoutMetricsMap[TYPE.DOUBLE] = {\r\n            xMin: -3,\r\n            xMax: 1,\r\n            paddingLeft: 5,\r\n            paddingRight: 5,\r\n        };\r\n        this.layoutMetricsMap[TYPE.END] = {\r\n            xMin: -5,\r\n            xMax: 1,\r\n            paddingLeft: 5,\r\n            paddingRight: 5,\r\n        };\r\n        this.layoutMetricsMap[TYPE.REPEAT_END] = {\r\n            xMin: -10,\r\n            xMax: 1,\r\n            paddingLeft: 5,\r\n            paddingRight: 5,\r\n        };\r\n        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\r\n            xMin: -2,\r\n            xMax: 10,\r\n            paddingLeft: 5,\r\n            paddingRight: 5,\r\n        };\r\n        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\r\n            xMin: -10,\r\n            xMax: 10,\r\n            paddingLeft: 5,\r\n            paddingRight: 5,\r\n        };\r\n        this.layoutMetricsMap[TYPE.NONE] = {\r\n            xMin: 0,\r\n            xMax: 0,\r\n            paddingLeft: 5,\r\n            paddingRight: 5,\r\n        };\r\n        this.setPosition(StaveModifierPosition.BEGIN);\r\n        this.setType(type);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Barline;\r\n    }\r\n    static get type() {\r\n        return BarlineType;\r\n    }\r\n    static get typeString() {\r\n        return {\r\n            single: BarlineType.SINGLE,\r\n            double: BarlineType.DOUBLE,\r\n            end: BarlineType.END,\r\n            repeatBegin: BarlineType.REPEAT_BEGIN,\r\n            repeatEnd: BarlineType.REPEAT_END,\r\n            repeatBoth: BarlineType.REPEAT_BOTH,\r\n            none: BarlineType.NONE,\r\n        };\r\n    }\r\n    getType() {\r\n        return this.type;\r\n    }\r\n    setType(type) {\r\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\r\n        this.setWidth(this.widths[this.type]);\r\n        this.setPadding(this.paddings[this.type]);\r\n        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\r\n        return this;\r\n    }\r\n    // Draw barlines\r\n    draw(stave) {\r\n        stave.checkContext();\r\n        this.setRendered();\r\n        switch (this.type) {\r\n            case BarlineType.SINGLE:\r\n                this.drawVerticalBar(stave, this.x, false);\r\n                break;\r\n            case BarlineType.DOUBLE:\r\n                this.drawVerticalBar(stave, this.x, true);\r\n                break;\r\n            case BarlineType.END:\r\n                this.drawVerticalEndBar(stave, this.x);\r\n                break;\r\n            case BarlineType.REPEAT_BEGIN:\r\n                // If the barline is shifted over (in front of clef/time/key)\r\n                // Draw vertical bar at the beginning.\r\n                this.drawRepeatBar(stave, this.x, true);\r\n                if (stave.getX() !== this.x) {\r\n                    this.drawVerticalBar(stave, stave.getX());\r\n                }\r\n                break;\r\n            case BarlineType.REPEAT_END:\r\n                this.drawRepeatBar(stave, this.x, false);\r\n                break;\r\n            case BarlineType.REPEAT_BOTH:\r\n                this.drawRepeatBar(stave, this.x, false);\r\n                this.drawRepeatBar(stave, this.x, true);\r\n                break;\r\n            default:\r\n                // Default is NONE, so nothing to draw\r\n                break;\r\n        }\r\n    }\r\n    drawVerticalBar(stave, x, double_bar) {\r\n        const staveCtx = stave.checkContext();\r\n        const topY = stave.getTopLineTopY();\r\n        const botY = stave.getBottomLineBottomY();\r\n        if (double_bar) {\r\n            staveCtx.fillRect(x - 3, topY, 1, botY - topY);\r\n        }\r\n        staveCtx.fillRect(x, topY, 1, botY - topY);\r\n    }\r\n    drawVerticalEndBar(stave, x) {\r\n        const staveCtx = stave.checkContext();\r\n        const topY = stave.getTopLineTopY();\r\n        const botY = stave.getBottomLineBottomY();\r\n        staveCtx.fillRect(x - 5, topY, 1, botY - topY);\r\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\r\n    }\r\n    drawRepeatBar(stave, x, begin) {\r\n        const staveCtx = stave.checkContext();\r\n        const topY = stave.getTopLineTopY();\r\n        const botY = stave.getBottomLineBottomY();\r\n        let x_shift = 3;\r\n        if (!begin) {\r\n            x_shift = -5;\r\n        }\r\n        staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);\r\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\r\n        const dot_radius = 2;\r\n        // Shift dots left or right\r\n        if (begin) {\r\n            x_shift += 4;\r\n        }\r\n        else {\r\n            x_shift -= 4;\r\n        }\r\n        const dot_x = x + x_shift + dot_radius / 2;\r\n        // calculate the y offset based on number of stave lines\r\n        let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\r\n        y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\r\n        let dot_y = topY + y_offset + dot_radius / 2;\r\n        // draw the top repeat dot\r\n        staveCtx.beginPath();\r\n        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\r\n        staveCtx.fill();\r\n        // draw the bottom repeat dot\r\n        dot_y += stave.getSpacingBetweenLines();\r\n        staveCtx.beginPath();\r\n        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\r\n        staveCtx.fill();\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Element } from './element';\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Glyph } from './glyph';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\r\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\r\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\r\n    }\r\n    let x_shift = 3;\r\n    let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\r\n    const thickLineOffset = 2; // For aesthetics\r\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\r\n        x_shift = -5; // Flips the side of the thin line\r\n        variableWidth = 3;\r\n    }\r\n    // Thin line\r\n    ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\r\n    // Thick line\r\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\r\n}\r\n/** StaveConnector implements the connector lines between staves of a system. */\r\nexport class StaveConnector extends Element {\r\n    constructor(top_stave, bottom_stave) {\r\n        super();\r\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\r\n        this.width = 3;\r\n        this.top_stave = top_stave;\r\n        this.bottom_stave = bottom_stave;\r\n        this.type = StaveConnector.type.DOUBLE;\r\n        this.resetFont();\r\n        // 1. Offset Bold Double Left to align with offset Repeat Begin bars\r\n        // 2. Offset BRACE type not to overlap with another StaveConnector\r\n        this.x_shift = 0;\r\n        this.texts = [];\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StaveConnector;\r\n    }\r\n    /**\r\n     * Set type.\r\n     * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\r\n     */\r\n    setType(type) {\r\n        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\r\n        // Be certain that the type is a valid type:\r\n        if (Object.values(StaveConnector.type).includes(newType)) {\r\n            this.type = newType;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Get type.\r\n     * @returns number {@link StaveConnector.type}\r\n     */\r\n    getType() {\r\n        return this.type;\r\n    }\r\n    /** Set optional associated Text. */\r\n    setText(text, options = {}) {\r\n        this.texts.push({\r\n            content: text,\r\n            options: Object.assign({ shift_x: 0, shift_y: 0 }, options),\r\n        });\r\n        return this;\r\n    }\r\n    setXShift(x_shift) {\r\n        if (typeof x_shift !== 'number') {\r\n            throw new RuntimeError('InvalidType', 'x_shift must be a Number');\r\n        }\r\n        this.x_shift = x_shift;\r\n        return this;\r\n    }\r\n    getXShift() {\r\n        return this.x_shift;\r\n    }\r\n    /** Render connector and associated text. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        let topY = this.top_stave.getYForLine(0);\r\n        let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\r\n        let width = this.width;\r\n        let topX = this.top_stave.getX();\r\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\r\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\r\n            this.type === StaveConnector.type.THIN_DOUBLE;\r\n        if (isRightSidedConnector) {\r\n            topX = this.top_stave.getX() + this.top_stave.getWidth();\r\n        }\r\n        let attachment_height = botY - topY;\r\n        switch (this.type) {\r\n            case StaveConnector.type.SINGLE:\r\n                width = 1;\r\n                break;\r\n            case StaveConnector.type.SINGLE_LEFT:\r\n                width = 1;\r\n                break;\r\n            case StaveConnector.type.SINGLE_RIGHT:\r\n                width = 1;\r\n                break;\r\n            case StaveConnector.type.DOUBLE:\r\n                topX -= this.width + 2;\r\n                topY -= this.thickness;\r\n                attachment_height += 0.5;\r\n                break;\r\n            case StaveConnector.type.BRACE: {\r\n                width = 12;\r\n                // May need additional code to draw brace\r\n                const x1 = this.top_stave.getX() - 2 + this.x_shift;\r\n                const y1 = topY;\r\n                const x3 = x1;\r\n                const y3 = botY;\r\n                const x2 = x1 - width;\r\n                const y2 = y1 + attachment_height / 2.0;\r\n                const cpx1 = x2 - 0.9 * width;\r\n                const cpy1 = y1 + 0.2 * attachment_height;\r\n                const cpx2 = x1 + 1.1 * width;\r\n                const cpy2 = y2 - 0.135 * attachment_height;\r\n                const cpx3 = cpx2;\r\n                const cpy3 = y2 + 0.135 * attachment_height;\r\n                const cpx4 = cpx1;\r\n                const cpy4 = y3 - 0.2 * attachment_height;\r\n                const cpx5 = x2 - width;\r\n                const cpy5 = cpy4;\r\n                const cpx6 = x1 + 0.4 * width;\r\n                const cpy6 = y2 + 0.135 * attachment_height;\r\n                const cpx7 = cpx6;\r\n                const cpy7 = y2 - 0.135 * attachment_height;\r\n                const cpx8 = cpx5;\r\n                const cpy8 = cpy1;\r\n                ctx.beginPath();\r\n                ctx.moveTo(x1, y1);\r\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\r\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\r\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\r\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n                break;\r\n            }\r\n            case StaveConnector.type.BRACKET:\r\n                topY -= 6;\r\n                botY += 6;\r\n                attachment_height = botY - topY;\r\n                Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\r\n                Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\r\n                topX -= this.width + 2;\r\n                break;\r\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\r\n                drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\r\n                break;\r\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\r\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\r\n                break;\r\n            case StaveConnector.type.THIN_DOUBLE:\r\n                width = 1;\r\n                attachment_height -= this.thickness;\r\n                break;\r\n            case StaveConnector.type.NONE:\r\n                break;\r\n            default:\r\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\r\n        }\r\n        if (this.type !== StaveConnector.type.BRACE &&\r\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\r\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\r\n            this.type !== StaveConnector.type.NONE) {\r\n            ctx.fillRect(topX, topY, width, attachment_height);\r\n        }\r\n        // If the connector is a thin double barline, draw the paralell line\r\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\r\n            ctx.fillRect(topX - 3, topY, width, attachment_height);\r\n        }\r\n        ctx.save();\r\n        ctx.setLineWidth(2);\r\n        ctx.setFont(this.textFont);\r\n        // Add stave connector text\r\n        for (let i = 0; i < this.texts.length; i++) {\r\n            const text = this.texts[i];\r\n            const text_width = ctx.measureText('' + text.content).width;\r\n            const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\r\n            const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\r\n            ctx.fillText('' + text.content, x, y + 4);\r\n        }\r\n        ctx.restore();\r\n    }\r\n}\r\nStaveConnector.TEXT_FONT = {\r\n    family: Font.SERIF,\r\n    size: 16,\r\n    weight: FontWeight.NORMAL,\r\n    style: FontStyle.NORMAL,\r\n};\r\n/**\r\n * SINGLE_LEFT and SINGLE are the same value for compatibility\r\n * with older versions of vexflow which didn't have right sided\r\n * stave connectors.\r\n */\r\nStaveConnector.type = {\r\n    SINGLE_RIGHT: 0,\r\n    SINGLE_LEFT: 1,\r\n    SINGLE: 1,\r\n    DOUBLE: 2,\r\n    BRACE: 3,\r\n    BRACKET: 4,\r\n    BOLD_DOUBLE_LEFT: 5,\r\n    BOLD_DOUBLE_RIGHT: 6,\r\n    THIN_DOUBLE: 7,\r\n    NONE: 8,\r\n};\r\n/**\r\n * Connector type:\r\n * * \"singleRight\"\r\n * * \"singleLeft\"\r\n * * \"single\"\r\n * * \"double\"\r\n * * \"brace\"\r\n * * \"bracket\"\r\n * * \"boldDoubleLeft\"\r\n * * \"boldDoubleRight\"\r\n * * \"thinDouble\"\r\n * * \"none\"\r\n */\r\nStaveConnector.typeString = {\r\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\r\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\r\n    single: StaveConnector.type.SINGLE,\r\n    double: StaveConnector.type.DOUBLE,\r\n    brace: StaveConnector.type.BRACE,\r\n    bracket: StaveConnector.type.BRACKET,\r\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\r\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\r\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\r\n    none: StaveConnector.type.NONE,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n// Author: Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\r\n//\r\n// This class implements hairpins between notes.\r\n// Hairpins can be either crescendo or decrescendo.\r\nimport { Element } from './element';\r\nimport { Modifier } from './modifier';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class StaveHairpin extends Element {\r\n    /**\r\n     * Create a new hairpin from the specified notes.\r\n     *\r\n     * @param {!Object} notes The notes to tie up.\r\n     * Notes is a struct that has:\r\n     *\r\n     *  {\r\n     *    first_note: Note,\r\n     *    last_note: Note,\r\n     *  }\r\n     * @param {!Object} type The type of hairpin\r\n     */\r\n    constructor(notes, type) {\r\n        super();\r\n        this.setNotes(notes);\r\n        this.hairpin = type;\r\n        this.position = Modifier.Position.BELOW;\r\n        this.render_options = {\r\n            height: 10,\r\n            y_shift: 0,\r\n            left_shift_px: 0,\r\n            right_shift_px: 0,\r\n            right_shift_ticks: 0,\r\n            left_shift_ticks: 0,\r\n        };\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StaveHairpin;\r\n    }\r\n    /* Helper function to convert ticks into pixels.\r\n     * Requires a Formatter with voices joined and formatted (to\r\n     * get pixels per tick)\r\n     *\r\n     * options is struct that has:\r\n     *\r\n     *  {\r\n     *   height: px,\r\n     *   y_shift: px,         // vertical offset\r\n     *   left_shift_ticks: 0, // left horizontal offset expressed in ticks\r\n     *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\r\n     *  }\r\n     *\r\n     **/\r\n    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\r\n        var _a, _b;\r\n        const ppt = formatter.pixelsPerTick;\r\n        if (ppt == null) {\r\n            throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\r\n        }\r\n        const l_shift_px = ppt * ((_a = options.left_shift_ticks) !== null && _a !== void 0 ? _a : 0);\r\n        const r_shift_px = ppt * ((_b = options.right_shift_ticks) !== null && _b !== void 0 ? _b : 0);\r\n        const hairpin_options = {\r\n            height: options.height,\r\n            y_shift: options.y_shift,\r\n            left_shift_px: l_shift_px,\r\n            right_shift_px: r_shift_px,\r\n            right_shift_ticks: 0,\r\n            left_shift_ticks: 0,\r\n        };\r\n        new StaveHairpin({\r\n            first_note: notes.first_note,\r\n            last_note: notes.last_note,\r\n        }, type)\r\n            .setContext(ctx)\r\n            .setRenderOptions(hairpin_options)\r\n            .setPosition(position)\r\n            .draw();\r\n    }\r\n    setPosition(position) {\r\n        if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\r\n            this.position = position;\r\n        }\r\n        return this;\r\n    }\r\n    setRenderOptions(options) {\r\n        if (options.height != null &&\r\n            options.y_shift != null &&\r\n            options.left_shift_px != null &&\r\n            options.right_shift_px != null) {\r\n            this.render_options = options;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the notes to attach this hairpin to.\r\n     *\r\n     * @param {!Object} notes The start and end notes.\r\n     */\r\n    setNotes(notes) {\r\n        if (!notes.first_note && !notes.last_note) {\r\n            throw new RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\r\n        }\r\n        this.notes = notes;\r\n        this.first_note = notes.first_note;\r\n        this.last_note = notes.last_note;\r\n        return this;\r\n    }\r\n    renderHairpin(params) {\r\n        const ctx = this.checkContext();\r\n        let dis = this.render_options.y_shift + 20;\r\n        let y_shift = params.first_y;\r\n        if (this.position === Modifier.Position.ABOVE) {\r\n            dis = -dis + 30;\r\n            y_shift = params.first_y - params.staff_height;\r\n        }\r\n        const l_shift = this.render_options.left_shift_px;\r\n        const r_shift = this.render_options.right_shift_px;\r\n        ctx.beginPath();\r\n        switch (this.hairpin) {\r\n            case StaveHairpin.type.CRESC:\r\n                ctx.moveTo(params.last_x + r_shift, y_shift + dis);\r\n                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\r\n                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\r\n                break;\r\n            case StaveHairpin.type.DECRESC:\r\n                ctx.moveTo(params.first_x + l_shift, y_shift + dis);\r\n                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\r\n                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\r\n                break;\r\n            default:\r\n                // Default is NONE, so nothing to draw\r\n                break;\r\n        }\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    }\r\n    draw() {\r\n        this.checkContext();\r\n        this.setRendered();\r\n        const firstNote = this.first_note;\r\n        const lastNote = this.last_note;\r\n        if (!firstNote || !lastNote)\r\n            throw new RuntimeError('NoNote', 'Notes required to draw');\r\n        const start = firstNote.getModifierStartXY(this.position, 0);\r\n        const end = lastNote.getModifierStartXY(this.position, 0);\r\n        this.renderHairpin({\r\n            first_x: start.x,\r\n            last_x: end.x,\r\n            first_y: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\r\n            last_y: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\r\n            staff_height: firstNote.checkStave().getHeight(),\r\n        });\r\n    }\r\n}\r\nStaveHairpin.type = {\r\n    CRESC: 1,\r\n    DECRESC: 2,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n//\r\n// This file implements `StaveLine` which are simply lines that connect\r\n// two notes. This object is highly configurable, see the `render_options`.\r\n// A simple line is often used for notating glissando articulations, but you\r\n// can format a `StaveLine` with arrows or colors for more pedagogical\r\n// purposes, such as diagrams.\r\nimport { Element } from './element';\r\nimport { Tables } from './tables';\r\nimport { TextJustification } from './textnote';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\n// Attribution: Arrow rendering implementations based off of\r\n// Patrick Horgan's article, \"Drawing lines and arcs with\r\n// arrow heads on  HTML5 Canvas\"\r\n//\r\n// Draw an arrow head that connects between 3 coordinates.\r\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\r\n    // all cases do this.\r\n    ctx.beginPath();\r\n    ctx.moveTo(x0, y0);\r\n    ctx.lineTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.lineTo(x0, y0);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n}\r\nexport class StaveLine extends Element {\r\n    // Initialize the StaveLine with the given `notes`.\r\n    //\r\n    // `notes` is a struct that has:\r\n    //\r\n    //  ```\r\n    //  {\r\n    //    first_note: Note,\r\n    //    last_note: Note,\r\n    //    first_indices: [n1, n2, n3],\r\n    //    last_indices: [n1, n2, n3]\r\n    //  }\r\n    //  ```\r\n    constructor(notes) {\r\n        super();\r\n        this.setNotes(notes);\r\n        this.text = '';\r\n        this.resetFont();\r\n        this.render_options = {\r\n            // Space to add to the left or the right\r\n            padding_left: 4,\r\n            padding_right: 3,\r\n            // The width of the line in pixels\r\n            line_width: 1,\r\n            // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\r\n            line_dash: undefined,\r\n            // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\r\n            rounded_end: true,\r\n            // The color of the line and arrowheads\r\n            color: undefined,\r\n            // Flags to draw arrows on each end of the line\r\n            draw_start_arrow: false,\r\n            draw_end_arrow: false,\r\n            // The length of the arrowhead sides\r\n            arrowhead_length: 10,\r\n            // The angle of the arrowhead\r\n            arrowhead_angle: Math.PI / 8,\r\n            // The position of the text\r\n            text_position_vertical: StaveLine.TextVerticalPosition.TOP,\r\n            text_justification: StaveLine.TextJustification.CENTER,\r\n        };\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StaveLine;\r\n    }\r\n    // The the annotation for the `StaveLine`\r\n    setText(text) {\r\n        this.text = text;\r\n        return this;\r\n    }\r\n    // Set the notes for the `StaveLine`\r\n    setNotes(notes) {\r\n        if (!notes.first_note && !notes.last_note) {\r\n            throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\r\n        }\r\n        if (!notes.first_indices)\r\n            notes.first_indices = [0];\r\n        if (!notes.last_indices)\r\n            notes.last_indices = [0];\r\n        if (notes.first_indices.length !== notes.last_indices.length) {\r\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\r\n        }\r\n        this.notes = notes;\r\n        this.first_note = notes.first_note;\r\n        this.first_indices = notes.first_indices;\r\n        this.last_note = notes.last_note;\r\n        this.last_indices = notes.last_indices;\r\n        return this;\r\n    }\r\n    // Apply the style of the `StaveLine` to the context\r\n    applyLineStyle() {\r\n        const ctx = this.checkContext();\r\n        const render_options = this.render_options;\r\n        if (render_options.line_dash) {\r\n            ctx.setLineDash(render_options.line_dash);\r\n        }\r\n        if (render_options.line_width) {\r\n            ctx.setLineWidth(render_options.line_width);\r\n        }\r\n        if (render_options.rounded_end) {\r\n            ctx.setLineCap('round');\r\n        }\r\n        else {\r\n            ctx.setLineCap('square');\r\n        }\r\n    }\r\n    // Apply the text styling to the context\r\n    applyFontStyle() {\r\n        const ctx = this.checkContext();\r\n        ctx.setFont(this.textFont);\r\n        const render_options = this.render_options;\r\n        const color = render_options.color;\r\n        if (color) {\r\n            ctx.setStrokeStyle(color);\r\n            ctx.setFillStyle(color);\r\n        }\r\n    }\r\n    // Helper function to draw a line with arrow heads\r\n    drawArrowLine(ctx, pt1, pt2) {\r\n        const both_arrows = this.render_options.draw_start_arrow && this.render_options.draw_end_arrow;\r\n        const x1 = pt1.x;\r\n        const y1 = pt1.y;\r\n        const x2 = pt2.x;\r\n        const y2 = pt2.y;\r\n        // For ends with arrow we actually want to stop before we get to the arrow\r\n        // so that wide lines won't put a flat end on the arrow.\r\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n        const ratio = (distance - this.render_options.arrowhead_length / 3) / distance;\r\n        let end_x;\r\n        let end_y;\r\n        let start_x;\r\n        let start_y;\r\n        if (this.render_options.draw_end_arrow || both_arrows) {\r\n            end_x = Math.round(x1 + (x2 - x1) * ratio);\r\n            end_y = Math.round(y1 + (y2 - y1) * ratio);\r\n        }\r\n        else {\r\n            end_x = x2;\r\n            end_y = y2;\r\n        }\r\n        if (this.render_options.draw_start_arrow || both_arrows) {\r\n            start_x = x1 + (x2 - x1) * (1 - ratio);\r\n            start_y = y1 + (y2 - y1) * (1 - ratio);\r\n        }\r\n        else {\r\n            start_x = x1;\r\n            start_y = y1;\r\n        }\r\n        if (this.render_options.color) {\r\n            ctx.setStrokeStyle(this.render_options.color);\r\n            ctx.setFillStyle(this.render_options.color);\r\n        }\r\n        // Draw the shaft of the arrow\r\n        ctx.beginPath();\r\n        ctx.moveTo(start_x, start_y);\r\n        ctx.lineTo(end_x, end_y);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        // calculate the angle of the line\r\n        const line_angle = Math.atan2(y2 - y1, x2 - x1);\r\n        // h is the line length of a side of the arrow head\r\n        const h = Math.abs(this.render_options.arrowhead_length / Math.cos(this.render_options.arrowhead_angle));\r\n        let angle1;\r\n        let angle2;\r\n        let top_x;\r\n        let top_y;\r\n        let bottom_x;\r\n        let bottom_y;\r\n        if (this.render_options.draw_end_arrow || both_arrows) {\r\n            angle1 = line_angle + Math.PI + this.render_options.arrowhead_angle;\r\n            top_x = x2 + Math.cos(angle1) * h;\r\n            top_y = y2 + Math.sin(angle1) * h;\r\n            angle2 = line_angle + Math.PI - this.render_options.arrowhead_angle;\r\n            bottom_x = x2 + Math.cos(angle2) * h;\r\n            bottom_y = y2 + Math.sin(angle2) * h;\r\n            drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\r\n        }\r\n        if (this.render_options.draw_start_arrow || both_arrows) {\r\n            angle1 = line_angle + this.render_options.arrowhead_angle;\r\n            top_x = x1 + Math.cos(angle1) * h;\r\n            top_y = y1 + Math.sin(angle1) * h;\r\n            angle2 = line_angle - this.render_options.arrowhead_angle;\r\n            bottom_x = x1 + Math.cos(angle2) * h;\r\n            bottom_y = y1 + Math.sin(angle2) * h;\r\n            drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\r\n        }\r\n    }\r\n    // Renders the `StaveLine` on the context\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        const first_note = this.first_note;\r\n        const last_note = this.last_note;\r\n        const render_options = this.render_options;\r\n        ctx.save();\r\n        this.applyLineStyle();\r\n        // Cycle through each set of indices and draw lines\r\n        let start_position = { x: 0, y: 0 };\r\n        let end_position = { x: 0, y: 0 };\r\n        this.first_indices.forEach((first_index, i) => {\r\n            const last_index = this.last_indices[i];\r\n            // Get initial coordinates for the start/end of the line\r\n            start_position = first_note.getModifierStartXY(2, first_index);\r\n            end_position = last_note.getModifierStartXY(1, last_index);\r\n            const upwards_slope = start_position.y > end_position.y;\r\n            // Adjust `x` coordinates for modifiers\r\n            start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\r\n            end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\r\n            // Adjust first `x` coordinates for displacements\r\n            const notehead_width = first_note.getGlyph().getWidth();\r\n            const first_displaced = first_note.getKeyProps()[first_index].displaced;\r\n            if (first_displaced && first_note.getStemDirection() === 1) {\r\n                start_position.x += notehead_width + render_options.padding_left;\r\n            }\r\n            // Adjust last `x` coordinates for displacements\r\n            const last_displaced = last_note.getKeyProps()[last_index].displaced;\r\n            if (last_displaced && last_note.getStemDirection() === -1) {\r\n                end_position.x -= notehead_width + render_options.padding_right;\r\n            }\r\n            // Adjust y position better if it's not coming from the center of the note\r\n            start_position.y += upwards_slope ? -3 : 1;\r\n            end_position.y += upwards_slope ? 2 : 0;\r\n            this.drawArrowLine(ctx, start_position, end_position);\r\n        });\r\n        ctx.restore();\r\n        // Determine the x coordinate where to start the text\r\n        const text_width = ctx.measureText(this.text).width;\r\n        const justification = render_options.text_justification;\r\n        let x = 0;\r\n        if (justification === StaveLine.TextJustification.LEFT) {\r\n            x = start_position.x;\r\n        }\r\n        else if (justification === StaveLine.TextJustification.CENTER) {\r\n            const delta_x = end_position.x - start_position.x;\r\n            const center_x = delta_x / 2 + start_position.x;\r\n            x = center_x - text_width / 2;\r\n        }\r\n        else if (justification === StaveLine.TextJustification.RIGHT) {\r\n            x = end_position.x - text_width;\r\n        }\r\n        // Determine the y value to start the text\r\n        let y = 0;\r\n        const vertical_position = render_options.text_position_vertical;\r\n        if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\r\n            y = first_note.checkStave().getYForTopText();\r\n        }\r\n        else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\r\n            y = first_note.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\r\n        }\r\n        // Draw the text\r\n        ctx.save();\r\n        this.applyFontStyle();\r\n        ctx.fillText(this.text, x, y);\r\n        ctx.restore();\r\n        return this;\r\n    }\r\n}\r\n/** Default text font. */\r\nStaveLine.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\r\n// Text Positioning\r\nStaveLine.TextVerticalPosition = {\r\n    TOP: 1,\r\n    BOTTOM: 2,\r\n};\r\nStaveLine.TextJustification = TextJustification;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n// A base class for stave modifiers (e.g. clefs, key signatures)\r\nimport { Element } from './element';\r\nimport { Category } from './typeguard';\r\nimport { defined } from './util';\r\nexport var StaveModifierPosition;\r\n(function (StaveModifierPosition) {\r\n    StaveModifierPosition[StaveModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\r\n    StaveModifierPosition[StaveModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\r\n    StaveModifierPosition[StaveModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\r\n    StaveModifierPosition[StaveModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\r\n    StaveModifierPosition[StaveModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\r\n    StaveModifierPosition[StaveModifierPosition[\"BEGIN\"] = 5] = \"BEGIN\";\r\n    StaveModifierPosition[StaveModifierPosition[\"END\"] = 6] = \"END\";\r\n})(StaveModifierPosition || (StaveModifierPosition = {}));\r\nexport class StaveModifier extends Element {\r\n    constructor() {\r\n        super();\r\n        this.width = 0;\r\n        this.x = 0;\r\n        this.padding = 10;\r\n        this.position = StaveModifierPosition.ABOVE;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StaveModifier;\r\n    }\r\n    static get Position() {\r\n        return StaveModifierPosition;\r\n    }\r\n    getPosition() {\r\n        return this.position;\r\n    }\r\n    setPosition(position) {\r\n        this.position = position;\r\n        return this;\r\n    }\r\n    getStave() {\r\n        return this.stave;\r\n    }\r\n    checkStave() {\r\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\r\n    }\r\n    setStave(stave) {\r\n        this.stave = stave;\r\n        return this;\r\n    }\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    setWidth(width) {\r\n        this.width = width;\r\n        return this;\r\n    }\r\n    getX() {\r\n        return this.x;\r\n    }\r\n    setX(x) {\r\n        this.x = x;\r\n        return this;\r\n    }\r\n    placeGlyphOnLine(glyph, stave, line, customShift = 0) {\r\n        glyph.setYShift(stave.getYForLine(line !== null && line !== void 0 ? line : 0) - stave.getYForGlyphs() + customShift);\r\n    }\r\n    getPadding(index) {\r\n        return index !== undefined && index < 2 ? 0 : this.padding;\r\n    }\r\n    setPadding(padding) {\r\n        this.padding = padding;\r\n        return this;\r\n    }\r\n    setLayoutMetrics(layoutMetrics) {\r\n        this.layoutMetrics = layoutMetrics;\r\n        return this;\r\n    }\r\n    getLayoutMetrics() {\r\n        return this.layoutMetrics;\r\n    }\r\n    // eslint-disable-next-line\r\n    draw(...args) {\r\n        // DO NOTHING.\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// This file implements notes for standard notation. This consists of one or\r\n// more `NoteHeads`, an optional stem, and an optional flag.\r\n//\r\n// Throughout these comments, a \"note\" refers to the entire `StaveNote`,\r\n// and a \"key\" refers to a specific pitch/notehead within a note.\r\n//\r\n// See `tests/stavenote_tests.ts` for usage examples.\r\nimport { BoundingBox } from './boundingbox';\r\nimport { Modifier } from './modifier';\r\nimport { NoteHead } from './notehead';\r\nimport { Stem } from './stem';\r\nimport { StemmableNote } from './stemmablenote';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { defined, log, midLine, RuntimeError } from './util';\r\nfunction showDeprecationWarningForNoteHeads() {\r\n    // eslint-disable-next-line\r\n    console.warn('StaveNote.note_heads is deprecated. Use StaveNote.noteHeads instead.', 'This accessor will be removed in VexFlow 5.0.');\r\n}\r\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (StaveNote.DEBUG)\r\n        log('Vex.Flow.StaveNote', args);\r\n}\r\nconst isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\r\n// Helper methods for rest positioning in ModifierContext.\r\nfunction shiftRestVertical(rest, note, dir) {\r\n    const delta = dir;\r\n    rest.line += delta;\r\n    rest.maxLine += delta;\r\n    rest.minLine += delta;\r\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\r\n}\r\n// Called from formatNotes :: center a rest between two notes\r\nfunction centerRest(rest, noteU, noteL) {\r\n    const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\r\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\r\n    rest.line -= delta;\r\n    rest.maxLine -= delta;\r\n    rest.minLine -= delta;\r\n}\r\nexport class StaveNote extends StemmableNote {\r\n    constructor(noteStruct) {\r\n        var _a, _b, _c;\r\n        super(noteStruct);\r\n        //////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // INSTANCE MEMBERS\r\n        this.minLine = 0;\r\n        this.maxLine = 0;\r\n        // Sorted variant of keyProps used internally\r\n        this.sortedKeyProps = [];\r\n        this.ledgerLineStyle = {};\r\n        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';\r\n        this.octave_shift = (_b = noteStruct.octave_shift) !== null && _b !== void 0 ? _b : 0;\r\n        // Pull note rendering properties.\r\n        this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\r\n        defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\r\n        // if true, displace note to right\r\n        this.displaced = false;\r\n        this.dot_shiftY = 0;\r\n        // for displaced ledger lines\r\n        this.use_default_head_x = false;\r\n        // Drawing\r\n        this._noteHeads = [];\r\n        this.modifiers = [];\r\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \r\n            // font size for note heads and rests\r\n            glyph_font_scale: noteStruct.glyph_font_scale || Tables.NOTATION_FONT_SCALE, \r\n            // number of stroke px to the left and right of head\r\n            stroke_px: noteStruct.stroke_px || StaveNote.LEDGER_LINE_OFFSET });\r\n        this.calculateKeyProps();\r\n        this.buildStem();\r\n        // Set the stem direction\r\n        if (noteStruct.auto_stem) {\r\n            this.autoStem();\r\n        }\r\n        else {\r\n            this.setStemDirection((_c = noteStruct.stem_direction) !== null && _c !== void 0 ? _c : Stem.UP);\r\n        }\r\n        this.reset();\r\n        this.buildFlag();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StaveNote;\r\n    }\r\n    /**\r\n     * @deprecated Use Stem.UP.\r\n     */\r\n    static get STEM_UP() {\r\n        return Stem.UP;\r\n    }\r\n    /**\r\n     * @deprecated Use Stem.DOWN.\r\n     */\r\n    static get STEM_DOWN() {\r\n        return Stem.DOWN;\r\n    }\r\n    static get LEDGER_LINE_OFFSET() {\r\n        return 3;\r\n    }\r\n    static get minNoteheadPadding() {\r\n        const musicFont = Tables.currentMusicFont();\r\n        return musicFont.lookupMetric('glyphs.noteHead.minPadding');\r\n    }\r\n    /** Format notes inside a ModifierContext. */\r\n    static format(notes, state) {\r\n        if (!notes || notes.length < 2)\r\n            return false;\r\n        const notesList = [];\r\n        for (let i = 0; i < notes.length; i++) {\r\n            // Formatting uses sortedKeyProps to calculate line and minL.\r\n            const props = notes[i].sortedKeyProps;\r\n            const line = props[0].keyProps.line;\r\n            let minL = props[props.length - 1].keyProps.line;\r\n            const stemDirection = notes[i].getStemDirection();\r\n            const stemMax = notes[i].getStemLength() / 10;\r\n            const stemMin = notes[i].getStemMinimumLength() / 10;\r\n            let maxL;\r\n            if (notes[i].isRest()) {\r\n                maxL = line + notes[i].glyph.line_above;\r\n                minL = line - notes[i].glyph.line_below;\r\n            }\r\n            else {\r\n                maxL =\r\n                    stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;\r\n                minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;\r\n            }\r\n            notesList.push({\r\n                line: props[0].keyProps.line,\r\n                maxLine: maxL,\r\n                minLine: minL,\r\n                isrest: notes[i].isRest(),\r\n                stemDirection: stemDirection,\r\n                stemMax,\r\n                stemMin,\r\n                voice_shift: notes[i].getVoiceShiftWidth(),\r\n                is_displaced: notes[i].isDisplaced(),\r\n                note: notes[i],\r\n            });\r\n        }\r\n        let voices = 0;\r\n        let noteU = undefined;\r\n        let noteM = undefined;\r\n        let noteL = undefined;\r\n        const draw = [false, false, false];\r\n        for (let i = 0; i < notesList.length; i++) {\r\n            draw[i] = notesList[i].note.render_options.draw == false ? false : true;\r\n        }\r\n        if (draw[0] && draw[1] && draw[2]) {\r\n            // Three visible notes\r\n            voices = 3;\r\n            noteU = notesList[0];\r\n            noteM = notesList[1];\r\n            noteL = notesList[2];\r\n        }\r\n        else if (draw[0] && draw[1]) {\r\n            // Two visible notes, 0 & 1\r\n            voices = 2;\r\n            noteU = notesList[0];\r\n            noteL = notesList[1];\r\n        }\r\n        else if (draw[0] && draw[2]) {\r\n            // Two visible notes, 0 & 2\r\n            voices = 2;\r\n            noteU = notesList[0];\r\n            noteL = notesList[2];\r\n        }\r\n        else if (draw[1] && draw[2]) {\r\n            // Two visible notes, 1 & 2\r\n            voices = 2;\r\n            noteU = notesList[1];\r\n            noteL = notesList[2];\r\n        }\r\n        else {\r\n            // No shift required for less than 2 visible notes\r\n            return true;\r\n        }\r\n        // for two voice backward compatibility, ensure upper voice is stems up\r\n        // for three voices, the voices must be in order (upper, middle, lower)\r\n        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\r\n            noteU = notesList[1];\r\n            noteL = notesList[0];\r\n        }\r\n        const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\r\n        let xShift = 0;\r\n        // Test for two voice note intersection\r\n        if (voices === 2) {\r\n            const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\r\n            if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {\r\n                noteL.note.render_options.draw = false;\r\n            }\r\n            else if (noteU.minLine <= noteL.maxLine + lineSpacing) {\r\n                if (noteU.isrest) {\r\n                    // shift rest up\r\n                    shiftRestVertical(noteU, noteL, 1);\r\n                }\r\n                else if (noteL.isrest) {\r\n                    // shift rest down\r\n                    shiftRestVertical(noteL, noteU, -1);\r\n                }\r\n                else {\r\n                    //Instead of shifting notes, remove the appropriate flag\r\n                    //If we are sharing a line, switch one notes stem direction.\r\n                    //If we are sharing a line and in the same voice, only then offset one note\r\n                    const lineDiff = Math.abs(noteU.line - noteL.line);\r\n                    if (noteU.note.hasStem() && noteL.note.hasStem()) {\r\n                        //If we have different dot values, must offset\r\n                        //Or If we have a white mixed with a black notehead, must offset\r\n                        let whiteNoteHeadCount = 0;\r\n                        let blackNoteHeadCount = 0;\r\n                        if (Tables.durationToNumber(noteU.note.duration) === 2) {\r\n                            whiteNoteHeadCount++;\r\n                        }\r\n                        else if (Tables.durationToNumber(noteU.note.duration) > 2) {\r\n                            blackNoteHeadCount++;\r\n                        }\r\n                        if (Tables.durationToNumber(noteL.note.duration) === 2) {\r\n                            whiteNoteHeadCount++;\r\n                        }\r\n                        else if (Tables.durationToNumber(noteL.note.duration) > 2) {\r\n                            blackNoteHeadCount++;\r\n                        }\r\n                        if ((whiteNoteHeadCount !== 2 && blackNoteHeadCount !== 2) ||\r\n                            noteU.note.getModifiersByType(Category.Dot).length !== noteL.note.getModifiersByType(Category.Dot).length) {\r\n                            xShift = voiceXShift + 2;\r\n                            if (noteU.stemDirection === noteL.stemDirection) {\r\n                                // upper voice is middle voice, so shift it right\r\n                                noteU.note.setXShift(xShift);\r\n                            }\r\n                            else {\r\n                                // shift lower voice right\r\n                                noteL.note.setXShift(xShift);\r\n                            }\r\n                        }\r\n                        else if (lineDiff < 1 && lineDiff > 0) {\r\n                            //if the notes are quite close but not on the same line, shift\r\n                            xShift = voiceXShift + 2;\r\n                            if (noteU.stemDirection === noteL.stemDirection) {\r\n                                // upper voice is middle voice, so shift it right\r\n                                noteU.note.setXShift(xShift);\r\n                            }\r\n                            else {\r\n                                // shift lower voice right\r\n                                noteL.note.setXShift(xShift);\r\n                            }\r\n                        }\r\n                        else if (noteU.note.voice !== noteL.note.voice) {\r\n                            //If we are not in the same voice\r\n                            if (noteU.stemDirection === noteL.stemDirection) {\r\n                                if (noteU.line != noteL.line) {\r\n                                    xShift = voiceXShift + 2;\r\n                                    noteU.note.setXShift(xShift);\r\n                                }\r\n                                else {\r\n                                    //same line, swap stem direction for one note\r\n                                    if (noteL.stemDirection === 1) {\r\n                                        noteL.stemDirection = -1;\r\n                                        noteL.note.setStemDirection(-1);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } //Very close whole notes\r\n                    }\r\n                    else if (lineDiff < 1) {\r\n                        xShift = voiceXShift + 2;\r\n                        if (noteU.stemDirection === noteL.stemDirection) {\r\n                            // upper voice is middle voice, so shift it right\r\n                            noteU.note.setXShift(xShift);\r\n                        }\r\n                        else {\r\n                            // shift lower voice right\r\n                            noteL.note.setXShift(xShift);\r\n                        }\r\n                    }\r\n                    else if (noteU.note.hasStem()) {\r\n                        noteU.stemDirection = -noteU.note.getStemDirection();\r\n                        noteU.note.setStemDirection(noteU.stemDirection);\r\n                    }\r\n                    else if (noteL.note.hasStem()) {\r\n                        noteL.stemDirection = -noteL.note.getStemDirection();\r\n                        noteL.note.setStemDirection(noteL.stemDirection);\r\n                    }\r\n                }\r\n            }\r\n            // format complete\r\n            state.right_shift += xShift;\r\n            return true;\r\n        }\r\n        if (!noteM)\r\n            throw new RuntimeError('InvalidState', 'noteM not defined.');\r\n        // For three voices, test if rests can be repositioned\r\n        //\r\n        // Special case 1 :: middle voice rest between two notes\r\n        //\r\n        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\r\n            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\r\n                const restHeight = noteM.maxLine - noteM.minLine;\r\n                const space = noteU.minLine - noteL.maxLine;\r\n                if (restHeight < space) {\r\n                    // center middle voice rest between the upper and lower voices\r\n                    centerRest(noteM, noteU, noteL);\r\n                }\r\n                else {\r\n                    xShift = voiceXShift + 2; // shift middle rest right\r\n                    noteM.note.setXShift(xShift);\r\n                    if (noteL.note.hasBeam() === false) {\r\n                        noteL.stemDirection = -1;\r\n                        noteL.note.setStemDirection(-1);\r\n                    }\r\n                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\r\n                        noteU.stemDirection = 1;\r\n                        noteU.note.setStemDirection(1);\r\n                    }\r\n                }\r\n                // format complete\r\n                state.right_shift += xShift;\r\n                return true;\r\n            }\r\n        }\r\n        // Special case 2 :: all voices are rests\r\n        if (noteU.isrest && noteM.isrest && noteL.isrest) {\r\n            // Hide upper voice rest\r\n            noteU.note.render_options.draw = false;\r\n            // Hide lower voice rest\r\n            noteL.note.render_options.draw = false;\r\n            // format complete\r\n            state.right_shift += xShift;\r\n            return true;\r\n        }\r\n        // Test if any other rests can be repositioned\r\n        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\r\n            // Hide middle voice rest\r\n            noteM.note.render_options.draw = false;\r\n        }\r\n        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\r\n            // Hide middle voice rest\r\n            noteM.note.render_options.draw = false;\r\n        }\r\n        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\r\n            // shift upper voice rest up;\r\n            shiftRestVertical(noteU, noteM, 1);\r\n        }\r\n        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\r\n            // shift lower voice rest down\r\n            shiftRestVertical(noteL, noteM, -1);\r\n        }\r\n        // If middle voice intersects upper or lower voice\r\n        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {\r\n            // shift middle note right\r\n            xShift = voiceXShift + 2;\r\n            noteM.note.setXShift(xShift);\r\n            if (noteL.note.hasBeam() === false) {\r\n                noteL.stemDirection = -1;\r\n                noteL.note.setStemDirection(-1);\r\n            }\r\n            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\r\n                noteU.stemDirection = 1;\r\n                noteU.note.setStemDirection(1);\r\n            }\r\n        }\r\n        state.right_shift += xShift;\r\n        return true;\r\n    }\r\n    static postFormat(notes) {\r\n        if (!notes)\r\n            return false;\r\n        notes.forEach((note) => note.postFormat());\r\n        return true;\r\n    }\r\n    reset() {\r\n        super.reset();\r\n        // Save prior noteHead styles & reapply them after making new noteheads.\r\n        const noteHeadStyles = this._noteHeads.map((noteHead) => noteHead.getStyle());\r\n        this.buildNoteHeads();\r\n        this._noteHeads.forEach((noteHead, index) => {\r\n            const noteHeadStyle = noteHeadStyles[index];\r\n            if (noteHeadStyle)\r\n                noteHead.setStyle(noteHeadStyle);\r\n        });\r\n        const stave = this.stave;\r\n        if (stave) {\r\n            this._noteHeads.forEach((head) => head.setStave(stave));\r\n        }\r\n        this.calcNoteDisplacements();\r\n        return this;\r\n    }\r\n    setBeam(beam) {\r\n        this.beam = beam;\r\n        this.calcNoteDisplacements();\r\n        // Update stem extension if a beam is assigned.\r\n        if (this.stem) {\r\n            this.stem.setExtension(this.getStemExtension());\r\n        }\r\n        return this;\r\n    }\r\n    // Builds a `Stem` for the note\r\n    buildStem() {\r\n        this.setStem(new Stem({ hide: !!this.isRest() }));\r\n        return this;\r\n    }\r\n    // Builds a `NoteHead` for each key in the note\r\n    buildNoteHeads() {\r\n        this._noteHeads = [];\r\n        const stemDirection = this.getStemDirection();\r\n        const keys = this.getKeys();\r\n        let lastLine = undefined;\r\n        let lineDiff = undefined;\r\n        let displaced = false;\r\n        // Draw notes from bottom to top.\r\n        // For down-stem notes, we draw from top to bottom.\r\n        let start;\r\n        let end;\r\n        let step;\r\n        if (stemDirection === Stem.UP) {\r\n            start = 0;\r\n            end = keys.length;\r\n            step = 1;\r\n        }\r\n        else {\r\n            start = keys.length - 1;\r\n            end = -1;\r\n            step = -1;\r\n        }\r\n        for (let i = start; i !== end; i += step) {\r\n            // Building noteheads rely on sortedKeNotes in order to calculate the displacements\r\n            const noteProps = this.sortedKeyProps[i].keyProps;\r\n            const line = noteProps.line;\r\n            // Keep track of last line with a note head, so that consecutive heads\r\n            // are correctly displaced.\r\n            if (lastLine === undefined) {\r\n                lastLine = line;\r\n            }\r\n            else {\r\n                lineDiff = Math.abs(lastLine - line);\r\n                if (lineDiff === 0 || lineDiff === 0.5) {\r\n                    displaced = !displaced;\r\n                }\r\n                else {\r\n                    displaced = false;\r\n                    this.use_default_head_x = true;\r\n                }\r\n            }\r\n            lastLine = line;\r\n            const notehead = new NoteHead({\r\n                duration: this.duration,\r\n                note_type: this.noteType,\r\n                displaced,\r\n                stem_direction: stemDirection,\r\n                custom_glyph_code: noteProps.code,\r\n                glyph_font_scale: this.render_options.glyph_font_scale,\r\n                x_shift: noteProps.shift_right,\r\n                stem_up_x_offset: noteProps.stem_up_x_offset,\r\n                stem_down_x_offset: noteProps.stem_down_x_offset,\r\n                line: noteProps.line,\r\n            });\r\n            this.addChildElement(notehead);\r\n            this._noteHeads[this.sortedKeyProps[i].index] = notehead;\r\n        }\r\n    }\r\n    // Automatically sets the stem direction based on the keys in the note\r\n    autoStem() {\r\n        this.setStemDirection(this.calculateOptimalStemDirection());\r\n    }\r\n    calculateOptimalStemDirection() {\r\n        // Figure out optimal stem direction based on given notes\r\n        // minLine & maxLine rely on sortedKeyProps\r\n        this.minLine = this.sortedKeyProps[0].keyProps.line;\r\n        this.maxLine = this.sortedKeyProps[this.keyProps.length - 1].keyProps.line;\r\n        const MIDDLE_LINE = 3;\r\n        const decider = (this.minLine + this.maxLine) / 2;\r\n        const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\r\n        return stemDirection;\r\n    }\r\n    // Calculates and stores the properties for each key in the note\r\n    calculateKeyProps() {\r\n        let lastLine;\r\n        for (let i = 0; i < this.keys.length; ++i) {\r\n            const key = this.keys[i];\r\n            // All rests use the same position on the line.\r\n            // if (this.glyph.rest) key = this.glyph.position;\r\n            if (this.glyph.rest)\r\n                this.glyph.position = key;\r\n            const options = { octave_shift: this.octave_shift || 0 };\r\n            const props = Tables.keyProperties(key, this.clef, options);\r\n            if (!props) {\r\n                throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\r\n            }\r\n            // Override line placement for default rests\r\n            if (props.key === 'R') {\r\n                if (this.duration === '1' || this.duration === 'w') {\r\n                    props.line = 4;\r\n                }\r\n                else {\r\n                    props.line = 3;\r\n                }\r\n            }\r\n            // Calculate displacement of this note\r\n            const line = props.line;\r\n            if (lastLine == undefined) {\r\n                lastLine = line;\r\n            }\r\n            else {\r\n                if (Math.abs(lastLine - line) === 0.5) {\r\n                    this.displaced = true;\r\n                    props.displaced = true;\r\n                    // Have to mark the previous note as\r\n                    // displaced as well, for modifier placement\r\n                    if (this.keyProps.length > 0) {\r\n                        this.keyProps[i - 1].displaced = true;\r\n                    }\r\n                }\r\n            }\r\n            lastLine = line;\r\n            this.keyProps.push(props);\r\n        }\r\n        // Sort the notes from lowest line to highest line in sortedKeyProps\r\n        // Warn no longer required as keyProps remains unsorted\r\n        this.keyProps.forEach((keyProps, index) => {\r\n            this.sortedKeyProps.push({ keyProps, index });\r\n        });\r\n        this.sortedKeyProps.sort((a, b) => a.keyProps.line - b.keyProps.line);\r\n    }\r\n    // Get the `BoundingBox` for the entire note\r\n    getBoundingBox() {\r\n        var _a, _b;\r\n        if (!this.preFormatted) {\r\n            throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\r\n        }\r\n        const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();\r\n        const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;\r\n        let minY = 0;\r\n        let maxY = 0;\r\n        const halfLineSpacing = ((_b = (_a = this.getStave()) === null || _a === void 0 ? void 0 : _a.getSpacingBetweenLines()) !== null && _b !== void 0 ? _b : 0) / 2;\r\n        const lineSpacing = halfLineSpacing * 2;\r\n        if (this.isRest()) {\r\n            const y = this.ys[0];\r\n            const frac = Tables.durationToFraction(this.duration);\r\n            if (frac.equals(1) || frac.equals(2)) {\r\n                minY = y - halfLineSpacing;\r\n                maxY = y + halfLineSpacing;\r\n            }\r\n            else {\r\n                minY = y - this.glyph.line_above * lineSpacing;\r\n                maxY = y + this.glyph.line_below * lineSpacing;\r\n            }\r\n        }\r\n        else if (this.glyph.stem) {\r\n            const ys = this.getStemExtents();\r\n            ys.baseY += halfLineSpacing * this.getStemDirection();\r\n            minY = Math.min(ys.topY, ys.baseY);\r\n            maxY = Math.max(ys.topY, ys.baseY);\r\n        }\r\n        else {\r\n            minY = 0;\r\n            maxY = 0;\r\n            for (let i = 0; i < this.ys.length; ++i) {\r\n                const yy = this.ys[i];\r\n                if (i === 0) {\r\n                    minY = yy;\r\n                    maxY = yy;\r\n                }\r\n                else {\r\n                    minY = Math.min(yy, minY);\r\n                    maxY = Math.max(yy, maxY);\r\n                }\r\n            }\r\n            minY -= halfLineSpacing;\r\n            maxY += halfLineSpacing;\r\n        }\r\n        return new BoundingBox(x, minY, w, maxY - minY);\r\n    }\r\n    // Gets the line number of the bottom note in the chord.\r\n    // If `isTopNote` is `true` then get the top note's line number instead\r\n    getLineNumber(isTopNote) {\r\n        if (!this.keyProps.length) {\r\n            throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\r\n        }\r\n        let resultLine = this.keyProps[0].line;\r\n        // No precondition assumed for sortedness of keyProps array\r\n        for (let i = 0; i < this.keyProps.length; i++) {\r\n            const thisLine = this.keyProps[i].line;\r\n            if (isTopNote) {\r\n                if (thisLine > resultLine)\r\n                    resultLine = thisLine;\r\n            }\r\n            else {\r\n                if (thisLine < resultLine)\r\n                    resultLine = thisLine;\r\n            }\r\n        }\r\n        return resultLine;\r\n    }\r\n    /**\r\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\r\n     */\r\n    isRest() {\r\n        return this.glyph.rest;\r\n    }\r\n    // Determine if the current note is a chord\r\n    isChord() {\r\n        return !this.isRest() && this.keys.length > 1;\r\n    }\r\n    // Determine if the `StaveNote` has a stem\r\n    hasStem() {\r\n        return this.glyph.stem;\r\n    }\r\n    hasFlag() {\r\n        return super.hasFlag() && !this.isRest();\r\n    }\r\n    getStemX() {\r\n        if (this.noteType === 'r') {\r\n            return this.getCenterGlyphX();\r\n        }\r\n        else {\r\n            // We adjust the origin of the stem because we want the stem left-aligned\r\n            // with the notehead if stemmed-down, and right-aligned if stemmed-up\r\n            return super.getStemX() + (this.stem_direction ? Stem.WIDTH / (2 * -this.stem_direction) : 0);\r\n        }\r\n    }\r\n    // Get the `y` coordinate for text placed on the top/bottom of a\r\n    // note at a desired `text_line`\r\n    getYForTopText(textLine) {\r\n        const extents = this.getStemExtents();\r\n        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\r\n    }\r\n    getYForBottomText(textLine) {\r\n        const extents = this.getStemExtents();\r\n        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\r\n    }\r\n    // Sets the current note to the provided `stave`. This applies\r\n    // `y` values to the `NoteHeads`.\r\n    setStave(stave) {\r\n        super.setStave(stave);\r\n        const ys = this._noteHeads.map((notehead) => {\r\n            notehead.setStave(stave);\r\n            return notehead.getY();\r\n        });\r\n        this.setYs(ys);\r\n        if (this.stem) {\r\n            const { y_top, y_bottom } = this.getNoteHeadBounds();\r\n            this.stem.setYBounds(y_top, y_bottom);\r\n        }\r\n        return this;\r\n    }\r\n    // Check if note is shifted to the right\r\n    isDisplaced() {\r\n        return this.displaced;\r\n    }\r\n    // Sets whether shift note to the right. `displaced` is a `boolean`\r\n    setNoteDisplaced(displaced) {\r\n        this.displaced = displaced;\r\n        return this;\r\n    }\r\n    // Get the starting `x` coordinate for a `StaveTie`\r\n    getTieRightX() {\r\n        let tieStartX = this.getAbsoluteX();\r\n        tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;\r\n        if (this.modifierContext)\r\n            tieStartX += this.modifierContext.getRightShift();\r\n        return tieStartX;\r\n    }\r\n    // Get the ending `x` coordinate for a `StaveTie`\r\n    getTieLeftX() {\r\n        let tieEndX = this.getAbsoluteX();\r\n        tieEndX += this.x_shift - this.leftDisplacedHeadPx;\r\n        return tieEndX;\r\n    }\r\n    // Get the stave line on which to place a rest\r\n    getLineForRest() {\r\n        let restLine = this.keyProps[0].line;\r\n        if (this.keyProps.length > 1) {\r\n            const lastLine = this.keyProps[this.keyProps.length - 1].line;\r\n            const top = Math.max(restLine, lastLine);\r\n            const bot = Math.min(restLine, lastLine);\r\n            restLine = midLine(top, bot);\r\n        }\r\n        return restLine;\r\n    }\r\n    // Get the default `x` and `y` coordinates for the provided `position`\r\n    // and key `index`\r\n    getModifierStartXY(position, index, options = {}) {\r\n        var _a, _b;\r\n        if (!this.preFormatted) {\r\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\r\n        }\r\n        if (this.ys.length === 0) {\r\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\r\n        }\r\n        const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\r\n        let x = 0;\r\n        if (position === LEFT) {\r\n            // FIXME: Left modifier padding, move to font file\r\n            x = -1 * 2;\r\n        }\r\n        else if (position === RIGHT) {\r\n            // FIXME: Right modifier padding, move to font file\r\n            x = this.getGlyphWidth() + this.x_shift + 2;\r\n            if (this.stem_direction === Stem.UP &&\r\n                this.hasFlag() &&\r\n                (options.forceFlagRight || isInnerNoteIndex(this, index))) {\r\n                x += (_b = (_a = this === null || this === void 0 ? void 0 : this.flag) === null || _a === void 0 ? void 0 : _a.getMetrics().width) !== null && _b !== void 0 ? _b : 0;\r\n            }\r\n        }\r\n        else if (position === BELOW || position === ABOVE) {\r\n            x = this.getGlyphWidth() / 2;\r\n        }\r\n        return {\r\n            x: this.getAbsoluteX() + x,\r\n            y: this.ys[index],\r\n        };\r\n    }\r\n    // Sets the style of the complete StaveNote, including all keys\r\n    // and the stem.\r\n    setStyle(style) {\r\n        return super.setGroupStyle(style);\r\n    }\r\n    setStemStyle(style) {\r\n        const stem = this.getStem();\r\n        if (stem)\r\n            stem.setStyle(style);\r\n        return this;\r\n    }\r\n    getStemStyle() {\r\n        var _a;\r\n        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();\r\n    }\r\n    setLedgerLineStyle(style) {\r\n        this.ledgerLineStyle = style;\r\n    }\r\n    getLedgerLineStyle() {\r\n        return this.ledgerLineStyle;\r\n    }\r\n    setFlagStyle(style) {\r\n        this.flagStyle = style;\r\n    }\r\n    getFlagStyle() {\r\n        return this.flagStyle;\r\n    }\r\n    // Sets the notehead at `index` to the provided coloring `style`.\r\n    //\r\n    // `style` is an `object` with the following properties: `shadowColor`,\r\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\r\n    setKeyStyle(index, style) {\r\n        this._noteHeads[index].setStyle(style);\r\n        return this;\r\n    }\r\n    setKeyLine(index, line) {\r\n        this.keyProps[index].line = line;\r\n        this.reset();\r\n        return this;\r\n    }\r\n    getKeyLine(index) {\r\n        return this.keyProps[index].line;\r\n    }\r\n    // Get the width of the note if it is displaced. Used for `Voice`\r\n    // formatting\r\n    getVoiceShiftWidth() {\r\n        // TODO: may need to accomodate for dot here.\r\n        return this.getGlyphWidth() * (this.displaced ? 2 : 1);\r\n    }\r\n    // Calculates and sets the extra pixels to the left or right\r\n    // if the note is displaced.\r\n    calcNoteDisplacements() {\r\n        this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === Stem.DOWN ? this.getGlyphWidth() : 0);\r\n        // For upstems with flags, the extra space is unnecessary, since it's taken\r\n        // up by the flag.\r\n        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stem_direction === Stem.UP ? this.getGlyphWidth() : 0);\r\n    }\r\n    // Pre-render formatting\r\n    preFormat() {\r\n        if (this.preFormatted)\r\n            return;\r\n        let noteHeadPadding = 0;\r\n        if (this.modifierContext) {\r\n            this.modifierContext.preFormat();\r\n            // If there are no modifiers on this note, make sure there is adequate padding\r\n            // between the notes.\r\n            if (this.modifierContext.getWidth() === 0) {\r\n                noteHeadPadding = StaveNote.minNoteheadPadding;\r\n            }\r\n        }\r\n        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\r\n        // For upward flagged notes, the width of the flag needs to be added\r\n        if (this.shouldDrawFlag() && this.stem_direction === Stem.UP) {\r\n            width += this.getGlyphWidth();\r\n            // TODO: Add flag width as a separate metric\r\n        }\r\n        this.setWidth(width);\r\n        this.preFormatted = true;\r\n    }\r\n    /**\r\n     * @typedef {Object} noteHeadBounds\r\n     * @property {number} y_top the highest notehead bound\r\n     * @property {number} y_bottom the lowest notehead bound\r\n     * @property {number|Null} displaced_x the starting x for displaced noteheads\r\n     * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads\r\n     * @property {number} highest_line the highest notehead line in traditional music line\r\n     *  numbering (bottom line = 1, top line = 5)\r\n     * @property {number} lowest_line the lowest notehead line\r\n     * @property {number|false} highest_displaced_line the highest staff line number\r\n     *   for a displaced notehead\r\n     * @property {number|false} lowest_displaced_line\r\n     * @property {number} highest_non_displaced_line\r\n     * @property {number} lowest_non_displaced_line\r\n     */\r\n    /**\r\n     * Get the staff line and y value for the highest & lowest noteheads\r\n     * @returns {noteHeadBounds}\r\n     */\r\n    getNoteHeadBounds() {\r\n        // Top and bottom Y values for stem.\r\n        let yTop = +Infinity;\r\n        let yBottom = -Infinity;\r\n        let nonDisplacedX;\r\n        let displacedX;\r\n        let highestLine = this.checkStave().getNumLines();\r\n        let lowestLine = 1;\r\n        let highestDisplacedLine;\r\n        let lowestDisplacedLine;\r\n        let highestNonDisplacedLine = highestLine;\r\n        let lowestNonDisplacedLine = lowestLine;\r\n        this._noteHeads.forEach((notehead) => {\r\n            const line = notehead.getLine();\r\n            const y = notehead.getY();\r\n            yTop = Math.min(y, yTop);\r\n            yBottom = Math.max(y, yBottom);\r\n            if (displacedX === undefined && notehead.isDisplaced()) {\r\n                displacedX = notehead.getAbsoluteX();\r\n            }\r\n            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\r\n                nonDisplacedX = notehead.getAbsoluteX();\r\n            }\r\n            highestLine = Math.max(line, highestLine);\r\n            lowestLine = Math.min(line, lowestLine);\r\n            if (notehead.isDisplaced()) {\r\n                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\r\n                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\r\n            }\r\n            else {\r\n                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\r\n                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\r\n            }\r\n        }, this);\r\n        return {\r\n            y_top: yTop,\r\n            y_bottom: yBottom,\r\n            displaced_x: displacedX,\r\n            non_displaced_x: nonDisplacedX,\r\n            highest_line: highestLine,\r\n            lowest_line: lowestLine,\r\n            highest_displaced_line: highestDisplacedLine,\r\n            lowest_displaced_line: lowestDisplacedLine,\r\n            highest_non_displaced_line: highestNonDisplacedLine,\r\n            lowest_non_displaced_line: lowestNonDisplacedLine,\r\n        };\r\n    }\r\n    // Get the starting `x` coordinate for the noteheads\r\n    getNoteHeadBeginX() {\r\n        return this.getAbsoluteX() + this.x_shift;\r\n    }\r\n    // Get the ending `x` coordinate for the noteheads\r\n    getNoteHeadEndX() {\r\n        const xBegin = this.getNoteHeadBeginX();\r\n        return xBegin + this.getGlyphWidth();\r\n    }\r\n    get noteHeads() {\r\n        return this._noteHeads.slice();\r\n    }\r\n    /** @deprecated use StaveNote.noteHeads instead. */\r\n    get note_heads() {\r\n        showDeprecationWarningForNoteHeads();\r\n        return this.noteHeads;\r\n    }\r\n    // Draw the ledger lines between the stave and the highest/lowest keys\r\n    drawLedgerLines() {\r\n        const stave = this.checkStave();\r\n        const { glyph, render_options: { stroke_px }, } = this;\r\n        const ctx = this.checkContext();\r\n        const width = glyph.getWidth() + stroke_px * 2;\r\n        const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - Stem.WIDTH / 2;\r\n        if (this.isRest())\r\n            return;\r\n        if (!ctx) {\r\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\r\n        }\r\n        const { highest_line, lowest_line, highest_displaced_line, highest_non_displaced_line, lowest_displaced_line, lowest_non_displaced_line, displaced_x, non_displaced_x, } = this.getNoteHeadBounds();\r\n        // Early out if there are no ledger lines to draw.\r\n        if (highest_line < 6 && lowest_line > 0)\r\n            return;\r\n        const min_x = Math.min(displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0, non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0);\r\n        const drawLedgerLine = (y, normal, displaced) => {\r\n            let x;\r\n            if (displaced && normal)\r\n                x = min_x - stroke_px;\r\n            else if (normal)\r\n                x = (non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0) - stroke_px;\r\n            else\r\n                x = (displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0) - stroke_px;\r\n            const ledgerWidth = normal && displaced ? doubleWidth : width;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x, y);\r\n            ctx.lineTo(x + ledgerWidth, y);\r\n            ctx.stroke();\r\n        };\r\n        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());\r\n        this.applyStyle(ctx, style);\r\n        // Draw ledger lines below the staff:\r\n        for (let line = 6; line <= highest_line; ++line) {\r\n            const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;\r\n            const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;\r\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\r\n        }\r\n        // Draw ledger lines above the staff:\r\n        for (let line = 0; line >= lowest_line; --line) {\r\n            const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;\r\n            const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;\r\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\r\n        }\r\n        this.restoreStyle(ctx, style);\r\n    }\r\n    // Draw all key modifiers\r\n    drawModifiers() {\r\n        const ctx = this.checkContext();\r\n        ctx.openGroup('modifiers');\r\n        for (let i = 0; i < this.modifiers.length; i++) {\r\n            const modifier = this.modifiers[i];\r\n            const index = modifier.checkIndex();\r\n            const notehead = this._noteHeads[index];\r\n            const noteheadStyle = notehead.getStyle();\r\n            notehead.applyStyle(ctx, noteheadStyle);\r\n            modifier.setContext(ctx);\r\n            modifier.drawWithStyle();\r\n            notehead.restoreStyle(ctx, noteheadStyle);\r\n        }\r\n        ctx.closeGroup();\r\n    }\r\n    shouldDrawFlag() {\r\n        const hasStem = this.stem !== undefined;\r\n        const hasFlag = this.glyph.flag; // specified in tables.js\r\n        const hasNoBeam = this.beam === undefined;\r\n        return hasStem && hasFlag && hasNoBeam;\r\n    }\r\n    // Draw the flag for the note\r\n    drawFlag() {\r\n        var _a, _b, _c, _d, _e;\r\n        const ctx = this.checkContext();\r\n        if (!ctx) {\r\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\r\n        }\r\n        if (this.shouldDrawFlag()) {\r\n            const { y_top, y_bottom } = this.getNoteHeadBounds();\r\n            // eslint-disable-next-line\r\n            const noteStemHeight = this.stem.getHeight();\r\n            const flagX = this.getStemX();\r\n            // What's with the magic +/- 2\r\n            // ANSWER: a corner of the note stem pokes out beyond the tip of the flag.\r\n            // The extra +/- 2 pushes the flag glyph outward so it covers the stem entirely.\r\n            // Alternatively, we could shorten the stem.\r\n            const flagY = this.getStemDirection() === Stem.DOWN\r\n                ? // Down stems are below the note head and have flags on the right.\r\n                    y_top -\r\n                        noteStemHeight +\r\n                        2 -\r\n                        (this.glyph ? this.glyph.stem_down_extension : 0) * this.getStaveNoteScale() -\r\n                        ((_b = (_a = this.flag) === null || _a === void 0 ? void 0 : _a.getMetrics().y_shift) !== null && _b !== void 0 ? _b : 0) * (1 - this.getStaveNoteScale())\r\n                : // Up stems are above the note head and have flags on the right.\r\n                    y_bottom -\r\n                        noteStemHeight -\r\n                        2 +\r\n                        (this.glyph ? this.glyph.stem_up_extension : 0) * this.getStaveNoteScale() -\r\n                        ((_d = (_c = this.flag) === null || _c === void 0 ? void 0 : _c.getMetrics().y_shift) !== null && _d !== void 0 ? _d : 0) * (1 - this.getStaveNoteScale());\r\n            // Draw the Flag\r\n            ctx.openGroup('flag', undefined, { pointerBBox: true });\r\n            this.applyStyle(ctx, this.getFlagStyle());\r\n            (_e = this.flag) === null || _e === void 0 ? void 0 : _e.render(ctx, flagX, flagY);\r\n            this.restoreStyle(ctx, this.getFlagStyle());\r\n            ctx.closeGroup();\r\n        }\r\n    }\r\n    // Draw the NoteHeads\r\n    drawNoteHeads() {\r\n        const ctx = this.checkContext();\r\n        this._noteHeads.forEach((notehead) => {\r\n            ctx.openGroup('notehead', undefined, { pointerBBox: true });\r\n            notehead.setContext(ctx).draw();\r\n            ctx.closeGroup();\r\n        });\r\n    }\r\n    drawStem(stemOptions) {\r\n        // GCR TODO: I can't find any context in which this is called with the stemStruct\r\n        // argument in the codebase or tests. Nor can I find a case where super.drawStem\r\n        // is called at all. Perhaps these should be removed?\r\n        const ctx = this.checkContext();\r\n        if (stemOptions) {\r\n            this.setStem(new Stem(stemOptions));\r\n        }\r\n        // If we will render a flag, we shorten the stem so that the tip\r\n        // does not poke through the flag.\r\n        if (this.shouldDrawFlag() && this.stem) {\r\n            this.stem.adjustHeightForFlag();\r\n        }\r\n        if (this.stem) {\r\n            ctx.openGroup('stem', undefined, { pointerBBox: true });\r\n            this.stem.setContext(ctx).draw();\r\n            ctx.closeGroup();\r\n        }\r\n    }\r\n    /** Primarily used as the scaling factor for grace notes, GraceNote will return the required scale. */\r\n    getStaveNoteScale() {\r\n        return 1.0;\r\n    }\r\n    /**\r\n     * Override stemmablenote stem extension to adjust for distance from middle line.\r\n     */\r\n    getStemExtension() {\r\n        const super_stem_extension = super.getStemExtension();\r\n        if (!this.glyph.stem) {\r\n            return super_stem_extension;\r\n        }\r\n        const stem_direction = this.getStemDirection();\r\n        if (stem_direction !== this.calculateOptimalStemDirection()) {\r\n            return super_stem_extension; // no adjustment for manually set stem direction.\r\n        }\r\n        let mid_line_distance;\r\n        const MIDDLE_LINE = 3;\r\n        if (stem_direction === Stem.UP) {\r\n            // Note that the use of maxLine here instead of minLine might\r\n            // seem counterintuitive, but in the case of (say) treble clef\r\n            // chord(F2, E4) stem up, we do not want to extend the stem because\r\n            // of F2, when a normal octave-length stem above E4 is fine.\r\n            //\r\n            // maxLine and minLine are set in calculateOptimalStemDirection() so\r\n            // will be known.\r\n            mid_line_distance = MIDDLE_LINE - this.maxLine;\r\n        }\r\n        else {\r\n            mid_line_distance = this.minLine - MIDDLE_LINE;\r\n        }\r\n        // how many lines more than an octave is the relevant notehead?\r\n        const lines_over_octave_from_mid_line = mid_line_distance - 3.5;\r\n        if (lines_over_octave_from_mid_line <= 0) {\r\n            return super_stem_extension;\r\n        }\r\n        const stave = this.getStave();\r\n        let spacing_between_lines = 10;\r\n        if (stave != undefined) {\r\n            spacing_between_lines = stave.getSpacingBetweenLines();\r\n        }\r\n        return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;\r\n    }\r\n    // Draws all the `StaveNote` parts. This is the main drawing method.\r\n    draw() {\r\n        if (this.render_options.draw === false)\r\n            return;\r\n        if (this.ys.length === 0) {\r\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\r\n        }\r\n        const ctx = this.checkContext();\r\n        const xBegin = this.getNoteHeadBeginX();\r\n        const shouldRenderStem = this.hasStem() && !this.beam;\r\n        // Format note head x positions\r\n        this._noteHeads.forEach((notehead) => notehead.setX(xBegin));\r\n        if (this.stem) {\r\n            // Format stem x positions\r\n            const stemX = this.getStemX();\r\n            this.stem.setNoteHeadXBounds(stemX, stemX);\r\n        }\r\n        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\r\n        // Apply the overall style -- may be contradicted by local settings:\r\n        this.applyStyle();\r\n        this.setAttribute('el', ctx.openGroup('stavenote', this.getAttribute('id')));\r\n        this.drawLedgerLines();\r\n        ctx.openGroup('note', undefined, { pointerBBox: true });\r\n        if (shouldRenderStem)\r\n            this.drawStem();\r\n        this.drawNoteHeads();\r\n        this.drawFlag();\r\n        ctx.closeGroup();\r\n        this.drawModifiers();\r\n        ctx.closeGroup();\r\n        this.restoreStyle();\r\n        this.setRendered();\r\n    }\r\n}\r\nStaveNote.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author Larry Kuhns 2011\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Glyph } from './glyph';\r\nimport { StaveModifier } from './stavemodifier';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nexport class Repetition extends StaveModifier {\r\n    constructor(type, x, y_shift) {\r\n        super();\r\n        this.symbol_type = type;\r\n        this.x = x;\r\n        this.x_shift = 0;\r\n        this.y_shift = y_shift;\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Repetition;\r\n    }\r\n    setShiftX(x) {\r\n        this.x_shift = x;\r\n        return this;\r\n    }\r\n    setShiftY(y) {\r\n        this.y_shift = y;\r\n        return this;\r\n    }\r\n    draw(stave, x) {\r\n        this.setRendered();\r\n        switch (this.symbol_type) {\r\n            case Repetition.type.CODA_RIGHT:\r\n                this.drawCodaFixed(stave, x + stave.getWidth());\r\n                break;\r\n            case Repetition.type.CODA_LEFT:\r\n                this.drawSymbolText(stave, x, 'Coda', true);\r\n                break;\r\n            case Repetition.type.SEGNO_LEFT:\r\n                this.drawSignoFixed(stave, x);\r\n                break;\r\n            case Repetition.type.SEGNO_RIGHT:\r\n                this.drawSignoFixed(stave, x + stave.getWidth());\r\n                break;\r\n            case Repetition.type.DC:\r\n                this.drawSymbolText(stave, x, 'D.C.', false);\r\n                break;\r\n            case Repetition.type.DC_AL_CODA:\r\n                this.drawSymbolText(stave, x, 'D.C. al', true);\r\n                break;\r\n            case Repetition.type.DC_AL_FINE:\r\n                this.drawSymbolText(stave, x, 'D.C. al Fine', false);\r\n                break;\r\n            case Repetition.type.DS:\r\n                this.drawSymbolText(stave, x, 'D.S.', false);\r\n                break;\r\n            case Repetition.type.DS_AL_CODA:\r\n                this.drawSymbolText(stave, x, 'D.S. al', true);\r\n                break;\r\n            case Repetition.type.DS_AL_FINE:\r\n                this.drawSymbolText(stave, x, 'D.S. al Fine', false);\r\n                break;\r\n            case Repetition.type.FINE:\r\n                this.drawSymbolText(stave, x, 'Fine', false);\r\n                break;\r\n            case Repetition.type.TO_CODA:\r\n                this.drawSymbolText(stave, x, 'To', true);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return this;\r\n    }\r\n    drawCodaFixed(stave, x) {\r\n        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\r\n        Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + Tables.currentMusicFont().lookupMetric('staveRepetition.coda.offsetY'), 40, 'coda', { category: 'coda' });\r\n        return this;\r\n    }\r\n    drawSignoFixed(stave, x) {\r\n        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\r\n        Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + Tables.currentMusicFont().lookupMetric('staveRepetition.segno.offsetY'), 30, 'segno', { category: 'segno' });\r\n        return this;\r\n    }\r\n    drawSymbolText(stave, x, text, draw_coda) {\r\n        const ctx = stave.checkContext();\r\n        ctx.save();\r\n        ctx.setFont(this.textFont);\r\n        let text_x = 0;\r\n        let symbol_x = 0;\r\n        const modifierWidth = stave.getNoteStartX() - this.x;\r\n        switch (this.symbol_type) {\r\n            // To the left with symbol\r\n            case Repetition.type.CODA_LEFT:\r\n                // Offset Coda text to right of stave beginning\r\n                text_x = this.x + stave.getVerticalBarWidth();\r\n                symbol_x =\r\n                    text_x +\r\n                        ctx.measureText(text).width +\r\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');\r\n                break;\r\n            // To the right without symbol\r\n            case Repetition.type.DC:\r\n            case Repetition.type.DC_AL_FINE:\r\n            case Repetition.type.DS:\r\n            case Repetition.type.DS_AL_FINE:\r\n            case Repetition.type.FINE:\r\n                text_x =\r\n                    this.x +\r\n                        x +\r\n                        this.x_shift +\r\n                        stave.getWidth() -\r\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.spacing') -\r\n                        modifierWidth -\r\n                        ctx.measureText(text).width;\r\n                break;\r\n            // To the right with symbol\r\n            default:\r\n                text_x =\r\n                    this.x +\r\n                        x +\r\n                        this.x_shift +\r\n                        stave.getWidth() -\r\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.spacing') -\r\n                        modifierWidth -\r\n                        ctx.measureText(text).width -\r\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');\r\n                symbol_x =\r\n                    text_x +\r\n                        ctx.measureText(text).width +\r\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');\r\n                break;\r\n        }\r\n        const y = stave.getYForTopText(stave.getNumLines()) +\r\n            this.y_shift +\r\n            Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetY');\r\n        if (draw_coda) {\r\n            Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\r\n        }\r\n        ctx.fillText(text, text_x, y + 5);\r\n        ctx.restore();\r\n        return this;\r\n    }\r\n}\r\nRepetition.TEXT_FONT = {\r\n    family: Font.SERIF,\r\n    size: 12,\r\n    weight: FontWeight.BOLD,\r\n    style: FontStyle.NORMAL,\r\n};\r\nRepetition.type = {\r\n    NONE: 1,\r\n    CODA_LEFT: 2,\r\n    CODA_RIGHT: 3,\r\n    SEGNO_LEFT: 4,\r\n    SEGNO_RIGHT: 5,\r\n    DC: 6,\r\n    DC_AL_CODA: 7,\r\n    DC_AL_FINE: 8,\r\n    DS: 9,\r\n    DS_AL_CODA: 10,\r\n    DS_AL_FINE: 11,\r\n    FINE: 12,\r\n    TO_CODA: 13, // To Coda at end of stave\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author Larry Kuhns 2011\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { StaveModifier } from './stavemodifier';\r\nimport { Category } from './typeguard';\r\nexport class StaveSection extends StaveModifier {\r\n    constructor(section, x, shift_y, drawRect = true) {\r\n        super();\r\n        this.setWidth(16);\r\n        this.section = section;\r\n        this.x = x;\r\n        this.shift_x = 0;\r\n        this.shift_y = shift_y;\r\n        this.drawRect = drawRect;\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StaveSection;\r\n    }\r\n    setStaveSection(section) {\r\n        this.section = section;\r\n        return this;\r\n    }\r\n    setShiftX(x) {\r\n        this.shift_x = x;\r\n        return this;\r\n    }\r\n    setShiftY(y) {\r\n        this.shift_y = y;\r\n        return this;\r\n    }\r\n    draw(stave, shift_x) {\r\n        const ctx = stave.checkContext();\r\n        this.setRendered();\r\n        ctx.save();\r\n        ctx.setLineWidth(2);\r\n        ctx.setFont(this.textFont);\r\n        const paddingX = 2;\r\n        const paddingY = 2;\r\n        const rectWidth = 2;\r\n        const textMeasurements = ctx.measureText(this.section);\r\n        const textWidth = textMeasurements.width;\r\n        const textHeight = textMeasurements.height;\r\n        const width = textWidth + 2 * paddingX; // add left & right padding\r\n        const height = textHeight + 2 * paddingY; // add top & bottom padding\r\n        //  Seems to be a good default y\r\n        const y = stave.getYForTopText(1.5) + this.shift_y;\r\n        const x = this.x + shift_x;\r\n        if (this.drawRect) {\r\n            ctx.beginPath();\r\n            ctx.setLineWidth(rectWidth);\r\n            ctx.rect(x, y + textMeasurements.y - paddingY, width, height);\r\n            ctx.stroke();\r\n        }\r\n        ctx.fillText(this.section, x + paddingX, y);\r\n        ctx.restore();\r\n        return this;\r\n    }\r\n}\r\nStaveSection.TEXT_FONT = {\r\n    family: Font.SANS_SERIF,\r\n    size: 10,\r\n    weight: FontWeight.BOLD,\r\n    style: FontStyle.NORMAL,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author Radosaw Eichler 2012\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Glyph } from './glyph';\r\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nexport class StaveTempo extends StaveModifier {\r\n    constructor(tempo, x, shift_y) {\r\n        super();\r\n        /** Font size for note. */\r\n        this.render_options = { glyph_font_scale: 30 };\r\n        this.tempo = tempo;\r\n        this.position = StaveModifierPosition.ABOVE;\r\n        this.x = x;\r\n        this.shift_x = 10;\r\n        this.shift_y = shift_y;\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StaveTempo;\r\n    }\r\n    setTempo(tempo) {\r\n        this.tempo = tempo;\r\n        return this;\r\n    }\r\n    setShiftX(x) {\r\n        this.shift_x = x;\r\n        return this;\r\n    }\r\n    setShiftY(y) {\r\n        this.shift_y = y;\r\n        return this;\r\n    }\r\n    draw(stave, shift_x) {\r\n        const ctx = stave.checkContext();\r\n        this.setRendered();\r\n        const options = this.render_options;\r\n        // FIXME: What does the '38' mean? Why 38? Is that supposed to\r\n        // be the default font size for standard notation?\r\n        const scale = options.glyph_font_scale / 38;\r\n        const name = this.tempo.name;\r\n        const duration = this.tempo.duration;\r\n        const dots = this.tempo.dots || 0;\r\n        const bpm = this.tempo.bpm;\r\n        let x = this.x + this.shift_x + shift_x;\r\n        const y = stave.getYForTopText(1) + this.shift_y;\r\n        ctx.save();\r\n        if (name) {\r\n            ctx.setFont(this.textFont);\r\n            ctx.fillText(name, x, y);\r\n            x += ctx.measureText(name).width;\r\n        }\r\n        if (duration && bpm) {\r\n            // Override the weight and style.\r\n            ctx.setFont(Object.assign(Object.assign({}, this.textFont), { weight: 'normal', style: 'normal' }));\r\n            if (name) {\r\n                x += ctx.measureText(' ').width;\r\n                ctx.fillText('(', x, y);\r\n                x += ctx.measureText('(').width;\r\n            }\r\n            const code = Tables.getGlyphProps(duration);\r\n            x += 3 * scale;\r\n            Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\r\n            x += code.getWidth() * scale;\r\n            // Draw stem and flags\r\n            if (code.stem) {\r\n                let stem_height = 30;\r\n                if (code.beam_count)\r\n                    stem_height += 3 * (code.beam_count - 1);\r\n                stem_height *= scale;\r\n                const y_top = y - stem_height;\r\n                ctx.fillRect(x - scale, y_top, scale, stem_height);\r\n                if (code.flag) {\r\n                    Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem, {\r\n                        category: 'flag.staveTempo',\r\n                    });\r\n                    if (!dots)\r\n                        x += 6 * scale;\r\n                }\r\n            }\r\n            // Draw dot\r\n            for (let i = 0; i < dots; i++) {\r\n                x += 6 * scale;\r\n                ctx.beginPath();\r\n                ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\r\n                ctx.fill();\r\n            }\r\n            ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\r\n        }\r\n        ctx.restore();\r\n        return this;\r\n    }\r\n}\r\nStaveTempo.TEXT_FONT = {\r\n    family: Font.SERIF,\r\n    size: 14,\r\n    weight: FontWeight.BOLD,\r\n    style: FontStyle.NORMAL,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author Taehoon Moon 2014\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\r\nimport { TextJustification, TextNote } from './textnote';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class StaveText extends StaveModifier {\r\n    constructor(text, position, options = {}) {\r\n        super();\r\n        this.setWidth(16);\r\n        this.text = text;\r\n        this.position = position;\r\n        this.options = Object.assign({ shift_x: 0, shift_y: 0, justification: TextNote.Justification.CENTER }, options);\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StaveText;\r\n    }\r\n    setStaveText(text) {\r\n        this.text = text;\r\n        return this;\r\n    }\r\n    setShiftX(x) {\r\n        this.shift_x = x;\r\n        return this;\r\n    }\r\n    setShiftY(y) {\r\n        this.shift_y = y;\r\n        return this;\r\n    }\r\n    setText(text) {\r\n        this.text = text;\r\n        return this;\r\n    }\r\n    draw(stave) {\r\n        const ctx = stave.checkContext();\r\n        this.setRendered();\r\n        ctx.save();\r\n        ctx.setLineWidth(2);\r\n        ctx.setFont(this.textFont);\r\n        const text_width = ctx.measureText('' + this.text).width;\r\n        let x;\r\n        let y;\r\n        switch (this.position) {\r\n            case StaveModifierPosition.LEFT:\r\n            case StaveModifierPosition.RIGHT:\r\n                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\r\n                if (this.position === StaveModifierPosition.LEFT) {\r\n                    x = stave.getX() - text_width - 24 + this.options.shift_x;\r\n                }\r\n                else {\r\n                    x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\r\n                }\r\n                break;\r\n            case StaveModifierPosition.ABOVE:\r\n            case StaveModifierPosition.BELOW:\r\n                x = stave.getX() + this.options.shift_x;\r\n                if (this.options.justification === TextJustification.CENTER) {\r\n                    x += stave.getWidth() / 2 - text_width / 2;\r\n                }\r\n                else if (this.options.justification === TextJustification.RIGHT) {\r\n                    x += stave.getWidth() - text_width;\r\n                }\r\n                if (this.position === StaveModifierPosition.ABOVE) {\r\n                    y = stave.getYForTopText(2) + this.options.shift_y;\r\n                }\r\n                else {\r\n                    y = stave.getYForBottomText(2) + this.options.shift_y;\r\n                }\r\n                break;\r\n            default:\r\n                throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\r\n        }\r\n        ctx.fillText('' + this.text, x, y + 4);\r\n        ctx.restore();\r\n        return this;\r\n    }\r\n}\r\nStaveText.TEXT_FONT = {\r\n    family: Font.SERIF,\r\n    size: 16,\r\n    weight: FontWeight.NORMAL,\r\n    style: FontStyle.NORMAL,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// This class implements varies types of ties between contiguous notes. The\r\n// ties include: regular ties, hammer ons, pull offs, and slides.\r\nimport { Element } from './element';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class StaveTie extends Element {\r\n    /**\r\n     * @param notes is a struct that has:\r\n     *\r\n     *  {\r\n     *    first_note: Note,\r\n     *    last_note: Note,\r\n     *    first_indices: [n1, n2, n3],\r\n     *    last_indices: [n1, n2, n3]\r\n     *  }\r\n     *\r\n     * @param text\r\n     */\r\n    constructor(notes, text) {\r\n        super();\r\n        this.setNotes(notes);\r\n        this.text = text;\r\n        this.render_options = {\r\n            cp1: 8,\r\n            cp2: 12,\r\n            text_shift_x: 0,\r\n            first_x_shift: 0,\r\n            last_x_shift: 0,\r\n            y_shift: 7,\r\n            tie_spacing: 0,\r\n        };\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StaveTie;\r\n    }\r\n    setDirection(direction) {\r\n        this.direction = direction;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the notes to attach this tie to.\r\n     *\r\n     * @param {!Object} notes The notes to tie up.\r\n     */\r\n    setNotes(notes) {\r\n        if (!notes.first_note && !notes.last_note) {\r\n            throw new RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\r\n        }\r\n        if (!notes.first_indices) {\r\n            notes.first_indices = [0];\r\n        }\r\n        if (!notes.last_indices) {\r\n            notes.last_indices = [0];\r\n        }\r\n        if (notes.first_indices.length !== notes.last_indices.length) {\r\n            throw new RuntimeError('BadArguments', 'Tied notes must have same number of indices.');\r\n        }\r\n        this.notes = notes;\r\n        return this;\r\n    }\r\n    /**\r\n     * @return {boolean} Returns true if this is a partial bar.\r\n     */\r\n    isPartial() {\r\n        return !this.notes.first_note || !this.notes.last_note;\r\n    }\r\n    renderTie(params) {\r\n        if (params.first_ys.length === 0 || params.last_ys.length === 0) {\r\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\r\n        }\r\n        const ctx = this.checkContext();\r\n        let cp1 = this.render_options.cp1;\r\n        let cp2 = this.render_options.cp2;\r\n        if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\r\n            cp1 = 2;\r\n            cp2 = 8;\r\n        }\r\n        const first_x_shift = this.render_options.first_x_shift;\r\n        const last_x_shift = this.render_options.last_x_shift;\r\n        const y_shift = this.render_options.y_shift * params.direction;\r\n        // setNotes(...) verified that first_indices and last_indices are not undefined.\r\n        // As a result, we use the ! non-null assertion operator here.\r\n        // eslint-disable-next-line\r\n        const first_indices = this.notes.first_indices;\r\n        // eslint-disable-next-line\r\n        const last_indices = this.notes.last_indices;\r\n        for (let i = 0; i < first_indices.length; ++i) {\r\n            const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\r\n            const first_y_px = params.first_ys[first_indices[i]] + y_shift;\r\n            const last_y_px = params.last_ys[last_indices[i]] + y_shift;\r\n            if (isNaN(first_y_px) || isNaN(last_y_px)) {\r\n                throw new RuntimeError('BadArguments', 'Bad indices for tie rendering.');\r\n            }\r\n            const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\r\n            const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\r\n            // id probably unnecessary if we save the group to 'el' via setAttribute\r\n            // let id: string = \"\";\r\n            // if (this.notes.first_note) {\r\n            //   id = this.notes.first_note.getAttribute('id') + '-tie';\r\n            // }\r\n            // this.setAttribute('el', ctx.openGroup('stavetie', id));\r\n            this.setAttribute('el', ctx.openGroup('stavetie'));\r\n            ctx.beginPath();\r\n            ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\r\n            ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\r\n            ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            ctx.closeGroup();\r\n        }\r\n    }\r\n    renderText(first_x_px, last_x_px) {\r\n        var _a, _b, _c;\r\n        if (!this.text)\r\n            return;\r\n        const ctx = this.checkContext();\r\n        let center_x = (first_x_px + last_x_px) / 2;\r\n        center_x -= ctx.measureText(this.text).width / 2;\r\n        const stave = (_b = (_a = this.notes.first_note) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.last_note) === null || _c === void 0 ? void 0 : _c.checkStave();\r\n        if (stave) {\r\n            ctx.save();\r\n            ctx.setFont(this.textFont);\r\n            ctx.fillText(this.text, center_x + this.render_options.text_shift_x, stave.getYForTopText() - 1);\r\n            ctx.restore();\r\n        }\r\n    }\r\n    draw() {\r\n        this.checkContext();\r\n        this.setRendered();\r\n        const first_note = this.notes.first_note;\r\n        const last_note = this.notes.last_note;\r\n        // Provide some default values so the compiler doesn't complain.\r\n        let first_x_px = 0;\r\n        let last_x_px = 0;\r\n        let first_ys = [0];\r\n        let last_ys = [0];\r\n        let stem_direction = 0;\r\n        if (first_note) {\r\n            first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\r\n            stem_direction = first_note.getStemDirection();\r\n            first_ys = first_note.getYs();\r\n        }\r\n        else if (last_note) {\r\n            const stave = last_note.checkStave();\r\n            first_x_px = stave.getTieStartX();\r\n            first_ys = last_note.getYs();\r\n            this.notes.first_indices = this.notes.last_indices;\r\n        }\r\n        if (last_note) {\r\n            last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\r\n            stem_direction = last_note.getStemDirection();\r\n            last_ys = last_note.getYs();\r\n        }\r\n        else if (first_note) {\r\n            const stave = first_note.checkStave();\r\n            last_x_px = stave.getTieEndX();\r\n            last_ys = first_note.getYs();\r\n            this.notes.last_indices = this.notes.first_indices;\r\n        }\r\n        if (this.direction) {\r\n            stem_direction = this.direction;\r\n        }\r\n        this.renderTie({\r\n            first_x_px,\r\n            last_x_px,\r\n            first_ys,\r\n            last_ys,\r\n            direction: stem_direction,\r\n        });\r\n        this.renderText(first_x_px, last_x_px);\r\n        return true;\r\n    }\r\n}\r\n/** Default text font. */\r\nStaveTie.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author Larry Kuhns 2011\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { StaveModifier } from './stavemodifier';\r\nimport { Category } from './typeguard';\r\nexport var VoltaType;\r\n(function (VoltaType) {\r\n    VoltaType[VoltaType[\"NONE\"] = 1] = \"NONE\";\r\n    VoltaType[VoltaType[\"BEGIN\"] = 2] = \"BEGIN\";\r\n    VoltaType[VoltaType[\"MID\"] = 3] = \"MID\";\r\n    VoltaType[VoltaType[\"END\"] = 4] = \"END\";\r\n    VoltaType[VoltaType[\"BEGIN_END\"] = 5] = \"BEGIN_END\";\r\n})(VoltaType || (VoltaType = {}));\r\nexport class Volta extends StaveModifier {\r\n    constructor(type, number, x, y_shift) {\r\n        super();\r\n        this.volta = type;\r\n        this.x = x;\r\n        this.y_shift = y_shift;\r\n        this.number = number;\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Volta;\r\n    }\r\n    static get type() {\r\n        return VoltaType;\r\n    }\r\n    setShiftY(y) {\r\n        this.y_shift = y;\r\n        return this;\r\n    }\r\n    draw(stave, x) {\r\n        const ctx = stave.checkContext();\r\n        this.setRendered();\r\n        let width = stave.getWidth() - x; // don't include x (offset) for width\r\n        const top_y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\r\n        const vert_height = 1.5 * stave.getSpacingBetweenLines();\r\n        switch (this.volta) {\r\n            case VoltaType.BEGIN:\r\n                ctx.fillRect(this.x + x, top_y, 1, vert_height);\r\n                break;\r\n            case VoltaType.END:\r\n                width -= 5;\r\n                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\r\n                break;\r\n            case VoltaType.BEGIN_END:\r\n                width -= 3;\r\n                ctx.fillRect(this.x + x, top_y, 1, vert_height);\r\n                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // If the beginning of a volta, draw measure number\r\n        if (this.volta === VoltaType.BEGIN || this.volta === VoltaType.BEGIN_END) {\r\n            ctx.save();\r\n            ctx.setFont(this.textFont);\r\n            ctx.fillText(this.number, this.x + x + 5, top_y + 15);\r\n            ctx.restore();\r\n        }\r\n        ctx.fillRect(this.x + x, top_y, width, 1);\r\n        return this;\r\n    }\r\n}\r\nVolta.TEXT_FONT = {\r\n    family: Font.SANS_SERIF,\r\n    size: 9,\r\n    weight: FontWeight.BOLD,\r\n    style: FontStyle.NORMAL,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n// This file implements the `Stem` object. Generally this object is handled\r\n// by its parent `StemmableNote`.\r\nimport { Element } from './element';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { log, RuntimeError } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (Stem.DEBUG)\r\n        log('Vex.Flow.Stem', args);\r\n}\r\nexport class Stem extends Element {\r\n    constructor(options) {\r\n        super();\r\n        this.stem_up_y_offset = 0;\r\n        this.stem_down_y_offset = 0;\r\n        this.stem_up_y_base_offset = 0;\r\n        this.stem_down_y_base_offset = 0;\r\n        // Default notehead x bounds\r\n        this.x_begin = (options === null || options === void 0 ? void 0 : options.x_begin) || 0;\r\n        this.x_end = (options === null || options === void 0 ? void 0 : options.x_end) || 0;\r\n        // Y bounds for top/bottom most notehead\r\n        this.y_top = (options === null || options === void 0 ? void 0 : options.y_top) || 0;\r\n        this.y_bottom = (options === null || options === void 0 ? void 0 : options.y_bottom) || 0;\r\n        // Stem top extension\r\n        this.stem_extension = (options === null || options === void 0 ? void 0 : options.stem_extension) || 0;\r\n        // Direction of the stem\r\n        this.stem_direction = (options === null || options === void 0 ? void 0 : options.stem_direction) || 0;\r\n        // Flag to override all draw calls\r\n        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;\r\n        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;\r\n        this.stemletHeight = (options === null || options === void 0 ? void 0 : options.stemletHeight) || 0;\r\n        // Use to adjust the rendered height without affecting\r\n        // the results of `.getExtents()`\r\n        this.renderHeightAdjustment = 0;\r\n        this.setOptions(options);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Stem;\r\n    }\r\n    // Stem directions\r\n    static get UP() {\r\n        return 1;\r\n    }\r\n    static get DOWN() {\r\n        return -1;\r\n    }\r\n    // Theme\r\n    static get WIDTH() {\r\n        return Tables.STEM_WIDTH;\r\n    }\r\n    static get HEIGHT() {\r\n        return Tables.STEM_HEIGHT;\r\n    }\r\n    setOptions(options) {\r\n        // Changing where the stem meets the head\r\n        this.stem_up_y_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_offset) || 0;\r\n        this.stem_down_y_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_offset) || 0;\r\n        this.stem_up_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_base_offset) || 0;\r\n        this.stem_down_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_base_offset) || 0;\r\n    }\r\n    // Set the x bounds for the default notehead\r\n    setNoteHeadXBounds(x_begin, x_end) {\r\n        this.x_begin = x_begin;\r\n        this.x_end = x_end;\r\n        return this;\r\n    }\r\n    // Set the direction of the stem in relation to the noteheads\r\n    setDirection(direction) {\r\n        this.stem_direction = direction;\r\n    }\r\n    // Set the extension for the stem, generally for flags or beams\r\n    setExtension(ext) {\r\n        this.stem_extension = ext;\r\n    }\r\n    getExtension() {\r\n        return this.stem_extension;\r\n    }\r\n    // The the y bounds for the top and bottom noteheads\r\n    setYBounds(y_top, y_bottom) {\r\n        this.y_top = y_top;\r\n        this.y_bottom = y_bottom;\r\n    }\r\n    // Gets the entire height for the stem\r\n    getHeight() {\r\n        const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;\r\n        const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension); // parentheses just for grouping.\r\n        return unsigned_height * this.stem_direction;\r\n    }\r\n    getBoundingBox() {\r\n        throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\r\n    }\r\n    // Get the y coordinates for the very base of the stem to the top of\r\n    // the extension\r\n    getExtents() {\r\n        const isStemUp = this.stem_direction === Stem.UP;\r\n        const ys = [this.y_top, this.y_bottom];\r\n        const stemHeight = Stem.HEIGHT + this.stem_extension;\r\n        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\r\n        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\r\n        const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\r\n        return { topY: stemTipY, baseY: outerMostNoteheadY };\r\n    }\r\n    setVisibility(isVisible) {\r\n        this.hide = !isVisible;\r\n        return this;\r\n    }\r\n    setStemlet(isStemlet, stemletHeight) {\r\n        this.isStemlet = isStemlet;\r\n        this.stemletHeight = stemletHeight;\r\n        return this;\r\n    }\r\n    adjustHeightForFlag() {\r\n        this.renderHeightAdjustment = Tables.currentMusicFont().lookupMetric('stem.heightAdjustmentForFlag', -3);\r\n    }\r\n    adjustHeightForBeam() {\r\n        this.renderHeightAdjustment = -Stem.WIDTH / 2;\r\n    }\r\n    // Render the stem onto the canvas\r\n    draw() {\r\n        this.setRendered();\r\n        if (this.hide)\r\n            return;\r\n        const ctx = this.checkContext();\r\n        let stem_x;\r\n        let stem_y;\r\n        const stem_direction = this.stem_direction;\r\n        let y_base_offset = 0;\r\n        if (stem_direction === Stem.DOWN) {\r\n            // Down stems are rendered to the left of the head.\r\n            stem_x = this.x_begin;\r\n            stem_y = this.y_top + this.stem_down_y_offset;\r\n            y_base_offset = this.stem_down_y_base_offset;\r\n        }\r\n        else {\r\n            // Up stems are rendered to the right of the head.\r\n            stem_x = this.x_end;\r\n            stem_y = this.y_bottom - this.stem_up_y_offset;\r\n            y_base_offset = this.stem_up_y_base_offset;\r\n        }\r\n        const stemHeight = this.getHeight();\r\n        L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\r\n        // The offset from the stem's base which is required fo satisfy the stemlet height\r\n        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\r\n        // Draw the stem\r\n        ctx.save();\r\n        this.applyStyle(ctx);\r\n        ctx.beginPath();\r\n        ctx.setLineWidth(Stem.WIDTH);\r\n        ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\r\n        ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\r\n        ctx.stroke();\r\n        this.restoreStyle(ctx);\r\n        ctx.restore();\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`. */\r\nStem.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n// `StemmableNote` is an abstract interface for notes with optional stems.\r\n// Examples of stemmable notes are `StaveNote` and `TabNote`\r\nimport { Glyph } from './glyph';\r\nimport { Note } from './note';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class StemmableNote extends Note {\r\n    constructor(noteStruct) {\r\n        super(noteStruct);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StemmableNote;\r\n    }\r\n    // Get and set the note's `Stem`\r\n    getStem() {\r\n        return this.stem;\r\n    }\r\n    checkStem() {\r\n        if (!this.stem) {\r\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\r\n        }\r\n        return this.stem;\r\n    }\r\n    setStem(stem) {\r\n        this.stem = stem;\r\n        this.addChildElement(stem);\r\n        return this;\r\n    }\r\n    // Builds and sets a new stem\r\n    buildStem() {\r\n        const stem = new Stem();\r\n        this.setStem(stem);\r\n        return this;\r\n    }\r\n    buildFlag(category = 'flag') {\r\n        const { glyph } = this;\r\n        if (this.hasFlag()) {\r\n            const flagCode = this.getStemDirection() === Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;\r\n            this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\r\n        }\r\n    }\r\n    // Get the custom glyph associated with the outer note head on the base of the stem.\r\n    getBaseCustomNoteHeadGlyph() {\r\n        if (this.getStemDirection() === Stem.DOWN) {\r\n            return this.customGlyphs[this.customGlyphs.length - 1];\r\n        }\r\n        else {\r\n            return this.customGlyphs[0];\r\n        }\r\n    }\r\n    // Get the full length of stem\r\n    getStemLength() {\r\n        return Stem.HEIGHT + this.getStemExtension();\r\n    }\r\n    // Get the number of beams for this duration\r\n    getBeamCount() {\r\n        const glyph = this.getGlyph();\r\n        if (glyph) {\r\n            return glyph.beam_count;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    // Get the minimum length of stem\r\n    getStemMinimumLength() {\r\n        const frac = Tables.durationToFraction(this.duration);\r\n        let length = frac.value() <= 1 ? 0 : 20;\r\n        // if note is flagged, cannot shorten beam\r\n        switch (this.duration) {\r\n            case '8':\r\n                if (this.beam == undefined)\r\n                    length = 35;\r\n                break;\r\n            case '16':\r\n                length = this.beam == undefined ? 35 : 25;\r\n                break;\r\n            case '32':\r\n                length = this.beam == undefined ? 45 : 35;\r\n                break;\r\n            case '64':\r\n                length = this.beam == undefined ? 50 : 40;\r\n                break;\r\n            case '128':\r\n                length = this.beam == undefined ? 55 : 45;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return length;\r\n    }\r\n    // Get/set the direction of the stem\r\n    getStemDirection() {\r\n        if (!this.stem_direction)\r\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\r\n        return this.stem_direction;\r\n    }\r\n    setStemDirection(direction) {\r\n        if (!direction)\r\n            direction = Stem.UP;\r\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\r\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\r\n        }\r\n        this.stem_direction = direction;\r\n        // Reset and reformat everything. Flag has to be built before calling getStemExtension.\r\n        this.reset();\r\n        if (this.hasFlag()) {\r\n            this.buildFlag();\r\n        }\r\n        this.beam = undefined;\r\n        if (this.stem) {\r\n            this.stem.setDirection(direction);\r\n            this.stem.setExtension(this.getStemExtension());\r\n            // Lookup the base custom notehead (closest to the base of the stem) to extend or shorten\r\n            // the stem appropriately. If there's no custom note head, lookup the standard notehead.\r\n            const glyph = this.getBaseCustomNoteHeadGlyph() || this.getGlyph();\r\n            // Get the font-specific customizations for the note heads.\r\n            const offsets = Tables.currentMusicFont().lookupMetric(`stem.noteHead.${glyph.code_head}`, {\r\n                offsetYBaseStemUp: 0,\r\n                offsetYTopStemUp: 0,\r\n                offsetYBaseStemDown: 0,\r\n                offsetYTopStemDown: 0,\r\n            });\r\n            // Configure the stem to use these offsets.\r\n            this.stem.setOptions({\r\n                stem_up_y_offset: offsets.offsetYTopStemUp,\r\n                stem_down_y_offset: offsets.offsetYTopStemDown,\r\n                stem_up_y_base_offset: offsets.offsetYBaseStemUp,\r\n                stem_down_y_base_offset: offsets.offsetYBaseStemDown, // glyph.stem_down_y_base_offset,\r\n            });\r\n        }\r\n        if (this.preFormatted) {\r\n            this.preFormat();\r\n        }\r\n        return this;\r\n    }\r\n    // Get the `x` coordinate of the stem\r\n    getStemX() {\r\n        const x_begin = this.getAbsoluteX() + this.x_shift;\r\n        const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\r\n        const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\r\n        return stem_x;\r\n    }\r\n    // Get the `x` coordinate for the center of the glyph.\r\n    // Used for `TabNote` stems and stemlets over rests\r\n    getCenterGlyphX() {\r\n        return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\r\n    }\r\n    // Get the stem extension for the current duration\r\n    getStemExtension() {\r\n        const glyph = this.getGlyph();\r\n        if (this.stem_extension_override != undefined) {\r\n            return this.stem_extension_override;\r\n        }\r\n        // Use stem_beam_extension with beams\r\n        if (this.beam) {\r\n            return glyph.stem_beam_extension;\r\n        }\r\n        if (glyph) {\r\n            return this.getStemDirection() === Stem.UP ? glyph.stem_up_extension : glyph.stem_down_extension;\r\n        }\r\n        return 0;\r\n    }\r\n    // Set the stem length to a specific. Will override the default length.\r\n    setStemLength(height) {\r\n        this.stem_extension_override = height - Stem.HEIGHT;\r\n        return this;\r\n    }\r\n    // Get the top and bottom `y` values of the stem.\r\n    getStemExtents() {\r\n        if (!this.stem)\r\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\r\n        return this.stem.getExtents();\r\n    }\r\n    /** Gets the `y` value for the top modifiers at a specific `textLine`. */\r\n    getYForTopText(textLine) {\r\n        const stave = this.checkStave();\r\n        if (this.hasStem()) {\r\n            const extents = this.getStemExtents();\r\n            if (!extents)\r\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\r\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\r\n        }\r\n        else {\r\n            return stave.getYForTopText(textLine);\r\n        }\r\n    }\r\n    /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\r\n    getYForBottomText(textLine) {\r\n        const stave = this.checkStave();\r\n        if (this.hasStem()) {\r\n            const extents = this.getStemExtents();\r\n            if (!extents)\r\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\r\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\r\n        }\r\n        else {\r\n            return stave.getYForBottomText(textLine);\r\n        }\r\n    }\r\n    hasFlag() {\r\n        return Tables.getGlyphProps(this.duration).flag && !this.beam;\r\n    }\r\n    /** Post formats the note. */\r\n    postFormat() {\r\n        var _a;\r\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\r\n        this.postFormatted = true;\r\n        return this;\r\n    }\r\n    /** Renders the stem onto the canvas. */\r\n    drawStem(stemOptions) {\r\n        var _a;\r\n        this.checkContext();\r\n        this.setRendered();\r\n        this.setStem(new Stem(stemOptions));\r\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Larry Kuhns\r\n//\r\n// This file implements the `StringNumber` class which renders string\r\n// number annotations beside notes.\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Modifier, ModifierPosition } from './modifier';\r\nimport { Renderer } from './renderer';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { Category, isStaveNote, isStemmableNote } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class StringNumber extends Modifier {\r\n    constructor(number) {\r\n        super();\r\n        this.string_number = number;\r\n        this.position = Modifier.Position.ABOVE; // Default position above stem or note head\r\n        this.x_shift = 0;\r\n        this.y_shift = 0;\r\n        this.text_line = 0;\r\n        this.stem_offset = 0;\r\n        this.x_offset = 0; // Horizontal offset from default\r\n        this.y_offset = 0; // Vertical offset from default\r\n        this.dashed = true; // true - draw dashed extension  false - no extension\r\n        this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\r\n        this.radius = 8;\r\n        this.drawCircle = true;\r\n        this.setWidth(this.radius * 2 + 4);\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.StringNumber;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static get metrics() {\r\n        return Tables.currentMusicFont().getMetrics().glyphs.stringNumber;\r\n    }\r\n    // ## Static Methods\r\n    // Arrange string numbers inside a `ModifierContext`\r\n    static format(nums, state) {\r\n        const left_shift = state.left_shift;\r\n        const right_shift = state.right_shift;\r\n        const num_spacing = 1;\r\n        if (!nums || nums.length === 0)\r\n            return false;\r\n        const nums_list = [];\r\n        let prev_note = null;\r\n        let shift_left = 0;\r\n        let shift_right = 0;\r\n        const modLines = 0;\r\n        for (let i = 0; i < nums.length; ++i) {\r\n            const num = nums[i];\r\n            const note = num.getNote();\r\n            const pos = num.getPosition();\r\n            if (!isStaveNote(note)) {\r\n                throw new RuntimeError('NoStaveNote');\r\n            }\r\n            const index = num.checkIndex();\r\n            const props = note.getKeyProps()[index];\r\n            const mc = note.getModifierContext();\r\n            const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;\r\n            if (mc) {\r\n                if (pos === ModifierPosition.ABOVE) {\r\n                    num.text_line = mc.getState().top_text_line;\r\n                    state.top_text_line += verticalSpaceNeeded;\r\n                }\r\n                else if (pos === ModifierPosition.BELOW) {\r\n                    num.text_line = mc.getState().text_line;\r\n                    state.text_line += verticalSpaceNeeded;\r\n                }\r\n            }\r\n            if (note !== prev_note) {\r\n                for (let n = 0; n < note.keys.length; ++n) {\r\n                    if (left_shift === 0) {\r\n                        shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);\r\n                    }\r\n                    if (right_shift === 0) {\r\n                        shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);\r\n                    }\r\n                }\r\n                prev_note = note;\r\n            }\r\n            const glyphLine = modLines === 0 ? props.line : modLines;\r\n            nums_list.push({\r\n                pos,\r\n                note,\r\n                num,\r\n                line: glyphLine,\r\n                shiftL: shift_left,\r\n                shiftR: shift_right,\r\n            });\r\n        }\r\n        // Sort string numbers by line number.\r\n        nums_list.sort((a, b) => b.line - a.line);\r\n        let num_shiftR = 0;\r\n        let x_widthL = 0;\r\n        let x_widthR = 0;\r\n        let last_line = null;\r\n        let last_note = null;\r\n        for (let i = 0; i < nums_list.length; ++i) {\r\n            let num_shift = 0;\r\n            const note = nums_list[i].note;\r\n            const pos = nums_list[i].pos;\r\n            const num = nums_list[i].num;\r\n            const line = nums_list[i].line;\r\n            const shiftR = nums_list[i].shiftR;\r\n            // Reset the position of the string number every line.\r\n            if (line !== last_line || note !== last_note) {\r\n                num_shiftR = right_shift + shiftR;\r\n            }\r\n            const num_width = num.getWidth() + num_spacing;\r\n            if (pos === Modifier.Position.LEFT) {\r\n                num.setXShift(left_shift);\r\n                num_shift = shift_left + num_width; // spacing\r\n                x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\r\n            }\r\n            else if (pos === Modifier.Position.RIGHT) {\r\n                num.setXShift(num_shiftR);\r\n                num_shift += num_width; // spacing\r\n                x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\r\n            }\r\n            last_line = line;\r\n            last_note = note;\r\n        }\r\n        state.left_shift += x_widthL;\r\n        state.right_shift += x_widthR;\r\n        return true;\r\n    }\r\n    setLineEndType(leg) {\r\n        if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\r\n            this.leg = leg;\r\n        }\r\n        return this;\r\n    }\r\n    setStringNumber(number) {\r\n        this.string_number = number;\r\n        return this;\r\n    }\r\n    setOffsetX(x) {\r\n        this.x_offset = x;\r\n        return this;\r\n    }\r\n    setOffsetY(y) {\r\n        this.y_offset = y;\r\n        return this;\r\n    }\r\n    setLastNote(note) {\r\n        this.last_note = note;\r\n        return this;\r\n    }\r\n    setDashed(dashed) {\r\n        this.dashed = dashed;\r\n        return this;\r\n    }\r\n    setDrawCircle(drawCircle) {\r\n        this.drawCircle = drawCircle;\r\n        return this;\r\n    }\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const start = note.getModifierStartXY(this.position, this.index);\r\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\r\n        let dot_x = start.x + this.x_shift + this.x_offset;\r\n        let stem_ext = {};\r\n        if (note.hasStem()) {\r\n            stem_ext = note.checkStem().getExtents();\r\n        }\r\n        let dot_y = start.y + this.y_shift + this.y_offset;\r\n        switch (this.position) {\r\n            case Modifier.Position.ABOVE:\r\n                {\r\n                    const ys = note.getYs();\r\n                    dot_y = ys.reduce((a, b) => (a < b ? a : b));\r\n                    if (note.hasStem() && stemDirection == Stem.UP) {\r\n                        dot_y = stem_ext.topY + StringNumber.metrics.stemPadding;\r\n                    }\r\n                    dot_y -= this.radius + StringNumber.metrics.verticalPadding + this.text_line * Tables.STAVE_LINE_DISTANCE;\r\n                }\r\n                break;\r\n            case Modifier.Position.BELOW:\r\n                {\r\n                    const ys = note.getYs();\r\n                    dot_y = ys.reduce((a, b) => (a > b ? a : b));\r\n                    if (note.hasStem() && stemDirection == Stem.DOWN) {\r\n                        dot_y = stem_ext.topY - StringNumber.metrics.stemPadding;\r\n                    }\r\n                    dot_y += this.radius + StringNumber.metrics.verticalPadding + this.text_line * Tables.STAVE_LINE_DISTANCE;\r\n                }\r\n                break;\r\n            case Modifier.Position.LEFT:\r\n                dot_x -= this.radius / 2 + StringNumber.metrics.leftPadding;\r\n                break;\r\n            case Modifier.Position.RIGHT:\r\n                dot_x += this.radius / 2 + StringNumber.metrics.rightPadding;\r\n                break;\r\n            default:\r\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\r\n        }\r\n        ctx.save();\r\n        if (this.drawCircle) {\r\n            ctx.beginPath();\r\n            ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\r\n            ctx.setLineWidth(1.5);\r\n            ctx.stroke();\r\n        }\r\n        ctx.setFont(this.textFont);\r\n        const x = dot_x - ctx.measureText(this.string_number).width / 2;\r\n        ctx.fillText('' + this.string_number, x, dot_y + 4.5);\r\n        const lastNote = this.last_note;\r\n        if (isStemmableNote(lastNote)) {\r\n            // Only StemmableNote objects have getStemX().\r\n            const end = lastNote.getStemX() - note.getX() + 5;\r\n            ctx.setStrokeStyle('#000000');\r\n            ctx.setLineCap('round');\r\n            ctx.setLineWidth(0.6);\r\n            if (this.dashed) {\r\n                Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\r\n            }\r\n            else {\r\n                Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\r\n            }\r\n            let len;\r\n            let pattern;\r\n            switch (this.leg) {\r\n                case Renderer.LineEndType.UP:\r\n                    len = -10;\r\n                    pattern = this.dashed ? [3, 3] : [3, 0];\r\n                    Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\r\n                    break;\r\n                case Renderer.LineEndType.DOWN:\r\n                    len = 10;\r\n                    pattern = this.dashed ? [3, 3] : [3, 0];\r\n                    Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n}\r\nStringNumber.TEXT_FONT = {\r\n    family: Font.SANS_SERIF,\r\n    size: Font.SIZE,\r\n    weight: FontWeight.BOLD,\r\n    style: FontStyle.NORMAL,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Larry Kuhns\r\n//\r\n// This file implements the `Stroke` class which renders chord strokes\r\n// that can be arpeggiated, brushed, rasquedo, etc.\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Glyph } from './glyph';\r\nimport { Modifier } from './modifier';\r\nimport { Category, isNote, isStaveNote, isTabNote } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class Stroke extends Modifier {\r\n    constructor(type, options) {\r\n        super();\r\n        this.options = Object.assign({ all_voices: true }, options);\r\n        // multi voice - span stroke across all voices if true\r\n        this.all_voices = this.options.all_voices;\r\n        // multi voice - end note of stroke, set in draw()\r\n        this.type = type;\r\n        this.position = Modifier.Position.LEFT;\r\n        this.render_options = {\r\n            font_scale: 38,\r\n        };\r\n        this.resetFont();\r\n        this.setXShift(0);\r\n        this.setWidth(10);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Stroke;\r\n    }\r\n    // Arrange strokes inside `ModifierContext`\r\n    static format(strokes, state) {\r\n        const left_shift = state.left_shift;\r\n        const stroke_spacing = 0;\r\n        if (!strokes || strokes.length === 0)\r\n            return false;\r\n        const strokeList = strokes.map((stroke) => {\r\n            const note = stroke.getNote();\r\n            const index = stroke.checkIndex();\r\n            if (isStaveNote(note)) {\r\n                // Only StaveNote objects have getKeyProps().\r\n                const { line } = note.getKeyProps()[index];\r\n                const shift = note.getLeftDisplacedHeadPx();\r\n                return { line, shift, stroke };\r\n            }\r\n            else if (isTabNote(note)) {\r\n                // Only TabNote objects have getPositions().\r\n                const { str: string } = note.getPositions()[index];\r\n                return { line: string, shift: 0, stroke };\r\n            }\r\n            else {\r\n                throw new RuntimeError('Internal', 'Unexpected instance.');\r\n            }\r\n        });\r\n        const strokeShift = left_shift;\r\n        // There can only be one stroke .. if more than one, they overlay each other\r\n        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\r\n            stroke.setXShift(strokeShift + shift);\r\n            return Math.max(stroke.getWidth() + stroke_spacing, xShift);\r\n        }, 0);\r\n        state.left_shift += xShift;\r\n        return true;\r\n    }\r\n    getPosition() {\r\n        return this.position;\r\n    }\r\n    addEndNote(note) {\r\n        this.note_end = note;\r\n        return this;\r\n    }\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const start = note.getModifierStartXY(this.position, this.index);\r\n        let ys = note.getYs();\r\n        let topY = start.y;\r\n        let botY = start.y;\r\n        const x = start.x - 5;\r\n        const line_space = note.checkStave().getSpacingBetweenLines();\r\n        const notes = this.checkModifierContext().getMembers(note.getCategory());\r\n        for (let i = 0; i < notes.length; i++) {\r\n            const note = notes[i];\r\n            if (isNote(note)) {\r\n                // Only Note objects have getYs().\r\n                // note is an instance of either StaveNote or TabNote.\r\n                ys = note.getYs();\r\n                for (let n = 0; n < ys.length; n++) {\r\n                    if (this.note === notes[i] || this.all_voices) {\r\n                        topY = Math.min(topY, ys[n]);\r\n                        botY = Math.max(botY, ys[n]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let arrow = '';\r\n        let arrow_shift_x = 0;\r\n        let arrow_y = 0;\r\n        let text_shift_x = 0;\r\n        let text_y = 0;\r\n        switch (this.type) {\r\n            case Stroke.Type.BRUSH_DOWN:\r\n                arrow = 'arrowheadBlackUp';\r\n                arrow_shift_x = -3;\r\n                arrow_y = topY - line_space / 2 + 10;\r\n                botY += line_space / 2;\r\n                break;\r\n            case Stroke.Type.BRUSH_UP:\r\n                arrow = 'arrowheadBlackDown';\r\n                arrow_shift_x = 0.5;\r\n                arrow_y = botY + line_space / 2;\r\n                topY -= line_space / 2;\r\n                break;\r\n            case Stroke.Type.ROLL_DOWN:\r\n            case Stroke.Type.RASQUEDO_DOWN:\r\n                arrow = 'arrowheadBlackUp';\r\n                arrow_shift_x = -3;\r\n                text_shift_x = this.x_shift + arrow_shift_x - 2;\r\n                if (isStaveNote(note)) {\r\n                    topY += 1.5 * line_space;\r\n                    if ((botY - topY) % 2 !== 0) {\r\n                        botY += 0.5 * line_space;\r\n                    }\r\n                    else {\r\n                        botY += line_space;\r\n                    }\r\n                    arrow_y = topY - line_space;\r\n                    text_y = botY + line_space + 2;\r\n                }\r\n                else {\r\n                    topY += 1.5 * line_space;\r\n                    botY += line_space;\r\n                    arrow_y = topY - 0.75 * line_space;\r\n                    text_y = botY + 0.25 * line_space;\r\n                }\r\n                break;\r\n            case Stroke.Type.ROLL_UP:\r\n            case Stroke.Type.RASQUEDO_UP:\r\n                arrow = 'arrowheadBlackDown';\r\n                arrow_shift_x = -4;\r\n                text_shift_x = this.x_shift + arrow_shift_x - 1;\r\n                if (isStaveNote(note)) {\r\n                    arrow_y = line_space / 2;\r\n                    topY += 0.5 * line_space;\r\n                    if ((botY - topY) % 2 === 0) {\r\n                        botY += line_space / 2;\r\n                    }\r\n                    arrow_y = botY + 0.5 * line_space;\r\n                    text_y = topY - 1.25 * line_space;\r\n                }\r\n                else {\r\n                    topY += 0.25 * line_space;\r\n                    botY += 0.5 * line_space;\r\n                    arrow_y = botY + 0.25 * line_space;\r\n                    text_y = topY - line_space;\r\n                }\r\n                break;\r\n            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\r\n                topY += 0.5 * line_space;\r\n                botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\r\n                break;\r\n            default:\r\n                throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\r\n        }\r\n        let strokeLine = 'straight';\r\n        // Draw the stroke\r\n        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\r\n            ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);\r\n        }\r\n        else {\r\n            strokeLine = 'wiggly';\r\n            if (isStaveNote(note)) {\r\n                for (let i = topY; i <= botY; i += line_space) {\r\n                    Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\r\n                }\r\n            }\r\n            else {\r\n                let i;\r\n                for (i = topY; i <= botY; i += 10) {\r\n                    Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\r\n                }\r\n                if (this.type === Stroke.Type.RASQUEDO_DOWN) {\r\n                    text_y = i + 0.25 * line_space;\r\n                }\r\n            }\r\n        }\r\n        if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\r\n            return; // skip drawing arrow heads or text\r\n        }\r\n        // Draw the arrow head\r\n        Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {\r\n            category: `stroke.${arrow}.${strokeLine}`,\r\n        });\r\n        // Draw the rasquedo \"R\"\r\n        if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\r\n            ctx.save();\r\n            ctx.setFont(this.textFont);\r\n            ctx.fillText('R', x + text_shift_x, text_y);\r\n            ctx.restore();\r\n        }\r\n    }\r\n}\r\nStroke.Type = {\r\n    BRUSH_DOWN: 1,\r\n    BRUSH_UP: 2,\r\n    ROLL_DOWN: 3,\r\n    ROLL_UP: 4,\r\n    RASQUEDO_DOWN: 5,\r\n    RASQUEDO_UP: 6,\r\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\r\n};\r\nStroke.TEXT_FONT = {\r\n    family: Font.SERIF,\r\n    size: Font.SIZE,\r\n    weight: FontWeight.BOLD,\r\n    style: FontStyle.ITALIC,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// @author Gregory Ristow (2015)\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { RenderContext } from './rendercontext';\r\nimport { normalizeAngle, prefix, RuntimeError } from './util';\r\n/** For a particular element type (e.g., rect), we will not apply certain presentation attributes. */\r\nconst ATTRIBUTES_TO_IGNORE = {\r\n    path: {\r\n        x: true,\r\n        y: true,\r\n        width: true,\r\n        height: true,\r\n        'font-family': true,\r\n        'font-weight': true,\r\n        'font-style': true,\r\n        'font-size': true,\r\n    },\r\n    rect: {\r\n        'font-family': true,\r\n        'font-weight': true,\r\n        'font-style': true,\r\n        'font-size': true,\r\n    },\r\n    text: {\r\n        width: true,\r\n        height: true,\r\n    },\r\n};\r\n/** Create the SVG in the SVG namespace. */\r\nconst SVG_NS = 'http://www.w3.org/2000/svg';\r\nconst TWO_PI = 2 * Math.PI;\r\nclass MeasureTextCache {\r\n    constructor() {\r\n        // The cache is keyed first by the text string, then by the font attributes\r\n        // joined together.\r\n        this.cache = {};\r\n    }\r\n    lookup(text, svg, attributes) {\r\n        let entries = this.cache[text];\r\n        if (entries === undefined) {\r\n            entries = {};\r\n            this.cache[text] = entries;\r\n        }\r\n        const family = attributes['font-family'];\r\n        const size = attributes['font-size'];\r\n        const weight = attributes['font-weight'];\r\n        const style = attributes['font-style'];\r\n        const key = `${family}%${size}%${weight}%${style}`;\r\n        let entry = entries[key];\r\n        if (entry === undefined) {\r\n            entry = this.measureImpl(text, svg, attributes);\r\n            entries[key] = entry;\r\n        }\r\n        return entry;\r\n    }\r\n    measureImpl(text, svg, attributes) {\r\n        let txt = this.txt;\r\n        if (!txt) {\r\n            // Create the SVG text element that will be used to measure text in the event\r\n            // of a cache miss.\r\n            txt = document.createElementNS(SVG_NS, 'text');\r\n            this.txt = txt;\r\n        }\r\n        txt.textContent = text;\r\n        txt.setAttributeNS(null, 'font-family', attributes['font-family']);\r\n        txt.setAttributeNS(null, 'font-size', attributes['font-size']);\r\n        txt.setAttributeNS(null, 'font-style', attributes['font-style']);\r\n        txt.setAttributeNS(null, 'font-weight', attributes['font-weight']);\r\n        svg.appendChild(txt);\r\n        const bbox = txt.getBBox();\r\n        svg.removeChild(txt);\r\n        return { x: bbox.x, y: bbox.y, width: bbox.width, height: bbox.height };\r\n    }\r\n}\r\n/**\r\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\r\n */\r\nexport class SVGContext extends RenderContext {\r\n    constructor(element) {\r\n        super();\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.backgroundFillStyle = 'white';\r\n        /** Formatted as CSS font shorthand (e.g., 'italic bold 12pt Arial') */\r\n        this.fontCSSString = '';\r\n        this.element = element;\r\n        // Create a SVG element and add it to the container element.\r\n        const svg = this.create('svg');\r\n        this.element.appendChild(svg);\r\n        this.svg = svg;\r\n        this.parent = this.svg;\r\n        this.groups = [this.svg];\r\n        this.path = '';\r\n        this.pen = { x: NaN, y: NaN };\r\n        this.lineWidth = 1.0;\r\n        const defaultFontAttributes = {\r\n            'font-family': Font.SANS_SERIF,\r\n            'font-size': Font.SIZE + 'pt',\r\n            'font-weight': FontWeight.NORMAL,\r\n            'font-style': FontStyle.NORMAL,\r\n        };\r\n        this.state = Object.assign({ scale: { x: 1, y: 1 } }, defaultFontAttributes);\r\n        this.attributes = Object.assign({ 'stroke-width': 0.3, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black' }, defaultFontAttributes);\r\n        this.shadow_attributes = {\r\n            width: 0,\r\n            color: 'black',\r\n        };\r\n        this.state_stack = [];\r\n    }\r\n    create(svgElementType) {\r\n        return document.createElementNS(SVG_NS, svgElementType);\r\n    }\r\n    // Allow grouping elements in containers for interactivity.\r\n    openGroup(cls, id, attrs) {\r\n        const group = this.create('g');\r\n        this.groups.push(group);\r\n        this.parent.appendChild(group);\r\n        this.parent = group;\r\n        if (cls)\r\n            group.setAttribute('class', prefix(cls));\r\n        if (id)\r\n            group.setAttribute('id', prefix(id));\r\n        if (attrs && attrs.pointerBBox) {\r\n            group.setAttribute('pointer-events', 'bounding-box');\r\n        }\r\n        return group;\r\n    }\r\n    closeGroup() {\r\n        this.groups.pop();\r\n        this.parent = this.groups[this.groups.length - 1];\r\n    }\r\n    add(elem) {\r\n        this.parent.appendChild(elem);\r\n    }\r\n    setFillStyle(style) {\r\n        this.attributes.fill = style;\r\n        return this;\r\n    }\r\n    /**\r\n     * Used to set the fill color for `clearRect()`. This allows us to simulate\r\n     * cutting a \"hole\" into the SVG drawing.\r\n     */\r\n    setBackgroundFillStyle(style) {\r\n        this.backgroundFillStyle = style;\r\n        return this;\r\n    }\r\n    setStrokeStyle(style) {\r\n        this.attributes.stroke = style;\r\n        return this;\r\n    }\r\n    setShadowColor(color) {\r\n        this.shadow_attributes.color = color;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param blur A non-negative float specifying the level of shadow blur, where 0\r\n     *             represents no blur and larger numbers represent increasingly more blur.\r\n     * @returns this\r\n     */\r\n    setShadowBlur(blur) {\r\n        this.shadow_attributes.width = blur;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param width\r\n     * @returns this\r\n     */\r\n    setLineWidth(width) {\r\n        this.attributes['stroke-width'] = width;\r\n        this.lineWidth = width;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\r\n     * @returns this\r\n     *\r\n     * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\r\n     */\r\n    setLineDash(lineDash) {\r\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\r\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\r\n        }\r\n    }\r\n    /**\r\n     * @param capType\r\n     * @returns this\r\n     */\r\n    setLineCap(capType) {\r\n        this.attributes['stroke-linecap'] = capType;\r\n        return this;\r\n    }\r\n    // ### Sizing & Scaling Methods:\r\n    // TODO (GCR): See note at scale() -- separate our internal\r\n    // conception of pixel-based width/height from the style.width\r\n    // and style.height properties eventually to allow users to\r\n    // apply responsive sizing attributes to the SVG.\r\n    resize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.element.style.width = width.toString();\r\n        this.svg.style.width = width.toString();\r\n        this.svg.style.height = height.toString();\r\n        const attributes = {\r\n            width,\r\n            height,\r\n        };\r\n        this.applyAttributes(this.svg, attributes);\r\n        this.scale(this.state.scale.x, this.state.scale.y);\r\n        return this;\r\n    }\r\n    scale(x, y) {\r\n        // uses viewBox to scale\r\n        // TODO (GCR): we may at some point want to distinguish the\r\n        // style.width / style.height properties that are applied to\r\n        // the SVG object from our internal conception of the SVG\r\n        // width/height.  This would allow us to create automatically\r\n        // scaling SVG's that filled their containers, for instance.\r\n        //\r\n        // As this isn't implemented in Canvas contexts,\r\n        // I've left as is for now, but in using the viewBox to\r\n        // handle internal scaling, am trying to make it possible\r\n        // for us to eventually move in that direction.\r\n        this.state.scale = { x, y };\r\n        const visibleWidth = this.width / x;\r\n        const visibleHeight = this.height / y;\r\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\r\n        return this;\r\n    }\r\n    /**\r\n     * 1 arg: string in the \"x y w h\" format\r\n     * 4 args: x:number, y:number, w:number, h:number\r\n     */\r\n    setViewBox(viewBox_or_minX, minY, width, height) {\r\n        if (typeof viewBox_or_minX === 'string') {\r\n            this.svg.setAttribute('viewBox', viewBox_or_minX);\r\n        }\r\n        else {\r\n            const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\r\n            this.svg.setAttribute('viewBox', viewBoxString);\r\n        }\r\n    }\r\n    // ### Drawing helper methods:\r\n    applyAttributes(element, attributes) {\r\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\r\n        for (const attrName in attributes) {\r\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\r\n                continue;\r\n            }\r\n            element.setAttributeNS(null, attrName, attributes[attrName]);\r\n        }\r\n        return element;\r\n    }\r\n    // ### Shape & Path Methods:\r\n    clear() {\r\n        // Clear the SVG by removing all inner children.\r\n        // (This approach is usually slightly more efficient\r\n        // than removing the old SVG & adding a new one to\r\n        // the container element, since it does not cause the\r\n        // container to resize twice.  Also, the resize\r\n        // triggered by removing the entire SVG can trigger\r\n        // a touchcancel event when the element resizes away\r\n        // from a touch point.)\r\n        while (this.svg.lastChild) {\r\n            this.svg.removeChild(this.svg.lastChild);\r\n        }\r\n        // Replace the viewbox attribute we just removed.\r\n        this.scale(this.state.scale.x, this.state.scale.y);\r\n    }\r\n    // ## Rectangles:\r\n    rect(x, y, width, height, attributes) {\r\n        // Avoid invalid negative height attributes by flipping the rectangle on its head:\r\n        if (height < 0) {\r\n            y += height;\r\n            height *= -1;\r\n        }\r\n        const rectangle = this.create('rect');\r\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.lineWidth, stroke: 'black' };\r\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\r\n        this.add(rectangle);\r\n        return this;\r\n    }\r\n    fillRect(x, y, width, height) {\r\n        const attributes = { fill: this.attributes.fill };\r\n        this.rect(x, y, width, height, attributes);\r\n        return this;\r\n    }\r\n    clearRect(x, y, width, height) {\r\n        // Currently this fills a rect with the backgroundFillStyle, rather\r\n        // than \"cut a hole\" into the existing shapes.\r\n        //\r\n        // Since tabNote seems to be the only module that makes use of this\r\n        // it may be worth creating a separate tabStave that would\r\n        // draw lines around locations of tablature fingering.\r\n        this.rect(x, y, width, height, { 'stroke-width': 0, fill: this.backgroundFillStyle });\r\n        return this;\r\n    }\r\n    // ## Paths:\r\n    beginPath() {\r\n        this.path = '';\r\n        this.pen.x = NaN;\r\n        this.pen.y = NaN;\r\n        return this;\r\n    }\r\n    moveTo(x, y) {\r\n        this.path += 'M' + x + ' ' + y;\r\n        this.pen.x = x;\r\n        this.pen.y = y;\r\n        return this;\r\n    }\r\n    lineTo(x, y) {\r\n        this.path += 'L' + x + ' ' + y;\r\n        this.pen.x = x;\r\n        this.pen.y = y;\r\n        return this;\r\n    }\r\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\r\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\r\n        this.pen.x = x;\r\n        this.pen.y = y;\r\n        return this;\r\n    }\r\n    quadraticCurveTo(x1, y1, x, y) {\r\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\r\n        this.pen.x = x;\r\n        this.pen.y = y;\r\n        return this;\r\n    }\r\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\r\n        const x0 = x + radius * Math.cos(startAngle);\r\n        const y0 = y + radius * Math.sin(startAngle);\r\n        // Handle the edge case where arc length is greater than or equal to\r\n        // the circle's circumference:\r\n        //   https://html.spec.whatwg.org/multipage/canvas.html#ellipse-method-steps\r\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\r\n            (counterclockwise && startAngle - endAngle >= TWO_PI)) {\r\n            const x1 = x + radius * Math.cos(startAngle + Math.PI);\r\n            const y1 = y + radius * Math.sin(startAngle + Math.PI);\r\n            // There's no way to specify a completely circular arc in SVG so we have to\r\n            // use two semi-circular arcs.\r\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\r\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\r\n            this.pen.x = x0;\r\n            this.pen.y = y0;\r\n        }\r\n        else {\r\n            const x1 = x + radius * Math.cos(endAngle);\r\n            const y1 = y + radius * Math.sin(endAngle);\r\n            startAngle = normalizeAngle(startAngle);\r\n            endAngle = normalizeAngle(endAngle);\r\n            let large;\r\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\r\n                large = counterclockwise;\r\n            }\r\n            else {\r\n                large = !counterclockwise;\r\n            }\r\n            if (startAngle > endAngle) {\r\n                large = !large;\r\n            }\r\n            const sweep = !counterclockwise;\r\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\r\n            this.pen.x = x1;\r\n            this.pen.y = y1;\r\n        }\r\n        return this;\r\n    }\r\n    closePath() {\r\n        this.path += 'Z';\r\n        return this;\r\n    }\r\n    getShadowStyle() {\r\n        const sa = this.shadow_attributes;\r\n        // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\r\n        // of the same radius, so we scale the drop-shadow radius here to make it\r\n        // look close to the canvas shadow.\r\n        return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\r\n    }\r\n    fill(attributes) {\r\n        const path = this.create('path');\r\n        if (typeof attributes === 'undefined') {\r\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\r\n        }\r\n        attributes.d = this.path;\r\n        if (this.shadow_attributes.width > 0) {\r\n            attributes.style = this.getShadowStyle();\r\n        }\r\n        this.applyAttributes(path, attributes);\r\n        this.add(path);\r\n        return this;\r\n    }\r\n    stroke() {\r\n        const path = this.create('path');\r\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', 'stroke-width': this.lineWidth, d: this.path });\r\n        if (this.shadow_attributes.width > 0) {\r\n            attributes.style = this.getShadowStyle();\r\n        }\r\n        this.applyAttributes(path, attributes);\r\n        this.add(path);\r\n        return this;\r\n    }\r\n    // ## Text Methods:\r\n    measureText(text) {\r\n        return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\r\n    }\r\n    fillText(text, x, y) {\r\n        if (!text || text.length <= 0) {\r\n            return this;\r\n        }\r\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\r\n            y });\r\n        const txt = this.create('text');\r\n        txt.textContent = text;\r\n        this.applyAttributes(txt, attributes);\r\n        this.add(txt);\r\n        return this;\r\n    }\r\n    // TODO: State should be deep-copied.\r\n    save() {\r\n        this.state_stack.push({\r\n            state: {\r\n                'font-family': this.state['font-family'],\r\n                'font-weight': this.state['font-weight'],\r\n                'font-style': this.state['font-style'],\r\n                'font-size': this.state['font-size'],\r\n                scale: this.state.scale,\r\n            },\r\n            attributes: {\r\n                'font-family': this.attributes['font-family'],\r\n                'font-weight': this.attributes['font-weight'],\r\n                'font-style': this.attributes['font-style'],\r\n                'font-size': this.attributes['font-size'],\r\n                fill: this.attributes.fill,\r\n                stroke: this.attributes.stroke,\r\n                'stroke-width': this.attributes['stroke-width'],\r\n                'stroke-dasharray': this.attributes['stroke-dasharray'],\r\n            },\r\n            shadow_attributes: {\r\n                width: this.shadow_attributes.width,\r\n                color: this.shadow_attributes.color,\r\n            },\r\n            lineWidth: this.lineWidth,\r\n        });\r\n        return this;\r\n    }\r\n    // TODO: State should be deep-restored.\r\n    restore() {\r\n        const savedState = this.state_stack.pop();\r\n        if (savedState) {\r\n            const state = savedState;\r\n            this.state['font-family'] = state.state['font-family'];\r\n            this.state['font-weight'] = state.state['font-weight'];\r\n            this.state['font-style'] = state.state['font-style'];\r\n            this.state['font-size'] = state.state['font-size'];\r\n            this.state.scale = state.state.scale;\r\n            this.attributes['font-family'] = state.attributes['font-family'];\r\n            this.attributes['font-weight'] = state.attributes['font-weight'];\r\n            this.attributes['font-style'] = state.attributes['font-style'];\r\n            this.attributes['font-size'] = state.attributes['font-size'];\r\n            this.attributes.fill = state.attributes.fill;\r\n            this.attributes.stroke = state.attributes.stroke;\r\n            this.attributes['stroke-width'] = state.attributes['stroke-width'];\r\n            this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\r\n            this.shadow_attributes.width = state.shadow_attributes.width;\r\n            this.shadow_attributes.color = state.shadow_attributes.color;\r\n            this.lineWidth = state.lineWidth;\r\n        }\r\n        return this;\r\n    }\r\n    set fillStyle(style) {\r\n        this.setFillStyle(style);\r\n    }\r\n    get fillStyle() {\r\n        return this.attributes.fill;\r\n    }\r\n    set strokeStyle(style) {\r\n        this.setStrokeStyle(style);\r\n    }\r\n    get strokeStyle() {\r\n        return this.attributes.stroke;\r\n    }\r\n    /**\r\n     * @param f is 1) a `FontInfo` object or\r\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\r\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\r\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\r\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900). It is inserted\r\n     *               into the font-weight attribute (e.g., font-weight=\"bold\")\r\n     * @param style is a string (e.g., 'italic', 'normal') that is inserted into the\r\n     *              font-style attribute (e.g., font-style=\"italic\")\r\n     */\r\n    setFont(f, size, weight, style) {\r\n        const fontInfo = Font.validate(f, size, weight, style);\r\n        this.fontCSSString = Font.toCSSString(fontInfo);\r\n        const fontAttributes = {\r\n            'font-family': fontInfo.family,\r\n            'font-size': fontInfo.size,\r\n            'font-weight': fontInfo.weight,\r\n            'font-style': fontInfo.style,\r\n        };\r\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\r\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\r\n        return this;\r\n    }\r\n    /** Return a string of the form `'italic bold 15pt Arial'` */\r\n    getFont() {\r\n        return this.fontCSSString;\r\n    }\r\n}\r\nSVGContext.measureTextCache = new MeasureTextCache();\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { BoundingBox } from './boundingbox';\r\nimport { Element } from './element';\r\nimport { Formatter } from './formatter';\r\nimport { Note } from './note';\r\nimport { Stave } from './stave';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\n/**\r\n * System implements a musical system, which is a collection of staves,\r\n * each which can have one or more voices. All voices across all staves in\r\n * the system are formatted together.\r\n */\r\nexport class System extends Element {\r\n    constructor(params = {}) {\r\n        super();\r\n        this.setOptions(params);\r\n        this.parts = [];\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.System;\r\n    }\r\n    /** Set formatting options. */\r\n    setOptions(options = {}) {\r\n        if (!options.factory) {\r\n            throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');\r\n        }\r\n        this.factory = options.factory;\r\n        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });\r\n        if (this.options.noJustification === false && typeof options.width === 'undefined') {\r\n            this.options.autoWidth = true;\r\n        }\r\n    }\r\n    /** Set associated context. */\r\n    setContext(context) {\r\n        super.setContext(context);\r\n        this.factory.setContext(context);\r\n        return this;\r\n    }\r\n    /**\r\n     * Add connector between staves.\r\n     * @param type see {@link StaveConnector.typeString}\r\n     */\r\n    addConnector(type = 'double') {\r\n        this.connector = this.factory.StaveConnector({\r\n            top_stave: this.parts[0].stave,\r\n            bottom_stave: this.parts[this.parts.length - 1].stave,\r\n            type,\r\n        });\r\n        return this.connector;\r\n    }\r\n    /**\r\n     * Add a stave to the system.\r\n     *\r\n     * Example (one voice):\r\n     *\r\n     * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\r\n     *\r\n     * Example (two voices):\r\n     *\r\n     * `system.addStave({voices: [`\r\n     *   `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\r\n     *   `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))`\r\n     * `]});`\r\n     */\r\n    addStave(params) {\r\n        var _a;\r\n        const staveOptions = Object.assign({ left_bar: false }, params.options);\r\n        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\r\n        const p = Object.assign(Object.assign({ stave, \r\n            /* voices: [], */\r\n            spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });\r\n        const ctx = this.getContext();\r\n        p.voices.forEach((voice) => voice\r\n            .setContext(ctx)\r\n            .setStave(stave)\r\n            .getTickables()\r\n            .forEach((tickable) => tickable.setStave(stave)));\r\n        this.parts.push(p);\r\n        return stave;\r\n    }\r\n    /** Format the system. */\r\n    format() {\r\n        const options_details = this.options.details;\r\n        let justifyWidth = 0;\r\n        const formatter = new Formatter(options_details);\r\n        this.formatter = formatter;\r\n        let y = this.options.y;\r\n        let startX = 0;\r\n        let allVoices = [];\r\n        let allStaves = [];\r\n        const debugNoteMetricsYs = [];\r\n        // Join the voices for each stave.\r\n        this.parts.forEach((part) => {\r\n            y = y + part.stave.space(part.spaceAbove);\r\n            part.stave.setY(y);\r\n            formatter.joinVoices(part.voices);\r\n            y = y + part.stave.space(part.spaceBelow);\r\n            y = y + part.stave.space(this.options.spaceBetweenStaves);\r\n            if (part.debugNoteMetrics) {\r\n                debugNoteMetricsYs.push({ y, voice: part.voices[0] });\r\n                y += 15;\r\n            }\r\n            allVoices = allVoices.concat(part.voices);\r\n            allStaves = allStaves.concat(part.stave);\r\n            startX = Math.max(startX, part.stave.getNoteStartX());\r\n        });\r\n        // Update the start position of all staves.\r\n        this.parts.forEach((part) => part.stave.setNoteStartX(startX));\r\n        if (this.options.autoWidth) {\r\n            justifyWidth = formatter.preCalculateMinTotalWidth(allVoices);\r\n            this.parts.forEach((part) => {\r\n                part.stave.setWidth(justifyWidth + Stave.rightPadding + (startX - this.options.x));\r\n            });\r\n        }\r\n        else {\r\n            justifyWidth = this.options.noPadding\r\n                ? this.options.width - this.options.x\r\n                : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\r\n        }\r\n        formatter.format(allVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\r\n        for (let i = 0; i < this.options.formatIterations; i++) {\r\n            formatter.tune(options_details);\r\n        }\r\n        this.startX = startX;\r\n        this.debugNoteMetricsYs = debugNoteMetricsYs;\r\n        this.lastY = y;\r\n        this.boundingBox = new BoundingBox(this.options.x, this.options.y, this.options.width, this.lastY - this.options.y);\r\n        Stave.formatBegModifiers(allStaves);\r\n    }\r\n    /** Render the system. */\r\n    draw() {\r\n        // Render debugging information, if requested.\r\n        const ctx = this.checkContext();\r\n        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\r\n            throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\r\n        }\r\n        this.setRendered();\r\n        if (this.options.debugFormatter) {\r\n            Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\r\n        }\r\n        this.debugNoteMetricsYs.forEach((d) => {\r\n            d.voice.getTickables().forEach((tickable) => Note.plotMetrics(ctx, tickable, d.y));\r\n        });\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\nimport { Fraction } from './fraction';\r\nimport { Glyph } from './glyph';\r\nimport { RuntimeError } from './util';\r\nconst RESOLUTION = 16384;\r\n/**\r\n * Map duration numbers to 'ticks', the unit of duration used throughout VexFlow.\r\n * For example, a quarter note is 4, so it maps to RESOLUTION / 4 = 4096 ticks.\r\n */\r\nconst durations = {\r\n    '1/2': RESOLUTION * 2,\r\n    1: RESOLUTION / 1,\r\n    2: RESOLUTION / 2,\r\n    4: RESOLUTION / 4,\r\n    8: RESOLUTION / 8,\r\n    16: RESOLUTION / 16,\r\n    32: RESOLUTION / 32,\r\n    64: RESOLUTION / 64,\r\n    128: RESOLUTION / 128,\r\n    256: RESOLUTION / 256,\r\n};\r\nconst durationAliases = {\r\n    w: '1',\r\n    h: '2',\r\n    q: '4',\r\n    // This is the default duration used to render bars (BarNote). Bars no longer\r\n    // consume ticks, so this should be a no-op.\r\n    // TODO(0xfe): This needs to be cleaned up.\r\n    b: '256',\r\n};\r\nconst keySignatures = {\r\n    C: { num: 0 },\r\n    Am: { num: 0 },\r\n    F: { acc: 'b', num: 1 },\r\n    Dm: { acc: 'b', num: 1 },\r\n    Bb: { acc: 'b', num: 2 },\r\n    Gm: { acc: 'b', num: 2 },\r\n    Eb: { acc: 'b', num: 3 },\r\n    Cm: { acc: 'b', num: 3 },\r\n    Ab: { acc: 'b', num: 4 },\r\n    Fm: { acc: 'b', num: 4 },\r\n    Db: { acc: 'b', num: 5 },\r\n    Bbm: { acc: 'b', num: 5 },\r\n    Gb: { acc: 'b', num: 6 },\r\n    Ebm: { acc: 'b', num: 6 },\r\n    Cb: { acc: 'b', num: 7 },\r\n    Abm: { acc: 'b', num: 7 },\r\n    G: { acc: '#', num: 1 },\r\n    Em: { acc: '#', num: 1 },\r\n    D: { acc: '#', num: 2 },\r\n    Bm: { acc: '#', num: 2 },\r\n    A: { acc: '#', num: 3 },\r\n    'F#m': { acc: '#', num: 3 },\r\n    E: { acc: '#', num: 4 },\r\n    'C#m': { acc: '#', num: 4 },\r\n    B: { acc: '#', num: 5 },\r\n    'G#m': { acc: '#', num: 5 },\r\n    'F#': { acc: '#', num: 6 },\r\n    'D#m': { acc: '#', num: 6 },\r\n    'C#': { acc: '#', num: 7 },\r\n    'A#m': { acc: '#', num: 7 },\r\n};\r\nconst clefs = {\r\n    treble: { line_shift: 0 },\r\n    bass: { line_shift: 6 },\r\n    tenor: { line_shift: 4 },\r\n    alto: { line_shift: 3 },\r\n    soprano: { line_shift: 1 },\r\n    percussion: { line_shift: 0 },\r\n    'mezzo-soprano': { line_shift: 2 },\r\n    'baritone-c': { line_shift: 5 },\r\n    'baritone-f': { line_shift: 5 },\r\n    subbass: { line_shift: 7 },\r\n    french: { line_shift: -1 },\r\n};\r\nconst notesInfo = {\r\n    C: { index: 0, int_val: 0 },\r\n    CN: { index: 0, int_val: 0, accidental: 'n' },\r\n    'C#': { index: 0, int_val: 1, accidental: '#' },\r\n    'C##': { index: 0, int_val: 2, accidental: '##' },\r\n    CB: { index: 0, int_val: 11, accidental: 'b' },\r\n    CBB: { index: 0, int_val: 10, accidental: 'bb' },\r\n    D: { index: 1, int_val: 2 },\r\n    DN: { index: 1, int_val: 2, accidental: 'n' },\r\n    'D#': { index: 1, int_val: 3, accidental: '#' },\r\n    'D##': { index: 1, int_val: 4, accidental: '##' },\r\n    DB: { index: 1, int_val: 1, accidental: 'b' },\r\n    DBB: { index: 1, int_val: 0, accidental: 'bb' },\r\n    E: { index: 2, int_val: 4 },\r\n    EN: { index: 2, int_val: 4, accidental: 'n' },\r\n    'E#': { index: 2, int_val: 5, accidental: '#' },\r\n    'E##': { index: 2, int_val: 6, accidental: '##' },\r\n    EB: { index: 2, int_val: 3, accidental: 'b' },\r\n    EBB: { index: 2, int_val: 2, accidental: 'bb' },\r\n    F: { index: 3, int_val: 5 },\r\n    FN: { index: 3, int_val: 5, accidental: 'n' },\r\n    'F#': { index: 3, int_val: 6, accidental: '#' },\r\n    'F##': { index: 3, int_val: 7, accidental: '##' },\r\n    FB: { index: 3, int_val: 4, accidental: 'b' },\r\n    FBB: { index: 3, int_val: 3, accidental: 'bb' },\r\n    G: { index: 4, int_val: 7 },\r\n    GN: { index: 4, int_val: 7, accidental: 'n' },\r\n    'G#': { index: 4, int_val: 8, accidental: '#' },\r\n    'G##': { index: 4, int_val: 9, accidental: '##' },\r\n    GB: { index: 4, int_val: 6, accidental: 'b' },\r\n    GBB: { index: 4, int_val: 5, accidental: 'bb' },\r\n    A: { index: 5, int_val: 9 },\r\n    AN: { index: 5, int_val: 9, accidental: 'n' },\r\n    'A#': { index: 5, int_val: 10, accidental: '#' },\r\n    'A##': { index: 5, int_val: 11, accidental: '##' },\r\n    AB: { index: 5, int_val: 8, accidental: 'b' },\r\n    ABB: { index: 5, int_val: 7, accidental: 'bb' },\r\n    B: { index: 6, int_val: 11 },\r\n    BN: { index: 6, int_val: 11, accidental: 'n' },\r\n    'B#': { index: 6, int_val: 12, accidental: '#' },\r\n    'B##': { index: 6, int_val: 13, accidental: '##' },\r\n    BB: { index: 6, int_val: 10, accidental: 'b' },\r\n    BBB: { index: 6, int_val: 9, accidental: 'bb' },\r\n    R: { index: 6, rest: true },\r\n    X: {\r\n        index: 6,\r\n        accidental: '',\r\n        octave: 4,\r\n        code: 'noteheadXBlack',\r\n        shift_right: 5.5,\r\n    },\r\n};\r\nconst validNoteTypes = {\r\n    n: { name: 'note' },\r\n    r: { name: 'rest' },\r\n    h: { name: 'harmonic' },\r\n    m: { name: 'muted' },\r\n    s: { name: 'slash' },\r\n    g: { name: 'ghost' },\r\n};\r\nconst customNoteHeads = {\r\n    /* Diamond */\r\n    D0: { code: 'noteheadDiamondWhole' },\r\n    D1: { code: 'noteheadDiamondHalf' },\r\n    D2: { code: 'noteheadDiamondBlack' },\r\n    D3: { code: 'noteheadDiamondBlack' },\r\n    /* Triangle */\r\n    T0: { code: 'noteheadTriangleUpWhole' },\r\n    T1: { code: 'noteheadTriangleUpHalf' },\r\n    T2: { code: 'noteheadTriangleUpBlack' },\r\n    T3: { code: 'noteheadTriangleUpBlack' },\r\n    /* Cross */\r\n    X0: { code: 'noteheadXWhole' },\r\n    X1: { code: 'noteheadXHalf' },\r\n    X2: { code: 'noteheadXBlack' },\r\n    X3: { code: 'noteheadCircleX' },\r\n    /* Square */\r\n    S1: { code: 'noteheadSquareWhite' },\r\n    S2: { code: 'noteheadSquareBlack' },\r\n    /* Rectangle */\r\n    R1: { code: 'vexNoteHeadRectWhite' },\r\n    R2: { code: 'vexNoteHeadRectBlack' }, // no smufl code\r\n};\r\nconst accidentals = {\r\n    '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\r\n    '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\r\n    b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\r\n    bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\r\n    n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\r\n    '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\r\n    '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\r\n    db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\r\n    d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\r\n    '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\r\n    '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\r\n    '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\r\n    bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\r\n    bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\r\n    o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\r\n    k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\r\n    bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\r\n    '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\r\n    ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\r\n    afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },\r\n    accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },\r\n    accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },\r\n    accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },\r\n    accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },\r\n    accidentalNarrowReversedFlatAndFlat: {\r\n        code: 'accidentalNarrowReversedFlatAndFlat',\r\n        parenRightPaddingAdjustment: -1,\r\n    },\r\n    accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },\r\n    accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },\r\n};\r\n// Helps determine the layout of accidentals.\r\nconst accidentalColumns = {\r\n    1: {\r\n        a: [1],\r\n        b: [1],\r\n    },\r\n    2: {\r\n        a: [1, 2],\r\n    },\r\n    3: {\r\n        a: [1, 3, 2],\r\n        b: [1, 2, 1],\r\n        second_on_bottom: [1, 2, 3],\r\n    },\r\n    4: {\r\n        a: [1, 3, 4, 2],\r\n        b: [1, 2, 3, 1],\r\n        spaced_out_tetrachord: [1, 2, 1, 2],\r\n    },\r\n    5: {\r\n        a: [1, 3, 5, 4, 2],\r\n        b: [1, 2, 4, 3, 1],\r\n        spaced_out_pentachord: [1, 2, 3, 2, 1],\r\n        very_spaced_out_pentachord: [1, 2, 1, 2, 1],\r\n    },\r\n    6: {\r\n        a: [1, 3, 5, 6, 4, 2],\r\n        b: [1, 2, 4, 5, 3, 1],\r\n        spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\r\n        very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\r\n    },\r\n};\r\nconst articulations = {\r\n    'a.': { code: 'augmentationDot', between_lines: true },\r\n    av: {\r\n        aboveCode: 'articStaccatissimoAbove',\r\n        belowCode: 'articStaccatissimoBelow',\r\n        between_lines: true,\r\n    },\r\n    'a>': {\r\n        aboveCode: 'articAccentAbove',\r\n        belowCode: 'articAccentBelow',\r\n        between_lines: true,\r\n    },\r\n    'a-': {\r\n        aboveCode: 'articTenutoAbove',\r\n        belowCode: 'articTenutoBelow',\r\n        between_lines: true,\r\n    },\r\n    'a^': {\r\n        aboveCode: 'articMarcatoAbove',\r\n        belowCode: 'articMarcatoBelow',\r\n        between_lines: false,\r\n    },\r\n    'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false },\r\n    ao: {\r\n        aboveCode: 'pluckedSnapPizzicatoAbove',\r\n        belowCode: 'pluckedSnapPizzicatoBelow',\r\n        between_lines: false,\r\n    },\r\n    ah: { code: 'stringsHarmonic', between_lines: false },\r\n    'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false },\r\n    'a@a': { code: 'fermataAbove', between_lines: false },\r\n    'a@u': { code: 'fermataBelow', between_lines: false },\r\n    'a@s': { aboveCode: 'fermataShortAbove', belowCode: 'fermataShortBelow', between_lines: false },\r\n    'a@as': { code: 'fermataShortAbove', between_lines: false },\r\n    'a@us': { code: 'fermataShortBelow', between_lines: false },\r\n    'a@l': { aboveCode: 'fermataLongAbove', belowCode: 'fermataLongBelow', between_lines: false },\r\n    'a@al': { code: 'fermataLongAbove', between_lines: false },\r\n    'a@ul': { code: 'fermataLongBelow', between_lines: false },\r\n    'a@vl': { aboveCode: 'fermataVeryLongAbove', belowCode: 'fermataVeryLongBelow', between_lines: false },\r\n    'a@avl': { code: 'fermataVeryLongAbove', between_lines: false },\r\n    'a@uvl': { code: 'fermataVeryLongBelow', between_lines: false },\r\n    'a|': { code: 'stringsUpBow', between_lines: false },\r\n    am: { code: 'stringsDownBow', between_lines: false },\r\n    'a,': { code: 'pictChokeCymbal', between_lines: false }, // Choked\r\n};\r\nconst ornaments = {\r\n    mordent: { code: 'ornamentShortTrill' },\r\n    mordent_inverted: { code: 'ornamentMordent' },\r\n    turn: { code: 'ornamentTurn' },\r\n    turn_inverted: { code: 'ornamentTurnSlash' },\r\n    tr: { code: 'ornamentTrill' },\r\n    upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },\r\n    downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\r\n    prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },\r\n    pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },\r\n    upmordent: { code: 'ornamentPrecompSlideTrillBach' },\r\n    downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\r\n    lineprall: { code: 'ornamentPrecompAppoggTrill' },\r\n    prallprall: { code: 'ornamentTremblement' },\r\n    scoop: { code: 'brassScoop' },\r\n    doit: { code: 'brassDoitMedium' },\r\n    fall: { code: 'brassFallLipShort' },\r\n    doitLong: { code: 'brassLiftMedium' },\r\n    fallLong: { code: 'brassFallRoughMedium' },\r\n    bend: { code: 'brassBend' },\r\n    plungerClosed: { code: 'brassMuteClosed' },\r\n    plungerOpen: { code: 'brassMuteOpen' },\r\n    flip: { code: 'brassFlip' },\r\n    jazzTurn: { code: 'brassJazzTurn' },\r\n    smear: { code: 'brassSmear' },\r\n};\r\nexport class Tables {\r\n    /**\r\n     * @returns the `Font` object at the head of the music font stack.\r\n     */\r\n    static currentMusicFont() {\r\n        if (Tables.MUSIC_FONT_STACK.length === 0) {\r\n            throw new RuntimeError('NoFonts', 'The font stack is empty. See: await Flow.fetchMusicFont(...); Flow.setMusicFont(...).');\r\n        }\r\n        else {\r\n            return Tables.MUSIC_FONT_STACK[0];\r\n        }\r\n    }\r\n    static clefProperties(clef) {\r\n        if (!clef || !(clef in clefs))\r\n            throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\r\n        return clefs[clef];\r\n    }\r\n    /**\r\n     * @param keyOctaveGlyph a string in the format \"key/octave\" (e.g., \"c/5\") or \"key/octave/custom-note-head-code\" (e.g., \"g/5/t3\").\r\n     * @param clef\r\n     * @param params a struct with one option, `octave_shift` for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\r\n     * @returns properties for the specified note.\r\n     */\r\n    // eslint-disable-next-line\r\n    static keyProperties(keyOctaveGlyph, clef = 'treble', params) {\r\n        let options = { octave_shift: 0 };\r\n        if (typeof params === 'object') {\r\n            options = Object.assign(Object.assign({}, options), params);\r\n        }\r\n        const pieces = keyOctaveGlyph.split('/');\r\n        if (pieces.length < 2) {\r\n            throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);\r\n        }\r\n        const key = pieces[0].toUpperCase();\r\n        const value = notesInfo[key];\r\n        if (!value)\r\n            throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);\r\n        if (value.octave)\r\n            pieces[1] = value.octave.toString();\r\n        let octave = parseInt(pieces[1], 10);\r\n        // Octave_shift is the shift to compensate for clef 8va/8vb.\r\n        octave += -1 * options.octave_shift;\r\n        const baseIndex = octave * 7 - 4 * 7;\r\n        let line = (baseIndex + value.index) / 2;\r\n        line += Tables.clefProperties(clef).line_shift;\r\n        let stroke = 0;\r\n        if (line <= 0 && (line * 2) % 2 === 0)\r\n            stroke = 1; // stroke up\r\n        if (line >= 6 && (line * 2) % 2 === 0)\r\n            stroke = -1; // stroke down\r\n        // Integer value for note arithmetic.\r\n        const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : undefined;\r\n        // If the user specified a glyph, overwrite the glyph code.\r\n        const code = value.code;\r\n        const shift_right = value.shift_right;\r\n        let customNoteHeadProps = {};\r\n        if (pieces.length > 2 && pieces[2]) {\r\n            const glyphName = pieces[2].toUpperCase();\r\n            customNoteHeadProps = customNoteHeads[glyphName] || {};\r\n        }\r\n        return Object.assign({ key,\r\n            octave,\r\n            line,\r\n            int_value, accidental: value.accidental, code,\r\n            stroke,\r\n            shift_right, displaced: false }, customNoteHeadProps);\r\n    }\r\n    static integerToNote(integer) {\r\n        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {\r\n            throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);\r\n        }\r\n        const table = {\r\n            0: 'C',\r\n            1: 'C#',\r\n            2: 'D',\r\n            3: 'D#',\r\n            4: 'E',\r\n            5: 'F',\r\n            6: 'F#',\r\n            7: 'G',\r\n            8: 'G#',\r\n            9: 'A',\r\n            10: 'A#',\r\n            11: 'B',\r\n        };\r\n        const noteValue = table[integer];\r\n        if (!noteValue) {\r\n            throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\r\n        }\r\n        return noteValue;\r\n    }\r\n    static tabToGlyph(fret, scale = 1.0) {\r\n        let glyph = undefined;\r\n        let width = 0;\r\n        let shift_y = 0;\r\n        if (fret.toUpperCase() === 'X') {\r\n            const glyphMetrics = new Glyph('accidentalDoubleSharp', Tables.TABLATURE_FONT_SCALE).getMetrics();\r\n            glyph = 'accidentalDoubleSharp';\r\n            if (glyphMetrics.width == undefined || glyphMetrics.height == undefined)\r\n                throw new RuntimeError('InvalidMetrics', 'Width and height required');\r\n            width = glyphMetrics.width;\r\n            shift_y = -glyphMetrics.height / 2;\r\n        }\r\n        else {\r\n            width = Tables.textWidth(fret);\r\n        }\r\n        return {\r\n            text: fret,\r\n            code: glyph,\r\n            getWidth: () => width * scale,\r\n            shift_y,\r\n        };\r\n    }\r\n    // Used by annotation.ts and bend.ts. Clearly this implementation only works for the default font size.\r\n    // TODO: The actual width depends on the font family, size, weight, style.\r\n    static textWidth(text) {\r\n        return 7 * text.toString().length;\r\n    }\r\n    static articulationCodes(artic) {\r\n        return articulations[artic];\r\n    }\r\n    static accidentalCodes(acc) {\r\n        return accidentals[acc];\r\n    }\r\n    static ornamentCodes(acc) {\r\n        return ornaments[acc];\r\n    }\r\n    static keySignature(spec) {\r\n        const keySpec = keySignatures[spec];\r\n        if (!keySpec) {\r\n            throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\r\n        }\r\n        if (!keySpec.acc) {\r\n            return [];\r\n        }\r\n        const accidentalList = {\r\n            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\r\n            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\r\n        };\r\n        const notes = accidentalList[keySpec.acc];\r\n        const acc_list = [];\r\n        for (let i = 0; i < keySpec.num; ++i) {\r\n            const line = notes[i];\r\n            acc_list.push({ type: keySpec.acc, line });\r\n        }\r\n        return acc_list;\r\n    }\r\n    static getKeySignatures() {\r\n        return keySignatures;\r\n    }\r\n    static hasKeySignature(spec) {\r\n        return spec in keySignatures;\r\n    }\r\n    /**\r\n     * Convert duration aliases to the number based duration.\r\n     * If the input isn't an alias, simply return the input.\r\n     * @param duration\r\n     * @returns Example: 'q' -> '4', '8' -> '8'\r\n     */\r\n    static sanitizeDuration(duration) {\r\n        const durationNumber = durationAliases[duration];\r\n        if (durationNumber !== undefined) {\r\n            duration = durationNumber;\r\n        }\r\n        if (durations[duration] === undefined) {\r\n            throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\r\n        }\r\n        return duration;\r\n    }\r\n    /** Convert the `duration` to a fraction. */\r\n    static durationToFraction(duration) {\r\n        return new Fraction().parse(Tables.sanitizeDuration(duration));\r\n    }\r\n    /** Convert the `duration` to a number. */\r\n    static durationToNumber(duration) {\r\n        return Tables.durationToFraction(duration).value();\r\n    }\r\n    /* Convert the `duration` to total ticks. */\r\n    static durationToTicks(duration) {\r\n        duration = Tables.sanitizeDuration(duration);\r\n        const ticks = durations[duration];\r\n        if (ticks === undefined) {\r\n            throw new RuntimeError('InvalidDuration');\r\n        }\r\n        return ticks;\r\n    }\r\n    // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\r\n    // The default type is a regular note ('n').\r\n    // eslint-disable-next-line\r\n    static getGlyphProps(duration, type = 'n') {\r\n        duration = Tables.sanitizeDuration(duration);\r\n        // Lookup duration for default glyph head code\r\n        const code = durationCodes[duration];\r\n        if (code === undefined) {\r\n            return undefined;\r\n        }\r\n        // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\r\n        let glyphTypeProperties = code.type[type];\r\n        // If this isn't a standard type, then lookup the custom note head map.\r\n        if (glyphTypeProperties === undefined) {\r\n            // Try and get it from the custom list of note heads\r\n            const customGlyphTypeProperties = customNoteHeads[type.toUpperCase()];\r\n            // If not, then return with nothing.\r\n            if (customGlyphTypeProperties === undefined) {\r\n                return undefined;\r\n            }\r\n            // Otherwise set it as the code_head value\r\n            glyphTypeProperties = Object.assign({ code_head: customGlyphTypeProperties.code }, customGlyphTypeProperties);\r\n        }\r\n        const code_head = glyphTypeProperties.code_head;\r\n        // The default implementation of getWidth() calls Glyph.getWidth(code_head, scale).\r\n        // This can be overridden by an individual glyph type (see slash noteheads below: Tables.SLASH_NOTEHEAD_WIDTH).\r\n        const getWidth = (scale = Tables.NOTATION_FONT_SCALE) => Glyph.getWidth(code_head, scale);\r\n        // Merge duration props for 'duration' with the note head properties.\r\n        return Object.assign(Object.assign(Object.assign({}, code.common), { getWidth: getWidth }), glyphTypeProperties);\r\n    }\r\n}\r\nTables.SOFTMAX_FACTOR = 100;\r\nTables.STEM_WIDTH = 1.5;\r\nTables.STEM_HEIGHT = 35;\r\nTables.STAVE_LINE_THICKNESS = 1;\r\nTables.RENDER_PRECISION_PLACES = 3;\r\nTables.RESOLUTION = RESOLUTION;\r\n/**\r\n * Customize this by calling Flow.setMusicFont(...fontNames);\r\n */\r\nTables.MUSIC_FONT_STACK = [];\r\nTables.NOTATION_FONT_SCALE = 39;\r\nTables.TABLATURE_FONT_SCALE = 39;\r\nTables.SLASH_NOTEHEAD_WIDTH = 15;\r\nTables.STAVE_LINE_DISTANCE = 10;\r\n// HACK:\r\n// Since text origins are positioned at the baseline, we must\r\n// compensate for the ascender of the text. Of course, 1 staff space is\r\n// a very poor approximation.\r\n//\r\n// This will be deprecated in the future. This is a temporary solution until\r\n// we have more robust text metrics.\r\nTables.TEXT_HEIGHT_OFFSET_HACK = 1;\r\nTables.accidentalMap = accidentals;\r\nTables.accidentalColumnsTable = accidentalColumns;\r\nTables.unicode = {\r\n    // ♯ accidental sharp\r\n    sharp: String.fromCharCode(0x266f),\r\n    // ♭ accidental flat\r\n    flat: String.fromCharCode(0x266d),\r\n    // ♮ accidental natural\r\n    natural: String.fromCharCode(0x266e),\r\n    // △ major seventh\r\n    triangle: String.fromCharCode(0x25b3),\r\n    // ø half-diminished\r\n    'o-with-slash': String.fromCharCode(0x00f8),\r\n    // ° diminished\r\n    degrees: String.fromCharCode(0x00b0),\r\n    // ○ diminished\r\n    circle: String.fromCharCode(0x25cb),\r\n};\r\n/* The list of valid note types. Used by note.ts during parseNoteStruct(). */\r\nTables.validTypes = validNoteTypes;\r\n// Default time signature.\r\nTables.TIME4_4 = {\r\n    num_beats: 4,\r\n    beat_value: 4,\r\n    resolution: RESOLUTION,\r\n};\r\n// 1/2, 1, 2, 4, 8, 16, 32, 64, 128\r\n// NOTE: There is no 256 here! However, there are other mentions of 256 in this file.\r\n// For example, in durations has a 256 key, and sanitizeDuration() can return 256.\r\n// The sanitizeDuration() bit may need to be removed by 0xfe.\r\n// eslint-disable-next-line\r\nconst durationCodes = {\r\n    '1/2': {\r\n        common: {\r\n            stem: false,\r\n            stem_offset: 0,\r\n            flag: false,\r\n            stem_up_extension: -Tables.STEM_HEIGHT,\r\n            stem_down_extension: -Tables.STEM_HEIGHT,\r\n            tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\r\n            tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\r\n            dot_shiftY: 0,\r\n            line_above: 0,\r\n            line_below: 0,\r\n        },\r\n        type: {\r\n            n: {\r\n                // Breve note\r\n                code_head: 'noteheadDoubleWhole',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadDoubleWhole', scale);\r\n                // },\r\n            },\r\n            h: {\r\n                // Breve note harmonic\r\n                code_head: 'unpitchedPercussionClef1',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('unpitchedPercussionClef1', scale);\r\n                // },\r\n            },\r\n            m: {\r\n                // Breve note muted\r\n                code_head: 'vexNoteHeadMutedBreve',\r\n                stem_offset: 0,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('vexNoteHeadMutedBreve', scale);\r\n                // },\r\n            },\r\n            r: {\r\n                // Breve rest\r\n                code_head: 'restDoubleWhole',\r\n                rest: true,\r\n                position: 'B/5',\r\n                dot_shiftY: 0.5,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('restDoubleWhole', scale);\r\n                // },\r\n            },\r\n            s: {\r\n                // Breve note slash -\r\n                // Drawn with canvas primitives\r\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\r\n                position: 'B/4',\r\n            },\r\n            g: {\r\n                // Ghostnote\r\n                code_head: 'noteheadDoubleWhole',\r\n            },\r\n        },\r\n    },\r\n    1: {\r\n        common: {\r\n            stem: false,\r\n            stem_offset: 0,\r\n            flag: false,\r\n            stem_up_extension: -Tables.STEM_HEIGHT,\r\n            stem_down_extension: -Tables.STEM_HEIGHT,\r\n            tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\r\n            tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\r\n            dot_shiftY: 0,\r\n            line_above: 0,\r\n            line_below: 0,\r\n        },\r\n        type: {\r\n            n: {\r\n                // Whole note\r\n                code_head: 'noteheadWhole',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadWhole', scale);\r\n                // },\r\n            },\r\n            h: {\r\n                // Whole note harmonic\r\n                code_head: 'noteheadDiamondWhole',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadDiamondWhole', scale);\r\n                // },\r\n            },\r\n            m: {\r\n                // Whole note muted\r\n                code_head: 'noteheadXWhole',\r\n                stem_offset: -3,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadXWhole', scale);\r\n                // },\r\n            },\r\n            r: {\r\n                // Whole rest\r\n                code_head: 'restWhole',\r\n                rest: true,\r\n                position: 'D/5',\r\n                dot_shiftY: 0.5,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('restWhole', scale);\r\n                // },\r\n            },\r\n            s: {\r\n                // Whole note slash\r\n                // Drawn with canvas primitives\r\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\r\n                position: 'B/4',\r\n            },\r\n            g: {\r\n                // Ghostnote\r\n                code_head: 'noteheadWhole',\r\n            },\r\n        },\r\n    },\r\n    2: {\r\n        common: {\r\n            stem: true,\r\n            stem_offset: 0,\r\n            flag: false,\r\n            stem_up_extension: 0,\r\n            stem_down_extension: 0,\r\n            tabnote_stem_up_extension: 0,\r\n            tabnote_stem_down_extension: 0,\r\n            dot_shiftY: 0,\r\n            line_above: 0,\r\n            line_below: 0,\r\n        },\r\n        type: {\r\n            n: {\r\n                // Half note\r\n                code_head: 'noteheadHalf',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadHalf', scale);\r\n                // },\r\n            },\r\n            h: {\r\n                // Half note harmonic\r\n                code_head: 'noteheadDiamondHalf',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadDiamondHalf', scale);\r\n                // },\r\n            },\r\n            m: {\r\n                // Half note muted\r\n                code_head: 'noteheadXHalf',\r\n                stem_offset: -3,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadXHalf', scale);\r\n                // },\r\n            },\r\n            r: {\r\n                // Half rest\r\n                code_head: 'restHalf',\r\n                stem: false,\r\n                rest: true,\r\n                position: 'B/4',\r\n                dot_shiftY: -0.5,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('restHalf', scale);\r\n                // },\r\n            },\r\n            s: {\r\n                // Half note slash\r\n                // Drawn with canvas primitives\r\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\r\n                position: 'B/4',\r\n            },\r\n            g: {\r\n                // Ghostnote\r\n                code_head: 'noteheadHalf',\r\n            },\r\n        },\r\n    },\r\n    4: {\r\n        common: {\r\n            stem: true,\r\n            stem_offset: 0,\r\n            flag: false,\r\n            stem_up_extension: 0,\r\n            stem_down_extension: 0,\r\n            tabnote_stem_up_extension: 0,\r\n            tabnote_stem_down_extension: 0,\r\n            dot_shiftY: 0,\r\n            line_above: 0,\r\n            line_below: 0,\r\n        },\r\n        type: {\r\n            n: {\r\n                // Quarter note\r\n                code_head: 'noteheadBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadBlack', scale);\r\n                // },\r\n            },\r\n            h: {\r\n                // Quarter harmonic\r\n                code_head: 'noteheadDiamondBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\r\n                // },\r\n            },\r\n            m: {\r\n                // Quarter muted\r\n                code_head: 'noteheadXBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadXBlack', scale);\r\n                // },\r\n            },\r\n            r: {\r\n                // Quarter rest\r\n                code_head: 'restQuarter',\r\n                stem: false,\r\n                rest: true,\r\n                position: 'B/4',\r\n                dot_shiftY: -0.5,\r\n                line_above: 1.5,\r\n                line_below: 1.5,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('restQuarter', scale);\r\n                // },\r\n            },\r\n            s: {\r\n                // Quarter slash\r\n                // Drawn with canvas primitives\r\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\r\n                position: 'B/4',\r\n            },\r\n            g: {\r\n                // Ghostnote\r\n                code_head: 'noteheadBlack',\r\n            },\r\n        },\r\n    },\r\n    8: {\r\n        common: {\r\n            stem: true,\r\n            stem_offset: 0,\r\n            flag: true,\r\n            beam_count: 1,\r\n            stem_beam_extension: 0,\r\n            code_flag_upstem: 'flag8thUp',\r\n            code_flag_downstem: 'flag8thDown',\r\n            stem_up_extension: 0,\r\n            stem_down_extension: 0,\r\n            tabnote_stem_up_extension: 0,\r\n            tabnote_stem_down_extension: 0,\r\n            dot_shiftY: 0,\r\n            line_above: 0,\r\n            line_below: 0,\r\n        },\r\n        type: {\r\n            n: {\r\n                // Eighth note\r\n                code_head: 'noteheadBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadBlack', scale);\r\n                // },\r\n            },\r\n            h: {\r\n                // Eighth note harmonic\r\n                code_head: 'noteheadDiamondBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\r\n                // },\r\n            },\r\n            m: {\r\n                // Eighth note muted\r\n                code_head: 'noteheadXBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadXBlack', scale);\r\n                // },\r\n            },\r\n            r: {\r\n                // Eighth rest\r\n                code_head: 'rest8th',\r\n                stem: false,\r\n                flag: false,\r\n                rest: true,\r\n                position: 'B/4',\r\n                dot_shiftY: -0.5,\r\n                line_above: 1.0,\r\n                line_below: 1.0,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('rest8th', scale);\r\n                // },\r\n            },\r\n            s: {\r\n                // Eighth slash\r\n                // Drawn with canvas primitives\r\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\r\n                position: 'B/4',\r\n            },\r\n            g: {\r\n                // Ghostnote\r\n                code_head: 'noteheadBlack',\r\n            },\r\n        },\r\n    },\r\n    16: {\r\n        common: {\r\n            beam_count: 2,\r\n            stem_beam_extension: 0,\r\n            stem: true,\r\n            stem_offset: 0,\r\n            flag: true,\r\n            code_flag_upstem: 'flag16thUp',\r\n            code_flag_downstem: 'flag16thDown',\r\n            stem_up_extension: 0,\r\n            stem_down_extension: 0,\r\n            tabnote_stem_up_extension: 0,\r\n            tabnote_stem_down_extension: 0,\r\n            dot_shiftY: 0,\r\n            line_above: 0,\r\n            line_below: 0,\r\n        },\r\n        type: {\r\n            n: {\r\n                // Sixteenth note\r\n                code_head: 'noteheadBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadBlack', scale);\r\n                // },\r\n            },\r\n            h: {\r\n                // Sixteenth note harmonic\r\n                code_head: 'noteheadDiamondBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\r\n                // },\r\n            },\r\n            m: {\r\n                // Sixteenth note muted\r\n                code_head: 'noteheadXBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadXBlack', scale);\r\n                // },\r\n            },\r\n            r: {\r\n                // Sixteenth rest\r\n                code_head: 'rest16th',\r\n                stem: false,\r\n                flag: false,\r\n                rest: true,\r\n                position: 'B/4',\r\n                dot_shiftY: -0.5,\r\n                line_above: 1.0,\r\n                line_below: 2.0,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('rest16th', scale);\r\n                // },\r\n            },\r\n            s: {\r\n                // Sixteenth slash\r\n                // Drawn with canvas primitives\r\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\r\n                position: 'B/4',\r\n            },\r\n            g: {\r\n                // Ghostnote\r\n                code_head: 'noteheadBlack',\r\n            },\r\n        },\r\n    },\r\n    32: {\r\n        common: {\r\n            beam_count: 3,\r\n            stem_beam_extension: 7.5,\r\n            stem: true,\r\n            stem_offset: 0,\r\n            flag: true,\r\n            code_flag_upstem: 'flag32ndUp',\r\n            code_flag_downstem: 'flag32ndDown',\r\n            stem_up_extension: 9,\r\n            stem_down_extension: 9,\r\n            tabnote_stem_up_extension: 9,\r\n            tabnote_stem_down_extension: 9,\r\n            dot_shiftY: 0,\r\n            line_above: 0,\r\n            line_below: 0,\r\n        },\r\n        type: {\r\n            n: {\r\n                // Thirty-second note\r\n                code_head: 'noteheadBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadBlack', scale);\r\n                // },\r\n            },\r\n            h: {\r\n                // Thirty-second harmonic\r\n                code_head: 'noteheadDiamondBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\r\n                // },\r\n            },\r\n            m: {\r\n                // Thirty-second muted\r\n                code_head: 'noteheadXBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadXBlack', scale);\r\n                // },\r\n            },\r\n            r: {\r\n                // Thirty-second rest\r\n                code_head: 'rest32nd',\r\n                stem: false,\r\n                flag: false,\r\n                rest: true,\r\n                position: 'B/4',\r\n                dot_shiftY: -1.5,\r\n                line_above: 2.0,\r\n                line_below: 2.0,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('rest32nd', scale);\r\n                // },\r\n            },\r\n            s: {\r\n                // Thirty-second slash\r\n                // Drawn with canvas primitives\r\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\r\n                position: 'B/4',\r\n            },\r\n            g: {\r\n                // Ghostnote\r\n                code_head: 'noteheadBlack',\r\n            },\r\n        },\r\n    },\r\n    64: {\r\n        common: {\r\n            beam_count: 4,\r\n            stem_beam_extension: 15,\r\n            stem: true,\r\n            stem_offset: 0,\r\n            flag: true,\r\n            code_flag_upstem: 'flag64thUp',\r\n            code_flag_downstem: 'flag64thDown',\r\n            stem_up_extension: 13,\r\n            stem_down_extension: 13,\r\n            tabnote_stem_up_extension: 13,\r\n            tabnote_stem_down_extension: 13,\r\n            dot_shiftY: 0,\r\n            line_above: 0,\r\n            line_below: 0,\r\n        },\r\n        type: {\r\n            n: {\r\n                // Sixty-fourth note\r\n                code_head: 'noteheadBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadBlack', scale);\r\n                // },\r\n            },\r\n            h: {\r\n                // Sixty-fourth harmonic\r\n                code_head: 'noteheadDiamondBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\r\n                // },\r\n            },\r\n            m: {\r\n                // Sixty-fourth muted\r\n                code_head: 'noteheadXBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadXBlack', scale);\r\n                // },\r\n            },\r\n            r: {\r\n                // Sixty-fourth rest\r\n                code_head: 'rest64th',\r\n                stem: false,\r\n                flag: false,\r\n                rest: true,\r\n                position: 'B/4',\r\n                dot_shiftY: -1.5,\r\n                line_above: 2.0,\r\n                line_below: 3.0,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('rest64th', scale);\r\n                // },\r\n            },\r\n            s: {\r\n                // Sixty-fourth slash\r\n                // Drawn with canvas primitives\r\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\r\n                position: 'B/4',\r\n            },\r\n            g: {\r\n                // Ghostnote\r\n                code_head: 'noteheadBlack',\r\n            },\r\n        },\r\n    },\r\n    128: {\r\n        common: {\r\n            beam_count: 5,\r\n            stem_beam_extension: 22.5,\r\n            stem: true,\r\n            stem_offset: 0,\r\n            flag: true,\r\n            code_flag_upstem: 'flag128thUp',\r\n            code_flag_downstem: 'flag128thDown',\r\n            stem_up_extension: 22,\r\n            stem_down_extension: 22,\r\n            tabnote_stem_up_extension: 22,\r\n            tabnote_stem_down_extension: 22,\r\n            dot_shiftY: 0,\r\n            line_above: 0,\r\n            line_below: 0,\r\n        },\r\n        type: {\r\n            n: {\r\n                // Hundred-twenty-eight note\r\n                code_head: 'noteheadBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadBlack', scale);\r\n                // },\r\n            },\r\n            h: {\r\n                // Hundred-twenty-eight harmonic\r\n                code_head: 'noteheadDiamondBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\r\n                // },\r\n            },\r\n            m: {\r\n                // Hundred-twenty-eight muted\r\n                code_head: 'noteheadXBlack',\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('noteheadXBlack', scale);\r\n                // },\r\n            },\r\n            r: {\r\n                // Hundred-twenty-eight rest\r\n                code_head: 'rest128th',\r\n                stem: false,\r\n                flag: false,\r\n                rest: true,\r\n                position: 'B/4',\r\n                dot_shiftY: -2.5,\r\n                line_above: 3.0,\r\n                line_below: 3.0,\r\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\r\n                //   return Glyph.getWidth('rest128th', scale);\r\n                // },\r\n            },\r\n            s: {\r\n                // Hundred-twenty-eight slash\r\n                // Drawn with canvas primitives\r\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\r\n                position: 'B/4',\r\n            },\r\n            g: {\r\n                // Ghostnote\r\n                code_head: 'noteheadBlack',\r\n            },\r\n        },\r\n    },\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n//\r\n// The file implements notes for Tablature notation. This consists of one or\r\n// more fret positions, and can either be drawn with or without stems.\r\n//\r\n// See `tests/tabnote_tests.ts` for usage examples.\r\nimport { Font } from './font';\r\nimport { Glyph } from './glyph';\r\nimport { Modifier } from './modifier';\r\nimport { Stem } from './stem';\r\nimport { StemmableNote } from './stemmablenote';\r\nimport { Tables } from './tables';\r\nimport { Category, isDot } from './typeguard';\r\nimport { defined, RuntimeError } from './util';\r\n// Gets the unused strings grouped together if consecutive.\r\n//\r\n// Parameters:\r\n// * num_lines - The number of lines\r\n// * strings_used - An array of numbers representing which strings have fret positions\r\nfunction getUnusedStringGroups(num_lines, strings_used) {\r\n    const stem_through = [];\r\n    let group = [];\r\n    for (let string = 1; string <= num_lines; string++) {\r\n        const is_used = strings_used.indexOf(string) > -1;\r\n        if (!is_used) {\r\n            group.push(string);\r\n        }\r\n        else {\r\n            stem_through.push(group);\r\n            group = [];\r\n        }\r\n    }\r\n    if (group.length > 0)\r\n        stem_through.push(group);\r\n    return stem_through;\r\n}\r\n// Gets groups of points that outline the partial stem lines\r\n// between fret positions\r\n//\r\n// Parameters:\r\n// * stem_Y - The `y` coordinate the stem is located on\r\n// * unused_strings - An array of groups of unused strings\r\n// * stave - The stave to use for reference\r\n// * stem_direction - The direction of the stem\r\nfunction getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {\r\n    const up_stem = stem_direction !== 1;\r\n    const down_stem = stem_direction !== -1;\r\n    const line_spacing = stave.getSpacingBetweenLines();\r\n    const total_lines = stave.getNumLines();\r\n    const stem_lines = [];\r\n    unused_strings.forEach((strings) => {\r\n        const containsLastString = strings.indexOf(total_lines) > -1;\r\n        const containsFirstString = strings.indexOf(1) > -1;\r\n        if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {\r\n            return;\r\n        }\r\n        // If there's only one string in the group, push a duplicate value.\r\n        // We do this because we need 2 strings to convert into upper/lower y\r\n        // values.\r\n        if (strings.length === 1) {\r\n            strings.push(strings[0]);\r\n        }\r\n        const line_ys = [];\r\n        // Iterate through each group string and store it's y position\r\n        strings.forEach((string, index, strings) => {\r\n            const isTopBound = string === 1;\r\n            const isBottomBound = string === total_lines;\r\n            // Get the y value for the appropriate staff line,\r\n            // we adjust for a 0 index array, since string numbers are index 1\r\n            let y = stave.getYForLine(string - 1);\r\n            // Unless the string is the first or last, add padding to each side\r\n            // of the line\r\n            if (index === 0 && !isTopBound) {\r\n                y -= line_spacing / 2 - 1;\r\n            }\r\n            else if (index === strings.length - 1 && !isBottomBound) {\r\n                y += line_spacing / 2 - 1;\r\n            }\r\n            // Store the y value\r\n            line_ys.push(y);\r\n            // Store a subsequent y value connecting this group to the main\r\n            // stem above/below the stave if it's the top/bottom string\r\n            if (stem_direction === 1 && isTopBound) {\r\n                line_ys.push(stem_y - 2);\r\n            }\r\n            else if (stem_direction === -1 && isBottomBound) {\r\n                line_ys.push(stem_y + 2);\r\n            }\r\n        });\r\n        // Add the sorted y values to the\r\n        stem_lines.push(line_ys.sort((a, b) => a - b));\r\n    });\r\n    return stem_lines;\r\n}\r\nexport class TabNote extends StemmableNote {\r\n    // Initialize the TabNote with a `noteStruct` full of properties\r\n    // and whether to `draw_stem` when rendering the note\r\n    constructor(noteStruct, draw_stem = false) {\r\n        super(noteStruct);\r\n        this.glyphs = [];\r\n        // Return the number of the greatest string, which is the string lowest on the display\r\n        this.greatestString = () => {\r\n            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));\r\n        };\r\n        // Return the number of the least string, which is the string highest on the display\r\n        this.leastString = () => {\r\n            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));\r\n        };\r\n        this.ghost = false; // Renders parenthesis around notes\r\n        // Note properties\r\n        // The fret positions in the note. An array of `{ str: X, fret: X }`\r\n        this.positions = noteStruct.positions || [];\r\n        // Render Options\r\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \r\n            // font size for note heads and rests\r\n            glyph_font_scale: Tables.TABLATURE_FONT_SCALE, \r\n            // Flag to draw a stem\r\n            draw_stem, \r\n            // Flag to draw dot modifiers\r\n            draw_dots: draw_stem, \r\n            // Flag to extend the main stem through the stave and fret positions\r\n            draw_stem_through_stave: false, \r\n            // vertical shift from stave line\r\n            y_shift: 0, \r\n            // normal glyph scale\r\n            scale: 1.0, \r\n            // default tablature font\r\n            font: `${Font.SIZE}pt ${Font.SANS_SERIF}` });\r\n        this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\r\n        defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\r\n        this.buildStem();\r\n        if (noteStruct.stem_direction) {\r\n            this.setStemDirection(noteStruct.stem_direction);\r\n        }\r\n        else {\r\n            this.setStemDirection(Stem.UP);\r\n        }\r\n        // Renders parenthesis around notes\r\n        this.ghost = false;\r\n        this.updateWidth();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.TabNote;\r\n    }\r\n    reset() {\r\n        super.reset();\r\n        if (this.stave)\r\n            this.setStave(this.stave);\r\n        return this;\r\n    }\r\n    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\r\n    // Often used for indicating frets that are being bent to\r\n    setGhost(ghost) {\r\n        this.ghost = ghost;\r\n        this.updateWidth();\r\n        return this;\r\n    }\r\n    // Determine if the note has a stem\r\n    hasStem() {\r\n        if (this.render_options.draw_stem)\r\n            return true;\r\n        return false;\r\n    }\r\n    // Get the default stem extension for the note\r\n    getStemExtension() {\r\n        const glyph = this.getGlyph();\r\n        if (this.stem_extension_override != null) {\r\n            return this.stem_extension_override;\r\n        }\r\n        if (glyph) {\r\n            return this.getStemDirection() === Stem.UP ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;\r\n        }\r\n        return 0;\r\n    }\r\n    // Calculate and store the width of the note\r\n    updateWidth() {\r\n        this.glyphs = [];\r\n        this.width = 0;\r\n        for (let i = 0; i < this.positions.length; ++i) {\r\n            let fret = this.positions[i].fret;\r\n            if (this.ghost)\r\n                fret = '(' + fret + ')';\r\n            const glyph = Tables.tabToGlyph(fret.toString(), this.render_options.scale);\r\n            this.glyphs.push(glyph);\r\n            this.width = Math.max(glyph.getWidth(), this.width);\r\n        }\r\n        // For some reason we associate a notehead glyph with a TabNote, and this\r\n        // glyph is used for certain width calculations. Of course, this is totally\r\n        // incorrect since a notehead is a poor approximation for the dimensions of\r\n        // a fret number which can have multiple digits. As a result, we must\r\n        // overwrite getWidth() to return the correct width\r\n        this.glyph.getWidth = () => this.width;\r\n    }\r\n    // Set the `stave` to the note\r\n    setStave(stave) {\r\n        super.setStave(stave);\r\n        const ctx = stave.getContext();\r\n        this.setContext(ctx);\r\n        // Calculate the fret number width based on font used\r\n        if (ctx) {\r\n            this.width = 0;\r\n            for (let i = 0; i < this.glyphs.length; ++i) {\r\n                const glyph = this.glyphs[i];\r\n                const text = '' + glyph.text;\r\n                if (text.toUpperCase() !== 'X') {\r\n                    ctx.save();\r\n                    ctx.setFont(this.render_options.font);\r\n                    glyph.width = ctx.measureText(text).width;\r\n                    ctx.restore();\r\n                    glyph.getWidth = () => glyph.width;\r\n                }\r\n                this.width = Math.max(glyph.getWidth(), this.width);\r\n            }\r\n            this.glyph.getWidth = () => this.width;\r\n        }\r\n        // we subtract 1 from `line` because getYForLine expects a 0-based index,\r\n        // while the position.str is a 1-based index\r\n        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\r\n        this.setYs(ys);\r\n        if (this.stem) {\r\n            this.stem.setYBounds(this.getStemY(), this.getStemY());\r\n        }\r\n        return this;\r\n    }\r\n    // Get the fret positions for the note\r\n    getPositions() {\r\n        return this.positions;\r\n    }\r\n    // Get the default `x` and `y` coordinates for a modifier at a specific\r\n    // `position` at a fret position `index`\r\n    getModifierStartXY(position, index) {\r\n        if (!this.preFormatted) {\r\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\r\n        }\r\n        if (this.ys.length === 0) {\r\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\r\n        }\r\n        let x = 0;\r\n        if (position === Modifier.Position.LEFT) {\r\n            x = -1 * 2; // FIXME: modifier padding, move to font file\r\n        }\r\n        else if (position === Modifier.Position.RIGHT) {\r\n            x = this.width + 2; // FIXME: modifier padding, move to font file\r\n        }\r\n        else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\r\n            const note_glyph_width = this.glyph.getWidth();\r\n            x = note_glyph_width / 2;\r\n        }\r\n        return {\r\n            x: this.getAbsoluteX() + x,\r\n            y: this.ys[index],\r\n        };\r\n    }\r\n    // Get the default line for rest\r\n    getLineForRest() {\r\n        return Number(this.positions[0].str);\r\n    }\r\n    // Pre-render formatting\r\n    preFormat() {\r\n        if (this.preFormatted)\r\n            return;\r\n        if (this.modifierContext)\r\n            this.modifierContext.preFormat();\r\n        // width is already set during init()\r\n        this.preFormatted = true;\r\n    }\r\n    // Get the x position for the stem\r\n    getStemX() {\r\n        return this.getCenterGlyphX();\r\n    }\r\n    // Get the y position for the stem\r\n    getStemY() {\r\n        const num_lines = this.checkStave().getNumLines();\r\n        // The decimal staff line amounts provide optimal spacing between the\r\n        // fret number and the stem\r\n        const stemUpLine = -0.5;\r\n        const stemDownLine = num_lines - 0.5;\r\n        const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\r\n        return this.checkStave().getYForLine(stemStartLine);\r\n    }\r\n    // Get the stem extents for the tabnote\r\n    getStemExtents() {\r\n        return this.checkStem().getExtents();\r\n    }\r\n    // Draw the fal onto the context\r\n    drawFlag() {\r\n        var _a;\r\n        const { beam, glyph, render_options: { draw_stem }, } = this;\r\n        const context = this.checkContext();\r\n        const shouldDrawFlag = beam == undefined && draw_stem;\r\n        // Now it's the flag's turn.\r\n        if (glyph.flag && shouldDrawFlag) {\r\n            const flag_x = this.getStemX();\r\n            const flag_y = this.getStemDirection() === Stem.DOWN\r\n                ? // Down stems are below the note head and have flags on the right.\r\n                    this.getStemY() - this.checkStem().getHeight() - (this.glyph ? this.glyph.stem_down_extension : 0)\r\n                : // Up stems are above the note head and have flags on the right.\r\n                    this.getStemY() - this.checkStem().getHeight() + (this.glyph ? this.glyph.stem_up_extension : 0);\r\n            // Draw the Flag\r\n            //this.flag?.setOptions({ category: 'flag.tabStem' });\r\n            (_a = this.flag) === null || _a === void 0 ? void 0 : _a.render(context, flag_x, flag_y);\r\n            //Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code, { category: 'flag.tabStem' });\r\n        }\r\n    }\r\n    // Render the modifiers onto the context.\r\n    drawModifiers() {\r\n        this.modifiers.forEach((modifier) => {\r\n            // Only draw the dots if enabled.\r\n            if (isDot(modifier) && !this.render_options.draw_dots) {\r\n                return;\r\n            }\r\n            modifier.setContext(this.getContext());\r\n            modifier.drawWithStyle();\r\n        });\r\n    }\r\n    // Render the stem extension through the fret positions\r\n    drawStemThrough() {\r\n        const stemX = this.getStemX();\r\n        const stemY = this.getStemY();\r\n        const ctx = this.checkContext();\r\n        const drawStem = this.render_options.draw_stem;\r\n        const stemThrough = this.render_options.draw_stem_through_stave;\r\n        if (drawStem && stemThrough) {\r\n            const numLines = this.checkStave().getNumLines();\r\n            const stringsUsed = this.positions.map((position) => Number(position.str));\r\n            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);\r\n            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());\r\n            ctx.save();\r\n            ctx.setLineWidth(Stem.WIDTH);\r\n            stemLines.forEach((bounds) => {\r\n                if (bounds.length === 0)\r\n                    return;\r\n                ctx.beginPath();\r\n                ctx.moveTo(stemX, bounds[0]);\r\n                ctx.lineTo(stemX, bounds[bounds.length - 1]);\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n            });\r\n            ctx.restore();\r\n        }\r\n    }\r\n    // Render the fret positions onto the context\r\n    drawPositions() {\r\n        const ctx = this.checkContext();\r\n        const x = this.getAbsoluteX();\r\n        const ys = this.ys;\r\n        for (let i = 0; i < this.positions.length; ++i) {\r\n            const y = ys[i] + this.render_options.y_shift;\r\n            const glyph = this.glyphs[i];\r\n            // Center the fret text beneath the notation note head\r\n            const note_glyph_width = this.glyph.getWidth();\r\n            const tab_x = x + note_glyph_width / 2 - glyph.getWidth() / 2;\r\n            // FIXME: Magic numbers.\r\n            ctx.clearRect(tab_x - 2, y - 3, glyph.getWidth() + 4, 6);\r\n            if (glyph.code) {\r\n                Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyph.code);\r\n            }\r\n            else {\r\n                ctx.save();\r\n                ctx.setFont(this.render_options.font);\r\n                const text = glyph.text.toString();\r\n                ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\r\n                ctx.restore();\r\n            }\r\n        }\r\n    }\r\n    // The main rendering function for the entire note.\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        if (this.ys.length === 0) {\r\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\r\n        }\r\n        this.setRendered();\r\n        const render_stem = this.beam == undefined && this.render_options.draw_stem;\r\n        ctx.openGroup('tabnote', undefined, { pointerBBox: true });\r\n        this.drawPositions();\r\n        this.drawStemThrough();\r\n        if (this.stem && render_stem) {\r\n            const stem_x = this.getStemX();\r\n            this.stem.setNoteHeadXBounds(stem_x, stem_x);\r\n            ctx.openGroup('stem', undefined, { pointerBBox: true });\r\n            this.stem.setContext(ctx).draw();\r\n            ctx.closeGroup();\r\n        }\r\n        this.drawFlag();\r\n        this.drawModifiers();\r\n        ctx.closeGroup();\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// This class implements varies types of ties between contiguous notes. The\r\n// ties include: regular ties, hammer ons, pull offs, and slides.\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { TabTie } from './tabtie';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport class TabSlide extends TabTie {\r\n    /**\r\n     * @param notes is a struct of the form:\r\n     *  {\r\n     *    first_note: Note,\r\n     *    last_note: Note,\r\n     *    first_indices: [n1, n2, n3],\r\n     *    last_indices: [n1, n2, n3]\r\n     *  }\r\n     * @param notes.first_note the starting note of the slide\r\n     * @param notes.last_note the ending note of the slide\r\n     * @param notes.first_indices specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\r\n     * @param notes.last_indices currently unused. we assume it's the same as first_indices.\r\n     *\r\n     * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\r\n     */\r\n    constructor(notes, direction) {\r\n        super(notes, 'sl.');\r\n        // Determine the direction automatically if it is not provided.\r\n        if (!direction) {\r\n            let first_fret = notes.first_note.getPositions()[0].fret;\r\n            if (typeof first_fret === 'string') {\r\n                first_fret = parseInt(first_fret, 10);\r\n            }\r\n            let last_fret = notes.last_note.getPositions()[0].fret;\r\n            if (typeof last_fret === 'string') {\r\n                last_fret = parseInt(last_fret, 10);\r\n            }\r\n            // If either of the frets are 'X', parseInt() above will return NaN.\r\n            // Choose TabSlide.SLIDE_UP by default.\r\n            if (isNaN(first_fret) || isNaN(last_fret)) {\r\n                direction = TabSlide.SLIDE_UP;\r\n            }\r\n            else {\r\n                direction = first_fret > last_fret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\r\n            }\r\n        }\r\n        this.direction = direction;\r\n        this.render_options.cp1 = 11;\r\n        this.render_options.cp2 = 14;\r\n        this.render_options.y_shift = 0.5;\r\n        this.resetFont();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.TabSlide;\r\n    }\r\n    static get SLIDE_UP() {\r\n        return 1;\r\n    }\r\n    static get SLIDE_DOWN() {\r\n        return -1;\r\n    }\r\n    static createSlideUp(notes) {\r\n        return new TabSlide(notes, TabSlide.SLIDE_UP);\r\n    }\r\n    static createSlideDown(notes) {\r\n        return new TabSlide(notes, TabSlide.SLIDE_DOWN);\r\n    }\r\n    renderTie(params) {\r\n        if (params.first_ys.length === 0 || params.last_ys.length === 0) {\r\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\r\n        }\r\n        const ctx = this.checkContext();\r\n        const first_x_px = params.first_x_px;\r\n        const first_ys = params.first_ys;\r\n        const last_x_px = params.last_x_px;\r\n        const direction = params.direction;\r\n        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\r\n            throw new RuntimeError('BadSlide', 'Invalid slide direction');\r\n        }\r\n        // eslint-disable-next-line\r\n        const first_indices = this.notes.first_indices;\r\n        for (let i = 0; i < first_indices.length; ++i) {\r\n            const slide_y = first_ys[first_indices[i]] + this.render_options.y_shift;\r\n            if (isNaN(slide_y)) {\r\n                throw new RuntimeError('BadArguments', 'Bad indices for slide rendering.');\r\n            }\r\n            ctx.beginPath();\r\n            ctx.moveTo(first_x_px, slide_y + 3 * direction);\r\n            ctx.lineTo(last_x_px, slide_y - 3 * direction);\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n        }\r\n        this.setRendered();\r\n    }\r\n}\r\nTabSlide.TEXT_FONT = {\r\n    family: Font.SERIF,\r\n    size: 10,\r\n    weight: FontWeight.BOLD,\r\n    style: FontStyle.ITALIC,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\nimport { Stave } from './stave';\r\nimport { Category } from './typeguard';\r\nexport class TabStave extends Stave {\r\n    static get CATEGORY() {\r\n        return Category.TabStave;\r\n    }\r\n    constructor(x, y, width, options) {\r\n        const tab_options = Object.assign({ spacing_between_lines_px: 13, num_lines: 6, top_text_position: 1 }, options);\r\n        super(x, y, width, tab_options);\r\n    }\r\n    getYForGlyphs() {\r\n        return this.getYForLine(2.5);\r\n    }\r\n    // Deprecated\r\n    addTabGlyph() {\r\n        this.addClef('tab');\r\n        return this;\r\n    }\r\n}\r\n","// / [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n// This class implements varies types of ties between contiguous notes. The\r\n// ties include: regular ties, hammer ons, pull offs, and slides.\r\nimport { StaveTie } from './stavetie';\r\nimport { Category } from './typeguard';\r\nexport class TabTie extends StaveTie {\r\n    static get CATEGORY() {\r\n        return Category.TabTie;\r\n    }\r\n    static createHammeron(notes) {\r\n        return new TabTie(notes, 'H');\r\n    }\r\n    static createPulloff(notes) {\r\n        return new TabTie(notes, 'P');\r\n    }\r\n    /**\r\n     * @param notes is a struct that has:\r\n     *  {\r\n     *    first_note: Note,\r\n     *    last_note: Note,\r\n     *    first_indices: [n1, n2, n3],\r\n     *    last_indices: [n1, n2, n3]\r\n     *  }\r\n     *\r\n     * @param text\r\n     */\r\n    constructor(notes, text) {\r\n        super(notes, text);\r\n        this.render_options.cp1 = 9;\r\n        this.render_options.cp2 = 11;\r\n        this.render_options.y_shift = 3;\r\n        this.direction = -1; // Tab tie's are always face up.\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Cyril Silverman\r\n//\r\n// This file implements `TextBrackets` which extend between two notes.\r\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\r\n// using this class.\r\nimport { Element } from './element';\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Renderer } from './renderer';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { log, RuntimeError } from './util';\r\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (TextBracket.DEBUG)\r\n        log('Vex.Flow.TextBracket', args);\r\n}\r\nexport var TextBracketPosition;\r\n(function (TextBracketPosition) {\r\n    TextBracketPosition[TextBracketPosition[\"TOP\"] = 1] = \"TOP\";\r\n    TextBracketPosition[TextBracketPosition[\"BOTTOM\"] = -1] = \"BOTTOM\";\r\n})(TextBracketPosition || (TextBracketPosition = {}));\r\nexport class TextBracket extends Element {\r\n    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {\r\n        super();\r\n        this.start = start;\r\n        this.stop = stop;\r\n        this.text = text;\r\n        this.superscript = superscript;\r\n        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\r\n        this.line = 1;\r\n        this.resetFont();\r\n        this.render_options = {\r\n            dashed: true,\r\n            dash: [5],\r\n            color: 'black',\r\n            line_width: 1,\r\n            show_bracket: true,\r\n            bracket_height: 8,\r\n            // In the BOTTOM position, the bracket line can extend\r\n            // under the superscript.\r\n            underline_superscript: true,\r\n        };\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.TextBracket;\r\n    }\r\n    static get Position() {\r\n        return TextBracketPosition;\r\n    }\r\n    static get PositionString() {\r\n        return {\r\n            top: TextBracketPosition.TOP,\r\n            bottom: TextBracketPosition.BOTTOM,\r\n        };\r\n    }\r\n    /**\r\n     * @deprecated Use `TextBracket.Position` instead.\r\n     */\r\n    static get Positions() {\r\n        L('Positions is deprecated, use TextBracketPosition instead.');\r\n        return TextBracketPosition;\r\n    }\r\n    /**\r\n     * @deprecated Use `TextBracket.PositionString` instead.\r\n     */\r\n    static get PositionsString() {\r\n        L('PositionsString is deprecated, use PositionString instead.');\r\n        return TextBracket.PositionString;\r\n    }\r\n    /**\r\n     * Apply the text backet styling to the provided context.\r\n     * @param ctx\r\n     * @returns this\r\n     */\r\n    applyStyle(ctx) {\r\n        ctx.setFont(this.font);\r\n        const options = this.render_options;\r\n        ctx.setStrokeStyle(options.color);\r\n        ctx.setFillStyle(options.color);\r\n        ctx.setLineWidth(options.line_width);\r\n        return this;\r\n    }\r\n    // Set whether the bracket line should be `dashed`. You can also\r\n    // optionally set the `dash` pattern by passing in an array of numbers\r\n    setDashed(dashed, dash) {\r\n        this.render_options.dashed = dashed;\r\n        if (dash)\r\n            this.render_options.dash = dash;\r\n        return this;\r\n    }\r\n    // Set the rendering `context` for the octave bracket\r\n    setLine(line) {\r\n        this.line = line;\r\n        return this;\r\n    }\r\n    // Draw the octave bracket on the rendering context\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        let y = 0;\r\n        switch (this.position) {\r\n            case TextBracketPosition.TOP:\r\n                y = this.start.checkStave().getYForTopText(this.line);\r\n                break;\r\n            case TextBracketPosition.BOTTOM:\r\n                y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\r\n                break;\r\n            default:\r\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\r\n        }\r\n        // Get the preliminary start and stop coordintates for the bracket\r\n        const start = { x: this.start.getAbsoluteX(), y };\r\n        const stop = { x: this.stop.getAbsoluteX(), y };\r\n        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\r\n        const bracket_height = this.render_options.bracket_height * this.position;\r\n        ctx.save();\r\n        this.applyStyle(ctx);\r\n        // Draw text\r\n        ctx.fillText(this.text, start.x, start.y);\r\n        // Get the width and height for the octave number\r\n        const main_measure = ctx.measureText(this.text);\r\n        const main_width = main_measure.width;\r\n        const main_height = main_measure.height;\r\n        // Calculate the y position for the super script\r\n        const super_y = start.y - main_height / 2.5;\r\n        // We called this.resetFont() in the constructor, so we know this.textFont is available.\r\n        // eslint-disable-next-line\r\n        const { family, size, weight, style } = this.textFont;\r\n        // To draw the superscript, we scale the font size by 1/1.4.\r\n        const smallerFontSize = Font.scaleSize(size, 0.714286);\r\n        ctx.setFont(family, smallerFontSize, weight, style);\r\n        ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\r\n        // Determine width and height of the superscript\r\n        const super_measure = ctx.measureText(this.superscript);\r\n        const super_width = super_measure.width;\r\n        const super_height = super_measure.height;\r\n        // Setup initial coordinates for the bracket line\r\n        let start_x = start.x;\r\n        let line_y = super_y;\r\n        const end_x = stop.x + this.stop.getGlyph().getWidth();\r\n        // Adjust x and y coordinates based on position\r\n        if (this.position === TextBracketPosition.TOP) {\r\n            start_x += main_width + super_width + 5;\r\n            line_y -= super_height / 2.7;\r\n        }\r\n        else if (this.position === TextBracketPosition.BOTTOM) {\r\n            line_y += super_height / 2.7;\r\n            start_x += main_width + 2;\r\n            if (!this.render_options.underline_superscript) {\r\n                start_x += super_width;\r\n            }\r\n        }\r\n        if (this.render_options.dashed) {\r\n            // Main line\r\n            Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\r\n            // Ending Bracket\r\n            if (this.render_options.show_bracket) {\r\n                Renderer.drawDashedLine(ctx, end_x, line_y + 1 * this.position, end_x, line_y + bracket_height, this.render_options.dash);\r\n            }\r\n        }\r\n        else {\r\n            ctx.beginPath();\r\n            ctx.moveTo(start_x, line_y);\r\n            // Main line\r\n            ctx.lineTo(end_x, line_y);\r\n            if (this.render_options.show_bracket) {\r\n                // Ending bracket\r\n                ctx.lineTo(end_x, line_y + bracket_height);\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n        }\r\n        ctx.restore();\r\n    }\r\n}\r\nTextBracket.DEBUG = false;\r\nTextBracket.TEXT_FONT = {\r\n    family: Font.SERIF,\r\n    size: 15,\r\n    weight: FontWeight.NORMAL,\r\n    style: FontStyle.ITALIC,\r\n};\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Glyph } from './glyph';\r\nimport { Note } from './note';\r\nimport { Category } from './typeguard';\r\nimport { defined, log, RuntimeError } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (TextDynamics.DEBUG)\r\n        log('Vex.Flow.TextDynamics', args);\r\n}\r\n/**\r\n * `TextDynamics` renders traditional\r\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\r\n *\r\n * You can render any dynamics string that contains a combination of\r\n * the following letters:  P, M, F, Z, R, S\r\n */\r\nexport class TextDynamics extends Note {\r\n    /**\r\n     * Create the dynamics marking.\r\n     *\r\n     * A `TextDynamics` object inherits from `Note` so that it can be formatted\r\n     * within a `Voice`.\r\n     *\r\n     * @param noteStruct an object that contains a `duration` property and a\r\n     * `sequence` of letters that represents the letters to render.\r\n     */\r\n    constructor(noteStruct) {\r\n        super(noteStruct);\r\n        this.sequence = (noteStruct.text || '').toLowerCase();\r\n        this.line = noteStruct.line || 0;\r\n        this.glyphs = [];\r\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_size: 40 });\r\n        L('New Dynamics Text: ', this.sequence);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.TextDynamics;\r\n    }\r\n    /** The glyph data for each dynamics letter. */\r\n    static get GLYPHS() {\r\n        return {\r\n            f: {\r\n                code: 'dynamicForte',\r\n                width: 12,\r\n            },\r\n            p: {\r\n                code: 'dynamicPiano',\r\n                width: 14,\r\n            },\r\n            m: {\r\n                code: 'dynamicMezzo',\r\n                width: 17,\r\n            },\r\n            s: {\r\n                code: 'dynamicSforzando',\r\n                width: 10,\r\n            },\r\n            z: {\r\n                code: 'dynamicZ',\r\n                width: 12,\r\n            },\r\n            r: {\r\n                code: 'dynamicRinforzando',\r\n                width: 12,\r\n            },\r\n        };\r\n    }\r\n    /** Set the Stave line on which the note should be placed. */\r\n    setLine(line) {\r\n        this.line = line;\r\n        return this;\r\n    }\r\n    /** Preformat the dynamics text. */\r\n    preFormat() {\r\n        let total_width = 0;\r\n        // length of this.glyphs must be <=\r\n        // length of this.sequence, so if we're formatted before\r\n        // create new glyphs.\r\n        this.glyphs = [];\r\n        // Iterate through each letter\r\n        this.sequence.split('').forEach((letter) => {\r\n            // Get the glyph data for the letter\r\n            const glyph_data = TextDynamics.GLYPHS[letter];\r\n            if (!glyph_data)\r\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\r\n            const size = defined(this.render_options.glyph_font_size);\r\n            const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\r\n            // Add the glyph\r\n            this.glyphs.push(glyph);\r\n            total_width += glyph_data.width;\r\n        });\r\n        // Store the width of the text\r\n        this.setWidth(total_width);\r\n        this.preFormatted = true;\r\n        return this;\r\n    }\r\n    /** Draw the dynamics text on the rendering context. */\r\n    draw() {\r\n        this.setRendered();\r\n        const x = this.getAbsoluteX();\r\n        const y = this.checkStave().getYForLine(this.line + -3);\r\n        L('Rendering Dynamics: ', this.sequence);\r\n        let letter_x = x;\r\n        this.glyphs.forEach((glyph, index) => {\r\n            const current_letter = this.sequence[index];\r\n            glyph.render(this.checkContext(), letter_x, y);\r\n            letter_x += TextDynamics.GLYPHS[current_letter].width;\r\n        });\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\r\nTextDynamics.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { log } from './util';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (TextFormatter.DEBUG)\r\n        log('Vex.Flow.TextFormatter', args);\r\n}\r\n/**\r\n * Text widths are stored in a cache, so we don't have to recompute widths\r\n * for the same font + string combination.\r\n *\r\n * The cache is first keyed by the font information. The key is of the form:\r\n *   `${family}-${size}-${weight}-${style}`\r\n * The second level key is the specific text to be measured.\r\n *\r\n * The stored value is the measured width in `em` units.\r\n *   textWidth == textWidthCache[cacheKey][textToMeasure]\r\n */\r\nconst textWidthCache = {};\r\n/**\r\n * Applications may register additional fonts via `TextFormatter.registerInfo(info)`.\r\n * The metrics for those fonts will be made available to the application.\r\n */\r\nconst registry = {};\r\nexport class TextFormatter {\r\n    /**\r\n     * Use `TextFormatter.create(...)` to build an instance from information previously\r\n     * registered via `TextFormatter.registerInfo(info)`.\r\n     */\r\n    constructor(formatterInfo) {\r\n        /** Font family. */\r\n        this.family = '';\r\n        /** Specified in `pt` units. */\r\n        this.size = 14;\r\n        /** Font metrics are extracted at 1000 upem (units per em). */\r\n        this.resolution = 1000;\r\n        /**\r\n         * For text formatting, we do not require glyph outlines, but instead rely on glyph\r\n         * bounding box metrics such as:\r\n         * ```\r\n         * {\r\n         *    x_min: 48,\r\n         *    x_max: 235,\r\n         *    y_min: -17,\r\n         *    y_max: 734,\r\n         *    ha: 751,\r\n         *    leftSideBearing: 48,\r\n         *    advanceWidth: 286,\r\n         *  }\r\n         * ```\r\n         */\r\n        this.glyphs = {};\r\n        this.serifs = false;\r\n        this.monospaced = false;\r\n        this.italic = false;\r\n        this.bold = false;\r\n        this.superscriptOffset = 0;\r\n        this.subscriptOffset = 0;\r\n        this.maxSizeGlyph = 'H';\r\n        // This is an internal key used to index the `textWidthCache`.\r\n        this.cacheKey = '';\r\n        this.updateParams(formatterInfo);\r\n    }\r\n    /**\r\n     * Return all registered font families.\r\n     */\r\n    static getFontFamilies() {\r\n        const registeredFonts = [];\r\n        for (const fontFamily in registry) {\r\n            const formatterInfo = registry[fontFamily];\r\n            registeredFonts.push(Object.assign({}, formatterInfo));\r\n        }\r\n        return registeredFonts;\r\n    }\r\n    /**\r\n     * Call `TextFormatter.registerInfo(info)` to register font information before using this method.\r\n     *\r\n     * This method creates a formatter for the font that most closely matches the requested font.\r\n     * We compare font family, bold, and italic attributes.\r\n     * This method will return a fallback formatter if there are no matches.\r\n     */\r\n    static create(requestedFont = {}) {\r\n        L('create: ', requestedFont);\r\n        if (!requestedFont.family) {\r\n            requestedFont.family = Font.SANS_SERIF;\r\n        }\r\n        // TODO: One potential (small) optimization is to cache the TextFormatter object\r\n        // returned for each font info. We would probably want to clear the cache if\r\n        // the registry is ever updated.\r\n        const candidates = [];\r\n        // The incoming font family is a string of comma-separated font family names.\r\n        // (e.g., `PetalumaScript, Arial, sans-serif`).\r\n        const requestedFamilies = requestedFont.family.split(/\\s*,\\s*/);\r\n        for (const requestedFamily of requestedFamilies) {\r\n            for (const fontFamily in registry) {\r\n                // Support cases where the registry contains 'Roboto Slab Medium',\r\n                // but the requestedFont.family is 'Roboto Slab'.\r\n                if (fontFamily.startsWith(requestedFamily)) {\r\n                    candidates.push(registry[fontFamily]);\r\n                }\r\n            }\r\n            if (candidates.length > 0) {\r\n                break;\r\n            }\r\n        }\r\n        let formatter;\r\n        if (candidates.length === 0) {\r\n            // No match, so return a fallback text formatter.\r\n            formatter = new TextFormatter(Object.values(registry)[0]);\r\n        }\r\n        else if (candidates.length === 1) {\r\n            formatter = new TextFormatter(candidates[0]);\r\n        }\r\n        else {\r\n            const bold = Font.isBold(requestedFont.weight);\r\n            const italic = Font.isItalic(requestedFont.style);\r\n            const perfectMatch = candidates.find((f) => f.bold === bold && f.italic === italic);\r\n            if (perfectMatch) {\r\n                formatter = new TextFormatter(perfectMatch);\r\n            }\r\n            else {\r\n                const partialMatch = candidates.find((f) => f.italic === italic || f.bold === bold);\r\n                if (partialMatch) {\r\n                    formatter = new TextFormatter(partialMatch);\r\n                }\r\n                else {\r\n                    formatter = new TextFormatter(candidates[0]);\r\n                }\r\n            }\r\n        }\r\n        const fontSize = requestedFont.size;\r\n        if (typeof fontSize !== 'undefined') {\r\n            const fontSizeInPt = Font.convertSizeToPointValue(fontSize);\r\n            formatter.setFontSize(fontSizeInPt);\r\n        }\r\n        return formatter;\r\n    }\r\n    /**\r\n     * @param fontFamily used as a key to the font registry.\r\n     * @returns the same info object that was passed in via `TextFormatter.registerInfo(info)`\r\n     */\r\n    static getInfo(fontFamily) {\r\n        return registry[fontFamily];\r\n    }\r\n    /**\r\n     * Apps may register their own fonts and metrics, and those metrics\r\n     * will be available to the app for formatting.\r\n     *\r\n     * Metrics can be generated from a font file using fontgen_text.js in the tools/fonts directory.\r\n     * @param info\r\n     * @param overwrite\r\n     */\r\n    static registerInfo(info, overwrite = false) {\r\n        L('registerInfo: ', info, overwrite);\r\n        const fontFamily = info.family;\r\n        const currFontInfo = registry[fontFamily];\r\n        if (currFontInfo === undefined || overwrite) {\r\n            registry[fontFamily] = info;\r\n        }\r\n    }\r\n    updateParams(params) {\r\n        if (params.family)\r\n            this.family = params.family;\r\n        if (params.resolution)\r\n            this.resolution = params.resolution;\r\n        if (params.glyphs)\r\n            this.glyphs = params.glyphs;\r\n        if (params.serifs)\r\n            this.serifs = params.serifs;\r\n        if (params.monospaced)\r\n            this.monospaced = params.monospaced;\r\n        if (params.italic)\r\n            this.italic = params.italic;\r\n        if (params.bold)\r\n            this.bold = params.bold;\r\n        if (params.maxSizeGlyph)\r\n            this.maxSizeGlyph = params.maxSizeGlyph;\r\n        if (params.superscriptOffset)\r\n            this.superscriptOffset = params.superscriptOffset;\r\n        if (params.subscriptOffset)\r\n            this.subscriptOffset = params.subscriptOffset;\r\n        this.updateCacheKey();\r\n    }\r\n    /** Create a hash with the current font data, so we can cache computed widths. */\r\n    updateCacheKey() {\r\n        const family = this.family.replace(/\\s+/g, '_');\r\n        const size = this.size;\r\n        const weight = this.bold ? FontWeight.BOLD : FontWeight.NORMAL;\r\n        const style = this.italic ? FontStyle.ITALIC : FontStyle.NORMAL;\r\n        // Use the same key format as SVGContext.\r\n        this.cacheKey = `${family}%${size}%${weight}%${style}`;\r\n    }\r\n    /**\r\n     * The glyphs table is indexed by the character (e.g., 'C', '@').\r\n     * See: robotoslab_glyphs.ts & petalumascript_glyphs.ts.\r\n     */\r\n    getGlyphMetrics(character) {\r\n        if (this.glyphs[character]) {\r\n            return this.glyphs[character];\r\n        }\r\n        else {\r\n            return this.glyphs[this.maxSizeGlyph];\r\n        }\r\n    }\r\n    get maxHeight() {\r\n        const metrics = this.getGlyphMetrics(this.maxSizeGlyph);\r\n        return (metrics.ha / this.resolution) * this.fontSizeInPixels;\r\n    }\r\n    /**\r\n     * Retrieve the character's advanceWidth as a fraction of an `em` unit.\r\n     * For the space character ' ' as defined in the:\r\n     *   petalumascript_glyphs.ts: 250 advanceWidth in the 1000 unitsPerEm font returns 0.25.\r\n     *   robotoslab_glyphs.ts:     509 advanceWidth in the 2048 unitsPerEm font returns 0.2485.\r\n     */\r\n    getWidthForCharacterInEm(c) {\r\n        var _a;\r\n        const metrics = this.getGlyphMetrics(c);\r\n        if (!metrics) {\r\n            // An arbitrary number, close to the `em` width of the '#' and '5' characters in PetalumaScript.\r\n            return 0.65;\r\n        }\r\n        else {\r\n            const advanceWidth = (_a = metrics.advanceWidth) !== null && _a !== void 0 ? _a : 0;\r\n            return advanceWidth / this.resolution;\r\n        }\r\n    }\r\n    /**\r\n     * Retrieve the total width of `text` in `em` units.\r\n     */\r\n    getWidthForTextInEm(text) {\r\n        const key = this.cacheKey;\r\n        // Get the cache for this specific font family, size, weight, style combination.\r\n        // The cache contains previously computed widths for different `text` strings.\r\n        let cachedWidths = textWidthCache[key];\r\n        if (cachedWidths === undefined) {\r\n            cachedWidths = {};\r\n            textWidthCache[key] = cachedWidths;\r\n        }\r\n        let width = cachedWidths[text];\r\n        if (width === undefined) {\r\n            width = 0;\r\n            for (let i = 0; i < text.length; ++i) {\r\n                width += this.getWidthForCharacterInEm(text[i]);\r\n            }\r\n            cachedWidths[text] = width;\r\n        }\r\n        return width;\r\n    }\r\n    /** The width of the text (in `em`) is scaled by the font size (in `px`). */\r\n    getWidthForTextInPx(text) {\r\n        return this.getWidthForTextInEm(text) * this.fontSizeInPixels;\r\n    }\r\n    /**\r\n     * @param size in pt.\r\n     */\r\n    setFontSize(size) {\r\n        this.size = size;\r\n        // The width cache key depends on the current font size.\r\n        this.updateCacheKey();\r\n        return this;\r\n    }\r\n    /** `this.size` is specified in points. Convert to pixels. */\r\n    get fontSizeInPixels() {\r\n        return this.size * Font.scaleToPxFrom.pt;\r\n    }\r\n    getResolution() {\r\n        return this.resolution;\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.TextFormatter.DEBUG` to `true`. */\r\nTextFormatter.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Font, FontStyle, FontWeight } from './font';\r\nimport { Glyph } from './glyph';\r\nimport { Note } from './note';\r\nimport { Category } from './typeguard';\r\nimport { RuntimeError } from './util';\r\nexport var TextJustification;\r\n(function (TextJustification) {\r\n    TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\r\n    TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\r\n    TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\r\n})(TextJustification || (TextJustification = {}));\r\n/**\r\n * `TextNote` is a notation element that is positioned in time. Generally\r\n * meant for objects that sit above/below the staff and inline with each other.\r\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\r\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\r\n */\r\nexport class TextNote extends Note {\r\n    constructor(noteStruct) {\r\n        super(noteStruct);\r\n        this.text = noteStruct.text || '';\r\n        this.superscript = noteStruct.superscript;\r\n        this.subscript = noteStruct.subscript;\r\n        this.setFont(noteStruct.font);\r\n        this.line = noteStruct.line || 0;\r\n        this.smooth = noteStruct.smooth || false;\r\n        this.ignore_ticks = noteStruct.ignore_ticks || false;\r\n        this.justification = TextJustification.LEFT;\r\n        // Determine and set initial note width. Note that the text width is\r\n        // an approximation and isn't very accurate. The only way to accurately\r\n        // measure the length of text is with `CanvasRenderingContext2D.measureText()`.\r\n        if (noteStruct.glyph) {\r\n            const struct = TextNote.GLYPHS[noteStruct.glyph];\r\n            if (!struct)\r\n                throw new RuntimeError('Invalid glyph type: ' + noteStruct.glyph);\r\n            this.glyph = new Glyph(struct.code, 40, { category: 'textNote' });\r\n            this.setWidth(this.glyph.getMetrics().width);\r\n        }\r\n        else {\r\n            this.glyph = undefined;\r\n        }\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.TextNote;\r\n    }\r\n    /** Glyph data. */\r\n    static get GLYPHS() {\r\n        return {\r\n            segno: {\r\n                code: 'segno',\r\n            },\r\n            tr: {\r\n                code: 'ornamentTrill',\r\n            },\r\n            mordent: {\r\n                code: 'ornamentMordent',\r\n            },\r\n            mordent_upper: {\r\n                code: 'ornamentShortTrill',\r\n            },\r\n            mordent_lower: {\r\n                code: 'ornamentMordent',\r\n            },\r\n            f: {\r\n                code: 'dynamicForte',\r\n            },\r\n            p: {\r\n                code: 'dynamicPiano',\r\n            },\r\n            m: {\r\n                code: 'dynamicMezzo',\r\n            },\r\n            s: {\r\n                code: 'dynamicSforzando',\r\n            },\r\n            z: {\r\n                code: 'dynamicZ',\r\n            },\r\n            coda: {\r\n                code: 'coda',\r\n            },\r\n            pedal_open: {\r\n                code: 'keyboardPedalPed',\r\n            },\r\n            pedal_close: {\r\n                code: 'keyboardPedalUp',\r\n            },\r\n            caesura_straight: {\r\n                code: 'caesura',\r\n            },\r\n            caesura_curved: {\r\n                code: 'caesuraCurved',\r\n            },\r\n            breath: {\r\n                code: 'breathMarkComma',\r\n            },\r\n            tick: {\r\n                code: 'breathMarkTick',\r\n            },\r\n            turn: {\r\n                code: 'ornamentTurn',\r\n            },\r\n            turn_inverted: {\r\n                code: 'ornamentTurnSlash',\r\n            },\r\n        };\r\n    }\r\n    /** Set the horizontal justification of the TextNote. */\r\n    setJustification(just) {\r\n        this.justification = just;\r\n        return this;\r\n    }\r\n    /** Set the Stave line on which the note should be placed. */\r\n    setLine(line) {\r\n        this.line = line;\r\n        return this;\r\n    }\r\n    /** Pre-render formatting. */\r\n    preFormat() {\r\n        if (this.preFormatted)\r\n            return;\r\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\r\n        if (this.smooth) {\r\n            this.setWidth(0);\r\n        }\r\n        else {\r\n            if (this.glyph) {\r\n                // Width already set.\r\n            }\r\n            else {\r\n                const ctx = this.checkContext();\r\n                ctx.setFont(this.textFont);\r\n                this.setWidth(ctx.measureText(this.text).width);\r\n            }\r\n        }\r\n        if (this.justification === TextJustification.CENTER) {\r\n            this.leftDisplacedHeadPx = this.width / 2;\r\n        }\r\n        else if (this.justification === TextJustification.RIGHT) {\r\n            this.leftDisplacedHeadPx = this.width;\r\n        }\r\n        // We reposition to the center of the note head\r\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\r\n        this.preFormatted = true;\r\n    }\r\n    /**\r\n     * Renders the TextNote.\r\n     * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\r\n     */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const stave = this.checkStave();\r\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\r\n        this.setRendered();\r\n        // Reposition to center of note head\r\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\r\n        // Align based on tick-context width.\r\n        const width = this.getWidth();\r\n        if (this.justification === TextJustification.CENTER) {\r\n            x -= width / 2;\r\n        }\r\n        else if (this.justification === TextJustification.RIGHT) {\r\n            x -= width;\r\n        }\r\n        let y;\r\n        if (this.glyph) {\r\n            y = stave.getYForLine(this.line + -3);\r\n            this.glyph.render(ctx, x, y);\r\n        }\r\n        else {\r\n            y = stave.getYForLine(this.line + -3);\r\n            this.applyStyle(ctx);\r\n            ctx.setFont(this.textFont);\r\n            ctx.fillText(this.text, x, y);\r\n            const height = ctx.measureText(this.text).height;\r\n            // We called this.setFont(...) in the constructor, so we know this.textFont is available.\r\n            // eslint-disable-next-line\r\n            const { family, size, weight, style } = this.textFont;\r\n            // Scale the font size by 1/1.3.\r\n            const smallerFontSize = Font.scaleSize(size, 0.769231);\r\n            if (this.superscript) {\r\n                ctx.setFont(family, smallerFontSize, weight, style);\r\n                ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);\r\n            }\r\n            if (this.subscript) {\r\n                ctx.setFont(family, smallerFontSize, weight, style);\r\n                ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);\r\n            }\r\n            this.restoreStyle(ctx);\r\n        }\r\n    }\r\n}\r\nTextNote.TEXT_FONT = {\r\n    family: Font.SANS_SERIF,\r\n    size: 12,\r\n    weight: FontWeight.NORMAL,\r\n    style: FontStyle.NORMAL,\r\n};\r\nTextNote.Justification = TextJustification;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Element } from './element';\r\nimport { Fraction } from './fraction';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { defined, RuntimeError } from './util';\r\n/**\r\n * Tickable represents a element that sit on a score and\r\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\r\n */\r\nexport class Tickable extends Element {\r\n    constructor() {\r\n        super();\r\n        this._preFormatted = false;\r\n        this._postFormatted = false;\r\n        // These properties represent the duration of\r\n        // this tickable element.\r\n        this.ticks = new Fraction(0, 1); // Fractional value of ticks\r\n        this.intrinsicTicks = 0; // Floating point value of ticks\r\n        this.tickMultiplier = new Fraction(1, 1);\r\n        // Formatter metrics\r\n        this.width = 0;\r\n        this.x_shift = 0; // Shift from tick context\r\n        this.modifiers = [];\r\n        this.tupletStack = [];\r\n        this.align_center = false;\r\n        this.center_x_shift = 0; // Shift from tick context if center aligned\r\n        // This flag tells the formatter to ignore this tickable during\r\n        // formatting and justification. It is set by tickables such as BarNote.\r\n        this.ignore_ticks = false;\r\n        // This is a space for an external formatting class or function to maintain\r\n        // metrics.\r\n        this.formatterMetrics = {\r\n            // The freedom of a tickable is the distance it can move without colliding\r\n            // with neighboring elements. A formatter can set these values during its\r\n            // formatting pass, which a different formatter can then use to fine tune.\r\n            freedom: { left: 0, right: 0 },\r\n            // The simplified rational duration of this tick as a string. It can be\r\n            // used as an index to a map or hashtable.\r\n            duration: '',\r\n            // The number of formatting iterations undergone.\r\n            iterations: 0,\r\n            // The space in pixels allocated by this formatter, along with the mean space\r\n            // for tickables of this duration, and the deviation from the mean.\r\n            space: {\r\n                used: 0,\r\n                mean: 0,\r\n                deviation: 0,\r\n            },\r\n        };\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Tickable;\r\n    }\r\n    /** Reset the Tickable, this function will be overloaded. */\r\n    reset() {\r\n        return this;\r\n    }\r\n    /** Return the ticks. */\r\n    getTicks() {\r\n        return this.ticks;\r\n    }\r\n    /** Check if it ignores the ticks. */\r\n    shouldIgnoreTicks() {\r\n        return this.ignore_ticks;\r\n    }\r\n    /** Ignore the ticks. */\r\n    setIgnoreTicks(flag) {\r\n        this.ignore_ticks = flag;\r\n        return this;\r\n    }\r\n    /** Set width of note. Used by the formatter for positioning. */\r\n    setWidth(width) {\r\n        this.width = width;\r\n    }\r\n    /** Get width of note. Used by the formatter for positioning. */\r\n    getWidth() {\r\n        if (!this._preFormatted) {\r\n            throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\r\n        }\r\n        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\r\n    }\r\n    /** Displace note by `x` pixels. Used by the formatter. */\r\n    setXShift(x) {\r\n        this.x_shift = x;\r\n        return this;\r\n    }\r\n    /** Get the `x` displaced pixels of the note. */\r\n    getXShift() {\r\n        return this.x_shift;\r\n    }\r\n    /** Get `x` position of this tick context. */\r\n    getX() {\r\n        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\r\n        return tickContext.getX() + this.x_shift;\r\n    }\r\n    /** Return the formatterMetrics. */\r\n    getFormatterMetrics() {\r\n        return this.formatterMetrics;\r\n    }\r\n    /** Return the center `x` shift. */\r\n    getCenterXShift() {\r\n        if (this.isCenterAligned()) {\r\n            return this.center_x_shift;\r\n        }\r\n        return 0;\r\n    }\r\n    /** Set the center `x` shift. */\r\n    setCenterXShift(centerXShift) {\r\n        this.center_x_shift = centerXShift;\r\n        return this;\r\n    }\r\n    // Check if tickable is center aligned. */\r\n    isCenterAligned() {\r\n        return this.align_center;\r\n    }\r\n    // Set/unset center alignment. */\r\n    setCenterAlignment(align_center) {\r\n        this.align_center = align_center;\r\n        return this;\r\n    }\r\n    /**\r\n     * Return the associated voice. Every tickable must be associated with a voice.\r\n     * This allows formatters and preFormatter to associate them with the right modifierContexts.\r\n     */\r\n    getVoice() {\r\n        return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\r\n    }\r\n    /** Set the associated voice. */\r\n    setVoice(voice) {\r\n        this.voice = voice;\r\n    }\r\n    /** Get the tuplet. */\r\n    getTuplet() {\r\n        return this.tuplet;\r\n    }\r\n    /** Return the intrinsic ticks. */\r\n    getTupletStack() {\r\n        return this.tupletStack;\r\n    }\r\n    /**\r\n     * Reset the specific Tuplet if this is not provided, all tuplets are reset.\r\n     * Remove any prior tuplets from the tick calculation and\r\n     * reset the intrinsic tick value.\r\n     */\r\n    resetTuplet(tuplet) {\r\n        let noteCount;\r\n        let notesOccupied;\r\n        if (tuplet) {\r\n            const i = this.tupletStack.indexOf(tuplet);\r\n            if (i !== -1) {\r\n                this.tupletStack.splice(i, 1);\r\n                noteCount = tuplet.getNoteCount();\r\n                notesOccupied = tuplet.getNotesOccupied();\r\n                // Revert old multiplier by inverting numerator & denom.:\r\n                this.applyTickMultiplier(noteCount, notesOccupied);\r\n            }\r\n            return this;\r\n        }\r\n        while (this.tupletStack.length) {\r\n            tuplet = this.tupletStack.pop();\r\n            noteCount = tuplet.getNoteCount();\r\n            notesOccupied = tuplet.getNotesOccupied();\r\n            // Revert old multiplier by inverting numerator & denom.:\r\n            this.applyTickMultiplier(noteCount, notesOccupied);\r\n        }\r\n        return this;\r\n    }\r\n    /** Attach to new tuplet. */\r\n    setTuplet(tuplet) {\r\n        if (tuplet) {\r\n            this.tupletStack.push(tuplet);\r\n            const noteCount = tuplet.getNoteCount();\r\n            const notesOccupied = tuplet.getNotesOccupied();\r\n            this.applyTickMultiplier(notesOccupied, noteCount);\r\n        }\r\n        this.tuplet = tuplet;\r\n        return this;\r\n    }\r\n    /**\r\n     * Add self to the provided ModifierContext `mc`.\r\n     * If this tickable has modifiers, set modifierContext.\r\n     * @returns this\r\n     */\r\n    addToModifierContext(mc) {\r\n        this.modifierContext = mc;\r\n        for (let i = 0; i < this.modifiers.length; ++i) {\r\n            this.modifierContext.addMember(this.modifiers[i]);\r\n        }\r\n        this.modifierContext.addMember(this);\r\n        this._preFormatted = false;\r\n        return this;\r\n    }\r\n    /**\r\n     * Optional, if tickable has modifiers, associate a Modifier.\r\n     * @param mod the modifier\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    addModifier(modifier, index = 0) {\r\n        this.modifiers.push(modifier);\r\n        this._preFormatted = false;\r\n        return this;\r\n    }\r\n    /** Get the list of associated modifiers. */\r\n    getModifiers() {\r\n        return this.modifiers;\r\n    }\r\n    /** Set the Tick Context. */\r\n    setTickContext(tc) {\r\n        this.tickContext = tc;\r\n        this._preFormatted = false;\r\n    }\r\n    checkTickContext(message = 'Tickable has no tick context.') {\r\n        return defined(this.tickContext, 'NoTickContext', message);\r\n    }\r\n    /** Preformat the Tickable. */\r\n    preFormat() {\r\n        if (this._preFormatted)\r\n            return;\r\n        this.width = 0;\r\n        if (this.modifierContext) {\r\n            this.modifierContext.preFormat();\r\n            this.width += this.modifierContext.getWidth();\r\n        }\r\n    }\r\n    /** Set preformatted status. */\r\n    set preFormatted(value) {\r\n        this._preFormatted = value;\r\n    }\r\n    get preFormatted() {\r\n        return this._preFormatted;\r\n    }\r\n    /** Postformat the Tickable. */\r\n    postFormat() {\r\n        if (this._postFormatted)\r\n            return this;\r\n        this._postFormatted = true;\r\n        return this;\r\n    }\r\n    /** Set postformatted status. */\r\n    set postFormatted(value) {\r\n        this._postFormatted = value;\r\n    }\r\n    get postFormatted() {\r\n        return this._postFormatted;\r\n    }\r\n    /** Return the intrinsic ticks. */\r\n    getIntrinsicTicks() {\r\n        return this.intrinsicTicks;\r\n    }\r\n    /** Set the intrinsic ticks. */\r\n    setIntrinsicTicks(intrinsicTicks) {\r\n        this.intrinsicTicks = intrinsicTicks;\r\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\r\n    }\r\n    /** Get the tick multiplier. */\r\n    getTickMultiplier() {\r\n        return this.tickMultiplier;\r\n    }\r\n    /** Apply a tick multiplier. */\r\n    applyTickMultiplier(numerator, denominator) {\r\n        this.tickMultiplier.multiply(numerator, denominator);\r\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\r\n    }\r\n    /** Set the duration. */\r\n    setDuration(duration) {\r\n        const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\r\n        this.ticks = this.tickMultiplier.clone().multiply(ticks);\r\n        this.intrinsicTicks = this.ticks.value();\r\n    }\r\n    getAbsoluteX() {\r\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\r\n        return tickContext.getX();\r\n    }\r\n    /** Attach this note to a modifier context. */\r\n    setModifierContext(mc) {\r\n        this.modifierContext = mc;\r\n        return this;\r\n    }\r\n    /** Get `ModifierContext`. */\r\n    getModifierContext() {\r\n        return this.modifierContext;\r\n    }\r\n    /** Check and get `ModifierContext`. */\r\n    checkModifierContext() {\r\n        return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n// A formatter for abstract tickable objects, such as notes, chords,\r\n// tabs, etc.\r\nimport { Fraction } from './fraction';\r\nimport { RuntimeError } from './util';\r\n/**\r\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\r\n */\r\nexport class TickContext {\r\n    constructor(options) {\r\n        this.preFormatted = false;\r\n        this.postFormatted = false;\r\n        this.tickID = options && options.tickID ? options.tickID : 0;\r\n        this.currentTick = new Fraction(0, 1);\r\n        this.maxTicks = new Fraction(0, 1);\r\n        this.maxTickable = undefined; // Biggest tickable\r\n        this.minTicks = undefined; // this can remian null if all tickables have ignore_ticks\r\n        this.minTickable = undefined;\r\n        this.padding = 1; // padding on each side (width += padding * 2)\r\n        this.x = 0;\r\n        this.xBase = 0; // base x position without xOffset\r\n        this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\r\n        this.tickables = []; // Notes, tabs, chords, lyrics.\r\n        this.tickablesByVoice = {}; // Tickables indexed by voice number\r\n        // Formatting metrics\r\n        this.notePx = 0; // width of widest note in this context\r\n        this.glyphPx = 0; // width of glyph (note head)\r\n        this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\r\n        this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\r\n        this.modLeftPx = 0; // Left modifier pixels\r\n        this.modRightPx = 0; // Right modifier pixels\r\n        this.totalLeftPx = 0; // Total left pixels\r\n        this.totalRightPx = 0; // Total right pixels\r\n        this.tContexts = []; // Parent array of tick contexts\r\n        this.width = 0;\r\n        this.formatterMetrics = {\r\n            // The freedom of a tickcontext is the distance it can move without colliding\r\n            // with neighboring elements. A formatter can set these values during its\r\n            // formatting pass, which a different formatter can then use to fine tune.\r\n            freedom: { left: 0, right: 0 },\r\n        };\r\n    }\r\n    static getNextContext(tContext) {\r\n        const contexts = tContext.tContexts;\r\n        const index = contexts.indexOf(tContext);\r\n        if (index + 1 < contexts.length)\r\n            return contexts[index + 1];\r\n    }\r\n    getTickID() {\r\n        return this.tickID;\r\n    }\r\n    getX() {\r\n        return this.x;\r\n    }\r\n    setX(x) {\r\n        this.x = x;\r\n        this.xBase = x;\r\n        this.xOffset = 0;\r\n        return this;\r\n    }\r\n    getXBase() {\r\n        return this.xBase;\r\n    } // use of xBase and xOffset is optional, avoids offset creep\r\n    setXBase(xBase) {\r\n        this.xBase = xBase;\r\n        this.x = xBase + this.xOffset;\r\n    }\r\n    getXOffset() {\r\n        return this.xOffset;\r\n    }\r\n    setXOffset(xOffset) {\r\n        this.xOffset = xOffset;\r\n        this.x = this.xBase + xOffset;\r\n    }\r\n    getWidth() {\r\n        return this.width + this.padding * 2;\r\n    }\r\n    setPadding(padding) {\r\n        this.padding = padding;\r\n        return this;\r\n    }\r\n    getMaxTicks() {\r\n        return this.maxTicks;\r\n    }\r\n    getMinTicks() {\r\n        return this.minTicks;\r\n    }\r\n    getMaxTickable() {\r\n        return this.maxTickable;\r\n    }\r\n    getMinTickable() {\r\n        return this.minTickable;\r\n    }\r\n    getTickables() {\r\n        return this.tickables;\r\n    }\r\n    /**\r\n     * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\r\n     *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\r\n     * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\r\n     */\r\n    getTickableForVoice(voiceIndex) {\r\n        return this.tickablesByVoice[voiceIndex];\r\n    }\r\n    getTickablesByVoice() {\r\n        return this.tickablesByVoice;\r\n    }\r\n    getCenterAlignedTickables() {\r\n        return this.tickables.filter((tickable) => tickable.isCenterAligned());\r\n    }\r\n    /** Gets widths context, note and left/right modifiers for formatting. */\r\n    getMetrics() {\r\n        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;\r\n        return {\r\n            width,\r\n            glyphPx,\r\n            notePx,\r\n            leftDisplacedHeadPx,\r\n            rightDisplacedHeadPx,\r\n            modLeftPx,\r\n            modRightPx,\r\n            totalLeftPx,\r\n            totalRightPx,\r\n        };\r\n    }\r\n    getCurrentTick() {\r\n        return this.currentTick;\r\n    }\r\n    setCurrentTick(tick) {\r\n        this.currentTick = tick;\r\n        this.preFormatted = false;\r\n    }\r\n    addTickable(tickable, voiceIndex) {\r\n        if (!tickable) {\r\n            throw new RuntimeError('BadArgument', 'Invalid tickable added.');\r\n        }\r\n        if (!tickable.shouldIgnoreTicks()) {\r\n            const ticks = tickable.getTicks();\r\n            if (ticks.greaterThan(this.maxTicks)) {\r\n                this.maxTicks = ticks.clone();\r\n                this.maxTickable = tickable;\r\n            }\r\n            if (this.minTicks == null) {\r\n                this.minTicks = ticks.clone();\r\n                this.minTickable = tickable;\r\n            }\r\n            else if (ticks.lessThan(this.minTicks)) {\r\n                this.minTicks = ticks.clone();\r\n                this.minTickable = tickable;\r\n            }\r\n        }\r\n        tickable.setTickContext(this);\r\n        this.tickables.push(tickable);\r\n        this.tickablesByVoice[voiceIndex || 0] = tickable;\r\n        this.preFormatted = false;\r\n        return this;\r\n    }\r\n    preFormat() {\r\n        if (this.preFormatted)\r\n            return this;\r\n        for (let i = 0; i < this.tickables.length; ++i) {\r\n            const tickable = this.tickables[i];\r\n            tickable.preFormat();\r\n            const metrics = tickable.getMetrics();\r\n            // Maintain max displaced head pixels from all tickables in the context\r\n            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\r\n            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\r\n            // Maintain the widest note for all tickables in the context\r\n            this.notePx = Math.max(this.notePx, metrics.notePx);\r\n            // Maintain the widest note head\r\n            this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);\r\n            // Total modifier shift\r\n            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\r\n            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\r\n            // Total shift\r\n            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\r\n            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\r\n            // Recalculate the tick context total width\r\n            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\r\n        }\r\n        return this;\r\n    }\r\n    postFormat() {\r\n        if (this.postFormatted)\r\n            return this;\r\n        this.postFormatted = true;\r\n        return this;\r\n    }\r\n    getFormatterMetrics() {\r\n        return this.formatterMetrics;\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n// Renders time signatures glyphs for staffs\r\n// This class is used by TimeSignature to render the associated glyphs\r\nimport { Glyph } from './glyph';\r\nimport { defined } from './util';\r\nexport class TimeSignatureGlyph extends Glyph {\r\n    constructor(timeSignature, topDigits, botDigits, code, point, options) {\r\n        var _a;\r\n        super(code, point, options);\r\n        this.timeSignature = timeSignature;\r\n        this.topGlyphs = [];\r\n        this.botGlyphs = [];\r\n        let topWidth = 0;\r\n        for (let i = 0; i < topDigits.length; ++i) {\r\n            let timeSigType = topDigits[i];\r\n            switch (topDigits[i]) {\r\n                case '-':\r\n                    timeSigType = 'Minus';\r\n                    break;\r\n                case '+':\r\n                    timeSigType = botDigits.length > 0 ? 'PlusSmall' : 'Plus';\r\n                    break;\r\n                case '(':\r\n                    timeSigType = botDigits.length > 0 ? 'ParensLeftSmall' : 'ParensLeft';\r\n                    break;\r\n                case ')':\r\n                    timeSigType = botDigits.length > 0 ? 'ParensRightSmall' : 'ParensRight';\r\n                    break;\r\n            }\r\n            const topGlyph = new Glyph('timeSig' + timeSigType, this.timeSignature.point);\r\n            this.topGlyphs.push(topGlyph);\r\n            topWidth += (_a = topGlyph.getMetrics().width) !== null && _a !== void 0 ? _a : 0;\r\n        }\r\n        let botWidth = 0;\r\n        for (let i = 0; i < botDigits.length; ++i) {\r\n            let timeSigType = botDigits[i];\r\n            switch (botDigits[i]) {\r\n                case '+':\r\n                    timeSigType = 'PlusSmall';\r\n                    break;\r\n                case '(':\r\n                    timeSigType = 'ParensLeftSmall';\r\n                    break;\r\n                case ')':\r\n                    timeSigType = 'ParensRightSmall';\r\n                    break;\r\n            }\r\n            const botGlyph = new Glyph('timeSig' + timeSigType, this.timeSignature.point);\r\n            this.botGlyphs.push(botGlyph);\r\n            botWidth += defined(botGlyph.getMetrics().width);\r\n        }\r\n        this.width = Math.max(topWidth, botWidth);\r\n        this.xMin = this.getMetrics().x_min;\r\n        this.topStartX = (this.width - topWidth) / 2.0;\r\n        this.botStartX = (this.width - botWidth) / 2.0;\r\n        this.reset();\r\n    }\r\n    getMetrics() {\r\n        return {\r\n            x_min: this.xMin,\r\n            x_max: this.xMin + this.width,\r\n            width: this.width,\r\n        };\r\n    }\r\n    renderToStave(x) {\r\n        const stave = this.checkStave();\r\n        const ctx = this.checkContext();\r\n        let start_x = x + this.topStartX;\r\n        let y = 0;\r\n        if (this.botGlyphs.length > 0)\r\n            y = stave.getYForLine(this.timeSignature.topLine);\r\n        else\r\n            y = (stave.getYForLine(this.timeSignature.topLine) + stave.getYForLine(this.timeSignature.bottomLine)) / 2;\r\n        for (let i = 0; i < this.topGlyphs.length; ++i) {\r\n            const glyph = this.topGlyphs[i];\r\n            Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + this.x_shift, y);\r\n            start_x += defined(glyph.getMetrics().width);\r\n        }\r\n        start_x = x + this.botStartX;\r\n        y = stave.getYForLine(this.timeSignature.bottomLine);\r\n        for (let i = 0; i < this.botGlyphs.length; ++i) {\r\n            const glyph = this.botGlyphs[i];\r\n            this.timeSignature.placeGlyphOnLine(glyph, stave, 0);\r\n            Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + glyph.getMetrics().x_shift, y);\r\n            start_x += defined(glyph.getMetrics().width);\r\n        }\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// ## Description\r\n// Implements time signatures glyphs for staffs\r\n// See tables.js for the internal time signatures\r\n// representation\r\nimport { Glyph } from './glyph';\r\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\r\nimport { Tables } from './tables';\r\nimport { TimeSignatureGlyph } from './timesigglyph';\r\nimport { Category } from './typeguard';\r\nimport { defined, RuntimeError } from './util';\r\nconst assertIsValidTimeSig = (timeSpec) => {\r\n    const numbers = timeSpec.split('/');\r\n    if (numbers.length !== 2 && numbers[0] !== '+' && numbers[0] !== '-') {\r\n        throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`);\r\n    }\r\n    numbers.forEach((number) => {\r\n        // Characters consisting in number 0..9, '+', '-', '(' or ')'\r\n        if (/^[0-9+\\-()]+$/.test(number) == false) {\r\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\r\n        }\r\n    });\r\n};\r\nexport class TimeSignature extends StaveModifier {\r\n    constructor(timeSpec = '4/4', customPadding = 15, validate_args = true) {\r\n        super();\r\n        this.validate_args = validate_args;\r\n        const padding = customPadding;\r\n        const musicFont = Tables.currentMusicFont();\r\n        this.point = musicFont.lookupMetric('digits.point');\r\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\r\n        this.topLine = 2 + fontLineShift;\r\n        this.bottomLine = 4 + fontLineShift;\r\n        this.setPosition(StaveModifierPosition.BEGIN);\r\n        this.info = this.parseTimeSpec(timeSpec);\r\n        this.setWidth(defined(this.info.glyph.getMetrics().width));\r\n        this.setPadding(padding);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.TimeSignature;\r\n    }\r\n    static get glyphs() {\r\n        return {\r\n            C: {\r\n                code: 'timeSigCommon',\r\n                point: 40,\r\n                line: 2,\r\n            },\r\n            'C|': {\r\n                code: 'timeSigCutCommon',\r\n                point: 40,\r\n                line: 2,\r\n            },\r\n        };\r\n    }\r\n    parseTimeSpec(timeSpec) {\r\n        var _a, _b;\r\n        if (timeSpec === 'C' || timeSpec === 'C|') {\r\n            const { line, code, point } = TimeSignature.glyphs[timeSpec];\r\n            return {\r\n                line,\r\n                num: false,\r\n                glyph: new Glyph(code, point),\r\n            };\r\n        }\r\n        if (this.validate_args) {\r\n            assertIsValidTimeSig(timeSpec);\r\n        }\r\n        const parts = timeSpec.split('/');\r\n        return {\r\n            num: true,\r\n            glyph: this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : ''),\r\n        };\r\n    }\r\n    makeTimeSignatureGlyph(topDigits, botDigits) {\r\n        return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\r\n    }\r\n    getInfo() {\r\n        return this.info;\r\n    }\r\n    setTimeSig(timeSpec) {\r\n        this.info = this.parseTimeSpec(timeSpec);\r\n        return this;\r\n    }\r\n    draw() {\r\n        const stave = this.checkStave();\r\n        const ctx = stave.checkContext();\r\n        this.setRendered();\r\n        ctx.openGroup('timesignature', this.getAttribute('id'));\r\n        this.info.glyph.setStave(stave);\r\n        this.info.glyph.setContext(ctx);\r\n        this.placeGlyphOnLine(this.info.glyph, stave, this.info.line);\r\n        this.info.glyph.renderToStave(this.x);\r\n        ctx.closeGroup();\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author Taehoon Moon 2014\r\nimport { Note } from './note';\r\nimport { TimeSignature } from './timesignature';\r\nimport { Category } from './typeguard';\r\nexport class TimeSigNote extends Note {\r\n    constructor(timeSpec, customPadding) {\r\n        super({ duration: 'b' });\r\n        const timeSignature = new TimeSignature(timeSpec, customPadding);\r\n        this.timeSigInfo = timeSignature.getInfo();\r\n        this.setWidth(this.timeSigInfo.glyph.getMetrics().width);\r\n        // Note properties\r\n        this.ignore_ticks = true;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.TimeSigNote;\r\n    }\r\n    /* Overridden to ignore */\r\n    // eslint-disable-next-line\r\n    addToModifierContext(mc) {\r\n        // DO NOTHING.\r\n        return this;\r\n    }\r\n    preFormat() {\r\n        this.preFormatted = true;\r\n        return this;\r\n    }\r\n    draw() {\r\n        const stave = this.checkStave();\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        if (!this.timeSigInfo.glyph.getContext()) {\r\n            this.timeSigInfo.glyph.setContext(ctx);\r\n        }\r\n        this.timeSigInfo.glyph.setStave(stave);\r\n        this.timeSigInfo.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\r\n        this.timeSigInfo.glyph.renderToStave(this.getAbsoluteX());\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Mike Corrigan <corrigan@gmail.com>\r\n// MIT License\r\nimport { Glyph } from './glyph';\r\nimport { GraceNote } from './gracenote';\r\nimport { Modifier } from './modifier';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { Category, isGraceNote } from './typeguard';\r\n/** Tremolo implements tremolo notation. */\r\nexport class Tremolo extends Modifier {\r\n    /**\r\n     * @param num number of bars\r\n     */\r\n    constructor(num) {\r\n        super();\r\n        this.num = num;\r\n        this.position = Modifier.Position.CENTER;\r\n        this.code = 'tremolo1';\r\n        // big strokes scales initialised to 1 (no scale)\r\n        this.y_spacing_scale = 1;\r\n        this.extra_stroke_scale = 1;\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Tremolo;\r\n    }\r\n    /** Draw the tremolo on the rendering context. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const stemDirection = note.getStemDirection();\r\n        const start = note.getModifierStartXY(this.position, this.index);\r\n        let x = start.x;\r\n        const gn = isGraceNote(note);\r\n        const scale = gn ? GraceNote.SCALE : 1;\r\n        const category = `tremolo.${gn ? 'grace' : 'default'}`;\r\n        const musicFont = Tables.currentMusicFont();\r\n        let y_spacing = musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\r\n        // add y_spacing_scale for big strokes (#1258)\r\n        y_spacing *= this.y_spacing_scale;\r\n        const height = this.num * y_spacing;\r\n        let y = note.getStemExtents().baseY - height;\r\n        if (stemDirection < 0) {\r\n            y += musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\r\n        }\r\n        else {\r\n            y += musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\r\n        }\r\n        const fontScale = musicFont.lookupMetric(`${category}.point`);\r\n        x += musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\r\n        for (let i = 0; i < this.num; ++i) {\r\n            Glyph.renderGlyph(ctx, x, y, fontScale, this.code, { category, scale: this.extra_stroke_scale });\r\n            y += y_spacing;\r\n        }\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Tables } from './tables';\r\nimport { RuntimeError } from './util';\r\n/** `Tuning` implements varies types of tunings for tablature. */\r\nexport class Tuning {\r\n    /**\r\n     * Constructor.\r\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\r\n     */\r\n    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\r\n        this.tuningValues = [];\r\n        // Default to standard tuning.\r\n        this.setTuning(tuningString);\r\n    }\r\n    static get names() {\r\n        return {\r\n            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\r\n            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\r\n            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\r\n            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\r\n            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\r\n        };\r\n    }\r\n    /** Return the note number associated to the note string. */\r\n    noteToInteger(noteString) {\r\n        return Tables.keyProperties(noteString).int_value;\r\n    }\r\n    /**\r\n     * Set tuning identified by tuning name (eg. 'dagdad')\r\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\r\n     */\r\n    setTuning(tuningString) {\r\n        if (Tuning.names[tuningString]) {\r\n            tuningString = Tuning.names[tuningString];\r\n        }\r\n        this.tuningValues = [];\r\n        const keys = tuningString.split(/\\s*,\\s*/);\r\n        if (keys.length === 0) {\r\n            throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\r\n        }\r\n        for (let i = 0; i < keys.length; ++i) {\r\n            this.tuningValues[i] = this.noteToInteger(keys[i]);\r\n        }\r\n    }\r\n    /** Return the note number associated with a tablature string. */\r\n    getValueForString(stringNum) {\r\n        const s = Number(stringNum);\r\n        if (s < 1 || s > this.tuningValues.length) {\r\n            throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);\r\n        }\r\n        return this.tuningValues[s - 1];\r\n    }\r\n    /** Return the note number associated with a tablature string and fret. */\r\n    getValueForFret(fretNum, stringNum) {\r\n        const stringValue = this.getValueForString(stringNum);\r\n        const f = Number(fretNum);\r\n        if (f < 0) {\r\n            throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\r\n        }\r\n        return stringValue + f;\r\n    }\r\n    /** Return the note string associated with tablature string and fret. */\r\n    getNoteForFret(fretNum, stringNum) {\r\n        const noteValue = this.getValueForFret(fretNum, stringNum);\r\n        const octave = Math.floor(noteValue / 12);\r\n        const value = noteValue % 12;\r\n        return `${Tables.integerToNote(value)}/${octave}`;\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n/**\r\n * ## Description\r\n *\r\n * Create a new tuplet from the specified notes. The notes must\r\n * be part of the same voice. If they are of different rhythmic\r\n * values, then options.num_notes must be set.\r\n *\r\n * @constructor\r\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\r\n *   notes, etc... any class that inherits stemmableNote at some\r\n *   point in its prototype chain.\r\n * @param options: object {\r\n *\r\n *   num_notes: fit this many notes into...\r\n *   notes_occupied: ...the space of this many notes\r\n *\r\n *       Together, these two properties make up the tuplet ratio\r\n *     in the form of num_notes : notes_occupied.\r\n *       num_notes defaults to the number of notes passed in, so\r\n *     it is important that if you omit this property, all of\r\n *     the notes passed should be of the same note value.\r\n *       notes_occupied defaults to 2 -- so you should almost\r\n *     certainly pass this parameter for anything other than\r\n *     a basic triplet.\r\n *\r\n *   location:\r\n *     default 1, which is above the notes: ┌─── 3 ───┐\r\n *      -1 is below the notes └─── 3 ───┘\r\n *\r\n *   bracketed: boolean, draw a bracket around the tuplet number\r\n *     when true: ┌─── 3 ───┐   when false: 3\r\n *     defaults to true if notes are not beamed, false otherwise\r\n *\r\n *   ratioed: boolean\r\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\r\n *     defaults to true if the difference between num_notes and\r\n *     notes_occupied is greater than 1.\r\n *\r\n *   y_offset: int, default 0\r\n *     manually offset a tuplet, for instance to avoid collisions\r\n *     with articulations, etc...\r\n * }\r\n */\r\nimport { Element } from './element';\r\nimport { Formatter } from './formatter';\r\nimport { Glyph } from './glyph';\r\nimport { Stem } from './stem';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { defined, RuntimeError } from './util';\r\nexport var TupletLocation;\r\n(function (TupletLocation) {\r\n    TupletLocation[TupletLocation[\"BOTTOM\"] = -1] = \"BOTTOM\";\r\n    TupletLocation[TupletLocation[\"TOP\"] = 1] = \"TOP\";\r\n})(TupletLocation || (TupletLocation = {}));\r\nexport class Tuplet extends Element {\r\n    constructor(notes, options = {}) {\r\n        super();\r\n        this.numerator_glyphs = [];\r\n        this.denom_glyphs = [];\r\n        if (!notes || !notes.length) {\r\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\r\n        }\r\n        this.options = options;\r\n        this.notes = notes;\r\n        this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\r\n        // We accept beats_occupied, but warn that it's deprecated:\r\n        // the preferred property name is now notes_occupied.\r\n        if (this.options.beats_occupied) {\r\n            this.beatsOccupiedDeprecationWarning();\r\n        }\r\n        this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\r\n        if (this.options.bracketed != undefined) {\r\n            this.bracketed = this.options.bracketed;\r\n        }\r\n        else {\r\n            this.bracketed = notes.some((note) => !note.hasBeam());\r\n        }\r\n        this.ratioed =\r\n            this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\r\n        this.point = Tables.currentMusicFont().lookupMetric('digits.tupletPoint');\r\n        this.y_pos = 16;\r\n        this.x_pos = 100;\r\n        this.width = 200;\r\n        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\r\n        Formatter.AlignRestsToNotes(notes, true, true);\r\n        this.resolveGlyphs();\r\n        this.attach();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Tuplet;\r\n    }\r\n    static get LOCATION_TOP() {\r\n        return TupletLocation.TOP;\r\n    }\r\n    static get LOCATION_BOTTOM() {\r\n        return TupletLocation.BOTTOM;\r\n    }\r\n    static get NESTING_OFFSET() {\r\n        return 15;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static get metrics() {\r\n        return Tables.currentMusicFont().getMetrics().glyphs.tuplet;\r\n    }\r\n    attach() {\r\n        for (let i = 0; i < this.notes.length; i++) {\r\n            const note = this.notes[i];\r\n            note.setTuplet(this);\r\n        }\r\n    }\r\n    detach() {\r\n        for (let i = 0; i < this.notes.length; i++) {\r\n            const note = this.notes[i];\r\n            note.resetTuplet(this);\r\n        }\r\n    }\r\n    /**\r\n     * Set whether or not the bracket is drawn.\r\n     */\r\n    setBracketed(bracketed) {\r\n        this.bracketed = !!bracketed;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set whether or not the ratio is shown.\r\n     */\r\n    setRatioed(ratioed) {\r\n        this.ratioed = !!ratioed;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\r\n     */\r\n    setTupletLocation(location) {\r\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\r\n            // eslint-disable-next-line\r\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\r\n            location = Tuplet.LOCATION_TOP;\r\n        }\r\n        this.location = location;\r\n        return this;\r\n    }\r\n    getNotes() {\r\n        return this.notes;\r\n    }\r\n    getNoteCount() {\r\n        return this.num_notes;\r\n    }\r\n    beatsOccupiedDeprecationWarning() {\r\n        // eslint-disable-next-line\r\n        console.warn('beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.', 'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.', 'The old methods will be removed in VexFlow 5.0.');\r\n    }\r\n    getBeatsOccupied() {\r\n        this.beatsOccupiedDeprecationWarning();\r\n        return this.getNotesOccupied();\r\n    }\r\n    setBeatsOccupied(beats) {\r\n        this.beatsOccupiedDeprecationWarning();\r\n        return this.setNotesOccupied(beats);\r\n    }\r\n    getNotesOccupied() {\r\n        return this.notes_occupied;\r\n    }\r\n    setNotesOccupied(notes) {\r\n        this.detach();\r\n        this.notes_occupied = notes;\r\n        this.resolveGlyphs();\r\n        this.attach();\r\n    }\r\n    resolveGlyphs() {\r\n        this.numerator_glyphs = [];\r\n        let n = this.num_notes;\r\n        while (n >= 1) {\r\n            this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\r\n            n = parseInt((n / 10).toString(), 10);\r\n        }\r\n        this.denom_glyphs = [];\r\n        n = this.notes_occupied;\r\n        while (n >= 1) {\r\n            this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\r\n            n = parseInt((n / 10).toString(), 10);\r\n        }\r\n    }\r\n    // determine how many tuplets are nested within this tuplet\r\n    // on the same side (above/below), to calculate a y\r\n    // offset for this tuplet:\r\n    getNestedTupletCount() {\r\n        const location = this.location;\r\n        const first_note = this.notes[0];\r\n        let maxTupletCount = countTuplets(first_note, location);\r\n        let minTupletCount = countTuplets(first_note, location);\r\n        // Count the tuplets that are on the same side (above/below)\r\n        // as this tuplet:\r\n        function countTuplets(note, location) {\r\n            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\r\n        }\r\n        this.notes.forEach((note) => {\r\n            const tupletCount = countTuplets(note, location);\r\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\r\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\r\n        });\r\n        return maxTupletCount - minTupletCount;\r\n    }\r\n    // determine the y position of the tuplet:\r\n    getYPosition() {\r\n        // offset the tuplet for any nested tuplets between\r\n        // it and the notes:\r\n        const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\r\n        // offset the tuplet for any manual y_offset:\r\n        const y_offset = this.options.y_offset || 0;\r\n        // now iterate through the notes and find our highest\r\n        // or lowest locations, to form a base y_pos\r\n        const first_note = this.notes[0];\r\n        let y_pos;\r\n        if (this.location === Tuplet.LOCATION_TOP) {\r\n            y_pos = first_note.checkStave().getYForLine(0) - Tuplet.metrics.topModifierOffset;\r\n            // check modifiers above note to see if they will collide with tuplet beam\r\n            for (let i = 0; i < this.notes.length; ++i) {\r\n                const note = this.notes[i];\r\n                let modLines = 0;\r\n                const mc = note.getModifierContext();\r\n                if (mc) {\r\n                    modLines = Math.max(modLines, mc.getState().top_text_line);\r\n                }\r\n                const modY = note.getYForTopText(modLines) - Tuplet.metrics.noteHeadOffset;\r\n                if (note.hasStem() || note.isRest()) {\r\n                    const top_y = note.getStemDirection() === Stem.UP\r\n                        ? note.getStemExtents().topY - Tuplet.metrics.stemOffset\r\n                        : note.getStemExtents().baseY - Tuplet.metrics.noteHeadOffset;\r\n                    y_pos = Math.min(top_y, y_pos);\r\n                    if (modLines > 0) {\r\n                        y_pos = Math.min(modY, y_pos);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let lineCheck = Tuplet.metrics.bottomLine; // tuplet default on line 4\r\n            // check modifiers below note to see if they will collide with tuplet beam\r\n            this.notes.forEach((nn) => {\r\n                const mc = nn.getModifierContext();\r\n                if (mc) {\r\n                    lineCheck = Math.max(lineCheck, mc.getState().text_line + 1);\r\n                }\r\n            });\r\n            y_pos = first_note.checkStave().getYForLine(lineCheck) + Tuplet.metrics.noteHeadOffset;\r\n            for (let i = 0; i < this.notes.length; ++i) {\r\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\r\n                    const bottom_y = this.notes[i].getStemDirection() === Stem.UP\r\n                        ? this.notes[i].getStemExtents().baseY + Tuplet.metrics.noteHeadOffset\r\n                        : this.notes[i].getStemExtents().topY + Tuplet.metrics.stemOffset;\r\n                    if (bottom_y > y_pos) {\r\n                        y_pos = bottom_y;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return y_pos + nested_tuplet_y_offset + y_offset;\r\n    }\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        // determine x value of left bound of tuplet\r\n        const first_note = this.notes[0];\r\n        const last_note = this.notes[this.notes.length - 1];\r\n        if (!this.bracketed) {\r\n            this.x_pos = first_note.getStemX();\r\n            this.width = last_note.getStemX() - this.x_pos;\r\n        }\r\n        else {\r\n            this.x_pos = first_note.getTieLeftX() - 5;\r\n            this.width = last_note.getTieRightX() - this.x_pos + 5;\r\n        }\r\n        // determine y value for tuplet\r\n        this.y_pos = this.getYPosition();\r\n        const addGlyphWidth = (width, glyph) => width + defined(glyph.getMetrics().width);\r\n        // calculate total width of tuplet notation\r\n        let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\r\n        if (this.ratioed) {\r\n            width = this.denom_glyphs.reduce(addGlyphWidth, width);\r\n            width += this.point * 0.32;\r\n        }\r\n        const notation_center_x = this.x_pos + this.width / 2;\r\n        const notation_start_x = notation_center_x - width / 2;\r\n        // draw bracket if the tuplet is not beamed\r\n        if (this.bracketed) {\r\n            const line_width = this.width / 2 - width / 2 - 5;\r\n            // only draw the bracket if it has positive length\r\n            if (line_width > 0) {\r\n                ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\r\n                ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\r\n                ctx.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\r\n                ctx.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\r\n            }\r\n        }\r\n        // draw numerator glyphs\r\n        const shiftY = Tables.currentMusicFont().lookupMetric('digits.shiftY', 0);\r\n        let x_offset = 0;\r\n        this.numerator_glyphs.forEach((glyph) => {\r\n            glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\r\n            x_offset += defined(glyph.getMetrics().width);\r\n        });\r\n        // display colon and denominator if the ratio is to be shown\r\n        if (this.ratioed) {\r\n            const colon_x = notation_start_x + x_offset + this.point * 0.16;\r\n            const colon_radius = this.point * 0.06;\r\n            ctx.beginPath();\r\n            ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            ctx.beginPath();\r\n            ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            x_offset += this.point * 0.32;\r\n            this.denom_glyphs.forEach((glyph) => {\r\n                glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\r\n                x_offset += defined(glyph.getMetrics().width);\r\n            });\r\n        }\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Ron B. Yeh\r\n// MIT License\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/**\r\n * Use instead of `instanceof` as a more flexible type guard.\r\n * @param obj check if this object's CATEGORY matches the provided category.\r\n * @param category a string representing a category of VexFlow objects.\r\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\r\n *        If `false`, we do not check the superclass or other ancestors.\r\n * @returns true if `obj` has a static `CATEGORY` property that matches `category`.\r\n */\r\nexport function isCategory(obj, category, checkAncestors = true) {\r\n    // obj is undefined, a number, a primitive string, or null.\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\r\n    let constructorFcn = obj.constructor;\r\n    // Check if the object's static .CATEGORY matches the provided category.\r\n    if (checkAncestors) {\r\n        // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\r\n        while (obj !== null) {\r\n            constructorFcn = obj.constructor;\r\n            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {\r\n                return true;\r\n            }\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n        return false;\r\n    }\r\n    else {\r\n        // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\r\n        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;\r\n    }\r\n}\r\nexport const isAccidental = (obj) => isCategory(obj, Category.Accidental);\r\nexport const isAnnotation = (obj) => isCategory(obj, Category.Annotation);\r\nexport const isBarline = (obj) => isCategory(obj, Category.Barline);\r\nexport const isDot = (obj) => isCategory(obj, Category.Dot);\r\nexport const isGraceNote = (obj) => isCategory(obj, Category.GraceNote);\r\nexport const isGraceNoteGroup = (obj) => isCategory(obj, Category.GraceNoteGroup);\r\nexport const isNote = (obj) => isCategory(obj, Category.Note);\r\nexport const isRenderContext = (obj) => isCategory(obj, Category.RenderContext);\r\nexport const isStaveNote = (obj) => isCategory(obj, Category.StaveNote);\r\nexport const isStemmableNote = (obj) => isCategory(obj, Category.StemmableNote);\r\nexport const isTabNote = (obj) => isCategory(obj, Category.TabNote);\r\n// 'const' enums are erased by the TypeScript compiler. The string values are inlined at all the use sites.\r\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#const-enums\r\nexport var Category;\r\n(function (Category) {\r\n    Category[\"Accidental\"] = \"Accidental\";\r\n    Category[\"Annotation\"] = \"Annotation\";\r\n    Category[\"Articulation\"] = \"Articulation\";\r\n    Category[\"Barline\"] = \"Barline\";\r\n    Category[\"BarNote\"] = \"BarNote\";\r\n    Category[\"Beam\"] = \"Beam\";\r\n    Category[\"Bend\"] = \"Bend\";\r\n    Category[\"ChordSymbol\"] = \"ChordSymbol\";\r\n    Category[\"Clef\"] = \"Clef\";\r\n    Category[\"ClefNote\"] = \"ClefNote\";\r\n    Category[\"Crescendo\"] = \"Crescendo\";\r\n    Category[\"Curve\"] = \"Curve\";\r\n    Category[\"Dot\"] = \"Dot\";\r\n    Category[\"Element\"] = \"Element\";\r\n    Category[\"Fraction\"] = \"Fraction\";\r\n    Category[\"FretHandFinger\"] = \"FretHandFinger\";\r\n    Category[\"GhostNote\"] = \"GhostNote\";\r\n    Category[\"Glyph\"] = \"Glyph\";\r\n    Category[\"GlyphNote\"] = \"GlyphNote\";\r\n    Category[\"GraceNote\"] = \"GraceNote\";\r\n    Category[\"GraceNoteGroup\"] = \"GraceNoteGroup\";\r\n    Category[\"GraceTabNote\"] = \"GraceTabNote\";\r\n    Category[\"KeySignature\"] = \"KeySignature\";\r\n    Category[\"KeySigNote\"] = \"KeySigNote\";\r\n    Category[\"Modifier\"] = \"Modifier\";\r\n    Category[\"MultiMeasureRest\"] = \"MultiMeasureRest\";\r\n    Category[\"Note\"] = \"Note\";\r\n    Category[\"NoteHead\"] = \"NoteHead\";\r\n    Category[\"NoteSubGroup\"] = \"NoteSubGroup\";\r\n    Category[\"Ornament\"] = \"Ornament\";\r\n    Category[\"Parenthesis\"] = \"Parenthesis\";\r\n    Category[\"PedalMarking\"] = \"PedalMarking\";\r\n    Category[\"RenderContext\"] = \"RenderContext\";\r\n    Category[\"RepeatNote\"] = \"RepeatNote\";\r\n    Category[\"Repetition\"] = \"Repetition\";\r\n    Category[\"Stave\"] = \"Stave\";\r\n    Category[\"StaveConnector\"] = \"StaveConnector\";\r\n    Category[\"StaveHairpin\"] = \"StaveHairpin\";\r\n    Category[\"StaveLine\"] = \"StaveLine\";\r\n    Category[\"StaveModifier\"] = \"StaveModifier\";\r\n    Category[\"StaveNote\"] = \"StaveNote\";\r\n    Category[\"StaveSection\"] = \"StaveSection\";\r\n    Category[\"StaveTempo\"] = \"StaveTempo\";\r\n    Category[\"StaveText\"] = \"StaveText\";\r\n    Category[\"StaveTie\"] = \"StaveTie\";\r\n    Category[\"Stem\"] = \"Stem\";\r\n    Category[\"StemmableNote\"] = \"StemmableNote\";\r\n    Category[\"StringNumber\"] = \"StringNumber\";\r\n    Category[\"Stroke\"] = \"Stroke\";\r\n    Category[\"System\"] = \"System\";\r\n    Category[\"TabNote\"] = \"TabNote\";\r\n    Category[\"TabSlide\"] = \"TabSlide\";\r\n    Category[\"TabStave\"] = \"TabStave\";\r\n    Category[\"TabTie\"] = \"TabTie\";\r\n    Category[\"TextBracket\"] = \"TextBracket\";\r\n    Category[\"TextDynamics\"] = \"TextDynamics\";\r\n    Category[\"TextNote\"] = \"TextNote\";\r\n    Category[\"Tickable\"] = \"Tickable\";\r\n    Category[\"TimeSignature\"] = \"TimeSignature\";\r\n    Category[\"TimeSigNote\"] = \"TimeSigNote\";\r\n    Category[\"Tremolo\"] = \"Tremolo\";\r\n    Category[\"Tuplet\"] = \"Tuplet\";\r\n    Category[\"Vibrato\"] = \"Vibrato\";\r\n    Category[\"VibratoBracket\"] = \"VibratoBracket\";\r\n    Category[\"Voice\"] = \"Voice\";\r\n    Category[\"Volta\"] = \"Volta\";\r\n})(Category || (Category = {}));\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// Note: Keep this module free of imports to reduce the chance of circular dependencies.\r\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\r\nexport class RuntimeError extends Error {\r\n    constructor(code, message = '') {\r\n        super('[RuntimeError] ' + code + ': ' + message);\r\n        this.code = code;\r\n    }\r\n}\r\n/** VexFlow can be used outside of the browser (e.g., Node) where `window` may not be defined. */\r\n// eslint-disable-next-line\r\nexport function globalObject() {\r\n    if (typeof globalThis !== 'undefined') {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    return Function('return this')();\r\n}\r\n/**\r\n * Check that `x` is of type `T` and not `undefined`.\r\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\r\n */\r\nexport function defined(x, code = 'undefined', message = '') {\r\n    if (x === undefined) {\r\n        throw new RuntimeError(code, message);\r\n    }\r\n    return x;\r\n}\r\n/** Default log function sends all arguments to console. */\r\n// eslint-disable-next-line\r\nexport function log(block, ...args) {\r\n    if (!args)\r\n        return;\r\n    const line = Array.prototype.slice.call(args).join(' ');\r\n    globalObject().console.log(block + ': ' + line);\r\n}\r\n/** Dump warning to console. */\r\n// eslint-disable-next-line\r\nexport function warn(...args) {\r\n    const line = args.join(' ');\r\n    const err = new Error();\r\n    globalObject().console.log('Warning: ', line, err.stack);\r\n}\r\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\r\nfunction roundN(x, n) {\r\n    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\r\n}\r\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\r\nexport function midLine(a, b) {\r\n    let mid_line = b + (a - b) / 2;\r\n    if (mid_line % 2 > 0) {\r\n        mid_line = roundN(mid_line * 10, 5) / 10;\r\n    }\r\n    return mid_line;\r\n}\r\n/**\r\n * Used by various classes (e.g., SVGContext) to provide a\r\n * unique prefix to element names (or other keys in shared namespaces).\r\n */\r\nexport function prefix(text) {\r\n    return `vf-${text}`;\r\n}\r\n/**\r\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\r\n */\r\nexport function normalizeAngle(a) {\r\n    a = a % (2 * Math.PI);\r\n    if (a < 0) {\r\n        a += 2 * Math.PI;\r\n    }\r\n    return a;\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n//\r\n// Utility methods used by the rest of the VexFlow codebase.\r\nimport { Flow } from './flow';\r\nimport { log, RuntimeError } from './util';\r\nexport class Vex {\r\n    // Users of `Vex.forEach(a, fn)` should use `Array.prototype.forEach()` instead.\r\n    // static forEach<T>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => void) {\r\n    //   arr.forEach(callbackFn);\r\n    // }\r\n    /**\r\n     * Take `arr` and return a new list consisting of the sorted, unique,\r\n     * contents of arr. Does not modify `arr`.\r\n     */\r\n    // eslint-disable-next-line\r\n    static sortAndUnique(arr, cmp, eq) {\r\n        if (arr.length > 1) {\r\n            const newArr = [];\r\n            let last;\r\n            arr.sort(cmp);\r\n            for (let i = 0; i < arr.length; ++i) {\r\n                if (i === 0 || !eq(arr[i], last)) {\r\n                    newArr.push(arr[i]);\r\n                }\r\n                last = arr[i];\r\n            }\r\n            return newArr;\r\n        }\r\n        else {\r\n            return arr;\r\n        }\r\n    }\r\n    /** Check if array `arr` contains `obj`. */\r\n    // eslint-disable-next-line\r\n    static contains(arr, obj) {\r\n        let i = arr.length;\r\n        while (i--) {\r\n            if (arr[i] === obj) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // Get the 2D Canvas context from DOM element `canvas_sel`.\r\n    static getCanvasContext(canvasSelector) {\r\n        if (!canvasSelector) {\r\n            throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasSelector);\r\n        }\r\n        const canvas = document.getElementById(canvasSelector);\r\n        if (!(canvas && canvas.getContext)) {\r\n            throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\r\n        }\r\n        return canvas.getContext('2d');\r\n    }\r\n    /** Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds. */\r\n    // eslint-disable-next-line\r\n    static benchmark(s, f) {\r\n        const start_time = new Date().getTime();\r\n        f();\r\n        const elapsed = new Date().getTime() - start_time;\r\n        log(s, elapsed + 'ms');\r\n    }\r\n    // Get stack trace.\r\n    static stackTrace() {\r\n        const err = new Error();\r\n        return err.stack;\r\n    }\r\n}\r\nVex.Flow = Flow;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Bend } from './bend';\r\nimport { Modifier } from './modifier';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\n/** `Vibrato` implements diverse vibratos. */\r\nexport class Vibrato extends Modifier {\r\n    constructor() {\r\n        super();\r\n        this.position = Modifier.Position.RIGHT;\r\n        this.render_options = {\r\n            harsh: false,\r\n            vibrato_width: 20,\r\n            wave_height: 6,\r\n            wave_width: 4,\r\n            wave_girth: 2,\r\n        };\r\n        this.setVibratoWidth(this.render_options.vibrato_width);\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Vibrato;\r\n    }\r\n    /** Arrange vibratos inside a `ModifierContext`. */\r\n    static format(vibratos, state, context) {\r\n        if (!vibratos || vibratos.length === 0)\r\n            return false;\r\n        // Vibratos are always on top.\r\n        let text_line = state.top_text_line;\r\n        let width = 0;\r\n        let shift = state.right_shift - 7;\r\n        // If there's a bend, drop the text line\r\n        const bends = context.getMembers(Bend.CATEGORY);\r\n        if (bends && bends.length > 0) {\r\n            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;\r\n            text_line = text_line - (bendHeight + 1);\r\n        }\r\n        else {\r\n            state.top_text_line += 1;\r\n        }\r\n        // Format Vibratos\r\n        for (let i = 0; i < vibratos.length; ++i) {\r\n            const vibrato = vibratos[i];\r\n            vibrato.setXShift(shift);\r\n            vibrato.setTextLine(text_line);\r\n            width += vibrato.getWidth();\r\n            shift += width;\r\n        }\r\n        state.right_shift += width;\r\n        return true;\r\n    }\r\n    /** Set harsh vibrato. */\r\n    setHarsh(harsh) {\r\n        this.render_options.harsh = harsh;\r\n        return this;\r\n    }\r\n    /** Set vibrato width in pixels. */\r\n    setVibratoWidth(width) {\r\n        this.render_options.vibrato_width = width;\r\n        this.setWidth(width);\r\n        return this;\r\n    }\r\n    /** Draw the vibrato on the rendering context. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        const note = this.checkAttachedNote();\r\n        this.setRendered();\r\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\r\n        const vx = start.x + this.x_shift;\r\n        const vy = note.getYForTopText(this.text_line) + 2;\r\n        Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\r\n    }\r\n    /**\r\n     * Static rendering method that can be called from\r\n     * other classes (e.g. VibratoBracket).\r\n     */\r\n    static renderVibrato(ctx, x, y, opts) {\r\n        const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\r\n        const num_waves = vibrato_width / wave_width;\r\n        ctx.beginPath();\r\n        let i;\r\n        if (harsh) {\r\n            ctx.moveTo(x, y + wave_girth + 1);\r\n            for (i = 0; i < num_waves / 2; ++i) {\r\n                ctx.lineTo(x + wave_width, y - wave_height / 2);\r\n                x += wave_width;\r\n                ctx.lineTo(x + wave_width, y + wave_height / 2);\r\n                x += wave_width;\r\n            }\r\n            for (i = 0; i < num_waves / 2; ++i) {\r\n                ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\r\n                x -= wave_width;\r\n                ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\r\n                x -= wave_width;\r\n            }\r\n            ctx.fill();\r\n        }\r\n        else {\r\n            ctx.moveTo(x, y + wave_girth);\r\n            for (i = 0; i < num_waves / 2; ++i) {\r\n                ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\r\n                x += wave_width;\r\n                ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\r\n                x += wave_width;\r\n            }\r\n            for (i = 0; i < num_waves / 2; ++i) {\r\n                ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\r\n                x -= wave_width;\r\n                ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\r\n                x -= wave_width;\r\n            }\r\n            ctx.fill();\r\n        }\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Balazs Forian-Szabo\r\n// MIT License\r\nimport { Element } from './element';\r\nimport { Category } from './typeguard';\r\nimport { log } from './util';\r\nimport { Vibrato } from './vibrato';\r\n// eslint-disable-next-line\r\nfunction L(...args) {\r\n    if (VibratoBracket.DEBUG)\r\n        log('Vex.Flow.VibratoBracket', args);\r\n}\r\n/** `VibratoBracket` renders vibrato effect between two notes. */\r\nexport class VibratoBracket extends Element {\r\n    /**\r\n     * Either the stop or start note must be set, or both of them.\r\n     * An undefined value for the start or stop note indicates that the vibrato\r\n     * is drawn from the beginning or until the end of the stave accordingly.\r\n     */\r\n    constructor(bracket_data) {\r\n        super();\r\n        if (bracket_data.start)\r\n            this.start = bracket_data.start;\r\n        if (bracket_data.stop)\r\n            this.stop = bracket_data.stop;\r\n        this.line = 1;\r\n        this.render_options = {\r\n            harsh: false,\r\n            wave_height: 6,\r\n            wave_width: 4,\r\n            wave_girth: 2,\r\n            vibrato_width: 0,\r\n        };\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.VibratoBracket;\r\n    }\r\n    /** Set line position of the vibrato bracket. */\r\n    setLine(line) {\r\n        this.line = line;\r\n        return this;\r\n    }\r\n    /** Set harsh vibrato bracket. */\r\n    setHarsh(harsh) {\r\n        this.render_options.harsh = harsh;\r\n        return this;\r\n    }\r\n    /** Draw the vibrato bracket on the rendering context. */\r\n    draw() {\r\n        const ctx = this.checkContext();\r\n        this.setRendered();\r\n        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||\r\n            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\r\n            0;\r\n        // If start note is not set then vibrato will be drawn\r\n        // from the beginning of the stave\r\n        const start_x = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\r\n        // If stop note is not set then vibrato will be drawn\r\n        // until the end of the stave\r\n        const stop_x = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\r\n            (this.start && this.start.checkStave().getTieEndX() - 10) ||\r\n            0;\r\n        this.render_options.vibrato_width = stop_x - start_x;\r\n        L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\r\n        Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\r\n    }\r\n}\r\n/** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\r\nVibratoBracket.DEBUG = false;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\nimport { Element } from './element';\r\nimport { Fraction } from './fraction';\r\nimport { Tables } from './tables';\r\nimport { Category } from './typeguard';\r\nimport { defined, RuntimeError } from './util';\r\nexport var VoiceMode;\r\n(function (VoiceMode) {\r\n    VoiceMode[VoiceMode[\"STRICT\"] = 1] = \"STRICT\";\r\n    VoiceMode[VoiceMode[\"SOFT\"] = 2] = \"SOFT\";\r\n    VoiceMode[VoiceMode[\"FULL\"] = 3] = \"FULL\";\r\n})(VoiceMode || (VoiceMode = {}));\r\n/**\r\n * `Voice` is mainly a container object to group `Tickables` for formatting.\r\n */\r\nexport class Voice extends Element {\r\n    constructor(time, options) {\r\n        super();\r\n        this.resolutionMultiplier = 1;\r\n        this.mode = VoiceMode.STRICT;\r\n        this.preFormatted = false;\r\n        this.ticksUsed = new Fraction(0, 1);\r\n        this.largestTickWidth = 0;\r\n        this.tickables = [];\r\n        this.options = Object.assign({ softmaxFactor: 2 }, options);\r\n        // Convert the `time` string into a VoiceTime object if necessary.\r\n        let voiceTime;\r\n        if (typeof time === 'string') {\r\n            // Time signature shortcut: \"4/4\", \"3/8\", etc.\r\n            const match = time.match(/(\\d+)\\/(\\d+)/);\r\n            if (match) {\r\n                voiceTime = {\r\n                    num_beats: parseInt(match[1]),\r\n                    beat_value: parseInt(match[2]),\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            voiceTime = time;\r\n        }\r\n        // Default time signature is 4/4.\r\n        this.time = Object.assign({ num_beats: 4, beat_value: 4, resolution: Tables.RESOLUTION }, voiceTime);\r\n        // Recalculate total ticks.\r\n        this.totalTicks = new Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\r\n        this.smallestTickCount = this.totalTicks.clone();\r\n    }\r\n    static get CATEGORY() {\r\n        return Category.Voice;\r\n    }\r\n    /**\r\n     * Modes allow the addition of ticks in three different ways:\r\n     * - STRICT: This is the default. Ticks must fill the voice.\r\n     * - SOFT: Ticks can be added without restrictions.\r\n     * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\r\n     */\r\n    static get Mode() {\r\n        return VoiceMode;\r\n    }\r\n    /** Get the total ticks in the voice. */\r\n    getTotalTicks() {\r\n        return this.totalTicks;\r\n    }\r\n    /** Get the total ticks used in the voice by all the tickables. */\r\n    getTicksUsed() {\r\n        return this.ticksUsed;\r\n    }\r\n    /** Get the largest width of all the tickables. */\r\n    getLargestTickWidth() {\r\n        return this.largestTickWidth;\r\n    }\r\n    /** Get the tick count for the shortest tickable */\r\n    getSmallestTickCount() {\r\n        return this.smallestTickCount;\r\n    }\r\n    /** Get the tickables in the voice. */\r\n    getTickables() {\r\n        return this.tickables;\r\n    }\r\n    /** Get the voice mode. */\r\n    getMode() {\r\n        return this.mode;\r\n    }\r\n    /**\r\n     * Set the voice mode.\r\n     * @param mode value from `VoiceMode`\r\n     */\r\n    setMode(mode) {\r\n        this.mode = mode;\r\n        return this;\r\n    }\r\n    /** Get the resolution multiplier for the voice. */\r\n    getResolutionMultiplier() {\r\n        return this.resolutionMultiplier;\r\n    }\r\n    /** Get the actual tick resolution for the voice. */\r\n    getActualResolution() {\r\n        return this.resolutionMultiplier * this.time.resolution;\r\n    }\r\n    /** Set the voice's stave. */\r\n    setStave(stave) {\r\n        this.stave = stave;\r\n        // Reset the bounding box so we can reformat.\r\n        this.boundingBox = undefined;\r\n        return this;\r\n    }\r\n    getStave() {\r\n        return this.stave;\r\n    }\r\n    /** Get the bounding box for the voice. */\r\n    getBoundingBox() {\r\n        if (!this.boundingBox) {\r\n            const stave = this.checkStave();\r\n            let boundingBox = undefined;\r\n            for (let i = 0; i < this.tickables.length; ++i) {\r\n                const tickable = this.tickables[i];\r\n                tickable.setStave(stave);\r\n                const bb = tickable.getBoundingBox();\r\n                if (bb) {\r\n                    boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\r\n                }\r\n            }\r\n            this.boundingBox = boundingBox;\r\n        }\r\n        return this.boundingBox;\r\n    }\r\n    /** Set the voice mode to strict or soft. */\r\n    setStrict(strict) {\r\n        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\r\n        return this;\r\n    }\r\n    /** Determine if the voice is complete according to the voice mode. */\r\n    isComplete() {\r\n        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\r\n            return this.ticksUsed.equals(this.totalTicks);\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * We use softmax to layout the tickables proportional to the exponent of\r\n     * their duration. The softmax factor is used to determine the 'linearness' of\r\n     * the layout.\r\n     *\r\n     * The softmax of all the tickables in this voice should sum to 1.\r\n     */\r\n    setSoftmaxFactor(factor) {\r\n        this.options.softmaxFactor = factor;\r\n        return this;\r\n    }\r\n    /**\r\n     * Calculate the sum of the exponents of all the ticks in this voice to use\r\n     * as the denominator of softmax.\r\n     */\r\n    reCalculateExpTicksUsed() {\r\n        const totalTicks = this.ticksUsed.value();\r\n        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\r\n        this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b, 0);\r\n        return this.expTicksUsed;\r\n    }\r\n    /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\r\n    softmax(tickValue) {\r\n        if (!this.expTicksUsed) {\r\n            this.expTicksUsed = this.reCalculateExpTicksUsed();\r\n        }\r\n        const totalTicks = this.ticksUsed.value();\r\n        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);\r\n        const sm = exp(tickValue) / this.expTicksUsed;\r\n        return sm;\r\n    }\r\n    /** Add a tickable to the voice. */\r\n    addTickable(tickable) {\r\n        if (!tickable.shouldIgnoreTicks()) {\r\n            const ticks = tickable.getTicks();\r\n            // Update the total ticks for this line.\r\n            this.ticksUsed.add(ticks);\r\n            this.expTicksUsed = 0; // reset\r\n            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\r\n                this.ticksUsed.greaterThan(this.totalTicks)) {\r\n                this.ticksUsed.subtract(ticks);\r\n                throw new RuntimeError('BadArgument', 'Too many ticks.');\r\n            }\r\n            // Track the smallest tickable for formatting.\r\n            if (ticks.lessThan(this.smallestTickCount)) {\r\n                this.smallestTickCount = ticks.clone();\r\n            }\r\n            this.resolutionMultiplier = this.ticksUsed.denominator;\r\n            // Expand total ticks using denominator from ticks used.\r\n            this.totalTicks.add(0, this.ticksUsed.denominator);\r\n        }\r\n        // Add the tickable to the line.\r\n        this.tickables.push(tickable);\r\n        tickable.setVoice(this);\r\n        return this;\r\n    }\r\n    /** Add an array of tickables to the voice. */\r\n    addTickables(tickables) {\r\n        for (let i = 0; i < tickables.length; ++i) {\r\n            this.addTickable(tickables[i]);\r\n        }\r\n        return this;\r\n    }\r\n    /** Preformat the voice by applying the voice's stave to each note. */\r\n    preFormat() {\r\n        if (this.preFormatted)\r\n            return this;\r\n        const stave = this.checkStave();\r\n        this.tickables.forEach((tickable) => {\r\n            if (!tickable.getStave()) {\r\n                tickable.setStave(stave);\r\n            }\r\n        });\r\n        this.preFormatted = true;\r\n        return this;\r\n    }\r\n    checkStave() {\r\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\r\n    }\r\n    /**\r\n     * Render the voice onto the canvas `context` and an optional `stave`.\r\n     * If `stave` is omitted, it is expected that the notes have staves\r\n     * already set.\r\n     *\r\n     * This method also calculates the voice's boundingBox while drawing\r\n     * the notes. Note the similarities with this.getBoundingBox().\r\n     */\r\n    draw(context = this.checkContext(), stave) {\r\n        stave = stave !== null && stave !== void 0 ? stave : this.stave;\r\n        this.setRendered();\r\n        let boundingBox = undefined;\r\n        for (let i = 0; i < this.tickables.length; ++i) {\r\n            const tickable = this.tickables[i];\r\n            // Set the stave if provided.\r\n            if (stave) {\r\n                tickable.setStave(stave);\r\n            }\r\n            defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\r\n            const bb = tickable.getBoundingBox();\r\n            if (bb) {\r\n                boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\r\n            }\r\n            tickable.setContext(context);\r\n            tickable.drawWithStyle();\r\n        }\r\n        this.boundingBox = boundingBox;\r\n    }\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Ron B. Yeh\r\n// MIT License\r\n//\r\n// Utilities for working with Web APIs.\r\n// See: https://developer.mozilla.org/en-US/docs/Web/API\r\nimport { globalObject } from './util';\r\n// eslint-disable-next-line\r\nexport function isHTMLCanvas(element) {\r\n    if (!element)\r\n        return false;\r\n    const global = globalObject();\r\n    return (\r\n    // It's either an instance of the HTMLCanvasElement class,\r\n    (typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||\r\n        // OR it's pretending to be a <canvas> element. Good enough!\r\n        // Do not rely on .tagName, because node-canvas doesn't provide a tagName.\r\n        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));\r\n}\r\n// eslint-disable-next-line\r\nexport function isHTMLDiv(element) {\r\n    if (!element)\r\n        return false;\r\n    const global = globalObject();\r\n    return (\r\n    // It's either an instance of the HTMLDivElement class.\r\n    (typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||\r\n        // OR it's pretending to be a <div>. See: svgcontext.ts.\r\n        (typeof element.appendChild === 'function' && typeof element.style === 'object'));\r\n}\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Accidental Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Accidental } from '../src/accidental';\r\nimport { Beam } from '../src/beam';\r\nimport { Dot } from '../src/dot';\r\nimport { Flow } from '../src/flow';\r\nimport { Formatter } from '../src/formatter';\r\nimport { ModifierContext } from '../src/modifiercontext';\r\nimport { Note } from '../src/note';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Stem } from '../src/stem';\r\nimport { TickContext } from '../src/tickcontext';\r\nimport { TimeSigNote } from '../src/timesignote';\r\nimport { isAccidental } from '../src/typeguard';\r\nimport { Voice } from '../src/voice';\r\nconst AccidentalTests = {\r\n    Start() {\r\n        QUnit.module('Accidental');\r\n        test('Automatic Accidentals - Simple Tests', autoAccidentalWorking);\r\n        const run = VexFlowTests.runTests;\r\n        run('Accidental Padding', formatAccidentalSpaces);\r\n        run('Basic', basic);\r\n        run('Stem Down', basicStemDown);\r\n        run('Cautionary Accidental', cautionary);\r\n        run('Accidental Arrangement Special Cases', specialCases);\r\n        run('Multi Voice', multiVoice);\r\n        run('Microtonal', microtonal);\r\n        run('Microtonal (Iranian)', microtonal_iranian);\r\n        run('Sagittal', sagittal);\r\n        run('Automatic Accidentals', automaticAccidentals0);\r\n        run('Automatic Accidentals - C major scale in Ab', automaticAccidentals1);\r\n        run('Automatic Accidentals - No Accidentals Necessary', automaticAccidentals2);\r\n        run('Automatic Accidentals - No Accidentals Necessary (EasyScore)', automaticAccidentals3);\r\n        run('Automatic Accidentals - Multi Voice Inline', automaticAccidentalsMultiVoiceInline);\r\n        run('Automatic Accidentals - Multi Voice Offset', automaticAccidentalsMultiVoiceOffset);\r\n        run('Automatic Accidentals - Key C, Single Octave', automaticAccidentalsCornerCases1);\r\n        run('Automatic Accidentals - Key C, Two Octaves', automaticAccidentalsCornerCases2);\r\n        run('Automatic Accidentals - Key C#, Single Octave', automaticAccidentalsCornerCases3);\r\n        run('Automatic Accidentals - Key C#, Two Octaves', automaticAccidentalsCornerCases4);\r\n        run('Factory API', factoryAPI);\r\n    },\r\n};\r\n// Check that at least one of the note's modifiers is an Accidental.\r\nfunction hasAccidental(note) {\r\n    return note.getModifiers().some((modifier) => isAccidental(modifier));\r\n}\r\n// Return a convenience function for building accidentals from a string.\r\nfunction makeNewAccid(factory) {\r\n    return (type) => factory.Accidental({ type });\r\n}\r\n/**\r\n *\r\n */\r\nfunction autoAccidentalWorking() {\r\n    const createStaveNote = (noteStruct) => new StaveNote(noteStruct);\r\n    let notes = [\r\n        { keys: ['bb/4'], duration: '4' },\r\n        { keys: ['bb/4'], duration: '4' },\r\n        { keys: ['g#/4'], duration: '4' },\r\n        { keys: ['g/4'], duration: '4' },\r\n        { keys: ['b/4'], duration: '4' },\r\n        { keys: ['b/4'], duration: '4' },\r\n        { keys: ['a#/4'], duration: '4' },\r\n        { keys: ['g#/4'], duration: '4' },\r\n    ].map(createStaveNote);\r\n    let voice = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    // F Major (Bb)\r\n    Accidental.applyAccidentals([voice], 'F');\r\n    equal(hasAccidental(notes[0]), false, 'No flat because of key signature');\r\n    equal(hasAccidental(notes[1]), false, 'No flat because of key signature');\r\n    equal(hasAccidental(notes[2]), true, 'Added a sharp');\r\n    equal(hasAccidental(notes[3]), true, 'Back to natural');\r\n    equal(hasAccidental(notes[4]), true, 'Back to natural');\r\n    equal(hasAccidental(notes[5]), false, 'Natural remembered');\r\n    equal(hasAccidental(notes[6]), true, 'Added sharp');\r\n    equal(hasAccidental(notes[7]), true, 'Added sharp');\r\n    notes = [\r\n        { keys: ['e#/4'], duration: '4' },\r\n        { keys: ['cb/4'], duration: '4' },\r\n        { keys: ['fb/4'], duration: '4' },\r\n        { keys: ['b#/4'], duration: '4' },\r\n        { keys: ['b#/4'], duration: '4' },\r\n        { keys: ['cb/5'], duration: '4' },\r\n        { keys: ['fb/5'], duration: '4' },\r\n        { keys: ['e#/4'], duration: '4' },\r\n    ].map(createStaveNote);\r\n    voice = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    // A Major (F#,G#,C#)\r\n    Accidental.applyAccidentals([voice], 'A');\r\n    equal(hasAccidental(notes[0]), true, 'Added sharp');\r\n    equal(hasAccidental(notes[1]), true, 'Added flat');\r\n    equal(hasAccidental(notes[2]), true, 'Added flat');\r\n    equal(hasAccidental(notes[3]), true, 'Added sharp');\r\n    equal(hasAccidental(notes[4]), false, 'Sharp remembered');\r\n    equal(hasAccidental(notes[5]), true, 'Added flat(different octave)');\r\n    equal(hasAccidental(notes[6]), true, 'Added flat(different octave)');\r\n    equal(hasAccidental(notes[7]), false, 'sharp remembered');\r\n    notes = [\r\n        { keys: ['c/4'], duration: '4' },\r\n        { keys: ['cb/4'], duration: '4' },\r\n        { keys: ['cb/4'], duration: '4' },\r\n        { keys: ['c#/4'], duration: '4' },\r\n        { keys: ['c#/4'], duration: '4' },\r\n        { keys: ['cbb/4'], duration: '4' },\r\n        { keys: ['cbb/4'], duration: '4' },\r\n        { keys: ['c##/4'], duration: '4' },\r\n        { keys: ['c##/4'], duration: '4' },\r\n        { keys: ['c/4'], duration: '4' },\r\n        { keys: ['c/4'], duration: '4' },\r\n    ].map(createStaveNote);\r\n    voice = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    // C Major (no sharps/flats)\r\n    Accidental.applyAccidentals([voice], 'C');\r\n    equal(hasAccidental(notes[0]), false, 'No accidental');\r\n    equal(hasAccidental(notes[1]), true, 'Added flat');\r\n    equal(hasAccidental(notes[2]), false, 'Flat remembered');\r\n    equal(hasAccidental(notes[3]), true, 'Sharp added');\r\n    equal(hasAccidental(notes[4]), false, 'Sharp remembered');\r\n    equal(hasAccidental(notes[5]), true, 'Added doubled flat');\r\n    equal(hasAccidental(notes[6]), false, 'Double flat remembered');\r\n    equal(hasAccidental(notes[7]), true, 'Added double sharp');\r\n    equal(hasAccidental(notes[8]), false, 'Double sharp rememberd');\r\n    equal(hasAccidental(notes[9]), true, 'Added natural');\r\n    equal(hasAccidental(notes[10]), false, 'Natural remembered');\r\n}\r\n/**\r\n *\r\n */\r\nfunction formatAccidentalSpaces(options) {\r\n    const f = VexFlowTests.makeFactory(options, 750, 280);\r\n    const context = f.getContext();\r\n    const softmaxFactor = 100;\r\n    // Create the notes\r\n    const notes = [\r\n        new StaveNote({\r\n            keys: ['e##/5'],\r\n            duration: '8d',\r\n        }).addModifier(new Accidental('##'), 0),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '16',\r\n        }).addModifier(new Accidental('b'), 0),\r\n        new StaveNote({\r\n            keys: ['f/3'],\r\n            duration: '8',\r\n        }),\r\n        new StaveNote({\r\n            keys: ['a/3'],\r\n            duration: '16',\r\n        }),\r\n        new StaveNote({\r\n            keys: ['e/4', 'g/4'],\r\n            duration: '16',\r\n        })\r\n            .addModifier(new Accidental('bb'), 0)\r\n            .addModifier(new Accidental('bb'), 1),\r\n        new StaveNote({\r\n            keys: ['d/4'],\r\n            duration: '16',\r\n        }),\r\n        new StaveNote({\r\n            keys: ['e/4', 'g/4'],\r\n            duration: '16',\r\n        })\r\n            .addModifier(new Accidental('#'), 0)\r\n            .addModifier(new Accidental('#'), 1),\r\n        new StaveNote({\r\n            keys: ['g/4'],\r\n            duration: '32',\r\n        }),\r\n        new StaveNote({\r\n            keys: ['a/4'],\r\n            duration: '32',\r\n        }),\r\n        new StaveNote({\r\n            keys: ['g/4'],\r\n            duration: '16',\r\n        }),\r\n        new StaveNote({\r\n            keys: ['d/4'],\r\n            duration: 'q',\r\n        }),\r\n    ];\r\n    Dot.buildAndAttach([notes[0]], { all: true });\r\n    const beams = Beam.generateBeams(notes);\r\n    const voice = new Voice({\r\n        num_beats: 4,\r\n        beat_value: 4,\r\n    });\r\n    voice.addTickables(notes);\r\n    const formatter = new Formatter({ softmaxFactor }).joinVoices([voice]);\r\n    const width = formatter.preCalculateMinTotalWidth([voice]);\r\n    const stave = new Stave(10, 40, width + 20);\r\n    stave.setContext(context).draw();\r\n    formatter.format([voice], width);\r\n    voice.draw(context, stave);\r\n    beams.forEach((b) => b.setContext(context).draw());\r\n    notes.forEach((note) => Note.plotMetrics(context, note, 30));\r\n    VexFlowTests.plotLegendForNoteWidth(context, 300, 150);\r\n    ok(true);\r\n}\r\nfunction basic(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 240);\r\n    const accid = makeNewAccid(f);\r\n    f.Stave({ x: 10, y: 10, width: 550 });\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '1' })\r\n            .addModifier(accid('b'), 0)\r\n            .addModifier(accid('#'), 1),\r\n        // Notes keys out of alphabetic order\r\n        f\r\n            .StaveNote({ keys: ['e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5', 'd/4'], duration: '2' })\r\n            .addModifier(accid('##'), 6)\r\n            .addModifier(accid('n'), 0)\r\n            .addModifier(accid('bb'), 1)\r\n            .addModifier(accid('b'), 2)\r\n            .addModifier(accid('#'), 3)\r\n            .addModifier(accid('n'), 4)\r\n            .addModifier(accid('bb'), 5),\r\n        // Notes keys out of alphabetic order\r\n        f\r\n            .StaveNote({ keys: ['g/5', 'f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5'], duration: '16' })\r\n            .addModifier(accid('n'), 1)\r\n            .addModifier(accid('#'), 2)\r\n            .addModifier(accid('#'), 3)\r\n            .addModifier(accid('b'), 4)\r\n            .addModifier(accid('bb'), 5)\r\n            .addModifier(accid('##'), 6)\r\n            .addModifier(accid('#'), 0),\r\n        f\r\n            .StaveNote({ keys: ['a/3', 'c/4', 'e/4', 'b/4', 'd/5', 'g/5'], duration: '1' })\r\n            .addModifier(accid('#'), 0)\r\n            .addModifier(accid('##').setAsCautionary(), 1)\r\n            .addModifier(accid('#').setAsCautionary(), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('bb').setAsCautionary(), 4)\r\n            .addModifier(accid('b').setAsCautionary(), 5),\r\n    ];\r\n    Formatter.SimpleFormat(notes, 10, { paddingBetween: 45 });\r\n    notes.forEach((note, index) => {\r\n        Note.plotMetrics(f.getContext(), note, 140);\r\n        ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\r\n        note.getModifiersByType('Accidental').forEach((accid, index) => {\r\n            ok(accid.getWidth() > 0, 'Accidental ' + index + ' has set width');\r\n        });\r\n    });\r\n    f.draw();\r\n    VexFlowTests.plotLegendForNoteWidth(f.getContext(), 480, 140);\r\n    ok(true, 'Full Accidental');\r\n}\r\nfunction cautionary(options) {\r\n    const staveCount = 12;\r\n    const scale = 0.85;\r\n    const staveWidth = 840;\r\n    let i = 0;\r\n    let j = 0;\r\n    const f = VexFlowTests.makeFactory(options, staveWidth + 10, 175 * staveCount + 10);\r\n    f.getContext().scale(scale, scale);\r\n    const accids = Object.keys(Flow.accidentalMap).filter((accid) => accid !== '{' && accid !== '}');\r\n    const mod = Math.round(accids.length / staveCount);\r\n    for (i = 0; i < staveCount; ++i) {\r\n        const stave = f.Stave({ x: 0, y: 10 + 200 * i, width: staveWidth / scale });\r\n        const score = f.EasyScore();\r\n        const rowMap = [];\r\n        for (j = 0; j < mod && j + i * staveCount < accids.length; ++j) {\r\n            rowMap.push(accids[j + i * staveCount]);\r\n        }\r\n        const notes = rowMap.map((accidType) => f\r\n            .StaveNote({ keys: ['a/4'], duration: '4', stem_direction: Stem.UP })\r\n            .addModifier(f.Accidental({ type: accidType }), 0));\r\n        const voice = score.voice(notes, { time: rowMap.length + '/4' });\r\n        voice.getTickables().forEach((tickable) => {\r\n            tickable\r\n                .getModifiers()\r\n                .filter((modifier) => modifier.getAttribute('type') === Accidental.CATEGORY)\r\n                .forEach((accid) => accid.setAsCautionary());\r\n        });\r\n        f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n        f.draw();\r\n    }\r\n    ok(true, 'Must successfully render cautionary accidentals');\r\n}\r\nfunction specialCases(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 240);\r\n    const accid = makeNewAccid(f);\r\n    f.Stave({ x: 10, y: 10, width: 550 });\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['f/4', 'd/5'], duration: '1' })\r\n            .addModifier(accid('#'), 0)\r\n            .addModifier(accid('b'), 1),\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'g/4'], duration: '2' })\r\n            .addModifier(accid('##'), 0)\r\n            .addModifier(accid('##'), 1),\r\n        f\r\n            .StaveNote({ keys: ['b/3', 'd/4', 'f/4'], duration: '16' })\r\n            .addModifier(accid('#'), 0)\r\n            .addModifier(accid('#'), 1)\r\n            .addModifier(accid('##'), 2),\r\n        f\r\n            .StaveNote({ keys: ['g/4', 'a/4', 'c/5', 'e/5'], duration: '16' })\r\n            .addModifier(accid('b'), 0)\r\n            .addModifier(accid('b'), 1)\r\n            .addModifier(accid('n'), 3),\r\n        f\r\n            .StaveNote({ keys: ['e/4', 'g/4', 'b/4', 'c/5'], duration: '4' })\r\n            .addModifier(accid('b').setAsCautionary(), 0)\r\n            .addModifier(accid('b').setAsCautionary(), 1)\r\n            .addModifier(accid('bb'), 2)\r\n            .addModifier(accid('b'), 3),\r\n        f\r\n            .StaveNote({ keys: ['b/3', 'e/4', 'a/4', 'd/5', 'g/5'], duration: '8' })\r\n            .addModifier(accid('bb'), 0)\r\n            .addModifier(accid('b').setAsCautionary(), 1)\r\n            .addModifier(accid('n').setAsCautionary(), 2)\r\n            .addModifier(accid('#'), 3)\r\n            .addModifier(accid('n').setAsCautionary(), 4),\r\n    ];\r\n    Formatter.SimpleFormat(notes, 0, { paddingBetween: 20 });\r\n    notes.forEach((note, index) => {\r\n        Note.plotMetrics(f.getContext(), note, 140);\r\n        ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\r\n        note.getModifiersByType('Accidental').forEach((accid, index) => {\r\n            ok(accid.getWidth() > 0, 'Accidental ' + index + ' has set width');\r\n        });\r\n    });\r\n    f.draw();\r\n    VexFlowTests.plotLegendForNoteWidth(f.getContext(), 480, 140);\r\n    ok(true, 'Full Accidental');\r\n}\r\nfunction basicStemDown(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 240);\r\n    const accid = makeNewAccid(f);\r\n    f.Stave({ x: 10, y: 10, width: 550 });\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w', stem_direction: -1 })\r\n            .addModifier(accid('b'), 0)\r\n            .addModifier(accid('#'), 1),\r\n        f\r\n            .StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: '2', stem_direction: -1 })\r\n            .addModifier(accid('##'), 0)\r\n            .addModifier(accid('n'), 1)\r\n            .addModifier(accid('bb'), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('#'), 4)\r\n            .addModifier(accid('n'), 5)\r\n            .addModifier(accid('bb'), 6),\r\n        f\r\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16', stem_direction: -1 })\r\n            .addModifier(accid('n'), 0)\r\n            .addModifier(accid('#'), 1)\r\n            .addModifier(accid('#'), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('bb'), 4)\r\n            .addModifier(accid('##'), 5)\r\n            .addModifier(accid('#'), 6),\r\n    ];\r\n    Formatter.SimpleFormat(notes, 0, { paddingBetween: 30 });\r\n    notes.forEach((note, noteIndex) => {\r\n        Note.plotMetrics(f.getContext(), note, 140);\r\n        ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + noteIndex + ' has accidentals');\r\n        note.getModifiersByType('Accidental').forEach((accid, accidIndex) => {\r\n            ok(accid.getWidth() > 0, 'Accidental ' + accidIndex + ' has set width');\r\n        });\r\n    });\r\n    f.draw();\r\n    VexFlowTests.plotLegendForNoteWidth(f.getContext(), 480, 140);\r\n    ok(true, 'Full Accidental');\r\n}\r\nfunction multiVoice(options) {\r\n    // Helper function for visualizing\r\n    function showNotes(note1, note2, stave, ctx, x) {\r\n        const modifierContext = new ModifierContext();\r\n        note1.addToModifierContext(modifierContext);\r\n        note2.addToModifierContext(modifierContext);\r\n        new TickContext().addTickable(note1).addTickable(note2).preFormat().setX(x);\r\n        note1.setContext(ctx).draw();\r\n        note2.setContext(ctx).draw();\r\n        Note.plotMetrics(ctx, note1, 180);\r\n        Note.plotMetrics(ctx, note2, 15);\r\n    }\r\n    const f = VexFlowTests.makeFactory(options, 460, 250);\r\n    const accid = makeNewAccid(f);\r\n    const stave = f.Stave({ x: 10, y: 45, width: 420 });\r\n    const ctx = f.getContext();\r\n    stave.draw();\r\n    let note1 = f\r\n        .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '2', stem_direction: -1 })\r\n        .addModifier(accid('b'), 0)\r\n        .addModifier(accid('n'), 1)\r\n        .addModifier(accid('#'), 2)\r\n        .setStave(stave);\r\n    let note2 = f\r\n        .StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '2', stem_direction: 1 })\r\n        .addModifier(accid('b'), 0)\r\n        .addModifier(accid('bb'), 1)\r\n        .addModifier(accid('##'), 2)\r\n        .setStave(stave);\r\n    showNotes(note1, note2, stave, ctx, 60);\r\n    note1 = f\r\n        .StaveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: '2', stem_direction: -1 })\r\n        .addModifier(accid('b'), 0)\r\n        .addModifier(accid('n'), 1)\r\n        .addModifier(accid('#'), 2)\r\n        .setStave(stave);\r\n    note2 = f\r\n        .StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '4', stem_direction: 1 })\r\n        .addModifier(accid('b'), 0)\r\n        .setStave(stave);\r\n    showNotes(note1, note2, stave, ctx, 150);\r\n    note1 = f\r\n        .StaveNote({ keys: ['d/4', 'c/5', 'd/5'], duration: '2', stem_direction: -1 })\r\n        .addModifier(accid('b'), 0)\r\n        .addModifier(accid('n'), 1)\r\n        .addModifier(accid('#'), 2)\r\n        .setStave(stave);\r\n    note2 = f\r\n        .StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '4', stem_direction: 1 })\r\n        .addModifier(accid('b'), 0)\r\n        .setStave(stave);\r\n    showNotes(note1, note2, stave, ctx, 250);\r\n    VexFlowTests.plotLegendForNoteWidth(ctx, 350, 150);\r\n    ok(true, 'Full Accidental');\r\n}\r\nfunction microtonal(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 240);\r\n    const accid = makeNewAccid(f);\r\n    const ctx = f.getContext();\r\n    f.Stave({ x: 10, y: 10, width: 650 });\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '1' })\r\n            .addModifier(accid('db'), 0)\r\n            .addModifier(accid('d'), 1),\r\n        f\r\n            .StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: '2' })\r\n            .addModifier(accid('bbs'), 0)\r\n            .addModifier(accid('++'), 1)\r\n            .addModifier(accid('+'), 2)\r\n            .addModifier(accid('d'), 3)\r\n            .addModifier(accid('db'), 4)\r\n            .addModifier(accid('+'), 5)\r\n            .addModifier(accid('##'), 6),\r\n        f\r\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16' })\r\n            .addModifier(accid('++'), 0)\r\n            .addModifier(accid('bbs'), 1)\r\n            .addModifier(accid('+'), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('db'), 4)\r\n            .addModifier(accid('##'), 5)\r\n            .addModifier(accid('#'), 6),\r\n        f\r\n            .StaveNote({ keys: ['a/3', 'c/4', 'e/4', 'b/4', 'd/5', 'g/5'], duration: '1' })\r\n            .addModifier(accid('#'), 0)\r\n            .addModifier(accid('db').setAsCautionary(), 1)\r\n            .addModifier(accid('bbs').setAsCautionary(), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('++').setAsCautionary(), 4)\r\n            .addModifier(accid('d').setAsCautionary(), 5),\r\n        f\r\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'd/5', 'g/5'], duration: '16' })\r\n            .addModifier(accid('++-'), 0)\r\n            .addModifier(accid('+-'), 1)\r\n            .addModifier(accid('bs'), 2)\r\n            .addModifier(accid('bss'), 3)\r\n            .addModifier(accid('afhf'), 4)\r\n            .addModifier(accid('ashs'), 5),\r\n    ];\r\n    Formatter.SimpleFormat(notes, 0, { paddingBetween: 35 });\r\n    notes.forEach((note, index) => {\r\n        Note.plotMetrics(f.getContext(), note, 140);\r\n        ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\r\n        note.getModifiersByType('Accidental').forEach((accid, index) => {\r\n            ok(accid.getWidth() > 0, 'Accidental ' + index + ' has set width');\r\n        });\r\n    });\r\n    f.draw();\r\n    VexFlowTests.plotLegendForNoteWidth(ctx, 580, 140);\r\n    ok(true, 'Microtonal Accidental');\r\n}\r\nfunction microtonal_iranian(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 240);\r\n    const accid = makeNewAccid(f);\r\n    const ctx = f.getContext();\r\n    f.Stave({ x: 10, y: 10, width: 650 });\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '1' })\r\n            .addModifier(accid('k'), 0)\r\n            .addModifier(accid('o'), 1),\r\n        f\r\n            .StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: '2' })\r\n            .addModifier(accid('b'), 0)\r\n            .addModifier(accid('k'), 1)\r\n            .addModifier(accid('n'), 2)\r\n            .addModifier(accid('o'), 3)\r\n            .addModifier(accid('#'), 4)\r\n            .addModifier(accid('bb'), 5)\r\n            .addModifier(accid('##'), 6),\r\n        f\r\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16' })\r\n            .addModifier(accid('o'), 0)\r\n            .addModifier(accid('k'), 1)\r\n            .addModifier(accid('n'), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('bb'), 4)\r\n            .addModifier(accid('##'), 5)\r\n            .addModifier(accid('#'), 6),\r\n        f\r\n            .StaveNote({ keys: ['a/3', 'c/4', 'e/4', 'b/4', 'd/5', 'g/5'], duration: '1' })\r\n            .addModifier(accid('#'), 0)\r\n            .addModifier(accid('o').setAsCautionary(), 1)\r\n            .addModifier(accid('n').setAsCautionary(), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('k').setAsCautionary(), 4),\r\n        f\r\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4'], duration: '16' })\r\n            .addModifier(accid('k'), 0)\r\n            .addModifier(accid('k'), 1)\r\n            .addModifier(accid('k'), 2)\r\n            .addModifier(accid('k'), 3),\r\n    ];\r\n    Formatter.SimpleFormat(notes, 0, { paddingBetween: 35 });\r\n    notes.forEach((note, index) => {\r\n        Note.plotMetrics(f.getContext(), note, 140);\r\n        ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\r\n        note.getModifiersByType('Accidental').forEach((accid, index) => {\r\n            ok(accid.getWidth() > 0, 'Accidental ' + index + ' has set width');\r\n        });\r\n    });\r\n    f.draw();\r\n    VexFlowTests.plotLegendForNoteWidth(ctx, 580, 140);\r\n    ok(true, 'Microtonal Accidental (Iranian)');\r\n}\r\nfunction sagittal(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 240);\r\n    const accid = makeNewAccid(f);\r\n    const ctx = f.getContext();\r\n    f.Stave({ x: 10, y: 10, width: 650 });\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['d/4', 'f/4', 'b/4', 'b/4'], duration: '4' })\r\n            .addModifier(accid('accSagittal11MediumDiesisUp'), 1)\r\n            .addModifier(accid('accSagittal5CommaDown'), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('accSagittal7CommaDown'), 3),\r\n        f\r\n            .StaveNote({ keys: ['d/4', 'f/4', 'a/4', 'b/4'], duration: '4' })\r\n            .addModifier(accid('accSagittal35LargeDiesisDown'), 2),\r\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'c/5'], duration: '8' }).addModifier(accid('accSagittal5CommaDown'), 1),\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'b/4'], duration: '8' })\r\n            .addModifier(accid('b'), 1)\r\n            .addModifier(accid('accSagittal7CommaDown'), 1)\r\n            .addModifier(accid('accSagittal11LargeDiesisDown'), 3),\r\n        f\r\n            .StaveNote({ keys: ['d/4', 'f/4', 'b/4', 'b/4'], duration: '4' })\r\n            .addModifier(accid('accSagittal11MediumDiesisUp'), 1)\r\n            .addModifier(accid('accSagittal5CommaDown'), 2)\r\n            .addModifier(accid('accSagittalFlat7CDown'), 3),\r\n        f\r\n            .StaveNote({ keys: ['d/4', 'f/4', 'a/4', 'b/4'], duration: '4' })\r\n            .addModifier(accid('accSagittal35LargeDiesisDown'), 2),\r\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'c/5'], duration: '8' }).addModifier(accid('accSagittal5CommaDown'), 1),\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'b/4'], duration: '8' })\r\n            .addModifier(accid('accSagittalFlat7CDown'), 1)\r\n            .addModifier(accid('accSagittal11LargeDiesisDown'), 3),\r\n    ];\r\n    f.StaveTie({\r\n        from: notes[0],\r\n        to: notes[1],\r\n        first_indices: [0, 1],\r\n        last_indices: [0, 1],\r\n    });\r\n    f.StaveTie({\r\n        from: notes[0],\r\n        to: notes[1],\r\n        first_indices: [3],\r\n        last_indices: [3],\r\n        options: {\r\n            direction: Stem.DOWN,\r\n        },\r\n    });\r\n    f.StaveTie({\r\n        from: notes[4],\r\n        to: notes[5],\r\n        first_indices: [0, 1],\r\n        last_indices: [0, 1],\r\n    });\r\n    f.StaveTie({\r\n        from: notes[4],\r\n        to: notes[5],\r\n        first_indices: [3],\r\n        last_indices: [3],\r\n        options: {\r\n            direction: Stem.DOWN,\r\n        },\r\n    });\r\n    f.Beam({ notes: notes.slice(2, 4) });\r\n    f.Beam({ notes: notes.slice(6, 8) });\r\n    Formatter.SimpleFormat(notes);\r\n    notes.forEach((note, index) => {\r\n        Note.plotMetrics(f.getContext(), note, 140);\r\n        ok(note.getModifiersByType('Accidental').length > 0, 'Note ' + index + ' has accidentals');\r\n        note.getModifiersByType('Accidental').forEach((accid, index) => {\r\n            ok(accid.getWidth() > 0, 'Accidental ' + index + ' has set width');\r\n        });\r\n    });\r\n    f.draw();\r\n    VexFlowTests.plotLegendForNoteWidth(ctx, 580, 140);\r\n    ok(true, 'Sagittal');\r\n}\r\nfunction automaticAccidentals0(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 200);\r\n    const stave = f.Stave();\r\n    const notes = [\r\n        { keys: ['c/4', 'c/5'], duration: '4' },\r\n        { keys: ['c#/4', 'c#/5'], duration: '4' },\r\n        { keys: ['c#/4', 'c#/5'], duration: '4' },\r\n        { keys: ['c##/4', 'c##/5'], duration: '4' },\r\n        { keys: ['c##/4', 'c##/5'], duration: '4' },\r\n        { keys: ['c/4', 'c/5'], duration: '4' },\r\n        { keys: ['cn/4', 'cn/5'], duration: '4' },\r\n        { keys: ['cbb/4', 'cbb/5'], duration: '4' },\r\n        { keys: ['cbb/4', 'cbb/5'], duration: '4' },\r\n        { keys: ['cb/4', 'cb/5'], duration: '4' },\r\n        { keys: ['cb/4', 'cb/5'], duration: '4' },\r\n        { keys: ['c/4', 'c/5'], duration: '4' },\r\n    ].map(f.StaveNote.bind(f));\r\n    const gracenotes = [{ keys: ['d#/4'], duration: '16', slash: true }].map(f.GraceNote.bind(f));\r\n    notes[0].addModifier(f.GraceNoteGroup({ notes: gracenotes }).beamNotes(), 0);\r\n    const voice = f\r\n        .Voice()\r\n        .setMode(Voice.Mode.SOFT)\r\n        .addTickable(new TimeSigNote('12/4').setStave(stave))\r\n        .addTickables(notes);\r\n    Accidental.applyAccidentals([voice], 'C');\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction automaticAccidentals1(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 150);\r\n    const stave = f.Stave().addKeySignature('Ab');\r\n    const notes = [\r\n        { keys: ['c/4'], duration: '4' },\r\n        { keys: ['d/4'], duration: '4' },\r\n        { keys: ['e/4'], duration: '4' },\r\n        { keys: ['f/4'], duration: '4' },\r\n        { keys: ['g/4'], duration: '4' },\r\n        { keys: ['a/4'], duration: '4' },\r\n        { keys: ['b/4'], duration: '4' },\r\n        { keys: ['c/5'], duration: '4' },\r\n    ].map(f.StaveNote.bind(f));\r\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    Accidental.applyAccidentals([voice], 'Ab');\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction automaticAccidentals2(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 150);\r\n    const stave = f.Stave().addKeySignature('A');\r\n    const notes = [\r\n        { keys: ['a/4'], duration: '4' },\r\n        { keys: ['b/4'], duration: '4' },\r\n        { keys: ['c#/5'], duration: '4' },\r\n        { keys: ['d/5'], duration: '4' },\r\n        { keys: ['e/5'], duration: '4' },\r\n        { keys: ['f#/5'], duration: '4' },\r\n        { keys: ['g#/5'], duration: '4' },\r\n        { keys: ['a/5'], duration: '4' },\r\n    ].map(f.StaveNote.bind(f));\r\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    Accidental.applyAccidentals([voice], 'A');\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction automaticAccidentals3(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 150);\r\n    const stave = f.Stave().addKeySignature('A');\r\n    const score = f.EasyScore();\r\n    score.set({ time: '8/4' });\r\n    const notes = score.notes('A4/q, B4/q, C#5/q, D5/q, E5/q,F#5/q, G#5/q, A5/q', { stem: 'UP' });\r\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    Accidental.applyAccidentals([voice], 'A');\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction automaticAccidentalsMultiVoiceInline(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 150);\r\n    const stave = f.Stave().addKeySignature('Ab');\r\n    const notes0 = [\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['d/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['e/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['f/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['g/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['a/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['b/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n    ].map(f.StaveNote.bind(f));\r\n    const notes1 = [\r\n        { keys: ['c/5'], duration: '4' },\r\n        { keys: ['d/5'], duration: '4' },\r\n        { keys: ['e/5'], duration: '4' },\r\n        { keys: ['f/5'], duration: '4' },\r\n        { keys: ['g/5'], duration: '4' },\r\n        { keys: ['a/5'], duration: '4' },\r\n        { keys: ['b/5'], duration: '4' },\r\n        { keys: ['c/6'], duration: '4' },\r\n    ].map(f.StaveNote.bind(f));\r\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\r\n    const voice1 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes1);\r\n    // Ab Major\r\n    Accidental.applyAccidentals([voice0, voice1], 'Ab');\r\n    equal(hasAccidental(notes0[0]), false);\r\n    equal(hasAccidental(notes0[1]), true);\r\n    equal(hasAccidental(notes0[2]), true);\r\n    equal(hasAccidental(notes0[3]), false);\r\n    equal(hasAccidental(notes0[4]), false);\r\n    equal(hasAccidental(notes0[5]), true);\r\n    equal(hasAccidental(notes0[6]), true);\r\n    equal(hasAccidental(notes0[7]), false);\r\n    equal(hasAccidental(notes1[0]), false);\r\n    equal(hasAccidental(notes1[1]), true);\r\n    equal(hasAccidental(notes1[2]), true);\r\n    equal(hasAccidental(notes1[3]), false);\r\n    equal(hasAccidental(notes1[4]), false);\r\n    equal(hasAccidental(notes1[5]), true);\r\n    equal(hasAccidental(notes1[6]), true);\r\n    equal(hasAccidental(notes1[7]), false);\r\n    new Formatter().joinVoices([voice0, voice1]).formatToStave([voice0, voice1], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction automaticAccidentalsMultiVoiceOffset(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 150);\r\n    const stave = f.Stave().addKeySignature('Cb');\r\n    const notes0 = [\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['d/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['e/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['f/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['g/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['a/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['b/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n    ].map(f.StaveNote.bind(f));\r\n    const notes1 = [\r\n        { keys: ['c/5'], duration: '8' },\r\n        { keys: ['c/5'], duration: '4' },\r\n        { keys: ['d/5'], duration: '4' },\r\n        { keys: ['e/5'], duration: '4' },\r\n        { keys: ['f/5'], duration: '4' },\r\n        { keys: ['g/5'], duration: '4' },\r\n        { keys: ['a/5'], duration: '4' },\r\n        { keys: ['b/5'], duration: '4' },\r\n        { keys: ['c/6'], duration: '4' },\r\n    ].map(f.StaveNote.bind(f));\r\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\r\n    const voice1 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes1);\r\n    // Cb Major (All flats)\r\n    Accidental.applyAccidentals([voice0, voice1], 'Cb');\r\n    equal(hasAccidental(notes0[0]), true);\r\n    equal(hasAccidental(notes0[1]), true);\r\n    equal(hasAccidental(notes0[2]), true);\r\n    equal(hasAccidental(notes0[3]), true);\r\n    equal(hasAccidental(notes0[4]), true);\r\n    equal(hasAccidental(notes0[5]), true);\r\n    equal(hasAccidental(notes0[6]), true);\r\n    equal(hasAccidental(notes0[7]), false, 'Natural Remembered');\r\n    equal(hasAccidental(notes1[0]), true);\r\n    equal(hasAccidental(notes1[1]), false);\r\n    equal(hasAccidental(notes1[2]), true);\r\n    equal(hasAccidental(notes1[3]), true);\r\n    equal(hasAccidental(notes1[4]), true);\r\n    equal(hasAccidental(notes1[5]), true);\r\n    equal(hasAccidental(notes1[6]), true);\r\n    equal(hasAccidental(notes1[7]), true);\r\n    new Formatter().joinVoices([voice0, voice1]).formatToStave([voice0, voice1], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction automaticAccidentalsCornerCases1(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 150);\r\n    const stave = f.Stave().addKeySignature('C');\r\n    const notes0 = [\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n    ].map(f.StaveNote.bind(f));\r\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\r\n    Accidental.applyAccidentals([voice0], 'C');\r\n    equal(hasAccidental(notes0[0]), false);\r\n    equal(hasAccidental(notes0[1]), true);\r\n    equal(hasAccidental(notes0[2]), false);\r\n    equal(hasAccidental(notes0[3]), true);\r\n    equal(hasAccidental(notes0[4]), false);\r\n    equal(hasAccidental(notes0[5]), true);\r\n    equal(hasAccidental(notes0[6]), false);\r\n    equal(hasAccidental(notes0[7]), true);\r\n    equal(hasAccidental(notes0[8]), false);\r\n    new Formatter().joinVoices([voice0]).formatToStave([voice0], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction automaticAccidentalsCornerCases2(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 150);\r\n    const stave = f.Stave().addKeySignature('C');\r\n    const notes0 = [\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n    ].map(f.StaveNote.bind(f));\r\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\r\n    Accidental.applyAccidentals([voice0], 'C');\r\n    equal(hasAccidental(notes0[0]), false);\r\n    equal(hasAccidental(notes0[2]), true);\r\n    equal(hasAccidental(notes0[4]), false);\r\n    equal(hasAccidental(notes0[6]), true);\r\n    equal(hasAccidental(notes0[8]), false);\r\n    equal(hasAccidental(notes0[10]), true);\r\n    equal(hasAccidental(notes0[12]), false);\r\n    equal(hasAccidental(notes0[14]), true);\r\n    equal(hasAccidental(notes0[16]), false);\r\n    equal(hasAccidental(notes0[1]), false);\r\n    equal(hasAccidental(notes0[3]), true);\r\n    equal(hasAccidental(notes0[5]), false);\r\n    equal(hasAccidental(notes0[7]), true);\r\n    equal(hasAccidental(notes0[9]), false);\r\n    equal(hasAccidental(notes0[11]), true);\r\n    equal(hasAccidental(notes0[13]), false);\r\n    equal(hasAccidental(notes0[15]), true);\r\n    equal(hasAccidental(notes0[17]), false);\r\n    new Formatter().joinVoices([voice0]).formatToStave([voice0], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction automaticAccidentalsCornerCases3(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 150);\r\n    const stave = f.Stave().addKeySignature('C#');\r\n    const notes0 = [\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n    ].map(f.StaveNote.bind(f));\r\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\r\n    Accidental.applyAccidentals([voice0], 'C#');\r\n    equal(hasAccidental(notes0[0]), true);\r\n    equal(hasAccidental(notes0[1]), true);\r\n    equal(hasAccidental(notes0[2]), false);\r\n    equal(hasAccidental(notes0[3]), true);\r\n    equal(hasAccidental(notes0[4]), false);\r\n    equal(hasAccidental(notes0[5]), true);\r\n    equal(hasAccidental(notes0[6]), false);\r\n    equal(hasAccidental(notes0[7]), true);\r\n    equal(hasAccidental(notes0[8]), false);\r\n    new Formatter().joinVoices([voice0]).formatToStave([voice0], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction automaticAccidentalsCornerCases4(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 150);\r\n    const stave = f.Stave().addKeySignature('C#');\r\n    const notes0 = [\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c#/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['cb/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/4'], duration: '4', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '4', stem_direction: -1 },\r\n    ].map(f.StaveNote.bind(f));\r\n    const voice0 = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes0);\r\n    Accidental.applyAccidentals([voice0], 'C#');\r\n    equal(hasAccidental(notes0[0]), true);\r\n    equal(hasAccidental(notes0[2]), true);\r\n    equal(hasAccidental(notes0[4]), false);\r\n    equal(hasAccidental(notes0[6]), true);\r\n    equal(hasAccidental(notes0[8]), false);\r\n    equal(hasAccidental(notes0[10]), true);\r\n    equal(hasAccidental(notes0[12]), false);\r\n    equal(hasAccidental(notes0[14]), true);\r\n    equal(hasAccidental(notes0[16]), false);\r\n    equal(hasAccidental(notes0[1]), true);\r\n    equal(hasAccidental(notes0[3]), true);\r\n    equal(hasAccidental(notes0[5]), false);\r\n    equal(hasAccidental(notes0[7]), true);\r\n    equal(hasAccidental(notes0[9]), false);\r\n    equal(hasAccidental(notes0[11]), true);\r\n    equal(hasAccidental(notes0[13]), false);\r\n    equal(hasAccidental(notes0[15]), true);\r\n    equal(hasAccidental(notes0[17]), false);\r\n    new Formatter().joinVoices([voice0]).formatToStave([voice0], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction factoryAPI(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 240);\r\n    f.Stave({ x: 10, y: 10, width: 550 });\r\n    const accid = makeNewAccid(f);\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w' })\r\n            .addModifier(accid('b'), 0)\r\n            .addModifier(accid('#'), 1),\r\n        f\r\n            .StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: 'h' })\r\n            .addModifier(accid('##'), 0)\r\n            .addModifier(accid('n'), 1)\r\n            .addModifier(accid('bb'), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('#'), 4)\r\n            .addModifier(accid('n'), 5)\r\n            .addModifier(accid('bb'), 6),\r\n        f\r\n            .StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16' })\r\n            .addModifier(accid('n'), 0)\r\n            .addModifier(accid('#'), 1)\r\n            .addModifier(accid('#'), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('bb'), 4)\r\n            .addModifier(accid('##'), 5)\r\n            .addModifier(accid('#'), 6),\r\n        f\r\n            .StaveNote({ keys: ['a/3', 'c/4', 'e/4', 'b/4', 'd/5', 'g/5'], duration: 'w' })\r\n            .addModifier(accid('#'), 0)\r\n            .addModifier(accid('##').setAsCautionary(), 1)\r\n            .addModifier(accid('#').setAsCautionary(), 2)\r\n            .addModifier(accid('b'), 3)\r\n            .addModifier(accid('bb').setAsCautionary(), 4)\r\n            .addModifier(accid('b').setAsCautionary(), 5),\r\n    ];\r\n    Formatter.SimpleFormat(notes);\r\n    notes.forEach((n, i) => {\r\n        ok(n.getModifiersByType('Accidental').length > 0, 'Note ' + i + ' has accidentals');\r\n        n.getModifiersByType('Accidental').forEach((accid, i) => {\r\n            ok(accid.getWidth() > 0, 'Accidental ' + i + ' has set width');\r\n        });\r\n    });\r\n    f.draw();\r\n    ok(true, 'Factory API');\r\n}\r\nVexFlowTests.register(AccidentalTests);\r\nexport { AccidentalTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Annotation Tests\r\n// TODO: Formatter.FormatAndDraw(ctx, stave, notes, ???number???);\r\n//       Did a previous version of the API accept a number as the fourth argument?\r\n//       We removed the fourth argument from all of our test cases.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Annotation, AnnotationVerticalJustify } from '../src/annotation';\r\nimport { Articulation } from '../src/articulation';\r\nimport { Beam } from '../src/beam';\r\nimport { Bend } from '../src/bend';\r\nimport { Flow } from '../src/flow';\r\nimport { Font, FontStyle, FontWeight } from '../src/font';\r\nimport { Formatter } from '../src/formatter';\r\nimport { ModifierPosition } from '../src/modifier';\r\nimport { Registry } from '../src/registry';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Stem } from '../src/stem';\r\nimport { TabNote } from '../src/tabnote';\r\nimport { TabStave } from '../src/tabstave';\r\nimport { Vibrato } from '../src/vibrato';\r\nimport { Voice } from '../src/voice';\r\nconst AnnotationTests = {\r\n    Start() {\r\n        QUnit.module('Annotation');\r\n        const run = VexFlowTests.runTests;\r\n        run('Lyrics', lyrics);\r\n        run('Placement', placement);\r\n        run('Simple Annotation', simple);\r\n        run('Styled Annotation', styling);\r\n        run('Standard Notation Annotation', standard);\r\n        run('Harmonics', harmonic);\r\n        run('Fingerpicking', picking);\r\n        run('Bottom Annotation', bottom);\r\n        run('Bottom Annotations with Beams', bottomWithBeam);\r\n        run('Test Justification Annotation Stem Up', justificationStemUp);\r\n        run('Test Justification Annotation Stem Down', justificationStemDown);\r\n        run('TabNote Annotations', tabNotes);\r\n    },\r\n};\r\nconst FONT_SIZE = VexFlowTests.Font.size;\r\n// Helper functions to create TabNote and StaveNote objects.\r\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\r\nconst staveNote = (noteStruct) => new StaveNote(noteStruct);\r\n/**\r\n * Show lyrics using Annotation objects.\r\n */\r\nfunction lyrics(options) {\r\n    let fontSize = FONT_SIZE;\r\n    let x = 10;\r\n    let width = 170;\r\n    let ratio = 1;\r\n    const registry = new Registry();\r\n    Registry.enableDefaultRegistry(registry);\r\n    const f = VexFlowTests.makeFactory(options, 750, 260);\r\n    // Add three groups of staves. Each time we increase the fontSize by 2.\r\n    for (let i = 0; i < 3; ++i) {\r\n        const score = f.EasyScore();\r\n        score.set({ time: '3/4' });\r\n        const system = f.System({ width, x });\r\n        system.addStave({\r\n            voices: [\r\n                score.voice(score.notes('(C4 F4)/2[id=\"n0\"]').concat(score.beam(score.notes('(C4 A4)/8[id=\"n1\"], (C4 A4)/8[id=\"n2\"]')))),\r\n            ],\r\n        });\r\n        // Add lyrics under the first row.\r\n        ['hand,', 'lead', 'the', 'pears', 'lead', 'the'].forEach((text, ix) => {\r\n            const verse = Math.floor(ix / 3);\r\n            const noteGroupID = 'n' + (ix % 3);\r\n            const noteGroup = registry.getElementById(noteGroupID);\r\n            const lyricsAnnotation = f.Annotation({ text }).setFont('Roboto Slab', fontSize);\r\n            lyricsAnnotation.setPosition(ModifierPosition.BELOW);\r\n            noteGroup.addModifier(lyricsAnnotation, verse);\r\n        });\r\n        // Second row doesn't have any lyrics.\r\n        system.addStave({\r\n            voices: [score.voice(score.notes('(F4 D5)/2').concat(score.beam(score.notes('(F4 F5)/8, (F4 F5)/8'))))],\r\n        });\r\n        f.draw();\r\n        ratio = (fontSize + 2) / fontSize;\r\n        width = width * ratio;\r\n        x = x + width;\r\n        fontSize = fontSize + 2;\r\n    }\r\n    ok(true);\r\n}\r\nfunction simple(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    ctx.font = '10pt Arial, sans-serif';\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\r\n    const notes = [\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 4, fret: 9 },\r\n            ],\r\n            duration: 'h',\r\n        }).addModifier(new Annotation('T'), 0),\r\n        tabNote({\r\n            positions: [{ str: 2, fret: 10 }],\r\n            duration: 'h',\r\n        }).addModifier(new Bend('Full').setTap('T'), 0),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'Simple Annotation');\r\n}\r\nfunction standard(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    const stave = new Stave(10, 10, 450).addClef('treble').setContext(ctx).draw();\r\n    const annotation = (text) => new Annotation(text).setFont(Font.SERIF, FONT_SIZE, 'normal', 'italic');\r\n    const notes = [\r\n        staveNote({ keys: ['c/4', 'e/4'], duration: 'h' }).addModifier(annotation('quiet'), 0),\r\n        staveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: 'h' }).addModifier(annotation('Allegro'), 2),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'Standard Notation Annotation');\r\n}\r\nfunction styling(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    const stave = new Stave(10, 10, 450).addClef('treble').setContext(ctx).draw();\r\n    const annotation = (text, style) => new Annotation(text).setFont(Font.SERIF, FONT_SIZE, 'normal', 'italic').setStyle(style);\r\n    const notes = [\r\n        staveNote({ keys: ['c/4', 'e/4'], duration: 'h' }).addModifier(annotation('quiet', { fillStyle: '#0F0' }), 0),\r\n        staveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: 'h' }).addModifier(annotation('Allegro', { fillStyle: '#00F' }), 2),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'Standard Notation Annotation');\r\n}\r\nfunction harmonic(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\r\n    const notes = [\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 12 },\r\n                { str: 3, fret: 12 },\r\n            ],\r\n            duration: 'h',\r\n        }).addModifier(new Annotation('Harm.'), 0),\r\n        tabNote({\r\n            positions: [{ str: 2, fret: 9 }],\r\n            duration: 'h',\r\n        })\r\n            .addModifier(new Annotation('(8va)').setFont(Font.SERIF, FONT_SIZE, FontWeight.NORMAL, FontStyle.ITALIC), 0)\r\n            .addModifier(new Annotation('A.H.'), 0),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'Simple Annotation');\r\n}\r\nfunction picking(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.setFillStyle('#221');\r\n    ctx.setStrokeStyle('#221');\r\n    ctx.setFont(Font.SANS_SERIF, FONT_SIZE);\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\r\n    const annotation = (text) => new Annotation(text).setFont(Font.SERIF, FONT_SIZE, FontWeight.NORMAL, FontStyle.ITALIC);\r\n    const notes = [\r\n        tabNote({\r\n            positions: [\r\n                { str: 1, fret: 0 },\r\n                { str: 2, fret: 1 },\r\n                { str: 3, fret: 2 },\r\n                { str: 4, fret: 2 },\r\n                { str: 5, fret: 0 },\r\n            ],\r\n            duration: 'h',\r\n        }).addModifier(new Vibrato().setVibratoWidth(40), 0),\r\n        tabNote({\r\n            positions: [{ str: 6, fret: 9 }],\r\n            duration: '8',\r\n        }).addModifier(annotation('p').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\r\n        tabNote({\r\n            positions: [{ str: 3, fret: 9 }],\r\n            duration: '8',\r\n        }).addModifier(annotation('i').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\r\n        tabNote({\r\n            positions: [{ str: 2, fret: 9 }],\r\n            duration: '8',\r\n        }).addModifier(annotation('m').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\r\n        tabNote({\r\n            positions: [{ str: 1, fret: 9 }],\r\n            duration: '8',\r\n        }).addModifier(annotation('a').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'Fingerpicking');\r\n}\r\nfunction placement(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 750, 300);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    const stave = new Stave(10, 50, 750).addClef('treble').setContext(ctx).draw();\r\n    const annotation = (text, fontSize, vj) => new Annotation(text).setFont(Font.SERIF, fontSize).setVerticalJustification(vj);\r\n    const notes = [\r\n        staveNote({ keys: ['e/4'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.TOP), 0)\r\n            .addModifier(annotation('v2', 10, AnnotationVerticalJustify.TOP), 0),\r\n        staveNote({ keys: ['b/4'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.TOP), 0)\r\n            .addModifier(annotation('v2', 10, AnnotationVerticalJustify.TOP), 0),\r\n        staveNote({ keys: ['c/5'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.TOP), 0)\r\n            .addModifier(annotation('v2', 10, AnnotationVerticalJustify.TOP), 0),\r\n        staveNote({ keys: ['f/4'], duration: 'q' })\r\n            .addModifier(annotation('v1', 14, AnnotationVerticalJustify.TOP), 0)\r\n            .addModifier(annotation('v2', 14, AnnotationVerticalJustify.TOP), 0),\r\n        staveNote({ keys: ['f/4'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('am').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.TOP), 0)\r\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.TOP), 0),\r\n        staveNote({ keys: ['f/5'], duration: 'q' })\r\n            .addModifier(annotation('v1', 11, AnnotationVerticalJustify.TOP), 0)\r\n            .addModifier(annotation('v2', 11, AnnotationVerticalJustify.TOP), 0),\r\n        staveNote({ keys: ['f/5'], duration: 'q' })\r\n            .addModifier(annotation('v1', 11, AnnotationVerticalJustify.TOP), 0)\r\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.TOP), 0),\r\n        staveNote({ keys: ['f/4'], duration: 'q' })\r\n            .addModifier(annotation('v1', 12, AnnotationVerticalJustify.BOTTOM), 0)\r\n            .addModifier(annotation('v2', 12, AnnotationVerticalJustify.BOTTOM), 0),\r\n        staveNote({ keys: ['f/5'], duration: 'q' })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(annotation('v1', 11, AnnotationVerticalJustify.BOTTOM), 0)\r\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.BOTTOM), 0),\r\n        staveNote({ keys: ['f/5'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('am').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.BOTTOM), 0)\r\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.BOTTOM), 0),\r\n        staveNote({ keys: ['f/4'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(annotation('v1', 10, AnnotationVerticalJustify.BOTTOM), 0)\r\n            .addModifier(annotation('v2', 20, AnnotationVerticalJustify.BOTTOM), 0),\r\n        staveNote({ keys: ['f/5'], duration: 'w' })\r\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(annotation('v1', 11, AnnotationVerticalJustify.BOTTOM), 0)\r\n            .addModifier(annotation('v2', 16, AnnotationVerticalJustify.BOTTOM), 0),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, ' Annotation Placement');\r\n}\r\nfunction bottom(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    const stave = new Stave(10, 10, 300).addClef('treble').setContext(ctx).draw();\r\n    const annotation = (text) => new Annotation(text).setFont(Font.SERIF, FONT_SIZE).setVerticalJustification(Annotation.VerticalJustify.BOTTOM);\r\n    const notes = [\r\n        staveNote({ keys: ['f/4'], duration: 'w' }).addModifier(annotation('F'), 0),\r\n        staveNote({ keys: ['a/4'], duration: 'w' }).addModifier(annotation('A'), 0),\r\n        staveNote({ keys: ['c/5'], duration: 'w' }).addModifier(annotation('C'), 0),\r\n        staveNote({ keys: ['e/5'], duration: 'w' }).addModifier(annotation('E'), 0),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'Bottom Annotation');\r\n}\r\nfunction bottomWithBeam(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    const stave = new Stave(10, 10, 300).addClef('treble').setContext(ctx).draw();\r\n    const notes = [\r\n        new StaveNote({ keys: ['a/3'], duration: '8' }).addModifier(new Annotation('good').setVerticalJustification(Annotation.VerticalJustify.BOTTOM)),\r\n        new StaveNote({ keys: ['g/3'], duration: '8' }).addModifier(new Annotation('even').setVerticalJustification(Annotation.VerticalJustify.BOTTOM)),\r\n        new StaveNote({ keys: ['c/4'], duration: '8' }).addModifier(new Annotation('under').setVerticalJustification(Annotation.VerticalJustify.BOTTOM)),\r\n        new StaveNote({ keys: ['d/4'], duration: '8' }).addModifier(new Annotation('beam').setVerticalJustification(Annotation.VerticalJustify.BOTTOM)),\r\n    ];\r\n    const beam = new Beam(notes.slice(1));\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    beam.setContext(ctx).draw();\r\n    ok(true, 'Bottom Annotation with Beams');\r\n}\r\nfunction justificationStemUp(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 650, 950);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    const annotation = (text, hJustification, vJustification) => new Annotation(text)\r\n        .setFont(Font.SANS_SERIF, FONT_SIZE)\r\n        .setJustification(hJustification)\r\n        .setVerticalJustification(vJustification);\r\n    for (let v = 1; v <= 4; ++v) {\r\n        const stave = new Stave(10, (v - 1) * 150 + 40, 400).addClef('treble').setContext(ctx).draw();\r\n        const notes = [\r\n            staveNote({ keys: ['c/3'], duration: 'q' }).addModifier(annotation('Text', 1, v), 0),\r\n            staveNote({ keys: ['c/4'], duration: 'q' }).addModifier(annotation('Text', 2, v), 0),\r\n            staveNote({ keys: ['c/5'], duration: 'q' }).addModifier(annotation('Text', 3, v), 0),\r\n            staveNote({ keys: ['c/6'], duration: 'q' }).addModifier(annotation('Text', 4, v), 0),\r\n        ];\r\n        Formatter.FormatAndDraw(ctx, stave, notes);\r\n    }\r\n    ok(true, 'Test Justification Annotation');\r\n}\r\nfunction justificationStemDown(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 650, 1000);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    const annotation = (text, hJustification, vJustification) => new Annotation(text)\r\n        .setFont(Font.SANS_SERIF, FONT_SIZE)\r\n        .setJustification(hJustification)\r\n        .setVerticalJustification(vJustification);\r\n    for (let v = 1; v <= 4; ++v) {\r\n        const stave = new Stave(10, (v - 1) * 150 + 40, 400).addClef('treble').setContext(ctx).draw();\r\n        const notes = [\r\n            staveNote({ keys: ['c/3'], duration: 'q', stem_direction: -1 }).addModifier(annotation('Text', 1, v), 0),\r\n            staveNote({ keys: ['c/4'], duration: 'q', stem_direction: -1 }).addModifier(annotation('Text', 2, v), 0),\r\n            staveNote({ keys: ['c/5'], duration: 'q', stem_direction: -1 }).addModifier(annotation('Text', 3, v), 0),\r\n            staveNote({ keys: ['c/6'], duration: 'q', stem_direction: -1 }).addModifier(annotation('Text', 4, v), 0),\r\n        ];\r\n        Formatter.FormatAndDraw(ctx, stave, notes);\r\n    }\r\n    ok(true, 'Test Justification Annotation');\r\n}\r\nfunction tabNotes(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 200);\r\n    ctx.font = '10pt Arial, sans-serif';\r\n    const stave = new TabStave(10, 10, 550);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 3, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 3, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n    ];\r\n    const notes1 = specs.map((noteSpec) => {\r\n        const note = new TabNote(noteSpec);\r\n        note.render_options.draw_stem = true;\r\n        return note;\r\n    });\r\n    const notes2 = specs.map((noteSpec) => {\r\n        const note = new TabNote(noteSpec);\r\n        note.render_options.draw_stem = true;\r\n        note.setStemDirection(-1);\r\n        return note;\r\n    });\r\n    const notes3 = specs.map((noteSpec) => new TabNote(noteSpec));\r\n    notes1[0].addModifier(new Annotation('Text').setJustification(1).setVerticalJustification(1)); // U\r\n    notes1[1].addModifier(new Annotation('Text').setJustification(2).setVerticalJustification(2)); // D\r\n    notes1[2].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(3)); // U\r\n    notes1[3].addModifier(new Annotation('Text').setJustification(4).setVerticalJustification(4)); // D\r\n    notes2[0].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(1)); // U\r\n    notes2[1].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(2)); // D\r\n    notes2[2].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(3)); // U\r\n    notes2[3].addModifier(new Annotation('Text').setJustification(3).setVerticalJustification(4)); // D\r\n    notes3[0].addModifier(new Annotation('Text').setVerticalJustification(1)); // U\r\n    notes3[1].addModifier(new Annotation('Text').setVerticalJustification(2)); // D\r\n    notes3[2].addModifier(new Annotation('Text').setVerticalJustification(3)); // U\r\n    notes3[3].addModifier(new Annotation('Text').setVerticalJustification(4)); // D\r\n    const voice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT);\r\n    voice.addTickables(notes1);\r\n    voice.addTickables(notes2);\r\n    voice.addTickables(notes3);\r\n    // Alternatively, you could add all the notes in one big array with spread syntax.\r\n    // voice.addTickables([...notes1, ...notes2, ...notes3]);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave, { stave });\r\n    voice.draw(ctx, stave);\r\n    ok(true, 'TabNotes successfully drawn');\r\n}\r\nVexFlowTests.register(AnnotationTests);\r\nexport { AnnotationTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Articulation Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Articulation } from '../src/articulation';\r\nimport { Beam } from '../src/beam';\r\nimport { Flow } from '../src/flow';\r\nimport { Font } from '../src/font';\r\nimport { Formatter } from '../src/formatter';\r\nimport { ModifierPosition } from '../src/modifier';\r\nimport { Stave } from '../src/stave';\r\nimport { Barline } from '../src/stavebarline';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Stem } from '../src/stem';\r\nimport { TabNote } from '../src/tabnote';\r\nimport { TabStave } from '../src/tabstave';\r\nimport { Voice } from '../src/voice';\r\nconst ArticulationTests = {\r\n    Start() {\r\n        QUnit.module('Articulation');\r\n        const run = VexFlowTests.runTests;\r\n        run('Articulation - Vertical Placement', verticalPlacement);\r\n        run('Articulation - Staccato/Staccatissimo', drawArticulations, { sym1: 'a.', sym2: 'av' });\r\n        run('Articulation - Accent/Tenuto', drawArticulations, { sym1: 'a>', sym2: 'a-' });\r\n        run('Articulation - Marcato/L.H. Pizzicato', drawArticulations, { sym1: 'a^', sym2: 'a+' });\r\n        run('Articulation - Snap Pizzicato/Fermata', drawArticulations, { sym1: 'ao', sym2: 'ao' });\r\n        run('Articulation - Up-stroke/Down-Stroke', drawArticulations, { sym1: 'a|', sym2: 'am' });\r\n        run('Articulation - Fermata Above/Below', drawFermata, { sym1: 'a@a', sym2: 'a@u' });\r\n        run('Articulation - Fermata Short Above/Below', drawFermata, { sym1: 'a@as', sym2: 'a@us' });\r\n        run('Articulation - Fermata Long Above/Below', drawFermata, { sym1: 'a@al', sym2: 'a@ul' });\r\n        run('Articulation - Fermata Very Long Above/Below', drawFermata, { sym1: 'a@avl', sym2: 'a@uvl' });\r\n        run('Articulation - Inline/Multiple', drawArticulations2, { sym1: 'a.', sym2: 'a.' });\r\n        run('TabNote Articulation', tabNotes, { sym1: 'a.', sym2: 'a.' });\r\n    },\r\n};\r\n// Helper function for creating StaveNotes.\r\nfunction drawArticulations(options) {\r\n    const sym1 = options.params.sym1;\r\n    const sym2 = options.params.sym2;\r\n    const width = 125 - Stave.defaultPadding;\r\n    const f = VexFlowTests.makeFactory(options, 675, 195);\r\n    const ctx = f.getContext();\r\n    expect(0);\r\n    let x = 10;\r\n    const y = 30;\r\n    const score = f.EasyScore();\r\n    const formatAndDrawToWidth = (x, y, width, notes, barline) => {\r\n        const voices = [score.voice(notes, { time: '4/4' })];\r\n        const formatter = f.Formatter();\r\n        voices.forEach((v) => formatter.joinVoices([v]));\r\n        const nwidth = Math.max(formatter.preCalculateMinTotalWidth(voices), width);\r\n        formatter.format(voices, nwidth);\r\n        const stave = f\r\n            .Stave({ x, y, width: nwidth + Stave.defaultPadding })\r\n            .setEndBarType(barline)\r\n            .setContext(ctx)\r\n            .draw();\r\n        voices.forEach((voice) => voice.draw(ctx, stave));\r\n        return stave.getWidth();\r\n    };\r\n    // bar 1\r\n    const notesBar1 = [\r\n        f.StaveNote({ keys: ['a/3'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stem_direction: 1 }),\r\n    ];\r\n    notesBar1[0].addModifier(new Articulation(sym1).setPosition(4), 0);\r\n    notesBar1[1].addModifier(new Articulation(sym1).setPosition(4), 0);\r\n    notesBar1[2].addModifier(new Articulation(sym1).setPosition(3), 0);\r\n    notesBar1[3].addModifier(new Articulation(sym1).setPosition(3), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    x += formatAndDrawToWidth(x, y, width, notesBar1, Barline.type.NONE);\r\n    // bar 2 - juxtaposing second bar next to first bar\r\n    const notesBar2 = [\r\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stem_direction: -1 }),\r\n    ];\r\n    notesBar2[0].addModifier(new Articulation(sym1).setPosition(3), 0);\r\n    notesBar2[1].addModifier(new Articulation(sym1).setPosition(3), 0);\r\n    notesBar2[2].addModifier(new Articulation(sym1).setPosition(4), 0);\r\n    notesBar2[3].addModifier(new Articulation(sym1).setPosition(4), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    x += formatAndDrawToWidth(x, y, width, notesBar2, Barline.type.DOUBLE);\r\n    // bar 3 - juxtaposing second bar next to first bar\r\n    const notesBar3 = [\r\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stem_direction: 1 }),\r\n    ];\r\n    notesBar3[0].addModifier(new Articulation(sym2).setPosition(4), 0);\r\n    notesBar3[1].addModifier(new Articulation(sym2).setPosition(4), 0);\r\n    notesBar3[2].addModifier(new Articulation(sym2).setPosition(3), 0);\r\n    notesBar3[3].addModifier(new Articulation(sym2).setPosition(3), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    x += formatAndDrawToWidth(x, y, width, notesBar3, Barline.type.NONE);\r\n    // bar 4 - juxtaposing second bar next to first bar\r\n    const notesBar4 = [\r\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stem_direction: -1 }),\r\n    ];\r\n    notesBar4[0].addModifier(new Articulation(sym2).setPosition(3), 0);\r\n    notesBar4[1].addModifier(new Articulation(sym2).setPosition(3), 0);\r\n    notesBar4[2].addModifier(new Articulation(sym2).setPosition(4), 0);\r\n    notesBar4[3].addModifier(new Articulation(sym2).setPosition(4), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    formatAndDrawToWidth(x, y, width, notesBar4, Barline.type.END);\r\n}\r\nfunction drawFermata(options) {\r\n    const sym1 = options.params.sym1;\r\n    const sym2 = options.params.sym2;\r\n    const f = VexFlowTests.makeFactory(options, 400, 195);\r\n    const ctx = f.getContext();\r\n    const score = f.EasyScore();\r\n    const width = 150 - Stave.defaultPadding;\r\n    let x = 50;\r\n    const y = 30;\r\n    const formatAndDrawToWidth = (x, y, width, notes, barline) => {\r\n        const voices = [score.voice(notes, { time: '4/4' })];\r\n        const formatter = f.Formatter();\r\n        voices.forEach((v) => formatter.joinVoices([v]));\r\n        const nwidth = Math.max(formatter.preCalculateMinTotalWidth(voices), width);\r\n        formatter.format(voices, nwidth);\r\n        const stave = f\r\n            .Stave({ x, y, width: nwidth + Stave.defaultPadding })\r\n            .setEndBarType(barline)\r\n            .setContext(ctx)\r\n            .draw();\r\n        voices.forEach((voice) => voice.draw(ctx, stave));\r\n        return stave.getWidth();\r\n    };\r\n    expect(0);\r\n    const notesBar1 = [\r\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['c/4'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: 'q', stem_direction: -1 }),\r\n    ];\r\n    notesBar1[0].addModifier(new Articulation(sym1).setPosition(3), 0);\r\n    notesBar1[1].addModifier(new Articulation(sym1).setPosition(3), 0);\r\n    notesBar1[2].addModifier(new Articulation(sym2).setPosition(4), 0);\r\n    notesBar1[3].addModifier(new Articulation(sym2).setPosition(4), 0);\r\n    x += formatAndDrawToWidth(x, y, width, notesBar1, Barline.type.NONE);\r\n    // bar 2 - juxtaposing second bar next to first bar\r\n    const notesBar2 = [\r\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stem_direction: -1 }),\r\n    ];\r\n    notesBar2[0].addModifier(new Articulation(sym1).setPosition(3), 0);\r\n    notesBar2[1].addModifier(new Articulation(sym1).setPosition(3), 0);\r\n    notesBar2[2].addModifier(new Articulation(sym2).setPosition(4), 0);\r\n    notesBar2[3].addModifier(new Articulation(sym2).setPosition(4), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    formatAndDrawToWidth(x, y, width, notesBar2, Barline.type.DOUBLE);\r\n}\r\nfunction verticalPlacement(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 750, 300);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    const staveNote = (noteStruct) => new StaveNote(noteStruct);\r\n    const stave = new Stave(10, 50, 750).addClef('treble').setContext(ctx).draw();\r\n    const notes = [\r\n        staveNote({ keys: ['f/4'], duration: 'q' })\r\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0),\r\n        staveNote({ keys: ['g/4'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0),\r\n        staveNote({ keys: ['c/5'], duration: 'q' })\r\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0),\r\n        staveNote({ keys: ['f/4'], duration: 'q' })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0),\r\n        staveNote({ keys: ['g/4'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0),\r\n        staveNote({ keys: ['c/5'], duration: 'q' })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0),\r\n        staveNote({ keys: ['a/5'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0),\r\n        staveNote({ keys: ['f/5'], duration: 'q' })\r\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0),\r\n        staveNote({ keys: ['b/4'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0),\r\n        staveNote({ keys: ['a/5'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0),\r\n        staveNote({ keys: ['f/5'], duration: 'q' })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0),\r\n        staveNote({ keys: ['b/4'], duration: 'q', stem_direction: Stem.DOWN })\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a-').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a@a').setPosition(ModifierPosition.ABOVE), 0),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, ' Annotation Placement');\r\n}\r\nfunction drawArticulations2(options) {\r\n    expect(0);\r\n    const scale = 0.8;\r\n    const f = VexFlowTests.makeFactory(options, 1500, 195);\r\n    // Get the rendering context\r\n    const ctx = f.getContext();\r\n    ctx.scale(scale, scale);\r\n    // bar 1\r\n    const stave1 = new Stave(10, 50, 500).setContext(ctx).draw();\r\n    const notesBar1 = [\r\n        f.StaveNote({ keys: ['c/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['d/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['e/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['g/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['b/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['c/5'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['d/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['e/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['f/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['g/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['b/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['c/6'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['d/6'], duration: '16', stem_direction: -1 }),\r\n    ];\r\n    let i;\r\n    for (i = 0; i < 16; i++) {\r\n        notesBar1[i].addModifier(new Articulation('a.').setPosition(4), 0);\r\n        notesBar1[i].addModifier(new Articulation('a>').setPosition(4), 0);\r\n        if (i === 15) {\r\n            notesBar1[i].addModifier(new Articulation('a@u').setPosition(4), 0);\r\n        }\r\n    }\r\n    const beam1 = new Beam(notesBar1.slice(0, 8));\r\n    const beam2 = new Beam(notesBar1.slice(8, 16));\r\n    Formatter.FormatAndDraw(ctx, stave1, notesBar1);\r\n    beam1.setContext(ctx).draw();\r\n    beam2.setContext(ctx).draw();\r\n    // bar 2 - juxtaposing second bar next to first bar\r\n    const stave2 = new Stave(510, 50, 500).setContext(ctx).draw();\r\n    const notesBar2 = [\r\n        f.StaveNote({ keys: ['f/3'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['g/3'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/3'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['b/3'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['d/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['e/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '16', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['g/4'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['b/4'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['c/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['d/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['e/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['f/5'], duration: '16', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['g/5'], duration: '16', stem_direction: -1 }),\r\n    ];\r\n    for (i = 0; i < 16; i++) {\r\n        notesBar2[i].addModifier(new Articulation('a-').setPosition(3), 0);\r\n        notesBar2[i].addModifier(new Articulation('a^').setPosition(3), 0);\r\n        if (i === 15) {\r\n            notesBar2[i].addModifier(new Articulation('a@u').setPosition(4), 0);\r\n        }\r\n    }\r\n    const beam3 = new Beam(notesBar2.slice(0, 8));\r\n    const beam4 = new Beam(notesBar2.slice(8, 16));\r\n    Formatter.FormatAndDraw(ctx, stave2, notesBar2);\r\n    beam3.setContext(ctx).draw();\r\n    beam4.setContext(ctx).draw();\r\n    // bar 3 - juxtaposing second bar next to first bar\r\n    const stave3 = new Stave(1010, 50, 100).setContext(ctx).draw();\r\n    const notesBar3 = [f.StaveNote({ keys: ['c/4'], duration: 'w', stem_direction: 1 })];\r\n    notesBar3[0].addModifier(new Articulation('a-').setPosition(3), 0);\r\n    notesBar3[0].addModifier(new Articulation('a>').setPosition(3), 0);\r\n    notesBar3[0].addModifier(new Articulation('a@a').setPosition(3), 0);\r\n    Formatter.FormatAndDraw(ctx, stave3, notesBar3);\r\n    // bar 4 - juxtaposing second bar next to first bar\r\n    const stave4 = new Stave(1110, 50, 250).setContext(ctx).draw();\r\n    const notesBar4 = [\r\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['c/5'], duration: 'q', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['a/5'], duration: 'q', stem_direction: -1 }),\r\n    ];\r\n    for (i = 0; i < 4; i++) {\r\n        let position1 = 3;\r\n        if (i > 1) {\r\n            position1 = 4;\r\n        }\r\n        notesBar4[i].addModifier(new Articulation('a-').setPosition(position1), 0);\r\n    }\r\n    Formatter.FormatAndDraw(ctx, stave4, notesBar4);\r\n}\r\nfunction tabNotes(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 200);\r\n    ctx.font = '10pt ' + Font.SANS_SERIF;\r\n    const stave = new TabStave(10, 10, 550);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 3, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 3, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n    ];\r\n    const notes1 = specs.map((noteSpec) => {\r\n        const tabNote = new TabNote(noteSpec);\r\n        tabNote.render_options.draw_stem = true;\r\n        return tabNote;\r\n    });\r\n    const notes2 = specs.map((noteSpec) => {\r\n        const tabNote = new TabNote(noteSpec);\r\n        tabNote.render_options.draw_stem = true;\r\n        tabNote.setStemDirection(-1);\r\n        return tabNote;\r\n    });\r\n    const notes3 = specs.map((noteSpec) => new TabNote(noteSpec));\r\n    notes1[0].addModifier(new Articulation('a>').setPosition(3), 0); // U\r\n    notes1[1].addModifier(new Articulation('a>').setPosition(4), 0); // D\r\n    notes1[2].addModifier(new Articulation('a.').setPosition(3), 0); // U\r\n    notes1[3].addModifier(new Articulation('a.').setPosition(4), 0); // D\r\n    notes2[0].addModifier(new Articulation('a>').setPosition(3), 0);\r\n    notes2[1].addModifier(new Articulation('a>').setPosition(4), 0);\r\n    notes2[2].addModifier(new Articulation('a.').setPosition(3), 0);\r\n    notes2[3].addModifier(new Articulation('a.').setPosition(4), 0);\r\n    notes3[0].addModifier(new Articulation('a>').setPosition(3), 0);\r\n    notes3[1].addModifier(new Articulation('a>').setPosition(4), 0);\r\n    notes3[2].addModifier(new Articulation('a.').setPosition(3), 0);\r\n    notes3[3].addModifier(new Articulation('a.').setPosition(4), 0);\r\n    const voice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT);\r\n    voice.addTickables(notes1);\r\n    voice.addTickables(notes2);\r\n    voice.addTickables(notes3);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    voice.draw(ctx, stave);\r\n    ok(true, 'TabNotes successfully drawn');\r\n}\r\nVexFlowTests.register(ArticulationTests);\r\nexport { ArticulationTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Auto Beaming Tests\r\n// TODO: Beam.generateBeams(voice.getTickables() as StemmableNote[], ...) requires a cast to StemmableNote[].\r\n//       Is there a cleaner way to handle this?\r\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\r\nimport { Beam } from '../src/beam';\r\nimport { Fraction } from '../src/fraction';\r\nimport { Stave } from '../src/stave';\r\nimport { Stem } from '../src/stem';\r\nconst AutoBeamFormattingTests = {\r\n    Start() {\r\n        QUnit.module('Auto-Beaming');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple Auto Beaming', simpleAuto);\r\n        run('Auto Beaming With Overflow Group', simpleAutoWithOverflowGroup);\r\n        run('Even Group Stem Directions', evenGroupStemDirections);\r\n        run('Odd Group Stem Directions', oddGroupStemDirections);\r\n        run('Odd Beam Groups Auto Beaming', oddBeamGroups);\r\n        run('More Simple Auto Beaming 0', moreSimple0);\r\n        run('More Simple Auto Beaming 1', moreSimple1);\r\n        run('Beam Across All Rests', beamAcrossAllRests);\r\n        run('Beam Across All Rests with Stemlets', beamAcrossAllRestsWithStemlets);\r\n        run('Break Beams on Middle Rests Only', beamAcrossMiddleRests);\r\n        run('Break Beams on Rest', breakBeamsOnRests);\r\n        run('Maintain Stem Directions', maintainStemDirections);\r\n        run('Maintain Stem Directions - Beam Over Rests', maintainStemDirectionsBeamAcrossRests);\r\n        run('Beat group with unbeamable note - 2/2', groupWithUnbeamableNote);\r\n        run('Offset beat grouping - 6/8 ', groupWithUnbeamableNote1);\r\n        run('Odd Time - Guessing Default Beam Groups', autoOddBeamGroups);\r\n        run('Custom Beam Groups', customBeamGroups);\r\n        run('Simple Tuplet Auto Beaming', simpleTuplets);\r\n        run('More Simple Tuplet Auto Beaming', moreSimpleTuplets);\r\n        run('More Automatic Beaming', moreBeaming);\r\n        run('Automatic Beaming 4/4 with  3, 3, 2 Pattern', beamingWithSeveralGroups1);\r\n        run('Automatic Beaming 4/4 with  3, 3, 2 Pattern and Overflow', beamingWithSeveralGroupsOverflow);\r\n        run('Automatic Beaming 8/4 with  3, 2, 3 Pattern and 2 Overflows', beamingWithSeveralGroupsOverflow2);\r\n        run('Automatic Beaming 8/4 with  3, 2, 3 Pattern and 3 Overflows', beamingWithSeveralGroupsOverflow3);\r\n        run('Duration-Based Secondary Beam Breaks', secondaryBreaks1);\r\n        run('Duration-Based Secondary Beam Breaks 2', secondaryBreaks2);\r\n        run('Flat Beams Up', flatBeamsUp);\r\n        run('Flat Beams Down', flatBeamsDown);\r\n        run('Flat Beams Mixed Direction', flatBeamsMixed);\r\n        run('Flat Beams Up (uniform)', flatBeamsUpUniform);\r\n        run('Flat Beams Down (uniform)', flatBeamsDownUniform);\r\n        run('Flat Beams Up Bounds', flatBeamsUpBounds);\r\n        run('Flat Beams Down Bounds', flatBeamsDownBounds);\r\n    },\r\n};\r\nfunction simpleAuto(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('f5/8, e5, d5, c5/16, c5, d5/8, e5, f5, f5/32, f5, f5, f5'), { time: '4/4' });\r\n    // Takes a voice and returns its auto beams.\r\n    const beams = Beam.applyAndGetBeams(voice);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beaming Applicator Test');\r\n}\r\nfunction simpleAutoWithOverflowGroup(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    // Add a . after a note (e.g., f5/4.) to make it a dotted note.\r\n    const voice = score.voice(score.notes('f5/4., e5/8, d5/8, d5/16, c5/16, c5/16, c5/16, f5/16, f5/32, f5/32'), {\r\n        time: '4/4',\r\n    });\r\n    // Takes a voice and returns its auto beams.\r\n    const beams = Beam.applyAndGetBeams(voice);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beaming Applicator Test');\r\n}\r\nfunction evenGroupStemDirections(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('a4/8, b4, g4, c5, f4, d5, e4, e5, b4, b4, g4, d5'), { time: '6/4' });\r\n    // Takes a voice and returns its auto beams.\r\n    const beams = Beam.applyAndGetBeams(voice);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    equal(beams[0].getStemDirection(), Stem.UP);\r\n    equal(beams[1].getStemDirection(), Stem.UP);\r\n    equal(beams[2].getStemDirection(), Stem.UP);\r\n    equal(beams[3].getStemDirection(), Stem.UP);\r\n    equal(beams[4].getStemDirection(), Stem.DOWN);\r\n    equal(beams[5].getStemDirection(), Stem.DOWN);\r\n    ok(true, 'Auto Beaming Applicator Test');\r\n}\r\nfunction oddGroupStemDirections(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('g4/8, b4, d5, c5, f4, d5, e4, g5, g4, b4, g4, d5, a4, c5, a4'), {\r\n        time: '15/8',\r\n    });\r\n    const groups = [new Fraction(3, 8)];\r\n    const beams = Beam.applyAndGetBeams(voice, undefined, groups);\r\n    equal(beams[0].getStemDirection(), Stem.DOWN, 'Notes are equidistant from middle line');\r\n    equal(beams[1].getStemDirection(), Stem.DOWN);\r\n    equal(beams[2].getStemDirection(), Stem.UP);\r\n    equal(beams[3].getStemDirection(), Stem.DOWN, 'Notes are equidistant from middle line');\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beaming Applicator Test');\r\n}\r\nfunction oddBeamGroups(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('f5, e5, d5, c5, c5, d5, e5, f5, f5, f4, f3, f5/16, f5'), { time: '6/4' });\r\n    const groups = [new Fraction(2, 8), new Fraction(3, 8), new Fraction(1, 8)];\r\n    // Takes a voice and returns its auto beams.\r\n    const beams = Beam.applyAndGetBeams(voice, undefined, groups);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction moreSimple0(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c4/8, g4, c5, g5, a5, c4, d4, a5'), { time: '4/4' });\r\n    const beams = Beam.applyAndGetBeams(voice);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction moreSimple1(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\r\n    const beams = Beam.applyAndGetBeams(voice);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction breakBeamsOnRests(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        beam_rests: false,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction beamAcrossAllRestsWithStemlets(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        beam_rests: true,\r\n        show_stemlets: true,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction beamAcrossAllRests(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        beam_rests: true,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction beamAcrossMiddleRests(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c5/16, g5, c5, c5/r, c5/r, (c4 e4 g4), d4, a5, c4, g4, c5, b4/r, (c4 e4), b4/r, b4/r, a4'), { time: '4/4' });\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        beam_rests: true,\r\n        beam_middle_only: true,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction maintainStemDirections(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 200);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    // EasyScore.notes(line, ...) ignores whitespace in the line string.\r\n    const voice = score.voice(score.notes([\r\n        'b4/16,            b4,              b4[stem=\"down\"], b4/r',\r\n        'b4/r,             b4[stem=\"down\"], b4,              b4',\r\n        'b4[stem=\"down\"],  b4[stem=\"down\"], b4,              b4/r',\r\n        'b4/32,            b4[stem=\"down\"], b4[stem=\"down\"], b4, b4/16/r, b4',\r\n    ].join(', '), { stem: 'up' }), { time: '4/4' });\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        beam_rests: false,\r\n        maintain_stem_directions: true,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction maintainStemDirectionsBeamAcrossRests(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 200);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes([\r\n        'b4/16,            b4,              b4[stem=\"down\"], b4/r',\r\n        'b4/r,             b4[stem=\"down\"], b4,              b4',\r\n        'b4[stem=\"down\"],  b4[stem=\"down\"], b4,              b4/r',\r\n        'b4/32,            b4[stem=\"down\"], b4[stem=\"down\"], b4, b4/16/r, b4',\r\n    ].join(', '), { stem: 'up' }), { time: '4/4' });\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        beam_rests: true,\r\n        maintain_stem_directions: true,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction groupWithUnbeamableNote(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 200);\r\n    const stave = f.Stave().addTimeSignature('2/4');\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('b4/16, b4, b4/4, b4/16, b4'), { time: '2/4' });\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        groups: [new Fraction(2, 2)],\r\n        beam_rests: false,\r\n        maintain_stem_directions: true,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction groupWithUnbeamableNote1(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 200);\r\n    const stave = f.Stave().addTimeSignature('6/8');\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('b4/4, b4/4, b4/8, b4/8'), { time: '6/8' });\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        groups: [new Fraction(3, 8)],\r\n        beam_rests: false,\r\n        maintain_stem_directions: true,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction autoOddBeamGroups(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 400);\r\n    const score = f.EasyScore();\r\n    const stave1 = f.Stave({ y: 10 }).addTimeSignature('5/4');\r\n    const voice1 = score.voice(score.notes('c5/8, g5, c5, b4, b4, c4, d4, a5, c4, g4'), { time: '5/4' });\r\n    const stave2 = f.Stave({ y: 150 }).addTimeSignature('5/8');\r\n    const voice2 = score.voice(score.notes('c5/8, g5, c5, b4, b4'), { time: '5/8' });\r\n    const stave3 = f.Stave({ y: 290 }).addTimeSignature('13/16');\r\n    const voice3 = score.voice(score.notes('c5/16, g5, c5, b4, b4, c5, g5, c5, b4, b4, c5, b4, b4'), {\r\n        time: '13/16',\r\n    });\r\n    // Flatten the arrays into a single Beam[].\r\n    const beams = [\r\n        ...Beam.applyAndGetBeams(voice1, undefined, Beam.getDefaultBeamGroups('5/4')),\r\n        ...Beam.applyAndGetBeams(voice2, undefined, Beam.getDefaultBeamGroups('5/8')),\r\n        ...Beam.applyAndGetBeams(voice3, undefined, Beam.getDefaultBeamGroups('13/16')),\r\n    ];\r\n    f.Formatter().formatToStave([voice1], stave1).formatToStave([voice2], stave2).formatToStave([voice3], stave3);\r\n    Stave.formatBegModifiers([stave1, stave2, stave3]);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction customBeamGroups(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 400);\r\n    const score = f.EasyScore();\r\n    const stave1 = f.Stave({ y: 10 }).addTimeSignature('5/4');\r\n    const voice1 = score.voice(score.notes('c5/8, g5, c5, b4, b4, c4, d4, a5, c4, g4'), { time: '5/4' });\r\n    const stave2 = f.Stave({ y: 150 }).addTimeSignature('5/8');\r\n    const voice2 = score.voice(score.notes('c5/8, g5, c5, b4, b4'), { time: '5/8' });\r\n    const stave3 = f.Stave({ y: 290 }).addTimeSignature('13/16');\r\n    const voice3 = score.voice(score.notes('c5/16, g5, c5, b4, b4, c5, g5, c5, b4, b4, c5, b4, b4'), { time: '13/16' });\r\n    const group1 = [new Fraction(5, 8)];\r\n    const group2 = [new Fraction(3, 8), new Fraction(2, 8)];\r\n    const group3 = [new Fraction(7, 16), new Fraction(2, 16), new Fraction(4, 16)];\r\n    // Flatten the three Beam[] into a single Beam[].\r\n    // Alternatively, you can use .reduce(concat) flatten arrays, where concat is defined as (a, b) => a.concat(b).\r\n    const beams = [\r\n        ...Beam.applyAndGetBeams(voice1, undefined, group1),\r\n        ...Beam.applyAndGetBeams(voice2, undefined, group2),\r\n        ...Beam.applyAndGetBeams(voice3, undefined, group3),\r\n    ];\r\n    f.Formatter().formatToStave([voice1], stave1).formatToStave([voice2], stave2).formatToStave([voice3], stave3);\r\n    Stave.formatBegModifiers([stave1, stave2, stave3]);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\n/**\r\n * Helper function which uses Function.prototype.bind() to create shortcut methods.\r\n * This can improve the readability of large blocks of EasyScore code.\r\n */\r\nfunction createShortcuts(score) {\r\n    return {\r\n        notes: score.notes.bind(score),\r\n        tuplet: score.tuplet.bind(score),\r\n    };\r\n}\r\nfunction simpleTuplets(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const { notes, tuplet } = createShortcuts(score);\r\n    const voice = score.voice([\r\n        ...tuplet(notes('c4/8, g4, c5')),\r\n        ...notes('g5/8, a5'),\r\n        ...tuplet(notes('a5/16, (c5 e5), a5, d5, a5'), { ratioed: false, notes_occupied: 4 }),\r\n    ], { time: '3/4' });\r\n    const beams = Beam.applyAndGetBeams(voice);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction moreSimpleTuplets(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const { notes, tuplet } = createShortcuts(score);\r\n    const voice = score.voice([...tuplet(notes('d4/4, g4, c5')), ...notes('g5/16, a5, a5, (c5 e5)')], { time: '3/4' });\r\n    const beams = Beam.applyAndGetBeams(voice);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction moreBeaming(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c4/8, g4/4, c5/8., g5/16, a5/4, a5/16, (c5 e5)/16, a5/8'), { time: '9/8' });\r\n    const beams = Beam.applyAndGetBeams(voice, undefined, Beam.getDefaultBeamGroups('9/8'));\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction beamingWithSeveralGroups1(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c4/8, g4/4, c5/8, g5, a5, a5, f5'), { time: '4/4' });\r\n    const beams = Beam.applyAndGetBeams(voice, undefined, [new Fraction(3, 8), new Fraction(3, 8), new Fraction(2, 8)]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction beamingWithSeveralGroupsOverflow(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c4/8, g4/4., c5/8, g5, a5, a5'), { time: '4/4' });\r\n    const beams = Beam.applyAndGetBeams(voice, undefined, [new Fraction(3, 8), new Fraction(3, 8), new Fraction(2, 8)]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction beamingWithSeveralGroupsOverflow2(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c4/16, g4/2, f4/16, c5/8, a4/16, c4/16, g4/8, b4, c5, g5, f5, e5, c5, a4/4'), {\r\n        time: '8/4',\r\n    });\r\n    const beams = Beam.applyAndGetBeams(voice, undefined, [new Fraction(3, 8), new Fraction(2, 8), new Fraction(3, 8)]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction beamingWithSeveralGroupsOverflow3(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c4/16, g4/1, f4/16, c5/8, g5, f5, e5, c5, a4/4'), { time: '8/4' });\r\n    const beams = Beam.applyAndGetBeams(voice, undefined, [new Fraction(3, 8), new Fraction(2, 8), new Fraction(3, 8)]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Auto Beam Applicator Test');\r\n}\r\nfunction secondaryBreaks1(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes([\r\n        'f5/32, f5, f5, f5, f5/16., f5/32',\r\n        'f5/16, f5/8, f5/16',\r\n        'f5/32, f5/16., f5., f5/32',\r\n        'f5/16., f5/32, f5, f5/16.',\r\n    ].join(',')));\r\n    const beams = Beam.generateBeams(voice.getTickables(), { secondary_breaks: '8' });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Duration-Based Secondary Breaks Test');\r\n}\r\nfunction secondaryBreaks2(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const { notes, tuplet } = createShortcuts(score);\r\n    const voice = score.voice([\r\n        tuplet(notes('e5/16, f5, f5')),\r\n        tuplet(notes('f5/16, f5, c5')),\r\n        notes('a4/16., f4/32'),\r\n        tuplet(notes('d4/16, d4, d4')),\r\n        tuplet(notes('a5/8, (e5 g5), a5')),\r\n        tuplet(notes('f5/16, f5, f5')),\r\n        tuplet(notes('f5/16, f5, a4')),\r\n    ].reduce(concat));\r\n    const beams = Beam.generateBeams(voice.getTickables(), { secondary_breaks: '8' });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Duration-Based Secondary Breaks Test');\r\n}\r\nfunction flatBeamsUp(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const { notes, tuplet } = createShortcuts(score);\r\n    const voice = score.voice([\r\n        tuplet(notes('c4/8, g4, f5')),\r\n        notes('d5/8'),\r\n        tuplet(notes('c5/16, (c4 e4 g4), f4')),\r\n        notes('d5/8, e5, c4, f5/32, f5, f5, f5'),\r\n    ].reduce(concat));\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        flat_beams: true,\r\n        stem_direction: 1,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Flat Beams Up Test');\r\n}\r\nfunction flatBeamsDown(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 200);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c5/64, c5, c5, c5, c5, c5, c5, c5, a5/8, g5, (d4 f4 a4)/16, d4, d5/8, e5, g5, a6/32, a6, a6, g4/64, g4'));\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        flat_beams: true,\r\n        stem_direction: -1,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Flat Beams Down Test');\r\n}\r\nfunction flatBeamsMixed(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 200);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c5/64, d5, e5, c5, f5, c5, a5, c5, a5/8, g5, (d4 f4 a4)/16, d4, d5/8, e5, c4, a4/32, a4, a4, g4/64, g4'));\r\n    const beams = Beam.generateBeams(voice.getTickables(), { flat_beams: true });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Flat Beams Mixed Direction Test');\r\n}\r\nfunction flatBeamsUpUniform(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const { notes, tuplet } = createShortcuts(score);\r\n    const voice = score.voice([\r\n        ...tuplet(notes('c4/8, g4, g5')),\r\n        ...notes('d5/8, c5/16, (c4 e4 g4), d5/8, e5, c4, f5/32, f5, f5, f5'),\r\n    ]);\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        flat_beams: true,\r\n        flat_beam_offset: 50,\r\n        stem_direction: 1,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Flat Beams Up (uniform) Test');\r\n}\r\nfunction flatBeamsDownUniform(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 200);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('c5/64, c5, c5, c5, c5, c5, c5, c5, a5/8, g5, (e4 g4 b4)/16, e5, d5/8, e5/8, g5/8, a6/32, a6, a6, g4/64, g4'));\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        flat_beams: true,\r\n        flat_beam_offset: 155,\r\n        stem_direction: -1,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Flat Beams Down (uniform) Test');\r\n}\r\nfunction flatBeamsUpBounds(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const { notes, tuplet } = createShortcuts(score);\r\n    const voice = score.voice([\r\n        ...tuplet(notes('c4/8, g4/8, g5/8')),\r\n        ...notes('d5/8, c5/16, (c4 e4 g4)/16, d5/8, e5/8, c4/8, f5/32, f5/32, f5/32, f5/32'),\r\n    ]);\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        flat_beams: true,\r\n        flat_beam_offset: 60,\r\n        stem_direction: 1,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Flat Beams Up (uniform) Test');\r\n}\r\nfunction flatBeamsDownBounds(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 200);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes([\r\n        'g5/8, a6/32, a6/32, a6/32, g4/64, g4/64',\r\n        'c5/64, c5/64, c5/64, c5/64, c5/64, c5/64, c5/64, c5/64, a5/8',\r\n        'g5/8, (e4 g4 b4)/16, e5/16',\r\n        'd5/8, e5/8',\r\n    ].join(','), { stem: 'down' }));\r\n    const beams = Beam.generateBeams(voice.getTickables(), {\r\n        flat_beams: true,\r\n        flat_beam_offset: 145,\r\n        stem_direction: -1,\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'Flat Beams Down (uniform) Test');\r\n}\r\nVexFlowTests.register(AutoBeamFormattingTests);\r\nexport { AutoBeamFormattingTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Bach Demo\r\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\r\nimport { BarlineType, Registry } from '../src/index';\r\nconst BachDemoTests = {\r\n    Start() {\r\n        QUnit.module('Bach Demo');\r\n        VexFlowTests.runTests('Minuet 1', minuet1);\r\n    },\r\n};\r\nfunction minuet1(options) {\r\n    const registry = new Registry();\r\n    Registry.enableDefaultRegistry(registry);\r\n    // Retrieve the element from the registry and cast to StaveNote, so we can call .addModifier( ) later.\r\n    const id = (id) => registry.getElementById(id);\r\n    const f = VexFlowTests.makeFactory(options, 1100, 900);\r\n    const score = f.EasyScore({ throwOnError: true });\r\n    // Bind these three functions so the code looks cleaner.\r\n    // Instead of score.voice(...), just call voice(...).\r\n    const voice = score.voice.bind(score);\r\n    const notes = score.notes.bind(score);\r\n    const beam = score.beam.bind(score);\r\n    let x = 120;\r\n    let y = 80;\r\n    function appendSystem(width) {\r\n        const system = f.System({ x, y, width, spaceBetweenStaves: 10 });\r\n        x += width;\r\n        return system;\r\n    }\r\n    score.set({ time: '3/4' });\r\n    /*  Measure 1 */\r\n    let system = appendSystem(220);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            voice([notes('D5/q[id=\"m1a\"]'), beam(notes('G4/8, A4, B4, C5', { stem: 'up' }))].reduce(concat)),\r\n            voice([f.TextDynamics({ text: 'p', duration: 'h', dots: 1, line: 9 })]),\r\n        ],\r\n    })\r\n        .addClef('treble')\r\n        .addKeySignature('G')\r\n        .addTimeSignature('3/4')\r\n        .setTempo({ name: 'Allegretto', duration: 'h', dots: 1, bpm: 66 }, -30);\r\n    system\r\n        .addStave({ voices: [voice(notes('(G3 B3 D4)/h, A3/q', { clef: 'bass' }))] })\r\n        .addClef('bass')\r\n        .addKeySignature('G')\r\n        .addTimeSignature('3/4');\r\n    system.addConnector('brace');\r\n    system.addConnector('singleRight');\r\n    system.addConnector('singleLeft');\r\n    id('m1a').addModifier(f.Fingering({ number: '5' }), 0);\r\n    /*  Measure 2 */\r\n    system = appendSystem(150);\r\n    system.addStave({ voices: [voice(notes('D5/q[id=\"m2a\"], G4[id=\"m2b\"], G4[id=\"m2c\"]'))] });\r\n    system.addStave({ voices: [voice(notes('B3/h.', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    id('m2a').addModifier(f.Articulation({ type: 'a.', position: 'above' }), 0);\r\n    id('m2b').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\r\n    id('m2c').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\r\n    f.Curve({\r\n        from: id('m1a'),\r\n        to: id('m2a'),\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 40 },\r\n                { x: 0, y: 40 },\r\n            ],\r\n        },\r\n    });\r\n    /*  Measure 3 */\r\n    system = appendSystem(150);\r\n    system.addStave({\r\n        voices: [voice([notes('E5/q[id=\"m3a\"]'), beam(notes('C5/8, D5, E5, F5', { stem: 'down' }))].reduce(concat))],\r\n    });\r\n    id('m3a').addModifier(f.Fingering({ number: '3', position: 'above' }), 0);\r\n    system.addStave({ voices: [voice(notes('C4/h.', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    /*  Measure 4 */\r\n    system = appendSystem(150);\r\n    system.addStave({ voices: [voice(notes('G5/q[id=\"m4a\"], G4[id=\"m4b\"], G4[id=\"m4c\"]'))] });\r\n    system.addStave({ voices: [voice(notes('B3/h.', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    id('m4a').addModifier(f.Articulation({ type: 'a.', position: 'above' }), 0);\r\n    id('m4b').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\r\n    id('m4c').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\r\n    f.Curve({\r\n        from: id('m3a'),\r\n        to: id('m4a'),\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 20 },\r\n                { x: 0, y: 20 },\r\n            ],\r\n        },\r\n    });\r\n    /*  Measure 5 */\r\n    system = appendSystem(150);\r\n    system.addStave({\r\n        voices: [voice([notes('C5/q[id=\"m5a\"]'), beam(notes('D5/8, C5, B4, A4', { stem: 'down' }))].reduce(concat))],\r\n    });\r\n    id('m5a').addModifier(f.Fingering({ number: '4', position: 'above' }), 0);\r\n    system.addStave({ voices: [voice(notes('A3/h.', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    /*  Measure 6 */\r\n    system = appendSystem(150);\r\n    system.addStave({\r\n        voices: [voice([notes('B4/q'), beam(notes('C5/8, B4, A4, G4[id=\"m6a\"]', { stem: 'up' }))].reduce(concat))],\r\n    });\r\n    system.addStave({ voices: [voice(notes('G3/h.', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    f.Curve({\r\n        from: id('m5a'),\r\n        to: id('m6a'),\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 20 },\r\n                { x: 0, y: 20 },\r\n            ],\r\n            invert: true,\r\n            position_end: 'nearTop',\r\n            y_shift: 20,\r\n        },\r\n    });\r\n    /*  Measure 7 (New system) */\r\n    x = 20;\r\n    y += 230;\r\n    system = appendSystem(220);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            voice([notes('F4/q[id=\"m7a\"]'), beam(notes('G4/8[id=\"m7b\"], A4, B4, G4', { stem: 'up' }))].reduce(concat)),\r\n        ],\r\n    })\r\n        .addClef('treble')\r\n        .addKeySignature('G');\r\n    system\r\n        .addStave({ voices: [voice(notes('D4/q, B3[id=\"m7c\"], G3', { clef: 'bass' }))] })\r\n        .addClef('bass')\r\n        .addKeySignature('G');\r\n    system.addConnector('brace');\r\n    system.addConnector('singleRight');\r\n    system.addConnector('singleLeft');\r\n    id('m7a').addModifier(f.Fingering({ number: '2', position: 'below' }), 0);\r\n    id('m7b').addModifier(f.Fingering({ number: '1' }), 0);\r\n    id('m7c').addModifier(f.Fingering({ number: '3', position: 'above' }), 0);\r\n    /*  Measure 8 */\r\n    system = appendSystem(180);\r\n    const grace = f.GraceNote({ keys: ['d/3'], clef: 'bass', duration: '8', slash: true });\r\n    system.addStave({ voices: [voice(notes('A4/h.[id=\"m8c\"]'))] });\r\n    system.addStave({\r\n        voices: [\r\n            score\r\n                .set({ clef: 'bass' })\r\n                .voice([notes('D4/q[id=\"m8a\"]'), beam(notes('D3/8, C4, B3[id=\"m8b\"], A3', { stem: 'down' }))].reduce(concat)),\r\n        ],\r\n    });\r\n    system.addConnector('singleRight');\r\n    id('m8b').addModifier(f.Fingering({ number: '1', position: 'above' }), 0);\r\n    id('m8c').addModifier(f.GraceNoteGroup({ notes: [grace] }), 0);\r\n    f.Curve({\r\n        from: id('m7a'),\r\n        to: id('m8c'),\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 20 },\r\n                { x: 0, y: 20 },\r\n            ],\r\n            invert: true,\r\n            position: 'nearTop',\r\n            position_end: 'nearTop',\r\n        },\r\n    });\r\n    f.StaveTie({ from: grace, to: id('m8c') });\r\n    /*  Measure 9 */\r\n    system = appendSystem(180);\r\n    system.addStave({\r\n        voices: [\r\n            score\r\n                .set({ clef: 'treble' })\r\n                .voice([notes('D5/q[id=\"m9a\"]'), beam(notes('G4/8, A4, B4, C5', { stem: 'up' }))].reduce(concat)),\r\n        ],\r\n    });\r\n    system.addStave({ voices: [voice(notes('B3/h, A3/q', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    id('m9a').addModifier(f.Fingering({ number: '5' }), 0);\r\n    /*  Measure 10 */\r\n    system = appendSystem(170);\r\n    system.addStave({ voices: [voice(notes('D5/q[id=\"m10a\"], G4[id=\"m10b\"], G4[id=\"m10c\"]'))] });\r\n    system.addStave({ voices: [voice(notes('G3/q[id=\"m10d\"], B3, G3', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    id('m10a').addModifier(f.Articulation({ type: 'a.', position: 'above' }), 0);\r\n    id('m10b').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\r\n    id('m10c').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\r\n    id('m10d').addModifier(f.Fingering({ number: '4' }), 0);\r\n    f.Curve({\r\n        from: id('m9a'),\r\n        to: id('m10a'),\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 40 },\r\n                { x: 0, y: 40 },\r\n            ],\r\n        },\r\n    });\r\n    /*  Measure 11 */\r\n    system = appendSystem(150);\r\n    system.addStave({\r\n        voices: [voice([notes('E5/q[id=\"m11a\"]'), beam(notes('C5/8, D5, E5, F5', { stem: 'down' }))].reduce(concat))],\r\n    });\r\n    id('m11a').addModifier(f.Fingering({ number: '3', position: 'above' }), 0);\r\n    system.addStave({ voices: [voice(notes('C4/h.', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    /*  Measure 12 */\r\n    system = appendSystem(170);\r\n    system.addStave({ voices: [voice(notes('G5/q[id=\"m12a\"], G4[id=\"m12b\"], G4[id=\"m12c\"]'))] });\r\n    system.addStave({\r\n        voices: [\r\n            score\r\n                .set({ clef: 'bass' })\r\n                .voice([notes('B3/q[id=\"m12d\"]'), beam(notes('C4/8, B3, A3, G3[id=\"m12e\"]', { stem: 'down' }))].reduce(concat)),\r\n        ],\r\n    });\r\n    system.addConnector('singleRight');\r\n    id('m12a').addModifier(f.Articulation({ type: 'a.', position: 'above' }), 0);\r\n    id('m12b').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\r\n    id('m12c').addModifier(f.Articulation({ type: 'a.', position: 'below' }), 0);\r\n    id('m12d').addModifier(f.Fingering({ number: '2', position: 'above' }), 0);\r\n    id('m12e').addModifier(f.Fingering({ number: '4', position: 'above' }), 0);\r\n    f.Curve({\r\n        from: id('m11a'),\r\n        to: id('m12a'),\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 20 },\r\n                { x: 0, y: 20 },\r\n            ],\r\n        },\r\n    });\r\n    /*  Measure 13 (New system) */\r\n    x = 20;\r\n    y += 230;\r\n    system = appendSystem(220);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            score\r\n                .set({ clef: 'treble' })\r\n                .voice([notes('c5/q[id=\"m13a\"]'), beam(notes('d5/8, c5, b4, a4', { stem: 'down' }))].reduce(concat)),\r\n        ],\r\n    })\r\n        .addClef('treble')\r\n        .addKeySignature('G');\r\n    system\r\n        .addStave({ voices: [voice(notes('a3/h[id=\"m13b\"], f3/q[id=\"m13c\"]', { clef: 'bass' }))] })\r\n        .addClef('bass')\r\n        .addKeySignature('G');\r\n    system.addConnector('brace');\r\n    system.addConnector('singleRight');\r\n    system.addConnector('singleLeft');\r\n    id('m13a').addModifier(f.Fingering({ number: '4', position: 'above' }), 0);\r\n    id('m13b').addModifier(f.Fingering({ number: '1' }), 0);\r\n    id('m13c').addModifier(f.Fingering({ number: '3', position: 'above' }), 0);\r\n    /*  Measure 14 */\r\n    system = appendSystem(180);\r\n    system.addStave({\r\n        voices: [\r\n            score\r\n                .set({ clef: 'treble' })\r\n                .voice([notes('B4/q'), beam(notes('C5/8, b4, a4, g4', { stem: 'up' }))].reduce(concat)),\r\n        ],\r\n    });\r\n    system.addStave({ voices: [voice(notes('g3/h[id=\"m14a\"], b3/q[id=\"m14b\"]', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    id('m14a').addModifier(f.Fingering({ number: '2' }), 0);\r\n    id('m14b').addModifier(f.Fingering({ number: '1' }), 0);\r\n    /*  Measure 15 */\r\n    system = appendSystem(180);\r\n    system.addStave({\r\n        voices: [\r\n            score\r\n                .set({ clef: 'treble' })\r\n                .voice([notes('a4/q'), beam(notes('b4/8, a4, g4, f4[id=\"m15a\"]', { stem: 'up' }))].reduce(concat)),\r\n        ],\r\n    });\r\n    system.addStave({ voices: [voice(notes('c4/q[id=\"m15b\"], d4, d3', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    id('m15a').addModifier(f.Fingering({ number: '2' }), 0);\r\n    id('m15b').addModifier(f.Fingering({ number: '2' }), 0);\r\n    /*  Measure 16 */\r\n    system = appendSystem(130);\r\n    system\r\n        .addStave({\r\n        voices: [score.set({ clef: 'treble' }).voice([notes('g4/h.[id=\"m16a\"]')].reduce(concat))],\r\n    })\r\n        .setEndBarType(BarlineType.REPEAT_END);\r\n    system\r\n        .addStave({ voices: [voice(notes('g3/h[id=\"m16b\"], g2/q', { clef: 'bass' }))] })\r\n        .setEndBarType(BarlineType.REPEAT_END);\r\n    system.addConnector('boldDoubleRight');\r\n    id('m16a').addModifier(f.Fingering({ number: '1' }), 0);\r\n    id('m16b').addModifier(f.Fingering({ number: '1' }), 0);\r\n    f.Curve({\r\n        from: id('m13a'),\r\n        to: id('m16a'),\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 50 },\r\n                { x: 0, y: 20 },\r\n            ],\r\n            invert: true,\r\n            position_end: 'nearTop',\r\n        },\r\n    });\r\n    /* Measure 17 */\r\n    system = appendSystem(180);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            score\r\n                .set({ clef: 'treble' })\r\n                .voice([notes('b5/q[id=\"m17a\"]'), beam(notes('g5/8, a5, b5, g5', { stem: 'down' }))].reduce(concat)),\r\n            voice([f.TextDynamics({ text: 'mf', duration: 'h', dots: 1, line: 10 })]),\r\n        ],\r\n    })\r\n        .setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    system.addStave({ voices: [voice(notes('g3/h.', { clef: 'bass' }))] }).setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    system.addConnector('boldDoubleLeft');\r\n    system.addConnector('singleRight');\r\n    id('m17a').addModifier(f.Fingering({ number: '5', position: 'above' }), 0);\r\n    /* Measure 18 */\r\n    system = appendSystem(180);\r\n    system.addStave({\r\n        voices: [\r\n            score\r\n                .set({ clef: 'treble' })\r\n                .voice([notes('a5/q[id=\"m18a\"]'), beam(notes('d5/8, e5, f5, d5[id=\"m18b\"]', { stem: 'down' }))].reduce(concat)),\r\n        ],\r\n    });\r\n    system.addStave({ voices: [voice(notes('f3/h.', { clef: 'bass' }))] });\r\n    system.addConnector('singleRight');\r\n    id('m18a').addModifier(f.Fingering({ number: '4', position: 'above' }), 0);\r\n    f.Curve({\r\n        from: id('m17a'),\r\n        to: id('m18b'),\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 20 },\r\n                { x: 0, y: 30 },\r\n            ],\r\n        },\r\n    });\r\n    /* Done */\r\n    f.draw();\r\n    Registry.disableDefaultRegistry();\r\n    ok(true, 'Bach Minuet 1');\r\n}\r\nVexFlowTests.register(BachDemoTests);\r\nexport { BachDemoTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Barline Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Barline, BarlineType } from '../src/stavebarline';\r\nconst BarlineTests = {\r\n    Start() {\r\n        QUnit.module('Barline');\r\n        test('Enums', enums);\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple BarNotes', simple);\r\n        run('Style BarNotes', style);\r\n    },\r\n};\r\nfunction enums() {\r\n    // VexFlow 4.0 renamed Barline.type => BarlineType.\r\n    // The old way still works, for backwards compatibility.\r\n    equal(Barline.type, BarlineType);\r\n    const a = BarlineType['DOUBLE'];\r\n    const b = BarlineType.DOUBLE;\r\n    equal(a, b);\r\n}\r\nfunction simple(options) {\r\n    const f = VexFlowTests.makeFactory(options, 380, 160);\r\n    const stave = f.Stave();\r\n    const notes = [\r\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stem_direction: -1, duration: '2' }),\r\n        f.BarNote({ type: 'single' }),\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: '2' })\r\n            .addModifier(f.Accidental({ type: 'n' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n    ];\r\n    const voice = f.Voice().addTickables(notes);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Simple Test');\r\n}\r\nfunction style(options) {\r\n    const f = VexFlowTests.makeFactory(options, 380, 160);\r\n    const stave = f.Stave();\r\n    const notes = [\r\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stem_direction: -1, duration: '2' }),\r\n        f.BarNote({ type: 'single' }),\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: '2' })\r\n            .addModifier(f.Accidental({ type: 'n' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n    ];\r\n    notes[1].setStyle({ shadowBlur: 15, shadowColor: 'blue', fillStyle: 'blue', strokeStyle: 'blue' });\r\n    const voice = f.Voice().addTickables(notes);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Style');\r\n}\r\nVexFlowTests.register(BarlineTests);\r\nexport { BarlineTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Beam Tests\r\n// TODO: Factory.Beam()'s 'notes' argument is a StemmableNote[], but we only have access to Tickable[].\r\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\r\nimport { AnnotationVerticalJustify, Beam, Dot, Font, FontStyle, FontWeight, Stem, Voice, } from '../src/index';\r\nconst BeamTests = {\r\n    Start() {\r\n        QUnit.module('Beam');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple Beam', simple);\r\n        run('Multi Beam', multi);\r\n        run('Sixteenth Beam', sixteenth);\r\n        run('Slopey Beam', slopey);\r\n        run('Auto-stemmed Beam', autoStem);\r\n        run('Mixed Beam 1', mixed);\r\n        run('Mixed Beam 2', mixed2);\r\n        run('Dotted Beam', dotted);\r\n        run('Partial Beam', partial);\r\n        run('Close Trade-offs Beam', tradeoffs);\r\n        run('Insane Beam', insane);\r\n        run('Lengthy Beam', lenghty);\r\n        run('Outlier Beam', outlier);\r\n        run('Break Secondary Beams', breakSecondaryBeams);\r\n        run('Partial Beam Direction', partialBeamDirection);\r\n        run('TabNote Beams Up', tabBeamsUp);\r\n        run('TabNote Beams Down', tabBeamsDown);\r\n        run('TabNote Auto Create Beams', autoTabBeams);\r\n        run('TabNote Beams Auto Stem', tabBeamsAutoStem);\r\n        run('Complex Beams with Annotations', complexWithAnnotation);\r\n        run('Complex Beams with Articulations', complexWithArticulation);\r\n    },\r\n};\r\nfunction simple(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const beam = score.beam.bind(score);\r\n    const notes = score.notes.bind(score);\r\n    const voice = score.voice([\r\n        notes('(cb4 e#4 a4)/2'),\r\n        beam(notes('(cb4 e#4 a4)/8, (d4 f4 a4), (ebb4 g##4 b4), (f4 a4 c5)', { stem: 'up' })),\r\n    ].reduce(concat), { time: '2/2' });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Simple Test');\r\n}\r\nfunction multi(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice.bind(score);\r\n    const beam = score.beam.bind(score);\r\n    const notes = score.notes.bind(score);\r\n    const voices = [\r\n        voice([beam(notes('f5/8, e5, d5, c5', { stem: 'up' })), beam(notes('c5, d5, e5, f5', { stem: 'up' }))].reduce(concat)),\r\n        voice([beam(notes('f4/8, e4, d4, c4', { stem: 'down' })), beam(notes('c4/8, d4, e4, f4', { stem: 'down' }))].reduce(concat)),\r\n    ];\r\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n    f.draw();\r\n    ok(true, 'Multi Test');\r\n}\r\nfunction sixteenth(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice.bind(score);\r\n    const beam = score.beam.bind(score);\r\n    const notes = score.notes.bind(score);\r\n    const voices = [\r\n        voice([\r\n            beam(notes('f5/16, f5, d5, c5', { stem: 'up' })),\r\n            beam(notes('c5/16, d5, f5, e5', { stem: 'up' })),\r\n            notes('f5/2', { stem: 'up' }),\r\n        ].reduce(concat)),\r\n        voice([\r\n            beam(notes('f4/16, e4/16, d4/16, c4/16', { stem: 'down' })),\r\n            beam(notes('c4/16, d4/16, f4/16, e4/16', { stem: 'down' })),\r\n            notes('f4/2', { stem: 'down' }),\r\n        ].reduce(concat)),\r\n    ];\r\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n    f.draw();\r\n    ok(true, 'Sixteenth Test');\r\n}\r\nfunction breakSecondaryBeams(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 200);\r\n    const stave = f.Stave({ y: 20 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice.bind(score);\r\n    const beam = score.beam.bind(score);\r\n    const notes = score.notes.bind(score);\r\n    const voices = [\r\n        voice([\r\n            beam(notes('f5/16., f5/32, c5/16., d5/32, c5/16., d5/32', { stem: 'up' }), { secondaryBeamBreaks: [1, 3] }),\r\n            beam(notes('f5/16, e5, e5, e5, e5, e5', { stem: 'up' }), { secondaryBeamBreaks: [2] }),\r\n        ].reduce(concat), { time: '3/4' }),\r\n        voice([\r\n            beam(notes('f4/32, d4, e4, c4, d4, c4, f4, d4, e4, c4, c4, d4', { stem: 'down' }), {\r\n                secondaryBeamBreaks: [3, 7],\r\n            }),\r\n            beam(notes('d4/16, f4, d4, e4, e4, e4', { stem: 'down' }), { secondaryBeamBreaks: [3] }),\r\n        ].reduce(concat), { time: '3/4' }),\r\n    ];\r\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n    f.draw();\r\n    ok(true, 'Breaking Secondary Beams Test');\r\n}\r\nfunction partialBeamDirection(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 200);\r\n    const stave = f.Stave({ y: 20 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice.bind(score);\r\n    const beam = score.beam.bind(score);\r\n    const notes = score.notes.bind(score);\r\n    const voices = [\r\n        voice([\r\n            // Default beaming:\r\n            beam(notes('f4/8, f4/16, f4/8, f4/16', { stem: 'up' })),\r\n            // Force first 16th beam right\r\n            beam(notes('f4/8, f4/16, f4/8, f4/16', { stem: 'up' }), { partialBeamDirections: { '1': 'R' } }),\r\n            // Force first 16th beam left\r\n            beam(notes('f4/8, f4/16, f4/8, f4/16', { stem: 'up' }), { partialBeamDirections: { '1': 'L' } }),\r\n        ].reduce(concat), { time: '9/8' }),\r\n    ];\r\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n    f.draw();\r\n    ok(true, 'Partial beam direction test');\r\n}\r\nfunction slopey(options) {\r\n    const f = VexFlowTests.makeFactory(options, 350, 140);\r\n    const stave = f.Stave({ y: 20 });\r\n    const score = f.EasyScore();\r\n    const beam = score.beam.bind(score);\r\n    const notes = score.notes.bind(score);\r\n    const voice = score.voice([\r\n        beam(notes('c4/8, f4/8, d5/8, g5/8', { stem: 'up' })),\r\n        beam(notes('d6/8, f5/8, d4/8, g3/8', { stem: 'up' })),\r\n    ].reduce(concat));\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Slopey Test');\r\n}\r\nfunction autoStem(options) {\r\n    const f = VexFlowTests.makeFactory(options, 350, 140);\r\n    const stave = f.Stave({ y: 20 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('a4/8, b4/8, g4/8, c5/8, f4/8, d5/8, e4/8, e5/8, b4/8, b4/8, g4/8, d5/8'), {\r\n        time: '6/4',\r\n    });\r\n    const notes = voice.getTickables();\r\n    const beams = [\r\n        f.Beam({ notes: notes.slice(0, 2), options: { autoStem: true } }),\r\n        f.Beam({ notes: notes.slice(2, 4), options: { autoStem: true } }),\r\n        f.Beam({ notes: notes.slice(4, 6), options: { autoStem: true } }),\r\n        f.Beam({ notes: notes.slice(6, 8), options: { autoStem: true } }),\r\n        f.Beam({ notes: notes.slice(8, 10), options: { autoStem: true } }),\r\n        f.Beam({ notes: notes.slice(10, 12), options: { autoStem: true } }),\r\n    ];\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    const UP = Stem.UP;\r\n    const DOWN = Stem.DOWN;\r\n    equal(beams[0].getStemDirection(), UP);\r\n    equal(beams[1].getStemDirection(), UP);\r\n    equal(beams[2].getStemDirection(), UP);\r\n    equal(beams[3].getStemDirection(), UP);\r\n    equal(beams[4].getStemDirection(), DOWN);\r\n    equal(beams[5].getStemDirection(), DOWN);\r\n    f.draw();\r\n    ok(true, 'AutoStem Beam Test');\r\n}\r\nfunction mixed(options) {\r\n    const f = VexFlowTests.makeFactory(options, 350, 140);\r\n    const stave = f.Stave({ y: 20 });\r\n    const score = f.EasyScore();\r\n    const voice1 = score.voice(score.notes('f5/8, d5/16, c5/16, c5/16, d5/16, e5/8, f5/8, d5/16, c5/16, c5/16, d5/16, e5/8', { stem: 'up' }));\r\n    const voice2 = score.voice(score.notes('f4/16, e4/8, d4/16, c4/16, d4/8, f4/16, f4/16, e4/8, d4/16, c4/16, d4/8, f4/16', { stem: 'down' }));\r\n    [\r\n        [0, 4],\r\n        [4, 8],\r\n        [8, 12],\r\n    ].forEach((range) => f.Beam({ notes: voice1.getTickables().slice(range[0], range[1]) }));\r\n    [\r\n        [0, 4],\r\n        [4, 8],\r\n        [8, 12],\r\n    ].forEach((range) => f.Beam({ notes: voice2.getTickables().slice(range[0], range[1]) }));\r\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\r\n    f.draw();\r\n    ok(true, 'Multi Test');\r\n}\r\nfunction mixed2(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 180);\r\n    const stave = f.Stave({ y: 20 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('f5/32, d5/16, c5/32, c5/64, d5/128, e5/8, f5/16, d5/32, c5/64, c5/32, d5/16, e5/128', {\r\n        stem: 'up',\r\n    }), { time: '31/64' });\r\n    const voice2 = score.voice(score.notes('f4/32, d4/16, c4/32, c4/64, d4/128, e4/8, f4/16, d4/32, c4/64, c4/32, d4/16, e4/128', {\r\n        stem: 'down',\r\n    }), { time: '31/64' });\r\n    f.Beam({ notes: voice.getTickables().slice(0, 12) });\r\n    f.Beam({ notes: voice2.getTickables().slice(0, 12) });\r\n    f.Formatter().joinVoices([voice, voice2]).formatToStave([voice, voice2], stave);\r\n    f.draw();\r\n    ok(true, 'Multi Test');\r\n}\r\nfunction dotted(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('d4/8, b3/8., a3/16, a3/8, b3/8., c4/16, d4/8, b3/8, a3/8., a3/16, b3/8., c4/16', { stem: 'up' }), { time: '6/4' });\r\n    const notes = voice.getTickables();\r\n    f.Beam({ notes: notes.slice(0, 4) });\r\n    f.Beam({ notes: notes.slice(4, 8) });\r\n    f.Beam({ notes: notes.slice(8, 12) });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Dotted Test');\r\n}\r\nfunction partial(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('d4/8, b3/32, c4/16., d4/16., e4/8, c4/64, c4/32, a3/8., b3/32., c4/8, e4/64, b3/16., b3/64, f4/8, e4/8, g4/64, e4/8'), { time: '89/64' });\r\n    const notes = voice.getTickables();\r\n    f.Beam({ notes: notes.slice(0, 3) });\r\n    f.Beam({ notes: notes.slice(3, 9) });\r\n    f.Beam({ notes: notes.slice(9, 13) });\r\n    f.Beam({ notes: notes.slice(13, 17) });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Partial Test');\r\n}\r\nfunction tradeoffs(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('a4/8, b4/8, c4/8, d4/8, g4/8, a4/8, b4/8, c4/8', { stem: 'up' }));\r\n    const notes = voice.getTickables();\r\n    f.Beam({ notes: notes.slice(0, 4) });\r\n    f.Beam({ notes: notes.slice(4, 8) });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Close Trade-offs Test');\r\n}\r\nfunction insane(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 180);\r\n    const stave = f.Stave({ y: 20 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes('g4/8, g5/8, c4/8, b5/8, g4/8[stem=\"down\"], a5[stem=\"down\"], b4[stem=\"down\"], c4/8', { stem: 'up' }));\r\n    const notes = voice.getTickables();\r\n    f.Beam({ notes: notes.slice(0, 4) });\r\n    f.Beam({ notes: notes.slice(4, 7) });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Insane Test');\r\n}\r\nfunction lenghty(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 180);\r\n    const stave = f.Stave({ y: 20 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.beam(score.notes('g4/8, g4, g4, a4', { stem: 'up' })), { time: '2/4' });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Lengthy Test');\r\n}\r\nfunction outlier(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 180);\r\n    const stave = f.Stave({ y: 20 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice(score.notes([\r\n        'g4/8[stem=\"up\"],   f4[stem=\"up\"],   d5[stem=\"up\"],   e4[stem=\"up\"]',\r\n        'd5/8[stem=\"down\"], d5[stem=\"down\"], c5[stem=\"down\"], d5[stem=\"down\"]',\r\n    ].join()));\r\n    const notes = voice.getTickables();\r\n    f.Beam({ notes: notes.slice(0, 4) });\r\n    f.Beam({ notes: notes.slice(4, 8) });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave, { stave: stave });\r\n    f.draw();\r\n    ok(true, 'Outlier Test');\r\n}\r\nfunction tabBeamsUp(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 200);\r\n    const stave = f.TabStave({ y: 20 });\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '32',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '64',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '128',\r\n        },\r\n        { positions: [{ str: 3, fret: 6 }], duration: '8' },\r\n        { positions: [{ str: 3, fret: 6 }], duration: '8' },\r\n        { positions: [{ str: 3, fret: 6 }], duration: '8' },\r\n        { positions: [{ str: 3, fret: 6 }], duration: '8' },\r\n    ];\r\n    const notes = specs.map((struct) => {\r\n        const tabNote = f.TabNote(struct);\r\n        tabNote.render_options.draw_stem = true;\r\n        return tabNote;\r\n    });\r\n    f.Beam({ notes: notes.slice(1, 7) });\r\n    f.Beam({ notes: notes.slice(8, 11) });\r\n    f.Tuplet({ notes: notes.slice(8, 11), options: { ratioed: true } });\r\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'All objects have been drawn');\r\n}\r\nfunction tabBeamsDown(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 250);\r\n    const stave = f.TabStave({ options: { num_lines: 10 } });\r\n    const specs = [\r\n        {\r\n            stem_direction: -1,\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            stem_direction: -1,\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '8dd',\r\n        },\r\n        {\r\n            stem_direction: -1,\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            stem_direction: -1,\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n        },\r\n        {\r\n            stem_direction: -1,\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '32',\r\n        },\r\n        {\r\n            stem_direction: -1,\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '64',\r\n        },\r\n        {\r\n            stem_direction: -1,\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '128',\r\n        },\r\n        { stem_direction: -1, positions: [{ str: 1, fret: 6 }], duration: '8' },\r\n        { stem_direction: -1, positions: [{ str: 1, fret: 6 }], duration: '8' },\r\n        { stem_direction: -1, positions: [{ str: 1, fret: 6 }], duration: '8' },\r\n        { stem_direction: -1, positions: [{ str: 7, fret: 6 }], duration: '8' },\r\n        { stem_direction: -1, positions: [{ str: 7, fret: 6 }], duration: '8' },\r\n        { stem_direction: -1, positions: [{ str: 10, fret: 6 }], duration: '8' },\r\n        { stem_direction: -1, positions: [{ str: 10, fret: 6 }], duration: '8' },\r\n    ];\r\n    const notes = specs.map((struct) => {\r\n        const tabNote = f.TabNote(struct);\r\n        tabNote.render_options.draw_stem = true;\r\n        tabNote.render_options.draw_dots = true;\r\n        return tabNote;\r\n    });\r\n    Dot.buildAndAttach([notes[1], notes[1]]);\r\n    f.Beam({ notes: notes.slice(1, 7) });\r\n    f.Beam({ notes: notes.slice(8, 11) });\r\n    f.Tuplet({ notes: notes.slice(8, 11), options: { location: -1 } });\r\n    f.Tuplet({ notes: notes.slice(11, 14), options: { location: -1 } });\r\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'All objects have been drawn');\r\n}\r\nfunction autoTabBeams(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 200);\r\n    const stave = f.TabStave();\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n        },\r\n        { positions: [{ str: 1, fret: 6 }], duration: '32' },\r\n        { positions: [{ str: 1, fret: 6 }], duration: '32' },\r\n        { positions: [{ str: 1, fret: 6 }], duration: '32' },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '32' },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '16' },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '16' },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '16' },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '16' },\r\n    ];\r\n    const notes = specs.map((struct) => {\r\n        const tabNote = f.TabNote(struct);\r\n        tabNote.render_options.draw_stem = true;\r\n        tabNote.render_options.draw_dots = true;\r\n        return tabNote;\r\n    });\r\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    const beams = Beam.applyAndGetBeams(voice, -1);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    beams.forEach((beam) => beam.setContext(f.getContext()).draw());\r\n    ok(true, 'All objects have been drawn');\r\n}\r\n// This tests makes sure the auto_stem functionality is works.\r\n// TabNote stems within a beam group should end up normalized\r\nfunction tabBeamsAutoStem(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 300);\r\n    const stave = f.TabStave();\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n            stem_direction: -1,\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n            stem_direction: 1,\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n            stem_direction: -1,\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n            stem_direction: 1,\r\n        },\r\n        { positions: [{ str: 1, fret: 6 }], duration: '32', stem_direction: 1 },\r\n        { positions: [{ str: 1, fret: 6 }], duration: '32', stem_direction: -1 },\r\n        { positions: [{ str: 1, fret: 6 }], duration: '32', stem_direction: -1 },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '32', stem_direction: -1 },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '16', stem_direction: 1 },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '16', stem_direction: 1 },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '16', stem_direction: 1 },\r\n        { positions: [{ str: 6, fret: 6 }], duration: '16', stem_direction: -1 },\r\n    ];\r\n    const notes = specs.map((struct) => {\r\n        const tabNote = f.TabNote(struct);\r\n        tabNote.render_options.draw_stem = true;\r\n        tabNote.render_options.draw_dots = true;\r\n        return tabNote;\r\n    });\r\n    // Stems should format down\r\n    f.Beam({ notes: notes.slice(0, 8), options: { autoStem: true } });\r\n    // Stems should format up\r\n    f.Beam({ notes: notes.slice(8, 12), options: { autoStem: true } });\r\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'All objects have been drawn');\r\n}\r\nfunction complexWithAnnotation(options) {\r\n    const factory = VexFlowTests.makeFactory(options, 500, 200);\r\n    const stave = factory.Stave({ y: 40 });\r\n    const s1 = [\r\n        { keys: ['e/4'], duration: '128', stem_direction: 1 },\r\n        { keys: ['d/4'], duration: '16', stem_direction: 1 },\r\n        { keys: ['e/4'], duration: '8', stem_direction: 1 },\r\n        { keys: ['c/4', 'g/4'], duration: '32', stem_direction: 1 },\r\n        { keys: ['c/4'], duration: '32', stem_direction: 1 },\r\n        { keys: ['c/4'], duration: '32', stem_direction: 1 },\r\n        { keys: ['c/4'], duration: '32', stem_direction: 1 },\r\n    ];\r\n    const s2 = [\r\n        { keys: ['e/5'], duration: '128', stem_direction: -1 },\r\n        { keys: ['d/5'], duration: '16', stem_direction: -1 },\r\n        { keys: ['e/5'], duration: '8', stem_direction: -1 },\r\n        { keys: ['c/5', 'g/5'], duration: '32', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '32', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '32', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '32', stem_direction: -1 },\r\n    ];\r\n    const font = {\r\n        family: Font.SERIF,\r\n        size: 14,\r\n        weight: FontWeight.BOLD,\r\n        style: FontStyle.ITALIC,\r\n    };\r\n    const notes1 = s1.map((struct) => factory\r\n        .StaveNote(struct) //\r\n        .addModifier(factory.Annotation({ text: '1', vJustify: AnnotationVerticalJustify.TOP, font }), 0));\r\n    const notes2 = s2.map((struct) => factory\r\n        .StaveNote(struct) //\r\n        .addModifier(factory.Annotation({ text: '3', vJustify: AnnotationVerticalJustify.BOTTOM, font }), 0));\r\n    factory.Beam({ notes: notes1 });\r\n    factory.Beam({ notes: notes2 });\r\n    const voice = factory.Voice().setMode(Voice.Mode.SOFT).addTickables(notes1).addTickables(notes2);\r\n    factory.Formatter().joinVoices([voice]).formatToStave([voice], stave, { stave: stave });\r\n    factory.draw();\r\n    ok(true, 'Complex beam annotations');\r\n}\r\nfunction complexWithArticulation(options) {\r\n    const f = VexFlowTests.makeFactory(options, 500, 200);\r\n    const stave = f.Stave({ y: 40 });\r\n    const s1 = [\r\n        { keys: ['e/4'], duration: '128', stem_direction: 1 },\r\n        { keys: ['d/4'], duration: '16', stem_direction: 1 },\r\n        { keys: ['e/4'], duration: '8', stem_direction: 1 },\r\n        { keys: ['c/4', 'g/4'], duration: '32', stem_direction: 1 },\r\n        { keys: ['c/4'], duration: '32', stem_direction: 1 },\r\n        { keys: ['c/4'], duration: '32', stem_direction: 1 },\r\n        { keys: ['c/4'], duration: '32', stem_direction: 1 },\r\n    ];\r\n    const s2 = [\r\n        { keys: ['e/5'], duration: '128', stem_direction: -1 },\r\n        { keys: ['d/5'], duration: '16', stem_direction: -1 },\r\n        { keys: ['e/5'], duration: '8', stem_direction: -1 },\r\n        { keys: ['c/5', 'g/5'], duration: '32', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '32', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '32', stem_direction: -1 },\r\n        { keys: ['c/5'], duration: '32', stem_direction: -1 },\r\n    ];\r\n    const notes1 = s1.map((struct) => f.StaveNote(struct).addModifier(f.Articulation({ type: 'am', position: 'above' }), 0));\r\n    const notes2 = s2.map((struct) => f.StaveNote(struct).addModifier(f.Articulation({ type: 'a>', position: 'below' }), 0));\r\n    f.Beam({ notes: notes1 });\r\n    f.Beam({ notes: notes2 });\r\n    const voice = f.Voice().setMode(Voice.Mode.SOFT).addTickables(notes1).addTickables(notes2);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave, { stave: stave });\r\n    f.draw();\r\n    ok(true, 'Complex beam articulations');\r\n}\r\nVexFlowTests.register(BeamTests);\r\nexport { BeamTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Bend Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Bend } from '../src/bend';\r\nimport { Font } from '../src/font';\r\nimport { Formatter } from '../src/formatter';\r\nimport { ModifierContext } from '../src/modifiercontext';\r\nimport { Note } from '../src/note';\r\nimport { TabNote } from '../src/tabnote';\r\nimport { TabStave } from '../src/tabstave';\r\nimport { TickContext } from '../src/tickcontext';\r\nconst BendTests = {\r\n    Start() {\r\n        QUnit.module('Bend');\r\n        const run = VexFlowTests.runTests;\r\n        run('Double Bends', doubleBends);\r\n        run('Reverse Bends', reverseBends);\r\n        run('Bend Phrase', bendPhrase);\r\n        run('Double Bends With Release', doubleBendsWithRelease);\r\n        run('Whako Bend', whackoBends);\r\n        // TODO: Rename 'Whako Bend' => 'Whacko'\r\n    },\r\n};\r\n// Helper functions for creating TabNote and Bend objects.\r\nconst note = (noteStruct) => new TabNote(noteStruct);\r\nconst bendWithText = (text, release = false) => new Bend(text, release);\r\nconst bendWithPhrase = (phrase) => new Bend('', false, phrase);\r\n/**\r\n * Bend two strings at a time.\r\n */\r\nfunction doubleBends(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\r\n    const notes = [\r\n        note({\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 4, fret: 9 },\r\n            ],\r\n            duration: 'q',\r\n        })\r\n            .addModifier(bendWithText('Full'), 0)\r\n            .addModifier(bendWithText('1/2'), 1),\r\n        note({\r\n            positions: [\r\n                { str: 2, fret: 5 },\r\n                { str: 3, fret: 5 },\r\n            ],\r\n            duration: 'q',\r\n        })\r\n            .addModifier(bendWithText('1/4'), 0)\r\n            .addModifier(bendWithText('1/4'), 1),\r\n        // This note is not visible because it is pushed off to the right by the ctx.scale(1.5, 1.5) at the top.\r\n        note({\r\n            positions: [{ str: 4, fret: 7 }],\r\n            duration: 'h',\r\n        }),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    notes.forEach((note) => Note.plotMetrics(ctx, note, 140));\r\n    ok(true, 'Double Bends');\r\n}\r\nfunction doubleBendsWithRelease(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 550, 240);\r\n    ctx.scale(1.0, 1.0);\r\n    ctx.setBackgroundFillStyle('#FFF');\r\n    ctx.setFont('Arial', VexFlowTests.Font.size);\r\n    const stave = new TabStave(10, 10, 550).addTabGlyph().setContext(ctx).draw();\r\n    const notes = [\r\n        note({\r\n            positions: [\r\n                { str: 1, fret: 10 },\r\n                { str: 4, fret: 9 },\r\n            ],\r\n            duration: 'q',\r\n        })\r\n            .addModifier(bendWithText('1/2', true), 0)\r\n            .addModifier(bendWithText('Full', true), 1),\r\n        note({\r\n            positions: [\r\n                { str: 2, fret: 5 },\r\n                { str: 3, fret: 5 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: 'q',\r\n        })\r\n            .addModifier(bendWithText('1/4', true), 0)\r\n            .addModifier(bendWithText('Monstrous', true), 1)\r\n            .addModifier(bendWithText('1/4', true), 2),\r\n        note({\r\n            positions: [{ str: 4, fret: 7 }],\r\n            duration: 'q',\r\n        }),\r\n        note({\r\n            positions: [{ str: 4, fret: 7 }],\r\n            duration: 'q',\r\n        }),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    notes.forEach((note) => Note.plotMetrics(ctx, note, 140));\r\n    ok(true, 'Bend Release');\r\n}\r\n/**\r\n * Add the bend for note 1 before adding the bend for note 0,\r\n * by swapping the two indexes in .addModifier(modifier, index).\r\n * As a result, the bend curves intersect.\r\n */\r\nfunction reverseBends(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    ctx.setFont('10pt Arial');\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\r\n    const notes = [\r\n        note({\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 4, fret: 9 },\r\n            ],\r\n            duration: 'w',\r\n        })\r\n            .addModifier(bendWithText('Full'), 1)\r\n            .addModifier(bendWithText('1/2'), 0),\r\n        note({\r\n            positions: [\r\n                { str: 2, fret: 5 },\r\n                { str: 3, fret: 5 },\r\n            ],\r\n            duration: 'w',\r\n        })\r\n            .addModifier(bendWithText('1/4'), 1)\r\n            .addModifier(bendWithText('1/4'), 0),\r\n        note({\r\n            positions: [{ str: 4, fret: 7 }],\r\n            duration: 'w',\r\n        }),\r\n    ];\r\n    for (let i = 0; i < notes.length; ++i) {\r\n        const note = notes[i];\r\n        const mc = new ModifierContext();\r\n        note.addToModifierContext(mc);\r\n        const tickContext = new TickContext();\r\n        tickContext\r\n            .addTickable(note)\r\n            .preFormat()\r\n            .setX(75 * i);\r\n        note.setStave(stave).setContext(ctx).draw();\r\n        Note.plotMetrics(ctx, note, 140);\r\n        ok(true, 'Bend ' + i);\r\n    }\r\n}\r\nfunction bendPhrase(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    ctx.font = Font.SIZE + 'pt ' + Font.SANS_SERIF; // Optionally use constants defined in Font.\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\r\n    const phrase1 = [\r\n        { type: Bend.UP, text: 'Full' },\r\n        { type: Bend.DOWN, text: 'Monstrous' },\r\n        { type: Bend.UP, text: '1/2' },\r\n        { type: Bend.DOWN, text: '' },\r\n    ];\r\n    const bend1 = bendWithPhrase(phrase1).setContext(ctx);\r\n    const notes = [\r\n        note({\r\n            positions: [{ str: 2, fret: 10 }],\r\n            duration: 'w',\r\n        }).addModifier(bend1, 0),\r\n    ];\r\n    for (let i = 0; i < notes.length; ++i) {\r\n        const note = notes[i];\r\n        note.addToModifierContext(new ModifierContext());\r\n        const tickContext = new TickContext();\r\n        tickContext\r\n            .addTickable(note)\r\n            .preFormat()\r\n            .setX(75 * i);\r\n        note.setStave(stave).setContext(ctx).draw();\r\n        Note.plotMetrics(ctx, note, 140);\r\n        ok(true, 'Bend ' + i);\r\n    }\r\n}\r\nfunction whackoBends(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 240);\r\n    ctx.scale(1.0, 1.0);\r\n    ctx.setBackgroundFillStyle('#FFF');\r\n    ctx.setFont('Arial', VexFlowTests.Font.size);\r\n    const stave = new TabStave(10, 10, 350).addTabGlyph().setContext(ctx).draw();\r\n    const phrase1 = [\r\n        { type: Bend.UP, text: 'Full' },\r\n        { type: Bend.DOWN, text: '' },\r\n        { type: Bend.UP, text: '1/2' },\r\n        { type: Bend.DOWN, text: '' },\r\n    ];\r\n    const phrase2 = [\r\n        { type: Bend.UP, text: 'Full' },\r\n        { type: Bend.UP, text: 'Full' },\r\n        { type: Bend.UP, text: '1/2' },\r\n        { type: Bend.DOWN, text: '' },\r\n        { type: Bend.DOWN, text: 'Full' },\r\n        { type: Bend.DOWN, text: 'Full' },\r\n        { type: Bend.UP, text: '1/2' },\r\n        { type: Bend.DOWN, text: '' },\r\n    ];\r\n    const notes = [\r\n        note({\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 3, fret: 9 },\r\n            ],\r\n            duration: 'q',\r\n        })\r\n            .addModifier(bendWithPhrase(phrase1), 0)\r\n            .addModifier(bendWithPhrase(phrase2), 1),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    Note.plotMetrics(ctx, notes[0], 140);\r\n    ok(true, 'Whacko Bend & Release');\r\n}\r\nVexFlowTests.register(BendTests);\r\nexport { BendTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Bounding Box Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { BoundingBox } from '../src/index';\r\nconst BoundingBoxTests = {\r\n    Start() {\r\n        QUnit.module('BoundingBox');\r\n        test('Initialization Test', initialization);\r\n        test('Merging Text', merging);\r\n    },\r\n};\r\nfunction initialization() {\r\n    const bb = new BoundingBox(4, 5, 6, 7);\r\n    equal(bb.getX(), 4, 'Bad X');\r\n    equal(bb.getY(), 5, 'Bad Y');\r\n    equal(bb.getW(), 6, 'Bad W');\r\n    equal(bb.getH(), 7, 'Bad H');\r\n    bb.setX(5);\r\n    equal(bb.getX(), 5, 'Bad X');\r\n}\r\nfunction merging() {\r\n    const tests = [\r\n        {\r\n            type: 'Intersection',\r\n            bb1: new BoundingBox(10, 10, 10, 10),\r\n            bb2: new BoundingBox(15, 20, 10, 10),\r\n            merged: new BoundingBox(10, 10, 15, 20),\r\n        },\r\n        {\r\n            type: '1 contains 2',\r\n            bb1: new BoundingBox(10, 10, 30, 30),\r\n            bb2: new BoundingBox(15, 15, 10, 10),\r\n            merged: new BoundingBox(10, 10, 30, 30),\r\n        },\r\n        {\r\n            type: '2 contains 1',\r\n            bb1: new BoundingBox(15, 15, 10, 10),\r\n            bb2: new BoundingBox(10, 10, 30, 30),\r\n            merged: new BoundingBox(10, 10, 30, 30),\r\n        },\r\n    ];\r\n    tests.forEach((test) => {\r\n        const type = test.type;\r\n        const bb1 = test.bb1;\r\n        const bb2 = test.bb2;\r\n        const merged = test.merged;\r\n        bb1.mergeWith(bb2);\r\n        equal(bb1.getX(), merged.getX(), type + ' - Bad X');\r\n        equal(bb1.getY(), merged.getY(), type + ' - Bad Y');\r\n        equal(bb1.getW(), merged.getW(), type + ' - Bad W');\r\n        equal(bb1.getH(), merged.getH(), type + ' - Bad H');\r\n    });\r\n}\r\nVexFlowTests.register(BoundingBoxTests);\r\nexport { BoundingBoxTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// BoundingBoxComputation Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { BoundingBoxComputation, Glyph, OutlineCode } from '../src/index';\r\nconst BoundingBoxComputationTests = {\r\n    Start() {\r\n        QUnit.module('BoundingBoxComputation');\r\n        test('Point Test', point);\r\n        const run = VexFlowTests.runTests;\r\n        quadraticParams.forEach((params, index) => {\r\n            run(`Quadratic Test ${index}`, quadratic, params);\r\n        });\r\n        cubicParams.forEach((params, index) => {\r\n            run(`Cubic Test ${index}`, cubic, params);\r\n        });\r\n    },\r\n};\r\nfunction point() {\r\n    const bboxComp = new BoundingBoxComputation();\r\n    bboxComp.addPoint(2, 3);\r\n    equal(bboxComp.getX1(), 2, 'Bad X1');\r\n    equal(bboxComp.getY1(), 3, 'Bad Y1');\r\n    equal(bboxComp.width(), 0, 'Bad width');\r\n    equal(bboxComp.height(), 0, 'Bad height');\r\n    bboxComp.addPoint(-5, 7);\r\n    equal(bboxComp.getX1(), -5, 'Bad X1');\r\n    equal(bboxComp.getY1(), 3, 'Bad Y1');\r\n    equal(bboxComp.width(), 7, 'Bad width');\r\n    equal(bboxComp.height(), 4, 'Bad height');\r\n}\r\n/**\r\n * Size the context to fit all the points and a small margin.\r\n */\r\nfunction createContext(options) {\r\n    const points = options.params.points;\r\n    let w = points[0];\r\n    let h = points[1];\r\n    for (let i = 2; i < points.length; i += 2) {\r\n        w = Math.max(w, points[i]);\r\n        h = Math.max(h, points[i + 1]);\r\n    }\r\n    const f = VexFlowTests.makeFactory(options, w + 20, h + 20);\r\n    const ctx = f.getContext();\r\n    ctx.setLineCap('square');\r\n    return ctx;\r\n}\r\n/**\r\n * Draw a rectangle on the RenderContext.\r\n */\r\nfunction rect(ctx, style, lineWidth, x, y, w, h) {\r\n    ctx.strokeStyle = style;\r\n    ctx.setLineWidth(lineWidth);\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, y);\r\n    ctx.lineTo(x + w, y);\r\n    ctx.lineTo(x + w, y + h);\r\n    ctx.lineTo(x, y + h);\r\n    ctx.lineTo(x, y);\r\n    ctx.stroke();\r\n}\r\n// Each test consists of the control points for a single curve and its expected bounding box.\r\nconst quadraticParams = [\r\n    {\r\n        points: [10, 10, 100, 20, 110, 110],\r\n        box: [10, 10, 100, 100],\r\n    },\r\n    {\r\n        points: [110, 10, 60, 110, 10, 20],\r\n        box: [10, 10, 100, 52.63],\r\n    },\r\n    {\r\n        points: [10, 10, 30, 20, 50, 30],\r\n        box: [10, 10, 40, 20],\r\n    },\r\n    {\r\n        points: [100, 30, 30, 110, 20, 30],\r\n        box: [20, 30, 80, 40],\r\n    },\r\n];\r\n/**\r\n *\r\n */\r\nfunction quadratic(options) {\r\n    const points = options.params.points;\r\n    const box = options.params.box;\r\n    const ctx = createContext(options);\r\n    const [x0, y0, x1, y1, x2, y2] = points;\r\n    // Draw expected bounding box.\r\n    let [bx, by, bw, bh] = box;\r\n    rect(ctx, '#0f0', 5, bx, by, bw, bh);\r\n    // Compute the bounding box.\r\n    const bboxComp = new BoundingBoxComputation();\r\n    bboxComp.addQuadraticCurve(x0, y0, x1, y1, x2, y2);\r\n    // Draw computed bounding box.\r\n    [bx, by, bw, bh] = [bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height()];\r\n    rect(ctx, '#00f', 3, bx, by, bw, bh);\r\n    // Regression test for a prior bug: compute the bounding box again,\r\n    // this time using the Glyph.getOutlineBoundingBox code path.\r\n    const o = [OutlineCode.MOVE, x0, -y0, OutlineCode.QUADRATIC, x2, -y2, x1, -y1];\r\n    const bbox = Glyph.getOutlineBoundingBox(o, 1, 0, 0);\r\n    rect(ctx, '#fa0', 1, bbox.getX(), bbox.getY(), bbox.getW(), bbox.getH());\r\n    // Draw curve.\r\n    ctx.setLineWidth(1);\r\n    ctx.fillStyle = '#000';\r\n    Glyph.renderOutline(ctx, o, 1, 0, 0);\r\n    // Draw control points.\r\n    ctx.strokeStyle = '#f00';\r\n    ctx.beginPath();\r\n    ctx.moveTo(x0, y0);\r\n    ctx.lineTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n    // Check the expected and computed bounding boxes are close enough.\r\n    ok(Math.abs(bboxComp.getX1() - box[0]) < 0.01, `Bad X1: ${bboxComp.getX1()}`);\r\n    ok(Math.abs(bboxComp.getY1() - box[1]) < 0.01, `Bad Y1: ${bboxComp.getY1()}`);\r\n    ok(Math.abs(bboxComp.width() - box[2]) < 0.01, `Bad width: ${bboxComp.width()}`);\r\n    ok(Math.abs(bboxComp.height() - box[3]) < 0.01, `Bad height: ${bboxComp.height()}`);\r\n    ok(Math.abs(bbox.getX() - box[0]) < 0.01, `Bad X: ${bbox.getX()}`);\r\n    ok(Math.abs(bbox.getY() - box[1]) < 0.01, `Bad Y: ${bbox.getY()}`);\r\n    ok(Math.abs(bbox.getW() - box[2]) < 0.01, `Bad W: ${bbox.getW()}`);\r\n    ok(Math.abs(bbox.getH() - box[3]) < 0.01, `Bad H: ${bbox.getH()}`);\r\n}\r\n// Each test consists of the control points for a single curve and its expected bounding box.\r\nconst cubicParams = [\r\n    {\r\n        points: [10, 10, 60, 20, 100, 60, 110, 110],\r\n        box: [10, 10, 100, 100],\r\n    },\r\n    {\r\n        points: [10, 10, 35, 110, 85, 110, 110, 10],\r\n        box: [10, 10, 100, 75],\r\n    },\r\n    {\r\n        points: [10, 110, 90, 10, 30, 10, 110, 110],\r\n        box: [10, 35, 100, 75],\r\n    },\r\n    {\r\n        points: [10, 10, 110, 110, 110, 10, 10, 110],\r\n        box: [10, 10, 75, 100],\r\n    },\r\n    {\r\n        points: [10, 10, 130, 110, -10, 110, 110, 10],\r\n        box: [10, 10, 100, 75],\r\n    },\r\n    {\r\n        points: [50, 10, 10, 110, 110, 110, 74, 10],\r\n        box: [40.38, 10, 41.59, 75],\r\n    },\r\n    {\r\n        points: [10, 30, 35, 60, 110, 110, 60, 10],\r\n        box: [10, 10, 66.82, 59.37],\r\n    },\r\n    {\r\n        points: [210, 70, 10, 10, 190, 10, 120, 90],\r\n        box: [112.02, 27.23, 97.98, 62.77],\r\n    },\r\n    {\r\n        points: [20, 10, 210, 90, 10, 90, 100, 38],\r\n        box: [20, 10, 85.33, 64.06],\r\n    },\r\n    {\r\n        points: [60, 14, 10, 14, 90, 14, 70, 14],\r\n        box: [43.28, 14, 30.01, 0],\r\n    },\r\n    {\r\n        points: [10, 60, 20, 100, 100, 20, 110, 60],\r\n        box: [10, 48.45, 100, 23.1],\r\n    },\r\n];\r\nfunction cubic(options) {\r\n    const points = options.params.points;\r\n    const box = options.params.box;\r\n    const ctx = createContext(options);\r\n    const [x0, y0, x1, y1, x2, y2, x3, y3] = points;\r\n    // Draw expected bounding box.\r\n    let [bx, by, bw, bh] = box;\r\n    rect(ctx, '#0f0', 5, bx, by, bw, bh);\r\n    // Compute the bounding box.\r\n    const bboxComp = new BoundingBoxComputation();\r\n    bboxComp.addBezierCurve(x0, y0, x1, y1, x2, y2, x3, y3);\r\n    // Draw computed bounding box.\r\n    [bx, by, bw, bh] = [bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height()];\r\n    rect(ctx, '#00f', 3, bx, by, bw, bh);\r\n    // Regression test for a prior bug: compute the bounding box again,\r\n    // this time using the Glyph.getOutlineBoundingBox code path.\r\n    const o = [OutlineCode.MOVE, x0, -y0, OutlineCode.BEZIER, x3, -y3, x1, -y1, x2, -y2];\r\n    const bbox = Glyph.getOutlineBoundingBox(o, 1, 0, 0);\r\n    rect(ctx, '#fa0', 1, bbox.getX(), bbox.getY(), bbox.getW(), bbox.getH());\r\n    // Draw curve.\r\n    ctx.setLineWidth(1);\r\n    ctx.fillStyle = '#000';\r\n    Glyph.renderOutline(ctx, o, 1, 0, 0);\r\n    // Draw control points.\r\n    ctx.strokeStyle = '#f00';\r\n    ctx.beginPath();\r\n    ctx.moveTo(x0, y0);\r\n    ctx.lineTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.lineTo(x3, y3);\r\n    ctx.stroke();\r\n    // Check the expected and computed bounding boxes are close enough.\r\n    ok(Math.abs(bboxComp.getX1() - box[0]) < 0.01, `Bad X1: ${bboxComp.getX1()}`);\r\n    ok(Math.abs(bboxComp.getY1() - box[1]) < 0.01, `Bad Y1: ${bboxComp.getY1()}`);\r\n    ok(Math.abs(bboxComp.width() - box[2]) < 0.01, `Bad width: ${bboxComp.width()}`);\r\n    ok(Math.abs(bboxComp.height() - box[3]) < 0.01, `Bad height: ${bboxComp.height()}`);\r\n    ok(Math.abs(bbox.getX() - box[0]) < 0.01, `Bad X: ${bbox.getX()}`);\r\n    ok(Math.abs(bbox.getY() - box[1]) < 0.01, `Bad Y: ${bbox.getY()}`);\r\n    ok(Math.abs(bbox.getW() - box[2]) < 0.01, `Bad W: ${bbox.getW()}`);\r\n    ok(Math.abs(bbox.getH() - box[3]) < 0.01, `Bad H: ${bbox.getH()}`);\r\n}\r\nVexFlowTests.register(BoundingBoxComputationTests);\r\nexport { BoundingBoxComputationTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// ChordSymbol Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Accidental } from '../src/accidental';\r\nimport { ChordSymbol } from '../src/chordsymbol';\r\nimport { Font } from '../src/font';\r\nimport { Formatter } from '../src/formatter';\r\nimport { Ornament } from '../src/ornament';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Tables } from '../src/tables';\r\nconst ChordSymbolTests = {\r\n    Start() {\r\n        QUnit.module('ChordSymbol');\r\n        const run = VexFlowTests.runTests;\r\n        run('Chord Symbol With Modifiers', withModifiers);\r\n        run('Chord Symbol Font Size Tests', fontSize);\r\n        run('Chord Symbol Kerning Tests', kern);\r\n        run('Top Chord Symbols', top);\r\n        run('Top Chord Symbols Justified', topJustify);\r\n        run('Bottom Chord Symbols', bottom);\r\n        run('Bottom Stem Down Chord Symbols', bottomStemDown);\r\n        run('Double Bottom Chord Symbols', doubleBottom);\r\n    },\r\n};\r\n// Options for customizing addGlyphOrText() or addGlyph().\r\nconst superscript = { symbolModifier: ChordSymbol.symbolModifiers.SUPERSCRIPT };\r\nconst subscript = { symbolModifier: ChordSymbol.symbolModifiers.SUBSCRIPT };\r\n// Helper function for creating StaveNotes.\r\nconst note = (factory, keys, duration, chordSymbol) => factory.StaveNote({ keys, duration }).addModifier(chordSymbol, 0);\r\n/** Calculate the glyph's width in the current music font. */\r\n// How is this different from Glyph.getWidth()? The numbers don't match up.\r\nfunction getGlyphWidth(glyphName) {\r\n    // `38` seems to be the `font_scale` specified in many classes, such as\r\n    // Accidental, Articulation, Ornament, Strokes. Does this mean `38pt`???\r\n    //\r\n    // However, tables.ts specifies:\r\n    //   NOTATION_FONT_SCALE: 39,\r\n    //   TABLATURE_FONT_SCALE: 39,\r\n    const musicFont = Tables.currentMusicFont();\r\n    const glyph = musicFont.getGlyphs()[glyphName];\r\n    const widthInEm = (glyph.x_max - glyph.x_min) / musicFont.getResolution();\r\n    return widthInEm * 38 * Font.scaleToPxFrom.pt;\r\n}\r\nfunction withModifiers(options) {\r\n    const f = VexFlowTests.makeFactory(options, 750, 580);\r\n    const ctx = f.getContext();\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    function draw(chords, y) {\r\n        const notes = [\r\n            note(f, ['c/4'], 'q', chords[0]).addModifier(new Ornament('doit')),\r\n            note(f, ['c/4'], 'q', chords[1]),\r\n            note(f, ['c/4'], 'q', chords[2]).addModifier(new Ornament('fall')),\r\n            note(f, ['c/4'], 'q', chords[3]),\r\n        ];\r\n        const score = f.EasyScore();\r\n        const voice = score.voice(notes, { time: '4/4' });\r\n        const formatter = f.Formatter();\r\n        formatter.joinVoices([voice]);\r\n        const voiceW = formatter.preCalculateMinTotalWidth([voice]);\r\n        const staffW = voiceW + Stave.defaultPadding + getGlyphWidth('gClef');\r\n        formatter.format([voice], voiceW);\r\n        const staff = f.Stave({ x: 10, y, width: staffW }).addClef('treble').draw();\r\n        voice.draw(ctx, staff);\r\n    }\r\n    let chords = [];\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 10 })\r\n        .addText('F7')\r\n        .addGlyph('leftParenTall')\r\n        .addGlyphOrText('b9', superscript)\r\n        .addGlyphOrText('#11', subscript)\r\n        .addGlyph('rightParenTall'));\r\n    chords.push(f.ChordSymbol({ fontSize: 12 }).addText('F7').addGlyphOrText('b9', superscript).addGlyphOrText('#11', subscript));\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 14 })\r\n        .addText('F7')\r\n        .addGlyph('leftParenTall')\r\n        .addGlyphOrText('add 3', superscript)\r\n        .addGlyphOrText('omit 9', subscript)\r\n        .addGlyph('rightParenTall'));\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 16 })\r\n        .addText('F7')\r\n        .addGlyph('leftParenTall')\r\n        .addGlyphOrText('b9', superscript)\r\n        .addGlyphOrText('#11', subscript)\r\n        .addGlyph('rightParenTall'));\r\n    draw(chords, 40);\r\n    chords = [];\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 10 })\r\n        .setFontSize(10)\r\n        .addText('F7')\r\n        .addGlyphOrText('#11', superscript)\r\n        .addGlyphOrText('b9', subscript));\r\n    chords.push(f.ChordSymbol({ fontSize: 12 }).addText('F7').addGlyphOrText('#11', superscript).addGlyphOrText('b9', subscript));\r\n    chords.push(f.ChordSymbol({ fontSize: 14 }).addText('F7').addGlyphOrText('#11', superscript).addGlyphOrText('b9', subscript));\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 16 })\r\n        .setFontSize(16)\r\n        .addText('F7')\r\n        .addGlyphOrText('#11', superscript)\r\n        .addGlyphOrText('b9', subscript));\r\n    draw(chords, 140);\r\n    chords = [\r\n        f.ChordSymbol({ fontSize: 10 }).addGlyphOrText('Ab').addGlyphOrText('7(#11b9)', superscript),\r\n        f.ChordSymbol({ fontSize: 14 }).addGlyphOrText('C#').addGlyphOrText('7(#11b9)', superscript),\r\n        f.ChordSymbol({ fontSize: 16 }).addGlyphOrText('Ab').addGlyphOrText('7(#11b9)', superscript),\r\n        f.ChordSymbol({ fontSize: 18 }).addGlyphOrText('C#').addGlyphOrText('7(#11b9)', superscript),\r\n    ];\r\n    draw(chords, 240);\r\n    ok(true, 'Font Size Chord Symbol');\r\n}\r\nfunction fontSize(options) {\r\n    const f = VexFlowTests.makeFactory(options, 750, 580);\r\n    const ctx = f.getContext();\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    function draw(chords, y) {\r\n        const stave = f.Stave({ x: 10, y, width: 450 }).addClef('treble');\r\n        const notes = [\r\n            note(f, ['c/4'], 'q', chords[0]),\r\n            note(f, ['c/4'], 'q', chords[1]),\r\n            note(f, ['c/4'], 'q', chords[2]),\r\n            note(f, ['c/4'], 'q', chords[3]),\r\n        ];\r\n        const score = f.EasyScore();\r\n        const voice = score.voice(notes, { time: '4/4' });\r\n        f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n        f.draw();\r\n    }\r\n    let chords = [];\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 10 })\r\n        .addText('F7')\r\n        .addGlyph('leftParenTall')\r\n        .addGlyphOrText('b9', superscript)\r\n        .addGlyphOrText('#11', subscript)\r\n        .addGlyph('rightParenTall')\r\n        .setReportWidth(false));\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 12 })\r\n        .addText('F7')\r\n        .addGlyphOrText('b9', superscript)\r\n        .addGlyphOrText('#11', subscript)\r\n        .setReportWidth(false));\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 14 })\r\n        .addText('F7')\r\n        .addGlyph('leftParenTall')\r\n        .addGlyphOrText('add 3', superscript)\r\n        .addGlyphOrText('omit 9', subscript)\r\n        .addGlyph('rightParenTall')\r\n        .setReportWidth(false));\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 16 })\r\n        .addText('F7')\r\n        .addGlyph('leftParenTall')\r\n        .addGlyphOrText('b9', superscript)\r\n        .addGlyphOrText('#11', subscript)\r\n        .addGlyph('rightParenTall')\r\n        .setReportWidth(false));\r\n    draw(chords, 40);\r\n    chords = [];\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 10 })\r\n        .setFontSize(10)\r\n        .addText('F7')\r\n        .addGlyphOrText('#11', superscript)\r\n        .addGlyphOrText('b9', subscript));\r\n    chords.push(f.ChordSymbol({ fontSize: 12 }).addText('F7').addGlyphOrText('#11', superscript).addGlyphOrText('b9', subscript));\r\n    chords.push(f.ChordSymbol({ fontSize: 14 }).addText('F7').addGlyphOrText('#11', superscript).addGlyphOrText('b9', subscript));\r\n    chords.push(f\r\n        .ChordSymbol({ fontSize: 16 })\r\n        .setFontSize(16)\r\n        .addText('F7')\r\n        .addGlyphOrText('#11', superscript)\r\n        .addGlyphOrText('b9', subscript));\r\n    draw(chords, 140);\r\n    chords = [\r\n        f.ChordSymbol({ fontSize: 10 }).addGlyphOrText('Ab').addGlyphOrText('7(#11b9)', superscript),\r\n        f.ChordSymbol({ fontSize: 14 }).addGlyphOrText('C#').addGlyphOrText('7(#11b9)', superscript),\r\n        f.ChordSymbol({ fontSize: 16 }).addGlyphOrText('Ab').addGlyphOrText('7(#11b9)', superscript),\r\n        f.ChordSymbol({ fontSize: 18 }).addGlyphOrText('C#').addGlyphOrText('7(#11b9)', superscript),\r\n    ];\r\n    draw(chords, 240);\r\n    ok(true, 'Font Size Chord Symbol');\r\n}\r\nfunction kern(options) {\r\n    const f = VexFlowTests.makeFactory(options, 650 * 1.5, 650);\r\n    const ctx = f.getContext();\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    function draw(chords, y) {\r\n        const stave = f.Stave({ x: 10, y, width: 450 }).addClef('treble').setContext(ctx).draw();\r\n        const notes = [\r\n            note(f, ['C/4'], 'q', chords[0]),\r\n            note(f, ['C/4'], 'q', chords[1]),\r\n            note(f, ['C/4'], 'q', chords[2]),\r\n            note(f, ['C/4'], 'q', chords[3]),\r\n        ];\r\n        const score = f.EasyScore();\r\n        const voice = score.voice(notes, { time: '4/4' });\r\n        f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n        f.draw();\r\n    }\r\n    let chords = [\r\n        f.ChordSymbol().addText('A').addGlyphSuperscript('dim').setReportWidth(false),\r\n        f.ChordSymbol({ kerning: false, reportWidth: false }).addText('A').addGlyphSuperscript('dim'),\r\n        f.ChordSymbol({ hJustify: 'left', reportWidth: false }).addText('C').addGlyph('halfDiminished', superscript),\r\n        f.ChordSymbol({ reportWidth: false }).addText('D').addGlyph('halfDiminished', superscript),\r\n    ];\r\n    draw(chords, 10);\r\n    chords = [\r\n        f.ChordSymbol().addText('A').addGlyphSuperscript('dim'),\r\n        f.ChordSymbol({ kerning: false }).addText('A').addGlyphSuperscript('dim'),\r\n        f.ChordSymbol().addText('A').addGlyphSuperscript('+').addTextSuperscript('5'),\r\n        f.ChordSymbol().addText('G').addGlyphSuperscript('+').addTextSuperscript('5'),\r\n    ];\r\n    draw(chords, 110);\r\n    chords = [\r\n        f.ChordSymbol().addText('A').addGlyph('-'),\r\n        f.ChordSymbol().addText('E').addGlyph('-'),\r\n        f.ChordSymbol().addText('A').addGlyphOrText('(#11)', superscript),\r\n        f.ChordSymbol().addText('E').addGlyphOrText('(#9)', superscript),\r\n    ];\r\n    draw(chords, 210);\r\n    chords = [\r\n        f.ChordSymbol().addGlyphOrText('F/B').addGlyphOrText('b', superscript),\r\n        f.ChordSymbol().addText('E').addGlyphOrText('V/V'),\r\n        f.ChordSymbol().addText('A').addGlyphOrText('(#11)', superscript),\r\n        f.ChordSymbol().addText('E').addGlyphOrText('(#9)', superscript),\r\n    ];\r\n    draw(chords, 310);\r\n    ok(true, 'Chord Symbol Kerning Tests');\r\n}\r\nfunction top(options) {\r\n    const f = VexFlowTests.makeFactory(options, 650 * 1.5, 650);\r\n    const ctx = f.getContext();\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    function draw(c1, c2, y) {\r\n        const stave = f.Stave({ x: 10, y, width: 450 }).addClef('treble').setContext(ctx).draw();\r\n        const notes = [\r\n            note(f, ['e/4', 'a/4', 'd/5'], 'h', c1).addModifier(new Accidental('b'), 0),\r\n            note(f, ['c/4', 'e/4', 'b/4'], 'h', c2),\r\n        ];\r\n        const score = f.EasyScore();\r\n        const voice = score.voice(notes, { time: '4/4' });\r\n        f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n        f.draw();\r\n    }\r\n    let chord1 = f\r\n        .ChordSymbol({ reportWidth: false })\r\n        .addText('F7')\r\n        .setHorizontal('left')\r\n        .addGlyphOrText('(#11b9)', superscript);\r\n    let chord2 = f\r\n        .ChordSymbol({ reportWidth: false })\r\n        .addText('C')\r\n        .setHorizontal('left')\r\n        .addGlyphSuperscript('majorSeventh');\r\n    draw(chord1, chord2, 40);\r\n    chord1 = f\r\n        .ChordSymbol()\r\n        .addText('F7')\r\n        .addTextSuperscript('(')\r\n        .addGlyphOrText('#11b9', superscript)\r\n        .addTextSuperscript(')');\r\n    chord2 = f.ChordSymbol().addText('C').setHorizontal('left').addTextSuperscript('Maj.');\r\n    draw(chord1, chord2, 140);\r\n    chord1 = f\r\n        .ChordSymbol()\r\n        .addText('F7')\r\n        .setHorizontal('left')\r\n        .addGlyphOrText('#11', superscript)\r\n        .addGlyphOrText('b9', subscript);\r\n    chord2 = f.ChordSymbol().addText('C').addTextSuperscript('sus4');\r\n    draw(chord1, chord2, 240);\r\n    ok(true, 'Top Chord Symbol');\r\n}\r\nfunction topJustify(options) {\r\n    const f = VexFlowTests.makeFactory(options, 500 * 1.5, 680);\r\n    const ctx = f.getContext();\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    function draw(chord1, chord2, y) {\r\n        const stave = new Stave(10, y, 450).addClef('treble').setContext(ctx).draw();\r\n        const notes = [\r\n            note(f, ['e/4', 'a/4', 'd/5'], 'h', chord1).addModifier(new Accidental('b'), 0),\r\n            note(f, ['c/4', 'e/4', 'B/4'], 'h', chord2),\r\n        ];\r\n        Formatter.FormatAndDraw(ctx, stave, notes);\r\n    }\r\n    let chord1 = f.ChordSymbol().addText('F7').setHorizontal('left').addGlyphOrText('(#11b9)', superscript);\r\n    let chord2 = f.ChordSymbol({ hJustify: 'left' }).addText('C').addGlyphSuperscript('majorSeventh');\r\n    draw(chord1, chord2, 40);\r\n    chord1 = f\r\n        .ChordSymbol({ hJustify: 'center' })\r\n        .addText('F7')\r\n        .setHorizontal('left')\r\n        .addGlyphOrText('(#11b9)', superscript);\r\n    chord2 = f.ChordSymbol({ hJustify: 'center' }).addText('C').addTextSuperscript('Maj.');\r\n    draw(chord1, chord2, 140);\r\n    chord1 = f\r\n        .ChordSymbol({ hJustify: 'right' })\r\n        .addText('F7')\r\n        .setHorizontal('left')\r\n        .addGlyphOrText('#11', superscript)\r\n        .addGlyphOrText('b9', subscript);\r\n    chord2 = f.ChordSymbol({ hJustify: 'right' }).addText('C').addTextSuperscript('Maj.');\r\n    draw(chord1, chord2, 240);\r\n    chord1 = f\r\n        .ChordSymbol({ hJustify: 'left' })\r\n        .addText('F7')\r\n        .setHorizontal('left')\r\n        .addGlyphOrText('#11', superscript)\r\n        .addGlyphOrText('b9', subscript);\r\n    chord2 = f.ChordSymbol({ hJustify: 'centerStem' }).addText('C').addTextSuperscript('Maj.');\r\n    draw(chord1, chord2, 340);\r\n    ok(true, 'Top Chord Justified');\r\n}\r\nfunction bottom(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600 * 1.5, 230);\r\n    const ctx = f.getContext();\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    function draw(chords, y) {\r\n        const stave = new Stave(10, y, 400).addClef('treble').setContext(ctx).draw();\r\n        const notes = [\r\n            note(f, ['c/4', 'f/4', 'a/4'], 'q', chords[0]),\r\n            note(f, ['c/4', 'e/4', 'b/4'], 'q', chords[1]).addModifier(new Accidental('b'), 2),\r\n            note(f, ['c/4', 'e/4', 'g/4'], 'q', chords[2]),\r\n            note(f, ['c/4', 'f/4', 'a/4'], 'q', chords[3]).addModifier(new Accidental('#'), 1),\r\n        ];\r\n        Formatter.FormatAndDraw(ctx, stave, notes);\r\n    }\r\n    const chords = [\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('I').addTextSuperscript('6').addTextSubscript('4'),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('V'),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addLine(12),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('V/V'),\r\n    ];\r\n    draw(chords, 10);\r\n    ok(true, 'Bottom Chord Symbol');\r\n}\r\nfunction bottomStemDown(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600 * 1.5, 330);\r\n    const ctx = f.getContext();\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    function draw(chords, y) {\r\n        // Helper function to create a StaveNote with a ChordSymbol and the stem pointing down.\r\n        const note = (keys, duration, chordSymbol) => new StaveNote({ keys, duration, stem_direction: -1 }).addModifier(chordSymbol, 0);\r\n        const stave = new Stave(10, y, 400).addClef('treble').setContext(ctx).draw();\r\n        const notes = [\r\n            note(['c/4', 'f/4', 'a/4'], 'q', chords[0]),\r\n            note(['c/4', 'e/4', 'b/4'], 'q', chords[1]).addModifier(new Accidental('b'), 2),\r\n            note(['c/4', 'e/4', 'g/4'], 'q', chords[2]),\r\n            note(['c/4', 'f/4', 'a/4'], 'q', chords[3]).addModifier(new Accidental('#'), 1),\r\n        ];\r\n        Formatter.FormatAndDraw(ctx, stave, notes);\r\n    }\r\n    const chords = [\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('F'),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('C7'),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addLine(12),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('A').addGlyphSuperscript('dim'),\r\n    ];\r\n    draw(chords, 10);\r\n    ok(true, 'Bottom Stem Down Chord Symbol');\r\n}\r\nfunction doubleBottom(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600 * 1.5, 260);\r\n    const ctx = f.getContext();\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    function draw(chords, chords2, y) {\r\n        // Helper function to create a StaveNote with two ChordSymbols attached.\r\n        const note = (keys, duration, chordSymbol1, chordSymbol2) => new StaveNote({ keys, duration }).addModifier(chordSymbol1, 0).addModifier(chordSymbol2, 0);\r\n        const stave = f.Stave({ x: 10, y, width: 450 }).addClef('treble').setContext(ctx).draw();\r\n        const notes = [\r\n            note(['c/4', 'f/4', 'a/4'], 'q', chords[0], chords2[0]),\r\n            note(['c/4', 'e/4', 'b/4'], 'q', chords[1], chords2[1]).addModifier(f.Accidental({ type: 'b' }), 2),\r\n            note(['c/4', 'e/4', 'g/4'], 'q', chords[2], chords2[2]),\r\n            note(['c/4', 'f/4', 'a/4'], 'q', chords[3], chords2[3]).addModifier(f.Accidental({ type: '#' }), 1),\r\n        ];\r\n        Formatter.FormatAndDraw(ctx, stave, notes);\r\n    }\r\n    const chords1 = [\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('I').addTextSuperscript('6').addTextSubscript('4'),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('V'),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addLine(12),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addGlyphOrText('V/V'),\r\n    ];\r\n    const chords2 = [\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('T'),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('D'),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('D'),\r\n        f.ChordSymbol({ vJustify: 'bottom' }).addText('SD'),\r\n    ];\r\n    draw(chords1, chords2, 10);\r\n    ok(true, '2 Bottom Chord Symbol');\r\n}\r\nVexFlowTests.register(ChordSymbolTests);\r\nexport { ChordSymbolTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Clef Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nconst ClefTests = {\r\n    Start() {\r\n        QUnit.module('Clef');\r\n        const run = VexFlowTests.runTests;\r\n        run('Clef Test', draw);\r\n        run('Clef End Test', drawEnd);\r\n        run('Small Clef Test', drawSmall);\r\n        run('Small Clef End Test', drawSmallEnd);\r\n        run('Clef Change Test', drawClefChange);\r\n    },\r\n};\r\nfunction draw(options) {\r\n    const f = VexFlowTests.makeFactory(options, 800, 120);\r\n    f.Stave()\r\n        .addClef('treble')\r\n        .addClef('treble', 'default', '8va')\r\n        .addClef('treble', 'default', '8vb')\r\n        .addClef('alto')\r\n        .addClef('tenor')\r\n        .addClef('soprano')\r\n        .addClef('bass')\r\n        .addClef('bass', 'default', '8vb')\r\n        .addClef('mezzo-soprano')\r\n        .addClef('baritone-c')\r\n        .addClef('baritone-f')\r\n        .addClef('subbass')\r\n        .addClef('percussion')\r\n        .addClef('french')\r\n        .addEndClef('treble');\r\n    f.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawEnd(options) {\r\n    const f = VexFlowTests.makeFactory(options, 800, 120);\r\n    f.Stave()\r\n        .addClef('bass')\r\n        .addEndClef('treble')\r\n        .addEndClef('treble', 'default', '8va')\r\n        .addEndClef('treble', 'default', '8vb')\r\n        .addEndClef('alto')\r\n        .addEndClef('tenor')\r\n        .addEndClef('soprano')\r\n        .addEndClef('bass')\r\n        .addEndClef('bass', 'default', '8vb')\r\n        .addEndClef('mezzo-soprano')\r\n        .addEndClef('baritone-c')\r\n        .addEndClef('baritone-f')\r\n        .addEndClef('subbass')\r\n        .addEndClef('percussion')\r\n        .addEndClef('french');\r\n    f.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawSmall(options) {\r\n    const f = VexFlowTests.makeFactory(options, 800, 120);\r\n    f.Stave()\r\n        .addClef('treble', 'small')\r\n        .addClef('treble', 'small', '8va')\r\n        .addClef('treble', 'small', '8vb')\r\n        .addClef('alto', 'small')\r\n        .addClef('tenor', 'small')\r\n        .addClef('soprano', 'small')\r\n        .addClef('bass', 'small')\r\n        .addClef('bass', 'small', '8vb')\r\n        .addClef('mezzo-soprano', 'small')\r\n        .addClef('baritone-c', 'small')\r\n        .addClef('baritone-f', 'small')\r\n        .addClef('subbass', 'small')\r\n        .addClef('percussion', 'small')\r\n        .addClef('french', 'small')\r\n        .addEndClef('treble', 'small');\r\n    f.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawSmallEnd(options) {\r\n    const f = VexFlowTests.makeFactory(options, 800, 120);\r\n    f.Stave()\r\n        .addClef('bass', 'small')\r\n        .addEndClef('treble', 'small')\r\n        .addEndClef('treble', 'small', '8va')\r\n        .addEndClef('treble', 'small', '8vb')\r\n        .addEndClef('alto', 'small')\r\n        .addEndClef('tenor', 'small')\r\n        .addEndClef('soprano', 'small')\r\n        .addEndClef('bass', 'small')\r\n        .addEndClef('bass', 'small', '8vb')\r\n        .addEndClef('mezzo-soprano', 'small')\r\n        .addEndClef('baritone-c', 'small')\r\n        .addEndClef('baritone-f', 'small')\r\n        .addEndClef('subbass', 'small')\r\n        .addEndClef('percussion', 'small')\r\n        .addEndClef('french', 'small');\r\n    f.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawClefChange(options) {\r\n    const f = VexFlowTests.makeFactory(options, 800, 180);\r\n    const stave = f.Stave().addClef('treble');\r\n    const notes = [\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }),\r\n        f.ClefNote({ type: 'alto', options: { size: 'small' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'alto' }),\r\n        f.ClefNote({ type: 'tenor', options: { size: 'small' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'tenor' }),\r\n        f.ClefNote({ type: 'soprano', options: { size: 'small' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'soprano' }),\r\n        f.ClefNote({ type: 'bass', options: { size: 'small' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'bass' }),\r\n        f.ClefNote({ type: 'mezzo-soprano', options: { size: 'small' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'mezzo-soprano' }),\r\n        f.ClefNote({ type: 'baritone-c', options: { size: 'small' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'baritone-c' }),\r\n        f.ClefNote({ type: 'baritone-f', options: { size: 'small' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'baritone-f' }),\r\n        f.ClefNote({ type: 'subbass', options: { size: 'small' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'subbass' }),\r\n        f.ClefNote({ type: 'french', options: { size: 'small' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'french' }),\r\n        f.ClefNote({ type: 'treble', options: { size: 'small', annotation: '8vb' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble', octave_shift: -1 }),\r\n        f.ClefNote({ type: 'treble', options: { size: 'small', annotation: '8va' } }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble', octave_shift: 1 }),\r\n    ];\r\n    const voice = f.Voice({ time: '12/4' }).addTickables(notes);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(ClefTests);\r\nexport { ClefTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Curve Tests\r\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\r\nimport { CurvePosition } from '../src/curve';\r\nconst CurveTests = {\r\n    Start() {\r\n        QUnit.module('Curve');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple Curve', simple);\r\n        run('Rounded Curve', rounded);\r\n        run('Thick Thin Curves', thickThin);\r\n        run('Top Curve', top);\r\n    },\r\n};\r\n/**\r\n * Helper function. Each test case passes in a set of notes and\r\n * a setupCurves() callback which uses Factory.Curve(...) to build the curves.\r\n * Curves can be used to indicate slurs (legato articulation).\r\n */\r\nfunction createTest(noteGroup1, noteGroup2, setupCurves) {\r\n    return (options) => {\r\n        const factory = VexFlowTests.makeFactory(options, 350, 200);\r\n        const stave = factory.Stave({ y: 50 });\r\n        const score = factory.EasyScore();\r\n        // Use .reduce(concat) to flatten the two StaveNote[] into a single StaveNote[].\r\n        const staveNotes = [\r\n            score.beam(score.notes(...noteGroup1)),\r\n            score.beam(score.notes(...noteGroup2)), // group 2\r\n        ].reduce(concat);\r\n        setupCurves(factory, staveNotes);\r\n        const voices = [score.voice(staveNotes, { time: '4/4' })];\r\n        factory.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n        factory.draw();\r\n        ok('Simple Curve');\r\n    };\r\n}\r\nconst simple = createTest(['c4/8, f5, d5, g5', { stem: 'up' }], // beamGroup1\r\n['d6/8, f5, d5, g5', { stem: 'down' }], // beamGroup2\r\n(f, notes) => {\r\n    f.Curve({\r\n        from: notes[0],\r\n        to: notes[3],\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 10 },\r\n                { x: 0, y: 50 },\r\n            ],\r\n        },\r\n    });\r\n    f.Curve({\r\n        from: notes[4],\r\n        to: notes[7],\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 10 },\r\n                { x: 0, y: 20 },\r\n            ],\r\n        },\r\n    });\r\n});\r\nconst rounded = createTest(['c5/8, f4, d4, g5', { stem: 'up' }], // beamGroup1\r\n['d5/8, d6, d6, g5', { stem: 'down' }], // beamGroup2\r\n(f, notes) => {\r\n    f.Curve({\r\n        from: notes[0],\r\n        to: notes[3],\r\n        options: {\r\n            x_shift: -10,\r\n            y_shift: 30,\r\n            cps: [\r\n                { x: 0, y: 20 },\r\n                { x: 0, y: 50 },\r\n            ],\r\n        },\r\n    });\r\n    f.Curve({\r\n        from: notes[4],\r\n        to: notes[7],\r\n        options: {\r\n            cps: [\r\n                { x: 0, y: 50 },\r\n                { x: 0, y: 50 },\r\n            ],\r\n        },\r\n    });\r\n});\r\nconst thickThin = createTest(['c5/8, f4, d4, g5', { stem: 'up' }], // beamGroup1\r\n['d5/8, d6, d6, g5', { stem: 'down' }], // beamGroup2\r\n(f, notes) => {\r\n    f.Curve({\r\n        from: notes[0],\r\n        to: notes[3],\r\n        options: {\r\n            thickness: 10,\r\n            x_shift: -10,\r\n            y_shift: 30,\r\n            cps: [\r\n                { x: 0, y: 20 },\r\n                { x: 0, y: 50 },\r\n            ],\r\n        },\r\n    });\r\n    f.Curve({\r\n        from: notes[4],\r\n        to: notes[7],\r\n        options: {\r\n            thickness: 0,\r\n            cps: [\r\n                { x: 0, y: 50 },\r\n                { x: 0, y: 50 },\r\n            ],\r\n        },\r\n    });\r\n});\r\nconst top = createTest(['c5/8, f4, d4, g5', { stem: 'up' }], // beamGroup1\r\n['d5/8, d6, d6, g5', { stem: 'down' }], // beamGroup2\r\n(f, notes) => {\r\n    f.Curve({\r\n        from: notes[0],\r\n        to: notes[7],\r\n        options: {\r\n            x_shift: -3,\r\n            y_shift: 10,\r\n            position: CurvePosition.NEAR_TOP,\r\n            position_end: CurvePosition.NEAR_HEAD,\r\n            cps: [\r\n                { x: 0, y: 20 },\r\n                { x: 40, y: 80 },\r\n            ],\r\n        },\r\n    });\r\n});\r\nVexFlowTests.register(CurveTests);\r\nexport { CurveTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Dot Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Beam } from '../src/beam';\r\nimport { Dot } from '../src/dot';\r\nimport { Formatter } from '../src/formatter';\r\nimport { ModifierContext } from '../src/modifiercontext';\r\nimport { Note } from '../src/note';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { TickContext } from '../src/tickcontext';\r\nimport { Voice } from '../src/voice';\r\nconst DotTests = {\r\n    Start() {\r\n        QUnit.module('Dot');\r\n        const run = VexFlowTests.runTests;\r\n        run('Basic', basic);\r\n        run('Multi Voice', multiVoice);\r\n    },\r\n};\r\n/**\r\n * Helper function for the basic test case below.\r\n */\r\nfunction showOneNote(note1, stave, ctx, x) {\r\n    const modifierContext = new ModifierContext();\r\n    note1.setStave(stave).addToModifierContext(modifierContext);\r\n    new TickContext().addTickable(note1).preFormat().setX(x);\r\n    note1.setContext(ctx).draw();\r\n    Note.plotMetrics(ctx, note1, 140);\r\n}\r\nfunction basic(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 1000, 240);\r\n    ctx.setFillStyle('#221');\r\n    ctx.setStrokeStyle('#221');\r\n    const stave = new Stave(10, 10, 975);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const notes = [\r\n        new StaveNote({ keys: ['c/4', 'e/4', 'a/4', 'b/4'], duration: 'w' }),\r\n        new StaveNote({ keys: ['a/4', 'b/4', 'c/5'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['g/4', 'a/4', 'b/4'], duration: '4', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['e/4', 'f/4', 'b/4', 'c/5'], duration: '4' }),\r\n        new StaveNote({\r\n            keys: ['g/4', 'a/4', 'd/5', 'e/5', 'g/5'],\r\n            duration: '4',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({ keys: ['g/4', 'b/4', 'd/5', 'e/5'], duration: '4', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['e/4', 'g/4', 'b/4', 'c/5'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['d/4', 'e/4', 'f/4', 'a/4', 'c/5', 'e/5', 'g/5'], duration: '2' }),\r\n        new StaveNote({\r\n            keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'],\r\n            duration: '16',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({ keys: ['f/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'g/5'], duration: '16', stem_direction: 1 }),\r\n        new StaveNote({\r\n            keys: ['e/4', 'g/4', 'a/4', 'b/4', 'c/5', 'e/5', 'f/5'],\r\n            duration: '16',\r\n            stem_direction: 1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['e/4', 'g/4', 'a/4', 'b/4', 'c/5'],\r\n            duration: '16',\r\n            stem_direction: 1,\r\n        }),\r\n        new StaveNote({ keys: ['e/4', 'a/4', 'b/4', 'c/5'], duration: '16', stem_direction: 1 }),\r\n    ];\r\n    Dot.buildAndAttach(notes, { all: true });\r\n    Dot.buildAndAttach([notes[7], notes[8], notes[9]], { all: true });\r\n    Dot.buildAndAttach([notes[8], notes[9]], { all: true });\r\n    const beam = new Beam(notes.slice(notes.length - 2));\r\n    for (let i = 0; i < notes.length; i++) {\r\n        showOneNote(notes[i], stave, ctx, 30 + i * 65);\r\n        const dots = notes[i].getModifiersByType('Dot');\r\n        ok(dots.length > 0, 'Note ' + i + ' has dots');\r\n        for (let j = 0; j < dots.length; ++j) {\r\n            ok(dots[j].getWidth() > 0, 'Dot ' + j + ' has width set');\r\n        }\r\n    }\r\n    beam.setContext(ctx).draw();\r\n    VexFlowTests.plotLegendForNoteWidth(ctx, 890, 140);\r\n    ok(true, 'Full Dot');\r\n}\r\nfunction multiVoice(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 750, 300);\r\n    ctx.setFillStyle('#221');\r\n    ctx.setStrokeStyle('#221');\r\n    const stave = new Stave(30, 45, 700).setContext(ctx).draw();\r\n    const notes1 = [\r\n        new StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: '2', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['c/4', 'e/4', 'c/5'], duration: '2', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['d/4', 'c/5', 'd/5'], duration: '2', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['d/4', 'c/5', 'd/5'], duration: '8', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['d/4', 'c/5', 'd/5'], duration: '8', stem_direction: -1 }),\r\n    ];\r\n    Dot.buildAndAttach([notes1[0], notes1[2], notes1[3], notes1[4]], { all: true });\r\n    Dot.buildAndAttach([notes1[0], notes1[2], notes1[3], notes1[4]], { all: true });\r\n    Dot.buildAndAttach([notes1[1]], { index: 0 });\r\n    Dot.buildAndAttach([notes1[1]], { index: 0 });\r\n    Dot.buildAndAttach([notes1[1]], { index: 1 });\r\n    Dot.buildAndAttach([notes1[1]], { index: 1 });\r\n    Dot.buildAndAttach([notes1[1]], { index: 2 });\r\n    Dot.buildAndAttach([notes1[1]], { index: 2 });\r\n    Dot.buildAndAttach([notes1[1]], { index: 2 });\r\n    Dot.buildAndAttach([notes1[2], notes1[3], notes1[4]]);\r\n    const notes2 = [\r\n        new StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '2', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['d/5', 'g/5', 'a/5', 'b/5'], duration: '8', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['d/5', 'a/5', 'b/5'], duration: '8', stem_direction: 1 }),\r\n    ];\r\n    Dot.buildAndAttach(notes2, { all: true });\r\n    Dot.buildAndAttach([notes2[1]], { all: true });\r\n    const voice1 = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes1);\r\n    const voice2 = new Voice().setMode(Voice.Mode.SOFT).addTickables(notes2);\r\n    const formatter = new Formatter().joinVoices([voice1, voice2]);\r\n    formatter.format([voice1, voice2], 700);\r\n    voice1.draw(ctx, stave);\r\n    voice2.draw(ctx, stave);\r\n    notes1.forEach((note) => Note.plotMetrics(ctx, note, 190));\r\n    notes2.forEach((note) => Note.plotMetrics(ctx, note, 20));\r\n    VexFlowTests.plotLegendForNoteWidth(ctx, 620, 220);\r\n    ok(true, 'Full Dot');\r\n}\r\nVexFlowTests.register(DotTests);\r\nexport { DotTests };\r\n","// [VexFlow](https://vexflow.com/) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// EasyScore Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Articulation } from '../src/articulation';\r\nimport { EasyScore } from '../src/easyscore';\r\nimport { FretHandFinger } from '../src/frethandfinger';\r\nimport { Modifier } from '../src/modifier';\r\nimport { Parenthesis } from '../src/parenthesis';\r\nimport { StaveConnector } from '../src/staveconnector';\r\nimport { Stem } from '../src/stem';\r\nimport { Tuplet } from '../src/tuplet';\r\nconst EasyScoreTests = {\r\n    Start() {\r\n        QUnit.module('EasyScore');\r\n        test('Basic', basic);\r\n        test('Accidentals', accidentals);\r\n        test('Durations', durations);\r\n        test('Chords', chords);\r\n        test('Dots', dots);\r\n        test('Types', types);\r\n        test('Options', options);\r\n        const run = VexFlowTests.runTests;\r\n        run('Draw Basic', drawBasicTest);\r\n        run('Draw Different KeySignature', drawDiffKeysig);\r\n        run('Draw Basic Muted', drawBasicMutedTest);\r\n        run('Draw Basic Harmonic', drawBasicHarmonicTest);\r\n        run('Draw Basic Slash', drawBasicSlashTest);\r\n        run('Draw Ghostnote Basic', drawGhostBasicTest);\r\n        run('Draw Ghostnote Dotted', drawGhostDottedTest);\r\n        run('Draw Parenthesised', drawParenthesisedTest);\r\n        run('Draw Accidentals', drawAccidentalsTest);\r\n        run('Draw Beams', drawBeamsTest);\r\n        run('Draw Tuplets', drawTupletsTest);\r\n        run('Draw Dots', drawDotsTest);\r\n        run('Draw Options', drawOptionsTest);\r\n        run('Draw Fingerings', drawFingeringsTest);\r\n        run('Keys', keys);\r\n    },\r\n};\r\n/**\r\n * Use Function.prototype.bind() to create shortcut methods.\r\n * This can improve the readability of your EasyScore code.\r\n */\r\nfunction createShortcuts(score) {\r\n    return {\r\n        voice: score.voice.bind(score),\r\n        notes: score.notes.bind(score),\r\n        beam: score.beam.bind(score),\r\n        tuplet: score.tuplet.bind(score),\r\n    };\r\n}\r\n/**\r\n * Test case verifies:\r\n * - all strings in `mustPass` parse correctly\r\n * - all strings in `mustFail` fail to parse (i.e., Result.success is `false`).\r\n */\r\nfunction basic() {\r\n    const score = new EasyScore();\r\n    const mustPass = ['c4', 'c#4', 'c4/r', 'c#5', 'c3/m', 'c3//m', 'c3//h', 'c3/s', 'c3//s', 'c3/g', 'c3//g'];\r\n    const mustFail = ['', '()', '7', '(c#4 e5 g6'];\r\n    mustPass.forEach((line) => equal(score.parse(line).success, true, line));\r\n    mustFail.forEach((line) => equal(score.parse(line).success, false, line));\r\n}\r\nfunction accidentals() {\r\n    const score = new EasyScore();\r\n    const mustPass = [\r\n        'c3',\r\n        'c##3, cb3',\r\n        'Cn3',\r\n        'f3//m',\r\n        '(c##3 cbb3 cn3), cb3',\r\n        'cbbs7',\r\n        'cbb7',\r\n        'cbss7',\r\n        'cbs7',\r\n        'cb7',\r\n        'cdb7',\r\n        'cd7',\r\n        'c##7',\r\n        'c#7',\r\n        'cn7',\r\n        'c++-7',\r\n        'c++7',\r\n        'c+-7',\r\n        'c+7',\r\n        '(cbs3 bbs3 dbs3), ebs3',\r\n        '(cd7 cbb3 cn3), cb3',\r\n        'co7',\r\n        'ck7',\r\n    ];\r\n    const mustFail = [\r\n        'ct3',\r\n        'cdbb7',\r\n        '(cq cbb3 cn3), cb3',\r\n        '(cdd7 cbb3 cn3), cb3',\r\n        'cbbbs7',\r\n        'cbbss7',\r\n        'cbsss7',\r\n        'csbs7',\r\n        'cddb7',\r\n        'cddbb7',\r\n        'cdd7',\r\n        'c##b7',\r\n        'c#bs7',\r\n        'cnb#7',\r\n        'c+#+b-d7',\r\n        'c+--7',\r\n        'c++--7',\r\n        'c+++7',\r\n        'cbk7',\r\n        'cok7',\r\n        'cko7',\r\n        'c#s7',\r\n    ];\r\n    mustPass.forEach((line) => equal(score.parse(line).success, true, line));\r\n    mustFail.forEach((line) => equal(score.parse(line).success, false, line));\r\n}\r\nfunction durations() {\r\n    const score = new EasyScore();\r\n    const mustPass = ['c3/4', 'c##3/w, cb3', 'c##3/w, cb3/q', 'c##3/q, cb3/32', '(c##3 cbb3 cn3), cb3'];\r\n    const mustFail = ['Cn3/]', '/', '(cq cbb3 cn3), cb3', '(cdd7 cbb3 cn3), cb3'];\r\n    mustPass.forEach((line) => equal(score.parse(line).success, true, line));\r\n    mustFail.forEach((line) => equal(score.parse(line).success, false, line));\r\n}\r\nfunction chords() {\r\n    const score = new EasyScore();\r\n    const mustPass = [\r\n        '(c5)',\r\n        '(c3 e0 g9)',\r\n        '(c##4 cbb4 cn4)/w, (c#5 cb2 a3)/32',\r\n        '(d##4 cbb4 cn4)/w/r, (c#5 cb2 a3)',\r\n        '(c##4 cbb4 cn4)/4, (c#5 cb2 a3)',\r\n        '(c##4 cbb4 cn4)/m, (c#5 cb2 a3)',\r\n    ];\r\n    const mustFail = ['(c)'];\r\n    mustPass.forEach((line) => equal(score.parse(line).success, true, line));\r\n    mustFail.forEach((line) => equal(score.parse(line).success, false, line));\r\n}\r\nfunction dots() {\r\n    const score = new EasyScore();\r\n    const mustPass = [\r\n        'c3/4.',\r\n        'c##3/w.., cb3',\r\n        'f##3/s, cb3/q...',\r\n        'c##3/q, cb3/32',\r\n        '(c##3 cbb3 cn3)., cb3',\r\n        '(c5).',\r\n        '(c##4 cbb4 cn4)/w.., (c#5 cb2 a3)/32',\r\n    ];\r\n    const mustFail = ['.', 'c.#', 'c#4./4'];\r\n    mustPass.forEach((line) => equal(score.parse(line).success, true, line));\r\n    mustFail.forEach((line) => equal(score.parse(line).success, false, line));\r\n}\r\nfunction types() {\r\n    const score = new EasyScore();\r\n    const mustPass = ['c3/4/m.', 'c##3//r.., cb3', 'c##3/m.., cb3', 'c##3/r.., cb3', 'd##3/w/s, cb3/q...', 'Fb4'];\r\n    const mustFail = ['c4/q/U', '(c##4, cbb4 cn4)/w.., (c#5 cb2 a3)/32', 'z#3'];\r\n    mustPass.forEach((line) => equal(score.parse(line).success, true, line));\r\n    mustFail.forEach((line) => equal(score.parse(line).success, false, line));\r\n}\r\nfunction options() {\r\n    const score = new EasyScore();\r\n    const mustPass = [\r\n        'c3/4.[foo=\"bar\"]',\r\n        'c##3/w.., cb3[id=\"blah\"]',\r\n        'c##3/q, cb3/32',\r\n        '(c##3 cbb3 cn3).[blah=\"bod4o\"], cb3',\r\n        '(c5)[fooooo=\"booo\"]',\r\n        'c#5[id=\"foobar\"]',\r\n    ];\r\n    const mustFail = ['.[', 'f##3/w[], cb3/q...'];\r\n    mustPass.forEach((line) => equal(score.parse(line).success, true, line));\r\n    mustFail.forEach((line) => equal(score.parse(line).success, false, line));\r\n}\r\nfunction drawBasicTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 350);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes } = createShortcuts(score);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            voice(notes('(d4 e4 g4)/q, c4/q, c4/q/r, c4/q', { stem: 'down' })),\r\n            voice(notes('c#5/h., c5/q', { stem: 'up' })),\r\n        ],\r\n    })\r\n        .addClef('treble');\r\n    system\r\n        .addStave({\r\n        voices: [voice(notes('c#3/q, cn3/q, bb3/q, d##3/q', { clef: 'bass' }))],\r\n    })\r\n        .addClef('bass');\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawDiffKeysig(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 350);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes } = createShortcuts(score);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            voice(notes('(d4 e4 g4)/q, c4/q, c4/q/r, c4/q', { stem: 'down' })),\r\n            voice(notes('c5/h., c5/q', { stem: 'up' })),\r\n        ],\r\n    })\r\n        .addClef('treble')\r\n        .addTimeSignature('4/4')\r\n        .addKeySignature('D');\r\n    system\r\n        .addStave({\r\n        voices: [voice(notes('c#3/q, cn3/q, bb3/q, d##3/q', { clef: 'bass' }))],\r\n    })\r\n        .addClef('bass')\r\n        .addTimeSignature('4/4');\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawBasicMutedTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 350);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes } = createShortcuts(score);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            voice(notes('(d4 e4 g4)/q/m, c4/q/m, c4/q/r, c4/q/m', { stem: 'down' })),\r\n            voice(notes('c#5/h/m., c5/q/m', { stem: 'up' })),\r\n        ],\r\n    })\r\n        .addClef('treble');\r\n    system\r\n        .addStave({\r\n        voices: [voice(notes('c#3/q/m, cn3/q/m, bb3/q/m, d##3/q/m', { clef: 'bass' }))],\r\n    })\r\n        .addClef('bass');\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawBasicHarmonicTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 350);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes } = createShortcuts(score);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            voice(notes('(d4 e4 g4)/q/h, c4/q/h, c4/q/r, c4/q/h', { stem: 'down' })),\r\n            voice(notes('c#5/h/h., c5/q/h', { stem: 'up' })),\r\n        ],\r\n    })\r\n        .addClef('treble');\r\n    system\r\n        .addStave({\r\n        voices: [voice(notes('c#3/q/h, cn3/q/h, bb3/q/h, d##3/q/h', { clef: 'bass' }))],\r\n    })\r\n        .addClef('bass');\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawBasicSlashTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 350);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes } = createShortcuts(score);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            voice(notes('(d4 e4 g4)/q/s, c4/q/s, c4/q/r, c4/q/s', { stem: 'down' })),\r\n            voice(notes('c#5/h/s., c5/q/s', { stem: 'up' })),\r\n        ],\r\n    })\r\n        .addClef('treble');\r\n    system\r\n        .addStave({\r\n        voices: [voice(notes('c#3/q/s, cn3/q/s, bb3/q/s, d##3/q/s', { clef: 'bass' }))],\r\n    })\r\n        .addClef('bass');\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawGhostBasicTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 550);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    system.addStave({\r\n        voices: [\r\n            score.voice([\r\n                ...score.notes('f#5/4, f5, db5, c5', { stem: 'up' }),\r\n                ...score.beam(score.notes('c5/8, d5, fn5, e5', { stem: 'up' })),\r\n                ...score.beam(score.notes('d5, c5', { stem: 'up' })),\r\n            ], { time: '7/4' }),\r\n            score.voice(score.notes('c4/h/g, f4/4, c4/4/g, e4/4, c4/8/g, d##4/8, c4/8, c4/8', { stem: 'down' }), {\r\n                time: '7/4',\r\n            }),\r\n        ],\r\n    });\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawGhostDottedTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 550);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    system.addStave({\r\n        voices: [\r\n            score.voice([\r\n                ...score.notes('c4/4/g., fbb5/8, d5/4', { stem: 'up' }),\r\n                ...score.beam(score.notes('c5/8, c#5/16, d5/16', { stem: 'up' })),\r\n                ...score.notes('c4/2/g.., fn5/8', { stem: 'up' }),\r\n            ], { time: '8/4' }),\r\n            score.voice([\r\n                ...score.notes('f#4/4', { stem: 'down' }),\r\n                ...score.beam(score.notes('e4/8, d4/8', { stem: 'down' })),\r\n                ...score.notes('c4/4/g.., cb4/16, c#4/h, d4/4', { stem: 'down' }),\r\n                ...score.beam(score.notes('fn4/8, e4/8', { stem: 'down' })),\r\n            ], { time: '8/4' }),\r\n        ],\r\n    });\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawParenthesisedTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 350);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes } = createShortcuts(score);\r\n    const notes1 = notes('(d4 e4 g4)/q, c4/q, c4/q/r, c4/q', { stem: 'down' });\r\n    Parenthesis.buildAndAttach([notes1[0], notes1[3]]);\r\n    const notes2 = notes('c#5/h., c5/q', { stem: 'down' });\r\n    Parenthesis.buildAndAttach([notes2[0], notes2[1]]);\r\n    system\r\n        .addStave({\r\n        voices: [voice(notes1), voice(notes2)],\r\n    })\r\n        .addClef('treble');\r\n    const notes3 = notes('c#3/q, cn3/q, bb3/q, d##3/q', { stem: 'down' });\r\n    Parenthesis.buildAndAttach(notes3);\r\n    system\r\n        .addStave({\r\n        voices: [voice(notes3)],\r\n    })\r\n        .addClef('bass');\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawAccidentalsTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 350);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes } = createShortcuts(score);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            voice(notes('(cbbs4 ebb4 gbss4)/q, cbs4/q, cdb4/q/r, cd4/q', { stem: 'down' })),\r\n            voice(notes('c++-5/h., c++5/q', { stem: 'up' })),\r\n        ],\r\n    })\r\n        .addClef('treble');\r\n    system\r\n        .addStave({\r\n        voices: [voice(notes('c+-3/q, c+3/q, bb3/q, d##3/q', { clef: 'bass' }))],\r\n    })\r\n        .addClef('bass');\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawBeamsTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 250);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes, beam } = createShortcuts(score);\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            voice(notes('(c4 e4 g4)/q, c4/q, c4/q/r, c4/q', { stem: 'down' })),\r\n            voice([...notes('c#5/h.', { stem: 'up' }), ...beam(notes('c5/8, c5/8', { stem: 'up' }))]),\r\n        ],\r\n    })\r\n        .addClef('treble');\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawTupletsTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 250);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes, tuplet, beam } = createShortcuts(score);\r\n    // Voice 1, with stems pointed down.\r\n    const v1_tuplet = tuplet(notes('(c4 e4 g4)/q, cbb4/q, c4/q', { stem: 'down' }), {\r\n        location: Tuplet.LOCATION_BOTTOM,\r\n    });\r\n    const v1_halfNote = notes('c4/h', { stem: 'down' });\r\n    const v1 = voice([...v1_tuplet, ...v1_halfNote]);\r\n    // Voice 2, with stems pointed up.\r\n    const v2_halfNote = notes('c#5/h.', { stem: 'up' });\r\n    const v2_tuplet = tuplet(beam(notes('cb5/8, cn5/8, c5/8', { stem: 'up' })));\r\n    const v2 = voice([...v2_halfNote, ...v2_tuplet]);\r\n    system.addStave({ voices: [v1, v2] }).addClef('treble');\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawDotsTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 250);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const { voice, notes } = createShortcuts(score);\r\n    system\r\n        .addStave({\r\n        voices: [voice(notes('(c4 e4 g4)/8., (c4 e4 g4)/8.., (c4 e4 g4)/8..., (c4 e4 g4)/8...., (c4 e4 g4)/16...'))],\r\n    })\r\n        .addClef('treble');\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawOptionsTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 500, 200);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const notes = score.notes('B4/h[id=\"foobar\", class=\"red,bold\", stem=\"up\", articulations=\"staccato.below,tenuto\"], B4/q[articulations=\"accent.above\"], B4/q[stem=\"down\"]');\r\n    system.addStave({ voices: [score.voice(notes)] });\r\n    f.draw();\r\n    const note0 = notes[0];\r\n    const note1 = notes[1];\r\n    const note0_modifier0 = note0.getModifiers()[0];\r\n    const note0_modifier1 = note0.getModifiers()[1];\r\n    const note1_modifier0 = note1.getModifiers()[0];\r\n    equal(note0.getAttribute('id'), 'foobar');\r\n    ok(note0.hasClass('red'));\r\n    ok(note0.hasClass('bold'));\r\n    equal(note0_modifier0.getCategory(), Articulation.CATEGORY);\r\n    equal(note0_modifier0.type, 'a.');\r\n    equal(note0_modifier0.getPosition(), Modifier.Position.BELOW);\r\n    equal(note0_modifier1.getCategory(), Articulation.CATEGORY);\r\n    equal(note0_modifier1.type, 'a-');\r\n    equal(note0_modifier1.getPosition(), Modifier.Position.ABOVE);\r\n    equal(note0.getStemDirection(), Stem.UP);\r\n    equal(note1_modifier0.getCategory(), Articulation.CATEGORY);\r\n    equal(note1_modifier0.type, 'a>');\r\n    equal(note1_modifier0.getPosition(), Modifier.Position.ABOVE);\r\n    equal(notes[2].getStemDirection(), Stem.DOWN);\r\n}\r\nfunction drawFingeringsTest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 500, 200);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const notes = score.notes('C4/q[fingerings=\"1\"], E4[fingerings=\"3.above\"], G4[fingerings=\"5.below\"], (C4 E4 G4)[fingerings=\"1,3,5\"]');\r\n    system.addStave({ voices: [score.voice(notes)] });\r\n    f.draw();\r\n    const note0_modifier0 = notes[0].getModifiers()[0];\r\n    equal(note0_modifier0.getCategory(), FretHandFinger.CATEGORY);\r\n    equal(note0_modifier0.getFretHandFinger(), '1');\r\n    equal(note0_modifier0.getPosition(), Modifier.Position.LEFT);\r\n    const note1_modifier0 = notes[1].getModifiers()[0];\r\n    equal(note1_modifier0.getCategory(), FretHandFinger.CATEGORY);\r\n    equal(note1_modifier0.getFretHandFinger(), '3');\r\n    equal(note1_modifier0.getPosition(), Modifier.Position.ABOVE);\r\n    const note2_modifier0 = notes[2].getModifiers()[0];\r\n    equal(note2_modifier0.getCategory(), FretHandFinger.CATEGORY);\r\n    equal(note2_modifier0.getFretHandFinger(), '5');\r\n    equal(note2_modifier0.getPosition(), Modifier.Position.BELOW);\r\n    const note3_modifiers = notes[3].getModifiers();\r\n    const note3_modifier0 = note3_modifiers[0];\r\n    const note3_modifier1 = note3_modifiers[1];\r\n    const note3_modifier2 = note3_modifiers[2];\r\n    equal(note3_modifier0.getCategory(), FretHandFinger.CATEGORY);\r\n    equal(note3_modifier0.getFretHandFinger(), '1');\r\n    equal(note3_modifier0.getPosition(), Modifier.Position.LEFT);\r\n    equal(note3_modifier1.getCategory(), FretHandFinger.CATEGORY);\r\n    equal(note3_modifier1.getFretHandFinger(), '3');\r\n    equal(note3_modifier1.getPosition(), Modifier.Position.LEFT);\r\n    equal(note3_modifier2.getCategory(), FretHandFinger.CATEGORY);\r\n    equal(note3_modifier2.getFretHandFinger(), '5');\r\n    equal(note3_modifier2.getPosition(), Modifier.Position.LEFT);\r\n}\r\nfunction keys(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 200);\r\n    const score = f.EasyScore();\r\n    const system = f.System();\r\n    const notes = score.notes('c#3/q, c##3, cb3, cbb3, cn3, c3, cbbs3, cbss3, cbs3, cdb3, cd3, c++-3, c++3, c+-3, c+3, co3, ck3', { clef: 'bass' });\r\n    system.addStave({ voices: [f.Voice().setStrict(false).addTickables(notes)] }).addClef('bass');\r\n    f.draw();\r\n    equal(notes[0].keys, 'c#/3');\r\n    equal(notes[1].keys, 'c##/3');\r\n    equal(notes[2].keys, 'cb/3');\r\n    equal(notes[3].keys, 'cbb/3');\r\n    equal(notes[4].keys, 'cn/3');\r\n    for (let i = 5; i < notes.length; i++) {\r\n        equal(notes[i].keys, 'c/3');\r\n    }\r\n}\r\nVexFlowTests.register(EasyScoreTests);\r\nexport { EasyScoreTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Factory Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Factory } from '../src/factory';\r\nimport { Barline } from '../src/stavebarline';\r\nconst FactoryTests = {\r\n    Start() {\r\n        QUnit.module('Factory');\r\n        test('Defaults', defaults);\r\n        const run = VexFlowTests.runTests;\r\n        run('Draw', draw);\r\n        run('Draw Tab (repeat barlines must be aligned)', drawTab);\r\n    },\r\n};\r\nfunction defaults() {\r\n    // Throws RuntimeError: 'HTML DOM element not set in Factory'\r\n    throws(() => new Factory({ renderer: { elementId: '', width: 700, height: 500 } }), 'Empty string for elementId throws an exception.');\r\n    const factory = new Factory({\r\n        renderer: { elementId: null, width: 700, height: 500 },\r\n    });\r\n    // eslint-disable-next-line\r\n    // @ts-ignore access a protected member for testing purposes.\r\n    const options = factory.options;\r\n    equal(options.renderer.width, 700);\r\n    equal(options.renderer.height, 500);\r\n    equal(options.renderer.elementId, null);\r\n    equal(options.stave.space, 10);\r\n}\r\nfunction draw(options) {\r\n    const f = Factory.newFromElementId(options.elementId);\r\n    f.Stave().setClef('treble');\r\n    f.draw();\r\n    expect(0);\r\n}\r\nfunction drawTab(options) {\r\n    const factory = VexFlowTests.makeFactory(options, 500, 400);\r\n    const system = factory.System({ width: 500 });\r\n    const stave = factory.Stave().setClef('treble').setKeySignature('C#').setBegBarType(Barline.type.REPEAT_BEGIN);\r\n    const voices = [factory.Voice().addTickables([factory.GhostNote({ duration: 'w' })])];\r\n    system.addStave({ stave, voices });\r\n    const tabStave = factory.TabStave().setClef('tab').setBegBarType(Barline.type.REPEAT_BEGIN);\r\n    const tabVoices = [factory.Voice().addTickables([factory.GhostNote({ duration: 'w' })])];\r\n    system.addStave({ stave: tabStave, voices: tabVoices });\r\n    factory.draw();\r\n    equal(stave.getModifiers()[0].getX(), tabStave.getModifiers()[0].getX());\r\n    expect(1);\r\n}\r\nVexFlowTests.register(FactoryTests);\r\nexport { FactoryTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Font Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Accidental } from '../src/accidental';\r\nimport { Bend } from '../src/bend';\r\nimport { CanvasContext } from '../src/canvascontext';\r\nimport { Element } from '../src/element';\r\nimport { Flow } from '../src/flow';\r\nimport { Font, FontStyle, FontWeight } from '../src/font';\r\nimport { PedalMarking } from '../src/pedalmarking';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { TextBracket } from '../src/textbracket';\r\nimport { TextNote } from '../src/textnote';\r\nimport { Voice } from '../src/voice';\r\nconst FontTests = {\r\n    Start() {\r\n        QUnit.module('Font');\r\n        test('setFont', setFont);\r\n        test('Parsing', fontParsing);\r\n        test('Sizes', fontSizes);\r\n        const run = VexFlowTests.runTests;\r\n        run('Set Text Font to Georgia', setTextFontToGeorgia);\r\n        run('Set Music Font to Petaluma', setMusicFontToPetaluma);\r\n    },\r\n};\r\n/**\r\n * Test out the setFont method in various classes.\r\n */\r\nfunction setFont() {\r\n    // Create a CanvasCntext and call setFont on it.\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 800;\r\n    canvas.height = 400;\r\n    // Set the font and get the font to verify that it matches.\r\n    // NOTE: Safari has a bug where it does not return the font-weight!\r\n    // https://github.com/0xfe/vexflow/issues/1240#issuecomment-986504088\r\n    const ctx = new CanvasContext(canvas.getContext('2d'));\r\n    ctx.setFont('PetalumaScript', '100px', 'normal', 'italic');\r\n    equal(ctx.font, 'italic 100px PetalumaScript');\r\n    const voice = new Voice();\r\n    // Many elements do not override the default Element.TEXT_FONT.\r\n    propEqual(voice.fontInfo, Element.TEXT_FONT);\r\n    voice.setFont('bold 32pt Arial');\r\n    const fontInfo = voice.fontInfo;\r\n    equal(fontInfo === null || fontInfo === void 0 ? void 0 : fontInfo.size, '32pt');\r\n    const flat = new Accidental('b');\r\n    // eslint-disable-next-line\r\n    // @ts-ignore access a protected member for testing purposes.\r\n    equal(flat.textFont, undefined); // The internal instance variable .textFont is undefined by default.\r\n    // Add italic to the default font as defined in Element.TEXT_FONT (since Accidental does not override TEXT_FONT).\r\n    flat.setFont(undefined, undefined, undefined, FontStyle.ITALIC);\r\n    equal(flat.getFont(), 'italic 10pt Arial, sans-serif');\r\n    // Anything that is not set will be reset to the defaults.\r\n    flat.setFont(undefined, undefined, FontWeight.BOLD, undefined);\r\n    equal(flat.getFont(), 'bold 10pt Arial, sans-serif');\r\n    flat.setFont(undefined, undefined, FontWeight.BOLD, FontStyle.ITALIC);\r\n    equal(flat.getFont(), 'italic bold 10pt Arial, sans-serif');\r\n    flat.setFont(undefined, undefined, FontWeight.BOLD, 'oblique');\r\n    equal(flat.getFont(), 'oblique bold 10pt Arial, sans-serif');\r\n    // '' is equivalent to 'normal'. Neither will be included in the CSS font string.\r\n    flat.setFont(undefined, undefined, 'normal', '');\r\n    equal(flat.getFont(), '10pt Arial, sans-serif');\r\n}\r\nfunction fontParsing() {\r\n    const b = new Bend('1/2', true);\r\n    const bFont = b.fontInfo;\r\n    // Check the default font.\r\n    equal(bFont === null || bFont === void 0 ? void 0 : bFont.family, Font.SANS_SERIF);\r\n    equal(bFont === null || bFont === void 0 ? void 0 : bFont.size, Font.SIZE);\r\n    equal(bFont === null || bFont === void 0 ? void 0 : bFont.weight, FontWeight.NORMAL);\r\n    equal(bFont === null || bFont === void 0 ? void 0 : bFont.style, FontStyle.NORMAL);\r\n    const f1 = 'Roboto Slab, serif';\r\n    const t = new TextNote({ duration: '4', font: { family: f1 } });\r\n    equal(f1, t.fontInfo.family);\r\n    const n1 = new StaveNote({ keys: ['e/5'], duration: '4' });\r\n    const n2 = new StaveNote({ keys: ['c/5'], duration: '4' });\r\n    const tb = new TextBracket({ start: n1, stop: n2 });\r\n    const f2 = tb.fontInfo;\r\n    equal(f2 === null || f2 === void 0 ? void 0 : f2.size, 15);\r\n    equal(f2 === null || f2 === void 0 ? void 0 : f2.style, FontStyle.ITALIC);\r\n    // The line-height /3 is currently ignored.\r\n    const f3 = Font.fromCSSString(`bold 1.5em/3 \"Lucida Sans Typewriter\", \"Lucida Console\", Consolas, monospace`);\r\n    const f3SizeInPx = Font.convertSizeToPixelValue(f3.size);\r\n    equal(f3SizeInPx, 24);\r\n}\r\nfunction fontSizes() {\r\n    {\r\n        const size = '17px';\r\n        const sizeInEm = Font.convertSizeToPixelValue(size) / Font.scaleToPxFrom.em;\r\n        equal(sizeInEm, 1.0625);\r\n    }\r\n    {\r\n        const size = '2em';\r\n        const sizeInPx = Font.convertSizeToPixelValue(size);\r\n        equal(sizeInPx, 32);\r\n    }\r\n    {\r\n        const pedal = new PedalMarking([]);\r\n        equal(pedal.getFont(), 'italic bold 12pt Times New Roman, serif');\r\n        equal(pedal.fontSizeInPoints, 12);\r\n        equal(pedal.fontSizeInPixels, 16);\r\n        const doubledSizePx = pedal.fontSizeInPixels * 2; // Double the font size.\r\n        equal(doubledSizePx, 32);\r\n        const doubledSizePt = Font.scaleSize(pedal.fontSizeInPoints, 2); // Double the font size.\r\n        equal(doubledSizePt, 24);\r\n        equal(Font.scaleSize('1.5em', 3), '4.5em');\r\n    }\r\n}\r\nfunction setTextFontToGeorgia(options) {\r\n    const factory = VexFlowTests.makeFactory(options, 400, 200);\r\n    const stave = factory.Stave({ y: 40 });\r\n    const score = factory.EasyScore();\r\n    const voice1 = score.voice([\r\n        factory.StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stem_direction: -1, duration: 'h' }),\r\n        factory.StaveNote({ keys: ['d/4', 'f/4'], stem_direction: -1, duration: 'q' }),\r\n        factory.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: 'q' }),\r\n    ]);\r\n    const defaultFont = TextNote.TEXT_FONT;\r\n    // Set the default before we instantiate TextNote objects with the factory.\r\n    TextNote.TEXT_FONT = {\r\n        family: 'Georgia, Courier New, serif',\r\n        size: 14,\r\n        weight: 'bold',\r\n        style: 'italic',\r\n    };\r\n    const voice2 = score.voice([\r\n        factory\r\n            .TextNote({ text: 'Here are some fun lyrics...', duration: 'w' })\r\n            .setJustification(TextNote.Justification.LEFT),\r\n    ]);\r\n    const formatter = factory.Formatter();\r\n    formatter.joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\r\n    factory.draw();\r\n    // Restore the previous default, or else it will affect the rest of the tests.\r\n    TextNote.TEXT_FONT = defaultFont;\r\n    ok(true);\r\n}\r\nfunction setMusicFontToPetaluma(options) {\r\n    Flow.setMusicFont('Petaluma');\r\n    const factory = VexFlowTests.makeFactory(options, 400, 200);\r\n    const stave = factory.Stave({ y: 40 });\r\n    const score = factory.EasyScore();\r\n    const voice = score.voice([\r\n        factory.StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stem_direction: -1, duration: 'h' }),\r\n        factory.StaveNote({ keys: ['d/4', 'f/4'], stem_direction: -1, duration: 'q' }),\r\n        factory.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: 'q' }),\r\n    ]);\r\n    const formatter = factory.Formatter();\r\n    formatter.joinVoices([voice]).formatToStave([voice], stave);\r\n    factory.draw();\r\n    ok(true);\r\n}\r\nVexFlowTests.register(FontTests);\r\nexport { FontTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Formatter Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Accidental } from '../src/accidental';\r\nimport { Annotation, AnnotationVerticalJustify } from '../src/annotation';\r\nimport { Articulation } from '../src/articulation';\r\nimport { Beam } from '../src/beam';\r\nimport { Bend } from '../src/bend';\r\nimport { Dot } from '../src/dot';\r\nimport { Flow } from '../src/flow';\r\nimport { Font, FontWeight } from '../src/font';\r\nimport { Formatter } from '../src/formatter';\r\nimport { FretHandFinger } from '../src/frethandfinger';\r\nimport { ModifierPosition } from '../src/modifier';\r\nimport { Note } from '../src/note';\r\nimport { Registry } from '../src/registry';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveConnector } from '../src/staveconnector';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Stem } from '../src/stem';\r\nimport { StringNumber } from '../src/stringnumber';\r\nimport { Tables } from '../src/tables';\r\nimport { Tuplet } from '../src/tuplet';\r\nimport { Voice } from '../src/voice';\r\nimport { MockTickable } from './mocks';\r\nconst FormatterTests = {\r\n    Start() {\r\n        QUnit.module('Formatter');\r\n        test('TickContext Building', buildTickContexts);\r\n        const run = VexFlowTests.runTests;\r\n        run('Penultimate Note Padding', penultimateNote);\r\n        run('Whitespace and justify', rightJustify);\r\n        run('Notehead padding', noteHeadPadding);\r\n        run('Justification and alignment with accidentals', accidentalJustification);\r\n        run('Long measure taking full space', longMeasureProblems);\r\n        run('Vertical alignment - few unaligned beats', unalignedNoteDurations1);\r\n        run('Vertical alignment - many unaligned beats', unalignedNoteDurations2, { globalSoftmax: false });\r\n        run('Vertical alignment - many unaligned beats (global softmax)', unalignedNoteDurations2, { globalSoftmax: true });\r\n        run('Vertical alignment - many mixed elements', alignedMixedElements, { globalSoftmax: true });\r\n        run('StaveNote - Justification', justifyStaveNotes);\r\n        run('Notes with Tab', notesWithTab);\r\n        run('Multiple Staves - Justified', multiStaves, { debug: true });\r\n        run('Softmax', softMax);\r\n        run('Mixtime', mixTime);\r\n        run('Tight', tightNotes1);\r\n        run('Tight 2', tightNotes2);\r\n        run('Annotations', annotations);\r\n        run('Proportional Formatting - No Tuning', proportional, { debug: true, iterations: 0 });\r\n        run('Proportional Formatting - No Justification', proportional, { justify: false, debug: true, iterations: 0 });\r\n        run('Proportional Formatting (20 iterations)', proportional, { debug: true, iterations: 20, alpha: 0.5 });\r\n    },\r\n};\r\n/** Calculate the glyph's width in the current music font. */\r\n// How is this different from Glyph.getWidth()? The numbers don't match up.\r\nfunction getGlyphWidth(glyphName) {\r\n    // `38` seems to be the `font_scale` specified in many classes, such as\r\n    // Accidental, Articulation, Ornament, Strokes. Does this mean `38pt`???\r\n    //\r\n    // However, tables.ts specifies:\r\n    //   NOTATION_FONT_SCALE: 39,\r\n    //   TABLATURE_FONT_SCALE: 39,\r\n    const musicFont = Tables.currentMusicFont();\r\n    const glyph = musicFont.getGlyphs()[glyphName];\r\n    const widthInEm = (glyph.x_max - glyph.x_min) / musicFont.getResolution();\r\n    return widthInEm * 38 * Font.scaleToPxFrom.pt;\r\n}\r\nfunction buildTickContexts() {\r\n    function createTickable(beat) {\r\n        return new MockTickable().setTicks(beat);\r\n    }\r\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\r\n    const tickables1 = [\r\n        createTickable(BEAT).setWidth(10),\r\n        createTickable(BEAT * 2).setWidth(20),\r\n        createTickable(BEAT).setWidth(30),\r\n    ];\r\n    const tickables2 = [\r\n        createTickable(BEAT * 2).setWidth(10),\r\n        createTickable(BEAT).setWidth(20),\r\n        createTickable(BEAT).setWidth(30),\r\n    ];\r\n    const voice1 = new Voice(Flow.TIME4_4);\r\n    const voice2 = new Voice(Flow.TIME4_4);\r\n    voice1.addTickables(tickables1);\r\n    voice2.addTickables(tickables2);\r\n    const formatter = new Formatter();\r\n    const tContexts = formatter.createTickContexts([voice1, voice2]);\r\n    equal(tContexts.list.length, 4, 'Voices should have four tick contexts');\r\n    throws(() => formatter.getMinTotalWidth(), /NoMinTotalWidth/, 'Expected to throw exception');\r\n    ok(formatter.preCalculateMinTotalWidth([voice1, voice2]), 'Successfully runs preCalculateMinTotalWidth');\r\n    equal(formatter.getMinTotalWidth(), 88, 'Get minimum total width without passing voices');\r\n    formatter.preFormat();\r\n    equal(formatter.getMinTotalWidth(), 88, 'Minimum total width');\r\n    equal(tickables1[0].getX(), tickables2[0].getX(), 'First notes of both voices have the same X');\r\n    equal(tickables1[2].getX(), tickables2[2].getX(), 'Last notes of both voices have the same X');\r\n    ok(tickables1[1].getX() < tickables2[1].getX(), 'Second note of voice 2 is to the right of the second note of voice 1');\r\n}\r\nfunction rightJustify(options) {\r\n    const f = VexFlowTests.makeFactory(options, 1200, 150);\r\n    const getTickables = (time, n, duration, duration2) => {\r\n        const tickar = [];\r\n        let i = 0;\r\n        for (i = 0; i < n; ++i) {\r\n            const dd = i === n - 1 ? duration2 : duration;\r\n            tickar.push(new StaveNote({ keys: ['f/4'], duration: dd }));\r\n        }\r\n        return new Voice(time).addTickables(tickar);\r\n    };\r\n    const renderTest = (time, n, duration, duration2, x, width) => {\r\n        const formatter = f.Formatter();\r\n        const stave = f.Stave({ x, y: 20, width });\r\n        // stave.addClef('treble').addTimeSignature('4/4');\r\n        const voice = getTickables(time, n, duration, duration2);\r\n        formatter.joinVoices([voice]).formatToStave([voice], stave);\r\n        stave.draw();\r\n        voice.draw(f.getContext(), stave);\r\n    };\r\n    renderTest({ num_beats: 4, beat_value: 4, resolution: 4 * 4096 }, 3, '4', '2', 10, 300);\r\n    renderTest({ num_beats: 4, beat_value: 4, resolution: 4 * 4096 }, 1, 'w', 'w', 310, 300);\r\n    renderTest({ num_beats: 3, beat_value: 4, resolution: 4 * 4096 }, 3, '4', '4', 610, 300);\r\n    renderTest({ num_beats: 3, beat_value: 4, resolution: 4 * 4096 }, 6, '8', '8', 910, 300);\r\n    ok(true);\r\n}\r\nfunction penultimateNote(options) {\r\n    const f = VexFlowTests.makeFactory(options, 500, 550);\r\n    const score = f.EasyScore();\r\n    const staffWidth = 310;\r\n    let system = undefined;\r\n    let voices = [];\r\n    let notes = [];\r\n    let note = undefined;\r\n    let stave = undefined;\r\n    let y = 10;\r\n    const draw = (softmax) => {\r\n        system = f.System({\r\n            width: staffWidth,\r\n            y,\r\n            formatOptions: { align_rests: true },\r\n            details: { softmaxFactor: softmax },\r\n        });\r\n        notes = [];\r\n        voices = [];\r\n        note = score.notes('C4/8/r', { clef: 'bass' })[0];\r\n        notes.push(note);\r\n        note = score.notes('A3/8', { stem: 'up', clef: 'bass' })[0];\r\n        notes.push(note);\r\n        note = score.notes('C4/4', { stem: 'up', clef: 'bass' })[0];\r\n        notes.push(note);\r\n        voices.push(score.voice(notes).setMode(2));\r\n        notes = [];\r\n        note = score.notes('( F3 A3 )/4', { stem: 'down', clef: 'bass' })[0];\r\n        notes.push(note);\r\n        note = score.notes('B4/4/r', {})[0];\r\n        notes.push(note);\r\n        voices.push(score.voice(notes).setMode(2));\r\n        notes = [];\r\n        stave = system.addStave({ voices: voices });\r\n        stave.addClef('bass');\r\n        stave.addTimeSignature('2/4');\r\n        voices = [];\r\n        f.draw();\r\n        f.getContext().fillText(`softmax: ${softmax.toString()}`, staffWidth + 20, y + 50);\r\n        y += 100;\r\n    };\r\n    draw(100);\r\n    draw(10);\r\n    draw(5);\r\n    draw(2);\r\n    draw(1.5);\r\n    ok(true);\r\n}\r\nfunction noteHeadPadding(options) {\r\n    const registry = new Registry();\r\n    Registry.enableDefaultRegistry(registry);\r\n    const f = VexFlowTests.makeFactory(options, 600, 300);\r\n    const score = f.EasyScore();\r\n    score.set({ time: '9/8' });\r\n    const notes1 = score.notes('(d5 f5)/8,(c5 e5)/8,(d5 f5)/8,(c5 e5)/2.');\r\n    const beams = [new Beam(notes1.slice(0, 3), true)];\r\n    const voice1 = new Voice().setMode(Voice.Mode.SOFT);\r\n    const notes2 = score.notes('(g4 an4)/2.,(g4 a4)/4.', { clef: 'treble' });\r\n    const voice2 = new Voice().setMode(Voice.Mode.SOFT);\r\n    voice2.addTickables(notes2);\r\n    voice1.addTickables(notes1);\r\n    const formatter = f.Formatter().joinVoices([voice1]).joinVoices([voice2]);\r\n    const width = formatter.preCalculateMinTotalWidth([voice1, voice2]);\r\n    formatter.format([voice1, voice2], width);\r\n    const staveWidth = width + Stave.defaultPadding;\r\n    const stave1 = f.Stave({ y: 50, width: staveWidth });\r\n    const stave2 = f.Stave({ y: 150, width: staveWidth });\r\n    stave1.draw();\r\n    stave2.draw();\r\n    voice1.draw(f.getContext(), stave1);\r\n    voice2.draw(f.getContext(), stave2);\r\n    beams.forEach((b) => b.setContext(f.getContext()).draw());\r\n    ok(true);\r\n}\r\nfunction longMeasureProblems(options) {\r\n    const registry = new Registry();\r\n    Registry.enableDefaultRegistry(registry);\r\n    const f = VexFlowTests.makeFactory(options, 1500, 300);\r\n    const score = f.EasyScore();\r\n    score.set({ time: '4/4' });\r\n    const notes1 = score.notes('b4/4,b4/8,b4/8,b4/4,b4/4,b4/2,b4/2,b4/4,b4/8,b4/8,b4/4,b4/4,b4/2,b4/2,b4/4,b4/8,b4/8,b4/4,b4/4,b4/2,b4/2,b4/4,b4/2,b4/8,b4/8');\r\n    const voice1 = new Voice().setMode(Voice.Mode.SOFT);\r\n    const notes2 = score.notes('d3/4,(ab3 f4)/2,d3/4,ab3/4,d3/2,ab3/4,d3/4,ab3/2,d3/4,ab3/4,d3/2,ab3/4,d3/4,ab3/2,d3/4,ab3/4,d3/2,ab3/4,d4/4,d4/2,d4/4', { clef: 'bass' });\r\n    const voice2 = new Voice().setMode(Voice.Mode.SOFT);\r\n    voice2.addTickables(notes2);\r\n    voice1.addTickables(notes1);\r\n    const formatter = f.Formatter().joinVoices([voice1]).joinVoices([voice2]);\r\n    const width = formatter.preCalculateMinTotalWidth([voice1, voice2]);\r\n    formatter.format([voice1, voice2], width);\r\n    const stave1 = f.Stave({ y: 50, width: width + Stave.defaultPadding });\r\n    const stave2 = f.Stave({ y: 200, width: width + Stave.defaultPadding });\r\n    stave1.draw();\r\n    stave2.draw();\r\n    voice1.draw(f.getContext(), stave1);\r\n    voice2.draw(f.getContext(), stave2);\r\n    ok(true);\r\n}\r\nfunction accidentalJustification(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 300);\r\n    const score = f.EasyScore();\r\n    const notes11 = score.notes('a4/2, a4/4, a4/8, ab4/16, an4/16');\r\n    const voice11 = score.voice(notes11, { time: '4/4' });\r\n    const notes21 = score.notes('c4/2, d4/8, d4/8, e4/8, e4/8');\r\n    const voice21 = score.voice(notes21, { time: '4/4' });\r\n    let beams = Beam.generateBeams(notes11.slice(2));\r\n    beams = beams.concat(beams, Beam.generateBeams(notes21.slice(1, 3)));\r\n    beams = beams.concat(Beam.generateBeams(notes21.slice(3)));\r\n    const formatter = f.Formatter({ softmaxFactor: 100 }).joinVoices([voice11]).joinVoices([voice21]);\r\n    const width = formatter.preCalculateMinTotalWidth([voice11, voice21]);\r\n    const stave11 = f.Stave({ y: 20, width: width + Stave.defaultPadding });\r\n    const stave21 = f.Stave({ y: 130, width: width + Stave.defaultPadding });\r\n    formatter.format([voice11, voice21], width);\r\n    const ctx = f.getContext();\r\n    stave11.setContext(ctx).draw();\r\n    stave21.setContext(ctx).draw();\r\n    voice11.draw(ctx, stave11);\r\n    voice21.draw(ctx, stave21);\r\n    beams.forEach((b) => b.setContext(ctx).draw());\r\n    ok(true);\r\n}\r\nfunction unalignedNoteDurations1(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 250);\r\n    const score = f.EasyScore();\r\n    const notes11 = [\r\n        new StaveNote({ keys: ['a/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['b/4'], duration: '4' }),\r\n        new StaveNote({ keys: ['b/4'], duration: '8' }),\r\n    ];\r\n    const notes21 = [\r\n        new StaveNote({ keys: ['a/4'], duration: '16' }),\r\n        new StaveNote({ keys: ['b/4.'], duration: '4' }),\r\n        new StaveNote({ keys: ['a/4'], duration: '8d' }),\r\n    ];\r\n    Dot.buildAndAttach([notes21[2]], { all: true });\r\n    const ctx = f.getContext();\r\n    const voice11 = score.voice(notes11, { time: '2/4' }).setMode(Voice.Mode.SOFT);\r\n    const voice21 = score.voice(notes21, { time: '2/4' }).setMode(Voice.Mode.SOFT);\r\n    const beams21 = Beam.generateBeams(notes21);\r\n    const beams11 = Beam.generateBeams(notes11);\r\n    const formatter = new Formatter();\r\n    formatter.joinVoices([voice11]);\r\n    formatter.joinVoices([voice21]);\r\n    const width = formatter.preCalculateMinTotalWidth([voice11, voice21]);\r\n    const stave11 = f.Stave({ y: 20, width: width + Stave.defaultPadding });\r\n    const stave21 = f.Stave({ y: 130, width: width + Stave.defaultPadding });\r\n    formatter.format([voice11, voice21], width);\r\n    stave11.setContext(ctx).draw();\r\n    stave21.setContext(ctx).draw();\r\n    voice11.draw(ctx, stave11);\r\n    voice21.draw(ctx, stave21);\r\n    beams21.forEach((b) => b.setContext(ctx).draw());\r\n    beams11.forEach((b) => b.setContext(ctx).draw());\r\n    ok(voice11.getTickables()[1].getX() > voice21.getTickables()[1].getX());\r\n}\r\nfunction unalignedNoteDurations2(options) {\r\n    const notes1 = [\r\n        new StaveNote({ keys: ['b/4'], duration: '8r' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '16' }),\r\n        new StaveNote({ keys: ['c/5'], duration: '16' }),\r\n        new StaveNote({ keys: ['e/5'], duration: '16' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '16' }),\r\n        new StaveNote({ keys: ['c/5'], duration: '16' }),\r\n        new StaveNote({ keys: ['e/5'], duration: '16' }),\r\n        new StaveNote({ keys: ['b/4'], duration: '8r' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '16' }),\r\n        new StaveNote({ keys: ['c/5'], duration: '16' }),\r\n        new StaveNote({ keys: ['e/5'], duration: '16' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '16' }),\r\n        new StaveNote({ keys: ['c/5'], duration: '16' }),\r\n        new StaveNote({ keys: ['e/5'], duration: '16' }),\r\n    ];\r\n    const notes2 = [\r\n        new StaveNote({ keys: ['a/4'], duration: '16r' }),\r\n        new StaveNote({ keys: ['e/4.'], duration: '8d' }),\r\n        new StaveNote({ keys: ['e/4'], duration: '4' }),\r\n        new StaveNote({ keys: ['a/4'], duration: '16r' }),\r\n        new StaveNote({ keys: ['e/4.'], duration: '8d' }),\r\n        new StaveNote({ keys: ['e/4'], duration: '4' }),\r\n    ];\r\n    const f = VexFlowTests.makeFactory(options, 750, 280);\r\n    const context = f.getContext();\r\n    const voice1 = new Voice({ num_beats: 4, beat_value: 4 });\r\n    voice1.addTickables(notes1);\r\n    const voice2 = new Voice({ num_beats: 4, beat_value: 4 });\r\n    voice2.addTickables(notes2);\r\n    const formatter = new Formatter({ softmaxFactor: 100, globalSoftmax: options.params.globalSoftmax });\r\n    formatter.joinVoices([voice1]);\r\n    formatter.joinVoices([voice2]);\r\n    const width = formatter.preCalculateMinTotalWidth([voice1, voice2]);\r\n    formatter.format([voice1, voice2], width);\r\n    const stave1 = new Stave(10, 40, width + Stave.defaultPadding);\r\n    const stave2 = new Stave(10, 100, width + Stave.defaultPadding);\r\n    stave1.setContext(context).draw();\r\n    stave2.setContext(context).draw();\r\n    voice1.draw(context, stave1);\r\n    voice2.draw(context, stave2);\r\n    ok(voice1.getTickables()[1].getX() > voice2.getTickables()[1].getX());\r\n}\r\nfunction alignedMixedElements(options) {\r\n    const f = VexFlowTests.makeFactory(options, 800, 500);\r\n    const context = f.getContext();\r\n    const stave = new Stave(10, 200, 400);\r\n    const stave2 = new Stave(410, 200, 400);\r\n    const notes = [\r\n        new StaveNote({ keys: ['c/5'], duration: '8' })\r\n            .addModifier(new Accidental('##'), 0)\r\n            .addModifier(new FretHandFinger('4').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new StringNumber('3').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a>').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a^').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('am').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Annotation('yyyy').setVerticalJustification(AnnotationVerticalJustify.BOTTOM), 0)\r\n            .addModifier(new Annotation('xxxx').setVerticalJustification(AnnotationVerticalJustify.BOTTOM).setFont('sans-serif', 20), 0)\r\n            .addModifier(new Annotation('ttt').setVerticalJustification(AnnotationVerticalJustify.BOTTOM).setFont('sans-serif', 20), 0),\r\n        new StaveNote({ keys: ['c/5'], duration: '8', stem_direction: Stem.DOWN })\r\n            .addModifier(new StringNumber('3').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.BELOW), 0)\r\n            .addModifier(new Articulation('a>').setPosition(ModifierPosition.BELOW), 0),\r\n        new StaveNote({ keys: ['c/5'], duration: '8' }),\r\n    ];\r\n    const notes2 = [\r\n        new StaveNote({ keys: ['c/5'], duration: '8' })\r\n            .addModifier(new StringNumber('3').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Annotation('yyyy').setVerticalJustification(AnnotationVerticalJustify.TOP), 0),\r\n        new StaveNote({ keys: ['c/5'], duration: '8', stem_direction: Stem.DOWN })\r\n            .addModifier(new FretHandFinger('4').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new StringNumber('3').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a.').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a>').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a^').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('am').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Articulation('a@u').setPosition(ModifierPosition.ABOVE), 0)\r\n            .addModifier(new Annotation('yyyy').setVerticalJustification(AnnotationVerticalJustify.TOP), 0)\r\n            .addModifier(new Annotation('xxxx').setVerticalJustification(AnnotationVerticalJustify.TOP).setFont('sans-serif', 20), 0)\r\n            .addModifier(new Annotation('ttt').setVerticalJustification(AnnotationVerticalJustify.TOP).setFont('sans-serif', 20), 0),\r\n        new StaveNote({ keys: ['c/5'], duration: '8' }),\r\n    ];\r\n    const tuplet = new Tuplet(notes).setTupletLocation(-1);\r\n    const tuplet2 = new Tuplet(notes2).setTupletLocation(1);\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n    Formatter.FormatAndDraw(context, stave2, notes2);\r\n    stave.setContext(context).draw();\r\n    stave2.setContext(context).draw();\r\n    tuplet.setContext(context).draw();\r\n    tuplet2.setContext(context).draw();\r\n    ok(true);\r\n}\r\nfunction justifyStaveNotes(options) {\r\n    const f = VexFlowTests.makeFactory(options, 520, 280);\r\n    const ctx = f.getContext();\r\n    const score = f.EasyScore();\r\n    let y = 30;\r\n    function justifyToWidth(width) {\r\n        f.Stave({ y: y }).addClef('treble');\r\n        const voices = [\r\n            score.voice(score.notes('(cbb4 en4 a4)/2, (d4 e4 f4)/8, (d4 f4 a4)/8, (cn4 f#4 a4)/4', { stem: 'down' })),\r\n            score.voice(score.notes('(bb4 e#5 a5)/4, (d5 e5 f5)/2, (c##5 fb5 a5)/4', { stem: 'up' })),\r\n        ];\r\n        f.Formatter()\r\n            .joinVoices(voices)\r\n            .format(voices, width - (Stave.defaultPadding + getGlyphWidth('gClef')));\r\n        // Show the the width of notes via a horizontal line with red, green, yellow, blue, gray indicators.\r\n        voices[0].getTickables().forEach((note) => Note.plotMetrics(ctx, note, y + 140)); // Bottom line.\r\n        voices[1].getTickables().forEach((note) => Note.plotMetrics(ctx, note, y - 20)); // Top Line\r\n        y += 210;\r\n    }\r\n    justifyToWidth(520);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction notesWithTab(options) {\r\n    const f = VexFlowTests.makeFactory(options, 420, 580);\r\n    const score = f.EasyScore();\r\n    let y = 10;\r\n    function justifyToWidth(width) {\r\n        const stave = f.Stave({ y: y }).addClef('treble');\r\n        const voice = score.voice(score.notes('d#4/2, (c4 d4)/8, d4/8, (c#4 e4 a4)/4', { stem: 'up' }));\r\n        y += 100;\r\n        f.TabStave({ y: y }).addTabGlyph().setNoteStartX(stave.getNoteStartX());\r\n        const tabVoice = score.voice([\r\n            f.TabNote({ positions: [{ str: 3, fret: 6 }], duration: '2' }).addModifier(new Bend('Full'), 0),\r\n            f\r\n                .TabNote({\r\n                positions: [\r\n                    { str: 2, fret: 3 },\r\n                    { str: 3, fret: 5 },\r\n                ],\r\n                duration: '8',\r\n            })\r\n                .addModifier(new Bend('Unison'), 1),\r\n            f.TabNote({ positions: [{ str: 3, fret: 7 }], duration: '8' }),\r\n            f.TabNote({\r\n                positions: [\r\n                    { str: 3, fret: 6 },\r\n                    { str: 4, fret: 7 },\r\n                    { str: 2, fret: 5 },\r\n                ],\r\n                duration: '4',\r\n            }),\r\n        ]);\r\n        f.Formatter().joinVoices([voice]).joinVoices([tabVoice]).format([voice, tabVoice], width);\r\n        y += 150;\r\n    }\r\n    justifyToWidth(0);\r\n    justifyToWidth(300);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction multiStaves(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 400);\r\n    const ctx = f.getContext();\r\n    const score = f.EasyScore();\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Draw 3 Staves (one measure each).\r\n    const notes11 = score.notes('f4/4, d4/8, g4/4, eb4/8');\r\n    const notes21 = score.notes('d4/8, d4, d4, d4, e4, eb4');\r\n    const notes31 = score.notes('a5/8, a5, a5, a5, a5, a5', { stem: 'down' });\r\n    let voices = [\r\n        score.voice(notes11, { time: '6/8' }),\r\n        score.voice(notes21, { time: '6/8' }),\r\n        score.voice(notes31, { time: '6/8' }),\r\n    ];\r\n    let formatter = f.Formatter();\r\n    voices.forEach((v) => formatter.joinVoices([v]));\r\n    let width = formatter.preCalculateMinTotalWidth(voices);\r\n    formatter.format(voices, width);\r\n    let beams = [\r\n        new Beam(notes21.slice(0, 3), true),\r\n        new Beam(notes21.slice(3, 6), true),\r\n        new Beam(notes31.slice(0, 3), true),\r\n        new Beam(notes31.slice(3, 6), true),\r\n    ];\r\n    const staveYs = [20, 130, 250];\r\n    let staveWidth = width + getGlyphWidth('gClef') + getGlyphWidth('timeSig8') + Stave.defaultPadding;\r\n    let staves = [\r\n        f.Stave({ y: staveYs[0], width: staveWidth }).addClef('treble').addTimeSignature('6/8'),\r\n        f.Stave({ y: staveYs[1], width: staveWidth }).addClef('treble').addTimeSignature('6/8'),\r\n        f.Stave({ y: staveYs[2], width: staveWidth }).addClef('bass').addTimeSignature('6/8'),\r\n    ];\r\n    f.StaveConnector({\r\n        top_stave: staves[1],\r\n        bottom_stave: staves[2],\r\n        type: 'brace',\r\n    });\r\n    for (let i = 0; i < staves.length; ++i) {\r\n        staves[i].setContext(ctx).draw();\r\n        voices[i].draw(ctx, staves[i]);\r\n    }\r\n    beams.forEach((beam) => beam.setContext(ctx).draw());\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Draw 3 more staves (one measure each).\r\n    // These are adjacent to the first set of staves, representing the second measure of each stave.\r\n    const notes12 = score.notes('ab4/4, bb4/8, (cb5 eb5)/4[stem=\"down\"], d5/8[stem=\"down\"]');\r\n    const notes22 = score.notes('(eb4 ab4)/4., (c4 eb4 ab4)/4, db5/8', { stem: 'up' });\r\n    const notes32 = score.notes('a5/8, a5, a5, a5, a5, a5', { stem: 'down' });\r\n    voices = [\r\n        score.voice(notes12, { time: '6/8' }),\r\n        score.voice(notes22, { time: '6/8' }),\r\n        score.voice(notes32, { time: '6/8' }),\r\n    ];\r\n    formatter = f.Formatter();\r\n    voices.forEach((v) => formatter.joinVoices([v]));\r\n    width = formatter.preCalculateMinTotalWidth(voices);\r\n    const staveX = staves[0].getX() + staves[0].getWidth();\r\n    staveWidth = width + Stave.defaultPadding;\r\n    staves = [\r\n        f.Stave({ x: staveX, y: staveYs[0], width: staveWidth }),\r\n        f.Stave({ x: staveX, y: staveYs[1], width: staveWidth }),\r\n        f.Stave({ x: staveX, y: staveYs[2], width: staveWidth }),\r\n    ];\r\n    formatter.format(voices, width);\r\n    beams = [\r\n        // Add beams to each group of 3 notes.\r\n        new Beam(notes32.slice(0, 3), true),\r\n        new Beam(notes32.slice(3, 6), true),\r\n    ];\r\n    for (let i = 0; i < staves.length; ++i) {\r\n        staves[i].setContext(ctx).draw();\r\n        voices[i].draw(ctx, staves[i]);\r\n        voices[i].getTickables().forEach((note) => Note.plotMetrics(ctx, note, staveYs[i] - 20));\r\n    }\r\n    beams.forEach((beam) => beam.setContext(ctx).draw());\r\n    ok(true);\r\n}\r\nfunction proportional(options) {\r\n    const debug = options.params.debug;\r\n    Registry.enableDefaultRegistry(new Registry());\r\n    const f = VexFlowTests.makeFactory(options, 775, 750);\r\n    const system = f.System({\r\n        x: 50,\r\n        autoWidth: true,\r\n        debugFormatter: debug,\r\n        noJustification: !(options.params.justify === undefined && true),\r\n        formatIterations: options.params.iterations,\r\n        details: { alpha: options.params.alpha },\r\n    });\r\n    const score = f.EasyScore();\r\n    const voices = [\r\n        score.notes('c5/8, c5'),\r\n        score.tuplet(score.notes('a4/8, a4, a4'), { notes_occupied: 2 }),\r\n        score.notes('c5/16, c5, c5, c5'),\r\n        score.tuplet(score.notes('a4/16, a4, a4, a4, a4'), { notes_occupied: 4 }),\r\n        score.tuplet(score.notes('a4/32, a4, a4, a4, a4, a4, a4'), { notes_occupied: 8 }),\r\n    ];\r\n    const createVoice = (notes) => score.voice(notes, { time: '1/4' });\r\n    const createStave = (voice) => system\r\n        .addStave({ voices: [voice], debugNoteMetrics: debug })\r\n        .addClef('treble')\r\n        .addTimeSignature('1/4');\r\n    voices.map(createVoice).forEach(createStave);\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    // Debugging: Show how many elements of each type we have added.\r\n    // const typeMap = Registry.getDefaultRegistry().index.type;\r\n    // const table = Object.keys(typeMap).map((typeName) => typeName + ': ' + Object.keys(typeMap[typeName]).length);\r\n    // console.log(table);\r\n    Registry.disableDefaultRegistry();\r\n    ok(true);\r\n}\r\nfunction softMax(options) {\r\n    const f = VexFlowTests.makeFactory(options, 550, 500);\r\n    const textX = 450 / 0.8;\r\n    f.getContext().scale(0.8, 0.8);\r\n    function draw(y, factor) {\r\n        const score = f.EasyScore();\r\n        const system = f.System({\r\n            x: 100,\r\n            y,\r\n            details: { softmaxFactor: factor },\r\n            autoWidth: true,\r\n        });\r\n        system\r\n            .addStave({\r\n            voices: [\r\n                score.voice(score\r\n                    .notes('C#5/h, a4/q')\r\n                    .concat(score.beam(score.notes('Abb4/8, A4/8')))\r\n                    .concat(score.beam(score.notes('A4/16, A#4, A4, Ab4/32, A4'))), { time: '5/4' }),\r\n            ],\r\n        })\r\n            .addClef('treble')\r\n            .addTimeSignature('5/4');\r\n        f.draw();\r\n        f.getContext().fillText(`softmax: ${factor.toString()}`, textX, y + 50);\r\n        ok(true);\r\n    }\r\n    draw(50, 1);\r\n    draw(150, 2);\r\n    draw(250, 10);\r\n    draw(350, 20);\r\n    draw(450, 200);\r\n}\r\nfunction mixTime(options) {\r\n    const f = VexFlowTests.makeFactory(options, 400 + Stave.defaultPadding, 250);\r\n    f.getContext().scale(0.8, 0.8);\r\n    const score = f.EasyScore();\r\n    const system = f.System({\r\n        details: { softmaxFactor: 100 },\r\n        autoWidth: true,\r\n        debugFormatter: true,\r\n    });\r\n    system\r\n        .addStave({\r\n        voices: [score.voice(score.notes('C#5/q, B4').concat(score.beam(score.notes('A4/8, E4, C4, D4'))))],\r\n    })\r\n        .addClef('treble')\r\n        .addTimeSignature('4/4');\r\n    system\r\n        .addStave({\r\n        voices: [score.voice(score.notes('C#5/q, B4, B4').concat(score.tuplet(score.beam(score.notes('A4/8, E4, C4')))))],\r\n    })\r\n        .addClef('treble')\r\n        .addTimeSignature('4/4');\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction tightNotes1(options) {\r\n    const f = VexFlowTests.makeFactory(options, 440, 250);\r\n    f.getContext().scale(0.8, 0.8);\r\n    const score = f.EasyScore();\r\n    const system = f.System({\r\n        autoWidth: true,\r\n        debugFormatter: true,\r\n        details: { maxIterations: 10 },\r\n    });\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            score.voice(score.beam(score.notes('B4/16, B4, B4, B4, B4, B4, B4, B4')).concat(score.notes('B4/q, B4'))),\r\n        ],\r\n    })\r\n        .addClef('treble')\r\n        .addTimeSignature('4/4');\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            score.voice(score.notes('B4/q, B4').concat(score.beam(score.notes('B4/16, B4, B4, B4, B4, B4, B4, B4')))),\r\n        ],\r\n    })\r\n        .addClef('treble')\r\n        .addTimeSignature('4/4');\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction tightNotes2(options) {\r\n    const f = VexFlowTests.makeFactory(options, 440, 250);\r\n    f.getContext().scale(0.8, 0.8);\r\n    const score = f.EasyScore();\r\n    const system = f.System({\r\n        autoWidth: true,\r\n        debugFormatter: true,\r\n    });\r\n    system\r\n        .addStave({\r\n        voices: [\r\n            score.voice(score.beam(score.notes('B4/16, B4, B4, B4, B4, B4, B4, B4')).concat(score.notes('B4/q, B4'))),\r\n        ],\r\n    })\r\n        .addClef('treble')\r\n        .addTimeSignature('4/4');\r\n    system\r\n        .addStave({\r\n        voices: [score.voice(score.notes('B4/w'))],\r\n    })\r\n        .addClef('treble')\r\n        .addTimeSignature('4/4');\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction annotations(options) {\r\n    const pageWidth = 916;\r\n    const pageHeight = 600;\r\n    const f = VexFlowTests.makeFactory(options, pageWidth, pageHeight);\r\n    const context = f.getContext();\r\n    const lyrics1 = ['ipso', 'ipso-', 'ipso', 'ipso', 'ipsoz', 'ipso-', 'ipso', 'ipso', 'ipso', 'ip', 'ipso'];\r\n    const lyrics2 = ['ipso', 'ipso-', 'ipsoz', 'ipso', 'ipso', 'ipso-', 'ipso', 'ipso', 'ipso', 'ip', 'ipso'];\r\n    const smar = [\r\n        {\r\n            sm: 5,\r\n            width: 550,\r\n            lyrics: lyrics1,\r\n            title: '550px,softMax:5',\r\n        },\r\n        {\r\n            sm: 10,\r\n            width: 550,\r\n            lyrics: lyrics2,\r\n            title: '550px,softmax:10,different word order',\r\n        },\r\n        {\r\n            sm: 5,\r\n            width: 550,\r\n            lyrics: lyrics2,\r\n            title: '550px,softmax:5',\r\n        },\r\n        {\r\n            sm: 100,\r\n            width: 550,\r\n            lyrics: lyrics2,\r\n            title: '550px,softmax:100',\r\n        },\r\n    ];\r\n    const rowSize = 140;\r\n    const beats = 12;\r\n    const beatsPer = 8;\r\n    const beamGroup = 3;\r\n    const durations = ['8d', '16', '8', '8d', '16', '8', '8d', '16', '8', '4', '8'];\r\n    const beams = [];\r\n    let y = 40;\r\n    smar.forEach((sm) => {\r\n        const stave = new Stave(10, y, sm.width);\r\n        const notes = [];\r\n        let iii = 0;\r\n        context.fillText(sm.title, 100, y);\r\n        y += rowSize;\r\n        durations.forEach((dd) => {\r\n            const note = new StaveNote({ keys: ['b/4'], duration: dd });\r\n            if (dd.indexOf('d') >= 0) {\r\n                Dot.buildAndAttach([note], { all: true });\r\n            }\r\n            if (sm.lyrics.length > iii) {\r\n                note.addModifier(new Annotation(sm.lyrics[iii])\r\n                    .setVerticalJustification(Annotation.VerticalJustify.BOTTOM)\r\n                    .setFont(Font.SERIF, 12, FontWeight.NORMAL));\r\n            }\r\n            notes.push(note);\r\n            iii += 1;\r\n        });\r\n        notes.forEach((note) => {\r\n            if (note.getDuration().indexOf('d') >= 0) {\r\n                Dot.buildAndAttach([note], { all: true });\r\n            }\r\n        });\r\n        // Don't beam the last group\r\n        let notesToBeam = [];\r\n        notes.forEach((note) => {\r\n            if (note.getIntrinsicTicks() < 4096) {\r\n                notesToBeam.push(note);\r\n                if (notesToBeam.length >= beamGroup) {\r\n                    beams.push(new Beam(notesToBeam));\r\n                    notesToBeam = [];\r\n                }\r\n            }\r\n            else {\r\n                notesToBeam = [];\r\n            }\r\n        });\r\n        const voice1 = new Voice({ num_beats: beats, beat_value: beatsPer }).setMode(Voice.Mode.SOFT).addTickables(notes);\r\n        const fmt = new Formatter({ softmaxFactor: sm.sm, maxIterations: 2 }).joinVoices([voice1]);\r\n        fmt.format([voice1], sm.width - 11);\r\n        stave.setContext(context).draw();\r\n        voice1.draw(context, stave);\r\n        beams.forEach((b) => b.setContext(context).draw());\r\n    });\r\n    ok(true);\r\n}\r\nVexFlowTests.register(FormatterTests);\r\nexport { FormatterTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Fraction Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Fraction } from '../src/fraction';\r\nconst FractionTests = {\r\n    Start() {\r\n        QUnit.module('Fraction');\r\n        test('Basic', basic);\r\n        test('With Other Fractions', withOtherFractions);\r\n    },\r\n};\r\nfunction basic() {\r\n    const f_1_2 = new Fraction(1, 2);\r\n    ok(f_1_2.equals(0.5), 'Fraction: 1/2 equals 0.5');\r\n    ok(f_1_2.equals(new Fraction(1, 2)), 'Fraction: 1/2 equals 1/2');\r\n    ok(f_1_2.equals(new Fraction(2, 4)), 'Fraction: 1/2 equals 2/4');\r\n    notOk(f_1_2.greaterThan(1), 'Fraction: ! 1/2 > 1');\r\n    ok(f_1_2.greaterThan(0.2), 'Fraction: 1/2 > 0.2');\r\n    ok(f_1_2.greaterThanEquals(0.2), 'Fraction: 1/2 >= 0.2');\r\n    ok(f_1_2.greaterThanEquals(0.5), 'Fraction: 1/2 >= 0.5');\r\n    notOk(f_1_2.greaterThanEquals(1), 'Fraction: ! 1/2 >= 1');\r\n    notOk(f_1_2.lessThan(0.5), 'Fraction: ! 1/2 < 0.5');\r\n    ok(f_1_2.lessThan(1), 'Fraction: 1/2 < 1');\r\n    ok(f_1_2.lessThanEquals(0.6), 'Fraction: 1/2 <= 0.6');\r\n    ok(f_1_2.lessThanEquals(0.5), 'Fraction: 1/2 <= 0.5');\r\n    notOk(f_1_2.lessThanEquals(0.4), 'Fraction: ! 1/2 <= 0.4');\r\n    const f_05 = f_1_2.copy(0.5);\r\n    strictEqual(f_05, f_1_2, 'Fraction: f_05 === f_1_2');\r\n    strictEqual(f_05.toString(), '0.5/1', 'Fraction: f_05.toString() === \"0.5/1\"');\r\n    strictEqual(f_05.toSimplifiedString(), '1/2', 'Fraction: f_05.toSimplifiedString() === \"1/2\"');\r\n    const tF_n = f_05.clone();\r\n    notStrictEqual(tF_n, f_05, 'Fraction: tF_n !== f_05');\r\n    notEqual(tF_n, f_05, 'Fraction: tF_n != f_05');\r\n    deepEqual(tF_n, f_05, 'tF_n deepEqual f_05');\r\n    notDeepEqual(tF_n, {}, 'tF_n notDeepEqual {}');\r\n    tF_n.subtract(-0.5);\r\n    ok(tF_n.equals(1), 'Fraction: 0.5 -(-0.5) equals 1');\r\n    tF_n.add(1);\r\n    ok(tF_n.equals(2), 'Fraction: 1 + 1 equals 2');\r\n    tF_n.multiply(2);\r\n    ok(tF_n.equals(4), 'Fraction: 2 * 2 equals 4');\r\n    tF_n.divide(2);\r\n    ok(tF_n.equals(2), 'Fraction: 4 / 2 equals 2');\r\n    // Lowest common multiple.\r\n    equal(Fraction.LCMM([]), 0);\r\n    equal(Fraction.LCMM([17]), 17);\r\n    equal(Fraction.LCMM([2, 5]), 10);\r\n    equal(Fraction.LCMM([15, 3, 5]), 15);\r\n    equal(Fraction.LCMM([2, 4, 6]), 12);\r\n    equal(Fraction.LCMM([2, 3, 4, 5]), 60);\r\n    equal(Fraction.LCMM([12, 15, 10, 75]), 300);\r\n    // Greatest common divisor.\r\n    equal(Fraction.GCD(0, 0), 0);\r\n    equal(Fraction.GCD(0, 99), 99);\r\n    equal(Fraction.GCD(77, 0), 77);\r\n    equal(Fraction.GCD(42, 14), 14);\r\n    equal(Fraction.GCD(15, 10), 5);\r\n}\r\nfunction withOtherFractions() {\r\n    const f_1_2 = new Fraction(1, 2);\r\n    const f_1_4 = new Fraction(1, 4);\r\n    const f_1_8 = new Fraction(1, 8);\r\n    const f_2 = new Fraction(2, 1);\r\n    // IMPORTANT NOTE: Fraction methods modify the existing Fraction object.\r\n    // They do not return new objects.\r\n    // Use clone() if you don't want to modify the original object.\r\n    const a = f_1_2.clone().multiply(f_1_2);\r\n    ok(a.equals(f_1_4), '1/2 x 1/2 == 1/4');\r\n    const b = f_1_2.clone().divide(f_1_4);\r\n    ok(b.equals(f_2), '1/2 / 1/4 == 2');\r\n    const c = f_2.clone().subtract(f_1_2).subtract(f_1_2).subtract(f_1_4); // 3/4\r\n    const d = f_1_8.clone().add(f_1_8).add(f_1_8).multiply(f_2);\r\n    ok(c.equals(d), '2-1/2-1/2-1/4 == (1/8+1/8+1/8)*(2/1)');\r\n    equal(c.value(), 0.75, '3/4 == 0.75');\r\n    const e = f_1_8.clone().add(f_1_4).add(f_1_8);\r\n    ok(e.equals(f_1_2), '1/8 + 1/4 + 1/8 == 1/2');\r\n}\r\nVexFlowTests.register(FractionTests);\r\nexport { FractionTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// GhostNote Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nconst GhostNoteTests = {\r\n    Start() {\r\n        QUnit.module('GhostNote');\r\n        const run = VexFlowTests.runTests;\r\n        run('GhostNote Basic', basic);\r\n        run('GhostNote Dotted', dotted);\r\n    },\r\n};\r\n/**\r\n * Helper function to set up the stave, easyscore, voice, and to format & draw.\r\n */\r\nfunction createTest(addItems) {\r\n    return (options) => {\r\n        const factory = VexFlowTests.makeFactory(options, 550);\r\n        const stave = factory.Stave();\r\n        const score = factory.EasyScore();\r\n        addItems(factory, score);\r\n        const voices = factory.getVoices();\r\n        factory.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n        factory.draw();\r\n        ok(true, 'all pass');\r\n    };\r\n}\r\nconst basic = createTest((f, score) => {\r\n    // Top Voice\r\n    const voiceTop = score.voice(score.notes('f#5/4, f5, db5, c5, c5/8, d5, fn5, e5, d5, c5', { stem: 'up' }), {\r\n        time: '7/4',\r\n    });\r\n    const notesTop = voiceTop.getTickables();\r\n    f.Beam({ notes: notesTop.slice(4, 8) });\r\n    f.Beam({ notes: notesTop.slice(8, 10) });\r\n    // Bottom Voice\r\n    score.voice([\r\n        f.GhostNote({ duration: '2' }),\r\n        f.StaveNote({ keys: ['f/4'], stem_direction: -1, duration: '4' }),\r\n        f.GhostNote({ duration: '4' }),\r\n        f.StaveNote({ keys: ['e/4'], stem_direction: -1, duration: '4' }),\r\n        f.GhostNote({ duration: '8' }),\r\n        f.StaveNote({ keys: ['d/4'], stem_direction: -1, duration: '8' }).addModifier(f.Accidental({ type: '##' }), 0),\r\n        f.StaveNote({ keys: ['c/4'], stem_direction: -1, duration: '8' }),\r\n        f.StaveNote({ keys: ['c/4'], stem_direction: -1, duration: '8' }),\r\n    ], { time: '7/4' });\r\n});\r\n/**\r\n * A ghost note is invisible, but takes up space on the stave corresponding to its duration.\r\n * '4d' is a dotted quarter note, equivalent to a quarter + eighth note.\r\n */\r\nconst dotted = createTest((f, score) => {\r\n    const voice1 = score.voice([\r\n        f.GhostNote({ duration: '4d' }),\r\n        f.StaveNote({ duration: '8', keys: ['f/5'], stem_direction: 1 }),\r\n        f.StaveNote({ duration: '4', keys: ['d/5'], stem_direction: 1 }),\r\n        f.StaveNote({ duration: '8', keys: ['c/5'], stem_direction: 1 }),\r\n        f.StaveNote({ duration: '16', keys: ['c/5'], stem_direction: 1 }),\r\n        f.StaveNote({ duration: '16', keys: ['d/5'], stem_direction: 1 }),\r\n        f.GhostNote({ duration: '2dd' }),\r\n        f.StaveNote({ duration: '8', keys: ['f/5'], stem_direction: 1 }),\r\n    ], { time: '8/4' });\r\n    const voice2 = score.voice([\r\n        f.StaveNote({ duration: '4', keys: ['f/4'], stem_direction: -1 }),\r\n        f.StaveNote({ duration: '8', keys: ['e/4'], stem_direction: -1 }),\r\n        f.StaveNote({ duration: '8', keys: ['d/4'], stem_direction: -1 }),\r\n        f.GhostNote({ duration: '4dd' }),\r\n        f.StaveNote({ duration: '16', keys: ['c/4'], stem_direction: -1 }),\r\n        f.StaveNote({ duration: '2', keys: ['c/4'], stem_direction: -1 }),\r\n        f.StaveNote({ duration: '4', keys: ['d/4'], stem_direction: -1 }),\r\n        f.StaveNote({ duration: '8', keys: ['f/4'], stem_direction: -1 }),\r\n        f.StaveNote({ duration: '8', keys: ['e/4'], stem_direction: -1 }),\r\n    ], { time: '8/4' });\r\n    const notes1 = voice1.getTickables();\r\n    const notes2 = voice2.getTickables();\r\n    const addAccidental = (note, type) => note.addModifier(f.Accidental({ type }), 0);\r\n    addAccidental(notes1[1], 'bb');\r\n    addAccidental(notes1[4], '#');\r\n    addAccidental(notes1[7], 'n');\r\n    addAccidental(notes2[0], '#');\r\n    addAccidental(notes2[4], 'b');\r\n    addAccidental(notes2[5], '#');\r\n    addAccidental(notes2[7], 'n');\r\n    f.Beam({ notes: notes1.slice(3, 6) });\r\n    f.Beam({ notes: notes2.slice(1, 3) });\r\n    f.Beam({ notes: notes2.slice(7, 9) });\r\n});\r\nVexFlowTests.register(GhostNoteTests);\r\nexport { GhostNoteTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// GlyphNote Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { ChordSymbol } from '../src/chordsymbol';\r\nimport { Glyph } from '../src/glyph';\r\nimport { Registry } from '../src/registry';\r\nimport { StaveConnector } from '../src/staveconnector';\r\nconst GlyphNoteTests = {\r\n    Start() {\r\n        QUnit.module('GlyphNote');\r\n        const run = VexFlowTests.runTests;\r\n        run('GlyphNote with ChordSymbols', chordChanges, { debug: false, noPadding: false });\r\n        run('GlyphNote Positioning', basic, { debug: false, noPadding: false });\r\n        run('GlyphNote No Stave Padding', basic, { debug: true, noPadding: true });\r\n        run('GlyphNote RepeatNote', repeatNote, { debug: false, noPadding: true });\r\n    },\r\n};\r\nfunction chordChanges(options) {\r\n    Registry.enableDefaultRegistry(new Registry());\r\n    const f = VexFlowTests.makeFactory(options, 300, 200);\r\n    const system = f.System({\r\n        x: 50,\r\n        width: 250,\r\n        debugFormatter: options.params.debug,\r\n        noPadding: options.params.noPadding,\r\n        details: { alpha: options.params.alpha },\r\n    });\r\n    const score = f.EasyScore();\r\n    const notes = [\r\n        f.GlyphNote(new Glyph('repeatBarSlash', 40), { duration: 'q' }),\r\n        f.GlyphNote(new Glyph('repeatBarSlash', 40), { duration: 'q' }),\r\n        f.GlyphNote(new Glyph('repeatBarSlash', 40), { duration: 'q' }),\r\n        f.GlyphNote(new Glyph('repeatBarSlash', 40), { duration: 'q' }),\r\n    ];\r\n    const chord1 = f\r\n        .ChordSymbol({ reportWidth: false })\r\n        .addText('F7')\r\n        .setHorizontal('left')\r\n        .addGlyphOrText('(#11b9)', { symbolModifier: ChordSymbol.symbolModifiers.SUPERSCRIPT });\r\n    const chord2 = f\r\n        .ChordSymbol()\r\n        .addText('F7')\r\n        .setHorizontal('left')\r\n        .addGlyphOrText('#11', { symbolModifier: ChordSymbol.symbolModifiers.SUPERSCRIPT })\r\n        .addGlyphOrText('b9', { symbolModifier: ChordSymbol.symbolModifiers.SUBSCRIPT });\r\n    notes[0].addModifier(chord1, 0);\r\n    notes[2].addModifier(chord2, 0);\r\n    const voice = score.voice(notes);\r\n    system.addStave({ voices: [voice], debugNoteMetrics: options.params.debug });\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    Registry.disableDefaultRegistry();\r\n    ok(true);\r\n}\r\nfunction basic(options) {\r\n    Registry.enableDefaultRegistry(new Registry());\r\n    const f = VexFlowTests.makeFactory(options, 300, 400);\r\n    const system = f.System({\r\n        x: 50,\r\n        width: 250,\r\n        debugFormatter: options.params.debug,\r\n        noPadding: options.params.noPadding,\r\n        details: { alpha: options.params.alpha },\r\n    });\r\n    const score = f.EasyScore();\r\n    const newVoice = (notes) => score.voice(notes, { time: '1/4' });\r\n    const newStave = (voice) => system.addStave({ voices: [voice], debugNoteMetrics: options.params.debug });\r\n    const voices = [\r\n        [f.GlyphNote(new Glyph('repeat1Bar', 40), { duration: 'q' }, { line: 4 })],\r\n        [f.GlyphNote(new Glyph('repeat2Bars', 40), { duration: 'q', align_center: true })],\r\n        [\r\n            f.GlyphNote(new Glyph('repeatBarSlash', 40), { duration: '16' }),\r\n            f.GlyphNote(new Glyph('repeatBarSlash', 40), { duration: '16' }),\r\n            f.GlyphNote(new Glyph('repeat4Bars', 40), { duration: '16' }),\r\n            f.GlyphNote(new Glyph('repeatBarSlash', 40), { duration: '16' }),\r\n        ],\r\n    ];\r\n    voices.map(newVoice).forEach(newStave);\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    Registry.disableDefaultRegistry();\r\n    ok(true);\r\n}\r\nfunction repeatNote(options) {\r\n    Registry.enableDefaultRegistry(new Registry());\r\n    const f = VexFlowTests.makeFactory(options, 300, 500);\r\n    const system = f.System({\r\n        x: 50,\r\n        width: 250,\r\n        debugFormatter: options.params.debug,\r\n        noPadding: options.params.noPadding,\r\n        details: { alpha: options.params.alpha },\r\n    });\r\n    const score = f.EasyScore();\r\n    const createVoice = (notes) => score.voice(notes, { time: '1/4' });\r\n    const addStaveWithVoice = (voice) => system.addStave({ voices: [voice], debugNoteMetrics: options.params.debug });\r\n    const voices = [\r\n        [f.RepeatNote('1')],\r\n        [f.RepeatNote('2')],\r\n        [f.RepeatNote('4')],\r\n        [\r\n            f.RepeatNote('slash', { duration: '16' }),\r\n            f.RepeatNote('slash', { duration: '16' }),\r\n            f.RepeatNote('slash', { duration: '16' }),\r\n            f.RepeatNote('slash', { duration: '16' }),\r\n        ],\r\n    ];\r\n    voices.map(createVoice).forEach(addStaveWithVoice);\r\n    system.addConnector().setType(StaveConnector.type.BRACKET);\r\n    f.draw();\r\n    Registry.disableDefaultRegistry();\r\n    ok(true);\r\n}\r\nVexFlowTests.register(GlyphNoteTests);\r\nexport { GlyphNoteTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// GraceNote Tests\r\n// TODO: In the 'stem' test (aka Grace Note Stem › SVG + Petaluma in flow.html), the Petaluma note heads are not scaled down properly.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Accidental } from '../src/accidental';\r\nimport { Annotation } from '../src/annotation';\r\nimport { Articulation } from '../src/articulation';\r\nimport { Dot } from '../src/dot';\r\nimport { Formatter } from '../src/formatter';\r\nconst GraceNoteTests = {\r\n    Start() {\r\n        QUnit.module('Grace Notes');\r\n        const run = VexFlowTests.runTests;\r\n        run('Grace Note Basic', basic);\r\n        run('With Articulation and Annotation on Parent Note', graceNoteModifiers);\r\n        run('Grace Note Basic with Slurs', basicSlurred);\r\n        run('Grace Note Stem', stem);\r\n        run('Grace Note Stem with Beams 1', stemWithBeamed, {\r\n            keys1: ['g/4'],\r\n            stemDirection1: 1,\r\n            keys2: ['d/5'],\r\n            stemDirection2: -1,\r\n        });\r\n        run('Grace Note Stem with Beams 2', stemWithBeamed, {\r\n            keys1: ['a/3'],\r\n            stemDirection1: 1,\r\n            keys2: ['a/5'],\r\n            stemDirection2: -1,\r\n        });\r\n        run('Grace Note Stem with Beams 3', stemWithBeamed, {\r\n            keys1: ['c/4'],\r\n            stemDirection1: 1,\r\n            keys2: ['c/6'],\r\n            stemDirection2: -1,\r\n        });\r\n        run('Grace Note Slash', slash);\r\n        run('Grace Note Slash with Beams', slashWithBeams);\r\n        run('Grace Notes Multiple Voices', multipleVoices);\r\n        run('Grace Notes Multiple Voices Multiple Draws', multipleVoicesMultipleDraws);\r\n    },\r\n};\r\nfunction basic(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 130);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\r\n    const gracenotes = [\r\n        { keys: ['e/4'], duration: '32' },\r\n        { keys: ['f/4'], duration: '32' },\r\n        { keys: ['g/4'], duration: '32' },\r\n        { keys: ['a/4'], duration: '32' },\r\n    ].map(f.GraceNote.bind(f));\r\n    const gracenotes1 = [{ keys: ['b/4'], duration: '8', slash: false }].map(f.GraceNote.bind(f));\r\n    const gracenotes2 = [{ keys: ['b/4'], duration: '8', slash: true }].map(f.GraceNote.bind(f));\r\n    const gracenotes3 = [\r\n        { keys: ['e/4'], duration: '8' },\r\n        { keys: ['f/4'], duration: '16' },\r\n        { keys: ['e/4', 'g/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '32' },\r\n        { keys: ['b/4'], duration: '32' },\r\n    ].map(f.GraceNote.bind(f));\r\n    const gracenotes4 = [\r\n        { keys: ['g/4'], duration: '8' },\r\n        { keys: ['g/4'], duration: '16' },\r\n        { keys: ['g/4'], duration: '16' },\r\n    ].map(f.GraceNote.bind(f));\r\n    gracenotes[1].addModifier(f.Accidental({ type: '##' }), 0);\r\n    gracenotes3[3].addModifier(f.Accidental({ type: 'bb' }), 0);\r\n    Dot.buildAndAttach([gracenotes4[0]], { all: true });\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['b/4'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }).beamNotes(), 0),\r\n        f\r\n            .StaveNote({ keys: ['c/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.Accidental({ type: '#' }), 0)\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes1 }).beamNotes(), 0),\r\n        f\r\n            .StaveNote({ keys: ['c/5', 'd/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes2 }).beamNotes(), 0),\r\n        f\r\n            .StaveNote({ keys: ['a/4'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes3 }).beamNotes(), 0),\r\n        f\r\n            .StaveNote({ keys: ['a/4'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes4 }).beamNotes(), 0),\r\n    ];\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'GraceNoteBasic');\r\n}\r\nfunction graceNoteModifiers(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 130);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\r\n    const gracenotes = [{ keys: ['b/4'], duration: '8', slash: false }].map(f.GraceNote.bind(f));\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['c/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0),\r\n        f\r\n            .StaveNote({ keys: ['c/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\r\n            .addModifier(new Articulation('a-').setPosition(3), 0),\r\n        f\r\n            .StaveNote({ keys: ['c/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\r\n            .addModifier(new Articulation('a-').setPosition(3), 0)\r\n            .addModifier(new Accidental('#')),\r\n        f\r\n            .StaveNote({ keys: ['c/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\r\n            .addModifier(new Articulation('a-').setPosition(3), 0)\r\n            .addModifier(new Annotation('words')),\r\n        f\r\n            .StaveNote({ keys: ['c/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\r\n            .addModifier(new Articulation('a-').setPosition(3), 0)\r\n            .addModifier(new Articulation('a>').setPosition(3), 0),\r\n        f\r\n            .StaveNote({ keys: ['c/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0)\r\n            .addModifier(new Articulation('a-').setPosition(3), 0)\r\n            .addModifier(new Articulation('a>').setPosition(3), 0)\r\n            .addModifier(new Articulation('a@a').setPosition(3), 0),\r\n    ];\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'GraceNoteModifiers');\r\n}\r\nfunction basicSlurred(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 130);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\r\n    const gracenotes0 = [\r\n        { keys: ['e/4'], duration: '32' },\r\n        { keys: ['f/4'], duration: '32' },\r\n        { keys: ['g/4'], duration: '32' },\r\n        { keys: ['a/4'], duration: '32' },\r\n    ].map(f.GraceNote.bind(f));\r\n    const gracenotes1 = [{ keys: ['b/4'], duration: '8', slash: false }].map(f.GraceNote.bind(f));\r\n    const gracenotes2 = [{ keys: ['b/4'], duration: '8', slash: true }].map(f.GraceNote.bind(f));\r\n    const gracenotes3 = [\r\n        { keys: ['e/4'], duration: '8' },\r\n        { keys: ['f/4'], duration: '16' },\r\n        { keys: ['e/4', 'g/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '32' },\r\n        { keys: ['b/4'], duration: '32' },\r\n    ].map(f.GraceNote.bind(f));\r\n    const gracenotes4 = [\r\n        { keys: ['a/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['a/4'], duration: '16' },\r\n    ].map(f.GraceNote.bind(f));\r\n    gracenotes0[1].addModifier(f.Accidental({ type: '#' }), 0);\r\n    gracenotes3[3].addModifier(f.Accidental({ type: 'b' }), 0);\r\n    gracenotes3[2].addModifier(f.Accidental({ type: 'n' }), 0);\r\n    Dot.buildAndAttach([gracenotes4[0]], { all: true });\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['b/4'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes0, slur: true }).beamNotes(), 0),\r\n        f\r\n            .StaveNote({ keys: ['c/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.Accidental({ type: '#' }), 0)\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes1, slur: true }).beamNotes(), 0),\r\n        f\r\n            .StaveNote({ keys: ['c/5', 'd/5'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes2, slur: true }).beamNotes(), 0),\r\n        f\r\n            .StaveNote({ keys: ['a/4'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes3, slur: true }).beamNotes(), 0),\r\n        f\r\n            .StaveNote({ keys: ['a/4'], duration: '4', auto_stem: true })\r\n            .addModifier(f.GraceNoteGroup({ notes: gracenotes4, slur: true }).beamNotes(), 0),\r\n        f.StaveNote({ keys: ['a/4'], duration: '4', auto_stem: true }),\r\n    ];\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'GraceNoteBasic');\r\n}\r\n/**\r\n * Helper function for three tests below: stem, stemWithBeamed, slash.\r\n */\r\nconst createNoteForStemTest = (duration, noteBuilder, keys, stem_direction, slash = false) => {\r\n    const struct = { duration, slash };\r\n    struct.stem_direction = stem_direction;\r\n    struct.keys = keys;\r\n    return noteBuilder(struct);\r\n};\r\n// Used in three tests below.\r\nconst durationsForStemTest = ['8', '16', '32', '64', '128'];\r\nfunction stem(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 130);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\r\n    function createNotes(noteBuilder, keys, stem_direction) {\r\n        return durationsForStemTest.map((duration) => createNoteForStemTest(duration, noteBuilder, keys, stem_direction));\r\n    }\r\n    function createNoteBlock(keys, stem_direction) {\r\n        const staveNotes = createNotes(f.StaveNote.bind(f), keys, stem_direction);\r\n        const gracenotes = createNotes(f.GraceNote.bind(f), keys, stem_direction);\r\n        // Add a bunch of GraceNotes in front of the first StaveNote.\r\n        staveNotes[0].addModifier(f.GraceNoteGroup({ notes: gracenotes }), 0);\r\n        return staveNotes;\r\n    }\r\n    const voice = f.Voice().setStrict(false);\r\n    voice.addTickables(createNoteBlock(['g/4'], 1));\r\n    voice.addTickables(createNoteBlock(['d/5'], -1));\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'GraceNoteStem');\r\n}\r\nfunction stemWithBeamed(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 130);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\r\n    function createBeamedNotes(noteBuilder, keys, stem_direction, beams, isGrace = false, notesToBeam) {\r\n        const ret = [];\r\n        durationsForStemTest.map((duration) => {\r\n            const n0 = createNoteForStemTest(duration, noteBuilder, keys, stem_direction);\r\n            const n1 = createNoteForStemTest(duration, noteBuilder, keys, stem_direction);\r\n            ret.push(n0);\r\n            ret.push(n1);\r\n            if (notesToBeam) {\r\n                notesToBeam.push([n0, n1]);\r\n            }\r\n            if (!isGrace) {\r\n                beams.push(f.Beam({ notes: [n0, n1] }));\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n    function createBeamedNoteBlock(keys, stem_direction, beams) {\r\n        const bnotes = createBeamedNotes(f.StaveNote.bind(f), keys, stem_direction, beams);\r\n        const notesToBeam = [];\r\n        const gracenotes = createBeamedNotes(f.GraceNote.bind(f), keys, stem_direction, beams, true, notesToBeam);\r\n        const graceNoteGroup = f.GraceNoteGroup({ notes: gracenotes });\r\n        notesToBeam.map(graceNoteGroup.beamNotes.bind(graceNoteGroup));\r\n        bnotes[0].addModifier(graceNoteGroup, 0);\r\n        return bnotes;\r\n    }\r\n    const beams = [];\r\n    const voice = f.Voice().setStrict(false);\r\n    voice.addTickables(createBeamedNoteBlock(options.params.keys1, options.params.stemDirection1, beams));\r\n    voice.addTickables(createBeamedNoteBlock(options.params.keys2, options.params.stemDirection2, beams));\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'GraceNoteStem');\r\n}\r\nfunction slash(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 130);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 650 });\r\n    function createNotes(noteT, keys, stem_direction, slash) {\r\n        return durationsForStemTest.map((d) => createNoteForStemTest(d, noteT, keys, stem_direction, slash));\r\n    }\r\n    function createNoteBlock(keys, stem_direction) {\r\n        const notes = [f.StaveNote({ keys: ['f/4'], stem_direction, duration: '16' })];\r\n        let graceNotes = createNotes(f.GraceNote.bind(f), keys, stem_direction, true);\r\n        const duration = '8';\r\n        const gns = [\r\n            { keys: ['d/4', 'a/4'], stem_direction, duration, slash: true },\r\n            { keys: ['d/4', 'a/4'], stem_direction, duration, slash: true },\r\n            { keys: ['d/4', 'a/4'], stem_direction, duration, slash: true },\r\n            { keys: ['e/4', 'a/4'], stem_direction, duration, slash: true },\r\n            { keys: ['e/4', 'a/4'], stem_direction, duration, slash: true },\r\n            { keys: ['b/4', 'f/5'], stem_direction, duration, slash: true },\r\n            { keys: ['b/4', 'f/5'], stem_direction, duration, slash: true },\r\n            { keys: ['b/4', 'f/5'], stem_direction, duration, slash: true },\r\n            { keys: ['e/4', 'a/4'], stem_direction, duration, slash: true },\r\n        ].map(f.GraceNote.bind(f));\r\n        const notesToBeam = [];\r\n        notesToBeam.push([gns[0], gns[1], gns[2]]);\r\n        notesToBeam.push([gns[3], gns[4], gns[5]]);\r\n        notesToBeam.push([gns[6], gns[7], gns[8]]);\r\n        // Merge the two GraceNote[].\r\n        graceNotes = graceNotes.concat(gns);\r\n        const graceNoteGroup = f.GraceNoteGroup({ notes: graceNotes });\r\n        notesToBeam.forEach((notes) => graceNoteGroup.beamNotes(notes));\r\n        notes[0].addModifier(graceNoteGroup, 0);\r\n        return notes;\r\n    }\r\n    const voice = f.Voice().setStrict(false);\r\n    voice.addTickables(createNoteBlock(['d/4', 'a/4'], 1));\r\n    voice.addTickables(createNoteBlock(['d/4', 'a/4'], -1));\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'GraceNoteSlash');\r\n}\r\nfunction slashWithBeams(options) {\r\n    const f = VexFlowTests.makeFactory(options, 800, 130);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 750 });\r\n    function createNoteBlock(keys, stem_direction) {\r\n        const notes = [f.StaveNote({ keys: ['f/4'], stem_direction, duration: '16' })];\r\n        let allGraceNotes = [];\r\n        const graceNotesToBeam = [];\r\n        ['8', '16', '32', '64'].forEach(function (duration) {\r\n            const graceNotes = [\r\n                { keys: ['d/4', 'a/4'], stem_direction, duration, slash: true },\r\n                { keys: ['d/4', 'a/4'], stem_direction, duration, slash: false },\r\n                { keys: ['e/4', 'a/4'], stem_direction, duration, slash: true },\r\n                { keys: ['b/4', 'f/5'], stem_direction, duration, slash: false },\r\n                { keys: ['b/4', 'f/5'], stem_direction, duration, slash: true },\r\n                { keys: ['e/4', 'a/4'], stem_direction, duration, slash: false },\r\n            ].map(f.GraceNote.bind(f));\r\n            graceNotesToBeam.push([graceNotes[0], graceNotes[1]]);\r\n            graceNotesToBeam.push([graceNotes[2], graceNotes[3]]);\r\n            graceNotesToBeam.push([graceNotes[4], graceNotes[5]]);\r\n            allGraceNotes = allGraceNotes.concat(graceNotes);\r\n        });\r\n        const graceNoteGroup = f.GraceNoteGroup({ notes: allGraceNotes });\r\n        graceNotesToBeam.forEach((g) => graceNoteGroup.beamNotes(g));\r\n        notes[0].addModifier(graceNoteGroup, 0);\r\n        return notes;\r\n    }\r\n    const voice = f.Voice().setStrict(false);\r\n    voice.addTickables(createNoteBlock(['d/4', 'a/4'], 1));\r\n    voice.addTickables(createNoteBlock(['d/4', 'a/4'], -1));\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'GraceNoteSlashWithBeams');\r\n}\r\nfunction multipleVoices(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 140);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 450 });\r\n    const notes = [\r\n        { keys: ['f/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['f/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['d/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['c/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['c/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['d/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['f/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['e/5'], stem_direction: 1, duration: '16' },\r\n    ].map(f.StaveNote.bind(f));\r\n    const notes2 = [\r\n        { keys: ['f/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['e/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['d/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['c/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['c/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['d/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['f/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['e/4'], stem_direction: -1, duration: '16' },\r\n    ].map(f.StaveNote.bind(f));\r\n    const gracenotes1 = [{ keys: ['b/4'], stem_direction: 1, duration: '8', slash: true }].map(f.GraceNote.bind(f));\r\n    const gracenotes2 = [{ keys: ['f/4'], stem_direction: -1, duration: '8', slash: true }].map(f.GraceNote.bind(f));\r\n    const gracenotes3 = [\r\n        { keys: ['f/4'], duration: '32', stem_direction: -1 },\r\n        { keys: ['e/4'], duration: '32', stem_direction: -1 },\r\n    ].map(f.GraceNote.bind(f));\r\n    const gracenotes4 = [\r\n        { keys: ['f/5'], duration: '32', stem_direction: 1 },\r\n        { keys: ['e/5'], duration: '32', stem_direction: 1 },\r\n        { keys: ['e/5'], duration: '8', stem_direction: 1 },\r\n    ].map(f.GraceNote.bind(f));\r\n    gracenotes2[0].setStemDirection(-1);\r\n    gracenotes2[0].addModifier(f.Accidental({ type: '#' }), 0);\r\n    notes[1].addModifier(f.GraceNoteGroup({ notes: gracenotes4 }).beamNotes(), 0);\r\n    notes[3].addModifier(f.GraceNoteGroup({ notes: gracenotes1 }), 0);\r\n    notes2[1].addModifier(f.GraceNoteGroup({ notes: gracenotes2 }).beamNotes(), 0);\r\n    notes2[5].addModifier(f.GraceNoteGroup({ notes: gracenotes3 }).beamNotes(), 0);\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    const voice2 = f.Voice().setStrict(false).addTickables(notes2);\r\n    f.Beam({ notes: notes.slice(0, 4) });\r\n    f.Beam({ notes: notes.slice(4, 8) });\r\n    f.Beam({ notes: notes2.slice(0, 4) });\r\n    f.Beam({ notes: notes2.slice(4, 8) });\r\n    f.Formatter().joinVoices([voice, voice2]).formatToStave([voice, voice2], stave);\r\n    f.draw();\r\n    ok(true, 'Sixteenth Test');\r\n}\r\nfunction multipleVoicesMultipleDraws(options) {\r\n    const f = VexFlowTests.makeFactory(options, 450, 140);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 450 });\r\n    const notes = [\r\n        { keys: ['f/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['f/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['d/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['c/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['c/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['d/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['f/5'], stem_direction: 1, duration: '16' },\r\n        { keys: ['e/5'], stem_direction: 1, duration: '16' },\r\n    ].map(f.StaveNote.bind(f));\r\n    const notes2 = [\r\n        { keys: ['f/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['e/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['d/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['c/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['c/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['d/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['f/4'], stem_direction: -1, duration: '16' },\r\n        { keys: ['e/4'], stem_direction: -1, duration: '16' },\r\n    ].map(f.StaveNote.bind(f));\r\n    const gracenotes1 = [{ keys: ['b/4'], stem_direction: 1, duration: '8', slash: true }].map(f.GraceNote.bind(f));\r\n    const gracenotes2 = [{ keys: ['f/4'], stem_direction: -1, duration: '8', slash: true }].map(f.GraceNote.bind(f));\r\n    const gracenotes3 = [\r\n        { keys: ['f/4'], duration: '32', stem_direction: -1 },\r\n        { keys: ['e/4'], duration: '32', stem_direction: -1 },\r\n    ].map(f.GraceNote.bind(f));\r\n    const gracenotes4 = [\r\n        { keys: ['f/5'], duration: '32', stem_direction: 1 },\r\n        { keys: ['e/5'], duration: '32', stem_direction: 1 },\r\n        { keys: ['e/5'], duration: '8', stem_direction: 1 },\r\n    ].map(f.GraceNote.bind(f));\r\n    gracenotes2[0].setStemDirection(-1);\r\n    gracenotes2[0].addModifier(f.Accidental({ type: '#' }), 0);\r\n    notes[1].addModifier(f.GraceNoteGroup({ notes: gracenotes4 }).beamNotes(), 0);\r\n    notes[3].addModifier(f.GraceNoteGroup({ notes: gracenotes1 }), 0);\r\n    notes2[1].addModifier(f.GraceNoteGroup({ notes: gracenotes2 }).beamNotes(), 0);\r\n    notes2[5].addModifier(f.GraceNoteGroup({ notes: gracenotes3 }).beamNotes(), 0);\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    const voice2 = f.Voice().setStrict(false).addTickables(notes2);\r\n    f.Beam({ notes: notes.slice(0, 4) });\r\n    f.Beam({ notes: notes.slice(4, 8) });\r\n    f.Beam({ notes: notes2.slice(0, 4) });\r\n    f.Beam({ notes: notes2.slice(4, 8) });\r\n    f.Formatter().joinVoices([voice, voice2]).formatToStave([voice, voice2], stave);\r\n    f.draw();\r\n    f.draw();\r\n    ok(true, 'Seventeenth Test');\r\n}\r\nVexFlowTests.register(GraceNoteTests);\r\nexport { GraceNoteTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// GraceTabNote Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Flow } from '../src/flow';\r\nimport { Formatter } from '../src/formatter';\r\nimport { GraceNoteGroup } from '../src/gracenotegroup';\r\nimport { GraceTabNote } from '../src/gracetabnote';\r\nimport { TabNote } from '../src/tabnote';\r\nimport { TabStave } from '../src/tabstave';\r\nimport { Voice } from '../src/voice';\r\nconst GraceTabNoteTests = {\r\n    Start() {\r\n        QUnit.module('Grace Tab Notes');\r\n        // TODO: Rename tests below since it is redundant with the module name.\r\n        // Remove \"Grace Tab Note \"\r\n        const run = VexFlowTests.runTests;\r\n        run('Grace Tab Note Simple', simple);\r\n        run('Grace Tab Note Slurred', slurred);\r\n    },\r\n};\r\n// Helper functions to create TabNote and GraceTabNote objects.\r\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\r\nconst graceTabNote = (noteStruct) => new GraceTabNote(noteStruct);\r\n/**\r\n * Helper function to build a RenderContext and TabStave.\r\n */\r\nfunction setupContext(opts, ctxBuilder) {\r\n    const context = ctxBuilder(opts.elementId, 350, 140);\r\n    const stave = new TabStave(10, 10, 350).addTabGlyph().setContext(context).draw();\r\n    return { context, stave };\r\n}\r\nfunction simple(options, contextBuilder) {\r\n    const { context, stave } = setupContext(options, contextBuilder);\r\n    const note0 = tabNote({ positions: [{ str: 4, fret: 6 }], duration: '4' });\r\n    const note1 = tabNote({ positions: [{ str: 4, fret: 12 }], duration: '4' });\r\n    const note2 = tabNote({ positions: [{ str: 4, fret: 10 }], duration: '4' });\r\n    const note3 = tabNote({ positions: [{ str: 4, fret: 10 }], duration: '4' });\r\n    const gracenote_group0 = [{ positions: [{ str: 4, fret: 'x' }], duration: '8' }];\r\n    const gracenote_group1 = [\r\n        { positions: [{ str: 4, fret: 9 }], duration: '16' },\r\n        { positions: [{ str: 4, fret: 10 }], duration: '16' },\r\n    ];\r\n    const gracenote_group2 = [{ positions: [{ str: 4, fret: 9 }], duration: '8' }];\r\n    const gracenote_group3 = [\r\n        { positions: [{ str: 5, fret: 10 }], duration: '8' },\r\n        { positions: [{ str: 4, fret: 9 }], duration: '8' },\r\n    ];\r\n    const gracenotes0 = gracenote_group0.map(graceTabNote);\r\n    const gracenotes1 = gracenote_group1.map(graceTabNote);\r\n    const gracenotes2 = gracenote_group2.map(graceTabNote);\r\n    gracenotes2[0].setGhost(true);\r\n    const gracenotes3 = gracenote_group3.map(graceTabNote);\r\n    note0.addModifier(new GraceNoteGroup(gracenotes0), 0);\r\n    note1.addModifier(new GraceNoteGroup(gracenotes1), 0);\r\n    note2.addModifier(new GraceNoteGroup(gracenotes2), 0);\r\n    note3.addModifier(new GraceNoteGroup(gracenotes3), 0);\r\n    const voice = new Voice(Flow.TIME4_4);\r\n    voice.addTickables([note0, note1, note2, note3]);\r\n    new Formatter().joinVoices([voice]).format([voice], 250);\r\n    voice.draw(context, stave);\r\n    ok(true, 'Simple Test');\r\n}\r\nfunction slurred(options, contextBuilder) {\r\n    const { context, stave } = setupContext(options, contextBuilder);\r\n    const note0 = tabNote({ positions: [{ str: 4, fret: 12 }], duration: 'h' });\r\n    const note1 = tabNote({ positions: [{ str: 4, fret: 10 }], duration: 'h' });\r\n    const gracenote_group0 = [\r\n        { positions: [{ str: 4, fret: 9 }], duration: '8' },\r\n        { positions: [{ str: 4, fret: 10 }], duration: '8' },\r\n    ];\r\n    const gracenote_group1 = [\r\n        { positions: [{ str: 4, fret: 7 }], duration: '16' },\r\n        { positions: [{ str: 4, fret: 8 }], duration: '16' },\r\n        { positions: [{ str: 4, fret: 9 }], duration: '16' },\r\n    ];\r\n    const gracenotes0 = gracenote_group0.map(graceTabNote);\r\n    const gracenotes1 = gracenote_group1.map(graceTabNote);\r\n    note0.addModifier(new GraceNoteGroup(gracenotes0, true), 0);\r\n    note1.addModifier(new GraceNoteGroup(gracenotes1, true), 0);\r\n    const voice = new Voice(Flow.TIME4_4);\r\n    voice.addTickables([note0, note1]);\r\n    new Formatter().joinVoices([voice]).format([voice], 200);\r\n    voice.draw(context, stave);\r\n    ok(true, 'Slurred Test');\r\n}\r\nVexFlowTests.register(GraceTabNoteTests);\r\nexport { GraceTabNoteTests };\r\n","// vexflow-debug-with-tests.ts includes this module via:\r\n//   export * from '../../tests';\r\n//\r\n// To add a new test module, add a new line:\r\n//   `export * from './xxxx_tests';`\r\n// to this file that points to the new file `xxxx_tests.ts`.\r\n//\r\n// The test module needs to call VexFlowTests.register(...).\r\n// For example, in annotation_tests.ts, the last two lines are:\r\n//   VexFlowTests.register(AnnotationTests);\r\n//   export { AnnotationTests };\r\n//\r\n// In vexflow_test_helpers.ts: VexFlowTests.run() will run all registered tests.\r\n//\r\n// To iterate faster during development, you can comment out most of this file\r\n// and focus on just testing the module(s) you are currently working on.\r\nexport * from './accidental_tests';\r\nexport * from './annotation_tests';\r\nexport * from './articulation_tests';\r\nexport * from './auto_beam_formatting_tests';\r\nexport * from './bach_tests';\r\nexport * from './barline_tests';\r\nexport * from './beam_tests';\r\nexport * from './bend_tests';\r\nexport * from './boundingbox_tests';\r\nexport * from './boundingboxcomputation_tests';\r\nexport * from './chordsymbol_tests';\r\nexport * from './clef_tests';\r\nexport * from './curve_tests';\r\nexport * from './dot_tests';\r\nexport * from './easyscore_tests';\r\nexport * from './factory_tests';\r\nexport * from './font_tests';\r\nexport * from './formatter_tests';\r\nexport * from './fraction_tests';\r\nexport * from './ghostnote_tests';\r\nexport * from './glyphnote_tests';\r\nexport * from './gracenote_tests';\r\nexport * from './gracetabnote_tests';\r\nexport * from './key_clef_tests';\r\nexport * from './keymanager_tests';\r\nexport * from './keysignature_tests';\r\nexport * from './modifier_tests';\r\nexport * from './multimeasurerest_tests';\r\nexport * from './music_tests';\r\nexport * from './notehead_tests';\r\nexport * from './notesubgroup_tests';\r\nexport * from './offscreencanvas_tests';\r\nexport * from './ornament_tests';\r\nexport * from './parser_tests';\r\nexport * from './pedalmarking_tests';\r\nexport * from './percussion_tests';\r\nexport * from './registry_tests';\r\nexport * from './renderer_tests';\r\nexport * from './rests_tests';\r\nexport * from './rhythm_tests';\r\nexport * from './stave_tests';\r\nexport * from './staveconnector_tests';\r\nexport * from './stavehairpin_tests';\r\nexport * from './staveline_tests';\r\nexport * from './stavemodifier_tests';\r\nexport * from './stavenote_tests';\r\nexport * from './stavetie_tests';\r\nexport * from './stringnumber_tests';\r\nexport * from './strokes_tests';\r\nexport * from './style_tests';\r\nexport * from './tabnote_tests';\r\nexport * from './tabslide_tests';\r\nexport * from './tabstave_tests';\r\nexport * from './tabtie_tests';\r\nexport * from './textbracket_tests';\r\nexport * from './textformatter_tests';\r\nexport * from './textnote_tests';\r\nexport * from './threevoice_tests';\r\nexport * from './tickcontext_tests';\r\nexport * from './timesignature_tests';\r\nexport * from './tremolo_tests';\r\nexport * from './tuning_tests';\r\nexport * from './tuplet_tests';\r\nexport * from './typeguard_tests';\r\nexport * from './vf_prefix_tests';\r\nexport * from './vibrato_tests';\r\nexport * from './vibratobracket_tests';\r\nexport * from './voice_tests';\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Clef Key Signature Tests\r\n//\r\nimport { MAJOR_KEYS, MINOR_KEYS, VexFlowTests } from './vexflow_test_helpers';\r\nimport { Glyph } from '../src/glyph';\r\nimport { KeySignature } from '../src/keysignature';\r\nimport { Stave } from '../src/stave';\r\nconst ClefKeySignatureTests = {\r\n    Start() {\r\n        QUnit.module('Clef Keys');\r\n        // Removed an identical 'Key Parser Test'. See keysignature_tests.ts.\r\n        const run = VexFlowTests.runTests;\r\n        run('Major Key Clef Test', keys, { majorKeys: true });\r\n        run('Minor Key Clef Test', keys, { majorKeys: false });\r\n        run('Stave Helper', staveHelper);\r\n    },\r\n};\r\nconst fontWidths = () => {\r\n    const glyphScale = 39; // default font scale\r\n    const sharpWidth = Glyph.getWidth('accidentalSharp', glyphScale) + 1;\r\n    const flatWidth = Glyph.getWidth('accidentalFlat', glyphScale) + 1;\r\n    const ksPadding = 10; // hard-coded in keysignature.ts\r\n    const naturalWidth = Glyph.getWidth('accidentalNatural', glyphScale) + 2;\r\n    const clefWidth = Glyph.getWidth('gClef', glyphScale); // widest clef\r\n    return { sharpWidth, flatWidth, naturalWidth, clefWidth, ksPadding };\r\n};\r\nfunction keys(options, contextBuilder) {\r\n    const w = fontWidths();\r\n    const accidentalCount = 28; // total number in all the keys\r\n    const sharpTestWidth = accidentalCount * w.sharpWidth + w.clefWidth + Stave.defaultPadding + 6 * w.ksPadding;\r\n    const flatTestWidth = accidentalCount * w.flatWidth + w.clefWidth + Stave.defaultPadding + 6 * w.ksPadding;\r\n    const clefs = [\r\n        'treble',\r\n        'soprano',\r\n        'mezzo-soprano',\r\n        'alto',\r\n        'tenor',\r\n        'baritone-f',\r\n        'baritone-c',\r\n        'bass',\r\n        'french',\r\n        'subbass',\r\n        'percussion',\r\n    ];\r\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 20 + 80 * 2 * clefs.length);\r\n    const staves = [];\r\n    const keys = options.params.majorKeys ? MAJOR_KEYS : MINOR_KEYS;\r\n    let i;\r\n    let flat;\r\n    let sharp;\r\n    let keySig;\r\n    const yOffsetForFlatStaves = 10 + 80 * clefs.length;\r\n    for (i = 0; i < clefs.length; i++) {\r\n        // Render all the sharps first, then all the flats:\r\n        staves[i] = new Stave(10, 10 + 80 * i, flatTestWidth);\r\n        staves[i].addClef(clefs[i]);\r\n        staves[i + clefs.length] = new Stave(10, yOffsetForFlatStaves + 10 + 80 * i, sharpTestWidth);\r\n        staves[i + clefs.length].addClef(clefs[i]);\r\n        for (flat = 0; flat < 8; flat++) {\r\n            keySig = new KeySignature(keys[flat]);\r\n            keySig.addToStave(staves[i]);\r\n        }\r\n        for (sharp = 8; sharp < keys.length; sharp++) {\r\n            keySig = new KeySignature(keys[sharp]);\r\n            keySig.addToStave(staves[i + clefs.length]);\r\n        }\r\n        staves[i].setContext(ctx);\r\n        staves[i].draw();\r\n        staves[i + clefs.length].setContext(ctx);\r\n        staves[i + clefs.length].draw();\r\n    }\r\n    ok(true, 'all pass');\r\n}\r\nfunction staveHelper(options, contextBuilder) {\r\n    const w = fontWidths();\r\n    const accidentalCount = 28; // total number in all the keys\r\n    const sharpTestWidth = accidentalCount * w.sharpWidth + w.clefWidth + Stave.defaultPadding + 7 * w.ksPadding;\r\n    const flatTestWidth = accidentalCount * w.flatWidth + w.clefWidth + Stave.defaultPadding + 7 * w.ksPadding;\r\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 400);\r\n    const stave1 = new Stave(10, 10, flatTestWidth);\r\n    const stave2 = new Stave(10, 90, flatTestWidth);\r\n    const stave3 = new Stave(10, 170, sharpTestWidth);\r\n    const stave4 = new Stave(10, 260, sharpTestWidth);\r\n    const keys = MAJOR_KEYS;\r\n    stave1.addClef('treble');\r\n    stave2.addClef('bass');\r\n    stave3.addClef('alto');\r\n    stave4.addClef('tenor');\r\n    for (let n = 0; n < 8; ++n) {\r\n        stave1.addKeySignature(keys[n]);\r\n        stave2.addKeySignature(keys[n]);\r\n    }\r\n    for (let i = 8; i < keys.length; ++i) {\r\n        stave3.addKeySignature(keys[i]);\r\n        stave4.addKeySignature(keys[i]);\r\n    }\r\n    stave1.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.setContext(ctx);\r\n    stave2.draw();\r\n    stave3.setContext(ctx);\r\n    stave3.draw();\r\n    stave4.setContext(ctx);\r\n    stave4.draw();\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(ClefKeySignatureTests);\r\nexport { ClefKeySignatureTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Music Key Management Tests\r\n//\r\n// TODO: KeyManager.getAccidental(key) specifies that the return value's .accidental property is string | undefined.\r\n//       However, we check it against null.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { KeyManager } from '../src/index';\r\nconst KeyManagerTests = {\r\n    Start() {\r\n        QUnit.module('KeyManager');\r\n        test('Valid Notes', works);\r\n        test('Select Notes', selectNotes);\r\n    },\r\n};\r\nfunction works() {\r\n    const manager = new KeyManager('g');\r\n    equal(manager.getAccidental('f').accidental, '#');\r\n    manager.setKey('a');\r\n    equal(manager.getAccidental('c').accidental, '#');\r\n    equal(manager.getAccidental('a').accidental, null);\r\n    equal(manager.getAccidental('f').accidental, '#');\r\n    manager.setKey('A');\r\n    equal(manager.getAccidental('c').accidental, '#');\r\n    equal(manager.getAccidental('a').accidental, null);\r\n    equal(manager.getAccidental('f').accidental, '#');\r\n}\r\nfunction selectNotes() {\r\n    const manager = new KeyManager('f');\r\n    equal(manager.selectNote('bb').note, 'bb');\r\n    equal(manager.selectNote('bb').accidental, 'b');\r\n    equal(manager.selectNote('g').note, 'g');\r\n    equal(manager.selectNote('g').accidental, null);\r\n    equal(manager.selectNote('b').note, 'b');\r\n    equal(manager.selectNote('b').accidental, null);\r\n    equal(manager.selectNote('a#').note, 'bb');\r\n    equal(manager.selectNote('g#').note, 'g#');\r\n    // Changes have no effect?\r\n    equal(manager.selectNote('g#').note, 'g#');\r\n    equal(manager.selectNote('bb').note, 'bb');\r\n    equal(manager.selectNote('bb').accidental, 'b');\r\n    equal(manager.selectNote('g').note, 'g');\r\n    equal(manager.selectNote('g').accidental, null);\r\n    equal(manager.selectNote('b').note, 'b');\r\n    equal(manager.selectNote('b').accidental, null);\r\n    equal(manager.selectNote('a#').note, 'bb');\r\n    equal(manager.selectNote('g#').note, 'g#');\r\n    // Changes should propagate\r\n    manager.reset();\r\n    equal(manager.selectNote('g#').change, true);\r\n    equal(manager.selectNote('g#').change, false);\r\n    equal(manager.selectNote('g').change, true);\r\n    equal(manager.selectNote('g').change, false);\r\n    equal(manager.selectNote('g#').change, true);\r\n    manager.reset();\r\n    let note = manager.selectNote('bb');\r\n    equal(note.change, false);\r\n    equal(note.accidental, 'b');\r\n    note = manager.selectNote('g');\r\n    equal(note.change, false);\r\n    equal(note.accidental, null);\r\n    note = manager.selectNote('g#');\r\n    equal(note.change, true);\r\n    equal(note.accidental, '#');\r\n    note = manager.selectNote('g');\r\n    equal(note.change, true);\r\n    equal(note.accidental, null);\r\n    note = manager.selectNote('g');\r\n    equal(note.change, false);\r\n    equal(note.accidental, null);\r\n    note = manager.selectNote('g#');\r\n    equal(note.change, true);\r\n    equal(note.accidental, '#');\r\n}\r\nVexFlowTests.register(KeyManagerTests);\r\nexport { KeyManagerTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Key Signature Tests\r\n//\r\nimport { MAJOR_KEYS, MINOR_KEYS, VexFlowTests } from './vexflow_test_helpers';\r\nimport { Flow } from '../src/flow';\r\nimport { Glyph } from '../src/glyph';\r\nimport { KeySignature } from '../src/keysignature';\r\nimport { Stave } from '../src/stave';\r\nimport { BarlineType } from '../src/stavebarline';\r\nconst KeySignatureTests = {\r\n    Start() {\r\n        QUnit.module('KeySignature');\r\n        test('Key Parser Test', parser);\r\n        const run = VexFlowTests.runTests;\r\n        run('Major Key Test', majorKeys);\r\n        run('Minor Key Test', minorKeys);\r\n        run('Stave Helper', staveHelper);\r\n        run('Cancelled key test', majorKeysCanceled);\r\n        run('Cancelled key (for each clef) test', keysCanceledForEachClef);\r\n        run('Altered key test', majorKeysAltered);\r\n        run('End key with clef test', endKeyWithClef);\r\n        run('Key Signature Change test', changeKey);\r\n    },\r\n};\r\nconst fontWidths = () => {\r\n    const glyphScale = 39; // default font scale\r\n    const sharpWidth = Glyph.getWidth('accidentalSharp', glyphScale) + 1;\r\n    const flatWidth = Glyph.getWidth('accidentalFlat', glyphScale) + 1;\r\n    const naturalWidth = Glyph.getWidth('accidentalNatural', glyphScale) + 2;\r\n    const clefWidth = Glyph.getWidth('gClef', glyphScale) * 2; // widest clef\r\n    return { sharpWidth, flatWidth, naturalWidth, clefWidth };\r\n};\r\nfunction parser() {\r\n    expect(11);\r\n    function catchError(spec) {\r\n        throws(() => Flow.keySignature(spec), /BadKeySignature/);\r\n    }\r\n    catchError('asdf');\r\n    catchError('D!');\r\n    catchError('E#');\r\n    catchError('D#');\r\n    catchError('#');\r\n    catchError('b');\r\n    catchError('Kb');\r\n    catchError('Fb');\r\n    catchError('Dbm');\r\n    catchError('B#m');\r\n    Flow.keySignature('B');\r\n    Flow.keySignature('C');\r\n    Flow.keySignature('Fm');\r\n    Flow.keySignature('Ab');\r\n    Flow.keySignature('Abm');\r\n    Flow.keySignature('F#');\r\n    Flow.keySignature('G#m');\r\n    ok(true, 'all pass');\r\n}\r\nfunction majorKeys(options, contextBuilder) {\r\n    const w = fontWidths();\r\n    const accidentalCount = 28; // total number in all the keys\r\n    const casePadding = 10; // hard-coded in staveModifier\r\n    const testCases = 7; // all keys, but includes key of C\r\n    const sharpTestWidth = accidentalCount * w.sharpWidth + casePadding * testCases + Stave.defaultPadding;\r\n    const flatTestWidth = accidentalCount * w.flatWidth + casePadding * testCases + Stave.defaultPadding;\r\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 240);\r\n    const stave1 = new Stave(10, 10, flatTestWidth);\r\n    const stave2 = new Stave(10, 90, sharpTestWidth);\r\n    const keys = MAJOR_KEYS;\r\n    let keySig = null;\r\n    for (let i = 0; i < 8; ++i) {\r\n        keySig = new KeySignature(keys[i]);\r\n        keySig.addToStave(stave1);\r\n    }\r\n    for (let n = 8; n < keys.length; ++n) {\r\n        keySig = new KeySignature(keys[n]);\r\n        keySig.addToStave(stave2);\r\n    }\r\n    stave1.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.setContext(ctx);\r\n    stave2.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction majorKeysCanceled(options, contextBuilder) {\r\n    const scale = 0.9;\r\n    const w = fontWidths();\r\n    const flatPadding = 18;\r\n    const sharpPadding = 20;\r\n    const flatTestCases = 8;\r\n    const sharpTestCases = 7;\r\n    // magic numbers are the numbers of that symbol that appear in the test case\r\n    const sharpTestWidth = 28 * w.sharpWidth + 21 * w.naturalWidth + sharpPadding * sharpTestCases + Stave.defaultPadding + w.clefWidth;\r\n    const flatTestWidth = 28 * w.flatWidth + 28 * w.naturalWidth + flatPadding * flatTestCases + Stave.defaultPadding + w.clefWidth;\r\n    const eFlatTestWidth = 28 * w.flatWidth + 32 * w.naturalWidth + flatPadding * flatTestCases + Stave.defaultPadding + w.clefWidth;\r\n    const eSharpTestWidth = 28 * w.sharpWidth + 28 * w.naturalWidth + sharpPadding * sharpTestCases + Stave.defaultPadding + w.clefWidth;\r\n    const maxWidth = Math.max(Math.max(sharpTestWidth, flatTestWidth, Math.max(eSharpTestWidth, eFlatTestWidth)));\r\n    const ctx = contextBuilder(options.elementId, maxWidth + 100, 500);\r\n    ctx.scale(scale, scale);\r\n    const stave1 = new Stave(10, 10, flatTestWidth).addClef('treble');\r\n    const stave2 = new Stave(10, 90, sharpTestWidth).addClef('treble');\r\n    const stave3 = new Stave(10, 170, eFlatTestWidth).addClef('treble');\r\n    const stave4 = new Stave(10, 250, eSharpTestWidth).addClef('treble');\r\n    const keys = MAJOR_KEYS;\r\n    let keySig = null;\r\n    let i;\r\n    let n;\r\n    for (i = 0; i < 8; ++i) {\r\n        keySig = new KeySignature(keys[i]);\r\n        keySig.cancelKey('Cb');\r\n        keySig.setPadding(flatPadding);\r\n        keySig.addToStave(stave1);\r\n    }\r\n    for (n = 8; n < keys.length; ++n) {\r\n        keySig = new KeySignature(keys[n]);\r\n        keySig.cancelKey('C#');\r\n        keySig.setPadding(sharpPadding);\r\n        keySig.addToStave(stave2);\r\n    }\r\n    for (i = 0; i < 8; ++i) {\r\n        keySig = new KeySignature(keys[i]);\r\n        keySig.cancelKey('E');\r\n        keySig.setPadding(flatPadding);\r\n        keySig.addToStave(stave3);\r\n    }\r\n    for (n = 8; n < keys.length; ++n) {\r\n        keySig = new KeySignature(keys[n]);\r\n        keySig.cancelKey('Ab');\r\n        keySig.setPadding(sharpPadding);\r\n        keySig.addToStave(stave4);\r\n    }\r\n    stave1.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.setContext(ctx);\r\n    stave2.draw();\r\n    stave3.setContext(ctx);\r\n    stave3.draw();\r\n    stave4.setContext(ctx);\r\n    stave4.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction keysCanceledForEachClef(options, contextBuilder) {\r\n    const scale = 0.8;\r\n    const w = fontWidths();\r\n    const keyPadding = 10;\r\n    const keys = ['C#', 'Cb'];\r\n    const flatsKey = [7, 14];\r\n    const sharpsKey = [14, 7];\r\n    const natsKey = [7, 7];\r\n    const max = 21 * Math.max(w.sharpWidth, w.flatWidth) * 2 + keyPadding * 6 + Stave.defaultPadding + w.clefWidth;\r\n    const ctx = contextBuilder(options.elementId, max + 100, 380);\r\n    ctx.scale(scale, scale);\r\n    const x = 20;\r\n    let y = 20;\r\n    let tx = x;\r\n    ['bass', 'tenor', 'soprano', 'mezzo-soprano', 'baritone-f'].forEach(function (clef) {\r\n        keys.forEach((key, keyIx) => {\r\n            const cancelKey = keys[(keyIx + 1) % 2];\r\n            const width = flatsKey[keyIx] * w.flatWidth +\r\n                natsKey[keyIx] * w.naturalWidth +\r\n                sharpsKey[keyIx] * w.sharpWidth +\r\n                keyPadding * 3 +\r\n                w.clefWidth +\r\n                Stave.defaultPadding;\r\n            const stave = new Stave(tx, y, width);\r\n            stave.setClef(clef);\r\n            stave.addKeySignature(cancelKey);\r\n            stave.addKeySignature(key, cancelKey);\r\n            stave.addKeySignature(key);\r\n            stave.setContext(ctx).draw();\r\n            tx += width;\r\n        });\r\n        tx = x;\r\n        y += 80;\r\n    });\r\n    ok(true, 'all pass');\r\n}\r\nfunction majorKeysAltered(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 780, 500);\r\n    ctx.scale(0.9, 0.9);\r\n    const stave1 = new Stave(10, 10, 750).addClef('treble');\r\n    const stave2 = new Stave(10, 90, 750).addClef('treble');\r\n    const stave3 = new Stave(10, 170, 750).addClef('treble');\r\n    const stave4 = new Stave(10, 250, 750).addClef('treble');\r\n    const keys = MAJOR_KEYS;\r\n    let keySig = null;\r\n    let i;\r\n    let n;\r\n    for (i = 0; i < 8; ++i) {\r\n        keySig = new KeySignature(keys[i]);\r\n        keySig.alterKey(['bs', 'bs']);\r\n        keySig.setPadding(18);\r\n        keySig.addToStave(stave1);\r\n    }\r\n    for (n = 8; n < keys.length; ++n) {\r\n        keySig = new KeySignature(keys[n]);\r\n        keySig.alterKey(['+', '+', '+']);\r\n        keySig.setPadding(20);\r\n        keySig.addToStave(stave2);\r\n    }\r\n    for (i = 0; i < 8; ++i) {\r\n        keySig = new KeySignature(keys[i]);\r\n        keySig.alterKey(['n', 'bs', 'bb']);\r\n        keySig.setPadding(18);\r\n        keySig.addToStave(stave3);\r\n    }\r\n    for (n = 8; n < keys.length; ++n) {\r\n        keySig = new KeySignature(keys[n]);\r\n        keySig.alterKey(['++', '+', 'n', '+']);\r\n        keySig.setPadding(20);\r\n        keySig.addToStave(stave4);\r\n    }\r\n    stave1.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.setContext(ctx);\r\n    stave2.draw();\r\n    stave3.setContext(ctx);\r\n    stave3.draw();\r\n    stave4.setContext(ctx);\r\n    stave4.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction minorKeys(options, contextBuilder) {\r\n    const accidentalCount = 28; // total number in all the keys\r\n    const w = fontWidths();\r\n    const casePadding = 10; // hard-coded in staveModifier\r\n    const testCases = 7; // all keys, but includes key of C\r\n    const sharpTestWidth = accidentalCount * w.sharpWidth + casePadding * testCases + Stave.defaultPadding;\r\n    const flatTestWidth = accidentalCount * w.flatWidth + casePadding * testCases + Stave.defaultPadding;\r\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 240);\r\n    const stave1 = new Stave(10, 10, flatTestWidth);\r\n    const stave2 = new Stave(10, 90, sharpTestWidth);\r\n    const keys = MINOR_KEYS;\r\n    let keySig = null;\r\n    for (let i = 0; i < 8; ++i) {\r\n        keySig = new KeySignature(keys[i]);\r\n        keySig.addToStave(stave1);\r\n    }\r\n    for (let n = 8; n < keys.length; ++n) {\r\n        keySig = new KeySignature(keys[n]);\r\n        keySig.addToStave(stave2);\r\n    }\r\n    stave1.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.setContext(ctx);\r\n    stave2.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction endKeyWithClef(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 200);\r\n    ctx.scale(0.9, 0.9);\r\n    const stave1 = new Stave(10, 10, 350);\r\n    stave1\r\n        .setKeySignature('G')\r\n        .setBegBarType(BarlineType.REPEAT_BEGIN)\r\n        .setEndBarType(BarlineType.REPEAT_END)\r\n        .setClef('treble')\r\n        .addTimeSignature('4/4')\r\n        .setEndClef('bass')\r\n        .setEndKeySignature('Cb');\r\n    const stave2 = new Stave(10, 90, 350);\r\n    stave2.setKeySignature('Cb').setClef('bass').setEndClef('treble').setEndKeySignature('G');\r\n    stave1.setContext(ctx).draw();\r\n    stave2.setContext(ctx).draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction staveHelper(options, contextBuilder) {\r\n    const w = fontWidths();\r\n    const accidentalCount = 28; // total number in all the keys\r\n    const casePadding = 10; // hard-coded in staveModifier\r\n    const testCases = 7; // all keys, but includes key of C\r\n    const sharpTestWidth = accidentalCount * w.sharpWidth + casePadding * testCases + Stave.defaultPadding;\r\n    const flatTestWidth = accidentalCount * w.flatWidth + casePadding * testCases + Stave.defaultPadding;\r\n    const ctx = contextBuilder(options.elementId, Math.max(sharpTestWidth, flatTestWidth) + 100, 240);\r\n    const stave1 = new Stave(10, 10, flatTestWidth);\r\n    const stave2 = new Stave(10, 90, sharpTestWidth);\r\n    const keys = MAJOR_KEYS;\r\n    for (let i = 0; i < 8; ++i) {\r\n        stave1.addKeySignature(keys[i]);\r\n    }\r\n    for (let n = 8; n < keys.length; ++n) {\r\n        stave2.addKeySignature(keys[n]);\r\n    }\r\n    stave1.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.setContext(ctx);\r\n    stave2.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction changeKey(options) {\r\n    const f = VexFlowTests.makeFactory(options, 900);\r\n    // The previous code was buggy: f.Stave(10, 10, 800), even though Factory.Stave() only accepts 1 argument.\r\n    const stave = f.Stave({ x: 10, y: 10, width: 800 }).addClef('treble').addTimeSignature('C|');\r\n    const voice = f\r\n        .Voice()\r\n        .setStrict(false)\r\n        .addTickables([\r\n        f.KeySigNote({ key: 'Bb' }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '1' }),\r\n        f.BarNote(),\r\n        f.KeySigNote({ key: 'D', cancelKey: 'Bb' }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '1' }),\r\n        f.BarNote(),\r\n        f.KeySigNote({ key: 'Bb' }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '1' }),\r\n        f.BarNote(),\r\n        f.KeySigNote({ key: 'D', alterKey: ['b', 'n'] }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '1' }),\r\n    ]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(KeySignatureTests);\r\nexport { KeySignatureTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// TickContext Mocks\r\nimport { Fraction } from '../src/fraction';\r\nimport { Tickable } from '../src/tickable';\r\nclass MockTickable extends Tickable {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.ticks = new Fraction(1, 1);\r\n        this.width = 0;\r\n        this.ignore_ticks = false;\r\n    }\r\n    init() {\r\n        // DO NOTHING.\r\n    }\r\n    getX() {\r\n        // eslint-disable-next-line\r\n        return this.tickContext.getX();\r\n    }\r\n    getIntrinsicTicks() {\r\n        return this.ticks.value();\r\n    }\r\n    getTicks() {\r\n        return this.ticks;\r\n    }\r\n    setTicks(t) {\r\n        this.ticks = new Fraction(t, 1);\r\n        return this;\r\n    }\r\n    // Called by TickContext.preFormat().\r\n    getMetrics() {\r\n        return {\r\n            width: 0,\r\n            glyphWidth: 0,\r\n            notePx: this.width,\r\n            modLeftPx: 0,\r\n            modRightPx: 0,\r\n            leftDisplacedHeadPx: 0,\r\n            rightDisplacedHeadPx: 0,\r\n            glyphPx: 0,\r\n        };\r\n    }\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    setWidth(w) {\r\n        this.width = w;\r\n        return this;\r\n    }\r\n    setVoice(v) {\r\n        this.voice = v;\r\n        return this;\r\n    }\r\n    setStave(stave) {\r\n        this.stave = stave;\r\n        return this;\r\n    }\r\n    getStave() {\r\n        return this.stave;\r\n    }\r\n    setTickContext(tc) {\r\n        this.tickContext = tc;\r\n        return this;\r\n    }\r\n    setIgnoreTicks(flag) {\r\n        this.ignore_ticks = flag;\r\n        return this;\r\n    }\r\n    shouldIgnoreTicks() {\r\n        return this.ignore_ticks;\r\n    }\r\n    preFormat() {\r\n        // DO NOTHING.\r\n    }\r\n    // eslint-disable-next-line\r\n    draw(...args) {\r\n        // DO NOTHING.\r\n    }\r\n}\r\nexport { MockTickable };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// ModifierContext Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Modifier, ModifierContext } from '../src/index';\r\nconst ModifierContextTests = {\r\n    Start() {\r\n        QUnit.module('ModifierContext');\r\n        test('Modifier Width Test', width);\r\n        test('Modifier Management', management);\r\n    },\r\n};\r\nfunction width() {\r\n    const mc = new ModifierContext();\r\n    equal(mc.getWidth(), 0, 'New modifier context has no width');\r\n}\r\nfunction management() {\r\n    const mc = new ModifierContext();\r\n    const modifier1 = new Modifier();\r\n    const modifier2 = new Modifier();\r\n    mc.addMember(modifier1);\r\n    mc.addMember(modifier2);\r\n    const modifiers = mc.getMembers(Modifier.CATEGORY);\r\n    equal(modifiers.length, 2, 'Added two modifiers');\r\n}\r\nVexFlowTests.register(ModifierContextTests);\r\nexport { ModifierContextTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// MultiMeasureRest Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Flow } from '../src/flow';\r\nimport { Font } from '../src/font';\r\nconst MultiMeasureRestTests = {\r\n    Start() {\r\n        QUnit.module('MultiMeasureRest');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple Test', simple);\r\n        run('Stave with modifiers Test', staveWithModifiers);\r\n    },\r\n};\r\nfunction simple(options) {\r\n    const width = 910;\r\n    const f = VexFlowTests.makeFactory(options, width, 300);\r\n    const line_spacing_15px = { options: { spacing_between_lines_px: 15 } };\r\n    // Each item below is an array that contains:\r\n    //   item[0] => staveParams to adjust vertical spacing between lines\r\n    //   item[1] => multiMeasureRestParams\r\n    // eslint-disable-next-line\r\n    const params = [\r\n        [{}, { number_of_measures: 2, show_number: false }],\r\n        [{}, { number_of_measures: 2 }],\r\n        [{}, { number_of_measures: 2, line_thickness: 8, serif_thickness: 3 }],\r\n        [{}, { number_of_measures: 1, use_symbols: true }],\r\n        [{}, { number_of_measures: 2, use_symbols: true }],\r\n        [{}, { number_of_measures: 3, use_symbols: true }],\r\n        [{}, { number_of_measures: 4, use_symbols: true }],\r\n        [{}, { number_of_measures: 5, use_symbols: true }],\r\n        [{}, { number_of_measures: 6, use_symbols: true }],\r\n        [{}, { number_of_measures: 7, use_symbols: true }],\r\n        [{}, { number_of_measures: 8, use_symbols: true }],\r\n        [{}, { number_of_measures: 9, use_symbols: true }],\r\n        [{}, { number_of_measures: 10, use_symbols: true }],\r\n        [{}, { number_of_measures: 11, use_symbols: true }],\r\n        [{}, { number_of_measures: 11, use_symbols: false, padding_left: 20, padding_right: 20 }],\r\n        [{}, { number_of_measures: 11, use_symbols: true, symbol_spacing: 5 }],\r\n        [{}, { number_of_measures: 11, use_symbols: false, line: 3, number_line: 2 }],\r\n        [{}, { number_of_measures: 11, use_symbols: true, line: 3, number_line: 2 }],\r\n        [line_spacing_15px, { number_of_measures: 12 }],\r\n        [line_spacing_15px, { number_of_measures: 9, use_symbols: true }],\r\n        [line_spacing_15px, { number_of_measures: 12, spacing_between_lines_px: 15, number_glyph_point: 40 * 1.5 }],\r\n        [\r\n            line_spacing_15px,\r\n            {\r\n                number_of_measures: 9,\r\n                spacing_between_lines_px: 15,\r\n                use_symbols: true,\r\n                number_glyph_point: 40 * 1.5,\r\n            },\r\n        ],\r\n        [\r\n            line_spacing_15px,\r\n            {\r\n                number_of_measures: 9,\r\n                spacing_between_lines_px: 15,\r\n                use_symbols: true,\r\n                number_glyph_point: 40 * 1.5,\r\n                semibreve_rest_glyph_scale: Flow.NOTATION_FONT_SCALE * 1.5,\r\n            },\r\n        ],\r\n    ];\r\n    const staveWidth = 100;\r\n    let x = 0;\r\n    let y = 0;\r\n    const mmRests = params.map((param) => {\r\n        if (x + staveWidth * 2 > width) {\r\n            x = 0;\r\n            y += 80;\r\n        }\r\n        const staveParams = param[0];\r\n        const mmRestParams = param[1];\r\n        staveParams.x = x;\r\n        staveParams.y = y;\r\n        staveParams.width = staveWidth;\r\n        x += staveWidth;\r\n        const stave = f.Stave(staveParams);\r\n        return f.MultiMeasureRest(mmRestParams).setStave(stave);\r\n    });\r\n    f.draw();\r\n    const xs = mmRests[0].getXs();\r\n    // eslint-disable-next-line\r\n    const strY = mmRests[0].getStave().getYForLine(-0.5);\r\n    const str = 'TACET';\r\n    const context = f.getContext();\r\n    context.save();\r\n    context.setFont(Font.SERIF, 16, 'bold');\r\n    const metrics = context.measureText(str);\r\n    context.fillText(str, xs.left + (xs.right - xs.left) * 0.5 - metrics.width * 0.5, strY);\r\n    context.restore();\r\n    ok(true, 'Simple Test');\r\n}\r\nfunction staveWithModifiers(options) {\r\n    const width = 910;\r\n    const f = VexFlowTests.makeFactory(options, width, 200);\r\n    let x = 0;\r\n    let y = 0;\r\n    // eslint-disable-next-line\r\n    const params = [\r\n        [{ clef: 'treble', params: { width: 150 } }, { number_of_measures: 5 }],\r\n        [{ clef: 'treble', keySig: 'G', params: { width: 150 } }, { number_of_measures: 5 }],\r\n        [{ clef: 'treble', timeSig: '4/4', keySig: 'G', params: { width: 150 } }, { number_of_measures: 5 }],\r\n        [{ clef: 'treble', endClef: 'bass', params: { width: 150 } }, { number_of_measures: 5 }],\r\n        [{ clef: 'treble', endKeySig: 'F', params: { width: 150 } }, { number_of_measures: 5 }],\r\n        [{ clef: 'treble', endTimeSig: '2/4', params: { width: 150 } }, { number_of_measures: 5 }],\r\n        [{ clef: 'treble', endClef: 'bass', endTimeSig: '2/4', params: { width: 150 } }, { number_of_measures: 5 }],\r\n        [\r\n            { clef: 'treble', endClef: 'bass', endTimeSig: '2/4', params: { width: 150 } },\r\n            { number_of_measures: 5, use_symbols: true },\r\n        ],\r\n    ];\r\n    params.forEach((param) => {\r\n        const staveOptions = param[0];\r\n        // eslint-disable-next-line\r\n        const staveParams = staveOptions.params;\r\n        const mmrestParams = param[1];\r\n        if (x + staveParams.width > width) {\r\n            x = 0;\r\n            y += 80;\r\n        }\r\n        staveParams.x = x;\r\n        x += staveParams.width;\r\n        staveParams.y = y;\r\n        const stave = f.Stave(staveParams);\r\n        if (staveOptions.clef) {\r\n            stave.addClef(staveOptions.clef);\r\n        }\r\n        if (staveOptions.timeSig) {\r\n            stave.addTimeSignature(staveOptions.timeSig);\r\n        }\r\n        if (staveOptions.keySig) {\r\n            stave.addKeySignature(staveOptions.keySig);\r\n        }\r\n        if (staveOptions.endClef) {\r\n            stave.addEndClef(staveOptions.endClef);\r\n        }\r\n        if (staveOptions.endKeySig) {\r\n            stave.setEndKeySignature(staveOptions.endKeySig);\r\n        }\r\n        if (staveOptions.endTimeSig) {\r\n            stave.setEndTimeSignature(staveOptions.endTimeSig);\r\n        }\r\n        return f.MultiMeasureRest(mmrestParams).setStave(stave);\r\n    });\r\n    f.draw();\r\n    ok(true, 'Stave with modifiers Test');\r\n}\r\nVexFlowTests.register(MultiMeasureRestTests);\r\nexport { MultiMeasureRestTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Music Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { KeyManager } from '../src/keymanager';\r\nimport { Music } from '../src/music';\r\nconst MusicTests = {\r\n    Start() {\r\n        QUnit.module('MusicTests');\r\n        test('Valid Notes', validNotes);\r\n        test('Valid Keys', validKeys);\r\n        test('Note Values', noteValue);\r\n        test('Interval Values', intervalValue);\r\n        test('Relative Notes', relativeNotes);\r\n        test('Relative Note Names', relativeNoteNames);\r\n        test('Canonical Notes', canonicalNotes);\r\n        test('Canonical Intervals', canonicalIntervals);\r\n        test('Scale Tones', scaleTones);\r\n        test('Scale Intervals', scaleIntervals);\r\n    },\r\n};\r\nfunction validNotes() {\r\n    expect(10);\r\n    const music = new Music();\r\n    let parts = music.getNoteParts('c');\r\n    equal(parts.root, 'c');\r\n    equal(parts.accidental, null);\r\n    // getNoteParts() converts its argument to lowercase.\r\n    parts = music.getNoteParts('C');\r\n    equal(parts.root, 'c');\r\n    equal(parts.accidental, null);\r\n    parts = music.getNoteParts('c#');\r\n    equal(parts.root, 'c');\r\n    equal(parts.accidental, '#');\r\n    parts = music.getNoteParts('c##');\r\n    equal(parts.root, 'c');\r\n    equal(parts.accidental, '##');\r\n    throws(() => music.getNoteParts('r'), /BadArguments/, 'Invalid note: r');\r\n    throws(() => music.getNoteParts(''), /BadArguments/, \"Invalid note: ''\");\r\n}\r\nfunction validKeys() {\r\n    expect(18);\r\n    const music = new Music();\r\n    let parts = music.getKeyParts('c');\r\n    equal(parts.root, 'c');\r\n    equal(parts.accidental, null);\r\n    equal(parts.type, 'M');\r\n    parts = music.getKeyParts('d#');\r\n    equal(parts.root, 'd');\r\n    equal(parts.accidental, '#');\r\n    equal(parts.type, 'M');\r\n    parts = music.getKeyParts('fbm');\r\n    equal(parts.root, 'f');\r\n    equal(parts.accidental, 'b');\r\n    equal(parts.type, 'm');\r\n    parts = music.getKeyParts('c#mel');\r\n    equal(parts.root, 'c');\r\n    equal(parts.accidental, '#');\r\n    equal(parts.type, 'mel');\r\n    parts = music.getKeyParts('g#harm');\r\n    equal(parts.root, 'g');\r\n    equal(parts.accidental, '#');\r\n    equal(parts.type, 'harm');\r\n    throws(() => music.getKeyParts('r'), /BadArguments/, 'Invalid key: r');\r\n    throws(() => music.getKeyParts(''), /BadArguments/, `Invalid key: ''`);\r\n    throws(() => music.getKeyParts('#m'), /BadArguments/, 'Invalid key: #m');\r\n}\r\nfunction noteValue() {\r\n    expect(3);\r\n    const music = new Music();\r\n    let note = music.getNoteValue('c');\r\n    equal(note, 0);\r\n    throws(() => music.getNoteValue('r'), /BadArguments/, 'Invalid note name');\r\n    note = music.getNoteValue('f#');\r\n    equal(note, 6);\r\n}\r\nfunction intervalValue() {\r\n    expect(2);\r\n    const music = new Music();\r\n    const value = music.getIntervalValue('b2');\r\n    equal(value, 1);\r\n    throws(() => music.getIntervalValue('7'), /BadArguments/, 'Invalid interval name');\r\n}\r\nfunction relativeNotes() {\r\n    expect(8);\r\n    const music = new Music();\r\n    let value = music.getRelativeNoteValue(music.getNoteValue('c'), music.getIntervalValue('b5'));\r\n    equal(value, 6);\r\n    throws(() => music.getRelativeNoteValue(music.getNoteValue('bc'), music.getIntervalValue('b2')), /BadArguments/, 'Invalid note');\r\n    throws(() => music.getRelativeNoteValue(music.getNoteValue('b'), music.getIntervalValue('p3')), /BadArguments/, 'Invalid interval');\r\n    // Direction\r\n    value = music.getRelativeNoteValue(music.getNoteValue('d'), music.getIntervalValue('2'), -1);\r\n    equal(value, 0);\r\n    throws(() => music.getRelativeNoteValue(music.getNoteValue('b'), music.getIntervalValue('p4'), 0), /BadArguments/, 'Invalid direction: 0');\r\n    // Rollover\r\n    value = music.getRelativeNoteValue(music.getNoteValue('b'), music.getIntervalValue('b5'));\r\n    equal(value, 5);\r\n    // Reverse rollover\r\n    value = music.getRelativeNoteValue(music.getNoteValue('c'), music.getIntervalValue('b2'), -1);\r\n    equal(value, 11);\r\n    // Practical tests\r\n    value = music.getRelativeNoteValue(music.getNoteValue('g'), music.getIntervalValue('p5'));\r\n    equal(value, 2);\r\n}\r\nfunction relativeNoteNames() {\r\n    expect(9);\r\n    const music = new Music();\r\n    equal(music.getRelativeNoteName('b', music.getNoteValue('c#')), 'b##');\r\n    equal(music.getRelativeNoteName('c', music.getNoteValue('c')), 'c');\r\n    equal(music.getRelativeNoteName('c', music.getNoteValue('db')), 'c#');\r\n    equal(music.getRelativeNoteName('c', music.getNoteValue('b')), 'cb');\r\n    equal(music.getRelativeNoteName('c#', music.getNoteValue('db')), 'c#');\r\n    equal(music.getRelativeNoteName('e', music.getNoteValue('f#')), 'e##');\r\n    equal(music.getRelativeNoteName('e', music.getNoteValue('d#')), 'eb');\r\n    equal(music.getRelativeNoteName('e', music.getNoteValue('fb')), 'e');\r\n    throws(() => music.getRelativeNoteName('e', music.getNoteValue('g#')), /BadArguments/, 'Too far away. Notes not related.');\r\n}\r\nfunction canonicalNotes() {\r\n    expect(3);\r\n    const music = new Music();\r\n    equal(music.getCanonicalNoteName(0), 'c');\r\n    equal(music.getCanonicalNoteName(2), 'd');\r\n    throws(() => music.getCanonicalNoteName(-1), /BadArguments/, 'Invalid note value');\r\n}\r\nfunction canonicalIntervals() {\r\n    expect(3);\r\n    const music = new Music();\r\n    equal(music.getCanonicalIntervalName(0), 'unison');\r\n    equal(music.getCanonicalIntervalName(2), 'M2');\r\n    throws(() => music.getCanonicalIntervalName(-1), /BadArguments/, 'Invalid interval value');\r\n}\r\nfunction scaleTones() {\r\n    expect(24);\r\n    // C Major\r\n    const music = new Music();\r\n    const manager = new KeyManager('CM');\r\n    const c_major = music.getScaleTones(music.getNoteValue('c'), Music.scales.major);\r\n    let values = ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\r\n    equal(c_major.length, 7);\r\n    for (let i = 0; i < c_major.length; ++i) {\r\n        equal(music.getCanonicalNoteName(c_major[i]), values[i]);\r\n    }\r\n    // Dorian\r\n    const c_dorian = music.getScaleTones(music.getNoteValue('c'), Music.scales.dorian);\r\n    values = ['c', 'd', 'eb', 'f', 'g', 'a', 'bb'];\r\n    let note = null;\r\n    equal(c_dorian.length, 7);\r\n    for (let i = 0; i < c_dorian.length; ++i) {\r\n        note = music.getCanonicalNoteName(c_dorian[i]);\r\n        equal(manager.selectNote(note).note, values[i]);\r\n    }\r\n    // Mixolydian\r\n    const c_mixolydian = music.getScaleTones(music.getNoteValue('c'), Music.scales.mixolydian);\r\n    values = ['c', 'd', 'e', 'f', 'g', 'a', 'bb'];\r\n    equal(c_mixolydian.length, 7);\r\n    for (let i = 0; i < c_mixolydian.length; ++i) {\r\n        note = music.getCanonicalNoteName(c_mixolydian[i]);\r\n        equal(manager.selectNote(note).note, values[i]);\r\n    }\r\n}\r\nfunction scaleIntervals() {\r\n    expect(6);\r\n    const m = new Music();\r\n    equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('c'), m.getNoteValue('d'))), 'M2');\r\n    equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('g'), m.getNoteValue('c'))), 'p4');\r\n    equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('c'), m.getNoteValue('c'))), 'unison');\r\n    equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('f'), m.getNoteValue('cb'))), 'dim5');\r\n    // Forwards and backwards\r\n    equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('d'), m.getNoteValue('c'), 1)), 'b7');\r\n    equal(m.getCanonicalIntervalName(m.getIntervalBetween(m.getNoteValue('d'), m.getNoteValue('c'), -1)), 'M2');\r\n}\r\nVexFlowTests.register(MusicTests);\r\nexport { MusicTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// NoteHead Tests\r\n// TODO: There is a bug in RenderContext.scale(). The CanvasContext works as expected.\r\n//       Each time you call scale(sx, sy), it multiplies the sx and sy by the currently stored scale.\r\n//       The SVGContext operates differently. It just sets the sx and sy as the new scale, instead of multiplying it.\r\n//       See: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Flow } from '../src/flow';\r\nimport { Formatter } from '../src/formatter';\r\nimport { NoteHead } from '../src/notehead';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { TickContext } from '../src/tickcontext';\r\nimport { Voice } from '../src/voice';\r\nconst NoteHeadTests = {\r\n    Start() {\r\n        QUnit.module('NoteHead');\r\n        const run = VexFlowTests.runTests;\r\n        run('Basic', basic);\r\n        run('Various Heads', variousHeads);\r\n        run('Drum Chord Heads', drumChordHeads);\r\n        run('Bounding Boxes', basicBoundingBoxes);\r\n    },\r\n};\r\nfunction setContextStyle(ctx) {\r\n    // TODO: scale() method in SVGContext and CanvasContext should work similarly!\r\n    // The final scale should be 1.8.\r\n    // ctx.scale(0.9, 0.9);\r\n    // ctx.scale(2.0, 2.0);\r\n    ctx.scale(1.8, 1.8);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    ctx.font = '10pt Arial';\r\n}\r\nfunction basic(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 450, 250);\r\n    setContextStyle(ctx);\r\n    const stave = new Stave(10, 0, 250).addClef('treble');\r\n    stave.setContext(ctx).draw();\r\n    const formatter = new Formatter();\r\n    const voice = new Voice(Flow.TIME4_4).setStrict(false);\r\n    const note_head1 = new NoteHead({ duration: '4', line: 3 });\r\n    const note_head2 = new NoteHead({ duration: '1', line: 2.5 });\r\n    const note_head3 = new NoteHead({ duration: '2', line: 0 });\r\n    voice.addTickables([note_head1, note_head2, note_head3]);\r\n    formatter.joinVoices([voice]).formatToStave([voice], stave);\r\n    voice.draw(ctx, stave);\r\n    ok('Basic NoteHead test');\r\n}\r\n/**\r\n * Used by the next two test cases to draw a note.\r\n */\r\nfunction showNote(noteStruct, stave, ctx, x) {\r\n    const note = new StaveNote(noteStruct).setStave(stave);\r\n    new TickContext().addTickable(note).preFormat().setX(x);\r\n    note.setContext(ctx).draw();\r\n    return note;\r\n}\r\nfunction variousHeads(options, contextBuilder) {\r\n    const notes = [\r\n        { keys: ['g/5/d0'], duration: '4' },\r\n        { keys: ['g/5/d1'], duration: '4' },\r\n        { keys: ['g/5/d2'], duration: '4' },\r\n        { keys: ['g/5/d3'], duration: '4' },\r\n        { keys: ['x/'], duration: '1' },\r\n        { keys: ['g/5/t0'], duration: '1' },\r\n        { keys: ['g/5/t1'], duration: '4' },\r\n        { keys: ['g/5/t2'], duration: '4' },\r\n        { keys: ['g/5/t3'], duration: '4' },\r\n        { keys: ['x/'], duration: '1' },\r\n        { keys: ['g/5/x0'], duration: '1' },\r\n        { keys: ['g/5/x1'], duration: '4' },\r\n        { keys: ['g/5/x2'], duration: '4' },\r\n        { keys: ['g/5/x3'], duration: '4' },\r\n        { keys: ['x/'], duration: '1' },\r\n        { keys: ['g/5/s1'], duration: '4' },\r\n        { keys: ['g/5/s2'], duration: '4' },\r\n        { keys: ['x/'], duration: '1' },\r\n        { keys: ['g/5/r1'], duration: '4' },\r\n        { keys: ['g/5/r2'], duration: '4' },\r\n    ];\r\n    const ctx = contextBuilder(options.elementId, notes.length * 25 + 100, 240);\r\n    // Draw two staves, one with up-stems and one with down-stems.\r\n    for (let staveNum = 0; staveNum < 2; ++staveNum) {\r\n        const stave = new Stave(10, 10 + staveNum * 120, notes.length * 25 + 75)\r\n            .addClef('percussion')\r\n            .setContext(ctx)\r\n            .draw();\r\n        for (let i = 0; i < notes.length; ++i) {\r\n            const note = notes[i];\r\n            note.stem_direction = staveNum === 0 ? -1 : 1;\r\n            const staveNote = showNote(note, stave, ctx, (i + 1) * 25);\r\n            ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\r\n            ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n        }\r\n    }\r\n}\r\nfunction drumChordHeads(options, contextBuilder) {\r\n    const notes = [\r\n        { keys: ['a/4/d0', 'g/5/x3'], duration: '4' },\r\n        { keys: ['a/4/x3', 'g/5/d0'], duration: '4' },\r\n        { keys: ['a/4/d1', 'g/5/x2'], duration: '4' },\r\n        { keys: ['a/4/x2', 'g/5/d1'], duration: '4' },\r\n        { keys: ['a/4/d2', 'g/5/x1'], duration: '4' },\r\n        { keys: ['a/4/x1', 'g/5/d2'], duration: '4' },\r\n        { keys: ['a/4/d3', 'g/5/x0'], duration: '4' },\r\n        { keys: ['a/4/x0', 'g/5/d3'], duration: '4' },\r\n        { keys: ['a/4', 'g/5/d0'], duration: '4' },\r\n        { keys: ['a/4/x3', 'g/5'], duration: '4' },\r\n        { keys: ['a/4/t0', 'g/5/s1'], duration: '4' },\r\n        { keys: ['a/4/s1', 'g/5/t0'], duration: '4' },\r\n        { keys: ['a/4/t1', 'g/5/s2'], duration: '4' },\r\n        { keys: ['a/4/s2', 'g/5/t1'], duration: '4' },\r\n        { keys: ['a/4/t2', 'g/5/r1'], duration: '4' },\r\n        { keys: ['a/4/r1', 'g/5/t2'], duration: '4' },\r\n        { keys: ['a/4/t3', 'g/5/r2'], duration: '4' },\r\n        { keys: ['a/4/r2', 'g/5/t3'], duration: '4' },\r\n    ];\r\n    const ctx = contextBuilder(options.elementId, notes.length * 25 + 100, 240);\r\n    // Draw two staves, one with up-stems and one with down-stems.\r\n    for (let h = 0; h < 2; ++h) {\r\n        const stave = new Stave(10, 10 + h * 120, notes.length * 25 + 75).addClef('percussion').setContext(ctx).draw();\r\n        for (let i = 0; i < notes.length; ++i) {\r\n            const note = notes[i];\r\n            note.stem_direction = h === 0 ? -1 : 1;\r\n            const staveNote = showNote(note, stave, ctx, (i + 1) * 25);\r\n            ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\r\n            ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n        }\r\n    }\r\n}\r\nfunction basicBoundingBoxes(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 450, 250);\r\n    setContextStyle(ctx);\r\n    // 250 is 450/1.8\r\n    const stave = new Stave(10, 0, 250).addClef('treble');\r\n    stave.setContext(ctx).draw();\r\n    const formatter = new Formatter();\r\n    const voice = new Voice(Flow.TIME4_4).setStrict(false);\r\n    const nh1 = new NoteHead({ duration: '4', line: 3 });\r\n    const nh2 = new NoteHead({ duration: '2', line: 2.5 });\r\n    const nh3 = new NoteHead({ duration: '1', line: 0 });\r\n    voice.addTickables([nh1, nh2, nh3]);\r\n    formatter.joinVoices([voice]).formatToStave([voice], stave);\r\n    voice.draw(ctx, stave);\r\n    for (const bb of [nh1.getBoundingBox(), nh2.getBoundingBox(), nh3.getBoundingBox()]) {\r\n        ctx.rect(bb.getX(), bb.getY(), bb.getW(), bb.getH());\r\n    }\r\n    ctx.stroke();\r\n    ok('NoteHead Bounding Boxes');\r\n}\r\nVexFlowTests.register(NoteHeadTests);\r\nexport { NoteHeadTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// Author: Taehoon Moon 2016\r\n//\r\n// NoteSubGroup Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { BarNote } from '../src/barnote';\r\nimport { Note } from '../src/note';\r\nimport { BarlineType } from '../src/stavebarline';\r\nconst NoteSubGroupTests = {\r\n    Start() {\r\n        QUnit.module('NoteSubGroup');\r\n        const run = VexFlowTests.runTests;\r\n        run('Basic - ClefNote, TimeSigNote and BarNote', basic);\r\n        run('Multi Voice', multiVoiceSingleDraw);\r\n        run('Multi Voice Multiple Draws', multiVoiceDoubleDraw);\r\n        run('Multi Staff', multiStaff);\r\n    },\r\n};\r\n// Return three helper functions for creating StaveNotes, and adding Accidental & NoteSubGroup to those StaveNotes.\r\nfunction createShortcuts(f) {\r\n    return {\r\n        createStaveNote: (noteStruct) => f.StaveNote(noteStruct),\r\n        addAccidental: (note, accid) => note.addModifier(f.Accidental({ type: accid }), 0),\r\n        addSubGroup: (note, subNotes) => note.addModifier(f.NoteSubGroup({ notes: subNotes }), 0),\r\n    };\r\n}\r\nfunction basic(options) {\r\n    const f = VexFlowTests.makeFactory(options, 750, 200);\r\n    const ctx = f.getContext();\r\n    const stave = f.Stave({ width: 600 }).addClef('treble');\r\n    const { createStaveNote, addAccidental, addSubGroup } = createShortcuts(f);\r\n    const notes = [\r\n        { keys: ['f/5'], stem_direction: -1, duration: '4' },\r\n        { keys: ['d/4'], stem_direction: -1, duration: '4', clef: 'bass' },\r\n        { keys: ['g/4'], stem_direction: -1, duration: '4', clef: 'alto' },\r\n        { keys: ['a/4'], stem_direction: -1, duration: '4', clef: 'alto' },\r\n        { keys: ['c/4'], stem_direction: -1, duration: '4', clef: 'tenor' },\r\n        { keys: ['c/3'], stem_direction: +1, duration: '4', clef: 'tenor' },\r\n        { keys: ['d/4'], stem_direction: -1, duration: '4', clef: 'tenor' },\r\n        { keys: ['f/4'], stem_direction: -1, duration: '4', clef: 'tenor' },\r\n    ].map(createStaveNote);\r\n    addAccidental(notes[1], '#');\r\n    addAccidental(notes[2], 'n');\r\n    addSubGroup(notes[1], [f.ClefNote({ type: 'bass', options: { size: 'small' } })]);\r\n    addSubGroup(notes[2], [f.ClefNote({ type: 'alto', options: { size: 'small' } })]);\r\n    addSubGroup(notes[4], [f.ClefNote({ type: 'tenor', options: { size: 'small' } }), new BarNote()]);\r\n    addSubGroup(notes[5], [f.TimeSigNote({ time: '6/8' })]);\r\n    addSubGroup(notes[6], [new BarNote(BarlineType.REPEAT_BEGIN)]);\r\n    addAccidental(notes[4], 'b');\r\n    addAccidental(notes[6], 'bb');\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    notes.forEach((note) => Note.plotMetrics(ctx, note, 150));\r\n    VexFlowTests.plotLegendForNoteWidth(ctx, 620, 120);\r\n    ok(true, 'all pass');\r\n}\r\nfunction multiVoiceSingleDraw(options) {\r\n    multiVoiceHelper(options, 1);\r\n}\r\n/**\r\n * Call Factory.draw() twice. It should look identical to the multiVoice test case above.\r\n */\r\nfunction multiVoiceDoubleDraw(options) {\r\n    multiVoiceHelper(options, 2);\r\n}\r\n/**\r\n * Used by multiVoiceSingleDraw and multiVoiceDoubleDraw above.\r\n */\r\nfunction multiVoiceHelper(options, numDraws) {\r\n    const f = VexFlowTests.makeFactory(options, 550, 200);\r\n    const ctx = f.getContext();\r\n    const stave = f.Stave().addClef('treble');\r\n    const { createStaveNote, addAccidental, addSubGroup } = createShortcuts(f);\r\n    const notes1 = [\r\n        { keys: ['f/5'], stem_direction: 1, duration: '4' },\r\n        { keys: ['d/4'], stem_direction: 1, duration: '4', clef: 'bass' },\r\n        { keys: ['c/5'], stem_direction: 1, duration: '4', clef: 'alto' },\r\n        { keys: ['c/5'], stem_direction: 1, duration: '4', clef: 'soprano' },\r\n    ].map(createStaveNote);\r\n    const notes2 = [\r\n        { keys: ['c/4'], stem_direction: -1, duration: '4' },\r\n        { keys: ['c/3'], stem_direction: -1, duration: '4', clef: 'bass' },\r\n        { keys: ['d/4'], stem_direction: -1, duration: '4', clef: 'alto' },\r\n        { keys: ['f/4'], stem_direction: -1, duration: '4', clef: 'soprano' },\r\n    ].map(createStaveNote);\r\n    addAccidental(notes1[1], '#');\r\n    addSubGroup(notes1[1], [\r\n        f.ClefNote({ type: 'bass', options: { size: 'small' } }),\r\n        new BarNote(BarlineType.REPEAT_BEGIN),\r\n        f.TimeSigNote({ time: '3/4' }),\r\n    ]);\r\n    addSubGroup(notes2[2], [\r\n        f.ClefNote({ type: 'alto', options: { size: 'small' } }),\r\n        f.TimeSigNote({ time: '9/8' }),\r\n        new BarNote(BarlineType.DOUBLE),\r\n    ]);\r\n    addSubGroup(notes1[3], [f.ClefNote({ type: 'soprano', options: { size: 'small' } })]);\r\n    addAccidental(notes1[2], 'b');\r\n    addAccidental(notes2[3], '#');\r\n    const voices = [f.Voice().addTickables(notes1), f.Voice().addTickables(notes2)];\r\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n    for (let i = 0; i < numDraws; i++) {\r\n        f.draw();\r\n    }\r\n    notes1.forEach((note) => Note.plotMetrics(ctx, note, 150));\r\n    ok(true, 'all pass');\r\n}\r\nfunction multiStaff(options) {\r\n    const f = VexFlowTests.makeFactory(options, 550, 400);\r\n    const { createStaveNote, addAccidental, addSubGroup } = createShortcuts(f);\r\n    const stave1 = f.Stave({ x: 15, y: 30, width: 500 }).setClef('treble');\r\n    const notes1 = [\r\n        { keys: ['f/5'], stem_direction: 1, duration: '4' },\r\n        { keys: ['d/4'], stem_direction: 1, duration: '4', clef: 'bass' },\r\n        { keys: ['c/5'], stem_direction: 1, duration: '4', clef: 'alto' },\r\n        { keys: ['c/5'], stem_direction: 1, duration: '4', clef: 'soprano' },\r\n    ].map(createStaveNote);\r\n    const notes2 = [\r\n        { keys: ['c/4'], stem_direction: -1, duration: '4' },\r\n        { keys: ['c/3'], stem_direction: -1, duration: '4', clef: 'bass' },\r\n        { keys: ['d/4'], stem_direction: -1, duration: '4', clef: 'alto' },\r\n        { keys: ['f/4'], stem_direction: -1, duration: '4', clef: 'soprano' },\r\n    ].map(createStaveNote);\r\n    const stave2 = f.Stave({ x: 15, y: 150, width: 500 }).setClef('bass');\r\n    const notes3 = [\r\n        { keys: ['e/3'], duration: '8', stem_direction: -1, clef: 'bass' },\r\n        { keys: ['g/4'], duration: '8', stem_direction: 1, clef: 'treble' },\r\n        { keys: ['d/4'], duration: '8', stem_direction: 1, clef: 'treble' },\r\n        { keys: ['f/4'], duration: '8', stem_direction: 1, clef: 'treble' },\r\n        { keys: ['c/4'], duration: '8', stem_direction: 1, clef: 'treble' },\r\n        { keys: ['g/3'], duration: '8', stem_direction: -1, clef: 'bass' },\r\n        { keys: ['d/3'], duration: '8', stem_direction: -1, clef: 'bass' },\r\n        { keys: ['f/3'], duration: '8', stem_direction: -1, clef: 'bass' },\r\n    ].map(createStaveNote);\r\n    f.StaveConnector({ top_stave: stave1, bottom_stave: stave2, type: 'brace' });\r\n    f.StaveConnector({ top_stave: stave1, bottom_stave: stave2, type: 'singleLeft' });\r\n    f.StaveConnector({ top_stave: stave1, bottom_stave: stave2, type: 'singleRight' });\r\n    f.Beam({ notes: notes3.slice(1, 4) });\r\n    f.Beam({ notes: notes3.slice(5) });\r\n    addAccidental(notes1[1], '#');\r\n    addSubGroup(notes1[1], [f.ClefNote({ type: 'bass', options: { size: 'small' } }), f.TimeSigNote({ time: '3/4' })]);\r\n    addSubGroup(notes2[2], [f.ClefNote({ type: 'alto', options: { size: 'small' } }), f.TimeSigNote({ time: '9/8' })]);\r\n    addSubGroup(notes1[3], [f.ClefNote({ type: 'soprano', options: { size: 'small' } })]);\r\n    addSubGroup(notes3[1], [f.ClefNote({ type: 'treble', options: { size: 'small' } })]);\r\n    addSubGroup(notes3[5], [f.ClefNote({ type: 'bass', options: { size: 'small' } })]);\r\n    addAccidental(notes3[0], '#');\r\n    addAccidental(notes3[3], 'b');\r\n    addAccidental(notes3[5], '#');\r\n    addAccidental(notes1[2], 'b');\r\n    addAccidental(notes2[3], '#');\r\n    const voice1 = f.Voice().addTickables(notes1);\r\n    const voice2 = f.Voice().addTickables(notes2);\r\n    const voice3 = f.Voice().addTickables(notes3);\r\n    f.Formatter().joinVoices([voice1, voice2]).joinVoices([voice3]).formatToStave([voice1, voice2, voice3], stave1);\r\n    f.draw();\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(NoteSubGroupTests);\r\nexport { NoteSubGroupTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2021.\r\n// MIT License\r\n//\r\n// OffscreenCanvas Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { CanvasContext } from '../src/canvascontext';\r\nimport { Formatter } from '../src/formatter';\r\nimport { Stave } from '../src/stave';\r\nimport { BarlineType } from '../src/stavebarline';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { globalObject } from '../src/util';\r\nconst OffscreenCanvasTests = {\r\n    Start() {\r\n        // At the time of writing, OffscreenCanvas is still an experimental technology.\r\n        if (globalObject().OffscreenCanvas === undefined) {\r\n            return;\r\n        }\r\n        QUnit.module('OffscreenCanvas');\r\n        test('Simple Test', simpleTest);\r\n    },\r\n};\r\nfunction simpleTest() {\r\n    // Create a CanvasContext from an OffscreenCanvas.\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    const offscreenCanvas = new OffscreenCanvas(550, 200);\r\n    const offscreenCtx = offscreenCanvas.getContext('2d');\r\n    if (offscreenCtx == null) {\r\n        throw new Error(\"Couldn't create offscreen context\");\r\n    }\r\n    const ctx = new CanvasContext(offscreenCtx);\r\n    // Render to the OffscreenCavans.\r\n    const stave = new Stave(10, 50, 200);\r\n    stave.setEndBarType(BarlineType.END);\r\n    stave.addClef('treble').setContext(ctx).draw();\r\n    const notes = [\r\n        new StaveNote({ keys: ['c/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['d/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['b/4'], duration: 'qr' }),\r\n        new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    // Copy the contents of the OffscreenCanvas to an HTMLCanvasElement.\r\n    const imgBmp = offscreenCanvas.transferToImageBitmap();\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = offscreenCanvas.width;\r\n    canvas.height = offscreenCanvas.height;\r\n    const canvasCtx = canvas.getContext('2d');\r\n    if (canvasCtx == null) {\r\n        throw new Error(\"Couldn't create canvas context\");\r\n    }\r\n    canvasCtx.drawImage(imgBmp, 0, 0);\r\n    document.body.appendChild(canvas);\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(OffscreenCanvasTests);\r\nexport { OffscreenCanvasTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// Author: Cyril Silverman\r\n//\r\n// Ornament Tests\r\n// TODO: Formatting for Jazz Ornaments is incorrect. The last note + ornament bleeds into the next measure.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Accidental } from '../src/accidental';\r\nimport { Beam } from '../src/beam';\r\nimport { Dot } from '../src/dot';\r\nimport { Formatter } from '../src/formatter';\r\nimport { Glyph } from '../src/glyph';\r\nimport { Ornament } from '../src/ornament';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Voice, VoiceMode } from '../src/voice';\r\nconst OrnamentTests = {\r\n    Start() {\r\n        QUnit.module('Ornament');\r\n        const run = VexFlowTests.runTests;\r\n        run('Ornaments', drawOrnaments);\r\n        run('Ornaments Vertically Shifted', drawOrnamentsDisplaced);\r\n        run('Ornaments - Delayed turns', drawOrnamentsDelayed);\r\n        run('Ornaments - Delayed turns, Multiple Draws', drawOrnamentsDelayedMultipleDraws);\r\n        run('Stacked', drawOrnamentsStacked);\r\n        run('With Upper/Lower Accidentals', drawOrnamentsWithAccidentals);\r\n        run('Jazz Ornaments', jazzOrnaments);\r\n    },\r\n};\r\nfunction drawOrnaments(options, contextBuilder) {\r\n    expect(0);\r\n    // Get the rendering context\r\n    const ctx = contextBuilder(options.elementId, 750, 195);\r\n    const stave = new Stave(10, 30, 700);\r\n    stave.setContext(ctx).draw();\r\n    const notes = [\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n    ];\r\n    notes[0].addModifier(new Ornament('mordent'), 0);\r\n    notes[1].addModifier(new Ornament('mordent_inverted'), 0);\r\n    notes[2].addModifier(new Ornament('turn'), 0);\r\n    notes[3].addModifier(new Ornament('turn_inverted'), 0);\r\n    notes[4].addModifier(new Ornament('tr'), 0);\r\n    notes[5].addModifier(new Ornament('upprall'), 0);\r\n    notes[6].addModifier(new Ornament('downprall'), 0);\r\n    notes[7].addModifier(new Ornament('prallup'), 0);\r\n    notes[8].addModifier(new Ornament('pralldown'), 0);\r\n    notes[9].addModifier(new Ornament('upmordent'), 0);\r\n    notes[10].addModifier(new Ornament('downmordent'), 0);\r\n    notes[11].addModifier(new Ornament('lineprall'), 0);\r\n    notes[12].addModifier(new Ornament('prallprall'), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n}\r\nfunction drawOrnamentsDisplaced(options, contextBuilder) {\r\n    expect(0);\r\n    // Get the rendering context\r\n    const ctx = contextBuilder(options.elementId, 750, 195);\r\n    const stave = new Stave(10, 30, 700);\r\n    stave.setContext(ctx).draw();\r\n    const notes = [\r\n        new StaveNote({ keys: ['a/5'], duration: '4', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['a/5'], duration: '4', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['a/5'], duration: '4', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['a/5'], duration: '4', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['a/5'], duration: '4', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['a/5'], duration: '4', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['a/5'], duration: '4', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        new StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n    ];\r\n    notes[0].addModifier(new Ornament('mordent'), 0);\r\n    notes[1].addModifier(new Ornament('mordent_inverted'), 0);\r\n    notes[1].addModifier(new Ornament('mordent_inverted'), 0);\r\n    notes[2].addModifier(new Ornament('turn'), 0);\r\n    notes[3].addModifier(new Ornament('turn_inverted'), 0);\r\n    notes[4].addModifier(new Ornament('tr'), 0);\r\n    notes[5].addModifier(new Ornament('upprall'), 0);\r\n    notes[6].addModifier(new Ornament('downprall'), 0);\r\n    notes[7].addModifier(new Ornament('prallup'), 0);\r\n    notes[8].addModifier(new Ornament('pralldown'), 0);\r\n    notes[9].addModifier(new Ornament('upmordent'), 0);\r\n    notes[10].addModifier(new Ornament('downmordent'), 0);\r\n    notes[11].addModifier(new Ornament('lineprall'), 0);\r\n    notes[12].addModifier(new Ornament('prallprall'), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n}\r\n/**\r\n * Helper function for the next two tests: drawOrnamentsDelayed and drawOrnamentsDelayedMultipleDraws.\r\n * setDelayed(true) shifts the turn symbol to the right (after its note).\r\n */\r\nconst addDelayedTurns = (f) => {\r\n    // Get the rendering context\r\n    const context = f.getContext();\r\n    const stave = f.Stave({ x: 10, y: 30, width: 500 });\r\n    stave.setContext(context).draw();\r\n    const notes = [\r\n        f.StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n    ];\r\n    notes[0].addModifier(f.Ornament('turn', { delayed: true }), 0);\r\n    notes[1].addModifier(f.Ornament('turn_inverted', { delayed: true }), 0);\r\n    notes[2].addModifier(f.Ornament('turn_inverted', { delayed: true }), 0);\r\n    notes[3].addModifier(f.Ornament('turn', { delayed: true }), 0);\r\n    return { context, stave, notes };\r\n};\r\nfunction drawOrnamentsDelayed(options) {\r\n    expect(0);\r\n    const f = VexFlowTests.makeFactory(options, 550, 195);\r\n    const { context, stave, notes } = addDelayedTurns(f);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n}\r\nfunction drawOrnamentsDelayedMultipleDraws(options) {\r\n    expect(0);\r\n    const f = VexFlowTests.makeFactory(options, 550, 195);\r\n    const { context, stave, notes } = addDelayedTurns(f);\r\n    // We can FormatAndDraw() two times, and it looks fine.\r\n    // However, if you inspect the SVG element, you will see duplicate paths.\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n}\r\nfunction drawOrnamentsStacked(options) {\r\n    expect(0);\r\n    // Get the rendering context\r\n    const f = VexFlowTests.makeFactory(options, 550, 195);\r\n    const ctx = f.getContext();\r\n    const stave = f.Stave({ x: 10, y: 30, width: 500 });\r\n    stave.setContext(ctx).draw();\r\n    const notes = [\r\n        f.StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['a/4'], duration: '4', stem_direction: 1 }),\r\n    ];\r\n    notes[0].addModifier(f.Ornament('mordent'), 0);\r\n    notes[1].addModifier(f.Ornament('turn_inverted'), 0);\r\n    notes[2].addModifier(f.Ornament('turn'), 0);\r\n    notes[3].addModifier(f.Ornament('turn_inverted'), 0);\r\n    notes[0].addModifier(f.Ornament('turn'), 0);\r\n    notes[1].addModifier(f.Ornament('prallup'), 0);\r\n    notes[2].addModifier(f.Ornament('upmordent'), 0);\r\n    notes[3].addModifier(f.Ornament('lineprall'), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n}\r\nfunction drawOrnamentsWithAccidentals(options) {\r\n    expect(0);\r\n    // Get the rendering context\r\n    const f = VexFlowTests.makeFactory(options, 650, 250);\r\n    const ctx = f.getContext();\r\n    const stave = f.Stave({ x: 10, y: 60, width: 600 });\r\n    stave.setContext(ctx).draw();\r\n    const notes = [\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: 1 }),\r\n    ];\r\n    notes[0].addModifier(f.Ornament('mordent', { lowerAccidental: '#', upperAccidental: '#' }), 0);\r\n    notes[1].addModifier(f.Ornament('turn_inverted', { lowerAccidental: 'b', upperAccidental: 'b' }), 0);\r\n    notes[2].addModifier(f.Ornament('turn', { upperAccidental: '##', lowerAccidental: '##' }), 0);\r\n    notes[3].addModifier(f.Ornament('mordent_inverted', { lowerAccidental: 'db', upperAccidental: 'db' }), 0);\r\n    notes[4].addModifier(f.Ornament('turn_inverted', { upperAccidental: '++', lowerAccidental: '++' }), 0);\r\n    notes[5].addModifier(f.Ornament('tr', { upperAccidental: 'n', lowerAccidental: 'n' }), 0);\r\n    notes[6].addModifier(f.Ornament('prallup', { upperAccidental: 'd', lowerAccidental: 'd' }), 0);\r\n    notes[7].addModifier(f.Ornament('lineprall', { upperAccidental: 'db', lowerAccidental: 'db' }), 0);\r\n    notes[8].addModifier(f.Ornament('upmordent', { upperAccidental: 'bbs', lowerAccidental: 'bbs' }), 0);\r\n    notes[9].addModifier(f.Ornament('prallprall', { upperAccidental: 'bb', lowerAccidental: 'bb' }), 0);\r\n    notes[10].addModifier(f.Ornament('turn_inverted', { upperAccidental: '+', lowerAccidental: '+' }), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n}\r\nfunction jazzOrnaments(options) {\r\n    const clefWidth = Glyph.getWidth('gClef', 38); // widest clef\r\n    // Helper function.\r\n    function draw(modifiers, keys, x, width, y, stemDirection) {\r\n        // Helper function to create a StaveNote.\r\n        const note = (keys, duration, modifier, stemDirection) => {\r\n            const n = new StaveNote({ keys, duration, stem_direction: stemDirection })\r\n                .addModifier(modifier, 0)\r\n                .addModifier(new Accidental('b'), 0);\r\n            const dot = duration.indexOf('d') >= 0;\r\n            if (dot) {\r\n                Dot.buildAndAttach([n], { all: true });\r\n            }\r\n            return n;\r\n        };\r\n        const stave = new Stave(x, y, width).addClef('treble').setContext(ctx).draw();\r\n        const notes = [\r\n            note(keys, '4d', modifiers[0], stemDirection),\r\n            note(keys, '8', modifiers[1], stemDirection),\r\n            note(keys, '4d', modifiers[2], stemDirection),\r\n            note(keys, '8', modifiers[3], stemDirection),\r\n        ];\r\n        if (modifiers.length > 4) {\r\n            notes[3].addModifier(modifiers[4], 0);\r\n        }\r\n        Beam.generateBeams(notes);\r\n        const voice = new Voice({\r\n            num_beats: 4,\r\n            beat_value: 4,\r\n        }).setMode(VoiceMode.SOFT);\r\n        voice.addTickables(notes);\r\n        const formatter = new Formatter().joinVoices([voice]);\r\n        formatter.format([voice], width - Stave.defaultPadding - clefWidth);\r\n        stave.setContext(ctx).draw();\r\n        voice.draw(ctx, stave);\r\n    }\r\n    expect(0);\r\n    const f = VexFlowTests.makeFactory(options, 950, 400);\r\n    const ctx = f.getContext();\r\n    ctx.scale(1, 1);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    const xStart = 10;\r\n    const width = 300;\r\n    const yStart = 50;\r\n    const staffHeight = 70;\r\n    let curX = xStart;\r\n    let curY = yStart;\r\n    let mods = [\r\n        // measure 1\r\n        f.Ornament('scoop'),\r\n        f.Ornament('doit'),\r\n        f.Ornament('fall'),\r\n        f.Ornament('doitLong'),\r\n    ];\r\n    draw(mods, ['a/5'], curX, width, curY, -1);\r\n    curX += width;\r\n    mods = [\r\n        // measure 2\r\n        f.Ornament('fallLong'),\r\n        f.Ornament('bend'),\r\n        f.Ornament('plungerClosed'),\r\n        f.Ornament('plungerOpen'),\r\n        f.Ornament('bend'),\r\n    ];\r\n    draw(mods, ['a/5'], curX, width, curY, -1);\r\n    curX += width;\r\n    mods = [\r\n        // measure 3\r\n        f.Ornament('flip'),\r\n        f.Ornament('jazzTurn'),\r\n        f.Ornament('smear'),\r\n        f.Ornament('doit'),\r\n    ];\r\n    draw(mods, ['a/5'], curX, width, curY, 1);\r\n    // second line\r\n    curX = xStart;\r\n    curY += staffHeight;\r\n    mods = [\r\n        // measure 4\r\n        f.Ornament('scoop'),\r\n        f.Ornament('doit'),\r\n        f.Ornament('fall'),\r\n        f.Ornament('doitLong'),\r\n    ];\r\n    draw(mods, ['e/5'], curX, width, curY);\r\n    curX += width;\r\n    mods = [\r\n        // measure 5\r\n        f.Ornament('fallLong'),\r\n        f.Ornament('bend'),\r\n        f.Ornament('plungerClosed'),\r\n        f.Ornament('plungerOpen'),\r\n        f.Ornament('bend'),\r\n    ];\r\n    draw(mods, ['e/5'], curX, width, curY);\r\n    curX += width;\r\n    mods = [\r\n        // measure 6\r\n        f.Ornament('flip'),\r\n        f.Ornament('jazzTurn'),\r\n        f.Ornament('smear'),\r\n        f.Ornament('doit'),\r\n    ];\r\n    draw(mods, ['e/5'], curX, width, curY);\r\n    // third line\r\n    curX = xStart;\r\n    curY += staffHeight;\r\n    mods = [\r\n        // measure 7\r\n        f.Ornament('scoop'),\r\n        f.Ornament('doit'),\r\n        f.Ornament('fall'),\r\n        f.Ornament('doitLong'),\r\n    ];\r\n    draw(mods, ['e/4'], curX, width, curY);\r\n    curX += width;\r\n    mods = [\r\n        // measure 8\r\n        f.Ornament('fallLong'),\r\n        f.Ornament('bend'),\r\n        f.Ornament('plungerClosed'),\r\n        f.Ornament('plungerOpen'),\r\n        f.Ornament('bend'),\r\n    ];\r\n    draw(mods, ['e/4'], curX, width, curY);\r\n    curX += width;\r\n    mods = [\r\n        // measure 9\r\n        f.Ornament('flip'),\r\n        f.Ornament('jazzTurn'),\r\n        f.Ornament('smear'),\r\n        f.Ornament('doit'),\r\n    ];\r\n    draw(mods, ['e/4'], curX, width, curY);\r\n}\r\nVexFlowTests.register(OrnamentTests);\r\nexport { OrnamentTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Parser Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Parser } from '../src/parser';\r\nconst ParserTests = {\r\n    Start() {\r\n        QUnit.module('Parser');\r\n        test('Basic', basic);\r\n        test('Advanced', advanced);\r\n        test('Mixed', mixed);\r\n        test('Micro Score', microscore);\r\n    },\r\n};\r\n/**\r\n * Grammar used in the first three test cases: basic, advanced, mixed.\r\n */\r\nclass TestGrammar {\r\n    // The begin() function is the only requirement when implementing the Grammar interface.\r\n    begin() {\r\n        return () => ({ expect: this.expect });\r\n    }\r\n    BIGORLITTLE() {\r\n        return { expect: [this.BIGLINE, this.LITTLELINE], or: true };\r\n    }\r\n    BIGLINE() {\r\n        return { expect: [this.LBRACE, this.WORD, this.WORDS, this.MAYBEEXCLAIM, this.RBRACE] };\r\n    }\r\n    LITTLELINE() {\r\n        return { expect: [this.WORD, this.WORDS] };\r\n    }\r\n    WORDS() {\r\n        return { expect: [this.COMMA, this.WORD], zeroOrMore: true };\r\n    }\r\n    MAYBEEXCLAIM() {\r\n        return { expect: [this.EXCLAIM], maybe: true };\r\n    }\r\n    LBRACE() {\r\n        return { token: '[{]' };\r\n    }\r\n    RBRACE() {\r\n        return { token: '[}]' };\r\n    }\r\n    WORD() {\r\n        return { token: '[a-zA-Z]+' };\r\n    }\r\n    COMMA() {\r\n        return { token: '[,]' };\r\n    }\r\n    EXCLAIM() {\r\n        return { token: '[!]' };\r\n    }\r\n    EOL() {\r\n        return { token: '$' };\r\n    }\r\n}\r\n/**\r\n * Grammar used in the microscore test case.\r\n * It represents a series of piano key numbers (Middle C == 40) separated by whitespace.\r\n *   C Major Scale => 40 42 44 45 47 49 51 52\r\n * A chord is 2 or more piano key numbers surrounded by BRACKETS and separated by PERIODS\r\n *   C Major == [40.44.47]\r\n *   C-major F-major G-major A-minor chord progression => [40.44.47] [45.49.52] [47.51.54] [49.52.56]\r\n */\r\nclass MicroScoreGrammar {\r\n    constructor() {\r\n        this.ITEM = () => ({ expect: [this.PIANO_KEY_NUMBER, this.CHORD], or: true });\r\n        this.MAYBE_MORE_ITEMS = () => ({ expect: [this.ITEM], zeroOrMore: true });\r\n        this.PIANO_KEY_NUMBER = () => ({ expect: [this.NUM], oneOrMore: true });\r\n        this.CHORD = () => ({ expect: [this.LEFT_BRACKET, this.PIANO_KEY_NUMBER, this.MORE_CHORD_PARTS, this.RIGHT_BRACKET] });\r\n        this.MORE_CHORD_PARTS = () => ({ expect: [this.PERIOD, this.PIANO_KEY_NUMBER], oneOrMore: true });\r\n        this.NUM = () => ({ token: '\\\\d+' });\r\n        this.WHITESPACE = () => ({ token: '\\\\s+' });\r\n        this.PERIOD = () => ({ token: '\\\\.' });\r\n        this.LEFT_BRACKET = () => ({ token: '\\\\[' });\r\n        this.RIGHT_BRACKET = () => ({ token: '\\\\]' });\r\n        this.EOL = () => ({ token: '$' });\r\n    }\r\n    begin() {\r\n        return () => ({ expect: [this.ITEM, this.MAYBE_MORE_ITEMS, this.EOL] });\r\n    }\r\n}\r\n/**\r\n * Check that the result is a parse failure, and verify the error position.\r\n */\r\nfunction fails(result, expectedErrorPos, msg) {\r\n    notOk(result.success, msg);\r\n    equal(result.errorPos, expectedErrorPos, msg);\r\n}\r\nfunction basic() {\r\n    const grammar = new TestGrammar();\r\n    grammar.expect = [grammar.LITTLELINE, grammar.EOL];\r\n    const parser = new Parser(grammar);\r\n    // Each of these strings will parse correctly.\r\n    const mustPass = ['first, second', 'first,second', 'first', 'first,second, third'];\r\n    mustPass.forEach((line) => equal(parser.parse(line).success, true, line));\r\n    fails(parser.parse(''), 0);\r\n    fails(parser.parse('first second'), 6);\r\n    fails(parser.parse('first,,'), 5);\r\n    fails(parser.parse('first,'), 5);\r\n    fails(parser.parse(',,'), 0);\r\n}\r\nfunction advanced() {\r\n    const grammar = new TestGrammar();\r\n    grammar.expect = [grammar.BIGLINE, grammar.EOL];\r\n    const parser = new Parser(grammar);\r\n    const mustPass = ['{first}', '{first!}', '{first,second}', '{first,second!}', '{first,second,third!}'];\r\n    mustPass.forEach((line) => equal(parser.parse(line).success, true, line));\r\n    fails(parser.parse('{first,second,third,}'), 19);\r\n    fails(parser.parse('first,second,third'), 0);\r\n    fails(parser.parse('{first,second,third'), 19);\r\n    fails(parser.parse('{!}'), 1);\r\n}\r\nfunction mixed() {\r\n    const grammar = new TestGrammar();\r\n    grammar.expect = [grammar.BIGORLITTLE, grammar.EOL];\r\n    const parser = new Parser(grammar);\r\n    const mustPass = ['{first,second,third!}', 'first, second'];\r\n    mustPass.forEach((line) => equal(parser.parse(line).success, true, line));\r\n    fails(parser.parse('first second'), 6);\r\n}\r\nfunction microscore() {\r\n    const grammar = new MicroScoreGrammar();\r\n    const parser = new Parser(grammar);\r\n    const mustPass = [\r\n        '40 42 44 45 47 49 51 52',\r\n        '[40.44.47] [45.49.52] [47.51.54] [49.52.56]',\r\n        '40 [40.44.47] 45 47 [44.47.51]', // Mixed Notes and Chords: C4 [Cmajor] F4 G4 [Eminor]\r\n    ];\r\n    mustPass.forEach((line) => {\r\n        var _a;\r\n        const result = parser.parse(line);\r\n        equal(result.success, true, line);\r\n        equal((_a = result.matches) === null || _a === void 0 ? void 0 : _a.length, 3, line);\r\n    });\r\n    fails(parser.parse('40 42 44 45 47 49 5A 52'), 19);\r\n    fails(parser.parse('40.44.47] [45.49.52] [47.51.54] [49.52.56]'), 2);\r\n    fails(parser.parse('40 [40] 45 47 [44.47.51]'), 3); // A chord with a single note is not allowed.\r\n}\r\nVexFlowTests.register(ParserTests);\r\nexport { ParserTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// PedalMarking Tests\r\n// TODO: Fix Error => Type 'Tickable' is not assignable to type 'StaveNote'.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nconst PedalMarkingTests = {\r\n    Start() {\r\n        QUnit.module('PedalMarking');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple Pedal 1', simple1);\r\n        run('Simple Pedal 2', simple2);\r\n        run('Simple Pedal 3', simple3);\r\n        run('Release and Depress on Same Note 1', releaseDepress1);\r\n        run('Release and Depress on Same Note 2', releaseDepress2);\r\n        run('Custom Text 1', customTest1);\r\n        run('Custom Text 2', customTest2);\r\n    },\r\n};\r\n/**\r\n * Every test below uses this to set up the score and two staves/voices.\r\n */\r\nfunction createTest(makePedal) {\r\n    return (options) => {\r\n        const f = VexFlowTests.makeFactory(options, 550, 200);\r\n        const score = f.EasyScore();\r\n        const stave0 = f.Stave({ width: 250 }).addClef('treble');\r\n        const voice0 = score.voice(score.notes('b4/4, b4, b4, b4[stem=\"down\"]', { stem: 'up' }));\r\n        f.Formatter().joinVoices([voice0]).formatToStave([voice0], stave0);\r\n        const stave1 = f.Stave({ width: 260, x: 250 });\r\n        const voice1 = score.voice(score.notes('c4/4, c4, c4, c4', { stem: 'up' }));\r\n        f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\r\n        makePedal(f, voice0.getTickables(), voice1.getTickables());\r\n        f.draw();\r\n        ok(true, 'Must render');\r\n    };\r\n}\r\nfunction withSimplePedal(style) {\r\n    return (factory, notes0, notes1) => factory.PedalMarking({\r\n        notes: [notes0[0], notes0[2], notes0[3], notes1[3]],\r\n        options: { style },\r\n    });\r\n}\r\nfunction withReleaseAndDepressedPedal(style) {\r\n    return (factory, notes0, notes1) => factory.PedalMarking({\r\n        notes: [notes0[0], notes0[3], notes0[3], notes1[1], notes1[1], notes1[3]],\r\n        options: { style },\r\n    });\r\n}\r\nconst simple1 = createTest(withSimplePedal('text'));\r\nconst simple2 = createTest(withSimplePedal('bracket'));\r\nconst simple3 = createTest(withSimplePedal('mixed'));\r\nconst releaseDepress1 = createTest(withReleaseAndDepressedPedal('bracket'));\r\nconst releaseDepress2 = createTest(withReleaseAndDepressedPedal('mixed'));\r\nconst customTest1 = createTest((factory, notes0, notes1) => {\r\n    const pedal = factory.PedalMarking({\r\n        notes: [notes0[0], notes1[3]],\r\n        options: { style: 'text' },\r\n    });\r\n    pedal.setCustomText('una corda', 'tre corda');\r\n    return pedal;\r\n});\r\nconst customTest2 = createTest((factory, notes0, notes1) => {\r\n    const pedal = factory.PedalMarking({\r\n        notes: [notes0[0], notes1[3]],\r\n        options: { style: 'mixed' },\r\n    });\r\n    pedal.setCustomText('Sost. Ped.');\r\n    return pedal;\r\n});\r\nVexFlowTests.register(PedalMarkingTests);\r\nexport { PedalMarkingTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// Author: Mike Corrigan 2012 <corrigan@gmail.com>\r\n//\r\n// Percussion Tests\r\n// TODO: Type 'Tickable[]' is not assignable to type 'StemmableNote[]'.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Dot, Font, FontStyle, FontWeight, Stave, StaveNote, TickContext, Tremolo, } from '../src/index';\r\nconst PercussionTests = {\r\n    Start() {\r\n        QUnit.module('Percussion');\r\n        const run = VexFlowTests.runTests;\r\n        run('Percussion Clef', draw);\r\n        run('Percussion Notes', drawNotes);\r\n        run('Percussion Basic0', basic0);\r\n        run('Percussion Basic1', basic1);\r\n        run('Percussion Basic2', basic2);\r\n        run('Percussion Snare0', snare0);\r\n        run('Percussion Snare1', snare1);\r\n        run('Percussion Snare2', snare2);\r\n        run('Percussion Snare3', snare3);\r\n    },\r\n};\r\nfunction draw(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    new Stave(10, 10, 300).addClef('percussion').setContext(ctx).draw();\r\n    ok(true);\r\n}\r\n/**\r\n * Helper function used by the drawNotes() test case below.\r\n */\r\nfunction showNote(struct, stave, ctx, x) {\r\n    const staveNote = new StaveNote(struct).setStave(stave);\r\n    new TickContext().addTickable(staveNote).preFormat().setX(x);\r\n    staveNote.setContext(ctx).draw();\r\n    return staveNote;\r\n}\r\nfunction drawNotes(options, contextBuilder) {\r\n    const notes = [\r\n        { keys: ['g/5/d0'], duration: '4' },\r\n        { keys: ['g/5/d1'], duration: '4' },\r\n        { keys: ['g/5/d2'], duration: '4' },\r\n        { keys: ['g/5/d3'], duration: '4' },\r\n        { keys: ['x/'], duration: '1' },\r\n        { keys: ['g/5/t0'], duration: '1' },\r\n        { keys: ['g/5/t1'], duration: '4' },\r\n        { keys: ['g/5/t2'], duration: '4' },\r\n        { keys: ['g/5/t3'], duration: '4' },\r\n        { keys: ['x/'], duration: '1' },\r\n        { keys: ['g/5/x0'], duration: '1' },\r\n        { keys: ['g/5/x1'], duration: '4' },\r\n        { keys: ['g/5/x2'], duration: '4' },\r\n        { keys: ['g/5/x3'], duration: '4' },\r\n    ];\r\n    const ctx = contextBuilder(options.elementId, notes.length * 25 + 100, 240);\r\n    // Draw two staves, one with up-stems and one with down-stems.\r\n    for (let h = 0; h < 2; ++h) {\r\n        const stave = new Stave(10, 10 + h * 120, notes.length * 25 + 75).addClef('percussion').setContext(ctx).draw();\r\n        for (let i = 0; i < notes.length; ++i) {\r\n            const note = notes[i];\r\n            note.stem_direction = h === 0 ? -1 : 1;\r\n            const staveNote = showNote(note, stave, ctx, (i + 1) * 25);\r\n            ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\r\n            ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Helper function for the seven test cases below.\r\n * Adds a percussion clef (two short vertical bars, like a pause sign) to the stave.\r\n */\r\nfunction createSingleMeasureTest(setup) {\r\n    return (options) => {\r\n        const f = VexFlowTests.makeFactory(options, 500);\r\n        const stave = f.Stave().addClef('percussion');\r\n        setup(f);\r\n        f.Formatter().joinVoices(f.getVoices()).formatToStave(f.getVoices(), stave);\r\n        f.draw();\r\n        ok(true);\r\n    };\r\n}\r\nconst basic0 = createSingleMeasureTest((f) => {\r\n    const voice0 = f\r\n        .Voice()\r\n        .addTickables([\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n    ]);\r\n    const voice1 = f\r\n        .Voice()\r\n        .addTickables([\r\n        f.StaveNote({ keys: ['f/4'], duration: '8', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '8', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '8', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '8', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stem_direction: -1 }),\r\n    ]);\r\n    f.Beam({ notes: voice0.getTickables() });\r\n    f.Beam({ notes: voice1.getTickables().slice(0, 2) });\r\n    f.Beam({ notes: voice1.getTickables().slice(3, 5) });\r\n});\r\nconst basic1 = createSingleMeasureTest((f) => {\r\n    f.Voice().addTickables([\r\n        f.StaveNote({ keys: ['f/5/x2'], duration: '4' }),\r\n        f.StaveNote({ keys: ['f/5/x2'], duration: '4' }),\r\n        f.StaveNote({ keys: ['f/5/x2'], duration: '4' }),\r\n        f.StaveNote({ keys: ['f/5/x2'], duration: '4' }),\r\n    ]);\r\n    f.Voice().addTickables([\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stem_direction: -1 }),\r\n    ]);\r\n});\r\nconst basic2 = createSingleMeasureTest((f) => {\r\n    const voice0 = f\r\n        .Voice()\r\n        .addTickables([\r\n        f.StaveNote({ keys: ['a/5/x3'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/4/n', 'g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '8' }),\r\n    ]);\r\n    f.Beam({ notes: voice0.getTickables().slice(1, 8) });\r\n    const notes1 = [\r\n        f.StaveNote({ keys: ['f/4'], duration: '8', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '8', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '4', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['f/4'], duration: '4', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['d/4/x2', 'c/5'], duration: '8d', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['c/5'], duration: '16', stem_direction: -1 }),\r\n    ];\r\n    Dot.buildAndAttach([notes1[4]], { all: true });\r\n    const voice1 = f.Voice().addTickables(notes1);\r\n    f.Beam({ notes: voice1.getTickables().slice(0, 2) });\r\n    f.Beam({ notes: voice1.getTickables().slice(4, 6) });\r\n});\r\nconst snare0 = createSingleMeasureTest((f) => {\r\n    const font = {\r\n        family: Font.SERIF,\r\n        size: 14,\r\n        weight: FontWeight.BOLD,\r\n        style: FontStyle.ITALIC,\r\n    };\r\n    f.Voice().addTickables([\r\n        f\r\n            .StaveNote({ keys: ['c/5'], duration: '4', stem_direction: -1 })\r\n            .addModifier(f.Articulation({ type: 'a>' }), 0)\r\n            .addModifier(f.Annotation({ text: 'L', font }), 0),\r\n        f.StaveNote({ keys: ['c/5'], duration: '4', stem_direction: -1 }).addModifier(f.Annotation({ text: 'R', font }), 0),\r\n        f.StaveNote({ keys: ['c/5'], duration: '4', stem_direction: -1 }).addModifier(f.Annotation({ text: 'L', font }), 0),\r\n        f.StaveNote({ keys: ['c/5'], duration: '4', stem_direction: -1 }).addModifier(f.Annotation({ text: 'L', font }), 0),\r\n    ]);\r\n});\r\nconst snare1 = createSingleMeasureTest((f) => {\r\n    f.Voice().addTickables([\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '4', stem_direction: -1 }).addModifier(f.Articulation({ type: 'ah' }), 0),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '4', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['g/5/x2'], duration: '4', stem_direction: -1 }).addModifier(f.Articulation({ type: 'ah' }), 0),\r\n        f.StaveNote({ keys: ['a/5/x3'], duration: '4', stem_direction: -1 }).addModifier(f.Articulation({ type: 'a,' }), 0),\r\n    ]);\r\n});\r\nconst snare2 = createSingleMeasureTest((f) => {\r\n    f.Voice().addTickables([\r\n        f.StaveNote({ keys: ['c/5'], duration: '4', stem_direction: -1 }).addModifier(new Tremolo(1), 0),\r\n        f.GraceNote({ keys: ['c/5'], duration: '4', stem_direction: -1 }).addModifier(new Tremolo(1), 0),\r\n        f.StaveNote({ keys: ['c/5'], duration: '4', stem_direction: -1 }).addModifier(new Tremolo(3), 0),\r\n        f.StaveNote({ keys: ['c/5'], duration: '4', stem_direction: -1 }).addModifier(new Tremolo(5), 0),\r\n    ]);\r\n});\r\nconst snare3 = createSingleMeasureTest((factory) => {\r\n    factory\r\n        .Voice()\r\n        .addTickables([\r\n        factory.StaveNote({ keys: ['c/5'], duration: '4', stem_direction: 1 }).addModifier(new Tremolo(2), 0),\r\n        factory.GraceNote({ keys: ['c/5'], duration: '4', stem_direction: 1 }).addModifier(new Tremolo(2), 0),\r\n        factory.GraceNote({ keys: ['c/5'], duration: '4', stem_direction: 1 }).addModifier(new Tremolo(3), 0),\r\n        factory.StaveNote({ keys: ['c/5'], duration: '4', stem_direction: 1 }).addModifier(new Tremolo(5), 0),\r\n    ]);\r\n});\r\nVexFlowTests.register(PercussionTests);\r\nexport { PercussionTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Registry Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { EasyScore, Factory, Registry, StaveNote } from '../src/index';\r\nconst RegistryTests = {\r\n    Start() {\r\n        QUnit.module('Registry');\r\n        test('Register and Clear', registerAndClear);\r\n        test('Default Registry', defaultRegistry);\r\n        test('Multiple Classes', classes);\r\n    },\r\n};\r\nfunction registerAndClear() {\r\n    const registry = new Registry();\r\n    const score = new EasyScore({ factory: Factory.newFromElementId(null) });\r\n    registry.register(score.notes('C4')[0], 'foobar');\r\n    const foobar = registry.getElementById('foobar');\r\n    ok(foobar);\r\n    equal(foobar.getAttribute('id'), 'foobar');\r\n    registry.clear();\r\n    notOk(registry.getElementById('foobar'));\r\n    // eslint-disable-next-line\r\n    // @ts-ignore: intentional type mismatch to trigger an error.\r\n    throws(() => registry.register(score.notes('C4')));\r\n    registry.clear();\r\n    ok(registry.register(score.notes('C4[id=\"boobar\"]')[0]).getElementById('boobar'));\r\n}\r\nfunction defaultRegistry() {\r\n    const registry = new Registry();\r\n    const score = new EasyScore({ factory: Factory.newFromElementId(null) });\r\n    Registry.enableDefaultRegistry(registry);\r\n    score.notes('C4[id=\"foobar\"]');\r\n    const note = registry.getElementById('foobar');\r\n    ok(note);\r\n    note.setAttribute('id', 'boobar');\r\n    ok(registry.getElementById('boobar'));\r\n    notOk(registry.getElementById('foobar'));\r\n    registry.clear();\r\n    equal(registry.getElementsByType(StaveNote.CATEGORY).length, 0);\r\n    score.notes('C5');\r\n    const elements = registry.getElementsByType(StaveNote.CATEGORY);\r\n    equal(elements.length, 1);\r\n}\r\nfunction classes() {\r\n    const registry = new Registry();\r\n    const score = new EasyScore({ factory: Factory.newFromElementId(null) });\r\n    Registry.enableDefaultRegistry(registry);\r\n    score.notes('C4[id=\"foobar\"]');\r\n    const note = registry.getElementById('foobar');\r\n    note.addClass('foo');\r\n    ok(note.hasClass('foo'));\r\n    notOk(note.hasClass('boo'));\r\n    equal(registry.getElementsByClass('foo').length, 1);\r\n    equal(registry.getElementsByClass('boo').length, 0);\r\n    note.addClass('boo');\r\n    ok(note.hasClass('foo'));\r\n    ok(note.hasClass('boo'));\r\n    equal(registry.getElementsByClass('foo').length, 1);\r\n    equal(registry.getElementsByClass('boo').length, 1);\r\n    note.removeClass('boo');\r\n    note.removeClass('foo');\r\n    notOk(note.hasClass('foo'));\r\n    notOk(note.hasClass('boo'));\r\n    equal(registry.getElementsByClass('foo').length, 0);\r\n    equal(registry.getElementsByClass('boo').length, 0);\r\n}\r\nVexFlowTests.register(RegistryTests);\r\nexport { RegistryTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Ron B. Yeh\r\n// MIT License\r\n//\r\n// Renderer Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { CanvasContext, Factory, Formatter, isHTMLCanvas, Renderer, RuntimeError, Stave, StaveNote, SVGContext, } from '../src/index';\r\n// TODO: Should FactoryOptions.renderer.elementId also accept a canvas | div?\r\nconst STAVE_WIDTH = 700;\r\nconst STAVE_HEIGHT = 100;\r\n// FactoryOptions.stave.space defaults to 10.\r\n// We subtract 10 to make the useRendererAPI() output look identical to useFactoryAPI().\r\nconst STAVE_RIGHT_MARGIN = 10;\r\nconst USE_RENDERER = { useRendererAPI: true };\r\nconst USE_FACTORY = { useRendererAPI: false };\r\nconst RendererTests = {\r\n    Start() {\r\n        QUnit.module('Renderer');\r\n        const run = VexFlowTests.runTests;\r\n        // Randomly choose one of four setup paths. See below for a description.\r\n        // Refresh `flow.html` to see the test change each time.\r\n        // We can manually check that they look identical\r\n        // by opening `flow.html` in multiple tabs & quickly switching between tabs.\r\n        run('Random', random);\r\n        // These are the four setup paths. They should all produce the same output.\r\n        //   Use the:  Renderer API       OR  Factory API\r\n        //   Pass in:  element ID string  OR  canvas/div element.\r\n        run('Renderer API with element ID string', stringElementId, USE_RENDERER);\r\n        run('Renderer API with canvas or div', canvasOrDivElement, USE_RENDERER);\r\n        run('Renderer API with context', passRenderContext);\r\n        run('Factory API with element ID string', stringElementId, USE_FACTORY);\r\n        run('Factory API with canvas or div', canvasOrDivElement, USE_FACTORY);\r\n    },\r\n};\r\n/**\r\n * Helper function to add three notes to a stave.\r\n */\r\nfunction drawStave(stave, context) {\r\n    stave.addClef('bass').addTimeSignature('3/4').draw();\r\n    Formatter.FormatAndDraw(context, stave, [\r\n        new StaveNote({ keys: ['C/4'], duration: '4' }),\r\n        new StaveNote({ keys: ['E/4'], duration: '4' }),\r\n        new StaveNote({ keys: ['G/4'], duration: '4' }),\r\n    ]);\r\n}\r\n/**\r\n * Randomize the test upon each refresh (for verifying that the output is identical).\r\n * Draw a colored outline to indicate which of the four options is shown.\r\n * - blue = element is a SVG or Canvas element\r\n * - gray = element ID is a string\r\n * - solid outline = use the Renderer API directly\r\n * - dashed outline = use the Factory API\r\n */\r\nfunction random(options) {\r\n    const useElementIDString = Math.random() > 0.5;\r\n    const useRendererAPI = Math.random() > 0.5;\r\n    options.params = { useRendererAPI };\r\n    if (useElementIDString) {\r\n        stringElementId(options);\r\n    }\r\n    else {\r\n        canvasOrDivElement(options);\r\n    }\r\n    // eslint-disable-next-line\r\n    const element = document.getElementById(options.elementId);\r\n    const colorForElementType = useElementIDString ? '#CCCCCC' /* light gray */ : '#0074d9'; /* blue */\r\n    const lineStyleForWhichAPI = useRendererAPI ? 'solid' : 'dashed';\r\n    const borderStyle = `3px ${lineStyleForWhichAPI} ${colorForElementType}`;\r\n    let elementType;\r\n    if (options.backend === Renderer.Backends.CANVAS) {\r\n        // If the backend is canvas, we draw a border around the canvas directly.\r\n        element.style.border = borderStyle;\r\n        elementType = '&lt;canvas&gt; element object';\r\n    }\r\n    else {\r\n        // If the backend is SVG, we draw a border around the SVG child of the DIV.\r\n        element.children[0].style.border = borderStyle;\r\n        elementType = '&lt;svg&gt; element object';\r\n    }\r\n    if (useElementIDString) {\r\n        elementType = 'elementID string';\r\n    }\r\n    const whichAPI = useRendererAPI ? 'Renderer API' : 'Factory API';\r\n    element.parentElement.insertAdjacentHTML('beforeend', `<div style='position:relative; bottom: 100px; font-size: 12pt;'>` +\r\n        `<span style=\"border-bottom: ${borderStyle}; padding-bottom: 3px; ${lineStyleForWhichAPI}\">${whichAPI}</span>` +\r\n        ` with ` +\r\n        `<span style=\"background-color:${colorForElementType}; padding: 3px; color:white;\">${elementType}</span>` +\r\n        `</div><br>`);\r\n}\r\nfunction useRendererAPI(e, backend) {\r\n    const renderer = new Renderer(e, backend);\r\n    renderer.resize(STAVE_WIDTH, STAVE_HEIGHT);\r\n    const context = renderer.getContext();\r\n    drawStave(new Stave(0, 0, STAVE_WIDTH - STAVE_RIGHT_MARGIN).setContext(context), context);\r\n}\r\n/**\r\n * Alternatively, use the Factory API!\r\n * The Factory API declares elementId to be string | null.\r\n * However, if we pass in a canvas or div element, it will still work.\r\n * This is because Factory calls new Renderer(elementId, ...) via Renderer.buildContext().\r\n */\r\nfunction useFactoryAPI(e, backend) {\r\n    const opts = {\r\n        renderer: { elementId: e, width: STAVE_WIDTH, height: STAVE_HEIGHT, backend },\r\n    };\r\n    const factory = new Factory(opts);\r\n    drawStave(factory.Stave(), factory.getContext());\r\n}\r\n/**\r\n * Pass in a elementId string. Renderer will call document.getElementById().\r\n */\r\nfunction stringElementId(options) {\r\n    const elementId = options.elementId;\r\n    if (options.params.useRendererAPI) {\r\n        useRendererAPI(elementId, options.backend);\r\n    }\r\n    else {\r\n        useFactoryAPI(elementId, options.backend);\r\n    }\r\n    ok(true);\r\n}\r\n/**\r\n * Pass a canvas or div element directly to the Renderer constructor.\r\n */\r\nfunction canvasOrDivElement(options) {\r\n    const element = document.getElementById(options.elementId);\r\n    if (options.params.useRendererAPI) {\r\n        useRendererAPI(element, options.backend);\r\n    }\r\n    else {\r\n        useFactoryAPI(element, options.backend);\r\n    }\r\n    ok(true);\r\n}\r\n/**\r\n * Pass the render context directly to the Renderer constructor.\r\n */\r\nfunction passRenderContext(options) {\r\n    let context;\r\n    const element = document.getElementById(options.elementId);\r\n    if (isHTMLCanvas(element)) {\r\n        const ctx = element.getContext('2d');\r\n        if (!ctx) {\r\n            throw new RuntimeError(`Couldn't get context from element \"${options.elementId}\"`);\r\n        }\r\n        context = new CanvasContext(ctx);\r\n    }\r\n    else {\r\n        context = new SVGContext(element);\r\n    }\r\n    const renderer = new Renderer(context);\r\n    renderer.resize(STAVE_WIDTH, STAVE_HEIGHT);\r\n    drawStave(new Stave(0, 0, STAVE_WIDTH - STAVE_RIGHT_MARGIN).setContext(context), context);\r\n    ok(true);\r\n}\r\nVexFlowTests.register(RendererTests);\r\nexport { RendererTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Rests Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Beam } from '../src/beam';\r\nimport { Dot } from '../src/dot';\r\nimport { Flow } from '../src/flow';\r\nimport { Formatter } from '../src/formatter';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Tuplet } from '../src/tuplet';\r\nimport { Voice } from '../src/voice';\r\nconst RestsTests = {\r\n    Start() {\r\n        QUnit.module('Rests');\r\n        const run = VexFlowTests.runTests;\r\n        // TODO: Simplify test names by removing 'Rests - ' or 'Rests '.\r\n        run('Rests - Dotted', basic);\r\n        run('Auto Align Rests - Beamed Notes Stems Up', beamsUp);\r\n        run('Auto Align Rests - Beamed Notes Stems Down', beamsDown);\r\n        run('Auto Align Rests - Tuplets Stems Up', tupletsUp);\r\n        run('Auto Align Rests - Tuplets Stems Down', tupletsDown);\r\n        run('Auto Align Rests - Single Voice (Default)', singleVoiceDefaultAlignment);\r\n        run('Auto Align Rests - Single Voice (Align All)', singleVoiceAlignAll);\r\n        run('Auto Align Rests - Multi Voice', multiVoice);\r\n    },\r\n};\r\n/**\r\n * Helper function to create a context and stave.\r\n *\r\n * @param options\r\n * @param contextBuilder static function in renderer.ts (Renderer.getSVGContext or Renderer.getCanvasContext).\r\n * @param width\r\n * @param height\r\n * @returns object with .context and .stave properties\r\n */\r\nfunction setupContext(options, contextBuilder, width = 350, height = 150) {\r\n    // context is SVGContext or CanvasRenderingContext2D (native) or CanvasContext (only if Renderer.USE_CANVAS_PROXY is true).\r\n    const context = contextBuilder(options.elementId, width, height);\r\n    context.scale(0.9, 0.9);\r\n    context.fillStyle = '#221';\r\n    context.strokeStyle = '#221';\r\n    context.font = '10pt Arial';\r\n    const stave = new Stave(10, 30, width).addClef('treble').addTimeSignature('4/4').setContext(context).draw();\r\n    return { context, stave };\r\n}\r\n/**\r\n * Dotted rests (whole to 128th).\r\n * The rest duration is specified as 'wr', 'hr', ..., '128r'.\r\n */\r\nfunction basic(options, contextBuilder) {\r\n    const { context, stave } = setupContext(options, contextBuilder, 700);\r\n    const notes = [\r\n        new StaveNote({ keys: ['b/4'], stem_direction: 1, duration: 'wr' }),\r\n        new StaveNote({ keys: ['b/4'], stem_direction: 1, duration: 'hr' }),\r\n        new StaveNote({ keys: ['b/4'], stem_direction: 1, duration: '4r' }),\r\n        new StaveNote({ keys: ['b/4'], stem_direction: 1, duration: '8r' }),\r\n        new StaveNote({ keys: ['b/4'], stem_direction: 1, duration: '16r' }),\r\n        new StaveNote({ keys: ['b/4'], stem_direction: 1, duration: '32r' }),\r\n        new StaveNote({ keys: ['b/4'], stem_direction: 1, duration: '64r' }),\r\n        new StaveNote({ keys: ['b/4'], stem_direction: 1, duration: '128r' }),\r\n    ];\r\n    Dot.buildAndAttach(notes, { all: true });\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n    ok(true, 'Dotted Rest Test');\r\n}\r\n// Optional: Use a helper function to make your code more concise.\r\nconst note = (noteStruct) => new StaveNote(noteStruct);\r\n/**\r\n * Rests are intermixed within beamed notes (with the stems and beams at the top).\r\n */\r\nfunction beamsUp(options, contextBuilder) {\r\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\r\n    const notes = [\r\n        note({ keys: ['e/5'], stem_direction: 1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '8r' }),\r\n        note({ keys: ['b/5'], stem_direction: 1, duration: '8' }),\r\n        note({ keys: ['c/5'], stem_direction: 1, duration: '8' }),\r\n        note({ keys: ['b/4', 'd/5', 'a/5'], stem_direction: 1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '8r' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '8r' }),\r\n        note({ keys: ['c/4'], stem_direction: 1, duration: '8' }),\r\n        note({ keys: ['b/4', 'd/5', 'a/5'], stem_direction: 1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '8r' }),\r\n        note({ keys: ['c/4'], stem_direction: 1, duration: '8' }),\r\n    ];\r\n    const beam1 = new Beam(notes.slice(0, 4));\r\n    const beam2 = new Beam(notes.slice(4, 8));\r\n    const beam3 = new Beam(notes.slice(8, 12));\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n    beam1.setContext(context).draw();\r\n    beam2.setContext(context).draw();\r\n    beam3.setContext(context).draw();\r\n    ok(true, 'Auto Align Rests - Beams Up Test');\r\n}\r\n/**\r\n * Rests are intermixed within beamed notes (with the stems and beams at the bottom).\r\n */\r\nfunction beamsDown(options, contextBuilder) {\r\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\r\n    const notes = [\r\n        note({ keys: ['a/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['b/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['c/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4', 'd/5', 'a/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['e/4'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4', 'd/5', 'a/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['e/4'], stem_direction: -1, duration: '8' }),\r\n    ];\r\n    const beam1 = new Beam(notes.slice(0, 4));\r\n    const beam2 = new Beam(notes.slice(4, 8));\r\n    const beam3 = new Beam(notes.slice(8, 12));\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n    beam1.setContext(context).draw();\r\n    beam2.setContext(context).draw();\r\n    beam3.setContext(context).draw();\r\n    ok(true, 'Auto Align Rests - Beams Down Test');\r\n}\r\n/**\r\n * Call setTupletLocation(Tuplet.LOCATION_TOP) to place the tuplet indicator (bracket and number) at the\r\n * top of the group of notes. Tuplet.LOCATION_TOP is the default, so this is optional.\r\n */\r\nfunction tupletsUp(options, contextBuilder) {\r\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\r\n    const notes = [\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['a/5'], stem_direction: 1, duration: '4r' }),\r\n        note({ keys: ['a/5'], stem_direction: 1, duration: '4r' }),\r\n        note({ keys: ['g/5'], stem_direction: 1, duration: '4r' }),\r\n        note({ keys: ['b/5'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['a/5'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['g/5'], stem_direction: 1, duration: '4r' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['a/5'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '4r' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '4r' }),\r\n    ];\r\n    const tuplet1 = new Tuplet(notes.slice(0, 3)).setTupletLocation(Tuplet.LOCATION_TOP);\r\n    const tuplet2 = new Tuplet(notes.slice(3, 6)).setTupletLocation(Tuplet.LOCATION_TOP);\r\n    const tuplet3 = new Tuplet(notes.slice(6, 9)).setTupletLocation(Tuplet.LOCATION_TOP);\r\n    const tuplet4 = new Tuplet(notes.slice(9, 12)).setTupletLocation(Tuplet.LOCATION_TOP);\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n    tuplet1.setContext(context).draw();\r\n    tuplet2.setContext(context).draw();\r\n    tuplet3.setContext(context).draw();\r\n    tuplet4.setContext(context).draw();\r\n    ok(true, 'Auto Align Rests - Tuplets Stem Up Test');\r\n}\r\n/**\r\n * Call setTupletLocation(Tuplet.LOCATION_BOTTOM) to place the tuplet indicator (bracket and number) at the\r\n * bottom of the group of notes.\r\n */\r\nfunction tupletsDown(options, contextBuilder) {\r\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\r\n    const notes = [\r\n        note({ keys: ['a/5'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['g/5'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['a/5'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['g/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['a/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['g/5'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['a/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['g/5'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n    ];\r\n    const beam1 = new Beam(notes.slice(0, 3));\r\n    const beam2 = new Beam(notes.slice(3, 6));\r\n    const beam3 = new Beam(notes.slice(6, 9));\r\n    const beam4 = new Beam(notes.slice(9, 12));\r\n    const tuplet1 = new Tuplet(notes.slice(0, 3)).setTupletLocation(Tuplet.LOCATION_BOTTOM);\r\n    const tuplet2 = new Tuplet(notes.slice(3, 6)).setTupletLocation(Tuplet.LOCATION_BOTTOM);\r\n    const tuplet3 = new Tuplet(notes.slice(6, 9)).setTupletLocation(Tuplet.LOCATION_BOTTOM);\r\n    const tuplet4 = new Tuplet(notes.slice(9, 12)).setTupletLocation(Tuplet.LOCATION_BOTTOM);\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n    tuplet1.setContext(context).draw();\r\n    tuplet2.setContext(context).draw();\r\n    tuplet3.setContext(context).draw();\r\n    tuplet4.setContext(context).draw();\r\n    beam1.setContext(context).draw();\r\n    beam2.setContext(context).draw();\r\n    beam3.setContext(context).draw();\r\n    beam4.setContext(context).draw();\r\n    ok(true, 'Auto Align Rests - Tuplets Stem Down Test');\r\n}\r\n/**\r\n * By default rests are centered vertically within the stave, except\r\n * when they are inside a group of beamed notes (in which case they are\r\n * centered vertically within that group).\r\n */\r\nfunction singleVoiceDefaultAlignment(options, contextBuilder) {\r\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\r\n    const notes = [\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '4r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '4r' }),\r\n        note({ keys: ['f/4'], stem_direction: -1, duration: '4' }),\r\n        note({ keys: ['e/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['a/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['e/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['a/5'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '4r' }),\r\n        note({ keys: ['b/5'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['d/5'], stem_direction: -1, duration: '4' }),\r\n        note({ keys: ['g/5'], stem_direction: -1, duration: '4' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '4r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '4r' }),\r\n    ];\r\n    const beam = new Beam(notes.slice(5, 9));\r\n    const tuplet = new Tuplet(notes.slice(9, 12)).setTupletLocation(Tuplet.LOCATION_TOP);\r\n    Formatter.FormatAndDraw(context, stave, notes);\r\n    tuplet.setContext(context).draw();\r\n    beam.setContext(context).draw();\r\n    ok(true, 'Auto Align Rests - Default Test');\r\n}\r\n/**\r\n * The only difference between staveRestsAll() and staveRests() is that this test case\r\n * passes { align_rests: true } to Formatter.FormatAndDraw(...).\r\n */\r\nfunction singleVoiceAlignAll(options, contextBuilder) {\r\n    const { context, stave } = setupContext(options, contextBuilder, 600, 160);\r\n    const notes = [\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '4r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '4r' }),\r\n        note({ keys: ['f/4'], stem_direction: -1, duration: '4' }),\r\n        note({ keys: ['e/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['a/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['e/5'], stem_direction: -1, duration: '8' }),\r\n        note({ keys: ['a/5'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['b/4'], stem_direction: 1, duration: '4r' }),\r\n        note({ keys: ['b/5'], stem_direction: 1, duration: '4' }),\r\n        note({ keys: ['d/5'], stem_direction: -1, duration: '4' }),\r\n        note({ keys: ['g/5'], stem_direction: -1, duration: '4' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '4r' }),\r\n        note({ keys: ['b/4'], stem_direction: -1, duration: '4r' }),\r\n    ];\r\n    const beam = new Beam(notes.slice(5, 9));\r\n    const tuplet = new Tuplet(notes.slice(9, 12)).setTupletLocation(Tuplet.LOCATION_TOP);\r\n    // Set { align_rests: true } to align rests (vertically) with nearby notes in each voice.\r\n    Formatter.FormatAndDraw(context, stave, notes, { align_rests: true });\r\n    tuplet.setContext(context).draw();\r\n    beam.setContext(context).draw();\r\n    ok(true, 'Auto Align Rests - Align All Test');\r\n}\r\n/**\r\n * Multi Voice\r\n * The top voice shows quarter-note chords alternating with quarter rests.\r\n * The bottom voice shows two groups of beamed eighth notes, with eighth rests.\r\n */\r\nfunction multiVoice(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 200);\r\n    const stave = new Stave(50, 10, 500).addClef('treble').setContext(ctx).addTimeSignature('4/4').draw();\r\n    const noteOnStave = (noteStruct) => new StaveNote(noteStruct).setStave(stave);\r\n    const notes1 = [\r\n        noteOnStave({ keys: ['c/4', 'e/4', 'g/4'], duration: '4' }),\r\n        noteOnStave({ keys: ['b/4'], duration: '4r' }),\r\n        noteOnStave({ keys: ['c/4', 'd/4', 'a/4'], duration: '4' }),\r\n        noteOnStave({ keys: ['b/4'], duration: '4r' }),\r\n    ];\r\n    const notes2 = [\r\n        noteOnStave({ keys: ['e/3'], stem_direction: -1, duration: '8' }),\r\n        noteOnStave({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        noteOnStave({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        noteOnStave({ keys: ['e/3'], stem_direction: -1, duration: '8' }),\r\n        noteOnStave({ keys: ['e/3'], stem_direction: -1, duration: '8' }),\r\n        noteOnStave({ keys: ['b/4'], stem_direction: -1, duration: '8r' }),\r\n        noteOnStave({ keys: ['e/3'], stem_direction: -1, duration: '8' }),\r\n        noteOnStave({ keys: ['e/3'], stem_direction: -1, duration: '8' }),\r\n    ];\r\n    const voice1 = new Voice(Flow.TIME4_4).addTickables(notes1);\r\n    const voice2 = new Voice(Flow.TIME4_4).addTickables(notes2);\r\n    // Set { align_rests: true } to align rests (vertically) with nearby notes in each voice.\r\n    new Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave, { align_rests: true });\r\n    const beam2_1 = new Beam(notes2.slice(0, 4));\r\n    const beam2_2 = new Beam(notes2.slice(4, 8));\r\n    // Important Note: we need to draw voice2 first, since voice2 generates ledger lines.\r\n    // Otherwise, the ledger lines will be drawn on top of middle C notes in voice1.\r\n    voice2.draw(ctx);\r\n    voice1.draw(ctx);\r\n    beam2_1.setContext(ctx).draw();\r\n    beam2_2.setContext(ctx).draw();\r\n    ok(true, 'Strokes Test Multi Voice');\r\n}\r\nVexFlowTests.register(RestsTests);\r\nexport { RestsTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Rhythm Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Annotation } from '../src/annotation';\r\nimport { Beam } from '../src/beam';\r\nimport { Formatter } from '../src/formatter';\r\nimport { Stave } from '../src/stave';\r\nimport { BarlineType } from '../src/stavebarline';\r\nimport { StaveNote } from '../src/stavenote';\r\nconst RhythmTests = {\r\n    Start() {\r\n        QUnit.module('Rhythm');\r\n        const run = VexFlowTests.runTests;\r\n        // TODO: Simplify test names by removing 'Rhythm Draw - '.\r\n        run('Rhythm Draw - slash notes', drawBasic);\r\n        run('Rhythm Draw - beamed slash notes', drawBeamedSlashNotes);\r\n        run('Rhythm Draw - beamed slash notes, some rests', drawSlashAndBeamAndRests);\r\n        run('Rhythm Draw - 16th note rhythm with scratches', drawSixtenthWithScratches);\r\n        run('Rhythm Draw - 32nd note rhythm with scratches', drawThirtySecondWithScratches);\r\n    },\r\n};\r\n// CURRENTLY UNUSED. Draws 7 different slash notes without beams.\r\n/*\r\nfunction drawSlash(options: TestOptions, contextBuilder: ContextBuilder): void {\r\n  const ctx = contextBuilder(options.elementId, 350, 180);\r\n  const stave = new Stave(10, 10, 350);\r\n  stave.setContext(ctx);\r\n  stave.draw();\r\n\r\n  const notes: StaveNoteStruct[] = [\r\n    { keys: ['b/4'], duration: 'ws', stem_direction: -1 },\r\n    { keys: ['b/4'], duration: 'hs', stem_direction: -1 },\r\n    { keys: ['b/4'], duration: 'qs', stem_direction: -1 },\r\n    { keys: ['b/4'], duration: '8s', stem_direction: -1 },\r\n    { keys: ['b/4'], duration: '16s', stem_direction: -1 },\r\n    { keys: ['b/4'], duration: '32s', stem_direction: -1 },\r\n    { keys: ['b/4'], duration: '64s', stem_direction: -1 },\r\n  ];\r\n  expect(notes.length * 2);\r\n\r\n  for (let i = 0; i < notes.length; ++i) {\r\n    const staveNote = new StaveNote(notes[i]).setStave(stave);\r\n    new TickContext()\r\n      .addTickable(staveNote)\r\n      .preFormat()\r\n      .setX((i + 1) * 25);\r\n    staveNote.setContext(ctx).draw();\r\n\r\n    ok(staveNote.getX() > 0, 'Note ' + i + ' has X value');\r\n    ok(staveNote.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n  }\r\n}\r\n*/\r\nfunction drawBasic(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 800, 150);\r\n    // bar 1\r\n    const staveBar1 = new Stave(10, 30, 150);\r\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\r\n    staveBar1.setEndBarType(BarlineType.SINGLE);\r\n    staveBar1.addClef('treble');\r\n    staveBar1.addTimeSignature('4/4');\r\n    staveBar1.addKeySignature('C');\r\n    staveBar1.setContext(ctx).draw();\r\n    const notesBar1 = [new StaveNote({ keys: ['b/4'], duration: '1s', stem_direction: -1 })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1);\r\n    // bar 2 - juxtaposing second bar next to first bar\r\n    const staveBar2 = new Stave(staveBar1.getWidth() + staveBar1.getX(), staveBar1.getY(), 120);\r\n    staveBar2.setBegBarType(BarlineType.SINGLE);\r\n    staveBar2.setEndBarType(BarlineType.SINGLE);\r\n    staveBar2.setContext(ctx).draw();\r\n    // bar 2\r\n    const notesBar2 = [\r\n        new StaveNote({ keys: ['b/4'], duration: '2s', stem_direction: -1 }),\r\n        new StaveNote({ keys: ['b/4'], duration: '2s', stem_direction: -1 }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar2, notesBar2);\r\n    // bar 3 - juxtaposing second bar next to first bar\r\n    const staveBar3 = new Stave(staveBar2.getWidth() + staveBar2.getX(), staveBar2.getY(), 170);\r\n    staveBar3.setContext(ctx).draw();\r\n    // bar 3\r\n    const notesBar3 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '4s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '4s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '4s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '4s',\r\n            stem_direction: -1,\r\n        }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar3, notesBar3);\r\n    // bar 4 - juxtaposing second bar next to first bar\r\n    const staveBar4 = new Stave(staveBar3.getWidth() + staveBar3.getX(), staveBar3.getY(), 200);\r\n    staveBar4.setContext(ctx).draw();\r\n    // bar 4\r\n    const notesBar4 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar4, notesBar4);\r\n    expect(0);\r\n}\r\nfunction drawBeamedSlashNotes(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 800, 150);\r\n    // bar 1\r\n    const staveBar1 = new Stave(10, 30, 300);\r\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\r\n    staveBar1.setEndBarType(BarlineType.SINGLE);\r\n    staveBar1.addClef('treble');\r\n    staveBar1.addTimeSignature('4/4');\r\n    staveBar1.addKeySignature('C');\r\n    staveBar1.setContext(ctx).draw();\r\n    // bar 4\r\n    const notesBar1_part1 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n    ];\r\n    const notesBar1_part2 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n    ];\r\n    // create the beams for 8th notes in 2nd measure\r\n    const beam1 = new Beam(notesBar1_part1);\r\n    const beam2 = new Beam(notesBar1_part2);\r\n    const notesBar1 = notesBar1_part1.concat(notesBar1_part2);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1);\r\n    // Render beams\r\n    beam1.setContext(ctx).draw();\r\n    beam2.setContext(ctx).draw();\r\n    expect(0);\r\n}\r\nfunction drawSlashAndBeamAndRests(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 800, 150);\r\n    // bar 1\r\n    const staveBar1 = new Stave(10, 30, 300);\r\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\r\n    staveBar1.setEndBarType(BarlineType.SINGLE);\r\n    staveBar1.addClef('treble');\r\n    staveBar1.addTimeSignature('4/4');\r\n    staveBar1.addKeySignature('F');\r\n    staveBar1.setContext(ctx).draw();\r\n    // bar 1\r\n    const notesBar1_part1 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({ keys: ['b/4'], duration: '8s', stem_direction: -1 }),\r\n    ];\r\n    notesBar1_part1[0].addModifier(new Annotation('C7').setFont('Times', VexFlowTests.Font.size + 2), 0);\r\n    const notesBar1_part2 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8r',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8r',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8r',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '8s',\r\n            stem_direction: -1,\r\n        }),\r\n    ];\r\n    // create the beams for 8th notes in 2nd measure\r\n    const beam1 = new Beam(notesBar1_part1);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1_part1.concat(notesBar1_part2));\r\n    // Render beams\r\n    beam1.setContext(ctx).draw();\r\n    // bar 2 - juxtaposing second bar next to first bar\r\n    const staveBar2 = new Stave(staveBar1.getWidth() + staveBar1.getX(), staveBar1.getY(), 220);\r\n    staveBar2.setContext(ctx).draw();\r\n    const notesBar2 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '1s',\r\n            stem_direction: -1,\r\n        }),\r\n    ];\r\n    notesBar2[0].addModifier(new Annotation('F').setFont('Times', VexFlowTests.Font.size + 2), 0);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar2, notesBar2);\r\n    expect(0);\r\n}\r\nfunction drawSixtenthWithScratches(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 800, 150);\r\n    // bar 1\r\n    const staveBar1 = new Stave(10, 30, 300);\r\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\r\n    staveBar1.setEndBarType(BarlineType.SINGLE);\r\n    staveBar1.addClef('treble');\r\n    staveBar1.addTimeSignature('4/4');\r\n    staveBar1.addKeySignature('F');\r\n    staveBar1.setContext(ctx).draw();\r\n    // bar 1\r\n    const notesBar1_part1 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '16s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '16s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '16m',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '16s',\r\n            stem_direction: -1,\r\n        }),\r\n    ];\r\n    const notesBar1_part2 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '16m',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '16s',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '16r',\r\n            stem_direction: -1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '16s',\r\n            stem_direction: -1,\r\n        }),\r\n    ];\r\n    notesBar1_part1[0].addModifier(new Annotation('C7').setFont('Times', VexFlowTests.Font.size + 3), 0);\r\n    // create the beams for 8th notes in 2nd measure\r\n    const beam1 = new Beam(notesBar1_part1);\r\n    const beam2 = new Beam(notesBar1_part2);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1_part1.concat(notesBar1_part2));\r\n    // Render beams\r\n    beam1.setContext(ctx).draw();\r\n    beam2.setContext(ctx).draw();\r\n    expect(0);\r\n}\r\nfunction drawThirtySecondWithScratches(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 800, 150);\r\n    // bar 1\r\n    const staveBar1 = new Stave(10, 30, 300);\r\n    staveBar1.setBegBarType(BarlineType.DOUBLE);\r\n    staveBar1.setEndBarType(BarlineType.SINGLE);\r\n    staveBar1.addClef('treble');\r\n    staveBar1.addTimeSignature('4/4');\r\n    staveBar1.addKeySignature('F');\r\n    staveBar1.setContext(ctx).draw();\r\n    // bar 1\r\n    const notesBar1_part1 = [\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '32s',\r\n            stem_direction: 1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '32s',\r\n            stem_direction: 1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '32m',\r\n            stem_direction: 1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '32s',\r\n            stem_direction: 1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '32m',\r\n            stem_direction: 1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '32s',\r\n            stem_direction: 1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '32r',\r\n            stem_direction: 1,\r\n        }),\r\n        new StaveNote({\r\n            keys: ['b/4'],\r\n            duration: '32s',\r\n            stem_direction: 1,\r\n        }),\r\n    ];\r\n    notesBar1_part1[0].addModifier(new Annotation('C7').setFont('Times', VexFlowTests.Font.size + 3), 0);\r\n    // Create the beams for 8th notes in 2nd measure.\r\n    const beam1 = new Beam(notesBar1_part1);\r\n    // Helper function to justify and draw a 4/4 voice.\r\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1_part1);\r\n    // Render beams\r\n    beam1.setContext(ctx).draw();\r\n    expect(0);\r\n}\r\nVexFlowTests.register(RhythmTests);\r\nexport { RhythmTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Basic Stave Tests\r\n// TODO: Like Stave.setTempo(t: StaveTempoOptions, ...), Stave.setText(...) could declare an interface called StaveTextOptions.\r\n//       This helps developers because they can use the named type in their code for type checking.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Accidental } from '../src/accidental';\r\nimport { Beam } from '../src/beam';\r\nimport { Clef } from '../src/clef';\r\nimport { Formatter } from '../src/formatter';\r\nimport { KeySignature } from '../src/keysignature';\r\nimport { Modifier } from '../src/modifier';\r\nimport { Stave } from '../src/stave';\r\nimport { Barline, BarlineType } from '../src/stavebarline';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Repetition } from '../src/staverepetition';\r\nimport { VoltaType } from '../src/stavevolta';\r\nimport { TextJustification } from '../src/textnote';\r\nimport { TimeSignature } from '../src/timesignature';\r\nconst StaveTests = {\r\n    Start() {\r\n        QUnit.module('Stave');\r\n        test('StaveModifiers SortByCategory', sortByCategory);\r\n        const run = VexFlowTests.runTests;\r\n        run('Stave Draw Test', draw);\r\n        run('Open Stave Draw Test', drawOpenStave);\r\n        run('Multiple Stave Barline Test', drawMultipleMeasures);\r\n        run('Multiple Stave Barline Test (14pt Section)', drawMultipleMeasures, { fontSize: 14 });\r\n        run('Multiple Stave Repeats Test', drawRepeats);\r\n        run('Stave End Modifiers Test', drawEndModifiers);\r\n        run('Stave Repetition (CODA) Positioning', drawStaveRepetition, { yShift: 0 });\r\n        run('Stave Repetition (CODA) Positioning (-20)', drawStaveRepetition, { yShift: -20 });\r\n        run('Stave Repetition (CODA) Positioning (+10)', drawStaveRepetition, { yShift: +10 });\r\n        run('Multiple Staves Volta Test', drawVolta);\r\n        run('Volta + Modifier Measure Test', drawVoltaModifier);\r\n        run('Tempo Test', drawTempo);\r\n        run('Single Line Configuration Test', configureSingleLine);\r\n        run('Batch Line Configuration Test', configureAllLines);\r\n        run('Stave Text Test', drawStaveText);\r\n        run('Multiple Line Stave Text Test', drawStaveTextMultiLine);\r\n        run('Factory API', factoryAPI);\r\n    },\r\n};\r\nfunction sortByCategory() {\r\n    const stave = new Stave(0, 0, 300);\r\n    const clef0 = new Clef('treble');\r\n    const clef1 = new Clef('alto');\r\n    const clef2 = new Clef('bass');\r\n    const time0 = new TimeSignature('C');\r\n    const time1 = new TimeSignature('C|');\r\n    const time2 = new TimeSignature('9/8');\r\n    const key0 = new KeySignature('G');\r\n    const key1 = new KeySignature('F');\r\n    const key2 = new KeySignature('D');\r\n    const bar0 = new Barline(BarlineType.SINGLE);\r\n    const bar1 = new Barline(BarlineType.DOUBLE);\r\n    const bar2 = new Barline(BarlineType.NONE);\r\n    // const order0 = { barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3 };\r\n    // const order1 = { timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3 };\r\n    const order0 = { Barline: 0, Clef: 1, KeySignature: 2, TimeSignature: 3 };\r\n    const order1 = { TimeSignature: 0, KeySignature: 1, Barline: 2, Clef: 3 };\r\n    const sortAndCompare = (title, a, b, order) => {\r\n        stave.sortByCategory(a, order);\r\n        // Verify that the two arrays are identical.\r\n        let isSame = true;\r\n        if (a.length !== b.length)\r\n            isSame = false;\r\n        for (let i = 0; i < a.length; ++i) {\r\n            if (a[i] !== b[i])\r\n                isSame = false;\r\n        }\r\n        ok(isSame, title);\r\n    };\r\n    sortAndCompare('Keep the original order 1', [bar0, bar1, clef0, clef1, key0, key1, time0, time1], [bar0, bar1, clef0, clef1, key0, key1, time0, time1], order0);\r\n    sortAndCompare('Keep the original order 2', [time0, time1, key0, key1, bar0, bar1, clef0, clef1], [time0, time1, key0, key1, bar0, bar1, clef0, clef1], order1);\r\n    sortAndCompare('Sort and keep 1', [bar0, bar1, clef0, clef1, key0, key1, time0, time1], [time0, time1, key0, key1, bar0, bar1, clef0, clef1], order1);\r\n    sortAndCompare('Sort and keep 2', [bar0, clef0, key0, time0, key1, time1, clef1, bar1, time2, clef2, bar2, key2], [bar0, bar1, bar2, clef0, clef1, clef2, key0, key1, key2, time0, time1, time2], order0);\r\n    sortAndCompare('Sort and keep 3', [bar2, clef2, key2, time0, key0, time2, clef1, bar1, time1, clef0, bar0, key1], [time0, time2, time1, key2, key0, key1, bar2, bar1, bar0, clef2, clef1, clef0], order1);\r\n}\r\nfunction draw(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 150);\r\n    const stave = new Stave(10, 10, 300);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    equal(stave.getYForNote(0), 100, 'getYForNote(0)');\r\n    equal(stave.getYForLine(5), 100, 'getYForLine(5)');\r\n    equal(stave.getYForLine(0), 50, 'getYForLine(0) - Top Line');\r\n    equal(stave.getYForLine(4), 90, 'getYForLine(4) - Bottom Line');\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawOpenStave(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 350);\r\n    let stave = new Stave(10, 10, 300, { left_bar: false });\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    stave = new Stave(10, 150, 300, { right_bar: false });\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawMultipleMeasures(options, contextBuilder) {\r\n    var _a, _b;\r\n    expect(0);\r\n    // Get the rendering context\r\n    const ctx = contextBuilder(options.elementId, 550, 200);\r\n    // bar 1\r\n    const staveBar1 = new Stave(10, 50, 200);\r\n    staveBar1.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    staveBar1.setEndBarType(BarlineType.DOUBLE);\r\n    staveBar1.setSection('A', 0, 0, (_a = options.params) === null || _a === void 0 ? void 0 : _a.fontSize, false);\r\n    staveBar1.addClef('treble').setContext(ctx).draw();\r\n    const notesBar1 = [\r\n        new StaveNote({ keys: ['c/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['d/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['b/4'], duration: 'qr' }),\r\n        new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1);\r\n    // bar 2 - juxtaposing second bar next to first bar\r\n    const staveBar2 = new Stave(staveBar1.getWidth() + staveBar1.getX(), staveBar1.getY(), 300);\r\n    staveBar2.setSection('B', 0, 0, (_b = options.params) === null || _b === void 0 ? void 0 : _b.fontSize);\r\n    staveBar2.setEndBarType(BarlineType.END);\r\n    staveBar2.setContext(ctx).draw();\r\n    const notesBar2_part1 = [\r\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\r\n    ];\r\n    const notesBar2_part2 = [\r\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\r\n    ];\r\n    // create the beams for 8th notes in 2nd measure\r\n    const beam1 = new Beam(notesBar2_part1);\r\n    const beam2 = new Beam(notesBar2_part2);\r\n    const notesBar2 = notesBar2_part1.concat(notesBar2_part2);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar2, notesBar2);\r\n    // Render beams\r\n    beam1.setContext(ctx).draw();\r\n    beam2.setContext(ctx).draw();\r\n}\r\nfunction drawRepeats(options, contextBuilder) {\r\n    expect(0);\r\n    // Get the rendering context\r\n    const ctx = contextBuilder(options.elementId, 750, 120);\r\n    // bar 1\r\n    const staveBar1 = new Stave(10, 0, 250);\r\n    staveBar1.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    staveBar1.setEndBarType(BarlineType.REPEAT_END);\r\n    staveBar1.addClef('treble');\r\n    staveBar1.addKeySignature('A');\r\n    staveBar1.setContext(ctx).draw();\r\n    const notesBar1 = [\r\n        new StaveNote({ keys: ['c/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['d/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['b/4'], duration: 'qr' }),\r\n        new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar1, notesBar1);\r\n    // bar 2 - juxtaposing second bar next to first bar\r\n    const staveBar2 = new Stave(staveBar1.getWidth() + staveBar1.getX(), staveBar1.getY(), 250);\r\n    staveBar2.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    staveBar2.setEndBarType(BarlineType.REPEAT_END);\r\n    staveBar2.setContext(ctx).draw();\r\n    const notesBar2_part1 = [\r\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\r\n    ];\r\n    const notesBar2_part2 = [\r\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\r\n    ];\r\n    notesBar2_part2[0].addModifier(new Accidental('#'), 0);\r\n    notesBar2_part2[1].addModifier(new Accidental('#'), 0);\r\n    notesBar2_part2[3].addModifier(new Accidental('b'), 0);\r\n    // create the beams for 8th notes in 2nd measure\r\n    const beam1 = new Beam(notesBar2_part1);\r\n    const beam2 = new Beam(notesBar2_part2);\r\n    const notesBar2 = notesBar2_part1.concat(notesBar2_part2);\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar2, notesBar2);\r\n    // Render beams\r\n    beam1.setContext(ctx).draw();\r\n    beam2.setContext(ctx).draw();\r\n    // bar 3 - juxtaposing third bar next to second bar\r\n    const staveBar3 = new Stave(staveBar2.getWidth() + staveBar2.getX(), staveBar2.getY(), 50);\r\n    staveBar3.setContext(ctx).draw();\r\n    const notesBar3 = [new StaveNote({ keys: ['d/5'], duration: 'wr' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar3, notesBar3);\r\n    // bar 4 - juxtaposing third bar next to third bar\r\n    const staveBar4 = new Stave(staveBar3.getWidth() + staveBar3.getX(), staveBar3.getY(), 250 - staveBar1.getModifierXShift());\r\n    staveBar4.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    staveBar4.setEndBarType(BarlineType.REPEAT_END);\r\n    staveBar4.setContext(ctx).draw();\r\n    const notesBar4 = [\r\n        new StaveNote({ keys: ['c/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['d/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['b/4'], duration: 'qr' }),\r\n        new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, staveBar4, notesBar4);\r\n}\r\nfunction drawEndModifiers(options, contextBuilder) {\r\n    expect(0);\r\n    const staveWidth = 230;\r\n    const blockHeight = 80;\r\n    let x = 10;\r\n    let y = 0;\r\n    const ctx = contextBuilder(options.elementId, 800, 700);\r\n    function drawStavesInTwoLines(endBarLine) {\r\n        // Draw a stave with one measure. Change the ending modifiers.\r\n        // eslint-disable-next-line\r\n        function drawStave(x, y, width, begMods, endMods) {\r\n            const staveBar = new Stave(x, y, width - 10);\r\n            if (begMods) {\r\n                if (begMods.barLine !== undefined) {\r\n                    staveBar.setBegBarType(begMods.barLine);\r\n                }\r\n                if (begMods.clef !== undefined) {\r\n                    staveBar.addClef(begMods.clef);\r\n                }\r\n                if (begMods.keySig !== undefined) {\r\n                    staveBar.addKeySignature(begMods.keySig);\r\n                }\r\n                if (begMods.timeSig !== undefined) {\r\n                    staveBar.setTimeSignature(begMods.timeSig);\r\n                }\r\n            }\r\n            if (endMods) {\r\n                if (endMods.barLine !== undefined) {\r\n                    staveBar.setEndBarType(endMods.barLine);\r\n                }\r\n                if (endMods.clef !== undefined) {\r\n                    staveBar.addEndClef(endMods.clef);\r\n                }\r\n                if (endMods.keySig !== undefined) {\r\n                    staveBar.setEndKeySignature(endMods.keySig);\r\n                }\r\n                if (endMods.timeSig !== undefined) {\r\n                    staveBar.setEndTimeSignature(endMods.timeSig);\r\n                }\r\n            }\r\n            staveBar.setContext(ctx).draw();\r\n            const notesBar = [\r\n                new StaveNote({ keys: ['c/4'], duration: 'q' }),\r\n                new StaveNote({ keys: ['d/4'], duration: 'q' }),\r\n                new StaveNote({ keys: ['b/4'], duration: 'qr' }),\r\n                new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'q' }),\r\n            ];\r\n            Formatter.FormatAndDraw(ctx, staveBar, notesBar);\r\n        }\r\n        drawStave(x, y, staveWidth + 50, { barLine: BarlineType.REPEAT_BEGIN, clef: 'treble', keySig: 'A' }, { barLine: endBarLine, clef: 'bass' });\r\n        x += staveWidth + 50;\r\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, keySig: 'E' });\r\n        x += staveWidth;\r\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, timeSig: '2/4' });\r\n        x += staveWidth;\r\n        x = 10;\r\n        y += blockHeight;\r\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, clef: 'bass', timeSig: '2/4' });\r\n        x += staveWidth;\r\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, clef: 'treble', keySig: 'Ab' });\r\n        x += staveWidth;\r\n        drawStave(x, y, staveWidth, { barLine: BarlineType.REPEAT_BEGIN }, { barLine: endBarLine, clef: 'bass', keySig: 'Ab', timeSig: '2/4' });\r\n        x += staveWidth;\r\n    }\r\n    y = 0;\r\n    x = 10;\r\n    // First pair of staves.\r\n    drawStavesInTwoLines(BarlineType.SINGLE);\r\n    y += blockHeight + 10;\r\n    x = 10;\r\n    // Second pair of staves, with double barlines.\r\n    drawStavesInTwoLines(BarlineType.DOUBLE);\r\n    y += blockHeight + 10;\r\n    x = 10;\r\n    // Third pair of staves, with \"two dot\" repeat barlines.\r\n    drawStavesInTwoLines(BarlineType.REPEAT_END);\r\n    y += blockHeight + 10;\r\n    x = 10;\r\n    // Fourth pair of staves, with \"two dots\" on each side of the barlines.\r\n    drawStavesInTwoLines(BarlineType.REPEAT_BOTH);\r\n}\r\nfunction drawStaveRepetition(options, contextBuilder) {\r\n    expect(0);\r\n    // Get the rendering context\r\n    const ctx = contextBuilder(options.elementId, 725, 200);\r\n    // bar 1\r\n    const mm1 = new Stave(10, 50, 150);\r\n    mm1.addClef('treble');\r\n    mm1.setRepetitionType(Repetition.type.DS_AL_FINE, options.params.yShift);\r\n    mm1.setMeasure(1);\r\n    mm1.setContext(ctx).draw();\r\n    const notesmm1 = [\r\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm1, notesmm1);\r\n    // bar 2 - juxtapose second measure\r\n    const mm2 = new Stave(mm1.getWidth() + mm1.getX(), mm1.getY(), 150);\r\n    mm2.setRepetitionType(Repetition.type.TO_CODA, options.params.yShift);\r\n    mm2.setMeasure(2);\r\n    mm2.setContext(ctx).draw();\r\n    const notesmm2 = [\r\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm2, notesmm2);\r\n    // bar 3 - juxtapose third measure\r\n    const mm3 = new Stave(mm2.getWidth() + mm2.getX(), mm1.getY(), 150);\r\n    mm3.setRepetitionType(Repetition.type.DS_AL_CODA, options.params.yShift);\r\n    mm3.setMeasure(3);\r\n    mm3.setContext(ctx).draw();\r\n    const notesmm3 = [\r\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm3, notesmm3);\r\n    // bar 4 - juxtapose fourth measure\r\n    const mm4 = new Stave(mm3.getWidth() + mm3.getX(), mm1.getY(), 150);\r\n    mm4.setRepetitionType(Repetition.type.CODA_LEFT, options.params.yShift);\r\n    mm4.setMeasure(4);\r\n    mm4.setContext(ctx).draw();\r\n    const notesmm4 = [\r\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['f/4'], duration: 'q' }),\r\n        new StaveNote({ keys: ['a/4'], duration: 'q' }),\r\n    ];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm4, notesmm4);\r\n}\r\nfunction drawVolta(options, contextBuilder) {\r\n    expect(0);\r\n    // Get the rendering context\r\n    const ctx = contextBuilder(options.elementId, 725, 200);\r\n    // bar 1\r\n    const mm1 = new Stave(10, 50, 125);\r\n    mm1.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    mm1.setRepetitionType(Repetition.type.SEGNO_LEFT);\r\n    mm1.addClef('treble');\r\n    mm1.addKeySignature('A');\r\n    mm1.setMeasure(1);\r\n    mm1.setSection('A', 0);\r\n    mm1.setContext(ctx).draw();\r\n    const notesmm1 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm1, notesmm1);\r\n    // bar 2 - juxtapose second measure\r\n    const mm2 = new Stave(mm1.getWidth() + mm1.getX(), mm1.getY(), 60);\r\n    mm2.setRepetitionType(Repetition.type.CODA_RIGHT);\r\n    mm2.setMeasure(2);\r\n    mm2.setContext(ctx).draw();\r\n    const notesmm2 = [new StaveNote({ keys: ['d/4'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm2, notesmm2);\r\n    // bar 3 - juxtapose third measure\r\n    const mm3 = new Stave(mm2.getWidth() + mm2.getX(), mm1.getY(), 60);\r\n    mm3.setVoltaType(VoltaType.BEGIN, '1.', -5);\r\n    mm3.setMeasure(3);\r\n    mm3.setContext(ctx).draw();\r\n    const notesmm3 = [new StaveNote({ keys: ['e/4'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm3, notesmm3);\r\n    // bar 4 - juxtapose fourth measure\r\n    const mm4 = new Stave(mm3.getWidth() + mm3.getX(), mm1.getY(), 60);\r\n    mm4.setVoltaType(VoltaType.MID, '', -5);\r\n    mm4.setMeasure(4);\r\n    mm4.setContext(ctx).draw();\r\n    const notesmm4 = [new StaveNote({ keys: ['f/4'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm4, notesmm4);\r\n    // bar 5 - juxtapose fifth measure\r\n    const mm5 = new Stave(mm4.getWidth() + mm4.getX(), mm1.getY(), 60);\r\n    mm5.setEndBarType(BarlineType.REPEAT_END);\r\n    mm5.setVoltaType(VoltaType.END, '', -5);\r\n    mm5.setMeasure(5);\r\n    mm5.setContext(ctx).draw();\r\n    const notesmm5 = [new StaveNote({ keys: ['g/4'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm5, notesmm5);\r\n    // bar 6 - juxtapose sixth measure\r\n    const mm6 = new Stave(mm5.getWidth() + mm5.getX(), mm1.getY(), 60);\r\n    mm6.setVoltaType(VoltaType.BEGIN_END, '2.', -5);\r\n    mm6.setEndBarType(BarlineType.DOUBLE);\r\n    mm6.setMeasure(6);\r\n    mm6.setContext(ctx).draw();\r\n    const notesmm6 = [new StaveNote({ keys: ['a/4'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm6, notesmm6);\r\n    // bar 7 - juxtapose seventh measure\r\n    const mm7 = new Stave(mm6.getWidth() + mm6.getX(), mm1.getY(), 60);\r\n    mm7.setMeasure(7);\r\n    mm7.setSection('B', 0);\r\n    mm7.setContext(ctx).draw();\r\n    const notesmm7 = [new StaveNote({ keys: ['b/4'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm7, notesmm7);\r\n    // bar 8 - juxtapose eighth measure\r\n    const mm8 = new Stave(mm7.getWidth() + mm7.getX(), mm1.getY(), 60);\r\n    mm8.setEndBarType(BarlineType.DOUBLE);\r\n    mm8.setRepetitionType(Repetition.type.DS_AL_CODA);\r\n    mm8.setMeasure(8);\r\n    mm8.setContext(ctx).draw();\r\n    const notesmm8 = [new StaveNote({ keys: ['c/5'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm8, notesmm8);\r\n    // bar 9 - juxtapose ninth measure\r\n    const mm9 = new Stave(mm8.getWidth() + mm8.getX() + 20, mm1.getY(), 125);\r\n    mm9.setEndBarType(BarlineType.END);\r\n    mm9.setRepetitionType(Repetition.type.CODA_LEFT);\r\n    mm9.addClef('treble');\r\n    mm9.addKeySignature('A');\r\n    mm9.setMeasure(9);\r\n    mm9.setContext(ctx).draw();\r\n    const notesmm9 = [new StaveNote({ keys: ['d/5'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm9, notesmm9);\r\n}\r\nfunction drawVoltaModifier(options, contextBuilder) {\r\n    expect(0);\r\n    // Get the rendering context\r\n    const ctx = contextBuilder(options.elementId, 1100, 200);\r\n    // bar 1: volta begin, with modifiers (clef, keysignature)\r\n    const mm1 = new Stave(10, 50, 175);\r\n    mm1.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    mm1.setVoltaType(VoltaType.BEGIN_END, '1.', -5);\r\n    mm1.addClef('treble');\r\n    mm1.addKeySignature('A');\r\n    mm1.setMeasure(1);\r\n    mm1.setSection('A', 0);\r\n    mm1.setContext(ctx).draw();\r\n    const notesmm1 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\r\n    // Helper function to justify and draw a 4/4 voice\r\n    Formatter.FormatAndDraw(ctx, mm1, notesmm1);\r\n    // bar 2: volta begin_mid, with modifiers (clef, keysignature)\r\n    const mm2 = new Stave(mm1.getX() + mm1.getWidth(), mm1.getY(), 175);\r\n    mm2.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    mm2.setRepetitionType(Repetition.type.DS);\r\n    mm2.setVoltaType(VoltaType.BEGIN, '2.', -5);\r\n    mm2.addClef('treble');\r\n    mm2.addKeySignature('A');\r\n    mm2.setMeasure(2);\r\n    mm2.setContext(ctx).draw();\r\n    const notesmm2 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\r\n    Formatter.FormatAndDraw(ctx, mm2, notesmm2);\r\n    // bar 3: volta mid, with modifiers (clef, keysignature)\r\n    const mm3 = new Stave(mm2.getX() + mm2.getWidth(), mm2.getY(), 175);\r\n    mm3.setVoltaType(VoltaType.MID, '', -5);\r\n    mm3.setRepetitionType(Repetition.type.DS);\r\n    mm3.addClef('treble');\r\n    mm3.addKeySignature('B');\r\n    mm3.setMeasure(3);\r\n    mm3.setSection('B', 0);\r\n    mm3.setContext(ctx).draw();\r\n    const notesmm3 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\r\n    Formatter.FormatAndDraw(ctx, mm3, notesmm3);\r\n    // bar 4: volta end, with modifiers (clef, keysignature)\r\n    const mm4 = new Stave(mm3.getX() + mm3.getWidth(), mm3.getY(), 175);\r\n    mm4.setVoltaType(VoltaType.END, '1.', -5);\r\n    mm4.setRepetitionType(Repetition.type.DS);\r\n    mm4.addClef('treble');\r\n    mm4.addKeySignature('A');\r\n    mm4.setMeasure(4);\r\n    mm4.setSection('C', 0);\r\n    mm4.setContext(ctx).draw();\r\n    const notesmm4 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\r\n    Formatter.FormatAndDraw(ctx, mm4, notesmm4);\r\n    // bar 5: d.s. shift (similar potential x-shift concern)\r\n    const mm5 = new Stave(mm4.getX() + mm4.getWidth(), mm4.getY(), 175);\r\n    // mm5.addModifier(new Repetition(Repetition.type.DS, mm4.getX() + mm4.getWidth(), 50), StaveModifierPosition.RIGHT);\r\n    mm5.setEndBarType(BarlineType.DOUBLE);\r\n    mm5.setRepetitionType(Repetition.type.DS);\r\n    mm5.addClef('treble');\r\n    mm5.addKeySignature('A');\r\n    mm5.setMeasure(5);\r\n    mm5.setSection('D', 0);\r\n    mm5.setContext(ctx).draw();\r\n    const notesmm5 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\r\n    Formatter.FormatAndDraw(ctx, mm5, notesmm5);\r\n    // bar 6: d.s. without modifiers\r\n    const mm6 = new Stave(mm5.getX() + mm5.getWidth(), mm5.getY(), 175);\r\n    // mm5.addModifier(new Repetition(Repetition.type.DS, mm4.getX() + mm4.getWidth(), 50), StaveModifierPosition.RIGHT);\r\n    mm6.setRepetitionType(Repetition.type.DS);\r\n    mm6.setMeasure(6);\r\n    mm6.setSection('E', 0);\r\n    mm6.setContext(ctx).draw();\r\n    const notesmm6 = [new StaveNote({ keys: ['c/4'], duration: 'w' })];\r\n    Formatter.FormatAndDraw(ctx, mm6, notesmm6);\r\n}\r\nfunction drawTempo(options, contextBuilder) {\r\n    expect(0);\r\n    const ctx = contextBuilder(options.elementId, 725, 350);\r\n    const padding = 10;\r\n    let x = 0;\r\n    let y = 50;\r\n    function drawTempoStaveBar(width, tempo, tempo_y, notes) {\r\n        const staveBar = new Stave(padding + x, y, width);\r\n        if (x === 0)\r\n            staveBar.addClef('treble');\r\n        staveBar.setTempo(tempo, tempo_y);\r\n        staveBar.setContext(ctx).draw();\r\n        const notesBar = notes || [\r\n            new StaveNote({ keys: ['c/4'], duration: 'q' }),\r\n            new StaveNote({ keys: ['d/4'], duration: 'q' }),\r\n            new StaveNote({ keys: ['b/4'], duration: 'q' }),\r\n            new StaveNote({ keys: ['c/4'], duration: 'q' }),\r\n        ];\r\n        Formatter.FormatAndDraw(ctx, staveBar, notesBar);\r\n        x += width;\r\n    }\r\n    drawTempoStaveBar(120, { duration: 'q', dots: 1, bpm: 80 }, 0);\r\n    drawTempoStaveBar(100, { duration: '8', dots: 2, bpm: 90 }, 0);\r\n    drawTempoStaveBar(100, { duration: '16', dots: 1, bpm: 96 }, 0);\r\n    drawTempoStaveBar(100, { duration: '32', bpm: 70 }, 0);\r\n    drawTempoStaveBar(250, { name: 'Andante', bpm: 120 }, -20, [\r\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['e/5'], duration: '8' }),\r\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\r\n    ]);\r\n    x = 0;\r\n    y += 150;\r\n    drawTempoStaveBar(120, { duration: 'w', bpm: 80 }, 0);\r\n    drawTempoStaveBar(100, { duration: 'h', bpm: 90 }, 0);\r\n    drawTempoStaveBar(100, { duration: 'q', bpm: 96 }, 0);\r\n    drawTempoStaveBar(100, { duration: '8', bpm: 70 }, 0);\r\n    drawTempoStaveBar(250, { name: 'Andante grazioso' }, 0, [\r\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['c/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['d/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['g/4'], duration: '8' }),\r\n        new StaveNote({ keys: ['e/4'], duration: '8' }),\r\n    ]);\r\n}\r\nfunction configureSingleLine(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    const stave = new Stave(10, 10, 300);\r\n    stave\r\n        .setConfigForLine(0, { visible: true })\r\n        .setConfigForLine(1, { visible: false })\r\n        .setConfigForLine(2, { visible: true })\r\n        .setConfigForLine(3, { visible: false })\r\n        .setConfigForLine(4, { visible: true });\r\n    stave.setContext(ctx).draw();\r\n    const config = stave.getConfigForLines();\r\n    equal(config[0].visible, true, 'getLinesConfiguration() - Line 0');\r\n    equal(config[1].visible, false, 'getLinesConfiguration() - Line 1');\r\n    equal(config[2].visible, true, 'getLinesConfiguration() - Line 2');\r\n    equal(config[3].visible, false, 'getLinesConfiguration() - Line 3');\r\n    equal(config[4].visible, true, 'getLinesConfiguration() - Line 4');\r\n    ok(true, 'all pass');\r\n}\r\nfunction configureAllLines(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    const stave = new Stave(10, 10, 300);\r\n    stave\r\n        .setConfigForLines([{ visible: false }, {}, { visible: false }, { visible: true }, { visible: false }])\r\n        .setContext(ctx)\r\n        .draw();\r\n    const config = stave.getConfigForLines();\r\n    equal(config[0].visible, false, 'getLinesConfiguration() - Line 0');\r\n    equal(config[1].visible, true, 'getLinesConfiguration() - Line 1');\r\n    equal(config[2].visible, false, 'getLinesConfiguration() - Line 2');\r\n    equal(config[3].visible, true, 'getLinesConfiguration() - Line 3');\r\n    equal(config[4].visible, false, 'getLinesConfiguration() - Line 4');\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawStaveText(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 900, 140);\r\n    const stave = new Stave(300, 10, 300);\r\n    stave.setText('Violin', Modifier.Position.LEFT);\r\n    stave.setText('Right Text', Modifier.Position.RIGHT);\r\n    stave.setText('Above Text', Modifier.Position.ABOVE);\r\n    stave.setText('Below Text', Modifier.Position.BELOW);\r\n    stave.setContext(ctx).draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawStaveTextMultiLine(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 900, 200);\r\n    const stave = new Stave(300, 40, 300);\r\n    stave.setText('Violin', Modifier.Position.LEFT, { shift_y: -10 });\r\n    stave.setText('2nd line', Modifier.Position.LEFT, { shift_y: 10 });\r\n    stave.setText('Right Text', Modifier.Position.RIGHT, { shift_y: -10 });\r\n    stave.setText('2nd line', Modifier.Position.RIGHT, { shift_y: 10 });\r\n    stave.setText('Above Text', Modifier.Position.ABOVE, { shift_y: -10 });\r\n    stave.setText('2nd line', Modifier.Position.ABOVE, { shift_y: 10 });\r\n    stave.setText('Left Below Text', Modifier.Position.BELOW, { shift_y: -10, justification: TextJustification.LEFT });\r\n    stave.setText('Right Below Text', Modifier.Position.BELOW, { shift_y: 10, justification: TextJustification.RIGHT });\r\n    stave.setContext(ctx).draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction factoryAPI(options) {\r\n    const f = VexFlowTests.makeFactory(options, 900, 200);\r\n    const stave = f.Stave({ x: 300, y: 40, width: 300 });\r\n    stave.setText('Violin', Modifier.Position.LEFT, { shift_y: -10 });\r\n    stave.setText('2nd line', Modifier.Position.LEFT, { shift_y: 10 });\r\n    f.draw();\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(StaveTests);\r\nexport { StaveTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// StaveConnector Tests\r\n// TODO: Should we change StaveConnector.type => StaveConnectorType? We are inconsistent with this.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Flow } from '../src/flow';\r\nimport { Modifier } from '../src/modifier';\r\nimport { Stave } from '../src/stave';\r\nimport { BarlineType } from '../src/stavebarline';\r\nimport { StaveConnector } from '../src/staveconnector';\r\nconst StaveConnectorTests = {\r\n    Start() {\r\n        QUnit.module('StaveConnector');\r\n        const run = VexFlowTests.runTests;\r\n        run('Single Draw Test', drawSingle);\r\n        run('Single Draw Test, 4px Stave Line Thickness', drawSingle4pxStaveLines);\r\n        run('Single Both Sides Test', drawSingleBoth);\r\n        run('Double Draw Test', drawDouble);\r\n        run('Bold Double Line Left Draw Test', drawRepeatBegin);\r\n        run('Bold Double Line Right Draw Test', drawRepeatEnd);\r\n        run('Thin Double Line Right Draw Test', drawThinDouble);\r\n        run('Bold Double Lines Overlapping Draw Test', drawRepeatAdjacent);\r\n        run('Bold Double Lines Offset Draw Test', drawRepeatOffset);\r\n        run('Bold Double Lines Offset Draw Test 2', drawRepeatOffset2);\r\n        run('Brace Draw Test', drawBrace);\r\n        run('Brace Wide Draw Test', drawBraceWide);\r\n        run('Bracket Draw Test', drawBracket);\r\n        run('Combined Draw Test', drawCombined);\r\n    },\r\n};\r\nfunction drawSingle(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 300);\r\n    const stave2 = new Stave(25, 120, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    const connector = new StaveConnector(stave1, stave2);\r\n    connector.setType(StaveConnector.type.SINGLE);\r\n    connector.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    connector.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawSingle4pxStaveLines(options, contextBuilder) {\r\n    const oldThickness = Flow.STAVE_LINE_THICKNESS;\r\n    Flow.STAVE_LINE_THICKNESS = 4;\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 300);\r\n    const stave2 = new Stave(25, 120, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    const connector = new StaveConnector(stave1, stave2);\r\n    connector.setType(StaveConnector.type.SINGLE);\r\n    connector.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    connector.draw();\r\n    Flow.STAVE_LINE_THICKNESS = oldThickness;\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawSingleBoth(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 300);\r\n    const stave2 = new Stave(25, 120, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    const connector1 = new StaveConnector(stave1, stave2);\r\n    connector1.setType(StaveConnector.type.SINGLE_LEFT);\r\n    connector1.setContext(ctx);\r\n    const connector2 = new StaveConnector(stave1, stave2);\r\n    connector2.setType(StaveConnector.type.SINGLE_RIGHT);\r\n    connector2.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    connector1.draw();\r\n    connector2.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawDouble(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 300);\r\n    const stave2 = new Stave(25, 120, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    const connector = new StaveConnector(stave1, stave2);\r\n    const line = new StaveConnector(stave1, stave2);\r\n    connector.setType(StaveConnector.type.DOUBLE);\r\n    connector.setContext(ctx);\r\n    line.setType(StaveConnector.type.SINGLE);\r\n    connector.setContext(ctx);\r\n    line.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    connector.draw();\r\n    line.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawBrace(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 450, 300);\r\n    const stave1 = new Stave(100, 10, 300);\r\n    const stave2 = new Stave(100, 120, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    const connector = new StaveConnector(stave1, stave2);\r\n    const line = new StaveConnector(stave1, stave2);\r\n    connector.setType(StaveConnector.type.BRACE);\r\n    connector.setContext(ctx);\r\n    connector.setText('Piano');\r\n    line.setType(StaveConnector.type.SINGLE);\r\n    connector.setContext(ctx);\r\n    line.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    connector.draw();\r\n    line.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawBraceWide(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, -20, 300);\r\n    const stave2 = new Stave(25, 200, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    const connector = new StaveConnector(stave1, stave2);\r\n    const line = new StaveConnector(stave1, stave2);\r\n    connector.setType(StaveConnector.type.BRACE);\r\n    connector.setContext(ctx);\r\n    line.setType(StaveConnector.type.SINGLE);\r\n    connector.setContext(ctx);\r\n    line.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    connector.draw();\r\n    line.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawBracket(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 300);\r\n    const stave2 = new Stave(25, 120, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    const connector = new StaveConnector(stave1, stave2);\r\n    const line = new StaveConnector(stave1, stave2);\r\n    connector.setType(StaveConnector.type.BRACKET);\r\n    connector.setContext(ctx);\r\n    line.setType(StaveConnector.type.SINGLE);\r\n    connector.setContext(ctx);\r\n    line.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    connector.draw();\r\n    line.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawRepeatBegin(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 300);\r\n    const stave2 = new Stave(25, 120, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    stave1.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave2.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    const line = new StaveConnector(stave1, stave2);\r\n    line.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\r\n    line.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    line.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawRepeatEnd(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 300);\r\n    const stave2 = new Stave(25, 120, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    stave1.setEndBarType(BarlineType.REPEAT_END);\r\n    stave2.setEndBarType(BarlineType.REPEAT_END);\r\n    const line = new StaveConnector(stave1, stave2);\r\n    line.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\r\n    line.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    line.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawThinDouble(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 300);\r\n    const stave2 = new Stave(25, 120, 300);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    stave1.setEndBarType(BarlineType.DOUBLE);\r\n    stave2.setEndBarType(BarlineType.DOUBLE);\r\n    const line = new StaveConnector(stave1, stave2);\r\n    line.setType(StaveConnector.type.THIN_DOUBLE);\r\n    line.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    line.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawRepeatAdjacent(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 150);\r\n    const stave2 = new Stave(25, 120, 150);\r\n    const stave3 = new Stave(175, 10, 150);\r\n    const stave4 = new Stave(175, 120, 150);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    stave3.setContext(ctx);\r\n    stave4.setContext(ctx);\r\n    stave1.setEndBarType(BarlineType.REPEAT_END);\r\n    stave2.setEndBarType(BarlineType.REPEAT_END);\r\n    stave3.setEndBarType(BarlineType.END);\r\n    stave4.setEndBarType(BarlineType.END);\r\n    stave1.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave2.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave3.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave4.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    const connector1 = new StaveConnector(stave1, stave2);\r\n    const connector2 = new StaveConnector(stave1, stave2);\r\n    const connector3 = new StaveConnector(stave3, stave4);\r\n    const connector4 = new StaveConnector(stave3, stave4);\r\n    connector1.setContext(ctx);\r\n    connector2.setContext(ctx);\r\n    connector3.setContext(ctx);\r\n    connector4.setContext(ctx);\r\n    connector1.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\r\n    connector2.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\r\n    connector3.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\r\n    connector4.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    stave3.draw();\r\n    stave4.draw();\r\n    connector1.draw();\r\n    connector2.draw();\r\n    connector3.draw();\r\n    connector4.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawRepeatOffset2(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 150);\r\n    const stave2 = new Stave(25, 120, 150);\r\n    const stave3 = new Stave(175, 10, 150);\r\n    const stave4 = new Stave(175, 120, 150);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    stave3.setContext(ctx);\r\n    stave4.setContext(ctx);\r\n    stave1.addClef('treble');\r\n    stave2.addClef('bass');\r\n    stave3.addClef('alto');\r\n    stave4.addClef('treble');\r\n    stave1.addTimeSignature('4/4');\r\n    stave2.addTimeSignature('4/4');\r\n    stave3.addTimeSignature('6/8');\r\n    stave4.addTimeSignature('6/8');\r\n    stave1.setEndBarType(BarlineType.REPEAT_END);\r\n    stave2.setEndBarType(BarlineType.REPEAT_END);\r\n    stave3.setEndBarType(BarlineType.END);\r\n    stave4.setEndBarType(BarlineType.END);\r\n    stave1.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave2.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave3.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave4.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    const connector1 = new StaveConnector(stave1, stave2);\r\n    const connector2 = new StaveConnector(stave1, stave2);\r\n    const connector3 = new StaveConnector(stave3, stave4);\r\n    const connector4 = new StaveConnector(stave3, stave4);\r\n    const connector5 = new StaveConnector(stave3, stave4);\r\n    connector1.setContext(ctx);\r\n    connector2.setContext(ctx);\r\n    connector3.setContext(ctx);\r\n    connector4.setContext(ctx);\r\n    connector5.setContext(ctx);\r\n    connector1.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\r\n    connector2.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\r\n    connector3.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\r\n    connector4.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\r\n    connector5.setType(StaveConnector.type.SINGLE_LEFT);\r\n    connector1.setXShift(stave1.getModifierXShift());\r\n    connector3.setXShift(stave3.getModifierXShift());\r\n    stave1.draw();\r\n    stave2.draw();\r\n    stave3.draw();\r\n    stave4.draw();\r\n    connector1.draw();\r\n    connector2.draw();\r\n    connector3.draw();\r\n    connector4.draw();\r\n    connector5.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawRepeatOffset(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 300);\r\n    const stave1 = new Stave(25, 10, 150);\r\n    const stave2 = new Stave(25, 120, 150);\r\n    const stave3 = new Stave(185, 10, 150);\r\n    const stave4 = new Stave(185, 120, 150);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    stave3.setContext(ctx);\r\n    stave4.setContext(ctx);\r\n    stave1.addClef('bass');\r\n    stave2.addClef('alto');\r\n    stave3.addClef('treble');\r\n    stave4.addClef('tenor');\r\n    stave3.addKeySignature('Ab');\r\n    stave4.addKeySignature('Ab');\r\n    stave1.addTimeSignature('4/4');\r\n    stave2.addTimeSignature('4/4');\r\n    stave3.addTimeSignature('6/8');\r\n    stave4.addTimeSignature('6/8');\r\n    stave1.setEndBarType(BarlineType.REPEAT_END);\r\n    stave2.setEndBarType(BarlineType.REPEAT_END);\r\n    stave3.setEndBarType(BarlineType.END);\r\n    stave4.setEndBarType(BarlineType.END);\r\n    stave1.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave2.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave3.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave4.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    const connector1 = new StaveConnector(stave1, stave2);\r\n    const connector2 = new StaveConnector(stave1, stave2);\r\n    const connector3 = new StaveConnector(stave3, stave4);\r\n    const connector4 = new StaveConnector(stave3, stave4);\r\n    const connector5 = new StaveConnector(stave3, stave4);\r\n    connector1.setContext(ctx);\r\n    connector2.setContext(ctx);\r\n    connector3.setContext(ctx);\r\n    connector4.setContext(ctx);\r\n    connector5.setContext(ctx);\r\n    connector1.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\r\n    connector2.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\r\n    connector3.setType(StaveConnector.type.BOLD_DOUBLE_LEFT);\r\n    connector4.setType(StaveConnector.type.BOLD_DOUBLE_RIGHT);\r\n    connector5.setType(StaveConnector.type.SINGLE_LEFT);\r\n    connector1.setXShift(stave1.getModifierXShift());\r\n    connector3.setXShift(stave3.getModifierXShift());\r\n    stave1.draw();\r\n    stave2.draw();\r\n    stave3.draw();\r\n    stave4.draw();\r\n    connector1.draw();\r\n    connector2.draw();\r\n    connector3.draw();\r\n    connector4.draw();\r\n    connector5.draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawCombined(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 550, 700);\r\n    const stave1 = new Stave(150, 10, 300);\r\n    const stave2 = new Stave(150, 100, 300);\r\n    const stave3 = new Stave(150, 190, 300);\r\n    const stave4 = new Stave(150, 280, 300);\r\n    const stave5 = new Stave(150, 370, 300);\r\n    const stave6 = new Stave(150, 460, 300);\r\n    const stave7 = new Stave(150, 560, 300);\r\n    stave1.setText('Violin', Modifier.Position.LEFT);\r\n    stave1.setContext(ctx);\r\n    stave2.setContext(ctx);\r\n    stave3.setContext(ctx);\r\n    stave4.setContext(ctx);\r\n    stave5.setContext(ctx);\r\n    stave6.setContext(ctx);\r\n    stave7.setContext(ctx);\r\n    const conn_single = new StaveConnector(stave1, stave7);\r\n    const conn_double = new StaveConnector(stave2, stave3);\r\n    const conn_bracket = new StaveConnector(stave4, stave7);\r\n    const conn_none = new StaveConnector(stave4, stave5);\r\n    const conn_brace = new StaveConnector(stave6, stave7);\r\n    conn_single.setType(StaveConnector.type.SINGLE);\r\n    conn_double.setType(StaveConnector.type.DOUBLE);\r\n    conn_bracket.setType(StaveConnector.type.BRACKET);\r\n    conn_brace.setType(StaveConnector.type.BRACE);\r\n    conn_brace.setXShift(-5);\r\n    conn_double.setText('Piano');\r\n    conn_none.setText('Multiple', { shift_y: -15 });\r\n    conn_none.setText('Line Text', { shift_y: 15 });\r\n    conn_brace.setText('Harpsichord');\r\n    conn_single.setContext(ctx);\r\n    conn_double.setContext(ctx);\r\n    conn_bracket.setContext(ctx);\r\n    conn_none.setContext(ctx);\r\n    conn_brace.setContext(ctx);\r\n    stave1.draw();\r\n    stave2.draw();\r\n    stave3.draw();\r\n    stave4.draw();\r\n    stave5.draw();\r\n    stave6.draw();\r\n    stave7.draw();\r\n    conn_single.draw();\r\n    conn_double.draw();\r\n    conn_bracket.draw();\r\n    conn_none.draw();\r\n    conn_brace.draw();\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(StaveConnectorTests);\r\nexport { StaveConnectorTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// Author: Raffaele Viglianti, 2012\r\n//\r\n// StaveHairpin Tests\r\n// TODO: Incorrect property names in the options object: vo, left_ho, right_ho.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { StaveHairpin } from '../src/stavehairpin';\r\nconst StaveHairpinTests = {\r\n    Start() {\r\n        QUnit.module('StaveHairpin');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple StaveHairpin', simple);\r\n        run('Horizontal Offset StaveHairpin', horizontal);\r\n        run('Vertical Offset StaveHairpin', vertical);\r\n        run('Height StaveHairpin', height);\r\n    },\r\n};\r\n/**\r\n * Helper function to draw a single hairpin (either crescendo or decrescendo).\r\n * @param type is StaveHairpin.type.CRESC or StaveHairpin.type.DECRESC.\r\n * @param position is Modifier.Position.ABOVE or Modifier.Position.BELOW.\r\n */\r\nfunction drawHairpin(first_note, last_note, ctx, type, position, options) {\r\n    const hairpin = new StaveHairpin({ first_note, last_note }, type);\r\n    hairpin.setContext(ctx);\r\n    hairpin.setPosition(position);\r\n    if (options) {\r\n        hairpin.setRenderOptions(options);\r\n    }\r\n    hairpin.draw();\r\n}\r\n/**\r\n * Helper function\r\n */\r\nfunction createTest(drawTwoHairpins) {\r\n    return (options) => {\r\n        const factory = VexFlowTests.makeFactory(options);\r\n        const ctx = factory.getContext();\r\n        const stave = factory.Stave();\r\n        const notes = [\r\n            factory\r\n                .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stem_direction: 1, duration: '4' })\r\n                .addModifier(factory.Accidental({ type: 'b' }), 0)\r\n                .addModifier(factory.Accidental({ type: '#' }), 1),\r\n            factory.StaveNote({ keys: ['d/4'], stem_direction: 1, duration: '4' }),\r\n            factory.StaveNote({ keys: ['e/4'], stem_direction: 1, duration: '4' }),\r\n            factory.StaveNote({ keys: ['f/4'], stem_direction: 1, duration: '4' }),\r\n        ];\r\n        const voice = factory.Voice().addTickables(notes);\r\n        factory.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n        factory.draw();\r\n        drawTwoHairpins(ctx, notes);\r\n        ok(true, 'Simple Test');\r\n    };\r\n}\r\nconst simple = createTest((ctx, notes) => {\r\n    drawHairpin(notes[0], notes[2], ctx, 1, 4);\r\n    drawHairpin(notes[1], notes[3], ctx, 2, 3);\r\n});\r\nconst horizontal = createTest((ctx, notes) => {\r\n    drawHairpin(notes[0], notes[2], ctx, 1, 3, {\r\n        height: 10,\r\n        // TODO: these three property names seem to be incorrect.\r\n        // vo => should it be 'y_shift'?\r\n        // left_ho => should it be 'left_shift_px'?\r\n        // right_ho => should it be 'right_shift_px'?\r\n        vo: 20,\r\n        left_ho: 20,\r\n        right_ho: -20, // right horizontal offset\r\n    });\r\n    drawHairpin(notes[3], notes[3], ctx, 2, 4, {\r\n        height: 10,\r\n        y_shift: 0,\r\n        left_shift_px: 0,\r\n        right_shift_px: 120, // right horizontal offset\r\n    });\r\n});\r\nconst vertical = createTest((ctx, notes) => {\r\n    drawHairpin(notes[0], notes[2], ctx, 1, 4, {\r\n        height: 10,\r\n        y_shift: 0,\r\n        left_shift_px: 0,\r\n        right_shift_px: 0, // right horizontal offset\r\n    });\r\n    drawHairpin(notes[2], notes[3], ctx, 2, 4, {\r\n        height: 10,\r\n        y_shift: -15,\r\n        left_shift_px: 2,\r\n        right_shift_px: 0, // right horizontal offset\r\n    });\r\n});\r\nconst height = createTest((ctx, notes) => {\r\n    drawHairpin(notes[0], notes[2], ctx, 1, 4, {\r\n        height: 10,\r\n        y_shift: 0,\r\n        left_shift_px: 0,\r\n        right_shift_px: 0, // right horizontal offset\r\n    });\r\n    drawHairpin(notes[2], notes[3], ctx, 2, 4, {\r\n        height: 15,\r\n        y_shift: 0,\r\n        left_shift_px: 2,\r\n        right_shift_px: 0, // right horizontal offset\r\n    });\r\n});\r\nVexFlowTests.register(StaveHairpinTests);\r\nexport { StaveHairpinTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// StaveLine Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Dot } from '../src/dot';\r\nimport { Font, FontStyle } from '../src/font';\r\nconst StaveLineTests = {\r\n    Start() {\r\n        QUnit.module('StaveLine');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple StaveLine', simple0);\r\n        run('StaveLine Arrow Options', simple1);\r\n    },\r\n};\r\nfunction simple0(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave().addClef('treble');\r\n    const notes = [\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }),\r\n        f.StaveNote({ keys: ['c/5'], duration: '4', clef: 'treble' }),\r\n        f.StaveNote({ keys: ['c/4', 'g/4', 'b/4'], duration: '4', clef: 'treble' }),\r\n        f.StaveNote({ keys: ['f/4', 'a/4', 'f/5'], duration: '4', clef: 'treble' }),\r\n    ];\r\n    const voice = f.Voice().addTickables(notes);\r\n    f.StaveLine({\r\n        from: notes[0],\r\n        to: notes[1],\r\n        first_indices: [0],\r\n        last_indices: [0],\r\n        options: {\r\n            font: { family: Font.SERIF, size: 12, style: FontStyle.ITALIC },\r\n            text: 'gliss.',\r\n        },\r\n    });\r\n    const staveLine2 = f.StaveLine({\r\n        from: notes[2],\r\n        to: notes[3],\r\n        first_indices: [2, 1, 0],\r\n        last_indices: [0, 1, 2],\r\n    });\r\n    staveLine2.render_options.line_dash = [10, 10];\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction simple1(options) {\r\n    const f = VexFlowTests.makeFactory(options, 770);\r\n    const stave = f.Stave().addClef('treble');\r\n    const notes = [\r\n        f.StaveNote({ keys: ['c#/5', 'd/5'], duration: '4', clef: 'treble', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }).addModifier(f.Accidental({ type: '#' }), 0),\r\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '4', clef: 'treble' }),\r\n        f\r\n            .StaveNote({ keys: ['f/4', 'a/4', 'c/5'], duration: '4', clef: 'treble' })\r\n            .addModifier(f.Accidental({ type: '#' }), 2),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }).addModifier(f.Accidental({ type: '#' }), 0),\r\n        f.StaveNote({ keys: ['c#/5', 'd/5'], duration: '4', clef: 'treble', stem_direction: -1 }),\r\n        f.StaveNote({ keys: ['c/4', 'd/4', 'g/4'], duration: '4', clef: 'treble' }),\r\n        f\r\n            .StaveNote({ keys: ['f/4', 'a/4', 'c/5'], duration: '4', clef: 'treble' })\r\n            .addModifier(f.Accidental({ type: '#' }), 2),\r\n    ];\r\n    Dot.buildAndAttach([notes[0]], { all: true });\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    const staveLine0 = f.StaveLine({\r\n        from: notes[0],\r\n        to: notes[1],\r\n        first_indices: [0],\r\n        last_indices: [0],\r\n        options: { text: 'Left' },\r\n    });\r\n    const staveLine4 = f.StaveLine({\r\n        from: notes[2],\r\n        to: notes[3],\r\n        first_indices: [1],\r\n        last_indices: [1],\r\n        options: { text: 'Right' },\r\n    });\r\n    const staveLine1 = f.StaveLine({\r\n        from: notes[4],\r\n        to: notes[5],\r\n        first_indices: [0],\r\n        last_indices: [0],\r\n        options: { text: 'Center' },\r\n    });\r\n    const staveLine2 = f.StaveLine({\r\n        from: notes[6],\r\n        to: notes[7],\r\n        first_indices: [1],\r\n        last_indices: [0],\r\n    });\r\n    const staveLine3 = f.StaveLine({\r\n        from: notes[6],\r\n        to: notes[7],\r\n        first_indices: [2],\r\n        last_indices: [2],\r\n        options: { text: 'Top' },\r\n    });\r\n    staveLine0.render_options.draw_end_arrow = true;\r\n    staveLine0.render_options.text_justification = 1;\r\n    staveLine0.render_options.text_position_vertical = 2;\r\n    staveLine1.render_options.draw_end_arrow = true;\r\n    staveLine1.render_options.arrowhead_length = 30;\r\n    staveLine1.render_options.line_width = 5;\r\n    staveLine1.render_options.text_justification = 2;\r\n    staveLine1.render_options.text_position_vertical = 2;\r\n    staveLine4.render_options.line_width = 2;\r\n    staveLine4.render_options.draw_end_arrow = true;\r\n    staveLine4.render_options.draw_start_arrow = true;\r\n    staveLine4.render_options.arrowhead_angle = 0.5;\r\n    staveLine4.render_options.arrowhead_length = 20;\r\n    staveLine4.render_options.text_justification = 3;\r\n    staveLine4.render_options.text_position_vertical = 2;\r\n    staveLine2.render_options.draw_start_arrow = true;\r\n    staveLine2.render_options.line_dash = [5, 4];\r\n    staveLine3.render_options.draw_end_arrow = true;\r\n    staveLine3.render_options.draw_start_arrow = true;\r\n    staveLine3.render_options.color = 'red';\r\n    staveLine3.render_options.text_position_vertical = 1;\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nVexFlowTests.register(StaveLineTests);\r\nexport { StaveLineTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// StaveModifier Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Stave } from '../src/stave';\r\nimport { BarlineType } from '../src/stavebarline';\r\nimport { StaveModifierPosition } from '../src/stavemodifier';\r\nconst StaveModifierTests = {\r\n    Start() {\r\n        QUnit.module('StaveModifier');\r\n        const run = VexFlowTests.runTests;\r\n        run('Stave Draw Test', draw);\r\n        run('Begin & End StaveModifier Test', drawBeginAndEnd);\r\n    },\r\n};\r\nfunction draw(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    const stave = new Stave(10, 10, 300);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    equal(stave.getYForNote(0), 100, 'getYForNote(0)');\r\n    equal(stave.getYForLine(5), 100, 'getYForLine(5)');\r\n    equal(stave.getYForLine(0), 50, 'getYForLine(0) - Top Line');\r\n    equal(stave.getYForLine(4), 90, 'getYForLine(4) - Bottom Line');\r\n    ok(true, 'all pass');\r\n}\r\nfunction drawBeginAndEnd(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    const stave = new Stave(10, 10, 400);\r\n    stave.setContext(ctx);\r\n    stave.setTimeSignature('C|');\r\n    stave.setKeySignature('Db');\r\n    stave.setClef('treble');\r\n    stave.setBegBarType(BarlineType.REPEAT_BEGIN);\r\n    stave.setEndClef('alto');\r\n    stave.setEndTimeSignature('9/8');\r\n    stave.setEndKeySignature('G', 'C#');\r\n    stave.setEndBarType(BarlineType.DOUBLE);\r\n    stave.draw();\r\n    // change\r\n    const END = StaveModifierPosition.END;\r\n    stave.setY(100);\r\n    stave.setTimeSignature('3/4');\r\n    stave.setKeySignature('G', 'C#');\r\n    stave.setClef('bass');\r\n    stave.setBegBarType(BarlineType.SINGLE);\r\n    stave.setClef('treble', undefined, undefined, END);\r\n    stave.setTimeSignature('C', undefined, END);\r\n    stave.setKeySignature('F', undefined, END);\r\n    stave.setEndBarType(BarlineType.SINGLE);\r\n    stave.draw();\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(StaveModifierTests);\r\nexport { StaveModifierTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// StaveNote Tests\r\n// TODO: In StaveNote.preFormat() line 929, should noteHeadPadding default to StaveNote.minNoteheadPadding?\r\n//       The bounding box of a note changes slightly when we add a ModifierContext (even if we add zero modifiers).\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Accidental } from '../src/accidental';\r\nimport { Annotation, AnnotationVerticalJustify } from '../src/annotation';\r\nimport { Articulation } from '../src/articulation';\r\nimport { Beam } from '../src/beam';\r\nimport { Dot } from '../src/dot';\r\nimport { Flow } from '../src/flow';\r\nimport { Formatter } from '../src/formatter';\r\nimport { Fraction } from '../src/fraction';\r\nimport { FretHandFinger } from '../src/frethandfinger';\r\nimport { Modifier } from '../src/modifier';\r\nimport { ModifierContext } from '../src/modifiercontext';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Stem } from '../src/stem';\r\nimport { StringNumber } from '../src/stringnumber';\r\nimport { Stroke } from '../src/strokes';\r\nimport { TickContext } from '../src/tickcontext';\r\nconst StaveNoteTests = {\r\n    Start() {\r\n        QUnit.module('StaveNote');\r\n        test('Tick', ticks);\r\n        test('Tick - New API', ticksNewAPI);\r\n        test('Stem', stem);\r\n        test('Automatic Stem Direction', autoStem);\r\n        test('Stem Extension Pitch', stemExtensionPitch);\r\n        test('Displacement after calling setStemDirection', setStemDirectionDisplacement);\r\n        test('StaveLine', staveLine);\r\n        test('Width', width);\r\n        test('TickContext', tickContext);\r\n        const run = VexFlowTests.runTests;\r\n        run('StaveNote Draw - Treble', drawBasic, { clef: 'treble', octaveShift: 0, restKey: 'r/4' });\r\n        run('StaveNote BoundingBoxes - Treble', drawBoundingBoxes, { clef: 'treble', octaveShift: 0, restKey: 'r/4' });\r\n        run('StaveNote Draw - Alto', drawBasic, { clef: 'alto', octaveShift: -1, restKey: 'r/4' });\r\n        run('StaveNote Draw - Tenor', drawBasic, { clef: 'tenor', octaveShift: -1, restKey: 'r/3' });\r\n        run('StaveNote Draw - Bass', drawBasic, { clef: 'bass', octaveShift: -2, restKey: 'r/3' });\r\n        run('StaveNote Draw - Harmonic And Muted', drawHarmonicAndMuted);\r\n        run('StaveNote Draw - Slash', drawSlash);\r\n        run('Displacements', displacements);\r\n        run('StaveNote Draw - Bass 2', drawBass);\r\n        run('StaveNote Draw - Key Styles', drawKeyStyles);\r\n        run('StaveNote Draw - StaveNote Stem Styles', drawNoteStemStyles);\r\n        run('StaveNote Draw - StaveNote Stem Lengths', drawNoteStemLengths);\r\n        run('StaveNote Draw - StaveNote Flag Styles', drawNoteStylesWithFlag);\r\n        run('StaveNote Draw - StaveNote Styles', drawNoteStyles);\r\n        run('Stave, Ledger Line, Beam, Stem and Flag Styles', drawBeamStyles);\r\n        run('Flag and Dot Placement - Stem Up', dotsAndFlagsStemUp);\r\n        run('Flag and Dots Placement - Stem Down', dotsAndFlagsStemDown);\r\n        run('Beam and Dot Placement - Stem Up', dotsAndBeamsUp);\r\n        run('Beam and Dot Placement - Stem Down', dotsAndBeamsDown);\r\n        run('Note Heads Placement - Simple', noteHeadsSimple);\r\n        run('Note Heads Placement - Hidden Notes', noteHeadsHidden);\r\n        run('Center Aligned Note', centerAlignedRest);\r\n        run('Center Aligned Note with Articulation', centerAlignedRestFermata);\r\n        run('Center Aligned Note with Annotation', centerAlignedRestAnnotation);\r\n        run('Center Aligned Note - Multi Voice', centerAlignedMultiVoice);\r\n        run('Center Aligned Note with Multiple Modifiers', centerAlignedNoteMultiModifiers);\r\n        // This interactivity test currently only works with the SVG backend.\r\n        VexFlowTests.runSVGTest('Interactive Mouseover StaveNote', drawBasic, {\r\n            clef: 'treble',\r\n            octaveShift: 0,\r\n            restKey: 'r/4',\r\n            ui: true,\r\n        });\r\n    },\r\n};\r\n// Helper function to create StaveNotes.\r\nconst staveNote = (struct) => new StaveNote(struct);\r\n/**\r\n * Helper function to draw a note with an optional bounding box.\r\n */\r\nfunction draw(note, stave, context, x, drawBoundingBox = false, addModifierContext = true) {\r\n    // Associate the note with the stave.\r\n    note.setStave(stave);\r\n    // A ModifierContext is required for dots and other modifiers to be drawn properly.\r\n    // If added, it changes the bounding box of a note, even if there are no modifiers to draw.\r\n    // See StaveNote.minNoteheadPadding in stavenote.ts.\r\n    if (addModifierContext) {\r\n        note.addToModifierContext(new ModifierContext());\r\n    }\r\n    new TickContext().addTickable(note).preFormat().setX(x);\r\n    note.setContext(context).draw();\r\n    if (drawBoundingBox) {\r\n        const bb = note.getBoundingBox();\r\n        context.rect(bb.getX(), bb.getY(), bb.getW(), bb.getH());\r\n        context.stroke();\r\n    }\r\n    return note;\r\n}\r\nfunction ticks() {\r\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\r\n    // Key value pairs of `testName: [durationString, expectedBeats, expectedNoteType]`\r\n    const tickTests = {\r\n        'Breve note': ['1/2', 8.0, 'n'],\r\n        'Whole note': ['w', 4.0, 'n'],\r\n        'Quarter note': ['q', 1.0, 'n'],\r\n        'Dotted half note': ['hd', 3.0, 'n'],\r\n        'Doubled-dotted half note': ['hdd', 3.5, 'n'],\r\n        'Triple-dotted half note': ['hddd', 3.75, 'n'],\r\n        'Dotted half rest': ['hdr', 3.0, 'r'],\r\n        'Double-dotted half rest': ['hddr', 3.5, 'r'],\r\n        'Triple-dotted half rest': ['hdddr', 3.75, 'r'],\r\n        'Dotted harmonic quarter note': ['qdh', 1.5, 'h'],\r\n        'Double-dotted harmonic quarter note': ['qddh', 1.75, 'h'],\r\n        'Triple-dotted harmonic quarter note': ['qdddh', 1.875, 'h'],\r\n        'Dotted muted 8th note': ['8dm', 0.75, 'm'],\r\n        'Double-dotted muted 8th note': ['8ddm', 0.875, 'm'],\r\n        'Triple-dotted muted 8th note': ['8dddm', 0.9375, 'm'],\r\n    };\r\n    Object.keys(tickTests).forEach((testName) => {\r\n        const testData = tickTests[testName];\r\n        const durationString = testData[0];\r\n        const expectedBeats = testData[1];\r\n        const expectedNoteType = testData[2];\r\n        const note = new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: durationString });\r\n        equal(note.getTicks().value(), BEAT * expectedBeats, testName + ' must have ' + expectedBeats + ' beats');\r\n        equal(note.getNoteType(), expectedNoteType, 'Note type must be ' + expectedNoteType);\r\n    });\r\n    throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '8.7dddm' }), /BadArguments/, \"Invalid note duration '8.7' throws BadArguments exception\");\r\n    throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '2Z' }), /BadArguments/, \"Invalid note type 'Z' throws BadArguments exception\");\r\n    throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '2dddZ' }), /BadArguments/, \"Invalid note type 'Z' throws BadArguments exception\");\r\n}\r\nfunction ticksNewAPI() {\r\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\r\n    // Key value pairs of `testName: [noteData, expectedBeats, expectedNoteType]`\r\n    const tickTests = {\r\n        'Breve note': [{ duration: '1/2' }, 8.0, 'n'],\r\n        'Whole note': [{ duration: 'w' }, 4.0, 'n'],\r\n        'Quarter note': [{ duration: 'q' }, 1.0, 'n'],\r\n        'Dotted half note': [{ duration: 'h', dots: 1 }, 3.0, 'n'],\r\n        'Doubled-dotted half note': [{ duration: 'h', dots: 2 }, 3.5, 'n'],\r\n        'Triple-dotted half note': [{ duration: 'h', dots: 3 }, 3.75, 'n'],\r\n        'Dotted half rest': [{ duration: 'h', dots: 1, type: 'r' }, 3.0, 'r'],\r\n        'Double-dotted half rest': [{ duration: 'h', dots: 2, type: 'r' }, 3.5, 'r'],\r\n        'Triple-dotted half rest': [{ duration: 'h', dots: 3, type: 'r' }, 3.75, 'r'],\r\n        'Dotted harmonic quarter note': [{ duration: 'q', dots: 1, type: 'h' }, 1.5, 'h'],\r\n        'Double-dotted harmonic quarter note': [{ duration: 'q', dots: 2, type: 'h' }, 1.75, 'h'],\r\n        'Triple-dotted harmonic quarter note': [{ duration: 'q', dots: 3, type: 'h' }, 1.875, 'h'],\r\n        'Dotted muted 8th note': [{ duration: '8', dots: 1, type: 'm' }, 0.75, 'm'],\r\n        'Double-dotted muted 8th note': [{ duration: '8', dots: 2, type: 'm' }, 0.875, 'm'],\r\n        'Triple-dotted muted 8th note': [{ duration: '8', dots: 3, type: 'm' }, 0.9375, 'm'],\r\n    };\r\n    Object.keys(tickTests).forEach(function (testName) {\r\n        const testData = tickTests[testName];\r\n        const noteData = testData[0];\r\n        const expectedBeats = testData[1];\r\n        const expectedNoteType = testData[2];\r\n        noteData.keys = ['c/4', 'e/4', 'g/4'];\r\n        const note = new StaveNote(noteData);\r\n        equal(note.getTicks().value(), BEAT * expectedBeats, testName + ' must have ' + expectedBeats + ' beats');\r\n        equal(note.getNoteType(), expectedNoteType, 'Note type must be ' + expectedNoteType);\r\n    });\r\n    throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '8.7dddm' }), /BadArguments/, \"Invalid note duration '8.7' throws BadArguments exception\");\r\n    throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '2Z' }), /BadArguments/, \"Invalid note type 'Z' throws BadArguments exception\");\r\n    throws(() => new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '2dddZ' }), /BadArguments/, \"Invalid note type 'Z' throws BadArguments exception\");\r\n}\r\nfunction stem() {\r\n    const note = new StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: 'w' });\r\n    equal(note.getStemDirection(), Stem.UP, 'Default note has UP stem');\r\n}\r\nfunction autoStem() {\r\n    const testData = [\r\n        [['c/5', 'e/5', 'g/5'], Stem.DOWN],\r\n        [['e/4', 'g/4', 'c/5'], Stem.UP],\r\n        [['c/5'], Stem.DOWN],\r\n        [['a/4', 'e/5', 'g/5'], Stem.DOWN],\r\n        [['b/4'], Stem.DOWN],\r\n    ];\r\n    testData.forEach((td) => {\r\n        const keys = td[0];\r\n        const expectedStemDirection = td[1];\r\n        const note = new StaveNote({ keys: keys, auto_stem: true, duration: '8' });\r\n        equal(note.getStemDirection(), expectedStemDirection, 'Stem must be ' + (expectedStemDirection === Stem.UP ? 'up' : 'down'));\r\n    });\r\n}\r\nfunction stemExtensionPitch() {\r\n    // [keys, expectedStemExtension, override stem direction]\r\n    const testData = [\r\n        [['c/5', 'e/5', 'g/5'], 0, 0],\r\n        [['e/4', 'g/4', 'c/5'], 0, 0],\r\n        [['c/5'], 0, 0],\r\n        [['f/3'], 15, 0],\r\n        [['f/3'], 15, Stem.UP],\r\n        [['f/3'], 0, Stem.DOWN],\r\n        [['f/3', 'e/5'], 0, 0],\r\n        [['g/6'], 25, 0],\r\n        [['g/6'], 25, Stem.DOWN],\r\n        [['g/6'], 0, Stem.UP],\r\n    ];\r\n    testData.forEach((td) => {\r\n        const keys = td[0];\r\n        const expectedStemExtension = td[1];\r\n        const overrideStemDirection = td[2];\r\n        let note;\r\n        if (overrideStemDirection === 0) {\r\n            note = new StaveNote({ keys: keys, auto_stem: true, duration: '4' });\r\n        }\r\n        else {\r\n            note = new StaveNote({ keys: keys, duration: '4', stem_direction: overrideStemDirection });\r\n        }\r\n        equal(note.getStemExtension(), expectedStemExtension, 'For ' + keys.toString() + ' StemExtension must be ' + expectedStemExtension);\r\n        // set to weird Stave\r\n        const stave = new Stave(10, 10, 300, { spacing_between_lines_px: 20 });\r\n        note.setStave(stave);\r\n        equal(note.getStemExtension(), expectedStemExtension * 2, 'For wide staff ' + keys.toString() + ' StemExtension must be ' + expectedStemExtension * 2);\r\n        //    const whole_note = new StaveNote({ keys: keys, duration: 'w' });\r\n        //    equal(\r\n        //      whole_note.getStemExtension(),\r\n        //      -1 * Flow.STEM_HEIGHT,\r\n        //      'For ' + keys.toString() + ' whole_note StemExtension must always be -1 * Flow.STEM_HEIGHT'\r\n        //    );\r\n    });\r\n}\r\nfunction setStemDirectionDisplacement() {\r\n    function getDisplacements(note) {\r\n        return note.noteHeads.map((noteHead) => noteHead.isDisplaced());\r\n    }\r\n    const stemUpDisplacements = [false, true, false];\r\n    const stemDownDisplacements = [true, false, false];\r\n    const note = new StaveNote({ keys: ['c/5', 'd/5', 'g/5'], stem_direction: Stem.UP, duration: '4' });\r\n    deepEqual(getDisplacements(note), stemUpDisplacements);\r\n    note.setStemDirection(Stem.DOWN);\r\n    deepEqual(getDisplacements(note), stemDownDisplacements);\r\n    note.setStemDirection(Stem.UP);\r\n    deepEqual(getDisplacements(note), stemUpDisplacements);\r\n}\r\nfunction staveLine() {\r\n    const stave = new Stave(10, 10, 300);\r\n    const note = new StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w' });\r\n    note.setStave(stave);\r\n    const props = note.getKeyProps();\r\n    equal(props[0].line, 0, 'C/4 on line 0');\r\n    equal(props[1].line, 1, 'E/4 on line 1');\r\n    equal(props[2].line, 2.5, 'A/4 on line 2.5');\r\n    const ys = note.getYs();\r\n    equal(ys.length, 3, 'Chord should be rendered on three lines');\r\n    equal(ys[0], 100, 'Line for C/4');\r\n    equal(ys[1], 90, 'Line for E/4');\r\n    equal(ys[2], 75, 'Line for A/4');\r\n}\r\nfunction width() {\r\n    const note = new StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w' });\r\n    throws(() => note.getWidth(), /UnformattedNote/, 'Unformatted note should have no width');\r\n}\r\nfunction tickContext() {\r\n    const stave = new Stave(10, 10, 400);\r\n    const note = new StaveNote({ keys: ['c/4', 'e/4', 'a/4'], duration: 'w' }).setStave(stave);\r\n    new TickContext().addTickable(note).preFormat().setX(10).setPadding(0);\r\n    expect(0);\r\n}\r\nfunction drawBasic(options, contextBuilder) {\r\n    const clef = options.params.clef;\r\n    const octaveShift = options.params.octaveShift;\r\n    const restKey = options.params.restKey;\r\n    const ctx = contextBuilder(options.elementId, 700, 180);\r\n    const stave = new Stave(10, 30, 750);\r\n    stave.setContext(ctx);\r\n    stave.addClef(clef);\r\n    stave.draw();\r\n    const lowerKeys = ['c/', 'e/', 'a/'];\r\n    const higherKeys = ['c/', 'e/', 'a/'];\r\n    for (let k = 0; k < lowerKeys.length; k++) {\r\n        lowerKeys[k] = lowerKeys[k] + (4 + octaveShift);\r\n        higherKeys[k] = higherKeys[k] + (5 + octaveShift);\r\n    }\r\n    const restKeys = [restKey];\r\n    const noteStructs = [\r\n        { clef: clef, keys: higherKeys, duration: '1/2' },\r\n        { clef: clef, keys: lowerKeys, duration: 'w' },\r\n        { clef: clef, keys: higherKeys, duration: 'h' },\r\n        { clef: clef, keys: lowerKeys, duration: 'q' },\r\n        { clef: clef, keys: higherKeys, duration: '8' },\r\n        { clef: clef, keys: lowerKeys, duration: '16' },\r\n        { clef: clef, keys: higherKeys, duration: '32' },\r\n        { clef: clef, keys: higherKeys, duration: '64' },\r\n        { clef: clef, keys: higherKeys, duration: '128' },\r\n        { clef: clef, keys: lowerKeys, duration: '1/2', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: 'w', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: 'h', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: 'q', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '8', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '16', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '32', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '64', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '128', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: restKeys, duration: '1/2r' },\r\n        { clef: clef, keys: restKeys, duration: 'wr' },\r\n        { clef: clef, keys: restKeys, duration: 'hr' },\r\n        { clef: clef, keys: restKeys, duration: 'qr' },\r\n        { clef: clef, keys: restKeys, duration: '8r' },\r\n        { clef: clef, keys: restKeys, duration: '16r' },\r\n        { clef: clef, keys: restKeys, duration: '32r' },\r\n        { clef: clef, keys: restKeys, duration: '64r' },\r\n        { clef: clef, keys: restKeys, duration: '128r' },\r\n        { keys: ['x/4'], duration: 'h' },\r\n    ];\r\n    expect(noteStructs.length * 2);\r\n    const colorDescendants = (parentItem, color) => () => parentItem.querySelectorAll('*').forEach((child) => {\r\n        child.setAttribute('fill', color);\r\n        child.setAttribute('stroke', color);\r\n    });\r\n    for (let i = 0; i < noteStructs.length; ++i) {\r\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, (i + 1) * 25);\r\n        // If this is an interactivity test (ui: true), then attach mouseover & mouseout handlers to the notes.\r\n        if (options.params.ui) {\r\n            const item = note.getAttribute('el');\r\n            item.addEventListener('mouseover', colorDescendants(item, 'green'), false);\r\n            item.addEventListener('mouseout', colorDescendants(item, 'black'), false);\r\n        }\r\n        ok(note.getX() > 0, 'Note ' + i + ' has X value');\r\n        ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n    }\r\n}\r\nfunction drawBoundingBoxes(options, contextBuilder) {\r\n    const clef = options.params.clef;\r\n    const octaveShift = options.params.octaveShift;\r\n    const restKey = options.params.restKey;\r\n    const ctx = contextBuilder(options.elementId, 700, 180);\r\n    const stave = new Stave(10, 30, 750);\r\n    stave.setContext(ctx);\r\n    stave.addClef(clef);\r\n    stave.draw();\r\n    const lowerKeys = ['c/', 'e/', 'a/'];\r\n    const higherKeys = ['c/', 'e/', 'a/'];\r\n    for (let k = 0; k < lowerKeys.length; k++) {\r\n        lowerKeys[k] = lowerKeys[k] + (4 + octaveShift);\r\n        higherKeys[k] = higherKeys[k] + (5 + octaveShift);\r\n    }\r\n    const restKeys = [restKey];\r\n    const noteStructs = [\r\n        { clef: clef, keys: higherKeys, duration: '1/2' },\r\n        { clef: clef, keys: lowerKeys, duration: 'w' },\r\n        { clef: clef, keys: higherKeys, duration: 'h' },\r\n        { clef: clef, keys: lowerKeys, duration: 'q' },\r\n        { clef: clef, keys: higherKeys, duration: '8' },\r\n        { clef: clef, keys: lowerKeys, duration: '16' },\r\n        { clef: clef, keys: higherKeys, duration: '32' },\r\n        { clef: clef, keys: higherKeys, duration: '64' },\r\n        { clef: clef, keys: higherKeys, duration: '128' },\r\n        { clef: clef, keys: lowerKeys, duration: '1/2', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: 'w', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: 'h', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: 'q', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '8', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '16', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '32', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '64', stem_direction: Stem.DOWN },\r\n        { clef: clef, keys: lowerKeys, duration: '128' },\r\n        { clef: clef, keys: restKeys, duration: '1/2r' },\r\n        { clef: clef, keys: restKeys, duration: 'wr' },\r\n        { clef: clef, keys: restKeys, duration: 'hr' },\r\n        { clef: clef, keys: restKeys, duration: 'qr' },\r\n        { clef: clef, keys: restKeys, duration: '8r' },\r\n        { clef: clef, keys: restKeys, duration: '16r' },\r\n        { clef: clef, keys: restKeys, duration: '32r' },\r\n        { clef: clef, keys: restKeys, duration: '64r' },\r\n        { clef: clef, keys: restKeys, duration: '128r' },\r\n        { keys: ['x/4'], duration: 'h' },\r\n    ];\r\n    expect(noteStructs.length * 2);\r\n    for (let i = 0; i < noteStructs.length; ++i) {\r\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, (i + 1) * 25, true /* drawBoundingBox */, false /* addModifierContext */);\r\n        ok(note.getX() > 0, 'Note ' + i + ' has X value');\r\n        ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n    }\r\n}\r\nfunction drawBass(options, contextBuilder) {\r\n    expect(40);\r\n    const ctx = contextBuilder(options.elementId, 600, 280);\r\n    const stave = new Stave(10, 10, 650);\r\n    stave.setContext(ctx);\r\n    stave.addClef('bass');\r\n    stave.draw();\r\n    const noteStructs = [\r\n        { clef: 'bass', keys: ['c/3', 'e/3', 'a/3'], duration: '1/2' },\r\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: 'w' },\r\n        { clef: 'bass', keys: ['c/3', 'e/3', 'a/3'], duration: 'h' },\r\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: 'q' },\r\n        { clef: 'bass', keys: ['c/3', 'e/3', 'a/3'], duration: '8' },\r\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: '16' },\r\n        { clef: 'bass', keys: ['c/3', 'e/3', 'a/3'], duration: '32' },\r\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: 'h', stem_direction: Stem.DOWN },\r\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: 'q', stem_direction: Stem.DOWN },\r\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: '8', stem_direction: Stem.DOWN },\r\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: '16', stem_direction: Stem.DOWN },\r\n        { clef: 'bass', keys: ['c/2', 'e/2', 'a/2'], duration: '32', stem_direction: Stem.DOWN },\r\n        { keys: ['r/4'], duration: '1/2r' },\r\n        { keys: ['r/4'], duration: 'wr' },\r\n        { keys: ['r/4'], duration: 'hr' },\r\n        { keys: ['r/4'], duration: 'qr' },\r\n        { keys: ['r/4'], duration: '8r' },\r\n        { keys: ['r/4'], duration: '16r' },\r\n        { keys: ['r/4'], duration: '32r' },\r\n        { keys: ['x/4'], duration: 'h' },\r\n    ];\r\n    for (let i = 0; i < noteStructs.length; ++i) {\r\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, (i + 1) * 25);\r\n        ok(note.getX() > 0, 'Note ' + i + ' has X value');\r\n        ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n    }\r\n}\r\nfunction displacements(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 700, 155);\r\n    ctx.scale(0.9, 0.9);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    const stave = new Stave(10, 10, 675);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const noteStructs = [\r\n        { keys: ['g/3', 'a/3', 'c/4', 'd/4', 'e/4'], duration: '1/2' },\r\n        { keys: ['g/3', 'a/3', 'c/4', 'd/4', 'e/4'], duration: 'w' },\r\n        { keys: ['d/4', 'e/4', 'f/4'], duration: 'h' },\r\n        { keys: ['f/4', 'g/4', 'a/4', 'b/4'], duration: 'q' },\r\n        { keys: ['e/3', 'b/3', 'c/4', 'e/4', 'f/4', 'g/5', 'a/5'], duration: '8' },\r\n        { keys: ['a/3', 'c/4', 'e/4', 'g/4', 'a/4', 'b/4'], duration: '16' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32' },\r\n        { keys: ['c/4', 'e/4', 'a/4', 'a/4'], duration: '64' },\r\n        { keys: ['g/3', 'c/4', 'd/4', 'e/4'], duration: 'h', stem_direction: Stem.DOWN },\r\n        { keys: ['d/4', 'e/4', 'f/4'], duration: 'q', stem_direction: Stem.DOWN },\r\n        { keys: ['f/4', 'g/4', 'a/4', 'b/4'], duration: '8', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'd/4', 'e/4', 'f/4', 'g/4', 'a/4'], duration: '16', stem_direction: Stem.DOWN },\r\n        { keys: ['b/3', 'c/4', 'e/4', 'a/4', 'b/5', 'c/6', 'e/6'], duration: '32', stem_direction: Stem.DOWN },\r\n        {\r\n            keys: ['b/3', 'c/4', 'e/4', 'a/4', 'b/5', 'c/6', 'e/6', 'e/6'],\r\n            duration: '64',\r\n            stem_direction: Stem.DOWN,\r\n        },\r\n    ];\r\n    expect(noteStructs.length * 2);\r\n    for (let i = 0; i < noteStructs.length; ++i) {\r\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, (i + 1) * 45);\r\n        ok(note.getX() > 0, 'Note ' + i + ' has X value');\r\n        ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n    }\r\n}\r\nfunction drawHarmonicAndMuted(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 1000, 180);\r\n    const stave = new Stave(10, 10, 950);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const noteStructs = [\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '1/2h' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'wh' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'hh' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'qh' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '8h' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '16h' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32h' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '64h' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '128h' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '1/2h', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'wh', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'hh', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'qh', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '8h', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '16h', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32h', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '64h', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '128h', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '1/2m' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'wm' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'hm' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'qm' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '8m' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '16m' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32m' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '64m' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '128m' },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '1/2m', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'wm', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'hm', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: 'qm', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '8m', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '16m', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '32m', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '64m', stem_direction: Stem.DOWN },\r\n        { keys: ['c/4', 'e/4', 'a/4'], duration: '128m', stem_direction: Stem.DOWN },\r\n    ];\r\n    expect(noteStructs.length * 2);\r\n    for (let i = 0; i < noteStructs.length; ++i) {\r\n        const note = draw(staveNote(noteStructs[i]), stave, ctx, i * 25 + 5);\r\n        ok(note.getX() > 0, 'Note ' + i + ' has X value');\r\n        ok(note.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n    }\r\n}\r\nfunction drawSlash(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 700, 180);\r\n    const stave = new Stave(10, 10, 650);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const notes = [\r\n        { keys: ['b/4'], duration: '1/2s', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: 'ws', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: 'hs', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: 'qs', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '8s', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '16s', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '32s', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '64s', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '128s', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '1/2s', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: 'ws', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: 'hs', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: 'qs', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: '8s', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: '16s', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: '32s', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: '64s', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: '128s', stem_direction: Stem.UP },\r\n        // Beam\r\n        { keys: ['b/4'], duration: '8s', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '8s', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '8s', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: '8s', stem_direction: Stem.UP },\r\n    ];\r\n    const stave_notes = notes.map((struct) => new StaveNote(struct));\r\n    const beam1 = new Beam([stave_notes[16], stave_notes[17]]);\r\n    const beam2 = new Beam([stave_notes[18], stave_notes[19]]);\r\n    Formatter.FormatAndDraw(ctx, stave, stave_notes, false);\r\n    beam1.setContext(ctx).draw();\r\n    beam2.setContext(ctx).draw();\r\n    ok('Slash Note Heads');\r\n}\r\nfunction drawKeyStyles(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 300, 280);\r\n    ctx.scale(3, 3);\r\n    const stave = new Stave(10, 0, 100);\r\n    const note = new StaveNote({ keys: ['g/4', 'bb/4', 'd/5'], duration: 'q' })\r\n        .setStave(stave)\r\n        .addModifier(new Accidental('b'), 1)\r\n        .setKeyStyle(1, { shadowBlur: 2, shadowColor: 'blue', fillStyle: 'blue' });\r\n    new TickContext().addTickable(note).preFormat().setX(25);\r\n    stave.setContext(ctx).draw();\r\n    note.setContext(ctx).draw();\r\n    ok(note.getX() > 0, 'Note has X value');\r\n    ok(note.getYs().length > 0, 'Note has Y values');\r\n}\r\nfunction drawNoteStyles(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 300, 280);\r\n    const stave = new Stave(10, 0, 100);\r\n    ctx.scale(3, 3);\r\n    const note = new StaveNote({ keys: ['g/4', 'bb/4', 'd/5'], duration: '8' })\r\n        .setStave(stave)\r\n        .addModifier(new Accidental('b'), 1);\r\n    note.setStyle({ shadowBlur: 2, shadowColor: 'blue', fillStyle: 'blue', strokeStyle: 'blue' });\r\n    new TickContext().addTickable(note).preFormat().setX(25);\r\n    stave.setContext(ctx).draw();\r\n    note.setContext(ctx).draw();\r\n    ok(note.getX() > 0, 'Note has X value');\r\n    ok(note.getYs().length > 0, 'Note has Y values');\r\n}\r\nfunction drawNoteStemStyles(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 300, 280);\r\n    const stave = new Stave(10, 0, 100);\r\n    ctx.scale(3, 3);\r\n    const note = new StaveNote({ keys: ['g/4', 'bb/4', 'd/5'], duration: 'q' })\r\n        .setStave(stave)\r\n        .addModifier(new Accidental('b'), 1);\r\n    note.setStemStyle({ shadowBlur: 2, shadowColor: 'blue', fillStyle: 'blue', strokeStyle: 'blue' });\r\n    new TickContext().addTickable(note).preFormat().setX(25);\r\n    stave.setContext(ctx).draw();\r\n    note.setContext(ctx).draw();\r\n    ok('Note Stem Style');\r\n}\r\nfunction drawNoteStemLengths(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 975, 150);\r\n    const stave = new Stave(10, 10, 975);\r\n    stave.setContext(ctx).draw();\r\n    const keys = [\r\n        'e/3',\r\n        'f/3',\r\n        'g/3',\r\n        'a/3',\r\n        'b/3',\r\n        'c/4',\r\n        'd/4',\r\n        'e/4',\r\n        'f/4',\r\n        'g/4',\r\n        'f/5',\r\n        'g/5',\r\n        'a/5',\r\n        'b/5',\r\n        'c/6',\r\n        'd/6',\r\n        'e/6',\r\n        'f/6',\r\n        'g/6',\r\n        'a/6',\r\n    ];\r\n    const notes = [];\r\n    let note;\r\n    let i;\r\n    for (i = 0; i < keys.length; i++) {\r\n        let duration = 'q';\r\n        if (i % 2 === 1) {\r\n            duration = '8';\r\n        }\r\n        note = new StaveNote({ keys: [keys[i]], duration, auto_stem: true }).setStave(stave);\r\n        new TickContext().addTickable(note);\r\n        note.setContext(ctx);\r\n        notes.push(note);\r\n    }\r\n    const whole_keys = ['e/3', 'a/3', 'f/5', 'a/5', 'd/6', 'a/6'];\r\n    for (i = 0; i < whole_keys.length; i++) {\r\n        note = new StaveNote({ keys: [whole_keys[i]], duration: 'w' }).setStave(stave);\r\n        new TickContext().addTickable(note);\r\n        note.setContext(ctx);\r\n        notes.push(note);\r\n    }\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok('Note Stem Length');\r\n}\r\nfunction drawNoteStylesWithFlag(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 300, 280);\r\n    const stave = new Stave(10, 0, 100);\r\n    ctx.scale(3, 3);\r\n    const note = new StaveNote({ keys: ['g/4', 'bb/4', 'd/5'], duration: '8' })\r\n        .setStave(stave)\r\n        .addModifier(new Accidental('b'), 1);\r\n    note.setFlagStyle({ shadowBlur: 2, shadowColor: 'blue', fillStyle: 'blue', strokeStyle: 'blue' });\r\n    new TickContext().addTickable(note).preFormat().setX(25);\r\n    stave.setContext(ctx).draw();\r\n    note.setContext(ctx).draw();\r\n    ok(note.getX() > 0, 'Note has X value');\r\n    ok(note.getYs().length > 0, 'Note has Y values');\r\n}\r\nfunction drawBeamStyles(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 160);\r\n    const stave = new Stave(10, 10, 380);\r\n    stave.setStyle({ strokeStyle: '#EEAAEE', lineWidth: 3 });\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const notes = [\r\n        // beam1\r\n        { keys: ['b/4'], duration: '8', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '8', stem_direction: Stem.DOWN },\r\n        // should be unstyled...\r\n        { keys: ['b/4'], duration: '8', stem_direction: Stem.DOWN },\r\n        // beam2 should also be unstyled\r\n        { keys: ['b/4'], duration: '8', stem_direction: Stem.DOWN },\r\n        { keys: ['b/4'], duration: '8', stem_direction: Stem.DOWN },\r\n        // beam3\r\n        { keys: ['b/4'], duration: '8', stem_direction: Stem.UP },\r\n        { keys: ['b/4'], duration: '8', stem_direction: Stem.UP },\r\n        // beam4\r\n        { keys: ['d/6'], duration: '8', stem_direction: Stem.DOWN },\r\n        { keys: ['c/6', 'd/6'], duration: '8', stem_direction: Stem.DOWN },\r\n        // unbeamed\r\n        { keys: ['d/6', 'e/6'], duration: '8', stem_direction: Stem.DOWN },\r\n        // unbeamed, unstyled\r\n        { keys: ['e/6', 'f/6'], duration: '8', stem_direction: Stem.DOWN },\r\n    ];\r\n    const staveNotes = notes.map((note) => new StaveNote(note));\r\n    const beam1 = new Beam(staveNotes.slice(0, 2));\r\n    const beam2 = new Beam(staveNotes.slice(3, 5));\r\n    const beam3 = new Beam(staveNotes.slice(5, 7));\r\n    const beam4 = new Beam(staveNotes.slice(7, 9));\r\n    // stem, key, ledger, flag; beam.setStyle\r\n    beam1.setStyle({ fillStyle: 'blue', strokeStyle: 'blue' });\r\n    staveNotes[0].setKeyStyle(0, { fillStyle: 'purple' });\r\n    staveNotes[0].setStemStyle({ strokeStyle: 'green' });\r\n    staveNotes[1].setStemStyle({ strokeStyle: 'orange' });\r\n    staveNotes[1].setKeyStyle(0, { fillStyle: 'darkturquoise' });\r\n    staveNotes[5].setStyle({ fillStyle: 'tomato', strokeStyle: 'tomato' });\r\n    beam3.setStyle({ shadowBlur: 4, shadowColor: 'blue' });\r\n    staveNotes[9].setLedgerLineStyle({ fillStyle: 'lawngreen', strokeStyle: 'lawngreen', lineWidth: 1 });\r\n    staveNotes[9].setFlagStyle({ fillStyle: 'orange', strokeStyle: 'orange' });\r\n    Formatter.FormatAndDraw(ctx, stave, staveNotes, false);\r\n    beam1.setContext(ctx).draw();\r\n    beam2.setContext(ctx).draw();\r\n    beam3.setContext(ctx).draw();\r\n    beam4.setContext(ctx).draw();\r\n    ok('draw beam styles');\r\n}\r\nfunction dotsAndFlagsStemUp(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 800, 150);\r\n    ctx.scale(1.0, 1.0);\r\n    ctx.setFillStyle('#221');\r\n    ctx.setStrokeStyle('#221');\r\n    const stave = new Stave(10, 10, 975);\r\n    const notes = [\r\n        staveNote({ keys: ['f/4'], duration: '4', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['f/4'], duration: '8', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['f/4'], duration: '16', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['f/4'], duration: '32', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['f/4'], duration: '64', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['f/4'], duration: '128', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['g/4'], duration: '4', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['g/4'], duration: '8', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['g/4'], duration: '16', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['g/4'], duration: '32' }),\r\n        staveNote({ keys: ['g/4'], duration: '64', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['g/4'], duration: '128', stem_direction: Stem.UP }),\r\n    ];\r\n    Dot.buildAndAttach(notes, { all: true });\r\n    Dot.buildAndAttach([notes[5], notes[11]], { all: true });\r\n    stave.setContext(ctx).draw();\r\n    for (let i = 0; i < notes.length; ++i) {\r\n        draw(notes[i], stave, ctx, i * 65);\r\n    }\r\n    ok(true, 'Full Dot');\r\n}\r\nfunction dotsAndFlagsStemDown(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 800, 160);\r\n    ctx.scale(1.0, 1.0);\r\n    ctx.setFillStyle('#221');\r\n    ctx.setStrokeStyle('#221');\r\n    const stave = new Stave(10, 10, 975);\r\n    const staveNotes = [\r\n        staveNote({ keys: ['e/5'], duration: '4', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['e/5'], duration: '8', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['e/5'], duration: '16', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['e/5'], duration: '32', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['e/5'], duration: '64', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['e/5'], duration: '128', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '4', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '8', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '16', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '32', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '64', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '128', stem_direction: Stem.DOWN }),\r\n    ];\r\n    Dot.buildAndAttach(staveNotes, { all: true });\r\n    stave.setContext(ctx).draw();\r\n    for (let i = 0; i < staveNotes.length; ++i) {\r\n        draw(staveNotes[i], stave, ctx, i * 65);\r\n    }\r\n    ok(true, 'Full Dot');\r\n}\r\nfunction dotsAndBeamsUp(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 800, 150);\r\n    ctx.scale(1.0, 1.0);\r\n    ctx.setFillStyle('#221');\r\n    ctx.setStrokeStyle('#221');\r\n    const stave = new Stave(10, 10, 975);\r\n    const staveNotes = [\r\n        staveNote({ keys: ['f/4'], duration: '8', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['f/4'], duration: '16', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['f/4'], duration: '32', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['f/4'], duration: '64', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['f/4'], duration: '128', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['g/4'], duration: '8', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['g/4'], duration: '16', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['g/4'], duration: '32' }),\r\n        staveNote({ keys: ['g/4'], duration: '64', stem_direction: Stem.UP }),\r\n        staveNote({ keys: ['g/4'], duration: '128', stem_direction: Stem.UP }),\r\n    ];\r\n    Dot.buildAndAttach(staveNotes, { all: true });\r\n    Dot.buildAndAttach([staveNotes[4], staveNotes[9]], { all: true });\r\n    const beam = new Beam(staveNotes);\r\n    stave.setContext(ctx).draw();\r\n    for (let i = 0; i < staveNotes.length; ++i) {\r\n        draw(staveNotes[i], stave, ctx, i * 65);\r\n    }\r\n    beam.setContext(ctx).draw();\r\n    ok(true, 'Full Dot');\r\n}\r\nfunction dotsAndBeamsDown(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 800, 160);\r\n    ctx.scale(1.0, 1.0);\r\n    ctx.setFillStyle('#221');\r\n    ctx.setStrokeStyle('#221');\r\n    const stave = new Stave(10, 10, 975);\r\n    const staveNotes = [\r\n        staveNote({ keys: ['e/5'], duration: '8', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['e/5'], duration: '16', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['e/5'], duration: '32', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['e/5'], duration: '64', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['e/5'], duration: '128', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '8', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '16', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '32', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '64', stem_direction: Stem.DOWN }),\r\n        staveNote({ keys: ['d/5'], duration: '128', stem_direction: Stem.DOWN }),\r\n    ];\r\n    Dot.buildAndAttach(staveNotes, { all: true });\r\n    const beam = new Beam(staveNotes);\r\n    stave.setContext(ctx).draw();\r\n    for (let i = 0; i < staveNotes.length; ++i) {\r\n        draw(staveNotes[i], stave, ctx, i * 65);\r\n    }\r\n    beam.setContext(ctx).draw();\r\n    ok(true, 'Full Dot');\r\n}\r\nfunction noteHeadsSimple(options) {\r\n    const vf = VexFlowTests.makeFactory(options, 800, 250);\r\n    const score = vf.EasyScore();\r\n    const system1 = vf.System({ y: 100, x: 50, width: 200 });\r\n    system1\r\n        .addStave({\r\n        voices: [\r\n            score.voice([...score.beam(score.notes('a4/8, b4/8', { stem: 'up' })), ...score.notes('a4/q/r, a4/h/r')]),\r\n            score.voice(score.notes('g4/w')),\r\n        ],\r\n    })\r\n        .addClef('treble')\r\n        .addTimeSignature('4/4');\r\n    const system2 = vf.System({ y: 100, x: 250, width: 150 });\r\n    system2.addStave({\r\n        voices: [score.voice(score.notes('b4/h, b4/h/r')), score.voice(score.notes('b4/w'))],\r\n    });\r\n    const system3 = vf.System({ y: 100, x: 400, width: 150 });\r\n    system3.addStave({\r\n        voices: [score.voice(score.notes('d5/h, d5/h/r')), score.voice(score.notes('e4/w'))],\r\n    });\r\n    const system4 = vf.System({ y: 100, x: 550, width: 150 });\r\n    system4.addStave({\r\n        voices: [\r\n            score.voice(score.notes('e4/q, e4/q/r, e4/h/r')),\r\n            score.voice(score.notes('e4/8, e4/8/r, e4/q/r, e4/h/r')),\r\n        ],\r\n    });\r\n    vf.draw();\r\n    expect(0);\r\n}\r\nfunction noteHeadsHidden(options) {\r\n    const vf = VexFlowTests.makeFactory(options, 800, 250);\r\n    const score = vf.EasyScore();\r\n    const system1 = vf.System({ y: 100, x: 50, width: 200 });\r\n    const notes1 = score.notes('g4/w');\r\n    notes1[0].render_options.draw = false;\r\n    system1\r\n        .addStave({\r\n        voices: [\r\n            score.voice([...score.beam(score.notes('a4/8, b4/8', { stem: 'up' })), ...score.notes('a4/q/r, a4/h/r')]),\r\n            score.voice(notes1),\r\n        ],\r\n    })\r\n        .addClef('treble')\r\n        .addTimeSignature('4/4');\r\n    const system2 = vf.System({ y: 100, x: 250, width: 150 });\r\n    const notes2 = score.notes('b4/w');\r\n    notes2[0].render_options.draw = false;\r\n    system2.addStave({\r\n        voices: [score.voice(score.notes('b4/h, b4/h/r')), score.voice(notes2)],\r\n    });\r\n    const system3 = vf.System({ y: 100, x: 400, width: 150 });\r\n    system3.addStave({\r\n        voices: [score.voice(score.notes('d5/h, d5/h/r')), score.voice(score.notes('e4/w'))],\r\n    });\r\n    const system4 = vf.System({ y: 100, x: 550, width: 150 });\r\n    const notes4 = score.notes('e4/q, e4/q/r, e4/h/r');\r\n    notes4[0].render_options.draw = false;\r\n    notes4[2].render_options.draw = false;\r\n    system4.addStave({\r\n        voices: [score.voice(notes4), score.voice(score.notes('e4/8, e4/8/r, e4/q/r, e4/h/r'))],\r\n    });\r\n    vf.draw();\r\n    expect(0);\r\n}\r\nfunction centerAlignedRest(options) {\r\n    const f = VexFlowTests.makeFactory(options, 400, 160);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('4/4');\r\n    const note = f.StaveNote({ keys: ['b/4'], duration: '1r', align_center: true });\r\n    const voice = f.Voice().setStrict(false).addTickables([note]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction centerAlignedRestFermata(options) {\r\n    const f = VexFlowTests.makeFactory(options, 400, 160);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('4/4');\r\n    const note = f\r\n        .StaveNote({ keys: ['b/4'], duration: '1r', align_center: true })\r\n        .addModifier(new Articulation('a@a').setPosition(3), 0);\r\n    const voice = f.Voice().setStrict(false).addTickables([note]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction centerAlignedRestAnnotation(options) {\r\n    const f = VexFlowTests.makeFactory(options, 400, 160);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('4/4');\r\n    const note = f\r\n        .StaveNote({ keys: ['b/4'], duration: '1r', align_center: true })\r\n        .addModifier(new Annotation('Whole measure rest').setVerticalJustification(AnnotationVerticalJustify.TOP), 0);\r\n    const voice = f.Voice().setStrict(false).addTickables([note]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction centerAlignedNoteMultiModifiers(options) {\r\n    const f = VexFlowTests.makeFactory(options, 400, 160);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('4/4');\r\n    function newFinger(num, pos) {\r\n        return new FretHandFinger(num).setPosition(pos);\r\n    }\r\n    const note = f\r\n        .StaveNote({ keys: ['c/4', 'e/4', 'g/4'], duration: '4', align_center: true })\r\n        .addModifier(new Annotation('Test').setPosition(3), 0)\r\n        .addStroke(0, new Stroke(2))\r\n        .addModifier(new Accidental('#'), 1)\r\n        .addModifier(newFinger('3', Modifier.Position.LEFT), 0)\r\n        .addModifier(newFinger('2', Modifier.Position.LEFT), 2)\r\n        .addModifier(newFinger('1', Modifier.Position.RIGHT), 1)\r\n        .addModifier(new StringNumber('4').setPosition(Modifier.Position.BELOW), 2);\r\n    Dot.buildAndAttach([note], { all: true });\r\n    const voice = f.Voice().setStrict(false).addTickables([note]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction centerAlignedMultiVoice(options) {\r\n    const f = VexFlowTests.makeFactory(options, 400, 160);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addClef('treble').addTimeSignature('3/8');\r\n    // Set a custom duration of 3 / 8.\r\n    const custom_duration = new Fraction(3, 8);\r\n    // TODO: Should the whole rest draw a ledger line that is visible to the left/right of the rest?\r\n    const notes0 = [\r\n        f.StaveNote({\r\n            keys: ['c/4'],\r\n            duration: '1r',\r\n            align_center: true,\r\n            duration_override: custom_duration,\r\n        }),\r\n    ];\r\n    const createStaveNote = (struct) => f.StaveNote(struct);\r\n    const notes1 = [\r\n        { keys: ['b/4'], duration: '8' },\r\n        { keys: ['b/4'], duration: '8' },\r\n        { keys: ['b/4'], duration: '8' },\r\n    ].map(createStaveNote);\r\n    notes1[1].addModifier(f.Accidental({ type: '#' }), 0);\r\n    f.Beam({ notes: notes1 });\r\n    const voice0 = f.Voice({ time: '3/8' }).setStrict(false).addTickables(notes0);\r\n    const voice1 = f.Voice({ time: '3/8' }).setStrict(false).addTickables(notes1);\r\n    f.Formatter().joinVoices([voice0, voice1]).formatToStave([voice0, voice1], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nVexFlowTests.register(StaveNoteTests);\r\nexport { StaveNoteTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// StaveTie Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Stem } from '../src/stem';\r\nconst StaveTieTests = {\r\n    Start() {\r\n        QUnit.module('StaveTie');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple StaveTie', simple);\r\n        run('Chord StaveTie', chord);\r\n        run('Stem Up StaveTie', stemUp);\r\n        run('No End Note With Clef', noEndNote1);\r\n        run('No End Note', noEndNote2);\r\n        run('No Start Note With Clef', noStartNote1);\r\n        run('No Start Note', noStartNote2);\r\n        run('Set Direction Down', setDirectionDown);\r\n        run('Set Direction Up', setDirectionUp);\r\n    },\r\n};\r\n/**\r\n * Used by the 7 tests below to set up the stave, easyscore, notes, voice, and to format & draw.\r\n */\r\nfunction createTest(notesData, setupTies) {\r\n    return (options) => {\r\n        const factory = VexFlowTests.makeFactory(options, 300);\r\n        const stave = factory.Stave();\r\n        const score = factory.EasyScore();\r\n        const notes = score.notes(notesData[0], notesData[1]);\r\n        const voice = score.voice(notes);\r\n        // const tickables = voice.getTickables(); // same as the notes that we passed in.\r\n        setupTies(factory, notes, stave);\r\n        factory.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n        factory.draw();\r\n        ok(true);\r\n    };\r\n}\r\nconst simple = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\r\n    f.StaveTie({\r\n        from: notes[0],\r\n        to: notes[1],\r\n        first_indices: [0, 1],\r\n        last_indices: [0, 1],\r\n    });\r\n});\r\nconst chord = createTest(['(d4 e4 f4)/2, (cn4 f#4 a4)', { stem: 'down' }], (f, notes) => {\r\n    f.StaveTie({\r\n        from: notes[0],\r\n        to: notes[1],\r\n        first_indices: [0, 1, 2],\r\n        last_indices: [0, 1, 2],\r\n    });\r\n});\r\nconst stemUp = createTest(['(d4 e4 f4)/2, (cn4 f#4 a4)', { stem: 'up' }], (f, notes) => {\r\n    f.StaveTie({\r\n        from: notes[0],\r\n        to: notes[1],\r\n        first_indices: [0, 1, 2],\r\n        last_indices: [0, 1, 2],\r\n    });\r\n});\r\nconst noEndNote1 = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes, stave) => {\r\n    stave.addEndClef('treble');\r\n    f.StaveTie({\r\n        from: notes[1],\r\n        first_indices: [2],\r\n        last_indices: [2],\r\n        text: 'slow.',\r\n    });\r\n});\r\nconst noEndNote2 = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\r\n    f.StaveTie({\r\n        from: notes[1],\r\n        first_indices: [2],\r\n        last_indices: [2],\r\n        text: 'slow.',\r\n    });\r\n});\r\nconst noStartNote1 = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes, stave) => {\r\n    stave.addClef('treble');\r\n    f.StaveTie({\r\n        to: notes[0],\r\n        first_indices: [2],\r\n        last_indices: [2],\r\n        text: 'H',\r\n    });\r\n});\r\nconst noStartNote2 = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\r\n    f.StaveTie({\r\n        to: notes[0],\r\n        first_indices: [2],\r\n        last_indices: [2],\r\n        text: 'H',\r\n    });\r\n});\r\nconst setDirectionDown = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\r\n    f.StaveTie({\r\n        from: notes[0],\r\n        to: notes[1],\r\n        first_indices: [0, 1],\r\n        last_indices: [0, 1],\r\n        options: { direction: Stem.DOWN },\r\n    });\r\n});\r\nconst setDirectionUp = createTest(['(cb4 e#4 a4)/2, (d4 e4 f4)', { stem: 'down' }], (f, notes) => {\r\n    f.StaveTie({\r\n        from: notes[0],\r\n        to: notes[1],\r\n        first_indices: [0, 1],\r\n        last_indices: [0, 1],\r\n        options: { direction: Stem.UP },\r\n    });\r\n});\r\nVexFlowTests.register(StaveTieTests);\r\nexport { StaveTieTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// StringNumber Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Glyph } from '../src/glyph';\r\nimport { Renderer } from '../src/renderer';\r\nimport { Stave } from '../src/stave';\r\nimport { BarlineType } from '../src/stavebarline';\r\nimport { Stroke } from '../src/strokes';\r\nconst StringNumberTests = {\r\n    Start() {\r\n        QUnit.module('StringNumber');\r\n        const run = VexFlowTests.runTests;\r\n        run('String Number In Notation', drawMultipleMeasures);\r\n        run('String Number In Notation - no circle', drawMultipleMeasures, { drawCircle: false });\r\n        run('Fret Hand Finger In Notation', drawFretHandFingers);\r\n        run('Multi Voice With Strokes, String & Finger Numbers', multi);\r\n        run('Complex Measure With String & Finger Numbers', drawAccidentals);\r\n    },\r\n};\r\nfunction drawMultipleMeasures(options) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;\r\n    const f = VexFlowTests.makeFactory(options, 775, 200);\r\n    const score = f.EasyScore();\r\n    // bar 1\r\n    const stave1 = f.Stave({ width: 300 }).setEndBarType(BarlineType.DOUBLE).addClef('treble');\r\n    const notes1 = score.notes('(c4 e4 g4)/4., (c5 e5 g5)/8, (c4 f4 g4)/4, (c4 f4 g4)/4', { stem: 'down' });\r\n    notes1[0]\r\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }, (_a = options.params) === null || _a === void 0 ? void 0 : _a.drawCircle), 0)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }, (_b = options.params) === null || _b === void 0 ? void 0 : _b.drawCircle), 1)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }, (_c = options.params) === null || _c === void 0 ? void 0 : _c.drawCircle), 2);\r\n    notes1[1]\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.StringNumber({ number: '5', position: 'below' }, (_d = options.params) === null || _d === void 0 ? void 0 : _d.drawCircle), 0)\r\n        .addModifier(f.Accidental({ type: '#' }).setAsCautionary(), 1)\r\n        .addModifier(f\r\n        .StringNumber({ number: '3', position: 'above' }, (_e = options.params) === null || _e === void 0 ? void 0 : _e.drawCircle)\r\n        .setLastNote(notes1[3])\r\n        .setLineEndType(Renderer.LineEndType.DOWN), 2);\r\n    notes1[2]\r\n        .addModifier(f.StringNumber({ number: '5', position: 'left' }, (_f = options.params) === null || _f === void 0 ? void 0 : _f.drawCircle), 0)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'left' }, (_g = options.params) === null || _g === void 0 ? void 0 : _g.drawCircle), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 1);\r\n    notes1[3]\r\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }, (_h = options.params) === null || _h === void 0 ? void 0 : _h.drawCircle).setOffsetY(7), 0)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }, (_j = options.params) === null || _j === void 0 ? void 0 : _j.drawCircle).setOffsetY(6), 1)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }, (_k = options.params) === null || _k === void 0 ? void 0 : _k.drawCircle).setOffsetY(-6), 2);\r\n    const voice1 = score.voice(notes1);\r\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\r\n    // bar 2 - juxtaposing second bar next to first bar\r\n    const stave2 = f\r\n        .Stave({ x: stave1.getWidth() + stave1.getX(), y: stave1.getY(), width: 300 })\r\n        .setEndBarType(BarlineType.DOUBLE);\r\n    const notes2 = score.notes('(c4 e4 g4)/4, (c5 e5 g5), (c4 f4 g4), (c4 f4 g4)', { stem: 'up' });\r\n    notes2[0]\r\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }, (_l = options.params) === null || _l === void 0 ? void 0 : _l.drawCircle), 0)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }, (_m = options.params) === null || _m === void 0 ? void 0 : _m.drawCircle), 1)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }, (_o = options.params) === null || _o === void 0 ? void 0 : _o.drawCircle), 2);\r\n    notes2[1]\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.StringNumber({ number: '5', position: 'below' }, (_p = options.params) === null || _p === void 0 ? void 0 : _p.drawCircle), 0)\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f\r\n        .StringNumber({ number: '3', position: 'above' }, (_q = options.params) === null || _q === void 0 ? void 0 : _q.drawCircle)\r\n        .setLastNote(notes2[3])\r\n        .setDashed(false), 2);\r\n    notes2[2]\r\n        .addModifier(f.StringNumber({ number: '3', position: 'left' }, (_r = options.params) === null || _r === void 0 ? void 0 : _r.drawCircle), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 1);\r\n    notes2[3]\r\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }, (_s = options.params) === null || _s === void 0 ? void 0 : _s.drawCircle).setOffsetY(7), 0)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }, (_t = options.params) === null || _t === void 0 ? void 0 : _t.drawCircle).setOffsetY(6), 1)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }, (_u = options.params) === null || _u === void 0 ? void 0 : _u.drawCircle).setOffsetY(-6), 2);\r\n    const voice2 = score.voice(notes2);\r\n    f.Formatter().joinVoices([voice2]).formatToStave([voice2], stave2);\r\n    // bar 3 - juxtaposing third bar next to second bar\r\n    const stave3 = f\r\n        .Stave({ x: stave2.getWidth() + stave2.getX(), y: stave2.getY(), width: 150 })\r\n        .setEndBarType(BarlineType.END);\r\n    const notesBar3 = score.notes('(c4 e4 g4 a4)/1.');\r\n    notesBar3[0]\r\n        .addModifier(f.StringNumber({ number: '5', position: 'below' }, (_v = options.params) === null || _v === void 0 ? void 0 : _v.drawCircle), 0)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }, (_w = options.params) === null || _w === void 0 ? void 0 : _w.drawCircle), 1)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'left' }, (_x = options.params) === null || _x === void 0 ? void 0 : _x.drawCircle), 2)\r\n        .addModifier(f.StringNumber({ number: '2', position: 'above' }, (_y = options.params) === null || _y === void 0 ? void 0 : _y.drawCircle), 3);\r\n    const voice3 = score.voice(notesBar3, { time: '6/4' });\r\n    f.Formatter().joinVoices([voice3]).formatToStave([voice3], stave3);\r\n    f.draw();\r\n    ok(true, 'String Number');\r\n}\r\nfunction drawFretHandFingers(options) {\r\n    const f = VexFlowTests.makeFactory(options, 725, 200);\r\n    const score = f.EasyScore();\r\n    // bar 1\r\n    const stave1 = f.Stave({ width: 350 }).setEndBarType(BarlineType.DOUBLE).addClef('treble');\r\n    const notes1 = score.notes('(c4 e4 g4)/4, (c5 e5 g5), (c4 f4 g4), (c4 f4 g4)', { stem: 'down' });\r\n    notes1[0]\r\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\r\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2);\r\n    notes1[1]\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\r\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2);\r\n    notes1[2]\r\n        .addModifier(f.Fingering({ number: '3', position: 'below' }), 0)\r\n        .addModifier(f.Fingering({ number: '4', position: 'left' }), 1)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }), 1)\r\n        .addModifier(f.Fingering({ number: '0', position: 'above' }), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 1);\r\n    notes1[3]\r\n        .addModifier(f.Fingering({ number: '3', position: 'right' }), 0)\r\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }).setOffsetY(7), 0)\r\n        .addModifier(f.Fingering({ number: '4', position: 'right' }), 1)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }).setOffsetY(6), 1)\r\n        .addModifier(f.Fingering({ number: '0', position: 'right' }).setOffsetY(-5), 2)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }).setOffsetY(-6), 2);\r\n    const voice1 = score.voice(notes1);\r\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\r\n    // bar 2 - juxtaposing second bar next to first bar\r\n    const stave2 = f\r\n        .Stave({ x: stave1.getWidth() + stave1.getX(), y: stave1.getY(), width: 350 })\r\n        .setEndBarType(BarlineType.END);\r\n    const notes2 = score.notes('(c4 e4 g4)/4., (c5 e5 g5)/8, (c4 f4 g4)/8, (c4 f4 g4)/4.[stem=\"down\"]', {\r\n        stem: 'up',\r\n    });\r\n    notes2[0]\r\n        .addModifier(f.Fingering({ number: '3', position: 'right' }), 0)\r\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }), 1)\r\n        .addModifier(f.Fingering({ number: '0', position: 'above' }), 2);\r\n    notes2[1]\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.Fingering({ number: '3', position: 'right' }), 0)\r\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2);\r\n    notes2[2]\r\n        .addModifier(f.Fingering({ number: '3', position: 'below' }), 0)\r\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }), 1)\r\n        .addModifier(f.Fingering({ number: '1', position: 'right' }), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 2);\r\n    notes2[3]\r\n        .addModifier(f.Fingering({ number: '3', position: 'right' }), 0)\r\n        .addModifier(f.StringNumber({ number: '5', position: 'right' }).setOffsetY(7), 0)\r\n        .addModifier(f.Fingering({ number: '4', position: 'right' }), 1)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }).setOffsetY(6), 1)\r\n        .addModifier(f.Fingering({ number: '1', position: 'right' }).setOffsetY(-6), 2)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }).setOffsetY(-6), 2);\r\n    const voice2 = score.voice(notes2);\r\n    f.Formatter().joinVoices([voice2]).formatToStave([voice2], stave2);\r\n    f.draw();\r\n    ok(true, 'String Number');\r\n}\r\nfunction multi(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 200);\r\n    const score = f.EasyScore();\r\n    const stave = f.Stave();\r\n    const notes1 = score.notes('(c4 e4 g4)/4, (a3 e4 g4), (c4 d4 a4), (c4 d4 a4)', { stem: 'up' });\r\n    notes1[0]\r\n        .addStroke(0, new Stroke(5))\r\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\r\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'left' }), 1)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'above' }), 2);\r\n    notes1[1]\r\n        .addStroke(0, new Stroke(6))\r\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }), 1)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'above' }), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f.Accidental({ type: '#' }), 2);\r\n    notes1[2]\r\n        .addStroke(0, new Stroke(2))\r\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\r\n        .addModifier(f.Fingering({ number: '0', position: 'right' }), 1)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }), 1)\r\n        .addModifier(f.Fingering({ number: '1', position: 'left' }), 2)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }), 2);\r\n    notes1[3]\r\n        .addStroke(0, new Stroke(1))\r\n        .addModifier(f.StringNumber({ number: '3', position: 'left' }), 2)\r\n        .addModifier(f.StringNumber({ number: '4', position: 'right' }), 1);\r\n    const notes2 = score.notes('e3/8, e3, e3, e3, e3, e3, e3, e3', { stem: 'down' });\r\n    notes2[0]\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 0)\r\n        .addModifier(f.StringNumber({ number: '6', position: 'below' }), 0);\r\n    notes2[2].addModifier(f.Accidental({ type: '#' }), 0);\r\n    notes2[4].addModifier(f.Fingering({ number: '0', position: 'left' }), 0);\r\n    // Position string number 6 beneath the strum arrow: left (15) and down (18)\r\n    notes2[4].addModifier(f.StringNumber({ number: '6', position: 'left' }).setOffsetX(15).setOffsetY(18), 0);\r\n    // Important Note: notes2 must come first, otherwise ledger lines from notes2 will be drawn on top of notes from notes1!\r\n    // BUG: VexFlow draws TWO ledger lines for middle C, because both notes1 and notes2 require the middle C ledger line.\r\n    const voices = [score.voice(notes2), score.voice(notes1)];\r\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n    f.Beam({ notes: notes2.slice(0, 4) });\r\n    f.Beam({ notes: notes2.slice(4, 8) });\r\n    f.draw();\r\n    ok(true, 'Strokes Test Multi Voice');\r\n}\r\nfunction drawAccidentals(options) {\r\n    const f = VexFlowTests.makeFactory(options, 750);\r\n    const glyphScale = 39; // default font scale\r\n    const clefWidth = Glyph.getWidth('gClef', glyphScale); // widest clef\r\n    const notes = [\r\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'c/5', 'e/5', 'g/5'], stem_direction: 1, duration: '4' }),\r\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'd/5', 'e/5', 'g/5'], stem_direction: 1, duration: '4' }),\r\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'd/5', 'e/5', 'g/5'], stem_direction: -1, duration: '4' }),\r\n        f.StaveNote({ keys: ['c/4', 'e/4', 'g/4', 'd/5', 'e/5', 'g/5'], stem_direction: -1, duration: '4' }),\r\n    ];\r\n    notes[0]\r\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.StringNumber({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 2)\r\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 3)\r\n        .addModifier(f.Accidental({ type: '#' }), 3)\r\n        .addModifier(f.Fingering({ number: '2', position: 'right' }), 4)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }), 4)\r\n        .addModifier(f.Accidental({ type: '#' }), 4)\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 5)\r\n        .addModifier(f.Accidental({ type: '#' }), 5);\r\n    notes[1]\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f.Accidental({ type: '#' }), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 3)\r\n        .addModifier(f.Accidental({ type: '#' }), 4)\r\n        .addModifier(f.Accidental({ type: '#' }), 5);\r\n    notes[2]\r\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 0)\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.StringNumber({ number: '2', position: 'left' }), 1)\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 2)\r\n        .addModifier(f.Fingering({ number: '3', position: 'left' }), 3)\r\n        .addModifier(f.Accidental({ type: '#' }), 3)\r\n        .addModifier(f.Fingering({ number: '2', position: 'right' }), 4)\r\n        .addModifier(f.StringNumber({ number: '3', position: 'right' }), 4)\r\n        .addModifier(f.Accidental({ type: '#' }), 4)\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 5)\r\n        .addModifier(f.Accidental({ type: '#' }), 5);\r\n    notes[3]\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f.Accidental({ type: '#' }), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 3)\r\n        .addModifier(f.Accidental({ type: '#' }), 4)\r\n        .addModifier(f.Accidental({ type: '#' }), 5);\r\n    const voice = f.Voice().addTickables(notes);\r\n    const ctx = f.getContext();\r\n    const formatter = f.Formatter().joinVoices([voice]);\r\n    const stavePadding = clefWidth + Stave.defaultPadding + 10;\r\n    const nwidth = Math.max(formatter.preCalculateMinTotalWidth([voice]), 490 - stavePadding);\r\n    formatter.format([voice], nwidth);\r\n    const stave = f\r\n        .Stave({ x: 0, y: 0, width: nwidth + stavePadding })\r\n        .setContext(ctx)\r\n        .setEndBarType(BarlineType.DOUBLE)\r\n        .addClef('treble')\r\n        .draw();\r\n    voice.draw(ctx, stave);\r\n    ok(true, 'String Number');\r\n}\r\nVexFlowTests.register(StringNumberTests);\r\nexport { StringNumberTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Strokes Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Barline, Beam, Bend, Stroke } from '../src/index';\r\nconst StrokesTests = {\r\n    Start() {\r\n        QUnit.module('Strokes');\r\n        const run = VexFlowTests.runTests;\r\n        // TODO: Rename tests by removing 'Strokes - ' since it is redundant with the module name.\r\n        // This will make flow.html easier to read.\r\n        run('Strokes - Brush/Roll/Rasquedo', brushRollRasquedo);\r\n        run('Strokes - Arpeggio directionless (without arrows)', arpeggioDirectionless);\r\n        run('Strokes - Multi Voice', multiVoice);\r\n        run('Strokes - Notation and Tab', notesWithTab);\r\n        run('Strokes - Multi-Voice Notation and Tab', multiNotationAndTab);\r\n    },\r\n};\r\nfunction brushRollRasquedo(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 200);\r\n    const score = f.EasyScore();\r\n    // bar 1\r\n    const stave1 = f.Stave({ width: 250 }).setEndBarType(Barline.type.DOUBLE);\r\n    const notes1 = score.notes('(a3 e4 a4)/4, (c4 e4 g4), (c4 e4 g4), (c4 e4 g4)', { stem: 'up' });\r\n    notes1[0].addStroke(0, new Stroke(1));\r\n    notes1[1]\r\n        .addStroke(0, new Stroke(2))\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f.Accidental({ type: '#' }), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 0);\r\n    notes1[2].addStroke(0, new Stroke(1));\r\n    notes1[3].addStroke(0, new Stroke(2));\r\n    const voice1 = score.voice(notes1);\r\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\r\n    // bar 2\r\n    const stave2 = f\r\n        .Stave({ x: stave1.getWidth() + stave1.getX(), y: stave1.getY(), width: 300 })\r\n        .setEndBarType(Barline.type.DOUBLE);\r\n    const notes2 = score.notes('(c4 d4 g4)/4, (c4 d4 g4), (c4 d4 g4), (c4 d4 a4)', { stem: 'up' });\r\n    notes2[0].addStroke(0, new Stroke(3));\r\n    notes2[1].addStroke(0, new Stroke(4));\r\n    notes2[2].addStroke(0, new Stroke(5));\r\n    notes2[3]\r\n        .addStroke(0, new Stroke(6))\r\n        .addModifier(f.Accidental({ type: 'bb' }), 0)\r\n        .addModifier(f.Accidental({ type: 'bb' }), 1)\r\n        .addModifier(f.Accidental({ type: 'bb' }), 2);\r\n    const voice2 = score.voice(notes2);\r\n    f.Formatter().joinVoices([voice2]).formatToStave([voice2], stave2);\r\n    f.draw();\r\n    ok(true, 'Brush/Roll/Rasquedo');\r\n}\r\nfunction arpeggioDirectionless(options) {\r\n    const f = VexFlowTests.makeFactory(options, 700, 200);\r\n    const score = f.EasyScore();\r\n    // bar 1\r\n    const stave1 = f.Stave({ x: 100, width: 500 }).setEndBarType(Barline.type.DOUBLE);\r\n    const notes1 = score.notes('(g4 b4 d5)/4, (g4 b4 d5 g5), (g4 b4 d5 g5), (g4 b4 d5)', { stem: 'up' });\r\n    const graceNoteStructs = [\r\n        { keys: ['e/4'], duration: '32' },\r\n        { keys: ['f/4'], duration: '32' },\r\n        { keys: ['g/4'], duration: '32' },\r\n    ];\r\n    const graceNotes = graceNoteStructs.map((graceNoteStruct) => f.GraceNote(graceNoteStruct));\r\n    const graceNoteGroup = f.GraceNoteGroup({ notes: graceNotes, slur: false });\r\n    graceNoteGroup.beamNotes();\r\n    notes1[0].addStroke(0, new Stroke(7));\r\n    notes1[1]\r\n        .addStroke(0, new Stroke(7))\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.Accidental({ type: '#' }), 1)\r\n        .addModifier(f.Accidental({ type: '#' }), 2)\r\n        .addModifier(f.Accidental({ type: '#' }), 3);\r\n    notes1[2]\r\n        .addStroke(0, new Stroke(7))\r\n        .addModifier(f.Accidental({ type: 'b' }), 1)\r\n        .addModifier(graceNoteGroup, 0);\r\n    notes1[3].addStroke(0, new Stroke(7)).addModifier(f.NoteSubGroup({\r\n        notes: [f.ClefNote({ type: 'treble', options: { size: 'default', annotation: '8va' } })],\r\n    }), 0);\r\n    const voice1 = score.voice(notes1);\r\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\r\n    f.draw();\r\n    ok(true, 'Arpeggio directionless (without arrows)');\r\n}\r\nfunction multiVoice(options) {\r\n    const f = VexFlowTests.makeFactory(options, 500, 200);\r\n    const score = f.EasyScore();\r\n    const stave = f.Stave();\r\n    const notes1 = score.notes('(c4 e4 g4)/4, (c4 e4 g4), (c4 d4 a4), (c4 d4 a4)', { stem: 'up' });\r\n    notes1[0].addStroke(0, new Stroke(5));\r\n    notes1[1]\r\n        .addStroke(0, new Stroke(6))\r\n        .addModifier(f.Accidental({ type: '#' }), 0)\r\n        .addModifier(f.Accidental({ type: '#' }), 2);\r\n    notes1[2].addStroke(0, new Stroke(2));\r\n    notes1[3].addStroke(0, new Stroke(1));\r\n    const notes2 = score.notes('e3/8, e3, e3, e3, e3, e3, e3, e3', { stem: 'down' });\r\n    f.Beam({ notes: notes2.slice(0, 4) });\r\n    f.Beam({ notes: notes2.slice(4, 8) });\r\n    const voices = [notes1, notes2].map((notes) => score.voice(notes));\r\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n    f.draw();\r\n    ok(true, 'Strokes Test Multi Voice');\r\n}\r\nfunction multiNotationAndTab(options) {\r\n    const f = VexFlowTests.makeFactory(options, 400, 275);\r\n    const score = f.EasyScore();\r\n    const stave = f.Stave().addClef('treble');\r\n    // notation upper voice notes\r\n    const notes1 = score.notes('(g4 b4 e5)/4, (g4 b4 e5), (g4 b4 e5), (g4 b4 e5)', { stem: 'up' });\r\n    notes1[0].addStroke(0, new Stroke(3, { all_voices: false }));\r\n    notes1[1].addStroke(0, new Stroke(6));\r\n    notes1[2].addStroke(0, new Stroke(2, { all_voices: false }));\r\n    notes1[3].addStroke(0, new Stroke(1));\r\n    const notes2 = score.notes('g3/4, g3, g3, g3', { stem: 'down' });\r\n    f.TabStave({ y: 100 }).addClef('tab').setNoteStartX(stave.getNoteStartX());\r\n    // tablature upper voice notes\r\n    const tabNotes1 = [\r\n        f.TabNote({\r\n            positions: [\r\n                { str: 3, fret: 0 },\r\n                { str: 2, fret: 0 },\r\n                { str: 1, fret: 1 },\r\n            ],\r\n            duration: '4',\r\n        }),\r\n        f.TabNote({\r\n            positions: [\r\n                { str: 3, fret: 0 },\r\n                { str: 2, fret: 0 },\r\n                { str: 1, fret: 1 },\r\n            ],\r\n            duration: '4',\r\n        }),\r\n        f.TabNote({\r\n            positions: [\r\n                { str: 3, fret: 0 },\r\n                { str: 2, fret: 0 },\r\n                { str: 1, fret: 1 },\r\n            ],\r\n            duration: '4',\r\n        }),\r\n        f.TabNote({\r\n            positions: [\r\n                { str: 3, fret: 0 },\r\n                { str: 2, fret: 0 },\r\n                { str: 1, fret: 1 },\r\n            ],\r\n            duration: '4',\r\n        }),\r\n    ];\r\n    tabNotes1[0].addStroke(0, new Stroke(3, { all_voices: false }));\r\n    tabNotes1[1].addStroke(0, new Stroke(6));\r\n    tabNotes1[2].addStroke(0, new Stroke(2, { all_voices: false }));\r\n    tabNotes1[3].addStroke(0, new Stroke(1));\r\n    const tabNotes2 = [\r\n        f.TabNote({ positions: [{ str: 6, fret: 3 }], duration: '4' }),\r\n        f.TabNote({ positions: [{ str: 6, fret: 3 }], duration: '4' }),\r\n        f.TabNote({ positions: [{ str: 6, fret: 3 }], duration: '4' }),\r\n        f.TabNote({ positions: [{ str: 6, fret: 3 }], duration: '4' }),\r\n    ];\r\n    const voices = [notes1, notes2, tabNotes1, tabNotes2].map((notes) => score.voice(notes));\r\n    f.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n    f.draw();\r\n    ok(true, 'Strokes Test Notation & Tab Multi Voice');\r\n}\r\n/*\r\nfunction drawTabStrokes(options: TestOptions): void {\r\n  const f = VexFlowTests.makeFactory(options, 600, 200);\r\n  const stave1 = f.TabStave({ width: 250 }).setEndBarType(Barline.type.DOUBLE);\r\n\r\n  const tabNotes1 = [\r\n    f.TabNote({\r\n      positions: [\r\n        { str: 2, fret: 8 },\r\n        { str: 3, fret: 9 },\r\n        { str: 4, fret: 10 },\r\n      ],\r\n      duration: '4',\r\n    }),\r\n    f.TabNote({\r\n      positions: [\r\n        { str: 3, fret: 7 },\r\n        { str: 4, fret: 8 },\r\n        { str: 5, fret: 9 },\r\n      ],\r\n      duration: '4',\r\n    }),\r\n    f.TabNote({\r\n      positions: [\r\n        { str: 1, fret: 5 },\r\n        { str: 2, fret: 6 },\r\n        { str: 3, fret: 7 },\r\n        { str: 4, fret: 7 },\r\n        { str: 5, fret: 5 },\r\n        { str: 6, fret: 5 },\r\n      ],\r\n      duration: '4',\r\n    }),\r\n    f.TabNote({\r\n      positions: [\r\n        { str: 4, fret: 3 },\r\n        { str: 5, fret: 4 },\r\n        { str: 6, fret: 5 },\r\n      ],\r\n      duration: '4',\r\n    }),\r\n  ];\r\n\r\n  tabNotes1[0].addStroke(0, new Stroke(1));\r\n  tabNotes1[1].addStroke(0, new Stroke(2));\r\n  tabNotes1[2].addStroke(0, new Stroke(3));\r\n  tabNotes1[3].addStroke(0, new Stroke(4));\r\n\r\n  const tabVoice1 = f.Voice().addTickables(tabNotes1);\r\n\r\n  f.Formatter().joinVoices([tabVoice1]).formatToStave([tabVoice1], stave1);\r\n\r\n  // bar 2\r\n  const stave2 = f.TabStave({ x: stave1.getWidth() + stave1.getX(), width: 300 }).setEndBarType(Barline.type.DOUBLE);\r\n\r\n  const tabNotes2 = [\r\n    f.TabNote({\r\n      positions: [\r\n        { str: 2, fret: 7 },\r\n        { str: 3, fret: 8 },\r\n        { str: 4, fret: 9 },\r\n      ],\r\n      duration: '2',\r\n    }),\r\n    f.TabNote({\r\n      positions: [\r\n        { str: 1, fret: 5 },\r\n        { str: 2, fret: 6 },\r\n        { str: 3, fret: 7 },\r\n        { str: 4, fret: 7 },\r\n        { str: 5, fret: 5 },\r\n        { str: 6, fret: 5 },\r\n      ],\r\n      duration: '2',\r\n    }),\r\n  ];\r\n\r\n  tabNotes2[0].addStroke(0, new Stroke(6));\r\n  tabNotes2[1].addStroke(0, new Stroke(5));\r\n\r\n  const tabVoice2 = f.Voice().addTickables(tabNotes2);\r\n\r\n  f.Formatter().joinVoices([tabVoice2]).formatToStave([tabVoice2], stave2);\r\n\r\n  f.draw();\r\n\r\n  ok(true, 'Strokes Tab test');\r\n}\r\n*/\r\nfunction notesWithTab(options) {\r\n    const f = VexFlowTests.makeFactory(options, 500, 300);\r\n    const stave = f.Stave({ x: 15, y: 40, width: 450 }).addClef('treble');\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['b/4', 'd/5', 'g/5'], stem_direction: -1, duration: '4' })\r\n            .addModifier(f.Accidental({ type: 'b' }), 1)\r\n            .addModifier(f.Accidental({ type: 'b' }), 0),\r\n        f.StaveNote({ keys: ['c/5', 'd/5'], stem_direction: -1, duration: '4' }),\r\n        f.StaveNote({ keys: ['b/3', 'e/4', 'a/4', 'd/5'], stem_direction: 1, duration: '8' }),\r\n        f\r\n            .StaveNote({ keys: ['a/3', 'e/4', 'a/4', 'c/5', 'e/5', 'a/5'], stem_direction: 1, duration: '8' })\r\n            .addModifier(f.Accidental({ type: '#' }), 3),\r\n        f.StaveNote({ keys: ['b/3', 'e/4', 'a/4', 'd/5'], stem_direction: 1, duration: '8' }),\r\n        f\r\n            .StaveNote({ keys: ['a/3', 'e/4', 'a/4', 'c/5', 'f/5', 'a/5'], stem_direction: 1, duration: '8' })\r\n            .addModifier(f.Accidental({ type: '#' }), 3)\r\n            .addModifier(f.Accidental({ type: '#' }), 4),\r\n    ];\r\n    const tabstave = f\r\n        .TabStave({ x: stave.getX(), y: 140, width: 450 })\r\n        .addClef('tab')\r\n        .setNoteStartX(stave.getNoteStartX());\r\n    const tabNotes = [\r\n        f\r\n            .TabNote({\r\n            positions: [\r\n                { str: 1, fret: 3 },\r\n                { str: 2, fret: 2 },\r\n                { str: 3, fret: 3 },\r\n            ],\r\n            duration: '4',\r\n        })\r\n            .addModifier(new Bend('Full'), 0),\r\n        f\r\n            .TabNote({\r\n            positions: [\r\n                { str: 2, fret: 3 },\r\n                { str: 3, fret: 5 },\r\n            ],\r\n            duration: '4',\r\n        })\r\n            .addModifier(new Bend('Unison'), 1),\r\n        f.TabNote({\r\n            positions: [\r\n                { str: 3, fret: 7 },\r\n                { str: 4, fret: 7 },\r\n                { str: 5, fret: 7 },\r\n                { str: 6, fret: 7 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n        f.TabNote({\r\n            positions: [\r\n                { str: 1, fret: 5 },\r\n                { str: 2, fret: 5 },\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 7 },\r\n                { str: 5, fret: 7 },\r\n                { str: 6, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n        f.TabNote({\r\n            positions: [\r\n                { str: 3, fret: 7 },\r\n                { str: 4, fret: 7 },\r\n                { str: 5, fret: 7 },\r\n                { str: 6, fret: 7 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n        f.TabNote({\r\n            positions: [\r\n                { str: 1, fret: 5 },\r\n                { str: 2, fret: 5 },\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 7 },\r\n                { str: 5, fret: 7 },\r\n                { str: 6, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n    ];\r\n    notes[0].addStroke(0, new Stroke(1));\r\n    notes[1].addStroke(0, new Stroke(2));\r\n    notes[2].addStroke(0, new Stroke(3));\r\n    notes[3].addStroke(0, new Stroke(4));\r\n    notes[4].addStroke(0, new Stroke(5));\r\n    notes[5].addStroke(0, new Stroke(6));\r\n    tabNotes[0].addStroke(0, new Stroke(1));\r\n    tabNotes[1].addStroke(0, new Stroke(2));\r\n    tabNotes[2].addStroke(0, new Stroke(3));\r\n    tabNotes[3].addStroke(0, new Stroke(4));\r\n    tabNotes[4].addStroke(0, new Stroke(5));\r\n    tabNotes[5].addStroke(0, new Stroke(6));\r\n    f.StaveConnector({\r\n        top_stave: stave,\r\n        bottom_stave: tabstave,\r\n        type: 'bracket',\r\n    });\r\n    f.StaveConnector({\r\n        top_stave: stave,\r\n        bottom_stave: tabstave,\r\n        type: 'single',\r\n    });\r\n    const voice = f.Voice().addTickables(notes);\r\n    const tabVoice = f.Voice().addTickables(tabNotes);\r\n    const beams = Beam.applyAndGetBeams(voice);\r\n    f.Formatter().joinVoices([voice]).joinVoices([tabVoice]).formatToStave([voice, tabVoice], stave);\r\n    f.draw();\r\n    beams.forEach(function (beam) {\r\n        beam.setContext(f.getContext()).draw();\r\n    });\r\n    ok(true);\r\n}\r\nVexFlowTests.register(StrokesTests);\r\nexport { StrokesTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Style Tests\r\n// TODO: The .addStroke(0, new Stroke(...)) in the tab test case shows a NO GLYPH for the Petaluma font.\r\n// TODO: Changing ctx.font seems to have no effect in the tab test case. Should it?\r\n//       Annotation sets its own font.\r\n//       TabNote sets its own font.\r\n//       Is there a way to set all the text fonts in one go?\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Annotation } from '../src/annotation';\r\nimport { Articulation } from '../src/articulation';\r\nimport { Bend } from '../src/bend';\r\nimport { Formatter } from '../src/formatter';\r\nimport { KeySignature } from '../src/keysignature';\r\nimport { NoteSubGroup } from '../src/notesubgroup';\r\nimport { Ornament } from '../src/ornament';\r\nimport { StaveModifierPosition } from '../src/stavemodifier';\r\nimport { Stroke } from '../src/strokes';\r\nimport { TabNote } from '../src/tabnote';\r\nimport { TabStave } from '../src/tabstave';\r\nimport { TimeSignature } from '../src/timesignature';\r\nconst StyleTests = {\r\n    Start() {\r\n        QUnit.module('Style');\r\n        const run = VexFlowTests.runTests;\r\n        run('Basic Style', stave);\r\n        run('TabNote modifiers Style', tab);\r\n    },\r\n};\r\n/**\r\n * Helper function to create a ElementStyle options object of the form { fillStyle: XXX, strokeStyle: YYY }.\r\n * Used for updating the fillStyle and optionally the strokeStyle.\r\n */\r\nfunction FS(fillStyle, strokeStyle) {\r\n    const ret = { fillStyle };\r\n    if (strokeStyle) {\r\n        ret.strokeStyle = strokeStyle;\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * Color elements on a stave.\r\n */\r\nfunction stave(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 150);\r\n    const stave = f.Stave({ x: 25, y: 20, width: 500 });\r\n    // Stave modifiers test.\r\n    const keySig = new KeySignature('D');\r\n    keySig.addToStave(stave);\r\n    keySig.setStyle(FS('blue'));\r\n    stave.addTimeSignature('4/4');\r\n    const timeSig = stave.getModifiers(StaveModifierPosition.BEGIN, TimeSignature.CATEGORY);\r\n    timeSig[0].setStyle(FS('brown'));\r\n    const notes = [\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stem_direction: 1, duration: '4' })\r\n            .addModifier(f.Accidental({ type: 'b' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stem_direction: 1, duration: '4' })\r\n            .addModifier(f.Accidental({ type: 'b' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n        f.StaveNote({ keys: ['e/4'], stem_direction: 1, duration: '4' }),\r\n        f.StaveNote({ keys: ['f/4'], stem_direction: 1, duration: '8' }),\r\n        // voice.draw() test.\r\n        f.TextDynamics({ text: 'sfz', duration: '16' }).setStyle(FS('blue')),\r\n        // GhostNote modifiers test.\r\n        f.GhostNote({ duration: '16' }).addModifier(new Annotation('GhostNote green text').setStyle(FS('green')), 0),\r\n    ];\r\n    const notes0 = notes[0];\r\n    const notes1 = notes[1];\r\n    notes0.setKeyStyle(0, FS('red'));\r\n    notes1.setKeyStyle(0, FS('red'));\r\n    // StaveNote modifiers test.\r\n    const mods1 = notes1.getModifiers();\r\n    mods1[0].setStyle(FS('green'));\r\n    notes0.addModifier(new Articulation('a.').setPosition(4).setStyle(FS('green')), 0);\r\n    notes0.addModifier(new Ornament('mordent').setStyle(FS('lightgreen')), 0);\r\n    notes1.addModifier(new Annotation('blue').setStyle(FS('blue')), 0);\r\n    notes1.addModifier(new NoteSubGroup([f.ClefNote({ options: { size: 'small' } }).setStyle(FS('blue'))]), 0);\r\n    const voice = f.Voice().addTickables(notes);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Basic Style');\r\n}\r\n/**\r\n * Color elements on a guitar tab.\r\n */\r\nfunction tab(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 140);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph();\r\n    stave.getModifiers()[2].setStyle(FS('blue'));\r\n    stave.setContext(ctx).draw();\r\n    const tabNote = (noteStruct) => new TabNote(noteStruct);\r\n    const notes = [\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 4, fret: 9 },\r\n            ],\r\n            duration: 'h',\r\n        }).addModifier(new Annotation('green text').setStyle(FS('green')), 0),\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 4, fret: 9 },\r\n            ],\r\n            duration: 'h',\r\n        })\r\n            .addModifier(new Bend('Full').setStyle(FS('brown')), 0)\r\n            .addStroke(0, new Stroke(1, { all_voices: false }).setStyle(FS('blue'))),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'TabNote Modifiers Style');\r\n}\r\nVexFlowTests.register(StyleTests);\r\nexport { StyleTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// TabNote Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Dot } from '../src/dot';\r\nimport { Flow } from '../src/flow';\r\nimport { Font, FontWeight } from '../src/font';\r\nimport { Formatter } from '../src/formatter';\r\nimport { Stave } from '../src/stave';\r\nimport { TabNote } from '../src/tabnote';\r\nimport { TabStave } from '../src/tabstave';\r\nimport { TickContext } from '../src/tickcontext';\r\nimport { Voice, VoiceMode } from '../src/voice';\r\nconst TabNoteTests = {\r\n    Start() {\r\n        QUnit.module('TabNote');\r\n        test('Tick', ticks);\r\n        test('TabStave Line', tabStaveLine);\r\n        test('Width', width);\r\n        test('TickContext', tickContext);\r\n        const run = VexFlowTests.runTests;\r\n        run('TabNote Draw', draw);\r\n        run('TabNote Stems Up', drawStemsUp);\r\n        run('TabNote Stems Down', drawStemsDown);\r\n        run('TabNote Stems Up Through Stave', drawStemsUpThrough);\r\n        run('TabNote Stems Down Through Stave', drawStemsDownThrough);\r\n        run('TabNote Stems with Dots', drawStemsDotted);\r\n    },\r\n};\r\nfunction ticks() {\r\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\r\n    let note = new TabNote({ positions: [{ str: 6, fret: 6 }], duration: '1' });\r\n    equal(note.getTicks().value(), BEAT * 4, 'Whole note has 4 beats');\r\n    note = new TabNote({ positions: [{ str: 3, fret: 4 }], duration: '4' });\r\n    equal(note.getTicks().value(), BEAT, 'Quarter note has 1 beat');\r\n}\r\nfunction tabStaveLine() {\r\n    const note = new TabNote({\r\n        positions: [\r\n            { str: 6, fret: 6 },\r\n            { str: 4, fret: 5 },\r\n        ],\r\n        duration: '1',\r\n    });\r\n    const positions = note.getPositions();\r\n    equal(positions[0].str, 6, 'String 6, Fret 6');\r\n    equal(positions[0].fret, 6, 'String 6, Fret 6');\r\n    equal(positions[1].str, 4, 'String 4, Fret 5');\r\n    equal(positions[1].fret, 5, 'String 4, Fret 5');\r\n    const stave = new Stave(10, 10, 300);\r\n    note.setStave(stave);\r\n    const ys = note.getYs();\r\n    equal(ys.length, 2, 'Chord should be rendered on two lines');\r\n    equal(ys[0], 100, 'Line for String 6, Fret 6');\r\n    equal(ys[1], 80, 'Line for String 4, Fret 5');\r\n}\r\nfunction width() {\r\n    expect(1);\r\n    const note = new TabNote({\r\n        positions: [\r\n            { str: 6, fret: 6 },\r\n            { str: 4, fret: 5 },\r\n        ],\r\n        duration: '1',\r\n    });\r\n    throws(() => note.getWidth(), /UnformattedNote/, 'Unformatted note should have no width');\r\n}\r\nfunction tickContext() {\r\n    const note = new TabNote({\r\n        positions: [\r\n            { str: 6, fret: 6 },\r\n            { str: 4, fret: 5 },\r\n        ],\r\n        duration: '1',\r\n    });\r\n    const tickContext = new TickContext().addTickable(note).preFormat().setX(10).setPadding(0);\r\n    equal(tickContext.getWidth(), 7);\r\n}\r\nfunction draw(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 140);\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, 550);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const notes = [\r\n        { positions: [{ str: 6, fret: 6 }], duration: '4' },\r\n        {\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 'x' },\r\n                { str: 5, fret: 15 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 'x' },\r\n                { str: 5, fret: 5 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 6, fret: 0 },\r\n                { str: 5, fret: 5 },\r\n                { str: 4, fret: 5 },\r\n                { str: 3, fret: 4 },\r\n                { str: 2, fret: 3 },\r\n                { str: 1, fret: 0 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n    ];\r\n    // Helper function\r\n    function showNote(noteStruct, stave, ctx, x) {\r\n        const tabNote = new TabNote(noteStruct);\r\n        const tickContext = new TickContext();\r\n        tickContext.addTickable(tabNote).preFormat().setX(x);\r\n        tabNote.setContext(ctx).setStave(stave);\r\n        tabNote.draw();\r\n        return tabNote;\r\n    }\r\n    for (let i = 0; i < notes.length; ++i) {\r\n        const note = notes[i];\r\n        const tabNote = showNote(note, stave, ctx, (i + 1) * 25);\r\n        ok(tabNote.getX() > 0, 'Note ' + i + ' has X value');\r\n        ok(tabNote.getYs().length > 0, 'Note ' + i + ' has Y values');\r\n    }\r\n}\r\nfunction drawStemsUp(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 200);\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 30, 550);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '32',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '64',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '128',\r\n        },\r\n    ];\r\n    const notes = specs.map((struct) => {\r\n        const tabNote = new TabNote(struct);\r\n        tabNote.render_options.draw_stem = true;\r\n        return tabNote;\r\n    });\r\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\r\n    voice.addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    voice.draw(ctx, stave);\r\n    ok(true, 'TabNotes successfully drawn');\r\n}\r\nfunction drawStemsDown(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 200);\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, 550);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '32',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '64',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '128',\r\n        },\r\n    ];\r\n    const notes = specs.map((struct) => {\r\n        const tabNote = new TabNote(struct);\r\n        tabNote.render_options.draw_stem = true;\r\n        tabNote.setStemDirection(-1);\r\n        return tabNote;\r\n    });\r\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\r\n    voice.addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    voice.draw(ctx, stave);\r\n    ok(true, 'All objects have been drawn');\r\n}\r\nfunction drawStemsUpThrough(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 200);\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 30, 550);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '32',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '64',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '128',\r\n        },\r\n    ];\r\n    const notes = specs.map((struct) => {\r\n        const tabNote = new TabNote(struct);\r\n        tabNote.render_options.draw_stem = true;\r\n        tabNote.render_options.draw_stem_through_stave = true;\r\n        return tabNote;\r\n    });\r\n    ctx.setFont(Font.SANS_SERIF, 10, FontWeight.BOLD);\r\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\r\n    voice.addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    voice.draw(ctx, stave);\r\n    ok(true, 'TabNotes successfully drawn');\r\n}\r\nfunction drawStemsDownThrough(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 250);\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, 550, { num_lines: 8 });\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '4',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n                { str: 6, fret: 10 },\r\n            ],\r\n            duration: '32',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '64',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 3, fret: 5 },\r\n                { str: 5, fret: 5 },\r\n                { str: 7, fret: 5 },\r\n            ],\r\n            duration: '128',\r\n        },\r\n    ];\r\n    const notes = specs.map((struct) => {\r\n        const tabNote = new TabNote(struct);\r\n        tabNote.render_options.draw_stem = true;\r\n        tabNote.render_options.draw_stem_through_stave = true;\r\n        tabNote.setStemDirection(-1);\r\n        return tabNote;\r\n    });\r\n    ctx.setFont('Arial', 10, 'bold');\r\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\r\n    voice.addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    voice.draw(ctx, stave);\r\n    ok(true, 'All objects have been drawn');\r\n}\r\nfunction drawStemsDotted(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 200);\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, 550);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    const specs = [\r\n        {\r\n            positions: [\r\n                { str: 3, fret: 6 },\r\n                { str: 4, fret: 25 },\r\n            ],\r\n            duration: '4d',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 5, fret: 12 },\r\n            ],\r\n            duration: '8',\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '4dd',\r\n            stem_direction: -1,\r\n        },\r\n        {\r\n            positions: [\r\n                { str: 1, fret: 6 },\r\n                { str: 4, fret: 5 },\r\n            ],\r\n            duration: '16',\r\n            stem_direction: -1,\r\n        },\r\n    ];\r\n    const notes = specs.map((struct) => new TabNote(struct, true /* draw_stem */));\r\n    Dot.buildAndAttach([notes[0], notes[2], notes[2]]);\r\n    const voice = new Voice(Flow.TIME4_4).setMode(VoiceMode.SOFT);\r\n    voice.addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    voice.draw(ctx, stave);\r\n    ok(true, 'TabNotes successfully drawn');\r\n}\r\nVexFlowTests.register(TabNoteTests);\r\nexport { TabNoteTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// TabSlide Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Flow } from '../src/flow';\r\nimport { Formatter } from '../src/formatter';\r\nimport { TabNote } from '../src/tabnote';\r\nimport { TabSlide } from '../src/tabslide';\r\nimport { TabStave } from '../src/tabstave';\r\nimport { Voice } from '../src/voice';\r\nconst TabSlideTests = {\r\n    Start() {\r\n        QUnit.module('TabSlide');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple TabSlide', simple);\r\n        run('Slide Up', slideUp);\r\n        run('Slide Down', slideDown);\r\n    },\r\n};\r\nfunction tieNotes(notes, indices, stave, ctx) {\r\n    const voice = new Voice(Flow.TIME4_4);\r\n    voice.addTickables(notes);\r\n    new Formatter().joinVoices([voice]).format([voice], 100);\r\n    voice.draw(ctx, stave);\r\n    const tie = new TabSlide({\r\n        first_note: notes[0],\r\n        last_note: notes[1],\r\n        first_indices: indices,\r\n        last_indices: indices,\r\n    }, TabSlide.SLIDE_UP);\r\n    tie.setContext(ctx);\r\n    tie.draw();\r\n}\r\nfunction setupContext(options, width) {\r\n    // eslint-disable-next-line\r\n    const context = options.contextBuilder(options.elementId, 350, 140);\r\n    context.scale(0.9, 0.9);\r\n    context.fillStyle = '#221';\r\n    context.strokeStyle = '#221';\r\n    context.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, width || 350).addTabGlyph().setContext(context).draw();\r\n    return { context, stave };\r\n}\r\n// Helper function to create TabNote objects.\r\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\r\n/**\r\n * Test Case\r\n */\r\nfunction simple(options, contextBuilder) {\r\n    options.contextBuilder = contextBuilder;\r\n    const { stave, context } = setupContext(options);\r\n    tieNotes([\r\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: 'h' }),\r\n        tabNote({ positions: [{ str: 4, fret: 6 }], duration: 'h' }),\r\n    ], [0], stave, context);\r\n    ok(true, 'Simple Test');\r\n}\r\n/**\r\n * The slideUp and slideDown tests pass in a builder function: TabSlide.createSlideUp | TabSlide.createSlideDown.\r\n */\r\nfunction multiTest(options, buildTabSlide) {\r\n    const { context, stave } = setupContext(options, 440);\r\n    const notes = [\r\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: '8' }),\r\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: '8' }),\r\n        tabNote({\r\n            positions: [\r\n                { str: 4, fret: 4 },\r\n                { str: 5, fret: 4 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n        tabNote({\r\n            positions: [\r\n                { str: 4, fret: 6 },\r\n                { str: 5, fret: 6 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n        tabNote({ positions: [{ str: 2, fret: 14 }], duration: '8' }),\r\n        tabNote({ positions: [{ str: 2, fret: 16 }], duration: '8' }),\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 14 },\r\n                { str: 3, fret: 14 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 16 },\r\n                { str: 3, fret: 16 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n    ];\r\n    const voice = new Voice(Flow.TIME4_4).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).format([voice], 300);\r\n    voice.draw(context, stave);\r\n    buildTabSlide({\r\n        first_note: notes[0],\r\n        last_note: notes[1],\r\n        first_indices: [0],\r\n        last_indices: [0],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    ok(true, 'Single note');\r\n    buildTabSlide({\r\n        first_note: notes[2],\r\n        last_note: notes[3],\r\n        first_indices: [0, 1],\r\n        last_indices: [0, 1],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    ok(true, 'Chord');\r\n    buildTabSlide({\r\n        first_note: notes[4],\r\n        last_note: notes[5],\r\n        first_indices: [0],\r\n        last_indices: [0],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    ok(true, 'Single note high-fret');\r\n    buildTabSlide({\r\n        first_note: notes[6],\r\n        last_note: notes[7],\r\n        first_indices: [0, 1],\r\n        last_indices: [0, 1],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    ok(true, 'Chord high-fret');\r\n}\r\nfunction slideUp(options, contextBuilder) {\r\n    options.contextBuilder = contextBuilder;\r\n    multiTest(options, TabSlide.createSlideUp);\r\n}\r\nfunction slideDown(options, contextBuilder) {\r\n    options.contextBuilder = contextBuilder;\r\n    multiTest(options, TabSlide.createSlideDown);\r\n}\r\nVexFlowTests.register(TabSlideTests);\r\nexport { TabSlideTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// TabStave Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { TabStave } from '../src/tabstave';\r\nconst TabStaveTests = {\r\n    Start() {\r\n        QUnit.module('TabStave');\r\n        const run = VexFlowTests.runTests;\r\n        run('TabStave Draw Test', draw);\r\n    },\r\n};\r\nfunction draw(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 160);\r\n    const stave = new TabStave(10, 10, 300);\r\n    stave.setNumLines(6);\r\n    stave.setContext(ctx);\r\n    stave.draw();\r\n    equal(stave.getYForNote(0), 127, 'getYForNote(0)');\r\n    equal(stave.getYForLine(5), 127, 'getYForLine(5)');\r\n    equal(stave.getYForLine(0), 62, 'getYForLine(0) - Top Line');\r\n    equal(stave.getYForLine(4), 114, 'getYForLine(4) - Bottom Line');\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(TabStaveTests);\r\nexport { TabStaveTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// TabTie Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Annotation } from '../src/annotation';\r\nimport { Flow } from '../src/flow';\r\nimport { Formatter } from '../src/formatter';\r\nimport { TabNote } from '../src/tabnote';\r\nimport { TabStave } from '../src/tabstave';\r\nimport { TabTie } from '../src/tabtie';\r\nimport { Voice } from '../src/voice';\r\nconst TabTieTests = {\r\n    Start() {\r\n        QUnit.module('TabTie');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple TabTie', simple);\r\n        run('Hammerons', simpleHammerOn);\r\n        run('Pulloffs', simplePullOff);\r\n        run('Tapping', tap);\r\n        run('Continuous', continuous);\r\n    },\r\n};\r\n/**\r\n * Helper function to create TabNote objects.\r\n */\r\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\r\n/**\r\n * Helper function to create a RenderContext and TabStave.\r\n */\r\nfunction setupContext(options, w = 0, h = 0) {\r\n    // eslint-disable-next-line\r\n    const context = options.contextBuilder(options.elementId, w || 350, h || 160);\r\n    context.fillStyle = '#221';\r\n    context.strokeStyle = '#221';\r\n    context.setFont('Arial', VexFlowTests.Font.size);\r\n    const stave = new TabStave(10, 10, w || 350).addTabGlyph().setContext(context).draw();\r\n    return { context, stave };\r\n}\r\n/**\r\n * Helper function to create the TabTie between two Note objects.\r\n */\r\nfunction tieNotes(notes, indices, stave, ctx, text) {\r\n    const voice = new Voice(Flow.TIME4_4);\r\n    voice.addTickables(notes);\r\n    new Formatter().joinVoices([voice]).format([voice], 100);\r\n    voice.draw(ctx, stave);\r\n    const tie = new TabTie({\r\n        first_note: notes[0],\r\n        last_note: notes[1],\r\n        first_indices: indices,\r\n        last_indices: indices,\r\n    }, text !== null && text !== void 0 ? text : 'Annotation');\r\n    tie.setContext(ctx);\r\n    tie.draw();\r\n}\r\n/**\r\n * Two notes on string 4 with a tie drawn between them.\r\n */\r\nfunction simple(options, contextBuilder) {\r\n    options.contextBuilder = contextBuilder;\r\n    const { context, stave } = setupContext(options);\r\n    const note1 = tabNote({ positions: [{ str: 4, fret: 4 }], duration: 'h' });\r\n    const note2 = tabNote({ positions: [{ str: 4, fret: 6 }], duration: 'h' });\r\n    tieNotes([note1, note2], [0], stave, context);\r\n    ok(true, 'Simple Test');\r\n}\r\nfunction simpleHammerOn(options, contextBuilder) {\r\n    options.contextBuilder = contextBuilder;\r\n    multiTest(options, TabTie.createHammeron);\r\n}\r\nfunction simplePullOff(options, contextBuilder) {\r\n    options.contextBuilder = contextBuilder;\r\n    multiTest(options, TabTie.createPulloff);\r\n}\r\n/**\r\n * Helper function for the two test cases above (simpleHammerOn and simplePullOff).\r\n */\r\nfunction multiTest(options, createTabTie) {\r\n    const { context, stave } = setupContext(options, 440, 140);\r\n    const notes = [\r\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: '8' }),\r\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: '8' }),\r\n        tabNote({\r\n            positions: [\r\n                { str: 4, fret: 4 },\r\n                { str: 5, fret: 4 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n        tabNote({\r\n            positions: [\r\n                { str: 4, fret: 6 },\r\n                { str: 5, fret: 6 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n        tabNote({ positions: [{ str: 2, fret: 14 }], duration: '8' }),\r\n        tabNote({ positions: [{ str: 2, fret: 16 }], duration: '8' }),\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 14 },\r\n                { str: 3, fret: 14 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 16 },\r\n                { str: 3, fret: 16 },\r\n            ],\r\n            duration: '8',\r\n        }),\r\n    ];\r\n    const voice = new Voice(Flow.TIME4_4).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).format([voice], 300);\r\n    voice.draw(context, stave);\r\n    createTabTie({\r\n        first_note: notes[0],\r\n        last_note: notes[1],\r\n        first_indices: [0],\r\n        last_indices: [0],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    ok(true, 'Single note');\r\n    createTabTie({\r\n        first_note: notes[2],\r\n        last_note: notes[3],\r\n        first_indices: [0, 1],\r\n        last_indices: [0, 1],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    ok(true, 'Chord');\r\n    createTabTie({\r\n        first_note: notes[4],\r\n        last_note: notes[5],\r\n        first_indices: [0],\r\n        last_indices: [0],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    ok(true, 'Single note high-fret');\r\n    createTabTie({\r\n        first_note: notes[6],\r\n        last_note: notes[7],\r\n        first_indices: [0, 1],\r\n        last_indices: [0, 1],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    ok(true, 'Chord high-fret');\r\n}\r\nfunction tap(options, contextBuilder) {\r\n    options.contextBuilder = contextBuilder;\r\n    const { context, stave } = setupContext(options);\r\n    const note1 = tabNote({ positions: [{ str: 4, fret: 12 }], duration: 'h' }).addModifier(new Annotation('T'), 0);\r\n    const note2 = tabNote({ positions: [{ str: 4, fret: 10 }], duration: 'h' });\r\n    tieNotes([note1, note2], [0], stave, context, 'P');\r\n    ok(true, 'Tapping Test');\r\n}\r\nfunction continuous(options, contextBuilder) {\r\n    options.contextBuilder = contextBuilder;\r\n    const { context, stave } = setupContext(options, 440, 140);\r\n    const notes = [\r\n        tabNote({ positions: [{ str: 4, fret: 4 }], duration: 'q' }),\r\n        tabNote({ positions: [{ str: 4, fret: 5 }], duration: 'q' }),\r\n        tabNote({ positions: [{ str: 4, fret: 6 }], duration: 'h' }),\r\n    ];\r\n    const voice = new Voice(Flow.TIME4_4).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).format([voice], 300);\r\n    voice.draw(context, stave);\r\n    TabTie.createHammeron({\r\n        first_note: notes[0],\r\n        last_note: notes[1],\r\n        first_indices: [0],\r\n        last_indices: [0],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    TabTie.createPulloff({\r\n        first_note: notes[1],\r\n        last_note: notes[2],\r\n        first_indices: [0],\r\n        last_indices: [0],\r\n    })\r\n        .setContext(context)\r\n        .draw();\r\n    ok(true, 'Continuous Hammeron');\r\n}\r\nVexFlowTests.register(TabTieTests);\r\nexport { TabTieTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// TextBracket Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nconst TextBracketTests = {\r\n    Start() {\r\n        QUnit.module('TextBracket');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple TextBracket', simple0);\r\n        run('TextBracket Styles', simple1);\r\n    },\r\n};\r\nfunction simple0(options) {\r\n    const f = VexFlowTests.makeFactory(options, 550);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const notes = score.notes('c4/4, c4, c4, c4, c4', { stem: 'up' });\r\n    const voice = score.voice(notes, { time: '5/4' });\r\n    f.TextBracket({\r\n        from: notes[0],\r\n        to: notes[4],\r\n        text: '15',\r\n        options: {\r\n            superscript: 'va',\r\n            position: 'top',\r\n        },\r\n    });\r\n    f.TextBracket({\r\n        from: notes[0],\r\n        to: notes[4],\r\n        text: '8',\r\n        options: {\r\n            superscript: 'vb',\r\n            position: 'bottom',\r\n            line: 3,\r\n        },\r\n    });\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction simple1(options) {\r\n    const f = VexFlowTests.makeFactory(options, 550);\r\n    const stave = f.Stave();\r\n    const score = f.EasyScore();\r\n    const notes = score.notes('c4/4, c4, c4, c4, c4', { stem: 'up' });\r\n    const voice = score.voice(notes, { time: '5/4' });\r\n    const topOctaves = [\r\n        f.TextBracket({\r\n            from: notes[0],\r\n            to: notes[1],\r\n            text: 'Cool notes',\r\n            options: {\r\n                superscript: '',\r\n                position: 'top',\r\n            },\r\n        }),\r\n        f.TextBracket({\r\n            from: notes[2],\r\n            to: notes[4],\r\n            text: 'Testing',\r\n            options: {\r\n                position: 'top',\r\n                superscript: 'superscript',\r\n                // weight & style below can be left undefined. They will fall back to the default defined in textbracket.ts.\r\n                font: { family: 'Arial', size: 15, weight: 'normal', style: 'normal' },\r\n            },\r\n        }),\r\n    ];\r\n    const bottomOctaves = [\r\n        f.TextBracket({\r\n            from: notes[0],\r\n            to: notes[1],\r\n            text: '8',\r\n            options: {\r\n                superscript: 'vb',\r\n                position: 'bottom',\r\n                line: 3,\r\n                font: { size: 30 },\r\n            },\r\n        }),\r\n        f.TextBracket({\r\n            from: notes[2],\r\n            to: notes[4],\r\n            text: 'Not cool notes',\r\n            options: {\r\n                superscript: ' super uncool',\r\n                position: 'bottom',\r\n                line: 4,\r\n            },\r\n        }),\r\n    ];\r\n    topOctaves[1].render_options.line_width = 2;\r\n    topOctaves[1].render_options.show_bracket = false;\r\n    bottomOctaves[0].render_options.underline_superscript = false;\r\n    bottomOctaves[0].setDashed(false);\r\n    bottomOctaves[1].render_options.bracket_height = 40;\r\n    bottomOctaves[1].setDashed(true, [2, 2]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nVexFlowTests.register(TextBracketTests);\r\nexport { TextBracketTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// TextFormatter Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { TextFormatter } from '../src/textformatter';\r\nconst TextFormatterTests = {\r\n    Start() {\r\n        QUnit.module('TextFormatter');\r\n        test('Basic', basic);\r\n    },\r\n};\r\nfunction basic() {\r\n    var _a;\r\n    // See: src/fonts/textfonts.ts > loadTextFonts()\r\n    const registeredFamilies = TextFormatter.getFontFamilies();\r\n    equal(registeredFamilies.length, 2, `There are two registered font families: 'Roboto Slab' & 'PetalumaScript'`);\r\n    // Verify the advanceWidth and other metrics by opening the font file with a glyph inspector:\r\n    // https://fontdrop.info/\r\n    // https://opentype.js.org/glyph-inspector.html\r\n    const petalumaFormatterInfo = TextFormatter.getInfo('PetalumaScript');\r\n    equal((_a = petalumaFormatterInfo === null || petalumaFormatterInfo === void 0 ? void 0 : petalumaFormatterInfo.glyphs) === null || _a === void 0 ? void 0 : _a.C.advanceWidth, 623, 'PetalumaScript advanceWidth of C character is 623.');\r\n    const formatterForPetalumaScript = TextFormatter.create({ family: 'PetalumaScript', size: '100px' });\r\n    const metricsPetalumaScriptH = formatterForPetalumaScript.getGlyphMetrics('H');\r\n    equal(metricsPetalumaScriptH.leftSideBearing, 37);\r\n    const formatterForRobotoSlab = TextFormatter.create({ family: 'Roboto Slab', size: '100px', style: 'italic' });\r\n    const metricsRobotoSlabH = formatterForRobotoSlab.getGlyphMetrics('H');\r\n    equal(metricsRobotoSlabH.advanceWidth, 1578);\r\n    // eslint-disable-next-line\r\n    // @ts-ignore direct access to protected variable .cacheKey\r\n    equal(formatterForRobotoSlab.cacheKey, 'Roboto_Slab%75%normal%normal');\r\n}\r\nVexFlowTests.register(TextFormatterTests);\r\nexport { TextFormatterTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Text Note Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Crescendo } from '../src/crescendo';\r\nimport { Flow } from '../src/flow';\r\nimport { Font } from '../src/font';\r\nimport { Note } from '../src/note';\r\nimport { Stave } from '../src/stave';\r\nimport { TextNote } from '../src/textnote';\r\nconst TextNoteTests = {\r\n    Start() {\r\n        QUnit.module('TextNote');\r\n        const run = VexFlowTests.runTests;\r\n        run('TextNote Formatting', formatTextNotes);\r\n        run('TextNote Formatting 2', formatTextNotes2);\r\n        run('TextNote Superscript and Subscript', superscriptAndSubscript);\r\n        run('TextNote Formatting With Glyphs 0', formatTextGlyphs0);\r\n        run('TextNote Formatting With Glyphs 1', formatTextGlyphs1);\r\n        run('Crescendo', crescendo);\r\n        run('Text Dynamics', textDynamics);\r\n    },\r\n};\r\nfunction formatTextNotes(options) {\r\n    const f = VexFlowTests.makeFactory(options, 400, 200);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice1 = score.voice([\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stem_direction: -1, duration: 'h' })\r\n            .addModifier(f.Accidental({ type: 'b' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stem_direction: -1, duration: 'q' }),\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: 'q' })\r\n            .addModifier(f.Accidental({ type: 'n' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n    ]);\r\n    const voice2 = score.voice([\r\n        f.TextNote({ text: 'Center Justification', duration: 'h' }).setJustification(TextNote.Justification.CENTER),\r\n        f.TextNote({ text: 'Left Line 1', duration: 'q' }).setLine(1),\r\n        f.TextNote({ text: 'Right', duration: 'q' }).setJustification(TextNote.Justification.RIGHT),\r\n    ]);\r\n    const formatter = f.Formatter();\r\n    formatter.joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction formatTextNotes2(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 200);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice1 = score.voice([\r\n        f.StaveNote({ keys: ['g/4'], stem_direction: 1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/4'], stem_direction: 1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/4'], stem_direction: 1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/5'], stem_direction: -1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/5'], stem_direction: -1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/5'], stem_direction: -1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/5', 'a/5'], stem_direction: -1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/5', 'a/5'], stem_direction: -1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/5', 'a/5'], stem_direction: -1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/4', 'a/4'], stem_direction: 1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/4', 'a/4'], stem_direction: 1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/4', 'a/4'], stem_direction: 1, duration: '16' }),\r\n        f.StaveNote({ keys: ['g/4', 'a/4'], stem_direction: 1, duration: 'q' }),\r\n    ]);\r\n    const voice2 = score.voice([\r\n        f.TextNote({ text: 'C', duration: '16' }).setJustification(TextNote.Justification.CENTER),\r\n        f.TextNote({ text: 'L', duration: '16' }),\r\n        f.TextNote({ text: 'R', duration: '16' }).setJustification(TextNote.Justification.RIGHT),\r\n        f.TextNote({ text: 'C', duration: '16' }).setJustification(TextNote.Justification.CENTER),\r\n        f.TextNote({ text: 'L', duration: '16' }),\r\n        f.TextNote({ text: 'R', duration: '16' }).setJustification(TextNote.Justification.RIGHT),\r\n        f.TextNote({ text: 'C', duration: '16' }).setJustification(TextNote.Justification.CENTER),\r\n        f.TextNote({ text: 'L', duration: '16' }),\r\n        f.TextNote({ text: 'R', duration: '16' }).setJustification(TextNote.Justification.RIGHT),\r\n        f.TextNote({ text: 'C', duration: '16' }).setJustification(TextNote.Justification.CENTER),\r\n        f.TextNote({ text: 'L', duration: '16' }),\r\n        f.TextNote({ text: 'R', duration: '16' }).setJustification(TextNote.Justification.RIGHT),\r\n        f.TextNote({ text: 'R', duration: 'q' }).setJustification(TextNote.Justification.RIGHT),\r\n    ]);\r\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\r\n    voice2.getTickables().forEach((note) => Note.plotMetrics(f.getContext(), note, 170));\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction superscriptAndSubscript(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 230);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice1 = score.voice([\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stem_direction: 1, duration: 'h' })\r\n            .addModifier(f.Accidental({ type: 'b' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stem_direction: 1, duration: 'q' }),\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: 1, duration: 'q' })\r\n            .addModifier(f.Accidental({ type: 'n' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n    ]);\r\n    const voice2 = score.voice([\r\n        f.TextNote({ text: Flow.unicode.flat + 'I', superscript: '+5', duration: '8' }),\r\n        f.TextNote({ text: 'D' + Flow.unicode.sharp + '/F', duration: '4d', superscript: 'sus2' }),\r\n        f.TextNote({ text: 'ii', superscript: '6', subscript: '4', duration: '8' }),\r\n        f.TextNote({ text: 'C', superscript: Flow.unicode.triangle + '7', subscript: '', duration: '8' }),\r\n        f.TextNote({ text: 'vii', superscript: Flow.unicode['o-with-slash'] + '7', duration: '8' }),\r\n        f.TextNote({ text: 'V', superscript: '7', duration: '8' }),\r\n    ]);\r\n    voice2.getTickables().forEach((note) => {\r\n        const textNote = note;\r\n        textNote.setFont({ family: Font.SERIF, size: 15 });\r\n        textNote.setLine(13);\r\n        textNote.setJustification(TextNote.Justification.LEFT);\r\n    });\r\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction formatTextGlyphs0(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 230);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice1 = score.voice([\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stem_direction: -1, duration: 'h' })\r\n            .addModifier(f.Accidental({ type: 'b' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stem_direction: -1, duration: '8' }),\r\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: '8' }),\r\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: '8' }),\r\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: '8' }),\r\n    ]);\r\n    const voice2 = score.voice([\r\n        f.TextNote({ text: 'Center', duration: '8' }).setJustification(TextNote.Justification.CENTER),\r\n        f.TextNote({ glyph: 'f', duration: '8' }),\r\n        f.TextNote({ glyph: 'p', duration: '8' }),\r\n        f.TextNote({ glyph: 'm', duration: '8' }),\r\n        f.TextNote({ glyph: 'z', duration: '8' }),\r\n        f.TextNote({ glyph: 'mordent_upper', duration: '16' }),\r\n        f.TextNote({ glyph: 'mordent_lower', duration: '16' }),\r\n        f.TextNote({ glyph: 'segno', duration: '8' }),\r\n        f.TextNote({ glyph: 'coda', duration: '8' }),\r\n    ]);\r\n    voice2.getTickables().forEach((n) => n.setJustification(TextNote.Justification.CENTER));\r\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction formatTextGlyphs1(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 230);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice1 = score.voice([\r\n        f\r\n            .StaveNote({ keys: ['c/4', 'e/4', 'a/4'], stem_direction: -1, duration: 'h' })\r\n            .addModifier(f.Accidental({ type: 'b' }), 0)\r\n            .addModifier(f.Accidental({ type: '#' }), 1),\r\n        f.StaveNote({ keys: ['d/4', 'e/4', 'f/4'], stem_direction: -1, duration: '8' }),\r\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: '8' }),\r\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: '8' }),\r\n        f.StaveNote({ keys: ['c/4', 'f/4', 'a/4'], stem_direction: -1, duration: '8' }),\r\n    ]);\r\n    const voice2 = score.voice([\r\n        f.TextNote({ glyph: 'turn', duration: '16' }),\r\n        f.TextNote({ glyph: 'turn_inverted', duration: '16' }),\r\n        f.TextNote({ glyph: 'pedal_open', duration: '8' }).setLine(10),\r\n        f.TextNote({ glyph: 'pedal_close', duration: '8' }).setLine(10),\r\n        f.TextNote({ glyph: 'caesura_curved', duration: '8' }).setLine(3),\r\n        f.TextNote({ glyph: 'caesura_straight', duration: '8' }).setLine(3),\r\n        f.TextNote({ glyph: 'breath', duration: '8' }).setLine(2),\r\n        f.TextNote({ glyph: 'tick', duration: '8' }).setLine(3),\r\n        f.TextNote({ glyph: 'tr', duration: '8', smooth: true }).setJustification(TextNote.Justification.CENTER),\r\n    ]);\r\n    voice2.getTickables().forEach((n) => n.setJustification(TextNote.Justification.CENTER));\r\n    f.Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction crescendo(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 230);\r\n    const stave = f.Stave({ y: 40 });\r\n    const score = f.EasyScore();\r\n    const voice = score.voice([\r\n        f.TextNote({ glyph: 'p', duration: '16' }),\r\n        new Crescendo({ duration: '4d' }).setLine(0).setHeight(25).setStave(stave),\r\n        f.TextNote({ glyph: 'f', duration: '16' }),\r\n        new Crescendo({ duration: '4' }).setLine(5).setStave(stave),\r\n        new Crescendo({ duration: '4' }).setLine(10).setDecrescendo(true).setHeight(5).setStave(stave),\r\n    ]);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction textDynamics(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 230);\r\n    const score = f.EasyScore();\r\n    const voice = score.voice([\r\n        f.TextDynamics({ text: 'sfz', duration: '4' }),\r\n        f.TextDynamics({ text: 'rfz', duration: '4' }),\r\n        f.TextDynamics({ text: 'mp', duration: '4' }),\r\n        f.TextDynamics({ text: 'ppp', duration: '4' }),\r\n        f.TextDynamics({ text: 'fff', duration: '4' }),\r\n        f.TextDynamics({ text: 'mf', duration: '4' }),\r\n        f.TextDynamics({ text: 'sff', duration: '4' }),\r\n    ], { time: '7/4' });\r\n    // This is refactored to use preCalculateMinWidth... to exercise\r\n    // a bug fix when textDynamic got formatted more than once.\r\n    const formatter = f.Formatter();\r\n    formatter.joinVoices([voice]);\r\n    // const width = 250; //formatter.preCalculateMinTotalWidth([voice]);\r\n    const width = formatter.preCalculateMinTotalWidth([voice]);\r\n    formatter.format([voice]);\r\n    const stave = f.Stave({ y: 40, width: width + Stave.defaultPadding });\r\n    stave.draw();\r\n    voice.draw(f.getContext(), stave);\r\n    ok(true);\r\n}\r\nVexFlowTests.register(TextNoteTests);\r\nexport { TextNoteTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Three Voices Tests - Three voices in single staff.\r\nimport { concat, VexFlowTests } from './vexflow_test_helpers';\r\nimport { Beam } from '../src/beam';\r\nconst ThreeVoicesTests = {\r\n    Start() {\r\n        // TODO: Rename the module to 'Three Voices', because we aren't really testing rests.\r\n        QUnit.module('Three Voice Rests');\r\n        const run = VexFlowTests.runTests;\r\n        run('Three Voices - #1', threeVoices1);\r\n        run('Three Voices - #2 Complex', threeVoices2);\r\n        run('Three Voices - #3', threeVoices3);\r\n        run('Auto Adjust Rest Positions - Two Voices', autoRestTwoVoices);\r\n        run('Auto Adjust Rest Positions - Three Voices #1', autoRestThreeVoices1);\r\n        run('Auto Adjust Rest Positions - Three Voices #2', autoRestThreeVoices2);\r\n    },\r\n};\r\n/**\r\n * Helper for setting up the first three test cases: threeVoices1, threeVoices2, threeVoices3.\r\n */\r\nfunction createThreeVoicesTest(noteGroup1, noteGroup2, noteGroup3, setup) {\r\n    return (options) => {\r\n        const factory = VexFlowTests.makeFactory(options, 600, 200);\r\n        const stave = factory.Stave().addClef('treble').addTimeSignature('4/4');\r\n        const score = factory.EasyScore();\r\n        // Convert each noteGroup array to StaveNote[].\r\n        const noteGroups = [noteGroup1, noteGroup2, noteGroup3].map((args) => score.notes(...args));\r\n        const voices = noteGroups.map((notes) => score.voice(notes));\r\n        setup(factory, voices);\r\n        const beams = [\r\n            Beam.applyAndGetBeams(voices[0], +1),\r\n            Beam.applyAndGetBeams(voices[1], -1),\r\n            Beam.applyAndGetBeams(voices[2], -1),\r\n        ].reduce(concat);\r\n        // Set option to position rests near the notes in each voice.\r\n        factory.Formatter().joinVoices(voices).formatToStave(voices, stave);\r\n        factory.draw();\r\n        for (let i = 0; i < beams.length; i++) {\r\n            beams[i].setContext(factory.getContext()).draw();\r\n        }\r\n        ok(true);\r\n    };\r\n}\r\n/**\r\n *\r\n */\r\nconst threeVoices1 = createThreeVoicesTest(['e5/2, e5', { stem: 'up' }], ['(d4 a4 d#5)/8, b4, (d4 a4 c5), b4, (d4 a4 c5), b4, (d4 a4 c5), b4', { stem: 'down' }], ['b3/4, e3, f3, a3', { stem: 'down' }], (f, voices) => {\r\n    voices[0].getTickables()[0].addModifier(f.Fingering({ number: '0', position: 'left' }), 0);\r\n    voices[1]\r\n        .getTickables()[0]\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 0)\r\n        .addModifier(f.Fingering({ number: '4', position: 'left' }), 1);\r\n});\r\n/**\r\n * Lots of beamed notes. A beam and notehead overlap.\r\n */\r\nconst threeVoices2 = createThreeVoicesTest(['(a4 e5)/16, e5, e5, e5, e5/8, e5, e5/2', { stem: 'up' }], ['(d4 d#5)/16, (b4 c5), d5, e5, (d4 a4 c5)/8, b4, (d4 a4 c5), b4, (d4 a4 c5), b4', { stem: 'down' }], ['b3/8, b3, e3/4, f3, a3', { stem: 'down' }], (f, voices) => {\r\n    voices[0]\r\n        .getTickables()[0]\r\n        .addModifier(f.Fingering({ number: '2', position: 'left' }), 0)\r\n        .addModifier(f.Fingering({ number: '0', position: 'above' }), 1);\r\n    voices[1]\r\n        .getTickables()[0]\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 0)\r\n        .addModifier(f.Fingering({ number: '4', position: 'left' }), 1);\r\n});\r\n/**\r\n *\r\n */\r\nconst threeVoices3 = createThreeVoicesTest(['(g4 e5)/4, e5, (g4 e5)/2', { stem: 'up' }], ['c#5/4, b4/8, b4/8/r, a4/4., g4/8', { stem: 'down' }], ['c4/4, b3, a3, g3', { stem: 'down' }], (f, voices) => {\r\n    voices[0]\r\n        .getTickables()[0]\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 0)\r\n        .addModifier(f.Fingering({ number: '0', position: 'left' }), 1);\r\n    voices[1].getTickables()[0].addModifier(f.Fingering({ number: '1', position: 'left' }), 0);\r\n    voices[2].getTickables()[0].addModifier(f.Fingering({ number: '3', position: 'left' }), 0);\r\n});\r\nfunction autoRestTwoVoices(options) {\r\n    const f = VexFlowTests.makeFactory(options, 900, 200);\r\n    const score = f.EasyScore();\r\n    let x = 10;\r\n    let beams = [];\r\n    function createMeasure(measureTitle, width, align_rests) {\r\n        const stave = f.Stave({ x: x, y: 50, width: width }).setBegBarType(1);\r\n        x += width;\r\n        const noteArrays = [\r\n            score.notes('b4/8/r, e5/16, b4/r, b4/8/r, e5/16, b4/r, b4/8/r, d5/16, b4/r, e5/4', { stem: 'up' }),\r\n            score.notes('c5/16, c4, b4/r, d4, e4, f4, b4/r, g4, g4[stem=\"up\"], a4[stem=\"up\"], b4/r, b4[stem=\"up\"], e4/4', {\r\n                stem: 'down',\r\n            }),\r\n            [f.TextNote({ text: measureTitle, line: -1, duration: '1', smooth: true })],\r\n        ];\r\n        const voices = noteArrays.map((notes) => score.voice(notes));\r\n        beams = beams.concat(Beam.applyAndGetBeams(voices[0], 1)).concat(Beam.applyAndGetBeams(voices[1], -1));\r\n        f.Formatter().joinVoices(voices).formatToStave(voices, stave, { align_rests });\r\n    }\r\n    createMeasure('Default Rest Positions', 400, false);\r\n    createMeasure('Rests Repositioned To Avoid Collisions', 400, true);\r\n    f.draw();\r\n    for (let i = 0; i < beams.length; i++) {\r\n        beams[i].setContext(f.getContext()).draw();\r\n    }\r\n    ok(true, 'Auto Adjust Rests - Two Voices');\r\n}\r\nfunction autoRestThreeVoices1(options) {\r\n    const f = VexFlowTests.makeFactory(options, 850, 200);\r\n    const score = f.EasyScore();\r\n    let x = 10;\r\n    function createMeasure(measureTitle, width, align_rests) {\r\n        const stave = f.Stave({ x: x, y: 50, width: width }).setBegBarType(1);\r\n        const voices = [\r\n            score.voice(score.notes('b4/4/r, e5, e5/r, e5/r, e5, e5, e5, e5/r', { stem: 'up' }), { time: '8/4' }),\r\n            score.voice(score.notes('b4/4/r, b4/r, b4/r, b4, b4/r, b4/r, b4, b4', { stem: 'down' }), { time: '8/4' }),\r\n            score.voice(score.notes('e4/4/r, e4/r, f4, b4/r, g4, c4, e4/r, c4', { stem: 'down' }), { time: '8/4' }),\r\n            score.voice([\r\n                f.TextNote({ text: measureTitle, duration: '1', line: -1, smooth: true }),\r\n                f.TextNote({ text: '', duration: '1', line: -1, smooth: true }),\r\n            ], { time: '8/4' }),\r\n        ];\r\n        f.Formatter().joinVoices(voices).formatToStave(voices, stave, { align_rests });\r\n        x += width;\r\n    }\r\n    createMeasure('Default Rest Positions', 400, false);\r\n    createMeasure('Rests Repositioned To Avoid Collisions', 400, true);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nfunction autoRestThreeVoices2(options) {\r\n    const f = VexFlowTests.makeFactory(options, 850, 200);\r\n    const score = f.EasyScore();\r\n    let x = 10;\r\n    function createMeasure(measureTitle, width, align_rests) {\r\n        const stave = f.Stave({ x: x, y: 50, width: width }).setBegBarType(1);\r\n        const voices = [\r\n            score.voice(score.notes('b4/16/r, e5, e5/r, e5/r, e5, e5, e5, e5/r'), { time: '2/4' }),\r\n            score.voice(score.notes('b4/16/r, b4/r, b4/r, b4, b4/r, b4/r, b4, b4'), { time: '2/4' }),\r\n            score.voice(score.notes('e4/16/r, e4/r, f4, b4/r, g4, c4, e4/r, c4'), { time: '2/4' }),\r\n            score.voice([f.TextNote({ text: measureTitle, duration: 'h', line: -1, smooth: true })], { time: '2/4' }),\r\n        ];\r\n        f.Formatter().joinVoices(voices).formatToStave(voices, stave, { align_rests });\r\n        x += width;\r\n    }\r\n    createMeasure('Default Rest Positions', 400, false);\r\n    createMeasure('Rests Repositioned To Avoid Collisions', 400, true);\r\n    f.draw();\r\n    ok(true);\r\n}\r\nVexFlowTests.register(ThreeVoicesTests);\r\nexport { ThreeVoicesTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// TickContext Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Flow } from '../src/flow';\r\nimport { TickContext } from '../src/tickcontext';\r\nimport { MockTickable } from './mocks';\r\nconst TickContextTests = {\r\n    Start() {\r\n        QUnit.module('TickContext');\r\n        test('Current Tick Test', currentTick);\r\n        test('Tracking Test', tracking);\r\n    },\r\n};\r\nfunction currentTick() {\r\n    const tc = new TickContext();\r\n    equal(tc.getCurrentTick().value(), 0, 'New tick context has no ticks');\r\n}\r\nfunction tracking() {\r\n    const BEAT = (1 * Flow.RESOLUTION) / 4;\r\n    const tickables = [\r\n        new MockTickable().setTicks(BEAT).setWidth(10),\r\n        new MockTickable().setTicks(BEAT * 2).setWidth(20),\r\n        new MockTickable().setTicks(BEAT).setWidth(30),\r\n    ];\r\n    const tc = new TickContext();\r\n    tc.setPadding(0);\r\n    tc.addTickable(tickables[0]);\r\n    equal(tc.getMaxTicks().value(), BEAT);\r\n    tc.addTickable(tickables[1]);\r\n    equal(tc.getMaxTicks().value(), BEAT * 2);\r\n    tc.addTickable(tickables[2]);\r\n    equal(tc.getMaxTicks().value(), BEAT * 2);\r\n    equal(tc.getWidth(), 0);\r\n    tc.preFormat();\r\n    equal(tc.getWidth(), 30);\r\n}\r\nVexFlowTests.register(TickContextTests);\r\nexport { TickContextTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// TimeSignature Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Stave } from '../src/stave';\r\nimport { StaveConnector } from '../src/staveconnector';\r\nimport { TimeSignature } from '../src/timesignature';\r\nconst TimeSignatureTests = {\r\n    Start() {\r\n        QUnit.module('TimeSignature');\r\n        test('Time Signature Parser', parser);\r\n        const run = VexFlowTests.runTests;\r\n        run('Basic Time Signatures', basic);\r\n        run('Big Signature Test', big);\r\n        run('Additive Signature Test', additive);\r\n        run('Alternating Signature Test', alternating);\r\n        run('Interchangeable Signature Test', interchangeable);\r\n        run('Aggregate Signature Test', agregate);\r\n        run('Complex Signature Test', complex);\r\n        run('Time Signature multiple staves alignment test', multiple);\r\n        run('Time Signature Change Test', change);\r\n    },\r\n};\r\nfunction parser() {\r\n    const timeSig = new TimeSignature();\r\n    const mustFail = ['asdf', '123/', '/10', '/', '4567', 'C+', '1+', '+1', '(3+', '+3)', '()', '(+)'];\r\n    mustFail.forEach((invalidString) => {\r\n        throws(() => timeSig.parseTimeSpec(invalidString), /BadTimeSignature/);\r\n    });\r\n    const mustPass = ['4/4', '10/12', '1/8', '1234567890/1234567890', 'C', 'C|', '+'];\r\n    mustPass.forEach((validString) => timeSig.parseTimeSpec(validString));\r\n    ok(true, 'all pass');\r\n}\r\nfunction basic(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 600, 120);\r\n    new Stave(10, 10, 500)\r\n        .addTimeSignature('2/2')\r\n        .addTimeSignature('3/4')\r\n        .addTimeSignature('4/4')\r\n        .addTimeSignature('6/8')\r\n        .addTimeSignature('C')\r\n        .addTimeSignature('C|')\r\n        .addEndTimeSignature('2/2')\r\n        .addEndTimeSignature('3/4')\r\n        .addEndTimeSignature('4/4')\r\n        .addEndClef('treble')\r\n        .addEndTimeSignature('6/8')\r\n        .addEndTimeSignature('C')\r\n        .addEndTimeSignature('C|')\r\n        .setContext(ctx)\r\n        .draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction big(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    new Stave(10, 10, 300)\r\n        .addTimeSignature('12/8')\r\n        .addTimeSignature('7/16')\r\n        .addTimeSignature('1234567/890')\r\n        .addTimeSignature('987/654321')\r\n        .setContext(ctx)\r\n        .draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction additive(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    new Stave(10, 10, 300).addTimeSignature('2+3+2/8').setContext(ctx).draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction alternating(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    new Stave(10, 10, 300).addTimeSignature('6/8').addTimeSignature('+').addTimeSignature('3/4').setContext(ctx).draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction interchangeable(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    new Stave(10, 10, 300).addTimeSignature('3/4').addTimeSignature('-').addTimeSignature('2/4').setContext(ctx).draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction agregate(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    new Stave(10, 10, 300)\r\n        .addTimeSignature('2/4')\r\n        .addTimeSignature('+')\r\n        .addTimeSignature('3/8')\r\n        .addTimeSignature('+')\r\n        .addTimeSignature('5/4')\r\n        .setContext(ctx)\r\n        .draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction complex(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 120);\r\n    new Stave(10, 10, 300)\r\n        .addTimeSignature('(2+3)/16')\r\n        .addTimeSignature('+')\r\n        .addTimeSignature('3/8')\r\n        .setContext(ctx)\r\n        .draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction multiple(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 400, 350);\r\n    // Each StaveLineConfig object is of the form { visible: boolean }.\r\n    const stave1LineConfig = [false, false, true, false, false].map((visible) => ({ visible }));\r\n    const stave1 = new Stave(15, 0, 300)\r\n        .setConfigForLines(stave1LineConfig)\r\n        .addClef('percussion')\r\n        .addTimeSignature('4/4', 25) // passing the custom padding in pixels\r\n        .setContext(ctx)\r\n        .draw();\r\n    const stave2 = new Stave(15, 110, 300).addClef('treble').addTimeSignature('4/4').setContext(ctx).draw();\r\n    const stave3 = new Stave(15, 220, 300).addClef('bass').addTimeSignature('4/4').setContext(ctx).draw();\r\n    new StaveConnector(stave1, stave2).setType('single').setContext(ctx).draw();\r\n    new StaveConnector(stave2, stave3).setType('single').setContext(ctx).draw();\r\n    new StaveConnector(stave2, stave3).setType('brace').setContext(ctx).draw();\r\n    ok(true, 'all pass');\r\n}\r\nfunction change(options) {\r\n    const f = VexFlowTests.makeFactory(options, 900);\r\n    const stave = f.Stave({ x: 0, y: 0 }).addClef('treble').addTimeSignature('C|');\r\n    const tickables = [\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }),\r\n        f.TimeSigNote({ time: '3/4' }),\r\n        f.StaveNote({ keys: ['d/4'], duration: '4', clef: 'alto' }),\r\n        f.StaveNote({ keys: ['b/3'], duration: '4r', clef: 'alto' }),\r\n        f.TimeSigNote({ time: 'C' }),\r\n        f.StaveNote({ keys: ['c/3', 'e/3', 'g/3'], duration: '4', clef: 'bass' }),\r\n        f.TimeSigNote({ time: '9/8' }),\r\n        f.StaveNote({ keys: ['c/4'], duration: '4', clef: 'treble' }),\r\n    ];\r\n    const voice = f.Voice().setStrict(false).addTickables(tickables);\r\n    f.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'all pass');\r\n}\r\nVexFlowTests.register(TimeSignatureTests);\r\nexport { TimeSignatureTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Tremolo Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Barline } from '../src/stavebarline';\r\nimport { Tremolo } from '../src/tremolo';\r\nconst TremoloTests = {\r\n    Start() {\r\n        QUnit.module('Tremolo');\r\n        const run = VexFlowTests.runTests;\r\n        run('Tremolo - Basic', tremoloBasic);\r\n        run('Tremolo - Big', tremoloBig);\r\n    },\r\n};\r\nfunction tremoloBasic(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 200);\r\n    const score = f.EasyScore();\r\n    // bar 1\r\n    const stave1 = f.Stave({ width: 250 }).setEndBarType(Barline.type.DOUBLE);\r\n    const notes1 = score.notes('e4/4, e4, e4, e4', { stem: 'up' });\r\n    notes1[0].addModifier(new Tremolo(3), 0);\r\n    notes1[1].addModifier(new Tremolo(2), 0);\r\n    notes1[2].addModifier(new Tremolo(1), 0);\r\n    const voice1 = score.voice(notes1);\r\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\r\n    // bar 2\r\n    const stave2 = f\r\n        .Stave({ x: stave1.getWidth() + stave1.getX(), y: stave1.getY(), width: 300 })\r\n        .setEndBarType(Barline.type.DOUBLE);\r\n    const notes2 = score.notes('e5/4, e5, e5, e5', { stem: 'down' });\r\n    notes2[1].addModifier(new Tremolo(1), 0);\r\n    notes2[2].addModifier(new Tremolo(2), 0);\r\n    notes2[3].addModifier(new Tremolo(3), 0);\r\n    const voice2 = score.voice(notes2);\r\n    f.Formatter().joinVoices([voice2]).formatToStave([voice2], stave2);\r\n    f.draw();\r\n    ok(true, 'Tremolo - Basic');\r\n}\r\nfunction tremoloBig(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600, 200);\r\n    const score = f.EasyScore();\r\n    // bar 1\r\n    const stave1 = f.Stave({ width: 250 }).setEndBarType(Barline.type.DOUBLE);\r\n    const notes1 = score.notes('e4/4, e4, e4, e4', { stem: 'up' });\r\n    const tremolo1 = new Tremolo(3);\r\n    tremolo1.extra_stroke_scale = 1.7;\r\n    tremolo1.y_spacing_scale = 1.5;\r\n    const tremolo2 = new Tremolo(2);\r\n    tremolo2.extra_stroke_scale = 1.7;\r\n    tremolo2.y_spacing_scale = 1.5;\r\n    const tremolo3 = new Tremolo(1);\r\n    tremolo3.extra_stroke_scale = 1.7;\r\n    tremolo3.y_spacing_scale = 1.5;\r\n    notes1[0].addModifier(tremolo1, 0);\r\n    notes1[1].addModifier(tremolo2, 0);\r\n    notes1[2].addModifier(tremolo3, 0);\r\n    const voice1 = score.voice(notes1);\r\n    f.Formatter().joinVoices([voice1]).formatToStave([voice1], stave1);\r\n    // bar 2\r\n    const stave2 = f\r\n        .Stave({ x: stave1.getWidth() + stave1.getX(), y: stave1.getY(), width: 300 })\r\n        .setEndBarType(Barline.type.DOUBLE);\r\n    const notes2 = score.notes('e5/4, e5, e5, e5', { stem: 'down' });\r\n    const tremolo4 = new Tremolo(1);\r\n    tremolo4.extra_stroke_scale = 1.7;\r\n    tremolo4.y_spacing_scale = 1.5;\r\n    const tremolo5 = new Tremolo(2);\r\n    tremolo5.extra_stroke_scale = 1.7;\r\n    tremolo5.y_spacing_scale = 1.5;\r\n    const tremolo6 = new Tremolo(3);\r\n    tremolo6.extra_stroke_scale = 1.7;\r\n    tremolo6.y_spacing_scale = 1.5;\r\n    notes2[1].addModifier(tremolo4, 0);\r\n    notes2[2].addModifier(tremolo5, 0);\r\n    notes2[3].addModifier(tremolo6, 0);\r\n    const voice2 = score.voice(notes2);\r\n    f.Formatter().joinVoices([voice2]).formatToStave([voice2], stave2);\r\n    f.draw();\r\n    ok(true, 'Tremolo - Big');\r\n}\r\nVexFlowTests.register(TremoloTests);\r\nexport { TremoloTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Tuning Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Tuning } from '../src/tuning';\r\nconst TuningTests = {\r\n    Start() {\r\n        QUnit.module('Tuning');\r\n        test('Standard Tuning', standard);\r\n        test('Standard Banjo Tuning', banjo);\r\n        test('Return note for fret', noteForFret);\r\n    },\r\n};\r\n/**\r\n * Helper function to verify that the provided tuning matches a standard 6-string guitar.\r\n */\r\nfunction checkStandard(tuning) {\r\n    throws(() => tuning.getValueForString(0), /BadArguments/, 'String 0');\r\n    throws(() => tuning.getValueForString(9), /BadArguments/, 'String 9');\r\n    // TODO: Tuning constructor has a bug in that the default tuning has 8 strings.\r\n    // See: 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2' in tuning.ts constructor.\r\n    // throws(() => tuning.getValueForString(7), /BadArguments/, 'String 7');\r\n    // Tuning.getValueForString() returns a note number where the value 60 corresponds to middle C.\r\n    equal(tuning.getValueForString(6), 40, 'Low E string');\r\n    equal(tuning.getValueForString(5), 45, 'A string');\r\n    equal(tuning.getValueForString(4), 50, 'D string');\r\n    equal(tuning.getValueForString(3), 55, 'G string');\r\n    equal(tuning.getValueForString(2), 59, 'B string');\r\n    equal(tuning.getValueForString(1), 64, 'High E string');\r\n}\r\n/**\r\n * Helper function to verify that the provided tuning matches a standard 5-string banjo.\r\n */\r\nfunction checkStandardBanjo(tuning) {\r\n    throws(() => tuning.getValueForString(0), /BadArguments/, 'String 0');\r\n    throws(() => tuning.getValueForString(6), /BadArguments/, 'String 6');\r\n    equal(tuning.getValueForString(5), 67, 'High G string');\r\n    equal(tuning.getValueForString(4), 50, 'D string');\r\n    equal(tuning.getValueForString(3), 55, 'G string');\r\n    equal(tuning.getValueForString(2), 59, 'B string');\r\n    equal(tuning.getValueForString(1), 62, 'High D string');\r\n}\r\nfunction standard() {\r\n    expect(16);\r\n    const tuning = new Tuning();\r\n    checkStandard(tuning);\r\n    // Set the tuning by specifying a name: 'standard'.\r\n    tuning.setTuning('standard');\r\n    checkStandard(tuning);\r\n}\r\nfunction banjo() {\r\n    expect(7);\r\n    const tuning = new Tuning();\r\n    tuning.setTuning('standardBanjo');\r\n    checkStandardBanjo(tuning);\r\n}\r\nfunction noteForFret() {\r\n    expect(8);\r\n    const tuning = new Tuning('E/5,B/4,G/4,D/4,A/3,E/3');\r\n    throws(() => tuning.getNoteForFret(-1, 1), /BadArguments/, 'Fret = -1');\r\n    throws(() => tuning.getNoteForFret(1, -1), /BadArguments/, 'String = -1');\r\n    equal(tuning.getNoteForFret(0, 1), 'E/5', 'High E string');\r\n    equal(tuning.getNoteForFret(5, 1), 'A/5', 'High E string, fret 5');\r\n    equal(tuning.getNoteForFret(0, 2), 'B/4', 'B string');\r\n    equal(tuning.getNoteForFret(0, 3), 'G/4', 'G string');\r\n    equal(tuning.getNoteForFret(12, 2), 'B/5', 'B string, fret 12');\r\n    equal(tuning.getNoteForFret(0, 6), 'E/3', 'Low E string');\r\n}\r\nVexFlowTests.register(TuningTests);\r\nexport { TuningTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Tuplet Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Dot } from '../src/dot';\r\nimport { Formatter } from '../src/formatter';\r\nimport { Stem } from '../src/stem';\r\nimport { Tuplet } from '../src/tuplet';\r\nconst TupletTests = {\r\n    Start() {\r\n        QUnit.module('Tuplet');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple Tuplet', simple);\r\n        run('Beamed Tuplet', beamed);\r\n        run('Ratioed Tuplet', ratio);\r\n        run('Bottom Tuplet', bottom);\r\n        run('Bottom Ratioed Tuplet', bottomRatio);\r\n        run('Awkward Tuplet', awkward);\r\n        run('Complex Tuplet', complex);\r\n        run('Mixed Stem Direction Tuplet', mixedTop);\r\n        run('Mixed Stem Direction Bottom Tuplet', mixedBottom);\r\n        run('Nested Tuplets', nested);\r\n        run('Single Tuplets', single);\r\n    },\r\n};\r\n// Helper Functions to set the stem direction and duration of the options objects (i.e., StaveNoteStruct)\r\n// that are ultimately passed into Factory.StaveNote().\r\n// eslint-disable-next-line\r\nconst set = (key) => (value) => (object) => {\r\n    object[key] = value;\r\n    return object;\r\n};\r\nconst setStemDirection = set('stem_direction');\r\nconst setStemUp = setStemDirection(Stem.UP);\r\nconst setStemDown = setStemDirection(Stem.DOWN);\r\nconst setDurationToQuarterNote = set('duration')('4');\r\n/**\r\n * Simple test case with one ascending triplet and one descending triplet.\r\n */\r\nfunction simple(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addTimeSignature('3/4');\r\n    const notes = [\r\n        { keys: ['g/4'], duration: '4' },\r\n        { keys: ['a/4'], duration: '4' },\r\n        { keys: ['b/4'], duration: '4' },\r\n        { keys: ['b/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '8' },\r\n        { keys: ['g/4'], duration: '8' },\r\n    ]\r\n        .map(setStemUp)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Tuplet({ notes: notes.slice(0, 3) });\r\n    f.Tuplet({ notes: notes.slice(3, 6) });\r\n    // 3/4 time\r\n    const voice = f\r\n        .Voice({ time: { num_beats: 3, beat_value: 4 } })\r\n        .setStrict(true)\r\n        .addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Simple Test');\r\n}\r\nfunction beamed(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addTimeSignature('3/8');\r\n    const notes = [\r\n        { keys: ['b/4'], duration: '16' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['g/4'], duration: '16' },\r\n        { keys: ['a/4'], duration: '8' },\r\n        { keys: ['f/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '8' },\r\n        { keys: ['f/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '8' },\r\n        { keys: ['f/4'], duration: '8' },\r\n        { keys: ['g/4'], duration: '8' },\r\n    ]\r\n        .map(setStemUp)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Beam({ notes: notes.slice(0, 3) });\r\n    f.Beam({ notes: notes.slice(3, 10) });\r\n    f.Tuplet({ notes: notes.slice(0, 3) });\r\n    f.Tuplet({ notes: notes.slice(3, 10) });\r\n    // 3/8 time\r\n    const voice = f\r\n        .Voice({ time: { num_beats: 3, beat_value: 8 } })\r\n        .setStrict(true)\r\n        .addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Beamed Test');\r\n}\r\nfunction ratio(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ x: 10, y: 10, width: 350 }).addTimeSignature('4/4');\r\n    const notes = [\r\n        { keys: ['f/4'], duration: '4' },\r\n        { keys: ['a/4'], duration: '4' },\r\n        { keys: ['b/4'], duration: '4' },\r\n        { keys: ['g/4'], duration: '8' },\r\n        { keys: ['e/4'], duration: '8' },\r\n        { keys: ['g/4'], duration: '8' },\r\n    ]\r\n        .map(setStemUp)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Beam({\r\n        notes: notes.slice(3, 6),\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(0, 3),\r\n        options: {\r\n            ratioed: true,\r\n        },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(3, 6),\r\n        options: {\r\n            ratioed: true,\r\n            notes_occupied: 4,\r\n        },\r\n    });\r\n    const voice = f.Voice().setStrict(true).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Ratioed Test');\r\n}\r\nfunction bottom(options) {\r\n    const f = VexFlowTests.makeFactory(options, 350, 160);\r\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('3/4');\r\n    const notes = [\r\n        { keys: ['f/4'], duration: '4' },\r\n        { keys: ['c/4'], duration: '4' },\r\n        { keys: ['g/4'], duration: '4' },\r\n        { keys: ['d/5'], duration: '8' },\r\n        { keys: ['g/3'], duration: '8' },\r\n        { keys: ['b/4'], duration: '8' },\r\n    ]\r\n        .map(setStemDown)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Beam({\r\n        notes: notes.slice(3, 6),\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(0, 3),\r\n        options: { location: Tuplet.LOCATION_BOTTOM },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(3, 6),\r\n        options: { location: Tuplet.LOCATION_BOTTOM },\r\n    });\r\n    const voice = f\r\n        .Voice({ time: { num_beats: 3, beat_value: 4 } })\r\n        .setStrict(true)\r\n        .addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Bottom Test');\r\n}\r\nfunction bottomRatio(options) {\r\n    const f = VexFlowTests.makeFactory(options, 350, 160);\r\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('5/8');\r\n    const notes = [\r\n        { keys: ['f/4'], duration: '4' },\r\n        { keys: ['c/4'], duration: '4' },\r\n        { keys: ['d/4'], duration: '4' },\r\n        { keys: ['d/5'], duration: '8' },\r\n        { keys: ['g/5'], duration: '8' },\r\n        { keys: ['b/4'], duration: '8' },\r\n    ]\r\n        .map(setStemDown)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Beam({\r\n        notes: notes.slice(3, 6),\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(0, 3),\r\n        options: {\r\n            location: Tuplet.LOCATION_BOTTOM,\r\n            ratioed: true,\r\n        },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(3, 6),\r\n        options: {\r\n            location: Tuplet.LOCATION_BOTTOM,\r\n            notes_occupied: 1,\r\n        },\r\n    });\r\n    const voice = f\r\n        .Voice({ time: { num_beats: 5, beat_value: 8 } })\r\n        .setStrict(true)\r\n        .addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Bottom Ratioed Test');\r\n}\r\nfunction awkward(options) {\r\n    const f = VexFlowTests.makeFactory(options, 370, 160);\r\n    const stave = f.Stave({ x: 10, y: 10 });\r\n    const notes = [\r\n        { keys: ['g/4'], duration: '16' },\r\n        { keys: ['b/4'], duration: '16' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['g/4'], duration: '16' },\r\n        { keys: ['f/4'], duration: '16' },\r\n        { keys: ['e/4'], duration: '16' },\r\n        { keys: ['c/4'], duration: '16' },\r\n        { keys: ['g/4'], duration: '16' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['f/4'], duration: '16' },\r\n        { keys: ['e/4'], duration: '16' },\r\n        { keys: ['c/4'], duration: '8' },\r\n        { keys: ['d/4'], duration: '8' },\r\n        { keys: ['e/4'], duration: '8' },\r\n    ]\r\n        .map(setStemUp)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Beam({ notes: notes.slice(0, 12) });\r\n    f.Tuplet({\r\n        notes: notes.slice(0, 12),\r\n        options: {\r\n            notes_occupied: 142,\r\n            ratioed: true,\r\n        },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(12, 15),\r\n        options: {\r\n            ratioed: true,\r\n        },\r\n    }).setBracketed(true);\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Awkward Test');\r\n}\r\nfunction complex(options) {\r\n    const f = VexFlowTests.makeFactory(options, 600);\r\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('4/4');\r\n    const notes1 = [\r\n        { keys: ['b/4'], duration: '8d' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['g/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['b/4'], duration: '16r' },\r\n        { keys: ['g/4'], duration: '32' },\r\n        { keys: ['f/4'], duration: '32' },\r\n        { keys: ['g/4'], duration: '32' },\r\n        { keys: ['f/4'], duration: '32' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['f/4'], duration: '8' },\r\n        { keys: ['b/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '8' },\r\n        { keys: ['g/4'], duration: '8' },\r\n        { keys: ['b/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '8' },\r\n    ]\r\n        .map(setStemUp)\r\n        .map(f.StaveNote.bind(f));\r\n    Dot.buildAndAttach([notes1[0]], { all: true });\r\n    const notes2 = [{ keys: ['c/4'] }, { keys: ['c/4'] }, { keys: ['c/4'] }, { keys: ['c/4'] }]\r\n        .map(setDurationToQuarterNote)\r\n        .map(setStemDown)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Beam({ notes: notes1.slice(0, 3) });\r\n    f.Beam({ notes: notes1.slice(5, 9) });\r\n    f.Beam({ notes: notes1.slice(11, 16) });\r\n    f.Tuplet({\r\n        notes: notes1.slice(0, 3),\r\n    });\r\n    f.Tuplet({\r\n        notes: notes1.slice(3, 11),\r\n        options: {\r\n            num_notes: 7,\r\n            notes_occupied: 4,\r\n            ratioed: false,\r\n        },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes1.slice(11, 16),\r\n        options: {\r\n            notes_occupied: 4,\r\n        },\r\n    });\r\n    const voice1 = f.Voice().setStrict(true).addTickables(notes1);\r\n    const voice2 = f.Voice().setStrict(true).addTickables(notes2);\r\n    new Formatter().joinVoices([voice1, voice2]).formatToStave([voice1, voice2], stave);\r\n    f.draw();\r\n    ok(true, 'Complex Test');\r\n}\r\nfunction mixedTop(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ x: 10, y: 10 });\r\n    const notes = [\r\n        { keys: ['a/4'], stem_direction: 1 },\r\n        { keys: ['c/6'], stem_direction: -1 },\r\n        { keys: ['a/4'], stem_direction: 1 },\r\n        { keys: ['f/5'], stem_direction: 1 },\r\n        { keys: ['a/4'], stem_direction: -1 },\r\n        { keys: ['c/6'], stem_direction: -1 },\r\n    ]\r\n        .map(setDurationToQuarterNote)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Tuplet({\r\n        notes: notes.slice(0, 2),\r\n        options: {\r\n            notes_occupied: 3,\r\n        },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(2, 4),\r\n        options: {\r\n            notes_occupied: 3,\r\n        },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(4, 6),\r\n        options: {\r\n            notes_occupied: 3,\r\n        },\r\n    });\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Mixed Stem Direction Tuplet');\r\n}\r\nfunction mixedBottom(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ x: 10, y: 10 });\r\n    const notes = [\r\n        { keys: ['f/3'], stem_direction: 1 },\r\n        { keys: ['a/5'], stem_direction: -1 },\r\n        { keys: ['a/4'], stem_direction: 1 },\r\n        { keys: ['f/3'], stem_direction: 1 },\r\n        { keys: ['a/4'], stem_direction: -1 },\r\n        { keys: ['c/4'], stem_direction: -1 },\r\n    ]\r\n        .map(setDurationToQuarterNote)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Tuplet({\r\n        notes: notes.slice(0, 2),\r\n        options: {\r\n            notes_occupied: 3,\r\n        },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(2, 4),\r\n        options: {\r\n            notes_occupied: 3,\r\n        },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(4, 6),\r\n        options: {\r\n            notes_occupied: 3,\r\n        },\r\n    });\r\n    const voice = f.Voice().setStrict(false).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Mixed Stem Direction Bottom Tuplet');\r\n}\r\nfunction nested(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('4/4');\r\n    const notes = [\r\n        // Big triplet 1:\r\n        { keys: ['b/4'], duration: '4' },\r\n        { keys: ['a/4'], duration: '4' },\r\n        { keys: ['g/4'], duration: '16' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['f/4'], duration: '16' },\r\n        { keys: ['a/4'], duration: '16' },\r\n        { keys: ['g/4'], duration: '16' },\r\n        { keys: ['b/4'], duration: '2' },\r\n    ]\r\n        .map(setStemUp)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Beam({\r\n        notes: notes.slice(2, 7),\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(0, 7),\r\n        options: {\r\n            notes_occupied: 2,\r\n            num_notes: 3,\r\n        },\r\n    });\r\n    f.Tuplet({\r\n        notes: notes.slice(2, 7),\r\n        options: {\r\n            notes_occupied: 4,\r\n            num_notes: 5,\r\n        },\r\n    });\r\n    // 4/4 time\r\n    const voice = f.Voice().setStrict(true).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Nested Tuplets');\r\n}\r\nfunction single(options) {\r\n    const f = VexFlowTests.makeFactory(options);\r\n    const stave = f.Stave({ x: 10, y: 10 }).addTimeSignature('4/4');\r\n    const notes = [\r\n        // Big triplet 1:\r\n        { keys: ['c/4'], duration: '4' },\r\n        { keys: ['d/4'], duration: '8' },\r\n        { keys: ['e/4'], duration: '8' },\r\n        { keys: ['f/4'], duration: '8' },\r\n        { keys: ['g/4'], duration: '8' },\r\n        { keys: ['a/4'], duration: '2' },\r\n        { keys: ['b/4'], duration: '4' },\r\n    ]\r\n        .map(setStemUp)\r\n        .map(f.StaveNote.bind(f));\r\n    f.Beam({\r\n        notes: notes.slice(1, 4),\r\n    });\r\n    // big quartuplet\r\n    f.Tuplet({\r\n        notes: notes.slice(0, -1),\r\n        options: {\r\n            num_notes: 4,\r\n            notes_occupied: 3,\r\n            ratioed: true,\r\n            bracketed: true,\r\n        },\r\n    });\r\n    // first singleton\r\n    f.Tuplet({\r\n        notes: notes.slice(0, 1),\r\n        options: {\r\n            num_notes: 3,\r\n            notes_occupied: 2,\r\n            ratioed: true,\r\n        },\r\n    });\r\n    // eighth note triplet\r\n    f.Tuplet({\r\n        notes: notes.slice(1, 4),\r\n        options: {\r\n            num_notes: 3,\r\n            notes_occupied: 2,\r\n        },\r\n    });\r\n    // second singleton\r\n    f.Tuplet({\r\n        notes: notes.slice(4, 5),\r\n        options: {\r\n            num_notes: 3,\r\n            notes_occupied: 2,\r\n            ratioed: true,\r\n            bracketed: true,\r\n        },\r\n    });\r\n    // 4/4 time\r\n    const voice = f\r\n        .Voice({ time: { num_beats: 4, beat_value: 4 } })\r\n        .setStrict(true)\r\n        .addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    f.draw();\r\n    ok(true, 'Nested Tuplets');\r\n}\r\nVexFlowTests.register(TupletTests);\r\nexport { TupletTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Ron B. Yeh\r\n// MIT License\r\n//\r\n// TypeGuard Tests\r\n// eslint-disable-next-line\r\n// @ts-nocheck to support ES5 style class declaration in the fakeES5() test case.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { CanvasContext } from '../src/canvascontext';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { StemmableNote } from '../src/stemmablenote';\r\nimport { TabNote } from '../src/tabnote';\r\nimport { isCategory, isNote, isRenderContext, isStaveNote, isStemmableNote, isTabNote } from '../src/typeguard';\r\nconst TypeGuardTests = {\r\n    Start() {\r\n        QUnit.module('TypeGuard');\r\n        test('Real VexFlow Types', real);\r\n        test('Fake VexFlow Types in ES5', fakeES5);\r\n        test('Fake VexFlow Types in ES6', fakeES6);\r\n        test('Edge Case ES5/ES6', edgeCaseES5vsES6);\r\n    },\r\n};\r\nfunction real() {\r\n    const s = new StaveNote({ keys: ['c/4'], duration: 'w' });\r\n    ok(isStaveNote(s), 'isStaveNote helper function');\r\n    ok(isCategory(s, 'StaveNote'), 'Use isCategory(s, \"StaveNote\") directly');\r\n    notOk(isTabNote(s), 'isTabNote helper function. s is NOT a TabNote.');\r\n    const t = new TabNote({ positions: [{ str: 2, fret: 1 }], duration: '1' });\r\n    ok(isTabNote(t), 'isTabNote helper function');\r\n    notOk(isStaveNote(t), 't is NOT a StaveNote');\r\n    ok(isNote(s), 'StaveNote extends StemmableNote which extends Note, so s is a Note');\r\n    ok(isStemmableNote(t), 'TabNote extends StemmableNote');\r\n    ok(isNote(t), 'TabNote extends StemmableNote which extends Note, so t is a Note');\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 800;\r\n    canvas.height = 400;\r\n    const ctx = new CanvasContext(canvas.getContext('2d'));\r\n    ok(isRenderContext(ctx), 'ctx is a RenderContext');\r\n}\r\n/**\r\n * Helper function to test the fake VexFlow objects we create in fakeES5() and fakeES6().\r\n */\r\nfunction checkFakeObjects(fakeStemmableNote, fakeStaveNote) {\r\n    ok(isStemmableNote(fakeStemmableNote), 'Fake StemmableNote is a StemmableNote.');\r\n    notOk(isNote(fakeStemmableNote), 'Fake StemmableNote is not a Note (no ancestors with the correct CATEGORY).');\r\n    ok(isCategory(fakeStaveNote, 'StaveNote'), 'Fake StaveNote is a StaveNote.');\r\n    ok(isStaveNote(fakeStaveNote), 'Fake StaveNote is a StaveNote (via helper function).');\r\n    ok(isCategory(fakeStaveNote, 'StemmableNote'), 'Fake StaveNote is also a StemmableNote (via inheritance).');\r\n    notOk(isNote(fakeStaveNote), 'Fake StaveNote is not a Note. CATEGORY does not match.');\r\n}\r\n/**\r\n * Demonstrate that an object (ES5-style) can pass the isCategory(...) test if it\r\n * has the correct static .CATEGORY property.\r\n */\r\nfunction fakeES5() {\r\n    function FakeStemmableNote() {\r\n        this.isFake = true;\r\n    }\r\n    FakeStemmableNote.CATEGORY = StemmableNote.CATEGORY;\r\n    function FakeStaveNote() {\r\n        FakeStemmableNote.call(this);\r\n    }\r\n    FakeStaveNote.CATEGORY = StaveNote.CATEGORY;\r\n    FakeStaveNote.prototype = Object.create(FakeStemmableNote.prototype);\r\n    FakeStaveNote.prototype.constructor = FakeStaveNote;\r\n    const fakeStemmableNote = new FakeStemmableNote();\r\n    const fakeStaveNote = new FakeStaveNote();\r\n    checkFakeObjects(fakeStemmableNote, fakeStaveNote);\r\n}\r\n/**\r\n * Demonstrate that an object (ES6-style) can pass the isCategory(...) test if it\r\n * or its ancestor has the correct static .CATEGORY property.\r\n */\r\nfunction fakeES6() {\r\n    class FakeStemmableNote {\r\n    }\r\n    FakeStemmableNote.CATEGORY = StemmableNote.CATEGORY;\r\n    class FakeStaveNote extends FakeStemmableNote {\r\n    }\r\n    FakeStaveNote.CATEGORY = StaveNote.CATEGORY;\r\n    const fakeStemmableNote = new FakeStemmableNote();\r\n    const fakeStaveNote = new FakeStaveNote();\r\n    checkFakeObjects(fakeStemmableNote, fakeStaveNote);\r\n}\r\n/**\r\n * The tsconfig.json target is ES6 (as of August 18, 2021), so isCategory() works even when the root class \"extends Object\".\r\n */\r\nfunction edgeCaseES5vsES6() {\r\n    class Z extends Object {\r\n    }\r\n    class Y extends Z {\r\n    }\r\n    class X extends Y {\r\n    }\r\n    const zInstance = new Z();\r\n    const xInstance = new X();\r\n    ok(xInstance instanceof Object, 'es5 & es6: x IS an instanceof Object');\r\n    // If targeting es5, these three assertions only pass if we remove \"extends Object\" from the class Z definition.\r\n    ok(zInstance instanceof Z, 'es6: z IS an instanceof Z');\r\n    ok(xInstance instanceof Y, 'es6: x IS an instanceof Y');\r\n    ok(xInstance instanceof Z, 'es6: x IS an instanceof Z');\r\n}\r\nVexFlowTests.register(TypeGuardTests);\r\nexport { TypeGuardTests };\r\n","// [VexFlow](https://vexflow.com/) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// VexFlow Test Support Library\r\nimport { Factory, Flow, Font, Renderer } from '../src/index';\r\nimport { globalObject } from '../src/util';\r\nconst global = globalObject();\r\n// Each test case will switch through the available fonts, and then restore the original font when done.\r\nlet originalFontNames;\r\nfunction useTempFontStack(fontName) {\r\n    originalFontNames = Flow.getMusicFont();\r\n    Flow.setMusicFont(...VexFlowTests.FONT_STACKS[fontName]);\r\n}\r\nfunction restoreOriginalFontStack() {\r\n    Flow.setMusicFont(...originalFontNames);\r\n}\r\n// A micro util inspired by jQuery.\r\nif (!global.$) {\r\n    // generate_png_images.js uses jsdom and does not include jQuery.\r\n    global.$ = (param) => {\r\n        let element;\r\n        if (typeof param !== 'string') {\r\n            element = param;\r\n        }\r\n        else if (param.startsWith('<')) {\r\n            // Extract the tag name: e.g., <div/> => div\r\n            // Assume param.match returns something (! operator).\r\n            // eslint-disable-next-line\r\n            const tagName = param.match(/[A-Za-z]+/g)[0];\r\n            element = document.createElement(tagName);\r\n        }\r\n        else {\r\n            element = document.querySelector(param);\r\n        }\r\n        const $element = {\r\n            // eslint-disable-next-line\r\n            get(index) {\r\n                return element;\r\n            },\r\n            addClass(c) {\r\n                element.classList.add(c);\r\n                return $element;\r\n            },\r\n            text(t) {\r\n                element.textContent = t;\r\n                return $element;\r\n            },\r\n            html(h) {\r\n                if (!h) {\r\n                    return element.innerHTML;\r\n                }\r\n                else {\r\n                    element.innerHTML = h;\r\n                    return $element;\r\n                }\r\n            },\r\n            append(...elementsToAppend) {\r\n                elementsToAppend.forEach((e) => {\r\n                    element.appendChild(e);\r\n                });\r\n                return $element;\r\n            },\r\n            attr(attrName, val) {\r\n                element.setAttribute(attrName, val);\r\n                return $element;\r\n            },\r\n        };\r\n        return $element;\r\n    };\r\n}\r\n/** Allow `name` to be used inside file names. */\r\nfunction sanitizeName(name) {\r\n    return name.replace(/[^a-zA-Z0-9]/g, '_');\r\n}\r\nconst CANVAS_TEST_CONFIG = {\r\n    backend: Renderer.Backends.CANVAS,\r\n    tagName: 'canvas',\r\n    testType: 'Canvas',\r\n    fontStacks: ['Bravura'],\r\n};\r\nconst SVG_TEST_CONFIG = {\r\n    backend: Renderer.Backends.SVG,\r\n    tagName: 'div',\r\n    testType: 'SVG',\r\n    fontStacks: ['Bravura', 'Gonville', 'Petaluma', 'Leland'],\r\n};\r\nconst NODE_TEST_CONFIG = {\r\n    backend: Renderer.Backends.CANVAS,\r\n    tagName: 'canvas',\r\n    testType: 'NodeCanvas',\r\n    fontStacks: ['Bravura', 'Gonville', 'Petaluma', 'Leland'],\r\n};\r\nexport class VexFlowTests {\r\n    // Call this at the end of a `tests/xxxx_tests.ts` file to register the module.\r\n    static register(test) {\r\n        VexFlowTests.tests.push(test);\r\n    }\r\n    static parseJobOptions(runOptions) {\r\n        let { jobs, job } = runOptions || { jobs: 1, job: 0 };\r\n        if (window) {\r\n            const { location } = window;\r\n            if (location) {\r\n                const sps = new URLSearchParams(location.search);\r\n                const jobsParam = sps.get('jobs');\r\n                const jobParam = sps.get('job');\r\n                if (jobsParam) {\r\n                    jobs = parseInt(jobsParam, 10);\r\n                }\r\n                if (jobParam) {\r\n                    job = parseInt(jobParam, 10);\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            jobs,\r\n            job,\r\n        };\r\n    }\r\n    // flow.html calls this to invoke all the tests.\r\n    static run(runOptions) {\r\n        const { jobs, job } = VexFlowTests.parseJobOptions(runOptions);\r\n        VexFlowTests.tests.forEach((test, idx) => {\r\n            if (jobs === 1 || idx % jobs === job) {\r\n                test.Start();\r\n            }\r\n        });\r\n    }\r\n    static set NODE_FONT_STACKS(fontStacks) {\r\n        NODE_TEST_CONFIG.fontStacks = fontStacks;\r\n    }\r\n    /** Return a unique ID for a test. */\r\n    static generateTestID(prefix) {\r\n        return prefix + '_' + VexFlowTests.NEXT_TEST_ID++;\r\n    }\r\n    /**\r\n     * Run `func` inside a QUnit test for each of the enabled rendering backends.\r\n     * @param name\r\n     * @param testFunc\r\n     * @param params\r\n     */\r\n    // eslint-disable-next-line\r\n    static runTests(name, testFunc, params) {\r\n        VexFlowTests.runCanvasTest(name, testFunc, params);\r\n        VexFlowTests.runSVGTest(name, testFunc, params);\r\n        VexFlowTests.runNodeTest(name, testFunc, params);\r\n    }\r\n    /**\r\n     * Append a <div/> which contains the test case title and rendered output.\r\n     * See flow.html and flow.css.\r\n     * @param elementId\r\n     * @param testTitle\r\n     * @param tagName\r\n     */\r\n    static createTest(elementId, testTitle, tagName, titleId = '') {\r\n        const anchorTestTitle = `<a href=\"#${titleId}\">${testTitle}</a>`;\r\n        const title = $('<div/>').addClass('name').attr('id', titleId).html(anchorTestTitle).get(0);\r\n        const vexOutput = $(`<${tagName}/>`).addClass('vex-tabdiv').attr('id', elementId).get(0);\r\n        const container = $('<div/>').addClass('testcanvas').append(title, vexOutput).get(0);\r\n        $('#vexflow_testoutput').append(container);\r\n        return vexOutput;\r\n    }\r\n    static makeFactory(options, width = 450, height = 140) {\r\n        const { elementId, backend } = options;\r\n        return new Factory({ renderer: { elementId, backend, width, height } });\r\n    }\r\n    // eslint-disable-next-line\r\n    static runCanvasTest(name, testFunc, params) {\r\n        if (VexFlowTests.RUN_CANVAS_TESTS) {\r\n            const helper = null;\r\n            VexFlowTests.runWithParams(Object.assign(Object.assign({}, CANVAS_TEST_CONFIG), { name, testFunc, params, helper }));\r\n        }\r\n    }\r\n    // eslint-disable-next-line\r\n    static runSVGTest(name, testFunc, params) {\r\n        if (VexFlowTests.RUN_SVG_TESTS) {\r\n            const helper = null;\r\n            VexFlowTests.runWithParams(Object.assign(Object.assign({}, SVG_TEST_CONFIG), { name, testFunc, params, helper }));\r\n        }\r\n    }\r\n    // eslint-disable-next-line\r\n    static runNodeTest(name, testFunc, params) {\r\n        if (VexFlowTests.RUN_NODE_TESTS) {\r\n            const helper = VexFlowTests.runNodeTestHelper;\r\n            VexFlowTests.runWithParams(Object.assign(Object.assign({}, NODE_TEST_CONFIG), { name, testFunc, params, helper }));\r\n        }\r\n    }\r\n    /**\r\n     * Save the PNG file.\r\n     * @param fontName\r\n     * @param element\r\n     */\r\n    static runNodeTestHelper(fontName, element) {\r\n        if (Renderer.lastContext !== undefined) {\r\n            const moduleName = sanitizeName(QUnit.current_module);\r\n            const testName = sanitizeName(QUnit.current_test);\r\n            // If we are only testing Bravura, we OMIT the font name from the\r\n            // output image file name, which allows visual diffs against\r\n            // the previous release: version 3.0.9. In the future, if we decide\r\n            // to test all fonts by default, we can remove this check.\r\n            const onlyBravura = NODE_TEST_CONFIG.fontStacks.length === 1 && fontName === 'Bravura';\r\n            const fontInfo = onlyBravura ? '' : `.${fontName}`;\r\n            const fileName = `${VexFlowTests.NODE_IMAGEDIR}/${moduleName}.${testName}${fontInfo}.png`;\r\n            const imageData = element.toDataURL().split(';base64,').pop();\r\n            const imageBuffer = Buffer.from(imageData, 'base64');\r\n            VexFlowTests.shims.fs.writeFileSync(fileName, imageBuffer, { encoding: 'base64' });\r\n        }\r\n    }\r\n    /** Run QUnit.test(...) for each font. */\r\n    // eslint-disable-next-line\r\n    static runWithParams({ fontStacks, testFunc, name, params, backend, tagName, testType, helper }) {\r\n        if (name === undefined) {\r\n            throw new Error('Test name is undefined.');\r\n        }\r\n        const testTypeLowerCase = testType.toLowerCase();\r\n        fontStacks.forEach((fontStackName) => {\r\n            QUnit.test(name, (assert) => {\r\n                useTempFontStack(fontStackName);\r\n                const elementId = VexFlowTests.generateTestID(`${testTypeLowerCase}_` + fontStackName);\r\n                const moduleName = assert.test.module.name;\r\n                const title = moduleName + ' › ' + name + ` › ${testType} + ${fontStackName}`;\r\n                // Add an element id for the title div, so that we can scroll directly to a test case.\r\n                // Add a fragment identifier to the url (e.g., #Stave.Multiple_Stave_Barline_Test.Bravura)\r\n                // This titleId will match the name of the PNGs generated by visual regression tests\r\n                // (without the _Current.png or _Reference.png).\r\n                let prefix = '';\r\n                if (testTypeLowerCase === 'canvas') {\r\n                    prefix = testTypeLowerCase + '_';\r\n                }\r\n                else {\r\n                    // DO NOT ADD A PREFIX TO SVG TESTS\r\n                    // The canvas prefix above is for making sure our element ids are unique,\r\n                    // since we have a canvas+bravura test case and a svg+bravura test case\r\n                    // that would otherwise have the same titleId.\r\n                }\r\n                const titleId = `${prefix}${sanitizeName(moduleName)}.${sanitizeName(name)}.${fontStackName}`;\r\n                const element = VexFlowTests.createTest(elementId, title, tagName, titleId);\r\n                const options = { elementId, params, assert, backend };\r\n                const isSVG = backend === Renderer.Backends.SVG;\r\n                const contextBuilder = isSVG ? Renderer.getSVGContext : Renderer.getCanvasContext;\r\n                testFunc(options, contextBuilder);\r\n                restoreOriginalFontStack();\r\n                if (helper)\r\n                    helper(fontStackName, element);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @param ctx\r\n     * @param x\r\n     * @param y\r\n     */\r\n    static plotLegendForNoteWidth(ctx, x, y) {\r\n        ctx.save();\r\n        ctx.setFont(Font.SANS_SERIF, 8);\r\n        const spacing = 12;\r\n        let lastY = y;\r\n        function legend(color, text) {\r\n            ctx.beginPath();\r\n            ctx.setStrokeStyle(color);\r\n            ctx.setFillStyle(color);\r\n            ctx.setLineWidth(10);\r\n            ctx.moveTo(x, lastY - 4);\r\n            ctx.lineTo(x + 10, lastY - 4);\r\n            ctx.stroke();\r\n            ctx.setFillStyle('black');\r\n            ctx.fillText(text, x + 15, lastY);\r\n            lastY += spacing;\r\n        }\r\n        legend('green', 'Note + Flag');\r\n        legend('red', 'Modifiers');\r\n        legend('#999', 'Displaced Head');\r\n        legend('#DDD', 'Formatter Shift');\r\n        ctx.restore();\r\n    }\r\n}\r\nVexFlowTests.tests = [];\r\nVexFlowTests.RUN_CANVAS_TESTS = true;\r\nVexFlowTests.RUN_SVG_TESTS = true;\r\nVexFlowTests.RUN_NODE_TESTS = false;\r\n// Default font properties for tests.\r\nVexFlowTests.Font = { size: 10 };\r\n/**\r\n * Each font stack is a prioritized list of font names.\r\n */\r\nVexFlowTests.FONT_STACKS = {\r\n    Bravura: ['Bravura', 'Gonville', 'Custom'],\r\n    Gonville: ['Gonville', 'Bravura', 'Custom'],\r\n    Petaluma: ['Petaluma', 'Gonville', 'Bravura', 'Custom'],\r\n    Leland: ['Leland', 'Bravura', 'Gonville', 'Custom'],\r\n};\r\nVexFlowTests.NEXT_TEST_ID = 0;\r\n/**\r\n * Used with array.reduce(...) to flatten arrays of arrays in the tests.\r\n */\r\n// eslint-disable-next-line\r\nexport const concat = (a, b) => a.concat(b);\r\n/** Used in KeySignature and ClefKeySignature Tests. */\r\nexport const MAJOR_KEYS = [\r\n    //\r\n    'C',\r\n    'F',\r\n    'Bb',\r\n    'Eb',\r\n    'Ab',\r\n    'Db',\r\n    'Gb',\r\n    'Cb',\r\n    'G',\r\n    'D',\r\n    'A',\r\n    'E',\r\n    'B',\r\n    'F#',\r\n    'C#',\r\n];\r\nexport const MINOR_KEYS = [\r\n    'Am',\r\n    'Dm',\r\n    'Gm',\r\n    'Cm',\r\n    'Fm',\r\n    'Bbm',\r\n    'Ebm',\r\n    'Abm',\r\n    'Em',\r\n    'Bm',\r\n    'F#m',\r\n    'C#m',\r\n    'G#m',\r\n    'D#m',\r\n    'A#m',\r\n];\r\n// VexFlow classes can be accessed via Vex.Flow.* or by directly importing a library class.\r\n// Tests can be accessed via Vex.Flow.Test.* or by directly importing a test class.\r\n// Here we set Vex.Flow.Test = VexFlowTests.\r\n// eslint-disable-next-line\r\n// @ts-ignore\r\nFlow.Test = VexFlowTests;\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// VF.* Prefix Tests\r\n//\r\n// VexFlow classes are available under the global Vex.Flow.* namespace.\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Accidental, Annotation, Articulation, Barline, BarNote, Beam, Bend, BoundingBox, BoundingBoxComputation, ChordSymbol, Clef, ClefNote, Crescendo, Curve, Dot, EasyScore, Element, Factory, Flow, Font, Formatter, Fraction, FretHandFinger, GhostNote, Glyph, GlyphNote, GraceNote, GraceNoteGroup, GraceTabNote, KeyManager, KeySignature, KeySigNote, Modifier, ModifierContext, MultiMeasureRest, Music, Note, NoteHead, NoteSubGroup, Ornament, Parser, PedalMarking, Registry, Renderer, RepeatNote, Repetition, Stave, StaveConnector, StaveHairpin, StaveLine, StaveModifier, StaveNote, StaveTempo, StaveText, StaveTie, Stem, StringNumber, Stroke, System, TabNote, TabSlide, TabStave, TabTie, TextBracket, TextDynamics, TextFormatter, TextNote, TickContext, TimeSignature, TimeSigNote, Tremolo, Tuning, Tuplet, Vibrato, VibratoBracket, Voice, Volta, } from '../src/index';\r\nconst VFPrefixTests = {\r\n    Start() {\r\n        QUnit.module('VF.* API');\r\n        test('VF.* API', VF_Prefix);\r\n        test('VF Alias', VF_Alias);\r\n    },\r\n};\r\nfunction VF_Prefix() {\r\n    // Intentionally use Vex.Flow here so we can verify that the Vex.Flow.* API\r\n    // is equivalent to using the individual classes in TypeScript.\r\n    const VF = Vex.Flow;\r\n    equal(Accidental, VF.Accidental);\r\n    equal(Annotation, VF.Annotation);\r\n    equal(Articulation, VF.Articulation);\r\n    equal(Barline, VF.Barline);\r\n    equal(BarNote, VF.BarNote);\r\n    equal(Beam, VF.Beam);\r\n    equal(Bend, VF.Bend);\r\n    equal(BoundingBox, VF.BoundingBox);\r\n    equal(BoundingBoxComputation, VF.BoundingBoxComputation);\r\n    equal(ChordSymbol, VF.ChordSymbol);\r\n    equal(Clef, VF.Clef);\r\n    equal(ClefNote, VF.ClefNote);\r\n    equal(Crescendo, VF.Crescendo);\r\n    equal(Curve, VF.Curve);\r\n    equal(Dot, VF.Dot);\r\n    equal(EasyScore, VF.EasyScore);\r\n    equal(Element, VF.Element);\r\n    equal(Factory, VF.Factory);\r\n    equal(Flow.RESOLUTION, VF.RESOLUTION);\r\n    equal(Font, VF.Font);\r\n    equal(Formatter, VF.Formatter);\r\n    propEqual(new Formatter(), new VF.Formatter(), 'new Formatter()');\r\n    equal(Fraction, VF.Fraction);\r\n    equal(FretHandFinger, VF.FretHandFinger);\r\n    equal(GhostNote, VF.GhostNote);\r\n    equal(Glyph, VF.Glyph);\r\n    equal(GlyphNote, VF.GlyphNote);\r\n    equal(GraceNote, VF.GraceNote);\r\n    equal(GraceNoteGroup, VF.GraceNoteGroup);\r\n    equal(GraceTabNote, VF.GraceTabNote);\r\n    equal(KeyManager, VF.KeyManager);\r\n    equal(KeySignature, VF.KeySignature);\r\n    equal(KeySigNote, VF.KeySigNote);\r\n    equal(Modifier, VF.Modifier);\r\n    equal(ModifierContext, VF.ModifierContext);\r\n    equal(MultiMeasureRest, VF.MultiMeasureRest);\r\n    equal(Music, VF.Music);\r\n    equal(Note, VF.Note);\r\n    equal(NoteHead, VF.NoteHead);\r\n    equal(NoteSubGroup, VF.NoteSubGroup);\r\n    equal(Ornament, VF.Ornament);\r\n    equal(Parser, VF.Parser);\r\n    equal(PedalMarking, VF.PedalMarking);\r\n    equal(Registry, VF.Registry);\r\n    equal(Renderer, VF.Renderer);\r\n    equal(RepeatNote, VF.RepeatNote);\r\n    equal(Repetition, VF.Repetition);\r\n    equal(Stave, VF.Stave);\r\n    notEqual(Stave, VF.StaveNote);\r\n    equal(StaveConnector, VF.StaveConnector);\r\n    equal(StaveHairpin, VF.StaveHairpin);\r\n    equal(StaveLine, VF.StaveLine);\r\n    equal(StaveModifier, VF.StaveModifier);\r\n    equal(StaveNote, VF.StaveNote);\r\n    equal(StaveTempo, VF.StaveTempo);\r\n    equal(StaveText, VF.StaveText);\r\n    equal(StaveTie, VF.StaveTie);\r\n    equal(Stem, VF.Stem);\r\n    equal(StringNumber, VF.StringNumber);\r\n    equal(Stroke, VF.Stroke);\r\n    equal(System, VF.System);\r\n    equal(TabNote, VF.TabNote);\r\n    equal(TabSlide, VF.TabSlide);\r\n    equal(TabStave, VF.TabStave);\r\n    equal(TabTie, VF.TabTie);\r\n    equal(TextBracket, VF.TextBracket);\r\n    equal(TextDynamics, VF.TextDynamics);\r\n    equal(TextFormatter, VF.TextFormatter);\r\n    equal(TextNote, VF.TextNote);\r\n    equal(TickContext, VF.TickContext);\r\n    equal(TimeSignature, VF.TimeSignature);\r\n    equal(TimeSigNote, VF.TimeSigNote);\r\n    equal(Tremolo, VF.Tremolo);\r\n    equal(Tuning, VF.Tuning);\r\n    equal(Tuplet, VF.Tuplet);\r\n    equal(Vibrato, VF.Vibrato);\r\n    equal(VibratoBracket, VF.VibratoBracket);\r\n    equal(Voice, VF.Voice);\r\n    equal(Volta, VF.Volta);\r\n}\r\n/**\r\n * If you have name collisions with VexFlow classes, consider extracting classes from Vex.Flow\r\n * and renaming them with a VF prefix.\r\n */\r\nfunction VF_Alias() {\r\n    const Flow = Vex.Flow;\r\n    const VFAliases = {\r\n        get VFAccidental() {\r\n            return Flow.Accidental;\r\n        },\r\n        get VFAnnotation() {\r\n            return Flow.Annotation;\r\n        },\r\n        get VFVibrato() {\r\n            return Flow.Vibrato;\r\n        },\r\n    };\r\n    const { VFVibrato, VFAccidental, VFAnnotation } = VFAliases;\r\n    equal(Accidental, VFAccidental);\r\n    equal(Annotation, VFAnnotation);\r\n    const vibrato = new VFVibrato();\r\n    ok(vibrato);\r\n    const acc1 = new VFAccidental('##');\r\n    const acc2 = new Accidental('##');\r\n    equal(acc1.type, acc2.type);\r\n}\r\nVexFlowTests.register(VFPrefixTests);\r\nexport { VFPrefixTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Vibrato Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Bend, Font, Formatter, TabNote, TabStave, Vibrato } from '../src/index';\r\nconst VibratoTests = {\r\n    Start() {\r\n        QUnit.module('Vibrato');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple Vibrato', simple);\r\n        run('Harsh Vibrato', harsh);\r\n        run('Vibrato with Bend', withBend);\r\n    },\r\n};\r\n// Helper function to create TabNote objects.\r\nconst tabNote = (noteStruct) => new TabNote(noteStruct);\r\n/**\r\n * Default vibrato symbol (wavy line) on top of a tab with two notes fretted.\r\n */\r\nfunction simple(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\r\n    const notes = [\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 4, fret: 9 },\r\n            ],\r\n            duration: 'h',\r\n        }).addModifier(new Vibrato(), 0),\r\n        tabNote({\r\n            positions: [{ str: 2, fret: 10 }],\r\n            duration: 'h',\r\n        }).addModifier(new Vibrato(), 0),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'Simple Vibrato');\r\n}\r\n/**\r\n * The harsh vibrato symbol is a zig zag line with sharp points.\r\n * This test is nearly identical to the 'simple' test above.\r\n * The only difference is that we call .setHarsh(true) on each Vibrato object.\r\n */\r\nfunction harsh(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.5, 1.5);\r\n    ctx.fillStyle = '#221';\r\n    ctx.strokeStyle = '#221';\r\n    ctx.font = '10pt Arial';\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\r\n    const notes = [\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 10 },\r\n                { str: 4, fret: 9 },\r\n            ],\r\n            duration: 'h',\r\n        }).addModifier(new Vibrato().setHarsh(true), 0),\r\n        tabNote({\r\n            positions: [{ str: 2, fret: 10 }],\r\n            duration: 'h',\r\n        }).addModifier(new Vibrato().setHarsh(true), 0),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'Harsh Vibrato');\r\n}\r\nfunction withBend(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 500, 240);\r\n    ctx.scale(1.3, 1.3);\r\n    ctx.setFillStyle('#221');\r\n    ctx.setStrokeStyle('#221');\r\n    ctx.setFont(Font.SANS_SERIF, VexFlowTests.Font.size);\r\n    const stave = new TabStave(10, 10, 450).addTabGlyph().setContext(ctx).draw();\r\n    const notes = [\r\n        tabNote({\r\n            positions: [\r\n                { str: 2, fret: 9 },\r\n                { str: 3, fret: 9 },\r\n            ],\r\n            duration: 'q',\r\n        })\r\n            .addModifier(new Bend('1/2', true), 0)\r\n            .addModifier(new Bend('1/2', true), 1)\r\n            .addModifier(new Vibrato(), 0),\r\n        tabNote({\r\n            positions: [{ str: 2, fret: 10 }],\r\n            duration: 'q',\r\n        })\r\n            .addModifier(new Bend('Full', false), 0)\r\n            .addModifier(new Vibrato().setVibratoWidth(60), 0),\r\n        tabNote({\r\n            positions: [{ str: 2, fret: 10 }],\r\n            duration: 'h',\r\n        }).addModifier(new Vibrato().setVibratoWidth(120).setHarsh(true), 0),\r\n    ];\r\n    Formatter.FormatAndDraw(ctx, stave, notes);\r\n    ok(true, 'Vibrato with Bend');\r\n}\r\nVexFlowTests.register(VibratoTests);\r\nexport { VibratoTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n// Author: Balazs Forian-Szabo\r\n//\r\n// VibratoBracket Tests\r\n// TODO: It's annoying to have to cast \"as Note\" or \"as Note[]\". Could we add a method to Voice to get the tickables as Note[]? Voice.getTickables() vs Voice.getNotes()?\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nconst VibratoBracketTests = {\r\n    Start() {\r\n        QUnit.module('VibratoBracket');\r\n        const run = VexFlowTests.runTests;\r\n        run('Simple VibratoBracket', simple);\r\n        run('Harsh VibratoBracket Without End Note', withoutEndNote);\r\n        run('Harsh VibratoBracket Without Start Note', withoutStartNote);\r\n    },\r\n};\r\n// Helper function to set up the stave, easyscore, voice, and to format & draw.\r\nfunction createTest(noteGroup, setupVibratoBracket) {\r\n    return (options) => {\r\n        const factory = VexFlowTests.makeFactory(options, 650, 200);\r\n        const stave = factory.Stave();\r\n        const score = factory.EasyScore();\r\n        const voice = score.voice(score.notes(noteGroup));\r\n        setupVibratoBracket(factory, voice.getTickables());\r\n        factory.Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n        factory.draw();\r\n        ok(true);\r\n    };\r\n}\r\nconst simple = createTest('c4/4, c4, c4, c4', (factory, notes) => {\r\n    factory.VibratoBracket({\r\n        from: notes[0],\r\n        to: notes[3],\r\n        options: { line: 2 },\r\n    });\r\n});\r\nconst withoutEndNote = createTest('c4/4, c4, c4, c4', (factory, notes) => {\r\n    factory.VibratoBracket({\r\n        from: notes[2],\r\n        to: null,\r\n        options: { line: 2, harsh: true },\r\n    });\r\n});\r\nconst withoutStartNote = createTest('c4/4, c4, c4, c4', (factory, notes) => {\r\n    factory.VibratoBracket({\r\n        from: null,\r\n        to: notes[2],\r\n        options: { line: 2, harsh: true },\r\n    });\r\n});\r\nVexFlowTests.register(VibratoBracketTests);\r\nexport { VibratoBracketTests };\r\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// Voice Tests\r\nimport { VexFlowTests } from './vexflow_test_helpers';\r\nimport { Flow } from '../src/flow';\r\nimport { Formatter } from '../src/formatter';\r\nimport { Stave } from '../src/stave';\r\nimport { Barline } from '../src/stavebarline';\r\nimport { StaveNote } from '../src/stavenote';\r\nimport { Voice } from '../src/voice';\r\nimport { MockTickable } from './mocks';\r\nconst VoiceTests = {\r\n    Start() {\r\n        QUnit.module('Voice');\r\n        test('Strict Test', strict);\r\n        test('Ignore Test', ignore);\r\n        VexFlowTests.runTests('Full Voice Mode Test', full);\r\n    },\r\n};\r\nconst BEAT = (1 * Flow.RESOLUTION) / 4;\r\n// Helper function to create a tickable with a preset number of ticks.\r\nconst createTickable = () => new MockTickable().setTicks(BEAT);\r\nfunction strict() {\r\n    expect(8);\r\n    const tickables = [createTickable(), createTickable(), createTickable()];\r\n    const voice = new Voice(Flow.TIME4_4);\r\n    equal(voice.getTotalTicks().value(), BEAT * 4, '4/4 Voice has 4 beats');\r\n    equal(voice.getTicksUsed().value(), BEAT * 0, 'No beats in voice');\r\n    voice.addTickables(tickables);\r\n    equal(voice.getTicksUsed().value(), BEAT * 3, 'Three beats in voice');\r\n    voice.addTickable(createTickable());\r\n    equal(voice.getTicksUsed().value(), BEAT * 4, 'Four beats in voice');\r\n    equal(voice.isComplete(), true, 'Voice is complete');\r\n    const numeratorBeforeException = voice.getTicksUsed().numerator;\r\n    throws(() => voice.addTickable(createTickable()), /BadArgument/, '\"Too many ticks\" exception');\r\n    // Verify that adding too many ticks does not affect the `ticksUsed` property of the voice.\r\n    // See voice.ts: this.ticksUsed.subtract(ticks);\r\n    equal(voice.getTicksUsed().numerator, numeratorBeforeException, 'Revert `ticksUsed` after a \"Too many ticks\" exception');\r\n    equal(voice.getSmallestTickCount().value(), BEAT, 'Smallest tick count is BEAT');\r\n}\r\nfunction ignore() {\r\n    const tickables = [\r\n        createTickable(),\r\n        createTickable(),\r\n        createTickable().setIgnoreTicks(true),\r\n        createTickable(),\r\n        createTickable().setIgnoreTicks(true),\r\n        createTickable(),\r\n    ];\r\n    const voice = new Voice(Flow.TIME4_4);\r\n    voice.addTickables(tickables);\r\n    ok(true, 'all pass');\r\n}\r\nfunction full(options, contextBuilder) {\r\n    const ctx = contextBuilder(options.elementId, 550, 200);\r\n    const stave = new Stave(10, 50, 500).addClef('treble').addTimeSignature('4/4').setEndBarType(Barline.type.END);\r\n    const notes = [\r\n        new StaveNote({ keys: ['c/4'], duration: '4' }),\r\n        new StaveNote({ keys: ['d/4'], duration: '4' }),\r\n        new StaveNote({ keys: ['r/4'], duration: '4r' }),\r\n    ];\r\n    notes.forEach((note) => note.setStave(stave));\r\n    const voice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.FULL).addTickables(notes);\r\n    new Formatter().joinVoices([voice]).formatToStave([voice], stave);\r\n    stave.setContext(ctx).draw();\r\n    voice.draw(ctx);\r\n    const bb = voice.getBoundingBox();\r\n    if (bb) {\r\n        ctx.rect(bb.getX(), bb.getY(), bb.getW(), bb.getH());\r\n    }\r\n    ctx.stroke();\r\n    throws(() => voice.addTickable(new StaveNote({ keys: ['c/4'], duration: '2' })), /BadArgument/, 'Voice cannot exceed full amount of ticks');\r\n}\r\nVexFlowTests.register(VoiceTests);\r\nexport { VoiceTests };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// MIT License\r\n//\r\n// vexflow-debug-with-tests.ts is the entry point for the build output file vexflow-debug-with-tests.js.\r\n// It statically bundles all the music engraving fonts, and also includes the tests from vexflow/tests/.\r\n// The output file is used by flow.html & flow-headless-browser.html to run the tests.\r\nimport * as VexSrc from '../src/index';\r\nimport * as VexTests from '../tests/index';\r\nimport { Flow } from '../src/flow';\r\nimport { loadAllMusicFonts } from '../src/fonts/load_all';\r\nimport { loadTextFonts } from '../src/fonts/textfonts';\r\nloadAllMusicFonts();\r\nFlow.setMusicFont('Bravura', 'Gonville', 'Custom');\r\nloadTextFonts();\r\n// Re-export all exports from src/index.ts and tests/index.ts.\r\nexport * from '../src/index';\r\nexport * from '../tests/index';\r\n// Also collect all exports into a default export for CJS projects.\r\nexport default Object.assign(Object.assign({}, VexSrc), VexTests);\r\n"],"names":[],"sourceRoot":""}