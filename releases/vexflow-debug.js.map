{"version":3,"sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/webpack/bootstrap","webpack://Vex/./src/accidental.js","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/boundingboxcomputation.ts","webpack://Vex/./src/canvascontext.js","webpack://Vex/./src/chordsymbol.js","webpack://Vex/./src/clef.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/common.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/factory.js","webpack://Vex/./src/font.ts","webpack://Vex/./src/fonts/bravura_glyphs.ts","webpack://Vex/./src/fonts/bravura_metrics.ts","webpack://Vex/./src/fonts/custom_glyphs.ts","webpack://Vex/./src/fonts/custom_metrics.ts","webpack://Vex/./src/fonts/gonville_glyphs.ts","webpack://Vex/./src/fonts/gonville_metrics.ts","webpack://Vex/./src/fonts/leland_glyphs.js","webpack://Vex/./src/fonts/leland_metrics.js","webpack://Vex/./src/fonts/petaluma_glyphs.ts","webpack://Vex/./src/fonts/petaluma_metrics.ts","webpack://Vex/./src/fonts/petalumascript_textmetrics.ts","webpack://Vex/./src/fonts/robotoslab_textmetrics.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/glyph.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/index.js","webpack://Vex/./src/keymanager.js","webpack://Vex/./src/keysignature.js","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/multimeasurerest.js","webpack://Vex/./src/music.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/notesubgroup.js","webpack://Vex/./src/ornament.js","webpack://Vex/./src/parser.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/raphaelcontext.js","webpack://Vex/./src/registry.ts","webpack://Vex/./src/renderer.js","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/stavehairpin.js","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/svgcontext.js","webpack://Vex/./src/system.js","webpack://Vex/./src/tables.js","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/textfont.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/timesigglyph.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/vex.js","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/widthformatter.js"],"names":[],"mappings":"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","file":"vexflow-debug.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\n//\n// ## Description\n//\n// This file implements accidentals as modifiers that can be attached to\n// notes. Support is included for both western and microtonal accidentals.\n//\n// See `tests/accidental_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Fraction } from './fraction';\nimport { Flow } from './tables';\nimport { Music } from './music';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`.\nfunction L(...args) {\n  if (Accidental.DEBUG) Vex.L('Vex.Flow.Accidental', args);\n}\n\nconst getGlyphWidth = (glyph) => glyph.getMetrics().width;\n\n// An `Accidental` inherits from `Modifier`, and is formatted within a\n// `ModifierContext`.\nexport class Accidental extends Modifier {\n  static get CATEGORY() {\n    return 'accidentals';\n  }\n\n  // Arrange accidentals inside a ModifierContext.\n  static format(accidentals, state) {\n    const noteheadAccidentalPadding = 1;\n    const leftShift = state.left_shift + noteheadAccidentalPadding;\n    const accidentalSpacing = 3;\n\n    // If there are no accidentals, we needn't format their positions\n    if (!accidentals || accidentals.length === 0) return;\n\n    const accList = [];\n    let prevNote = null;\n    let shiftL = 0;\n\n    // First determine the accidentals' Y positions from the note.keys\n    for (let i = 0; i < accidentals.length; ++i) {\n      const acc = accidentals[i];\n      const note = acc.getNote();\n      const stave = note.getStave();\n      const props = note.getKeyProps()[acc.getIndex()];\n      if (note !== prevNote) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prevNote = note;\n      }\n      if (stave) {\n        const lineSpace = stave.options.spacing_between_lines_px;\n        const y = stave.getYForLine(props.line);\n        const accLine = Math.round((y / lineSpace) * 2) / 2;\n        accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n      } else {\n        accList.push({ line: props.line, shift: shiftL, acc });\n      }\n    }\n\n    // Sort accidentals by line number.\n    accList.sort((a, b) => b.line - a.line);\n\n    // FIXME: Confusing name. Each object in this array has a property called `line`.\n    // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n    const lineList = [];\n\n    // amount by which all accidentals must be shifted right or left for\n    // stem flipping, notehead shifting concerns.\n    let accShift = 0;\n    let previousLine = null;\n\n    // Create an array of unique line numbers (lineList) from accList\n    for (let i = 0; i < accList.length; i++) {\n      const acc = accList[i];\n\n      // if this is the first line, or a new line, add a lineList\n      if (previousLine === null || previousLine !== acc.line) {\n        lineList.push({\n          line: acc.line,\n          flatLine: true,\n          dblSharpLine: true,\n          numAcc: 0,\n          width: 0,\n        });\n      }\n      // if this accidental is not a flat, the accidental needs 3.0 lines lower\n      // clearance instead of 2.5 lines for b or bb.\n      // FIXME: Naming could use work. acc.acc is very awkward\n      if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n        lineList[lineList.length - 1].flatLine = false;\n      }\n\n      // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n      if (acc.acc.type !== '##') {\n        lineList[lineList.length - 1].dblSharpLine = false;\n      }\n\n      // Track how many accidentals are on this line:\n      lineList[lineList.length - 1].numAcc++;\n\n      // Track the total x_offset needed for this line which will be needed\n      // for formatting lines w/ multiple accidentals:\n\n      // width = accidental width + universal spacing between accidentals\n      lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n\n      // if this accShift is larger, use it to keep first column accidentals in the same line\n      accShift = acc.shift > accShift ? acc.shift : accShift;\n\n      previousLine = acc.line;\n    }\n\n    // ### Place Accidentals in Columns\n    //\n    // Default to a classic triangular layout (middle accidental farthest left),\n    // but follow exceptions as outlined in G. Read's _Music Notation_ and\n    // Elaine Gould's _Behind Bars_.\n    //\n    // Additionally, this implements different vertical collision rules for\n    // flats (only need 2.5 lines clearance below) and double sharps (only\n    // need 2.5 lines of clearance above or below).\n    //\n    // Classic layouts and exception patterns are found in the 'tables.js'\n    // in 'Vex.Flow.accidentalColumnsTable'\n    //\n    // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n    // using as few columns as possible for the verticle structure.\n    //\n    // TODO (?): Allow column to be specified for an accidental at run-time?\n\n    let totalColumns = 0;\n\n    // establish the boundaries for a group of notes with clashing accidentals:\n    for (let i = 0; i < lineList.length; i++) {\n      let noFurtherConflicts = false;\n      const groupStart = i;\n      let groupEnd = i;\n\n      while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n        // if this note conflicts with the next:\n        if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n          // include the next note in the group:\n          groupEnd++;\n        } else {\n          noFurtherConflicts = true;\n        }\n      }\n\n      // Gets an a line from the `lineList`, relative to the current group\n      const getGroupLine = (index) => lineList[groupStart + index];\n      const getGroupLines = (indexes) => indexes.map(getGroupLine);\n      const lineDifference = (indexA, indexB) => {\n        const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n        return a - b;\n      };\n\n      const notColliding = (...indexPairs) =>\n        indexPairs.map(getGroupLines).every((lines) => !this.checkCollision(...lines));\n\n      // Set columns for the lines in this group:\n      const groupLength = groupEnd - groupStart + 1;\n\n      // Set the accidental column for each line of the group\n      let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n\n      switch (groupLength) {\n        case 3:\n          if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n            endCase = 'second_on_bottom';\n          }\n          break;\n        case 4:\n          if (notColliding([0, 2], [1, 3])) {\n            endCase = 'spaced_out_tetrachord';\n          }\n          break;\n        case 5:\n          if (endCase === 'b' && notColliding([1, 3])) {\n            endCase = 'spaced_out_pentachord';\n            if (notColliding([0, 2], [2, 4])) {\n              endCase = 'very_spaced_out_pentachord';\n            }\n          }\n          break;\n        case 6:\n          if (notColliding([0, 3], [1, 4], [2, 5])) {\n            endCase = 'spaced_out_hexachord';\n          }\n          if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n            endCase = 'very_spaced_out_hexachord';\n          }\n          break;\n        default:\n          break;\n      }\n\n      let groupMember;\n      let column;\n      // If the group contains more than seven members, use ascending parallel lines\n      // of accidentals, using as few columns as possible while avoiding collisions.\n      if (groupLength >= 7) {\n        // First, determine how many columns to use:\n        let patternLength = 2;\n        let collisionDetected = true;\n        while (collisionDetected === true) {\n          collisionDetected = false;\n          for (let line = 0; line + patternLength < lineList.length; line++) {\n            if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n              collisionDetected = true;\n              patternLength++;\n              break;\n            }\n          }\n        }\n        // Then, assign a column to each line of accidentals\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = ((groupMember - i) % patternLength) + 1;\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n\n        // Otherwise, if the group contains fewer than seven members, use the layouts from\n        // the accidentalsColumnsTable housed in tables.js.\n      } else {\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = Flow.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n      }\n\n      // Increment i to the last note that was set, so that if a lower set of notes\n      // does not conflict at all with this group, it can have its own classic shape.\n      i = groupEnd;\n    }\n\n    // ### Convert Columns to x_offsets\n    //\n    // This keeps columns aligned, even if they have different accidentals within them\n    // which sometimes results in a larger x_offset than is an accidental might need\n    // to preserve the symmetry of the accidental shape.\n    //\n    // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n    // music with complex chord clusters.\n    //\n    // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n    // parallel columns.\n\n    // track each column's max width, which will be used as initial shift of later columns:\n    const columnWidths = [];\n    const columnXOffsets = [];\n    for (let i = 0; i <= totalColumns; i++) {\n      columnWidths[i] = 0;\n      columnXOffsets[i] = 0;\n    }\n\n    columnWidths[0] = accShift + leftShift;\n    columnXOffsets[0] = accShift + leftShift;\n\n    // Fill columnWidths with widest needed x-space;\n    // this is what keeps the columns parallel.\n    lineList.forEach((line) => {\n      if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;\n    });\n\n    for (let i = 1; i < columnWidths.length; i++) {\n      // this column's offset = this column's width + previous column's offset\n      columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n    }\n\n    const totalShift = columnXOffsets[columnXOffsets.length - 1];\n    // Set the xShift for each accidental according to column offsets:\n    let accCount = 0;\n    lineList.forEach((line) => {\n      let lineWidth = 0;\n      const lastAccOnLine = accCount + line.numAcc;\n      // handle all of the accidentals on a given line:\n      for (accCount; accCount < lastAccOnLine; accCount++) {\n        const xShift = columnXOffsets[line.column - 1] + lineWidth;\n        accList[accCount].acc.setXShift(xShift);\n        // keep track of the width of accidentals we've added so far, so that when\n        // we loop, we add space for them.\n        lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n        L('Line, accCount, shift: ', line.line, accCount, xShift);\n      }\n    });\n\n    // update the overall layout with the full width of the accidental shapes:\n    state.left_shift += totalShift;\n  }\n\n  // Helper function to determine whether two lines of accidentals collide vertically\n  static checkCollision(line1, line2) {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) {\n      // then line 2 is on top\n      clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n      if (line1.dblSharpLine) clearance -= 0.5;\n    } else {\n      // line 1 is on top\n      clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n      if (line2.dblSharpLine) clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n  }\n\n  // Use this method to automatically apply accidentals to a set of `voices`.\n  // The accidentals will be remembered between all the voices provided.\n  // Optionally, you can also provide an initial `keySignature`.\n  static applyAccidentals(voices, keySignature) {\n    const tickPositions = [];\n    const tickNoteMap = {};\n\n    // Sort the tickables in each voice by their tick position in the voice\n    voices.forEach((voice) => {\n      const tickPosition = new Fraction(0, 1);\n      const notes = voice.getTickables();\n      notes.forEach((note) => {\n        if (note.shouldIgnoreTicks()) return;\n\n        const notesAtPosition = tickNoteMap[tickPosition.value()];\n\n        if (!notesAtPosition) {\n          tickPositions.push(tickPosition.value());\n          tickNoteMap[tickPosition.value()] = [note];\n        } else {\n          notesAtPosition.push(note);\n        }\n\n        tickPosition.add(note.getTicks());\n      });\n    });\n\n    const music = new Music();\n\n    // Default key signature is C major\n    if (!keySignature) keySignature = 'C';\n\n    // Get the scale map, which represents the current state of each pitch\n    const scaleMap = music.createScaleMap(keySignature);\n\n    tickPositions.forEach((tick) => {\n      const notes = tickNoteMap[tick];\n\n      // Array to store all pitches that modified accidental states\n      // at this tick position\n      const modifiedPitches = [];\n\n      const processNote = (note) => {\n        if (note.isRest() || note.shouldIgnoreTicks()) return;\n\n        // Go through each key and determine if an accidental should be\n        // applied\n        note.keys.forEach((keyString, keyIndex) => {\n          const key = music.getNoteParts(keyString.split('/')[0]);\n\n          // Force a natural for every key without an accidental\n          const accidentalString = key.accidental || 'n';\n          const pitch = key.root + accidentalString;\n\n          // Determine if the current pitch has the same accidental\n          // as the scale state\n          const sameAccidental = scaleMap[key.root] === pitch;\n\n          // Determine if an identical pitch in the chord already\n          // modified the accidental state\n          const previouslyModified = modifiedPitches.indexOf(pitch) > -1;\n\n          // Add the accidental to the StaveNote\n          if (!sameAccidental || (sameAccidental && previouslyModified)) {\n            // Modify the scale map so that the root pitch has an\n            // updated state\n            scaleMap[key.root] = pitch;\n\n            // Create the accidental\n            const accidental = new Accidental(accidentalString);\n\n            // Attach the accidental to the StaveNote\n            note.addAccidental(keyIndex, accidental);\n\n            // Add the pitch to list of pitches that modified accidentals\n            modifiedPitches.push(pitch);\n          }\n        });\n\n        // process grace notes\n        note.getModifiers().forEach((modifier) => {\n          if (modifier.getCategory() === 'gracenotegroups') {\n            modifier.getGraceNotes().forEach(processNote);\n          }\n        });\n      };\n\n      notes.forEach(processNote);\n    });\n  }\n\n  // Create accidental. `type` can be a value from the\n  // `Vex.Flow.accidentalCodes.accidentals` table in `tables.js`. For\n  // example: `#`, `##`, `b`, `n`, etc.\n  constructor(type = null) {\n    super();\n    this.setAttribute('type', 'Accidental');\n\n    L('New accidental: ', type);\n\n    this.note = null;\n    // The `index` points to a specific note in a chord.\n    this.index = null;\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      // Font size for glyphs\n      font_scale: 38,\n\n      // Length of stroke across heads above or below the stave.\n      stroke_px: 3,\n\n      // Padding between accidental and parentheses on each side\n      parenLeftPadding: 2,\n      parenRightPadding: 2,\n    };\n\n    this.accidental = Flow.accidentalCodes(this.type);\n    if (!this.accidental) {\n      throw new Vex.RERR('ArgumentError', `Unknown accidental type: ${type}`);\n    }\n\n    // Cautionary accidentals have parentheses around them\n    this.cautionary = false;\n    this.parenLeft = null;\n    this.parenRight = null;\n\n    this.reset();\n  }\n\n  reset() {\n    const fontScale = this.render_options.font_scale;\n    this.glyph = new Glyph(this.accidental.code, fontScale);\n    this.glyph.setOriginX(1.0);\n\n    if (this.cautionary) {\n      this.parenLeft = new Glyph(Flow.accidentalCodes('{').code, fontScale);\n      this.parenRight = new Glyph(Flow.accidentalCodes('}').code, fontScale);\n      this.parenLeft.setOriginX(1.0);\n      this.parenRight.setOriginX(1.0);\n    }\n  }\n\n  getCategory() {\n    return Accidental.CATEGORY;\n  }\n\n  getWidth() {\n    const parenWidth = this.cautionary\n      ? getGlyphWidth(this.parenLeft) +\n        getGlyphWidth(this.parenRight) +\n        this.render_options.parenLeftPadding +\n        this.render_options.parenRightPadding\n      : 0;\n\n    return getGlyphWidth(this.glyph) + parenWidth;\n  }\n\n  // Attach this accidental to `note`, which must be a `StaveNote`.\n  setNote(note) {\n    if (!note) {\n      throw new Vex.RERR('ArgumentError', `Bad note value: ${note}`);\n    }\n\n    this.note = note;\n\n    // Accidentals attached to grace notes are rendered smaller.\n    if (this.note.getCategory() === 'gracenotes') {\n      this.render_options.font_scale = 25;\n      this.reset();\n    }\n  }\n\n  // If called, draws parenthesis around accidental.\n  setAsCautionary() {\n    this.cautionary = true;\n    this.render_options.font_scale = 28;\n    this.reset();\n    return this;\n  }\n\n  // Render accidental onto canvas.\n  draw() {\n    const {\n      context,\n      type,\n      position,\n      note,\n      index,\n      cautionary,\n      x_shift,\n      y_shift,\n      glyph,\n      parenLeft,\n      parenRight,\n      render_options: { parenLeftPadding, parenRightPadding },\n    } = this;\n\n    this.checkContext();\n\n    if (!(note && index != null)) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw accidental without a note and index.\");\n    }\n\n    // Figure out the start `x` and `y` coordinates for note and index.\n    const start = note.getModifierStartXY(position, index);\n    let accX = start.x + x_shift;\n    const accY = start.y + y_shift;\n    L('Rendering: ', type, accX, accY);\n\n    if (!cautionary) {\n      glyph.render(context, accX, accY);\n    } else {\n      // Render the accidental in parentheses.\n      parenRight.render(context, accX, accY);\n      accX -= getGlyphWidth(parenRight);\n      accX -= parenRightPadding;\n      accX -= this.accidental.parenRightPaddingAdjustment;\n      glyph.render(context, accX, accY);\n      accX -= getGlyphWidth(glyph);\n      accX -= parenLeftPadding;\n      parenLeft.render(context, accX, accY);\n    }\n\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements text annotations as modifiers that can be attached to\n// notes.\n//\n// See `tests/annotation_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { TextFont } from './textfont';\nimport { FontInfo } from './types/common';\nimport { StemmableNote } from './stemmablenote';\nimport { ModifierContextState } from './modifiercontext';\n\n// To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any []) {\n  if (Annotation.DEBUG) Vex.L('Vex.Flow.Annotation', args);\n}\n\nenum Justify {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n  CENTER_STEM = 4,\n}\n\nenum VerticalJustify {\n  TOP = 1,\n  CENTER = 2,\n  BOTTOM = 3,\n  CENTER_STEM = 4,\n}\nexport class Annotation extends Modifier {\n  static DEBUG: boolean;\n\n  note?: StemmableNote;\n\n  protected justification: Justify;\n  protected vert_justification: VerticalJustify;\n  protected text: string;\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'annotations';\n  }\n\n  // Text annotations can be positioned and justified relative to the note.\n  static Justify = Justify;\n\n  static JustifyString: Record<string, number> = {\n    left: Annotation.Justify.LEFT,\n    right: Annotation.Justify.RIGHT,\n    center: Annotation.Justify.CENTER,\n    centerStem: Annotation.Justify.CENTER_STEM,\n  };\n\n  static VerticalJustify = VerticalJustify;\n\n  static VerticalJustifyString: Record<string, number> = {\n    above: Annotation.VerticalJustify.TOP,\n    top: Annotation.VerticalJustify.TOP,\n    below: Annotation.VerticalJustify.BOTTOM,\n    bottom: Annotation.VerticalJustify.BOTTOM,\n    center: Annotation.VerticalJustify.CENTER,\n    centerStem: Annotation.VerticalJustify.CENTER_STEM,\n  };\n\n  // Arrange annotations within a `ModifierContext`\n  static format(annotations: Annotation[], state: ModifierContextState): boolean {\n    if (!annotations || annotations.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < annotations.length; ++i) {\n      let testWidth = 0;\n      const annotation = annotations[i];\n      const textFont = TextFont.getTextFontFromVexFontData({\n        family: annotation.font.family,\n        size: annotation.font.size,\n        weight: 'normal',\n      });\n      // Calculate if the vertical extent will exceed a single line and adjust accordingly.\n      const numLines = Math.floor(textFont.maxHeight / Flow.STAVE_LINE_DISTANCE) + 1;\n      // Get the string width from the font metrics\n      testWidth = textFont.getWidthForString(annotation.text);\n      width = Math.max(width, testWidth);\n      if (annotation.getPosition() === Modifier.Position.ABOVE) {\n        annotation.setTextLine(state.top_text_line);\n        state.top_text_line += numLines;\n      } else {\n        annotation.setTextLine(state.text_line);\n        state.text_line += numLines;\n      }\n    }\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  // ## Prototype Methods\n  //\n  // Annotations inherit from `Modifier` and is positioned correctly when\n  // in a `ModifierContext`.\n  // Create a new `Annotation` with the string `text`.\n  constructor(text: string) {\n    super();\n    this.setAttribute('type', 'Annotation');\n\n    this.text = text;\n    this.justification = Annotation.Justify.CENTER;\n    this.vert_justification = Annotation.VerticalJustify.TOP;\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    // The default width is calculated from the text.\n    this.setWidth(Flow.textWidth(text));\n  }\n\n  getCategory(): string {\n    return Annotation.CATEGORY;\n  }\n\n  // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n  setFont(family: string, size: number, weight: string): this {\n    this.font = { family, size, weight };\n    return this;\n  }\n\n  // Set vertical position of text (above or below stave). `just` must be\n  // a value in `Annotation.VerticalJustify`.\n  setVerticalJustification(just: string | VerticalJustify): this {\n    this.vert_justification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n    return this;\n  }\n\n  // Get and set horizontal justification. `justification` is a value in\n  // `Annotation.Justify`.\n  getJustification(): Justify {\n    return this.justification;\n  }\n  setJustification(just: string | Justify): this {\n    this.justification = typeof just === 'string' ? Annotation.JustifyString[just] : just;\n    return this;\n  }\n\n  // Render text beside the note.\n  draw(): void {\n    const ctx = this.checkContext();\n\n    if (!this.note) {\n      throw new Vex.RERR('NoNoteForAnnotation', \"Can't draw text annotation without an attached note.\");\n    }\n\n    this.setRendered();\n    const start = this.note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n\n    // We're changing context parameters. Save current state.\n    ctx.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText(this.text).width;\n\n    // Estimate text height to be the same as the width of an 'm'.\n    //\n    // This is a hack to work around the inability to measure text height\n    // in HTML5 Canvas (and SVG).\n    const text_height = ctx.measureText('m').width;\n    let x;\n    let y;\n\n    if (this.justification === Annotation.Justify.LEFT) {\n      x = start.x;\n    } else if (this.justification === Annotation.Justify.RIGHT) {\n      x = start.x - text_width;\n    } else if (this.justification === Annotation.Justify.CENTER) {\n      x = start.x - text_width / 2;\n    } /* CENTER_STEM */ else {\n      x = this.note.getStemX() - text_width / 2;\n    }\n\n    let stem_ext: Record<string, number> = {};\n    let spacing = 0;\n    const has_stem = this.note.hasStem();\n    const stave = this.note.checkStave();\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    if (has_stem) {\n      stem_ext = this.note.checkStem().getExtents();\n      spacing = stave.getSpacingBetweenLines();\n    }\n\n    if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin\n      // is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n      if (has_stem) {\n        const stem_base = this.note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {\n      const yt = this.note.getYForTopText(this.text_line) - 1;\n      const yb = stave.getYForBottomText(this.text_line);\n      y = yt + (yb - yt) / 2 + text_height / 2;\n    } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {\n      y = Math.min(stave.getYForTopText(this.text_line), this.note.getYs()[0] - 10);\n      if (has_stem) {\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    } /* CENTER_STEM */ else {\n      const extents = this.note.getStemExtents();\n      y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\n    }\n\n    L('Rendering annotation: ', this.text, x, y);\n    ctx.fillText(this.text, x, y);\n    ctx.closeGroup();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n//\n// ## Description\n//\n// This file implements articulations and accents as modifiers that can be\n// attached to notes. The complete list of articulations is available in\n// `tables.js` under `Vex.Flow.articulationCodes`.\n//\n// See `tests/articulation_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { ModifierContextState } from './modifiercontext';\nimport { check } from './common';\nimport { Builder } from './easyscore';\nimport { TabNote } from './tabnote';\n\nexport interface ArticulationStruct {\n  code: string;\n  aboveCode: string;\n  belowCode: string;\n  between_lines: boolean;\n}\n\n// To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (Articulation.DEBUG) Vex.L('Vex.Flow.Articulation', args);\n}\n\nconst { ABOVE, BELOW } = Modifier.Position;\n\nfunction roundToNearestHalf(mathFn: (a: number) => number, value: number): number {\n  return mathFn(value / 0.5) * 0.5;\n}\n\n// This includes both staff and ledger lines\nfunction isWithinLines(line: number, position: number): boolean {\n  return position === ABOVE ? line <= 5 : line >= 1;\n}\n\nfunction getRoundingFunction(line: number, position: number): (a: number) => number {\n  if (isWithinLines(line, position)) {\n    if (position === ABOVE) {\n      return Math.ceil;\n    } else {\n      return Math.floor;\n    }\n  } else {\n    return Math.round;\n  }\n}\n\nfunction snapLineToStaff(canSitBetweenLines: boolean, line: number, position: number, offsetDirection: number): number {\n  // Initially, snap to nearest staff line or space\n  const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n  const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n  const onStaffLine = snappedLine % 1 === 0;\n\n  if (canSnapToStaffSpace && onStaffLine) {\n    const HALF_STAFF_SPACE = 0.5;\n    return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n  } else {\n    return snappedLine;\n  }\n}\n\nfunction isStaveNote(note: Note): boolean {\n  const noteCategory = note.getCategory();\n  return noteCategory === 'stavenotes' || noteCategory === 'gracenotes';\n}\n\nfunction getTopY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return stemBaseY;\n      }\n    } else {\n      return Math.min(...note.getYs());\n    }\n  } else if (note.getCategory() === 'tabnotes') {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return note.checkStave().getYForTopText(textLine);\n      }\n    } else {\n      return note.checkStave().getYForTopText(textLine);\n    }\n  } else {\n    throw new Vex.RERR('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\nfunction getBottomY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemBaseY;\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return Math.max(...note.getYs());\n    }\n  } else if (note.getCategory() === 'tabnotes') {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return note.checkStave().getYForBottomText(textLine);\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return note.checkStave().getYForBottomText(textLine);\n    }\n  } else {\n    throw new Vex.RERR('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\n// Gets the initial offset of the articulation from the y value of the starting position.\n// This is required because the top/bottom text positions already have spacing applied to\n// provide a \"visually pleasent\" default position. However the y values provided from\n// the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n// normalizes this asymmetry.\nfunction getInitialOffset(note: Note, position: number): number {\n  const isOnStemTip =\n    (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n    (position === BELOW && note.getStemDirection() === Stem.DOWN);\n\n  if (isStaveNote(note)) {\n    if (note.hasStem() && isOnStemTip) {\n      return 0.5;\n    } else {\n      // this amount is larger than the stem-tip offset because we start from\n      // the center of the notehead\n      return 1;\n    }\n  } else {\n    if (note.hasStem() && isOnStemTip) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}\n\nexport class Articulation extends Modifier {\n  note?: Note;\n  readonly type: string;\n  static readonly INITIAL_OFFSET: number = -0.5;\n\n  protected render_options: { font_scale: number };\n  protected articulation?: ArticulationStruct;\n  // glyph defined calling reset in constructor\n  // eslint-disable-next-line\n  protected glyph!: Glyph;\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'articulations';\n  }\n\n  // FIXME:\n  // Most of the complex formatting logic (ie: snapping to space) is\n  // actually done in .render(). But that logic belongs in this method.\n  //\n  // Unfortunately, this isn't possible because, by this point, stem lengths\n  // have not yet been finalized. Finalized stem lengths are required to determine the\n  // initial position of any stem-side articulation.\n  //\n  // This indicates that all objects should have their stave set before being\n  // formatted. It can't be an optional if you want accurate vertical positioning.\n  // Consistently positioned articulations that play nice with other modifiers\n  // won't be possible until we stop relying on render-time formatting.\n  //\n  // Ideally, when this function has completed, the vertical articulation positions\n  // should be ready to render without further adjustment. But the current state\n  // is far from this ideal.\n  static format(articulations: Articulation[], state: ModifierContextState): boolean {\n    if (!articulations || articulations.length === 0) return false;\n\n    const isAbove = (artic: Articulation) => artic.getPosition() === ABOVE;\n    const isBelow = (artic: Articulation) => artic.getPosition() === BELOW;\n    const margin = 0.5;\n    const getIncrement = (articulation: Articulation, line: number, position: number) =>\n      roundToNearestHalf(\n        getRoundingFunction(line, position),\n        check<number>(articulation.glyph.getMetrics().height) / 10 + margin\n      );\n\n    articulations.filter(isAbove).forEach((articulation) => {\n      articulation.setTextLine(state.top_text_line);\n      state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);\n    });\n\n    articulations.filter(isBelow).forEach((articulation) => {\n      articulation.setTextLine(state.text_line);\n      state.text_line += getIncrement(articulation, state.text_line, BELOW);\n    });\n\n    const width = articulations\n      .map((articulation) => articulation.getWidth())\n      .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  static easyScoreHook({ articulations }: { articulations: string }, note: StaveNote, builder: Builder): void {\n    if (!articulations) return;\n\n    const articNameToCode: Record<string, string> = {\n      staccato: 'a.',\n      tenuto: 'a-',\n      accent: 'a>',\n    };\n\n    articulations\n      .split(',')\n      .map((articString) => articString.trim().split('.'))\n      .map(([name, position]) => {\n        const artic: { type: string; position?: number } = { type: articNameToCode[name] };\n        if (position) artic.position = Modifier.PositionString[position];\n        return builder.getFactory().Articulation(artic);\n      })\n      .map((artic) => note.addModifier(artic, 0));\n  }\n\n  // Create a new articulation of type `type`, which is an entry in\n  // `Vex.Flow.articulationCodes` in `tables.js`.\n  constructor(type: string) {\n    super();\n    this.setAttribute('type', 'Articulation');\n\n    this.type = type;\n    this.position = BELOW;\n    this.render_options = {\n      font_scale: 38,\n    };\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.articulation = Flow.articulationCodes(this.type);\n    if (!this.articulation) {\n      throw new Vex.RERR('ArgumentError', `Articulation not found: ${this.type}`);\n    }\n\n    const code =\n      (this.position === ABOVE ? this.articulation.aboveCode : this.articulation.belowCode) || this.articulation.code;\n    this.glyph = new Glyph(code, this.render_options.font_scale);\n\n    this.setWidth(check<number>(this.glyph.getMetrics().width));\n  }\n\n  getCategory(): string {\n    return Articulation.CATEGORY;\n  }\n\n  // Render articulation in position next to note.\n  draw(): void {\n    const { note, index, position, glyph, text_line: textLine } = this;\n    const canSitBetweenLines = this.articulation?.between_lines ?? false;\n\n    const ctx = this.checkContext();\n\n    if (!note || index == null) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Articulation without a note and index.\");\n    }\n\n    this.setRendered();\n\n    const stave = note.checkStave();\n    const staffSpace = stave.getSpacingBetweenLines();\n    const isTab = note.getCategory() === 'tabnotes';\n\n    // Articulations are centered over/under the note head.\n    const { x } = note.getModifierStartXY(position, index);\n    const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n\n    const initialOffset = getInitialOffset(note, position);\n\n    const padding = this.musicFont.lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);\n\n    let y = (\n      {\n        [ABOVE]: () => {\n          glyph.setOrigin(0.5, 1);\n          const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n        [BELOW]: () => {\n          glyph.setOrigin(0.5, 0);\n          const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n      } as Record<number, () => number>\n    )[position]();\n\n    if (!isTab) {\n      const offsetDirection = position === ABOVE ? -1 : +1;\n      const noteLine = isTab\n        ? (note as TabNote).getPositions()[index].str\n        : (note as StaveNote).getKeyProps()[index].line;\n      const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n      const articLine = distanceFromNote + Number(noteLine);\n      const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n\n      if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);\n\n      y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;\n    }\n\n    L(`Rendering articulation at (x: ${x}, y: ${y})`);\n\n    glyph.render(ctx, x, y);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// A `BarNote` is used to render bar lines (from `barline.js`). `BarNote`s can\n// be added to a voice and rendered in the middle of a stave. Since it has no\n// duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n//\n// See `tests/barnote_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\n\n// To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (BarNote.DEBUG) Vex.L('Vex.Flow.BarNote', args);\n}\n\nexport class BarNote extends Note {\n  protected metrics: { widths: Record<string, number> };\n  static DEBUG: boolean;\n  protected type!: BarlineType;\n\n  constructor(type = Barline.type.SINGLE) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'BarNote');\n\n    this.metrics = {\n      widths: {},\n    };\n\n    const TYPE = Barline.type;\n    this.metrics.widths = {\n      [TYPE.SINGLE]: 8,\n      [TYPE.DOUBLE]: 12,\n      [TYPE.END]: 15,\n      [TYPE.REPEAT_BEGIN]: 14,\n      [TYPE.REPEAT_END]: 14,\n      [TYPE.REPEAT_BOTH]: 18,\n      [TYPE.NONE]: 0,\n    };\n\n    // Tell the formatter that bar notes have no duration.\n    this.ignore_ticks = true;\n    this.setType(type);\n  }\n\n  // Get and set the type of Bar note. `type` must be one of `Vex.Flow.Barline.type`.\n  getType(): BarlineType {\n    return this.type;\n  }\n\n  setType(type: string | BarlineType): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    // Set width to width of relevant `Barline`.\n    this.setWidth(this.metrics.widths[this.type]);\n    return this;\n  }\n\n  addToModifierContext(): this {\n    /* overridden to ignore */\n    return this;\n  }\n\n  preFormat(): this {\n    /* overridden to ignore */\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Render note to stave.\n  draw(): void {\n    const ctx = this.checkContext();\n    L('Rendering bar line at: ', this.getAbsoluteX());\n    if (this.style) this.applyStyle(ctx);\n    const barline = new Barline(this.type);\n    barline.setX(this.getAbsoluteX());\n    barline.draw(this.checkStave());\n    if (this.style) this.restoreStyle(ctx);\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `Beams` that span over a set of `StemmableNotes`.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tuplet } from './tuplet';\nimport { Stem } from './stem';\nimport { Note } from './note';\nimport { StemmableNote } from './stemmablenote';\nimport { Voice } from './voice';\nimport { RenderContext } from './types/common';\n\nfunction calculateStemDirection(notes: StemmableNote[]) {\n  let lineSum = 0;\n  notes.forEach((note) => {\n    if (note.keyProps) {\n      note.keyProps.forEach((keyProp) => {\n        lineSum += keyProp.line - 3;\n      });\n    }\n  });\n\n  if (lineSum >= 0) {\n    return Stem.DOWN;\n  }\n  return Stem.UP;\n}\n\nconst getStemSlope = (firstNote: StemmableNote, lastNote: StemmableNote) => {\n  const firstStemTipY = firstNote.getStemExtents().topY;\n  const firstStemX = firstNote.getStemX();\n  const lastStemTipY = lastNote.getStemExtents().topY;\n  const lastStemX = lastNote.getStemX();\n  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n};\n\nconst BEAM_LEFT = 'L';\nconst BEAM_RIGHT = 'R';\nconst BEAM_BOTH = 'B';\n\nexport class Beam extends Element {\n  render_options: {\n    flat_beam_offset?: number;\n    flat_beams: boolean;\n    secondary_break_ticks?: number;\n    show_stemlets: boolean;\n    beam_width: number;\n    max_slope: number;\n    min_slope: number;\n    slope_iterations: number;\n    slope_cost: number;\n    stemlet_extension: number;\n    partial_beam_length: number;\n    min_flat_beam_offset: number;\n  };\n  notes: StemmableNote[];\n  postFormatted: boolean;\n  slope: number = 0;\n\n  private readonly stem_direction: number;\n  private readonly ticks: number;\n\n  private y_shift: number = 0;\n  private break_on_indices: number[];\n  private beam_count: number;\n  private unbeamable?: boolean;\n  // Gets the default beam groups for a provided time signature.\n  // Attempts to guess if the time signature is not found in table.\n  // Currently this is fairly naive.\n  static getDefaultBeamGroups(time_sig: string): Fraction[] {\n    if (!time_sig || time_sig === 'c') {\n      time_sig = '4/4';\n    }\n\n    const defaults: { [key: string]: [string] } = {\n      '1/2': ['1/2'],\n      '2/2': ['1/2'],\n      '3/2': ['1/2'],\n      '4/2': ['1/2'],\n\n      '1/4': ['1/4'],\n      '2/4': ['1/4'],\n      '3/4': ['1/4'],\n      '4/4': ['1/4'],\n\n      '1/8': ['1/8'],\n      '2/8': ['2/8'],\n      '3/8': ['3/8'],\n      '4/8': ['2/8'],\n\n      '1/16': ['1/16'],\n      '2/16': ['2/16'],\n      '3/16': ['3/16'],\n      '4/16': ['2/16'],\n    };\n\n    const groups: string[] = defaults[time_sig];\n\n    if (groups === undefined) {\n      // If no beam groups found, naively determine\n      // the beam groupings from the time signature\n      const beatTotal = parseInt(time_sig.split('/')[0], 10);\n      const beatValue = parseInt(time_sig.split('/')[1], 10);\n\n      const tripleMeter = beatTotal % 3 === 0;\n\n      if (tripleMeter) {\n        return [new Fraction(3, beatValue)];\n      } else if (beatValue > 4) {\n        return [new Fraction(2, beatValue)];\n      } else if (beatValue <= 4) {\n        return [new Fraction(1, beatValue)];\n      }\n    } else {\n      return groups.map((group) => new Fraction().parse(group));\n    }\n\n    return [new Fraction(1, 4)];\n  }\n\n  // A helper function to automatically build basic beams for a voice. For more\n  // complex auto-beaming use `Beam.generateBeams()`.\n  //\n  // Parameters:\n  // * `voice` - The voice to generate the beams for\n  // * `stem_direction` - A stem direction to apply to the entire voice\n  // * `groups` - An array of `Fraction` representing beat groupings for the beam\n  static applyAndGetBeams(voice: Voice, stem_direction?: number, groups?: Fraction[]): Beam[] {\n    return Beam.generateBeams(voice.getTickables() as StemmableNote[], {\n      groups,\n      stem_direction,\n    });\n  }\n\n  // A helper function to autimatically build beams for a voice with\n  // configuration options.\n  //\n  // Example configuration object:\n  //\n  // ```\n  // config = {\n  //   groups: [new Vex.Flow.Fraction(2, 8)],\n  //   stem_direction: -1,\n  //   beam_rests: true,\n  //   beam_middle_only: true,\n  //   show_stemlets: false\n  // };\n  // ```\n  //\n  // Parameters:\n  // * `notes` - An array of notes to create the beams for\n  // * `config` - The configuration object\n  //    * `groups` - Array of `Fractions` that represent the beat structure to beam the notes\n  //    * `stem_direction` - Set to apply the same direction to all notes\n  //    * `beam_rests` - Set to `true` to include rests in the beams\n  //    * `beam_middle_only` - Set to `true` to only beam rests in the middle of the beat\n  //    * `show_stemlets` - Set to `true` to draw stemlets for rests\n  //    * `maintain_stem_directions` - Set to `true` to not apply new stem directions\n  //\n  static generateBeams(\n    notes: StemmableNote[],\n    config: {\n      flat_beam_offset?: number;\n      flat_beams?: boolean;\n      secondary_breaks?: string;\n      show_stemlets?: boolean;\n      maintain_stem_directions?: boolean;\n      beam_middle_only?: boolean;\n      beam_rests?: boolean;\n      groups?: Fraction[];\n      stem_direction?: number;\n    }\n  ): Beam[] {\n    if (!config) config = {};\n\n    if (!config.groups || !config.groups.length) {\n      config.groups = [new Fraction(2, 8)];\n    }\n\n    // Convert beam groups to tick amounts\n    const tickGroups = config.groups.map((group) => {\n      if (!group.multiply) {\n        throw new Vex.RERR('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n      }\n      return group.clone().multiply(Flow.RESOLUTION, 1);\n    });\n\n    const unprocessedNotes: StemmableNote[] = notes;\n    let currentTickGroup = 0;\n    let noteGroups: StemmableNote[][] = [];\n    let currentGroup: StemmableNote[] = [];\n\n    function getTotalTicks(vf_notes: Note[]) {\n      return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n    }\n\n    function nextTickGroup() {\n      if (tickGroups.length - 1 > currentTickGroup) {\n        currentTickGroup += 1;\n      } else {\n        currentTickGroup = 0;\n      }\n    }\n\n    function createGroups() {\n      let nextGroup: StemmableNote[] = [];\n      // number of ticks in current group\n      let currentGroupTotalTicks = new Fraction(0, 1);\n      unprocessedNotes.forEach((unprocessedNote) => {\n        nextGroup = [];\n        if (unprocessedNote.shouldIgnoreTicks()) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          return; // Ignore untickables (like bar notes)\n        }\n        currentGroup.push(unprocessedNote);\n        const ticksPerGroup = tickGroups[currentTickGroup].clone();\n        const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n\n        // Double the amount of ticks in a group, if it's an unbeamable tuplet\n        const unbeamable = Flow.durationToNumber(unprocessedNote.getDuration()) < 8;\n        if (unbeamable && unprocessedNote.getTuplet()) {\n          ticksPerGroup.numerator *= 2;\n        }\n\n        // If the note that was just added overflows the group tick total\n        if (totalTicks.greaterThan(ticksPerGroup)) {\n          // If the overflow note can be beamed, start the next group\n          // with it. Unbeamable notes leave the group overflowed.\n          if (!unbeamable) {\n            const note = currentGroup.pop();\n            if (note) nextGroup.push(note);\n          }\n          noteGroups.push(currentGroup);\n\n          // We have overflown, so we're going to next tick group. As we might have\n          // overflown by more than 1 group, we need to go forward as many times as\n          // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n          // in current groups as we go forward.\n          do {\n            currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n            nextTickGroup();\n          } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n          currentGroup = nextGroup;\n        } else if (totalTicks.equals(ticksPerGroup)) {\n          noteGroups.push(currentGroup);\n          currentGroupTotalTicks = new Fraction(0, 1);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        }\n      });\n\n      // Adds any remainder notes beam\n      if (currentGroup.length > 0) {\n        noteGroups.push(currentGroup);\n      }\n    }\n    function getBeamGroups() {\n      return noteGroups.filter((group) => {\n        if (group.length > 1) {\n          let beamable = true;\n          group.forEach((note) => {\n            if (note.getIntrinsicTicks() >= Flow.durationToTicks('4')) {\n              beamable = false;\n            }\n          });\n          return beamable;\n        }\n        return false;\n      });\n    }\n\n    // Splits up groups by Rest\n    function sanitizeGroups() {\n      const sanitizedGroups: StemmableNote[][] = [];\n      noteGroups.forEach((group) => {\n        let tempGroup: StemmableNote[] = [];\n        group.forEach((note, index, group) => {\n          const isFirstOrLast = index === 0 || index === group.length - 1;\n          const prevNote = group[index - 1];\n\n          const breaksOnEachRest = !config.beam_rests && note.isRest();\n          const breaksOnFirstOrLastRest =\n            config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\n\n          let breakOnStemChange = false;\n          if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\n            const prevDirection = prevNote.getStemDirection();\n            const currentDirection = note.getStemDirection();\n            breakOnStemChange = currentDirection !== prevDirection;\n          }\n\n          const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n\n          // Determine if the group should be broken at this note\n          const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n\n          if (shouldBreak) {\n            // Add current group\n            if (tempGroup.length > 0) {\n              sanitizedGroups.push(tempGroup);\n            }\n\n            // Start a new group. Include the current note if the group\n            // was broken up by stem direction, as that note needs to start\n            // the next group of notes\n            tempGroup = breakOnStemChange ? [note] : [];\n          } else {\n            // Add note to group\n            tempGroup.push(note);\n          }\n        });\n\n        // If there is a remaining group, add it as well\n        if (tempGroup.length > 0) {\n          sanitizedGroups.push(tempGroup);\n        }\n      });\n\n      noteGroups = sanitizedGroups;\n    }\n\n    function formatStems() {\n      noteGroups.forEach((group) => {\n        let stemDirection;\n        if (config.maintain_stem_directions) {\n          const note = findFirstNote(group);\n          stemDirection = note ? note.getStemDirection() : Stem.UP;\n        } else {\n          if (config.stem_direction) {\n            stemDirection = config.stem_direction;\n          } else {\n            stemDirection = calculateStemDirection(group);\n          }\n        }\n        applyStemDirection(group, stemDirection);\n      });\n    }\n\n    function findFirstNote(group: StemmableNote[]) {\n      for (let i = 0; i < group.length; i++) {\n        const note = group[i];\n        if (!note.isRest()) {\n          return note;\n        }\n      }\n\n      return false;\n    }\n\n    function applyStemDirection(group: StemmableNote[], direction: number) {\n      group.forEach((note) => {\n        note.setStemDirection(direction);\n      });\n    }\n\n    // Get all of the tuplets in all of the note groups\n    function getTuplets() {\n      const uniqueTuplets: Tuplet[] = [];\n\n      // Go through all of the note groups and inspect for tuplets\n      noteGroups.forEach((group) => {\n        let tuplet: Tuplet;\n        group.forEach((note) => {\n          const noteTuplet = note.getTuplet();\n          if (noteTuplet && tuplet !== noteTuplet) {\n            tuplet = noteTuplet;\n            uniqueTuplets.push(tuplet);\n          }\n        });\n      });\n      return uniqueTuplets;\n    }\n\n    // Using closures to store the variables throughout the various functions\n    // IMO Keeps it this process lot cleaner - but not super consistent with\n    // the rest of the API's style - Silverwolf90 (Cyril)\n    createGroups();\n    sanitizeGroups();\n    formatStems();\n\n    // Get the notes to be beamed\n    const beamedNoteGroups = getBeamGroups();\n\n    // Get the tuplets in order to format them accurately\n    const allTuplets = getTuplets();\n\n    // Create a Vex.Flow.Beam from each group of notes to be beamed\n    const beams: Beam[] = [];\n    beamedNoteGroups.forEach((group) => {\n      const beam = new Beam(group);\n\n      if (config.show_stemlets) {\n        beam.render_options.show_stemlets = true;\n      }\n      if (config.secondary_breaks) {\n        beam.render_options.secondary_break_ticks = Flow.durationToTicks(config.secondary_breaks);\n      }\n      if (config.flat_beams === true) {\n        beam.render_options.flat_beams = true;\n        beam.render_options.flat_beam_offset = config.flat_beam_offset;\n      }\n      beams.push(beam);\n    });\n\n    // Reformat tuplets\n    allTuplets.forEach((tuplet) => {\n      // Set the tuplet location based on the stem direction\n      const direction =\n        (tuplet.notes[0] as StemmableNote).stem_direction === Stem.DOWN ? Tuplet.LOCATION_BOTTOM : Tuplet.LOCATION_TOP;\n      tuplet.setTupletLocation(direction);\n\n      // If any of the notes in the tuplet are not beamed, draw a bracket.\n      let bracketed = false;\n      for (let i = 0; i < tuplet.notes.length; i++) {\n        const note = tuplet.notes[i];\n        if (!note.hasBeam()) {\n          bracketed = true;\n          break;\n        }\n      }\n      tuplet.setBracketed(bracketed);\n    });\n\n    return beams;\n  }\n\n  constructor(notes: StemmableNote[], auto_stem: boolean = false) {\n    super();\n    this.setAttribute('type', 'Beam');\n\n    if (!notes || notes === []) {\n      throw new Vex.RERR('BadArguments', 'No notes provided for beam.');\n    }\n\n    if (notes.length === 1) {\n      throw new Vex.RERR('BadArguments', 'Too few notes for beam.');\n    }\n\n    // Validate beam line, direction and ticks.\n    this.ticks = notes[0].getIntrinsicTicks();\n\n    if (this.ticks >= Flow.durationToTicks('4')) {\n      throw new Vex.RERR('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n    }\n\n    let i; // shared iterator\n    let note;\n\n    this.stem_direction = Stem.UP;\n\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (note.hasStem()) {\n        this.stem_direction = note.getStemDirection();\n        break;\n      }\n    }\n\n    let stem_direction = this.stem_direction;\n    // Figure out optimal stem direction based on given notes\n    if (auto_stem && notes[0].getCategory() === 'stavenotes') {\n      stem_direction = calculateStemDirection(notes);\n    } else if (auto_stem && notes[0].getCategory() === 'tabnotes') {\n      // Auto Stem TabNotes\n      const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n\n      stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n    }\n\n    // Apply stem directions and attach beam to notes\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (auto_stem) {\n        note.setStemDirection(stem_direction);\n        this.stem_direction = stem_direction;\n      }\n      note.setBeam(this);\n    }\n\n    this.postFormatted = false;\n    this.notes = notes;\n    this.beam_count = this.getBeamCount();\n    this.break_on_indices = [];\n    this.render_options = {\n      beam_width: 5,\n      max_slope: 0.25,\n      min_slope: -0.25,\n      slope_iterations: 20,\n      slope_cost: 100,\n      show_stemlets: false,\n      stemlet_extension: 7,\n      partial_beam_length: 10,\n      flat_beams: false,\n      min_flat_beam_offset: 15,\n    };\n  }\n\n  // Get the notes in this beam\n  getNotes(): StemmableNote[] {\n    return this.notes;\n  }\n\n  // Get the max number of beams in the set of notes\n  getBeamCount(): number {\n    const beamCounts = this.notes.map((note) => note.getGlyph().beam_count);\n\n    const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n\n    return maxBeamCount;\n  }\n\n  // Set which note `indices` to break the secondary beam at\n  breakSecondaryAt(indices: number[]): this {\n    this.break_on_indices = indices;\n    return this;\n  }\n\n  // Return the y coordinate for linear function\n  getSlopeY(x: number, first_x_px: number, first_y_px: number, slope: number): number {\n    return first_y_px + (x - first_x_px) * slope;\n  }\n\n  // Calculate the best possible slope for the provided notes\n  calculateSlope(): void {\n    const {\n      notes,\n      stem_direction: stemDirection,\n      render_options: { max_slope, min_slope, slope_iterations, slope_cost },\n    } = this;\n\n    const firstNote = notes[0];\n    const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n    const increment = (max_slope - min_slope) / slope_iterations;\n    let minCost = Number.MAX_VALUE;\n    let bestSlope = 0;\n    let yShift = 0;\n\n    // iterate through slope values to find best weighted fit\n    for (let slope = min_slope; slope <= max_slope; slope += increment) {\n      let totalStemExtension = 0;\n      let yShiftTemp = 0;\n\n      // iterate through notes, calculating y shift and stem extension\n      for (let i = 1; i < notes.length; ++i) {\n        const note = notes[i];\n        const adjustedStemTipY =\n          this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n\n        const stemTipY = note.getStemExtents().topY;\n        // beam needs to be shifted up to accommodate note\n        if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n          const diff = Math.abs(stemTipY - adjustedStemTipY);\n          yShiftTemp += diff * -stemDirection;\n          totalStemExtension += diff * i;\n        } else {\n          // beam overshoots note, account for the difference\n          totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n        }\n      }\n\n      // most engraving books suggest aiming for a slope about half the angle of the\n      // difference between the first and last notes' stem length;\n      const idealSlope = initialSlope / 2;\n      const distanceFromIdeal = Math.abs(idealSlope - slope);\n\n      // This tries to align most beams to something closer to the idealSlope, but\n      // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n      const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n\n      // update state when a more ideal slope is found\n      if (cost < minCost) {\n        minCost = cost;\n        bestSlope = slope;\n        yShift = yShiftTemp;\n      }\n    }\n\n    this.slope = bestSlope;\n    this.y_shift = yShift;\n  }\n\n  // Calculate a slope and y-shift for flat beams\n  calculateFlatSlope(): void {\n    const {\n      notes,\n      stem_direction,\n      render_options: { beam_width, min_flat_beam_offset, flat_beam_offset },\n    } = this;\n\n    // If a flat beam offset has not yet been supplied or calculated,\n    // generate one based on the notes in this particular note group\n    let total = 0;\n    let extremeY = 0; // Store the highest or lowest note here\n    let extremeBeamCount = 0; // The beam count of the extreme note\n    let currentExtreme = 0;\n    for (let i = 0; i < notes.length; i++) {\n      // Total up all of the offsets so we can average them out later\n      const note = notes[i];\n      const stemTipY = note.getStemExtents().topY;\n      total += stemTipY;\n\n      // Store the highest (stems-up) or lowest (stems-down) note so the\n      //  offset can be adjusted in case the average isn't enough\n      if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\n        currentExtreme = stemTipY;\n        extremeY = Math.max(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      } else if (stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n        currentExtreme = stemTipY;\n        extremeY = Math.min(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      }\n    }\n\n    // Average the offsets to try and come up with a reasonable one that\n    //  works for all of the notes in the beam group.\n    let offset = total / notes.length;\n\n    // In case the average isn't long enough, add or subtract some more\n    //  based on the highest or lowest note (again, based on the stem\n    //  direction). This also takes into account the added height due to\n    //  the width of the beams.\n    const beamWidth = beam_width * 1.5;\n    const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\n    const newOffset = extremeY + extremeTest * -stem_direction;\n    if (stem_direction === Stem.DOWN && offset < newOffset) {\n      offset = extremeY + extremeTest;\n    } else if (stem_direction === Stem.UP && offset > newOffset) {\n      offset = extremeY - extremeTest;\n    }\n\n    if (!flat_beam_offset) {\n      // Set the offset for the group based on the calculations above.\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.DOWN && offset > flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.UP && offset < flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    }\n\n    // for flat beams, the slope and y_shift are simply 0\n    this.slope = 0;\n    this.y_shift = 0;\n  }\n\n  getBeamYToDraw(): number {\n    const firstNote = this.notes[0];\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    let beamY = firstStemTipY;\n\n    // For flat beams, set the first and last Y to the offset, rather than\n    //  using the note's stem extents.\n    if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n      beamY = this.render_options.flat_beam_offset;\n    }\n    return beamY;\n  }\n\n  // Create new stems for the notes in the beam, so that each stem\n  // extends into the beams.\n  applyStemExtensions(): void {\n    const {\n      notes,\n      slope,\n      y_shift,\n      stem_direction,\n      beam_count,\n      render_options: { show_stemlets, stemlet_extension, beam_width },\n    } = this;\n\n    const firstNote = notes[0];\n    const firstStemTipY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n\n    for (let i = 0; i < notes.length; ++i) {\n      const note = notes[i];\n      const stem = note.getStem();\n      if (stem) {\n        const stemX = note.getStemX();\n        const { topY: stemTipY } = note.getStemExtents();\n        const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n        const preBeamExtension = stem.getExtension();\n        const beamExtension = stem_direction === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n\n        stem.setExtension(preBeamExtension + beamExtension);\n        stem.adjustHeightForBeam();\n\n        if (note.isRest() && show_stemlets) {\n          const beamWidth = beam_width;\n          const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\n          stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\n        }\n      } else {\n        throw new Vex.RERR('NoStem', 'stem undefined.');\n      }\n    }\n  }\n\n  // return upper level beam direction.\n  lookupBeamDirection(duration: string, prev_tick: number, tick: number, next_tick: number): string {\n    if (duration === '4') {\n      return BEAM_LEFT;\n    }\n\n    const lookup_duration = `${Flow.durationToNumber(duration) / 2}`;\n    const prev_note_gets_beam = prev_tick < Flow.durationToTicks(lookup_duration);\n    const next_note_gets_beam = next_tick < Flow.durationToTicks(lookup_duration);\n    const note_gets_beam = tick < Flow.durationToTicks(lookup_duration);\n\n    if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_BOTH;\n    } else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\n      return BEAM_LEFT;\n    } else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_RIGHT;\n    }\n\n    return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick);\n  }\n\n  // Get the x coordinates for the beam lines of specific `duration`\n  getBeamLines(duration: string): { start: number; end?: number }[] {\n    const tick_of_duration = Flow.durationToTicks(duration);\n    let beam_started = false;\n\n    type BeamInfo = { start: number; end?: number };\n    const beam_lines: BeamInfo[] = [];\n    let current_beam: BeamInfo | undefined = undefined;\n    const partial_beam_length = this.render_options.partial_beam_length;\n    let previous_should_break = false;\n    let tick_tally = 0;\n    for (let i = 0; i < this.notes.length; ++i) {\n      const note = this.notes[i];\n\n      // See if we need to break secondary beams on this note.\n      const ticks = note.getTicks().value();\n      tick_tally += ticks;\n      let should_break = false;\n\n      // 8th note beams are always drawn.\n      if (parseInt(duration, 10) >= 8) {\n        // First, check to see if any indices were set up through breakSecondaryAt()\n        should_break = this.break_on_indices.indexOf(i) !== -1;\n\n        // If the secondary breaks were auto-configured in the render options,\n        //  handle that as well.\n        if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n          tick_tally = 0;\n          should_break = true;\n        }\n      }\n      const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\n\n      const stem_x = note.getStemX() - Stem.WIDTH / 2;\n\n      // Check to see if the next note in the group will get a beam at this\n      //  level. This will help to inform the partial beam logic below.\n      const prev_note = this.notes[i - 1];\n      const next_note = this.notes[i + 1];\n      const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\n      const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\n      const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      if (note_gets_beam) {\n        // This note gets a beam at the current level\n        if (beam_started) {\n          // We're currently in the middle of a beam. Just continue it on to\n          //  the stem X of the current note.\n          current_beam = beam_lines[beam_lines.length - 1];\n          current_beam.end = stem_x;\n\n          // If a secondary beam break is set up, end the beam right now.\n          if (should_break) {\n            beam_started = false;\n            if (next_note && !next_note_gets_beam && current_beam.end === null) {\n              // This note gets a beam,.but the next one does not. This means\n              //  we need a partial pointing right.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          }\n        } else {\n          // No beam started yet. Start a new one.\n          current_beam = { start: stem_x, end: undefined };\n          beam_started = true;\n\n          if (beam_alone) {\n            // previous and next beam exists and does not get a beam but current gets it.\n            const prev_tick = prev_note.getIntrinsicTicks();\n            const next_tick = next_note.getIntrinsicTicks();\n            const tick = note.getIntrinsicTicks();\n            const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick);\n\n            if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\n              current_beam.end = current_beam.start - partial_beam_length;\n            } else {\n              current_beam.end = current_beam.start + partial_beam_length;\n            }\n          } else if (!next_note_gets_beam) {\n            // The next note doesn't get a beam. Draw a partial.\n            if ((previous_should_break || i === 0) && next_note) {\n              // This is the first note (but not the last one), or it is\n              //  following a secondary break. Draw a partial to the right.\n              current_beam.end = current_beam.start + partial_beam_length;\n            } else {\n              // By default, draw a partial to the left.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          } else if (should_break) {\n            // This note should have a secondary break after it. Even though\n            //  we just started a beam, it needs to end immediately.\n            current_beam.end = current_beam.start - partial_beam_length;\n            beam_started = false;\n          }\n          beam_lines.push(current_beam);\n        }\n      } else {\n        // The current note does not get a beam.\n        beam_started = false;\n      }\n\n      // Store the secondary break flag to inform the partial beam logic in\n      //  the next iteration of the loop.\n      previous_should_break = should_break;\n    }\n\n    // Add a partial beam pointing left if this is the last note in the group\n    const last_beam = beam_lines[beam_lines.length - 1];\n    if (last_beam && last_beam.end === null) {\n      last_beam.end = last_beam.start - partial_beam_length;\n    }\n    return beam_lines;\n  }\n\n  // Render the stems for each notes\n  drawStems(ctx: RenderContext): void {\n    this.notes.forEach((note) => {\n      const stem = note.getStem();\n      if (stem) {\n        stem.setContext(ctx).draw();\n      }\n    }, this);\n  }\n\n  // Render the beam lines\n  drawBeamLines(ctx: RenderContext): void {\n    const valid_beam_durations = ['4', '8', '16', '32', '64'];\n\n    const firstNote = this.notes[0];\n    let beamY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n    const beamThickness = this.render_options.beam_width * this.stem_direction;\n\n    // Draw the beams.\n    for (let i = 0; i < valid_beam_durations.length; ++i) {\n      const duration = valid_beam_durations[i];\n      const beamLines = this.getBeamLines(duration);\n\n      for (let j = 0; j < beamLines.length; ++j) {\n        const beam_line = beamLines[j];\n        const startBeamX = beam_line.start;\n\n        const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n        const lastBeamX = beam_line.end;\n        if (lastBeamX) {\n          const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n\n          ctx.beginPath();\n          ctx.moveTo(startBeamX, startBeamY);\n          ctx.lineTo(startBeamX, startBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY);\n          ctx.closePath();\n          ctx.fill();\n        } else {\n          throw new Vex.RERR('NoLastBeamX', 'lastBeamX undefined.');\n        }\n      }\n\n      beamY += beamThickness * 1.5;\n    }\n  }\n\n  // Pre-format the beam\n  preFormat(): this {\n    return this;\n  }\n\n  // Post-format the beam. This can only be called after\n  // the notes in the beam have both `x` and `y` values. ie: they've\n  // been formatted and have staves\n  postFormat(): void {\n    if (this.postFormatted) return;\n\n    // Calculate a smart slope if we're not forcing the beams to be flat.\n    if (this.notes[0].getCategory() === 'tabnotes' || this.render_options.flat_beams) {\n      this.calculateFlatSlope();\n    } else {\n      this.calculateSlope();\n    }\n    this.applyStemExtensions();\n\n    this.postFormatted = true;\n  }\n\n  // Render the beam to the canvas context\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    if (this.unbeamable) return;\n\n    if (!this.postFormatted) {\n      this.postFormat();\n    }\n\n    this.drawStems(ctx);\n    this.applyStyle();\n    this.drawBeamLines(ctx);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements tablature bends.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\n\nexport interface BendPhrase {\n  x?: number;\n  type: number;\n  text: string;\n  width?: number;\n  draw_width?: number;\n}\n\nexport interface BendRenderOptions {\n  line_width: number;\n  release_width: number;\n  bend_width: number;\n  line_style: string;\n}\n\n/**\n   @param text Text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n   @param release If true, render a release. (DEPRECATED)\n   @param phrase If set, ignore \"text\" and \"release\", and use the more\n                 sophisticated phrase specified.\n\n   Example of a phrase:\n\n     [{\n       type: UP,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: DOWN,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: UP,\n       text: \"half\"\n       width: 8;\n     },\n     {\n       type: UP,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: DOWN,\n       text: \"1 1/2\"\n       width: 8;\n     }]\n */\nexport class Bend extends Modifier {\n  protected text: string;\n  protected release: boolean;\n  protected phrase: BendPhrase[];\n  protected font: string;\n  protected render_options: BendRenderOptions;\n\n  static get CATEGORY(): string {\n    return 'bends';\n  }\n\n  static get UP(): number {\n    return 0;\n  }\n\n  static get DOWN(): number {\n    return 1;\n  }\n\n  // ## Static Methods\n  // Arrange bends in `ModifierContext`\n  static format(bends: Bend[], state: ModifierContextState): boolean {\n    if (!bends || bends.length === 0) return false;\n\n    let last_width = 0;\n    // Bends are always on top.\n    const text_line = state.top_text_line;\n\n    // Format Bends\n    for (let i = 0; i < bends.length; ++i) {\n      const bend = bends[i];\n      bend.setXShift(last_width);\n      last_width = bend.getWidth();\n      bend.setTextLine(text_line);\n    }\n\n    state.right_shift += last_width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  // ## Prototype Methods\n  constructor(text: string, release: boolean, phrase: BendPhrase[]) {\n    super();\n    this.setAttribute('type', 'Bend');\n\n    this.text = text;\n    this.x_shift = 0;\n    this.release = release || false;\n    this.font = '10pt Arial';\n    this.render_options = {\n      line_width: 1.5,\n      line_style: '#777777',\n      bend_width: 8,\n      release_width: 8,\n    };\n\n    if (phrase) {\n      this.phrase = phrase;\n    } else {\n      // Backward compatibility\n      this.phrase = [{ type: Bend.UP, text: this.text }];\n      if (this.release) this.phrase.push({ type: Bend.DOWN, text: '' });\n    }\n\n    this.updateWidth();\n  }\n\n  getCategory(): string {\n    return Bend.CATEGORY;\n  }\n\n  setXShift(value: number): this {\n    this.x_shift = value;\n    this.updateWidth();\n    return this;\n  }\n\n  setFont(font: string): this {\n    this.font = font;\n    return this;\n  }\n\n  getText(): string {\n    return this.text;\n  }\n\n  updateWidth(): this {\n    // eslint-disable-next-line\n    const that = this;\n\n    function measure_text(text: string) {\n      let text_width;\n      const ctxThat = that.getContext();\n      if (ctxThat) {\n        text_width = ctxThat.measureText(text).width;\n      } else {\n        text_width = Flow.textWidth(text);\n      }\n\n      return text_width;\n    }\n\n    let total_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (bend.width != undefined) {\n        total_width += bend.width;\n      } else {\n        const additional_width =\n          bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\n\n        bend.width = Vex.Max(additional_width, measure_text(bend.text)) + 3;\n        bend.draw_width = bend.width / 2;\n        total_width += bend.width;\n      }\n    }\n\n    this.setWidth(total_width + this.x_shift);\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    if (!(this.note && this.index != null)) {\n      throw new Vex.RERR('NoNoteForBend', \"Can't draw bend without a note or index.\");\n    }\n\n    this.setRendered();\n\n    const start = this.note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n    start.x += 3;\n    start.y += 0.5;\n    const x_shift = this.x_shift;\n\n    const stave = this.note.checkStave();\n    const bend_height = stave.getYForTopText(this.text_line) + 3;\n    const annotation_y = stave.getYForTopText(this.text_line) - 1;\n    // eslint-disable-next-line\n    const that = this;\n\n    function renderBend(x: number, y: number, width: number, height: number) {\n      const cp_x = x + width;\n      const cp_y = y;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, y);\n      ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderRelease(x: number, y: number, width: number, height: number) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, height);\n      ctx.quadraticCurveTo(x + width, height, x + width, y);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderArrowHead(x: number, y: number, direction?: number) {\n      const width = 4;\n      const dir = direction || 1;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x - width, y + width * dir);\n      ctx.lineTo(x + width, y + width * dir);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    function renderText(x: number, text: string) {\n      ctx.save();\n      ctx.setRawFont(that.font);\n      const render_x = x - ctx.measureText(text).width / 2;\n      ctx.fillText(text, render_x, annotation_y);\n      ctx.restore();\n    }\n\n    let last_bend = undefined;\n    let last_bend_draw_width = 0;\n    let last_drawn_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (!bend.draw_width) bend.draw_width = 0;\n      if (i === 0) bend.draw_width += x_shift;\n\n      last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);\n      if (bend.type === Bend.UP) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderArrowHead(start.x, bend_height);\n        }\n\n        renderBend(start.x, start.y, last_drawn_width, bend_height);\n      }\n\n      if (bend.type === Bend.DOWN) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend && last_bend.type === Bend.DOWN) {\n          renderArrowHead(start.x, start.y, -1);\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend === null) {\n          last_drawn_width = bend.draw_width;\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n      }\n\n      renderText(start.x + last_drawn_width, bend.text);\n      last_bend = bend;\n      last_bend_draw_width = bend.draw_width;\n      last_bend.x = start.x;\n\n      start.x += last_drawn_width;\n    }\n\n    if (!last_bend || last_bend.x == undefined) {\n      throw new Vex.RERR('NoLastBendForBend', 'Internal error.');\n    }\n\n    // Final arrowhead and text\n    if (last_bend.type === Bend.UP) {\n      renderArrowHead(last_bend.x + last_drawn_width, bend_height);\n    } else if (last_bend.type === Bend.DOWN) {\n      renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n    }\n  }\n}\n","// Vex Music Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n\nimport { RenderContext } from './types/common';\n\n// Bounding boxes for interactive notation\n\nexport class BoundingBox {\n  protected x: number;\n  protected y: number;\n  protected w: number;\n  protected h: number;\n\n  static copy(that: BoundingBox): BoundingBox {\n    return new BoundingBox(that.x, that.y, that.w, that.h);\n  }\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  getY(): number {\n    return this.y;\n  }\n\n  getW(): number {\n    return this.w;\n  }\n\n  getH(): number {\n    return this.h;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  setW(w: number): this {\n    this.w = w;\n    return this;\n  }\n\n  setH(h: number): this {\n    this.h = h;\n    return this;\n  }\n\n  move(x: number, y: number): this {\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  clone(): BoundingBox {\n    return BoundingBox.copy(this);\n  }\n\n  // Merge my box with given box. Creates a bigger bounding box unless\n  // the given box is contained in this one.\n  mergeWith(boundingBox: BoundingBox, ctx?: RenderContext): this {\n    const that = boundingBox;\n\n    const new_x = this.x < that.x ? this.x : that.x;\n    const new_y = this.y < that.y ? this.y : that.y;\n    const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n    const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n\n    this.x = new_x;\n    this.y = new_y;\n    this.w = new_w;\n    this.h = new_h;\n\n    if (ctx) this.draw(ctx);\n    return this;\n  }\n\n  draw(ctx: RenderContext, x?: number, y?: number): void {\n    if (!x) x = 0;\n    if (!y) y = 0;\n    ctx.rect(this.x + x, this.y + y, this.w, this.h);\n    ctx.stroke();\n  }\n}\n","// ## Description\n//\n// Object which computes metrics for a bounding box by continuously\n// taking canvas path commands\n\n// Warning: This file is merely a crutch to get bounding box information without\n// explicit metadata. This is likely to get deprecated following SMuFL support.\n//\n// taken from: https://github.com/gabelerner/canvg/blob/860e418aca67b9a41e858a223d74d375793ec364/ca\n// nvg.js#L449\n\nexport class BoundingBoxComputation {\n  protected x1: number;\n  protected y1: number;\n  protected x2: number;\n  protected y2: number;\n\n  constructor(x1?: number, y1?: number, x2?: number, y2?: number) {\n    // pass in initial points if you want\n    this.x1 = Number.NaN;\n    this.y1 = Number.NaN;\n    this.x2 = Number.NaN;\n    this.y2 = Number.NaN;\n\n    this.addPoint(x1, y1);\n    this.addPoint(x2, y2);\n  }\n\n  getX1(): number {\n    return this.x1;\n  }\n\n  getY1(): number {\n    return this.y1;\n  }\n\n  width(): number {\n    return this.x2 - this.x1;\n  }\n\n  height(): number {\n    return this.y2 - this.y1;\n  }\n\n  noOp(): void {\n    // do nothing\n  }\n\n  addPoint(x: number | undefined, y: number | undefined): void {\n    if (x != undefined) {\n      if (isNaN(this.x1) || isNaN(this.x2)) {\n        this.x1 = x;\n        this.x2 = x;\n      }\n      if (x < this.x1) this.x1 = x;\n      if (x > this.x2) this.x2 = x;\n    }\n\n    if (y != undefined) {\n      if (isNaN(this.y1) || isNaN(this.y2)) {\n        this.y1 = y;\n        this.y2 = y;\n      }\n      if (y < this.y1) this.y1 = y;\n      if (y > this.y2) this.y2 = y;\n    }\n  }\n\n  addX(x: number): void {\n    this.addPoint(x, undefined);\n  }\n\n  addY(y: number): void {\n    this.addPoint(undefined, y);\n  }\n\n  addQuadraticCurve(p0x: number, p0y: number, p1x: number, p1y: number, p2x: number, p2y: number): void {\n    const cp1x = p0x + (2 / 3) * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)\n    const cp1y = p0y + (2 / 3) * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)\n    const cp2x = cp1x + (1 / 3) * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)\n    const cp2y = cp1y + (1 / 3) * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)\n    this.addBezierCurve(p0x, p0y, cp1x, cp1y, cp2x, cp2y, p2x, p2y);\n  }\n\n  addBezierCurve(\n    p0x: number,\n    p0y: number,\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number\n  ): void {\n    // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    const p0 = [p0x, p0y];\n    const p1 = [p1x, p1y];\n    const p2 = [p2x, p2y];\n    const p3 = [p3x, p3y];\n    let i;\n\n    this.addPoint(p0[0], p0[1]);\n    this.addPoint(p3[0], p3[1]);\n\n    const f = (t: number, i: number) =>\n      Math.pow(1 - t, 3) * p0[i] +\n      3 * Math.pow(1 - t, 2) * t * p1[i] +\n      3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n      Math.pow(t, 3) * p3[i];\n\n    for (i = 0; i <= 1; i++) {\n      const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n      const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n      const c = 3 * p1[i] - 3 * p0[i];\n\n      if (a === 0) {\n        if (b === 0) continue;\n        const t = -c / b;\n        if (0 < t && t < 1) {\n          if (i === 0) this.addX(f(t, i));\n          if (i === 1) this.addY(f(t, i));\n        }\n        continue;\n      }\n\n      const b2ac = Math.pow(b, 2) - 4 * c * a;\n      if (b2ac < 0) continue;\n      const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        if (i === 0) this.addX(f(t1, i));\n        if (i === 1) this.addY(f(t1, i));\n      }\n      const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        if (i === 0) this.addX(f(t2, i));\n        if (i === 1) this.addY(f(t2, i));\n      }\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// A rendering context for the Raphael backend.\n//\n// Copyright Mohit Cheppudira 2010\n\nimport { Vex } from './vex';\n\n/** @constructor */\nexport class CanvasContext {\n  static get WIDTH() {\n    return 600;\n  }\n  static get HEIGHT() {\n    return 400;\n  }\n  static get CANVAS_BROWSER_SIZE_LIMIT() {\n    return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size\n  }\n\n  static SanitizeCanvasDims(width, height) {\n    if (Math.max(width, height) > this.CANVAS_BROWSER_SIZE_LIMIT) {\n      Vex.W('Canvas dimensions exceed browser limit. Cropping to ' + this.CANVAS_BROWSER_SIZE_LIMIT);\n      if (width > this.CANVAS_BROWSER_SIZE_LIMIT) {\n        width = this.CANVAS_BROWSER_SIZE_LIMIT;\n        // note: Math.min return 0 for undefined, NaN for null. Would change inputs.\n      }\n      if (height > this.CANVAS_BROWSER_SIZE_LIMIT) {\n        height = this.CANVAS_BROWSER_SIZE_LIMIT;\n      }\n    }\n    return [width, height];\n  }\n\n  constructor(context) {\n    // Use a name that is unlikely to clash with a canvas context\n    // property\n    this.vexFlowCanvasContext = context;\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT,\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n\n  clear() {\n    this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // Containers not implemented\n  openGroup() {}\n  closeGroup() {}\n  add() {}\n\n  setFont(family, size, weight) {\n    this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.vexFlowCanvasContext.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.vexFlowCanvasContext.fillStyle = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_fillStyle = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.vexFlowCanvasContext.strokeStyle = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.vexFlowCanvasContext.shadowColor = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.vexFlowCanvasContext.shadowBlur = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.vexFlowCanvasContext.lineWidth = width;\n    return this;\n  }\n\n  setLineCap(cap_type) {\n    this.vexFlowCanvasContext.lineCap = cap_type;\n    return this;\n  }\n\n  // setLineDash: is the one native method in a canvas context\n  // that begins with set, therefore we don't bolster the method\n  // if it already exists (see renderer.bolsterCanvasContext).\n  // If it doesn't exist, we bolster it and assume it's looking for\n  // a ctx.lineDash method, as previous versions of VexFlow\n  // expected.\n  setLineDash(dash) {\n    this.vexFlowCanvasContext.lineDash = dash;\n    return this;\n  }\n\n  scale(x, y) {\n    return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));\n  }\n\n  resize(width, height) {\n    [width, height] = this.SanitizeCanvasDims(parseInt(width, 10), parseInt(height, 10));\n    return this.vexFlowCanvasContext.resize(width, height);\n  }\n\n  rect(x, y, width, height) {\n    return this.vexFlowCanvasContext.rect(x, y, width, height);\n  }\n\n  fillRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.fillRect(x, y, width, height);\n  }\n\n  clearRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.clearRect(x, y, width, height);\n  }\n\n  beginPath() {\n    return this.vexFlowCanvasContext.beginPath();\n  }\n\n  moveTo(x, y) {\n    return this.vexFlowCanvasContext.moveTo(x, y);\n  }\n\n  lineTo(x, y) {\n    return this.vexFlowCanvasContext.lineTo(x, y);\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    return this.vexFlowCanvasContext.glow();\n  }\n\n  fill() {\n    return this.vexFlowCanvasContext.fill();\n  }\n\n  stroke() {\n    return this.vexFlowCanvasContext.stroke();\n  }\n\n  closePath() {\n    return this.vexFlowCanvasContext.closePath();\n  }\n\n  measureText(text) {\n    return this.vexFlowCanvasContext.measureText(text);\n  }\n\n  fillText(text, x, y) {\n    return this.vexFlowCanvasContext.fillText(text, x, y);\n  }\n\n  save() {\n    return this.vexFlowCanvasContext.save();\n  }\n\n  restore() {\n    return this.vexFlowCanvasContext.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements chord symbols as modifiers that can be attached to\n// notes.  Chord symbols can contain multiple 'blocks' which can contain\n// text or glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Glyph } from './glyph';\nimport { TextFont } from './textfont';\nimport { Modifier } from './modifier';\n\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\nfunction L(...args) {\n  if (ChordSymbol.DEBUG) Vex.L('Vex.Flow.ChordSymbol', args);\n}\n\nexport class ChordSymbol extends Modifier {\n  static get CATEGORY() {\n    return 'chordSymbol';\n  }\n\n  // Chord symbols can be positioned and justified relative to the note.\n  static get horizontalJustify() {\n    return {\n      LEFT: 1,\n      CENTER: 2,\n      RIGHT: 3,\n      CENTER_STEM: 4,\n    };\n  }\n\n  static get horizontalJustifyString() {\n    return {\n      left: ChordSymbol.horizontalJustify.LEFT,\n      right: ChordSymbol.horizontalJustify.RIGHT,\n      center: ChordSymbol.horizontalJustify.CENTER,\n      centerStem: ChordSymbol.horizontalJustify.CENTER_STEM,\n    };\n  }\n\n  static get verticalJustify() {\n    return {\n      TOP: 1,\n      BOTTOM: 2,\n    };\n  }\n\n  static get superSubRatio() {\n    return ChordSymbol.chordSymbolMetrics.global.superSubRatio;\n  }\n\n  static get DEBUG() {\n    return ChordSymbol.debug;\n  }\n\n  // ### NOTEXTFORMAT\n  // used to globally turn off text formatting, if the built-in formatting does not\n  // work for your font..\n  static get NOTEXTFORMAT() {\n    return typeof ChordSymbol.noFormat === 'undefined' ? false : ChordSymbol.noFormat;\n  }\n\n  static set NOTEXTFORMAT(val) {\n    ChordSymbol.noFormat = val;\n  }\n\n  static set DEBUG(val) {\n    ChordSymbol.debug = val;\n  }\n\n  static get verticalJustifyString() {\n    return {\n      top: ChordSymbol.verticalJustify.TOP,\n      above: ChordSymbol.verticalJustify.TOP,\n      below: ChordSymbol.verticalJustify.BOTTOM,\n      bottom: ChordSymbol.verticalJustify.BOTTOM,\n    };\n  }\n  static getMetricForGlyph(glyphCode) {\n    if (ChordSymbol.chordSymbolMetrics[glyphCode]) {\n      return ChordSymbol.chordSymbolMetrics[glyphCode];\n    }\n    return null;\n  }\n\n  getYOffsetForText(text) {\n    let acc = 0;\n    let ix = 0;\n    const resolution = this.textFont.resolution;\n    for (ix = 0; ix < text.length; ++ix) {\n      const metric = this.textFont.getMetricForCharacter(text[ix]);\n\n      if (metric) {\n        acc = metric.y < acc ? metric.y : acc;\n      }\n    }\n\n    return ix > 0 ? -1 * (acc / resolution) : 0;\n  }\n\n  static get engravingFontResolution() {\n    return Vex.Flow.DEFAULT_FONT_STACK[0].getResolution();\n  }\n\n  static get spacingBetweenBlocks() {\n    return ChordSymbol.chordSymbolMetrics.global.spacing / ChordSymbol.engravingFontResolution;\n  }\n\n  getWidthForCharacter(c) {\n    return this.textFont.getMetricForCharacter(c).advanceWidth / this.textFont.resolution;\n  }\n\n  static getWidthForGlyph(glyph) {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0.65; // probably should do something here.\n    }\n    return metric.advanceWidth / ChordSymbol.engravingFontResolution;\n  }\n\n  static getYShiftForGlyph(glyph) {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return metric.yOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static getXShiftForGlyph(glyph) {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;\n  }\n\n  static get superscriptOffset() {\n    return ChordSymbol.chordSymbolMetrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get subscriptOffset() {\n    return ChordSymbol.chordSymbolMetrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get kerningOffset() {\n    return ChordSymbol.chordSymbolMetrics.global.kerningOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  // Glyph data\n  static get glyphs() {\n    return {\n      diminished: {\n        code: 'csymDiminished',\n      },\n      dim: {\n        code: 'csymDiminished',\n      },\n      halfDiminished: {\n        code: 'csymHalfDiminished',\n      },\n      '+': {\n        code: 'csymAugmented',\n      },\n      augmented: {\n        code: 'csymAugmented',\n      },\n      majorSeventh: {\n        code: 'csymMajorSeventh',\n      },\n      minor: {\n        code: 'csymMinor',\n      },\n      '-': {\n        code: 'csymMinor',\n      },\n      '(': {\n        code: 'csymParensLeftTall',\n      },\n      leftParen: {\n        code: 'csymParensLeftTall',\n      },\n      ')': {\n        code: 'csymParensRightTall',\n      },\n      rightParen: {\n        code: 'csymParensRightTall',\n      },\n      leftBracket: {\n        code: 'csymBracketLeftTall',\n      },\n      rightBracket: {\n        code: 'csymBracketRightTall',\n      },\n      leftParenTall: {\n        code: 'csymParensLeftVeryTall',\n      },\n      rightParenTall: {\n        code: 'csymParensRightVeryTall',\n      },\n      '/': {\n        code: 'csymDiagonalArrangementSlash',\n      },\n      over: {\n        code: 'csymDiagonalArrangementSlash',\n      },\n      '#': {\n        code: 'accidentalSharp',\n      },\n      b: {\n        code: 'accidentalFlat',\n      },\n    };\n  }\n\n  static get symbolTypes() {\n    return {\n      GLYPH: 1,\n      TEXT: 2,\n      LINE: 3,\n    };\n  }\n\n  static get symbolModifiers() {\n    return {\n      NONE: 1,\n      SUBSCRIPT: 2,\n      SUPERSCRIPT: 3,\n    };\n  }\n\n  static get chordSymbolMetrics() {\n    return Vex.Flow.DEFAULT_FONT_STACK[0].metrics.glyphs.chordSymbol;\n  }\n\n  static get lowerKerningText() {\n    return Vex.Flow.DEFAULT_FONT_STACK[0].metrics.glyphs.chordSymbol.global.lowerKerningText;\n  }\n\n  static get upperKerningText() {\n    return Vex.Flow.DEFAULT_FONT_STACK[0].metrics.glyphs.chordSymbol.global.upperKerningText;\n  }\n\n  // ### format\n  // try to estimate the width of the whole chord symbol, based on the\n  // sum of the widths of the individual blocks.  Also estimate how many\n  // lines above/below the staff we need`\n  static format(instances, state) {\n    if (!instances || instances.length === 0) return false;\n\n    let width = 0;\n    let nonSuperWidth = 0;\n    const reportedWidths = [];\n\n    for (let i = 0; i < instances.length; ++i) {\n      const instance = instances[i];\n      const fontAdj = instance.font.size / 20;\n      const glyphAdj = fontAdj * 2;\n      let lineSpaces = 1;\n      let vAlign = false;\n\n      for (let j = 0; j < instance.symbolBlocks.length; ++j) {\n        const symbol = instance.symbolBlocks[j];\n        const sup = instance.isSuperscript(symbol);\n        const sub = instance.isSubscript(symbol);\n        const subAdj = sup || sub ? ChordSymbol.superSubRatio : 1;\n        const adj = symbol.symbolType === ChordSymbol.symbolTypes.GLYPH ? glyphAdj * subAdj : fontAdj * subAdj;\n\n        // If there are super/subscripts, they extend beyond the line so\n        // assume they take up 2 lines\n        if (sup || sub) {\n          lineSpaces = 2;\n        }\n\n        // If there is a symbol-specific offset, add it but consider font\n        // size since font and glyphs will be interspersed\n        if (symbol.symbolType === ChordSymbol.symbolTypes.GLYPH) {\n          symbol.yShift += ChordSymbol.getYShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.xShift += ChordSymbol.getXShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.glyph.scale = symbol.glyph.scale * adj;\n          symbol.width = ChordSymbol.getWidthForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n        } else if (symbol.symbolType === ChordSymbol.symbolTypes.TEXT) {\n          symbol.width = symbol.width * instance.textFont.pointsToPixels * subAdj;\n          symbol.yShift += instance.getYOffsetForText(symbol.text) * adj;\n        }\n\n        if (symbol.symbolType === ChordSymbol.symbolTypes.GLYPH && symbol.glyph.code === ChordSymbol.glyphs.over.code) {\n          lineSpaces = 2;\n        }\n        symbol.width += ChordSymbol.spacingBetweenBlocks * instance.pointsToPixels * subAdj;\n\n        // If a subscript immediately  follows a superscript block, try to\n        // overlay them.\n        if (sup && j > 0) {\n          const prev = instance.symbolBlocks[j - 1];\n          if (!instance.isSuperscript(prev)) {\n            nonSuperWidth = width;\n          }\n        }\n        if (sub && nonSuperWidth > 0) {\n          vAlign = true;\n          // slide the symbol over so it lines up with superscript\n          symbol.xShift = symbol.xShift + (nonSuperWidth - width);\n          width = nonSuperWidth;\n          nonSuperWidth = 0;\n          // If we have vertically lined up, turn kerning off.\n          instance.setEnableKerning(false);\n        }\n        if (!sup && !sub) {\n          nonSuperWidth = 0;\n        }\n        symbol.vAlign = vAlign;\n        width += symbol.width;\n      }\n\n      // make kerning adjustments after computing super/subscripts\n      instance.updateKerningAdjustments();\n      instance.updateOverBarAdjustments();\n\n      if (instance.getVertical() === ChordSymbol.verticalJustify.TOP) {\n        instance.setTextLine(state.top_text_line);\n        state.top_text_line += lineSpaces;\n      } else {\n        instance.setTextLine(state.text_line + 1);\n        state.text_line += lineSpaces + 1;\n      }\n      if (instance.getReportWidth()) {\n        reportedWidths.push(width);\n      } else {\n        reportedWidths.push(0);\n      }\n    }\n\n    width = reportedWidths.reduce((a, b) => a + b);\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  // ## Prototype Methods\n  //\n  // chordSymbol is a modifier that creates a chord symbol above/below a chord\n  // This is the modifier version, meaning it is attached to an existing note.\n  constructor() {\n    super();\n    this.setAttribute('type', 'ChordSymbol');\n    this.note = null;\n    this.index = null;\n    this.symbolBlocks = [];\n    this.horizontal = ChordSymbol.horizontalJustify.LEFT;\n    this.vertical = ChordSymbol.verticalJustify.TOP;\n    this.useKerning = true;\n    this.reportWidth = true;\n\n    let fontFamily = 'Arial';\n    if (this.musicFont.name === 'Petaluma') {\n      fontFamily = 'Petaluma Script,Arial';\n    } else {\n      fontFamily = 'Roboto Slab,Times';\n    }\n    this.font = {\n      family: fontFamily,\n      size: 12,\n      weight: '',\n    };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels() {\n    return this.textFont.pointsToPixels;\n  }\n\n  get superscriptOffset() {\n    return ChordSymbol.superscriptOffset * this.pointsToPixels;\n  }\n\n  get subscriptOffset() {\n    return ChordSymbol.subscriptOffset * this.pointsToPixels;\n  }\n\n  setReportWidth(value) {\n    this.reportWidth = value;\n    return this;\n  }\n\n  getReportWidth() {\n    return this.reportWidth;\n  }\n\n  updateOverBarAdjustments() {\n    let symIx = 0;\n    const barIx = this.symbolBlocks.findIndex(\n      (symbol) =>\n        symbol.symbolType === ChordSymbol.symbolTypes.GLYPH && symbol.glyph.code === 'csymDiagonalArrangementSlash'\n    );\n\n    if (barIx < 0) {\n      return;\n    }\n    const bar = this.symbolBlocks[barIx];\n    const xoff = bar.width / 4;\n    const yoff = 0.25 * this.pointsToPixels;\n    for (symIx === 0; symIx < barIx; ++symIx) {\n      const symbol = this.symbolBlocks[symIx];\n      symbol.xShift = symbol.xShift + xoff;\n      symbol.yShift = symbol.yShift - yoff;\n    }\n\n    for (symIx = barIx + 1; symIx < this.symbolBlocks.length; ++symIx) {\n      const symbol = this.symbolBlocks[symIx];\n      symbol.xShift = symbol.xShift - xoff;\n      symbol.yShift = symbol.yShift + yoff;\n    }\n  }\n\n  updateKerningAdjustments() {\n    let accum = 0;\n    for (let j = 0; j < this.symbolBlocks.length; ++j) {\n      const symbol = this.symbolBlocks[j];\n      accum += this.getKerningAdjustment(j);\n      symbol.xShift += accum;\n    }\n  }\n\n  // ### getKerningAdjustment\n  // Do some very basic kerning so that letter chords like 'A' don't have\n  // the extensions hanging off to the right.\n  getKerningAdjustment(j) {\n    if (!this.useKerning) {\n      return 0;\n    }\n    const symbol = this.symbolBlocks[j];\n    const kernConst = ChordSymbol.kerningOffset * this.pointsToPixels;\n    const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : null;\n    let rv = 0;\n\n    // Move things into the '/' over bar\n    if (symbol.symbolType === ChordSymbol.symbolTypes.GLYPH && symbol.glyph.code === ChordSymbol.glyphs.over.code) {\n      rv += symbol.glyph.metrics.x_shift;\n    }\n\n    if (\n      prevSymbol !== null &&\n      prevSymbol.symbolType === ChordSymbol.symbolTypes.GLYPH &&\n      prevSymbol.glyph.code === ChordSymbol.glyphs.over.code\n    ) {\n      rv += prevSymbol.glyph.metrics.x_shift;\n    }\n\n    // For superscripts that follow a letter without much top part, move it to the\n    // left slightly\n    let preKernUpper = false;\n    let preKernLower = false;\n    if (prevSymbol != null && prevSymbol.symbolType === ChordSymbol.symbolTypes.TEXT) {\n      preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n      preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n    }\n\n    // TODO: adjustkern for  for font size.\n    // Where should this constant live?\n    if (preKernUpper && symbol.symbolModifier === ChordSymbol.symbolModifiers.SUPERSCRIPT) {\n      rv += kernConst;\n    }\n\n    if (preKernLower && symbol.symbolType === ChordSymbol.symbolTypes.TEXT) {\n      if (symbol.text[0] >= 'a' && symbol.text[0] <= 'z') {\n        rv += kernConst / 2;\n      }\n      if (ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1])) {\n        rv += kernConst / 2;\n      }\n    }\n    return rv;\n  }\n\n  // ### getSymbolBlock\n  // ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n  // Each block can have its own vertical orientation\n  getSymbolBlock(parameters) {\n    parameters = parameters == null ? {} : parameters;\n    const symbolType = parameters.symbolType ? parameters.symbolType : ChordSymbol.symbolTypes.TEXT;\n    const text = parameters.text ? parameters.text : '';\n    const symbolModifier = parameters.symbolModifier ? parameters.symbolModifier : ChordSymbol.symbolModifiers.NONE;\n    const xShift = 0;\n    const yShift = 0;\n    const vAlign = 0;\n\n    const rv = {\n      text,\n      symbolType,\n      symbolModifier,\n      xShift,\n      yShift,\n      vAlign,\n    };\n\n    rv.width = 0;\n    // Note: all symbol widths are resolution and font-independent.  We convert to\n    // pixel values when we know what the font is.\n    if (symbolType === ChordSymbol.symbolTypes.GLYPH && typeof parameters.glyph === 'string') {\n      const glyphArgs = ChordSymbol.glyphs[parameters.glyph];\n      const glyphPoints = 20;\n      rv.glyph = new Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });\n      // Beware: glyph.metrics is not the same as glyph.getMetrics() !\n      // rv.glyph.point = rv.glyph.point * rv.glyph.metrics.scale;\n      // rv.width = rv.glyph.getMetrics().width;\n      // don't set yShift here, b/c we need to do it at formatting time after the font is set.\n    } else if (symbolType === ChordSymbol.symbolTypes.TEXT) {\n      let twidth = 0;\n      for (let i = 0; i < rv.text.length; ++i) {\n        twidth += this.getWidthForCharacter(rv.text[i]);\n      }\n      rv.width = twidth;\n    } else if (symbolType === ChordSymbol.symbolTypes.LINE) {\n      rv.width = parameters.width;\n    }\n\n    return rv;\n  }\n\n  // ### addSymbolBlock\n  // Add a symbol to this chord, could be text, glyph or line.\n  addSymbolBlock(parameters) {\n    this.symbolBlocks.push(this.getSymbolBlock(parameters));\n    return this;\n  }\n\n  // ### Convenience functions follow that let you create different types of\n  // chord symbol parts easily\n  // ### addText\n  // Add a text block\n  addText(text, parameters) {\n    parameters = parameters == null ? {} : parameters;\n    parameters.text = text;\n    parameters.symbolType = ChordSymbol.symbolTypes.TEXT;\n    return this.addSymbolBlock(parameters);\n  }\n\n  // ### addTextSuperscript\n  // add a text block with superscript modifier\n  addTextSuperscript(text) {\n    const symbolType = ChordSymbol.symbolTypes.TEXT;\n    const symbolModifier = ChordSymbol.symbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  // ### addTextSubscript\n  // add a text block with subscript modifier\n  addTextSubscript(text) {\n    const symbolType = ChordSymbol.symbolTypes.TEXT;\n    const symbolModifier = ChordSymbol.symbolModifiers.SUBSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  // ### addGlyphSuperscript\n  // add a glyph block with superscript modifier\n  addGlyphSuperscript(glyph) {\n    const symbolType = ChordSymbol.symbolTypes.GLYPH;\n    const symbolModifier = ChordSymbol.symbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ glyph, symbolType, symbolModifier });\n  }\n\n  addGlyph(glyph, parameters) {\n    parameters = parameters == null ? {} : parameters;\n    parameters.glyph = glyph;\n    parameters.symbolType = ChordSymbol.symbolTypes.GLYPH;\n    return this.addSymbolBlock(parameters);\n  }\n\n  // ### addGlyphOrText\n  // Add a glyph for each character in 'text'.  If the glyph is not\n  // available, use text from the font.  E.g.:\n  // `addGlyphOrText(\"(+5#11)\")`\n  // will use text for the '5' and '11', and glyphs for everything else.\n  addGlyphOrText(text, parameters) {\n    parameters = parameters == null ? {} : parameters;\n    let str = '';\n    for (let i = 0; i < text.length; ++i) {\n      if (ChordSymbol.glyphs[text[i]]) {\n        if (str.length > 0) {\n          this.addText(str, parameters);\n          str = '';\n        }\n        this.addGlyph(text[i], parameters);\n      } else {\n        str += text[i];\n      }\n    }\n    if (str.length > 0) {\n      this.addText(str, parameters);\n    }\n    return this;\n  }\n\n  // ### Add a line of the given width, used as a continuation of the previous\n  // symbol in analysis, or lyrics, etc.\n  addLine(width, parameters) {\n    parameters = parameters == null ? {} : parameters;\n    parameters.symbolType = ChordSymbol.symbolTypes.LINE;\n    parameters.width = width;\n    return this.addSymbolBlock(parameters);\n  }\n\n  getCategory() {\n    return ChordSymbol.CATEGORY;\n  }\n\n  // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n  setFont(family, size, weight) {\n    this.font = { family, size, weight };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n    return this;\n  }\n\n  setFontSize(size) {\n    this.font.size = size;\n    this.textFont.setFontSize(size);\n    return this;\n  }\n\n  setEnableKerning(val) {\n    this.useKerning = val;\n    return this;\n  }\n\n  // Set vertical position of text (above or below stave). `just` must be\n  // a value in `ChordSymbol.vertical`.\n  setVertical(just) {\n    this.vertical = typeof just === 'string' ? ChordSymbol.verticalJustifyString[just] : just;\n    return this;\n  }\n  getVertical() {\n    return this.vertical;\n  }\n\n  // Get and set horizontal justification. `justification` is a value in\n  // `ChordSymbol.Justify`.\n  setHorizontal(just) {\n    this.horizontal = typeof just === 'string' ? ChordSymbol.horizontalJustifyString[just] : just;\n    return this;\n  }\n\n  getWidth() {\n    let rv = 0;\n    this.symbolBlocks.forEach((symbol) => {\n      rv += symbol.vAlign ? 0 : symbol.width;\n    });\n    return rv;\n  }\n\n  isSuperscript(symbol) {\n    return symbol.symbolModifier !== null && symbol.symbolModifier === ChordSymbol.symbolModifiers.SUPERSCRIPT;\n  }\n\n  isSubscript(symbol) {\n    return symbol.symbolModifier !== null && symbol.symbolModifier === ChordSymbol.symbolModifiers.SUBSCRIPT;\n  }\n\n  // Render text and glyphs above/below the note\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    if (!this.note) {\n      throw new Vex.RERR('NoNoteForAnnotation', \"Can't draw text annotation without an attached note.\");\n    }\n\n    // We're changing context parameters. Save current state.\n    this.context.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    this.context.openGroup(classString, this.getAttribute('id'));\n\n    const start = this.note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n    this.context.setFont(this.font.family, this.font.size, this.font.weight);\n\n    let y;\n\n    let stem_ext;\n    let spacing;\n    const has_stem = this.note.hasStem();\n    const stave = this.note.getStave();\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    if (has_stem) {\n      stem_ext = this.note.getStem().getExtents();\n      spacing = stave.getSpacingBetweenLines();\n    }\n\n    if (this.vertical === ChordSymbol.verticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin\n      // is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n      if (has_stem) {\n        const stem_base = this.note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else {\n      // (this.vertical === ChordSymbol.verticalJustify.TOP)\n      y = Math.min(stave.getYForTopText(this.text_line), this.note.getYs()[0] - 10);\n      if (has_stem) {\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    }\n\n    let x = start.x;\n    if (this.horizontal === ChordSymbol.horizontalJustify.LEFT) {\n      x = start.x;\n    } else if (this.horizontal === ChordSymbol.horizontalJustify.RIGHT) {\n      x = start.x + this.getWidth();\n    } else if (this.horizontal === ChordSymbol.horizontalJustify.CENTER) {\n      x = start.x - this.getWidth() / 2;\n    } /* CENTER_STEM */ else {\n      x = this.note.getStemX() - this.getWidth() / 2;\n    }\n    L('Rendering ChordSymbol: ', this.text, x, y);\n\n    this.symbolBlocks.forEach((symbol) => {\n      const sp = this.isSuperscript(symbol);\n      const sub = this.isSubscript(symbol);\n      let curY = y;\n      L('shift was ', symbol.xShift, symbol.yShift);\n      L('curY pre sub ', curY);\n      if (sp) {\n        curY += this.superscriptOffset;\n      }\n      if (sub) {\n        curY += this.subscriptOffset;\n      }\n      L('curY sup/sub ', curY);\n\n      if (symbol.symbolType === ChordSymbol.symbolTypes.TEXT) {\n        if (sp || sub) {\n          this.context.save();\n          this.context.setFont(this.font.family, this.font.size * ChordSymbol.superSubRatio, this.font.weight);\n        }\n        // We estimate the text width, fill it in with the empirical value so the\n        // formatting is even.\n        /* const textDim = this.context.measureText(symbol.text);\n        symbol.width = textDim.width; */\n        L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);\n\n        this.context.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);\n        if (sp || sub) {\n          this.context.restore();\n        }\n      } else if (symbol.symbolType === ChordSymbol.symbolTypes.GLYPH) {\n        curY += symbol.yShift;\n        L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);\n        symbol.glyph.render(this.context, x + symbol.xShift, curY);\n      } else if (symbol.symbolType === ChordSymbol.symbolTypes.LINE) {\n        L('Rendering Line : ', symbol.width, x, curY);\n        this.context.beginPath();\n        this.context.setLineWidth(1); // ?\n        this.context.moveTo(x, y);\n        this.context.lineTo(x + symbol.width, curY);\n        this.context.stroke();\n      }\n\n      x += symbol.width;\n      if (symbol.vAlign) {\n        x += symbol.xShift;\n      }\n    });\n    this.context.closeGroup();\n    this.context.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n//\n// ## Description\n//\n// This file implements various types of clefs that can be rendered on a stave.\n//\n// See `tests/clef_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\n\nexport interface ClefAnnotation {\n  code: string;\n  line: number;\n  x_shift: number;\n  point: number;\n}\n\nexport interface ClefType {\n  point: number;\n  code: string;\n  line?: number;\n}\n\n// To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any []) {\n  if (Clef.DEBUG) Vex.L('Vex.Flow.Clef', args);\n}\n\nexport class Clef extends StaveModifier {\n  static DEBUG: boolean;\n\n  annotation?: ClefAnnotation;\n  clef: ClefType = Clef.types['treble'];\n\n  protected glyph?: Glyph;\n  protected attachment?: Glyph;\n  protected size?: string;\n  protected type?: string;\n\n  static get CATEGORY(): string {\n    return 'clefs';\n  }\n\n  // Every clef name is associated with a glyph code from the font file\n  // and a default stave line number.\n  static get types(): Record<string, ClefType> {\n    return {\n      treble: {\n        code: 'gClef',\n        line: 3,\n        point: 0,\n      },\n      bass: {\n        code: 'fClef',\n        line: 1,\n        point: 0,\n      },\n      alto: {\n        code: 'cClef',\n        line: 2,\n        point: 0,\n      },\n      tenor: {\n        code: 'cClef',\n        line: 1,\n        point: 0,\n      },\n      percussion: {\n        code: 'restMaxima',\n        line: 2,\n        point: 0,\n      },\n      soprano: {\n        code: 'cClef',\n        line: 4,\n        point: 0,\n      },\n      'mezzo-soprano': {\n        code: 'cClef',\n        line: 3,\n        point: 0,\n      },\n      'baritone-c': {\n        code: 'cClef',\n        line: 0,\n        point: 0,\n      },\n      'baritone-f': {\n        code: 'fClef',\n        line: 2,\n        point: 0,\n      },\n      subbass: {\n        code: 'fClef',\n        line: 0,\n        point: 0,\n      },\n      french: {\n        code: 'gClef',\n        line: 4,\n        point: 0,\n      },\n      tab: {\n        code: '6stringTabClef',\n        point: 0,\n      },\n    };\n  }\n\n  // Create a new clef. The parameter `clef` must be a key from\n  // `Clef.types`.\n  constructor(type: string, size?: string, annotation?: string) {\n    super();\n    this.setAttribute('type', 'Clef');\n\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(this.musicFont.lookupMetric(`clef.${this.size}.width`));\n    L('Creating clef:', type);\n  }\n\n  getCategory(): string {\n    return Clef.CATEGORY;\n  }\n\n  setType(type: string, size?: string, annotation?: string): this {\n    this.type = type;\n    this.clef = Clef.types[type];\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n    this.clef.point = this.musicFont.lookupMetric(`clef.${this.size}.point`, 0);\n    this.glyph = new Glyph(this.clef.code, this.clef.point, {\n      category: `clef.${this.clef.code}.${this.size}`,\n    });\n\n    // If an annotation, such as 8va, is specified, add it to the Clef object.\n    if (annotation !== undefined) {\n      const code = this.musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\n      const point = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\n      const line = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\n      const x_shift = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\n\n      this.annotation = { code, point, line, x_shift };\n\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n\n    return this;\n  }\n\n  getWidth(): number {\n    if (this.type === 'tab' && !this.stave) {\n      throw new Vex.RERR('ClefError', \"Can't get width without stave.\");\n    }\n\n    return this.width;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    if (this.type !== 'tab') return this;\n    if (!this.glyph) throw new Vex.RERR('ClefError', \"Can't set stave without glyph.\");\n\n    const numLines = this.stave.getOptions().num_lines;\n    const point = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\n    const shiftY = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\n    this.glyph.setPoint(point);\n    this.glyph.setYShift(shiftY);\n\n    return this;\n  }\n\n  draw(): void {\n    if (!this.x) throw new Vex.RERR('ClefError', \"Can't draw clef without x.\");\n    if (!this.stave) throw new Vex.RERR('ClefError', \"Can't draw clef without stave.\");\n    if (!this.glyph) throw new Vex.RERR('ClefError', \"Can't draw clef without glyph.\");\n    this.setRendered();\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setContext(this.stave.getContext());\n    if (this.clef.line !== undefined) {\n      this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);\n    }\n\n    this.glyph.renderToStave(this.x);\n\n    if (this.annotation !== undefined && this.attachment !== undefined) {\n      this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);\n      this.attachment.setStave(this.stave);\n      this.attachment.setContext(this.stave.getContext());\n      this.attachment.renderToStave(this.x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Copyright Mohit Muthanna 2010\n//\n// Author Taehoon Moon 2014\n\nimport { Note } from './note';\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\nimport { RenderContext } from './types/common';\nimport { BoundingBox } from './boundingbox';\nimport { ClefType } from './clef';\n\n/** @constructor */\nexport class ClefNote extends Note {\n  protected clef_obj: Clef;\n  protected type: string;\n  protected clef: ClefType;\n\n  static get CATEGORY(): string {\n    return 'clefnote';\n  }\n\n  constructor(type: string, size: string, annotation: string) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'ClefNote');\n\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  setType(type: string, size: string, annotation: string): this {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getClef(): ClefType {\n    return this.clef;\n  }\n\n  setContext(context: RenderContext): this {\n    super.setContext(context);\n    this.glyph.setContext(this.getContext());\n    return this;\n  }\n\n  getBoundingBox(): BoundingBox | undefined {\n    return super.getBoundingBox();\n  }\n\n  addToModifierContext(): this {\n    /* overridden to ignore */\n    return this;\n  }\n\n  getCategory(): string {\n    return ClefNote.CATEGORY;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.getContext());\n    }\n\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n\n    this.glyph.setStave(stave);\n    this.glyph.setYShift(stave.getYForLine(this.clef.line ?? 0) - stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x);\n\n    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n      if (!attachment.getContext()) {\n        attachment.setContext(this.getContext());\n      }\n      attachment.setStave(stave);\n      attachment.setYShift(stave.getYForLine(this.clef_obj.annotation.line) - stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}\n","import { Vex } from './vex';\n\nexport function check<T>(x?: T): T {\n  if (x === undefined) {\n    throw new Vex.RERR('undefined');\n  }\n  return x;\n}\n\n//** TODO: Resolve duplication with Flow */\nexport const GLYPH_PROPS_VALID_TYPES: Record<string, Record<string, string>> = {\n  n: { name: 'note' },\n  r: { name: 'rest' },\n  h: { name: 'harmonic' },\n  m: { name: 'muted' },\n  s: { name: 'slash' },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\n\nimport { Vex } from './vex';\nimport { Note, NoteStruct } from './note';\nimport { TickContext } from './tickcontext';\nimport { RenderContext } from './types/common';\n\nexport interface CrescendoParams {\n  reverse: boolean;\n  height: number;\n  y: number;\n  end_x: number;\n  begin_x: number;\n}\n\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any []) {\n  if (Crescendo.DEBUG) Vex.L('Vex.Flow.Crescendo', args);\n}\n\n// Private helper to draw the hairpin\nfunction renderHairpin(ctx: RenderContext, params: CrescendoParams) {\n  const begin_x = params.begin_x;\n  const end_x = params.end_x;\n  const y = params.y;\n  const half_height = params.height / 2;\n\n  ctx.beginPath();\n\n  if (params.reverse) {\n    ctx.moveTo(begin_x, y - half_height);\n    ctx.lineTo(end_x, y);\n    ctx.lineTo(begin_x, y + half_height);\n  } else {\n    ctx.moveTo(end_x, y - half_height);\n    ctx.lineTo(begin_x, y);\n    ctx.lineTo(end_x, y + half_height);\n  }\n\n  ctx.stroke();\n  ctx.closePath();\n}\n\nexport class Crescendo extends Note {\n  static DEBUG: boolean;\n\n  protected decrescendo: boolean;\n  protected height: number;\n  protected line: number;\n  protected options = {\n    // Extensions to the length of the crescendo on either side\n    extend_left: 0,\n    extend_right: 0,\n    // Vertical shift\n    y_shift: 0,\n  };\n\n  // Initialize the crescendo's properties\n  constructor(note_struct: NoteStruct) {\n    super(note_struct);\n    this.setAttribute('type', 'Crescendo');\n\n    // Whether the object is a decrescendo\n    this.decrescendo = false;\n\n    // The staff line to be placed on\n    this.line = note_struct.line || 0;\n\n    // The height at the open end of the cresc/decresc\n    this.height = 15;\n  }\n\n  // Set the line to center the element on\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Set the full height at the open end\n  setHeight(height: number): this {\n    this.height = height;\n    return this;\n  }\n\n  // Set whether the sign should be a descresendo by passing a bool\n  // to `decresc`\n  setDecrescendo(decresc: boolean): this {\n    this.decrescendo = decresc;\n    return this;\n  }\n\n  // Preformat the note\n  preFormat(): this {\n    this.preFormatted = true;\n    return this;\n  }\n\n  // Render the Crescendo object onto the canvas\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    this.setRendered();\n\n    const tick_context = this.getTickContext();\n    const next_context = TickContext.getNextContext(tick_context);\n\n    const begin_x = this.getAbsoluteX();\n    const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();\n    const y = stave.getYForLine(this.line + -3) + 1;\n\n    L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\n\n    renderHairpin(ctx, {\n      begin_x: begin_x - this.options.extend_left,\n      end_x: end_x + this.options.extend_right,\n      y: y + this.options.y_shift,\n      height: this.height,\n      reverse: this.decrescendo,\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Note } from './note';\n\nexport interface CurveOptions {\n  thickness: number;\n  x_shift: number;\n  y_shift: number;\n  position: number;\n  position_end: number;\n  invert: boolean;\n  cps: { x: number; y: number }[];\n}\n\nexport enum CurvePosition {\n  NEAR_HEAD = 1,\n  NEAR_TOP = 2,\n}\n\nexport class Curve extends Element {\n  protected readonly render_options: CurveOptions;\n  protected from: Note;\n  protected to: Note;\n\n  static get Position(): typeof CurvePosition {\n    return CurvePosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      nearHead: Curve.Position.NEAR_HEAD,\n      nearTop: Curve.Position.NEAR_TOP,\n    };\n  }\n\n  // from: Start note\n  // to: End note\n  // options:\n  //    cps: List of control points\n  //    x_shift: pixels to shift\n  //    y_shift: pixels to shift\n  constructor(from: Note, to: Note, options?: CurveOptions) {\n    super();\n    this.setAttribute('type', 'Curve');\n\n    this.render_options = {\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      position: Curve.Position.NEAR_HEAD,\n      position_end: Curve.Position.NEAR_HEAD,\n      invert: false,\n      cps: [\n        { x: 0, y: 10 },\n        { x: 0, y: 10 },\n      ],\n      ...options,\n    };\n\n    this.from = from;\n    this.to = to;\n  }\n\n  setNotes(from: Note, to: Note): this {\n    if (!from && !to) {\n      throw new Vex.RERR('BadArguments', 'Curve needs to have either first_note or last_note set.');\n    }\n\n    this.from = from;\n    this.to = to;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.from || !this.to;\n  }\n\n  renderCurve(params: { last_y: number; last_x: number; first_y: number; first_x: number; direction: number }): void {\n    const ctx = this.checkContext();\n    const cps = this.render_options.cps;\n\n    const x_shift = this.render_options.x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    const first_x = params.first_x + x_shift;\n    const first_y = params.first_y + y_shift;\n    const last_x = params.last_x - x_shift;\n    const last_y = params.last_y + y_shift;\n    const thickness = this.render_options.thickness;\n\n    const cp_spacing = (last_x - first_x) / (cps.length + 2);\n\n    ctx.beginPath();\n    ctx.moveTo(first_x, first_y);\n    ctx.bezierCurveTo(\n      first_x + cp_spacing + cps[0].x,\n      first_y + cps[0].y * params.direction,\n      last_x - cp_spacing + cps[1].x,\n      last_y + cps[1].y * params.direction,\n      last_x,\n      last_y\n    );\n    ctx.bezierCurveTo(\n      last_x - cp_spacing + cps[1].x,\n      last_y + (cps[1].y + thickness) * params.direction,\n      first_x + cp_spacing + cps[0].x,\n      first_y + (cps[0].y + thickness) * params.direction,\n      first_x,\n      first_y\n    );\n    ctx.stroke();\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.from;\n    const last_note = this.to;\n    let first_x;\n    let last_x;\n    let first_y;\n    let last_y;\n    let stem_direction = 0;\n\n    let metric = 'baseY';\n    let end_metric = 'baseY';\n\n    function getPosition(position: string | number) {\n      return typeof position === 'string' ? Curve.PositionString[position] : position;\n    }\n    const position = getPosition(this.render_options.position);\n    const position_end = getPosition(this.render_options.position_end);\n\n    if (position === Curve.Position.NEAR_TOP) {\n      metric = 'topY';\n      end_metric = 'topY';\n    }\n\n    if (position_end === Curve.Position.NEAR_HEAD) {\n      end_metric = 'baseY';\n    } else if (position_end === Curve.Position.NEAR_TOP) {\n      end_metric = 'topY';\n    }\n\n    if (first_note) {\n      first_x = first_note.getTieRightX();\n      stem_direction = first_note.getStemDirection();\n      first_y = first_note.getStemExtents()[metric];\n    } else {\n      const stave = last_note.checkStave();\n      first_x = stave.getTieStartX();\n      first_y = last_note.getStemExtents()[metric];\n    }\n\n    if (last_note) {\n      last_x = last_note.getTieLeftX();\n      stem_direction = last_note.getStemDirection();\n      last_y = last_note.getStemExtents()[end_metric];\n    } else {\n      const stave = first_note.checkStave();\n      last_x = stave.getTieEndX();\n      last_y = first_note.getStemExtents()[end_metric];\n    }\n\n    this.renderCurve({\n      first_x,\n      last_x,\n      first_y,\n      last_y,\n      direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\n    });\n    return true;\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements dot modifiers for notes.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { TabNote } from './tabnote';\nimport { ModifierContextState } from './modifiercontext';\n\nexport class Dot extends Modifier {\n  protected note?: Note;\n  protected radius: number;\n  protected dot_shiftY: number;\n\n  static get CATEGORY(): string {\n    return 'dots';\n  }\n\n  // Arrange dots inside a ModifierContext.\n  static format(dots: Dot[], state: ModifierContextState): boolean {\n    const right_shift = state.right_shift;\n    const dot_spacing = 1;\n\n    if (!dots || dots.length === 0) return false;\n\n    const dot_list = [];\n    const max_shift_map: Record<string, number> = {};\n    for (let i = 0; i < dots.length; ++i) {\n      const dot = dots[i];\n      const note = dot.getNote();\n\n      let props;\n      let shift;\n\n      // If it's a StaveNote\n      if (note instanceof StaveNote) {\n        props = note.getKeyProps()[dot.getIndex()];\n        shift = note.getRightDisplacedHeadPx();\n      } else if (note instanceof TabNote) {\n        // Else it's a TabNote\n        props = { line: 0.5 }; // Shim key props for dot placement\n        shift = 0;\n      } else {\n        throw new Vex.RERR('Internal', 'Unexpected instance.');\n      }\n\n      const note_id = note.getAttribute('id');\n      dot_list.push({ line: props.line, note, note_id, dot });\n      max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\n    }\n\n    // Sort dots by line number.\n    dot_list.sort((a, b) => b.line - a.line);\n\n    let dot_shift = right_shift;\n    let x_width = 0;\n    let last_line = null;\n    let last_note = null;\n    let prev_dotted_space = null;\n    let half_shiftY = 0;\n\n    for (let i = 0; i < dot_list.length; ++i) {\n      const { dot, note, note_id, line } = dot_list[i];\n\n      // Reset the position of the dot every line.\n      if (line !== last_line || note !== last_note) {\n        dot_shift = max_shift_map[note_id];\n      }\n\n      if (!note.isRest() && line !== last_line) {\n        if (Math.abs(line % 1) === 0.5) {\n          // note is on a space, so no dot shift\n          half_shiftY = 0;\n        } else {\n          // note is on a line, so shift dot to space above the line\n          half_shiftY = 0.5;\n          if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {\n            // previous note on a space, so shift dot to space below the line\n            half_shiftY = -0.5;\n          } else if (line + half_shiftY === prev_dotted_space) {\n            // previous space is dotted, so shift dot to space below the line\n            half_shiftY = -0.5;\n          }\n        }\n      }\n\n      // convert half_shiftY to a multiplier for dots.draw()\n      if (note.isRest()) {\n        dot.dot_shiftY += -half_shiftY;\n      } else {\n        dot.dot_shiftY = -half_shiftY;\n      }\n      prev_dotted_space = line + half_shiftY;\n\n      dot.setXShift(dot_shift);\n      dot_shift += dot.getWidth() + dot_spacing; // spacing\n      x_width = dot_shift > x_width ? dot_shift : x_width;\n      last_line = line;\n      last_note = note;\n    }\n\n    // Update state.\n    state.right_shift += x_width;\n    return true;\n  }\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super();\n    this.setAttribute('type', 'Dot');\n\n    this.position = Modifier.Position.RIGHT;\n\n    this.radius = 2;\n    this.setWidth(5);\n    this.dot_shiftY = 0;\n  }\n\n  getCategory(): string {\n    return Dot.CATEGORY;\n  }\n\n  setNote(note: Note): this {\n    this.note = note;\n\n    if (this.note.getCategory() === 'gracenotes') {\n      this.radius *= 0.5;\n      this.setWidth(3);\n    }\n    return this;\n  }\n\n  setDotShiftY(y: number): this {\n    this.dot_shiftY = y;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    if (!this.note || this.index === undefined) {\n      throw new Vex.RERR('NoNoteIndex', 'Drawing a dot requires a note and an index.');\n    }\n\n    const stave = this.note.checkStave();\n    const lineSpace = stave.getOptions().spacing_between_lines_px;\n\n    const start = this.note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n\n    // Set the starting y coordinate to the base of the stem for TabNotes\n    if (this.note.getCategory() === 'tabnotes') {\n      start.y = this.note.getStemExtents().baseY;\n    }\n\n    const x = start.x + this.x_shift + this.width - this.radius;\n    const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\n\n    ctx.beginPath();\n    ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This class implements a parser for a simple language to generate\n// VexFlow objects.\n\n/* eslint max-classes-per-file: \"off\" */\n\nimport { Vex } from './vex';\nimport { StaveNote } from './stavenote';\nimport { Match, Parser, Result, Rule, RuleFunction } from './parser';\nimport { Articulation } from './articulation';\nimport { FretHandFinger } from './frethandfinger';\nimport { Factory } from './factory';\nimport { RenderContext } from './types/common';\nimport { Accidental } from './accidental';\nimport { Modifier } from './modifier';\nimport { Voice } from './voice';\n\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (EasyScore.DEBUG) Vex.L('Vex.Flow.EasyScore', args);\n}\n\nexport const X = Vex.MakeException('EasyScoreError');\n\ntype IDUpdate = { id: string };\ntype ClassUpdate = { class: string };\n// eslint-disable-next-line\ntype CommitHook = (obj: any, note: StaveNote, builder: Builder) => void;\n\nexport class Grammar {\n  builder: Builder;\n\n  constructor(builder: Builder) {\n    this.builder = builder;\n  }\n\n  begin(): RuleFunction {\n    return this.LINE;\n  }\n\n  LINE(): Rule {\n    return {\n      expect: [this.PIECE, this.PIECES, this.EOL],\n    };\n  }\n  PIECE(): Rule {\n    return {\n      expect: [this.CHORDORNOTE, this.PARAMS],\n      run: () => this.builder.commitPiece(),\n    };\n  }\n  PIECES(): Rule {\n    return {\n      expect: [this.COMMA, this.PIECE],\n      zeroOrMore: true,\n    };\n  }\n  PARAMS(): Rule {\n    return {\n      expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n    };\n  }\n  CHORDORNOTE(): Rule {\n    return {\n      expect: [this.CHORD, this.SINGLENOTE],\n      or: true,\n    };\n  }\n  CHORD(): Rule {\n    return {\n      expect: [this.LPAREN, this.NOTES, this.RPAREN],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addChord(state!.matches[1] as Match[]),\n    };\n  }\n  NOTES(): Rule {\n    return {\n      expect: [this.NOTE],\n      oneOrMore: true,\n    };\n  }\n  NOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n    };\n  }\n  SINGLENOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n      run: (state) => {\n        // eslint-disable-next-line\n        const s = state!;\n        this.builder.addSingleNote(s.matches[0] as string, s.matches[1] as string, s.matches[2] as string);\n      },\n    };\n  }\n  ACCIDENTAL(): Rule {\n    return {\n      expect: [this.ACCIDENTALS],\n      maybe: true,\n    };\n  }\n  DOTS(): Rule {\n    return {\n      expect: [this.DOT],\n      zeroOrMore: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDots(state!.matches),\n    };\n  }\n  TYPE(): Rule {\n    return {\n      expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteType(state!.matches[2] as string),\n    };\n  }\n  DURATION(): Rule {\n    return {\n      expect: [this.SLASH, this.DURATIONS],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDuration(state!.matches[1] as string),\n    };\n  }\n  OPTS(): Rule {\n    return {\n      expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n      maybe: true,\n    };\n  }\n  KEYVALS(): Rule {\n    return {\n      expect: [this.COMMA, this.KEYVAL],\n      zeroOrMore: true,\n    };\n  }\n  KEYVAL(): Rule {\n    const unquote = (str: string) => str.slice(1, -1);\n\n    return {\n      expect: [this.KEY, this.EQUALS, this.VAL],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addNoteOption(state!.matches[0] as string, unquote(state!.matches[2] as string)),\n    };\n  }\n  VAL(): Rule {\n    return {\n      expect: [this.SVAL, this.DVAL],\n      or: true,\n    };\n  }\n\n  KEY(): Rule {\n    return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n  }\n  DVAL(): Rule {\n    return { token: '[\"][^\"]*[\"]' };\n  }\n  SVAL(): Rule {\n    return { token: \"['][^']*[']\" };\n  }\n  NOTENAME(): Rule {\n    return { token: '[a-gA-G]' };\n  }\n  OCTAVE(): Rule {\n    return { token: '[0-9]+' };\n  }\n  ACCIDENTALS(): Rule {\n    return { token: 'bbs|bb|bss|bs|b|db|d|##|#|n|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n  }\n  DURATIONS(): Rule {\n    return { token: '[0-9whq]+' };\n  }\n  TYPES(): Rule {\n    return { token: '[rRsSxX]' };\n  }\n  LPAREN(): Rule {\n    return { token: '[(]' };\n  }\n  RPAREN(): Rule {\n    return { token: '[)]' };\n  }\n  COMMA(): Rule {\n    return { token: '[,]' };\n  }\n  DOT(): Rule {\n    return { token: '[.]' };\n  }\n  SLASH(): Rule {\n    return { token: '[/]' };\n  }\n  MAYBESLASH(): Rule {\n    return { token: '[/]?' };\n  }\n  EQUALS(): Rule {\n    return { token: '[=]' };\n  }\n  LBRACKET(): Rule {\n    return { token: '\\\\[' };\n  }\n  RBRACKET(): Rule {\n    return { token: '\\\\]' };\n  }\n  EOL(): Rule {\n    return { token: '$' };\n  }\n}\n\ninterface NotePiece {\n  key: string;\n  accid?: string | null;\n  octave?: string;\n}\n\nclass Piece {\n  chord: NotePiece[] = [];\n  duration: string;\n  dots: number = 0;\n  type?: string;\n  options: { [x: string]: string } = {};\n  constructor(duration: string) {\n    this.duration = duration;\n  }\n}\n\ninterface BuilderElements {\n  notes: StaveNote[];\n  accidentals: (Accidental | undefined)[][];\n}\n\ninterface BuilderOptions {\n  stem?: string;\n  clef?: string;\n  // eslint-disable-next-line\n  [x: string]: any; // allow arbitrary options via reset(...)\n}\n\nexport class Builder {\n  factory: Factory;\n  elements!: BuilderElements;\n  options!: BuilderOptions;\n  commitHooks: CommitHook[] = [];\n  piece!: Piece;\n  rollingDuration!: string;\n\n  constructor(factory: Factory) {\n    this.factory = factory;\n    this.reset();\n  }\n\n  reset(options: BuilderOptions = {}): void {\n    this.options = {\n      stem: 'auto',\n      clef: 'treble',\n    };\n    this.elements = {\n      notes: [],\n      accidentals: [],\n    };\n    this.rollingDuration = '8';\n    this.resetPiece();\n    Object.assign(this.options, options);\n  }\n\n  getFactory(): Factory {\n    return this.factory;\n  }\n\n  getElements(): BuilderElements {\n    return this.elements;\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.commitHooks.push(commitHook);\n  }\n\n  resetPiece(): void {\n    L('resetPiece');\n    this.piece = new Piece(this.rollingDuration);\n  }\n\n  setNoteDots(dots: Match[]): void {\n    L('setNoteDots:', dots);\n    if (dots) this.piece.dots = dots.length;\n  }\n\n  setNoteDuration(duration?: string): void {\n    L('setNoteDuration:', duration);\n    this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n  }\n\n  setNoteType(type?: string): void {\n    L('setNoteType:', type);\n    if (type) this.piece.type = type;\n  }\n\n  addNoteOption(key: string, value: string): void {\n    L('addNoteOption: key:', key, 'value:', value);\n    this.piece.options[key] = value;\n  }\n\n  addNote(key?: string, accid?: string | null, octave?: string): void {\n    L('addNote:', key, accid, octave);\n    this.piece.chord.push({\n      key: key as string,\n      accid: accid,\n      octave: octave,\n    });\n  }\n\n  addSingleNote(key: string, accid?: string | null, octave?: string): void {\n    L('addSingleNote:', key, accid, octave);\n    this.addNote(key, accid, octave);\n  }\n\n  // notes is an array with 3 entries\n  addChord(notes: Match[]): void {\n    L('startChord');\n    if (typeof notes[0] !== 'object') {\n      this.addSingleNote(notes[0]);\n    } else {\n      notes.forEach((n: Match) => {\n        if (n) this.addNote(...(n as string[])); // n => [string, string | null, string]\n      });\n    }\n    L('endChord');\n  }\n\n  commitPiece(): void {\n    L('commitPiece');\n    const { factory } = this;\n\n    if (!factory) return;\n\n    const options = { ...this.options, ...this.piece.options };\n\n    // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n    if (options.stem === undefined) {\n      throw new Vex.RERR('options.stem is not defined');\n    }\n    if (options.clef === undefined) {\n      throw new Vex.RERR('options.clef is not defined');\n    }\n    const stem: string = options.stem.toLowerCase(); // e.g., auto | up | down\n    const clef: string = options.clef; // e.g., treble | bass\n\n    const autoStem = stem === 'auto';\n    const stemDirection = !autoStem && stem === 'up' ? StaveNote.STEM_UP : StaveNote.STEM_DOWN;\n\n    // Build StaveNotes.\n    const { chord, duration, dots, type } = this.piece;\n    const keys: string[] = chord.map((notePiece) => notePiece.key + '/' + notePiece.octave);\n    const note = factory.StaveNote({\n      keys,\n      duration,\n      dots,\n      type,\n      clef,\n      auto_stem: autoStem,\n    });\n    if (!autoStem) note.setStemDirection(stemDirection);\n\n    // Attach accidentals.\n    const accidentals: (Accidental | undefined)[] = [];\n    chord.forEach((notePiece: NotePiece, index: number) => {\n      const accid = notePiece.accid;\n      if (typeof accid === 'string') {\n        const accidental: Accidental = factory.Accidental({ type: accid });\n        // TODO: Remove \"as unknown as Modifier\".\n        // This compilation warning will be fixed after factory & accidental are migrated to typescript.\n        note.addAccidental(index, accidental as unknown as Modifier);\n        accidentals.push(accidental);\n      } else {\n        accidentals.push(undefined);\n      }\n    });\n\n    // Attach dots.\n    for (let i = 0; i < dots; i++) note.addDotToAll();\n\n    this.commitHooks.forEach((fn) => fn(options, note, this));\n\n    this.elements.notes.push(note);\n    this.elements.accidentals.push(accidentals);\n    this.resetPiece();\n  }\n}\n\nfunction setId(options: IDUpdate, note: StaveNote) {\n  if (options.id === undefined) return;\n  note.setAttribute('id', options.id);\n}\n\nfunction setClass(options: ClassUpdate, note: StaveNote) {\n  if (!options.class) return;\n  const commaSeparatedRegex = /\\s*,\\s*/;\n  options.class.split(commaSeparatedRegex).forEach((className: string) => note.addClass(className));\n}\n\nexport interface EasyScoreOptions {\n  factory?: Factory;\n  builder?: Builder;\n  commitHooks?: CommitHook[];\n  throwOnError?: boolean;\n}\n\nexport interface EasyScoreDefaults {\n  clef: string;\n  time: string;\n  stem: string;\n  // eslint-disable-next-line\n  [x: string]: any; // allow arbitrary properties via set(defaults)\n}\n\nexport class EasyScore {\n  static DEBUG: boolean = false;\n\n  defaults: EasyScoreDefaults;\n  options!: EasyScoreOptions;\n  factory!: Factory;\n  builder!: Builder;\n  grammar!: Grammar;\n  parser!: Parser;\n\n  constructor(options: EasyScoreOptions = {}) {\n    this.setOptions(options);\n    this.defaults = {\n      clef: 'treble',\n      time: '4/4',\n      stem: 'auto',\n    };\n  }\n\n  set(defaults: EasyScoreDefaults): this {\n    Object.assign(this.defaults, defaults);\n    return this;\n  }\n\n  setOptions(options: EasyScoreOptions): this {\n    this.options = {\n      commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook],\n      throwOnError: false,\n      ...options,\n    };\n\n    // eslint-disable-next-line\n    this.factory = this.options.factory!; // ! operator, because we know it is set in Factory.EasyScore()\n    this.builder = this.options.builder || new Builder(this.factory);\n    this.grammar = new Grammar(this.builder);\n    this.parser = new Parser(this.grammar);\n    // eslint-disable-next-line\n    this.options.commitHooks!.forEach((commitHook: CommitHook) => this.addCommitHook(commitHook)); // ! operator, because this.options.commitHooks is set in the first line of this method.\n    return this;\n  }\n\n  setContext(context: RenderContext): this {\n    if (this.factory) this.factory.setContext(context);\n    return this;\n  }\n\n  parse(line: string, options: BuilderOptions = {}): Result {\n    this.builder.reset(options);\n    const result = this.parser.parse(line);\n    if (!result.success && this.options.throwOnError) {\n      throw new X('Error parsing line: ' + line, result);\n    }\n    return result;\n  }\n\n  // TODO: Add stricter typing after migrating Factory\n  // eslint-disable-next-line\n  beam(notes: StaveNote[], options: any = {}): StaveNote[] {\n    this.factory.Beam({ notes, options });\n    return notes;\n  }\n\n  // TODO: Add stricter typing after migrating Factory\n  // eslint-disable-next-line\n  tuplet(notes: StaveNote[], options: any = {}): StaveNote[] {\n    this.factory.Tuplet({ notes, options });\n    return notes;\n  }\n\n  notes(line: string, options: BuilderOptions = {}): StaveNote[] {\n    options = { clef: this.defaults.clef, stem: this.defaults.stem, ...options };\n    this.parse(line, options);\n    return this.builder.getElements().notes;\n  }\n\n  // TODO: Add stricter typing after migrating Factory\n  // eslint-disable-next-line\n  voice(notes: StaveNote[], options: any): Voice {\n    options = { time: this.defaults.time, ...options };\n    return this.factory.Voice(options).addTickables(notes);\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.builder.addCommitHook(commitHook);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a generic base class for VexFlow, with implementations\n// of general functions and properties that can be inherited by all VexFlow elements.\n\nimport { Vex } from './vex';\nimport { Registry } from './registry';\nimport { Flow } from './tables';\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { RenderContext } from './types/common';\n\n/** Element attributes. */\nexport interface ElementAttributes {\n  // eslint-disable-next-line\n  [name: string]: any;\n  id: string;\n  // eslint-disable-next-line\n  el?: any;\n  type: string;\n  classes: Record<string, boolean>;\n}\n\n/** Element style */\nexport interface ElementStyle {\n  shadowColor?: string;\n  shadowBlur?: string;\n  fillStyle?: string;\n  strokeStyle?: string;\n  lineWidth?: number;\n}\n\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n */\nexport abstract class Element {\n  protected static ID: number = 1000;\n  private context?: RenderContext;\n  protected rendered: boolean;\n  protected style?: ElementStyle;\n  private attrs: ElementAttributes;\n  protected boundingBox?: BoundingBox;\n  protected fontStack: Font[];\n  protected musicFont: Font;\n  protected registry?: Registry;\n\n  static newID(): string {\n    return `auto${Element.ID++}`;\n  }\n\n  /** Constructor. */\n  constructor({ type }: { type?: string } = {}) {\n    this.attrs = {\n      id: Element.newID(),\n      el: undefined,\n      type: type || 'Base',\n      classes: {},\n    };\n\n    this.rendered = false;\n    this.fontStack = Flow.DEFAULT_FONT_STACK;\n    this.musicFont = Flow.DEFAULT_FONT_STACK[0];\n\n    // If a default registry exist, then register with it right away.\n    Registry.getDefaultRegistry()?.register(this);\n  }\n\n  /** Sets music fonts stack. */\n  setFontStack(fontStack: Font[]): this {\n    this.fontStack = fontStack;\n    this.musicFont = fontStack[0];\n    return this;\n  }\n\n  /** gets music fonts stack. */\n  getFontStack(): Font[] {\n    return this.fontStack;\n  }\n\n  /** Sets the draw style of a stemmable note. */\n  setStyle(style: ElementStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  /** Gets the draw style of a stemmable note. */\n  getStyle(): ElementStyle | undefined {\n    return this.style;\n  }\n\n  /** Applies current style to Canvas `context`. */\n  applyStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n\n    context.save();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    if (style.lineWidth) context.setLineWidth(style.lineWidth);\n    return this;\n  }\n\n  /** Restores style of Canvas `context`. */\n  restoreStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n    context.restore();\n    return this;\n  }\n\n  /** Draws with style of an element. */\n  drawWithStyle(): void {\n    this.checkContext();\n    this.applyStyle();\n    this.draw();\n    this.restoreStyle();\n  }\n\n  /** Draws an element. */\n  // eslint-disable-next-line\n  abstract draw(...args: any[]): void;\n\n  /** Checkes if it has a class label (An element can have multiple class labels).  */\n  hasClass(className: string): boolean {\n    return this.attrs.classes[className] === true;\n  }\n\n  /** Adds a class label (An element can have multiple class labels).  */\n  addClass(className: string): this {\n    this.attrs.classes[className] = true;\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.attrs.id,\n        name: 'class',\n        value: className,\n        oldValue: undefined,\n      });\n    }\n    return this;\n  }\n\n  /** Removes a class label (An element can have multiple class labels).  */\n  removeClass(className: string): this {\n    delete this.attrs.classes[className];\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.attrs.id,\n        name: 'class',\n        value: undefined,\n        oldValue: className,\n      });\n    }\n    return this;\n  }\n\n  /** Call back from registry after the element is registered. */\n  onRegister(registry: Registry): this {\n    this.registry = registry;\n    return this;\n  }\n\n  /** Returns the rendered status. */\n  isRendered(): boolean {\n    return this.rendered;\n  }\n\n  /** Sets the rendered status. */\n  setRendered(rendered = true): this {\n    this.rendered = rendered;\n    return this;\n  }\n\n  /** Returns the element attributes. */\n  getAttributes(): ElementAttributes {\n    return this.attrs;\n  }\n\n  /** Returns an attribute. */\n  // eslint-disable-next-line\n  getAttribute(name: string): any {\n    return this.attrs[name];\n  }\n\n  /** Sets an attribute. */\n  // eslint-disable-next-line\n  setAttribute(name: string, value: any): this {\n    const oldID = this.attrs.id;\n    const oldValue = this.attrs[name];\n    this.attrs[name] = value;\n    if (this.registry) {\n      // Register with old id to support id changes.\n      this.registry.onUpdate({ id: oldID, name, value, oldValue });\n    }\n    return this;\n  }\n\n  /** Returns the context. */\n  getContext(): RenderContext | undefined {\n    return this.context;\n  }\n\n  /** Sets the context. */\n  setContext(context?: RenderContext): this {\n    this.context = context;\n    return this;\n  }\n\n  /** Gets the boundingBox. */\n  getBoundingBox(): BoundingBox | undefined {\n    return this.boundingBox;\n  }\n\n  /** Validates and returns the context. */\n  checkContext(): RenderContext {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', 'No rendering context attached to instance');\n    }\n    return this.context;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a high level API around VexFlow. It will eventually\n// become the canonical way to use VexFlow.\n//\n// *This API is currently DRAFT*\n\nimport { Vex } from './vex';\nimport { Accidental } from './accidental';\nimport { Articulation } from './articulation';\nimport { Annotation } from './annotation';\nimport { ChordSymbol } from './chordsymbol';\nimport { Formatter } from './formatter';\n// import { WidthFormatter } from './widthformatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { StringNumber } from './stringnumber';\nimport { TextDynamics } from './textdynamics';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Renderer } from './renderer';\nimport { Stave } from './stave';\nimport { StaveTie } from './stavetie';\nimport { StaveLine } from './staveline';\nimport { StaveNote } from './stavenote';\nimport { GlyphNote } from './glyphnote';\nimport { RepeatNote } from './repeatnote';\nimport { StaveConnector } from './staveconnector';\nimport { System } from './system';\nimport { TickContext } from './tickcontext';\nimport { Tuplet } from './tuplet';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { Curve } from './curve';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { EasyScore } from './easyscore';\nimport { TimeSigNote } from './timesignote';\nimport { KeySigNote } from './keysignote';\nimport { ClefNote } from './clefnote';\nimport { PedalMarking } from './pedalmarking';\nimport { TextBracket } from './textbracket';\nimport { VibratoBracket } from './vibratobracket';\nimport { GhostNote } from './ghostnote';\nimport { BarNote } from './barnote';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextNote } from './textnote';\nimport { TextFont } from './textfont';\n\n// To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`.\nfunction L(...args) {\n  if (Factory.DEBUG) Vex.L('Vex.Flow.Factory', args);\n}\n\nexport const X = Vex.MakeException('FactoryError');\n\nfunction setDefaults(params = {}, defaults) {\n  const default_options = defaults.options;\n  params = Object.assign(defaults, params);\n  params.options = Object.assign(default_options, params.options);\n  return params;\n}\n\nexport class Factory {\n  constructor(options) {\n    L('New factory: ', options);\n    const defaults = {\n      stave: {\n        space: 10,\n      },\n      renderer: {\n        context: null,\n        elementId: '',\n        backend: Renderer.Backends.SVG,\n        width: 500,\n        height: 200,\n        background: '#FFF',\n      },\n      font: {\n        face: 'Arial',\n        point: 10,\n        style: '',\n      },\n    };\n\n    this.options = defaults;\n    this.setOptions(options);\n  }\n\n  static newFromElementId(elementId, width = 500, height = 200) {\n    return new Factory({ renderer: { elementId, width, height } });\n  }\n\n  reset() {\n    this.renderQ = [];\n    this.systems = [];\n    this.staves = [];\n    this.voices = [];\n    this.stave = null; // current stave\n  }\n\n  getOptions() {\n    return this.options;\n  }\n  setOptions(options) {\n    for (const key of ['stave', 'renderer', 'font']) {\n      Object.assign(this.options[key], options[key]);\n    }\n    if (this.options.renderer.elementId !== null || this.options.renderer.context) {\n      this.initRenderer();\n    }\n\n    this.reset();\n  }\n\n  initRenderer() {\n    const { elementId, backend, width, height, background } = this.options.renderer;\n    if (elementId === '') {\n      throw new X('HTML DOM element not set in Factory');\n    }\n\n    this.context = Renderer.buildContext(elementId, backend, width, height, background);\n  }\n\n  getContext() {\n    return this.context;\n  }\n  setContext(context) {\n    this.context = context;\n    return this;\n  }\n  getStave() {\n    return this.stave;\n  }\n  getVoices() {\n    return this.voices;\n  }\n\n  // Returns pixels from current stave spacing.\n  space(spacing) {\n    return this.options.stave.space * spacing;\n  }\n\n  Stave(params) {\n    params = setDefaults(params, {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - this.space(1),\n      options: {\n        spacing_between_lines_px: this.options.stave.space,\n      },\n    });\n\n    const stave = new Stave(params.x, params.y, params.width, params.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  TabStave(params) {\n    params = setDefaults(params, {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - this.space(1),\n      options: {\n        spacing_between_lines_px: this.options.stave.space * 1.3,\n      },\n    });\n\n    const stave = new TabStave(params.x, params.y, params.width, params.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  StaveNote(noteStruct) {\n    const note = new StaveNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GlyphNote(glyph, noteStruct, options) {\n    const note = new GlyphNote(glyph, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  RepeatNote(type, noteStruct, options) {\n    const note = new RepeatNote(type, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GhostNote(noteStruct) {\n    const ghostNote = new GhostNote(noteStruct);\n    if (this.stave) ghostNote.setStave(this.stave);\n    ghostNote.setContext(this.context);\n    this.renderQ.push(ghostNote);\n    return ghostNote;\n  }\n\n  TextNote(textNoteStruct) {\n    const textNote = new TextNote(textNoteStruct);\n    if (this.stave) textNote.setStave(this.stave);\n    textNote.setContext(this.context);\n    this.renderQ.push(textNote);\n    return textNote;\n  }\n\n  BarNote(params) {\n    params = setDefaults(params, {\n      type: 'single',\n      options: {},\n    });\n\n    const barNote = new BarNote(params.type);\n    if (this.stave) barNote.setStave(this.stave);\n    barNote.setContext(this.context);\n    this.renderQ.push(barNote);\n    return barNote;\n  }\n\n  ClefNote(params) {\n    params = setDefaults(params, {\n      type: 'treble',\n      options: {\n        size: 'default',\n      },\n    });\n\n    const clefNote = new ClefNote(params.type, params.options.size, params.options.annotation);\n    if (this.stave) clefNote.setStave(this.stave);\n    clefNote.setContext(this.context);\n    this.renderQ.push(clefNote);\n    return clefNote;\n  }\n\n  TimeSigNote(params) {\n    params = setDefaults(params, {\n      time: '4/4',\n      options: {},\n    });\n\n    const timeSigNote = new TimeSigNote(params.time);\n    if (this.stave) timeSigNote.setStave(this.stave);\n    timeSigNote.setContext(this.context);\n    this.renderQ.push(timeSigNote);\n    return timeSigNote;\n  }\n\n  KeySigNote(params) {\n    const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n    if (this.stave) keySigNote.setStave(this.stave);\n    keySigNote.setContext(this.context);\n    this.renderQ.push(keySigNote);\n    return keySigNote;\n  }\n\n  TabNote(noteStruct) {\n    const note = new TabNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GraceNote(noteStruct) {\n    const note = new GraceNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    return note;\n  }\n\n  GraceNoteGroup(params) {\n    const group = new GraceNoteGroup(params.notes, params.slur);\n    group.setContext(this.context);\n    return group;\n  }\n\n  Accidental(params) {\n    params = setDefaults(params, {\n      type: null,\n      options: {},\n    });\n\n    const accid = new Accidental(params.type);\n    accid.setContext(this.context);\n    return accid;\n  }\n\n  Annotation(params) {\n    params = setDefaults(params, {\n      text: 'p',\n      vJustify: 'below',\n      hJustify: 'center',\n      fontFamily: 'Times',\n      fontSize: 14,\n      fontWeight: 'bold italic',\n      options: {},\n    });\n\n    const annotation = new Annotation(params.text);\n    annotation.setJustification(params.hJustify);\n    annotation.setVerticalJustification(params.vJustify);\n    annotation.setFont(params.fontFamily, params.fontSize, params.fontWeight);\n    annotation.setContext(this.context);\n    return annotation;\n  }\n\n  ChordSymbol(params) {\n    params = setDefaults(params, {\n      vJustify: 'top',\n      hJustify: 'center',\n      kerning: true,\n      reportWidth: true,\n      options: {},\n    });\n\n    const chordSymbol = new ChordSymbol();\n    chordSymbol.setHorizontal(params.hJustify);\n    chordSymbol.setVertical(params.vJustify);\n    chordSymbol.setEnableKerning(params.kerning);\n    chordSymbol.setReportWidth(params.reportWidth);\n    // There is a default font based on the engraving font.  Only set then\n    // font if it is specific, else use the default\n    if (typeof params.fontFamily === 'string') {\n      chordSymbol.setFont(params.fontFamily, params.fontSize, params.fontWeight);\n    } else if (typeof params.fontSize === 'number') {\n      chordSymbol.setFontSize(params.fontSize);\n    }\n    chordSymbol.setContext(this.context);\n    return chordSymbol;\n  }\n\n  Articulation(params) {\n    params = setDefaults(params, {\n      type: 'a.',\n      position: 'above',\n      options: {},\n    });\n\n    const articulation = new Articulation(params.type);\n    articulation.setPosition(params.position);\n    articulation.setContext(this.context);\n    return articulation;\n  }\n\n  TextDynamics(params) {\n    params = setDefaults(params, {\n      text: 'p',\n      duration: 'q',\n      dots: 0,\n      line: 0,\n      options: {},\n    });\n\n    const text = new TextDynamics({\n      text: params.text,\n      line: params.line,\n      duration: params.duration,\n      dots: params.dots,\n    });\n\n    if (this.stave) text.setStave(this.stave);\n    text.setContext(this.context);\n    this.renderQ.push(text);\n    return text;\n  }\n\n  Fingering(params) {\n    params = setDefaults(params, {\n      number: '0',\n      position: 'left',\n      options: {},\n    });\n\n    const fingering = new FretHandFinger(params.number);\n    fingering.setPosition(params.position);\n    fingering.setContext(this.context);\n    return fingering;\n  }\n\n  StringNumber(params) {\n    params = setDefaults(params, {\n      number: '0',\n      position: 'left',\n      options: {},\n    });\n\n    const stringNumber = new StringNumber(params.number);\n    stringNumber.setPosition(params.position);\n    stringNumber.setContext(this.context);\n    return stringNumber;\n  }\n\n  TickContext() {\n    return new TickContext().setContext(this.context);\n  }\n\n  ModifierContext() {\n    return new ModifierContext();\n  }\n\n  MultiMeasureRest(params) {\n    const multimeasurerest = new MultiMeasureRest(params.number_of_measures, params);\n    multimeasurerest.setContext(this.context);\n    this.renderQ.push(multimeasurerest);\n    return multimeasurerest;\n  }\n\n  Voice(params) {\n    params = setDefaults(params, {\n      time: '4/4',\n      options: {},\n    });\n    const voice = new Voice(params.time, params.options);\n    this.voices.push(voice);\n    return voice;\n  }\n\n  StaveConnector(params) {\n    params = setDefaults(params, {\n      top_stave: null,\n      bottom_stave: null,\n      type: 'double',\n      options: {},\n    });\n    const connector = new StaveConnector(params.top_stave, params.bottom_stave);\n    connector.setType(params.type).setContext(this.context);\n    this.renderQ.push(connector);\n    return connector;\n  }\n\n  Formatter(options) {\n    return new Formatter(options);\n  }\n\n  Tuplet(params) {\n    params = setDefaults(params, {\n      notes: [],\n      options: {},\n    });\n\n    const tuplet = new Tuplet(params.notes, params.options).setContext(this.context);\n    this.renderQ.push(tuplet);\n    return tuplet;\n  }\n\n  Beam(params) {\n    params = setDefaults(params, {\n      notes: [],\n      options: {\n        autoStem: false,\n        secondaryBeamBreaks: [],\n      },\n    });\n\n    const beam = new Beam(params.notes, params.options.autoStem).setContext(this.context);\n    beam.breakSecondaryAt(params.options.secondaryBeamBreaks);\n    this.renderQ.push(beam);\n    return beam;\n  }\n\n  Curve(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      options: {},\n    });\n\n    const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n    this.renderQ.push(curve);\n    return curve;\n  }\n\n  StaveTie(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      first_indices: [0],\n      last_indices: [0],\n      text: null,\n      options: {\n        direction: undefined,\n      },\n    });\n\n    const tie = new StaveTie(\n      {\n        first_note: params.from,\n        last_note: params.to,\n        first_indices: params.first_indices,\n        last_indices: params.last_indices,\n      },\n      params.text\n    );\n\n    if (params.options.direction) tie.setDirection(params.options.direction);\n    tie.setContext(this.context);\n    this.renderQ.push(tie);\n    return tie;\n  }\n\n  StaveLine(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      first_indices: [0],\n      last_indices: [0],\n      options: {},\n    });\n\n    const line = new StaveLine({\n      first_note: params.from,\n      last_note: params.to,\n      first_indices: params.first_indices,\n      last_indices: params.last_indices,\n    });\n\n    if (params.options.text) line.setText(params.options.text);\n    if (params.options.font) line.setFont(params.options.font);\n\n    line.setContext(this.context);\n    this.renderQ.push(line);\n    return line;\n  }\n\n  VibratoBracket(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      options: {\n        harsh: false,\n      },\n    });\n\n    const vibratoBracket = new VibratoBracket({\n      start: params.from,\n      stop: params.to,\n    });\n\n    if (params.options.line) vibratoBracket.setLine(params.options.line);\n    if (params.options.harsh) vibratoBracket.setHarsh(params.options.harsh);\n\n    vibratoBracket.setContext(this.context);\n    this.renderQ.push(vibratoBracket);\n\n    return vibratoBracket;\n  }\n\n  TextBracket(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      text: '',\n      options: {\n        superscript: '',\n        position: 1,\n      },\n    });\n\n    const textBracket = new TextBracket({\n      start: params.from,\n      stop: params.to,\n      text: params.text,\n      superscript: params.options.superscript,\n      position: params.options.position,\n    });\n\n    if (params.options.line) textBracket.setLine(params.options.line);\n    if (params.options.font) textBracket.setFont(params.options.font);\n\n    textBracket.setContext(this.context);\n    this.renderQ.push(textBracket);\n    return textBracket;\n  }\n\n  System(params = {}) {\n    params.factory = this;\n    const system = new System(params).setContext(this.context);\n    this.systems.push(system);\n    return system;\n  }\n\n  EasyScore(params = {}) {\n    params.factory = this;\n    return new EasyScore(params);\n  }\n\n  PedalMarking(params = {}) {\n    params = setDefaults(params, {\n      notes: [],\n      options: {\n        style: 'mixed',\n      },\n    });\n\n    const pedal = new PedalMarking(params.notes);\n    pedal.setType(PedalMarking.typeString[params.options.style]);\n    pedal.setContext(this.context);\n    this.renderQ.push(pedal);\n    return pedal;\n  }\n\n  NoteSubGroup(params = {}) {\n    params = setDefaults(params, {\n      notes: [],\n      options: {},\n    });\n\n    const group = new NoteSubGroup(params.notes);\n    group.setContext(this.context);\n    return group;\n  }\n\n  TextFont(params = {}) {\n    params.factory = this;\n    const textFont = new TextFont(params);\n    return textFont;\n  }\n\n  draw() {\n    this.systems.forEach((i) => i.setContext(this.context).format());\n    this.staves.forEach((i) => i.setContext(this.context).draw());\n    this.voices.forEach((i) => i.setContext(this.context).draw());\n    this.renderQ.forEach((i) => {\n      if (!i.isRendered()) i.setContext(this.context).draw();\n    });\n    this.systems.forEach((i) => i.setContext(this.context).draw());\n    this.reset();\n  }\n}\n","import { BravuraFont } from './fonts/bravura_glyphs';\nimport { BravuraMetrics } from './fonts/bravura_metrics';\nimport { GonvilleFont } from './fonts/gonville_glyphs';\nimport { GonvilleMetrics } from './fonts/gonville_metrics';\nimport { PetalumaFont } from './fonts/petaluma_glyphs';\nimport { PetalumaMetrics } from './fonts/petaluma_metrics';\nimport { LelandFont } from './fonts/leland_glyphs';\nimport { LelandMetrics } from './fonts/leland_metrics';\nimport { CustomFont } from './fonts/custom_glyphs';\nimport { CustomMetrics } from './fonts/custom_metrics';\n\nexport interface FontData {\n  glyphs: Record<string, FontGlyph>;\n  fontFamily?: string;\n  resolution: number;\n  generatedOn?: string;\n}\n\nexport interface FontGlyph {\n  x_min: number;\n  x_max: number;\n  y_min?: number;\n  y_max?: number;\n  ha: number;\n  o?: string;\n  leftSideBearing?: number;\n  advanceWidth?: number;\n  cached_outline?: string[];\n}\n\nclass Font {\n  protected name: string;\n  // eslint-disable-next-line\n  protected metrics: Record<string, any>;\n  protected readonly fontData: FontData;\n\n  // eslint-disable-next-line\n  constructor(name: string, metrics: Record<string, any>, fontData: FontData) {\n    this.name = name;\n    this.metrics = metrics;\n    this.fontData = fontData;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getResolution(): number {\n    return this.fontData.resolution;\n  }\n\n  // eslint-disable-next-line\n  getMetrics(): Record<string, any> {\n    return this.metrics;\n  }\n\n  // eslint-disable-next-line\n  lookupMetric(key: string, defaultValue?: Record<string, any> | number): any {\n    const parts = key.split('.');\n    let val = this.metrics;\n    // console.log('lookupMetric:', key);\n    for (let i = 0; i < parts.length; i++) {\n      if (val[parts[i]] === undefined) {\n        return defaultValue;\n      }\n      val = val[parts[i]];\n    }\n\n    // console.log('found:', key, val);\n    return val;\n  }\n\n  getFontData(): FontData {\n    return this.fontData;\n  }\n\n  getGlyphs(): Record<string, FontGlyph> {\n    return this.fontData.glyphs;\n  }\n}\n\nconst Fonts = {\n  Bravura: new Font('Bravura', BravuraMetrics, BravuraFont),\n  Gonville: new Font('Gonville', GonvilleMetrics, GonvilleFont),\n  Petaluma: new Font('Petaluma', PetalumaMetrics, PetalumaFont),\n  Leland: new Font('Leland', LelandMetrics, LelandFont),\n  Custom: new Font('Custom', CustomMetrics, CustomFont),\n};\n\nconst DefaultFontStack = [Fonts.Bravura, Fonts.Gonville, Fonts.Custom];\n\nexport { Fonts, DefaultFontStack, Font };\n","export const BravuraFont = {\n  \"glyphs\": {\n    \"bracketTop\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": 0,\n      \"y_max\": 295,\n      \"ha\": 295,\n      \"o\": \"m 0 168 l 0 0 l 180 0 b 674 390 410 43 616 150 b 675 405 675 396 675 400 b 664 425 675 416 671 422 b 628 405 651 425 635 415 b 157 179 613 389 432 199 l 12 179 b 0 168 3 179 0 177 z\"\n    },\n    \"bracketBottom\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -295,\n      \"y_max\": 0,\n      \"ha\": 295,\n      \"o\": \"m 0 0 l 0 -168 b 12 -179 0 -177 3 -179 l 157 -179 b 628 -405 432 -199 613 -389 b 664 -425 635 -415 651 -425 b 675 -405 671 -422 675 -416 b 674 -390 675 -400 675 -396 b 180 0 616 -150 410 -43 z\"\n    },\n    \"barlineTick\": {\n      \"x_min\": 0,\n      \"x_max\": 36,\n      \"y_min\": 868,\n      \"y_max\": 1120,\n      \"ha\": 252,\n      \"o\": \"m 52 1250 l 52 1613 l 0 1613 l 0 1250 z\"\n    },\n    \"breathMarkTick\": {\n      \"x_min\": 0,\n      \"x_max\": 500,\n      \"y_min\": 0,\n      \"y_max\": 502,\n      \"ha\": 502,\n      \"o\": \"m 0 374 b 9 334 0 367 0 343 b 179 19 40 312 164 121 b 192 0 179 3 186 0 b 210 19 197 0 207 6 b 698 701 245 197 507 658 b 720 714 714 704 720 711 b 698 723 720 720 711 723 b 197 186 455 714 210 202 b 186 176 194 179 189 176 b 176 186 179 176 176 186 b 9 367 143 266 27 359 b 0 374 6 372 3 374 z\"\n    },\n    \"segno\": {\n      \"x_min\": 4,\n      \"x_max\": 550,\n      \"y_min\": -27,\n      \"y_max\": 759,\n      \"ha\": 786,\n      \"o\": \"m 29 687 b 295 449 75 582 284 454 b 304 438 301 446 304 444 b 295 415 304 432 301 425 b 78 22 285 395 78 22 b 73 3 75 16 73 9 b 114 -39 73 -20 91 -39 b 150 -17 128 -39 143 -30 b 377 395 150 -17 373 386 b 395 402 377 393 389 402 b 704 176 416 397 704 312 b 624 75 704 120 670 82 b 613 73 621 75 616 73 b 562 138 586 73 562 94 l 562 154 b 485 249 562 209 526 249 b 468 246 480 249 474 248 b 366 153 415 233 366 210 b 540 -12 366 65 455 -12 b 600 -1 559 -12 579 -9 b 792 251 716 37 792 131 b 789 292 792 264 791 278 b 523 588 768 451 540 579 b 498 611 505 598 498 603 b 501 619 498 613 500 616 b 732 1032 508 631 732 1032 b 737 1053 736 1040 737 1045 b 697 1093 737 1076 719 1093 b 661 1073 683 1093 668 1086 b 423 647 661 1073 432 660 b 410 635 419 639 416 635 b 396 639 406 635 402 636 b 128 792 383 644 166 727 b 108 868 120 808 108 838 b 186 958 108 907 125 948 l 194 958 b 217 939 203 958 213 955 l 220 929 b 325 805 230 890 252 805 b 425 901 384 805 425 840 b 413 969 425 923 420 946 b 220 1060 390 1035 294 1060 b 6 793 120 1060 6 936 b 29 687 6 759 13 723 z m 680 589 b 762 671 726 589 762 626 b 680 753 762 717 726 753 b 598 671 635 753 598 717 b 680 589 598 626 635 589 z m 120 298 b 202 380 166 298 202 334 b 120 462 202 425 166 462 b 37 380 75 462 37 425 b 120 298 37 334 75 298 z\"\n    },\n    \"coda\": {\n      \"x_min\": -4,\n      \"x_max\": 955,\n      \"y_min\": -158,\n      \"y_max\": 898,\n      \"ha\": 1056,\n      \"o\": \"m -6 541 b 20 507 -6 523 0 507 l 210 507 b 660 0 226 238 426 19 l 660 -202 b 694 -228 660 -222 675 -228 b 729 -202 713 -228 729 -222 l 729 0 b 1178 507 962 19 1164 238 l 1349 507 b 1375 541 1369 507 1375 523 b 1349 576 1375 560 1369 576 l 1178 576 b 729 1083 1164 847 962 1064 l 729 1269 b 694 1293 729 1287 713 1293 b 660 1269 675 1293 660 1287 l 660 1083 b 210 576 426 1064 226 848 l 20 576 b -6 541 0 576 -6 560 z m 940 576 l 729 576 l 729 1002 b 940 576 930 985 940 809 z m 729 507 l 940 507 b 729 69 936 287 909 91 z m 455 576 b 660 1002 455 809 455 985 l 660 576 z m 660 507 l 660 69 b 455 507 474 91 456 285 z\"\n    },\n    \"gClef\": {\n      \"x_min\": 0,\n      \"x_max\": 671,\n      \"y_min\": -658,\n      \"y_max\": 1098,\n      \"ha\": 1756,\n      \"o\": \"m 524 -363 b 624 -354 557 -363 595 -360 b 645 -367 639 -351 642 -350 b 684 -657 662 -464 684 -589 b 455 -896 684 -870 540 -896 b 340 -854 377 -896 340 -873 b 386 -829 340 -844 353 -840 b 482 -694 431 -816 482 -778 b 344 -547 482 -615 432 -547 b 190 -713 248 -547 190 -624 b 464 -948 190 -806 246 -948 b 747 -660 560 -948 747 -904 b 706 -351 747 -577 721 -441 b 724 -327 703 -334 704 -336 b 966 16 870 -269 966 -147 b 619 363 966 200 831 363 b 577 389 582 363 582 363 l 541 598 b 550 625 539 615 541 616 b 824 1174 706 770 824 953 b 730 1509 824 1299 789 1423 b 655 1581 708 1541 671 1581 b 562 1512 635 1581 590 1544 b 420 1064 455 1394 420 1214 b 441 828 420 981 431 887 b 428 793 444 811 445 808 b 0 125 220 622 0 416 b 524 -363 0 -125 171 -363 z m 115 29 b 249 363 115 114 130 228 b 469 567 336 459 402 513 b 490 562 484 579 487 577 l 520 377 b 498 343 524 350 524 351 b 289 63 372 300 289 186 b 455 -192 289 -66 357 -158 b 494 -200 467 -196 484 -200 b 511 -184 505 -200 511 -193 b 490 -166 511 -174 500 -170 b 386 -12 429 -140 386 -78 b 530 157 386 71 442 132 b 559 145 553 163 556 161 l 631 -284 b 611 -304 634 -300 632 -300 b 530 -311 588 -308 559 -311 b 115 29 278 -311 115 -171 z m 677 1358 b 763 1240 724 1358 763 1319 b 513 851 763 1080 626 950 b 494 863 503 842 497 844 b 485 995 488 900 485 949 b 677 1358 485 1220 589 1358 z m 635 168 b 848 -66 752 158 848 60 b 713 -271 848 -157 793 -230 b 690 -262 696 -279 693 -279 l 619 148 b 635 168 616 166 618 170 z\"\n    },\n    \"cClef\": {\n      \"x_min\": 0,\n      \"x_max\": 699,\n      \"y_min\": -506,\n      \"y_max\": 506,\n      \"ha\": 1012,\n      \"o\": \"m 269 -694 b 300 -724 269 -714 279 -724 l 301 -724 b 331 -694 321 -724 331 -714 l 331 -63 b 344 -55 331 -52 338 -53 b 472 -265 382 -65 442 -102 b 500 -301 477 -288 485 -301 b 530 -262 516 -301 523 -287 b 684 -128 549 -199 582 -128 b 804 -409 778 -128 804 -220 b 651 -683 804 -598 770 -683 b 528 -644 631 -683 528 -674 b 567 -622 528 -636 552 -628 b 625 -528 596 -612 625 -583 b 527 -429 625 -465 583 -429 b 416 -547 465 -429 416 -471 b 667 -729 416 -638 495 -729 b 1007 -413 903 -729 1007 -563 b 706 -76 1007 -215 897 -76 b 618 -89 664 -76 636 -84 b 576 -88 603 -94 589 -96 b 524 0 556 -75 524 -29 b 576 88 524 29 556 75 b 618 89 589 96 603 94 b 706 76 636 84 664 76 b 1007 413 897 76 1007 215 b 667 729 1007 563 903 729 b 416 547 495 729 416 638 b 527 429 416 471 465 429 b 625 528 583 429 625 465 b 567 622 625 583 596 612 b 528 644 552 628 528 636 b 651 683 528 674 631 683 b 804 409 770 683 804 598 b 684 128 804 220 778 128 b 530 262 582 128 549 199 b 500 301 523 287 516 301 b 472 265 485 301 477 288 b 344 55 442 102 382 65 b 331 63 338 53 331 52 l 331 694 b 301 724 331 714 321 724 l 300 724 b 269 694 279 724 269 714 z m 30 -724 l 154 -724 b 184 -694 174 -724 184 -714 l 184 694 b 154 724 184 714 174 724 l 30 724 b 0 694 10 724 0 714 l 0 -694 b 30 -724 0 -714 10 -724 z\"\n    },\n    \"fClef\": {\n      \"x_min\": -5,\n      \"x_max\": 684,\n      \"y_min\": -635,\n      \"y_max\": 262,\n      \"ha\": 897,\n      \"o\": \"m 12 -914 b 36 -907 19 -914 27 -912 b 765 -40 390 -734 765 -478 b 363 377 765 210 612 377 b 0 56 112 377 0 194 b 177 -158 0 -59 60 -158 b 330 -6 268 -158 330 -95 b 192 144 330 86 262 144 b 120 134 153 144 138 134 b 96 160 101 134 96 145 b 330 323 96 217 183 323 b 549 -53 482 323 549 173 b 14 -871 549 -455 350 -680 b -7 -897 1 -878 -7 -886 b 12 -914 -7 -906 -1 -914 z m 906 101 b 985 180 950 101 985 135 b 906 259 985 225 950 259 b 827 180 861 259 827 225 b 906 101 827 135 861 101 z m 907 -258 b 985 -180 952 -258 985 -225 b 907 -102 985 -135 952 -102 b 829 -180 863 -102 829 -135 b 907 -258 829 -225 863 -258 z\"\n    },\n    \"unpitchedPercussionClef1\": {\n      \"x_min\": 0,\n      \"x_max\": 382,\n      \"y_min\": -250,\n      \"y_max\": 250,\n      \"ha\": 500,\n      \"o\": \"m 320 338 l 320 -338 b 340 -360 320 -350 328 -360 l 530 -360 b 550 -338 541 -360 550 -350 l 550 338 b 530 360 550 350 541 360 l 340 360 b 320 338 328 360 320 350 z m 20 -360 l 210 -360 b 230 -338 222 -360 230 -350 l 230 338 b 210 360 230 350 222 360 l 20 360 b 0 338 9 360 0 350 l 0 -338 b 20 -360 0 -350 9 -360 z\"\n    },\n    \"6stringTabClef\": {\n      \"x_min\": -3,\n      \"x_max\": 408,\n      \"y_min\": -748,\n      \"y_max\": 764,\n      \"ha\": 1512,\n      \"o\": \"m 39 -399 l 39 -1077 l 344 -1077 b 544 -883 467 -1077 544 -995 b 420 -719 544 -802 507 -752 b 514 -572 482 -690 514 -639 b 314 -399 514 -472 442 -399 z m 88 -328 l 160 -125 l 420 -125 l 491 -328 l 588 -328 l 350 348 l 238 348 l -4 -328 z m 26 1100 l 26 1024 l 249 1024 l 249 422 l 336 422 l 336 1024 l 557 1024 l 557 1100 z m 125 -768 l 337 -768 b 458 -884 418 -768 458 -818 b 337 -1001 458 -949 418 -1001 l 125 -1001 z m 292 -475 b 428 -583 389 -475 428 -514 b 292 -691 428 -652 389 -691 l 125 -691 l 125 -475 z m 292 256 l 397 -52 l 181 -52 z\"\n    },\n    \"timeSig0\": {\n      \"x_min\": 20,\n      \"x_max\": 450,\n      \"y_min\": -250,\n      \"y_max\": 251,\n      \"ha\": 501,\n      \"o\": \"m 338 -360 b 648 0 510 -360 648 -199 b 338 361 648 200 510 361 b 29 0 167 361 29 200 b 338 -360 29 -199 167 -360 z m 230 10 b 338 317 230 180 278 317 b 446 10 397 317 446 180 b 338 -295 446 -158 397 -295 b 230 10 278 -295 230 -158 z\"\n    },\n    \"timeSig1\": {\n      \"x_min\": 20,\n      \"x_max\": 314,\n      \"y_min\": -250,\n      \"y_max\": 251,\n      \"ha\": 501,\n      \"o\": \"m 29 0 b 45 -20 29 -7 33 -16 b 58 -23 50 -22 56 -23 b 78 -10 72 -23 78 -10 b 156 117 78 -10 140 89 b 170 131 161 127 167 131 b 179 111 176 131 179 120 l 179 -261 b 115 -315 179 -294 145 -315 b 91 -337 105 -315 91 -320 b 122 -360 91 -353 104 -360 l 429 -360 b 452 -337 452 -360 452 -337 b 431 -315 452 -337 452 -315 b 384 -265 410 -315 384 -289 l 384 328 b 356 361 384 351 376 360 b 281 356 336 361 300 356 b 206 360 253 356 228 357 b 199 361 203 360 200 361 b 173 334 184 361 179 347 l 35 19 b 29 0 35 19 29 10 z\"\n    },\n    \"timeSig2\": {\n      \"x_min\": 20,\n      \"x_max\": 426,\n      \"y_min\": -257,\n      \"y_max\": 254,\n      \"ha\": 511,\n      \"o\": \"m 29 170 b 42 108 29 150 33 130 b 160 29 63 63 108 29 b 261 156 248 29 261 120 b 161 275 261 242 161 246 b 275 330 164 295 190 330 b 405 192 403 330 405 233 b 193 -102 405 60 297 -39 b 33 -314 114 -153 58 -223 b 69 -370 33 -336 40 -370 b 203 -282 101 -370 118 -282 b 410 -360 261 -282 282 -360 b 606 -131 472 -360 583 -354 b 589 -111 606 -114 599 -111 b 570 -125 577 -111 573 -117 b 569 -130 570 -127 569 -128 b 513 -192 554 -164 543 -192 b 488 -187 505 -192 498 -190 b 445 -171 469 -180 459 -179 b 289 -137 416 -160 348 -137 b 236 -145 271 -137 252 -140 b 422 -42 268 -94 390 -50 b 613 147 523 -14 613 27 b 330 366 613 300 464 366 b 69 275 229 366 140 357 b 29 170 45 245 29 209 z\"\n    },\n    \"timeSig3\": {\n      \"x_min\": 20,\n      \"x_max\": 401,\n      \"y_min\": -251,\n      \"y_max\": 249,\n      \"ha\": 500,\n      \"o\": \"m 29 -203 b 275 -361 32 -315 134 -359 l 288 -361 b 577 -161 431 -361 577 -288 l 577 -151 b 537 -50 575 -109 564 -82 b 503 -20 528 -39 517 -29 l 472 -3 l 425 10 b 410 17 418 12 413 12 b 409 24 409 20 409 22 b 415 37 409 30 410 36 b 459 50 431 42 446 43 b 547 181 517 78 547 115 b 307 357 547 314 367 353 b 285 359 300 357 292 359 b 37 200 161 359 37 276 b 154 84 37 153 65 89 l 161 84 b 256 177 225 84 256 130 l 256 189 b 209 248 252 242 216 245 b 180 268 202 251 180 248 l 180 274 b 240 310 183 298 228 310 b 374 199 363 310 374 233 l 374 189 b 199 36 374 82 289 40 b 164 12 184 35 164 27 b 200 -6 164 -6 189 -6 b 379 -137 366 -6 379 -118 b 269 -307 379 -289 301 -307 b 256 -305 264 -307 258 -305 b 216 -282 245 -304 217 -304 l 216 -275 b 249 -180 216 -243 248 -222 b 145 -76 249 -120 207 -76 b 130 -78 140 -76 135 -76 b 60 -115 105 -82 78 -96 b 29 -203 36 -137 29 -171 z\"\n    },\n    \"timeSig4\": {\n      \"x_min\": 20,\n      \"x_max\": 450,\n      \"y_min\": -250,\n      \"y_max\": 251,\n      \"ha\": 501,\n      \"o\": \"m 58 -161 l 325 -161 l 325 -252 b 268 -302 325 -291 294 -302 b 235 -330 245 -302 235 -315 b 262 -360 235 -344 240 -360 l 569 -360 b 598 -330 583 -360 598 -350 b 566 -301 598 -310 580 -301 b 521 -246 552 -301 521 -292 l 521 -161 l 626 -161 b 648 -134 641 -161 648 -151 b 626 -107 648 -117 642 -107 l 521 -107 l 521 202 b 504 226 521 213 520 226 b 475 213 491 226 484 223 l 338 48 b 325 14 333 40 325 32 l 325 -107 l 131 -107 b 481 334 246 -9 477 318 b 482 341 481 337 482 338 b 461 361 482 353 472 361 b 363 359 448 361 389 359 b 261 361 337 359 272 361 b 228 334 248 361 228 357 b 43 -105 228 156 86 -45 l 35 -117 b 33 -121 35 -118 33 -120 b 29 -137 30 -127 29 -132 b 58 -161 29 -151 40 -161 z\"\n    },\n    \"timeSig5\": {\n      \"x_min\": 20,\n      \"x_max\": 383,\n      \"y_min\": -251,\n      \"y_max\": 246,\n      \"ha\": 497,\n      \"o\": \"m 29 -183 b 284 -361 29 -302 107 -361 b 552 -125 456 -361 552 -255 b 314 112 552 6 445 112 b 122 71 230 112 168 98 b 115 69 120 69 117 69 b 109 79 109 69 109 75 l 109 85 b 117 179 109 85 115 166 b 138 197 118 190 125 197 l 144 197 b 285 184 158 194 226 184 b 492 323 485 184 492 300 b 472 353 492 341 488 353 b 295 340 454 353 341 340 b 101 354 249 340 125 351 b 66 330 75 354 68 341 l 50 10 l 50 7 b 79 -14 50 -12 65 -14 b 111 14 94 -14 95 -1 b 209 62 125 29 160 62 b 357 -125 258 62 357 35 b 235 -304 357 -284 272 -304 b 202 -300 223 -304 212 -304 b 184 -279 194 -295 186 -289 b 202 -259 184 -269 194 -264 b 256 -163 235 -239 256 -203 b 144 -50 256 -99 206 -50 b 30 -157 66 -50 35 -107 b 29 -183 29 -166 29 -174 z\"\n    },\n    \"timeSig6\": {\n      \"x_min\": 20,\n      \"x_max\": 414,\n      \"y_min\": -249,\n      \"y_max\": 251,\n      \"ha\": 500,\n      \"o\": \"m 29 4 l 29 -1 b 73 -200 30 -68 42 -143 b 324 -359 132 -307 203 -359 b 513 -307 389 -359 461 -348 b 596 -137 563 -266 596 -202 b 379 72 596 -24 490 72 b 248 22 333 72 285 55 b 239 19 245 19 242 19 b 226 53 230 19 226 30 b 346 327 230 320 315 327 b 393 305 374 327 393 320 b 357 251 393 285 366 268 b 347 209 350 238 347 223 b 369 150 347 187 354 166 b 439 120 379 131 420 120 b 554 229 500 120 554 167 b 553 245 554 235 554 239 b 348 361 539 337 426 361 b 85 209 239 360 137 307 b 29 4 53 148 29 72 z m 320 3 b 405 -158 366 3 405 -69 b 320 -320 405 -248 366 -320 b 236 -158 274 -320 236 -248 b 320 3 236 -69 274 3 z\"\n    },\n    \"timeSig7\": {\n      \"x_min\": 20,\n      \"x_max\": 421,\n      \"y_min\": -250,\n      \"y_max\": 249,\n      \"ha\": 499,\n      \"o\": \"m 29 71 b 45 48 29 71 30 48 b 66 76 56 48 60 60 b 164 196 81 112 99 196 b 374 88 222 196 291 88 b 446 118 415 88 435 109 b 459 124 451 121 456 124 b 469 111 465 124 468 120 b 272 -112 469 71 359 -10 b 173 -315 217 -176 173 -259 b 200 -360 173 -346 173 -360 b 294 -347 226 -360 258 -347 b 412 -360 330 -347 397 -360 b 435 -307 426 -360 435 -348 b 606 288 435 -66 606 140 l 606 294 b 582 351 606 333 606 351 b 552 336 580 351 557 346 b 485 236 541 318 521 236 b 262 359 449 236 382 359 b 137 307 179 359 157 325 b 98 281 117 288 108 282 b 60 315 86 281 68 301 b 43 325 58 321 50 325 b 29 308 36 325 29 321 z\"\n    },\n    \"timeSig8\": {\n      \"x_min\": 20,\n      \"x_max\": 416,\n      \"y_min\": -259,\n      \"y_max\": 259,\n      \"ha\": 518,\n      \"o\": \"m 29 -190 b 301 -373 29 -315 158 -373 b 599 -117 445 -373 599 -311 b 481 52 599 -30 549 17 b 567 204 533 85 567 132 b 317 373 567 351 356 373 b 36 176 150 373 36 297 b 161 -16 36 76 92 23 b 29 -190 86 -52 29 -99 z m 111 -183 b 225 -48 111 -125 161 -72 b 436 -219 330 -94 436 -124 b 295 -325 436 -276 392 -325 b 111 -183 199 -325 111 -276 z m 314 331 b 482 207 360 331 482 308 b 406 85 482 150 454 112 b 168 240 291 125 168 150 b 314 331 168 301 251 331 z\"\n    },\n    \"timeSig9\": {\n      \"x_min\": 20,\n      \"x_max\": 414,\n      \"y_min\": -249,\n      \"y_max\": 251,\n      \"ha\": 500,\n      \"o\": \"m 246 -69 b 377 -19 292 -69 340 -52 b 386 -16 380 -16 383 -16 b 399 -50 395 -16 399 -27 b 279 -324 395 -317 310 -324 b 232 -302 251 -324 232 -317 b 268 -248 232 -282 259 -265 b 278 -206 275 -235 278 -220 b 256 -147 278 -184 271 -163 b 186 -117 246 -128 204 -117 b 71 -226 125 -117 71 -164 b 72 -242 71 -232 71 -236 b 276 -359 86 -334 199 -359 b 540 -206 386 -357 488 -304 b 596 -1 572 -145 596 -69 l 596 4 b 552 203 595 71 583 145 b 301 361 492 310 422 361 b 112 310 236 361 164 351 b 29 140 62 269 29 204 b 246 -69 29 27 135 -69 z m 220 161 b 305 323 220 251 259 323 b 389 161 351 323 389 251 b 305 0 389 72 351 0 b 220 161 259 0 220 72 z\"\n    },\n    \"timeSigCommon\": {\n      \"x_min\": 5,\n      \"x_max\": 424,\n      \"y_min\": -249,\n      \"y_max\": 251,\n      \"ha\": 500,\n      \"o\": \"m 101 -262 b 321 -359 156 -328 235 -359 b 611 -88 573 -359 611 -130 b 589 -56 611 -56 595 -56 b 567 -82 577 -56 567 -58 b 363 -311 567 -268 409 -311 b 184 40 246 -311 184 -197 b 372 327 184 278 294 327 b 477 278 446 327 477 292 b 451 246 477 265 472 246 b 360 140 393 246 360 184 b 471 32 360 58 431 32 b 580 156 471 32 580 36 b 336 361 580 344 363 361 b 7 -14 131 361 7 180 b 101 -262 7 -108 42 -190 z\"\n    },\n    \"timeSigCutCommon\": {\n      \"x_min\": 0,\n      \"x_max\": 418,\n      \"y_min\": -359,\n      \"y_max\": 361,\n      \"ha\": 720,\n      \"o\": \"m 225 -346 b 252 -382 235 -350 252 -369 l 252 -492 b 276 -517 252 -505 265 -517 b 302 -492 292 -517 302 -505 l 302 -379 b 318 -359 302 -370 308 -363 b 602 -85 563 -354 602 -130 b 579 -58 600 -58 586 -58 l 573 -58 b 559 -82 567 -58 559 -60 b 354 -310 559 -266 400 -310 b 317 -305 340 -310 328 -308 b 302 -284 311 -304 302 -295 l 302 287 b 338 323 302 297 328 321 b 363 324 347 324 356 324 b 468 275 436 324 468 289 b 442 243 468 264 464 243 b 351 137 384 243 351 181 b 462 30 351 56 422 30 b 572 154 462 30 572 35 b 318 357 572 295 441 357 b 302 390 310 359 302 383 l 302 495 b 276 520 302 507 292 520 b 252 495 265 520 252 507 l 252 369 b 235 346 252 359 238 346 l 196 331 b 0 -14 66 275 0 122 b 225 -346 0 -150 86 -310 z m 232 259 b 236 262 233 262 235 262 b 252 239 243 262 252 251 l 252 -235 b 243 -252 252 -248 248 -252 b 236 -248 240 -252 238 -251 b 177 37 197 -193 177 -96 b 232 259 177 147 200 215 z\"\n    },\n    \"noteheadDoubleWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 599,\n      \"y_min\": -155,\n      \"y_max\": 155,\n      \"ha\": 310,\n      \"o\": \"m 423 -180 b 733 1 657 -180 733 -98 l 733 -213 b 747 -223 733 -219 740 -223 l 766 -223 b 780 -213 773 -223 780 -219 l 780 212 b 766 223 780 217 773 223 l 747 223 b 733 212 740 223 733 217 l 733 1 b 438 180 733 104 572 180 b 130 1 248 180 130 101 b 423 -180 130 -92 210 -180 z m 284 58 b 400 147 284 131 333 147 b 577 -45 498 147 577 42 b 469 -145 577 -115 533 -145 b 331 -71 409 -145 369 -112 b 284 58 305 -37 284 12 z m 815 -213 b 829 -223 815 -219 824 -223 l 848 -223 b 863 -213 857 -223 863 -219 l 863 212 b 848 223 863 217 857 223 l 829 223 b 815 212 824 223 815 217 z m 82 212 l 82 -213 b 96 -223 82 -219 88 -223 l 114 -223 b 128 -213 121 -223 128 -219 l 128 212 b 114 223 128 217 121 223 l 96 223 b 82 212 88 223 82 217 z m 13 -223 l 32 -223 b 45 -213 39 -223 45 -219 l 45 212 b 32 223 45 217 39 223 l 13 223 b 0 212 4 223 0 217 l 0 -213 b 13 -223 0 -219 4 -223 z\"\n    },\n    \"noteheadWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 422,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 0 3 b 297 -180 0 -94 82 -180 b 608 3 533 -180 608 -98 b 311 180 608 105 445 180 b 0 3 120 180 0 101 z m 156 56 b 160 91 156 68 157 79 b 274 148 176 141 229 148 b 452 -45 373 148 452 42 b 386 -141 452 -89 433 -130 b 341 -147 372 -145 356 -147 b 206 -72 289 -147 236 -112 b 156 56 177 -39 156 10 z\"\n    },\n    \"noteheadHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 295,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 140 -180 b 425 60 377 -180 425 13 b 282 180 425 134 366 180 b 0 -60 68 180 0 14 b 140 -180 0 -137 60 -180 z m 42 -63 b 318 121 42 7 251 121 b 372 91 346 121 361 108 b 380 63 376 82 380 73 b 108 -125 380 1 177 -125 b 50 -92 78 -125 60 -109 b 42 -63 46 -84 42 -73 z\"\n    },\n    \"noteheadBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 295,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 0 -60 b 140 -180 0 -135 62 -180 b 425 60 268 -180 425 -62 b 285 180 425 134 367 180 b 0 -60 127 180 0 63 z\"\n    },\n    \"noteheadXWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 377,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 0 148 b 12 124 0 140 4 131 l 132 0 l 12 -124 b 1 -148 4 -131 1 -140 b 32 -180 1 -164 14 -180 l 158 -180 b 179 -171 166 -180 173 -177 l 272 -95 l 364 -171 b 384 -180 370 -177 377 -180 l 511 -180 b 543 -148 528 -180 543 -164 b 531 -124 543 -140 539 -131 l 412 0 l 531 124 b 541 148 539 131 541 140 b 513 180 541 164 528 180 l 384 180 b 364 171 377 180 370 177 l 272 94 l 179 171 b 158 180 173 177 166 180 l 30 180 b 0 148 16 180 0 164 z m 245 0 l 88 141 l 157 141 l 272 45 l 386 141 l 456 141 l 300 0 l 456 -141 l 386 -141 l 272 -45 l 157 -141 l 88 -141 z\"\n    },\n    \"noteheadXHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 334,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 32 -180 l 184 -180 b 209 -170 193 -180 203 -177 l 271 -99 l 363 -171 b 384 -180 370 -176 377 -180 l 445 -180 b 478 -147 461 -180 478 -163 b 465 -125 478 -138 474 -131 l 341 -22 l 474 127 b 481 148 480 131 481 138 b 448 180 481 166 468 180 l 295 180 b 271 170 287 180 278 177 l 209 98 l 115 171 b 95 180 109 177 104 180 l 36 180 b 4 148 19 180 4 164 b 14 124 4 140 7 132 l 140 22 l 7 -127 b 0 -148 3 -131 0 -138 b 32 -180 0 -166 14 -180 z m 95 148 l 233 33 l 334 148 l 410 148 l 274 -6 l 445 -148 l 384 -148 l 248 -35 l 147 -148 l 71 -148 l 206 4 l 36 148 z\"\n    },\n    \"noteheadXBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 290,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 0 -158 b 19 -180 0 -170 7 -180 b 29 -176 23 -180 26 -179 l 207 -24 l 389 -176 b 399 -180 392 -179 396 -180 b 418 -160 410 -180 418 -168 b 410 -143 418 -153 415 -147 l 239 0 l 410 144 b 418 160 415 147 418 154 b 399 180 418 171 408 180 b 389 177 396 180 392 179 l 207 26 l 29 177 b 17 180 26 179 22 180 b 0 161 7 180 0 170 b 7 144 0 156 3 148 l 179 0 l 7 -143 b 0 -158 1 -147 0 -153 z\"\n    },\n    \"noteheadCircleX\": {\n      \"x_min\": 0,\n      \"x_max\": 249,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 0 0 b 179 -180 0 -99 81 -180 b 359 0 278 -180 359 -99 b 179 180 359 99 278 180 b 0 0 81 180 0 99 z m 69 84 l 151 1 l 68 -84 b 40 0 49 -60 40 -30 b 69 84 40 32 50 60 z m 180 -27 l 262 -111 b 179 -138 239 -128 210 -138 b 95 -111 148 -138 120 -128 z m 209 1 l 291 84 b 317 0 307 60 317 30 b 292 -82 317 -30 308 -59 z m 179 138 b 261 112 210 138 238 128 l 180 30 l 98 112 b 179 138 121 128 148 138 z\"\n    },\n    \"noteheadTriangleUpWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 319,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 0 -166 b 14 -180 0 -173 6 -180 l 445 -180 b 459 -166 454 -180 459 -173 b 458 -158 459 -163 458 -160 l 239 173 b 228 180 238 177 233 180 b 216 173 225 180 219 177 l 1 -158 b 0 -166 1 -160 0 -163 z m 145 -96 b 228 108 145 -17 197 56 b 310 -98 259 55 310 -17 b 288 -137 310 -111 301 -137 l 170 -137 b 145 -96 157 -137 145 -109 z\"\n    },\n    \"noteheadTriangleUpHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 285,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 14 -180 l 396 -180 b 410 -166 406 -180 410 -173 b 409 -158 410 -163 410 -161 l 228 173 b 215 180 226 174 220 180 b 202 173 210 180 204 177 l 3 -157 b 0 -166 1 -160 0 -163 b 14 -180 0 -173 7 -180 z m 115 -138 l 232 76 l 297 -37 l 246 -138 z\"\n    },\n    \"noteheadTriangleUpBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 293,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 422 -180 l 207 180 l 0 -180 z\"\n    },\n    \"noteheadDiamondWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 270,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 4 7 l 258 -179 b 264 -180 261 -179 262 -180 b 272 -176 268 -180 271 -179 l 386 -23 b 389 -16 387 -20 389 -19 b 383 -7 389 -13 386 -9 l 130 179 b 122 180 128 180 125 180 b 115 177 120 180 117 180 l 3 23 b 0 17 1 20 0 19 b 4 7 0 16 3 10 z m 109 111 b 112 112 109 112 111 112 b 118 111 115 112 117 111 l 320 -37 b 324 -46 323 -39 324 -42 b 275 -111 278 -111 276 -111 b 268 -108 272 -111 271 -109 l 66 40 b 62 48 65 42 62 45 z\"\n    },\n    \"noteheadDiamondHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 251,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 4 -7 l 174 -177 b 180 -180 176 -180 179 -180 b 189 -177 183 -180 186 -180 l 359 -7 b 361 0 360 -6 361 -3 b 359 7 361 3 360 4 l 189 177 b 180 180 186 179 183 180 b 174 177 179 180 176 179 l 4 7 b 0 0 1 4 0 3 b 4 -7 0 -3 1 -6 z m 215 73 b 266 26 238 73 266 50 b 138 -71 266 -12 176 -71 b 96 -50 121 -71 108 -63 b 88 -24 89 -43 88 -32 b 215 73 88 13 177 73 z\"\n    },\n    \"noteheadDiamondBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 4 -7 l 173 -177 b 180 -180 176 -180 177 -180 b 187 -177 181 -180 184 -180 l 357 -6 b 360 1 359 -4 360 -1 b 357 9 360 4 359 7 l 189 177 b 180 180 187 179 184 180 b 171 177 177 180 173 179 l 3 9 b 0 1 0 6 0 4 b 4 -7 0 -1 1 -4 z\"\n    },\n    \"noteheadSquareWhite\": {\n      \"x_min\": 0,\n      \"x_max\": 313,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 451 -180 l 451 180 l 0 180 l 0 -180 z m 40 -138 l 40 140 l 410 140 l 410 -138 z\"\n    },\n    \"noteheadSquareBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 313,\n      \"y_min\": -125,\n      \"y_max\": 125,\n      \"ha\": 250,\n      \"o\": \"m 451 -180 l 451 180 l 0 180 l 0 -180 z\"\n    },\n    \"augmentationDot\": {\n      \"x_min\": 0,\n      \"x_max\": 100,\n      \"y_min\": -50,\n      \"y_max\": 50,\n      \"ha\": 100,\n      \"o\": \"m 72 -72 b 144 0 112 -72 144 -40 b 72 72 144 40 112 72 b 0 0 32 72 0 40 b 72 -72 0 -40 32 -72 z\"\n    },\n    \"tremolo1\": {\n      \"x_min\": -150,\n      \"x_max\": 150,\n      \"y_min\": -93,\n      \"y_max\": 94,\n      \"ha\": 187,\n      \"o\": \"m 216 -45 l 216 135 l -216 46 l -216 -134 z\"\n    },\n    \"flag8thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 264,\n      \"y_min\": -810.1921176545984,\n      \"y_max\": 9,\n      \"ha\": 819.1921176545984,\n      \"o\": \"m 284 -688 b 318 -904 305 -737 318 -819 b 284 -1102 318 -969 308 -1037 b 279 -1123 281 -1110 279 -1117 b 302 -1165 279 -1146 294 -1159 b 343 -1138 311 -1171 336 -1162 b 380 -888 343 -1138 380 -1001 b 215 -395 380 -708 305 -539 b 58 -19 141 -281 81 -157 b 14 13 53 4 42 13 b 0 -9 6 13 0 9 l 0 -353 b 284 -688 95 -370 232 -566 z\"\n    },\n    \"flag8thDown\": {\n      \"x_min\": 0,\n      \"x_max\": 306,\n      \"y_min\": -14,\n      \"y_max\": 808,\n      \"ha\": 822,\n      \"o\": \"m 16 -20 b 58 12 43 -20 55 -12 b 262 387 82 148 189 274 b 441 881 353 530 441 701 b 400 1142 441 994 412 1096 b 377 1164 396 1158 387 1164 b 346 1094 356 1164 331 1136 b 376 897 366 1034 376 962 b 318 642 376 812 340 691 b 0 340 265 521 193 405 l 0 1 b 16 -20 0 -16 7 -20 z\"\n    },\n    \"flag16thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 279,\n      \"y_min\": -813,\n      \"y_max\": 2,\n      \"ha\": 815,\n      \"o\": \"m 7 -570 b 298 -778 96 -573 199 -576 b 344 -992 331 -847 344 -917 b 333 -1120 344 -1034 340 -1077 b 331 -1133 331 -1126 331 -1129 b 363 -1171 331 -1152 343 -1171 b 392 -1146 373 -1171 383 -1165 b 402 -988 397 -1139 402 -1057 l 402 -956 b 360 -783 402 -896 386 -837 b 359 -770 360 -779 359 -776 b 360 -760 359 -768 359 -765 b 396 -577 364 -752 396 -665 b 392 -526 396 -559 395 -543 b 236 -275 377 -428 340 -387 b 53 -16 158 -192 78 -168 b 24 3 50 0 33 3 b 0 1 16 3 0 1 l 0 -570 z m 78 -312 l 89 -312 b 302 -464 177 -312 255 -393 b 341 -592 328 -501 341 -546 b 340 -621 341 -602 341 -611 b 330 -658 337 -632 337 -647 b 311 -667 328 -662 318 -667 b 301 -661 307 -667 304 -665 b 223 -562 278 -625 253 -596 b 59 -331 156 -484 89 -449 b 58 -327 58 -330 58 -328 b 78 -312 58 -321 66 -312 z\"\n    },\n    \"flag16thDown\": {\n      \"x_min\": 0,\n      \"x_max\": 290.8951581511223,\n      \"y_min\": -9,\n      \"y_max\": 812.0064,\n      \"ha\": 821.0064,\n      \"o\": \"m 0 -12 b 24 -13 0 -12 16 -13 b 53 6 33 -13 50 -10 b 406 516 88 228 372 289 b 410 567 409 531 410 549 b 374 750 410 655 379 742 b 373 760 373 753 373 756 b 374 773 373 766 374 769 b 405 1138 426 881 428 1022 b 370 1169 397 1171 387 1169 b 346 1132 353 1168 341 1156 b 312 768 367 1011 367 880 b 7 559 213 566 96 562 l 0 559 z m 58 317 b 59 321 58 318 58 320 b 238 552 89 439 170 472 b 315 651 268 585 292 613 b 325 657 318 655 321 657 b 344 647 333 657 343 652 b 354 611 351 636 351 622 b 356 582 356 600 356 590 b 317 454 356 534 343 491 b 89 302 269 383 177 302 l 78 302 b 58 317 66 302 58 310 z\"\n    },\n    \"flag32ndUp\": {\n      \"x_min\": 0,\n      \"x_max\": 261,\n      \"y_min\": -812,\n      \"y_max\": 149,\n      \"ha\": 961,\n      \"o\": \"m 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 366 -289 369 -315 369 -302 b 220 -58 350 -202 317 -163 b 46 187 148 20 71 43 b 17 215 45 200 26 215 b 0 197 9 215 0 197 l 0 -609 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 55 -386 b 73 -367 55 -384 65 -369 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 55 -386 147 -527 84 -497 z\"\n    },\n    \"flag32ndDown\": {\n      \"x_min\": 0,\n      \"x_max\": 273,\n      \"y_min\": -172,\n      \"y_max\": 812,\n      \"ha\": 984,\n      \"o\": \"m 17 -248 b 48 -219 27 -248 46 -232 b 229 36 72 -69 154 -46 b 380 278 330 145 364 186 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 351 793 356 785 351 789 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 l 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -229 b 17 -248 0 -229 9 -248 z m 56 76 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 z m 56 386 b 217 609 86 501 153 533 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 z\"\n    },\n    \"flag64thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 261,\n      \"y_min\": -812,\n      \"y_max\": 347,\n      \"ha\": 1159,\n      \"o\": \"m 0 -609 l 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 337 -203 369 -287 359 -242 b 369 -43 350 -167 369 -104 b 366 -4 369 -30 367 -17 b 220 228 350 84 317 122 b 46 472 148 305 71 328 b 17 500 45 485 26 500 b 0 482 9 500 0 482 z m 56 193 b 300 24 138 193 220 157 b 321 -45 315 -4 321 -26 b 317 -75 321 -56 318 -65 l 298 -145 b 220 -58 278 -121 253 -94 b 58 187 148 20 82 43 b 56 193 58 189 58 192 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 55 -386 b 73 -367 55 -384 65 -369 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 55 -386 147 -527 84 -497 z\"\n    },\n    \"flag64thDown\": {\n      \"x_min\": 0,\n      \"x_max\": 273,\n      \"y_min\": -376,\n      \"y_max\": 812,\n      \"ha\": 1188,\n      \"o\": \"m 17 -541 b 48 -513 27 -541 46 -526 b 229 -258 72 -363 154 -340 b 380 -16 330 -148 364 -108 b 384 27 383 -1 384 13 b 351 189 384 88 366 151 b 380 278 366 216 374 243 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 351 793 356 785 351 789 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 l 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -523 b 17 -541 0 -523 9 -541 z m 56 76 b 229 331 81 226 154 249 b 310 423 264 369 289 397 b 330 350 318 396 325 366 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 z m 229 36 b 311 128 264 73 289 102 l 330 56 b 334 26 331 46 334 37 b 311 -46 334 7 328 -16 b 56 -222 229 -184 137 -222 b 229 36 75 -86 145 -55 z m 217 609 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 b 217 609 86 501 153 533 z\"\n    },\n    \"flag128thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 261,\n      \"y_min\": -812,\n      \"y_max\": 533,\n      \"ha\": 1345,\n      \"o\": \"m 7 -609 b 278 -802 91 -612 186 -615 b 323 -999 310 -865 323 -930 b 311 -1122 323 -1040 318 -1080 b 310 -1132 311 -1126 310 -1129 b 328 -1166 310 -1149 318 -1162 b 337 -1169 331 -1168 334 -1169 b 366 -1146 346 -1169 356 -1162 b 376 -1009 370 -1138 376 -1071 b 374 -969 376 -995 374 -982 b 337 -806 372 -913 359 -858 b 336 -796 336 -804 336 -801 b 337 -788 336 -793 336 -791 b 370 -616 340 -778 370 -698 b 340 -482 370 -570 360 -524 b 369 -330 353 -445 369 -386 b 337 -203 369 -287 359 -242 b 369 -43 350 -167 369 -104 b 366 -4 369 -30 367 -17 b 341 75 360 26 353 50 b 369 222 354 111 369 167 b 366 264 369 236 369 251 b 220 495 350 351 317 390 b 46 740 148 573 71 596 b 17 768 45 753 26 768 b 0 750 9 768 0 750 l 0 -609 z m 300 24 b 321 -45 315 -4 321 -26 b 317 -75 321 -56 318 -65 l 298 -145 b 220 -58 278 -121 253 -94 b 56 187 148 20 81 43 b 55 193 56 189 56 192 b 300 24 137 193 220 157 z m 300 -261 b 321 -330 315 -289 321 -311 b 317 -360 321 -341 318 -350 b 300 -423 314 -374 307 -399 b 220 -334 279 -397 253 -370 b 56 -92 150 -256 79 -232 b 300 -261 135 -92 220 -127 z m 55 -386 b 73 -367 55 -384 65 -369 b 318 -622 189 -367 318 -505 b 315 -657 318 -634 317 -645 b 308 -690 312 -668 312 -680 b 292 -698 307 -694 300 -698 b 282 -693 288 -698 284 -697 b 216 -608 261 -661 240 -636 l 209 -600 b 55 -386 147 -527 84 -497 z m 300 292 b 321 223 315 264 321 242 b 317 193 321 212 318 203 b 301 135 314 180 308 158 b 220 228 281 161 255 190 b 55 461 151 304 79 327 b 300 292 134 461 220 426 z\"\n    },\n    \"flag128thDown\": {\n      \"x_min\": 0,\n      \"x_max\": 273,\n      \"y_min\": -580,\n      \"y_max\": 812,\n      \"ha\": 1392,\n      \"o\": \"m 17 -835 b 48 -806 27 -835 46 -819 b 229 -552 72 -657 154 -634 b 380 -310 330 -442 364 -402 b 384 -266 383 -295 384 -281 b 351 -105 384 -206 366 -143 b 384 27 372 -66 384 -16 b 351 189 384 88 366 151 b 380 278 366 216 374 243 b 383 320 383 291 383 305 b 351 484 383 382 364 445 b 384 629 374 526 384 580 b 356 780 384 704 361 766 b 351 793 356 785 351 789 b 356 804 351 796 353 799 l 361 814 b 393 958 380 850 387 865 l 393 973 b 333 1169 393 1002 383 1169 b 324 1168 330 1169 327 1169 b 304 1130 314 1164 304 1149 b 305 1120 304 1128 305 1125 b 334 962 317 1056 334 1011 b 289 821 334 922 323 880 b 0 619 180 625 88 622 l 0 -816 b 17 -835 0 -816 9 -835 z m 229 331 b 310 423 264 369 289 397 b 330 350 318 396 325 366 b 334 320 331 340 334 331 b 311 248 334 301 328 278 b 59 72 229 109 141 72 b 56 76 56 73 56 75 b 229 331 81 226 154 249 z m 56 -516 b 229 -258 75 -380 145 -348 b 311 -166 264 -220 289 -192 l 330 -238 b 334 -268 331 -248 334 -256 b 311 -340 334 -287 328 -310 b 56 -516 229 -478 137 -516 z m 56 -222 b 229 36 75 -86 145 -55 b 311 128 264 73 289 102 l 330 56 b 334 26 331 46 334 37 b 311 -46 334 7 328 -16 b 56 -222 229 -184 137 -222 z m 217 609 b 292 706 246 642 269 670 b 304 711 295 710 300 711 b 321 703 311 711 320 707 b 328 670 325 693 325 681 b 331 634 330 658 331 645 b 82 367 331 516 199 367 l 75 367 b 56 386 62 367 56 379 b 217 609 86 501 153 533 z\"\n    },\n    \"accidentalFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 226,\n      \"y_min\": -175,\n      \"y_max\": 439,\n      \"ha\": 614,\n      \"o\": \"m 17 -245 b 30 -252 22 -251 26 -252 b 39 -249 35 -252 39 -249 b 153 -161 82 -225 117 -186 b 325 82 281 -72 325 16 b 196 220 325 164 262 216 b 117 196 171 220 137 209 b 85 176 108 189 92 176 b 78 177 82 176 81 176 b 62 202 68 181 62 192 b 72 608 63 233 72 579 b 45 632 72 624 59 632 b 0 592 24 632 1 618 b 17 -245 0 592 6 -230 z m 66 73 b 167 144 76 102 134 144 b 226 60 209 144 226 96 b 98 -134 226 -17 160 -95 b 84 -138 92 -137 88 -138 b 68 -117 71 -138 68 -124 b 63 27 68 -117 63 -30 b 66 73 63 50 65 68 z\"\n    },\n    \"accidentalNatural\": {\n      \"x_min\": 0,\n      \"x_max\": 168,\n      \"y_min\": -335,\n      \"y_max\": 341,\n      \"ha\": 676,\n      \"o\": \"m 0 -268 b 12 -281 0 -276 4 -281 b 22 -278 13 -281 20 -279 b 164 -235 42 -269 122 -235 b 189 -251 179 -235 189 -239 l 189 -465 b 206 -482 189 -475 196 -482 l 225 -482 b 242 -465 233 -482 242 -475 l 242 258 b 230 269 242 265 236 269 b 225 268 229 269 226 269 l 203 261 b 197 259 200 261 199 259 b 68 226 197 259 105 226 b 53 233 59 226 53 228 l 53 474 b 36 491 53 484 45 491 l 17 491 b 0 474 7 491 0 484 z m 176 114 b 189 107 184 114 189 112 l 189 -42 b 71 -101 189 -68 107 -101 b 53 -92 60 -101 53 -98 l 53 56 b 176 114 53 76 141 114 z\"\n    },\n    \"accidentalSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 249,\n      \"y_min\": -348,\n      \"y_max\": 350,\n      \"ha\": 698,\n      \"o\": \"m 12 37 b 49 53 17 37 45 50 b 53 55 50 53 52 55 b 72 29 63 55 72 40 l 72 -114 b 56 -147 72 -130 65 -143 b 17 -163 48 -150 17 -163 b 0 -186 7 -166 0 -177 l 0 -288 b 12 -301 0 -297 4 -301 b 17 -300 13 -301 16 -300 b 50 -287 17 -300 37 -291 b 55 -285 52 -285 53 -285 b 72 -308 65 -285 72 -301 l 72 -485 b 91 -501 72 -494 81 -501 b 115 -485 105 -501 115 -494 l 115 -285 b 130 -253 115 -266 122 -256 l 217 -217 b 223 -216 219 -217 222 -216 b 242 -242 235 -216 242 -233 l 242 -422 b 261 -438 242 -431 251 -438 b 285 -422 276 -438 285 -431 l 285 -217 b 301 -184 285 -206 291 -189 b 341 -168 311 -180 341 -168 b 359 -144 351 -164 359 -153 l 359 -42 b 348 -30 359 -35 354 -30 b 341 -32 346 -30 344 -30 l 304 -46 b 285 -20 295 -46 285 -37 l 285 114 b 304 156 285 124 292 151 l 341 170 b 359 194 351 174 359 186 l 359 297 b 348 308 359 304 354 308 b 341 307 346 308 344 308 b 305 294 341 307 312 295 b 285 312 295 294 285 301 l 285 488 b 265 504 285 497 276 504 b 242 488 251 504 242 497 l 242 301 b 223 259 240 287 236 268 b 132 223 206 249 157 229 b 115 252 120 223 115 240 l 115 425 b 95 441 115 433 105 441 b 72 425 81 441 72 433 l 72 230 b 55 192 72 210 63 196 b 17 176 46 187 17 176 b 0 153 7 173 0 161 l 0 50 b 12 37 0 42 4 37 z m 111 -43 b 115 63 111 1 112 52 b 220 118 118 88 184 118 b 242 109 230 118 239 115 b 248 27 245 102 248 66 b 242 -65 248 -12 245 -52 b 132 -122 233 -94 166 -122 b 115 -115 124 -122 117 -120 b 111 -43 112 -109 111 -78 z\"\n    },\n    \"accidentalDoubleSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 247,\n      \"y_min\": -125,\n      \"y_max\": 127,\n      \"ha\": 252,\n      \"o\": \"m 0 -111 b 7 -166 0 -137 3 -163 b 65 -180 17 -174 40 -180 b 118 -166 86 -180 109 -176 b 130 -111 127 -158 130 -134 b 132 -105 130 -109 131 -107 b 177 -45 141 -85 158 -45 b 226 -111 196 -45 220 -91 b 233 -166 226 -137 228 -161 b 291 -180 243 -174 266 -180 b 356 -114 346 -180 356 -166 b 346 -56 356 -89 351 -63 b 288 -46 338 -49 312 -46 l 274 -46 b 206 1 258 -37 206 -9 b 274 50 206 22 253 43 b 291 49 279 50 285 49 b 346 63 314 49 336 55 b 356 115 353 71 356 92 b 292 183 356 174 351 183 b 233 173 266 183 240 180 b 226 117 228 168 226 143 b 179 49 219 101 196 49 b 130 117 158 49 135 96 b 118 173 130 141 125 167 b 66 183 112 180 89 183 b 7 173 42 183 16 180 b 0 120 3 170 0 145 b 7 63 0 94 3 68 b 68 49 17 55 43 49 b 82 50 73 49 78 50 b 150 3 98 42 150 13 b 84 -46 150 -16 104 -39 l 69 -46 b 7 -56 43 -46 16 -49 b 0 -111 3 -60 0 -85 z\"\n    },\n    \"accidentalDoubleFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 411,\n      \"y_min\": -175,\n      \"y_max\": 437,\n      \"ha\": 612,\n      \"o\": \"m 17 -245 b 30 -252 22 -251 26 -252 b 39 -249 35 -252 39 -249 b 153 -161 84 -226 120 -186 b 274 -50 206 -124 246 -85 b 284 -245 276 -158 279 -240 b 295 -252 288 -251 292 -252 b 304 -249 300 -252 304 -249 b 416 -163 348 -226 383 -186 b 592 82 546 -72 592 16 b 461 217 592 163 528 216 l 452 217 b 384 194 426 217 408 207 b 350 176 374 189 363 176 b 343 177 347 176 344 176 b 328 202 333 180 328 190 b 337 606 328 232 337 579 b 310 629 337 622 324 629 b 265 592 291 629 268 616 b 269 194 265 592 266 395 b 196 217 248 209 223 217 l 187 217 b 120 194 160 217 143 207 b 85 176 108 189 98 176 b 78 177 82 176 81 176 b 62 202 68 180 62 190 b 72 606 62 232 72 579 b 45 629 72 622 59 629 b 0 592 24 629 1 616 b 17 -245 0 592 7 -232 z m 66 72 b 168 144 75 101 134 144 b 226 59 212 144 226 95 b 96 -134 226 -22 161 -94 b 84 -138 92 -137 86 -138 b 68 -115 72 -138 68 -124 b 63 26 68 -115 63 -30 b 66 72 63 49 65 66 z m 328 39 b 330 72 328 55 328 68 b 433 144 338 101 399 144 b 468 130 448 144 459 140 b 490 59 481 112 490 88 b 361 -134 490 -22 426 -94 b 348 -138 356 -137 351 -138 b 333 -115 337 -138 333 -124 b 328 39 333 -115 328 -16 z\"\n    },\n    \"accidentalParensLeft\": {\n      \"x_min\": 0,\n      \"x_max\": 141,\n      \"y_min\": -248,\n      \"y_max\": 247,\n      \"ha\": 495,\n      \"o\": \"m 199 -357 b 203 -354 200 -357 203 -356 l 203 -333 b 200 -327 203 -330 202 -328 b 86 0 118 -253 86 -160 b 200 324 86 158 120 251 b 203 331 202 325 203 327 l 203 351 b 202 356 203 354 203 356 b 0 0 60 281 0 140 b 199 -357 0 -144 60 -269 z\"\n    },\n    \"accidentalParensRight\": {\n      \"x_min\": 0,\n      \"x_max\": 141,\n      \"y_min\": -248,\n      \"y_max\": 247,\n      \"ha\": 495,\n      \"o\": \"m 0 331 b 3 324 0 327 1 325 b 117 0 84 251 117 158 b 3 -327 117 -160 85 -253 b 0 -333 1 -328 0 -330 l 0 -354 b 4 -357 0 -356 3 -357 b 203 0 143 -269 203 -144 b 1 356 203 140 143 281 b 0 351 0 356 0 354 z\"\n    },\n    \"accidentalQuarterToneFlatStein\": {\n      \"x_min\": 1,\n      \"x_max\": 227,\n      \"y_min\": -175,\n      \"y_max\": 439,\n      \"ha\": 614,\n      \"o\": \"m 174 -161 b 288 -249 210 -186 245 -225 b 297 -252 288 -249 292 -252 b 310 -245 301 -252 305 -251 b 327 592 321 -230 327 592 b 282 632 325 618 302 632 b 255 608 268 632 255 624 b 265 202 255 579 264 233 b 249 177 265 192 259 181 b 242 176 246 176 245 176 b 210 196 235 176 219 189 b 131 220 190 209 156 220 b 1 85 65 216 1 164 b 174 -161 1 16 46 -72 z m 101 60 b 160 144 101 96 118 144 b 261 73 193 144 251 102 b 264 27 262 68 264 50 b 259 -117 264 -30 259 -117 b 243 -138 259 -124 256 -138 b 229 -134 239 -138 235 -137 b 101 60 167 -95 101 -17 z\"\n    },\n    \"accidentalThreeQuarterTonesFlatZimmermann\": {\n      \"x_min\": 1,\n      \"x_max\": 466,\n      \"y_min\": -175,\n      \"y_max\": 439,\n      \"ha\": 614,\n      \"o\": \"m 363 -245 b 376 -252 367 -251 372 -252 b 384 -249 380 -252 384 -249 b 497 -161 428 -226 464 -186 b 671 84 625 -72 671 16 b 541 220 671 164 606 217 b 513 217 531 220 523 219 b 464 196 495 212 480 206 b 431 176 452 189 442 176 b 423 177 428 176 426 176 b 408 202 413 180 408 190 l 419 608 b 392 632 419 625 406 632 b 346 592 372 632 347 618 b 363 -245 346 592 351 -230 z m 177 -163 b 289 -249 210 -186 245 -226 b 297 -252 289 -249 292 -252 b 310 -245 300 -252 305 -251 b 328 592 321 -230 328 592 b 282 631 327 618 302 631 b 255 608 268 631 255 624 l 266 202 b 251 177 266 190 261 180 b 243 176 248 176 246 176 b 210 196 232 176 222 189 b 166 216 196 204 180 210 b 161 217 164 216 163 217 b 132 220 151 219 143 220 b 1 84 65 217 1 163 b 177 -163 1 16 48 -72 z m 102 60 b 124 128 102 88 111 112 b 161 144 134 138 147 144 b 199 134 173 144 184 141 b 262 72 219 122 256 92 b 265 26 264 66 265 49 b 261 -115 265 -30 261 -115 b 245 -138 261 -124 258 -138 b 230 -134 240 -138 236 -137 b 102 60 166 -92 102 -20 z m 409 26 b 412 72 409 49 410 66 b 514 144 420 102 480 144 b 570 60 557 144 570 96 b 442 -134 570 -23 508 -91 b 429 -138 436 -137 433 -138 b 413 -115 418 -138 413 -124 b 409 26 413 -115 409 -30 z\"\n    },\n    \"accidentalQuarterToneSharpStein\": {\n      \"x_min\": 0,\n      \"x_max\": 179,\n      \"y_min\": -353,\n      \"y_max\": 307,\n      \"ha\": 660,\n      \"o\": \"m 12 -315 b 85 -285 17 -315 76 -289 b 105 -312 92 -282 105 -301 l 105 -492 b 125 -508 105 -501 114 -508 b 150 -484 147 -508 150 -498 l 150 -285 b 151 -274 150 -281 150 -278 b 164 -253 153 -265 158 -256 b 240 -225 176 -251 240 -225 b 258 -202 249 -222 258 -210 l 258 -99 b 246 -86 258 -91 253 -86 b 240 -88 245 -86 242 -88 l 240 -86 b 168 -115 240 -86 174 -114 b 148 -91 158 -115 148 -107 l 148 43 b 167 85 148 55 156 81 b 240 114 180 91 240 114 b 258 138 249 118 258 128 l 258 240 b 246 252 258 248 252 252 b 240 251 245 252 242 252 b 168 225 240 251 171 225 b 150 253 156 225 150 240 l 150 426 b 130 442 150 435 141 442 b 105 418 108 442 105 429 l 105 230 b 91 193 105 219 101 202 b 17 161 65 183 42 171 b 0 138 9 158 0 147 l 0 36 b 12 23 0 27 4 23 b 17 24 13 23 16 24 b 85 53 17 24 73 49 b 89 55 86 53 88 55 b 107 30 98 55 107 42 l 107 -114 b 92 -145 107 -130 101 -143 l 17 -177 b 0 -200 9 -180 0 -192 l 0 -302 b 12 -315 0 -311 4 -315 z\"\n    },\n    \"accidentalThreeQuarterTonesSharpStein\": {\n      \"x_min\": 3,\n      \"x_max\": 317,\n      \"y_min\": -347,\n      \"y_max\": 369,\n      \"ha\": 716,\n      \"o\": \"m 14 -301 b 53 -287 16 -301 40 -291 b 62 -285 56 -285 59 -285 b 72 -298 69 -285 72 -289 l 72 -477 b 95 -500 72 -495 76 -500 b 118 -477 114 -500 118 -495 l 118 -278 b 127 -259 118 -269 121 -261 l 196 -232 b 207 -243 204 -232 207 -235 l 207 -432 b 230 -455 207 -452 212 -455 b 253 -432 249 -455 253 -451 l 253 -228 b 268 -204 253 -216 259 -207 l 320 -186 b 328 -183 323 -184 325 -183 b 337 -194 334 -183 337 -187 l 337 -387 b 360 -410 337 -408 341 -410 b 383 -387 379 -410 383 -406 l 383 -174 b 395 -157 383 -166 390 -158 l 445 -138 b 456 -127 452 -135 456 -132 l 456 -14 b 448 -3 456 -10 454 -3 b 399 -22 445 -3 408 -17 b 383 -6 387 -22 383 -22 l 383 163 b 392 181 383 173 384 179 b 445 202 397 183 445 202 b 456 213 452 203 456 207 l 456 324 b 448 336 456 330 454 336 b 393 317 445 336 400 320 b 389 315 392 315 390 315 b 383 325 386 315 383 318 l 383 508 b 360 531 383 528 379 531 b 337 508 341 531 337 527 l 337 318 b 325 291 337 300 334 294 b 268 268 320 288 287 276 b 253 281 256 268 253 274 l 253 464 b 230 487 253 484 249 487 b 207 464 212 487 207 482 l 207 264 b 194 240 207 253 204 245 l 132 217 b 128 216 131 217 130 216 b 118 229 122 216 118 220 l 118 420 b 95 444 118 439 114 444 b 72 420 76 444 72 439 l 72 212 b 60 190 72 197 68 193 l 16 173 b 4 161 9 170 4 167 l 4 50 b 13 39 4 45 9 39 b 58 55 16 39 46 49 b 63 56 60 56 62 56 b 72 42 71 56 72 50 l 72 -125 b 58 -150 72 -137 65 -147 l 16 -166 b 4 -177 9 -168 4 -171 l 4 -289 b 14 -301 4 -295 9 -301 z m 114 -48 b 118 78 114 6 115 68 b 200 114 122 91 180 114 b 207 111 204 114 206 112 b 212 22 210 107 212 66 b 207 -94 212 -29 210 -85 b 127 -130 203 -108 148 -130 b 118 -127 122 -130 120 -128 b 114 -48 114 -121 114 -86 z m 253 19 b 258 130 253 69 255 122 b 333 163 264 141 315 163 b 337 161 334 163 337 161 b 341 78 340 157 341 120 b 337 -45 341 24 340 -37 b 266 -78 333 -56 287 -78 b 258 -75 262 -78 259 -76 b 253 19 255 -71 253 -27 z\"\n    },\n    \"accidentalBuyukMucennebFlat\": {\n      \"x_min\": 1,\n      \"x_max\": 287,\n      \"y_min\": -174,\n      \"y_max\": 438,\n      \"ha\": 612,\n      \"o\": \"m 1 480 l 1 406 b 12 395 1 400 4 395 b 79 419 14 395 76 418 b 89 412 86 419 89 415 b 91 376 89 399 89 386 b 82 359 91 364 89 361 b 16 331 76 356 16 331 b 1 321 6 331 1 328 l 1 248 b 13 236 1 242 4 236 b 79 262 16 236 71 258 b 92 251 89 262 92 256 b 107 -242 95 23 101 -236 b 120 -251 111 -249 115 -251 b 128 -248 124 -251 128 -248 b 240 -160 171 -225 207 -184 b 413 84 367 -71 413 16 b 284 220 413 166 350 216 b 207 196 259 220 229 209 b 171 176 196 190 184 176 b 167 177 170 176 168 177 b 151 203 157 181 151 192 b 153 269 151 210 151 236 b 163 292 153 275 153 289 b 366 367 173 297 366 367 b 379 383 374 370 379 376 l 379 452 b 370 464 379 458 377 464 b 164 389 366 464 170 392 b 156 396 163 389 156 393 b 157 436 157 409 157 428 b 167 452 157 445 161 449 b 366 526 173 455 366 526 b 379 540 374 528 379 534 l 379 611 b 370 622 379 616 377 622 b 170 550 366 622 174 552 b 160 557 163 550 160 554 b 161 608 160 585 161 602 b 134 631 161 624 148 631 b 89 590 114 631 91 616 l 89 528 b 81 517 89 526 88 518 b 16 491 76 514 16 491 b 1 480 6 490 1 485 z m 154 73 b 219 135 160 92 197 124 b 255 144 232 141 243 144 b 292 130 269 144 282 140 b 314 62 305 114 314 91 b 186 -132 314 -17 251 -94 b 173 -137 180 -135 176 -137 b 157 -114 161 -137 157 -122 b 153 35 157 -114 153 -22 b 154 73 153 53 153 68 z\"\n    },\n    \"accidentalBakiyeFlat\": {\n      \"x_min\": -1,\n      \"x_max\": 286,\n      \"y_min\": -175,\n      \"y_max\": 439,\n      \"ha\": 614,\n      \"o\": \"m -1 248 b 9 236 -1 242 1 236 b 81 264 12 236 78 261 b 89 258 86 264 89 261 b 104 -245 92 30 96 -236 b 115 -252 108 -251 112 -252 b 124 -249 120 -252 124 -249 b 239 -161 167 -226 203 -186 b 412 84 367 -72 412 17 b 282 220 412 166 348 216 b 255 216 274 220 264 219 b 203 196 238 212 222 206 b 171 177 193 189 177 177 b 163 179 168 177 166 177 b 147 202 153 181 147 192 b 150 276 147 210 150 268 b 158 291 150 287 154 289 b 363 370 163 292 363 370 b 377 384 373 373 377 379 l 377 454 b 369 467 377 458 376 467 b 363 465 367 467 364 467 b 161 390 363 465 167 393 b 153 399 154 390 153 395 b 157 608 154 494 157 593 b 130 632 157 624 144 632 b 86 592 111 632 88 618 b 88 377 86 592 86 501 b 76 356 88 373 88 360 l 12 331 b -1 320 3 330 -1 327 z m 148 27 b 151 73 148 50 150 68 b 255 144 161 105 219 144 b 312 62 298 144 312 99 b 181 -134 312 -19 249 -96 b 167 -138 176 -137 171 -138 b 153 -117 156 -138 153 -125 b 148 27 153 -117 148 -30 z\"\n    },\n    \"accidentalKomaSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 229,\n      \"y_min\": -337,\n      \"y_max\": 322,\n      \"ha\": 659,\n      \"o\": \"m 10 39 b 17 40 13 39 14 39 l 128 81 b 138 52 138 81 138 63 l 138 -91 b 124 -124 138 -107 132 -120 b 17 -167 115 -127 17 -167 b 0 -192 7 -171 0 -181 l 0 -294 b 10 -305 0 -301 4 -305 b 17 -304 13 -305 14 -305 b 127 -261 17 -304 117 -264 b 138 -276 138 -261 138 -262 l 138 -469 b 157 -485 138 -478 147 -485 b 181 -462 179 -485 181 -475 l 181 -262 b 183 -252 181 -258 181 -255 b 197 -232 186 -243 190 -235 b 312 -187 207 -228 312 -187 b 330 -163 323 -183 330 -173 l 330 -60 b 320 -49 330 -53 327 -49 b 312 -50 318 -49 315 -49 l 200 -94 b 193 -95 197 -95 194 -95 b 181 -68 183 -95 181 -85 l 181 66 b 200 108 181 92 189 104 l 312 151 b 330 176 323 156 330 166 l 330 278 b 320 289 330 285 327 289 b 312 288 318 289 315 289 b 200 246 312 288 203 248 b 181 275 187 246 181 264 l 181 448 b 163 464 181 456 173 464 b 138 441 140 464 138 452 l 138 253 b 122 215 137 240 132 225 b 17 177 92 203 45 177 b 0 153 7 173 0 163 l 0 50 b 10 39 0 43 4 39 z\"\n    },\n    \"accidentalKucukMucennebSharp\": {\n      \"x_min\": -1,\n      \"x_max\": 339,\n      \"y_min\": -338,\n      \"y_max\": 321,\n      \"ha\": 659,\n      \"o\": \"m -1 -45 l -1 -138 b 12 -154 -1 -145 3 -154 l 215 -79 b 220 -84 219 -79 220 -81 l 220 -105 b 210 -122 220 -115 219 -120 b 99 -168 202 -127 99 -168 b 82 -193 89 -173 82 -183 l 82 -295 b 92 -307 82 -302 86 -307 b 99 -305 95 -307 96 -307 b 209 -262 99 -305 199 -265 b 220 -278 220 -262 220 -264 l 220 -471 b 239 -487 220 -480 229 -487 b 264 -464 261 -487 264 -477 l 264 -264 b 265 -253 264 -259 264 -256 b 279 -233 268 -245 272 -236 b 395 -189 289 -229 395 -189 b 412 -164 405 -184 412 -174 l 412 -62 b 402 -50 412 -55 409 -50 b 395 -52 400 -50 397 -50 l 278 -96 b 264 -86 268 -96 264 -94 l 264 -68 b 269 -59 264 -62 265 -60 b 471 17 274 -58 471 17 b 488 36 484 22 488 27 l 488 127 b 477 144 488 134 487 144 b 471 141 475 144 472 141 l 471 143 b 274 68 471 143 282 71 b 268 66 272 68 269 66 b 264 71 264 66 264 69 l 264 92 b 271 102 264 98 265 99 l 395 150 b 412 174 405 154 412 164 l 412 276 b 402 288 412 284 409 288 b 395 287 400 288 397 288 b 282 245 395 287 285 246 b 264 274 269 245 264 262 l 264 446 b 245 462 264 455 255 462 b 220 439 222 462 220 451 l 220 252 b 204 213 219 239 215 223 b 99 176 174 202 127 176 b 82 151 89 171 82 161 l 82 49 b 92 37 82 42 86 37 b 99 39 95 37 96 37 l 210 79 b 216 81 212 81 215 81 b 220 78 219 81 220 79 l 220 56 b 216 46 220 52 220 48 b 16 -29 210 45 16 -29 b -1 -45 4 -32 -1 -36 z\"\n    },\n    \"accidentalKoron\": {\n      \"x_min\": 0,\n      \"x_max\": 300,\n      \"y_min\": -472,\n      \"y_max\": 157,\n      \"ha\": 629,\n      \"o\": \"m 0 -672 b 7 -680 0 -677 3 -680 l 45 -680 b 52 -672 49 -680 52 -677 l 52 -193 l 415 -22 b 432 -4 418 -20 432 -13 b 415 10 432 1 418 9 l 4 226 b 0 223 1 226 0 225 z m 327 -7 l 52 -137 l 52 144 z\"\n    },\n    \"accidentalSori\": {\n      \"x_min\": 0,\n      \"x_max\": 421,\n      \"y_min\": -318,\n      \"y_max\": 328,\n      \"ha\": 646,\n      \"o\": \"m 0 265 l 0 223 b 3 213 0 216 0 215 l 131 160 l 131 -150 l 3 -203 b 0 -212 0 -204 0 -206 l 0 -255 b 3 -259 0 -258 1 -259 l 131 -204 l 131 -451 b 138 -458 131 -455 134 -458 l 176 -458 b 183 -451 180 -458 183 -455 l 183 -183 l 330 -120 l 330 -410 b 337 -418 330 -415 333 -418 l 374 -418 b 382 -410 379 -418 382 -415 l 382 -98 l 589 -9 b 606 10 592 -9 606 0 b 589 23 606 16 592 22 l 382 109 l 382 465 b 374 472 382 469 379 472 l 337 472 b 330 465 333 472 330 469 l 330 132 l 183 194 l 183 425 b 176 432 183 429 180 432 l 138 432 b 131 425 134 432 131 429 l 131 216 l 3 269 b 0 265 0 269 0 266 z m 183 138 l 330 76 l 330 -66 l 183 -128 z m 501 6 l 382 -45 l 382 55 z\"\n    },\n    \"articAccentAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 339,\n      \"y_min\": 1,\n      \"y_max\": 245,\n      \"ha\": 244,\n      \"o\": \"m 0 318 b 20 298 0 311 4 304 b 346 187 20 298 331 193 b 356 177 353 186 356 181 b 344 167 356 173 353 170 b 20 58 328 163 20 58 b 0 36 4 50 0 43 b 3 23 0 32 1 27 b 23 1 7 13 13 1 b 29 3 24 1 27 1 l 469 151 b 488 177 488 156 488 166 b 469 203 488 189 488 197 l 37 350 b 24 353 32 351 26 353 b 3 333 12 353 7 344 b 0 318 1 327 0 323 z\"\n    },\n    \"articAccentBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 339,\n      \"y_min\": -244,\n      \"y_max\": 0,\n      \"ha\": 244,\n      \"o\": \"m 0 -35 b 20 -55 0 -42 4 -49 b 346 -166 20 -55 331 -160 b 356 -176 353 -167 356 -171 b 344 -186 356 -180 353 -183 b 20 -295 328 -190 20 -295 b 0 -317 4 -302 0 -310 b 3 -330 0 -321 1 -325 b 23 -351 7 -340 13 -351 b 29 -350 24 -351 27 -351 l 469 -202 b 488 -176 488 -197 488 -187 b 469 -150 488 -164 488 -156 l 37 -3 b 24 0 32 -1 26 0 b 3 -20 12 0 7 -9 b 0 -35 1 -26 0 -30 z\"\n    },\n    \"articTenutoAbove\": {\n      \"x_min\": -1,\n      \"x_max\": 338,\n      \"y_min\": 0,\n      \"y_max\": 48,\n      \"ha\": 48,\n      \"o\": \"m 33 0 l 452 0 b 487 35 485 0 487 16 b 452 69 487 53 487 69 l 33 69 b -1 35 -1 69 -1 53 b 33 0 -1 16 -1 0 z\"\n    },\n    \"articTenutoBelow\": {\n      \"x_min\": -1,\n      \"x_max\": 338,\n      \"y_min\": -48,\n      \"y_max\": 0,\n      \"ha\": 48,\n      \"o\": \"m 33 -69 l 452 -69 b 487 -35 485 -69 487 -53 b 452 0 487 -16 487 0 l 33 0 b -1 -35 -1 0 -1 -16 b 33 -69 -1 -53 -1 -69 z\"\n    },\n    \"articStaccatoAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 84,\n      \"y_min\": 0,\n      \"y_max\": 84,\n      \"ha\": 84,\n      \"o\": \"m 60 0 b 121 60 94 0 121 27 b 60 121 121 94 94 121 b 0 60 27 121 0 94 b 60 0 0 27 27 0 z\"\n    },\n    \"articStaccatoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 84,\n      \"y_min\": -84,\n      \"y_max\": 0,\n      \"ha\": 84,\n      \"o\": \"m 60 -121 b 121 -60 94 -121 121 -94 b 60 0 121 -27 94 0 b 0 -60 27 0 0 -27 b 60 -121 0 -94 27 -121 z\"\n    },\n    \"articStaccatissimoAbove\": {\n      \"x_min\": 1,\n      \"x_max\": 100,\n      \"y_min\": -2,\n      \"y_max\": 293,\n      \"ha\": 295,\n      \"o\": \"m 1 390 b 72 -3 1 369 39 -3 b 144 389 108 -3 144 356 b 72 422 144 410 111 422 b 1 390 35 422 3 409 z\"\n    },\n    \"articStaccatissimoBelow\": {\n      \"x_min\": 1,\n      \"x_max\": 100,\n      \"y_min\": -295,\n      \"y_max\": 0,\n      \"ha\": 295,\n      \"o\": \"m 1 -393 b 72 -425 3 -412 35 -425 b 144 -392 111 -425 144 -413 b 72 0 144 -359 108 0 b 1 -393 39 0 1 -372 z\"\n    },\n    \"articMarcatoAbove\": {\n      \"x_min\": -1,\n      \"x_max\": 235,\n      \"y_min\": -1,\n      \"y_max\": 253,\n      \"ha\": 254,\n      \"o\": \"m -1 16 b 9 0 -1 9 1 1 b 16 -1 10 -1 14 -1 b 32 9 22 -1 29 1 b 112 186 32 9 109 180 b 118 190 114 189 115 190 b 127 186 121 190 124 189 b 209 9 128 180 209 9 b 225 0 213 3 219 0 l 323 0 b 338 16 333 1 338 7 b 337 23 338 19 338 22 l 181 356 b 167 364 177 361 173 364 b 153 356 157 364 153 356 l 0 23 b -1 16 -1 20 -1 19 z\"\n    },\n    \"articMarcatoBelow\": {\n      \"x_min\": -1,\n      \"x_max\": 235,\n      \"y_min\": -254,\n      \"y_max\": 0,\n      \"ha\": 254,\n      \"o\": \"m -1 -17 b 0 -24 -1 -20 -1 -23 l 156 -357 b 170 -366 160 -363 164 -366 b 184 -357 180 -366 184 -357 l 337 -24 b 338 -17 338 -22 338 -20 b 328 -1 338 -10 336 -3 b 321 0 327 0 323 0 b 305 -10 315 0 308 -3 b 225 -187 305 -10 228 -181 b 219 -192 223 -190 222 -192 b 210 -187 216 -192 213 -190 b 128 -10 209 -181 128 -10 b 112 -1 124 -4 118 -1 l 14 -1 b -1 -17 4 -3 -1 -9 z\"\n    },\n    \"fermataAbove\": {\n      \"x_min\": 3,\n      \"x_max\": 605,\n      \"y_min\": -3,\n      \"y_max\": 329,\n      \"ha\": 332,\n      \"o\": \"m 4 14 b 23 -4 4 0 12 -4 b 52 26 36 -4 43 6 b 56 39 53 27 55 33 b 435 318 73 98 138 318 b 818 36 742 318 804 91 b 821 26 819 32 819 27 b 851 -4 831 6 837 -4 b 871 16 864 -4 871 1 b 870 30 871 20 871 24 b 438 474 780 471 480 474 b 6 30 392 474 94 471 b 4 14 4 24 4 19 z m 359 75 b 436 -4 359 32 395 -4 b 516 75 480 -4 516 32 b 436 153 516 117 480 153 b 359 75 395 153 359 117 z\"\n    },\n    \"fermataBelow\": {\n      \"x_min\": 3,\n      \"x_max\": 605,\n      \"y_min\": -332,\n      \"y_max\": 0,\n      \"ha\": 332,\n      \"o\": \"m 6 -35 b 438 -478 94 -475 392 -478 b 870 -35 480 -478 780 -475 b 871 -20 871 -29 871 -24 b 851 0 871 -6 864 0 b 821 -30 837 0 831 -10 b 818 -40 819 -32 819 -36 b 435 -323 804 -95 742 -323 b 56 -43 138 -323 73 -102 b 52 -30 55 -37 53 -32 b 23 0 43 -10 36 0 b 4 -19 12 0 4 -4 b 6 -35 4 -23 4 -29 z m 436 -157 b 516 -79 480 -157 516 -121 b 436 0 516 -36 480 0 b 359 -79 395 0 359 -36 b 436 -157 359 -121 395 -157 z\"\n    },\n    \"breathMarkComma\": {\n      \"x_min\": 1,\n      \"x_max\": 152,\n      \"y_min\": 2,\n      \"y_max\": 251,\n      \"ha\": 249,\n      \"o\": \"m 1 271 b 82 190 1 222 35 190 b 122 160 118 190 122 160 b 125 144 124 154 125 150 b 102 88 125 124 115 105 b 37 32 78 56 40 35 b 26 19 32 29 26 26 b 27 14 26 17 27 16 b 37 3 29 6 33 3 b 181 102 85 3 158 66 b 219 239 210 147 219 197 l 219 249 b 104 361 219 317 170 361 b 1 271 42 361 1 321 z\"\n    },\n    \"breathMarkUpbow\": {\n      \"x_min\": 1,\n      \"x_max\": 249,\n      \"y_min\": 1,\n      \"y_max\": 495,\n      \"ha\": 494,\n      \"o\": \"m 1 690 b 3 683 1 687 1 685 l 154 22 b 181 1 157 10 167 1 b 206 22 193 1 203 10 l 359 683 l 359 688 b 338 713 359 700 351 710 l 333 713 b 308 694 321 713 311 706 l 180 140 l 53 694 b 27 713 49 706 39 713 l 22 713 b 1 690 10 710 1 700 z\"\n    },\n    \"caesura\": {\n      \"x_min\": 0,\n      \"x_max\": 384,\n      \"y_min\": -1,\n      \"y_max\": 532,\n      \"ha\": 533,\n      \"o\": \"m 258 1 b 271 -1 262 -1 266 -1 b 308 26 287 -1 302 9 l 552 713 b 553 726 553 717 553 721 b 513 766 553 747 534 766 b 475 739 495 766 481 756 l 232 52 b 230 39 230 48 230 43 b 258 1 230 23 240 7 z m 27 1 b 40 -1 32 -1 36 -1 b 78 26 58 -1 72 9 l 321 713 b 323 726 323 717 323 721 b 282 766 323 747 304 766 b 245 739 265 766 251 756 l 3 52 b 0 37 1 48 0 42 b 27 1 0 22 10 7 z\"\n    },\n    \"caesuraCurved\": {\n      \"x_min\": 0,\n      \"x_max\": 373,\n      \"y_min\": 0,\n      \"y_max\": 530,\n      \"ha\": 530,\n      \"o\": \"m 0 29 b 29 0 0 14 12 0 b 53 16 39 0 48 6 l 82 69 b 314 716 187 264 314 498 b 268 763 314 742 295 763 b 222 719 245 763 223 744 b 29 98 209 507 117 295 l 3 39 b 0 29 1 36 0 33 z m 223 27 b 252 0 223 13 233 0 b 276 16 262 0 272 6 b 537 716 386 230 537 478 b 491 763 537 742 518 763 b 445 719 468 763 446 744 b 252 98 432 507 340 295 l 226 39 b 223 27 225 35 223 32 z\"\n    },\n    \"restMaxima\": {\n      \"x_min\": 0,\n      \"x_max\": 381,\n      \"y_min\": -249,\n      \"y_max\": 250,\n      \"ha\": 499,\n      \"o\": \"m 369 331 l 369 -330 b 392 -359 369 -354 379 -359 l 524 -359 b 549 -330 539 -359 549 -354 l 549 331 b 524 360 549 356 539 360 l 392 360 b 369 331 379 360 369 356 z m 23 -359 l 156 -359 b 180 -330 170 -359 180 -354 l 180 331 b 156 360 180 356 170 360 l 23 360 b 0 331 10 360 0 356 l 0 -330 b 23 -359 0 -354 10 -359 z\"\n    },\n    \"restDoubleWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 125,\n      \"y_min\": 0,\n      \"y_max\": 250,\n      \"ha\": 250,\n      \"o\": \"m 23 0 l 156 0 b 180 22 170 0 180 10 l 180 338 b 156 360 180 350 170 360 l 23 360 b 0 338 10 360 0 350 l 0 22 b 23 0 0 10 10 0 z\"\n    },\n    \"restWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 282,\n      \"y_min\": -135,\n      \"y_max\": 9,\n      \"ha\": 144,\n      \"o\": \"m 37 -194 l 369 -194 b 406 -157 389 -194 406 -177 l 406 -24 b 369 13 406 -3 389 13 l 37 13 b 0 -24 16 13 0 -3 l 0 -157 b 37 -194 0 -177 16 -194 z\"\n    },\n    \"restHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 282,\n      \"y_min\": -2,\n      \"y_max\": 142,\n      \"ha\": 144,\n      \"o\": \"m 37 -3 l 369 -3 b 406 35 389 -3 406 14 l 406 167 b 369 204 406 189 389 204 l 37 204 b 0 167 16 204 0 189 l 0 35 b 37 -3 0 14 16 -3 z\"\n    },\n    \"restQuarter\": {\n      \"x_min\": 1,\n      \"x_max\": 270,\n      \"y_min\": -375,\n      \"y_max\": 373,\n      \"ha\": 748,\n      \"o\": \"m 168 -527 b 206 -540 180 -536 194 -540 b 228 -531 216 -540 226 -537 b 230 -521 229 -527 230 -524 b 207 -487 230 -508 219 -497 b 170 -435 189 -487 173 -448 b 164 -397 166 -423 164 -410 b 255 -292 164 -338 194 -292 b 367 -317 297 -292 344 -308 b 372 -318 369 -317 370 -318 b 382 -320 376 -320 379 -320 b 389 -314 386 -320 389 -318 b 336 -232 389 -297 351 -249 b 236 -32 281 -166 236 -112 b 238 -13 236 -26 238 -19 b 333 199 243 71 295 140 b 338 220 337 206 338 213 b 333 248 338 235 333 248 b 95 526 333 248 120 501 b 69 537 88 533 78 537 b 40 507 55 537 40 527 b 46 484 40 500 42 492 b 134 291 52 468 134 395 b 48 108 134 238 112 176 b 27 66 33 94 27 78 b 42 32 27 46 42 32 l 112 -55 b 174 -141 135 -84 156 -111 b 183 -161 177 -147 183 -158 b 181 -167 183 -163 183 -166 b 166 -174 179 -173 173 -174 b 143 -170 160 -174 148 -171 b 120 -166 135 -170 127 -166 b 1 -304 58 -166 1 -228 b 168 -527 1 -376 63 -446 z\"\n    },\n    \"rest8th\": {\n      \"x_min\": 0,\n      \"x_max\": 247,\n      \"y_min\": -251,\n      \"y_max\": 174,\n      \"ha\": 425,\n      \"o\": \"m 39 81 b 117 56 62 65 89 56 b 173 66 137 56 157 60 b 225 88 193 72 206 78 b 232 89 228 89 230 89 b 239 76 238 89 239 84 b 238 60 239 72 239 66 b 104 -343 233 39 130 -248 b 145 -361 104 -360 137 -361 b 196 -347 161 -361 181 -359 b 341 161 200 -344 341 161 b 356 217 347 187 354 210 b 338 240 356 232 341 239 b 323 235 336 240 331 240 b 193 140 312 226 240 140 l 193 154 b 96 251 193 207 150 251 b 0 154 43 251 0 207 b 39 81 0 124 17 98 z\"\n    },\n    \"rest16th\": {\n      \"x_min\": 0,\n      \"x_max\": 320,\n      \"y_min\": -500,\n      \"y_max\": 179,\n      \"ha\": 679,\n      \"o\": \"m 115 -301 b 223 -271 153 -301 190 -288 b 229 -278 226 -271 229 -274 b 228 -282 229 -279 228 -281 l 91 -690 b 89 -694 91 -691 89 -693 b 134 -720 89 -706 102 -720 b 189 -687 176 -720 183 -703 l 356 -138 b 420 81 393 -16 420 81 b 459 226 420 81 456 207 b 461 232 459 229 461 230 b 446 248 461 240 449 246 b 431 242 439 248 435 245 b 300 145 420 233 348 147 l 300 160 b 202 258 300 215 256 258 b 104 160 148 258 104 215 b 219 62 104 101 164 62 b 331 94 258 62 298 75 b 341 96 336 95 338 96 b 348 86 346 96 348 94 b 265 -173 348 63 275 -151 b 194 -217 253 -200 215 -217 b 196 -203 196 -212 196 -207 b 98 -105 196 -148 151 -105 b 0 -203 43 -105 0 -148 b 115 -301 0 -262 60 -301 z\"\n    },\n    \"rest32nd\": {\n      \"x_min\": 0,\n      \"x_max\": 363,\n      \"y_min\": -500,\n      \"y_max\": 426,\n      \"ha\": 926,\n      \"o\": \"m 0 -203 b 115 -301 0 -262 60 -301 b 228 -269 154 -301 194 -288 b 232 -268 229 -268 230 -268 b 240 -276 236 -268 240 -272 b 138 -688 240 -282 141 -678 b 137 -697 137 -691 137 -694 b 176 -720 137 -708 145 -720 b 232 -690 222 -720 226 -706 b 484 436 236 -672 484 436 b 521 582 484 436 518 564 b 523 588 521 585 523 586 b 508 603 523 600 511 603 b 492 598 501 603 497 600 b 361 503 482 590 410 503 l 361 516 b 264 613 361 570 318 613 b 166 516 210 613 166 570 b 206 444 166 487 183 461 b 246 423 217 433 232 428 b 284 418 258 420 269 418 b 393 449 321 418 360 432 b 399 451 395 451 397 451 b 415 428 409 451 415 436 b 413 422 415 426 413 423 l 357 192 b 279 140 350 168 302 140 b 281 153 281 144 281 148 b 183 251 281 207 236 251 b 85 153 128 251 85 207 b 125 81 85 124 102 98 b 164 60 137 71 150 65 b 203 55 176 58 189 55 b 311 86 240 55 278 69 b 315 88 312 88 314 88 b 325 69 323 88 325 76 l 268 -167 b 194 -217 261 -197 216 -216 b 196 -203 196 -212 196 -207 b 98 -105 196 -148 153 -105 b 0 -203 45 -105 0 -148 z\"\n    },\n    \"rest64th\": {\n      \"x_min\": 0,\n      \"x_max\": 423,\n      \"y_min\": -753,\n      \"y_max\": 430,\n      \"ha\": 1183,\n      \"o\": \"m 0 -554 b 40 -626 0 -583 17 -609 b 118 -652 60 -644 92 -652 b 210 -629 145 -652 186 -642 b 216 -628 213 -628 215 -628 b 228 -644 223 -628 228 -635 b 226 -652 228 -647 226 -649 l 122 -1054 b 121 -1064 121 -1058 121 -1061 b 167 -1084 121 -1077 134 -1084 b 215 -1060 202 -1084 209 -1076 b 402 -278 217 -1047 229 -1021 b 436 -135 403 -278 431 -161 l 570 441 b 609 588 570 441 605 569 b 596 609 609 603 602 608 b 580 603 589 609 585 606 b 448 507 569 595 497 507 b 449 521 449 511 449 516 b 351 619 449 575 405 619 b 253 521 297 619 253 575 b 372 422 253 461 317 422 b 481 454 410 422 446 438 b 491 456 484 455 488 456 b 504 441 498 456 504 451 b 501 426 504 436 503 432 b 445 202 500 422 451 217 b 359 144 435 174 383 144 l 359 158 b 261 256 359 212 315 256 b 163 158 207 256 163 212 b 243 65 163 112 202 78 b 279 60 255 62 266 60 b 397 91 320 60 360 73 b 403 92 400 92 402 92 b 412 79 409 92 412 86 b 410 72 412 76 412 75 b 351 -161 408 59 356 -150 b 281 -212 340 -199 301 -212 l 281 -197 b 183 -99 281 -144 238 -99 b 85 -197 130 -99 85 -144 b 125 -271 85 -228 102 -253 b 166 -291 138 -279 151 -287 b 204 -297 177 -294 192 -297 b 262 -287 225 -297 245 -292 b 305 -265 282 -279 287 -274 b 310 -264 307 -264 308 -264 b 318 -284 317 -264 318 -275 b 317 -295 318 -288 317 -294 b 259 -524 315 -302 265 -508 b 194 -567 251 -554 213 -567 b 196 -554 196 -563 196 -559 b 98 -456 196 -500 153 -456 b 0 -554 45 -456 0 -500 z\"\n    },\n    \"rest128th\": {\n      \"x_min\": 0,\n      \"x_max\": 485,\n      \"y_min\": -750,\n      \"y_max\": 689,\n      \"ha\": 1439,\n      \"o\": \"m 118 -652 b 176 -642 138 -652 160 -648 b 180 -641 177 -642 179 -641 b 228 -621 197 -635 210 -629 b 232 -619 229 -621 230 -619 b 239 -626 236 -619 239 -622 b 238 -632 239 -628 239 -631 b 131 -1057 235 -642 134 -1050 b 173 -1080 131 -1071 140 -1080 b 230 -1057 219 -1080 225 -1074 l 658 815 b 697 960 658 815 694 942 b 698 966 697 963 698 965 b 684 982 698 975 687 981 b 668 976 677 982 672 979 b 537 880 658 969 586 881 l 537 894 b 439 992 537 949 494 992 b 341 894 386 992 341 949 b 382 822 341 865 359 840 b 459 796 402 805 433 796 b 517 806 480 796 501 801 b 521 808 518 806 520 808 b 569 828 539 814 552 819 b 580 831 572 829 577 831 b 598 812 589 831 598 825 b 596 801 598 809 598 805 b 540 575 590 773 546 595 b 448 510 534 553 475 510 l 448 524 b 350 622 448 577 405 622 b 252 524 297 622 252 577 b 292 451 252 494 269 468 b 369 426 318 433 337 426 b 429 435 389 426 412 429 b 494 464 449 442 475 455 b 498 465 495 465 497 465 b 505 446 504 465 505 456 b 503 426 505 439 504 432 l 446 202 b 366 144 439 173 389 144 l 366 158 b 268 256 366 212 323 256 b 170 158 215 256 170 212 b 289 59 170 98 235 59 b 347 69 310 59 330 63 b 397 91 367 76 379 82 b 406 94 400 92 403 94 b 415 79 412 94 415 88 b 412 63 415 75 413 69 b 357 -157 408 42 364 -134 b 281 -212 346 -196 302 -212 b 282 -197 281 -207 282 -203 b 184 -99 282 -144 238 -99 b 86 -197 130 -99 86 -144 b 204 -297 86 -258 150 -297 b 262 -287 225 -297 245 -292 b 312 -265 282 -279 294 -274 b 318 -264 314 -264 317 -264 b 327 -275 324 -264 327 -269 b 266 -517 324 -287 278 -490 b 200 -569 248 -566 220 -567 l 196 -554 b 98 -456 196 -500 153 -456 b 0 -554 45 -456 0 -500 b 118 -652 0 -615 63 -652 z\"\n    },\n    \"dynamicPiano\": {\n      \"x_min\": -89,\n      \"x_max\": 366,\n      \"y_min\": -142,\n      \"y_max\": 274,\n      \"ha\": 416,\n      \"o\": \"m -128 -187 b -111 -204 -128 -199 -122 -204 l 167 -204 b 186 -186 180 -204 186 -199 b 168 -168 186 -174 180 -168 l 111 -168 b 98 -164 102 -168 98 -168 b 101 -154 98 -163 99 -158 l 166 7 b 179 24 168 14 171 24 b 213 -1 186 24 190 10 b 276 -14 233 -12 252 -14 b 527 266 415 -14 527 130 b 395 395 527 350 475 395 b 292 357 350 395 318 380 b 262 328 272 340 268 328 b 246 363 255 328 259 338 b 177 393 236 380 215 393 b 1 251 92 393 46 333 b -9 223 -6 238 -9 230 b 7 207 -9 213 -1 207 b 30 229 17 207 23 216 b 127 338 72 301 101 338 b 143 321 138 338 143 331 b 134 285 143 310 138 295 l -43 -154 b -65 -168 -48 -166 -50 -168 l -109 -168 b -128 -187 -122 -168 -128 -174 z m 207 81 b 235 180 207 111 219 140 l 264 251 b 356 341 284 300 321 341 b 389 288 380 341 389 320 b 243 35 389 217 312 35 b 207 81 219 35 207 50 z\"\n    },\n    \"dynamicMezzo\": {\n      \"x_min\": -20,\n      \"x_max\": 446,\n      \"y_min\": -10,\n      \"y_max\": 274,\n      \"ha\": 284,\n      \"o\": \"m -29 223 b -13 207 -29 213 -22 207 b 9 226 -3 207 1 215 b 107 338 52 300 81 338 b 122 321 118 338 122 331 b 114 285 122 310 118 295 l 9 24 b 4 9 6 17 4 13 b 20 0 4 3 9 0 l 91 0 b 114 17 104 0 108 3 l 207 251 b 287 323 225 292 255 323 b 308 302 304 323 308 314 b 294 249 308 285 302 269 b 203 24 294 248 292 248 b 199 9 200 17 199 13 b 215 0 199 3 203 0 l 285 0 b 308 17 298 0 302 3 l 402 251 b 481 323 419 292 449 323 b 503 302 498 323 503 314 b 413 43 503 252 413 104 b 478 -14 413 6 436 -14 b 629 102 533 -14 583 26 b 642 132 638 117 642 125 b 629 145 642 141 636 145 b 608 127 619 145 615 138 b 534 49 580 84 553 49 b 523 62 526 49 523 53 b 606 317 523 112 606 238 b 528 395 606 353 588 395 b 431 350 487 395 454 374 b 409 330 416 336 415 330 b 397 360 402 330 406 341 b 334 395 389 379 370 395 b 236 350 292 395 259 374 b 215 330 222 336 220 330 b 203 360 207 330 212 340 b 147 393 194 379 174 393 b -19 251 71 393 26 331 b -29 223 -26 238 -29 230 z\"\n    },\n    \"dynamicForte\": {\n      \"x_min\": -141,\n      \"x_max\": 364,\n      \"y_min\": -152,\n      \"y_max\": 444,\n      \"ha\": 596,\n      \"o\": \"m -203 -122 b -95 -219 -203 -186 -156 -219 b 161 17 14 -219 82 -145 b 269 315 203 105 235 194 b 289 336 269 323 284 336 l 383 336 b 406 359 399 336 406 343 b 384 380 406 373 399 380 l 298 380 b 284 387 288 380 284 380 b 287 405 284 392 285 396 b 419 606 315 530 347 606 b 442 595 431 606 442 603 b 419 580 442 586 435 588 b 389 526 400 572 389 552 b 454 465 389 485 418 465 b 524 543 491 465 524 490 b 400 639 524 596 491 639 b 135 402 261 639 183 540 b 107 380 128 380 127 380 l 23 380 b 0 357 7 380 0 373 b 22 336 0 343 7 336 l 105 336 b 117 330 114 336 117 336 b 114 315 117 327 115 323 l 23 0 b -101 -187 -17 -141 -43 -187 b -127 -174 -120 -187 -127 -181 b -92 -156 -127 -163 -114 -170 b -63 -102 -75 -144 -63 -125 b -128 -43 -63 -65 -89 -43 b -203 -122 -171 -43 -203 -78 z\"\n    },\n    \"dynamicRinforzando\": {\n      \"x_min\": -20,\n      \"x_max\": 277,\n      \"y_min\": 0,\n      \"y_max\": 274,\n      \"ha\": 274,\n      \"o\": \"m -13 207 b 9 226 -3 207 3 215 b 107 338 52 301 81 338 b 122 321 118 338 122 331 b 114 285 122 310 118 295 l 9 24 b 4 9 6 17 4 13 b 20 0 4 3 9 0 l 91 0 b 114 17 104 0 108 3 l 207 251 b 304 351 226 298 272 351 b 318 343 312 351 318 348 b 287 285 318 330 287 325 b 338 239 287 256 308 239 b 399 318 373 239 399 268 b 324 395 399 360 377 395 b 235 350 287 395 256 374 b 215 330 222 336 220 330 b 203 360 207 330 213 337 b 145 393 194 379 174 393 b -19 251 75 393 27 337 b -29 223 -26 238 -29 230 b -13 207 -29 213 -22 207 z\"\n    },\n    \"dynamicSforzando\": {\n      \"x_min\": 0,\n      \"x_max\": 229,\n      \"y_min\": -10,\n      \"y_max\": 273,\n      \"ha\": 283,\n      \"o\": \"m 125 -14 b 291 120 219 -14 291 36 b 220 232 291 160 276 190 b 151 314 168 271 151 287 b 213 361 151 337 168 361 b 258 346 238 361 258 356 b 240 333 258 340 251 340 b 226 298 232 325 226 314 b 276 252 226 269 248 252 b 330 307 311 252 330 279 b 212 393 330 360 285 393 b 68 274 127 393 68 350 b 145 161 68 223 95 196 b 200 85 187 132 200 114 b 127 20 200 53 173 20 b 66 42 91 20 66 32 b 91 56 66 49 75 46 b 111 98 104 65 111 79 b 59 145 111 127 86 145 b 0 78 24 145 0 117 b 125 -14 0 30 49 -14 z\"\n    },\n    \"dynamicZ\": {\n      \"x_min\": -30,\n      \"x_max\": 244,\n      \"y_min\": -10,\n      \"y_max\": 268,\n      \"ha\": 278,\n      \"o\": \"m -24 -1 b 4 16 -12 -1 -3 10 b 39 30 16 24 27 30 b 179 -14 79 30 108 -14 b 297 102 259 -14 297 43 b 245 166 297 147 271 166 b 197 115 219 166 197 145 b 236 72 197 88 216 72 b 259 79 251 72 255 79 b 264 75 262 79 264 78 b 258 60 264 72 261 66 b 229 45 252 50 242 45 b 117 95 186 45 173 95 b 85 86 98 95 89 86 b 102 111 85 86 95 104 l 333 338 b 351 370 344 350 351 359 b 333 386 351 380 343 386 b 298 377 321 386 314 382 b 239 370 282 373 259 370 b 94 383 153 370 111 383 b 68 364 79 383 72 377 l 33 264 b 29 242 30 255 29 248 b 45 228 29 232 36 228 b 66 249 55 228 60 236 l 81 279 b 96 297 85 288 88 297 b 168 292 102 297 127 292 b 223 302 194 292 215 302 b 196 269 229 302 197 271 l -26 45 b -43 16 -37 33 -43 27 b -24 -1 -43 6 -36 -1 z\"\n    },\n    \"ornamentTrill\": {\n      \"x_min\": 0,\n      \"x_max\": 521,\n      \"y_min\": -10,\n      \"y_max\": 390,\n      \"ha\": 400,\n      \"o\": \"m 95 210 b 140 213 112 210 131 213 b 144 209 143 213 144 212 b 140 194 144 206 143 202 l 124 156 b 96 58 108 117 96 88 b 179 -14 96 17 124 -14 b 325 153 253 -14 325 46 b 307 251 325 187 320 219 b 302 265 304 258 302 261 b 334 294 302 274 311 281 l 343 298 b 455 348 393 328 428 348 b 474 327 468 348 474 344 b 465 285 474 312 469 295 l 360 24 b 356 9 357 17 356 13 b 372 0 356 3 360 0 l 442 0 b 465 17 455 0 459 3 l 559 251 b 655 351 577 298 624 351 b 670 343 664 351 670 348 b 638 285 670 330 638 325 b 690 239 638 256 660 239 b 750 318 724 239 750 268 b 675 395 750 360 729 395 b 586 350 638 395 608 374 b 566 330 573 336 572 330 b 553 361 559 330 564 340 b 490 393 543 380 521 393 b 347 348 432 393 377 364 b 312 333 328 338 320 333 b 308 337 310 333 308 334 b 315 359 308 343 312 351 l 387 537 b 392 553 390 544 392 549 b 383 562 392 559 389 562 b 364 557 377 562 369 559 l 294 534 b 269 511 281 530 275 526 l 217 384 b 206 367 212 370 210 367 b 179 380 200 367 192 374 b 118 393 158 389 140 393 b 0 292 50 393 0 353 b 95 210 0 248 30 210 z m 118 360 b 192 325 134 360 192 347 b 186 307 192 321 189 314 l 180 292 b 148 265 173 274 167 269 b 98 258 130 261 112 258 b 39 301 50 258 39 281 b 118 360 39 327 60 360 z m 196 48 b 207 92 196 59 202 78 b 264 230 207 94 209 94 b 272 240 266 238 268 240 b 279 229 276 240 276 236 b 292 151 279 204 292 177 b 212 30 292 88 253 30 b 196 48 200 30 196 37 z\"\n    },\n    \"ornamentTurn\": {\n      \"x_min\": 0,\n      \"x_max\": 460,\n      \"y_min\": 0,\n      \"y_max\": 218,\n      \"ha\": 218,\n      \"o\": \"m 0 148 b 128 0 0 45 66 0 b 209 63 173 0 209 20 b 157 115 209 95 187 115 b 84 82 115 115 114 82 b 36 150 59 82 36 112 b 130 242 36 212 79 242 b 285 134 176 242 223 203 b 513 1 356 56 419 1 b 662 166 608 1 662 73 b 534 314 662 269 596 314 b 454 251 490 314 454 294 b 505 199 454 219 475 199 b 579 232 547 199 549 232 b 626 164 603 232 626 202 b 533 72 626 102 583 72 b 377 180 487 72 439 111 b 150 312 307 258 243 312 b 0 148 55 312 0 240 z\"\n    },\n    \"ornamentTurnSlash\": {\n      \"x_min\": 0,\n      \"x_max\": 460,\n      \"y_min\": -90,\n      \"y_max\": 306,\n      \"ha\": 396,\n      \"o\": \"m 0 147 b 128 -1 0 43 66 -1 b 209 62 173 -1 209 19 b 157 114 209 94 187 114 b 84 81 115 114 114 81 b 36 148 59 81 36 111 b 130 240 36 210 79 240 b 285 128 176 240 222 197 b 307 79 304 108 307 105 l 307 -107 b 330 -130 307 -122 312 -130 b 353 -107 347 -130 353 -122 l 353 37 b 360 59 353 53 353 59 b 402 33 369 59 376 49 b 513 0 435 13 471 0 b 662 164 608 0 662 72 b 534 312 662 268 596 312 b 454 249 490 312 454 292 b 505 197 454 217 475 197 b 579 230 547 197 549 230 b 626 163 603 230 626 200 b 533 71 626 101 583 71 b 377 183 487 71 441 114 b 356 232 359 203 356 206 l 356 418 b 333 441 356 433 350 441 b 310 418 315 441 310 433 l 310 274 b 302 252 310 258 308 252 b 261 278 294 252 287 262 b 150 311 228 298 192 311 b 0 147 55 311 0 239 z\"\n    },\n    \"ornamentMordent\": {\n      \"x_min\": 1,\n      \"x_max\": 729,\n      \"y_min\": -73,\n      \"y_max\": 319,\n      \"ha\": 392,\n      \"o\": \"m 30 59 b 88 94 53 59 73 79 b 144 143 107 109 124 127 b 176 161 158 154 168 161 b 197 144 183 161 189 156 l 323 10 b 351 0 328 3 340 0 b 377 9 361 0 372 3 b 498 114 392 17 475 94 l 498 -105 l 544 -105 l 544 153 b 562 160 550 157 556 160 b 585 144 569 160 576 156 b 710 10 590 135 697 24 b 737 0 716 3 727 0 b 765 9 749 0 759 3 b 1030 295 776 17 1011 274 l 1032 300 b 1050 328 1041 308 1050 318 b 1012 353 1050 343 1024 353 b 986 343 1002 353 994 348 b 854 190 971 330 871 206 b 828 176 842 180 835 176 b 802 190 818 176 809 183 b 681 333 791 202 696 320 b 645 353 668 344 657 353 b 613 340 634 353 626 350 b 580 304 600 330 590 315 l 546 265 l 546 459 l 501 459 l 501 216 l 459 167 b 449 156 455 164 452 160 b 302 327 397 216 310 317 b 258 353 291 338 282 351 b 226 340 245 353 238 348 b 193 304 213 330 203 317 l 187 298 b 72 167 148 255 109 212 l 20 107 b 1 73 12 98 1 84 b 30 59 1 65 9 59 z\"\n    },\n    \"ornamentShortTrill\": {\n      \"x_min\": 0,\n      \"x_max\": 725,\n      \"y_min\": 0,\n      \"y_max\": 245,\n      \"ha\": 245,\n      \"o\": \"m 0 72 b 29 58 0 63 7 58 b 88 92 50 58 72 78 b 143 141 105 109 124 125 b 147 144 144 143 145 144 b 174 160 158 153 168 160 b 197 143 181 160 187 154 b 321 10 203 135 310 24 b 350 0 327 3 338 0 b 377 7 361 0 372 3 l 436 65 b 469 92 449 72 459 84 b 524 141 487 109 505 125 l 528 145 b 533 148 531 147 531 148 b 554 160 541 154 550 160 b 577 143 562 160 569 154 b 703 10 585 135 691 24 b 732 0 708 3 720 0 b 759 7 743 0 753 3 b 1024 294 769 16 1005 272 b 1044 327 1032 305 1044 321 b 1005 353 1044 341 1018 353 b 979 343 996 353 988 348 b 848 189 963 330 864 204 b 821 174 837 179 828 174 b 796 189 811 174 804 181 b 674 331 783 202 688 318 b 641 351 662 343 651 351 b 606 340 628 351 619 350 b 573 304 593 328 583 315 b 452 167 533 258 491 213 l 445 158 l 301 325 b 256 353 291 338 282 350 b 225 340 246 353 238 350 b 192 304 212 328 203 315 l 17 107 b 0 72 12 96 0 76 z\"\n    },\n    \"ornamentTremblement\": {\n      \"x_min\": 1,\n      \"x_max\": 985,\n      \"y_min\": 0,\n      \"y_max\": 244,\n      \"ha\": 244,\n      \"o\": \"m 1 72 b 30 58 1 63 9 58 b 89 92 52 58 73 78 l 144 141 b 148 144 147 143 147 144 b 176 160 160 153 170 160 b 199 143 183 160 189 154 b 324 10 204 134 311 23 b 351 0 330 3 340 0 b 379 7 363 0 373 3 b 488 111 386 13 446 72 b 520 141 498 122 508 132 b 524 144 521 143 523 144 b 552 160 536 153 546 160 b 575 143 559 160 564 154 b 698 10 580 134 687 23 b 727 0 704 3 716 0 b 755 7 739 0 749 3 l 899 141 b 930 160 913 153 923 160 b 952 143 937 160 943 154 l 1077 10 b 1107 0 1084 3 1096 0 b 1133 7 1117 0 1128 3 b 1398 294 1143 16 1380 272 b 1418 327 1407 305 1418 321 b 1381 351 1418 343 1394 351 b 1354 341 1371 351 1362 348 b 1223 189 1338 328 1238 204 b 1195 174 1211 179 1202 174 b 1171 189 1185 174 1178 181 b 1048 331 1158 200 1063 318 b 1012 351 1035 343 1024 351 b 981 338 1002 351 994 350 b 948 304 968 328 958 315 b 827 166 907 258 865 212 b 821 160 825 164 822 163 l 678 325 b 634 351 667 338 657 350 b 602 338 621 351 613 348 b 569 304 590 328 580 315 l 444 161 b 302 325 392 222 311 317 b 258 351 291 338 281 350 b 228 338 245 351 238 348 b 193 304 215 328 204 315 l 19 107 b 1 72 13 96 1 76 z\"\n    },\n    \"ornamentPrecompAppoggTrill\": {\n      \"x_min\": 0,\n      \"x_max\": 1119,\n      \"y_min\": 0,\n      \"y_max\": 481,\n      \"ha\": 481,\n      \"o\": \"m 121 0 b 249 68 168 0 232 53 b 279 94 262 75 271 86 b 336 144 298 111 315 128 b 367 163 350 156 360 163 b 389 145 374 163 380 157 b 514 12 395 137 501 26 b 543 1 520 4 531 1 b 569 9 553 1 563 4 b 636 73 576 14 605 43 l 658 94 b 714 144 677 111 694 128 b 746 163 729 156 739 163 b 768 145 753 163 759 157 b 893 12 773 137 880 26 b 922 1 899 4 910 1 b 948 9 932 1 942 4 l 1012 71 b 1037 94 1022 78 1030 86 b 1092 144 1054 111 1073 128 b 1123 161 1106 156 1115 161 b 1146 145 1130 161 1136 157 b 1270 12 1152 137 1259 26 b 1299 1 1276 4 1287 1 b 1326 9 1310 1 1320 4 b 1591 297 1336 19 1572 275 b 1611 328 1600 307 1611 320 b 1574 354 1611 343 1585 354 b 1548 344 1565 354 1555 350 b 1416 192 1532 331 1431 206 b 1388 177 1404 181 1395 177 b 1365 190 1380 177 1371 184 b 1243 333 1352 203 1256 321 b 1205 354 1228 346 1217 354 b 1174 341 1195 354 1187 351 b 1140 305 1161 330 1152 317 l 1015 163 b 873 328 963 223 880 318 b 828 354 860 344 847 353 b 796 341 816 354 809 351 b 763 305 783 331 773 317 b 642 168 721 261 681 215 b 636 163 641 167 639 164 b 494 328 585 223 501 318 b 449 354 481 344 468 353 b 418 341 438 354 431 351 b 384 305 405 331 395 317 b 264 168 343 261 302 215 l 242 144 b 144 88 232 124 171 88 b 79 197 81 88 79 189 l 79 648 b 60 693 79 683 71 693 b 52 691 58 693 55 693 b 0 616 3 672 0 625 l 0 207 b 121 0 0 40 68 0 z\"\n    },\n    \"ornamentPrecompSlideTrillDAnglebert\": {\n      \"x_min\": 2,\n      \"x_max\": 1150,\n      \"y_min\": -367,\n      \"y_max\": 245,\n      \"ha\": 612,\n      \"o\": \"m 3 -144 b 4 -168 3 -153 3 -160 b 246 -482 24 -315 99 -422 b 458 -528 340 -521 410 -528 b 514 -526 485 -528 504 -526 b 552 -508 531 -526 552 -517 b 514 -497 552 -503 541 -498 l 503 -497 b 194 -390 432 -494 298 -488 b 69 -151 194 -390 69 -279 b 184 96 69 -60 128 27 b 328 183 202 118 258 183 b 477 96 413 183 454 118 b 559 10 510 62 552 19 b 588 0 566 3 576 0 b 613 7 598 0 609 3 b 723 112 622 14 681 73 b 789 161 733 122 776 161 b 811 144 796 161 802 156 b 936 10 816 135 923 24 b 965 0 942 3 953 0 b 991 7 975 0 985 3 b 1051 66 996 12 1022 37 b 1081 92 1063 73 1073 84 b 1136 143 1099 109 1117 127 b 1168 160 1151 154 1159 160 b 1191 144 1175 160 1181 156 b 1315 10 1197 135 1303 24 b 1344 0 1320 3 1332 0 b 1371 7 1355 0 1365 3 b 1636 295 1381 17 1617 274 b 1656 327 1644 305 1656 318 b 1619 353 1656 341 1630 353 b 1593 343 1610 353 1600 348 b 1460 190 1577 330 1476 204 b 1433 176 1449 180 1440 176 b 1410 189 1424 176 1416 183 b 1287 331 1397 202 1300 320 b 1250 353 1273 344 1261 353 b 1218 340 1240 353 1231 350 b 1185 304 1205 328 1197 315 l 1058 160 b 916 327 1007 220 923 317 b 871 353 903 343 890 351 b 840 340 860 353 852 350 b 806 304 827 330 816 315 b 685 167 765 259 724 213 l 680 160 l 615 235 b 419 344 582 275 523 344 b 3 -144 258 344 3 26 z\"\n    },\n    \"ornamentPrecompSlideTrillBach\": {\n      \"x_min\": 0,\n      \"x_max\": 1048,\n      \"y_min\": -367,\n      \"y_max\": 331,\n      \"ha\": 698,\n      \"o\": \"m 0 -144 b 1 -168 0 -153 0 -160 b 243 -482 22 -315 96 -422 b 455 -528 337 -521 408 -528 b 511 -526 482 -528 501 -526 b 549 -508 528 -526 549 -517 b 511 -497 549 -503 539 -498 l 500 -497 b 192 -390 429 -494 295 -488 b 66 -151 127 -336 66 -238 b 189 105 66 -58 127 35 b 232 143 203 118 216 131 b 264 161 246 154 256 161 b 285 144 271 161 276 156 b 410 10 291 135 397 24 b 439 0 416 3 428 0 b 465 7 449 0 459 3 l 531 72 b 554 92 540 78 547 86 b 611 143 573 109 590 127 b 642 161 625 154 635 161 b 664 144 649 161 655 156 b 789 10 670 135 776 24 b 818 0 795 3 806 0 b 844 7 828 0 838 3 b 904 66 850 12 876 37 b 935 92 916 73 924 84 b 979 134 949 107 963 121 l 979 -88 l 1037 -88 l 1037 151 l 1044 144 b 1168 10 1050 135 1156 24 b 1197 0 1174 3 1185 0 b 1224 7 1208 0 1218 3 b 1489 295 1234 17 1470 274 b 1509 327 1498 305 1509 318 b 1472 353 1509 341 1483 353 b 1446 343 1463 353 1453 348 b 1313 190 1430 330 1329 204 b 1286 176 1302 180 1293 176 b 1263 189 1277 176 1269 183 b 1140 331 1250 202 1153 320 b 1103 353 1126 344 1115 353 b 1071 340 1093 353 1084 350 b 1038 304 1058 328 1050 315 l 1038 477 l 979 477 l 979 238 l 912 160 b 769 327 858 220 775 317 b 724 353 756 343 743 351 b 693 340 713 353 706 350 b 660 304 680 330 670 315 b 539 167 618 259 577 213 b 533 161 536 166 534 163 b 390 327 480 220 396 317 b 346 353 377 343 364 351 l 340 353 b 308 340 330 353 321 350 b 275 304 295 330 285 315 b 117 122 220 243 168 186 b 0 -144 68 62 0 -48 z\"\n    },\n    \"ornamentPrecompTrillSuffixDandrieu\": {\n      \"x_min\": 0,\n      \"x_max\": 949,\n      \"y_min\": 0,\n      \"y_max\": 381,\n      \"ha\": 381,\n      \"o\": \"m 0 73 b 29 58 0 65 7 58 b 86 92 56 59 72 79 b 143 143 105 109 122 127 b 174 161 157 154 167 161 b 196 144 181 161 187 156 b 321 10 202 135 308 24 b 350 0 327 3 338 0 b 376 7 360 0 370 3 b 485 112 384 14 444 73 b 552 161 495 122 539 161 b 573 144 559 161 564 156 b 698 10 579 135 685 24 b 727 0 704 3 716 0 b 753 7 737 0 747 3 b 863 112 762 14 821 73 b 929 161 873 122 916 161 b 950 144 936 161 942 156 b 1076 10 956 135 1063 24 b 1104 0 1081 3 1093 0 b 1130 7 1115 0 1125 3 b 1236 108 1139 14 1195 69 b 1367 314 1297 160 1367 233 b 1250 521 1367 419 1318 482 b 1107 549 1211 537 1145 549 b 1083 546 1096 549 1087 549 b 1066 528 1071 540 1066 534 b 1079 520 1066 524 1070 520 b 1323 351 1187 517 1323 487 b 1201 171 1323 269 1260 219 b 1194 166 1201 171 1198 168 b 1056 327 1142 226 1063 317 b 1011 353 1043 343 1030 351 b 979 340 999 353 992 350 b 946 304 966 330 956 315 b 825 167 904 259 864 213 l 821 161 b 678 327 768 222 685 317 b 634 353 665 343 652 351 b 602 340 622 353 615 350 b 569 304 589 330 579 315 b 448 167 527 259 487 213 l 444 161 b 301 327 390 222 308 317 b 256 353 288 343 275 351 b 225 340 245 353 238 350 b 192 304 212 330 202 315 b 71 167 150 259 109 213 b 17 105 52 147 36 127 b 0 73 10 98 0 84 z\"\n    },\n    \"ornamentPrecompDoubleCadenceUpperPrefix\": {\n      \"x_min\": 0,\n      \"x_max\": 1278,\n      \"y_min\": 0,\n      \"y_max\": 247,\n      \"ha\": 247,\n      \"o\": \"m 1 285 b 308 0 42 190 157 0 b 530 120 415 1 482 63 b 559 144 539 128 549 137 b 590 163 573 156 583 163 b 612 145 598 163 603 157 b 739 10 618 137 724 24 b 768 0 744 3 756 0 b 793 7 778 0 788 3 b 903 114 802 14 861 75 l 939 144 b 971 163 953 156 963 163 b 992 145 978 163 984 157 b 1119 10 998 137 1106 24 b 1148 0 1125 3 1136 0 b 1174 7 1158 0 1168 3 b 1284 114 1182 14 1241 75 b 1316 144 1282 115 1312 141 b 1348 161 1331 156 1339 161 b 1371 145 1355 161 1361 157 b 1496 10 1377 137 1485 24 b 1525 0 1502 3 1513 0 b 1552 7 1536 0 1547 3 b 1819 298 1562 17 1800 276 b 1840 330 1829 308 1840 320 b 1832 344 1840 334 1837 340 b 1801 356 1820 351 1810 356 b 1776 346 1793 356 1783 351 b 1642 192 1760 333 1659 206 b 1614 177 1630 181 1621 177 b 1591 190 1606 177 1597 184 b 1469 334 1578 203 1482 323 b 1430 356 1453 347 1441 356 b 1398 343 1420 356 1411 353 b 1365 307 1385 331 1377 318 l 1240 164 b 1097 330 1187 226 1104 320 b 1053 356 1084 346 1071 354 b 1021 343 1041 356 1034 353 b 988 307 1008 333 998 318 b 865 168 946 262 904 216 l 861 163 b 717 330 808 223 724 320 b 672 356 704 346 691 354 b 641 343 661 356 654 353 b 608 307 628 333 618 318 b 485 168 566 262 524 216 l 455 134 b 284 46 409 88 351 46 b 16 285 148 46 32 265 b 3 295 9 292 4 295 b 0 291 1 295 0 292 b 1 285 0 288 1 285 z\"\n    },\n    \"ornamentPrecompDoubleCadenceUpperPrefixTurn\": {\n      \"x_min\": 0,\n      \"x_max\": 1277,\n      \"y_min\": -62,\n      \"y_max\": 333,\n      \"ha\": 395,\n      \"o\": \"m 0 289 b 1 284 0 287 1 284 b 308 -1 42 189 157 -1 b 530 118 415 0 481 62 b 557 143 539 127 547 135 b 590 161 572 154 582 161 b 612 144 598 161 603 156 b 737 9 618 135 724 24 b 768 -1 743 1 755 -1 b 793 6 778 -1 788 1 b 903 112 802 13 861 73 l 937 143 b 971 161 953 154 963 161 b 992 144 978 161 984 156 b 1117 9 998 135 1104 24 b 1148 -1 1123 1 1136 -1 b 1174 6 1158 -1 1168 1 l 1230 60 l 1230 -89 l 1273 -89 l 1273 102 l 1283 112 b 1348 160 1295 125 1332 160 b 1371 144 1355 160 1361 156 b 1496 9 1377 135 1483 24 b 1525 -1 1502 1 1513 -1 b 1552 6 1536 -1 1547 1 b 1819 297 1562 16 1800 275 b 1839 328 1827 307 1839 320 b 1801 354 1839 343 1813 354 b 1776 344 1793 354 1783 350 b 1642 190 1760 331 1657 206 b 1614 176 1630 180 1621 176 b 1591 189 1606 176 1597 183 b 1467 333 1578 203 1480 321 b 1430 354 1453 346 1441 354 b 1398 341 1420 354 1411 351 b 1365 305 1385 330 1377 317 l 1273 202 l 1273 480 l 1230 480 l 1230 174 l 1097 328 b 1053 354 1084 344 1071 353 b 1021 341 1041 354 1034 351 b 988 305 1008 331 998 317 b 865 167 945 261 904 215 l 861 161 b 717 328 808 222 724 318 b 672 354 704 344 691 353 b 641 341 661 354 654 351 b 608 305 628 331 618 317 b 485 167 564 261 524 215 b 455 132 474 156 465 144 b 284 45 410 88 350 45 b 14 284 148 45 30 264 b 3 294 9 291 4 294 b 0 289 1 294 0 291 z\"\n    },\n    \"ornamentPrecompTrillLowerSuffix\": {\n      \"x_min\": 0,\n      \"x_max\": 859,\n      \"y_min\": -222,\n      \"y_max\": 246,\n      \"ha\": 468,\n      \"o\": \"m 0 73 b 29 58 0 65 7 58 b 86 92 56 59 72 79 b 143 143 105 109 122 127 b 176 161 157 154 168 161 b 197 144 183 161 189 156 b 323 9 203 135 310 23 b 353 -1 328 1 340 -1 b 379 6 363 -1 373 1 b 488 112 387 13 446 73 l 523 143 b 556 161 539 154 549 161 b 577 144 563 161 569 156 b 703 9 583 135 690 23 b 733 -1 708 1 721 -1 b 759 6 743 -1 753 1 b 868 112 768 13 827 73 b 955 183 878 122 943 183 b 1081 107 965 183 1031 153 b 1156 -89 1128 63 1156 6 l 1156 -102 b 948 -297 1156 -204 1048 -297 b 806 -271 904 -297 850 -282 l 792 -266 b 801 -288 792 -268 795 -282 b 948 -320 809 -297 880 -320 b 1237 -50 1092 -320 1237 -199 b 1164 217 1237 75 1218 122 b 1031 351 1138 259 1063 351 b 1011 337 1020 351 1024 347 b 828 167 952 291 886 217 l 824 164 b 683 328 772 225 690 318 b 638 354 670 344 657 353 b 606 341 626 354 619 351 b 573 305 593 331 583 317 b 451 167 530 261 490 215 l 446 161 b 302 328 393 222 310 318 b 258 354 289 344 276 353 b 226 341 246 354 239 351 b 193 305 213 331 203 317 b 71 167 150 261 109 215 b 17 105 52 147 36 127 b 0 73 10 98 0 84 z\"\n    },\n    \"stringsDownBow\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": 0,\n      \"y_max\": 318,\n      \"ha\": 318,\n      \"o\": \"m 17 0 l 37 0 b 55 17 46 0 55 7 l 55 253 b 225 278 55 269 140 278 b 395 253 310 278 395 269 l 395 17 b 413 0 395 7 403 0 l 432 0 b 449 17 441 0 449 7 l 449 420 b 412 458 449 441 432 458 l 37 458 b 0 420 17 458 0 441 l 0 17 b 17 0 0 7 9 0 z\"\n    },\n    \"stringsUpBow\": {\n      \"x_min\": 1,\n      \"x_max\": 249,\n      \"y_min\": 1,\n      \"y_max\": 495,\n      \"ha\": 494,\n      \"o\": \"m 1 690 b 3 683 1 687 1 685 l 154 22 b 181 1 157 10 167 1 b 206 22 193 1 203 10 l 359 683 l 359 688 b 338 713 359 700 351 710 l 333 713 b 308 694 321 713 311 706 l 180 140 l 53 694 b 27 713 49 706 39 713 l 22 713 b 1 690 10 710 1 700 z\"\n    },\n    \"stringsHarmonic\": {\n      \"x_min\": 0,\n      \"x_max\": 200,\n      \"y_min\": 0,\n      \"y_max\": 200,\n      \"ha\": 200,\n      \"o\": \"m 144 0 b 288 144 223 0 288 65 b 144 288 288 225 223 288 b 0 144 65 288 0 225 b 144 0 0 65 65 0 z m 39 144 b 144 249 39 203 86 249 b 249 144 203 249 249 203 b 144 39 249 86 203 39 b 39 144 86 39 39 86 z\"\n    },\n    \"pluckedSnapPizzicatoAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 200,\n      \"y_min\": 0,\n      \"y_max\": 300,\n      \"ha\": 300,\n      \"o\": \"m 144 0 b 288 144 223 0 288 63 b 167 285 288 215 235 275 l 167 432 l 121 432 l 121 285 b 0 144 52 275 0 215 b 144 0 0 63 65 0 z m 39 144 b 121 246 39 193 73 236 l 121 144 l 167 144 l 167 246 b 249 144 213 236 249 193 b 144 39 249 85 202 39 b 39 144 85 39 39 85 z\"\n    },\n    \"pluckedSnapPizzicatoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 200,\n      \"y_min\": 0,\n      \"y_max\": 300,\n      \"ha\": 300,\n      \"o\": \"m 121 145 l 121 0 l 167 0 l 167 145 b 288 288 235 157 288 216 b 144 432 288 369 223 432 b 0 288 65 432 0 369 b 121 145 0 216 52 157 z m 39 288 b 144 393 39 347 86 393 b 249 288 203 393 249 347 b 167 186 249 238 215 196 l 167 288 l 121 288 l 121 186 b 39 288 75 196 39 238 z\"\n    },\n    \"pluckedLeftHandPizzicato\": {\n      \"x_min\": 0,\n      \"x_max\": 272,\n      \"y_min\": 0,\n      \"y_max\": 272,\n      \"ha\": 272,\n      \"o\": \"m 0 219 l 0 173 l 173 173 l 173 0 l 219 0 l 219 173 l 392 173 l 392 219 l 219 219 l 219 392 l 173 392 l 173 219 z\"\n    },\n    \"keyboardPedalPed\": {\n      \"x_min\": 0,\n      \"x_max\": 1019,\n      \"y_min\": -8,\n      \"y_max\": 555,\n      \"ha\": 563,\n      \"o\": \"m 122 376 b 240 540 189 376 240 452 b 225 586 240 579 233 586 b 204 549 213 586 212 573 b 138 480 199 527 181 480 b 85 549 96 480 85 517 l 85 554 b 353 762 89 690 230 762 b 373 752 364 762 373 760 b 351 708 373 740 360 723 b 274 546 330 675 274 585 b 353 416 274 508 333 444 b 412 304 372 390 412 351 b 382 228 412 275 403 256 b 334 190 363 202 361 200 b 147 29 271 167 147 88 b 196 -12 147 4 171 -12 b 343 108 239 -12 279 33 l 363 132 b 387 150 370 141 376 150 b 543 -4 445 150 467 -4 b 631 42 567 -4 586 0 l 668 78 b 685 89 674 84 680 89 b 696 75 688 89 690 86 b 809 -9 717 29 753 -9 b 946 66 854 -9 894 13 b 988 107 971 92 981 107 b 1002 89 994 107 996 99 b 1152 -4 1030 36 1077 -4 b 1329 248 1238 -4 1329 82 b 792 717 1329 556 1047 665 b 766 720 785 719 775 720 b 747 703 752 720 747 711 b 780 680 747 693 756 685 b 1223 222 1028 621 1223 504 b 1152 39 1223 122 1205 39 b 1073 229 1104 39 1073 132 b 1132 423 1073 314 1086 377 b 1142 442 1140 432 1142 436 b 1126 458 1142 451 1136 458 b 1093 446 1119 458 1109 455 b 975 216 1022 408 975 337 l 975 190 b 943 121 975 160 972 150 b 852 69 899 76 877 69 b 776 148 816 69 786 117 b 773 163 775 154 773 158 b 786 177 773 167 776 170 l 801 187 b 937 366 867 235 937 284 b 844 454 937 422 900 454 b 665 217 711 454 665 331 b 671 153 665 197 667 176 l 671 147 b 662 134 671 143 670 140 b 605 111 639 118 625 111 b 521 160 572 111 546 135 b 451 203 497 184 474 197 b 426 212 435 207 426 206 b 436 230 426 216 429 220 b 510 389 464 269 510 340 b 429 521 510 435 480 462 b 369 629 387 570 369 599 b 402 720 369 648 384 691 b 462 763 425 759 446 763 b 611 624 540 763 611 704 b 564 575 611 592 590 575 b 501 602 540 575 520 582 b 474 622 492 611 487 622 b 459 603 465 622 459 615 b 603 471 459 570 510 471 b 711 588 670 471 711 524 b 422 799 711 742 554 799 l 413 799 b 179 749 327 798 261 789 b 0 517 107 713 0 632 b 122 376 0 454 37 376 z m 1405 0 b 1467 62 1441 0 1467 26 b 1405 124 1467 98 1441 124 b 1344 62 1369 124 1344 98 b 1405 0 1344 26 1369 0 z m 756 282 b 815 403 756 346 772 403 b 848 343 838 403 848 383 b 780 226 848 295 824 261 b 765 217 773 220 768 217 b 759 228 762 217 759 220 b 756 282 757 245 756 262 z\"\n    },\n    \"keyboardPedalUp\": {\n      \"x_min\": 0,\n      \"x_max\": 450,\n      \"y_min\": 0,\n      \"y_max\": 450,\n      \"ha\": 450,\n      \"o\": \"m 66 252 b 132 281 94 252 115 264 b 183 308 153 301 161 308 l 190 308 b 236 271 216 308 236 300 b 216 239 236 261 229 252 l 210 233 b 158 219 197 220 184 219 b 73 147 114 219 73 196 b 147 73 73 107 107 73 b 219 158 196 73 219 114 b 233 210 219 184 220 197 l 239 216 b 271 236 252 229 261 236 b 308 190 300 236 308 216 l 308 183 b 281 132 308 161 301 153 b 252 66 264 115 252 94 b 324 0 252 23 285 0 b 396 66 363 0 396 23 b 367 132 396 94 384 115 b 340 183 347 153 340 161 l 340 190 b 377 236 340 216 348 236 b 409 216 387 236 396 229 l 415 210 b 429 158 428 197 429 184 b 501 73 429 114 452 73 b 575 147 541 73 575 107 b 490 219 575 196 534 219 b 438 233 464 219 451 220 l 432 239 b 412 271 419 252 412 261 b 458 308 412 300 432 308 l 465 308 b 516 281 487 308 495 301 b 582 252 533 264 554 252 b 648 324 625 252 648 285 b 582 396 648 363 625 396 b 516 367 554 396 533 384 b 465 340 495 347 487 340 l 458 340 b 412 377 432 340 412 348 b 432 409 412 387 419 396 l 438 415 b 490 429 451 428 464 429 b 575 501 534 429 575 452 b 501 575 575 541 541 575 b 429 490 452 575 429 534 b 415 438 429 464 428 451 l 409 432 b 377 412 396 419 387 412 b 340 458 348 412 340 432 l 340 465 b 367 516 340 487 347 495 b 396 582 384 533 396 554 b 324 648 396 625 363 648 b 252 582 285 648 252 625 b 281 516 252 554 264 533 b 308 465 301 495 308 487 l 308 458 b 271 412 308 432 300 412 b 239 432 261 412 252 419 l 233 438 b 219 490 220 451 219 464 b 147 575 219 534 196 575 b 73 501 107 575 73 541 b 158 429 73 452 114 429 b 210 415 184 429 197 428 l 216 409 b 236 377 229 396 236 387 b 190 340 236 348 216 340 l 183 340 b 132 367 161 340 153 347 b 66 396 115 384 94 396 b 0 324 23 396 0 363 b 66 252 0 285 23 252 z m 271 324 b 324 377 271 357 291 377 b 377 324 357 377 377 357 b 324 271 377 291 357 271 b 271 324 291 271 271 291 z\"\n    },\n    \"pictChokeCymbal\": {\n      \"x_min\": 1,\n      \"x_max\": 152,\n      \"y_min\": 2,\n      \"y_max\": 251,\n      \"ha\": 249,\n      \"o\": \"m 1 271 b 82 190 1 222 35 190 b 122 160 118 190 122 160 b 125 144 124 154 125 150 b 102 88 125 124 115 105 b 37 32 78 56 40 35 b 26 19 32 29 26 26 b 27 14 26 17 27 16 b 37 3 29 6 33 3 b 181 102 85 3 158 66 b 219 239 210 147 219 197 l 219 249 b 104 361 219 317 170 361 b 1 271 42 361 1 321 z\"\n    },\n    \"wiggleArpeggiatoUp\": {\n      \"x_min\": -33,\n      \"x_max\": 292,\n      \"y_min\": 0,\n      \"y_max\": 119,\n      \"ha\": 119,\n      \"o\": \"m -29 42 b -10 46 -23 42 -16 43 b 56 63 12 56 29 63 b 248 0 121 63 135 0 b 419 127 361 0 410 104 b 420 132 420 130 420 131 b 412 140 420 137 416 140 b 386 130 403 140 392 134 b 334 107 367 117 353 107 b 318 108 330 107 324 107 b 240 138 289 112 265 128 b 130 171 209 153 168 171 b -39 68 16 171 -14 91 b -48 53 -45 62 -48 58 b -29 42 -48 46 -39 42 z\"\n    },\n    \"arrowheadBlackUp\": {\n      \"x_min\": 0,\n      \"x_max\": 228,\n      \"y_min\": 0,\n      \"y_max\": 299,\n      \"ha\": 299,\n      \"o\": \"m 0 20 b 19 1 0 4 7 1 b 166 50 43 16 160 50 b 308 1 171 50 289 13 b 312 0 310 1 311 0 b 328 20 321 0 328 12 b 166 431 328 30 220 274 b 0 20 111 274 0 30 z\"\n    },\n    \"arrowheadBlackDown\": {\n      \"x_min\": 0,\n      \"x_max\": 228,\n      \"y_min\": 0,\n      \"y_max\": 299,\n      \"ha\": 299,\n      \"o\": \"m 166 0 b 328 410 220 157 328 400 b 312 431 328 419 321 431 b 308 429 311 431 310 429 b 166 380 289 418 171 380 b 19 429 160 380 43 415 b 0 410 7 429 0 426 b 166 0 0 400 111 157 z\"\n    },\n    \"arpeggiatoUp\": {\n      \"x_min\": 1,\n      \"x_max\": 229,\n      \"y_min\": 7,\n      \"y_max\": 1511,\n      \"ha\": 1504,\n      \"o\": \"m 121 1848 b 92 1778 115 1822 101 1800 l 89 1773 b 59 1668 75 1741 59 1702 b 96 1555 59 1614 76 1580 b 99 1551 98 1554 99 1551 l 102 1547 b 124 1496 115 1531 124 1515 b 122 1482 124 1492 124 1488 b 92 1404 118 1453 102 1428 b 59 1293 78 1372 59 1332 b 105 1172 59 1234 81 1198 b 124 1123 115 1158 124 1145 b 122 1110 124 1119 122 1115 b 92 1032 118 1081 102 1057 b 59 922 78 1001 59 960 b 115 792 59 855 86 816 b 124 760 121 782 124 773 b 122 744 124 756 124 750 b 92 667 118 716 102 693 b 59 556 78 635 59 595 b 108 433 59 495 82 458 b 124 389 117 420 124 408 b 122 374 124 384 124 379 b 92 298 118 346 102 323 l 89 292 b 59 186 75 261 59 222 b 163 19 59 73 140 42 b 177 10 168 13 173 10 b 189 29 184 10 189 19 b 184 48 189 35 187 42 b 167 114 174 69 167 85 b 230 305 167 179 229 193 b 181 423 230 357 209 396 b 167 484 173 442 167 458 b 230 675 167 547 229 563 b 179 796 230 729 206 769 b 167 850 171 812 167 827 b 230 1040 167 913 229 929 b 183 1158 230 1092 209 1130 b 167 1220 173 1178 167 1194 b 230 1411 167 1284 229 1300 b 186 1526 230 1462 210 1499 b 167 1594 176 1529 167 1584 b 230 1786 167 1659 229 1673 b 219 1848 230 1809 226 1829 l 330 1848 l 164 2176 l 1 1848 z\"\n    },\n    \"arpeggiatoDown\": {\n      \"x_min\": 1,\n      \"x_max\": 229,\n      \"y_min\": -4,\n      \"y_max\": 1500,\n      \"ha\": 1504,\n      \"o\": \"m 1 323 l 164 -6 l 330 323 l 219 323 b 230 384 226 341 230 361 b 167 576 229 497 167 511 b 186 644 167 586 176 641 b 230 759 210 671 230 708 b 167 950 229 870 167 886 b 183 1012 167 976 173 992 b 230 1130 209 1040 230 1079 b 167 1320 229 1241 167 1257 b 179 1374 167 1344 171 1358 b 230 1495 206 1401 230 1441 b 167 1686 229 1607 167 1623 b 181 1747 167 1712 173 1728 b 230 1865 209 1774 230 1813 b 167 2056 229 1977 167 1992 b 184 2123 167 2085 174 2101 b 189 2141 187 2128 189 2136 b 177 2160 189 2151 184 2160 b 163 2151 173 2160 168 2157 b 59 1984 140 2128 59 2097 b 89 1878 59 1948 75 1909 l 92 1872 b 122 1796 102 1848 118 1824 b 124 1781 124 1791 124 1786 b 108 1737 124 1763 117 1750 b 59 1614 82 1712 59 1675 b 92 1503 59 1575 78 1535 b 122 1426 102 1477 118 1454 b 124 1410 124 1420 124 1414 b 115 1378 124 1397 121 1388 b 59 1248 86 1354 59 1315 b 92 1138 59 1210 78 1169 b 122 1060 102 1113 118 1089 b 124 1047 122 1056 124 1051 b 105 998 124 1025 115 1012 b 59 877 81 972 59 936 b 92 766 59 838 78 798 b 122 688 102 742 118 717 b 124 674 124 683 124 678 b 102 624 124 655 115 639 l 99 619 b 96 615 99 619 98 616 b 59 503 76 590 59 556 b 89 397 59 468 75 429 l 92 392 b 121 323 101 370 115 348 z\"\n    },\n    \"repeat1Bar\": {\n      \"x_min\": 0,\n      \"x_max\": 532,\n      \"y_min\": -250,\n      \"y_max\": 279,\n      \"ha\": 529,\n      \"o\": \"m 0 -350 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 l 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 z m 586 -161 b 675 -251 586 -210 626 -251 b 766 -161 726 -251 766 -210 b 675 -71 766 -111 726 -71 b 586 -161 626 -71 586 -111 z m 0 197 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 b 0 197 40 288 0 248 z\"\n    },\n    \"repeat2Bars\": {\n      \"x_min\": 0,\n      \"x_max\": 762,\n      \"y_min\": -250,\n      \"y_max\": 279,\n      \"ha\": 529,\n      \"o\": \"m 0 -350 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 l 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 z m 343 -360 l 485 -360 b 516 -340 498 -360 508 -348 l 1090 380 b 1097 395 1094 386 1097 390 b 1089 402 1097 399 1094 402 l 936 402 b 910 380 927 402 920 393 l 336 -340 b 331 -350 333 -343 331 -347 b 343 -360 331 -356 336 -360 z m 917 -161 b 1007 -251 917 -210 958 -251 b 1097 -161 1057 -251 1097 -210 b 1007 -71 1097 -111 1057 -71 b 917 -161 958 -71 917 -111 z m 89 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 b 0 197 40 288 0 248 b 89 108 0 148 40 108 z\"\n    },\n    \"repeat4Bars\": {\n      \"x_min\": 0,\n      \"x_max\": 1232,\n      \"y_min\": -250,\n      \"y_max\": 279,\n      \"ha\": 529,\n      \"o\": \"m 331 -350 b 343 -360 331 -356 336 -360 l 485 -360 b 516 -340 498 -360 508 -348 l 1090 380 b 1097 395 1094 386 1097 390 b 1089 402 1097 399 1094 402 l 936 402 b 910 380 927 402 920 393 l 336 -340 b 331 -350 333 -343 331 -347 z m 1008 -350 b 1020 -360 1008 -356 1012 -360 l 1162 -360 b 1192 -340 1175 -360 1185 -348 l 1767 380 b 1774 395 1771 386 1774 390 b 1765 402 1774 399 1771 402 l 1613 402 b 1587 380 1604 402 1597 393 l 1012 -340 b 1008 -350 1009 -343 1008 -347 z m 688 -360 l 831 -360 b 861 -340 844 -360 854 -348 l 1436 380 b 1443 395 1440 386 1443 390 b 1434 402 1443 399 1440 402 l 1282 402 b 1256 380 1273 402 1266 393 l 681 -340 b 677 -350 678 -343 677 -347 b 688 -360 677 -356 681 -360 z m 0 -350 b 12 -360 0 -356 4 -360 l 154 -360 b 184 -340 167 -360 177 -348 l 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 z m 1683 -251 b 1774 -161 1734 -251 1774 -210 b 1683 -71 1774 -111 1734 -71 b 1594 -161 1634 -71 1594 -111 b 1683 -251 1594 -210 1634 -251 z m 0 197 b 89 108 0 148 40 108 b 180 197 140 108 180 148 b 89 288 180 248 140 288 b 0 197 40 288 0 248 z\"\n    },\n    \"repeatBarSlash\": {\n      \"x_min\": 0,\n      \"x_max\": 532,\n      \"y_min\": -250,\n      \"y_max\": 279,\n      \"ha\": 529,\n      \"o\": \"m 12 -360 l 154 -360 b 184 -340 167 -360 177 -348 l 759 380 b 766 395 763 386 766 390 b 757 402 766 399 763 402 l 605 402 b 579 380 596 402 589 393 l 4 -340 b 0 -350 1 -343 0 -347 b 12 -360 0 -356 4 -360 z\"\n    },\n    \"csymDiminished\": {\n      \"x_min\": 0,\n      \"x_max\": 473,\n      \"y_min\": 0,\n      \"y_max\": 473,\n      \"ha\": 473,\n      \"o\": \"m 0 341 b 341 0 0 153 153 0 b 681 341 530 0 681 153 b 341 681 681 530 530 681 b 0 341 153 681 0 530 z m 63 341 b 341 618 63 494 189 618 b 618 341 495 618 618 495 b 341 63 618 189 494 63 b 63 341 187 63 63 187 z\"\n    },\n    \"csymHalfDiminished\": {\n      \"x_min\": -16,\n      \"x_max\": 488,\n      \"y_min\": -15,\n      \"y_max\": 489,\n      \"ha\": 504,\n      \"o\": \"m 22 -22 l 122 79 b 340 0 181 30 258 0 b 680 341 528 0 680 153 b 602 559 680 423 651 500 l 703 660 l 658 704 l 557 603 b 340 681 498 652 422 681 b -1 341 151 681 -1 530 b 78 124 -1 259 29 183 l -23 23 z m 557 514 b 616 341 596 465 616 405 b 340 63 616 189 492 63 b 167 124 276 63 216 85 z m 340 618 b 513 559 403 618 464 598 l 122 168 b 62 341 84 217 62 278 b 340 618 62 494 187 618 z\"\n    },\n    \"csymAugmented\": {\n      \"x_min\": 0,\n      \"x_max\": 395,\n      \"y_min\": 1,\n      \"y_max\": 396,\n      \"ha\": 395,\n      \"o\": \"m 0 318 l 0 255 l 253 255 l 253 1 l 317 1 l 317 255 l 569 255 l 569 318 l 317 318 l 317 570 l 253 570 l 253 318 z\"\n    },\n    \"csymMajorSeventh\": {\n      \"x_min\": 0,\n      \"x_max\": 558,\n      \"y_min\": 1,\n      \"y_max\": 477,\n      \"ha\": 476,\n      \"o\": \"m 402 562 l 693 65 l 111 65 z m 402 687 l 0 1 l 804 1 z\"\n    },\n    \"csymMinor\": {\n      \"x_min\": 0,\n      \"x_max\": 325,\n      \"y_min\": 216,\n      \"y_max\": 260,\n      \"ha\": 44,\n      \"o\": \"m 468 374 l 0 374 l 0 311 l 468 311 z\"\n    },\n    \"csymParensLeftTall\": {\n      \"x_min\": 1,\n      \"x_max\": 185,\n      \"y_min\": 0,\n      \"y_max\": 997,\n      \"ha\": 997,\n      \"o\": \"m 259 1 b 264 0 261 0 262 0 b 266 9 265 0 266 6 l 266 48 b 261 65 266 55 264 62 b 92 719 157 212 92 400 b 262 1371 92 1037 154 1228 b 266 1394 266 1378 266 1394 l 266 1424 b 264 1436 266 1431 266 1436 b 259 1434 262 1436 259 1434 b 1 719 84 1261 1 1011 b 259 1 1 429 79 177 z\"\n    },\n    \"csymParensRightTall\": {\n      \"x_min\": -20,\n      \"x_max\": 164,\n      \"y_min\": 0,\n      \"y_max\": 997,\n      \"ha\": 997,\n      \"o\": \"m -29 1424 l -29 1394 b -24 1371 -29 1394 -29 1378 b 145 719 84 1228 145 1037 b -23 65 145 400 81 212 b -29 48 -26 62 -29 55 l -29 9 b -26 0 -29 6 -27 0 b -22 1 -24 0 -23 0 b 236 719 158 177 236 429 b -22 1434 236 1011 154 1261 b -26 1436 -22 1434 -24 1436 b -29 1424 -29 1436 -29 1431 z\"\n    },\n    \"csymBracketLeftTall\": {\n      \"x_min\": 0,\n      \"x_max\": 155,\n      \"y_min\": 0,\n      \"y_max\": 1000,\n      \"ha\": 1000,\n      \"o\": \"m 0 1436 l 0 4 b 6 0 0 1 3 0 l 217 0 b 223 9 220 0 223 4 l 223 37 b 217 46 223 42 220 46 l 92 46 l 92 1394 l 217 1394 b 223 1403 220 1394 223 1398 l 223 1431 b 217 1440 223 1436 220 1440 l 6 1440 b 0 1436 3 1440 0 1439 z\"\n    },\n    \"csymBracketRightTall\": {\n      \"x_min\": 1,\n      \"x_max\": 156,\n      \"y_min\": 0,\n      \"y_max\": 1000,\n      \"ha\": 1000,\n      \"o\": \"m 1 9 b 7 0 1 4 4 0 l 219 0 b 225 4 222 0 225 1 l 225 1436 b 219 1440 225 1439 222 1440 l 7 1440 b 1 1431 4 1440 1 1436 l 1 1403 b 7 1394 1 1398 4 1394 l 132 1394 l 132 46 l 7 46 b 1 37 4 46 1 42 z\"\n    },\n    \"csymParensLeftVeryTall\": {\n      \"x_min\": 0,\n      \"x_max\": 122,\n      \"y_min\": 0,\n      \"y_max\": 993,\n      \"ha\": 993,\n      \"o\": \"m 170 3 b 171 0 170 1 170 0 b 176 6 173 0 176 4 l 176 32 b 171 49 176 39 174 46 b 60 716 104 194 60 399 b 173 1382 60 1032 101 1241 b 176 1405 176 1390 176 1405 l 176 1427 b 173 1430 176 1428 174 1430 b 0 716 40 1297 0 978 b 170 3 0 428 50 179 z\"\n    },\n    \"csymParensRightVeryTall\": {\n      \"x_min\": -15,\n      \"x_max\": 107,\n      \"y_min\": 0,\n      \"y_max\": 993,\n      \"ha\": 993,\n      \"o\": \"m -22 1427 l -22 1405 b -19 1382 -22 1405 -22 1390 b 94 716 53 1241 94 1032 b -17 49 94 399 50 194 b -22 32 -20 46 -22 39 l -22 6 b -17 0 -22 4 -19 0 b -16 3 -16 0 -16 1 b 154 716 104 179 154 428 b -19 1430 154 978 114 1297 b -22 1427 -20 1430 -22 1428 z\"\n    },\n    \"csymDiagonalArrangementSlash\": {\n      \"x_min\": 0,\n      \"x_max\": 999,\n      \"y_min\": 0,\n      \"y_max\": 1000,\n      \"ha\": 1000,\n      \"o\": \"m 1439 1380 l 1377 1440 l 0 60 l 62 0 z\"\n    },\n    \"brassScoop\": {\n      \"x_min\": 1,\n      \"x_max\": 320,\n      \"y_min\": -373,\n      \"y_max\": 13,\n      \"ha\": 386,\n      \"leftSideBearing\": 1,\n      \"advanceWidth\": 318,\n      \"o\": \"m 1 -482 l 1 -505 b 26 -537 1 -526 3 -537 l 35 -537 b 461 -12 194 -518 461 -289 b 438 19 461 13 451 19 b 410 -9 425 19 413 9 b 35 -425 357 -366 92 -403 b 1 -482 13 -433 1 -438 z\"\n    },\n    \"brassDoitMedium\": {\n      \"x_min\": 0,\n      \"x_max\": 489,\n      \"y_min\": -40,\n      \"y_max\": 346,\n      \"ha\": 386,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 490,\n      \"o\": \"m 0 -3 l 0 -26 b 24 -58 0 -46 1 -58 l 33 -58 b 704 468 255 -58 683 186 b 681 498 704 494 693 498 b 654 471 668 498 658 488 b 33 55 550 118 91 76 b 0 -3 12 46 0 42 z\"\n    },\n    \"brassFallLipShort\": {\n      \"x_min\": 1,\n      \"x_max\": 293,\n      \"y_min\": -345,\n      \"y_max\": 42,\n      \"ha\": 387,\n      \"leftSideBearing\": 1,\n      \"advanceWidth\": 293,\n      \"o\": \"m 1 35 l 1 6 b 26 -50 3 -40 10 -43 b 32 -52 27 -50 30 -50 b 376 -469 85 -73 327 -111 b 400 -497 379 -487 387 -497 b 422 -467 412 -497 422 -491 b 32 60 422 -187 177 40 l 22 60 b 1 35 4 60 1 52 z\"\n    },\n    \"brassLiftMedium\": {\n      \"x_min\": 0,\n      \"x_max\": 811,\n      \"y_min\": 0,\n      \"y_max\": 852,\n      \"ha\": 852,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 812,\n      \"o\": \"m 33 0 b 49 17 40 0 49 10 b 71 63 52 35 56 49 b 212 115 102 95 154 59 b 239 186 230 134 239 160 b 236 210 239 194 238 202 b 256 249 239 225 243 236 b 397 301 288 281 340 245 b 425 372 416 320 425 346 b 422 396 425 380 423 387 b 442 435 425 410 429 422 b 583 487 474 467 526 431 b 611 557 602 505 611 531 b 608 582 611 566 609 573 b 628 621 611 596 615 608 b 769 672 660 652 711 618 b 796 743 788 691 796 717 b 793 768 796 752 795 759 b 814 806 796 782 801 793 b 955 858 845 838 897 804 b 982 929 973 877 982 903 b 979 953 982 937 981 945 b 999 992 982 968 986 979 b 1140 1045 1031 1024 1083 989 b 1168 1116 1161 1066 1168 1090 b 1138 1220 1168 1162 1145 1207 b 1135 1225 1135 1223 1135 1224 b 1129 1227 1133 1227 1130 1227 b 1117 1207 1122 1227 1117 1212 l 1117 1201 b 1109 1164 1117 1187 1117 1172 b 1100 1156 1107 1161 1104 1158 b 959 1104 1058 1128 995 1140 b 929 1032 936 1081 929 1056 b 932 1007 929 1024 930 1015 b 923 976 932 995 930 985 l 914 971 b 773 919 873 942 809 955 b 743 847 750 896 743 870 b 746 821 743 838 744 829 b 737 791 746 809 744 799 l 729 783 b 588 733 687 756 624 769 b 557 661 564 710 557 684 b 560 635 557 652 559 644 b 552 605 560 624 559 612 l 543 598 b 402 547 501 570 438 583 b 372 475 379 524 372 498 b 374 449 372 467 373 458 b 366 419 374 438 373 426 l 357 412 b 216 361 315 384 252 397 b 186 289 193 338 186 312 b 189 264 186 281 187 272 b 180 233 189 252 187 240 b 171 226 177 232 174 229 b 30 176 130 199 66 212 b 0 104 7 153 0 128 b 33 0 0 88 14 0 z\"\n    },\n    \"brassFallRoughMedium\": {\n      \"x_min\": 0,\n      \"x_max\": 811,\n      \"y_min\": 0,\n      \"y_max\": 852,\n      \"ha\": 852,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 812,\n      \"o\": \"m 0 1116 b 27 1045 0 1090 7 1066 b 168 992 85 989 137 1024 b 189 953 181 979 186 968 b 186 929 187 945 186 937 b 213 858 186 903 194 877 b 354 806 271 804 323 838 b 374 768 367 793 372 782 b 372 743 373 759 372 752 b 399 672 372 717 380 691 b 540 621 456 618 508 652 b 560 582 553 608 557 596 b 557 557 559 573 557 566 b 585 487 557 531 566 505 b 726 435 642 431 694 467 b 746 396 739 422 743 410 b 743 372 744 387 743 380 b 770 301 743 346 752 320 b 912 249 828 245 880 281 b 932 210 924 236 929 225 b 929 186 930 202 929 194 b 956 115 929 160 937 134 b 1097 63 1014 59 1066 95 b 1119 17 1112 49 1116 35 b 1135 0 1119 10 1128 0 b 1168 104 1153 0 1168 91 b 1138 176 1168 128 1161 153 b 996 226 1102 212 1038 199 b 988 233 994 229 991 232 b 979 264 981 240 979 252 b 982 289 981 272 982 281 b 952 361 982 312 975 338 b 811 412 916 397 852 384 l 802 419 b 793 449 795 426 793 438 b 796 475 795 458 796 467 b 766 547 796 498 789 524 b 625 598 730 583 667 570 l 616 605 b 608 635 609 612 608 624 b 611 661 609 644 611 652 b 580 733 611 684 603 710 b 439 783 544 769 481 756 l 431 791 b 422 821 423 799 422 809 b 425 847 423 829 425 838 b 395 919 425 870 418 896 b 253 971 359 955 295 942 l 245 976 b 236 1007 238 985 236 995 b 239 1032 238 1015 239 1024 b 209 1104 239 1056 232 1081 b 68 1156 173 1140 109 1128 b 59 1164 63 1158 60 1161 b 50 1201 50 1172 50 1187 l 50 1207 b 39 1227 50 1212 46 1227 b 33 1225 37 1227 35 1227 b 30 1220 33 1224 33 1223 b 0 1116 23 1207 0 1162 z\"\n    },\n    \"brassBend\": {\n      \"x_min\": 0,\n      \"x_max\": 392,\n      \"y_min\": 0,\n      \"y_max\": 282,\n      \"ha\": 282,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 393,\n      \"o\": \"m 13 72 b 282 0 108 23 196 0 b 552 72 369 0 456 23 b 564 92 560 75 564 84 l 564 383 b 541 406 564 395 554 406 b 518 383 528 406 518 395 l 518 107 b 282 46 435 65 357 46 b 46 107 207 46 130 65 l 46 383 b 23 406 46 395 36 406 b 0 383 10 406 0 395 l 0 92 b 13 72 0 84 4 75 z\"\n    },\n    \"brassMuteClosed\": {\n      \"x_min\": 0,\n      \"x_max\": 272,\n      \"y_min\": 0,\n      \"y_max\": 272,\n      \"ha\": 272,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 272,\n      \"o\": \"m 0 219 l 0 173 l 173 173 l 173 0 l 219 0 l 219 173 l 392 173 l 392 219 l 219 219 l 219 392 l 173 392 l 173 219 z\"\n    },\n    \"brassMuteOpen\": {\n      \"x_min\": 0,\n      \"x_max\": 304,\n      \"y_min\": 0,\n      \"y_max\": 304,\n      \"ha\": 304,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 305,\n      \"o\": \"m 0 219 b 219 0 0 98 98 0 b 438 219 340 0 438 98 b 219 438 438 340 340 438 b 0 219 98 438 0 340 z m 219 392 b 392 219 314 392 392 314 b 219 46 392 124 314 46 b 46 219 124 46 46 124 b 219 392 46 314 124 392 z\"\n    },\n    \"brassFlip\": {\n      \"x_min\": 0,\n      \"x_max\": 379,\n      \"y_min\": 0,\n      \"y_max\": 282,\n      \"ha\": 282,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 379,\n      \"o\": \"m 23 0 b 46 23 36 0 46 10 l 46 337 l 508 4 b 523 0 513 1 517 0 b 541 9 530 0 536 3 b 546 22 544 13 546 17 b 536 42 546 29 541 36 l 36 402 b 23 406 33 405 27 406 b 0 383 12 406 0 395 l 0 23 b 23 0 0 10 10 0 z\"\n    },\n    \"brassJazzTurn\": {\n      \"x_min\": 0,\n      \"x_max\": 620,\n      \"y_min\": 0,\n      \"y_max\": 245,\n      \"ha\": 245,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 620,\n      \"o\": \"m 0 121 b 16 107 0 114 4 108 b 84 143 26 107 76 137 b 118 160 92 150 108 160 b 141 143 125 160 131 154 b 265 10 147 135 253 24 b 294 0 271 3 282 0 b 321 7 305 0 315 3 b 498 160 321 7 478 158 b 521 143 505 160 513 154 b 647 10 528 135 635 24 b 675 0 652 3 664 0 b 703 7 687 0 697 3 b 874 186 713 16 855 164 b 893 220 881 196 893 212 b 873 245 890 235 883 243 b 796 194 847 245 815 213 l 792 190 b 765 176 780 179 772 176 b 740 190 755 176 747 183 b 629 325 727 202 644 312 b 593 347 616 338 605 347 b 562 334 583 346 575 344 b 528 298 549 323 539 310 l 406 176 b 389 168 406 176 399 168 b 374 176 384 168 379 170 b 245 325 360 192 245 325 b 200 353 232 343 219 351 b 168 340 190 353 181 350 l 17 156 b 0 121 10 147 0 132 z\"\n    },\n    \"brassSmear\": {\n      \"x_min\": 1,\n      \"x_max\": 306,\n      \"y_min\": 0,\n      \"y_max\": 170,\n      \"ha\": 170,\n      \"leftSideBearing\": 1,\n      \"advanceWidth\": 307,\n      \"o\": \"m 7 107 b 36 122 13 107 22 112 b 92 151 55 137 65 151 b 183 89 125 151 161 112 b 189 84 184 88 187 86 l 193 79 b 308 0 219 50 264 0 b 439 117 396 0 438 102 b 441 128 439 121 441 124 b 433 141 441 135 439 141 b 416 130 429 141 423 137 b 343 94 390 107 370 94 b 269 153 315 94 294 121 l 265 158 b 144 245 239 190 180 245 b 6 134 62 245 10 143 b 1 114 3 125 1 118 b 7 107 1 108 4 107 z\"\n    },\n    \"accSagittal5v7KleismaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -517 l 45 -517 l 45 -35 b 135 -112 68 -86 99 -112 b 225 68 194 -112 225 -53 l 180 68 b 144 -4 180 20 168 -4 b 122 0 138 -4 131 -3 b 23 248 86 14 52 96 l 0 248 z\"\n    },\n    \"accSagittal5v7KleismaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 35 b 135 112 68 86 99 112 b 225 -68 194 112 225 53 l 180 -68 b 144 4 180 -20 168 4 b 122 0 138 4 131 3 b 23 -248 86 -14 52 -96 l 0 -248 z\"\n    },\n    \"accSagittal5CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 225 -517 l 225 248 l 203 248 l 0 -112 l 0 -284 l 180 33 l 180 -517 z\"\n    },\n    \"accSagittal5CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 225 517 l 225 -248 l 203 -248 l 0 112 l 0 284 l 180 -33 l 180 517 z\"\n    },\n    \"accSagittal7CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 0 -517 l 45 -517 l 45 112 l 89 112 b 180 -68 150 112 180 53 l 180 -248 l 225 -248 l 225 68 b 135 248 225 187 194 248 z\"\n    },\n    \"accSagittal7CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 l 0 517 l 45 517 l 45 -112 l 89 -112 b 180 68 150 -112 180 -53 l 180 248 l 225 248 l 225 -68 b 135 -248 225 -187 194 -248 z\"\n    },\n    \"accSagittal25SmallDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -157 l 0 -259 l 315 -89 l 315 -517 l 360 -517 l 360 248 l 337 248 l 0 68 l 0 -33 l 315 135 l 315 10 z\"\n    },\n    \"accSagittal25SmallDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 157 l 0 259 l 315 89 l 315 517 l 360 517 l 360 -248 l 337 -248 l 0 -68 l 0 33 l 315 -135 l 315 -10 z\"\n    },\n    \"accSagittal35MediumDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -68 330 112 360 53 l 360 -248 l 405 -248 l 405 68 b 315 248 405 187 374 248 l 203 248 l 0 -112 z\"\n    },\n    \"accSagittal35MediumDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 284 l 180 -33 l 180 517 l 225 517 l 225 -112 l 271 -112 b 360 68 330 -112 360 -53 l 360 248 l 405 248 l 405 -68 b 315 -248 405 -187 374 -248 l 203 -248 l 0 112 z\"\n    },\n    \"accSagittal11MediumDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 225 53 l 225 -517 l 271 -517 l 271 53 l 495 -248 l 495 -89 l 248 248 l 0 -89 l 0 -248 z\"\n    },\n    \"accSagittal11MediumDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 225 -53 l 225 517 l 271 517 l 271 -53 l 495 248 l 495 89 l 248 -248 l 0 89 l 0 248 z\"\n    },\n    \"accSagittal11LargeDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 112 l 315 112 b 449 -68 405 112 449 53 l 449 -248 l 495 -248 l 495 68 b 360 248 495 187 449 248 l 135 248 b 0 68 45 248 0 187 z\"\n    },\n    \"accSagittal11LargeDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 l 0 248 l 45 248 l 45 68 b 180 -112 45 -53 89 -112 l 225 -112 l 225 517 l 271 517 l 271 -112 l 315 -112 b 449 68 405 -112 449 -53 l 449 248 l 495 248 l 495 -68 b 360 -248 495 -187 449 -248 l 135 -248 b 0 -68 45 -248 0 -187 z\"\n    },\n    \"accSagittal35LargeDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 58 l 540 -274 l 540 -112 l 248 248 l 135 248 b 0 68 45 248 0 187 z\"\n    },\n    \"accSagittal35LargeDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 45 248 l 45 68 b 180 -112 45 -53 89 -112 l 225 -112 l 225 517 l 271 517 l 271 -58 l 540 274 l 540 112 l 248 -248 l 135 -248 b 0 -68 45 -248 0 -187 z\"\n    },\n    \"accSagittalSharp25SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 b 112 -112 0 -53 36 -112 l 135 -112 l 135 -517 l 180 -517 l 180 -89 b 248 26 206 -65 229 -27 b 315 -89 264 -27 287 -65 l 315 -517 l 360 -517 l 360 -112 l 383 -112 b 495 68 458 -112 495 -53 l 449 68 b 399 -4 449 20 433 -4 b 248 248 297 -4 261 171 b 122 0 216 96 176 14 b 94 -4 112 -3 102 -4 b 45 68 60 -4 45 20 z\"\n    },\n    \"accSagittalFlat25SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 b 112 112 0 53 36 112 l 135 112 l 135 517 l 180 517 l 180 89 b 248 -26 206 65 229 27 b 315 89 264 27 287 65 l 315 517 l 360 517 l 360 112 l 383 112 b 495 -68 458 112 495 53 l 449 -68 b 399 4 449 -20 433 4 b 248 -248 297 4 261 -171 b 122 0 216 -96 176 -14 b 94 4 112 3 102 4 b 45 -68 60 4 45 -20 z\"\n    },\n    \"accSagittalSharp7CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -517 l 45 -517 l 45 112 l 89 112 b 180 104 124 112 154 109 l 180 -517 l 225 -517 l 225 89 b 315 -68 285 60 315 9 l 315 -248 l 360 -248 l 360 68 b 135 248 360 187 285 248 l 0 248 z\"\n    },\n    \"accSagittalFlat7CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 -112 l 89 -112 b 180 -104 124 -112 154 -109 l 180 517 l 225 517 l 225 -89 b 315 68 285 -60 315 -9 l 315 248 l 360 248 l 360 -68 b 135 -248 360 -187 285 -248 l 0 -248 z\"\n    },\n    \"accSagittalSharp5CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -517 l 45 71 l 180 -56 l 180 -517 l 225 -517 l 225 -98 l 405 -268 l 405 -112 l 23 248 l 0 248 l 0 -517 z\"\n    },\n    \"accSagittalFlat5CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 517 l 45 -71 l 180 56 l 180 517 l 225 517 l 225 98 l 405 268 l 405 112 l 23 -248 l 0 -248 l 0 517 z\"\n    },\n    \"accSagittalSharp5v7kDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -112 l 0 -276 l 135 -82 l 135 -517 l 180 -517 l 180 -17 l 271 112 l 315 112 l 315 -517 l 360 -517 l 360 107 b 449 -68 420 89 449 30 l 449 -248 l 495 -248 l 495 68 b 360 248 495 189 449 248 l 248 248 z\"\n    },\n    \"accSagittalFlat5v7kUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 112 l 0 276 l 135 82 l 135 517 l 180 517 l 180 17 l 271 -112 l 315 -112 l 315 517 l 360 517 l 360 -107 b 449 68 420 -89 449 -30 l 449 248 l 495 248 l 495 -68 b 360 -248 495 -189 449 -248 l 248 -248 z\"\n    },\n    \"accSagittalSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 180 -53 l 180 -517 l 225 -517 l 225 0 l 292 85 l 360 0 l 360 -517 l 405 -517 l 405 -53 l 585 -274 l 585 -112 l 292 248 l 0 -112 l 0 -274 z\"\n    },\n    \"accSagittalFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 180 53 l 180 517 l 225 517 l 225 0 l 292 -85 l 360 0 l 360 517 l 405 517 l 405 53 l 585 274 l 585 112 l 292 -248 l 0 112 l 0 274 z\"\n    },\n    \"accSagittalSharp5v7kUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -361,\n      \"y_max\": 172,\n      \"ha\": 533,\n      \"o\": \"m 45 -517 l 45 -10 b 135 -92 68 -48 98 -75 l 135 -520 l 180 -520 l 180 -108 b 248 -115 203 -112 225 -115 b 271 -112 256 -115 264 -115 l 271 -517 l 315 -517 l 315 -107 b 449 68 405 -89 449 -30 l 405 68 b 297 -4 405 19 369 -4 b 23 248 131 -4 56 85 l 0 248 l 0 -517 z\"\n    },\n    \"accSagittalFlat5v7kDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 361,\n      \"ha\": 533,\n      \"o\": \"m 45 517 l 45 10 b 135 92 68 48 98 75 l 135 520 l 180 520 l 180 108 b 248 115 203 112 225 115 b 271 112 256 115 264 115 l 271 517 l 315 517 l 315 107 b 449 -68 405 89 449 30 l 405 -68 b 297 4 405 -19 369 4 b 23 -248 131 4 56 -85 l 0 -248 l 0 517 z\"\n    },\n    \"accSagittalSharp5CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -266 l 135 -153 l 135 -517 l 180 -517 l 180 -115 l 271 -39 l 271 -517 l 315 -517 l 315 0 l 405 75 l 405 -517 l 449 -517 l 449 248 l 428 248 l 0 -112 z\"\n    },\n    \"accSagittalFlat5CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 266 l 135 153 l 135 517 l 180 517 l 180 115 l 271 39 l 271 517 l 315 517 l 315 0 l 405 -75 l 405 517 l 449 517 l 449 -248 l 428 -248 l 0 112 z\"\n    },\n    \"accSagittalSharp7CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -517 l 45 -517 l 45 112 l 135 112 l 135 -517 l 180 -517 l 180 108 b 271 89 213 105 243 99 l 271 -517 l 315 -517 l 315 73 b 405 -68 374 45 405 -3 l 405 -248 l 449 -248 l 449 68 b 135 248 449 187 346 248 l 0 248 z\"\n    },\n    \"accSagittalFlat7CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 -112 l 135 -112 l 135 517 l 180 517 l 180 -108 b 271 -89 213 -105 243 -99 l 271 517 l 315 517 l 315 -73 b 405 68 374 -45 405 3 l 405 248 l 449 248 l 449 -68 b 135 -248 449 -187 346 -248 l 0 -248 z\"\n    },\n    \"accSagittalSharp25SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -30 l 495 143 l 495 14 l 0 -157 l 0 -255 l 225 -177 l 225 -517 l 271 -517 l 271 -161 l 360 -130 l 360 -517 l 405 -517 l 405 -115 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 517 248 l 0 68 z\"\n    },\n    \"accSagittalFlat25SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 30 l 495 -143 l 495 -14 l 0 157 l 0 255 l 225 177 l 225 517 l 271 517 l 271 161 l 360 130 l 360 517 l 405 517 l 405 115 l 495 84 l 495 517 l 540 517 l 540 -248 l 517 -248 l 0 -68 z\"\n    },\n    \"accSagittalSharp35MUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -112 l 0 -274 l 135 -108 l 135 -517 l 180 -517 l 180 -53 l 271 58 l 271 -517 l 315 -517 l 315 112 l 360 112 b 405 109 376 112 390 112 l 405 -517 l 449 -517 l 449 96 b 540 -68 510 72 540 17 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 z\"\n    },\n    \"accSagittalFlat35MDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 112 l 0 274 l 135 108 l 135 517 l 180 517 l 180 53 l 271 -58 l 271 517 l 315 517 l 315 -112 l 360 -112 b 405 -109 376 -112 390 -112 l 405 517 l 449 517 l 449 -96 b 540 68 510 -72 540 -17 l 540 248 l 585 248 l 585 -68 b 405 -248 585 -187 526 -248 l 292 -248 z\"\n    },\n    \"accSagittalSharp11MUp\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -112 l 0 -271 l 180 -79 l 180 -517 l 225 -517 l 225 -30 l 315 65 l 315 -517 l 360 -517 l 360 65 l 449 -30 l 449 -517 l 495 -517 l 495 -79 l 675 -271 l 675 -112 l 337 248 z\"\n    },\n    \"accSagittalFlat11MDown\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 112 l 0 271 l 180 79 l 180 517 l 225 517 l 225 30 l 315 -65 l 315 517 l 360 517 l 360 -65 l 449 30 l 449 517 l 495 517 l 495 79 l 675 271 l 675 112 l 337 -248 z\"\n    },\n    \"accSagittalSharp11LUp\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 271 112 l 315 112 l 315 -517 l 360 -517 l 360 112 l 405 112 l 449 112 l 449 -517 l 495 -517 l 495 104 b 631 -68 585 82 631 26 l 631 -248 l 675 -248 l 675 68 b 449 248 675 187 600 248 l 225 248 b 0 68 75 248 0 187 z\"\n    },\n    \"accSagittalFlat11LDown\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 l 0 248 l 45 248 l 45 68 b 180 -104 45 -26 89 -82 l 180 517 l 225 517 l 225 -112 l 271 -112 l 315 -112 l 315 517 l 360 517 l 360 -112 l 405 -112 l 449 -112 l 449 517 l 495 517 l 495 -104 b 631 68 585 -82 631 -26 l 631 248 l 675 248 l 675 -68 b 449 -248 675 -187 600 -248 l 225 -248 b 0 -68 75 -248 0 -187 z\"\n    },\n    \"accSagittalSharp35LUp\": {\n      \"x_min\": 0,\n      \"x_max\": 500,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 271 112 l 315 112 l 315 -517 l 360 -517 l 360 71 l 452 -17 l 452 -517 l 495 -517 l 495 -56 l 720 -268 l 720 -112 l 337 248 l 225 248 b 0 68 75 248 0 187 z\"\n    },\n    \"accSagittalFlat35LDown\": {\n      \"x_min\": 0,\n      \"x_max\": 500,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 45 248 l 45 68 b 180 -104 45 -26 89 -82 l 180 517 l 225 517 l 225 -112 l 271 -112 l 315 -112 l 315 517 l 360 517 l 360 -71 l 452 17 l 452 517 l 495 517 l 495 56 l 720 268 l 720 112 l 337 -248 l 225 -248 b 0 -68 75 -248 0 -187 z\"\n    },\n    \"accSagittalDoubleSharp25SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 b 135 -112 0 -53 45 -112 b 243 -62 180 -112 215 -95 l 89 -503 l 143 -517 l 292 -82 l 445 -517 l 495 -503 l 343 -62 b 449 -112 372 -95 408 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 315 148 b 112 -4 274 148 236 -4 b 45 68 68 -4 45 20 z\"\n    },\n    \"accSagittalDoubleFlat25SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 b 135 112 0 53 45 112 b 243 62 180 112 215 95 l 89 503 l 143 517 l 292 82 l 445 517 l 495 503 l 343 62 b 449 112 372 95 408 112 b 585 -68 540 112 585 53 l 540 -68 b 475 4 540 -20 517 4 b 292 -248 350 4 315 -148 b 112 4 274 -148 236 4 b 45 -68 68 4 45 -20 z\"\n    },\n    \"accSagittalDoubleSharp7CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 213 112 l 203 82 l 192 112 z m 0 -503 l 52 -517 l 203 -82 l 354 -517 l 405 -503 l 230 0 l 271 108 b 495 -68 420 92 495 35 l 495 -248 l 540 -248 l 540 68 b 225 248 540 187 435 248 l 89 248 l 89 112 l 135 112 l 174 0 z\"\n    },\n    \"accSagittalDoubleFlat7CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 503 l 52 517 l 203 82 l 354 517 l 405 503 l 230 0 l 271 -108 b 495 68 420 -92 495 -35 l 495 248 l 540 248 l 540 -68 b 225 -248 540 -187 435 -248 l 89 -248 l 89 -112 l 135 -112 l 174 0 z m 213 -112 l 203 -82 l 192 -112 z\"\n    },\n    \"accSagittalDoubleSharp5CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 405 -503 l 230 0 l 232 4 l 585 -264 l 585 -112 l 112 248 l 89 248 l 89 112 l 151 68 l 174 0 l 0 -503 l 52 -517 l 203 -82 l 354 -517 z\"\n    },\n    \"accSagittalDoubleFlat5CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 405 503 l 230 0 l 232 -4 l 585 264 l 585 112 l 112 -248 l 89 -248 l 89 -112 l 151 -68 l 174 0 l 0 503 l 52 517 l 203 82 l 354 517 z\"\n    },\n    \"accSagittalDoubleSharp5v7kDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -274 l 252 35 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 360 112 b 540 -68 480 112 540 53 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 l 0 -112 z\"\n    },\n    \"accSagittalDoubleFlat5v7kUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 274 l 252 -35 l 265 0 l 89 503 l 141 517 l 292 82 l 444 517 l 495 503 l 321 0 l 360 -112 b 540 68 480 -112 540 -53 l 540 248 l 585 248 l 585 -68 b 405 -248 585 -187 526 -248 l 292 -248 l 0 112 z\"\n    },\n    \"accSagittalDoubleSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 540 -503 l 366 0 l 380 45 l 675 -271 l 675 -112 l 337 248 l 0 -112 l 0 -271 l 295 45 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 z\"\n    },\n    \"accSagittalDoubleFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 540 503 l 366 0 l 380 -45 l 675 271 l 675 112 l 337 -248 l 0 112 l 0 271 l 295 -45 l 310 0 l 135 503 l 186 517 l 337 82 l 488 517 z\"\n    },\n    \"accSagittal7v11KleismaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 219,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 68 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 -45 b 248 -112 200 -89 225 -112 b 315 68 292 -112 315 -53 l 271 68 b 248 -4 271 20 264 -4 b 236 0 245 -4 240 -3 b 157 248 213 14 187 96 b 78 0 127 96 101 14 b 65 -4 73 -3 68 -4 b 45 68 50 -4 45 20 l 0 68 b 68 -112 0 -53 23 -112 z\"\n    },\n    \"accSagittal7v11KleismaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 219,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 68 112 b 135 45 89 112 112 89 l 135 517 l 180 517 l 180 45 b 248 112 200 89 225 112 b 315 -68 292 112 315 53 l 271 -68 b 248 4 271 -20 264 4 b 236 0 245 4 240 3 b 157 -248 213 -14 187 -96 b 78 0 127 -96 101 -14 b 65 4 73 3 68 4 b 45 -68 50 4 45 -20 l 0 -68 b 68 112 0 53 23 112 z\"\n    },\n    \"accSagittal17CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 -40 b 315 -118 248 -92 279 -118 b 405 62 374 -118 405 -59 l 360 62 b 324 -10 360 14 348 -10 b 302 -6 318 -10 311 -9 b 206 217 268 9 235 84 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z\"\n    },\n    \"accSagittal17CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 89 23 45 82 60 23 l 157 23 b 180 4 164 23 173 17 l 180 517 l 225 517 l 225 40 b 315 118 248 92 279 118 b 405 -62 374 118 405 59 l 360 -62 b 324 10 360 -14 348 10 b 302 6 318 10 311 9 b 206 -217 268 -9 235 -84 l 203 -248 b 135 -68 177 -127 154 -68 l 68 -68 b 0 203 23 -68 0 23 z\"\n    },\n    \"accSagittal55CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 219,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 0 -517 l 45 -517 l 45 58 l 315 -274 l 315 -112 l 23 248 z\"\n    },\n    \"accSagittal55CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 219,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 l 0 517 l 45 517 l 45 -58 l 315 274 l 315 112 l 23 -248 z\"\n    },\n    \"accSagittal7v11CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 188,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 248 l 135 248 b 0 68 45 248 0 187 z\"\n    },\n    \"accSagittal7v11CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 188,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 45 248 l 45 68 b 180 -112 45 -53 89 -112 l 225 -112 l 225 517 l 271 517 l 271 -248 l 135 -248 b 0 -68 45 -248 0 -187 z\"\n    },\n    \"accSagittal5v11SmallDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 73 l 0 -248 l 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 -40 b 360 -118 295 -92 325 -118 b 449 62 420 -118 449 -59 l 405 62 b 369 -10 405 14 393 -10 b 348 -6 363 -10 356 -9 b 251 217 312 9 279 84 l 248 248 l 135 248 b 0 73 45 248 0 189 z\"\n    },\n    \"accSagittal5v11SmallDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -73 l 0 248 l 45 248 l 45 68 b 180 -112 45 -53 89 -112 l 225 -112 l 225 517 l 271 517 l 271 40 b 360 118 295 92 325 118 b 449 -62 420 118 449 59 l 405 -62 b 369 10 405 -14 393 10 b 348 6 363 10 356 9 b 251 -217 312 -9 279 -84 l 248 -248 l 135 -248 b 0 -73 45 -248 0 -189 z\"\n    },\n    \"accSagittalSharp5v11SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 242 37 203 -23 225 -3 b 315 -89 262 -23 285 -63 l 315 -517 l 360 -517 l 360 -112 l 383 -112 b 495 68 458 -112 495 -53 l 449 68 b 399 -4 449 20 433 -4 b 248 248 297 -4 261 171 b 157 68 222 127 192 68 l 89 68 b 0 -203 30 68 0 -23 z\"\n    },\n    \"accSagittalFlat5v11SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 112 23 45 84 68 23 l 135 23 l 135 517 l 180 517 l 180 23 b 242 -37 203 23 225 3 b 315 89 262 23 285 63 l 315 517 l 360 517 l 360 112 l 383 112 b 495 -68 458 112 495 53 l 449 -68 b 399 4 449 -20 433 4 b 248 -248 297 4 261 -171 b 157 -68 222 -127 192 -68 l 89 -68 b 0 203 30 -68 0 23 z\"\n    },\n    \"accSagittalSharp7v11CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 89 -112 l 89 -517 l 135 -517 l 135 -95 b 206 37 163 -73 187 -30 b 271 -23 225 -3 248 -23 l 271 -517 l 315 -517 l 315 -23 l 383 -23 b 449 -203 428 -23 449 -84 l 495 -203 b 405 68 495 -23 465 68 l 292 68 b 203 248 258 68 228 127 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 20 l 0 68 b 89 -112 0 -52 30 -112 z\"\n    },\n    \"accSagittalFlat7v11CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 89 112 l 89 517 l 135 517 l 135 95 b 206 -37 163 73 187 30 b 271 23 225 3 248 23 l 271 517 l 315 517 l 315 23 l 383 23 b 449 203 428 23 449 84 l 495 203 b 405 -68 495 23 465 -68 l 292 -68 b 203 -248 258 -68 228 -127 b 101 0 173 -98 138 -16 b 81 3 94 0 86 3 b 45 -68 56 3 45 -20 l 0 -68 b 89 112 0 52 30 112 z\"\n    },\n    \"accSagittalSharp55CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -271 l 135 -125 l 135 -517 l 180 -517 l 180 -78 l 315 65 l 315 -517 l 360 -517 l 360 248 l 337 248 l 0 -112 z\"\n    },\n    \"accSagittalFlat55CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 271 l 135 125 l 135 517 l 180 517 l 180 78 l 315 -65 l 315 517 l 360 517 l 360 -248 l 337 -248 l 0 112 z\"\n    },\n    \"accSagittalSharp17CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -248 l 45 -68 b 180 109 45 36 89 95 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -89 292 13 321 -55 l 360 -517 l 405 -517 l 405 -112 l 428 -112 b 540 68 504 -112 540 -53 l 495 68 b 445 -4 495 20 480 -4 b 292 248 343 -4 307 171 l 180 248 b 0 68 60 248 0 187 l 0 -248 z\"\n    },\n    \"accSagittalFlat17CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 248 l 45 68 b 180 -109 45 -36 89 -95 l 180 517 l 225 517 l 225 -112 l 271 -112 b 360 89 292 -13 321 55 l 360 517 l 405 517 l 405 112 l 428 112 b 540 -68 504 112 540 53 l 495 -68 b 445 4 495 -20 480 4 b 292 -248 343 4 307 -171 l 180 -248 b 0 -68 60 -248 0 -187 l 0 248 z\"\n    },\n    \"accSagittalSharp7v11kDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -32 l 405 138 l 405 13 l 0 -157 l 0 -256 l 225 -161 l 225 -517 l 271 -517 l 271 -144 l 405 -86 l 405 -517 l 449 -517 l 449 248 l 428 248 l 0 68 z\"\n    },\n    \"accSagittalFlat7v11kUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 32 l 405 -138 l 405 -13 l 0 157 l 0 256 l 225 161 l 225 517 l 271 517 l 271 144 l 405 86 l 405 517 l 449 517 l 449 -248 l 428 -248 l 0 -68 z\"\n    },\n    \"accSagittalSharp7v11kUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 135 -112 l 135 -517 l 180 -517 l 180 -105 b 271 -23 217 -94 248 -65 l 271 -517 l 315 -517 l 315 -23 b 405 -105 337 -65 369 -94 l 405 -517 l 449 -517 l 449 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 315 148 b 112 -4 274 148 236 -4 b 45 68 68 -4 45 20 l 0 68 b 135 -112 0 -53 45 -112 z\"\n    },\n    \"accSagittalFlat7v11kDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 135 112 l 135 517 l 180 517 l 180 105 b 271 23 217 94 248 65 l 271 517 l 315 517 l 315 23 b 405 105 337 65 369 94 l 405 517 l 449 517 l 449 112 b 585 -68 540 112 585 53 l 540 -68 b 475 4 540 -20 517 4 b 292 -248 350 4 315 -148 b 112 4 274 -148 236 4 b 45 -68 68 4 45 -20 l 0 -68 b 135 112 0 53 45 112 z\"\n    },\n    \"accSagittalSharp17CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 -23 b 405 -105 337 -65 369 -94 l 405 -517 l 449 -517 l 449 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 312 150 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z\"\n    },\n    \"accSagittalFlat17CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 135 23 45 84 75 23 l 135 517 l 180 517 l 180 23 l 203 23 b 271 -14 229 23 251 10 l 271 517 l 315 517 l 315 23 b 405 105 337 65 369 94 l 405 517 l 449 517 l 449 112 b 585 -68 540 112 585 53 l 540 -68 b 475 4 540 -20 517 4 b 292 -248 350 4 312 -150 b 180 -68 268 -127 230 -68 l 112 -68 b 0 203 37 -68 0 23 z\"\n    },\n    \"accSagittalSharp55CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -517 l 45 78 l 135 10 l 135 -517 l 180 -517 l 180 -23 l 271 -92 l 271 -517 l 315 -517 l 315 -127 l 495 -264 l 495 -112 l 23 248 l 0 248 l 0 -517 z\"\n    },\n    \"accSagittalFlat55CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 517 l 45 -78 l 135 -10 l 135 517 l 180 517 l 180 23 l 271 92 l 271 517 l 315 517 l 315 127 l 495 264 l 495 112 l 23 -248 l 0 -248 l 0 517 z\"\n    },\n    \"accSagittalSharp7v11CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 86 45 6 89 58 l 180 -517 l 225 -517 l 225 98 b 315 109 252 104 282 108 l 315 -517 l 360 -517 l 360 112 l 405 112 l 449 112 l 449 -517 l 495 -517 l 495 248 l 360 248 b 0 68 121 248 0 189 z\"\n    },\n    \"accSagittalFlat7v11CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 l 0 248 l 45 248 l 45 68 b 180 -86 45 -6 89 -58 l 180 517 l 225 517 l 225 -98 b 315 -109 252 -104 282 -108 l 315 517 l 360 517 l 360 -112 l 405 -112 l 449 -112 l 449 517 l 495 517 l 495 -248 l 360 -248 b 0 -68 121 -248 0 -189 z\"\n    },\n    \"accSagittalSharp5v11SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 271 112 l 315 112 l 315 -517 l 360 -517 l 360 -23 b 449 -105 383 -65 415 -94 l 449 -517 l 495 -517 l 495 -112 b 631 68 585 -112 631 -53 l 585 68 b 520 -4 585 20 563 -4 b 337 248 396 -4 360 150 l 225 248 b 0 68 76 248 0 187 z\"\n    },\n    \"accSagittalFlat5v11SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 45 248 l 45 68 b 180 -104 45 -26 89 -82 l 180 517 l 225 517 l 225 -112 l 271 -112 l 315 -112 l 315 517 l 360 517 l 360 23 b 449 105 383 65 415 94 l 449 517 l 495 517 l 495 112 b 631 -68 585 112 631 53 l 585 -68 b 520 4 585 -20 563 4 b 337 -248 396 4 360 -150 l 225 -248 b 0 -68 76 -248 0 -187 z\"\n    },\n    \"accSagittalDoubleSharp5v11SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 341 -60 b 449 -112 370 -95 405 -112 b 585 68 540 -112 585 -53 l 540 68 b 475 -4 540 20 517 -4 b 292 248 350 -4 312 150 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z\"\n    },\n    \"accSagittalDoubleFlat5v11SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 135 23 45 84 75 23 l 203 23 b 262 -4 225 23 245 13 l 265 0 l 89 503 l 141 517 l 292 82 l 444 517 l 495 503 l 341 60 b 449 112 370 95 405 112 b 585 -68 540 112 585 53 l 540 -68 b 475 4 540 -20 517 4 b 292 -248 350 4 312 -150 b 180 -68 268 -127 230 -68 l 112 -68 b 0 203 37 -68 0 23 z\"\n    },\n    \"accSagittalDoubleSharp7v11CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 112 -112 b 193 -73 143 -112 170 -99 l 45 -501 l 95 -517 l 248 -81 l 397 -517 l 449 -503 l 275 0 l 278 4 b 337 -23 295 -13 315 -23 l 405 -23 b 495 -203 465 -23 495 -84 l 540 -203 b 428 68 540 -23 503 68 l 360 68 b 248 248 310 68 271 127 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 112 -112 0 -52 36 -112 z\"\n    },\n    \"accSagittalDoubleFlat7v11CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 112 112 b 193 73 143 112 170 99 l 45 501 l 95 517 l 248 81 l 397 517 l 449 503 l 275 0 l 278 -4 b 337 23 295 13 315 23 l 405 23 b 495 203 465 23 495 84 l 540 203 b 428 -68 540 23 503 -68 l 360 -68 b 248 -248 310 -68 271 -127 b 122 0 217 -98 176 -16 b 95 3 112 0 104 3 b 45 -68 60 3 45 -20 l 0 -68 b 112 112 0 52 36 112 z\"\n    },\n    \"accSagittalDoubleSharp55CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 428 248 l 0 -112 l 0 -266 l 307 -7 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 386 59 l 449 112 l 449 248 z\"\n    },\n    \"accSagittalDoubleFlat55CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 428 -248 l 0 112 l 0 266 l 307 7 l 135 503 l 186 517 l 337 82 l 488 517 l 540 503 l 366 0 l 386 -59 l 449 -112 l 449 -248 z\"\n    },\n    \"accSagittalDoubleSharp17CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -248 l 45 -68 b 271 112 45 53 120 112 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 387 -62 b 495 -112 416 -95 452 -112 b 631 68 585 -112 631 -53 l 585 68 b 520 -4 585 20 563 -4 b 337 248 396 -4 360 150 l 225 248 b 0 68 76 248 0 187 l 0 -248 z\"\n    },\n    \"accSagittalDoubleFlat17CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 248 l 45 68 b 271 -112 45 -53 120 -112 l 310 0 l 135 503 l 186 517 l 337 82 l 488 517 l 540 503 l 387 62 b 495 112 416 95 452 112 b 631 -68 585 112 631 53 l 585 -68 b 520 4 585 -20 563 4 b 337 -248 396 4 360 -150 l 225 -248 b 0 -68 76 -248 0 -187 l 0 248 z\"\n    },\n    \"accSagittalDoubleSharp7v11kDown\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 416 115 l 442 124 l 428 82 z m 0 68 l 0 -30 l 366 96 l 399 0 l 392 -23 l 0 -157 l 0 -255 l 353 -135 l 225 -503 l 276 -517 l 428 -82 l 579 -517 l 631 -503 l 455 0 l 507 145 l 540 157 l 540 248 l 517 248 z\"\n    },\n    \"accSagittalDoubleFlat7v11kUp\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 l 0 30 l 366 -96 l 399 0 l 392 23 l 0 157 l 0 255 l 353 135 l 225 503 l 276 517 l 428 82 l 579 517 l 631 503 l 455 0 l 507 -145 l 540 -157 l 540 -248 l 517 -248 z m 416 -115 l 442 -124 l 428 -82 z\"\n    },\n    \"accSagittal23CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 188,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -517 l 45 -517 l 45 -4 b 68 -23 53 -17 60 -23 l 180 -23 b 225 -203 210 -23 225 -82 l 271 -203 b 206 68 271 -23 248 68 l 89 68 b 23 248 71 68 48 127 l 0 248 z\"\n    },\n    \"accSagittal23CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 188,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 4 b 68 23 53 17 60 23 l 180 23 b 225 203 210 23 225 82 l 271 203 b 206 -68 271 23 248 -68 l 89 -68 b 23 -248 71 -68 48 -127 l 0 -248 z\"\n    },\n    \"accSagittal5v19CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 248 l 203 248 b 86 112 151 157 112 112 b 45 157 59 112 45 127 l 0 157 b 76 23 0 72 26 27 l 0 -112 z\"\n    },\n    \"accSagittal5v19CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 284 l 180 -33 l 180 517 l 225 517 l 225 -248 l 203 -248 b 86 -112 151 -157 112 -112 b 45 -157 59 -112 45 -127 l 0 -157 b 76 -23 0 -72 26 -27 l 0 112 z\"\n    },\n    \"accSagittal5v23SmallDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -284 l 180 33 l 180 -517 l 225 -517 l 225 -4 b 248 -23 233 -17 240 -23 l 360 -23 b 405 -203 390 -23 405 -82 l 449 -203 b 386 68 449 -23 428 68 l 271 68 b 203 248 251 68 228 127 l 0 -112 z\"\n    },\n    \"accSagittal5v23SmallDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 284 l 180 -33 l 180 517 l 225 517 l 225 4 b 248 23 233 17 240 23 l 360 23 b 405 203 390 23 405 82 l 449 203 b 386 -68 449 23 428 -68 l 271 -68 b 203 -248 251 -68 228 -127 l 0 112 z\"\n    },\n    \"accSagittalSharp5v23SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -517 l 45 -517 l 45 6 b 89 -23 59 -13 73 -23 l 180 -23 l 180 -517 l 225 -517 l 225 -23 l 292 -23 b 360 -203 337 -23 360 -84 l 405 -203 b 315 68 405 -23 374 68 l 112 68 b 23 248 78 68 48 127 l 0 248 z\"\n    },\n    \"accSagittalFlat5v23SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 -6 b 89 23 59 13 73 23 l 180 23 l 180 517 l 225 517 l 225 23 l 292 23 b 360 203 337 23 360 84 l 405 203 b 315 -68 405 23 374 -68 l 112 -68 b 23 -248 78 -68 48 -127 l 0 -248 z\"\n    },\n    \"accSagittalSharp5v19CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 b 89 -112 0 -52 30 -112 l 89 -517 l 135 -517 l 135 -95 b 225 112 173 -65 203 4 l 271 112 l 271 -517 l 315 -517 l 315 107 b 405 -68 374 89 405 30 l 405 -248 l 449 -248 l 449 68 b 315 248 449 189 405 248 l 203 248 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 23 z\"\n    },\n    \"accSagittalFlat5v19CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 b 89 112 0 52 30 112 l 89 517 l 135 517 l 135 95 b 225 -112 173 65 203 -4 l 271 -112 l 271 517 l 315 517 l 315 -107 b 405 68 374 -89 405 -30 l 405 248 l 449 248 l 449 -68 b 315 -248 449 -189 405 -248 l 203 -248 b 101 0 173 -98 138 -16 b 81 3 94 0 86 3 b 45 -68 56 3 45 -23 z\"\n    },\n    \"accSagittalSharp23CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 135 -82 l 135 -517 l 180 -517 l 180 -17 l 239 68 b 315 -23 261 7 287 -23 l 315 -517 l 360 -517 l 360 -23 l 428 -23 b 495 -203 472 -23 495 -84 l 540 -203 b 449 68 540 -23 510 68 l 337 68 b 248 248 302 68 271 127 l 0 -112 l 0 -276 z\"\n    },\n    \"accSagittalFlat23CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 135 82 l 135 517 l 180 517 l 180 17 l 239 -68 b 315 23 261 -7 287 23 l 315 517 l 360 517 l 360 23 l 428 23 b 495 203 472 23 495 84 l 540 203 b 449 -68 540 23 510 -68 l 337 -68 b 248 -248 302 -68 271 -127 l 0 112 l 0 276 z\"\n    },\n    \"accSagittalSharp23CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -517 l 45 -517 l 45 14 b 112 -23 63 -10 86 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 360 -23 b 449 -203 420 -23 449 -84 l 495 -203 b 383 68 495 -23 458 68 l 135 68 b 23 248 85 68 48 127 l 0 248 z\"\n    },\n    \"accSagittalFlat23CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 -14 b 112 23 63 10 86 23 l 135 23 l 135 517 l 180 517 l 180 23 l 271 23 l 271 517 l 315 517 l 315 23 l 360 23 b 449 203 420 23 449 84 l 495 203 b 383 -68 495 23 458 -68 l 135 -68 b 23 -248 85 -68 48 -127 l 0 -248 z\"\n    },\n    \"accSagittalSharp5v19CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -112 l 0 -266 l 135 -153 l 135 -517 l 180 -517 l 180 -115 l 271 -39 l 271 -517 l 315 -517 l 315 0 l 405 75 l 405 -517 l 449 -517 l 449 248 l 428 248 b 130 68 285 127 186 68 b 45 157 73 68 45 98 l 0 157 b 112 -20 0 53 37 -6 z\"\n    },\n    \"accSagittalFlat5v19CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 112 l 0 266 l 135 153 l 135 517 l 180 517 l 180 115 l 271 39 l 271 517 l 315 517 l 315 0 l 405 -75 l 405 517 l 449 517 l 449 -248 l 428 -248 b 130 -68 285 -127 186 -68 b 45 -157 73 -68 45 -98 l 0 -157 b 112 20 0 -53 37 6 z\"\n    },\n    \"accSagittalSharp5v23SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 135 -108 l 135 -517 l 180 -517 l 180 -53 l 271 58 l 271 -517 l 315 -517 l 315 14 b 383 -23 334 -10 357 -23 l 405 -23 l 405 -517 l 449 -517 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 405 68 b 292 248 356 68 318 127 l 0 -112 l 0 -274 z\"\n    },\n    \"accSagittalFlat5v23SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 135 108 l 135 517 l 180 517 l 180 53 l 271 -58 l 271 517 l 315 517 l 315 -14 b 383 23 334 10 357 23 l 405 23 l 405 517 l 449 517 l 449 23 b 540 203 510 23 540 84 l 585 203 b 472 -68 585 23 547 -68 l 405 -68 b 292 -248 356 -68 318 -127 l 0 112 l 0 274 z\"\n    },\n    \"accSagittalDoubleSharp5v23SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 52 -517 l 203 -81 l 354 -517 l 405 -503 l 239 -23 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 225 68 b 112 248 176 68 138 127 l 89 248 l 89 112 b 170 -14 109 45 135 0 l 0 -501 z\"\n    },\n    \"accSagittalDoubleFlat5v23SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 52 517 l 203 81 l 354 517 l 405 503 l 239 23 l 449 23 b 540 203 510 23 540 84 l 585 203 b 472 -68 585 23 547 -68 l 225 -68 b 112 -248 176 -68 138 -127 l 89 -248 l 89 -112 b 170 14 109 -45 135 0 l 0 501 z\"\n    },\n    \"accSagittalDoubleSharp5v19CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 b 112 -112 0 -52 36 -112 b 193 -73 143 -112 170 -99 l 45 -501 l 95 -517 l 248 -81 l 397 -517 l 449 -501 l 275 0 l 315 112 b 495 -68 435 112 495 53 l 495 -248 l 540 -248 l 540 68 b 360 248 540 189 480 248 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 z\"\n    },\n    \"accSagittalDoubleFlat5v19CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 b 112 112 0 52 36 112 b 193 73 143 112 170 99 l 45 501 l 95 517 l 248 81 l 397 517 l 449 501 l 275 0 l 315 -112 b 495 68 435 -112 495 -53 l 495 248 l 540 248 l 540 -68 b 360 -248 540 -189 480 -248 l 248 -248 b 122 0 217 -98 176 -16 b 95 3 112 0 104 3 b 45 -68 60 3 45 -20 z\"\n    },\n    \"accSagittalDoubleSharp23CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 252 35 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 323 4 b 383 -23 340 -13 360 -23 l 449 -23 b 540 -203 510 -23 540 -84 l 585 -203 b 472 68 585 -23 547 68 l 405 68 b 292 248 356 68 318 127 l 0 -112 l 0 -274 z\"\n    },\n    \"accSagittalDoubleFlat23CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 252 -35 l 265 0 l 89 503 l 141 517 l 292 82 l 444 517 l 495 503 l 321 0 l 323 -4 b 383 23 340 13 360 23 l 449 23 b 540 203 510 23 540 84 l 585 203 b 472 -68 585 23 547 -68 l 405 -68 b 292 -248 356 -68 318 -127 l 0 112 l 0 274 z\"\n    },\n    \"accSagittal19SchismaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 125,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 68 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 248 l 157 248 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 l 0 68 b 68 -112 0 -52 23 -112 z\"\n    },\n    \"accSagittal19SchismaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 125,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 68 112 b 135 45 89 112 112 89 l 135 517 l 180 517 l 180 -248 l 157 -248 b 79 0 127 -98 101 -16 b 68 3 73 0 68 3 b 45 -68 52 3 45 -20 l 0 -68 b 68 112 0 52 23 112 z\"\n    },\n    \"accSagittal17KleismaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 248 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z\"\n    },\n    \"accSagittal17KleismaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 89 23 45 82 60 23 l 157 23 b 180 4 164 23 173 17 l 180 517 l 225 517 l 225 -248 l 203 -248 b 135 -68 177 -127 154 -68 l 68 -68 b 0 203 23 -68 0 23 z\"\n    },\n    \"accSagittal143CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -203 l 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 248 l 203 248 b 135 68 177 127 154 68 l 105 68 b 45 157 65 68 45 98 l 0 157 b 23 20 0 95 7 50 b 0 -203 7 -23 0 -98 z\"\n    },\n    \"accSagittal143CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 156,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 203 l 45 203 b 89 23 45 82 60 23 l 157 23 b 180 4 164 23 173 17 l 180 517 l 225 517 l 225 -248 l 203 -248 b 135 -68 177 -127 154 -68 l 105 -68 b 45 -157 65 -68 45 -98 l 0 -157 b 23 -20 0 -95 7 -50 b 0 203 7 23 0 98 z\"\n    },\n    \"accSagittal11v49CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 188,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -292 b 89 -157 45 -203 60 -157 l 203 -157 b 225 -143 210 -157 217 -153 l 225 -517 l 271 -517 l 271 248 l 248 248 b 180 157 233 187 210 157 l 68 157 b 0 -68 23 157 0 82 l 45 -68 b 89 68 45 23 60 68 l 203 68 b 225 84 209 68 216 72 l 225 -36 b 180 -68 213 -58 199 -68 l 68 -68 b 0 -292 23 -68 0 -143 z\"\n    },\n    \"accSagittal11v49CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 188,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 292 b 89 157 45 203 60 157 l 203 157 b 225 143 210 157 217 153 l 225 517 l 271 517 l 271 -248 l 248 -248 b 180 -157 233 -187 210 -157 l 68 -157 b 0 68 23 -157 0 -82 l 45 68 b 89 -68 45 -23 60 -68 l 203 -68 b 225 -84 209 -68 216 -72 l 225 36 b 180 68 213 58 199 68 l 68 68 b 0 292 23 68 0 143 z\"\n    },\n    \"accSagittal19CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 b 68 -112 0 -52 23 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 -4 b 203 -23 187 -17 196 -23 l 315 -23 b 360 -203 346 -23 360 -82 l 405 -203 b 341 68 405 -23 383 68 l 225 68 b 157 248 206 68 183 127 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 z\"\n    },\n    \"accSagittal19CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 b 68 112 0 52 23 112 b 135 45 89 112 112 89 l 135 517 l 180 517 l 180 4 b 203 23 187 17 196 23 l 315 23 b 360 203 346 23 360 82 l 405 203 b 341 -68 405 23 383 -68 l 225 -68 b 157 -248 206 -68 183 -127 b 79 0 127 -98 101 -16 b 68 3 73 0 68 3 b 45 -68 52 3 45 -20 z\"\n    },\n    \"accSagittal7v19CommaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 b 68 -112 0 -52 23 -112 b 135 -45 89 -112 112 -89 l 135 -517 l 180 -517 l 180 112 l 225 112 b 315 -68 285 112 315 53 l 315 -248 l 360 -248 l 360 68 b 271 248 360 187 330 248 l 157 248 b 79 0 127 98 101 16 b 68 -3 73 0 68 -3 b 45 68 52 -3 45 20 z\"\n    },\n    \"accSagittal7v19CommaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 b 68 112 0 52 23 112 b 135 45 89 112 112 89 l 135 517 l 180 517 l 180 -112 l 225 -112 b 315 68 285 -112 315 -53 l 315 248 l 360 248 l 360 -68 b 271 -248 360 -187 330 -248 l 157 -248 b 79 0 127 -98 101 -16 b 68 3 73 0 68 3 b 45 -68 52 3 45 -20 z\"\n    },\n    \"accSagittal49SmallDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -203 l 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -68 330 112 360 53 l 360 -248 l 405 -248 l 405 68 b 315 248 405 187 374 248 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z\"\n    },\n    \"accSagittal49SmallDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 203 l 45 203 b 89 23 45 82 60 23 l 157 23 b 180 4 164 23 173 17 l 180 517 l 225 517 l 225 -112 l 271 -112 b 360 68 330 -112 360 -53 l 360 248 l 405 248 l 405 -68 b 315 -248 405 -187 374 -248 l 203 -248 b 135 -68 177 -127 154 -68 l 68 -68 b 0 203 23 -68 0 23 z\"\n    },\n    \"accSagittal23SmallDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 89 -23 45 -82 60 -23 l 157 -23 b 180 -4 164 -23 173 -17 l 180 -517 l 225 -517 l 225 58 l 495 -274 l 495 -112 l 203 248 b 135 68 177 127 154 68 l 68 68 b 0 -203 23 68 0 -23 z\"\n    },\n    \"accSagittal23SmallDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 89 23 45 82 60 23 l 157 23 b 180 4 164 23 173 17 l 180 517 l 225 517 l 225 -58 l 495 274 l 495 112 l 203 -248 b 135 -68 177 -127 154 -68 l 68 -68 b 0 203 23 -68 0 23 z\"\n    },\n    \"accSagittal5v13MediumDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -259 l 315 -89 l 315 -517 l 360 -517 l 360 248 l 337 248 b 128 180 253 203 184 180 b 45 248 73 180 45 203 l 0 248 b 52 95 0 170 17 120 l 0 68 l 0 -33 l 315 135 l 315 10 l 0 -157 z\"\n    },\n    \"accSagittal5v13MediumDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 259 l 315 89 l 315 517 l 360 517 l 360 -248 l 337 -248 b 128 -180 253 -203 184 -180 b 45 -248 73 -180 45 -203 l 0 -248 b 52 -95 0 -170 17 -120 l 0 -68 l 0 33 l 315 -135 l 315 -10 l 0 157 z\"\n    },\n    \"accSagittal11v19MediumDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -248 l 45 -68 b 180 112 45 53 89 112 l 225 112 l 225 -517 l 271 -517 l 271 -4 b 292 -23 278 -17 285 -23 l 405 -23 b 449 -203 435 -23 449 -82 l 495 -203 b 431 68 495 -23 472 68 l 315 68 b 248 248 295 68 271 127 l 135 248 b 0 68 45 248 0 187 l 0 -248 z\"\n    },\n    \"accSagittal11v19MediumDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 248 l 45 68 b 180 -112 45 -53 89 -112 l 225 -112 l 225 517 l 271 517 l 271 4 b 292 23 278 17 285 23 l 405 23 b 449 203 435 23 449 82 l 495 203 b 431 -68 495 23 472 -68 l 315 -68 b 248 -248 295 -68 271 -127 l 135 -248 b 0 -68 45 -248 0 -187 l 0 248 z\"\n    },\n    \"accSagittal49MediumDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -68 b 225 112 45 53 105 112 l 315 112 l 315 10 l 45 -145 z m 0 -68 l 0 -248 l 45 -248 l 315 -94 l 315 -517 l 360 -517 l 360 248 l 225 248 b 0 -68 75 248 0 143 z\"\n    },\n    \"accSagittal49MediumDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 68 l 0 248 l 45 248 l 315 94 l 315 517 l 360 517 l 360 -248 l 225 -248 b 0 68 75 -248 0 -143 z m 45 68 b 225 -112 45 -53 105 -112 l 315 -112 l 315 -10 l 45 145 z\"\n    },\n    \"accSagittal5v49MediumDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -89 l 0 -248 l 225 53 l 225 -517 l 271 -517 l 271 53 l 495 -248 l 495 -89 l 248 248 b 89 89 170 143 118 89 b 45 157 60 89 45 112 l 0 157 b 68 3 0 68 23 16 z\"\n    },\n    \"accSagittal5v49MediumDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 89 l 0 248 l 225 -53 l 225 517 l 271 517 l 271 -53 l 495 248 l 495 89 l 248 -248 b 89 -89 170 -143 118 -89 b 45 -157 60 -89 45 -112 l 0 -157 b 68 -3 0 -68 23 -16 z\"\n    },\n    \"accSagittal49LargeDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 12 l 45 112 l 180 112 b 360 -68 300 112 360 53 l 360 -147 z m 0 -517 l 45 -517 l 45 -89 l 360 -248 l 405 -248 l 405 -68 b 180 248 405 143 330 248 l 0 248 z\"\n    },\n    \"accSagittal49LargeDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 89 l 360 248 l 405 248 l 405 68 b 180 -248 405 -143 330 -248 l 0 -248 z m 45 -12 l 45 -112 l 180 -112 b 360 68 300 -112 360 -53 l 360 147 z\"\n    },\n    \"accSagittal11v19LargeDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -517 l 45 -517 l 45 -86 l 449 -256 l 449 -157 l 45 13 l 45 138 l 449 -30 l 449 68 l 23 248 l 0 248 z\"\n    },\n    \"accSagittal11v19LargeDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 86 l 449 256 l 449 157 l 45 -13 l 45 -138 l 449 30 l 449 -68 l 23 -248 l 0 -248 z\"\n    },\n    \"accSagittal5v13LargeDiesisUp\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 b 89 -112 0 -52 30 -112 b 180 -35 125 -112 157 -86 l 180 -517 l 225 -517 l 225 -86 l 631 -256 l 631 -157 l 225 13 l 225 138 l 631 -30 l 631 68 l 203 248 b 101 0 173 98 138 16 b 81 -3 94 0 86 -3 b 45 68 56 -3 45 20 z\"\n    },\n    \"accSagittal5v13LargeDiesisDown\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 b 89 112 0 52 30 112 b 180 35 125 112 157 86 l 180 517 l 225 517 l 225 86 l 631 256 l 631 157 l 225 -13 l 225 -138 l 631 30 l 631 -68 l 203 -248 b 101 0 173 -98 138 -16 b 81 3 94 0 86 3 b 45 -68 56 3 45 -20 z\"\n    },\n    \"accSagittalSharp23SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -203 l 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 b 315 6 287 -23 301 -13 l 315 -517 l 360 -517 l 360 248 l 337 248 b 248 68 312 127 282 68 l 194 68 b 89 157 125 68 89 98 l 45 157 b 60 59 45 118 50 85 b 0 -203 20 30 0 -56 z\"\n    },\n    \"accSagittalFlat23SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 203 l 45 203 b 112 23 45 84 68 23 l 135 23 l 135 517 l 180 517 l 180 23 l 271 23 b 315 -6 287 23 301 13 l 315 517 l 360 517 l 360 -248 l 337 -248 b 248 -68 312 -127 282 -68 l 194 -68 b 89 -157 125 -68 89 -98 l 45 -157 b 60 -59 45 -118 50 -85 b 0 203 20 -30 0 56 z\"\n    },\n    \"accSagittalSharp49SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -292 l 45 -292 b 112 -157 45 -203 68 -157 l 135 -157 l 135 -517 l 180 -517 l 180 -157 l 271 -157 b 315 -135 285 -157 300 -150 l 315 -517 l 360 -517 l 360 248 l 337 248 b 248 157 323 187 292 157 l 89 157 b 0 -68 30 157 0 82 l 45 -68 b 112 68 45 23 68 68 l 271 68 b 315 89 284 68 300 75 l 315 -32 b 248 -68 298 -56 275 -68 l 89 -68 b 0 -292 29 -68 0 -143 z\"\n    },\n    \"accSagittalFlat49SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 292 l 45 292 b 112 157 45 203 68 157 l 135 157 l 135 517 l 180 517 l 180 157 l 271 157 b 315 135 285 157 300 150 l 315 517 l 360 517 l 360 -248 l 337 -248 b 248 -157 323 -187 292 -157 l 89 -157 b 0 68 30 -157 0 -82 l 45 68 b 112 -68 45 -23 68 -68 l 271 -68 b 315 -89 284 -68 300 -75 l 315 32 b 248 68 298 56 275 68 l 89 68 b 0 292 29 68 0 143 z\"\n    },\n    \"accSagittalSharp7v19CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -112 l 0 -271 l 135 -125 l 135 -517 l 180 -517 l 180 -78 l 315 65 l 315 -517 l 360 -517 l 360 248 l 337 248 b 118 89 239 143 166 89 b 45 157 68 89 45 112 l 0 157 b 89 -20 0 53 29 -6 z\"\n    },\n    \"accSagittalFlat7v19CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 112 l 0 271 l 135 125 l 135 517 l 180 517 l 180 78 l 315 -65 l 315 517 l 360 517 l 360 -248 l 337 -248 b 118 -89 239 -143 166 -89 b 45 -157 68 -89 45 -112 l 0 -157 b 89 20 0 -53 29 6 z\"\n    },\n    \"accSagittalSharp19CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 l 45 -248 l 45 -68 b 180 96 45 17 89 72 l 180 -517 l 225 -517 l 225 107 b 315 112 252 112 282 112 l 360 112 l 360 -517 l 405 -517 l 405 248 l 271 248 b 0 68 89 248 0 187 z\"\n    },\n    \"accSagittalFlat19CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 45 248 l 45 68 b 180 -96 45 -17 89 -72 l 180 517 l 225 517 l 225 -107 b 315 -112 252 -112 282 -112 l 360 -112 l 360 517 l 405 517 l 405 -248 l 271 -248 b 0 -68 89 -248 0 -187 z\"\n    },\n    \"accSagittalSharp11v49CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 112 -23 45 -82 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 271 112 215 -23 245 23 l 315 112 l 315 -517 l 360 -517 l 360 107 b 449 -68 420 89 449 30 l 449 -248 l 495 -248 l 495 68 b 360 248 495 189 449 248 l 248 248 b 157 68 222 128 192 68 l 89 68 b 0 -203 30 68 0 -23 z\"\n    },\n    \"accSagittalFlat11v49CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 112 23 45 82 68 23 l 135 23 l 135 517 l 180 517 l 180 23 b 271 -112 215 23 245 -23 l 315 -112 l 315 517 l 360 517 l 360 -107 b 449 68 420 -89 449 -30 l 449 248 l 495 248 l 495 -68 b 360 -248 495 -189 449 -248 l 248 -248 b 157 -68 222 -128 192 -68 l 89 -68 b 0 203 30 -68 0 23 z\"\n    },\n    \"accSagittalSharp143CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 112 -23 45 -84 68 -23 l 135 -23 l 135 -517 l 180 -517 l 180 -23 b 259 76 210 -23 236 10 l 315 17 l 315 -517 l 360 -517 l 360 -30 l 585 -271 l 585 -112 l 248 248 b 157 68 222 127 192 68 l 89 68 b 0 -203 30 68 0 -23 z\"\n    },\n    \"accSagittalFlat143CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 112 23 45 84 68 23 l 135 23 l 135 517 l 180 517 l 180 23 b 259 -76 210 23 236 -10 l 315 -17 l 315 517 l 360 517 l 360 30 l 585 271 l 585 112 l 248 -248 b 157 -68 222 -127 192 -68 l 89 -68 b 0 203 30 -68 0 23 z\"\n    },\n    \"accSagittalSharp17kDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -157 l 0 -256 l 225 -161 l 225 -517 l 271 -517 l 271 -144 l 405 -86 l 405 -517 l 449 -517 l 449 248 l 428 248 b 145 171 305 196 210 171 b 45 248 78 171 45 196 l 0 248 b 79 101 0 170 26 121 l 0 68 l 0 -32 l 405 138 l 405 13 z\"\n    },\n    \"accSagittalFlat17kUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 157 l 0 256 l 225 161 l 225 517 l 271 517 l 271 144 l 405 86 l 405 517 l 449 517 l 449 -248 l 428 -248 b 145 -171 305 -196 210 -171 b 45 -248 78 -171 45 -196 l 0 -248 b 79 -101 0 -170 26 -121 l 0 -68 l 0 32 l 405 -138 l 405 -13 z\"\n    },\n    \"accSagittalSharp19sDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 l 45 -248 l 45 -68 b 180 109 45 36 89 95 l 180 -517 l 225 -517 l 225 112 l 271 112 b 360 -23 295 23 325 -23 l 360 -517 l 405 -517 l 405 -23 l 472 -23 b 540 -203 517 -23 540 -84 l 585 -203 b 495 68 585 -23 554 68 l 383 68 b 292 248 348 68 318 127 l 180 248 b 0 68 60 248 0 187 z\"\n    },\n    \"accSagittalFlat19sUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 45 248 l 45 68 b 180 -109 45 -36 89 -95 l 180 517 l 225 517 l 225 -112 l 271 -112 b 360 23 295 -23 325 23 l 360 517 l 405 517 l 405 23 l 472 23 b 540 203 517 23 540 84 l 585 203 b 495 -68 585 23 554 -68 l 383 -68 b 292 -248 348 -68 318 -127 l 180 -248 b 0 -68 60 -248 0 -187 z\"\n    },\n    \"accSagittalSharp19sUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 89 -96 l 89 -517 l 135 -517 l 135 -108 b 180 -112 148 -112 163 -112 b 225 -108 196 -112 210 -112 l 225 -517 l 271 -517 l 271 -94 b 360 -12 305 -78 337 -50 l 360 -517 l 405 -517 l 405 248 l 383 248 b 190 0 353 98 288 16 b 138 -3 171 0 153 -3 b 45 68 75 -3 45 20 l 0 68 b 89 -96 0 -17 30 -72 z\"\n    },\n    \"accSagittalFlat19sDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 89 96 l 89 517 l 135 517 l 135 108 b 180 112 148 112 163 112 b 225 108 196 112 210 112 l 225 517 l 271 517 l 271 94 b 360 12 305 78 337 50 l 360 517 l 405 517 l 405 -248 l 383 -248 b 190 0 353 -98 288 -16 b 138 3 171 0 153 3 b 45 -68 75 3 45 -20 l 0 -68 b 89 96 0 17 30 72 z\"\n    },\n    \"accSagittalSharp17kUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 337 -23 b 405 14 363 -23 386 -10 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 68 402 127 364 68 l 112 68 b 0 -203 37 68 0 -23 z\"\n    },\n    \"accSagittalFlat17kDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 135 23 45 84 75 23 l 135 517 l 180 517 l 180 23 l 271 23 l 271 517 l 315 517 l 315 23 l 337 23 b 405 -14 363 23 386 10 l 405 517 l 449 517 l 449 -248 l 428 -248 b 315 -68 402 -127 364 -68 l 112 -68 b 0 203 37 -68 0 23 z\"\n    },\n    \"accSagittalSharp143CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 271 -23 l 271 -517 l 315 -517 l 315 -23 l 337 -23 b 405 14 363 -23 386 -10 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 68 402 127 364 68 l 240 68 b 89 157 140 68 89 98 l 45 157 b 68 53 45 115 52 81 b 0 -203 23 23 0 -63 z\"\n    },\n    \"accSagittalFlat143CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 135 23 45 84 75 23 l 135 517 l 180 517 l 180 23 l 271 23 l 271 517 l 315 517 l 315 23 l 337 23 b 405 -14 363 23 386 10 l 405 517 l 449 517 l 449 -248 l 428 -248 b 315 -68 402 -127 364 -68 l 240 -68 b 89 -157 140 -68 89 -98 l 45 -157 b 68 -53 45 -115 52 -81 b 0 203 23 -23 0 63 z\"\n    },\n    \"accSagittalSharp11v49CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -68 b 135 68 45 23 76 68 l 337 68 b 405 95 363 68 386 76 l 405 -27 b 315 -68 386 -55 356 -68 l 112 -68 b 0 -292 37 -68 0 -143 l 45 -292 b 135 -157 45 -203 75 -157 l 135 -517 l 180 -517 l 180 -157 l 271 -157 l 271 -517 l 315 -517 l 315 -157 l 337 -157 b 405 -130 360 -157 383 -148 l 405 -517 l 449 -517 l 449 248 l 428 248 b 315 157 413 187 376 157 l 112 157 b 0 -68 37 157 0 82 z\"\n    },\n    \"accSagittalFlat11v49CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 68 b 135 -68 45 -23 76 -68 l 337 -68 b 405 -95 363 -68 386 -76 l 405 27 b 315 68 386 55 356 68 l 112 68 b 0 292 37 68 0 143 l 45 292 b 135 157 45 203 75 157 l 135 517 l 180 517 l 180 157 l 271 157 l 271 517 l 315 517 l 315 157 l 337 157 b 405 130 360 157 383 148 l 405 517 l 449 517 l 449 -248 l 428 -248 b 315 -157 413 -187 376 -157 l 112 -157 b 0 68 37 -157 0 -82 z\"\n    },\n    \"accSagittalSharp19CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 14 b 337 -23 289 -10 311 -23 l 360 -23 l 360 -517 l 405 -517 l 405 -23 b 495 -203 465 -23 495 -82 l 540 -203 b 428 68 540 -23 503 68 l 360 68 b 248 248 310 68 271 128 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z\"\n    },\n    \"accSagittalFlat19CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 89 109 l 89 517 l 135 517 l 135 109 b 225 27 170 102 200 75 l 225 517 l 271 517 l 271 -14 b 337 23 289 10 311 23 l 360 23 l 360 517 l 405 517 l 405 23 b 495 203 465 23 495 82 l 540 203 b 428 -68 540 23 503 -68 l 360 -68 b 248 -248 310 -68 271 -128 b 122 0 217 -98 176 -16 b 95 3 112 0 104 3 b 45 -68 60 3 45 -20 l 0 -68 b 89 109 0 39 30 98 z\"\n    },\n    \"accSagittalSharp7v19CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 112 l 315 112 b 360 109 331 112 346 112 l 360 -517 l 405 -517 l 405 98 b 495 -68 465 73 495 19 l 495 -248 l 540 -248 l 540 68 b 360 248 540 189 480 248 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z\"\n    },\n    \"accSagittalFlat7v19CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 89 109 l 89 517 l 135 517 l 135 109 b 225 27 170 102 200 75 l 225 517 l 271 517 l 271 -112 l 315 -112 b 360 -109 331 -112 346 -112 l 360 517 l 405 517 l 405 -98 b 495 68 465 -73 495 -19 l 495 248 l 540 248 l 540 -68 b 360 -248 540 -189 480 -248 l 248 -248 b 122 0 217 -98 176 -16 b 95 3 112 0 104 3 b 45 -68 60 3 45 -20 l 0 -68 b 89 109 0 39 30 98 z\"\n    },\n    \"accSagittalSharp49SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 112 l 360 112 b 405 109 376 112 390 112 l 405 -517 l 449 -517 l 449 96 b 540 -68 510 72 540 17 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z\"\n    },\n    \"accSagittalFlat49SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 135 23 45 84 75 23 l 135 517 l 180 517 l 180 23 l 203 23 b 271 -14 229 23 251 10 l 271 517 l 315 517 l 315 -112 l 360 -112 b 405 -109 376 -112 390 -112 l 405 517 l 449 517 l 449 -96 b 540 68 510 -72 540 -17 l 540 248 l 585 248 l 585 -68 b 405 -248 585 -187 526 -248 l 292 -248 b 180 -68 268 -127 230 -68 l 112 -68 b 0 203 37 -68 0 23 z\"\n    },\n    \"accSagittalSharp23SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 135 -23 45 -84 75 -23 l 135 -517 l 180 -517 l 180 -23 l 203 -23 b 271 14 229 -23 251 -10 l 271 -517 l 315 -517 l 315 71 l 405 -14 l 405 -517 l 449 -517 l 449 -56 l 675 -268 l 675 -112 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z\"\n    },\n    \"accSagittalFlat23SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 135 23 45 84 75 23 l 135 517 l 180 517 l 180 23 l 203 23 b 271 -14 229 23 251 10 l 271 517 l 315 517 l 315 -71 l 405 14 l 405 517 l 449 517 l 449 56 l 675 268 l 675 112 l 292 -248 b 180 -68 268 -127 230 -68 l 112 -68 b 0 203 37 -68 0 23 z\"\n    },\n    \"accSagittalSharp5v13MUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 495 141 l 495 14 l 0 -157 l 0 -256 l 225 -180 l 225 -517 l 271 -517 l 271 -161 l 360 -130 l 360 -517 l 405 -517 l 405 -115 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 517 248 b 167 168 366 194 248 168 b 45 248 85 168 45 194 l 0 248 b 95 99 0 170 30 120 l 0 68 l 0 -30 z\"\n    },\n    \"accSagittalFlat5v13MDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 495 -141 l 495 -14 l 0 157 l 0 256 l 225 180 l 225 517 l 271 517 l 271 161 l 360 130 l 360 517 l 405 517 l 405 115 l 495 84 l 495 517 l 540 517 l 540 -248 l 517 -248 b 167 -168 366 -194 248 -168 b 45 -248 85 -168 45 -194 l 0 -248 b 95 -99 0 -170 30 -120 l 0 -68 l 0 30 z\"\n    },\n    \"accSagittalSharp11v19MUp\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 68 l 0 -248 l 45 -248 l 45 -68 b 180 104 45 26 89 82 l 180 -517 l 225 -517 l 225 112 l 271 112 l 315 112 l 315 -517 l 360 -517 l 360 14 b 428 -23 379 -10 402 -23 l 449 -23 l 449 -517 l 495 -517 l 495 -23 b 585 -203 554 -23 585 -84 l 631 -203 b 517 68 631 -23 593 68 l 449 68 b 337 248 400 68 363 127 l 225 248 b 0 68 75 248 0 187 z\"\n    },\n    \"accSagittalFlat11v19MDown\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 l 0 248 l 45 248 l 45 68 b 180 -104 45 -26 89 -82 l 180 517 l 225 517 l 225 -112 l 271 -112 l 315 -112 l 315 517 l 360 517 l 360 -14 b 428 23 379 10 402 23 l 449 23 l 449 517 l 495 517 l 495 23 b 585 203 554 23 585 84 l 631 203 b 517 -68 631 23 593 -68 l 449 -68 b 337 -248 400 -68 363 -127 l 225 -248 b 0 -68 75 -248 0 -187 z\"\n    },\n    \"accSagittalSharp49MUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -145 l 45 -68 b 360 112 45 53 150 112 l 495 112 l 495 14 z m 0 -248 l 45 -248 l 225 -180 l 225 -517 l 271 -517 l 271 -166 l 360 -132 l 360 -517 l 405 -517 l 405 -117 l 495 -84 l 495 -517 l 540 -517 l 540 248 l 360 248 b 0 -68 120 248 0 143 z\"\n    },\n    \"accSagittalFlat49MDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 45 248 l 225 180 l 225 517 l 271 517 l 271 166 l 360 132 l 360 517 l 405 517 l 405 117 l 495 84 l 495 517 l 540 517 l 540 -248 l 360 -248 b 0 68 120 -248 0 -143 z m 45 145 l 45 68 b 360 -112 45 -53 150 -112 l 495 -112 l 495 -14 z\"\n    },\n    \"accSagittalSharp5v49MUp\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -271 l 180 -79 l 180 -517 l 225 -517 l 225 -30 l 315 65 l 315 -517 l 360 -517 l 360 65 l 449 -30 l 449 -517 l 495 -517 l 495 -79 l 675 -271 l 675 -112 l 337 248 b 118 89 239 143 166 89 b 45 157 68 89 45 112 l 0 157 b 107 0 0 62 36 10 l 0 -112 z\"\n    },\n    \"accSagittalFlat5v49MDown\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 271 l 180 79 l 180 517 l 225 517 l 225 30 l 315 -65 l 315 517 l 360 517 l 360 -65 l 449 30 l 449 517 l 495 517 l 495 79 l 675 271 l 675 112 l 337 -248 b 118 -89 239 -143 166 -89 b 45 -157 68 -89 45 -112 l 0 -157 b 107 0 0 -62 36 -10 l 0 112 z\"\n    },\n    \"accSagittalSharp49LUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 112 l 180 112 b 540 -68 420 112 540 53 l 540 -145 l 45 16 z m 0 -517 l 45 -517 l 45 -82 l 135 -112 l 135 -517 l 180 -517 l 180 -127 l 271 -157 l 271 -517 l 315 -517 l 315 -173 l 540 -248 l 585 -248 l 585 -68 b 180 248 585 143 449 248 l 0 248 z\"\n    },\n    \"accSagittalFlat49LDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 82 l 135 112 l 135 517 l 180 517 l 180 127 l 271 157 l 271 517 l 315 517 l 315 173 l 540 248 l 585 248 l 585 68 b 180 -248 585 -143 449 -248 l 0 -248 z m 45 -112 l 180 -112 b 540 68 420 -112 540 -53 l 540 145 l 45 -16 z\"\n    },\n    \"accSagittalSharp11v19LUp\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -517 l 45 -517 l 45 -81 l 135 -108 l 135 -517 l 180 -517 l 180 -121 l 271 -148 l 271 -517 l 315 -517 l 315 -161 l 631 -255 l 631 -157 l 45 16 l 45 144 l 631 -30 l 631 68 l 23 248 l 0 248 z\"\n    },\n    \"accSagittalFlat11v19LDown\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 517 l 45 517 l 45 81 l 135 108 l 135 517 l 180 517 l 180 121 l 271 148 l 271 517 l 315 517 l 315 161 l 631 255 l 631 157 l 45 -16 l 45 -144 l 631 30 l 631 -68 l 23 -248 l 0 -248 z\"\n    },\n    \"accSagittalSharp5v13LUp\": {\n      \"x_min\": 0,\n      \"x_max\": 500,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 89 -109 l 89 -517 l 135 -517 l 135 -109 b 225 -27 170 -102 200 -75 l 225 -517 l 271 -517 l 271 -85 l 360 -120 l 360 -517 l 405 -517 l 405 -135 l 720 -256 l 720 -157 l 271 14 l 271 141 l 720 -30 l 720 68 l 248 248 b 122 0 217 98 176 16 b 95 -3 112 0 104 -3 b 45 68 60 -3 45 20 l 0 68 b 89 -109 0 -39 30 -98 z\"\n    },\n    \"accSagittalFlat5v13LDown\": {\n      \"x_min\": 0,\n      \"x_max\": 500,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 89 109 l 89 517 l 135 517 l 135 109 b 225 27 170 102 200 75 l 225 517 l 271 517 l 271 85 l 360 120 l 360 517 l 405 517 l 405 135 l 720 256 l 720 157 l 271 -14 l 271 -141 l 720 30 l 720 -68 l 248 -248 b 122 0 217 -98 176 -16 b 95 3 112 0 104 3 b 45 -68 60 3 45 -20 l 0 -68 b 89 109 0 39 30 98 z\"\n    },\n    \"accSagittalDoubleSharp23SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -203 l 45 -203 b 135 -23 45 -82 76 -23 l 301 -23 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 370 -14 b 449 112 423 10 449 53 l 449 248 l 428 248 b 315 68 402 127 364 68 l 240 68 b 89 157 140 68 89 98 l 45 157 b 68 53 45 115 52 81 b 0 -203 23 23 0 -63 z\"\n    },\n    \"accSagittalDoubleFlat23SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 203 l 45 203 b 135 23 45 82 76 23 l 301 23 l 135 503 l 186 517 l 337 82 l 488 517 l 540 503 l 370 14 b 449 -112 423 -10 449 -53 l 449 -248 l 428 -248 b 315 -68 402 -127 364 -68 l 240 -68 b 89 -157 140 -68 89 -98 l 45 -157 b 68 -53 45 -115 52 -81 b 0 203 23 -23 0 63 z\"\n    },\n    \"accSagittalDoubleSharp49SDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -292 l 45 -292 b 112 -157 45 -203 68 -157 l 256 -157 l 135 -503 l 187 -517 l 337 -82 l 490 -517 l 540 -503 l 366 0 l 396 89 b 449 157 416 102 435 125 l 449 248 l 428 248 b 315 157 413 187 376 157 l 112 157 b 0 -68 39 157 0 82 l 45 -68 b 135 68 45 23 76 68 l 287 68 l 311 0 l 288 -68 l 89 -68 b 0 -292 32 -68 0 -144 z\"\n    },\n    \"accSagittalDoubleFlat49SUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 292 l 45 292 b 112 157 45 203 68 157 l 256 157 l 135 503 l 187 517 l 337 82 l 490 517 l 540 503 l 366 0 l 396 -89 b 449 -157 416 -102 435 -125 l 449 -248 l 428 -248 b 315 -157 413 -187 376 -157 l 112 -157 b 0 68 39 -157 0 -82 l 45 68 b 135 -68 45 -23 76 -68 l 287 -68 l 311 0 l 288 68 l 89 68 b 0 292 32 68 0 144 z\"\n    },\n    \"accSagittalDoubleSharp7v19CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -112 l 0 -266 l 307 -7 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 386 59 l 449 112 l 449 248 l 428 248 b 130 68 285 127 186 68 b 45 157 73 68 45 98 l 0 157 b 112 -20 0 53 37 -6 z\"\n    },\n    \"accSagittalDoubleFlat7v19CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 375,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 112 l 0 266 l 307 7 l 135 503 l 186 517 l 337 82 l 488 517 l 540 503 l 366 0 l 386 -59 l 449 -112 l 449 -248 l 428 -248 b 130 -68 285 -127 186 -68 b 45 -157 73 -68 45 -98 l 0 -157 b 112 20 0 -53 37 6 z\"\n    },\n    \"accSagittalDoubleSharp19CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 372 112 l 393 112 l 383 82 z m 0 68 l 0 -248 l 45 -248 l 45 -68 b 315 109 45 36 135 95 l 354 0 l 180 -503 l 232 -517 l 383 -82 l 534 -517 l 585 -503 l 410 0 l 449 112 l 495 112 l 495 248 l 360 248 b 0 68 120 248 0 187 z\"\n    },\n    \"accSagittalDoubleFlat19CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -68 l 0 248 l 45 248 l 45 68 b 315 -109 45 -36 135 -95 l 354 0 l 180 503 l 232 517 l 383 82 l 534 517 l 585 503 l 410 0 l 449 -112 l 495 -112 l 495 -248 l 360 -248 b 0 -68 120 -248 0 -187 z m 372 -112 l 393 -112 l 383 -82 z\"\n    },\n    \"accSagittalDoubleSharp11v49CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 360 112 b 540 -68 480 112 540 53 l 540 -248 l 585 -248 l 585 68 b 405 248 585 187 526 248 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z\"\n    },\n    \"accSagittalDoubleFlat11v49CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 406,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 135 23 45 84 75 23 l 203 23 b 262 -4 225 23 245 13 l 265 0 l 89 503 l 141 517 l 292 82 l 444 517 l 495 503 l 321 0 l 360 -112 b 540 68 480 -112 540 -53 l 540 248 l 585 248 l 585 -68 b 405 -248 585 -187 526 -248 l 292 -248 b 180 -68 268 -127 230 -68 l 112 -68 b 0 203 37 -68 0 23 z\"\n    },\n    \"accSagittalDoubleSharp143CDown\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 45 -203 b 135 -23 45 -84 75 -23 l 203 -23 b 262 4 225 -23 245 -13 l 265 0 l 89 -503 l 141 -517 l 292 -82 l 444 -517 l 495 -503 l 321 0 l 337 49 l 675 -268 l 675 -112 l 292 248 b 180 68 268 127 230 68 l 112 68 b 0 -203 37 68 0 -23 z\"\n    },\n    \"accSagittalDoubleFlat143CUp\": {\n      \"x_min\": 0,\n      \"x_max\": 469,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 45 203 b 135 23 45 84 75 23 l 203 23 b 262 -4 225 23 245 13 l 265 0 l 89 503 l 141 517 l 292 82 l 444 517 l 495 503 l 321 0 l 337 -49 l 675 268 l 675 112 l 292 -248 b 180 -68 268 -127 230 -68 l 112 -68 b 0 203 37 -68 0 23 z\"\n    },\n    \"accSagittalDoubleSharp17kDown\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 416 115 l 442 124 l 428 82 z m 0 248 b 95 101 0 170 30 121 l 0 68 l 0 -30 l 364 96 l 399 0 l 390 -23 l 0 -157 l 0 -255 l 353 -135 l 225 -503 l 275 -517 l 428 -82 l 577 -517 l 631 -503 l 455 0 l 507 145 l 540 157 l 540 248 l 517 248 b 167 168 366 194 248 168 b 45 248 85 168 45 194 z\"\n    },\n    \"accSagittalDoubleFlat17kUp\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 b 95 -101 0 -170 30 -121 l 0 -68 l 0 30 l 364 -96 l 399 0 l 390 23 l 0 157 l 0 255 l 353 135 l 225 503 l 275 517 l 428 82 l 577 517 l 631 503 l 455 0 l 507 -145 l 540 -157 l 540 -248 l 517 -248 b 167 -168 366 -194 248 -168 b 45 -248 85 -168 45 -194 z m 416 -115 l 442 -124 l 428 -82 z\"\n    },\n    \"accSagittalDoubleSharp19sDown\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 -248 l 45 -248 l 45 -68 b 271 112 45 53 120 112 l 310 0 l 135 -503 l 186 -517 l 337 -82 l 488 -517 l 540 -503 l 366 0 l 367 4 b 428 -23 386 -13 405 -23 l 495 -23 b 585 -203 554 -23 585 -84 l 631 -203 b 517 68 631 -23 593 68 l 449 68 b 337 248 400 68 363 127 l 225 248 b 0 68 75 248 0 187 z\"\n    },\n    \"accSagittalDoubleFlat19sUp\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 248 l 45 248 l 45 68 b 271 -112 45 -53 120 -112 l 310 0 l 135 503 l 186 517 l 337 82 l 488 517 l 540 503 l 366 0 l 367 -4 b 428 23 386 13 405 23 l 495 23 b 585 203 554 23 585 84 l 631 203 b 517 -68 631 23 593 -68 l 449 -68 b 337 -248 400 -68 363 -127 l 225 -248 b 0 -68 75 -248 0 -187 z\"\n    },\n    \"accSagittalShaftUp\": {\n      \"x_min\": 0,\n      \"x_max\": 31,\n      \"y_min\": -359,\n      \"y_max\": 172,\n      \"ha\": 531,\n      \"o\": \"m 0 112 l 0 -517 l 45 -517 l 45 112 l 23 248 z\"\n    },\n    \"accSagittalShaftDown\": {\n      \"x_min\": 0,\n      \"x_max\": 31,\n      \"y_min\": -172,\n      \"y_max\": 359,\n      \"ha\": 531,\n      \"o\": \"m 0 -112 l 0 517 l 45 517 l 45 -112 l 23 -248 z\"\n    },\n    \"accSagittalAcute\": {\n      \"x_min\": 0,\n      \"x_max\": 125,\n      \"y_min\": -62,\n      \"y_max\": 125,\n      \"ha\": 187,\n      \"o\": \"m 0 0 l 0 -89 l 180 89 l 180 180 z\"\n    },\n    \"accSagittalGrave\": {\n      \"x_min\": 0,\n      \"x_max\": 125,\n      \"y_min\": -125,\n      \"y_max\": 62,\n      \"ha\": 187,\n      \"o\": \"m 0 0 l 0 89 l 180 -89 l 180 -180 z\"\n    },\n    \"accSagittal1MinaUp\": {\n      \"x_min\": -7,\n      \"x_max\": 124,\n      \"y_min\": 16,\n      \"y_max\": 106.32667068233003,\n      \"ha\": 90.32667068233003,\n      \"o\": \"m -10 23 l 43 23 b 72 65 43 23 65 55 b 135 23 104 108 136 148 l 179 23 b 134 150 179 112 163 135 b 68 130 116 158 85 150 b -10 23 43 101 13 58 z\"\n    },\n    \"accSagittal1MinaDown\": {\n      \"x_min\": -7,\n      \"x_max\": 124,\n      \"y_min\": -106.32667068233003,\n      \"y_max\": -16,\n      \"ha\": 90.32667068233003,\n      \"o\": \"m -10 -23 l 43 -23 b 72 -65 43 -23 65 -55 b 135 -23 104 -108 136 -148 l 179 -23 b 134 -150 179 -112 163 -135 b 68 -130 116 -158 85 -150 b -10 -23 43 -101 13 -58 z\"\n    },\n    \"accSagittal2MinasUp\": {\n      \"x_min\": -7,\n      \"x_max\": 218,\n      \"y_min\": 16,\n      \"y_max\": 106.32679473178912,\n      \"ha\": 90.32679473178912,\n      \"o\": \"m -10 23 l 43 23 b 72 65 43 23 65 55 b 135 23 104 108 136 148 l 179 23 b 207 65 179 23 200 55 b 271 23 240 108 272 148 l 314 23 b 269 150 314 112 299 135 b 203 130 252 158 220 150 b 173 93 191 115 182 104 b 134 150 167 127 153 140 b 68 130 116 158 85 150 b -10 23 43 101 13 58 z\"\n    },\n    \"accSagittal2MinasDown\": {\n      \"x_min\": -7,\n      \"x_max\": 218,\n      \"y_min\": -106.32679473178912,\n      \"y_max\": -16,\n      \"ha\": 90.32679473178912,\n      \"o\": \"m -10 -23 l 43 -23 b 72 -65 43 -23 65 -55 b 135 -23 104 -108 136 -148 l 179 -23 b 207 -65 179 -23 200 -55 b 271 -23 240 -108 272 -148 l 314 -23 b 269 -150 314 -112 299 -135 b 203 -130 252 -158 220 -150 b 173 -93 191 -115 182 -104 b 134 -150 167 -127 153 -140 b 68 -130 116 -158 85 -150 b -10 -23 43 -101 13 -58 z\"\n    },\n    \"accSagittal1TinaUp\": {\n      \"x_min\": 0,\n      \"x_max\": 93,\n      \"y_min\": 16,\n      \"y_max\": 107,\n      \"ha\": 91,\n      \"o\": \"m 134 154 l 91 154 b 81 76 91 101 90 86 b 0 68 73 69 48 68 l 0 23 b 112 45 50 23 92 27 b 134 154 129 59 134 73 z\"\n    },\n    \"accSagittal1TinaDown\": {\n      \"x_min\": 0,\n      \"x_max\": 93,\n      \"y_min\": -107,\n      \"y_max\": -16,\n      \"ha\": 91,\n      \"o\": \"m 134 -154 l 91 -154 b 81 -76 91 -101 90 -86 b 0 -68 73 -69 48 -68 l 0 -23 b 112 -45 50 -23 92 -27 b 134 -154 129 -59 134 -73 z\"\n    },\n    \"accSagittal2TinasUp\": {\n      \"x_min\": 0,\n      \"x_max\": 94,\n      \"y_min\": 16,\n      \"y_max\": 107,\n      \"ha\": 91,\n      \"o\": \"m 135 68 b 99 92 116 68 103 82 b 89 154 94 105 89 121 l 46 154 b 36 92 45 131 42 106 b 0 68 32 83 23 68 l 0 23 b 53 45 23 23 48 39 b 68 63 60 52 60 52 b 82 43 75 52 77 50 b 135 23 86 37 115 23 z\"\n    },\n    \"accSagittal2TinasDown\": {\n      \"x_min\": 0,\n      \"x_max\": 94,\n      \"y_min\": -107,\n      \"y_max\": -16,\n      \"ha\": 91,\n      \"o\": \"m 135 -68 b 99 -92 116 -68 103 -82 b 89 -154 94 -105 89 -121 l 46 -154 b 36 -92 45 -131 42 -106 b 0 -68 32 -83 23 -68 l 0 -23 b 53 -45 23 -23 48 -39 b 68 -63 60 -52 60 -52 b 82 -43 75 -52 77 -50 b 135 -23 86 -37 115 -23 z\"\n    },\n    \"accSagittal3TinasUp\": {\n      \"x_min\": -7,\n      \"x_max\": 124,\n      \"y_min\": 16,\n      \"y_max\": 106.32667068233003,\n      \"ha\": 90.32667068233003,\n      \"o\": \"m -10 23 l 43 23 b 72 65 43 23 65 55 b 135 23 104 108 136 148 l 179 23 b 134 150 179 112 163 135 b 68 130 116 158 85 150 b -10 23 43 101 13 58 z\"\n    },\n    \"accSagittal3TinasDown\": {\n      \"x_min\": -7,\n      \"x_max\": 124,\n      \"y_min\": -106.32667068233003,\n      \"y_max\": -16,\n      \"ha\": 90.32667068233003,\n      \"o\": \"m -10 -23 l 43 -23 b 72 -65 43 -23 65 -55 b 135 -23 104 -108 136 -148 l 179 -23 b 134 -150 179 -112 163 -135 b 68 -130 116 -158 85 -150 b -10 -23 43 -101 13 -58 z\"\n    },\n    \"accSagittal4TinasUp\": {\n      \"x_min\": 0,\n      \"x_max\": 187,\n      \"y_min\": 16,\n      \"y_max\": 106.77773196082337,\n      \"ha\": 90.77773196082337,\n      \"o\": \"m 0 68 l 0 23 b 143 45 105 23 123 26 b 226 23 158 62 228 189 l 269 23 b 225 150 269 112 254 135 b 160 132 207 159 182 153 b 115 81 139 112 123 88 b 0 68 104 71 94 68 z\"\n    },\n    \"accSagittal4TinasDown\": {\n      \"x_min\": 0,\n      \"x_max\": 187,\n      \"y_min\": -106.77773196082337,\n      \"y_max\": -16,\n      \"ha\": 90.77773196082337,\n      \"o\": \"m 0 -68 l 0 -23 b 143 -45 105 -23 123 -26 b 226 -23 158 -62 228 -189 l 269 -23 b 225 -150 269 -112 254 -135 b 160 -132 207 -159 182 -153 b 115 -81 139 -112 123 -88 b 0 -68 104 -71 94 -68 z\"\n    },\n    \"accSagittal5TinasUp\": {\n      \"x_min\": 0,\n      \"x_max\": 218,\n      \"y_min\": 16,\n      \"y_max\": 107,\n      \"ha\": 91,\n      \"o\": \"m 135 23 b 187 45 156 23 168 26 b 271 23 204 61 272 189 l 314 23 b 269 150 314 112 299 135 b 204 132 252 159 226 153 b 160 81 183 112 168 88 b 135 68 148 71 147 68 b 99 92 116 68 103 82 b 89 154 94 105 89 121 l 46 154 b 36 92 45 131 42 106 b 0 68 32 83 23 68 l 0 23 b 53 45 23 23 48 39 b 68 63 60 52 60 52 b 82 43 75 52 77 50 b 135 23 86 37 115 23 z\"\n    },\n    \"accSagittal5TinasDown\": {\n      \"x_min\": 0,\n      \"x_max\": 218,\n      \"y_min\": -107,\n      \"y_max\": -16,\n      \"ha\": 91,\n      \"o\": \"m 135 -23 b 187 -45 156 -23 168 -26 b 271 -23 204 -61 272 -189 l 314 -23 b 269 -150 314 -112 299 -135 b 204 -132 252 -159 226 -153 b 160 -81 183 -112 168 -88 b 135 -68 148 -71 147 -68 b 99 -92 116 -68 103 -82 b 89 -154 94 -105 89 -121 l 46 -154 b 36 -92 45 -131 42 -106 b 0 -68 32 -83 23 -68 l 0 -23 b 53 -45 23 -23 48 -39 b 68 -63 60 -52 60 -52 b 82 -43 75 -52 77 -50 b 135 -23 86 -37 115 -23 z\"\n    },\n    \"accSagittal6TinasUp\": {\n      \"x_min\": -7,\n      \"x_max\": 218,\n      \"y_min\": 16,\n      \"y_max\": 106.32679473178912,\n      \"ha\": 90.32679473178912,\n      \"o\": \"m -10 23 l 43 23 b 72 65 43 23 65 55 b 135 23 104 108 136 148 l 179 23 b 207 65 179 23 200 55 b 271 23 240 108 272 148 l 314 23 b 269 150 314 112 299 135 b 203 130 252 158 220 150 b 173 93 191 115 182 104 b 134 150 167 127 153 140 b 68 130 116 158 85 150 b -10 23 43 101 13 58 z\"\n    },\n    \"accSagittal6TinasDown\": {\n      \"x_min\": -7,\n      \"x_max\": 218,\n      \"y_min\": -106.32679473178912,\n      \"y_max\": -16,\n      \"ha\": 90.32679473178912,\n      \"o\": \"m -10 -23 l 43 -23 b 72 -65 43 -23 65 -55 b 135 -23 104 -108 136 -148 l 179 -23 b 207 -65 179 -23 200 -55 b 271 -23 240 -108 272 -148 l 314 -23 b 269 -150 314 -112 299 -135 b 203 -130 252 -158 220 -150 b 173 -93 191 -115 182 -104 b 134 -150 167 -127 153 -140 b 68 -130 116 -158 85 -150 b -10 -23 43 -101 13 -58 z\"\n    },\n    \"accSagittal7TinasUp\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": 16,\n      \"y_max\": 106.77773196082337,\n      \"ha\": 90.77773196082337,\n      \"o\": \"m 269 23 z m 0 68 l 0 23 b 143 45 105 23 123 26 b 226 23 158 62 228 189 l 269 23 b 298 65 269 23 291 55 b 361 23 330 108 362 148 l 405 23 b 360 150 405 112 389 135 b 294 130 342 158 311 150 b 264 93 281 115 273 104 b 225 150 257 127 244 140 b 160 132 207 159 182 153 b 115 81 139 112 123 88 b 0 68 104 71 94 68 z\"\n    },\n    \"accSagittal7TinasDown\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -106.77773196082337,\n      \"y_max\": -16,\n      \"ha\": 90.77773196082337,\n      \"o\": \"m 0 -68 l 0 -23 b 143 -45 105 -23 123 -26 b 226 -23 158 -62 228 -189 l 269 -23 b 298 -65 269 -23 291 -55 b 361 -23 330 -108 362 -148 l 405 -23 b 360 -150 405 -112 389 -135 b 294 -130 342 -158 311 -150 b 264 -93 281 -115 273 -104 b 225 -150 257 -127 244 -140 b 160 -132 207 -159 182 -153 b 115 -81 139 -112 123 -88 b 0 -68 104 -71 94 -68 z\"\n    },\n    \"accSagittal8TinasUp\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": 16,\n      \"y_max\": 107,\n      \"ha\": 91,\n      \"o\": \"m 314 23 z m 135 23 b 187 45 156 23 168 26 b 271 23 204 61 272 189 l 314 23 b 343 65 314 23 335 55 b 406 23 375 108 407 148 l 449 23 b 405 150 449 112 434 135 b 338 130 387 158 356 150 b 309 93 326 115 317 104 b 269 150 302 127 289 140 b 204 132 252 159 226 153 b 160 81 183 112 168 88 b 135 68 148 71 147 68 b 99 92 116 68 103 82 b 89 154 94 105 89 121 l 46 154 b 36 92 45 131 42 106 b 0 68 32 83 23 68 l 0 23 b 53 45 23 23 48 39 b 68 63 60 52 60 52 b 82 43 75 52 77 50 b 135 23 86 37 115 23 z\"\n    },\n    \"accSagittal8TinasDown\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": -107,\n      \"y_max\": -16,\n      \"ha\": 91,\n      \"o\": \"m 135 -23 b 187 -45 156 -23 168 -26 b 271 -23 204 -61 272 -189 l 314 -23 b 343 -65 314 -23 335 -55 b 406 -23 375 -108 407 -148 l 449 -23 b 405 -150 449 -112 434 -135 b 338 -130 387 -158 356 -150 b 309 -93 326 -115 317 -104 b 269 -150 302 -127 289 -140 b 204 -132 252 -159 226 -153 b 160 -81 183 -112 168 -88 b 135 -68 148 -71 147 -68 b 99 -92 116 -68 103 -82 b 89 -154 94 -105 89 -121 l 46 -154 b 36 -92 45 -131 42 -106 b 0 -68 32 -83 23 -68 l 0 -23 b 53 -45 23 -23 48 -39 b 68 -63 60 -52 60 -52 b 82 -43 75 -52 77 -50 b 135 -23 86 -37 115 -23 z\"\n    },\n    \"accSagittal9TinasUp\": {\n      \"x_min\": -7,\n      \"x_max\": 312,\n      \"y_min\": 16,\n      \"y_max\": 106.32679473178912,\n      \"ha\": 90.32679473178912,\n      \"o\": \"m 314 23 z m -10 23 l 43 23 b 72 65 43 23 65 55 b 135 23 104 108 136 148 l 179 23 b 207 65 179 23 200 55 b 271 23 240 108 272 148 l 314 23 b 343 65 314 23 335 55 b 406 23 375 108 407 148 l 449 23 b 405 150 449 112 434 135 b 338 130 387 158 356 150 b 309 93 326 115 317 104 b 269 150 302 127 289 140 b 203 130 252 158 220 150 b 173 93 191 115 182 104 b 134 150 167 127 153 140 b 68 130 116 158 85 150 b -10 23 43 101 13 58 z\"\n    },\n    \"accSagittal9TinasDown\": {\n      \"x_min\": -7,\n      \"x_max\": 312,\n      \"y_min\": -106.32679473178912,\n      \"y_max\": -16,\n      \"ha\": 90.32679473178912,\n      \"o\": \"m -10 -23 l 43 -23 b 72 -65 43 -23 65 -55 b 135 -23 104 -108 136 -148 l 179 -23 b 207 -65 179 -23 200 -55 b 271 -23 240 -108 272 -148 l 314 -23 b 343 -65 314 -23 335 -55 b 406 -23 375 -108 407 -148 l 449 -23 b 405 -150 449 -112 434 -135 b 338 -130 387 -158 356 -150 b 309 -93 326 -115 317 -104 b 269 -150 302 -127 289 -140 b 203 -130 252 -158 220 -150 b 173 -93 191 -115 182 -104 b 134 -150 167 -127 153 -140 b 68 -130 116 -158 85 -150 b -10 -23 43 -101 13 -58 z\"\n    },\n    \"accSagittalFractionalTinaUp\": {\n      \"x_min\": -3,\n      \"x_max\": 35,\n      \"y_min\": 73,\n      \"y_max\": 111,\n      \"ha\": 38,\n      \"o\": \"m -4 132 b 23 105 -4 118 9 105 b 50 132 37 105 50 118 b 23 160 50 147 37 160 b -4 132 9 160 -4 147 z\"\n    },\n    \"accSagittalFractionalTinaDown\": {\n      \"x_min\": -3,\n      \"x_max\": 35,\n      \"y_min\": -111,\n      \"y_max\": -73,\n      \"ha\": 38,\n      \"o\": \"m -4 -132 b 23 -105 -4 -118 9 -105 b 50 -132 37 -105 50 -118 b 23 -160 50 -147 37 -160 b -4 -132 9 -160 -4 -147 z\"\n    },\n    \"accidentalNarrowReversedFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 164,\n      \"y_min\": -194,\n      \"y_max\": 422,\n      \"ha\": 616,\n      \"o\": \"m 112 -157 l 236 -279 l 236 608 l 192 608 l 192 180 b 85 243 150 222 112 243 b 0 84 23 243 0 135 b 112 -157 0 3 37 -78 z m 82 40 b 138 144 82 73 96 144 b 192 112 153 144 170 132 l 192 -163 l 135 -98 b 82 40 101 -50 82 -3 z\"\n    },\n    \"accidentalNarrowReversedFlatAndFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 414,\n      \"y_min\": -194,\n      \"y_max\": 422,\n      \"ha\": 616,\n      \"o\": \"m 438 -157 b 596 84 547 -82 596 3 b 475 243 596 154 556 243 b 325 180 435 243 383 222 l 325 608 l 281 608 l 281 -268 z m 0 84 b 112 -157 0 3 37 -78 l 235 -279 l 235 608 l 190 608 l 190 180 b 85 243 148 222 112 243 b 12 157 52 243 27 215 b 0 84 3 135 0 108 z m 325 112 b 410 144 360 132 386 144 b 498 36 462 144 498 84 b 413 -107 498 -9 469 -58 l 325 -173 z m 89 94 b 135 144 102 127 118 144 b 192 112 153 144 170 132 l 192 -163 l 135 -98 b 81 40 99 -50 81 -3 b 89 94 81 59 84 76 z\"\n    },\n    \"accidentalWilsonPlus\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -203,\n      \"y_max\": 203,\n      \"ha\": 406,\n      \"o\": \"m 180 -98 l 180 -292 l 225 -292 l 225 -56 l 405 112 l 405 268 l 225 98 l 225 292 l 180 292 l 180 56 l 0 -112 l 0 -268 z\"\n    },\n    \"accidentalWilsonMinus\": {\n      \"x_min\": 0,\n      \"x_max\": 281,\n      \"y_min\": -186,\n      \"y_max\": 186,\n      \"ha\": 372,\n      \"o\": \"m 0 112 l 405 -268 l 405 -112 l 0 268 z\"\n    }\n  },\n  \"fontFamily\": \"Bravura\",\n  \"resolution\": 1000,\n  \"generatedOn\": \"2020-11-16T21:00:32.731Z\"\n};\n","export const BravuraMetrics = {\n  name: 'Bravura',\n  smufl: true,\n\n  stave: {\n    padding: 12,\n    endPaddingMax: 10,\n    endPaddingMin: 5,\n    unalignedNotePadding: 10\n  },\n\n  clef: {\n    default: {\n      point: 32,\n      width: 26,\n    },\n    small: {\n      point: 26,\n      width: 20,\n    },\n\n    annotations: {\n      '8va': {\n        smuflCode: 'timeSig8',\n        default: {\n          point: 18,\n          treble: {\n            line: -1.4,\n            shiftX: 12,\n          },\n        },\n        small: {\n          point: 16,\n          treble: {\n            line: -0.2,\n            shiftX: 8,\n          },\n        },\n      },\n      '8vb': {\n        smuflCode: 'timeSig8',\n        default: {\n          point: 18,\n          treble: {\n            line: 6,\n            shiftX: 10,\n          },\n          bass: {\n            line: 3.5,\n            shiftX: 1,\n          },\n        },\n        small: {\n          point: 16,\n          treble: {\n            line: 5.3,\n            shiftX: 6,\n          },\n          bass: {\n            line: 3.1,\n            shiftX: 0.5,\n          },\n        },\n      },\n    },\n    // These may no longer be necessary\n    lineCount: {\n      '8': { point: 55, shiftY: 14 },\n      '7': { point: 47, shiftY: 8 },\n      '6': { point: 32, shiftY: 1 },\n      '5': { point: 30, shiftY: -6 },\n      '4': { point: 23, shiftY: -12 },\n    },\n  },\n  pedalMarking: {\n    up: {\n      point: 40,\n    },\n    down: {\n      point: 34,\n    },\n  },\n\n  // These are for numeric digits, such as in time signatures\n  digits: {\n    // used by timesig\n    shiftLine: -1,\n    point: 34,\n\n    // used by tuplets\n    tupletPoint: 22,\n    shiftY: -6,\n  },\n\n  articulation: {\n    articStaccatissimoAbove: {\n      padding: 2,\n    },\n    articStaccatissimoBelow: {\n      padding: 2,\n    },\n  },\n\n  tremolo: {\n    default: {\n      point: 25,\n      spacing: 5,\n      offsetYStemUp: -5,\n      offsetYStemDown: 5,\n      offsetXStemUp: 11,\n      offsetXStemDown: 1,\n    },\n    grace: {\n      point: 18,\n      spacing: 4,\n      offsetYStemUp: -5,\n      offsetYStemDown: 5,\n      offsetXStemUp: 7,\n      offsetXStemDown: 1,\n    },\n  },\n\n  stem: {\n    heightAdjustmentForFlag: -3,\n    // These are stem (Y) offsets to the note heads. To shift the\n    // noteheads (x-position) themselves, see glyphs.notehead.custom.\n    noteHead: {\n      noteheadTriangleUpHalf: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadTriangleUpBlack: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadTriangleUpWhole: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXHalf: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXBlack: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXWhole: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadHalf: {\n        offsetYBaseStemUp: -2.55,\n        offsetYBaseStemDown: 2.65,\n      },\n      noteheadBlack: {\n        offsetYBaseStemUp: -2,\n        offsetYBaseStemDown: 2,\n      },\n      noteheadSquareWhite: {\n        offsetYBaseStemDown: -5,\n        offsetYBaseStemUp: 5,\n      },\n    },\n  },\n\n  // Values under here are used by the Glyph class to reposition and rescale\n  // glyphs based on their category. This should be the first stop for\n  // custom font glyph repositioning.\n  //\n  // The glyph loader first looks up a specific set of settings based on the\n  // glyph code, and if not found, uses the defaults from the category. See\n  // glyphs.textNote for an example of this.\n  //\n  // Details in Glyph.lookupFontMetrics.\n  glyphs: {\n    coda: {\n      point: 20,\n      shiftX: -7,\n      shiftY: 8,\n    },\n    segno: {\n      shiftX: -7,\n    },\n    flag: {\n      shiftX: -0.75,\n      tabStem: {\n        shiftX: -1.75,\n      },\n      staveTempo: {\n        shiftX: -1,\n      },\n    },\n    clef: {\n      gClef: {\n        default: { scale: 1.1, shiftY: 1 },\n        small: { shiftY: 1.5 },\n      },\n      fClef: {\n        default: { shiftY: -0.5 },\n      },\n    },\n    ornament: {\n      ornamentTurn: {\n        scale: 1.2,\n      },\n      ornamentTurnSlash: {\n        scale: 1.2,\n      },\n    },\n    stroke: {\n      arrowheadBlackDown: {\n        straight: {\n          shiftX: -4.5,\n        },\n        wiggly: {\n          shiftX: -1,\n          shiftY: 1,\n        },\n      },\n      arrowheadBlackUp: {\n        straight: {\n          shiftX: -0.85,\n        },\n        wiggly: {\n          shiftX: -1,\n          shiftY: 1,\n        },\n      },\n    },\n    textNote: {\n      point: 34,\n      breathMarkTick: {\n        point: 36,\n        shiftY: 9,\n      },\n      breathMarkComma: {\n        point: 36,\n      },\n      segno: {\n        point: 30,\n        shiftX: -7,\n        shiftY: 8,\n      },\n      coda: {\n        point: 20,\n        shiftX: -7,\n        shiftY: 8,\n      },\n      ornamentTrill: {\n        shiftX: -8,\n        shiftY: 8,\n      },\n      ornamentTurn: {\n        point: 42,\n      },\n      ornamentTurnSlash: {\n        point: 42,\n      },\n      ornamentMordent: {\n        shiftX: -8,\n      },\n      ornamentShortTrill: {\n        shiftX: -8,\n      },\n    },\n    noteHead: {\n      standard: {\n        restQuarterStemUp: {\n          point: 35,\n        },\n        restQuarterStemDown: {\n          point: 35,\n        },\n      },\n      custom: {\n        noteheadCircleXStemUp: {\n          shiftX: 1.5,\n        },\n        noteheadCircleXStemDown: {\n          shiftX: 0.25,\n        },\n        noteheadDiamondHalfStemUp: {\n          shiftX: 1.5,\n        },\n        noteheadDiamondBlackStemUp: {\n          shiftX: 1.5,\n        },\n        noteheadDiamondWholeStemUp: {\n          shiftX: 1,\n        },\n        noteheadXHalfStemUp: {\n          shiftX: -2,\n        },\n        noteheadXHalfStemDown: {\n          shiftX: 1,\n        },\n        noteheadXWholeStemUp: {\n          shiftX: -4,\n        },\n        noteheadXWholeStemDown: {\n          shiftX: 1,\n        },\n        noteheadSquareWhiteStemDown: {\n          shiftX: 0.25,\n        },\n        noteheadSquareWhiteStemUp: {\n          shiftX: -0.75,\n        },\n        noteheadSquareBlackStemUp: {\n          shiftX: -0.75,\n        },\n        noteheadTriangleUpWholeStemUp: {\n          shiftX: -0.75,\n        },\n      },\n    },\n    chordSymbol: {\n      global: {\n        superscriptOffset: -400,\n        subscriptOffset: 300,\n        kerningOffset: -250,\n        lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\n        upperKerningText: ['A', 'L'],\n        spacing: 100,\n        superSubRatio: 0.66,\n      },\n      csymDiminished: {\n        scale: 0.8,\n        leftSideBearing: -32,\n        advanceWidth: 506,\n        yOffset: 0,\n      },\n      csymHalfDiminished: {\n        scale: 0.8,\n        leftSideBearing: -32,\n        advanceWidth: 506,\n        yOffset: 0,\n      },\n      csymAugmented: {\n        scale: 1,\n        leftSideBearing: 0,\n        advanceWidth: 530,\n        yOffset: 0,\n      },\n      csymParensLeftTall: {\n        scale: 0.8,\n        leftSideBearing: -20,\n        advanceWidth: 184,\n        yOffset: 250,\n      },\n      csymParensRightTall: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 189,\n        yOffset: 250,\n      },\n      csymBracketLeftTall: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 328,\n        yOffset: 0,\n      },\n      csymBracketRightTall: {\n        scale: 0.8,\n        leftSideBearing: 1,\n        advanceWidth: 600,\n        yOffset: 0,\n      },\n      csymParensLeftVeryTall: {\n        scale: 0.9,\n        leftSideBearing: 50,\n        advanceWidth: 121,\n        yOffset: 350,\n      },\n      csymParensRightVeryTall: {\n        scale: 0.9,\n        leftSideBearing: 0,\n        advanceWidth: 111,\n        yOffset: 350,\n      },\n      csymDiagonalArrangementSlash: {\n        scale: 0.6,\n        leftSideBearing: -1,\n        advanceWidth: 990,\n        yOffset: 0,\n      },\n      csymMinor: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 482,\n        yOffset: 0,\n      },\n      csymMajorSeventh: {\n        scale: 0.9,\n        leftSideBearing: 200,\n        yOffset: 0,\n        advanceWidth: 600,\n      },\n      accidentalSharp: {\n        scale: 0.75,\n        leftSideBearing: 20,\n        advanceWidth: 250,\n        yOffset: -302,\n      },\n      accidentalFlat: {\n        scale: 0.9,\n        leftSideBearing: -20,\n        advanceWidth: 226,\n        yOffset: -184,\n      },\n    },\n    jazzOrnaments: {\n      brassScoop: {\n        scale: 1.0,\n        xOffset: -12,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 10,\n      },\n      brassDoitMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 15,\n      },\n      brassFallLipShort: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassLiftMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 5,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassFallRoughMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 28,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassBend: {\n        scale: 1.0,\n        xOffset: 2,\n        yOffset: -8,\n        stemUpYOffset: 25,\n        reportedWidth: 5,\n      },\n      brassMuteClosed: {\n        scale: 1.0,\n        xOffset: 3,\n        yOffset: -8,\n        stemUpYOffset: 25,\n        reportedWidth: 5,\n      },\n      brassMuteOpen: {\n        scale: 1.0,\n        xOffset: 3,\n        yOffset: -7,\n        stemUpYOffset: 25,\n        reportedWidth: 5,\n      },\n      brassFlip: {\n        scale: 1.0,\n        xOffset: 10,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassJazzTurn: {\n        scale: 1.0,\n        xOffset: 6,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassSmear: {\n        scale: 1.0,\n        xOffset: 10,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n    },\n  },\n};\n","export const CustomFont = {\n  'resolution': 1000,\n  'familyName': 'VexflowCustom',\n  'glyphs': {\n    'noteheadSquareWhite': {\n      'x_min': 0,\n      'x_max': 430.75,\n      'ha': 386,\n      'o': 'm 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 l 50 150 l 380 150 l 380 -150 l 50 -150 l 50 150 '\n    },\n    'noteheadSquareBlack': {\n      'x_min': 0,\n      'x_max': 430.75,\n      'ha': 386,\n      'o': 'm 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 '\n    },\n    'accidentalBuyukMucennebFlat': {\n      'x_min': -171.5,\n      'x_max': 251.8125,\n      'ha': 257,\n      'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 '\n    },\n    'accidentalBakiyeFlat': {\n      'x_min': -176.9375,\n      'x_max': 251.8125,\n      'ha': 257,\n      'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 '\n    },\n    'accidentalKucukMucennebSharp': {\n      'x_min': -1.359375,\n      'x_max': 255.890625,\n      'ha': 261,\n      'o': 'm 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 '\n    },\n    'accidentalKoron': {\n      'x_min': -20,\n      'x_max': 320,\n      'ha': 257,\n      'o': 'm -8 200 b -8 210 8 200 16 200 l 20 148 -199 l 23 -615 b 0 -629 9 -629 6 -629 l -21 -612 l -21 -201 l -21 216 l -20 200 m 16 200 l 310 0 l 240 0 l 16 140 l 16 -120 l 240 0 l 310 0 l 16 -200 '\n    },\n    'accidentalSori': {\n      'x_min': -10.890625,\n      'x_max': 299.4375,\n      'ha': 294,\n      'o': 'm 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 m 205 110 l 205 300 b 205 330 245 330 245 300 l 245 300 l 245 -300 b 245 -330 205 -330 205 -300 l 205 -300 l 205 110 l 345 90 m 345 90 l 345 330 b 345 360 385 360 385 330 l 385 330 l 385 -270 b 385 -300 345 -300 345 -270 l 345 -270 l 345 90 '\n    },\n    'vexAccidentalMicrotonal2': {\n      'x_min': -1.359375,\n      'x_max': 386.5625,\n      'ha': 394,\n      'o': 'm 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 '\n    },\n    'vexAccidentalMicrotonal3': {\n      'x_min': 0,\n      'x_max': 430.75,\n      'ha': 360,\n      'o': 'm -146 537 b -138 538 -143 538 -141 538 b -118 525 -129 538 -121 533 b -117 390 -117 522 -117 521 b -115 259 -117 268 -117 259 b -115 259 -115 259 -115 259 b -59 272 -104 263 -62 272 b -39 259 -50 272 -42 267 b -37 209 -38 257 -37 233 b -39 159 -37 185 -38 162 b -85 138 -43 149 -44 149 l -117 131 l -117 21 b -115 -88 -117 -80 -117 -88 b -115 -88 -115 -88 -115 -88 b -59 -75 -104 -84 -62 -75 b -44 -81 -52 -75 -48 -77 b -38 -124 -38 -87 -38 -85 b -38 -138 -38 -124 -38 -138 b -38 -152 -38 -138 -38 -152 b -44 -195 -38 -191 -38 -190 b -85 -209 -48 -200 -48 -200 l -117 -217 l -117 -349 b -118 -486 -117 -481 -117 -482 b -138 -499 -121 -494 -129 -499 b -153 -493 -143 -499 -149 -497 b -159 -415 -158 -487 -159 -496 b -159 -355 -159 -398 -159 -379 b -159 -227 -159 -284 -159 -227 b -205 -238 -159 -227 -180 -232 b -250 -249 -230 -244 -250 -249 b -251 -386 -251 -249 -251 -311 b -252 -525 -251 -521 -251 -522 b -272 -538 -255 -534 -264 -538 b -287 -532 -277 -538 -283 -536 b -293 -452 -292 -527 -293 -536 b -293 -391 -293 -436 -293 -415 b -294 -260 -293 -269 -293 -260 b -294 -260 -294 -260 -294 -260 b -348 -272 -306 -264 -345 -272 b -368 -259 -357 -272 -365 -267 b -369 -209 -369 -257 -369 -233 b -368 -159 -369 -185 -369 -162 b -323 -139 -364 -149 -362 -148 l -293 -131 l -293 -22 b -294 87 -293 80 -293 87 b -294 87 -294 87 -294 87 b -348 75 -306 84 -345 75 b -368 88 -357 75 -365 80 b -369 138 -369 91 -369 114 b -368 188 -369 162 -369 186 b -323 209 -364 198 -362 199 l -293 216 l -293 349 b -292 486 -293 481 -293 482 b -272 499 -288 494 -280 499 b -257 493 -266 499 -261 497 b -251 414 -251 487 -251 496 b -251 354 -251 398 -251 378 b -251 226 -251 284 -251 226 b -205 238 -250 226 -230 231 b -159 249 -180 244 -159 249 b -159 385 -159 249 -159 310 b -157 525 -159 521 -159 522 b -146 537 -156 530 -151 535 z m -159 11 b -159 120 -159 98 -159 120 l -159 120 b -175 116 -160 120 -167 119 b -221 105 -184 114 -204 109 l -251 98 l -251 -12 b -251 -121 -251 -72 -251 -121 b -205 -110 -250 -121 -230 -116 b -159 -99 -180 -104 -159 -99 b -159 11 -159 -99 -159 -49 z m 89 517 b 97 519 92 518 94 519 b 117 505 106 519 114 513 b 119 376 119 502 119 501 l 119 249 l 145 258 b 176 267 169 266 172 267 b 177 267 176 267 177 267 b 196 255 186 267 192 263 l 197 252 l 197 205 b 197 181 197 195 197 187 b 193 149 197 153 197 153 b 152 131 190 144 187 143 l 119 120 l 119 10 b 119 -100 119 -62 119 -100 b 145 -91 120 -100 131 -96 b 173 -82 159 -86 171 -82 b 176 -81 174 -81 175 -81 b 196 -94 185 -81 193 -87 b 198 -151 197 -97 198 -125 b 197 -194 198 -172 197 -192 b 153 -218 193 -203 192 -204 l 119 -230 l 119 -367 l 118 -504 l 117 -507 b 97 -519 113 -514 105 -519 b 82 -512 92 -519 87 -517 b 76 -434 77 -507 76 -516 b 76 -374 76 -418 76 -398 b 76 -245 76 -303 76 -245 b 52 -254 76 -245 65 -249 b 19 -263 34 -260 25 -263 b 6 -257 13 -263 10 -261 b 0 -214 0 -251 0 -253 b 0 -200 0 -210 0 -205 b 0 -188 0 -196 0 -192 b 6 -143 0 -147 0 -149 b 46 -126 10 -139 10 -139 l 76 -115 l 76 -5 b 76 106 76 56 76 106 b 51 98 76 106 64 102 b 18 89 34 92 25 89 b 6 95 13 89 10 91 b 0 139 0 101 0 99 b 0 153 0 143 0 148 b 0 179 0 163 0 172 b 44 225 0 215 3 211 l 76 236 l 76 369 b 78 505 76 501 76 502 b 89 517 80 510 85 515 z '\n    },\n    'vexAccidentalMicrotonal4': {\n      'x_min': 0,\n      'x_max': 430.75,\n      'ha': 360,\n      'o': 'm 283 633 b 291 634 286 634 289 634 b 311 621 300 634 308 629 b 313 505 313 618 313 617 b 313 393 313 443 313 393 b 378 425 313 393 343 407 l 443 458 l 448 458 b 449 458 449 458 449 458 b 471 437 462 458 471 448 b 469 429 471 434 470 432 b 387 382 466 421 469 423 l 313 344 l 313 247 l 313 150 l 315 152 b 433 201 353 184 394 201 b 479 193 448 201 464 198 b 549 86 524 177 549 135 b 526 1 549 59 541 29 b 395 -143 504 -39 475 -71 b 316 -214 351 -182 341 -191 b 292 -229 302 -228 300 -229 b 272 -216 283 -229 275 -224 b 271 55 271 -212 271 -212 b 270 323 271 203 270 323 b 205 291 270 323 241 308 l 140 258 l 135 258 b 134 258 135 258 134 258 b 112 279 121 258 112 267 b 114 287 112 281 113 284 b 196 334 117 295 114 293 l 271 371 l 271 495 b 272 621 271 617 271 618 b 283 633 274 626 279 631 z m 404 133 b 391 134 400 134 395 134 b 384 134 388 134 386 134 b 318 88 358 130 335 114 l 313 81 l 313 -37 l 313 -156 l 316 -152 b 439 83 391 -71 439 22 l 439 84 b 404 133 439 115 430 128 z m -8 633 l -8 633 b 0 634 -6 634 -3 634 b 20 621 8 634 17 629 b 21 384 21 618 21 617 l 21 150 l 24 152 b 141 201 62 184 102 201 b 187 193 157 201 172 198 b 257 86 232 177 257 135 b 234 1 257 59 250 29 b 103 -143 212 -39 183 -71 b 24 -214 60 -182 49 -191 b 0 -229 10 -228 8 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 203 l -21 618 l -20 621 b -8 633 -18 626 -13 631 z m 113 133 l 113 133 b 99 134 109 134 103 134 b 93 134 97 134 94 134 b 26 88 66 130 43 114 l 21 81 l 21 -37 l 21 -156 l 25 -152 b 148 83 99 -71 148 22 l 148 84 b 113 133 148 115 138 128 z '\n    },\n    'vexNoteHeadRectBlack': {\n      'x_min': 0,\n      'x_max': 430.75,\n      'ha': 360,\n      'o': 'm 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 '\n    },\n    'vexNoteHeadRectWhite': {\n      'x_min': 0,\n      'x_max': 430.75,\n      'ha': 360,\n      'o': 'm 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 l 50 100 l 380 100 l 380 -100 l 50 -100 l 50 100'\n    }\n  }\n};\n","export const CustomMetrics = {\n  name: 'Vexflow-Custom',\n  smufl: false,\n  glyphs: {}\n};\n","export const GonvilleFont = {\n  'glyphs': {\n    'bracketTop': {\n      'x_min': 0,\n      'x_max': 559.421875,\n      'ha': 571,\n      'o': 'm 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 '\n    },\n    'bracketBottom': {\n      'x_min': 0,\n      'x_max': 559.421875,\n      'ha': 571,\n      'o': 'm 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 '\n    },\n    'barlineTick': {\n      'x_min': -80.3125,\n      'x_max': 78.9375,\n      'ha': 81,\n      'o': 'm 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 '\n    },\n    'breathMarkTick': {\n      'x_min': -80.3125,\n      'x_max': 78.9375,\n      'ha': 81,\n      'o': 'm 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 '\n    },\n    'segno': {\n      'x_min': -330.75,\n      'x_max': 329.390625,\n      'ha': 336,\n      'o': 'm -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 '\n    },\n    'coda': {\n      'x_min': -311.6875,\n      'x_max': 310.328125,\n      'ha': 317,\n      'o': 'm -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 '\n    },\n    'gClef': {\n      'x_min': -1.359375,\n      'x_max': 847.96875,\n      'ha': 865,\n      'o': 'm 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 '\n    },\n    'cClef': {\n      'x_min': 0,\n      'x_max': 873.828125,\n      'ha': 892,\n      'o': 'm 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 '\n    },\n    'fClef': {\n      'x_min': -1.359375,\n      'x_max': 899.703125,\n      'ha': 918,\n      'o': 'm 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 '\n    },\n    'unpitchedPercussionClef1': {\n      'x_min': 0,\n      'x_max': 464.140625,\n      'ha': 474,\n      'o': 'm 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 '\n    },\n    '6stringTabClef': {\n      'x_min': -1.359375,\n      'x_max': 680.5625,\n      'ha': 694,\n      'o': 'm 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 '\n    },\n    'timeSig0': {\n      'x_min': 0,\n      'x_max': 514.5,\n      'ha': 525,\n      'o': 'm 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 '\n    },\n    'timeSig1': {\n      'x_min': -1.359375,\n      'x_max': 344.359375,\n      'ha': 351,\n      'o': 'm 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 '\n    },\n    'timeSig2': {\n      'x_min': -1.359375,\n      'x_max': 458.6875,\n      'ha': 468,\n      'o': 'm 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 '\n    },\n    'timeSig3': {\n      'x_min': -1.359375,\n      'x_max': 409.6875,\n      'ha': 418,\n      'o': 'm 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 '\n    },\n    'timeSig4': {\n      'x_min': 0,\n      'x_max': 468.21875,\n      'ha': 478,\n      'o': 'm 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 '\n    },\n    'timeSig5': {\n      'x_min': 0,\n      'x_max': 409.6875,\n      'ha': 418,\n      'o': 'm 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 '\n    },\n    'timeSig6': {\n      'x_min': 0,\n      'x_max': 475.03125,\n      'ha': 485,\n      'o': 'm 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 '\n    },\n    'timeSig7': {\n      'x_min': 0,\n      'x_max': 442.359375,\n      'ha': 451,\n      'o': 'm 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 '\n    },\n    'timeSig8': {\n      'x_min': 0,\n      'x_max': 488.640625,\n      'ha': 499,\n      'o': 'm 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 '\n    },\n    'timeSig9': {\n      'x_min': 0,\n      'x_max': 475.03125,\n      'ha': 485,\n      'o': 'm 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 '\n    },\n    'timeSigCommon': {\n      'x_min': -1.359375,\n      'x_max': 556.6875,\n      'ha': 568,\n      'o': 'm 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 '\n    },\n    'timeSigCutCommon': {\n      'x_min': 0,\n      'x_max': 556.6875,\n      'ha': 568,\n      'o': 'm 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 '\n    },\n    'noteheadDoubleWhole': {\n      'x_min': 0,\n      'x_max': 902.421875,\n      'ha': 921,\n      'o': 'm 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 '\n    },\n    'noteheadWhole': {\n      'x_min': 0,\n      'x_max': 619.3125,\n      'ha': 632,\n      'o': 'm 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 '\n    },\n    'noteheadHalf': {\n      'x_min': 0,\n      'x_max': 428.75,\n      'ha': 438,\n      'o': 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 '\n    },\n    'noteheadBlack': {\n      'x_min': 0,\n      'x_max': 428.75,\n      'ha': 438,\n      'o': 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 '\n    },\n    'noteheadXWhole': {\n      'x_min': 0,\n      'x_max': 598.890625,\n      'ha': 611,\n      'o': 'm 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 '\n    },\n    'noteheadXHalf': {\n      'x_min': 0,\n      'x_max': 406.96875,\n      'ha': 415,\n      'o': 'm 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 '\n    },\n    'noteheadXBlack': {\n      'x_min': 0,\n      'x_max': 406.96875,\n      'ha': 415,\n      'o': 'm 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 '\n    },\n    'noteheadCircleX': {\n      'x_min': 0,\n      'x_max': 484.5625,\n      'ha': 494,\n      'o': 'm 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 '\n    },\n    'noteheadTriangleUpWhole': {\n      'x_min': 0,\n      'x_max': 630.203125,\n      'ha': 643,\n      'o': 'm 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 '\n    },\n    'noteheadTriangleUpHalf': {\n      'x_min': 0,\n      'x_max': 438.28125,\n      'ha': 447,\n      'o': 'm 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 '\n    },\n    'noteheadTriangleUpBlack': {\n      'x_min': -1.359375,\n      'x_max': 436.921875,\n      'ha': 446,\n      'o': 'm 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 '\n    },\n    'noteheadDiamondWhole': {\n      'x_min': 0,\n      'x_max': 627.46875,\n      'ha': 640,\n      'o': 'm 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 '\n    },\n    'noteheadDiamondHalf': {\n      'x_min': 0,\n      'x_max': 438.28125,\n      'ha': 447,\n      'o': 'm 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 '\n    },\n    'noteheadDiamondBlack': {\n      'x_min': 0,\n      'x_max': 432.828125,\n      'ha': 442,\n      'o': 'm 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 '\n    },\n    'augmentationDot': {\n      'x_min': 0,\n      'x_max': 133.390625,\n      'ha': 136,\n      'o': 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 '\n    },\n    'tremolo1': {\n      'x_min': -206.890625,\n      'x_max': 428.75,\n      'ha': 438,\n      'o': 'm 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 '\n    },\n    'flag8thUp': {\n      'x_min': -24.5,\n      'x_max': 317.140625,\n      'ha': 324,\n      'o': 'm -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 '\n    },\n    'flag8thDown': {\n      'x_min': -21.78125,\n      'x_max': 367.5,\n      'ha': 375,\n      'o': 'm 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 '\n    },\n    'flag16thUp': {\n      'x_min': -24.5,\n      'x_max': 317.140625,\n      'ha': 324,\n      'o': 'm -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 '\n    },\n    'flag16thDown': {\n      'x_min': -21.78125,\n      'x_max': 362.0625,\n      'ha': 369,\n      'o': 'm 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 '\n    },\n    'flag32ndUp': {\n      'x_min': -24.5,\n      'x_max': 315.78125,\n      'ha': 322,\n      'o': 'm -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 '\n    },\n    'flag32ndDown': {\n      'x_min': -21.78125,\n      'x_max': 366.140625,\n      'ha': 374,\n      'o': 'm 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 '\n    },\n    'flag64thUp': {\n      'x_min': -24.5,\n      'x_max': 314.421875,\n      'ha': 321,\n      'o': 'm -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 '\n    },\n    'flag64thDown': {\n      'x_min': -21.78125,\n      'x_max': 367.5,\n      'ha': 375,\n      'o': 'm 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 '\n    },\n    'flag128thUp': {\n      'x_min': -24.5,\n      'x_max': 313.0625,\n      'ha': 319,\n      'o': 'm -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 '\n    },\n    'flag128thDown': {\n      'x_min': -21.78125,\n      'x_max': 367.5,\n      'ha': 375,\n      'o': 'm 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 '\n    },\n    'accidentalFlat': {\n      'x_min': -21.78125,\n      'x_max': 251.8125,\n      'ha': 257,\n      'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 '\n    },\n    'accidentalNatural': {\n      'x_min': 0,\n      'x_max': 239.5625,\n      'ha': 244,\n      'o': 'm 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 '\n    },\n    'accidentalSharp': {\n      'x_min': 0,\n      'x_max': 323.9375,\n      'ha': 331,\n      'o': 'm 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 '\n    },\n    'accidentalDoubleSharp': {\n      'x_min': 0,\n      'x_max': 367.5,\n      'ha': 375,\n      'o': 'm 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 '\n    },\n    'accidentalDoubleFlat': {\n      'x_min': -21.78125,\n      'x_max': 483.1875,\n      'ha': 493,\n      'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 '\n    },\n    'accidentalParensLeft': {\n      'x_min': -166.0625,\n      'x_max': -25.859375,\n      'ha': 0,\n      'o': 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 '\n    },\n    'accidentalParensRight': {\n      'x_min': 25.859375,\n      'x_max': 164.6875,\n      'ha': 168,\n      'o': 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 '\n    },\n    'accidentalQuarterToneFlatStein': {\n      'x_min': 0,\n      'x_max': 272.21875,\n      'ha': 278,\n      'o': 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 '\n    },\n    'accidentalThreeQuarterTonesFlatZimmermann': {\n      'x_min': 0,\n      'x_max': 607.0625,\n      'ha': 619,\n      'o': 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 '\n    },\n    'accidentalQuarterToneSharpStein': {\n      'x_min': 0,\n      'x_max': 193.28125,\n      'ha': 197,\n      'o': 'm 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 '\n    },\n    'accidentalThreeQuarterTonesSharpStein': {\n      'x_min': -1.359375,\n      'x_max': 455.96875,\n      'ha': 465,\n      'o': 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 '\n    },\n    'accidentalBuyukMucennebFlat': {\n      'x_min': -171.5,\n      'x_max': 251.8125,\n      'ha': 257,\n      'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 '\n    },\n    'accidentalBakiyeFlat': {\n      'x_min': -176.9375,\n      'x_max': 251.8125,\n      'ha': 257,\n      'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 '\n    },\n    'accidentalKomaSharp': {\n      'x_min': -1.359375,\n      'x_max': 455.96875,\n      'ha': 465,\n      'o': 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 '\n    },\n    'accidentalKucukMucennebSharp': {\n      'x_min': -1.359375,\n      'x_max': 255.890625,\n      'ha': 261,\n      'o': 'm 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 '\n    },\n    'articAccentAbove': {\n      'x_min': -348.4375,\n      'x_max': 24.5,\n      'ha': 25,\n      'o': 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 '\n    },\n    'articAccentBelow': {\n      'x_min': -348.4375,\n      'x_max': 24.5,\n      'ha': 25,\n      'o': 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 '\n    },\n    'articTenutoAbove': {\n      'x_min': 0,\n      'x_max': 318.5,\n      'ha': 325,\n      'o': 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 '\n    },\n    'articTenutoBelow': {\n      'x_min': 0,\n      'x_max': 318.5,\n      'ha': 325,\n      'o': 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 '\n    },\n    'articStaccatoAbove': {\n      'x_min': 0,\n      'x_max': 133.390625,\n      'ha': 136,\n      'o': 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 '\n    },\n    'articStaccatoBelow': {\n      'x_min': 0,\n      'x_max': 133.390625,\n      'ha': 136,\n      'o': 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 '\n    },\n    'articStaccatissimoAbove': {\n      'x_min': -73.5,\n      'x_max': 72.140625,\n      'ha': 74,\n      'o': 'm -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 '\n    },\n    'articStaccatissimoBelow': {\n      'x_min': -73.5,\n      'x_max': 72.140625,\n      'ha': 74,\n      'o': 'm -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 '\n    },\n    'articMarcatoAbove': {\n      'x_min': -149.71875,\n      'x_max': 148.359375,\n      'ha': 151,\n      'o': 'm -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 '\n    },\n    'articMarcatoBelow': {\n      'x_min': -149.71875,\n      'x_max': 148.359375,\n      'ha': 151,\n      'o': 'm -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 '\n    },\n    'fermataAbove': {\n      'x_min': -442.359375,\n      'x_max': 441,\n      'ha': 450,\n      'o': 'm -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 '\n    },\n    'fermataBelow': {\n      'x_min': -441,\n      'x_max': 439.640625,\n      'ha': 449,\n      'o': 'm -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 '\n    },\n    'breathMarkComma': {\n      'x_min': -1.359375,\n      'x_max': 193.28125,\n      'ha': 197,\n      'o': 'm 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 '\n    },\n    'breathMarkUpbow': {\n      'x_min': -170.140625,\n      'x_max': 168.78125,\n      'ha': 172,\n      'o': 'm -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 '\n    },\n    'caesura': {\n      'x_min': 0,\n      'x_max': 622.03125,\n      'ha': 635,\n      'o': 'm 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 '\n    },\n    'caesuraCurved': {\n      'x_min': 0,\n      'x_max': 503.609375,\n      'ha': 514,\n      'o': 'm 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 '\n    },\n    'restMaxima': {\n      'x_min': 0,\n      'x_max': 464.140625,\n      'ha': 474,\n      'o': 'm 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 '\n    },\n    'restDoubleWhole': {\n      'x_min': 0,\n      'x_max': 386.5625,\n      'ha': 394,\n      'o': 'm 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 '\n    },\n    'restWhole': {\n      'x_min': 0,\n      'x_max': 447.8125,\n      'ha': 457,\n      'o': 'm 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 '\n    },\n    'restHalf': {\n      'x_min': 0,\n      'x_max': 447.8125,\n      'ha': 457,\n      'o': 'm 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 '\n    },\n    'restQuarter': {\n      'x_min': 0,\n      'x_max': 300.8125,\n      'ha': 307,\n      'o': 'm 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 '\n    },\n    'rest8th': {\n      'x_min': 0,\n      'x_max': 349.8125,\n      'ha': 357,\n      'o': 'm 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 '\n    },\n    'rest16th': {\n      'x_min': 0,\n      'x_max': 450.53125,\n      'ha': 460,\n      'o': 'm 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 '\n    },\n    'rest32nd': {\n      'x_min': 0,\n      'x_max': 551.25,\n      'ha': 563,\n      'o': 'm 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 '\n    },\n    'rest64th': {\n      'x_min': -1.359375,\n      'x_max': 651.96875,\n      'ha': 665,\n      'o': 'm 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 '\n    },\n    'rest128th': {\n      'x_min': -1.359375,\n      'x_max': 752.703125,\n      'ha': 768,\n      'o': 'm 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 '\n    },\n    'dynamicPiano': {\n      'x_min': -53.078125,\n      'x_max': 513.140625,\n      'ha': 485,\n      'o': 'm 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 '\n    },\n    'dynamicMezzo': {\n      'x_min': 46.28125,\n      'x_max': 669.671875,\n      'ha': 563,\n      'o': 'm 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 '\n    },\n    'dynamicForte': {\n      'x_min': -118.421875,\n      'x_max': 597.53125,\n      'ha': 381,\n      'o': 'm 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 '\n    },\n    'dynamicRinforzando': {\n      'x_min': 78.9375,\n      'x_max': 485.921875,\n      'ha': 417,\n      'o': 'm 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 '\n    },\n    'dynamicSforzando': {\n      'x_min': 70.78125,\n      'x_max': 378.390625,\n      'ha': 315,\n      'o': 'm 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 '\n    },\n    'dynamicZ': {\n      'x_min': 29.9375,\n      'x_max': 420.578125,\n      'ha': 371,\n      'o': 'm 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 '\n    },\n    'ornamentTrill': {\n      'x_min': -340.28125,\n      'x_max': 338.921875,\n      'ha': 346,\n      'o': 'm -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 '\n    },\n    'ornamentTurn': {\n      'x_min': -423.3125,\n      'x_max': 421.9375,\n      'ha': 431,\n      'o': 'm -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 '\n    },\n    'ornamentTurnSlash': {\n      'x_min': -423.3125,\n      'x_max': 421.9375,\n      'ha': 431,\n      'o': 'm -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 '\n    },\n    'ornamentMordent': {\n      'x_min': -402.890625,\n      'x_max': 401.53125,\n      'ha': 410,\n      'o': 'm -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 '\n    },\n    'ornamentShortTrill': {\n      'x_min': -402.890625,\n      'x_max': 401.53125,\n      'ha': 410,\n      'o': 'm -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 '\n    },\n    'ornamentTremblement': {\n      'x_min': -571.671875,\n      'x_max': 570.3125,\n      'ha': 582,\n      'o': 'm -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 '\n    },\n    'ornamentPrecompAppoggTrill': {\n      'x_min': -571.671875,\n      'x_max': 570.3125,\n      'ha': 582,\n      'o': 'm -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 '\n    },\n    'ornamentPrecompSlideTrillDAnglebert': {\n      'x_min': -590.71875,\n      'x_max': 589.359375,\n      'ha': 601,\n      'o': 'm -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 '\n    },\n    'ornamentPrecompSlideTrillBach': {\n      'x_min': -590.71875,\n      'x_max': 589.359375,\n      'ha': 601,\n      'o': 'm 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 '\n    },\n    'ornamentPrecompTrillSuffixDandrieu': {\n      'x_min': -590.71875,\n      'x_max': 589.359375,\n      'ha': 601,\n      'o': 'm 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 '\n    },\n    'ornamentPrecompDoubleCadenceUpperPrefix': {\n      'x_min': -597.53125,\n      'x_max': 596.171875,\n      'ha': 608,\n      'o': 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 '\n    },\n    'ornamentPrecompDoubleCadenceUpperPrefixTurn': {\n      'x_min': -597.53125,\n      'x_max': 596.171875,\n      'ha': 608,\n      'o': 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 '\n    },\n    'ornamentPrecompTrillLowerSuffix': {\n      'x_min': -597.53125,\n      'x_max': 596.171875,\n      'ha': 608,\n      'o': 'm -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 '\n    },\n    'stringsDownBow': {\n      'x_min': -149.71875,\n      'x_max': 148.359375,\n      'ha': 151,\n      'o': 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 '\n    },\n    'stringsUpBow': {\n      'x_min': -149.71875,\n      'x_max': 148.359375,\n      'ha': 151,\n      'o': 'm -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 '\n    },\n    'stringsHarmonic': {\n      'x_min': -122.5,\n      'x_max': 121.140625,\n      'ha': 124,\n      'o': 'm -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 '\n    },\n    'pluckedSnapPizzicatoAbove': {\n      'x_min': -149.71875,\n      'x_max': 148.359375,\n      'ha': 151,\n      'o': 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 '\n    },\n    'pluckedSnapPizzicatoBelow': {\n      'x_min': -149.71875,\n      'x_max': 148.359375,\n      'ha': 151,\n      'o': 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 '\n    },\n    'pluckedLeftHandPizzicato': {\n      'x_min': 0,\n      'x_max': 319.859375,\n      'ha': 326,\n      'o': 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 '\n    },\n    'keyboardPedalPed': {\n      'x_min': -1.359375,\n      'x_max': 1064.390625,\n      'ha': 1086,\n      'o': 'm 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 '\n    },\n    'keyboardPedalUp': {\n      'x_min': -1.359375,\n      'x_max': 592.078125,\n      'ha': 604,\n      'o': 'm 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 '\n    },\n    'pictChokeCymbal': {\n      'x_min': 0,\n      'x_max': 227.3125,\n      'ha': 232,\n      'o': 'm 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 '\n    },\n    'wiggleArpeggiatoUp': {\n      'x_min': 58.53125,\n      'x_max': 228.671875,\n      'ha': 294,\n      'o': 'm 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 '\n    },\n    'arrowheadBlackUp': {\n      'x_min': -10.890625,\n      'x_max': 299.4375,\n      'ha': 294,\n      'o': 'm 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 '\n    },\n    'arrowheadBlackDown': {\n      'x_min': -10.890625,\n      'x_max': 298.078125,\n      'ha': 294,\n      'o': 'm 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 '\n    },\n    'vexAccidentalMicrotonal1': {\n      'x_min': -171.5,\n      'x_max': 483.1875,\n      'ha': 493,\n      'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 '\n    },\n    'vexAccidentalMicrotonal2': {\n      'x_min': -1.359375,\n      'x_max': 386.5625,\n      'ha': 394,\n      'o': 'm 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 '\n    },\n    'vexWiggleArpeggioUp': {\n      'x_min': 58.53125,\n      'x_max': 228.671875,\n      'ha': 294,\n      'o': 'm 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 '\n    },\n    'vexNoteHeadMutedBreve': {\n      'x_min': 0,\n      'x_max': 370.21875,\n      'ha': 378,\n      'o': 'm 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 '\n    },\n    \"brassScoop\": {\n      \"x_min\": 1,\n      \"x_max\": 320,\n      \"y_min\": -373,\n      \"y_max\": 13,\n      \"ha\": 386,\n      \"leftSideBearing\": 1,\n      \"advanceWidth\": 318,\n      \"o\": \"m 1 -482 l 1 -505 b 26 -537 1 -526 3 -537 l 35 -537 b 461 -12 194 -518 461 -289 b 438 19 461 13 451 19 b 410 -9 425 19 413 9 b 35 -425 357 -366 92 -403 b 1 -482 13 -433 1 -438 z\"\n    },\n    \"brassDoitMedium\": {\n      \"x_min\": 0,\n      \"x_max\": 489,\n      \"y_min\": -40,\n      \"y_max\": 346,\n      \"ha\": 386,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 490,\n      \"o\": \"m 0 -3 l 0 -26 b 24 -58 0 -46 1 -58 l 33 -58 b 704 468 255 -58 683 186 b 681 498 704 494 693 498 b 654 471 668 498 658 488 b 33 55 550 118 91 76 b 0 -3 12 46 0 42 z\"\n    },\n    \"brassFallLipShort\": {\n      \"x_min\": 1,\n      \"x_max\": 293,\n      \"y_min\": -345,\n      \"y_max\": 42,\n      \"ha\": 387,\n      \"leftSideBearing\": 1,\n      \"advanceWidth\": 293,\n      \"o\": \"m 1 35 l 1 6 b 26 -50 3 -40 10 -43 b 32 -52 27 -50 30 -50 b 376 -469 85 -73 327 -111 b 400 -497 379 -487 387 -497 b 422 -467 412 -497 422 -491 b 32 60 422 -187 177 40 l 22 60 b 1 35 4 60 1 52 z\"\n    },\n    \"brassLiftMedium\": {\n      \"x_min\": 0,\n      \"x_max\": 811,\n      \"y_min\": 0,\n      \"y_max\": 852,\n      \"ha\": 852,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 812,\n      \"o\": \"m 33 0 b 49 17 40 0 49 10 b 71 63 52 35 56 49 b 212 115 102 95 154 59 b 239 186 230 134 239 160 b 236 210 239 194 238 202 b 256 249 239 225 243 236 b 397 301 288 281 340 245 b 425 372 416 320 425 346 b 422 396 425 380 423 387 b 442 435 425 410 429 422 b 583 487 474 467 526 431 b 611 557 602 505 611 531 b 608 582 611 566 609 573 b 628 621 611 596 615 608 b 769 672 660 652 711 618 b 796 743 788 691 796 717 b 793 768 796 752 795 759 b 814 806 796 782 801 793 b 955 858 845 838 897 804 b 982 929 973 877 982 903 b 979 953 982 937 981 945 b 999 992 982 968 986 979 b 1140 1045 1031 1024 1083 989 b 1168 1116 1161 1066 1168 1090 b 1138 1220 1168 1162 1145 1207 b 1135 1225 1135 1223 1135 1224 b 1129 1227 1133 1227 1130 1227 b 1117 1207 1122 1227 1117 1212 l 1117 1201 b 1109 1164 1117 1187 1117 1172 b 1100 1156 1107 1161 1104 1158 b 959 1104 1058 1128 995 1140 b 929 1032 936 1081 929 1056 b 932 1007 929 1024 930 1015 b 923 976 932 995 930 985 l 914 971 b 773 919 873 942 809 955 b 743 847 750 896 743 870 b 746 821 743 838 744 829 b 737 791 746 809 744 799 l 729 783 b 588 733 687 756 624 769 b 557 661 564 710 557 684 b 560 635 557 652 559 644 b 552 605 560 624 559 612 l 543 598 b 402 547 501 570 438 583 b 372 475 379 524 372 498 b 374 449 372 467 373 458 b 366 419 374 438 373 426 l 357 412 b 216 361 315 384 252 397 b 186 289 193 338 186 312 b 189 264 186 281 187 272 b 180 233 189 252 187 240 b 171 226 177 232 174 229 b 30 176 130 199 66 212 b 0 104 7 153 0 128 b 33 0 0 88 14 0 z\"\n    },\n    \"brassFallRoughMedium\": {\n      \"x_min\": 0,\n      \"x_max\": 811,\n      \"y_min\": 0,\n      \"y_max\": 852,\n      \"ha\": 852,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 812,\n      \"o\": \"m 0 1116 b 27 1045 0 1090 7 1066 b 168 992 85 989 137 1024 b 189 953 181 979 186 968 b 186 929 187 945 186 937 b 213 858 186 903 194 877 b 354 806 271 804 323 838 b 374 768 367 793 372 782 b 372 743 373 759 372 752 b 399 672 372 717 380 691 b 540 621 456 618 508 652 b 560 582 553 608 557 596 b 557 557 559 573 557 566 b 585 487 557 531 566 505 b 726 435 642 431 694 467 b 746 396 739 422 743 410 b 743 372 744 387 743 380 b 770 301 743 346 752 320 b 912 249 828 245 880 281 b 932 210 924 236 929 225 b 929 186 930 202 929 194 b 956 115 929 160 937 134 b 1097 63 1014 59 1066 95 b 1119 17 1112 49 1116 35 b 1135 0 1119 10 1128 0 b 1168 104 1153 0 1168 91 b 1138 176 1168 128 1161 153 b 996 226 1102 212 1038 199 b 988 233 994 229 991 232 b 979 264 981 240 979 252 b 982 289 981 272 982 281 b 952 361 982 312 975 338 b 811 412 916 397 852 384 l 802 419 b 793 449 795 426 793 438 b 796 475 795 458 796 467 b 766 547 796 498 789 524 b 625 598 730 583 667 570 l 616 605 b 608 635 609 612 608 624 b 611 661 609 644 611 652 b 580 733 611 684 603 710 b 439 783 544 769 481 756 l 431 791 b 422 821 423 799 422 809 b 425 847 423 829 425 838 b 395 919 425 870 418 896 b 253 971 359 955 295 942 l 245 976 b 236 1007 238 985 236 995 b 239 1032 238 1015 239 1024 b 209 1104 239 1056 232 1081 b 68 1156 173 1140 109 1128 b 59 1164 63 1158 60 1161 b 50 1201 50 1172 50 1187 l 50 1207 b 39 1227 50 1212 46 1227 b 33 1225 37 1227 35 1227 b 30 1220 33 1224 33 1223 b 0 1116 23 1207 0 1162 z\"\n    },\n    \"brassBend\": {\n      \"x_min\": 0,\n      \"x_max\": 392,\n      \"y_min\": 0,\n      \"y_max\": 282,\n      \"ha\": 282,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 393,\n      \"o\": \"m 13 72 b 282 0 108 23 196 0 b 552 72 369 0 456 23 b 564 92 560 75 564 84 l 564 383 b 541 406 564 395 554 406 b 518 383 528 406 518 395 l 518 107 b 282 46 435 65 357 46 b 46 107 207 46 130 65 l 46 383 b 23 406 46 395 36 406 b 0 383 10 406 0 395 l 0 92 b 13 72 0 84 4 75 z\"\n    },\n    \"brassMuteClosed\": {\n      \"x_min\": 0,\n      \"x_max\": 272,\n      \"y_min\": 0,\n      \"y_max\": 272,\n      \"ha\": 272,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 272,\n      \"o\": \"m 0 219 l 0 173 l 173 173 l 173 0 l 219 0 l 219 173 l 392 173 l 392 219 l 219 219 l 219 392 l 173 392 l 173 219 z\"\n    },\n    \"brassMuteOpen\": {\n      \"x_min\": 0,\n      \"x_max\": 304,\n      \"y_min\": 0,\n      \"y_max\": 304,\n      \"ha\": 304,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 305,\n      \"o\": \"m 0 219 b 219 0 0 98 98 0 b 438 219 340 0 438 98 b 219 438 438 340 340 438 b 0 219 98 438 0 340 z m 219 392 b 392 219 314 392 392 314 b 219 46 392 124 314 46 b 46 219 124 46 46 124 b 219 392 46 314 124 392 z\"\n    },\n    \"brassFlip\": {\n      \"x_min\": 0,\n      \"x_max\": 379,\n      \"y_min\": 0,\n      \"y_max\": 282,\n      \"ha\": 282,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 379,\n      \"o\": \"m 23 0 b 46 23 36 0 46 10 l 46 337 l 508 4 b 523 0 513 1 517 0 b 541 9 530 0 536 3 b 546 22 544 13 546 17 b 536 42 546 29 541 36 l 36 402 b 23 406 33 405 27 406 b 0 383 12 406 0 395 l 0 23 b 23 0 0 10 10 0 z\"\n    },\n    \"brassJazzTurn\": {\n      \"x_min\": 0,\n      \"x_max\": 620,\n      \"y_min\": 0,\n      \"y_max\": 245,\n      \"ha\": 245,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 620,\n      \"o\": \"m 0 121 b 16 107 0 114 4 108 b 84 143 26 107 76 137 b 118 160 92 150 108 160 b 141 143 125 160 131 154 b 265 10 147 135 253 24 b 294 0 271 3 282 0 b 321 7 305 0 315 3 b 498 160 321 7 478 158 b 521 143 505 160 513 154 b 647 10 528 135 635 24 b 675 0 652 3 664 0 b 703 7 687 0 697 3 b 874 186 713 16 855 164 b 893 220 881 196 893 212 b 873 245 890 235 883 243 b 796 194 847 245 815 213 l 792 190 b 765 176 780 179 772 176 b 740 190 755 176 747 183 b 629 325 727 202 644 312 b 593 347 616 338 605 347 b 562 334 583 346 575 344 b 528 298 549 323 539 310 l 406 176 b 389 168 406 176 399 168 b 374 176 384 168 379 170 b 245 325 360 192 245 325 b 200 353 232 343 219 351 b 168 340 190 353 181 350 l 17 156 b 0 121 10 147 0 132 z\"\n    },\n    \"brassSmear\": {\n      \"x_min\": 1,\n      \"x_max\": 306,\n      \"y_min\": 0,\n      \"y_max\": 170,\n      \"ha\": 170,\n      \"leftSideBearing\": 1,\n      \"advanceWidth\": 307,\n      \"o\": \"m 7 107 b 36 122 13 107 22 112 b 92 151 55 137 65 151 b 183 89 125 151 161 112 b 189 84 184 88 187 86 l 193 79 b 308 0 219 50 264 0 b 439 117 396 0 438 102 b 441 128 439 121 441 124 b 433 141 441 135 439 141 b 416 130 429 141 423 137 b 343 94 390 107 370 94 b 269 153 315 94 294 121 l 265 158 b 144 245 239 190 180 245 b 6 134 62 245 10 143 b 1 114 3 125 1 118 b 7 107 1 108 4 107 z\"\n    }\n  },\n  'cssFontWeight': 'normal',\n  'ascender': 1903,\n  'underlinePosition': -125,\n  'cssFontStyle': 'normal',\n  'boundingBox': {\n    'yMin': -2065.375,\n    'xMin': -695.53125,\n    'yMax': 1901.578125,\n    'xMax': 1159.671875\n  },\n  'resolution': 1000,\n  'original_font_information': {\n    'postscript_name': 'Gonville-18',\n    'version_string': 'Version 0.1.8904 ',\n    'vendor_url': '',\n    'full_font_name': 'Gonville-18',\n    'font_family_name': 'Gonville-18',\n    'copyright': 'No copyright is claimed on this font file.',\n    'description': '',\n    'trademark': '',\n    'designer': '',\n    'designer_url': '',\n    'unique_font_identifier': 'FontForge 2.0 : Gonville-18 : 17-3-2010',\n    'license_url': '',\n    'license_description': '',\n    'manufacturer_name': '',\n    'font_sub_family_name': '18'\n  },\n  'descender': -2066,\n  'familyName': 'Gonville-18',\n  'lineHeight': 4093,\n  'underlineThickness': 50\n};\n","export const GonvilleMetrics = {\n  name: 'Gonville',\n  smufl: false,\n  stave: {\n    padding: 12,\n    endPaddingMax: 12,\n    endPaddingMin: 6,\n    unalignedNotePadding: 10\n  },\n\n  clef: {\n    default: {\n      point: 40,\n      width: 26,\n    },\n    small: {\n      point: 32,\n      width: 20,\n    },\n\n    annotations: {\n      '8va': {\n        smuflCode: 'timeSig8',\n        default: {\n          point: 20,\n          treble: {\n            line: -1.2,\n            shiftX: 11,\n          },\n        },\n        small: {\n          point: 18,\n          treble: {\n            line: -0.4,\n            shiftX: 8,\n          },\n        },\n      },\n      '8vb': {\n        smuflCode: 'timeSig8',\n        default: {\n          point: 20,\n          treble: {\n            line: 6.3,\n            shiftX: 10,\n          },\n          bass: {\n            line: 4,\n            shiftX: 1,\n          },\n        },\n        small: {\n          point: 18,\n          treble: {\n            line: 5.8,\n            shiftX: 6,\n          },\n          bass: {\n            line: 3.5,\n            shiftX: 0.5,\n          },\n        },\n      },\n    },\n\n    // May not need these anymore\n    lineCount: {\n      '8': { point: 55, shiftY: 14 },\n      '7': { point: 47, shiftY: 8 },\n      '6': { point: 40, shiftY: 1 },\n      '5': { point: 30, shiftY: -6 },\n      '4': { point: 23, shiftY: -12 },\n    },\n  },\n\n  pedalMarking: {\n    up: {\n      point: 40,\n    },\n    down: {\n      point: 40,\n    },\n  },\n\n  tremolo: {\n    default: {\n      point: 40,\n      spacing: 4,\n      offsetYStemUp: -9,\n      offsetYStemDown: -21,\n      offsetXStemUp: 6,\n      offsetXStemDown: -2,\n    },\n    grace: {\n      point: 30,\n      spacing: 4,\n      offsetYStemUp: -9,\n      offsetYStemDown: -21,\n      offsetXStemUp: 6,\n      offsetXStemDown: -2,\n    },\n  },\n\n  // These are for numeric digits, such as in time signatures\n  digits: {\n    point: 40,\n    tupletPoint: 28,\n  },\n\n  stem: {\n    heightAdjustmentForFlag: -3,\n    // These are stem (Y) offsets to the note heads. To shift the\n    // noteheads (x-position) themselves, see glyphs.notehead.custom.\n    noteHead: {\n      noteheadTriangleUpHalf: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadTriangleUpBlack: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadTriangleUpWhole: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXHalf: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXBlack: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXWhole: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadHalf: {\n        offsetYBaseStemUp: -1.5,\n        offsetYBaseStemDown: 1.5,\n      },\n      noteheadBlack: {\n        offsetYBaseStemUp: -1.5,\n        offsetYBaseStemDown: 1.5,\n      },\n      noteheadSquareWhite: {\n        offsetYBaseStemDown: -5,\n        offsetYBaseStemUp: 5,\n      },\n    },\n  },\n\n  glyphs: {\n    flag: {\n      shiftX: -0.08,\n      flag8thDown: {\n        shiftX: -0.16,\n      },\n      flag16thDown: {\n        shiftX: -0.16,\n      },\n      flag32ndDown: {\n        shiftX: -0.16,\n      },\n      flag64thDown: {\n        shiftX: -0.16,\n      },\n      flag128thDown: {\n        shiftX: -0.16,\n      },\n    },\n    textNote: {\n      point: 40,\n      default: {},\n      ornamentTrill: {\n        shiftX: -5,\n        shiftY: 4,\n      },\n    },\n    noteHead: {\n      custom: {\n        noteheadDiamondWholeStemUp: {\n          shiftX: -6,\n        },\n        noteheadCircleXStemUp: {\n          shiftX: -1.5,\n        },\n        noteheadXWholeStemUp: {\n          shiftX: -5,\n        },\n        noteheadTriangleUpWholeStemUp: {\n          shiftX: -6,\n        },\n      },\n    },\n    chordSymbol: {\n      global: {\n        superscriptOffset: -400,\n        subscriptOffset: 300,\n        kerningOffset: -250,\n        lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\n        upperKerningText: ['A', 'L'],\n        spacing: 100,\n        superSubRatio: 0.66,\n      },\n      csymDiminished: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 506,\n        yOffset: 0,\n      },\n      csymHalfDiminished: {\n        scale: 0.8,\n        leftSideBearing: -32,\n        advanceWidth: 506,\n        yOffset: 0,\n      },\n      csymAugmented: {\n        scale: 1,\n        leftSideBearing: 0,\n        advanceWidth: 530,\n        yOffset: 0,\n      },\n      csymParensLeftTall: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 155,\n        yOffset: 250,\n      },\n      csymParensRightTall: {\n        scale: 0.8,\n        leftSideBearing: -40,\n        advanceWidth: 189,\n        yOffset: 250,\n      },\n      csymBracketLeftTall: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 328,\n        yOffset: 0,\n      },\n      csymBracketRightTall: {\n        scale: 0.8,\n        leftSideBearing: 1,\n        advanceWidth: 600,\n        yOffset: 0,\n      },\n      csymParensLeftVeryTall: {\n        scale: 0.9,\n        leftSideBearing: 0,\n        advanceWidth: 121,\n        yOffset: 350,\n      },\n      csymParensRightVeryTall: {\n        scale: 0.9,\n        leftSideBearing: 50,\n        advanceWidth: 111,\n        yOffset: 350,\n      },\n      csymDiagonalArrangementSlash: {\n        scale: 0.6,\n        leftSideBearing: -1,\n        advanceWidth: 990,\n        yOffset: 0,\n      },\n      csymMinor: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 482,\n        yOffset: 0,\n      },\n      csymMajorSeventh: {\n        scale: 0.9,\n        leftSideBearing: 200,\n        yOffset: 0,\n        advanceWidth: 600,\n      },\n      accidentalSharp: {\n        scale: 0.75,\n        leftSideBearing: 40,\n        advanceWidth: 250,\n        yOffset: -402,\n      },\n      accidentalFlat: {\n        scale: 0.95,\n        leftSideBearing: -50,\n        advanceWidth: 208,\n        yOffset: -184,\n      },\n    },\n    jazzOrnaments: {\n      brassScoop: {\n        scale: 1.0,\n        xOffset: -12,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 10,\n      },\n      brassDoitMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassFallLipShort: {\n        scale: 1.0,\n        xOffset: 17,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassLiftMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 5,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassFallRoughMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 28,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassBend: {\n        scale: 1.0,\n        xOffset: 2,\n        yOffset: -8,\n        stemUpYOffset: 24,\n        reportedWidth: 5,\n      },\n      brassMuteClosed: {\n        scale: 1.0,\n        xOffset: 3,\n        yOffset: -9,\n        stemUpYOffset: 24,\n        reportedWidth: 5,\n      },\n      brassMuteOpen: {\n        scale: 1.0,\n        xOffset: 3,\n        yOffset: -7,\n        stemUpYOffset: 25,\n        reportedWidth: 5,\n      },\n      brassFlip: {\n        scale: 1.0,\n        xOffset: 10,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassJazzTurn: {\n        scale: 1.0,\n        xOffset: 6,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassSmear: {\n        scale: 1.0,\n        xOffset: 10,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n    },\n  },\n};\n","export const LelandFont = {\n  \"glyphs\": {\n    \"bracketTop\": {\n      \"x_min\": 0,\n      \"x_max\": 491,\n      \"y_min\": 0,\n      \"y_max\": 279,\n      \"ha\": 279,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 491,\n      \"o\": \"m 697 399 b 687 402 694 400 690 402 b 671 395 681 402 674 400 b 249 168 668 390 524 168 l 20 168 b 0 150 9 168 0 161 l 0 20 l 0 0 l 176 0 b 706 374 619 0 704 370 b 707 382 706 376 707 379 b 697 399 707 389 703 395 z\"\n    },\n    \"bracketBottom\": {\n      \"x_min\": 0,\n      \"x_max\": 491,\n      \"y_min\": -279,\n      \"y_max\": 0,\n      \"ha\": 279,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 491,\n      \"o\": \"m 697 -399 b 707 -382 703 -395 707 -389 b 706 -374 707 -379 706 -376 b 176 0 704 -370 619 0 l 0 0 l 0 -20 l 0 -150 b 20 -168 0 -161 9 -168 l 249 -168 b 671 -395 524 -168 668 -390 b 687 -402 674 -400 681 -402 b 697 -399 690 -402 694 -400 z\"\n    },\n    \"segno\": {\n      \"x_min\": 0,\n      \"x_max\": 654,\n      \"y_min\": 0,\n      \"y_max\": 869,\n      \"ha\": 869,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 654,\n      \"o\": \"m 821 549 l 546 690 l 838 1207 b 841 1215 840 1210 841 1212 b 832 1233 841 1221 837 1230 l 809 1248 b 798 1251 806 1250 801 1251 b 780 1241 792 1251 783 1247 l 487 721 l 217 860 b 99 995 147 897 99 924 b 236 1165 99 1120 179 1165 b 343 1073 288 1165 325 1130 b 454 988 357 1022 405 988 b 477 991 461 988 469 989 b 541 1076 526 1002 541 1045 b 540 1089 541 1080 541 1084 b 294 1225 534 1116 514 1225 b 0 939 72 1225 0 1053 b 125 706 0 825 42 753 l 397 563 l 104 45 b 102 35 102 42 102 37 b 111 19 102 29 107 22 l 132 3 b 144 0 135 1 141 0 l 148 0 b 161 10 153 1 158 6 l 456 531 l 704 403 b 842 256 780 361 842 318 b 706 86 842 131 763 86 b 599 177 654 86 616 120 b 488 262 585 228 537 262 b 465 259 481 262 472 261 b 402 177 418 248 402 206 b 403 163 402 171 402 167 b 649 26 409 135 429 26 b 942 312 871 26 942 199 b 821 549 942 426 901 507 z m 52 444 b 118 416 69 426 95 416 b 183 444 141 416 166 426 b 210 508 200 461 210 485 b 183 573 210 531 200 556 b 118 600 166 590 141 600 b 52 573 95 600 69 590 b 24 508 35 556 24 531 b 52 444 24 485 35 461 z m 760 730 b 825 703 778 713 802 703 b 890 730 848 703 873 713 b 917 795 907 747 917 772 b 890 861 917 818 907 844 b 825 888 873 878 848 888 b 760 861 802 888 778 878 b 733 795 743 844 733 818 b 760 730 733 772 743 747 z\"\n    },\n    \"coda\": {\n      \"x_min\": 0,\n      \"x_max\": 745,\n      \"y_min\": -113,\n      \"y_max\": 735,\n      \"ha\": 848,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 745,\n      \"o\": \"m 1054 467 l 924 467 b 560 896 916 697 757 881 l 560 1038 b 540 1058 560 1050 552 1058 l 524 1058 b 505 1038 513 1058 505 1050 l 505 896 b 150 467 311 877 158 693 l 20 467 b 0 446 9 467 0 458 l 0 432 b 20 412 0 420 9 412 l 150 412 b 505 0 166 193 317 17 l 505 -143 b 524 -163 505 -154 513 -163 l 540 -163 b 560 -143 552 -163 560 -154 l 560 0 b 923 412 753 13 907 190 l 1054 412 b 1073 432 1066 412 1073 420 l 1073 446 b 1054 467 1073 458 1066 467 z m 773 467 l 560 467 l 560 852 b 773 467 716 837 770 671 z m 505 851 l 505 467 l 301 467 b 505 851 304 668 357 831 z m 301 412 l 505 412 l 505 45 b 301 412 366 65 307 219 z m 560 45 l 560 412 l 772 412 b 560 45 766 215 706 60 z\"\n    },\n    \"gClef\": {\n      \"x_min\": -20,\n      \"x_max\": 639.9766931127763,\n      \"y_min\": -667,\n      \"y_max\": 1112.099609375,\n      \"ha\": 1779.099609375,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 640,\n      \"o\": \"m 912 85 b 845 233 895 163 857 218 b 674 355 799 294 742 335 b 551 366 629 367 586 369 b 509 616 536 453 522 538 b 672 850 587 705 639 789 b 739 1014 722 945 739 1011 b 754 1318 764 1089 769 1200 b 675 1570 739 1427 709 1524 b 630 1601 660 1591 645 1601 b 535 1544 613 1601 576 1584 b 418 1369 502 1512 455 1456 b 377 1034 375 1268 372 1131 b 398 847 382 930 398 848 b 409 787 398 846 402 824 b 398 777 405 784 402 781 b 346 726 383 763 366 746 b 306 687 334 714 320 701 b 0 117 184 570 0 392 b 39 -72 0 49 13 -15 b 137 -213 61 -124 95 -172 b 502 -365 248 -322 401 -368 b 617 -355 545 -364 583 -361 b 660 -671 643 -493 660 -594 b 581 -862 661 -765 637 -822 b 461 -902 546 -887 506 -900 b 371 -892 424 -904 391 -897 l 370 -892 b 366 -887 370 -892 366 -890 b 371 -884 366 -885 371 -884 l 371 -884 b 484 -813 399 -878 450 -860 b 496 -653 510 -776 523 -710 b 363 -570 480 -619 444 -576 b 266 -591 327 -567 295 -574 b 203 -659 240 -607 218 -631 b 219 -865 168 -727 174 -810 b 407 -959 262 -917 329 -950 b 444 -960 419 -960 431 -960 b 622 -911 507 -960 571 -943 b 715 -736 675 -874 705 -817 b 697 -468 723 -669 718 -584 b 675 -340 692 -438 684 -394 b 872 -177 758 -312 818 -261 b 912 85 919 -94 933 -6 z m 420 -293 b 235 -189 353 -275 289 -239 b 168 -91 216 -171 189 -140 b 139 56 148 -45 139 4 b 195 262 140 123 159 193 b 390 498 237 342 303 422 b 450 554 411 517 431 535 b 485 355 461 492 472 425 b 317 210 430 336 361 291 b 278 -15 266 115 268 35 b 378 -163 292 -79 328 -133 b 477 -194 391 -171 451 -202 b 488 -184 483 -192 486 -189 b 459 -144 496 -167 481 -158 b 430 -125 450 -139 440 -133 b 377 38 382 -89 361 -25 b 430 128 385 73 403 104 b 518 176 454 150 483 166 b 600 -267 547 14 577 -147 b 606 -296 602 -277 604 -287 b 420 -293 543 -310 480 -309 z m 583 185 b 806 15 732 192 793 85 b 790 -146 813 -21 813 -85 b 664 -280 774 -192 738 -250 b 661 -261 663 -274 662 -268 b 583 185 639 -135 611 23 z m 477 1207 b 571 1361 503 1289 542 1336 b 633 1393 596 1383 620 1393 b 638 1392 635 1393 637 1393 b 659 1370 645 1390 653 1382 b 663 1147 693 1308 682 1211 b 470 850 639 1070 597 989 b 464 896 468 866 466 881 b 477 1207 446 1015 450 1120 z m -29 3 z\"\n    },\n    \"cClef\": {\n      \"x_min\": 0,\n      \"x_max\": 627,\n      \"y_min\": -480,\n      \"y_max\": 482,\n      \"ha\": 962,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 627,\n      \"o\": \"m 122 675 l 19 675 b 0 657 9 675 0 667 l 0 -654 b 19 -672 0 -664 9 -672 l 122 -672 b 141 -654 132 -672 141 -664 l 141 657 b 122 675 141 667 132 675 z m 641 -58 l 619 -58 b 505 -95 586 -58 562 -60 b 426 1 505 -95 474 -32 b 505 98 474 35 505 98 b 619 60 562 63 586 60 l 641 60 b 903 379 816 60 903 223 b 580 694 903 580 755 694 b 356 615 422 694 356 615 b 318 517 330 583 318 549 b 340 445 318 491 325 467 b 438 400 360 416 400 400 b 505 422 464 400 488 408 b 546 510 530 444 546 475 b 530 569 546 530 540 550 b 441 616 507 611 464 616 b 425 615 432 616 425 615 b 547 651 458 638 503 651 b 654 621 588 651 626 641 b 723 400 704 583 723 504 b 593 128 723 289 720 128 b 438 279 467 128 438 279 b 418 300 438 279 438 300 b 396 279 397 300 396 279 b 346 117 396 279 384 206 b 264 29 323 63 288 39 l 264 657 b 246 675 264 667 256 675 b 228 657 236 675 228 667 l 228 -654 b 246 -672 228 -664 236 -672 b 264 -654 256 -672 264 -664 l 264 -26 b 346 -114 288 -36 323 -60 b 396 -278 384 -203 396 -278 b 418 -297 396 -278 397 -297 b 438 -278 438 -297 438 -278 b 593 -125 438 -278 467 -125 b 723 -397 720 -125 723 -287 b 654 -618 723 -501 704 -580 b 547 -648 626 -638 588 -648 b 425 -612 503 -648 458 -635 b 441 -613 425 -612 432 -613 b 530 -566 464 -613 507 -608 b 546 -507 540 -547 546 -527 b 505 -419 546 -472 530 -441 b 438 -397 488 -405 464 -397 b 340 -442 400 -397 360 -413 b 318 -514 325 -464 318 -488 b 356 -612 318 -546 330 -580 b 580 -691 356 -612 422 -691 b 903 -376 755 -691 903 -577 b 641 -58 903 -220 816 -58 z\"\n    },\n    \"fClef\": {\n      \"x_min\": 0.32179930795847755,\n      \"x_max\": 664,\n      \"y_min\": -617,\n      \"y_max\": 251,\n      \"ha\": 868,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 663,\n      \"o\": \"m 366 361 b 167 298 256 361 168 298 b 37 112 84 236 50 163 b 27 36 30 86 27 60 b 46 -58 27 1 33 -30 b 140 -138 63 -96 96 -124 b 194 -147 157 -144 176 -147 b 287 -122 226 -147 259 -138 b 359 10 331 -98 359 -46 b 289 134 359 60 333 107 b 206 160 259 154 230 160 b 160 153 189 160 173 157 b 109 122 145 147 121 132 b 147 215 114 150 131 192 b 219 279 163 238 194 266 b 351 308 255 300 301 308 b 570 -52 498 308 570 190 b 477 -399 570 -186 520 -314 b 310 -635 429 -494 366 -585 b 17 -837 160 -772 19 -837 b 1 -871 17 -837 -4 -850 b 27 -888 6 -886 19 -888 b 35 -887 29 -888 33 -887 b 331 -717 36 -887 200 -819 b 528 -544 405 -664 471 -606 b 661 -367 580 -488 625 -428 b 760 -50 724 -259 760 -147 b 670 239 760 69 729 168 b 366 361 602 320 500 361 z m 818 179 b 887 107 818 138 850 107 b 956 179 924 107 956 138 b 887 252 956 219 924 252 b 818 179 850 252 818 219 z m 818 -177 b 887 -251 818 -217 850 -251 b 956 -177 924 -251 956 -217 b 887 -104 956 -137 924 -104 b 818 -177 850 -104 818 -137 z\"\n    },\n    \"unpitchedPercussionClef1\": {\n      \"x_min\": 0,\n      \"x_max\": 352,\n      \"y_min\": -252,\n      \"y_max\": 252,\n      \"ha\": 504,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 352,\n      \"o\": \"m 177 363 l 19 363 b 0 344 9 363 0 354 l 0 -344 b 19 -363 0 -354 9 -363 l 177 -363 b 196 -344 187 -363 196 -354 l 196 344 b 177 363 196 354 187 363 z m 488 363 l 330 363 b 311 344 320 363 311 354 l 311 -344 b 330 -363 311 -354 320 -363 l 488 -363 b 507 -344 498 -363 507 -354 l 507 344 b 488 363 507 354 498 363 z\"\n    },\n    \"6stringTabClef\": {\n      \"x_min\": 0,\n      \"x_max\": 439,\n      \"y_min\": -743,\n      \"y_max\": 746,\n      \"ha\": 1489,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 439,\n      \"o\": \"m 583 1074 l 52 1074 l 52 958 l 249 958 l 249 419 l 387 419 l 387 958 l 583 958 z m 238 334 l 0 -333 l 145 -333 l 192 -196 l 436 -196 l 481 -333 l 632 -333 l 396 334 z m 229 -81 l 315 181 l 400 -81 z m 566 -474 b 393 -402 531 -428 475 -403 l 71 -402 l 71 -1070 l 372 -1070 l 374 -1070 b 465 -1061 405 -1070 435 -1067 b 541 -1027 494 -1056 520 -1043 b 588 -975 560 -1012 575 -995 b 618 -868 608 -943 618 -907 b 592 -770 618 -829 609 -798 b 514 -711 575 -743 549 -724 b 566 -674 537 -700 554 -688 b 596 -576 586 -649 596 -616 b 566 -474 596 -536 586 -503 z m 203 -518 l 348 -518 b 428 -528 380 -518 408 -521 b 464 -590 452 -539 464 -559 b 436 -649 464 -619 455 -638 b 366 -665 418 -661 395 -665 l 203 -665 z m 203 -776 l 367 -776 b 435 -788 396 -776 419 -780 b 477 -858 464 -801 477 -824 b 433 -942 477 -900 462 -927 b 366 -953 418 -949 395 -953 l 203 -953 z\"\n    },\n    \"timeSig0\": {\n      \"x_min\": 15,\n      \"x_max\": 389,\n      \"y_min\": -254,\n      \"y_max\": 255,\n      \"ha\": 509,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 404,\n      \"o\": \"m 291 367 b 22 0 138 367 22 209 b 291 -366 22 -209 138 -366 b 560 0 444 -366 560 -209 b 291 367 560 209 444 367 z m 376 200 l 376 -200 b 291 -308 376 -252 353 -308 b 206 -200 229 -308 206 -252 l 206 200 b 291 308 206 252 229 308 b 376 200 353 308 376 252 z\"\n    },\n    \"timeSig1\": {\n      \"x_min\": 15,\n      \"x_max\": 336,\n      \"y_min\": -243,\n      \"y_max\": 245,\n      \"ha\": 488,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 351,\n      \"o\": \"m 468 -284 l 359 -284 l 359 336 b 341 353 359 346 351 353 l 199 353 b 190 350 196 353 193 351 l 184 344 l 23 65 b 22 56 22 62 22 59 b 30 42 22 50 26 45 l 58 26 b 66 23 60 24 63 23 b 81 32 72 23 78 27 l 183 207 l 183 -284 l 73 -284 b 56 -301 63 -284 56 -291 l 56 -333 b 73 -350 56 -343 63 -350 l 468 -350 b 484 -333 478 -350 484 -343 l 484 -301 b 468 -284 484 -291 478 -284 z\"\n    },\n    \"timeSig2\": {\n      \"x_min\": 15,\n      \"x_max\": 377,\n      \"y_min\": -243,\n      \"y_max\": 245,\n      \"ha\": 488,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 392,\n      \"o\": \"m 492 -56 b 382 -192 481 -88 452 -192 b 190 -134 288 -192 268 -134 b 153 -138 179 -134 167 -135 b 341 -36 153 -138 189 -84 b 533 173 494 12 533 86 b 288 353 533 233 505 353 b 30 156 71 353 30 222 b 138 49 30 96 79 49 b 245 156 197 49 245 96 b 179 255 245 196 216 240 b 168 271 174 256 168 264 b 202 297 168 279 176 289 b 251 304 209 300 229 304 b 311 288 271 304 294 300 b 348 180 338 271 348 245 b 65 -150 348 12 148 -24 b 22 -278 65 -150 22 -210 b 73 -350 22 -346 56 -350 b 121 -305 96 -350 121 -331 b 117 -287 121 -300 120 -294 b 105 -239 108 -266 105 -251 b 107 -226 105 -235 105 -230 b 154 -203 108 -217 120 -203 b 238 -289 196 -203 212 -252 b 350 -350 264 -327 304 -350 b 484 -264 396 -350 458 -317 b 543 -63 510 -210 543 -102 b 518 -36 543 -45 531 -36 b 492 -56 508 -36 498 -42 z\"\n    },\n    \"timeSig3\": {\n      \"x_min\": 15.000407235939647,\n      \"x_max\": 364.171875,\n      \"y_min\": -244,\n      \"y_max\": 244,\n      \"ha\": 488,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 379,\n      \"o\": \"m 389 23 l 392 23 b 514 168 507 68 514 143 l 514 176 b 262 351 514 189 510 351 b 22 176 15 351 22 176 l 23 176 l 22 173 b 115 81 22 121 64 81 b 208 173 167 81 208 121 b 136 264 208 215 176 255 l 140 268 b 215 289 160 282 187 289 b 340 176 275 289 340 253 b 255 69 340 85 272 72 b 140 60 238 66 157 60 b 121 40 123 60 121 40 l 121 12 b 140 -6 121 12 124 -4 b 244 -14 164 -7 198 -7 b 340 -167 307 -23 340 -66 b 215 -289 340 -264 275 -289 b 121 -266 174 -289 137 -278 b 208 -174 169 -264 208 -222 b 115 -81 208 -122 167 -81 b 22 -174 64 -81 22 -122 b 78 -298 22 -174 15 -239 b 236 -351 134 -350 205 -351 b 524 -147 375 -351 524 -304 b 389 23 524 -42 452 3 z\"\n    },\n    \"timeSig4\": {\n      \"x_min\": 13.762786846608147,\n      \"x_max\": 442,\n      \"y_min\": -248,\n      \"y_max\": 248.90506713461872,\n      \"ha\": 496.9050671346187,\n      \"leftSideBearing\": 13,\n      \"advanceWidth\": 457,\n      \"o\": \"m 52 -182 l 299 -182 l 299 -289 l 181 -289 b 160 -309 169 -289 160 -298 l 160 -337 b 181 -357 160 -348 169 -357 l 616 -357 b 636 -337 627 -357 636 -348 l 636 -309 b 616 -289 636 -298 627 -289 l 487 -289 l 487 -182 l 616 -182 b 636 -162 627 -182 636 -173 l 636 -134 b 616 -114 636 -123 627 -114 l 487 -114 l 487 116 b 476 134 487 124 483 130 l 459 143 b 436 139 451 146 442 145 l 306 19 b 299 4 301 16 299 10 l 299 -114 l 133 -114 b 464 286 133 -114 293 59 b 466 321 476 303 469 318 l 435 353 b 421 358 431 356 426 358 b 207 358 412 358 217 358 b 187 341 196 359 188 350 b 142 118 187 341 180 235 b 24 -123 105 1 62 -71 b 22 -148 24 -123 16 -137 b 36 -175 27 -159 36 -175 b 52 -182 36 -175 39 -182 z\"\n    },\n    \"timeSig5\": {\n      \"x_min\": 15,\n      \"x_max\": 362,\n      \"y_min\": -244,\n      \"y_max\": 246,\n      \"ha\": 490,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 377,\n      \"o\": \"m 39 314 b 46 170 39 314 46 245 l 46 151 b 39 -24 45 71 39 -24 b 49 -48 39 -24 36 -45 b 99 -59 62 -50 92 -58 b 121 -49 108 -60 117 -60 b 235 45 128 -30 144 45 b 356 -112 337 45 356 -43 b 238 -292 356 -184 333 -288 l 226 -292 b 166 -282 193 -292 174 -288 b 164 -264 157 -279 156 -269 b 222 -168 177 -255 222 -239 b 117 -71 222 -98 173 -71 b 22 -171 60 -71 22 -122 b 111 -318 22 -220 36 -275 b 252 -351 147 -338 199 -351 b 456 -275 325 -351 405 -328 b 521 -109 503 -228 521 -167 b 433 79 521 -32 487 43 b 271 124 397 104 336 124 b 131 84 223 124 173 112 b 125 82 130 82 127 82 b 115 92 120 82 115 86 l 115 183 b 131 199 115 192 122 199 l 132 199 b 252 192 154 197 202 192 b 372 209 295 192 340 196 b 474 320 439 236 462 289 b 477 334 475 324 477 330 b 451 354 477 346 469 354 b 431 351 445 354 439 353 b 252 328 360 334 305 328 b 88 343 200 328 150 334 b 71 344 88 343 81 344 b 39 314 55 344 36 340 z\"\n    },\n    \"timeSig6\": {\n      \"x_min\": 15,\n      \"x_max\": 387,\n      \"y_min\": -244,\n      \"y_max\": 245,\n      \"ha\": 489,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 402,\n      \"o\": \"m 356 69 b 216 22 268 69 236 43 b 209 98 212 52 209 75 b 216 167 209 121 212 141 b 338 287 225 220 261 287 b 410 259 374 287 396 275 b 356 174 380 246 356 207 b 448 82 356 122 396 82 b 541 174 500 82 541 122 l 541 177 l 541 179 b 533 225 541 192 539 213 b 310 353 514 276 454 353 b 58 163 180 353 86 229 b 22 -23 43 128 22 58 b 131 -285 22 -111 46 -210 b 318 -351 215 -348 268 -351 b 557 -125 369 -351 557 -292 b 356 69 557 16 446 69 z m 302 -291 b 216 -145 255 -291 216 -226 b 302 1 216 -65 255 1 b 390 -145 350 1 390 -65 b 302 -291 390 -226 350 -291 z\"\n    },\n    \"timeSig7\": {\n      \"x_min\": 15,\n      \"x_max\": 366.0948158519084,\n      \"y_min\": -250.0148966199921,\n      \"y_max\": 251,\n      \"ha\": 501.0148966199921,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 381,\n      \"o\": \"m 526 341 b 512 361 526 358 512 361 l 484 361 b 467 341 468 361 467 341 b 407 228 467 341 468 228 b 235 352 346 228 329 352 b 87 252 146 352 92 260 l 87 321 b 71 337 87 330 80 337 l 38 337 b 22 321 29 337 22 330 l 22 55 b 38 39 22 46 29 39 l 71 39 b 87 55 80 39 87 46 l 87 101 b 159 179 87 134 109 179 b 328 123 209 179 217 123 b 426 142 328 123 410 126 b 234 -177 426 142 285 -104 b 160 -332 163 -279 160 -332 b 181 -360 159 -340 158 -360 b 264 -351 203 -360 218 -354 b 370 -360 310 -348 358 -360 b 391 -352 382 -360 387 -355 b 398 -345 393 -350 396 -347 b 405 -327 402 -341 408 -336 b 408 -130 404 -322 384 -216 b 503 151 426 -62 471 60 b 526 341 535 239 526 341 z\"\n    },\n    \"timeSig8\": {\n      \"x_min\": 15,\n      \"x_max\": 393,\n      \"y_min\": -248,\n      \"y_max\": 246,\n      \"ha\": 494,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 408,\n      \"o\": \"m 466 26 b 547 166 514 62 547 108 b 294 354 547 270 434 354 b 40 166 154 354 40 270 b 123 13 40 108 54 56 b 22 -146 57 -25 22 -78 b 294 -357 22 -263 143 -357 b 566 -146 444 -357 566 -263 b 466 26 566 -78 541 -12 z m 294 -276 b 122 -146 202 -276 122 -226 b 197 -26 122 -49 197 -26 b 435 -187 295 -59 435 -108 b 294 -276 435 -226 385 -276 z m 386 65 b 180 209 288 96 180 143 b 294 288 180 265 232 288 b 444 180 382 288 444 246 b 386 65 444 111 412 78 z\"\n    },\n    \"timeSig9\": {\n      \"x_min\": 15,\n      \"x_max\": 387,\n      \"y_min\": -244,\n      \"y_max\": 245,\n      \"ha\": 489,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 402,\n      \"o\": \"m 223 -68 b 363 -20 311 -68 343 -42 b 370 -96 367 -50 370 -73 b 363 -166 370 -120 367 -140 b 240 -285 354 -219 318 -285 b 168 -258 204 -285 183 -274 b 223 -173 199 -245 223 -206 b 131 -81 223 -121 183 -81 b 37 -173 79 -81 37 -121 l 37 -176 l 37 -177 b 46 -223 37 -190 40 -212 b 269 -351 65 -275 125 -351 b 521 -161 399 -351 492 -228 b 557 24 536 -127 557 -56 b 448 287 557 112 533 212 b 261 353 364 350 311 353 b 22 127 210 353 22 294 b 223 -68 22 -14 132 -68 z m 276 294 b 363 147 324 294 363 228 b 276 1 363 66 324 1 b 189 147 229 1 189 66 b 276 294 189 228 229 294 z\"\n    },\n    \"timeSigCommon\": {\n      \"x_min\": 0,\n      \"x_max\": 463,\n      \"y_min\": -256,\n      \"y_max\": 258,\n      \"ha\": 514,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 463,\n      \"o\": \"m 468 258 b 406 147 432 235 406 193 b 408 130 406 141 406 135 b 521 17 415 71 462 24 l 537 17 b 667 147 609 17 667 75 l 667 156 b 664 177 667 161 665 171 b 350 372 651 239 595 372 b 0 17 36 372 0 111 b 382 -369 0 -154 22 -369 b 641 -131 524 -369 635 -285 b 629 -120 641 -124 636 -120 l 611 -120 b 599 -131 605 -120 599 -125 b 382 -323 593 -251 508 -323 b 196 -128 256 -323 196 -255 l 196 147 b 356 320 196 228 228 320 b 469 271 423 320 454 295 b 468 258 472 265 472 261 z\"\n    },\n    \"timeSigCutCommon\": {\n      \"x_min\": 0,\n      \"x_max\": 463,\n      \"y_min\": -376,\n      \"y_max\": 388,\n      \"ha\": 764,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 463,\n      \"o\": \"m 629 -120 l 611 -120 b 599 -131 605 -120 599 -125 b 382 -323 593 -251 508 -323 l 369 -323 l 369 320 b 469 269 428 317 455 292 b 468 258 472 264 472 261 b 406 147 432 235 406 193 b 408 130 406 141 406 135 b 523 17 415 71 464 24 l 537 17 b 667 147 609 17 667 75 l 667 156 b 664 177 667 161 665 171 b 369 370 651 236 598 364 l 369 543 b 353 559 369 552 361 559 l 314 559 b 298 543 305 559 298 552 l 298 369 b 0 17 32 341 0 105 b 298 -364 0 -140 17 -334 l 298 -526 b 314 -541 298 -534 305 -541 l 353 -541 b 369 -526 361 -541 369 -534 l 369 -369 l 382 -369 b 641 -131 524 -369 635 -285 b 629 -120 641 -124 636 -120 z m 196 -128 l 196 147 b 298 312 196 215 216 289 l 298 -310 b 196 -128 229 -285 196 -223 z\"\n    },\n    \"noteheadDoubleWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 383,\n      \"y_min\": -180,\n      \"y_max\": 177,\n      \"ha\": 357,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 383,\n      \"o\": \"m 531 255 l 518 255 b 500 235 507 255 500 246 l 500 118 b 276 196 459 163 389 196 b 53 118 164 196 94 163 l 53 235 b 33 255 53 246 45 255 l 20 255 b 0 235 9 255 0 246 l 0 -232 b 20 -252 0 -243 9 -252 l 33 -252 b 53 -232 45 -252 53 -243 l 53 -115 b 276 -193 94 -160 164 -193 b 500 -115 389 -193 459 -160 l 500 -239 b 518 -259 500 -251 507 -259 l 531 -259 b 552 -239 543 -259 552 -251 l 552 235 b 531 255 552 246 543 255 z m 156 65 b 154 79 154 69 154 75 b 164 115 154 92 158 105 b 213 144 174 130 190 140 b 279 151 230 147 243 151 l 281 151 b 373 43 338 151 357 98 l 377 29 b 395 -63 389 -7 395 -39 b 384 -109 395 -82 390 -98 b 338 -141 376 -125 363 -135 b 304 -145 325 -144 304 -145 b 285 -147 297 -145 291 -147 b 190 -68 240 -147 210 -130 b 156 65 173 -14 168 1 z\"\n    },\n    \"noteheadWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 373,\n      \"y_min\": -134,\n      \"y_max\": 136,\n      \"ha\": 270,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 373,\n      \"o\": \"m 269 196 b 0 1 71 196 0 95 b 269 -193 0 -92 71 -193 b 537 1 468 -193 537 -92 b 269 196 537 95 468 196 z m 150 65 b 148 82 148 71 148 76 b 157 115 148 94 151 105 b 206 144 167 130 184 140 b 272 151 225 148 235 151 l 274 151 b 366 43 331 151 350 98 l 370 29 b 387 -65 382 -9 387 -40 b 379 -109 387 -82 384 -98 b 331 -141 370 -125 356 -135 b 297 -145 318 -144 297 -145 b 278 -147 289 -145 284 -147 b 183 -68 232 -147 203 -130 b 150 65 166 -14 163 1 z\"\n    },\n    \"noteheadHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 325,\n      \"y_min\": -133,\n      \"y_max\": 132,\n      \"ha\": 265,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 325,\n      \"o\": \"m 454 117 b 307 190 428 164 373 190 b 153 148 258 190 204 176 b 0 -60 58 98 0 13 b 14 -120 0 -81 4 -101 b 161 -192 40 -167 95 -192 b 315 -151 210 -192 264 -179 b 468 58 410 -101 468 -16 b 454 117 468 78 464 98 z m 392 19 b 266 -65 367 -6 318 -36 b 128 -122 215 -94 163 -115 b 107 -125 121 -124 114 -125 b 56 -98 84 -125 66 -117 b 49 -73 52 -91 49 -82 b 75 -23 49 -58 59 -39 b 199 60 99 1 147 32 b 337 118 251 89 302 111 b 359 121 344 120 351 121 b 410 94 382 121 400 112 b 416 69 415 86 416 78 b 392 19 416 53 408 36 z\"\n    },\n    \"noteheadBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 325,\n      \"y_min\": -133,\n      \"y_max\": 132,\n      \"ha\": 265,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 325,\n      \"o\": \"m 454 117 b 307 190 428 164 373 190 b 153 148 258 190 204 176 b 0 -60 58 98 0 13 b 14 -120 0 -81 4 -101 b 161 -192 40 -167 95 -192 b 315 -151 210 -192 264 -179 b 468 58 410 -101 468 -16 b 454 117 468 78 464 98 z\"\n    },\n    \"noteheadXBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 325,\n      \"y_min\": -132,\n      \"y_max\": 132,\n      \"ha\": 264,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 325,\n      \"o\": \"m 285 0 l 461 138 b 468 153 465 141 468 147 l 468 154 b 462 167 468 160 465 164 l 445 184 b 431 190 441 187 436 190 b 418 186 426 190 420 189 l 235 40 l 50 186 b 37 190 48 189 42 190 b 24 184 32 190 29 187 l 6 167 b 0 153 3 164 0 158 b 7 138 0 147 3 141 l 183 0 l 7 -138 b 0 -153 3 -141 0 -147 b 6 -166 0 -157 3 -163 l 23 -184 b 37 -190 26 -189 32 -190 b 50 -186 42 -190 48 -189 l 235 -40 l 418 -186 b 431 -190 420 -189 426 -190 b 445 -184 436 -190 442 -189 l 462 -166 b 468 -153 465 -163 468 -157 b 461 -138 468 -147 465 -141 z\"\n    },\n    \"noteheadCircleX\": {\n      \"x_min\": 0,\n      \"x_max\": 325,\n      \"y_min\": -162,\n      \"y_max\": 163,\n      \"ha\": 325,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 325,\n      \"o\": \"m 387 -115 l 265 0 l 395 105 b 426 0 415 75 426 39 b 387 -115 426 -43 412 -84 z m 99 -137 l 233 -27 l 360 -145 b 235 -192 327 -174 282 -192 b 99 -137 183 -192 134 -171 z m 81 115 l 202 1 l 73 -105 b 42 0 53 -75 42 -39 b 81 115 42 43 56 84 z m 369 138 l 235 29 l 108 145 b 233 193 141 174 186 193 b 369 138 285 193 334 173 z m 233 235 b 0 0 104 235 0 130 b 233 -233 0 -130 104 -233 b 468 0 363 -233 468 -130 b 233 235 468 130 363 235 z\"\n    },\n    \"noteheadDiamondHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 325,\n      \"y_min\": -141,\n      \"y_max\": 141,\n      \"ha\": 282,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 325,\n      \"o\": \"m 468 0 b 462 14 468 6 467 12 l 246 199 b 235 203 243 202 239 203 b 222 199 230 203 225 202 l 7 14 b 0 0 3 12 0 6 b 7 -14 0 -6 3 -12 l 222 -197 b 233 -203 225 -200 229 -203 l 235 -203 b 246 -197 239 -203 243 -200 l 461 -14 b 468 0 465 -12 468 -6 z m 281 -120 l 94 40 l 187 120 l 374 -39 z\"\n    },\n    \"noteheadDiamondBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 325,\n      \"y_min\": -140,\n      \"y_max\": 142,\n      \"ha\": 282,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 325,\n      \"o\": \"m 461 14 l 246 199 b 235 204 243 202 239 204 b 222 199 230 204 225 202 l 7 14 b 0 0 3 12 0 6 b 7 -14 0 -6 3 -12 l 222 -197 b 235 -202 225 -200 230 -202 b 246 -197 239 -202 243 -200 l 461 -14 b 468 0 465 -12 468 -6 b 461 14 468 6 465 12 z\"\n    },\n    \"augmentationDot\": {\n      \"x_min\": 0,\n      \"x_max\": 100,\n      \"y_min\": -49.9833984375,\n      \"y_max\": 50.0166015625,\n      \"ha\": 100,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 100,\n      \"o\": \"m 0 0 b 72 -72 0 -40 32 -72 b 144 0 112 -72 144 -40 b 72 72 144 40 112 72 b 0 0 32 72 0 40 z\"\n    },\n    \"tremolo1\": {\n      \"x_min\": 0,\n      \"x_max\": 290,\n      \"y_min\": -92.625,\n      \"y_max\": 96.375,\n      \"ha\": 189,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 290,\n      \"o\": \"m 418 139 l 0 48 l 0 -133 l 418 -43 z\"\n    },\n    \"flag8thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 289,\n      \"y_min\": -818.0519211765461,\n      \"y_max\": 12,\n      \"ha\": 830.0519211765461,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 289,\n      \"o\": \"m 50 -50 b 36 7 49 -46 36 4 b 19 17 35 13 26 17 b 0 -1 9 17 0 9 l 0 -238 l 0 -327 b 12 -343 0 -334 6 -340 b 291 -600 72 -361 197 -441 b 359 -827 317 -645 359 -706 b 317 -1140 359 -930 343 -1040 b 324 -1176 312 -1156 308 -1171 b 351 -1156 340 -1182 346 -1171 b 416 -808 403 -1030 416 -897 l 416 -780 b 302 -458 409 -595 302 -458 b 131 -220 307 -458 170 -281 b 50 -50 78 -138 52 -56 z\"\n    },\n    \"flag8thDown\": {\n      \"x_min\": 0,\n      \"x_max\": 289,\n      \"y_min\": -12,\n      \"y_max\": 815.9030850945703,\n      \"ha\": 827.9030850945703,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 289,\n      \"o\": \"m 36 -6 b 50 50 36 -3 49 46 b 131 220 52 56 78 138 b 302 458 170 281 307 458 b 416 780 302 458 409 595 l 416 814 b 354 1151 416 901 405 1025 b 327 1174 348 1165 343 1179 b 320 1135 311 1168 315 1151 b 360 827 346 1034 360 930 b 291 600 360 706 317 645 b 12 343 196 441 72 363 b 0 327 4 340 0 334 l 0 238 l 0 1 b 19 -17 0 -9 9 -17 b 36 -6 26 -17 35 -12 z\"\n    },\n    \"flag16thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 280,\n      \"y_min\": -818.2621968775015,\n      \"y_max\": 18,\n      \"ha\": 836.2621968775015,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 280,\n      \"o\": \"m 403 -655 b 334 -438 402 -580 384 -503 b 120 -225 265 -348 174 -304 b 42 9 65 -145 42 9 b 20 26 40 19 37 26 b 0 9 3 26 0 19 l 0 -220 l 0 -305 l 0 -474 l 0 -543 b 20 -557 0 -546 10 -554 b 258 -770 58 -572 171 -642 b 318 -955 310 -850 318 -903 l 318 -971 b 287 -1138 317 -1007 308 -1080 b 289 -1176 282 -1151 275 -1169 b 320 -1158 304 -1184 312 -1168 b 383 -958 346 -1116 383 -1040 b 376 -851 383 -917 380 -881 b 403 -667 390 -799 403 -734 z m 301 -675 b 148 -508 262 -625 219 -579 b 56 -366 92 -452 66 -403 b 53 -353 55 -363 55 -357 l 55 -359 b 262 -495 120 -364 207 -429 b 340 -690 327 -573 340 -634 b 338 -732 340 -704 340 -717 b 301 -675 330 -716 312 -690 z\"\n    },\n    \"flag16thDown\": {\n      \"x_min\": -0.5,\n      \"x_max\": 280.0582797238116,\n      \"y_min\": -20.1201171875,\n      \"y_max\": 816.5341815666969,\n      \"ha\": 836.6542987541969,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 280,\n      \"o\": \"m -1 -11 b 21 -29 -1 -21 4 -29 b 42 -11 37 -29 40 -22 b 119 222 42 -11 64 142 b 333 436 174 302 264 347 b 403 652 384 500 402 577 b 375 848 404 724 391 793 b 383 955 380 879 383 914 b 319 1156 383 1036 346 1114 b 290 1174 312 1166 305 1181 b 286 1135 275 1166 281 1148 b 318 968 307 1077 317 1004 b 258 768 320 910 316 854 b 21 554 172 640 58 568 b -1 540 11 551 -1 544 z m 338 730 b 262 493 343 661 344 591 b 55 356 208 426 120 361 l 54 350 b 56 362 55 355 55 359 b 149 506 66 399 92 449 b 301 673 219 577 262 623 b 338 730 313 688 329 713 z\"\n    },\n    \"flag32ndUp\": {\n      \"x_min\": 0,\n      \"x_max\": 280,\n      \"y_min\": -817.3491250321853,\n      \"y_max\": 150,\n      \"ha\": 967.3491250321853,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 280,\n      \"o\": \"m 403 -664 b 392 -580 403 -641 397 -603 b 403 -451 397 -537 403 -491 l 403 -436 b 334 -219 402 -361 384 -284 b 120 -6 265 -130 174 -85 b 42 197 65 73 42 197 b 20 216 40 207 37 216 b 0 197 3 216 0 207 l 0 -32 l 0 -115 l 0 -117 l 0 -206 l 0 -230 l 0 -314 l 0 -472 l 0 -543 b 20 -556 0 -546 10 -553 b 258 -770 58 -570 171 -642 b 318 -953 310 -850 318 -901 l 318 -969 b 287 -1136 317 -1005 308 -1079 b 289 -1175 282 -1149 275 -1168 b 320 -1158 304 -1182 312 -1168 b 383 -956 346 -1116 383 -1038 l 383 -952 b 377 -857 383 -926 382 -883 b 403 -675 390 -805 403 -742 z m 262 -276 b 340 -471 327 -356 340 -415 b 328 -455 336 -465 333 -461 b 117 -256 259 -366 197 -330 b 56 -140 75 -217 60 -167 b 262 -276 121 -145 207 -210 z m 301 -675 b 150 -507 262 -625 220 -577 b 58 -369 95 -452 68 -405 b 262 -504 122 -376 207 -438 b 340 -698 327 -582 340 -642 b 338 -732 340 -710 340 -720 b 301 -675 330 -714 312 -690 z\"\n    },\n    \"flag32ndDown\": {\n      \"x_min\": 0,\n      \"x_max\": 280,\n      \"y_min\": -151,\n      \"y_max\": 816.3491250321852,\n      \"ha\": 967.3491250321852,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 280,\n      \"o\": \"m 403 662 l 403 674 b 377 855 403 740 390 804 b 383 950 382 881 383 924 l 383 955 b 320 1156 383 1037 346 1115 b 289 1174 312 1166 305 1181 b 287 1135 274 1166 282 1148 b 318 968 308 1077 317 1004 l 318 952 b 258 769 318 900 310 848 b 20 554 171 641 58 569 b 0 541 10 552 0 544 l 0 471 l 0 312 l 0 229 l 0 204 l 0 115 l 0 114 l 0 30 l 0 -199 b 20 -217 0 -209 3 -217 b 42 -199 37 -217 40 -209 b 120 4 42 -199 65 -75 b 334 217 174 84 265 128 b 403 435 384 282 402 360 l 403 449 b 392 579 403 490 397 536 b 403 662 397 602 403 639 z m 301 674 b 338 732 312 688 330 714 b 340 698 340 720 340 710 b 262 504 340 642 327 582 b 58 367 207 438 122 374 b 148 507 68 403 94 452 b 301 674 219 577 262 624 z m 262 275 b 56 138 207 209 121 144 b 117 255 60 166 75 216 b 328 454 197 328 259 364 b 340 469 333 459 336 464 b 262 275 340 413 327 354 z\"\n    },\n    \"flag64thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 280,\n      \"y_min\": -817.3491250321853,\n      \"y_max\": 330,\n      \"ha\": 1147.3491250321854,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 280,\n      \"o\": \"m 1 -543 b 23 -557 1 -546 13 -554 b 261 -770 60 -570 174 -642 b 323 -955 314 -850 323 -901 l 323 -969 b 291 -1136 321 -1005 311 -1079 b 294 -1175 287 -1149 279 -1168 b 324 -1158 308 -1182 317 -1168 b 386 -956 350 -1116 386 -1038 b 379 -850 386 -914 383 -880 b 403 -675 392 -799 403 -739 l 403 -664 b 389 -572 403 -632 397 -602 b 403 -442 396 -533 403 -488 l 403 -429 b 389 -337 403 -403 396 -361 b 403 -206 396 -297 403 -252 l 403 -193 b 334 23 402 -118 384 -42 b 120 225 265 112 174 145 b 42 456 65 304 42 456 b 20 475 40 467 37 475 b 0 456 3 475 0 467 z m 328 -454 b 115 -255 259 -364 196 -328 b 55 -127 66 -210 58 -148 l 55 -132 b 262 -269 120 -138 207 -203 b 340 -464 327 -347 340 -408 l 340 -472 b 328 -454 336 -467 333 -459 z m 262 -33 b 340 -228 327 -112 340 -171 l 340 -238 b 328 -220 336 -232 333 -226 b 117 -22 259 -131 197 -95 b 53 111 65 26 55 94 l 56 104 b 262 -33 121 98 207 33 z m 304 -675 b 150 -508 265 -625 220 -579 b 58 -367 94 -454 68 -403 b 262 -504 122 -374 209 -439 b 340 -697 327 -582 340 -641 b 338 -729 340 -707 338 -719 b 304 -675 330 -713 315 -690 z\"\n    },\n    \"flag64thDown\": {\n      \"x_min\": 0,\n      \"x_max\": 280,\n      \"y_min\": -331,\n      \"y_max\": 816.2621968775015,\n      \"ha\": 1147.2621968775015,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 280,\n      \"o\": \"m 0 -458 b 22 -477 0 -468 4 -477 b 43 -458 39 -477 42 -468 b 120 -226 43 -458 65 -305 b 334 -24 174 -147 265 -114 b 403 192 384 40 402 117 l 403 204 b 389 336 403 251 396 295 b 403 428 396 360 403 402 l 403 441 b 389 570 403 487 396 531 b 403 662 397 600 403 631 l 403 674 b 379 848 403 737 392 798 b 387 955 383 878 387 913 b 324 1155 387 1037 350 1113 b 295 1174 317 1165 311 1181 b 291 1135 279 1166 287 1148 b 323 968 311 1077 321 1004 l 323 953 b 261 769 323 900 314 848 b 23 556 174 641 60 569 b 1 541 13 553 1 546 z m 340 471 l 340 461 b 264 268 340 405 327 346 b 56 131 209 202 121 137 l 55 125 b 117 255 58 147 68 210 b 328 454 197 328 259 364 b 340 471 333 459 336 465 z m 56 -105 l 55 -112 b 117 20 56 -95 65 -27 b 328 219 197 94 259 130 b 340 236 333 225 336 230 l 340 225 b 264 32 340 168 328 109 b 56 -105 209 -35 121 -99 z m 340 727 b 341 696 340 717 341 706 b 264 503 341 639 328 580 b 59 366 210 438 124 373 b 151 507 69 402 95 452 b 304 674 222 577 265 624 b 340 727 315 688 331 711 z\"\n    },\n    \"flag128thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 280,\n      \"y_min\": -817.3491250321853,\n      \"y_max\": 514,\n      \"ha\": 1331.3491250321854,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 280,\n      \"o\": \"m 1 -544 b 23 -557 1 -547 13 -554 b 261 -770 60 -570 174 -642 b 323 -955 314 -850 323 -901 l 323 -969 b 291 -1136 321 -1005 311 -1079 b 295 -1175 287 -1149 281 -1168 b 324 -1158 310 -1182 317 -1168 b 387 -956 350 -1116 387 -1038 b 377 -844 387 -913 383 -876 b 403 -665 390 -792 403 -730 l 403 -655 b 389 -560 403 -628 397 -586 b 403 -431 397 -520 403 -477 l 403 -415 b 387 -317 403 -387 396 -343 b 403 -181 396 -275 403 -229 l 403 -168 b 389 -73 403 -141 397 -99 b 403 58 397 -33 403 12 l 403 73 b 334 289 402 148 384 225 b 120 490 265 379 174 410 b 43 723 65 569 43 723 b 22 740 42 733 39 740 b 0 723 4 740 0 733 z m 328 -204 b 117 -6 259 -115 197 -79 b 53 128 60 45 53 115 l 56 128 b 264 -9 121 122 209 58 b 340 -202 327 -86 340 -145 l 340 -222 b 328 -204 336 -216 333 -210 z m 264 232 b 340 42 327 156 340 96 l 340 23 b 328 40 336 29 333 35 b 117 239 259 130 197 166 b 55 370 66 285 56 350 l 56 370 b 264 232 121 364 209 298 z m 304 -675 b 151 -508 265 -625 222 -579 b 58 -366 95 -452 68 -402 b 56 -359 58 -364 56 -361 b 264 -495 121 -364 209 -429 b 340 -688 328 -573 340 -632 b 338 -727 340 -701 340 -714 b 304 -675 330 -711 315 -690 z m 328 -445 b 117 -246 259 -356 197 -320 b 55 -118 66 -200 56 -140 l 56 -118 b 264 -255 121 -124 209 -189 b 340 -451 330 -334 340 -395 l 340 -464 b 328 -445 336 -458 333 -451 z\"\n    },\n    \"flag128thDown\": {\n      \"x_min\": 0,\n      \"x_max\": 280,\n      \"y_min\": -516,\n      \"y_max\": 816.2621968775015,\n      \"ha\": 1332.2621968775015,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 280,\n      \"o\": \"m 0 -726 b 22 -743 0 -736 4 -743 b 43 -726 39 -743 42 -736 b 120 -492 43 -726 65 -572 b 334 -292 174 -413 265 -382 b 403 -75 384 -228 402 -150 l 403 -59 b 389 71 403 -13 397 30 b 403 166 397 96 403 138 l 403 179 b 387 314 403 226 396 272 b 403 412 396 340 403 384 l 403 428 b 389 557 403 474 397 517 b 403 652 397 583 403 625 l 403 662 b 377 842 403 727 390 791 b 387 955 383 874 387 912 b 324 1155 387 1037 350 1113 b 295 1174 317 1165 311 1181 b 291 1135 279 1166 287 1148 b 323 968 311 1077 321 1004 l 323 953 b 261 768 323 900 314 847 b 23 556 174 639 60 569 b 1 541 13 553 1 546 z m 340 220 l 340 200 b 264 6 340 144 327 84 b 56 -131 209 -60 121 -125 l 53 -131 b 117 4 53 -118 60 -46 b 328 203 197 78 259 114 b 340 220 333 209 336 215 z m 56 -372 l 55 -372 b 117 -242 56 -351 66 -288 b 328 -43 197 -168 259 -132 b 340 -26 333 -37 336 -32 l 340 -45 b 264 -235 340 -99 327 -158 b 56 -372 209 -301 121 -366 z m 338 726 b 340 687 340 713 340 700 b 264 492 340 631 328 570 b 56 356 209 426 121 361 b 58 363 56 359 58 361 b 151 507 68 399 95 451 b 304 672 222 577 265 622 b 338 726 314 687 330 710 z m 340 461 l 340 448 b 264 252 340 392 330 331 b 56 115 209 186 121 121 l 55 115 b 117 245 56 137 66 199 b 328 444 197 318 259 354 b 340 461 333 449 336 455 z\"\n    },\n    \"accidentalFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 203,\n      \"y_min\": -176,\n      \"y_max\": 453,\n      \"ha\": 629,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 212,\n      \"o\": \"m 289 114 b 173 223 281 170 246 223 b 52 170 101 223 59 179 l 58 632 b 37 652 58 644 49 652 l 20 652 b 0 632 9 652 0 644 l 7 -233 b 27 -253 7 -245 16 -253 b 39 -251 30 -253 36 -252 b 216 -114 45 -248 138 -202 b 292 78 271 -52 292 19 b 289 114 292 91 291 102 z m 190 58 b 148 -85 190 36 184 -30 b 48 -183 124 -122 75 -161 l 52 98 b 134 153 55 111 76 153 b 190 73 186 153 190 104 z\"\n    },\n    \"accidentalNatural\": {\n      \"x_min\": 0,\n      \"x_max\": 171,\n      \"y_min\": -323,\n      \"y_max\": 325,\n      \"ha\": 648,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 171,\n      \"o\": \"m 239 264 b 228 268 236 266 232 268 b 222 266 226 268 223 266 l 40 216 l 40 468 l 0 468 l 0 -245 b 20 -264 0 -256 9 -264 l 26 -264 l 207 -213 l 207 -465 l 246 -465 l 246 248 b 239 264 246 253 243 261 z m 207 -94 l 40 -140 l 40 96 l 207 144 z\"\n    },\n    \"accidentalSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 244,\n      \"y_min\": -332,\n      \"y_max\": 335,\n      \"ha\": 667,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 244,\n      \"o\": \"m 336 153 b 351 173 344 154 351 164 l 351 258 b 331 278 351 269 343 278 l 328 278 l 281 268 l 281 482 l 240 482 l 240 259 l 112 233 l 112 436 l 72 436 l 72 225 l 16 213 b 0 193 7 212 0 202 l 0 190 l 0 107 l 0 109 b 20 89 0 98 9 89 l 24 89 l 72 99 l 72 -138 l 16 -150 b 0 -170 7 -151 0 -161 l 0 -253 b 20 -274 0 -265 9 -274 l 24 -274 l 72 -264 l 72 -478 l 112 -478 l 112 -255 l 240 -229 l 240 -432 l 281 -432 l 281 -220 l 336 -210 b 351 -190 344 -209 351 -199 l 351 -105 b 331 -85 351 -94 343 -85 l 328 -85 l 281 -95 l 281 143 z m 112 -131 l 112 108 l 240 134 l 240 -104 z\"\n    },\n    \"accidentalDoubleSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 275,\n      \"y_min\": -137,\n      \"y_max\": 138,\n      \"ha\": 275,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 275,\n      \"o\": \"m 300 73 l 360 73 l 376 73 b 396 94 387 73 396 82 l 396 179 b 376 199 396 190 387 199 l 291 199 b 271 179 279 199 271 190 l 271 161 l 271 102 l 200 30 l 196 30 l 124 102 l 124 179 b 105 199 124 190 117 199 l 20 199 b 0 179 9 199 0 190 l 0 94 b 20 73 0 82 9 73 l 35 73 l 36 73 l 96 73 l 167 3 l 167 -1 l 96 -73 l 36 -73 l 35 -73 l 20 -73 b 0 -92 9 -73 0 -81 l 0 -177 b 20 -197 0 -189 9 -197 l 105 -197 b 124 -177 117 -197 124 -189 l 124 -101 l 196 -32 l 200 -32 l 271 -101 l 271 -161 l 271 -163 l 271 -177 b 291 -197 271 -189 279 -197 l 376 -197 b 396 -177 387 -197 396 -189 l 396 -92 b 376 -73 396 -81 387 -73 l 361 -73 l 360 -73 l 300 -73 l 228 -1 l 228 1 z\"\n    },\n    \"accidentalDoubleFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 371,\n      \"y_min\": -176,\n      \"y_max\": 453,\n      \"ha\": 629,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 371,\n      \"o\": \"m 531 115 b 415 223 523 171 488 223 b 294 171 343 223 301 180 l 300 632 b 279 652 300 644 291 652 l 262 652 b 242 632 251 652 242 644 l 246 199 b 173 223 228 213 204 223 b 52 170 101 223 59 179 l 58 632 b 37 652 58 644 49 652 l 20 652 b 0 632 9 652 0 644 l 7 -233 b 27 -253 7 -245 16 -253 b 39 -249 30 -253 36 -251 b 216 -114 45 -246 138 -202 b 248 -69 226 -102 239 -82 l 249 -233 b 269 -253 249 -245 258 -253 b 281 -249 272 -253 278 -251 b 458 -112 287 -246 380 -200 b 534 79 513 -50 534 20 b 531 115 534 92 533 104 z m 190 58 b 148 -85 190 36 184 -30 b 48 -183 124 -122 75 -161 l 52 98 b 134 153 55 111 76 153 b 190 73 186 153 190 104 z m 432 58 b 390 -85 432 36 426 -30 b 289 -183 366 -122 317 -161 l 294 98 b 376 153 297 111 318 153 b 432 73 428 153 432 104 z\"\n    },\n    \"accidentalParensLeft\": {\n      \"x_min\": 0,\n      \"x_max\": 74.99751101813285,\n      \"y_min\": -211.5,\n      \"y_max\": 209.46164665716316,\n      \"ha\": 420.96164665716316,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 75,\n      \"o\": \"m 98 -305 b 103 -303 100 -305 102 -304 b 107 -290 108 -300 109 -295 b 107 287 105 -287 -42 2 b 103 300 109 292 108 297 b 90 298 99 303 93 302 b 0 0 87 293 0 175 b 90 -301 0 -175 87 -295 b 98 -305 92 -303 95 -305 z\"\n    },\n    \"accidentalParensRight\": {\n      \"x_min\": 0.0024889818671534614,\n      \"x_max\": 75,\n      \"y_min\": -209.46164665716316,\n      \"y_max\": 211.5,\n      \"ha\": 420.96164665716316,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 75,\n      \"o\": \"m 10 305 b 5 303 8 305 6 304 b 1 290 0 300 -1 295 b 1 -287 3 287 150 -2 b 5 -300 -1 -292 0 -297 b 18 -298 9 -303 15 -302 b 108 0 21 -293 108 -175 b 18 301 108 175 21 295 b 10 305 16 303 13 305 z\"\n    },\n    \"accidentalQuarterToneFlatStein\": {\n      \"x_min\": 0,\n      \"x_max\": 193,\n      \"y_min\": -176,\n      \"y_max\": 452,\n      \"ha\": 628,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 193,\n      \"o\": \"m 0 84 b 107 -145 0 -26 65 -105 b 245 -249 166 -202 245 -249 b 253 -253 248 -251 249 -253 b 272 -235 264 -253 272 -245 l 278 632 b 259 651 278 642 269 651 l 248 651 b 229 632 238 651 229 642 l 232 174 b 125 217 223 186 192 217 b 0 84 53 217 0 173 z m 148 154 b 232 102 212 154 232 115 b 233 107 232 99 233 102 l 235 -179 b 134 -72 207 -156 160 -111 b 92 58 98 -17 92 36 l 92 75 b 148 154 92 105 96 154 z\"\n    },\n    \"accidentalThreeQuarterTonesFlatZimmermann\": {\n      \"x_min\": 0,\n      \"x_max\": 422,\n      \"y_min\": -176,\n      \"y_max\": 452,\n      \"ha\": 628,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 422,\n      \"o\": \"m 608 84 b 482 217 608 173 554 217 b 376 174 416 217 384 186 l 379 632 b 360 651 379 642 370 651 l 348 651 b 330 632 338 651 330 642 l 336 -235 b 354 -253 336 -245 344 -253 b 363 -249 359 -253 360 -251 b 501 -145 363 -249 442 -202 b 608 84 543 -105 608 -26 z m 459 154 b 516 75 511 154 516 105 l 516 58 b 474 -72 516 36 510 -17 b 373 -179 448 -111 400 -156 l 374 107 b 376 102 374 102 376 99 b 459 154 376 115 396 154 z m 0 84 b 107 -145 0 -26 65 -105 b 245 -249 166 -202 245 -249 b 253 -253 248 -251 249 -253 b 272 -235 264 -253 272 -245 l 278 632 b 259 651 278 642 269 651 l 248 651 b 229 632 238 651 229 642 l 232 174 b 125 217 223 186 192 217 b 0 84 53 217 0 173 z m 148 154 b 232 102 212 154 232 115 b 233 107 232 99 233 102 l 235 -179 b 134 -72 207 -156 160 -111 b 92 58 98 -17 92 36 l 92 75 b 148 154 92 105 96 154 z\"\n    },\n    \"accidentalQuarterToneSharpStein\": {\n      \"x_min\": 0,\n      \"x_max\": 180,\n      \"y_min\": -316,\n      \"y_max\": 320,\n      \"ha\": 636,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 180,\n      \"o\": \"m 243 144 b 259 164 252 145 259 156 l 259 249 b 239 269 259 261 251 269 b 235 268 238 269 236 268 l 150 251 l 150 461 l 109 461 l 109 242 l 16 222 b 0 203 7 220 0 212 l 0 120 b 20 99 0 108 9 99 l 24 99 l 109 117 l 109 -121 l 16 -141 b 0 -160 7 -143 0 -151 l 0 -243 b 20 -264 0 -255 9 -264 l 24 -264 l 109 -246 l 109 -455 l 150 -455 l 150 -238 l 243 -219 b 259 -199 252 -217 259 -207 l 259 -114 b 239 -95 259 -102 251 -95 l 235 -95 l 150 -112 l 150 125 z\"\n    },\n    \"accidentalThreeQuarterTonesSharpStein\": {\n      \"x_min\": 0,\n      \"x_max\": 290,\n      \"y_min\": -327,\n      \"y_max\": 340,\n      \"ha\": 667,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 290,\n      \"o\": \"m 400 160 b 416 180 409 161 416 171 l 416 265 b 397 285 416 276 409 285 l 393 285 l 348 275 l 348 490 l 308 490 l 308 266 l 223 249 l 223 467 l 184 467 l 184 242 l 108 226 l 108 444 l 69 444 l 69 217 l 16 206 b 0 187 7 204 0 196 l 0 104 b 20 84 0 92 9 84 l 24 84 l 69 94 l 69 -145 l 16 -157 b 0 -176 7 -158 0 -167 l 0 -259 b 20 -279 0 -271 9 -279 l 24 -279 l 69 -271 l 69 -471 l 108 -471 l 108 -262 l 184 -246 l 184 -449 l 223 -449 l 223 -239 l 308 -222 l 308 -425 l 348 -425 l 348 -213 l 400 -203 b 418 -183 409 -202 418 -192 l 418 -98 b 397 -78 418 -86 409 -78 l 393 -78 l 348 -88 l 348 150 z m 184 117 l 184 -121 l 108 -137 l 108 101 z m 223 -114 l 223 124 l 308 141 l 308 -96 z\"\n    },\n    \"accidentalBuyukMucennebFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 277,\n      \"y_min\": -176,\n      \"y_max\": 454,\n      \"ha\": 630,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 277,\n      \"o\": \"m 396 115 b 279 225 387 173 354 225 b 158 171 204 225 164 179 l 160 317 l 336 419 l 336 482 l 161 380 l 161 488 l 336 590 l 336 654 l 163 552 l 164 634 b 144 654 164 645 156 654 l 127 654 b 107 634 115 654 107 645 l 108 520 l 0 456 l 0 393 l 108 456 l 109 350 l 0 285 l 0 222 l 109 287 l 114 -235 b 134 -253 114 -246 122 -253 b 145 -251 138 -253 141 -252 b 323 -114 145 -251 242 -204 b 399 79 377 -52 399 20 b 396 115 399 92 397 104 z m 297 58 b 255 -85 297 36 291 -30 b 154 -184 230 -122 181 -163 l 158 96 b 240 153 161 109 181 153 b 297 73 292 153 297 104 z\"\n    },\n    \"accidentalBakiyeFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 277,\n      \"y_min\": -176,\n      \"y_max\": 454,\n      \"ha\": 630,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 277,\n      \"o\": \"m 396 115 b 279 225 387 173 354 225 b 158 171 204 225 164 179 l 161 348 l 336 452 l 336 516 l 161 413 l 164 634 b 144 654 164 645 156 654 l 127 654 b 107 634 115 654 107 645 l 109 382 l 0 318 l 0 255 l 109 318 l 114 -235 b 134 -253 114 -246 122 -253 b 145 -251 138 -253 143 -252 b 323 -114 145 -251 242 -204 b 399 79 377 -52 399 20 b 396 115 399 92 397 104 z m 297 58 b 255 -85 297 36 291 -30 b 156 -184 230 -122 183 -163 l 158 96 b 240 153 161 109 181 153 b 297 73 292 153 297 104 z\"\n    },\n    \"accidentalKucukMucennebSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 348,\n      \"y_min\": -316,\n      \"y_max\": 318,\n      \"ha\": 634,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 348,\n      \"o\": \"m 494 121 b 482 125 491 124 487 125 b 478 124 481 125 480 124 l 269 68 l 269 127 l 412 164 b 425 181 420 167 425 173 l 425 266 b 418 282 425 272 422 279 b 406 285 415 285 410 285 l 402 285 l 269 249 l 269 458 l 232 458 l 232 239 l 89 200 b 76 181 81 197 76 190 l 76 98 b 84 84 76 92 79 86 b 95 79 86 81 91 79 b 99 81 96 79 98 81 l 232 115 l 232 58 l 14 -3 b 0 -20 6 -6 0 -12 l 0 -104 b 7 -118 0 -109 3 -115 b 19 -122 10 -121 14 -122 l 23 -122 l 232 -66 l 232 -124 l 89 -163 b 76 -180 81 -166 76 -171 l 76 -264 b 84 -279 76 -269 79 -276 b 95 -282 86 -282 91 -282 l 99 -282 l 232 -246 l 232 -455 l 269 -455 l 269 -236 l 412 -199 b 425 -180 420 -196 425 -189 l 425 -95 b 418 -81 425 -89 422 -84 b 406 -76 415 -78 410 -76 b 402 -78 405 -76 403 -78 l 269 -114 l 269 -55 l 487 4 b 501 22 495 7 501 13 l 501 107 b 494 121 501 112 498 118 z\"\n    },\n    \"articAccentAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 361,\n      \"y_min\": 0,\n      \"y_max\": 235,\n      \"ha\": 235,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 360,\n      \"o\": \"m 505 189 l 26 337 b 20 338 24 337 22 338 b 0 318 9 338 0 330 l 0 285 b 14 266 0 276 7 269 l 323 170 l 14 72 b 0 53 7 69 0 62 l 0 20 b 20 0 0 9 9 0 b 26 1 22 0 24 1 l 505 150 b 520 170 513 153 520 161 b 505 189 520 179 513 186 z\"\n    },\n    \"articAccentBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 361,\n      \"y_min\": -235,\n      \"y_max\": 0,\n      \"ha\": 235,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 360,\n      \"o\": \"m 505 -150 l 26 -1 b 20 0 24 -1 22 0 b 0 -20 9 0 0 -9 l 0 -53 b 14 -72 0 -62 7 -69 l 323 -168 l 14 -266 b 0 -285 7 -269 0 -276 l 0 -318 b 20 -338 0 -330 9 -338 b 26 -337 22 -338 24 -337 l 505 -189 b 520 -168 513 -186 520 -177 b 505 -150 520 -160 513 -153 z\"\n    },\n    \"articTenutoAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 316,\n      \"y_min\": 0,\n      \"y_max\": 46,\n      \"ha\": 46,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 316,\n      \"o\": \"m 435 66 l 20 66 b 0 46 9 66 0 58 l 0 20 b 20 0 0 9 9 0 l 435 0 b 455 20 446 0 455 9 l 455 46 b 435 66 455 58 446 66 z\"\n    },\n    \"articTenutoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 316,\n      \"y_min\": -46,\n      \"y_max\": 0,\n      \"ha\": 46,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 316,\n      \"o\": \"m 435 0 l 20 0 b 0 -20 9 0 0 -9 l 0 -46 b 20 -66 0 -58 9 -66 l 435 -66 b 455 -46 446 -66 455 -58 l 455 -20 b 435 0 455 -9 446 0 z\"\n    },\n    \"articStaccatoAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 78,\n      \"y_min\": -0.0869140625,\n      \"y_max\": 77.9130859375,\n      \"ha\": 78,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 78,\n      \"o\": \"m 16 16 b 96 16 38 -6 74 -6 b 96 96 118 38 118 74 b 16 96 74 118 38 118 b 16 16 -5 74 -5 38 z\"\n    },\n    \"articStaccatoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 78,\n      \"y_min\": -78.0869140625,\n      \"y_max\": -0.0869140625,\n      \"ha\": 78,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 78,\n      \"o\": \"m 16 -96 b 96 -96 38 -118 74 -118 b 96 -17 118 -74 118 -39 b 16 -17 74 5 38 5 b 16 -96 -5 -39 -5 -74 z\"\n    },\n    \"articStaccatissimoAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 126,\n      \"y_min\": 0,\n      \"y_max\": 208,\n      \"ha\": 208,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 126,\n      \"o\": \"m 171 297 b 161 300 168 298 164 300 b 148 295 157 300 151 298 l 95 239 b 89 236 94 238 91 236 b 84 239 88 236 85 238 l 32 295 b 19 300 29 298 23 300 b 0 279 7 300 0 291 l 0 274 l 71 14 b 91 0 73 6 82 0 b 109 14 99 0 107 6 l 180 274 b 181 279 180 275 181 278 b 171 297 181 285 176 294 z\"\n    },\n    \"articStaccatissimoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 126,\n      \"y_min\": -208,\n      \"y_max\": 0,\n      \"ha\": 208,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 126,\n      \"o\": \"m 171 -297 b 181 -279 176 -294 181 -285 b 180 -274 181 -278 180 -275 l 109 -14 b 91 0 107 -6 99 0 b 71 -14 82 0 73 -6 l 0 -274 l 0 -279 b 19 -300 0 -291 7 -300 b 32 -295 23 -300 29 -298 l 84 -239 b 89 -236 85 -238 88 -236 b 95 -239 91 -236 94 -238 l 148 -295 b 161 -300 151 -298 157 -300 b 171 -297 164 -300 168 -298 z\"\n    },\n    \"articMarcatoAbove\": {\n      \"x_min\": 1,\n      \"x_max\": 296,\n      \"y_min\": 0,\n      \"y_max\": 253,\n      \"ha\": 253,\n      \"leftSideBearing\": 1,\n      \"advanceWidth\": 295,\n      \"o\": \"m 1 30 l 36 10 l 173 239 l 298 10 b 317 0 301 4 310 0 l 408 0 b 426 20 419 0 426 9 b 425 30 426 23 426 27 l 230 356 b 213 364 226 361 222 363 b 196 356 207 364 199 361 z\"\n    },\n    \"articMarcatoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 295,\n      \"y_min\": -253,\n      \"y_max\": 0,\n      \"ha\": 253,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 296,\n      \"o\": \"m 425 -30 l 390 -10 l 253 -239 l 128 -10 b 109 0 125 -4 117 0 l 19 0 b 0 -20 7 0 0 -9 b 1 -30 0 -23 0 -27 l 196 -356 b 213 -364 200 -361 204 -363 b 230 -356 219 -364 228 -361 z\"\n    },\n    \"fermataAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 622,\n      \"y_min\": 0,\n      \"y_max\": 368,\n      \"ha\": 368,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 622,\n      \"o\": \"m 778 374 b 448 530 642 521 523 530 b 120 374 373 530 255 521 b 0 65 49 297 0 143 b 20 19 0 37 6 19 b 161 265 60 19 40 143 b 445 373 268 372 410 373 l 448 373 l 451 373 b 734 265 485 373 628 372 b 876 19 855 143 835 19 b 896 65 890 19 896 36 b 778 374 896 143 848 298 z m 348 99 b 448 0 348 45 393 0 b 547 99 503 0 547 45 b 448 199 547 154 503 199 b 348 99 393 199 348 154 z\"\n    },\n    \"fermataBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 622,\n      \"y_min\": -368,\n      \"y_max\": 0,\n      \"ha\": 368,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 622,\n      \"o\": \"m 778 -374 b 896 -65 848 -298 896 -143 b 876 -19 896 -36 890 -19 b 734 -265 835 -19 855 -143 b 451 -373 628 -372 485 -373 l 448 -373 l 445 -373 b 161 -265 410 -373 268 -372 b 20 -19 40 -143 60 -19 b 0 -65 6 -19 0 -37 b 120 -374 0 -143 49 -297 b 448 -530 255 -521 373 -530 b 778 -374 523 -530 642 -521 z m 348 -99 b 448 -199 348 -154 393 -199 b 547 -99 503 -199 547 -154 b 448 0 547 -45 503 0 b 348 -99 393 0 348 -45 z\"\n    },\n    \"caesura\": {\n      \"x_min\": 0,\n      \"x_max\": 379.951171875,\n      \"y_min\": 0,\n      \"y_max\": 490,\n      \"ha\": 490,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 380,\n      \"o\": \"m 320 706 l 285 706 l 285 706 b 271 696 279 706 273 701 l 1 21 b 0 15 1 20 0 17 b 15 0 0 7 7 0 l 50 0 b 64 10 56 0 62 4 l 334 684 b 335 690 335 686 335 688 b 320 706 335 699 328 706 z m 483 696 l 213 21 b 212 16 213 20 212 17 b 227 0 212 7 219 0 l 262 0 b 276 10 268 0 274 4 l 546 684 b 547 690 547 686 547 689 b 532 706 547 699 540 706 l 497 706 b 483 696 491 706 485 701 z\"\n    },\n    \"caesuraCurved\": {\n      \"x_min\": -0.3940184184244736,\n      \"x_max\": 368,\n      \"y_min\": 0,\n      \"y_max\": 491,\n      \"ha\": 491,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 368,\n      \"o\": \"m 301 707 l 262 707 b 245 693 253 707 246 701 b 1 26 233 603 177 348 b 16 0 -4 14 3 0 b 30 7 22 0 27 3 b 318 687 259 341 304 602 l 318 690 b 301 707 318 698 310 707 z m 514 707 l 474 707 b 458 693 465 707 459 701 b 213 26 446 603 389 348 b 229 0 207 14 216 0 b 243 7 235 0 240 3 b 530 687 472 341 516 602 l 530 690 b 514 707 530 698 523 707 z\"\n    },\n    \"restMaxima\": {\n      \"x_min\": 0,\n      \"x_max\": 450,\n      \"y_min\": -250,\n      \"y_max\": 250,\n      \"ha\": 500,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 450,\n      \"o\": \"m 0 -360 l 180 -360 l 180 360 l 0 360 z m 468 -360 l 648 -360 l 648 360 l 468 360 z\"\n    },\n    \"restDoubleWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 125,\n      \"y_min\": -11,\n      \"y_max\": 262,\n      \"ha\": 273,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 125,\n      \"o\": \"m 160 377 l 20 377 b 0 357 9 377 0 369 l 0 4 b 20 -16 0 -7 9 -16 l 160 -16 b 180 4 171 -16 180 -7 l 180 357 b 160 377 180 369 171 377 z\"\n    },\n    \"restWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 325,\n      \"y_min\": -131,\n      \"y_max\": 5,\n      \"ha\": 136,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 325,\n      \"o\": \"m 448 7 l 20 7 b 0 -13 9 7 0 -1 l 0 -168 b 20 -189 0 -180 9 -189 l 448 -189 b 468 -168 459 -189 468 -180 l 468 -13 b 448 7 468 -1 459 7 z\"\n    },\n    \"restHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 325,\n      \"y_min\": -4,\n      \"y_max\": 132,\n      \"ha\": 136,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 325,\n      \"o\": \"m 0 170 l 0 14 b 20 -6 0 -6 0 -6 l 448 -6 b 468 14 468 -6 468 -6 l 468 170 b 448 190 468 190 468 190 l 20 190 b 0 170 0 190 0 190 z\"\n    },\n    \"restQuarter\": {\n      \"x_min\": 0,\n      \"x_max\": 235.04550444040407,\n      \"y_min\": -331.3305588585018,\n      \"y_max\": 401.3471074380165,\n      \"ha\": 732.6776662965183,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 235,\n      \"o\": \"m 334 -243 l 331 -239 b 323 -229 330 -238 327 -235 l 157 -24 b 157 -3 153 -20 154 -9 l 304 219 b 307 229 305 222 307 226 l 307 242 b 302 253 307 246 305 251 l 69 569 b 43 573 69 569 58 586 b 40 543 29 562 40 543 l 150 393 b 150 359 156 384 156 367 l 4 137 b 1 125 3 134 1 128 l 1 112 b 6 101 1 108 3 104 l 167 -99 b 131 -95 161 -98 148 -95 b 49 -124 107 -95 75 -101 b 0 -229 17 -153 0 -193 b 16 -285 0 -249 4 -269 b 154 -468 46 -331 154 -468 b 180 -474 154 -468 167 -484 b 186 -444 193 -464 190 -451 b 135 -353 181 -436 135 -353 b 125 -307 135 -353 125 -333 b 150 -246 125 -288 131 -265 b 206 -223 167 -229 187 -223 b 252 -236 225 -223 240 -229 l 308 -272 b 334 -268 308 -272 325 -281 b 334 -243 341 -256 338 -251 z\"\n    },\n    \"rest8th\": {\n      \"x_min\": 0,\n      \"x_max\": 276.0703833817838,\n      \"y_min\": -255.400390625,\n      \"y_max\": 203.607617657064,\n      \"ha\": 459.008008282064,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 276,\n      \"o\": \"m 385 292 b 360 282 374 296 364 291 b 245 141 355 273 309 188 b 180 112 225 126 203 117 b 206 181 196 131 206 155 b 103 284 206 238 160 284 b 0 181 46 284 0 238 b 65 85 0 137 27 100 b 144 68 87 75 114 68 b 269 109 185 68 230 80 b 320 158 287 122 304 139 l 156 -356 l 194 -368 l 396 267 b 385 292 400 278 396 288 z\"\n    },\n    \"rest16th\": {\n      \"x_min\": 0.9541398268254265,\n      \"x_max\": 343.8943427695615,\n      \"y_min\": -507.25,\n      \"y_max\": 203.80442456185935,\n      \"ha\": 711.0544245618594,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 344,\n      \"o\": \"m 482 292 b 457 282 471 296 462 291 b 350 146 453 273 412 195 b 286 115 330 130 308 120 b 309 184 301 134 310 158 b 203 283 307 241 260 285 b 104 177 146 281 102 233 b 172 84 105 133 133 97 b 251 69 194 74 222 68 b 375 114 292 71 337 84 b 424 165 392 128 409 146 l 424 165 l 359 -65 b 359 -65 359 -65 359 -65 l 359 -65 b 248 -213 352 -79 305 -168 b 183 -244 228 -229 206 -239 b 207 -175 199 -226 208 -202 b 101 -76 205 -119 157 -74 b 1 -183 44 -78 -1 -126 b 70 -276 3 -226 31 -262 b 149 -290 92 -285 120 -291 b 272 -245 190 -288 234 -275 b 321 -195 290 -231 306 -213 l 174 -720 l 213 -730 l 482 223 l 494 268 b 482 292 497 279 493 289 z\"\n    },\n    \"rest32nd\": {\n      \"x_min\": -0.17098561188277978,\n      \"x_max\": 390.77294012579665,\n      \"y_min\": -507.25,\n      \"y_max\": 459.7265334202139,\n      \"ha\": 966.9765334202139,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 391,\n      \"o\": \"m 549 661 b 524 650 538 664 529 659 b 425 520 520 641 485 571 b 362 487 406 504 384 493 b 383 556 377 506 385 530 b 273 652 379 613 330 656 b 178 542 217 648 174 599 b 249 451 181 499 210 464 b 329 440 272 442 300 438 b 451 489 370 443 414 458 b 498 541 468 504 484 522 l 441 310 b 335 150 434 290 390 197 b 271 117 316 134 294 123 b 292 186 286 136 294 160 b 183 282 289 243 239 285 b 88 172 126 278 84 229 b 159 81 91 129 120 94 b 239 70 182 72 209 68 b 360 119 280 73 323 88 b 407 171 377 134 393 152 l 354 -47 b 247 -208 348 -60 303 -160 b 184 -241 228 -224 206 -235 b 205 -171 199 -222 207 -197 b 95 -76 201 -115 152 -72 b 0 -186 39 -80 -4 -129 b 71 -276 3 -229 32 -264 b 151 -287 94 -285 122 -290 b 273 -238 192 -285 236 -270 b 320 -186 290 -224 306 -206 l 189 -721 l 228 -730 l 562 637 b 549 661 565 648 560 658 z\"\n    },\n    \"rest64th\": {\n      \"x_min\": -0.39348479958929933,\n      \"x_max\": 422.50772023490237,\n      \"y_min\": -758.349609375,\n      \"y_max\": 463.7099168081096,\n      \"ha\": 1222.0595261831095,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 423,\n      \"o\": \"m 593 667 b 587 668 591 668 589 668 b 569 654 579 667 572 662 b 474 521 564 639 530 572 b 412 486 456 505 434 493 b 431 556 426 506 434 530 b 318 648 425 613 375 654 b 227 535 262 642 221 591 b 301 447 231 492 262 458 b 381 438 324 438 352 435 b 501 492 422 442 465 459 b 546 545 518 507 533 525 l 547 546 l 500 322 b 399 160 492 299 452 208 b 338 125 381 143 360 132 b 356 195 352 145 359 169 b 243 287 350 252 300 293 b 152 174 187 281 146 230 b 226 86 156 131 187 97 b 307 77 249 78 277 74 b 426 131 347 82 391 98 b 471 183 443 146 458 164 l 424 -45 b 324 -205 414 -70 375 -158 b 262 -240 305 -222 284 -233 b 280 -170 276 -221 283 -196 b 167 -78 274 -113 224 -72 b 76 -191 111 -84 70 -135 b 150 -280 80 -235 111 -269 b 231 -288 174 -288 201 -291 b 350 -235 271 -284 315 -267 b 395 -183 367 -220 382 -202 l 350 -398 b 348 -405 350 -399 348 -405 b 248 -565 343 -420 303 -514 b 186 -600 229 -581 208 -593 b 204 -530 200 -580 207 -555 b 91 -438 198 -473 148 -432 b 0 -551 35 -444 -6 -495 b 74 -639 4 -594 35 -628 b 155 -648 97 -647 125 -651 b 274 -594 195 -643 239 -627 b 320 -541 291 -579 307 -561 l 319 -546 l 207 -1084 l 246 -1092 l 608 644 b 593 667 610 655 603 665 z\"\n    },\n    \"rest128th\": {\n      \"x_min\": -0.3922883924783287,\n      \"x_max\": 475.40811085990237,\n      \"y_min\": -758.349609375,\n      \"y_max\": 717.5106980581096,\n      \"ha\": 1475.8603074331095,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 475,\n      \"o\": \"m 669 1033 b 663 1033 667 1033 665 1033 b 645 1019 655 1033 648 1027 b 550 887 641 1004 606 938 b 488 851 532 870 510 858 b 507 922 502 871 510 896 b 394 1013 501 978 450 1019 b 302 900 337 1007 296 957 b 377 812 307 857 337 823 b 457 804 400 804 428 801 b 577 857 498 808 541 824 b 623 910 594 872 609 891 l 623 912 l 576 688 b 475 526 568 664 528 573 b 413 490 457 509 435 497 b 432 561 427 510 435 535 b 319 652 426 617 375 658 b 227 539 263 646 221 596 b 302 451 232 496 263 462 b 382 443 325 443 353 440 b 502 496 423 447 466 463 b 547 549 519 511 534 529 l 500 320 b 399 160 490 295 451 207 b 337 125 381 143 359 132 b 356 195 352 145 359 169 b 243 287 350 252 300 293 b 151 174 187 281 146 230 b 226 86 156 131 187 97 b 306 77 249 78 277 74 b 426 131 347 82 391 98 b 471 183 443 145 457 164 l 426 -33 b 424 -40 426 -33 424 -40 b 323 -200 419 -55 379 -149 b 261 -235 305 -216 283 -228 b 280 -164 275 -215 283 -190 b 167 -73 274 -108 223 -67 b 75 -186 110 -79 69 -129 b 150 -274 80 -229 110 -263 b 230 -282 173 -282 201 -285 b 350 -229 271 -278 314 -262 b 396 -176 367 -214 383 -195 l 395 -180 l 349 -403 b 248 -565 340 -426 301 -517 b 186 -600 230 -582 208 -593 b 205 -530 200 -581 207 -556 b 92 -438 199 -473 148 -432 b 0 -551 35 -444 -6 -495 b 75 -639 4 -594 35 -628 b 155 -648 98 -648 126 -651 b 275 -595 196 -644 239 -627 b 320 -542 291 -580 306 -561 l 207 -1084 l 246 -1092 l 684 1009 b 669 1033 686 1020 680 1031 z\"\n    },\n    \"dynamicPiano\": {\n      \"x_min\": -95,\n      \"x_max\": 317,\n      \"y_min\": -163,\n      \"y_max\": 263,\n      \"ha\": 426,\n      \"leftSideBearing\": -95,\n      \"advanceWidth\": 350,\n      \"o\": \"m -137 -235 l 186 -235 l 186 -206 l 78 -206 l 161 26 l 166 16 b 229 -29 166 16 180 -16 b 256 -32 238 -32 248 -32 b 445 166 336 -32 415 49 b 456 246 454 197 456 223 b 374 373 456 343 396 367 b 356 376 369 374 361 376 b 242 314 311 376 266 338 l 238 310 l 235 315 b 154 377 235 315 204 370 b 138 379 148 377 144 379 b 0 226 91 379 42 346 l 26 213 b 63 301 32 232 46 278 b 102 328 72 314 89 325 b 120 325 109 330 115 328 b 127 304 125 321 127 314 b 94 192 127 269 101 206 l -49 -206 l -137 -206 z m 226 17 b 215 19 223 17 217 17 b 187 81 193 27 187 53 b 204 180 187 125 203 177 b 297 317 217 235 259 295 b 336 324 311 325 324 327 b 350 311 341 323 347 317 b 356 278 354 302 356 291 b 333 161 356 239 341 187 b 242 20 314 105 278 37 b 226 17 238 17 230 17 z\"\n    },\n    \"dynamicMezzo\": {\n      \"x_min\": -7,\n      \"x_max\": 374,\n      \"y_min\": -2,\n      \"y_max\": 251,\n      \"ha\": 253,\n      \"leftSideBearing\": -7,\n      \"advanceWidth\": 391,\n      \"o\": \"m 488 63 b 467 48 481 50 474 48 b 459 49 464 48 462 48 b 449 65 452 52 449 58 b 461 112 449 76 455 94 b 474 157 464 121 471 150 b 492 281 482 183 492 242 b 491 301 492 288 492 295 b 436 359 484 340 467 359 b 340 307 399 359 359 331 l 337 301 l 334 308 b 272 359 334 308 311 359 b 177 310 232 359 202 343 l 173 304 l 171 311 b 117 360 171 311 153 353 b 96 361 109 361 102 361 b 29 328 60 361 39 340 b -10 252 20 318 0 284 l 12 240 b 68 318 12 240 36 318 b 75 317 71 318 72 318 b 86 295 84 314 86 307 b 59 194 86 275 75 240 b 1 20 59 193 6 33 b 0 13 1 17 0 16 b 3 4 0 10 1 7 b 14 -1 6 1 9 -1 l 36 -1 l 91 -1 b 107 22 94 -1 101 -1 b 127 99 114 53 121 79 b 235 310 132 121 186 310 b 243 305 238 310 242 308 b 248 289 246 302 248 297 b 216 160 248 265 233 219 b 173 22 194 89 173 22 l 173 16 b 176 3 173 12 173 6 b 187 -1 179 0 183 -1 l 266 -1 b 282 16 272 -1 279 0 b 284 26 282 17 284 22 b 392 302 312 228 359 288 b 396 304 393 302 395 304 l 397 304 b 400 302 399 304 399 302 b 408 289 403 301 408 297 b 369 140 408 275 399 217 b 356 75 360 117 356 95 b 370 23 356 55 360 37 b 428 -3 382 6 408 -3 b 536 99 492 -3 517 49 b 539 108 537 102 537 105 l 514 120 b 488 63 514 120 498 81 z\"\n    },\n    \"dynamicForte\": {\n      \"x_min\": -137,\n      \"x_max\": 334,\n      \"y_min\": -193,\n      \"y_max\": 421,\n      \"ha\": 614,\n      \"leftSideBearing\": -137,\n      \"advanceWidth\": 367,\n      \"o\": \"m -122 -86 b -197 -161 -161 -86 -197 -122 b -81 -278 -197 -236 -147 -278 b 35 -228 -35 -278 -1 -264 b 202 173 98 -164 167 50 b 238 297 215 219 228 264 l 238 300 l 341 300 b 356 314 350 300 356 305 l 356 346 b 341 360 356 354 350 360 l 256 360 l 256 364 b 330 554 297 511 308 537 b 366 564 346 567 360 566 b 380 553 373 563 377 559 b 373 528 384 544 380 533 b 351 478 359 517 351 498 b 354 458 351 471 353 465 b 384 426 359 445 370 432 b 410 420 390 423 400 420 b 445 431 420 420 432 423 b 478 472 459 438 474 456 b 481 497 481 480 481 488 b 467 550 481 514 477 533 b 376 605 455 572 422 598 b 351 606 369 606 360 606 b 225 553 317 606 272 595 b 122 363 187 520 154 456 l 122 360 l 13 360 b -1 346 4 360 -1 354 l -1 314 b 13 300 -1 305 4 300 l 102 300 l 102 294 b 66 140 88 236 76 187 b 24 -35 55 86 42 32 l 20 -52 b -53 -235 -10 -170 -19 -212 b -78 -242 -60 -239 -69 -242 b -98 -235 -85 -242 -92 -239 b -105 -219 -102 -232 -107 -226 b -94 -204 -104 -213 -101 -207 b -58 -144 -66 -193 -58 -167 b -122 -86 -58 -124 -71 -86 z\"\n    },\n    \"dynamicRinforzando\": {\n      \"x_min\": -12,\n      \"x_max\": 230,\n      \"y_min\": 0,\n      \"y_max\": 254,\n      \"ha\": 254,\n      \"leftSideBearing\": -12,\n      \"advanceWidth\": 247,\n      \"o\": \"m 272 364 b 200 341 239 364 212 348 b 168 310 187 333 177 321 l 164 304 b 109 363 164 304 151 353 b 88 366 102 364 95 366 b 22 331 52 366 32 343 b -17 255 13 321 -7 287 l 4 243 b 60 321 4 243 29 321 b 68 320 63 321 65 321 b 78 297 75 317 78 308 b 49 180 78 272 65 230 l 0 23 l 0 17 b 3 4 0 13 0 7 b 14 0 6 1 10 0 l 94 0 b 109 17 99 0 107 1 b 111 27 109 19 111 23 b 209 302 140 230 186 279 b 225 311 215 308 220 311 b 229 310 226 311 228 311 b 233 304 233 307 233 305 l 233 301 b 216 268 220 291 216 279 b 225 243 216 259 219 249 b 262 229 235 232 249 229 b 304 242 279 229 295 235 b 331 308 320 255 331 275 b 272 364 331 341 304 364 z\"\n    },\n    \"dynamicSforzando\": {\n      \"x_min\": 0,\n      \"x_max\": 208,\n      \"y_min\": -5,\n      \"y_max\": 263,\n      \"ha\": 268,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 208,\n      \"o\": \"m 242 328 b 217 289 222 317 217 300 b 258 249 217 274 230 249 b 298 284 285 249 295 269 b 300 295 300 287 300 291 b 189 379 300 328 272 379 b 49 259 92 379 49 315 b 99 173 49 229 59 196 b 164 137 117 163 140 151 b 194 88 189 122 194 102 b 124 24 194 73 177 24 b 72 46 82 24 72 39 b 73 49 72 48 72 49 b 96 96 78 52 96 62 b 50 150 96 134 72 150 b 0 91 29 150 0 134 b 124 -7 0 26 49 -7 b 282 111 199 -7 282 24 b 171 239 282 197 207 219 b 128 292 135 259 128 268 b 193 347 128 317 156 347 b 242 328 230 347 242 328 z\"\n    },\n    \"dynamicZ\": {\n      \"x_min\": -42,\n      \"x_max\": 239,\n      \"y_min\": -1,\n      \"y_max\": 258,\n      \"ha\": 259,\n      \"leftSideBearing\": -42,\n      \"advanceWidth\": 256,\n      \"o\": \"m 229 292 b 235 288 232 292 233 291 b 236 284 236 285 236 285 b 233 278 236 281 235 279 b -42 55 232 276 -4 85 b -60 24 -56 43 -60 33 b -50 4 -60 12 -50 4 b -35 0 -45 1 -40 0 b 9 29 -14 0 1 19 b 50 69 17 43 26 69 b 89 35 75 69 81 50 b 170 -1 104 10 137 -1 b 243 22 197 -1 223 6 b 304 147 288 56 304 118 b 264 196 304 176 294 196 b 226 156 239 196 226 174 b 251 117 226 128 249 122 l 251 108 b 243 79 251 98 249 88 b 212 56 236 68 223 56 b 202 59 209 56 204 56 b 163 92 194 63 186 75 b 108 122 140 109 114 120 b 105 125 105 124 105 124 b 107 128 105 127 107 128 b 312 304 107 128 302 294 b 341 340 324 315 336 327 b 344 347 343 341 344 346 l 344 356 b 333 369 343 367 336 369 l 331 369 l 262 363 b 217 361 245 361 230 361 b 156 366 193 361 174 363 b 114 372 147 367 125 372 b 107 370 111 372 108 370 b 86 344 98 367 89 360 b 37 222 72 265 42 232 l 37 219 b 50 207 37 213 43 207 l 66 207 b 81 225 75 207 76 215 b 108 291 85 235 105 285 b 118 297 111 297 112 297 b 167 289 125 295 144 291 l 181 289 b 229 292 202 289 222 291 z\"\n    },\n    \"ornamentTrill\": {\n      \"x_min\": -12,\n      \"x_max\": 383,\n      \"y_min\": 0,\n      \"y_max\": 383,\n      \"ha\": 383,\n      \"leftSideBearing\": -12,\n      \"advanceWidth\": 433,\n      \"o\": \"m 464 396 b 376 359 408 396 376 359 l 364 370 b 346 377 357 377 346 377 l 197 377 l 246 528 b 226 552 249 539 238 552 l 213 552 b 199 544 209 552 202 547 b 124 482 196 541 130 487 b 117 471 118 478 117 471 b 84 377 117 471 102 431 l 3 377 b -17 360 -14 377 -17 360 l -17 341 b 3 324 -17 325 3 324 l 66 324 b 0 85 35 229 0 117 b 92 0 0 16 48 0 b 186 35 137 0 186 35 b 194 13 186 35 190 24 b 212 0 199 1 212 0 l 276 0 b 298 16 295 0 298 16 l 298 43 b 321 147 298 75 321 147 l 382 284 b 412 325 382 284 396 311 b 452 340 428 338 445 344 b 428 288 432 327 428 305 b 485 233 428 271 446 233 b 552 308 534 233 552 264 b 464 396 552 353 520 396 z m 222 143 b 147 78 210 104 171 78 b 137 79 143 78 140 78 b 121 115 125 85 121 99 b 137 190 121 148 137 190 l 180 324 l 275 324 b 279 320 279 324 279 320 b 222 143 279 320 235 187 z\"\n    },\n    \"ornamentTurn\": {\n      \"x_min\": 0,\n      \"x_max\": 456,\n      \"y_min\": 0,\n      \"y_max\": 232,\n      \"ha\": 232,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 456,\n      \"o\": \"m 527 334 b 442 269 488 334 442 312 b 501 204 442 228 468 204 b 570 226 533 204 540 226 b 613 164 598 226 613 204 l 613 163 b 550 98 613 127 586 98 b 448 143 508 98 485 109 l 328 255 l 298 284 b 174 334 262 317 223 334 b 0 170 92 334 0 278 b 131 0 0 68 58 0 b 215 65 170 0 215 22 b 156 130 215 107 189 130 b 86 108 124 130 117 108 b 43 170 59 108 43 130 l 43 171 b 108 236 43 207 72 236 b 209 192 150 236 171 225 l 328 79 l 360 50 b 482 0 396 17 433 0 b 657 164 564 0 657 56 b 527 334 657 266 600 334 z\"\n    },\n    \"ornamentTurnSlash\": {\n      \"x_min\": 0,\n      \"x_max\": 456,\n      \"y_min\": -80,\n      \"y_max\": 313,\n      \"ha\": 393,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 456,\n      \"o\": \"m 527 334 b 442 269 488 334 442 312 b 501 204 442 228 468 204 b 570 226 533 204 540 226 b 613 164 598 226 613 204 l 613 163 b 550 98 613 127 586 98 b 448 143 508 98 485 109 l 354 230 l 354 431 b 336 451 354 442 347 451 l 323 451 b 302 431 311 451 302 442 l 302 279 l 298 284 b 174 334 262 317 223 334 b 0 170 92 334 0 278 b 131 0 0 68 58 0 b 215 65 170 0 215 22 b 156 130 215 107 189 130 b 86 108 124 130 117 108 b 43 170 59 108 43 130 l 43 171 b 108 236 43 207 72 236 b 209 192 150 236 171 225 l 302 104 l 302 -96 b 323 -115 302 -108 311 -115 l 336 -115 b 354 -96 347 -115 354 -108 l 354 55 l 360 50 b 482 0 396 17 433 0 b 657 164 564 0 657 56 b 527 334 657 266 600 334 z\"\n    },\n    \"ornamentMordent\": {\n      \"x_min\": 0,\n      \"x_max\": 473,\n      \"y_min\": -77,\n      \"y_max\": 316,\n      \"ha\": 393,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 473,\n      \"o\": \"m 681 281 l 647 302 l 562 166 l 446 347 b 429 357 444 353 435 357 b 413 347 423 357 416 353 l 363 262 l 363 435 b 343 455 363 446 354 455 l 331 455 b 311 435 320 455 311 446 l 311 173 l 310 171 l 203 347 b 186 357 200 353 192 357 b 168 347 180 357 171 353 l 0 69 l 35 48 l 120 189 l 226 10 b 243 0 229 4 238 0 b 261 10 249 0 258 4 l 311 95 l 311 -91 b 331 -111 311 -102 320 -111 l 343 -111 b 363 -91 354 -111 363 -102 l 363 184 l 366 189 l 478 10 b 495 0 481 4 490 0 b 513 10 501 0 510 4 z\"\n    },\n    \"ornamentShortTrill\": {\n      \"x_min\": 0,\n      \"x_max\": 473,\n      \"y_min\": 0,\n      \"y_max\": 248,\n      \"ha\": 248,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 473,\n      \"o\": \"m 681 281 l 647 302 l 562 166 l 446 347 b 431 357 444 353 436 357 b 413 347 425 357 416 353 l 310 171 l 203 347 b 186 357 200 353 192 357 b 168 347 180 357 173 353 l 0 69 l 35 48 l 120 189 l 226 10 b 243 0 229 4 238 0 b 261 10 249 0 258 4 l 366 189 l 478 9 b 495 0 481 3 490 0 b 513 10 501 0 510 4 z\"\n    },\n    \"ornamentTremblement\": {\n      \"x_min\": 0,\n      \"x_max\": 654,\n      \"y_min\": 0,\n      \"y_max\": 248,\n      \"ha\": 248,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 654,\n      \"o\": \"m 942 282 l 907 302 l 822 166 l 708 348 b 691 357 704 354 701 357 b 674 347 685 357 677 353 l 648 302 l 563 166 l 449 348 b 432 357 446 354 438 357 b 415 347 426 357 418 353 l 415 346 l 311 171 l 203 348 b 186 357 200 354 192 357 b 168 348 177 357 171 354 l 168 347 l 0 69 l 35 48 l 120 190 l 226 10 b 243 0 229 4 238 0 l 245 0 b 261 10 251 0 258 4 l 367 189 l 480 10 b 497 0 482 4 491 0 b 513 10 503 0 510 4 l 625 192 l 739 10 b 756 0 742 4 750 0 b 772 10 762 0 769 4 z\"\n    },\n    \"ornamentPrecompAppoggTrill\": {\n      \"x_min\": 0,\n      \"x_max\": 680,\n      \"y_min\": 0,\n      \"y_max\": 388,\n      \"ha\": 388,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 680,\n      \"o\": \"m 945 307 l 860 170 l 746 353 b 729 361 743 359 737 361 b 713 351 723 361 716 357 l 685 307 l 600 170 l 487 353 b 481 359 485 356 484 357 b 469 361 478 360 472 361 b 452 351 464 361 455 357 l 348 176 l 240 353 b 223 361 238 359 229 361 b 206 353 215 361 209 359 l 40 76 l 40 541 b 20 559 39 552 30 559 b 0 541 10 559 1 552 l 0 26 b 19 1 0 16 9 4 b 26 0 20 1 24 0 b 48 13 35 0 43 6 l 72 52 l 157 194 l 265 14 b 282 4 268 9 276 4 b 298 14 288 4 295 9 l 405 193 l 517 14 b 534 4 520 9 528 4 b 550 14 540 4 547 9 l 664 196 l 776 14 b 793 4 779 9 788 4 b 811 14 799 4 808 9 l 979 287 z\"\n    },\n    \"ornamentPrecompSlideTrillDAnglebert\": {\n      \"x_min\": 0.23333479818886538,\n      \"x_max\": 662,\n      \"y_min\": -158.30859375,\n      \"y_max\": 248.2998046875,\n      \"ha\": 406.6083984375,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 662,\n      \"o\": \"m 919 303 l 834 166 l 721 348 b 704 358 717 354 712 357 b 687 348 697 357 690 353 l 660 303 l 660 303 l 575 166 l 461 348 b 454 355 460 351 457 353 b 444 358 452 356 447 358 b 427 348 438 358 430 353 l 323 172 l 215 347 b 213 350 215 348 214 349 b 213 350 213 350 213 350 l 212 351 l 211 352 l 211 353 l 210 353 l 210 353 l 208 354 b 208 355 208 354 208 355 b 198 357 205 356 201 357 l 198 357 b 180 348 189 358 184 354 l 179 345 l 69 164 b 49 -218 -15 23 -22 -98 b 66 -228 52 -224 60 -228 b 76 -225 69 -228 73 -227 b 86 -208 81 -222 86 -214 b 83 -198 86 -205 85 -200 b 103 143 21 -92 27 17 l 131 190 l 239 10 b 256 0 242 4 249 0 l 256 0 b 273 10 262 0 270 5 l 379 189 l 491 10 b 508 0 494 4 502 0 l 508 0 l 508 0 b 525 10 514 0 522 4 l 637 191 l 751 10 b 768 0 754 4 761 0 l 768 0 b 784 10 774 0 781 4 l 785 10 l 953 282 z\"\n    },\n    \"ornamentPrecompSlideTrillBach\": {\n      \"x_min\": 0.2186051563662117,\n      \"x_max\": 662,\n      \"y_min\": -158,\n      \"y_max\": 321,\n      \"ha\": 479,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 662,\n      \"o\": \"m 919 302 l 834 166 l 720 348 b 704 357 716 354 713 357 b 687 348 698 357 690 354 l 660 304 l 660 302 l 632 259 l 632 442 b 612 462 632 454 624 462 l 599 462 b 579 442 588 462 579 454 l 579 173 l 575 166 l 461 348 b 455 356 459 351 458 354 b 445 359 452 357 448 359 b 428 348 439 359 431 354 l 323 171 l 215 347 b 213 350 215 348 213 350 l 213 351 l 212 353 l 210 353 l 210 354 l 207 354 b 197 357 204 356 200 357 b 180 348 189 357 183 354 l 179 346 l 69 164 b 49 -217 -16 24 -22 -96 b 66 -228 52 -223 60 -228 b 76 -225 69 -228 73 -226 b 86 -207 82 -222 86 -213 b 84 -197 86 -204 85 -200 b 104 144 22 -91 27 17 l 131 190 l 239 10 b 256 0 242 4 251 0 b 274 10 262 0 271 4 l 379 190 l 491 10 b 508 0 494 4 503 0 b 526 10 514 0 523 4 l 579 98 l 579 -84 b 599 -104 579 -95 588 -104 l 612 -104 b 632 -84 624 -104 632 -95 l 632 183 l 638 192 l 750 10 b 768 0 753 4 762 0 b 785 10 773 0 782 4 l 953 282 z\"\n    },\n    \"ornamentPrecompTrillSuffixDandrieu\": {\n      \"x_min\": 0,\n      \"x_max\": 661.7813948436337,\n      \"y_min\": 0,\n      \"y_max\": 406,\n      \"ha\": 406,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 662,\n      \"o\": \"m 904 575 b 887 585 901 580 893 585 b 877 582 884 585 880 583 b 867 564 871 579 867 570 b 870 554 867 562 868 557 b 850 213 932 448 926 340 l 822 167 l 714 348 b 697 357 711 354 703 357 b 680 348 691 357 683 354 l 575 168 l 462 348 b 445 357 459 354 451 357 b 428 348 439 357 431 354 l 315 167 l 203 348 b 186 357 200 354 192 357 b 168 348 180 357 171 354 l 0 76 l 35 55 l 120 192 l 233 10 b 249 0 238 4 240 0 b 266 10 255 0 264 4 l 294 55 l 379 192 l 492 9 b 498 3 494 6 495 4 b 508 0 501 1 505 0 b 526 10 514 0 523 4 l 631 186 l 737 13 b 746 3 739 10 743 4 b 756 0 749 1 753 0 b 773 9 762 0 770 3 l 884 193 b 904 575 969 333 975 454 z\"\n    },\n    \"ornamentPrecompTrillLowerSuffix\": {\n      \"x_min\": 0,\n      \"x_max\": 721.4072261045861,\n      \"y_min\": -171,\n      \"y_max\": 249,\n      \"ha\": 420,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 722,\n      \"o\": \"m 937 312 b 923 320 935 317 927 320 b 910 314 919 320 913 317 l 906 310 l 821 170 l 714 348 b 697 359 711 354 703 359 b 680 348 691 359 683 354 l 575 168 l 462 348 b 445 359 459 354 451 359 b 428 348 439 359 431 354 l 315 167 l 203 348 b 186 359 200 354 192 359 b 168 348 180 359 171 354 l 0 76 l 35 55 l 118 192 l 233 10 b 249 0 236 4 240 0 b 266 10 255 0 264 4 l 294 55 l 379 192 l 492 10 b 498 3 494 7 495 4 b 508 0 501 1 505 0 b 526 10 514 0 523 4 l 631 186 l 739 10 b 756 0 742 4 750 0 b 773 10 765 0 770 4 l 818 85 l 926 265 b 927 -215 1012 145 1037 -62 b 923 -226 926 -217 923 -223 b 932 -242 923 -232 927 -239 b 943 -246 935 -243 940 -246 b 959 -238 949 -246 956 -242 b 937 312 1087 -59 1047 187 z\"\n    },\n    \"stringsDownBow\": {\n      \"x_min\": 0,\n      \"x_max\": 315,\n      \"y_min\": 0,\n      \"y_max\": 293,\n      \"ha\": 293,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 315,\n      \"o\": \"m 0 0 l 40 0 l 40 291 l 413 291 l 413 0 l 454 0 l 454 402 b 433 422 454 413 445 422 l 20 422 b 0 402 9 422 0 402 z\"\n    },\n    \"stringsUpBow\": {\n      \"x_min\": 0,\n      \"x_max\": 262,\n      \"y_min\": 0,\n      \"y_max\": 343,\n      \"ha\": 343,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 262,\n      \"o\": \"m 374 485 b 357 494 372 490 363 494 l 337 494 b 318 481 330 494 321 488 l 189 118 l 59 481 b 40 494 56 488 48 494 l 20 494 b 0 474 9 494 0 485 b 1 467 0 472 1 468 l 170 13 b 189 0 173 6 181 0 b 207 13 196 0 204 6 l 376 467 b 377 474 376 468 377 472 b 374 485 377 477 376 482 z\"\n    },\n    \"stringsHarmonic\": {\n      \"x_min\": 0,\n      \"x_max\": 181,\n      \"y_min\": 0,\n      \"y_max\": 181,\n      \"ha\": 181,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 181,\n      \"o\": \"m 131 220 b 220 131 181 220 220 181 b 131 40 220 81 181 40 b 40 131 81 40 40 81 b 131 220 40 181 81 220 z m 131 261 b 0 131 59 261 0 203 b 131 0 0 59 59 0 b 261 131 203 0 261 59 b 131 261 261 203 203 261 z\"\n    },\n    \"pluckedSnapPizzicatoAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 269,\n      \"y_min\": 0,\n      \"y_max\": 389.099609375,\n      \"ha\": 389.099609375,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 269,\n      \"o\": \"m 214 386 l 214 540 b 194 560 214 551 205 560 b 174 540 183 560 174 551 l 174 386 b 0 193 76 376 0 293 b 194 0 0 87 87 0 b 387 193 301 0 387 87 b 214 386 387 293 311 376 z m 194 40 b 40 193 109 40 40 109 b 174 346 40 271 98 336 l 174 193 b 194 173 174 182 183 173 b 214 193 205 173 214 182 l 214 346 b 347 193 289 336 347 271 b 194 40 347 109 278 40 z\"\n    },\n    \"pluckedSnapPizzicatoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 269,\n      \"y_min\": 0,\n      \"y_max\": 389.099609375,\n      \"ha\": 389.099609375,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 269,\n      \"o\": \"m 214 175 b 387 367 311 184 387 267 b 194 560 387 473 301 560 b 0 367 87 560 0 473 b 174 175 0 267 76 184 l 174 20 b 194 0 174 9 183 0 b 214 20 205 0 214 9 z m 194 520 b 347 367 278 520 347 452 b 214 215 347 289 289 224 l 214 367 b 194 387 214 378 205 387 b 174 367 183 387 174 378 l 174 215 b 40 367 98 224 40 289 b 194 520 40 452 109 520 z\"\n    },\n    \"keyboardPedalPed\": {\n      \"x_min\": 0,\n      \"x_max\": 981,\n      \"y_min\": -9.677302194242635,\n      \"y_max\": 545.0234210524716,\n      \"ha\": 554.7007232467142,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 981,\n      \"o\": \"m 272 452 b 372 323 297 416 350 354 b 350 222 395 292 395 260 b 230 140 301 180 252 154 b 135 12 212 128 99 80 b 264 40 164 -46 232 7 b 332 98 281 58 303 98 b 389 39 358 98 373 61 b 478 -11 417 1 435 -11 b 622 97 527 -11 559 44 b 740 -10 622 97 666 -10 b 928 95 827 -10 928 95 b 1120 -7 955 27 1042 -28 b 1262 247 1222 21 1275 132 b 815 664 1228 545 907 647 b 758 653 790 668 761 676 b 786 618 755 631 786 618 b 818 606 797 614 808 610 b 1072 434 1007 534 1072 434 b 910 142 900 376 905 198 b 787 78 898 126 844 78 b 708 151 726 78 708 151 b 799 231 708 151 742 181 b 758 457 920 335 850 457 b 609 141 613 457 580 249 b 563 104 609 141 594 123 b 460 139 533 85 486 111 b 398 184 413 189 398 184 b 476 279 398 184 453 226 b 449 410 499 332 449 410 b 362 533 449 410 383 503 b 386 652 341 564 366 611 b 429 713 405 692 429 713 b 549 569 549 682 574 589 b 460 592 514 541 473 581 b 409 608 447 603 429 622 b 408 552 390 593 400 571 b 608 479 458 455 549 438 b 429 778 682 531 672 734 b 0 507 160 827 0 615 b 124 365 0 431 55 365 b 246 498 124 365 236 362 b 221 545 248 535 232 543 b 185 510 209 546 192 540 b 133 465 178 474 159 461 b 140 614 101 469 82 532 b 356 721 220 723 356 721 b 276 560 356 721 298 617 b 272 452 276 560 242 495 z m 751 393 b 771 286 797 393 811 331 b 692 203 738 249 692 203 b 751 393 678 324 705 393 z m 1092 88 b 1004 203 1043 78 1004 132 b 1108 376 1004 360 1108 376 b 1149 209 1129 335 1149 287 b 1092 88 1148 117 1130 96 z m 1353 11 b 1413 78 1386 11 1413 41 b 1353 145 1413 115 1386 145 b 1293 78 1320 145 1293 115 b 1353 11 1293 41 1320 11 z\"\n    },\n    \"keyboardPedalUp\": {\n      \"x_min\": 0,\n      \"x_max\": 473,\n      \"y_min\": 0,\n      \"y_max\": 473,\n      \"ha\": 473,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 473,\n      \"o\": \"m 99 99 b 164 69 120 79 143 69 b 199 82 177 69 190 73 b 210 114 206 89 210 102 b 206 137 210 122 209 130 b 200 160 203 145 200 154 b 210 179 200 166 203 171 l 245 215 b 285 213 255 225 272 219 l 287 213 l 288 212 b 318 183 301 206 318 196 l 318 134 b 291 102 318 112 308 112 b 258 58 274 92 258 76 b 340 0 258 26 294 0 b 423 58 386 0 423 26 b 390 102 423 76 408 92 b 361 134 373 112 361 112 l 361 183 b 392 212 361 196 379 206 b 395 213 393 212 393 213 b 436 215 408 219 426 225 l 471 179 b 480 161 478 171 480 167 b 474 137 480 154 477 147 b 471 115 472 130 471 122 b 482 82 471 102 474 91 b 517 69 491 73 504 69 b 582 99 539 69 562 79 b 612 164 602 120 612 143 b 599 199 612 177 608 190 b 567 210 592 206 579 210 b 544 206 559 210 552 209 b 521 200 536 203 528 200 b 501 210 514 200 508 203 l 467 245 b 468 285 456 255 462 272 l 468 287 b 469 288 468 287 469 287 b 498 318 475 301 485 318 l 547 318 b 579 291 569 318 569 308 b 624 258 589 274 605 258 b 681 340 655 258 681 294 b 624 423 681 386 655 423 b 579 390 605 423 589 408 b 547 361 569 373 569 361 l 498 361 b 469 392 485 361 475 379 b 468 395 469 393 468 393 b 467 436 462 408 456 426 l 501 471 b 520 480 508 478 514 480 b 544 474 527 480 534 477 b 566 471 552 472 559 471 b 599 482 579 471 590 474 b 612 516 608 491 612 503 b 582 580 612 536 602 560 b 516 612 562 600 537 612 b 482 599 503 612 491 608 b 471 566 474 590 471 579 b 474 544 471 559 472 552 b 480 520 477 534 480 527 b 471 501 480 514 478 508 l 436 467 b 395 468 426 456 408 462 b 392 469 393 468 393 469 b 361 498 379 475 361 485 l 361 547 b 390 579 361 569 373 569 b 423 624 408 589 423 605 b 340 681 423 655 386 681 b 258 624 294 681 258 655 b 291 579 258 605 274 589 b 318 547 308 569 318 569 l 318 498 b 288 469 318 485 301 475 l 287 468 l 285 468 b 245 467 272 462 255 456 l 210 501 b 200 521 203 508 200 514 b 206 544 200 528 203 536 b 210 567 209 552 210 559 b 199 599 210 579 206 592 b 164 612 190 608 177 612 b 99 582 143 612 120 602 b 69 517 79 562 69 539 b 82 482 69 504 73 491 b 115 471 91 474 102 471 b 137 474 122 471 130 472 b 161 480 147 477 154 480 b 180 471 167 480 173 478 l 215 436 b 213 395 225 426 219 408 b 212 392 213 393 212 393 b 183 361 206 379 196 361 l 134 361 b 102 390 112 361 112 373 b 58 423 92 408 76 423 b 0 340 26 423 0 386 b 58 258 0 294 26 258 b 102 291 76 258 92 274 b 134 318 112 308 112 318 l 183 318 b 212 288 196 318 206 301 b 213 287 212 287 213 288 l 213 285 b 215 245 219 272 225 255 l 179 210 b 160 200 171 203 166 200 b 137 206 154 200 145 203 b 114 210 130 209 122 210 b 82 199 102 210 89 206 b 69 164 73 190 69 177 b 99 99 69 143 79 120 z m 276 276 b 249 340 262 291 249 320 b 340 432 249 390 289 432 b 432 340 390 432 432 390 b 405 276 432 320 419 291 b 340 249 390 262 360 249 b 276 276 320 249 291 262 z\"\n    },\n    \"wiggleArpeggiatoUp\": {\n      \"x_min\": -22,\n      \"x_max\": 242,\n      \"y_min\": 0,\n      \"y_max\": 164,\n      \"ha\": 164,\n      \"leftSideBearing\": -22,\n      \"advanceWidth\": 220,\n      \"o\": \"m 343 122 b 323 143 343 122 334 132 b 308 148 318 147 312 148 b 298 144 304 148 301 147 l 282 128 b 274 124 279 125 276 124 b 265 128 268 124 265 128 b 158 220 265 128 173 207 b 112 236 143 232 127 236 b 43 206 82 236 55 219 l -26 137 b -32 125 -30 132 -32 130 b -26 112 -32 118 -26 112 b -6 92 -26 112 -17 102 b 7 86 -1 88 3 86 b 17 91 12 86 14 88 l 33 107 b 42 111 36 109 39 111 b 52 107 48 111 52 107 b 158 16 52 107 144 29 b 204 0 174 4 190 0 b 274 30 235 0 262 17 l 343 99 b 348 111 347 104 348 108 b 343 122 348 118 343 122 z\"\n    },\n    \"brassMuteClosed\": {\n      \"x_min\": 0,\n      \"x_max\": 312,\n      \"y_min\": 0,\n      \"y_max\": 312,\n      \"ha\": 312,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 312,\n      \"o\": \"m 22 256 b 0 225 7 256 0 240 b 22 193 0 209 7 193 l 193 193 l 193 22 b 225 0 193 7 209 0 b 256 22 240 0 256 7 l 256 193 l 428 193 b 449 225 442 193 449 209 b 428 256 449 240 442 256 l 256 256 l 256 428 b 225 449 256 442 240 449 b 193 428 209 449 193 442 l 193 256 z\"\n    }\n  },\n  \"fontFamily\": \"Leland\",\n  \"resolution\": 1000,\n  \"generatedOn\": \"2021-02-15T19:00:18.664Z\"\n};\n","export const LelandMetrics = {\n  name: 'Leland',\n  smufl: true,\n\n  stave: {\n    padding: 12,\n    endPaddingMax: 12,\n    endPaddingMin: 6,\n    unalignedNotePadding: 10\n  },\n\n  clef: {\n    default: {\n      point: 32,\n      width: 26,\n    },\n    small: {\n      point: 26,\n      width: 20,\n    },\n\n    annotations: {\n      '8va': {\n        smuflCode: 'timeSig8',\n        default: {\n          point: 18,\n          treble: {\n            line: -1.4,\n            shiftX: 12,\n          },\n        },\n        small: {\n          point: 16,\n          treble: {\n            line: -0.2,\n            shiftX: 8,\n          },\n        }\n      },\n      '8vb': {\n        smuflCode: 'timeSig8',\n        default: {\n          point: 18,\n          treble: {\n            line: 6,\n            shiftX: 10,\n          },\n          bass: {\n            line: 3.5,\n            shiftX: 1,\n          }\n        },\n        small: {\n          point: 16,\n          treble: {\n            line: 5.3,\n            shiftX: 6,\n          },\n          bass: {\n            line: 3.1,\n            shiftX: 0.5,\n          }\n        }\n      }\n    },\n    // These may no longer be necessary\n    lineCount: {\n      '8': { point: 55, shiftY: 14 },\n      '7': { point: 47, shiftY: 8 },\n      '6': { point: 32, shiftY: 1 },\n      '5': { point: 30, shiftY: -6 },\n      '4': { point: 23, shiftY: -12 },\n    }\n  },\n  pedalMarking: {\n    up: {\n      point: 40\n    },\n    down: {\n      point: 34\n    }\n  },\n\n  // These are for numeric digits, such as in time signatures\n  digits: {\n    // used by timesig\n    shiftLine: -1,\n    point: 34,\n\n    // used by tuplets\n    tupletPoint: 22,\n    shiftY: -6,\n  },\n\n  articulation: {\n    articStaccatissimoAbove: {\n      padding: 2,\n    },\n    articStaccatissimoBelow: {\n      padding: 2,\n    }\n  },\n\n  tremolo: {\n    default: {\n      point: 25,\n      spacing: 5,\n      offsetYStemUp: -5,\n      offsetYStemDown: 5,\n      offsetXStemUp: 11,\n      offsetXStemDown: 1,\n    },\n    grace: {\n      point: 18,\n      spacing: 4,\n      offsetYStemUp: -5,\n      offsetYStemDown: 5,\n      offsetXStemUp: 7,\n      offsetXStemDown: 1,\n    }\n  },\n\n  stem: {\n    // These are stem (Y) offsets to the note heads. To shift the\n    // noteheads (x-position) themselves, see glyphs.notehead.custom.\n    noteHead: {\n      noteheadTriangleUpHalf: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadTriangleUpBlack: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadTriangleUpWhole: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXHalf: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXBlack: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXWhole: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadBlack: {\n        offsetYBaseStemDown: 2,\n      },\n      noteheadSquareWhite: {\n        offsetYBaseStemDown: -5,\n        offsetYBaseStemUp: 5,\n      }\n    }\n  },\n\n  // Values under here are used by the Glyph class to reposition and rescale\n  // glyphs based on their category. This should be the first stop for\n  // custom font glyph repositioning.\n  //\n  // The glyph loader first looks up a specific set of settings based on the\n  // glyph code, and if not found, uses the defaults from the category. See\n  // glyphs.textNote for an example of this.\n  //\n  // Details in Glyph.lookupFontMetrics.\n  glyphs: {\n    coda: {\n      point: 20,\n      shiftX: -7,\n      shiftY: 8,\n    },\n    segno: {\n      shiftX: -7,\n    },\n    flag: {\n      shiftX: -0.75,\n      tabStem: {\n        shiftX: -1.75,\n      },\n      staveTempo: {\n        shiftX: -1,\n      }\n    },\n    clef: {\n      gClef: {\n        default: { scale: 1.1, shiftY: 1 },\n        small: { shiftY: 1.5 }\n      },\n      fClef: {\n        default: { shiftY: -0.5 }\n      }\n    },\n    ornament: {\n      ornamentTurn: {\n        scale: 1.2,\n      },\n      ornamentTurnSlash: {\n        scale: 1.2,\n      },\n    },\n    stroke: {\n      arrowheadBlackDown: {\n        straight: {\n          shiftX: -4.5,\n        },\n        wiggly: {\n          shiftX: -1,\n          shiftY: 1,\n        }\n      },\n      arrowheadBlackUp: {\n        straight: {\n          shiftX: -0.85,\n        },\n        wiggly: {\n          shiftX: -1,\n          shiftY: 1,\n        }\n      }\n    },\n    textNote: {\n      point: 34,\n      breathMarkTick: {\n        point: 36,\n        shiftY: 9,\n      },\n      breathMarkComma: {\n        point: 36,\n      },\n      segno: {\n        point: 30,\n        shiftX: -7,\n        shiftY: 8,\n      },\n      coda: {\n        point: 20,\n        shiftX: -7,\n        shiftY: 8,\n      },\n      ornamentTrill: {\n        shiftX: -8,\n        shiftY: 8,\n      },\n      ornamentTurn: {\n        point: 42,\n      },\n      ornamentTurnSlash: {\n        point: 42,\n      },\n      ornamentMordent: {\n        shiftX: -8,\n      },\n      ornamentShortTrill: {\n        shiftX: -8,\n      }\n    },\n    noteHead: {\n      standard: {\n        restQuarterStemUp: {\n          point: 35,\n        },\n        restQuarterStemDown: {\n          point: 35,\n        },\n      },\n      custom: {\n        'noteheadCircleXStemUp': {\n          shiftX: 1.5,\n        },\n        'noteheadCircleXStemDown': {\n          shiftX: 0.25,\n        },\n        'noteheadDiamondHalfStemUp': {\n          shiftX: 1.5,\n        },\n        'noteheadDiamondBlackStemUp': {\n          shiftX: 1.5,\n        },\n        'noteheadDiamondWholeStemUp': {\n          shiftX: 1,\n        },\n        'noteheadXHalfStemUp': {\n          shiftX: -2,\n        },\n        'noteheadXHalfStemDown': {\n          shiftX: 1,\n        },\n        'noteheadXWholeStemUp': {\n          shiftX: -4,\n        },\n        'noteheadXWholeStemDown': {\n          shiftX: 1,\n        },\n        'noteheadSquareWhiteStemDown': {\n          shiftX: 0.25,\n        },\n        'noteheadSquareWhiteStemUp': {\n          shiftX: -0.75,\n        },\n        'noteheadSquareBlackStemUp': {\n          shiftX: -0.75,\n        },\n        'noteheadTriangleUpWholeStemUp': {\n          shiftX: -0.75,\n        }\n      },\n    },\n    chordSymbol: {\n      global: {\n        superscriptOffset: -400,\n        subscriptOffset: 300,\n        kerningOffset: -250,\n        lowerKerningText:  ['D', 'F', 'P', 'T', 'V', 'Y'],\n        upperKerningText:  ['A', 'L'],\n        spacing: 100,\n        superSubRatio: 0.66\n      },\n      csymDiminished: {\n        scale: 0.8,\n        leftSideBearing: -32,\n        advanceWidth: 506,\n        yOffset: 0\n      },\n      csymHalfDiminished: {\n        scale: 0.8,\n        leftSideBearing: -32,\n        advanceWidth: 506,\n        yOffset: 0\n      },\n      csymAugmented: {\n        scale: 1,\n        leftSideBearing: 0,\n        advanceWidth: 530,\n        yOffset: 0\n      },\n      csymParensLeftTall: {\n        scale: 0.8,\n        leftSideBearing: -20,\n        advanceWidth: 184,\n        yOffset: 250\n      },\n      csymParensRightTall: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 189,\n        yOffset: 250\n      },\n      csymBracketLeftTall: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 328,\n        yOffset: 0\n      },\n      csymBracketRightTall: {\n        scale: 0.8,\n        leftSideBearing: 1,\n        advanceWidth: 600,\n        yOffset: 0\n      },\n      csymParensLeftVeryTall: {\n        scale: 0.9,\n        leftSideBearing: 50,\n        advanceWidth: 121,\n        yOffset: 350\n      },\n      csymParensRightVeryTall: {\n        scale: 0.9,\n        leftSideBearing: 0,\n        advanceWidth: 111,\n        yOffset: 350\n      },\n      csymDiagonalArrangementSlash: {\n        scale: 0.6,\n        leftSideBearing: -1,\n        advanceWidth: 990,\n        yOffset: 0\n      },\n      csymMinor: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 482,\n        yOffset: 0\n      },\n      csymMajorSeventh: {\n        scale: 0.9,\n        leftSideBearing: 200,\n        yOffset: 0,\n        advanceWidth: 600\n      },\n      accidentalSharp: {\n        scale: 0.75,\n        leftSideBearing: 20,\n        advanceWidth: 250,\n        yOffset: -302\n      },\n      accidentalFlat: {\n        scale: 0.9,\n        leftSideBearing: -20,\n        advanceWidth: 226,\n        yOffset: -184\n      }\n    },\n    jazzOrnaments: {\n      brassScoop: {\n        scale: 1.0,\n        xOffset: -12,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 10\n      },\n      brassDoitMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth:15\n      },\n      brassFallLipShort: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 5\n      },\n      brassLiftMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 5,\n        stemUpYOffset: 0,\n        reportedWidth: 5\n      },\n      brassFallRoughMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 28,\n        stemUpYOffset: 0,\n        reportedWidth: 5\n      },\n      brassBend: {\n        scale: 1.0,\n        xOffset: 2,\n        yOffset: -8,\n        stemUpYOffset: 25,\n        reportedWidth: 5\n      },\n      brassMuteClosed: {\n        scale: 1.0,\n        xOffset: 3,\n        yOffset: -8,\n        stemUpYOffset: 25,\n        reportedWidth: 5\n      },\n      brassMuteOpen: {\n        scale: 1.0,\n        xOffset: 3,\n        yOffset: -7,\n        stemUpYOffset: 25,\n        reportedWidth: 5\n      },\n      brassFlip: {\n        scale: 1.0,\n        xOffset: 10,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5\n      },\n      brassJazzTurn: {\n        scale: 1.0,\n        xOffset: 6,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5\n      },\n      brassSmear: {\n        scale: 1.0,\n        xOffset: 10,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5\n      },\n    }\n  }\n};\n","export const PetalumaFont = {\n  \"glyphs\": {\n    \"bracketTop\": {\n      \"x_min\": 0,\n      \"x_max\": 508,\n      \"y_min\": 0,\n      \"y_max\": 370,\n      \"ha\": 370,\n      \"o\": \"m 22 0 b 122 0 55 1 89 0 l 157 0 b 713 376 425 0 622 137 b 732 467 724 406 732 436 b 726 514 732 482 730 498 b 711 533 723 528 719 533 b 693 526 707 533 700 530 b 674 498 683 520 678 508 b 635 406 662 467 652 435 b 310 164 560 281 458 193 b 154 151 258 154 206 151 b 39 154 117 151 78 154 b 1 120 17 154 4 145 b 0 84 0 108 0 96 b 0 20 0 63 1 40 b 22 0 0 4 7 0 z\"\n    },\n    \"bracketBottom\": {\n      \"x_min\": 0,\n      \"x_max\": 496,\n      \"y_min\": -393,\n      \"y_max\": 0,\n      \"ha\": 393,\n      \"o\": \"m 696 -566 b 711 -539 713 -566 708 -549 b 714 -521 713 -533 714 -527 b 713 -508 714 -517 713 -513 b 661 -327 706 -445 688 -384 b 392 -42 603 -203 513 -109 b 206 0 331 -7 266 0 b 160 -1 190 0 174 -1 b 26 -1 107 -1 66 -3 b 0 -19 12 -1 0 -4 l 0 -23 b 3 -50 1 -32 3 -42 b 1 -86 3 -62 1 -73 b 4 -118 1 -96 1 -108 b 45 -151 10 -145 23 -154 b 180 -143 89 -144 135 -145 b 621 -419 392 -135 523 -236 b 662 -539 641 -456 655 -497 b 696 -566 667 -557 680 -566 z\"\n    },\n    \"barlineTick\": {\n      \"x_min\": 0,\n      \"x_max\": 56.036101509664164,\n      \"y_min\": 876.905249806889,\n      \"y_max\": 1121.5430338167064,\n      \"ha\": 244.63778400981744,\n      \"o\": \"m 42 1263 b 66 1287 62 1261 66 1272 b 81 1583 65 1387 72 1485 b 35 1614 82 1610 53 1610 b 14 1591 17 1619 16 1604 b 0 1408 7 1525 0 1459 l 0 1292 b 42 1263 1 1263 23 1266 z\"\n    },\n    \"breathMarkTick\": {\n      \"x_min\": 0,\n      \"x_max\": 568,\n      \"y_min\": 0,\n      \"y_max\": 621,\n      \"ha\": 621,\n      \"o\": \"m 258 0 b 278 39 276 0 274 24 b 279 56 279 45 279 50 l 279 73 b 278 117 279 88 278 102 b 281 148 278 127 279 138 b 536 600 312 330 387 487 b 744 719 600 651 670 690 b 815 779 775 730 808 740 b 818 824 818 793 818 808 b 815 868 818 838 818 852 b 796 894 814 881 808 894 b 779 888 791 894 786 893 b 719 864 760 878 739 871 b 372 602 580 806 459 724 b 229 252 298 498 251 383 b 220 268 225 262 222 264 b 209 302 217 279 213 291 b 75 527 181 387 143 467 b 16 563 58 543 39 573 b 0 539 3 557 0 549 b 12 492 0 524 9 507 b 56 400 19 459 22 425 b 163 269 104 367 138 323 b 238 36 197 194 216 115 b 258 0 242 22 243 0 z\"\n    },\n    \"segno\": {\n      \"x_min\": 0,\n      \"x_max\": 798,\n      \"y_min\": -65,\n      \"y_max\": 806,\n      \"ha\": 871,\n      \"o\": \"m 16 -94 b 66 -69 39 -92 53 -85 b 177 59 102 -26 138 17 b 543 456 298 192 420 324 b 726 300 615 420 680 373 b 753 217 744 271 753 243 b 655 112 753 170 719 131 b 599 104 636 107 618 104 b 461 173 544 104 495 128 b 432 190 454 183 444 190 b 409 179 425 190 418 187 b 359 118 390 160 373 141 b 341 72 347 101 341 86 b 373 24 341 56 351 40 b 409 6 384 17 396 10 b 550 -13 454 -12 501 -14 b 599 -6 566 -12 583 -10 b 864 213 720 27 806 104 b 886 300 878 242 886 271 b 857 395 886 331 877 363 b 799 467 840 420 821 445 b 648 572 755 513 704 546 b 1110 1083 802 743 955 914 b 1140 1129 1123 1097 1136 1110 b 1149 1148 1142 1135 1149 1142 b 1145 1153 1149 1149 1148 1152 b 1123 1161 1139 1158 1130 1161 b 1109 1156 1119 1161 1113 1159 b 1089 1138 1102 1151 1094 1145 b 946 988 1040 1089 989 1041 b 595 602 834 855 711 732 l 590 598 l 549 615 b 432 793 462 647 432 723 b 534 888 432 851 474 888 b 671 834 588 888 631 864 b 710 818 684 824 696 818 b 724 821 714 818 719 819 b 809 883 757 834 788 852 b 816 901 814 890 816 896 b 802 923 816 910 812 916 b 706 984 770 945 742 971 b 593 1011 668 998 631 1011 b 516 991 567 1011 541 1005 b 333 799 433 949 380 876 b 302 693 312 765 302 729 b 330 589 302 658 311 624 b 469 488 360 533 415 511 b 485 482 475 487 480 485 b 266 249 412 405 338 327 b 121 88 217 196 170 141 b 9 -65 78 40 37 -7 b 0 -85 4 -72 0 -79 b 16 -94 0 -91 4 -94 z m 251 350 b 363 436 285 348 353 403 b 354 456 366 448 360 452 b 271 518 327 477 298 497 b 243 528 261 526 252 528 b 210 513 232 528 222 523 b 157 454 190 494 176 472 b 141 428 147 444 141 436 b 158 406 141 420 147 413 b 216 361 180 393 197 376 b 245 350 225 356 235 350 b 251 350 246 350 249 350 z m 861 536 b 927 575 890 539 909 557 b 965 628 952 598 965 613 b 926 680 965 644 952 658 b 865 713 900 701 883 713 b 805 667 845 713 828 698 b 768 611 791 649 770 631 b 812 564 766 589 798 582 b 861 536 824 550 840 537 z\"\n    },\n    \"coda\": {\n      \"x_min\": 0,\n      \"x_max\": 1380,\n      \"y_min\": -196,\n      \"y_max\": 1037,\n      \"ha\": 1233,\n      \"o\": \"m 1028 -282 b 1057 -245 1045 -282 1053 -261 b 1060 -203 1060 -232 1060 -217 b 1063 9 1060 -132 1061 -62 b 1390 194 1192 22 1303 81 b 1531 543 1467 298 1512 415 b 1532 556 1531 547 1532 552 b 1904 559 1656 557 1780 559 b 1950 582 1920 559 1941 569 b 1987 674 1970 609 1987 638 b 1984 698 1987 681 1986 690 b 1950 700 1973 698 1961 700 l 1941 700 l 1545 696 b 1535 776 1545 723 1541 749 b 1103 1113 1477 996 1326 1107 b 1080 1115 1096 1115 1087 1115 b 1081 1322 1080 1184 1080 1253 b 1079 1467 1083 1371 1081 1418 b 1061 1493 1079 1476 1080 1493 l 1060 1493 b 1028 1467 1044 1490 1031 1485 b 1020 1403 1025 1446 1020 1424 b 1017 1110 1020 1305 1018 1208 l 962 1106 b 569 914 808 1087 671 1035 b 451 683 510 844 472 766 l 161 678 b 118 680 148 678 132 680 b 79 670 101 680 86 678 b 0 544 48 636 29 592 l 37 544 l 429 549 b 428 518 428 539 428 528 b 488 285 428 435 458 360 b 681 81 526 192 593 124 b 946 9 763 40 854 19 b 1008 6 966 7 988 6 b 1005 -137 1008 -42 1005 -89 b 1012 -243 1005 -173 1005 -209 b 1028 -282 1015 -258 1011 -282 z m 1008 180 b 660 264 886 181 770 212 b 524 471 570 305 524 374 b 528 524 524 488 526 505 l 533 549 b 792 552 619 550 706 550 b 1009 553 865 553 937 552 b 1008 180 1009 428 1008 288 z m 577 684 b 766 874 618 763 678 828 b 989 932 837 912 913 923 b 1015 933 998 932 1007 933 b 1014 822 1015 896 1014 860 b 1011 688 1012 791 1012 743 z m 1067 184 b 1071 553 1070 307 1068 429 b 1439 556 1194 553 1316 554 b 1437 554 1439 554 1437 554 b 1341 337 1413 478 1387 402 b 1119 192 1286 261 1211 212 b 1067 184 1102 189 1084 186 z m 1074 690 b 1079 935 1077 772 1077 852 b 1326 855 1166 932 1250 909 b 1446 694 1385 814 1426 759 b 1269 693 1387 694 1328 693 b 1074 690 1204 693 1139 691 z\"\n    },\n    \"gClef\": {\n      \"x_min\": 0,\n      \"x_max\": 664,\n      \"y_min\": -559,\n      \"y_max\": 1009,\n      \"ha\": 1568,\n      \"o\": \"m 343 -805 b 366 -801 350 -805 357 -804 b 409 -773 383 -795 397 -786 b 582 -328 528 -648 577 -497 b 583 -294 582 -315 583 -294 b 612 -279 583 -294 603 -282 b 747 -197 660 -256 706 -230 b 949 143 857 -109 920 10 b 956 206 955 164 956 186 b 791 384 956 297 906 363 b 704 393 762 390 733 393 b 498 336 632 393 563 374 b 481 325 490 331 481 325 l 444 465 b 442 485 442 472 442 485 b 609 880 442 485 589 746 b 619 996 616 919 619 958 b 613 1084 619 1027 618 1056 b 534 1387 599 1188 560 1286 b 482 1453 527 1417 517 1453 b 422 1407 456 1453 438 1428 b 305 1063 348 1305 312 1188 b 304 1002 304 1043 304 1022 b 338 654 304 886 323 769 b 343 629 338 645 341 636 b 144 356 278 537 206 451 b 23 144 101 288 53 220 b 0 20 7 107 0 63 b 82 -210 0 -69 30 -160 b 207 -288 112 -239 160 -271 b 410 -328 274 -312 340 -328 b 474 -324 431 -328 452 -327 l 491 -321 b 491 -341 491 -321 492 -334 b 402 -585 475 -428 454 -513 b 294 -668 374 -622 348 -664 b 271 -693 278 -670 271 -680 b 274 -708 271 -698 272 -703 b 302 -775 282 -730 292 -753 b 343 -805 311 -795 325 -805 z m 410 -160 b 311 -147 360 -160 311 -147 b 307 -98 311 -147 307 -127 b 314 -33 307 -79 308 -56 b 429 131 328 36 377 85 b 441 138 433 135 438 138 b 449 122 446 138 448 132 b 490 -131 462 37 484 -46 b 490 -153 491 -140 490 -153 b 410 -160 490 -153 452 -163 z m 252 -135 b 196 -121 232 -134 215 -127 b 117 -69 158 -108 127 -94 b 111 -32 112 -58 111 -45 b 117 19 111 -16 114 1 b 130 56 118 27 127 52 b 324 337 186 156 253 246 l 384 416 l 395 384 b 416 291 406 348 416 291 b 350 213 416 291 376 239 b 243 -42 278 143 243 55 b 251 -117 243 -66 246 -91 b 252 -135 252 -122 252 -127 z m 569 -131 l 563 -91 b 510 168 552 3 530 78 b 513 192 508 179 508 186 b 624 202 550 199 586 202 b 730 192 660 202 694 199 b 850 141 773 183 816 176 b 858 134 852 138 855 135 b 595 -121 801 19 716 -68 z m 400 717 b 382 922 389 786 382 854 b 481 1286 382 1047 408 1169 b 507 1125 498 1233 507 1179 b 500 1040 507 1097 504 1068 b 400 717 481 927 455 818 z\"\n    },\n    \"cClef\": {\n      \"x_min\": 0,\n      \"x_max\": 731,\n      \"y_min\": -543,\n      \"y_max\": 543,\n      \"ha\": 1086,\n      \"o\": \"m 615 -770 b 881 -684 710 -770 801 -739 b 1020 -395 986 -612 1020 -510 b 1017 -334 1020 -374 1018 -354 b 769 -62 1007 -209 896 -75 b 746 -60 762 -60 755 -60 b 639 -73 710 -60 675 -69 b 524 -109 598 -79 560 -92 b 528 -36 526 -85 528 -60 b 527 -4 528 -26 528 -14 b 528 39 527 10 528 24 b 526 99 528 59 527 79 b 592 94 549 95 570 94 b 648 99 611 94 629 95 b 912 157 744 94 844 117 b 1053 377 1009 215 1053 284 b 1050 425 1053 393 1053 409 b 914 665 1037 521 986 602 b 717 753 855 717 791 753 b 626 734 688 753 658 747 l 462 665 b 347 500 374 628 347 580 b 350 449 347 484 348 468 b 392 419 353 428 367 416 b 492 438 425 425 459 428 b 541 498 524 448 541 468 b 540 514 541 503 541 508 b 537 546 537 524 537 536 b 573 639 537 580 550 611 b 606 657 582 649 593 657 l 609 657 b 716 622 647 652 684 647 b 834 372 801 556 834 469 b 831 323 834 356 832 338 b 743 187 825 266 795 217 b 710 176 732 180 720 176 b 694 179 704 176 700 177 b 527 223 638 193 582 206 b 495 229 516 228 505 229 b 454 220 481 229 468 225 b 395 189 432 213 415 200 b 363 180 384 186 374 181 b 348 168 356 179 348 176 b 340 161 343 167 340 164 b 347 150 340 157 343 154 b 356 147 348 148 353 147 b 364 92 361 130 363 111 b 369 -37 367 49 369 6 b 363 -154 369 -76 367 -115 b 357 -236 360 -183 357 -210 b 376 -264 357 -253 361 -259 b 456 -289 402 -284 429 -289 b 521 -282 478 -289 500 -285 b 549 -255 537 -279 546 -271 b 598 -177 556 -225 577 -202 b 622 -164 605 -168 613 -164 b 636 -167 626 -164 631 -166 b 749 -225 678 -177 714 -199 b 848 -405 814 -276 848 -337 b 824 -507 848 -436 840 -471 b 657 -657 792 -582 730 -625 b 608 -668 638 -664 622 -668 b 534 -602 572 -668 547 -645 b 513 -575 530 -589 523 -575 b 507 -576 510 -575 508 -575 b 478 -582 497 -580 488 -582 b 405 -570 454 -582 428 -570 b 389 -572 399 -570 395 -570 l 363 -572 b 321 -575 348 -572 333 -569 l 321 631 b 323 662 323 641 323 652 b 315 716 323 681 321 698 b 304 736 314 723 317 736 l 302 736 b 281 716 294 734 285 729 b 275 665 276 700 275 683 l 275 382 b 276 99 275 288 275 193 b 279 -170 278 10 276 -81 b 284 -399 282 -246 284 -323 b 282 -629 284 -475 282 -553 b 289 -721 282 -660 289 -690 b 300 -736 289 -727 291 -736 b 312 -724 307 -736 310 -730 b 321 -667 323 -706 321 -687 l 321 -632 l 328 -644 l 340 -657 b 510 -757 386 -707 445 -740 b 615 -770 546 -766 580 -770 z m 131 -782 b 141 -755 138 -782 140 -773 b 147 -490 143 -667 145 -577 b 160 207 150 -258 153 -24 b 168 618 164 344 158 481 b 81 768 173 690 132 732 b 45 782 66 778 55 782 b 3 740 26 782 13 768 b 0 724 1 736 0 730 l 1 710 b 4 596 4 672 4 634 l 4 382 b 9 102 4 288 4 196 b 17 -301 13 -32 10 -166 l 17 -672 b 50 -736 17 -701 27 -720 b 109 -772 69 -749 91 -759 b 131 -782 120 -778 127 -782 z\"\n    },\n    \"fClef\": {\n      \"x_min\": 0,\n      \"x_max\": 776,\n      \"y_min\": -496,\n      \"y_max\": 216,\n      \"ha\": 712,\n      \"o\": \"m 402 -706 b 804 -405 592 -678 716 -566 b 876 -53 861 -298 874 -183 b 868 33 876 -32 873 1 b 560 311 845 217 723 311 b 524 310 549 311 536 311 b 131 134 373 297 239 242 b 17 -29 84 86 37 39 b 9 -89 12 -50 9 -71 b 112 -238 9 -154 43 -206 b 124 -243 117 -239 120 -242 b 186 -261 145 -255 166 -261 b 268 -228 215 -261 242 -249 b 351 -59 325 -181 351 -124 b 343 10 351 -36 348 -13 b 340 36 341 19 340 27 b 409 105 340 75 363 102 b 441 107 420 107 431 107 b 624 36 510 107 573 86 b 744 -200 688 -27 724 -109 b 747 -230 747 -210 747 -222 b 717 -323 747 -264 736 -292 b 608 -445 688 -370 654 -410 b 307 -541 518 -513 415 -541 b 213 -541 275 -541 245 -541 b 39 -521 154 -541 96 -539 b 0 -552 17 -514 0 -531 b 1 -564 0 -556 0 -560 b 17 -611 6 -580 10 -596 b 101 -694 35 -648 50 -684 b 288 -714 164 -707 225 -714 b 402 -706 325 -714 363 -711 z m 972 -281 b 1070 -148 1024 -279 1070 -210 b 1025 -105 1070 -105 1045 -112 b 989 -127 1004 -96 998 -114 b 949 -249 963 -164 963 -209 b 969 -281 943 -265 949 -281 b 972 -281 971 -281 971 -281 z m 1018 92 b 1080 118 1041 91 1068 96 b 1117 219 1099 150 1117 180 b 1113 252 1117 229 1116 240 b 1045 288 1102 297 1068 276 b 1017 262 1028 297 1024 274 b 984 124 989 220 996 170 b 1008 91 979 108 986 91 b 1018 92 1011 91 1015 92 z\"\n    },\n    \"unpitchedPercussionClef1\": {\n      \"x_min\": 0,\n      \"x_max\": 379.13761966945304,\n      \"y_min\": -250,\n      \"y_max\": 250,\n      \"ha\": 500,\n      \"o\": \"m 144 -341 b 207 -320 167 -341 189 -331 b 217 -301 215 -315 217 -308 b 210 -262 217 -289 210 -275 b 228 187 212 -112 209 37 b 228 287 228 220 229 253 b 174 353 228 336 222 343 b 120 359 157 357 138 359 b 48 357 96 359 72 356 b 17 323 29 357 19 344 b 7 120 16 255 9 187 b 6 -109 6 43 6 -33 l 6 -204 b 0 -251 6 -220 0 -235 b 3 -269 0 -256 0 -262 b 127 -340 24 -330 79 -328 b 144 -341 132 -341 138 -341 z m 481 -360 b 507 -357 491 -360 500 -360 b 546 -295 541 -346 547 -325 b 536 79 543 -170 540 -46 b 523 311 533 157 534 235 b 475 359 518 340 508 359 b 425 360 459 359 442 360 b 400 359 416 360 409 360 b 337 294 348 353 340 347 l 337 -73 b 336 -264 337 -137 337 -200 b 343 -294 336 -274 338 -284 b 481 -360 359 -330 431 -360 z\"\n    },\n    \"6stringTabClef\": {\n      \"x_min\": 0,\n      \"x_max\": 438,\n      \"y_min\": -768,\n      \"y_max\": 767,\n      \"ha\": 1535,\n      \"o\": \"m 114 -320 b 127 -304 120 -320 124 -315 b 171 -174 141 -261 158 -219 b 222 -135 179 -147 196 -137 b 426 -122 289 -131 359 -128 b 498 -164 462 -120 482 -127 b 628 -301 521 -226 575 -264 b 631 -288 631 -295 631 -291 b 628 -269 631 -281 629 -276 b 569 -134 616 -220 589 -179 b 408 225 514 -14 462 107 b 314 357 384 274 351 318 b 278 380 298 372 288 379 b 251 351 268 380 261 372 b 4 -209 156 171 75 -17 b 0 -228 1 -215 0 -222 b 19 -258 0 -240 7 -249 b 102 -314 45 -279 75 -294 b 114 -320 107 -318 111 -320 z m 154 -953 b 130 -933 135 -953 130 -948 l 130 -865 l 128 -865 b 135 -788 130 -838 124 -808 b 203 -769 145 -769 180 -776 b 259 -762 223 -765 242 -762 b 441 -852 330 -762 386 -805 b 449 -867 446 -858 449 -863 b 436 -884 449 -874 444 -878 b 318 -942 402 -914 363 -935 b 154 -953 264 -950 209 -953 z m 245 -1106 b 281 -1104 256 -1106 269 -1106 b 511 -888 400 -1094 511 -1035 b 454 -688 511 -814 504 -744 b 448 -678 449 -685 448 -681 b 454 -667 448 -675 449 -671 b 504 -497 503 -619 507 -559 b 324 -288 500 -383 436 -308 b 295 -287 314 -287 304 -287 b 282 -287 291 -287 287 -287 b 115 -330 223 -287 168 -307 b 94 -366 102 -336 94 -348 l 94 -370 b 96 -435 96 -392 96 -413 b 73 -858 89 -576 71 -717 b 78 -919 73 -878 78 -899 b 72 -950 78 -930 76 -940 b 63 -992 66 -965 63 -978 b 66 -1015 63 -999 65 -1008 b 173 -1104 84 -1106 84 -1106 b 245 -1106 197 -1104 220 -1104 z m 161 -622 b 147 -618 156 -622 151 -621 b 140 -600 141 -612 140 -606 b 144 -564 140 -589 144 -575 b 143 -554 144 -560 144 -557 l 143 -546 b 220 -451 144 -467 143 -465 b 278 -445 239 -446 259 -444 b 418 -497 328 -445 376 -461 b 429 -516 426 -504 429 -510 b 415 -533 429 -521 423 -527 b 219 -608 357 -579 287 -590 b 215 -609 217 -608 216 -609 b 161 -622 197 -609 177 -622 z m 425 6 b 360 20 403 17 382 20 b 274 14 331 20 302 14 l 246 14 l 340 206 b 425 6 369 137 395 75 z m 369 438 b 374 439 370 438 372 438 b 384 462 383 444 384 452 l 384 474 b 390 697 386 547 390 622 b 373 1002 390 799 390 901 l 533 1002 b 560 1001 541 1004 552 1001 b 573 1007 567 1001 572 1002 b 546 1050 579 1025 559 1038 b 536 1056 543 1053 539 1053 b 324 1104 472 1102 397 1104 b 72 1090 238 1104 154 1099 b 55 1093 66 1090 60 1092 b 37 1073 46 1093 37 1089 b 60 1045 37 1061 48 1051 b 203 1001 105 1022 151 1001 b 233 1004 213 1001 223 1002 b 246 1005 238 1004 243 1005 b 272 975 264 1005 272 996 b 272 965 272 972 272 969 b 258 596 264 842 265 719 b 315 474 253 540 272 504 l 343 455 b 369 438 351 448 357 438 z\"\n    },\n    \"timeSig0\": {\n      \"x_min\": 20,\n      \"x_max\": 513,\n      \"y_min\": -358.159536277652,\n      \"y_max\": 359,\n      \"ha\": 717.159536277652,\n      \"o\": \"m 341 -516 b 420 -510 367 -516 395 -514 b 675 -338 533 -494 622 -448 b 737 -92 716 -256 734 -171 b 739 -35 739 -73 739 -53 b 680 305 739 86 720 207 b 400 517 622 449 537 517 b 337 514 380 517 359 517 b 289 507 321 511 305 513 b 91 317 192 477 127 412 b 29 9 50 212 29 108 b 217 -458 29 -157 88 -312 b 341 -516 251 -494 291 -518 z m 412 -452 b 359 -425 393 -452 376 -444 b 187 14 242 -301 179 -158 b 268 334 193 127 212 235 b 387 448 295 383 330 428 b 406 452 395 451 400 452 b 428 444 413 452 420 449 b 517 324 471 413 497 372 b 586 -29 560 222 586 86 b 556 -271 586 -112 585 -193 b 468 -422 536 -327 508 -377 b 412 -452 449 -442 431 -452 z\"\n    },\n    \"timeSig1\": {\n      \"x_min\": 20,\n      \"x_max\": 283,\n      \"y_min\": -364,\n      \"y_max\": 366,\n      \"ha\": 730,\n      \"o\": \"m 264 -524 b 357 -510 297 -524 325 -516 b 374 -490 369 -508 374 -501 b 380 -438 376 -472 380 -455 l 406 246 b 408 301 408 265 408 282 b 400 445 408 348 405 396 b 288 527 395 491 338 527 b 253 520 276 527 264 526 b 240 508 249 517 245 513 b 49 409 192 445 127 413 b 29 396 33 408 29 403 b 32 380 29 392 30 386 b 59 363 36 366 49 364 b 164 348 95 356 130 348 b 222 357 183 348 203 351 b 238 361 228 360 233 360 b 252 334 248 361 252 353 b 243 59 252 242 249 150 b 219 -490 229 -124 233 -307 b 264 -524 217 -516 232 -524 z\"\n    },\n    \"timeSig2\": {\n      \"x_min\": 20,\n      \"x_max\": 660.4636303241031,\n      \"y_min\": -378.7201231608281,\n      \"y_max\": 382,\n      \"ha\": 760.720123160828,\n      \"o\": \"m 99 -543 b 130 -533 111 -550 121 -540 b 255 -448 168 -501 213 -475 b 338 -425 282 -431 310 -425 b 392 -431 356 -425 374 -426 b 485 -462 423 -438 454 -451 b 648 -497 540 -482 595 -497 b 834 -441 711 -497 773 -480 b 950 -242 906 -395 958 -334 b 942 -210 950 -230 950 -215 b 912 -220 932 -204 920 -213 b 861 -264 894 -235 877 -248 b 775 -317 835 -289 808 -305 b 675 -334 742 -328 708 -334 b 510 -295 619 -334 563 -318 b 372 -264 465 -278 420 -264 b 305 -272 350 -264 328 -266 b 331 -242 318 -256 324 -249 b 490 -73 386 -187 438 -131 b 675 340 595 43 664 180 b 677 369 677 350 677 360 b 556 536 677 461 638 508 b 468 550 526 546 497 550 b 297 508 409 550 353 533 b 111 354 220 475 168 412 b 29 197 65 308 29 261 b 32 164 29 187 29 176 b 29 140 33 157 29 147 b 43 125 29 132 32 125 b 73 147 55 125 65 138 b 86 163 79 153 82 158 b 238 320 134 219 183 272 b 425 389 292 367 360 389 b 575 341 480 389 531 373 b 606 298 590 330 606 317 b 600 278 606 292 603 285 b 501 107 576 217 544 158 b 304 -104 439 33 372 -35 b 111 -356 230 -180 167 -265 b 84 -446 92 -386 84 -415 b 86 -481 84 -458 85 -469 b 88 -514 88 -491 88 -503 b 99 -543 89 -526 91 -537 z\"\n    },\n    \"timeSig3\": {\n      \"x_min\": 19.824321427094187,\n      \"x_max\": 540,\n      \"y_min\": -392,\n      \"y_max\": 392,\n      \"ha\": 784,\n      \"o\": \"m 216 -540 b 354 -564 264 -556 310 -564 b 605 -465 445 -564 530 -530 b 729 -161 697 -383 729 -275 b 724 -82 729 -135 727 -108 b 589 95 716 -1 670 62 b 523 114 567 102 546 108 b 750 418 606 213 677 315 b 778 503 769 444 778 472 b 773 540 778 514 776 527 b 750 564 769 557 762 564 b 736 562 746 564 742 563 b 641 552 704 553 672 552 b 402 554 562 552 481 554 l 346 554 b 84 546 258 554 170 554 b 36 501 55 543 40 531 b 29 412 30 472 32 442 b 52 384 27 393 32 384 l 56 384 b 210 392 107 389 158 392 l 602 392 b 354 108 523 285 445 192 b 246 -65 300 58 246 12 b 252 -108 246 -78 248 -92 l 252 -111 b 264 -141 251 -122 251 -135 b 291 -132 274 -145 284 -140 b 425 -72 328 -95 377 -84 b 475 -65 442 -68 459 -65 b 592 -108 517 -65 557 -79 b 645 -179 615 -125 645 -147 b 642 -194 645 -184 644 -189 b 485 -376 616 -278 569 -344 b 361 -399 444 -392 402 -399 b 151 -340 289 -399 219 -376 b 88 -275 122 -323 98 -310 b 71 -249 86 -268 85 -249 b 63 -251 68 -249 66 -249 b 36 -288 48 -255 36 -266 b 55 -423 33 -336 45 -377 b 101 -482 60 -448 78 -468 b 216 -540 138 -504 174 -526 z\"\n    },\n    \"timeSig4\": {\n      \"x_min\": 20,\n      \"x_max\": 633.0785282750762,\n      \"y_min\": -489.5908855671687,\n      \"y_max\": 491.18559127100053,\n      \"ha\": 980.7764768381692,\n      \"o\": \"m 608 -704 b 641 -684 622 -708 634 -696 b 667 -602 660 -660 662 -631 b 685 -190 683 -465 680 -327 l 685 -176 b 831 -127 736 -166 783 -148 b 912 0 901 -94 913 -76 b 886 53 912 36 904 52 b 848 40 877 53 864 49 l 838 36 b 687 -13 789 14 739 -3 b 681 177 687 50 684 114 b 672 338 678 230 677 285 b 654 373 671 350 672 373 b 622 340 636 373 624 361 b 615 262 621 314 613 288 b 619 -22 616 167 619 72 b 569 -22 602 -23 585 -23 b 305 -3 481 -16 395 -1 b 210 -9 274 -3 242 -4 b 301 163 242 52 268 108 b 513 552 377 288 459 412 b 536 652 526 585 536 618 b 533 683 536 662 534 672 b 520 707 531 691 531 707 b 487 693 508 708 494 704 b 474 668 482 684 477 677 b 384 490 454 603 418 547 b 253 281 343 419 295 351 b 73 -13 194 181 145 78 b 29 -108 50 -42 29 -72 b 37 -147 29 -121 32 -134 b 50 -186 43 -160 50 -173 b 68 -216 52 -207 56 -215 b 92 -207 73 -216 82 -213 b 288 -166 156 -180 220 -166 b 556 -186 377 -166 467 -180 b 586 -189 566 -187 576 -187 b 616 -186 596 -189 606 -189 b 606 -432 613 -268 612 -350 b 596 -625 603 -495 596 -559 b 598 -670 596 -641 596 -655 b 608 -704 598 -683 596 -700 z\"\n    },\n    \"timeSig5\": {\n      \"x_min\": 19.6638710854033,\n      \"x_max\": 583,\n      \"y_min\": -389,\n      \"y_max\": 389,\n      \"ha\": 778,\n      \"o\": \"m 132 -536 b 249 -560 168 -553 209 -559 b 507 -462 351 -560 454 -514 b 677 -183 588 -384 642 -289 b 694 -85 688 -150 694 -117 b 540 138 694 12 642 94 b 422 173 501 154 462 167 b 400 187 408 174 400 177 b 405 202 400 190 402 196 b 428 284 416 228 426 255 b 469 312 431 307 442 312 b 757 372 569 312 662 343 b 840 490 821 392 840 432 b 812 560 840 540 834 560 b 763 546 801 560 785 556 b 757 543 762 546 759 544 b 465 484 665 505 570 484 b 396 484 452 484 425 487 b 353 454 377 482 366 474 b 281 300 323 405 304 351 b 245 164 262 255 245 212 b 246 144 245 158 246 151 b 233 63 249 115 243 89 b 225 35 228 50 225 40 b 264 14 225 22 236 19 b 445 -26 325 7 387 0 b 569 -151 501 -52 547 -89 b 575 -180 573 -161 575 -170 b 527 -275 575 -217 547 -245 b 347 -367 484 -334 419 -367 b 261 -351 318 -367 289 -363 b 95 -300 206 -333 154 -307 b 55 -321 73 -297 65 -302 b 29 -468 29 -367 40 -419 b 56 -505 26 -482 36 -500 b 132 -536 82 -514 108 -524 z\"\n    },\n    \"timeSig6\": {\n      \"x_min\": 20,\n      \"x_max\": 565,\n      \"y_min\": -363,\n      \"y_max\": 363,\n      \"ha\": 726,\n      \"o\": \"m 390 -518 b 621 -458 469 -507 549 -494 b 814 -134 753 -390 814 -281 b 652 59 814 -16 750 58 b 580 48 629 59 606 55 b 233 -334 392 -9 276 -138 b 115 -228 181 -314 143 -278 b 98 -160 104 -206 98 -183 b 107 -109 98 -144 101 -127 b 167 37 124 -59 145 -12 b 508 340 236 189 347 292 b 575 353 530 347 553 353 b 648 327 600 353 625 346 b 665 320 654 321 661 320 b 687 336 674 320 681 325 b 703 405 697 359 703 382 b 684 472 703 429 697 451 b 593 523 664 504 631 521 b 576 521 588 523 582 523 b 297 403 472 508 380 465 b 115 177 217 344 164 264 b 29 -121 60 82 29 -17 b 53 -278 29 -173 36 -225 b 226 -497 82 -374 131 -454 b 347 -523 265 -514 305 -523 b 390 -518 361 -523 376 -521 z m 351 -357 b 312 -351 337 -356 320 -363 b 325 -315 304 -340 320 -327 b 543 -120 373 -222 448 -158 b 622 -104 570 -108 596 -102 b 717 -132 655 -104 687 -112 b 740 -167 732 -143 740 -153 b 730 -196 740 -176 737 -184 b 563 -321 690 -258 634 -300 b 359 -357 497 -341 428 -354 z\"\n    },\n    \"timeSig7\": {\n      \"x_min\": 20.3617407597707,\n      \"x_max\": 592,\n      \"y_min\": -345,\n      \"y_max\": 345,\n      \"ha\": 690,\n      \"o\": \"m 253 -497 b 318 -485 276 -497 297 -487 b 366 -441 348 -482 360 -468 b 487 -104 390 -323 433 -210 b 835 403 580 82 701 246 b 852 436 847 416 852 428 b 815 467 852 451 840 461 b 762 474 798 471 779 474 b 674 445 732 474 701 465 b 603 410 652 431 628 420 b 383 360 533 379 459 360 b 200 435 315 360 249 382 b 88 494 168 469 131 485 b 66 497 81 495 73 497 b 33 484 52 497 39 492 b 50 436 22 469 39 451 b 295 310 114 360 199 324 b 406 301 331 304 369 301 b 593 324 468 301 530 308 b 585 307 589 314 588 310 b 265 -249 451 137 338 -46 b 207 -442 242 -312 223 -377 b 204 -462 206 -449 204 -456 b 253 -497 204 -487 220 -497 z\"\n    },\n    \"timeSig8\": {\n      \"x_min\": 20,\n      \"x_max\": 504.15101530718516,\n      \"y_min\": -428,\n      \"y_max\": 428,\n      \"ha\": 856,\n      \"o\": \"m 265 -616 b 289 -615 274 -616 281 -616 b 710 -271 492 -592 657 -485 b 726 -148 721 -229 727 -187 b 585 108 726 -48 687 42 b 572 127 576 114 573 120 b 576 144 572 132 575 138 b 598 301 590 196 598 249 b 586 413 598 338 593 376 b 356 616 559 531 467 616 b 233 582 317 616 275 606 b 29 233 101 505 29 384 b 104 9 29 153 46 72 b 189 -48 127 -16 160 -27 b 92 -158 141 -73 114 -114 b 37 -343 63 -217 50 -279 b 33 -390 35 -359 33 -374 b 265 -616 33 -524 148 -616 z m 328 -438 b 158 -276 233 -436 160 -359 b 166 -239 158 -264 161 -252 b 230 -157 176 -203 202 -179 b 367 -72 274 -125 320 -98 b 448 -49 396 -56 423 -49 b 562 -118 491 -49 528 -72 b 611 -251 590 -157 611 -199 b 569 -341 611 -288 595 -318 b 328 -438 500 -402 416 -432 z m 258 105 b 124 148 215 105 167 117 b 96 196 105 163 96 177 b 99 217 96 202 96 209 b 197 384 120 281 151 337 b 350 451 242 429 297 451 b 516 364 412 451 472 422 b 530 331 523 354 530 343 b 530 327 530 330 530 328 l 530 320 b 468 151 520 261 507 200 b 419 122 455 135 442 125 b 258 105 370 117 320 105 z\"\n    },\n    \"timeSig9\": {\n      \"x_min\": 20,\n      \"x_max\": 494,\n      \"y_min\": -421,\n      \"y_max\": 421,\n      \"ha\": 842,\n      \"o\": \"m 235 -606 b 361 -564 275 -606 318 -593 b 619 -229 487 -482 566 -366 b 706 127 664 -114 694 4 b 711 233 708 163 711 197 b 700 346 711 271 708 308 b 389 606 658 517 530 606 b 351 605 376 606 364 606 b 56 272 171 586 56 441 b 96 98 56 216 69 156 b 334 -53 144 -3 238 -53 b 544 36 408 -53 484 -24 b 652 176 586 78 622 124 b 631 71 645 141 639 105 b 467 -302 599 -63 562 -196 b 271 -442 412 -364 354 -422 b 225 -448 255 -446 239 -448 b 95 -305 148 -448 98 -395 b 89 -255 95 -288 94 -271 b 73 -233 86 -246 85 -233 b 52 -248 65 -233 56 -239 b 29 -317 42 -271 30 -291 b 49 -448 29 -361 40 -405 b 235 -606 69 -541 144 -606 z m 340 104 b 144 209 264 108 194 141 b 127 258 132 225 127 240 b 137 297 127 271 130 284 b 366 449 184 396 269 449 b 517 408 415 449 467 436 b 595 348 546 392 572 372 b 616 305 608 336 616 321 b 609 281 616 298 613 289 b 340 104 557 184 477 104 z\"\n    },\n    \"timeSigCommon\": {\n      \"x_min\": 20,\n      \"x_max\": 585,\n      \"y_min\": -298,\n      \"y_max\": 294.49658092772603,\n      \"ha\": 592.496580927726,\n      \"o\": \"m 444 -405 b 829 -45 626 -346 740 -207 b 842 26 842 -23 842 1 b 821 58 842 39 841 58 b 795 40 811 58 802 48 b 765 3 785 29 773 16 b 469 -223 690 -104 596 -183 b 354 -242 431 -235 392 -242 b 180 -177 292 -242 235 -223 b 135 -99 154 -157 140 -131 b 132 -59 134 -85 132 -72 b 141 7 132 -37 135 -16 b 449 274 189 160 297 243 b 477 278 459 276 468 276 b 546 203 517 278 539 253 b 517 157 550 177 533 166 b 485 143 507 153 497 143 l 482 143 b 467 148 478 143 472 144 b 374 183 438 170 406 181 b 264 118 333 183 292 161 b 238 48 246 92 238 69 b 261 -9 238 29 245 10 b 383 -73 287 -39 337 -73 b 412 -68 392 -73 402 -72 b 631 164 526 -27 586 59 b 649 252 644 193 649 222 b 636 328 649 278 645 304 b 504 423 615 400 579 429 b 242 318 408 415 317 387 b 29 -158 104 190 29 33 b 30 -176 29 -164 29 -170 b 115 -364 42 -246 52 -315 b 307 -429 177 -410 240 -429 b 444 -405 351 -429 397 -420 z\"\n    },\n    \"timeSigCutCommon\": {\n      \"x_min\": 20,\n      \"x_max\": 695,\n      \"y_min\": -687.0379164869065,\n      \"y_max\": 687,\n      \"ha\": 1374.0379164869064,\n      \"o\": \"m 564 -989 b 595 -945 585 -991 589 -963 l 599 -922 b 605 -628 600 -824 603 -726 l 609 -399 b 878 -251 706 -363 798 -320 b 996 -85 932 -204 976 -153 b 1001 -63 998 -78 1001 -71 b 989 -46 1001 -56 998 -49 b 978 -43 985 -45 982 -43 b 950 -59 968 -43 959 -49 b 733 -216 894 -132 815 -177 b 611 -259 694 -235 652 -249 b 616 -20 612 -179 615 -99 b 680 29 642 -7 665 9 b 698 43 685 36 690 40 b 870 251 792 82 840 160 b 877 294 874 265 877 279 b 818 410 877 338 855 382 b 683 458 779 442 730 448 b 625 468 664 462 644 465 l 625 514 b 638 958 626 662 636 811 b 626 989 638 979 635 989 b 603 981 621 989 613 986 b 422 840 534 945 481 888 b 412 805 412 832 413 818 b 426 713 410 773 420 743 b 445 678 429 690 435 678 b 474 691 452 678 461 683 b 563 755 503 710 530 732 b 564 724 564 740 564 733 b 559 469 563 639 560 554 b 462 454 526 469 494 464 b 112 143 302 399 199 281 b 33 -94 66 71 45 -10 b 29 -148 30 -112 29 -131 b 105 -351 29 -223 52 -291 b 359 -455 171 -426 258 -451 b 517 -431 409 -451 464 -446 b 539 -422 524 -428 531 -425 l 539 -477 b 533 -739 536 -563 539 -651 b 530 -824 531 -768 530 -795 b 546 -948 530 -865 533 -907 b 564 -989 552 -962 543 -989 z m 410 -288 b 193 -197 328 -288 253 -264 b 141 -60 160 -161 141 -108 b 157 6 141 -35 147 -12 b 259 158 189 58 217 112 b 438 291 311 215 364 266 b 528 305 468 301 498 305 b 554 304 537 305 546 304 b 553 212 554 274 554 242 b 426 115 498 199 446 164 b 416 68 419 99 416 84 b 425 12 416 49 420 30 b 474 -39 432 -17 448 -32 b 513 -43 487 -42 498 -43 b 547 -40 524 -43 536 -42 l 543 -272 b 461 -285 516 -278 488 -281 b 410 -288 444 -287 426 -288 z m 694 197 b 668 203 685 197 677 199 b 621 216 654 210 638 215 b 622 294 622 242 622 268 b 706 268 651 287 678 278 b 746 235 721 261 734 249 b 752 222 749 230 752 226 b 743 213 752 219 749 215 b 694 197 727 206 711 197 z\"\n    },\n    \"noteheadDoubleWhole\": {\n      \"x_min\": -0.4444444444444444,\n      \"x_max\": 614.1875,\n      \"y_min\": -223.03296670127517,\n      \"y_max\": 223,\n      \"ha\": 446.0329667012752,\n      \"o\": \"m 488 -242 b 693 -79 595 -249 685 -166 l 693 -55 b 690 0 693 -36 691 -17 b 540 187 684 84 621 164 b 449 200 508 196 480 200 b 210 104 363 200 282 163 b 186 56 196 92 186 76 b 207 -82 186 9 192 -37 b 300 -204 225 -132 248 -181 b 488 -242 356 -229 415 -240 z m 35 -321 b 62 -266 58 -318 58 -288 l 62 -194 b 63 50 62 -114 63 -32 b 60 189 63 96 63 143 b 43 300 59 226 60 265 b 29 321 40 308 39 321 l 26 321 b 0 292 13 318 0 310 b 0 248 0 278 -1 262 b 6 147 4 215 6 181 b 4 48 6 114 4 81 b 6 0 4 32 6 16 b 7 -36 7 -12 7 -24 l 7 -52 b 6 -156 7 -86 6 -121 b 19 -275 6 -196 9 -236 b 35 -321 23 -291 16 -323 z m 128 -261 b 144 -251 135 -264 141 -256 b 158 -203 156 -236 157 -220 b 161 -137 161 -181 161 -158 b 157 30 161 -81 157 -26 b 158 76 157 45 157 60 l 158 101 b 156 225 158 141 158 183 b 137 253 156 235 154 253 l 134 253 b 109 222 120 251 109 242 b 104 91 108 179 104 134 b 108 -58 104 42 109 -9 b 107 -105 108 -73 108 -89 b 105 -127 107 -112 107 -120 b 118 -245 105 -167 114 -204 b 128 -261 118 -252 121 -259 z m 490 -88 b 449 -86 477 -88 464 -88 b 287 -56 399 -85 341 -78 b 258 -33 275 -52 258 -48 b 282 -7 258 -20 272 -13 b 458 43 340 23 399 43 b 580 14 497 43 537 35 b 618 -20 606 1 619 -9 b 592 -58 618 -30 609 -42 b 490 -88 562 -82 528 -88 z m 757 -291 b 793 -171 796 -255 792 -212 b 795 -49 795 -131 795 -91 b 786 207 795 36 791 121 b 779 240 786 217 783 229 b 766 258 776 246 776 258 b 762 256 765 258 763 256 b 739 236 752 253 740 252 b 733 177 737 216 732 197 b 737 20 737 125 739 73 l 737 -107 b 740 -202 737 -138 739 -170 b 757 -291 740 -230 743 -261 z m 847 -314 b 871 -288 860 -315 867 -300 b 884 -187 881 -255 886 -222 b 876 115 878 -86 876 14 b 877 255 876 161 876 209 b 868 291 877 268 873 279 b 855 304 867 301 863 304 b 844 301 852 304 848 304 b 822 265 825 292 822 278 b 824 251 822 259 822 255 b 822 170 822 225 822 197 l 822 -20 b 835 -284 827 -86 825 -186 b 847 -314 837 -295 835 -311 z\"\n    },\n    \"noteheadWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 380.1664976250159,\n      \"y_min\": -186.17102907059297,\n      \"y_max\": 165,\n      \"ha\": 351.17102907059297,\n      \"o\": \"m 547 40 b 223 -268 543 -151 367 -259 b 102 -233 180 -271 143 -248 l 62 -216 b 0 -127 22 -197 0 -166 b 6 -91 0 -115 1 -104 b 122 141 33 -9 69 71 b 327 238 170 204 249 238 b 514 158 397 238 467 212 b 547 40 544 125 549 84 z m 248 -107 b 384 -63 295 -102 341 -88 b 426 -23 402 -53 415 -40 b 435 3 432 -14 435 -6 b 413 32 435 14 428 24 b 301 73 376 49 343 73 b 272 69 291 73 282 72 b 121 -35 207 53 157 20 b 111 -58 117 -42 111 -50 b 125 -75 111 -65 115 -71 b 248 -107 164 -89 202 -107 z\"\n    },\n    \"noteheadHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 334,\n      \"y_min\": -174,\n      \"y_max\": 175,\n      \"ha\": 349,\n      \"o\": \"m 480 56 b 167 -251 478 -115 331 -251 b 94 -242 143 -251 118 -248 b 9 -141 43 -229 20 -192 b 0 -68 3 -115 0 -91 b 284 249 0 95 127 200 b 304 252 289 251 297 252 b 481 78 374 252 481 170 b 480 56 481 71 481 63 z m 213 -102 b 399 6 274 -81 341 -48 b 402 17 400 7 402 13 b 399 27 402 22 400 26 b 311 94 373 53 353 88 b 292 95 305 95 300 95 b 130 27 230 95 181 55 b 69 -62 98 9 62 -29 b 161 -98 76 -98 128 -91 b 213 -102 174 -101 186 -101 z\"\n    },\n    \"noteheadBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 334.04644433966797,\n      \"y_min\": -164,\n      \"y_max\": 164,\n      \"ha\": 328,\n      \"o\": \"m 112 -233 b 141 -236 122 -235 131 -236 b 481 104 279 -236 485 -48 b 403 222 477 141 478 192 b 334 236 382 232 359 236 b 1 -59 180 236 13 59 b 0 -85 1 -68 0 -76 b 112 -233 0 -157 32 -215 z\"\n    },\n    \"noteheadXWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 506,\n      \"y_min\": -143.0823320899293,\n      \"y_max\": 144,\n      \"ha\": 287.0823320899293,\n      \"o\": \"m 53 -206 b 219 -163 117 -207 170 -196 b 314 -102 249 -141 282 -122 b 377 -63 334 -89 356 -76 b 514 -161 422 -96 468 -128 b 576 -196 534 -174 552 -196 b 589 -193 580 -196 585 -196 b 688 -174 625 -194 657 -181 b 711 -158 698 -171 711 -173 b 696 -143 711 -151 701 -147 b 503 -9 632 -98 567 -52 b 485 4 497 -4 491 0 b 704 145 559 49 634 95 b 729 164 711 150 729 151 l 729 168 b 696 196 726 183 710 193 b 621 207 671 202 645 207 b 528 177 589 207 557 200 b 373 76 480 140 426 108 b 246 164 330 104 287 132 b 122 206 207 193 167 203 b 66 192 102 207 72 207 b 99 147 58 173 85 158 b 274 14 157 102 215 58 b 16 -164 184 -42 96 -98 b 0 -179 12 -168 0 -170 b 1 -183 0 -180 0 -183 b 26 -204 6 -193 12 -204 b 53 -206 37 -206 49 -206 z m 611 -177 b 376 -9 530 -118 452 -63 b 164 -143 305 -53 235 -98 b 104 -164 147 -154 130 -164 b 82 -161 96 -164 89 -164 b 230 -65 137 -125 183 -95 l 347 12 b 327 26 341 16 334 22 b 196 121 284 58 239 89 b 163 147 184 128 173 137 b 140 173 154 154 140 163 b 143 180 140 176 141 177 b 179 166 154 194 167 174 b 372 27 243 120 307 73 l 566 153 b 613 171 580 161 596 170 b 635 160 624 171 635 174 b 621 147 635 153 626 150 l 429 24 b 400 6 419 19 409 13 b 569 -117 456 -35 513 -75 b 611 -177 588 -130 608 -143 z\"\n    },\n    \"noteheadXHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 421,\n      \"y_min\": -145.51844828189743,\n      \"y_max\": 151,\n      \"ha\": 296.51844828189746,\n      \"o\": \"m 490 -209 b 539 -207 505 -207 521 -207 b 606 -209 560 -207 583 -209 b 598 -196 602 -203 600 -199 b 406 -19 533 -135 469 -78 l 540 130 b 547 144 546 135 547 140 b 536 156 547 148 543 153 b 488 192 518 166 503 176 b 416 217 471 209 444 217 b 323 180 380 217 344 204 l 264 115 b 239 138 256 122 248 131 b 33 197 180 196 108 200 b 3 186 23 197 6 193 b 19 154 -1 174 10 163 b 171 12 69 107 120 59 b 19 -157 120 -45 69 -101 b 0 -177 14 -163 0 -166 b 1 -181 0 -179 0 -180 b 39 -203 9 -197 22 -203 l 186 -203 b 197 -202 190 -202 193 -200 b 213 -202 203 -202 207 -202 b 262 -180 228 -202 246 -199 b 314 -122 279 -161 297 -141 b 490 -209 363 -170 412 -216 z m 435 -148 b 291 -30 379 -112 337 -69 l 213 -118 b 190 -137 207 -125 202 -137 b 145 -111 173 -130 154 -127 b 160 -79 137 -98 151 -88 b 238 16 184 -48 212 -16 b 141 99 204 43 173 72 b 124 117 135 105 130 111 b 115 132 121 121 115 127 b 118 137 115 134 117 137 b 141 132 127 147 135 138 l 253 36 b 347 150 285 75 315 112 b 370 164 354 160 363 163 b 403 145 382 164 393 156 b 416 127 412 140 416 132 b 405 102 416 118 412 111 l 307 -10 b 413 -105 343 -42 379 -73 b 435 -148 425 -115 436 -125 z\"\n    },\n    \"noteheadXBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 289,\n      \"y_min\": -156,\n      \"y_max\": 157,\n      \"ha\": 313,\n      \"o\": \"m 23 -225 b 69 -204 40 -223 56 -219 b 137 -131 92 -180 115 -157 l 209 -50 b 377 -197 264 -101 321 -148 b 403 -210 384 -203 393 -210 b 408 -210 405 -210 406 -210 b 416 -192 416 -207 416 -199 b 416 -186 416 -190 416 -187 b 403 -148 416 -171 413 -158 b 344 -81 384 -125 367 -101 b 252 -1 312 -55 282 -29 b 377 157 297 49 340 101 b 402 202 387 170 402 187 b 395 217 402 207 400 213 b 376 226 389 223 382 226 b 334 192 360 226 346 204 b 206 42 289 143 248 94 b 96 161 167 81 131 120 b 60 193 86 174 76 189 b 33 206 52 196 42 206 b 22 199 29 206 26 204 b 10 173 14 190 10 181 b 22 147 10 166 14 157 b 148 7 62 98 104 52 b 164 -7 154 1 158 -3 b 10 -189 111 -66 55 -122 b 0 -212 6 -197 0 -203 b 1 -217 0 -213 0 -216 b 23 -225 4 -226 14 -222 z\"\n    },\n    \"noteheadCircleX\": {\n      \"x_min\": 0,\n      \"x_max\": 344,\n      \"y_min\": -179,\n      \"y_max\": 175.12551922594864,\n      \"ha\": 354.12551922594866,\n      \"o\": \"m 99 -210 b 236 -258 137 -242 186 -258 b 418 -183 305 -258 374 -230 b 495 33 475 -120 495 -48 b 494 66 495 45 494 55 b 302 252 487 183 405 256 b 181 243 262 249 222 248 b 46 171 128 236 79 219 b 0 19 14 127 0 73 b 99 -210 0 -68 35 -156 z m 89 -120 b 48 0 56 -82 48 -42 b 89 112 48 35 59 76 b 109 101 96 111 102 108 l 210 7 l 187 -17 b 89 -120 151 -53 125 -82 z m 176 -183 b 127 -163 158 -179 141 -171 l 252 -32 l 372 -144 b 233 -189 334 -173 285 -189 b 176 -183 215 -189 196 -187 z m 245 42 b 124 156 204 79 164 118 b 200 176 145 166 170 173 b 337 183 245 181 291 184 b 377 176 351 183 364 180 b 245 42 333 131 288 86 z m 405 -112 l 392 -99 l 285 3 l 400 121 b 418 154 409 131 418 140 b 465 50 448 130 465 94 b 405 -112 462 -17 439 -73 z\"\n    },\n    \"noteheadTriangleUpWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 366,\n      \"y_min\": -145,\n      \"y_max\": 138,\n      \"ha\": 283,\n      \"o\": \"m 55 -209 l 504 -209 b 527 -199 520 -209 527 -206 b 520 -180 527 -193 524 -187 b 459 -94 501 -151 480 -122 b 279 170 400 -6 341 82 b 242 199 266 190 253 199 b 206 167 230 199 219 189 b 10 -145 140 63 76 -42 b 0 -171 3 -156 0 -164 b 23 -200 0 -183 9 -192 b 55 -209 33 -206 45 -209 z m 202 -161 b 176 -137 183 -163 176 -156 b 187 -62 176 -111 179 -86 b 253 95 206 -10 228 42 b 337 -132 307 24 334 -49 b 311 -161 338 -153 334 -161 b 256 -160 294 -161 275 -160 b 202 -161 238 -160 220 -161 z\"\n    },\n    \"noteheadTriangleUpHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 341.0833130378007,\n      \"y_min\": -159,\n      \"y_max\": 159,\n      \"ha\": 318,\n      \"o\": \"m 458 -226 b 478 -229 462 -223 469 -229 b 490 -222 482 -229 487 -228 b 477 -184 495 -207 484 -196 b 281 176 410 -65 346 56 b 238 225 269 194 261 213 b 225 229 232 226 228 228 b 209 215 217 229 213 225 b 4 -153 141 92 73 -30 b 0 -170 1 -158 0 -164 b 12 -189 0 -177 4 -183 b 66 -215 27 -202 43 -213 b 458 -226 194 -217 323 -222 z m 278 -170 l 151 -167 b 298 75 204 -89 240 -1 b 301 82 300 76 301 79 b 357 -22 320 48 338 13 b 344 -43 353 -27 350 -37 b 285 -163 317 -79 312 -127 b 278 -170 282 -166 279 -167 z\"\n    },\n    \"noteheadTriangleUpBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 346,\n      \"y_min\": -149,\n      \"y_max\": 149,\n      \"ha\": 298,\n      \"o\": \"m 481 -215 b 498 -209 487 -215 492 -215 b 482 -173 498 -194 488 -184 l 284 173 b 259 202 278 184 269 194 b 229 215 248 210 238 215 b 196 189 216 215 206 206 l 13 -150 b 3 -168 9 -156 6 -163 b 0 -180 1 -173 0 -177 b 12 -197 0 -187 4 -193 b 63 -213 29 -206 45 -213 b 481 -215 203 -213 343 -215 z\"\n    },\n    \"noteheadDiamondWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 271,\n      \"y_min\": -132,\n      \"y_max\": 132,\n      \"ha\": 264,\n      \"o\": \"m 230 -177 b 256 -190 240 -186 249 -190 b 281 -173 265 -190 272 -184 b 382 -29 314 -124 347 -76 b 390 -10 387 -22 390 -14 b 376 12 390 -3 386 4 b 173 177 308 66 240 121 b 144 190 166 183 160 190 b 98 153 127 186 112 170 b 13 40 69 115 42 76 b 0 13 4 29 0 20 b 22 -19 0 3 7 -9 b 230 -177 92 -69 163 -122 z m 279 -128 b 261 -122 274 -134 266 -127 l 66 30 b 56 45 59 35 56 39 b 62 56 56 48 59 52 b 122 122 91 101 105 122 b 194 76 138 122 158 107 l 320 -26 b 336 -50 325 -32 336 -35 b 279 -128 318 -75 300 -102 z\"\n    },\n    \"noteheadDiamondHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 295,\n      \"y_min\": -148,\n      \"y_max\": 148,\n      \"ha\": 296,\n      \"o\": \"m 228 -207 b 245 -213 235 -210 240 -213 b 264 -203 252 -213 258 -210 b 415 -46 314 -150 364 -98 b 425 -27 420 -40 425 -35 b 416 -10 425 -22 422 -16 b 217 200 350 60 284 131 b 194 213 212 207 204 213 b 170 196 181 213 177 203 b 14 33 118 143 68 86 b 0 7 4 23 0 16 b 17 -20 0 -1 6 -10 b 118 -114 52 -50 82 -85 b 228 -207 156 -144 184 -184 z m 209 -157 b 134 -69 177 -138 141 -115 b 130 -26 131 -55 130 -40 b 215 148 130 42 160 99 b 225 156 217 151 220 156 b 230 153 226 156 228 156 b 323 -26 276 104 321 55 b 298 -75 324 -42 315 -59 b 265 -109 287 -86 276 -99 b 209 -157 245 -125 228 -167 z\"\n    },\n    \"noteheadDiamondBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 310,\n      \"y_min\": -146,\n      \"y_max\": 146,\n      \"ha\": 292,\n      \"o\": \"m 266 -210 b 289 -194 278 -209 284 -200 b 406 -76 330 -156 367 -115 b 446 -23 433 -49 446 -36 b 412 29 446 -10 435 3 b 405 36 409 30 408 33 b 252 196 354 89 304 143 b 225 210 243 204 235 210 b 204 202 219 210 212 209 b 10 24 141 141 75 82 b 0 9 4 19 0 14 b 9 -6 0 4 3 0 l 232 -192 b 266 -210 242 -200 256 -204 z\"\n    },\n    \"noteheadSquareWhite\": {\n      \"x_min\": 0,\n      \"x_max\": 350,\n      \"y_min\": -131,\n      \"y_max\": 131,\n      \"ha\": 262,\n      \"o\": \"m 468 -189 b 485 -187 474 -189 480 -189 b 500 -176 495 -187 500 -183 b 498 -168 500 -174 498 -171 b 497 -166 498 -167 497 -167 l 498 -164 b 504 -154 503 -163 504 -158 b 503 -138 504 -150 503 -144 b 503 -135 503 -137 503 -137 l 503 -94 b 492 66 500 -45 494 10 b 488 135 492 89 488 112 b 484 150 488 141 485 145 b 482 154 482 151 482 153 b 429 189 472 177 456 189 b 53 184 304 186 179 186 l 39 184 b 33 181 36 183 35 183 b 12 160 20 181 12 177 b 0 -109 9 71 4 -19 b 19 -137 0 -125 7 -134 b 23 -151 19 -141 20 -145 b 85 -187 37 -173 55 -187 b 468 -189 212 -187 340 -187 z m 246 -127 l 246 -125 l 63 -125 b 66 -111 65 -122 66 -117 b 73 72 69 -50 71 10 l 73 130 b 88 128 78 128 82 128 b 148 130 108 130 128 130 b 271 128 190 130 230 128 l 271 130 l 420 130 b 428 20 425 92 425 56 l 436 -127 z\"\n    },\n    \"noteheadSquareBlack\": {\n      \"x_min\": 0,\n      \"x_max\": 342,\n      \"y_min\": -129.98961937716263,\n      \"y_max\": 132.44444444444446,\n      \"ha\": 262.4340638216071,\n      \"o\": \"m 217 190 b 439 186 304 190 372 190 b 467 180 448 184 458 183 b 492 145 484 176 492 167 b 490 -124 490 56 490 -33 b 488 -141 490 -130 488 -135 b 456 -170 488 -163 478 -168 b 118 -183 344 -176 230 -181 b 29 -184 89 -183 60 -192 b 0 -148 4 -180 0 -168 b 1 29 1 -89 1 -30 b 1 156 1 71 1 114 b 36 190 3 187 4 190 b 217 190 102 192 168 190 z\"\n    },\n    \"augmentationDot\": {\n      \"x_min\": 0,\n      \"x_max\": 96,\n      \"y_min\": -57,\n      \"y_max\": 57,\n      \"ha\": 114,\n      \"o\": \"m 13 -82 b 16 -81 14 -82 14 -82 b 105 -73 46 -76 75 -76 b 131 -48 121 -72 131 -60 b 138 26 134 -24 138 0 b 137 48 138 33 138 40 b 108 82 134 71 125 82 b 95 81 104 82 99 82 b 33 71 75 78 53 75 b 4 46 20 68 6 62 b 0 -66 1 9 0 -29 b 13 -82 0 -73 1 -82 z\"\n    },\n    \"tremolo1\": {\n      \"x_min\": -158,\n      \"x_max\": 156.1938147957849,\n      \"y_min\": -88,\n      \"y_max\": 88,\n      \"ha\": 176,\n      \"o\": \"m -206 -127 b -194 -125 -203 -127 -199 -127 b 173 -36 -72 -94 50 -65 b 220 16 202 -29 215 -12 b 225 50 223 30 225 45 b 216 107 226 76 222 91 b 194 127 210 120 204 127 b 183 124 192 127 189 127 l -192 33 b -226 -9 -213 27 -222 14 b -228 -32 -226 -16 -228 -23 b -222 -108 -228 -58 -222 -82 b -206 -127 -222 -120 -217 -127 z\"\n    },\n    \"flag8thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 261,\n      \"y_min\": -819,\n      \"y_max\": 0,\n      \"ha\": 819,\n      \"o\": \"m 265 -1171 b 351 -1035 301 -1130 336 -1087 b 376 -867 369 -979 376 -923 b 367 -755 376 -829 373 -792 b 233 -422 350 -632 311 -520 b 131 -291 199 -379 166 -334 b 65 -125 91 -239 66 -192 b 62 -75 65 -112 62 -91 b 42 0 62 -49 52 -24 l 35 0 b 0 -63 6 -13 0 -36 l 0 -144 b 96 -445 0 -255 29 -356 b 177 -547 124 -478 150 -514 b 308 -831 246 -629 298 -721 b 317 -890 310 -851 317 -871 b 311 -919 317 -900 315 -910 b 256 -1005 297 -950 282 -984 b 228 -1068 233 -1024 228 -1045 b 230 -1106 228 -1080 229 -1093 b 240 -1162 232 -1125 239 -1143 b 251 -1179 242 -1174 246 -1179 b 265 -1171 255 -1179 259 -1176 z\"\n    },\n    \"flag8thDown\": {\n      \"x_min\": 0,\n      \"x_max\": 261,\n      \"y_min\": 0,\n      \"y_max\": 819,\n      \"ha\": 819,\n      \"o\": \"m 265 1171 b 251 1179 259 1176 255 1179 b 240 1162 246 1179 242 1174 b 230 1106 239 1143 232 1125 b 228 1068 229 1093 228 1080 b 256 1005 228 1045 233 1024 b 311 919 282 984 297 950 b 317 890 315 910 317 900 b 308 831 317 871 310 851 b 177 547 298 721 246 629 b 96 445 150 514 124 478 b 0 144 29 356 0 255 l 0 63 b 35 0 0 36 6 13 l 42 0 b 62 75 52 24 62 49 b 59 117 62 91 59 104 b 131 291 60 183 91 239 b 233 422 166 334 199 379 b 367 755 311 520 350 632 b 376 867 373 792 376 829 b 351 1035 376 923 369 979 b 265 1171 336 1087 301 1130 z\"\n    },\n    \"flag16thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 327.1591498636094,\n      \"y_min\": -819.3972596310256,\n      \"y_max\": 0,\n      \"ha\": 819.3972596310256,\n      \"o\": \"m 415 -1179 b 435 -1168 423 -1182 429 -1174 b 451 -1138 442 -1159 446 -1149 b 465 -1020 464 -1102 467 -1064 b 461 -962 464 -1004 464 -984 b 471 -821 467 -916 472 -870 b 465 -721 472 -791 467 -756 b 415 -520 459 -651 441 -585 b 200 -245 370 -408 284 -327 b 96 -114 160 -206 118 -168 b 75 -24 84 -85 85 -53 b 59 0 72 -16 72 0 b 53 -1 58 0 56 -1 b 27 -32 40 -6 27 -10 b 29 -68 27 -43 29 -55 b 10 -79 20 -69 13 -72 b 1 -109 6 -89 1 -99 b 0 -170 0 -130 0 -148 b 35 -410 0 -252 12 -333 b 258 -793 76 -557 156 -681 b 409 -1158 350 -896 410 -1014 b 415 -1179 409 -1165 405 -1175 z m 413 -816 b 331 -681 392 -769 364 -723 b 145 -420 266 -596 189 -521 b 86 -281 125 -374 102 -330 b 156 -370 105 -312 128 -343 b 318 -539 210 -425 269 -478 b 413 -816 383 -621 420 -713 z\"\n    },\n    \"flag16thDown\": {\n      \"x_min\": 0,\n      \"x_max\": 327.1591498636094,\n      \"y_min\": 0,\n      \"y_max\": 819,\n      \"ha\": 819,\n      \"o\": \"m 59 0 b 75 24 72 0 72 16 b 96 114 85 53 84 85 b 200 245 118 168 160 206 b 415 520 284 327 370 408 b 465 721 441 585 459 651 b 471 821 467 756 472 791 b 461 962 472 870 467 916 b 465 1020 464 984 464 1004 b 451 1138 467 1064 464 1102 b 435 1168 446 1149 442 1159 b 418 1179 431 1172 425 1179 b 415 1179 418 1179 416 1179 b 408 1169 409 1176 408 1174 b 409 1158 408 1165 409 1161 b 258 793 410 1014 350 896 b 35 410 156 681 76 557 b 0 170 12 333 0 252 b 0 88 0 148 0 108 b 29 7 0 71 6 23 b 59 0 33 4 58 0 z m 86 281 b 145 420 102 330 125 374 b 331 681 189 521 266 596 b 413 816 364 723 392 769 b 415 791 413 808 415 799 b 318 539 415 698 377 613 b 156 370 269 478 210 425 b 86 281 128 343 105 312 z\"\n    },\n    \"flag32ndUp\": {\n      \"x_min\": -0.19862981551275186,\n      \"x_max\": 268.0942440943661,\n      \"y_min\": -849.4710740978672,\n      \"y_max\": 149.0769891455102,\n      \"ha\": 998.5480632433774,\n      \"o\": \"m 323 -1223 b 351 -1198 337 -1227 344 -1210 b 359 -1184 354 -1194 356 -1188 b 386 -999 377 -1122 387 -1060 b 341 -783 386 -927 372 -855 b 330 -736 334 -769 330 -753 b 333 -708 330 -727 330 -717 b 344 -621 340 -678 344 -649 b 341 -579 344 -608 343 -593 b 328 -500 338 -553 328 -526 b 331 -475 328 -491 328 -484 b 347 -370 343 -438 348 -402 b 151 27 348 -212 288 -56 b 53 176 98 59 50 102 b 45 197 53 183 48 192 b 33 215 40 203 40 216 l 30 215 b 6 194 22 212 9 209 b 0 120 3 170 -1 145 b 0 -43 4 65 0 13 b 0 -98 0 -60 1 -79 b 4 -276 0 -157 6 -216 b 7 -456 4 -337 7 -397 b 66 -638 7 -523 22 -585 b 158 -724 94 -671 127 -697 b 318 -1011 246 -801 295 -899 b 321 -1044 321 -1021 321 -1032 b 312 -1152 321 -1080 312 -1116 b 317 -1192 312 -1165 314 -1179 b 323 -1223 320 -1202 311 -1220 z m 275 -657 b 111 -492 226 -589 163 -547 b 65 -376 78 -456 66 -418 b 71 -323 65 -360 68 -341 b 275 -657 164 -418 265 -504 z m 285 -376 b 121 -180 249 -289 173 -245 b 91 -105 104 -158 92 -135 b 288 -354 181 -144 288 -269 b 285 -376 288 -363 287 -370 z\"\n    },\n    \"flag32ndDown\": {\n      \"x_min\": -2.800802874905624,\n      \"x_max\": 268.09424409436605,\n      \"y_min\": -169.07698914551014,\n      \"y_max\": 829.4710740978672,\n      \"ha\": 998.5480632433773,\n      \"o\": \"m 323 1194 b 317 1164 311 1191 320 1174 b 312 1123 314 1151 312 1136 b 321 1015 312 1087 321 1051 b 318 982 321 1004 321 992 b 158 696 295 870 246 772 b 66 609 127 668 94 642 b 7 428 22 556 7 494 b 4 248 7 369 4 308 b -1 78 6 187 -10 137 b 0 14 0 59 0 32 b 0 -148 0 -42 0 -94 b 6 -223 0 -174 3 -199 b 30 -243 9 -238 22 -240 l 33 -243 b 45 -226 40 -245 40 -232 b 53 -204 48 -220 53 -212 b 151 -56 50 -131 98 -88 b 347 341 288 27 348 183 b 331 446 348 373 343 409 b 328 471 328 455 328 462 b 341 550 328 497 338 524 b 344 592 343 564 344 579 b 333 680 344 621 340 649 b 330 707 330 688 330 698 b 341 755 330 724 334 740 b 386 971 372 827 386 899 b 359 1155 387 1031 377 1093 b 351 1169 356 1159 354 1165 b 323 1194 344 1181 337 1198 z m 275 628 b 71 294 265 475 164 389 b 65 347 68 312 65 331 b 111 464 66 389 78 428 b 275 628 163 518 226 560 z m 285 347 b 288 325 287 341 288 334 b 91 76 288 240 181 115 b 121 151 92 107 104 130 b 285 347 173 216 249 261 z\"\n    },\n    \"flag64thUp\": {\n      \"x_min\": -4,\n      \"x_max\": 282,\n      \"y_min\": -823.5430338167065,\n      \"y_max\": 347,\n      \"ha\": 1170.5430338167066,\n      \"o\": \"m 350 -1185 b 380 -1162 364 -1189 374 -1175 b 406 -1022 399 -1119 406 -1071 b 359 -798 406 -945 384 -871 b 348 -756 353 -785 348 -772 b 350 -744 348 -753 350 -749 b 363 -621 356 -704 363 -664 b 360 -580 363 -608 363 -593 b 359 -560 359 -573 359 -567 b 373 -490 359 -536 366 -513 b 393 -346 386 -444 393 -395 b 387 -269 393 -320 390 -294 b 348 -127 382 -219 348 -173 b 351 -104 348 -120 348 -111 b 353 -65 351 -91 353 -78 b 341 37 353 -26 348 6 b 226 215 323 108 278 164 b 86 336 181 258 127 288 b 62 395 72 353 62 370 b 42 481 62 423 55 454 b 27 500 37 488 36 500 b 24 498 26 500 26 500 b -1 480 14 497 1 492 b -6 444 -4 467 -6 455 l -6 435 b -1 341 -1 403 -1 372 l -1 266 b 6 156 -1 230 0 193 b 13 35 12 117 13 75 l 13 -35 b 14 -85 13 -52 14 -68 b 29 -276 19 -150 33 -213 b 20 -448 24 -334 20 -392 b 24 -534 20 -477 22 -505 b 114 -708 30 -605 59 -664 b 197 -780 143 -732 171 -755 b 344 -1153 301 -884 341 -1011 b 343 -1172 344 -1159 343 -1166 b 350 -1185 343 -1176 344 -1182 z m 300 -691 b 117 -508 243 -616 168 -575 b 82 -408 94 -480 82 -448 b 84 -379 82 -397 82 -387 b 259 -553 135 -451 206 -492 b 301 -667 287 -583 301 -619 b 300 -691 301 -674 301 -683 z m 298 -410 b 118 -235 238 -351 176 -295 b 76 -88 82 -197 78 -147 b 268 -252 137 -153 203 -202 b 330 -360 304 -279 330 -315 b 323 -402 330 -373 327 -387 b 311 -418 318 -413 315 -418 b 298 -410 307 -418 302 -415 z m 287 -88 b 62 193 186 -17 79 48 b 229 52 121 144 174 98 b 289 -33 256 29 274 -3 b 295 -56 294 -42 295 -49 b 287 -88 295 -66 292 -76 z\"\n    },\n    \"flag64thDown\": {\n      \"x_min\": -5,\n      \"x_max\": 281,\n      \"y_min\": -375,\n      \"y_max\": 795.5430338167065,\n      \"ha\": 1170.5430338167066,\n      \"o\": \"m 348 1145 b 341 1132 343 1142 341 1136 b 343 1113 341 1126 343 1119 b 196 740 340 971 300 844 b 112 668 170 714 141 691 b 23 494 58 624 29 564 b 19 408 20 465 19 436 b 27 236 19 351 23 294 b 13 45 32 173 17 109 b 12 -6 13 27 12 12 l 12 -75 b 4 -196 12 -115 10 -157 b -3 -307 -1 -233 -3 -271 l -3 -382 b -7 -475 -3 -412 -3 -444 l -7 -484 b -3 -520 -7 -495 -6 -507 b 23 -539 0 -533 13 -537 b 26 -540 24 -540 24 -540 b 40 -521 35 -540 36 -528 b 60 -435 53 -494 60 -464 b 85 -376 60 -410 71 -393 b 225 -255 125 -328 180 -298 b 340 -78 276 -204 321 -148 b 351 24 347 -46 351 -14 b 350 63 351 37 350 50 b 347 86 347 71 347 79 b 386 229 347 132 380 179 b 392 305 389 253 392 279 b 372 449 392 354 384 403 b 357 520 364 472 357 495 b 359 540 357 527 357 533 b 361 580 361 553 361 567 b 348 704 361 624 354 664 b 347 716 348 708 347 713 b 357 757 347 732 351 744 b 405 982 383 831 405 904 b 379 1122 405 1031 397 1079 b 348 1145 373 1135 363 1149 z m 298 651 b 300 626 300 642 300 634 b 258 513 300 579 285 543 b 82 338 204 452 134 410 b 81 367 81 347 81 357 b 115 468 81 408 92 439 b 298 651 167 534 242 576 z m 297 370 b 310 377 301 374 305 377 b 321 361 314 377 317 373 b 328 320 325 347 328 333 b 266 212 328 275 302 239 b 75 48 202 161 135 112 b 117 194 76 107 81 157 b 297 370 174 255 236 311 z m 285 48 b 294 16 291 36 294 26 b 288 -7 294 9 292 1 b 228 -92 272 -37 255 -69 b 60 -233 173 -138 120 -184 b 285 48 78 -88 184 -23 z\"\n    },\n    \"flag128thUp\": {\n      \"x_min\": 0,\n      \"x_max\": 252,\n      \"y_min\": -804,\n      \"y_max\": 530,\n      \"ha\": 1334,\n      \"o\": \"m 298 -1158 b 328 -1126 312 -1158 320 -1139 b 330 -1116 330 -1123 330 -1119 b 347 -996 343 -1076 347 -1037 b 328 -837 347 -943 338 -890 b 320 -778 324 -816 320 -798 b 330 -733 320 -763 323 -749 b 340 -665 338 -714 337 -688 b 341 -645 340 -660 341 -652 b 333 -534 341 -609 333 -572 b 343 -471 333 -513 334 -492 b 361 -366 356 -436 361 -402 b 331 -202 361 -311 348 -256 b 328 -187 330 -197 328 -193 b 331 -179 328 -184 328 -181 b 363 -55 353 -137 363 -96 b 337 79 363 -12 351 33 b 327 114 333 92 327 104 b 344 144 327 124 331 132 b 359 174 353 150 357 163 b 361 228 360 193 361 210 b 243 517 361 337 325 435 b 147 596 213 546 179 569 b 75 708 111 626 75 655 b 62 744 75 723 68 733 b 50 763 58 752 58 763 b 46 762 49 763 48 762 b 17 742 36 757 22 757 b 0 697 14 726 0 711 b 1 595 0 662 3 631 b 0 469 0 552 0 511 b 1 429 0 456 0 442 b 22 289 6 382 22 337 b 24 128 22 238 24 184 b 22 66 24 108 23 86 b 19 -19 20 37 19 10 b 20 -132 19 -56 20 -95 b 13 -276 20 -180 19 -229 b 9 -359 10 -304 9 -330 b 12 -487 9 -402 12 -445 b 56 -582 12 -526 29 -554 b 197 -742 107 -632 160 -681 b 288 -1100 265 -851 276 -976 b 288 -1122 288 -1107 287 -1115 b 287 -1145 289 -1129 287 -1138 b 298 -1158 287 -1153 288 -1158 z m 249 -609 b 69 -357 197 -520 88 -471 b 249 -609 131 -441 229 -498 z m 279 -396 b 132 -223 233 -330 180 -279 b 81 -112 104 -192 81 -156 b 82 -91 81 -105 81 -98 b 279 -396 167 -125 269 -281 z m 271 -73 b 127 72 233 -14 179 26 b 81 167 96 98 81 127 b 84 194 81 176 82 184 b 271 -73 148 102 242 39 z m 304 150 b 75 475 229 256 112 334 b 304 150 233 357 305 287 z\"\n    },\n    \"flag128thDown\": {\n      \"x_min\": -0.8888888888888888,\n      \"x_max\": 252,\n      \"y_min\": -580,\n      \"y_max\": 754,\n      \"ha\": 1334,\n      \"o\": \"m 298 1086 b 287 1073 288 1086 287 1081 b 288 1050 287 1066 289 1057 b 288 1028 287 1043 288 1035 b 197 670 276 904 265 779 b 56 510 160 609 107 560 b 12 415 29 482 12 454 b 9 287 12 373 9 330 b 13 204 9 258 10 232 b 20 60 19 157 20 108 b 19 -53 20 23 19 -16 b 22 -138 19 -82 20 -109 b 24 -200 23 -158 24 -180 b 22 -361 24 -256 22 -310 b 1 -501 22 -409 6 -454 b 0 -541 0 -514 0 -528 b 0 -667 0 -583 -3 -624 b 0 -809 0 -675 -3 -791 b 46 -834 4 -825 36 -829 b 50 -835 48 -834 49 -835 b 62 -816 58 -835 58 -824 b 75 -780 68 -805 75 -795 b 147 -668 75 -727 111 -698 b 243 -589 179 -641 213 -618 b 361 -300 325 -507 361 -409 b 359 -246 361 -282 360 -265 b 344 -216 357 -235 353 -222 b 327 -186 331 -204 327 -196 b 337 -151 327 -176 333 -164 b 363 -17 351 -105 363 -60 b 331 107 363 24 353 65 b 328 115 328 109 328 112 b 331 130 328 121 330 125 b 361 294 348 184 361 239 b 343 399 361 330 356 364 b 333 462 334 420 333 441 b 341 573 333 500 341 537 b 340 593 341 580 340 588 b 330 661 337 616 338 642 b 320 706 323 677 320 691 b 328 765 320 726 324 744 b 347 924 338 818 347 871 b 330 1044 347 965 343 1004 b 328 1054 330 1047 330 1051 b 298 1086 320 1067 312 1086 z m 249 537 b 69 285 229 426 131 369 b 249 537 88 399 197 448 z m 279 324 b 82 19 269 209 167 53 b 81 40 81 26 81 33 b 132 151 81 84 104 120 b 279 324 180 207 233 258 z m 271 1 b 84 -266 242 -111 148 -174 b 81 -239 82 -256 81 -248 b 127 -144 81 -199 96 -170 b 271 1 179 -98 233 -58 z m 304 -222 b 75 -547 305 -359 233 -429 b 304 -222 112 -406 229 -328 z\"\n    },\n    \"accidentalFlat\": {\n      \"x_min\": 1,\n      \"x_max\": 209,\n      \"y_min\": -208,\n      \"y_max\": 472,\n      \"ha\": 680,\n      \"o\": \"m 29 -300 b 46 -289 33 -300 39 -297 b 107 -243 65 -274 86 -258 b 301 127 233 -153 301 -30 b 298 186 301 147 301 166 b 190 297 291 256 251 297 b 147 289 177 297 163 294 b 86 265 127 284 107 274 l 85 264 l 85 301 b 91 465 85 356 88 410 b 94 559 91 497 94 527 b 84 651 94 589 91 621 b 66 680 81 661 81 680 l 65 680 b 37 645 49 678 37 665 b 33 523 36 605 32 563 l 33 478 b 26 223 33 393 29 308 b 1 -141 22 101 1 -19 b 17 -287 1 -189 4 -239 b 29 -300 20 -295 23 -300 z m 68 -105 b 76 12 71 -68 72 -29 b 81 107 79 43 81 75 l 86 109 b 171 135 114 121 141 135 b 204 128 181 135 193 132 b 238 92 228 120 239 108 b 230 63 238 84 236 75 b 68 -105 193 -10 132 -59 z\"\n    },\n    \"accidentalNatural\": {\n      \"x_min\": 0,\n      \"x_max\": 213.5,\n      \"y_min\": -456,\n      \"y_max\": 462,\n      \"ha\": 918,\n      \"o\": \"m 255 -657 b 281 -624 271 -657 275 -636 b 285 -599 282 -615 285 -608 b 292 -300 288 -500 289 -400 b 289 -161 292 -253 289 -207 b 300 128 292 -65 297 32 b 304 168 300 128 302 150 l 304 173 l 305 190 l 305 199 l 307 225 b 304 259 307 229 310 246 b 272 298 297 274 302 305 b 63 266 204 279 134 272 b 72 514 68 348 72 432 b 71 595 72 541 72 567 b 56 665 71 619 66 642 b 17 579 9 651 17 608 b 3 144 19 433 7 289 b 0 -7 1 94 0 43 b 3 -134 0 -50 1 -92 b 7 -219 3 -163 7 -192 b 35 -251 7 -243 17 -251 b 49 -249 39 -251 43 -251 l 223 -223 l 230 -222 l 230 -359 b 223 -516 230 -410 223 -464 b 236 -619 223 -550 226 -585 b 255 -657 240 -634 236 -657 z m 58 -81 l 58 -63 b 55 81 56 -14 53 33 l 56 99 b 85 99 65 99 75 98 b 232 108 134 104 183 107 l 240 109 l 236 66 b 232 -48 235 29 232 -10 b 58 -81 174 -63 115 -73 z\"\n    },\n    \"accidentalSharp\": {\n      \"x_min\": -22,\n      \"x_max\": 390,\n      \"y_min\": -384,\n      \"y_max\": 383,\n      \"ha\": 767,\n      \"o\": \"m 202 -553 b 219 -526 213 -552 216 -536 b 226 -471 225 -507 226 -488 b 225 -425 226 -455 225 -441 b 226 -392 225 -415 225 -402 b 233 -305 229 -363 232 -334 l 297 -292 b 331 -469 300 -353 311 -412 b 347 -485 333 -477 338 -485 b 363 -469 356 -487 359 -477 b 374 -418 373 -454 374 -435 b 376 -382 376 -405 376 -393 b 372 -276 376 -347 373 -311 l 455 -259 b 550 -156 534 -243 544 -232 b 550 -109 550 -137 552 -124 b 526 -78 549 -91 541 -78 b 523 -78 524 -78 524 -78 b 507 -79 517 -78 513 -78 b 403 -101 474 -88 438 -95 l 379 -105 b 382 -42 380 -85 380 -63 b 384 96 383 4 384 50 b 503 131 425 107 464 118 b 549 173 524 138 543 150 b 562 249 554 199 562 223 b 554 294 562 264 560 279 b 536 315 549 308 544 315 b 533 315 534 315 534 315 b 517 312 528 315 523 315 b 382 266 472 294 428 279 l 377 344 b 359 531 374 406 372 469 b 348 552 356 539 357 552 b 347 552 348 552 347 552 l 343 552 b 315 528 331 549 317 544 l 315 501 b 320 249 315 416 318 333 l 243 232 b 239 361 243 275 242 318 b 226 425 238 383 238 403 b 199 359 194 409 199 382 b 193 223 196 312 194 268 b 72 202 153 215 112 209 b 4 118 13 192 4 183 b 10 66 0 102 12 84 b 33 29 7 39 14 30 b 48 32 37 29 42 30 b 187 55 95 39 141 46 l 183 -75 b 176 -145 181 -99 179 -122 b 16 -179 122 -156 69 -166 b -32 -232 -14 -186 -32 -197 b -17 -331 -32 -266 -19 -298 b -1 -356 -17 -347 -13 -354 b 12 -353 1 -356 6 -354 b 167 -320 63 -341 115 -331 b 166 -377 166 -338 166 -357 b 189 -526 166 -428 171 -477 b 202 -553 192 -536 189 -553 z m 240 -132 b 243 -37 242 -101 242 -69 b 245 65 245 -3 245 30 b 315 79 269 69 292 73 b 301 -120 308 13 305 -53 z\"\n    },\n    \"accidentalDoubleSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 287,\n      \"y_min\": -159,\n      \"y_max\": 159,\n      \"ha\": 318,\n      \"o\": \"m 84 -229 b 107 -216 91 -229 98 -225 b 200 -125 138 -186 167 -154 b 232 -95 212 -115 222 -105 b 347 -189 271 -125 310 -157 b 370 -200 356 -196 363 -200 b 396 -179 380 -200 389 -192 b 412 -102 410 -154 406 -125 b 377 -27 410 -69 400 -46 l 325 14 b 402 91 350 42 374 68 b 413 127 410 96 413 107 b 382 200 409 148 397 176 b 350 229 370 220 360 229 b 314 210 340 229 328 223 b 274 174 300 199 285 187 b 212 104 252 151 232 128 b 92 187 173 132 132 161 b 78 193 86 192 82 193 b 68 190 75 193 72 193 b 48 179 62 186 53 187 b 40 137 43 168 40 154 b 81 16 40 92 56 32 b 107 -3 89 10 98 4 b 14 -94 76 -32 45 -62 b 0 -124 6 -102 0 -114 b 12 -154 0 -134 3 -144 b 62 -215 26 -176 48 -193 b 84 -229 69 -225 76 -229 z\"\n    },\n    \"accidentalDoubleFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 359,\n      \"y_min\": -220,\n      \"y_max\": 446,\n      \"ha\": 666,\n      \"o\": \"m 43 -317 b 72 -301 55 -317 63 -310 b 160 -186 108 -268 134 -226 b 236 -60 186 -145 212 -102 b 233 -131 235 -85 233 -108 b 239 -220 233 -161 235 -190 b 259 -246 240 -233 239 -240 b 301 -228 284 -252 291 -238 b 465 -7 369 -163 416 -85 b 517 173 500 48 517 108 b 451 307 517 229 505 284 b 409 315 436 312 422 315 b 331 287 382 315 356 305 b 311 274 324 282 320 274 l 310 274 l 310 566 b 305 621 310 585 312 603 b 294 642 301 628 305 642 l 292 642 b 264 622 282 641 266 636 b 253 575 259 606 256 590 b 246 418 248 523 246 471 b 248 243 246 360 248 302 l 248 187 b 164 238 220 225 193 238 b 85 213 140 238 112 226 b 84 229 85 220 84 225 b 86 315 85 258 86 287 b 81 528 86 386 82 458 b 71 582 81 547 78 566 b 56 603 66 590 68 603 l 53 603 b 23 580 40 600 26 598 b 19 537 20 566 19 552 b 20 514 19 530 19 521 b 26 390 24 472 26 432 b 14 66 26 282 16 174 b 0 -168 13 -12 0 -91 b 12 -279 0 -206 3 -242 b 30 -314 16 -294 14 -308 b 43 -317 35 -317 39 -317 z m 75 -147 b 73 30 75 -86 75 -29 b 118 82 73 62 92 76 b 132 84 124 84 128 84 b 190 52 156 84 174 69 b 193 40 192 49 193 45 b 192 33 193 37 193 35 b 75 -147 157 -30 125 -95 z m 301 -72 b 302 7 302 -45 302 -19 l 302 86 b 351 158 304 121 321 145 b 383 166 361 163 373 166 b 435 143 402 166 419 157 b 445 127 441 138 445 132 b 441 114 445 122 444 118 b 301 -72 397 49 354 -14 z\"\n    },\n    \"accidentalParensLeft\": {\n      \"x_min\": 0,\n      \"x_max\": 130.18934911242604,\n      \"y_min\": -270,\n      \"y_max\": 267.6082500723851,\n      \"ha\": 537.6082500723851,\n      \"o\": \"m 107 -389 b 127 -374 114 -389 120 -384 b 141 -347 132 -367 137 -357 b 151 -294 148 -330 151 -311 b 122 -207 151 -265 141 -236 b 63 -65 94 -164 72 -117 b 59 -10 60 -46 59 -27 b 145 223 59 78 94 153 b 187 354 176 262 189 305 b 177 384 187 364 190 380 b 143 373 166 387 153 383 b 124 354 137 367 130 361 b 0 -35 33 240 0 108 l 0 -92 b 85 -372 4 -193 27 -287 b 107 -389 92 -383 99 -389 z\"\n    },\n    \"accidentalParensRight\": {\n      \"x_min\": -0.4444444444444445,\n      \"x_max\": 139,\n      \"y_min\": -275,\n      \"y_max\": 277,\n      \"ha\": 552,\n      \"o\": \"m 58 -396 b 96 -354 75 -396 85 -370 b 200 13 168 -238 200 -111 b 153 268 200 109 184 190 b 49 392 131 320 101 364 b 26 399 40 397 33 399 b 0 366 10 399 0 387 b 0 318 -1 350 0 334 l 0 291 b 27 238 -3 266 7 253 b 143 9 105 180 143 98 b 141 -20 143 -1 143 -10 b 63 -225 135 -92 108 -164 b 36 -307 45 -251 36 -278 b 40 -344 36 -320 37 -331 b 42 -356 42 -347 42 -351 b 58 -396 42 -374 37 -396 z\"\n    },\n    \"accidentalQuarterToneFlatStein\": {\n      \"x_min\": 0,\n      \"x_max\": 208,\n      \"y_min\": -240,\n      \"y_max\": 440,\n      \"ha\": 680,\n      \"o\": \"m 272 -346 b 284 -333 278 -346 281 -341 b 300 -187 297 -285 300 -235 b 275 177 300 -65 279 55 b 268 432 272 262 268 347 l 268 477 b 264 599 269 517 265 559 b 236 634 264 619 252 632 l 235 634 b 217 605 220 634 220 615 b 207 513 210 575 207 543 b 210 419 207 481 210 451 b 216 255 213 364 216 310 l 216 217 l 215 219 b 154 243 194 228 174 238 b 111 251 138 248 124 251 b 3 140 50 251 10 210 b 0 81 0 120 0 101 b 194 -289 0 -76 68 -199 b 255 -336 215 -304 236 -320 b 272 -346 262 -343 268 -346 z m 233 -151 b 71 17 168 -105 108 -56 b 63 46 65 29 63 37 b 96 82 62 62 73 73 b 130 89 108 86 120 89 b 215 63 160 89 187 75 l 220 60 b 225 -35 220 29 222 -3 b 233 -151 229 -75 230 -114 z\"\n    },\n    \"accidentalThreeQuarterTonesFlatZimmermann\": {\n      \"x_min\": 0,\n      \"x_max\": 422,\n      \"y_min\": -240,\n      \"y_max\": 440,\n      \"ha\": 680,\n      \"o\": \"m 336 -346 b 353 -336 340 -346 346 -343 b 413 -289 372 -320 393 -304 b 608 81 540 -199 608 -76 b 605 140 608 101 608 120 b 497 251 598 210 557 251 b 454 243 484 251 469 248 b 393 219 433 238 413 228 l 392 217 l 392 255 b 397 419 392 310 395 364 b 400 513 397 451 400 481 b 390 605 400 543 397 575 b 373 634 387 615 387 634 l 372 634 b 344 599 356 632 344 619 b 340 477 343 559 338 517 l 340 432 b 333 177 340 347 336 262 b 308 -187 328 55 308 -65 b 324 -333 308 -235 311 -285 b 336 -346 327 -341 330 -346 z m 233 -151 b 71 17 168 -105 108 -56 b 63 46 65 29 63 37 b 96 82 62 62 73 73 b 130 89 108 86 120 89 b 215 63 160 89 187 75 l 220 60 b 225 -35 220 29 222 -3 b 233 -151 229 -75 230 -114 z m 272 -346 b 284 -333 278 -346 281 -341 b 300 -187 297 -285 300 -235 b 275 177 300 -65 279 55 b 268 432 272 262 268 347 l 268 477 b 264 599 269 517 265 559 b 236 634 264 619 252 632 l 235 634 b 217 605 220 634 220 615 b 207 513 210 575 207 543 b 210 419 207 481 210 451 b 216 255 213 364 216 310 l 216 217 l 215 219 b 154 243 194 228 174 238 b 111 251 138 248 124 251 b 3 140 50 251 10 210 b 0 81 0 120 0 101 b 194 -289 0 -76 68 -199 b 255 -336 215 -304 236 -320 b 272 -346 262 -343 268 -346 z m 374 -151 b 383 -35 377 -114 379 -75 b 387 60 386 -3 387 29 l 393 63 b 478 89 420 75 448 89 b 511 82 488 89 500 86 b 544 46 534 73 546 62 b 537 17 544 37 543 29 b 374 -151 500 -56 439 -105 z\"\n    },\n    \"accidentalQuarterToneSharpStein\": {\n      \"x_min\": 0,\n      \"x_max\": 300,\n      \"y_min\": -338,\n      \"y_max\": 351,\n      \"ha\": 689,\n      \"o\": \"m 194 -487 b 225 -432 215 -469 223 -452 b 238 -232 229 -366 236 -298 b 377 -199 285 -220 331 -209 b 418 -164 397 -193 410 -181 b 432 -88 428 -138 432 -114 b 412 -42 432 -55 428 -42 b 389 -46 406 -42 399 -43 l 235 -85 b 233 -20 235 -63 233 -42 b 233 105 232 22 233 63 b 312 121 259 111 285 117 b 406 226 390 134 400 145 b 373 284 409 268 402 284 b 344 281 364 284 356 282 b 232 258 307 276 269 266 b 230 308 232 275 232 291 b 210 505 229 374 232 441 b 183 471 189 501 184 490 b 180 406 181 449 180 428 b 184 246 180 353 184 300 b 48 222 140 236 94 228 b 0 168 6 216 0 209 b 7 86 1 141 4 114 b 27 66 9 73 13 66 b 35 66 29 66 32 66 b 184 94 85 66 135 84 b 187 -1 184 62 186 30 b 190 -96 189 -33 190 -65 l 112 -114 b 35 -213 27 -132 35 -132 b 33 -253 35 -226 35 -240 b 49 -276 33 -269 37 -276 b 62 -275 52 -276 56 -276 l 186 -245 l 186 -256 b 179 -387 180 -300 177 -343 b 194 -487 180 -419 179 -454 z\"\n    },\n    \"accidentalThreeQuarterTonesSharpStein\": {\n      \"x_min\": -23,\n      \"x_max\": 388,\n      \"y_min\": -373,\n      \"y_max\": 445,\n      \"ha\": 818,\n      \"o\": \"m 114 -537 b 138 -475 137 -518 138 -495 b 147 -292 138 -413 144 -353 b 212 -278 168 -287 190 -282 b 243 -444 215 -333 225 -389 b 261 -467 248 -454 251 -465 b 281 -446 272 -469 276 -455 b 292 -347 292 -416 288 -384 b 288 -262 289 -320 288 -291 l 374 -245 b 376 -311 374 -266 374 -288 b 390 -456 379 -357 379 -405 b 416 -396 412 -436 415 -418 b 423 -287 420 -360 423 -323 b 422 -235 423 -269 423 -252 b 451 -229 432 -233 441 -232 b 547 -98 524 -215 547 -199 l 547 -89 b 521 -49 546 -59 540 -49 b 497 -52 516 -49 507 -49 b 418 -68 469 -56 444 -63 b 423 52 419 -29 422 12 b 426 140 425 81 425 109 b 495 160 449 145 472 153 b 552 219 526 170 546 189 b 559 279 557 240 553 262 b 530 341 559 324 552 341 b 490 331 520 341 507 338 b 432 311 471 324 452 318 b 449 552 436 392 442 471 b 452 588 451 563 452 575 b 446 622 452 599 451 611 b 436 641 444 629 448 641 b 418 628 428 641 420 636 b 409 602 413 621 410 611 b 386 297 396 501 390 399 b 297 274 356 288 327 281 b 291 403 295 317 294 360 b 274 550 288 452 284 501 b 259 569 271 564 265 569 b 240 559 253 569 248 563 b 230 537 232 554 230 546 l 230 488 b 233 369 230 448 232 409 b 236 261 236 333 238 297 b 156 245 210 255 183 251 b 154 396 154 295 154 346 b 150 416 154 403 153 410 b 140 438 145 423 150 438 l 138 438 b 118 413 128 436 118 428 b 112 354 118 393 114 374 b 109 238 109 315 109 276 b 49 226 89 233 69 230 b 3 163 16 222 3 202 b 7 91 3 138 9 114 b 29 62 7 69 13 62 b 39 63 32 62 35 63 b 104 73 60 66 82 71 b 101 -10 104 46 102 17 l 92 -132 l 10 -150 b -33 -204 -19 -157 -33 -170 b -19 -310 -32 -240 -19 -274 b -6 -324 -19 -321 -13 -324 b 6 -323 -1 -324 1 -324 b 82 -307 32 -317 58 -311 b 81 -376 82 -330 81 -353 b 114 -537 81 -431 94 -484 z m 154 -120 b 157 20 154 -73 156 -26 b 158 82 158 40 158 62 b 230 95 183 86 206 89 b 225 0 229 63 226 32 b 217 -107 223 -35 220 -71 z m 294 -92 b 297 -37 295 -73 295 -56 b 300 49 300 -9 300 20 b 300 108 300 69 300 88 b 379 127 325 114 353 120 b 374 -76 376 59 374 -9 b 294 -92 347 -82 320 -86 z\"\n    },\n    \"accidentalBuyukMucennebFlat\": {\n      \"x_min\": 1.8692317181955784,\n      \"x_max\": 287,\n      \"y_min\": -248,\n      \"y_max\": 432.4720949426819,\n      \"ha\": 680.4720949426819,\n      \"o\": \"m 410 128 b 302 239 403 199 363 239 b 259 232 289 239 275 236 b 199 207 239 226 219 216 l 197 206 l 197 243 b 197 251 197 246 197 248 b 347 317 248 272 298 295 b 376 347 360 324 372 334 b 389 435 387 376 393 405 b 348 454 384 462 377 465 b 202 387 300 432 251 409 b 203 408 203 395 203 402 b 203 431 203 416 203 423 b 347 490 252 451 300 469 b 376 517 360 495 372 505 b 389 599 387 546 393 572 b 348 616 384 625 377 628 b 203 556 300 596 251 576 b 196 593 202 569 199 582 b 179 622 193 603 193 622 l 177 622 b 150 588 161 621 150 608 b 147 533 150 570 148 552 b 29 488 108 517 69 503 b 3 455 12 482 3 472 b 12 353 1 422 9 389 b 145 408 56 372 101 389 b 145 363 145 392 145 377 b 29 315 107 347 68 331 b 3 281 12 310 3 298 b 12 170 1 245 9 209 b 141 226 55 189 98 207 b 138 166 140 206 138 186 b 114 -199 134 43 115 -76 b 130 -344 114 -246 117 -297 b 141 -357 132 -353 135 -357 b 158 -347 145 -357 151 -354 b 219 -301 177 -331 199 -315 b 413 69 346 -210 413 -88 b 410 128 413 89 413 108 z m 350 35 b 343 6 350 26 348 17 b 180 -163 308 -69 245 -117 b 189 -46 183 -125 184 -86 b 193 49 192 -14 193 17 l 199 52 b 284 78 226 63 253 78 b 317 71 294 78 305 75 b 350 35 340 62 351 50 z\"\n    },\n    \"accidentalBakiyeFlat\": {\n      \"x_min\": 1.8692317181955784,\n      \"x_max\": 287,\n      \"y_min\": -236,\n      \"y_max\": 444,\n      \"ha\": 680,\n      \"o\": \"m 141 -340 b 158 -330 145 -340 151 -337 b 219 -284 177 -314 199 -298 b 413 86 346 -193 413 -71 b 410 145 413 107 413 125 b 302 256 403 216 363 256 b 259 249 289 256 275 253 b 199 225 239 243 219 233 l 197 223 l 197 261 b 199 334 197 285 199 310 b 347 406 249 357 298 382 b 376 439 360 413 372 425 b 390 516 384 465 390 490 b 389 537 390 523 390 530 b 372 564 384 556 382 564 b 348 557 367 564 359 562 b 204 487 300 537 253 510 b 206 518 206 497 206 507 b 196 611 206 549 203 580 b 179 639 193 621 193 639 l 177 639 b 150 605 161 638 150 625 b 145 482 148 564 144 523 l 145 458 b 29 405 107 439 68 420 b 3 366 12 397 3 386 b 12 243 1 325 9 287 b 143 307 56 265 99 285 l 138 183 b 114 -181 134 60 114 -59 b 130 -327 114 -229 117 -279 b 141 -340 132 -336 135 -340 z m 180 -145 b 189 -29 183 -108 184 -69 b 193 66 192 3 193 35 l 199 69 b 284 95 226 81 253 95 b 317 88 294 95 305 92 b 350 52 340 79 351 68 b 343 23 350 43 348 35 b 180 -145 305 -50 245 -99 z\"\n    },\n    \"accidentalKomaSharp\": {\n      \"x_min\": 0,\n      \"x_max\": 300,\n      \"y_min\": -338,\n      \"y_max\": 351,\n      \"ha\": 689,\n      \"o\": \"m 194 -487 b 225 -432 215 -469 223 -452 b 238 -232 229 -366 236 -298 b 377 -199 285 -220 331 -209 b 418 -164 397 -193 410 -181 b 432 -88 428 -138 432 -114 b 412 -42 432 -55 428 -42 b 389 -46 406 -42 399 -43 l 235 -85 b 233 -20 235 -63 233 -42 b 233 105 232 22 233 63 b 312 121 259 111 285 117 b 406 226 390 134 400 145 b 373 284 409 268 402 284 b 344 281 364 284 356 282 b 232 258 307 276 269 266 b 230 308 232 275 232 291 b 210 505 229 374 232 441 b 183 471 189 501 184 490 b 180 406 181 449 180 428 b 184 246 180 353 184 300 b 48 222 140 236 94 228 b 0 168 6 216 0 209 b 7 86 1 141 4 114 b 27 66 9 73 13 66 b 35 66 29 66 32 66 b 184 94 85 66 135 84 b 187 -1 184 62 186 30 b 190 -96 189 -33 190 -65 l 112 -114 b 35 -213 27 -132 35 -132 b 33 -253 35 -226 35 -240 b 49 -276 33 -269 37 -276 b 62 -275 52 -276 56 -276 l 186 -245 l 186 -256 b 179 -387 180 -300 177 -343 b 194 -487 180 -419 179 -454 z\"\n    },\n    \"accidentalKucukMucennebSharp\": {\n      \"x_min\": -0.15206251809627475,\n      \"x_max\": 359,\n      \"y_min\": -420,\n      \"y_max\": 343,\n      \"ha\": 763,\n      \"o\": \"m 236 -605 b 262 -543 256 -583 261 -564 b 269 -423 268 -503 269 -464 b 266 -340 269 -396 268 -367 l 361 -318 b 405 -276 384 -312 399 -298 b 413 -189 412 -248 416 -219 b 395 -164 412 -171 409 -164 b 382 -166 392 -164 387 -164 b 264 -193 343 -176 304 -184 b 269 -102 265 -163 268 -132 b 454 -62 331 -89 392 -78 b 501 -23 477 -58 494 -45 b 517 62 511 6 517 33 b 487 112 517 95 513 112 b 471 111 482 112 477 112 b 274 66 406 95 340 81 b 276 138 275 91 276 114 b 350 154 301 144 325 148 b 402 203 377 160 396 176 b 412 284 408 230 412 258 b 392 311 412 302 406 311 b 372 308 386 311 379 310 b 287 291 343 301 314 297 l 295 405 b 298 441 297 416 298 428 b 292 475 298 452 297 464 b 282 494 289 482 294 494 b 264 481 274 494 266 490 b 255 455 259 474 256 464 b 239 282 248 397 243 340 b 148 268 209 278 179 274 b 62 164 62 252 62 253 l 62 132 b 79 108 60 117 65 108 l 86 108 l 230 130 b 229 92 230 118 229 105 b 228 56 228 79 228 68 b 66 20 173 43 120 32 b 0 -59 6 7 3 1 l 0 -138 b 14 -160 -1 -156 4 -160 b 27 -158 19 -160 23 -160 b 222 -112 92 -141 157 -127 b 220 -203 220 -143 220 -173 b 147 -217 196 -207 171 -213 b 89 -288 92 -228 89 -229 b 95 -347 85 -305 96 -325 b 112 -374 92 -366 98 -374 b 125 -373 117 -374 121 -374 l 220 -351 b 222 -458 220 -386 220 -422 b 236 -605 223 -504 225 -552 z\"\n    },\n    \"accidentalKoron\": {\n      \"x_min\": 0,\n      \"x_max\": 303,\n      \"y_min\": -462.4598053473055,\n      \"y_max\": 180,\n      \"ha\": 642.4598053473055,\n      \"o\": \"m 59 -665 b 72 -649 69 -662 72 -657 b 69 -626 72 -642 69 -634 b 69 -622 69 -625 69 -624 b 69 -600 69 -615 69 -608 b 55 -156 60 -456 68 -311 b 86 -170 66 -166 76 -170 b 112 -163 95 -170 104 -166 b 390 -35 204 -120 298 -78 b 436 -1 409 -27 436 -27 b 396 46 436 22 413 33 l 382 55 b 46 243 271 121 157 179 b 12 259 29 253 17 259 b 0 219 1 259 0 248 b 3 -372 0 22 3 -176 b 6 -616 3 -454 6 -536 b 59 -665 6 -638 40 -671 z m 55 -118 l 55 199 b 363 24 156 141 258 84 b 55 -118 259 -24 160 -69 z\"\n    },\n    \"accidentalSori\": {\n      \"x_min\": 0,\n      \"x_max\": 434,\n      \"y_min\": -295,\n      \"y_max\": 325,\n      \"ha\": 620,\n      \"o\": \"m 194 -425 b 196 -409 194 -418 196 -413 b 194 -194 196 -337 196 -266 b 364 -127 251 -171 308 -150 b 361 -321 363 -192 364 -256 b 410 -387 360 -357 373 -377 b 413 -373 412 -382 413 -377 b 418 -114 418 -287 418 -200 l 418 -105 b 595 -35 477 -82 536 -59 b 625 0 612 -27 625 -22 b 593 48 624 23 618 39 l 419 117 b 423 370 419 202 423 285 b 426 403 423 382 426 393 b 418 436 426 415 425 426 b 384 468 409 449 399 468 b 369 448 370 468 369 459 b 369 436 369 444 369 441 b 369 428 369 433 369 431 l 369 423 b 367 138 369 328 367 233 l 353 143 l 192 207 l 192 367 b 173 406 192 383 184 396 b 151 422 167 413 160 422 b 144 420 148 422 147 422 b 137 403 138 416 137 410 b 137 392 137 399 137 396 l 137 229 b 33 271 102 243 68 256 b 13 276 26 274 19 276 b 0 262 6 276 0 272 b 35 199 1 239 0 212 l 138 160 b 140 -148 138 58 138 -45 b 56 -181 111 -158 84 -170 b 24 -215 35 -189 24 -199 b 29 -235 24 -220 26 -228 b 49 -253 35 -249 42 -253 b 78 -240 59 -253 69 -243 b 140 -216 98 -233 120 -225 l 140 -356 b 194 -425 140 -406 141 -406 z m 194 -125 b 193 138 194 -37 193 50 b 315 89 233 122 275 107 b 366 71 333 84 350 76 b 364 -58 366 27 366 -16 b 194 -125 308 -81 251 -104 z m 419 -36 l 419 49 l 526 7 l 485 -10 z\"\n    },\n    \"articAccentAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 425,\n      \"y_min\": 0,\n      \"y_max\": 326,\n      \"ha\": 326,\n      \"o\": \"m 27 1 b 78 12 46 0 62 6 b 347 112 168 45 253 91 b 521 184 409 128 459 167 b 608 259 557 194 589 220 b 612 274 611 265 612 271 b 598 292 612 281 608 287 b 477 347 559 312 518 331 b 176 465 374 384 275 425 b 156 469 168 468 161 469 b 125 456 145 469 137 465 b 53 370 96 432 78 399 b 45 353 48 363 45 357 b 68 333 45 344 52 337 b 360 225 166 298 262 261 b 192 154 302 203 249 171 b 13 36 120 132 53 105 b 0 13 9 29 0 22 b 0 9 0 12 0 10 b 16 0 3 1 10 0 l 26 0 b 27 1 27 0 27 0 z\"\n    },\n    \"articAccentBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 425,\n      \"y_min\": -326,\n      \"y_max\": 0,\n      \"ha\": 326,\n      \"o\": \"m 16 -469 l 26 -469 b 27 -469 27 -469 27 -469 b 78 -458 46 -469 62 -464 b 347 -357 168 -426 253 -380 b 521 -285 409 -341 459 -302 b 608 -210 557 -276 589 -249 b 612 -196 611 -204 612 -200 b 598 -179 612 -189 608 -183 b 477 -122 559 -157 518 -138 b 176 -4 374 -85 275 -45 b 156 0 168 -1 161 0 b 125 -13 145 0 137 -4 b 53 -99 96 -37 78 -71 b 45 -117 48 -107 45 -112 b 68 -137 45 -125 52 -132 b 360 -245 166 -171 262 -209 b 192 -315 302 -266 249 -300 b 13 -433 120 -337 53 -366 b 0 -456 9 -442 0 -448 b 0 -461 0 -458 0 -459 b 16 -469 3 -468 10 -469 z\"\n    },\n    \"articTenutoAbove\": {\n      \"x_min\": 0.35192668236256364,\n      \"x_max\": 471.12386605641063,\n      \"y_min\": 0,\n      \"y_max\": 56,\n      \"ha\": 56,\n      \"o\": \"m 137 0 b 197 1 156 0 179 1 b 409 6 268 1 338 6 b 482 4 432 6 459 6 b 556 0 508 3 534 0 b 651 10 588 0 621 3 b 678 27 662 12 678 10 b 654 59 680 45 672 53 b 511 75 606 73 560 73 b 255 81 426 78 341 81 b 160 79 222 81 193 79 l 36 79 b 1 71 24 78 7 85 b 19 32 -3 56 9 43 b 45 16 26 24 36 20 b 137 0 76 3 108 0 z\"\n    },\n    \"articTenutoBelow\": {\n      \"x_min\": 0.35192668236256364,\n      \"x_max\": 471.12386605641063,\n      \"y_min\": -59,\n      \"y_max\": -3,\n      \"ha\": 56,\n      \"o\": \"m 137 -85 b 197 -84 156 -85 179 -84 b 409 -79 268 -84 338 -79 b 482 -81 432 -79 459 -79 b 556 -85 508 -82 534 -85 b 651 -75 588 -85 621 -82 b 678 -58 662 -73 678 -75 b 654 -26 680 -40 672 -32 b 511 -10 606 -12 560 -12 b 255 -4 426 -7 341 -4 b 160 -6 222 -4 193 -6 l 36 -6 b 1 -14 24 -7 7 0 b 19 -53 -3 -29 9 -42 b 45 -69 26 -60 36 -65 b 137 -85 76 -82 108 -85 z\"\n    },\n    \"articStaccatoAbove\": {\n      \"x_min\": 1.4151102965496913,\n      \"x_max\": 112,\n      \"y_min\": 0,\n      \"y_max\": 156,\n      \"ha\": 156,\n      \"o\": \"m 98 0 b 132 23 109 0 122 7 b 161 112 150 50 161 79 b 158 148 161 124 161 137 b 125 186 154 167 131 167 b 63 225 117 215 85 216 b 23 197 45 222 30 219 b 3 91 12 163 12 127 b 19 66 0 79 4 69 b 65 27 40 62 53 46 b 98 0 76 9 88 0 z\"\n    },\n    \"articStaccatoBelow\": {\n      \"x_min\": 1.4151102965496913,\n      \"x_max\": 112.08403222864916,\n      \"y_min\": -156,\n      \"y_max\": 0,\n      \"ha\": 156,\n      \"o\": \"m 132 -202 b 161 -112 151 -174 163 -145 b 158 -76 161 -101 161 -88 b 125 -39 153 -58 131 -58 b 63 0 115 -10 85 -9 b 23 -27 45 -3 30 -6 b 3 -134 12 -62 10 -98 b 19 -158 0 -145 4 -156 b 65 -197 40 -164 53 -179 b 98 -225 75 -216 88 -225 b 132 -202 109 -225 122 -217 z\"\n    },\n    \"articStaccatissimoAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 139,\n      \"y_min\": 0,\n      \"y_max\": 411,\n      \"ha\": 411,\n      \"o\": \"m 96 0 l 104 0 b 144 115 143 29 138 75 b 197 423 158 217 180 320 b 200 454 199 433 200 444 b 181 540 200 482 193 513 b 112 592 167 573 141 592 b 55 567 92 592 72 585 b 0 490 32 546 3 527 l 0 484 b 27 279 14 416 14 347 b 84 20 43 193 52 104 b 96 0 86 13 92 6 z\"\n    },\n    \"articStaccatissimoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 139,\n      \"y_min\": -411,\n      \"y_max\": 0,\n      \"ha\": 411,\n      \"o\": \"m 88 -592 b 145 -567 108 -592 128 -585 b 200 -490 168 -546 197 -527 l 200 -484 b 173 -279 186 -416 186 -347 b 117 -20 157 -193 148 -104 b 104 0 114 -13 108 -6 l 96 0 b 56 -115 58 -29 62 -75 b 3 -423 42 -217 20 -320 b 0 -454 1 -433 0 -444 b 19 -540 0 -482 7 -513 b 88 -592 33 -573 59 -592 z\"\n    },\n    \"articMarcatoAbove\": {\n      \"x_min\": 0.04121419527862119,\n      \"x_max\": 396,\n      \"y_min\": 0,\n      \"y_max\": 328.0000000000001,\n      \"ha\": 328.0000000000001,\n      \"o\": \"m 477 0 b 510 13 488 0 500 6 b 570 124 546 40 563 81 b 547 183 570 147 560 166 b 356 422 487 265 405 330 b 346 442 354 429 350 436 l 346 444 b 318 465 340 456 330 464 l 312 469 b 274 449 294 480 284 461 b 242 413 262 438 253 425 b 56 196 177 343 112 274 b 1 56 26 154 13 105 b 27 20 -4 35 9 20 b 42 23 32 20 37 20 b 84 53 59 29 72 39 b 255 269 141 125 193 200 b 275 229 262 255 266 242 b 448 14 324 151 390 86 b 477 0 456 4 467 0 z\"\n    },\n    \"articMarcatoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 395.9587858047214,\n      \"y_min\": -328.0000000000001,\n      \"y_max\": 0,\n      \"ha\": 328.0000000000001,\n      \"o\": \"m 258 -469 b 297 -449 276 -480 287 -461 b 328 -413 308 -438 317 -425 b 514 -196 393 -343 458 -274 b 569 -56 544 -154 557 -105 b 543 -20 575 -35 562 -20 b 528 -23 539 -20 533 -20 b 487 -53 511 -29 498 -39 b 315 -269 429 -125 377 -200 b 295 -229 308 -255 304 -242 b 122 -14 246 -151 180 -86 b 94 0 114 -4 104 0 b 60 -13 82 0 71 -6 b 0 -124 24 -40 7 -81 b 23 -183 0 -147 10 -166 b 215 -422 84 -265 166 -330 b 225 -442 216 -429 220 -436 l 225 -444 b 252 -465 230 -456 240 -464 z\"\n    },\n    \"fermataAbove\": {\n      \"x_min\": -0.04550444040404433,\n      \"x_max\": 472,\n      \"y_min\": 2.015071727506986,\n      \"y_max\": 454,\n      \"ha\": 451.984928272493,\n      \"o\": \"m 39 10 b 78 108 66 37 71 73 b 163 311 92 181 111 252 b 284 423 199 353 239 392 b 373 458 312 444 340 454 b 433 431 395 458 410 446 b 603 153 530 361 596 276 b 595 121 603 144 595 131 l 595 88 b 602 50 596 75 589 55 b 639 73 619 43 631 60 b 651 102 645 82 648 92 b 667 194 660 132 662 163 b 680 278 671 222 672 248 b 560 567 680 386 638 481 b 396 654 508 625 452 649 b 291 632 364 654 325 644 b 161 526 235 613 200 566 b 4 249 85 446 26 357 b 4 174 0 222 -3 196 b 10 19 4 124 4 69 b 29 4 12 6 16 0 b 39 10 35 4 33 4 z m 338 37 b 370 40 350 36 357 36 b 380 75 387 40 380 43 b 389 94 382 79 382 85 b 356 132 389 111 374 122 b 269 154 328 147 300 156 b 225 125 252 154 228 157 b 261 48 222 81 232 56 b 338 37 287 40 312 40 z\"\n    },\n    \"fermataBelow\": {\n      \"x_min\": -0.310835055998654,\n      \"x_max\": 518.570567335755,\n      \"y_min\": -430,\n      \"y_max\": -0.9161449836506543,\n      \"ha\": 429.08385501634933,\n      \"o\": \"m 344 -615 b 500 -543 402 -602 452 -576 b 713 -253 605 -471 661 -364 b 746 -98 737 -204 750 -153 b 727 -59 744 -82 744 -59 b 688 -88 711 -59 694 -68 b 678 -109 687 -96 683 -102 b 562 -314 648 -183 611 -252 b 387 -439 516 -373 458 -416 b 328 -449 367 -446 347 -449 b 180 -386 274 -449 225 -423 b 69 -179 111 -330 69 -262 b 75 -121 69 -160 71 -141 b 84 -58 78 -101 84 -79 b 82 -39 84 -52 84 -45 b 68 -1 79 -26 82 -4 b 26 -32 49 0 33 -12 b 20 -52 24 -39 22 -45 b 0 -223 9 -107 -3 -161 b 141 -553 1 -348 27 -468 b 304 -619 192 -590 243 -619 b 344 -615 317 -619 330 -618 z m 415 -190 b 435 -157 429 -192 435 -184 b 308 -27 435 -86 379 -27 b 271 -46 287 -27 272 -35 b 269 -69 269 -55 269 -62 b 364 -183 269 -128 302 -170 z\"\n    },\n    \"breathMarkComma\": {\n      \"x_min\": 0,\n      \"x_max\": 148,\n      \"y_min\": 0,\n      \"y_max\": 275,\n      \"ha\": 275,\n      \"o\": \"m 120 0 b 187 78 156 20 174 48 b 213 209 206 121 213 164 b 206 294 213 238 210 265 b 140 390 200 337 171 367 b 122 396 134 395 128 396 b 68 382 105 396 85 384 b 46 379 60 382 53 382 b 0 328 12 369 0 357 b 1 311 0 323 1 317 b 30 210 4 275 22 243 b 66 167 39 179 46 167 b 94 171 73 167 82 168 b 143 180 109 174 124 180 b 160 179 148 180 154 180 b 120 66 124 145 120 107 b 120 0 120 45 121 23 z\"\n    },\n    \"breathMarkUpbow\": {\n      \"x_min\": 0,\n      \"x_max\": 254,\n      \"y_min\": 0,\n      \"y_max\": 595,\n      \"ha\": 595,\n      \"o\": \"m 233 0 b 256 48 251 14 253 30 b 272 183 264 92 265 138 b 311 455 289 274 295 364 b 350 716 327 541 341 628 b 366 815 354 749 366 782 b 359 857 366 829 363 842 b 327 815 334 852 330 832 b 302 674 315 769 310 721 b 248 357 288 567 269 462 b 225 226 240 314 242 268 b 210 251 212 232 213 243 b 69 721 163 408 117 564 b 32 835 58 760 53 801 b 20 851 29 841 27 851 b 14 850 19 851 16 851 b 0 828 6 847 0 838 l 0 825 b 12 765 1 804 7 785 b 194 125 73 552 132 338 b 233 0 206 84 213 42 z\"\n    },\n    \"caesura\": {\n      \"x_min\": 0,\n      \"x_max\": 565.5831864753839,\n      \"y_min\": -0.09016994374947417,\n      \"y_max\": 562.4481112129314,\n      \"ha\": 562.5382811566809,\n      \"o\": \"m 226 1 b 248 13 238 -4 243 7 l 353 137 b 759 638 490 302 632 464 b 814 805 795 688 819 740 b 779 786 796 805 788 796 b 628 609 724 732 678 668 b 310 242 523 485 416 363 b 217 69 265 190 217 140 b 222 30 217 58 219 45 b 222 23 222 29 220 26 b 220 12 222 20 220 16 b 226 1 220 7 222 3 z m 0 76 b 49 122 24 92 37 107 b 444 613 180 287 305 455 b 528 770 484 660 518 708 b 531 792 530 778 531 785 b 524 808 531 799 530 805 b 490 792 513 815 498 802 b 390 683 456 756 420 721 b 48 262 275 543 164 400 b 0 76 0 207 7 145 z\"\n    },\n    \"caesuraCurved\": {\n      \"x_min\": 0,\n      \"x_max\": 386,\n      \"y_min\": -10,\n      \"y_max\": 584,\n      \"ha\": 594,\n      \"o\": \"m 180 -14 b 246 14 213 -13 230 0 b 347 144 288 52 315 99 b 526 471 420 246 488 350 b 556 671 546 537 556 603 b 543 798 556 713 553 756 b 504 837 537 822 521 828 b 490 841 500 840 494 841 b 472 832 482 841 477 838 b 406 678 436 785 406 737 b 410 638 406 665 408 652 b 425 511 419 595 425 553 b 315 186 425 395 387 287 b 180 -14 271 122 228 58 z m 14 24 b 49 39 29 24 40 32 b 120 114 76 60 99 85 b 216 276 156 166 184 223 b 317 626 281 384 317 501 b 315 664 317 639 317 651 b 301 773 314 701 311 737 b 262 808 295 795 278 808 b 245 799 256 808 249 805 b 170 641 209 750 170 706 b 171 621 170 634 170 628 b 177 511 176 585 177 549 b 114 229 177 415 160 320 b 0 26 79 161 42 95 b 14 24 6 24 10 24 z\"\n    },\n    \"restMaxima\": {\n      \"x_min\": 0,\n      \"x_max\": 366,\n      \"y_min\": -255,\n      \"y_max\": 255,\n      \"ha\": 510,\n      \"o\": \"m 397 -367 b 504 -343 436 -367 468 -347 b 518 -318 516 -341 518 -330 b 527 -30 518 -217 527 -117 b 526 33 527 -7 527 13 l 526 301 b 501 350 526 323 520 341 b 428 367 477 361 452 367 b 374 359 410 367 393 364 b 357 333 361 354 357 347 b 356 91 357 252 356 171 l 356 30 b 340 -307 357 -82 346 -194 b 397 -367 337 -354 350 -367 z m 46 -357 b 58 -356 49 -357 53 -357 b 154 -333 91 -351 121 -338 b 173 -305 168 -330 173 -320 l 173 302 b 132 356 173 330 157 348 b 68 364 112 363 89 364 b 3 304 19 363 1 348 l 3 4 l 0 4 b 1 -302 0 -98 0 -200 b 46 -357 1 -331 16 -357 z\"\n    },\n    \"restDoubleWhole\": {\n      \"x_min\": 0,\n      \"x_max\": 122,\n      \"y_min\": 0,\n      \"y_max\": 249,\n      \"ha\": 249,\n      \"o\": \"m 43 0 b 58 1 48 0 52 0 b 124 20 81 6 102 17 b 176 96 173 27 176 58 b 173 220 174 138 173 179 b 176 304 173 248 176 276 b 140 353 176 331 163 346 b 95 359 125 356 111 359 b 32 346 73 359 52 354 b 0 315 20 340 0 337 b 1 243 0 291 1 268 l 1 174 l 4 174 l 4 48 b 43 0 4 16 17 0 z\"\n    },\n    \"restWhole\": {\n      \"x_min\": 0.8908513171538642,\n      \"x_max\": 500,\n      \"y_min\": -120,\n      \"y_max\": 14,\n      \"ha\": 134,\n      \"o\": \"m 76 -173 l 356 -173 l 356 -171 l 642 -171 b 719 -115 680 -171 717 -145 b 720 -82 719 -104 720 -92 b 711 -20 720 -60 719 -40 b 672 17 704 0 694 10 b 649 20 664 20 657 20 b 605 17 634 20 621 17 b 92 19 433 17 262 17 b 29 7 69 20 49 12 b 9 -17 12 4 9 -6 b 10 -43 9 -26 10 -35 b 1 -84 10 -58 3 -72 b 76 -173 0 -147 7 -173 z\"\n    },\n    \"restHalf\": {\n      \"x_min\": 0,\n      \"x_max\": 518.3998530468286,\n      \"y_min\": 0,\n      \"y_max\": 162,\n      \"ha\": 162,\n      \"o\": \"m 98 0 l 446 0 l 556 0 b 665 1 592 0 629 0 b 746 82 720 3 743 29 b 736 174 749 114 740 144 b 670 232 729 215 708 232 b 570 229 636 232 603 229 b 356 233 498 229 426 233 l 73 233 b 0 179 19 233 0 220 b 1 154 0 171 0 164 b 6 95 4 135 6 115 b 98 0 3 27 29 0 z\"\n    },\n    \"restQuarter\": {\n      \"x_min\": -0.3784452492533808,\n      \"x_max\": 263,\n      \"y_min\": -415,\n      \"y_max\": 415,\n      \"ha\": 830,\n      \"o\": \"m 151 -596 b 164 -563 163 -589 161 -575 b 160 -546 164 -557 161 -552 b 124 -396 148 -495 135 -446 b 122 -380 122 -390 122 -384 b 199 -255 122 -331 158 -272 b 228 -256 209 -249 217 -253 b 324 -346 274 -271 298 -310 b 353 -369 331 -356 341 -369 b 360 -367 356 -369 357 -369 b 379 -336 373 -361 379 -348 l 377 -325 b 344 -232 372 -292 366 -258 b 249 -58 301 -180 278 -117 b 242 -36 245 -49 242 -42 b 258 -7 242 -26 248 -17 b 328 78 284 20 311 45 b 354 158 344 104 354 131 b 337 216 354 177 350 196 b 213 435 294 288 249 359 b 115 575 189 487 158 536 b 78 598 105 585 92 598 b 59 592 72 598 66 596 b 39 562 45 583 39 572 b 53 527 39 550 45 539 b 168 344 98 469 125 402 b 187 307 181 328 187 317 b 153 269 187 294 176 284 b 62 213 122 252 91 235 b 40 180 48 203 40 192 b 46 158 40 173 43 166 b 99 65 60 125 79 95 b 183 -79 131 20 160 -29 b 156 -86 173 -88 164 -85 b 0 -261 58 -99 -7 -173 b 96 -557 10 -366 49 -464 b 124 -585 102 -569 109 -580 b 145 -598 132 -588 138 -598 b 151 -596 147 -598 150 -598 z\"\n    },\n    \"rest8th\": {\n      \"x_min\": 0,\n      \"x_max\": 289,\n      \"y_min\": -260,\n      \"y_max\": 261,\n      \"ha\": 521,\n      \"o\": \"m 164 -374 b 212 -340 190 -373 203 -357 b 276 -190 238 -292 258 -242 b 410 285 333 -36 359 128 b 416 314 413 294 416 304 l 416 321 b 393 354 415 341 410 354 b 382 353 389 354 386 354 b 292 311 347 347 315 333 b 174 225 256 276 216 251 b 157 219 168 222 163 219 b 140 228 151 219 145 222 b 131 246 134 233 131 240 b 135 262 131 252 132 256 b 147 298 141 272 147 285 b 127 367 147 323 154 354 b 94 376 114 373 102 376 b 48 336 75 376 63 363 b 3 181 20 288 12 235 b 0 150 1 170 0 160 b 109 24 0 84 35 24 b 171 36 127 24 148 27 b 289 101 213 52 248 75 b 164 -374 256 -62 193 -213 z\"\n    },\n    \"rest16th\": {\n      \"x_min\": 0,\n      \"x_max\": 333,\n      \"y_min\": -328.283950617284,\n      \"y_max\": 244,\n      \"ha\": 572.2839506172841,\n      \"o\": \"m 209 -471 b 246 -458 222 -477 236 -468 b 307 -338 279 -425 300 -384 b 324 -226 312 -301 317 -262 b 428 161 350 -94 386 35 b 480 318 445 215 480 259 b 467 347 480 331 477 341 b 445 351 461 350 454 351 b 408 337 432 351 419 347 b 402 333 405 336 403 334 b 223 215 344 294 294 245 b 236 259 229 233 235 246 b 238 276 238 265 238 271 b 212 338 238 302 226 334 b 193 341 206 340 199 341 b 86 289 156 341 104 317 b 59 180 66 255 59 217 b 156 27 59 76 92 27 b 236 46 179 27 204 35 b 338 101 271 59 298 82 b 289 -49 312 49 302 0 b 196 -122 276 -99 235 -107 b 176 -114 187 -127 176 -127 l 176 -111 b 157 -53 177 -88 164 -72 b 69 -9 141 -7 101 -16 b 17 -48 43 -3 29 -27 b 0 -127 4 -73 0 -99 b 6 -186 0 -147 1 -167 b 82 -294 17 -262 37 -294 b 160 -276 102 -294 128 -289 b 219 -242 181 -268 203 -259 b 236 -230 223 -236 229 -230 b 243 -232 239 -230 240 -230 b 235 -275 248 -246 239 -261 b 202 -456 220 -334 202 -395 b 209 -471 202 -462 203 -468 z\"\n    },\n    \"rest32nd\": {\n      \"x_min\": 0,\n      \"x_max\": 347,\n      \"y_min\": -497.5023916875033,\n      \"y_max\": 483,\n      \"ha\": 980.5023916875033,\n      \"o\": \"m 177 -716 b 217 -690 194 -720 209 -704 b 233 -655 225 -680 230 -668 b 292 -390 253 -567 275 -480 b 361 -48 312 -275 336 -161 b 452 400 393 102 422 252 b 497 629 467 477 482 553 b 500 647 498 635 500 641 b 480 691 500 665 492 684 b 464 696 475 694 469 696 b 418 674 448 696 431 685 l 361 626 b 333 611 353 618 343 612 b 308 629 325 611 317 616 b 239 667 292 651 265 661 b 204 670 228 668 216 670 b 86 559 141 670 95 628 b 85 537 86 552 85 544 b 107 416 85 495 95 455 b 161 372 114 389 134 372 b 174 373 166 372 170 372 b 226 383 192 374 209 377 b 387 478 285 402 330 444 b 364 386 379 444 364 415 b 276 271 364 323 320 298 b 265 266 272 268 268 266 b 252 276 261 266 256 269 b 143 333 229 311 186 333 b 107 327 130 333 118 330 b 43 243 62 314 46 291 b 58 145 43 210 52 179 b 150 63 68 92 99 63 b 315 132 213 63 259 98 b 266 -58 297 63 281 4 b 207 -101 259 -91 230 -96 b 186 -66 186 -107 199 -75 b 180 -50 181 -63 183 -55 b 101 -3 160 -23 135 -3 b 9 -66 59 -3 20 -32 b 0 -118 3 -84 0 -101 b 10 -196 0 -144 6 -170 b 104 -287 20 -256 52 -287 b 137 -282 114 -287 125 -287 b 184 -269 151 -281 171 -269 b 196 -275 190 -269 193 -271 b 199 -287 197 -278 199 -282 b 184 -343 199 -304 189 -325 b 181 -348 184 -346 183 -347 b 134 -595 158 -429 131 -508 b 156 -677 134 -624 150 -648 b 177 -716 158 -693 160 -713 z\"\n    },\n    \"rest64th\": {\n      \"x_min\": 0,\n      \"x_max\": 428,\n      \"y_min\": -720,\n      \"y_max\": 473.6797408388932,\n      \"ha\": 1193.6797408388932,\n      \"o\": \"m 200 -1037 b 229 -1012 215 -1037 222 -1025 b 238 -984 233 -1004 236 -994 b 282 -780 248 -914 265 -848 b 386 -369 317 -644 354 -507 b 491 104 422 -212 451 -53 b 600 541 528 249 550 399 b 616 629 611 570 616 599 b 600 680 616 648 615 671 b 550 665 586 687 566 677 b 480 618 527 649 501 635 b 464 611 474 613 468 611 b 448 622 458 611 454 615 b 366 662 425 651 397 662 b 331 658 354 662 343 661 b 242 572 285 647 253 619 b 236 528 239 557 236 543 b 266 400 236 484 251 442 b 325 373 274 377 301 373 b 436 409 366 373 403 383 l 494 452 b 474 360 485 416 474 389 b 383 248 474 297 435 269 b 320 328 377 288 351 310 b 276 341 305 337 291 341 b 186 269 235 341 194 311 b 181 230 183 256 181 243 b 187 153 181 204 186 179 b 279 63 192 86 233 63 b 304 65 288 63 295 63 b 416 115 344 72 379 92 b 387 -14 406 69 397 27 b 320 -95 380 -52 369 -86 b 318 -79 320 -89 320 -84 b 223 0 305 -29 271 0 b 122 -81 171 0 135 -30 b 118 -127 120 -96 118 -112 b 118 -196 118 -150 118 -173 b 137 -242 118 -215 125 -229 b 209 -275 157 -266 181 -275 b 249 -269 222 -275 235 -274 b 318 -248 272 -264 294 -255 b 281 -390 315 -301 292 -344 b 276 -400 279 -393 279 -397 b 259 -420 272 -408 266 -416 b 246 -429 255 -425 251 -429 b 233 -415 242 -429 238 -426 b 176 -359 225 -389 200 -372 b 121 -346 158 -348 140 -346 b 14 -408 73 -346 27 -370 b 0 -498 4 -438 0 -468 b 6 -564 0 -520 3 -543 b 91 -635 12 -611 45 -635 b 131 -629 104 -635 117 -634 b 223 -590 163 -622 190 -603 b 166 -824 203 -671 189 -747 b 148 -912 157 -852 148 -881 b 156 -955 148 -926 150 -940 b 177 -1008 161 -972 170 -991 b 200 -1037 181 -1020 183 -1037 z\"\n    },\n    \"rest128th\": {\n      \"x_min\": 0.6717818579024267,\n      \"x_max\": 491,\n      \"y_min\": -711,\n      \"y_max\": 719,\n      \"ha\": 1430,\n      \"o\": \"m 233 -1015 b 271 -956 256 -1002 266 -981 l 314 -723 b 393 -350 337 -598 366 -474 b 543 312 442 -128 492 91 b 687 841 583 490 635 665 b 707 958 698 880 707 919 b 706 986 707 968 707 976 b 688 1025 704 999 704 1024 b 670 1027 683 1025 677 1027 b 629 1007 655 1027 639 1022 b 559 945 613 981 586 968 b 541 1004 553 968 559 991 b 456 1035 516 1024 488 1035 b 419 1030 444 1035 431 1034 b 344 953 379 1018 353 995 b 340 900 341 936 340 917 b 341 847 340 881 341 864 b 380 779 340 815 354 793 b 464 763 406 765 435 762 b 592 814 510 763 549 786 b 546 660 575 757 556 710 b 480 585 537 619 517 598 b 478 599 480 590 478 595 b 386 678 472 641 428 678 b 294 612 343 678 304 651 b 279 477 282 567 278 521 b 363 395 281 428 317 395 b 380 396 369 395 374 395 b 488 436 416 403 449 419 b 384 233 469 357 468 275 b 359 291 373 252 377 276 b 282 318 337 310 310 318 b 181 264 243 318 203 298 b 154 107 153 216 154 161 b 242 6 154 42 187 6 b 278 10 253 6 265 7 b 408 88 330 22 366 55 b 387 -1 400 56 393 27 b 301 -112 379 -55 354 -94 b 289 -65 297 -95 302 -79 b 219 -32 269 -42 245 -32 b 183 -37 207 -32 196 -35 b 112 -109 144 -46 121 -71 b 105 -219 104 -145 108 -183 b 186 -315 101 -276 134 -315 b 230 -307 199 -315 215 -312 b 324 -256 264 -295 292 -275 b 180 -491 323 -383 266 -471 b 183 -459 180 -480 180 -469 b 184 -442 184 -454 184 -448 b 184 -436 184 -441 184 -438 b 135 -369 184 -403 170 -383 b 102 -363 125 -364 114 -363 b 29 -399 73 -363 45 -376 b 1 -556 -4 -448 6 -503 b 109 -670 -4 -625 43 -670 b 140 -667 118 -670 130 -668 b 253 -616 180 -658 213 -638 b 238 -688 248 -644 242 -665 b 192 -959 220 -779 192 -867 b 193 -992 192 -971 192 -981 b 210 -1024 194 -1014 199 -1024 b 233 -1015 216 -1024 223 -1021 z\"\n    },\n    \"dynamicPiano\": {\n      \"x_min\": -49,\n      \"x_max\": 326.5019318364244,\n      \"y_min\": -142,\n      \"y_max\": 515,\n      \"ha\": 657,\n      \"o\": \"m -56 -204 b -42 -202 -52 -204 -46 -203 b -19 -194 -35 -202 -26 -197 b 147 -138 35 -170 91 -151 b 249 -58 194 -127 223 -95 b 262 -29 255 -50 262 -39 b 258 -17 262 -24 261 -20 b 232 -7 252 -10 242 -7 b 210 -12 225 -7 217 -9 b 125 -40 184 -23 157 -30 b 183 140 153 19 171 79 b 251 167 207 144 230 153 b 469 518 383 262 480 382 b 357 687 472 626 420 687 b 315 678 344 687 330 684 b 204 600 279 664 240 634 b 210 704 206 635 209 670 b 215 721 212 710 215 716 b 206 733 215 727 212 730 b 180 742 197 736 189 742 b 164 734 176 742 170 740 b 1 575 108 684 36 645 b -7 557 -1 569 -7 563 b -6 553 -7 556 -7 554 b 7 547 -3 547 3 547 l 17 547 b 82 575 43 547 59 567 l 82 452 b 56 46 82 317 81 180 b 17 -66 49 7 46 -36 b -62 -173 -13 -99 -37 -135 b -71 -192 -66 -179 -71 -184 b -68 -199 -71 -193 -69 -196 b -56 -204 -65 -203 -60 -204 z m 196 258 b 197 266 197 261 197 264 b 200 510 200 347 199 429 b 233 543 210 521 222 533 b 281 560 249 554 266 560 b 340 503 310 560 333 540 b 344 461 343 488 344 474 b 321 323 344 413 333 369 b 268 272 315 300 295 281 b 196 258 245 265 220 261 z\"\n    },\n    \"dynamicMezzo\": {\n      \"x_min\": -18,\n      \"x_max\": 559,\n      \"y_min\": -50,\n      \"y_max\": 365,\n      \"ha\": 415,\n      \"o\": \"m 43 -71 b 160 19 86 -71 143 -26 b 230 264 189 99 200 184 b 282 363 243 297 259 327 b 287 320 285 347 287 333 b 284 279 287 305 285 292 l 249 -12 b 275 -43 248 -29 245 -43 b 395 45 321 -43 389 3 b 462 271 406 124 436 197 b 523 387 475 310 490 348 l 523 346 b 504 130 521 274 513 202 b 501 81 501 114 501 98 b 510 3 501 55 504 29 b 580 -72 521 -48 543 -72 b 625 -63 593 -72 608 -69 b 789 50 690 -43 744 -3 b 805 72 795 56 805 63 b 798 85 805 76 802 81 b 778 94 792 91 785 94 b 755 85 770 94 763 91 l 693 40 b 675 33 685 36 680 33 b 658 52 668 33 662 39 b 645 144 651 82 645 112 b 658 448 641 246 660 346 b 606 507 658 485 638 507 b 583 504 599 507 592 505 b 495 446 547 497 521 471 b 420 373 471 423 448 399 b 413 458 418 406 418 432 b 361 507 408 490 386 507 b 320 491 347 507 333 501 b 160 307 256 444 207 382 l 160 337 b 174 488 160 387 174 438 b 156 521 174 501 173 513 b 137 526 148 524 143 526 b 109 513 127 526 118 520 b -16 399 66 477 23 439 b -26 383 -20 395 -26 389 b -26 379 -26 382 -26 380 b -14 370 -24 372 -20 370 b -6 372 -12 370 -9 372 b 19 376 4 374 12 376 b 36 359 32 376 36 370 b 30 330 36 350 35 341 l 30 323 b 9 -35 23 203 17 85 b 43 -71 6 -65 19 -71 z\"\n    },\n    \"dynamicForte\": {\n      \"x_min\": -144,\n      \"x_max\": 311.30112136775,\n      \"y_min\": -115.38762959156972,\n      \"y_max\": 504,\n      \"ha\": 619.3876295915697,\n      \"o\": \"m -101 -166 b 173 76 7 -153 150 -30 b 206 344 192 164 202 253 b 268 338 226 343 246 341 b 384 395 317 333 353 361 b 397 419 393 405 397 412 b 367 442 397 429 387 436 b 350 444 361 444 356 444 b 206 455 302 449 255 454 l 206 474 b 202 540 204 495 202 518 b 209 593 202 557 203 576 b 236 624 215 613 225 624 b 265 612 245 624 253 619 b 308 552 287 596 302 577 b 336 533 312 534 323 533 b 448 611 366 533 444 583 b 399 696 452 648 423 671 b 382 706 395 700 387 703 b 308 726 357 720 333 726 b 207 684 272 726 239 711 b 60 455 135 622 60 560 l 10 455 b -23 448 -1 455 -13 454 b -102 372 -55 426 -76 397 b -109 357 -108 367 -109 361 b -95 347 -109 353 -105 348 b -63 346 -84 346 -73 346 b 0 344 -43 344 -22 344 b 63 344 22 344 43 344 b 53 186 63 291 59 239 b 23 0 46 124 42 60 b -35 -60 10 -42 -6 -60 b -73 -52 -45 -60 -58 -58 b -91 -48 -79 -49 -85 -48 b -109 -53 -96 -48 -102 -49 b -199 -124 -143 -72 -168 -99 b -207 -137 -203 -128 -207 -132 b -194 -148 -207 -141 -203 -145 b -101 -166 -164 -160 -132 -168 z\"\n    },\n    \"dynamicRinforzando\": {\n      \"x_min\": -75,\n      \"x_max\": 322.0960720195126,\n      \"y_min\": -90,\n      \"y_max\": 325,\n      \"ha\": 415,\n      \"o\": \"m 23 -130 b 40 -125 27 -130 33 -128 b 128 -9 81 -114 125 -53 b 145 200 132 62 141 130 b 148 238 147 212 148 225 b 308 321 184 291 245 321 b 363 314 325 321 344 318 b 377 310 369 312 373 310 b 384 311 380 310 382 310 b 464 415 410 317 464 389 b 446 433 465 429 455 429 b 390 445 428 441 409 445 b 305 429 361 445 334 438 b 167 346 252 413 202 393 b 153 325 163 338 158 333 b 148 438 154 363 151 399 b 121 468 147 456 134 468 b 101 458 115 468 108 465 b -63 310 46 409 -16 367 b -108 240 -78 289 -98 271 b 32 330 -50 256 -13 297 b 37 304 37 320 37 312 l 37 292 b 10 -101 27 161 20 30 b 23 -130 9 -120 12 -130 z\"\n    },\n    \"dynamicSforzando\": {\n      \"x_min\": 0,\n      \"x_max\": 296,\n      \"y_min\": 0,\n      \"y_max\": 379,\n      \"ha\": 379,\n      \"o\": \"m 151 0 b 174 1 160 0 166 0 b 392 158 272 14 346 71 b 405 207 400 174 405 190 b 359 287 405 236 389 265 b 261 325 328 308 294 315 b 168 413 216 340 181 366 b 166 426 167 418 166 423 b 176 438 166 432 167 436 b 199 441 183 441 190 441 b 310 393 238 441 295 422 b 334 370 317 376 325 370 b 363 386 343 370 353 379 b 422 445 386 402 408 420 b 426 458 425 449 426 454 b 422 469 426 462 425 465 b 274 546 395 518 333 546 b 161 503 232 546 190 531 b 86 405 132 472 108 439 b 71 347 75 387 71 367 b 112 256 71 312 85 279 b 209 215 141 232 176 226 b 284 168 238 206 266 197 b 300 131 291 157 300 144 b 298 120 300 127 298 122 b 278 107 294 109 285 108 b 262 108 271 107 266 108 l 259 108 b 114 157 200 107 156 125 b 96 181 104 163 96 170 l 96 184 b 102 202 96 190 102 196 b 96 209 102 204 101 207 b 63 194 82 215 72 204 b 7 109 42 168 26 138 b 0 86 3 101 0 94 b 13 60 0 78 4 68 b 151 0 53 23 101 0 z\"\n    },\n    \"dynamicZ\": {\n      \"x_min\": -42.73880183193087,\n      \"x_max\": 331,\n      \"y_min\": 0,\n      \"y_max\": 328,\n      \"ha\": 328,\n      \"o\": \"m -45 0 b -6 16 -32 0 -17 10 b 3 20 -3 16 0 19 b 144 60 49 48 96 60 b 284 22 190 60 238 46 b 348 4 305 10 327 4 b 461 75 393 4 435 30 b 468 91 464 81 467 86 b 456 104 468 95 465 99 b 287 173 402 131 348 167 b 239 176 271 174 255 176 b 168 174 217 176 194 174 b 367 340 236 236 298 294 b 459 423 402 363 432 392 b 477 454 467 431 475 442 b 474 462 477 456 475 459 b 454 472 469 469 462 472 b 432 468 446 472 439 469 b 356 448 406 461 380 455 b 210 422 307 433 258 422 b 109 442 177 422 144 428 b 94 445 104 444 99 445 b 69 433 85 445 76 442 b 27 390 56 419 39 406 b -9 343 16 373 -17 357 b 63 311 3 320 36 314 l 78 311 b 132 307 95 308 114 307 b 240 314 168 307 203 311 l 193 271 b -37 50 117 196 19 145 b -59 7 -46 36 -69 20 b -45 0 -55 3 -50 0 z\"\n    },\n    \"ornamentTrill\": {\n      \"x_min\": 1,\n      \"x_max\": 551,\n      \"y_min\": -18,\n      \"y_max\": 539,\n      \"ha\": 557,\n      \"o\": \"m 269 -17 b 343 135 325 19 346 66 b 343 158 343 147 344 147 b 323 192 341 171 337 187 b 291 176 311 194 300 184 b 264 148 282 167 274 158 b 229 131 261 145 238 131 b 212 170 209 131 213 154 b 194 438 203 259 199 348 l 272 442 b 284 452 276 441 279 441 b 305 462 287 461 295 462 b 312 462 307 462 310 462 b 346 477 325 462 340 464 b 366 560 357 503 366 531 b 321 612 366 598 356 618 b 190 602 278 605 235 605 l 190 638 b 187 693 190 652 190 667 b 161 776 184 717 193 776 b 137 747 150 776 137 766 b 130 654 135 716 131 685 l 130 596 l 52 588 b 4 539 23 585 7 570 b 1 477 3 530 1 500 b 3 448 1 461 3 448 b 3 461 3 448 3 452 b 53 432 0 438 19 432 b 134 435 75 432 102 433 b 151 117 138 328 147 223 b 170 13 153 82 157 46 b 209 -26 179 -10 193 -26 b 222 -22 213 -26 217 -24 b 269 -17 233 -16 253 -27 z m 549 66 b 577 99 563 66 572 84 b 580 131 580 109 580 121 l 580 302 b 600 347 580 318 582 337 b 701 392 632 364 665 384 b 793 518 785 409 793 435 b 759 588 793 559 785 576 b 711 560 749 592 733 570 b 588 500 671 541 631 521 b 583 533 586 514 586 524 b 560 576 577 549 577 572 b 517 550 541 582 528 564 b 416 423 482 508 452 462 b 382 353 392 397 384 370 b 387 305 380 341 386 318 b 392 275 389 295 392 285 b 409 243 393 262 393 243 b 431 262 419 243 425 255 b 521 373 459 298 488 333 b 523 354 521 366 523 360 b 520 337 523 346 521 340 b 508 295 513 323 508 310 b 530 102 508 279 524 122 b 549 66 533 88 530 66 z\"\n    },\n    \"ornamentTurn\": {\n      \"x_min\": 0,\n      \"x_max\": 574,\n      \"y_min\": 0,\n      \"y_max\": 312,\n      \"ha\": 312,\n      \"o\": \"m 651 0 b 816 132 727 0 796 46 b 827 223 822 163 827 193 b 808 340 827 262 821 301 b 665 449 785 408 729 449 b 636 446 655 449 647 448 b 589 384 600 441 586 422 l 602 300 b 611 285 603 291 605 285 b 621 288 613 285 616 287 b 655 295 632 294 644 295 b 711 284 674 295 693 289 b 773 209 740 275 773 232 b 697 156 773 184 734 160 b 664 154 685 154 675 154 b 579 168 635 154 608 158 b 455 242 533 186 495 213 b 261 400 387 291 331 354 b 160 432 225 422 190 432 b 20 328 98 432 49 392 b 0 229 6 295 0 262 b 30 71 0 176 14 122 b 144 3 43 29 96 3 b 168 6 153 3 160 4 b 248 122 233 20 248 39 b 246 147 248 124 248 135 b 226 177 243 164 239 177 b 206 170 220 177 215 174 b 144 154 186 158 166 154 b 79 170 122 154 101 160 b 53 202 62 179 53 189 b 60 228 53 209 55 217 b 161 281 81 261 120 281 b 183 279 168 281 176 281 b 325 190 243 269 284 229 b 572 16 402 124 475 53 b 651 0 598 6 625 0 z\"\n    },\n    \"ornamentTurnSlash\": {\n      \"x_min\": 0,\n      \"x_max\": 574,\n      \"y_min\": -106,\n      \"y_max\": 405,\n      \"ha\": 511,\n      \"o\": \"m 441 -153 b 456 -60 455 -118 456 -89 b 455 81 455 -14 455 33 b 572 14 491 55 530 30 b 651 -1 598 4 625 -1 b 816 131 727 -1 796 45 b 827 222 822 161 827 192 b 808 338 827 261 821 300 b 665 448 785 406 729 448 b 636 445 655 448 647 446 b 589 383 600 439 586 420 l 602 298 b 611 284 603 289 605 284 b 621 287 613 284 616 285 b 655 294 632 292 644 294 b 711 282 674 294 693 288 b 773 207 740 274 773 230 b 697 154 773 183 734 158 b 664 153 685 153 675 153 b 579 167 635 153 608 157 b 455 240 533 183 495 212 b 454 242 455 240 455 242 l 454 337 b 452 488 454 386 452 439 b 433 570 452 517 451 546 b 425 583 431 575 431 583 l 422 583 b 403 566 415 582 408 573 b 402 546 400 560 402 553 l 397 287 b 261 399 353 325 310 366 b 160 431 225 420 190 431 b 20 327 98 431 48 390 b 0 228 6 294 0 261 b 30 69 0 174 14 121 b 144 1 43 27 96 1 b 168 4 153 1 160 3 b 248 121 233 19 248 37 b 246 145 248 122 248 134 b 226 176 243 163 239 176 b 206 168 220 176 215 173 b 144 153 186 157 166 153 b 79 168 122 153 101 158 b 53 200 62 177 53 187 b 60 226 53 207 55 216 b 161 279 79 259 120 279 b 183 278 168 279 176 279 b 325 189 243 266 282 226 b 395 130 348 168 372 148 b 393 71 393 109 393 89 b 441 -153 390 -6 402 -78 z\"\n    },\n    \"ornamentMordent\": {\n      \"x_min\": 0,\n      \"x_max\": 700,\n      \"y_min\": 0,\n      \"y_max\": 497,\n      \"ha\": 497,\n      \"o\": \"m 513 0 b 528 39 526 14 527 27 b 531 72 531 50 531 60 b 528 138 531 94 528 117 l 528 347 b 552 359 537 354 544 359 b 579 338 560 359 569 353 b 674 217 609 297 639 255 b 719 190 690 200 704 190 b 759 215 732 190 744 197 b 940 395 815 279 877 337 b 1001 490 968 422 986 455 b 1008 513 1004 495 1008 505 b 1002 524 1008 517 1007 521 b 968 516 994 530 978 524 b 960 508 965 513 963 510 b 798 356 900 464 848 410 b 778 341 791 347 783 341 b 757 354 772 341 765 346 b 661 475 720 392 690 432 b 611 517 644 504 629 517 b 563 498 598 517 583 511 b 527 471 550 490 539 481 l 527 570 b 492 716 526 619 523 671 b 472 677 480 704 472 694 b 465 399 474 585 468 491 b 439 366 456 387 448 376 b 384 320 415 336 399 320 b 330 367 369 320 354 336 b 325 376 328 369 327 373 b 226 490 291 413 265 456 b 189 505 213 500 202 505 b 157 491 177 505 167 500 b 0 229 75 420 0 346 b 1 202 0 220 0 212 b 22 215 12 203 16 209 b 124 327 55 252 89 289 b 147 343 132 337 140 343 b 171 323 156 343 164 336 b 266 197 196 276 232 236 b 337 157 291 170 314 157 b 410 207 361 157 386 174 b 461 274 428 229 444 252 b 462 166 461 238 461 202 b 513 0 465 108 487 55 z\"\n    },\n    \"ornamentShortTrill\": {\n      \"x_min\": 0,\n      \"x_max\": 747,\n      \"y_min\": 0,\n      \"y_max\": 243,\n      \"ha\": 243,\n      \"o\": \"m 379 0 b 428 14 395 0 410 4 b 474 56 445 26 461 39 b 552 157 500 89 526 122 b 566 168 556 163 560 168 b 575 157 569 168 572 166 b 664 36 592 107 628 72 b 733 1 685 13 710 1 b 802 35 757 1 780 13 b 1007 249 871 105 940 177 b 1067 324 1028 272 1054 295 b 1076 340 1068 330 1076 334 b 1073 346 1076 341 1076 343 b 1057 350 1068 348 1063 350 b 1047 347 1053 350 1050 350 b 1001 310 1031 336 1015 324 l 857 157 b 844 143 852 153 848 143 b 835 150 841 143 838 144 b 757 242 815 186 780 209 b 685 298 739 268 713 284 b 641 310 670 305 655 310 b 590 288 625 310 608 304 b 497 179 554 256 527 215 b 480 164 490 170 485 164 b 462 179 474 164 469 168 b 372 295 436 220 405 258 b 278 344 346 324 312 344 b 199 310 252 344 226 334 b 92 196 161 274 128 233 b 0 24 46 148 23 89 b 42 48 22 27 32 37 b 156 168 84 85 114 132 b 196 192 174 184 186 192 b 228 158 206 192 215 181 b 312 36 252 114 282 75 b 379 0 331 12 354 0 z\"\n    },\n    \"ornamentTremblement\": {\n      \"x_min\": 0,\n      \"x_max\": 982.17691453624,\n      \"y_min\": 0,\n      \"y_max\": 224,\n      \"ha\": 224,\n      \"o\": \"m 0 0 b 63 36 30 12 48 23 b 157 124 94 66 125 94 b 177 135 164 131 170 135 b 196 122 183 135 189 131 b 268 40 217 94 245 68 b 323 6 288 16 304 6 b 369 20 336 6 350 10 b 412 53 384 29 399 40 b 501 145 442 84 472 114 b 523 158 508 154 516 158 b 543 145 528 158 536 154 b 641 45 576 112 608 78 b 698 17 658 27 677 17 b 729 23 708 17 719 20 b 804 65 756 32 780 46 b 904 154 837 95 871 124 b 920 163 910 160 916 163 b 936 153 924 163 930 160 b 1024 60 965 121 996 92 b 1112 13 1053 29 1080 13 b 1184 39 1135 13 1158 22 b 1359 194 1248 84 1305 138 b 1413 301 1388 223 1403 261 b 1404 323 1417 315 1413 323 b 1391 320 1400 323 1395 321 b 1344 294 1375 314 1358 307 b 1224 186 1305 258 1269 216 b 1194 173 1212 179 1202 173 b 1165 193 1184 173 1175 179 b 1096 271 1145 222 1122 248 b 1001 318 1061 302 1031 318 b 903 268 969 318 937 301 b 806 186 871 239 841 210 b 782 174 796 179 789 174 b 756 193 773 174 765 180 b 652 291 729 232 693 266 b 596 308 634 302 615 308 b 530 278 573 308 552 298 l 415 168 b 393 157 408 161 400 157 b 373 171 387 157 380 161 b 305 245 353 197 330 222 b 248 276 285 266 266 278 b 189 245 229 276 210 266 b 81 144 156 209 120 174 b 0 0 33 109 26 56 z\"\n    },\n    \"ornamentPrecompAppoggTrill\": {\n      \"x_min\": -0.11067192132025548,\n      \"x_max\": 1066,\n      \"y_min\": -50,\n      \"y_max\": 533.1706452421108,\n      \"ha\": 583.1706452421108,\n      \"o\": \"m 187 -46 b 213 -14 197 -37 204 -26 b 285 151 251 36 266 94 b 304 189 294 177 297 189 b 337 168 311 189 320 181 b 458 33 386 131 415 76 b 495 12 472 19 484 12 b 531 40 508 12 518 22 b 580 168 557 79 569 124 b 622 235 592 213 603 235 b 683 194 636 235 655 222 b 838 26 737 140 791 86 b 919 -33 860 -1 881 -39 b 984 53 960 -27 971 19 b 1022 156 998 86 1008 122 b 1054 190 1032 179 1041 190 b 1089 167 1063 190 1074 183 b 1208 32 1129 122 1171 78 b 1244 10 1221 17 1231 10 b 1273 22 1253 10 1263 14 b 1496 206 1352 78 1427 137 b 1535 310 1526 236 1535 272 b 1531 359 1535 325 1534 343 b 1496 343 1515 360 1506 351 l 1309 192 b 1269 167 1289 176 1279 167 b 1234 199 1260 167 1251 177 b 1122 324 1200 243 1168 289 b 1074 344 1106 337 1089 344 b 1014 301 1051 344 1030 328 b 952 144 985 252 971 197 b 933 121 946 128 940 121 b 910 137 927 121 920 125 b 850 210 888 161 870 186 b 687 369 799 266 750 325 b 631 390 665 383 647 390 b 567 327 602 390 580 369 b 527 199 554 284 543 242 b 508 168 520 179 514 168 b 482 192 503 168 495 177 b 353 328 444 240 405 292 b 312 343 338 338 324 343 b 266 297 292 343 276 327 b 204 125 248 239 232 180 b 143 79 193 102 173 79 b 92 122 117 79 105 102 b 81 154 86 131 84 143 b 48 423 59 242 50 333 b 45 544 46 464 45 504 b 53 730 45 606 48 668 b 40 768 55 744 52 766 b 13 730 19 770 14 747 b 0 514 7 658 -1 586 b 26 122 3 383 6 252 b 75 -36 35 66 40 10 b 134 -72 92 -59 112 -72 b 187 -46 151 -72 170 -63 z\"\n    },\n    \"ornamentPrecompSlideTrillDAnglebert\": {\n      \"x_min\": 0,\n      \"x_max\": 1088,\n      \"y_min\": -380,\n      \"y_max\": 252,\n      \"ha\": 632,\n      \"o\": \"m 560 -539 b 439 -481 527 -497 484 -485 b 354 -461 409 -478 380 -477 b 131 -154 236 -389 161 -285 b 124 -98 127 -135 124 -117 b 196 55 124 -40 148 10 b 308 99 230 86 268 99 b 399 81 337 99 367 92 b 514 22 441 66 477 43 b 619 -30 567 -9 590 -30 b 719 17 642 -30 670 -16 b 861 131 769 52 818 88 b 899 150 874 144 887 150 b 936 117 913 150 926 138 b 965 43 948 94 956 68 b 1007 -1 973 24 978 -1 b 1048 30 1025 -1 1037 16 b 1070 65 1057 40 1064 52 b 1110 148 1084 92 1096 121 b 1145 190 1120 164 1120 190 b 1191 153 1169 192 1179 168 b 1256 29 1218 115 1231 68 b 1292 1 1267 10 1277 1 b 1320 10 1300 1 1309 4 b 1369 48 1339 19 1355 33 b 1515 196 1418 96 1464 148 b 1567 343 1558 238 1567 287 b 1555 363 1565 357 1562 363 b 1539 356 1551 363 1547 360 b 1433 268 1502 330 1466 301 b 1335 171 1401 236 1374 199 b 1310 163 1325 166 1318 163 b 1286 183 1302 163 1293 168 b 1218 311 1264 226 1247 272 b 1164 351 1200 337 1182 351 b 1110 308 1146 351 1128 337 b 1031 176 1084 265 1058 219 b 1015 161 1025 166 1021 161 b 999 179 1009 161 1005 167 b 955 279 985 213 973 248 b 913 307 943 300 930 307 b 887 302 904 307 896 305 b 852 281 874 298 863 291 b 693 167 804 236 747 204 b 612 140 667 150 639 140 b 549 157 592 140 570 145 b 403 220 503 181 452 202 b 271 248 360 236 315 248 b 179 229 239 248 209 242 b 0 -29 65 180 0 85 b 9 -104 0 -53 3 -78 b 397 -526 56 -317 183 -464 b 505 -547 432 -536 468 -547 b 560 -539 524 -547 541 -544 z\"\n    },\n    \"ornamentPrecompSlideTrillBach\": {\n      \"x_min\": 0,\n      \"x_max\": 1185,\n      \"y_min\": -380,\n      \"y_max\": 465,\n      \"ha\": 845,\n      \"o\": \"m 624 -544 b 642 -528 638 -543 642 -537 b 639 -514 642 -524 642 -520 b 590 -444 629 -487 609 -467 b 523 -413 573 -422 553 -410 b 498 -415 514 -415 507 -415 b 399 -389 464 -415 431 -405 b 89 -157 281 -330 176 -255 b 72 -117 78 -144 72 -131 b 73 -101 72 -111 72 -107 b 187 186 91 3 147 91 b 246 230 200 216 222 230 b 300 209 262 230 281 223 b 456 48 359 163 403 101 b 540 -10 494 10 518 -10 b 625 59 566 -10 589 13 b 690 148 648 88 668 118 b 711 167 697 160 704 167 b 733 153 719 167 724 163 b 844 14 769 105 808 60 b 903 -42 873 -23 886 -42 b 973 -1 919 -42 937 -27 b 1008 33 986 7 996 20 b 1048 81 1021 48 1035 65 b 1050 37 1048 66 1050 52 b 1047 -24 1050 17 1048 -3 b 1038 -275 1038 -108 1040 -192 l 1037 -289 b 1045 -302 1037 -295 1038 -301 b 1068 -284 1056 -304 1064 -292 b 1084 -242 1076 -271 1081 -256 b 1099 -109 1096 -199 1099 -154 b 1106 158 1099 -19 1106 71 b 1128 187 1113 167 1120 177 b 1168 223 1143 212 1155 223 b 1210 193 1179 223 1191 213 b 1220 183 1214 190 1215 186 b 1329 36 1261 138 1292 84 b 1374 7 1345 16 1358 7 b 1411 20 1384 7 1395 12 b 1479 84 1437 37 1459 59 b 1610 235 1521 135 1564 186 b 1706 403 1655 282 1695 334 b 1614 346 1663 400 1637 373 b 1464 170 1564 287 1515 228 b 1440 150 1453 156 1447 150 b 1414 173 1433 150 1426 158 b 1283 336 1371 228 1333 288 b 1220 366 1261 356 1240 366 b 1148 318 1194 366 1169 350 b 1103 255 1133 297 1119 275 b 1097 301 1102 271 1100 285 b 1099 334 1099 312 1099 324 b 1092 428 1099 367 1094 397 b 1071 647 1087 501 1079 575 b 1058 670 1071 657 1071 670 b 1035 648 1047 670 1038 661 b 1018 516 1024 605 1015 560 b 1041 203 1025 412 1037 307 b 1043 180 1041 196 1043 187 b 992 127 1027 161 1009 143 b 965 111 981 117 972 111 b 936 132 955 111 946 120 b 829 268 900 179 867 225 b 760 317 801 301 780 317 b 691 258 739 317 719 297 b 605 147 664 219 641 177 b 589 138 599 141 593 138 b 572 148 583 138 579 141 b 415 317 520 206 467 261 b 327 372 390 343 366 366 b 300 373 317 373 308 373 b 154 295 239 373 190 348 b 55 138 120 243 85 192 b 0 -53 22 79 0 13 b 160 -317 0 -156 49 -252 b 209 -354 177 -327 192 -343 b 510 -531 305 -419 397 -495 b 593 -547 537 -540 564 -547 b 624 -544 603 -547 613 -546 z\"\n    },\n    \"ornamentPrecompTrillSuffixDandrieu\": {\n      \"x_min\": 0,\n      \"x_max\": 1003,\n      \"y_min\": -20,\n      \"y_max\": 521,\n      \"ha\": 541,\n      \"o\": \"m 791 -16 b 844 33 812 -3 829 14 b 981 271 900 107 937 190 b 994 288 984 278 985 288 b 1009 269 1004 288 1007 278 b 1077 112 1034 217 1051 163 b 1158 43 1103 62 1129 43 b 1231 69 1179 43 1204 55 b 1348 189 1280 98 1315 143 b 1444 451 1407 271 1444 357 b 1431 547 1444 482 1440 514 b 1188 750 1401 665 1299 750 b 1158 747 1178 750 1168 749 b 1079 684 1119 742 1089 727 b 1063 632 1076 665 1071 648 b 1056 609 1058 622 1056 615 b 1071 599 1056 602 1060 599 b 1086 600 1076 599 1080 600 b 1130 605 1102 603 1116 605 b 1244 569 1171 605 1210 595 b 1349 346 1322 511 1349 433 b 1348 312 1349 334 1349 324 b 1289 197 1345 266 1325 228 b 1238 174 1270 181 1253 174 b 1188 215 1220 174 1202 187 b 1145 308 1172 245 1159 276 b 1096 413 1129 343 1120 382 b 1053 438 1084 431 1068 438 b 1011 413 1038 438 1022 431 b 955 324 989 384 971 354 b 850 127 920 258 886 192 b 838 112 847 121 842 112 b 824 128 828 109 825 121 b 802 193 815 150 809 171 b 730 400 779 264 766 337 b 688 431 719 420 703 431 b 647 403 674 431 660 422 b 606 338 632 383 619 361 b 513 167 575 282 546 223 b 480 122 503 150 498 122 b 452 171 459 122 459 153 b 420 255 442 199 432 228 b 337 408 399 308 380 364 b 276 436 317 428 297 436 b 215 397 253 436 230 423 b 23 72 148 289 81 184 b 0 29 17 59 0 40 b 7 17 0 23 1 20 b 59 58 26 7 46 39 b 190 276 111 127 143 206 b 216 301 202 292 207 301 b 245 279 223 301 232 294 b 311 166 278 248 292 206 b 367 16 331 117 346 65 b 402 -19 377 -7 387 -19 b 438 -4 412 -19 423 -13 b 518 88 474 17 495 55 b 628 284 562 150 592 216 b 657 223 648 266 651 243 b 717 13 677 154 696 84 b 755 -29 726 -16 737 -29 b 791 -16 765 -29 776 -24 z\"\n    },\n    \"ornamentPrecompDoubleCadenceUpperPrefix\": {\n      \"x_min\": 0,\n      \"x_max\": 1246,\n      \"y_min\": -30,\n      \"y_max\": 296.0302860502196,\n      \"ha\": 326.0302860502196,\n      \"o\": \"m 360 -43 b 559 59 445 -43 503 7 b 698 236 615 111 652 179 b 714 248 704 243 710 248 b 727 235 719 248 721 243 l 848 42 b 883 12 860 22 870 12 b 917 32 891 12 903 19 b 946 62 927 42 939 50 b 1037 192 972 108 1009 147 b 1057 210 1044 204 1051 210 b 1076 190 1063 210 1068 203 l 1176 12 b 1215 -19 1188 -9 1201 -19 b 1250 -6 1225 -19 1237 -14 b 1284 27 1264 3 1274 16 b 1380 190 1323 78 1351 135 b 1395 210 1384 197 1385 210 b 1413 190 1405 210 1410 197 b 1508 40 1436 134 1467 85 b 1564 3 1529 14 1547 3 b 1617 32 1580 3 1597 12 b 1767 238 1678 92 1719 167 b 1794 310 1781 259 1791 282 b 1752 294 1776 317 1764 304 b 1656 164 1711 258 1689 206 b 1629 144 1646 151 1637 144 b 1603 161 1620 144 1613 150 b 1502 315 1562 207 1525 258 b 1452 357 1490 344 1470 357 b 1397 320 1431 357 1411 344 b 1316 170 1368 271 1345 219 b 1280 127 1306 154 1303 127 b 1244 171 1256 127 1254 154 b 1145 337 1210 226 1179 282 b 1110 363 1135 354 1122 363 b 1070 338 1097 363 1084 354 b 1050 311 1063 330 1057 320 b 959 181 1017 271 992 223 b 939 167 950 173 945 167 b 920 184 933 167 927 173 b 818 343 887 238 852 291 b 759 395 795 377 778 395 b 701 344 742 395 724 377 b 698 338 700 341 700 340 b 544 154 652 272 605 207 b 412 98 501 117 458 98 b 304 130 377 98 341 108 b 95 373 204 187 144 275 b 58 426 85 393 82 428 b 19 366 26 426 26 389 b 0 307 13 346 0 327 b 4 287 0 300 1 294 b 174 36 49 194 91 102 b 360 -43 230 -9 289 -43 z\"\n    },\n    \"ornamentPrecompDoubleCadenceUpperPrefixTurn\": {\n      \"x_min\": 0,\n      \"x_max\": 1226,\n      \"y_min\": -237,\n      \"y_max\": 436,\n      \"ha\": 673,\n      \"o\": \"m 1279 -341 b 1293 -252 1293 -307 1295 -278 b 1277 36 1287 -156 1282 -59 l 1273 118 b 1318 176 1289 137 1303 157 b 1349 203 1332 193 1342 203 b 1378 168 1359 203 1367 192 b 1456 35 1401 122 1428 78 b 1511 -12 1476 3 1493 -12 b 1568 23 1526 -12 1544 0 b 1597 53 1578 32 1588 42 b 1705 186 1629 101 1669 143 b 1761 284 1728 216 1751 246 b 1765 300 1763 288 1765 295 b 1763 307 1765 302 1765 305 b 1737 302 1754 311 1744 308 b 1718 287 1729 298 1725 292 b 1598 145 1673 245 1637 194 b 1578 130 1590 135 1584 130 b 1557 147 1571 130 1565 135 b 1447 321 1516 202 1488 265 b 1403 351 1433 341 1417 351 b 1358 323 1388 351 1372 341 b 1269 209 1329 285 1299 248 b 1254 521 1264 314 1259 418 b 1228 616 1253 554 1247 588 b 1218 628 1224 621 1223 628 l 1215 628 b 1201 613 1210 626 1202 619 b 1200 600 1200 609 1200 605 l 1200 586 b 1211 348 1204 507 1207 428 b 1217 166 1214 288 1215 226 b 1202 181 1212 168 1208 174 b 1094 334 1168 233 1130 284 b 1048 366 1079 356 1064 366 b 1004 331 1034 366 1018 354 b 904 154 969 275 930 220 b 873 202 887 171 880 187 b 778 356 845 256 819 311 b 737 379 763 372 750 379 b 698 353 724 379 711 370 l 621 232 b 415 114 570 154 495 114 b 302 138 377 114 340 121 b 73 400 187 192 117 284 b 55 420 69 415 62 420 b 42 410 50 420 45 416 b 0 292 23 373 0 334 b 4 262 0 282 1 272 b 168 39 32 168 92 99 b 359 -26 225 -6 292 -26 b 585 76 446 -26 530 10 b 668 202 616 115 641 160 b 693 228 680 219 687 228 b 720 203 700 228 707 219 b 801 63 752 160 775 111 b 844 7 812 42 818 7 b 910 66 877 6 894 39 b 923 94 916 75 919 85 b 995 219 945 137 968 179 b 1025 184 1009 210 1017 197 b 1119 56 1054 141 1087 98 b 1166 20 1138 32 1152 20 b 1215 50 1181 20 1195 30 b 1221 56 1217 52 1218 55 b 1228 -163 1223 -17 1225 -89 b 1279 -341 1231 -223 1251 -278 z\"\n    },\n    \"ornamentPrecompTrillLowerSuffix\": {\n      \"x_min\": 0,\n      \"x_max\": 833,\n      \"y_min\": -309,\n      \"y_max\": 319,\n      \"ha\": 628,\n      \"o\": \"m 778 -444 b 801 -445 785 -444 793 -445 b 1037 -338 894 -445 969 -397 b 1200 37 1149 -240 1200 -109 b 1084 406 1200 171 1172 300 b 1024 444 1064 431 1043 444 b 960 390 999 444 978 426 b 841 163 923 314 886 236 b 812 128 832 150 827 128 b 786 167 796 130 793 153 b 660 418 744 251 716 341 b 599 459 639 445 619 459 b 541 410 577 459 557 444 b 439 197 507 340 474 269 b 422 179 435 190 435 179 b 338 393 392 251 379 328 b 275 439 320 423 298 439 b 212 396 253 439 230 425 b 71 219 170 333 128 268 b 0 45 17 173 16 112 b 68 98 32 62 50 78 b 194 264 112 150 153 209 b 230 292 209 282 219 292 b 264 261 240 292 251 282 b 274 242 268 255 269 248 b 346 46 304 179 325 112 b 376 10 351 32 354 10 b 412 35 392 10 403 22 b 452 107 429 56 441 82 b 541 291 481 168 511 230 b 556 307 547 302 552 307 b 573 295 562 307 567 302 b 624 217 595 272 611 246 b 721 1 657 145 685 72 b 755 -27 732 -19 742 -27 b 786 -16 765 -27 775 -24 b 857 73 819 7 840 39 b 952 256 887 134 920 194 b 978 289 963 279 969 289 b 1009 262 985 289 994 281 b 1030 235 1017 253 1024 245 b 1110 -4 1071 161 1099 81 b 1116 -68 1113 -26 1116 -48 b 1009 -243 1116 -140 1090 -200 b 848 -291 956 -272 901 -291 b 730 -261 809 -291 770 -282 b 696 -248 714 -252 703 -248 b 671 -284 684 -248 678 -258 l 662 -312 b 657 -357 658 -330 657 -344 b 744 -439 657 -403 683 -425 z\"\n    },\n    \"stringsDownBow\": {\n      \"x_min\": 0,\n      \"x_max\": 306,\n      \"y_min\": -0.09607201951262866,\n      \"y_max\": 366,\n      \"ha\": 366.09607201951263,\n      \"o\": \"m 405 0 b 425 17 413 -1 420 9 b 439 66 435 32 439 48 b 441 268 439 137 441 202 b 436 412 441 314 439 361 l 435 413 b 423 469 435 436 431 456 b 344 508 406 501 373 501 b 204 527 298 520 251 527 b 60 498 156 527 108 518 b 7 438 32 485 10 468 l 7 426 b 4 337 7 396 7 367 b 0 140 0 272 0 206 b 1 42 0 107 0 73 b 13 3 1 27 -3 4 b 40 39 29 3 35 24 b 42 53 42 43 40 49 b 49 141 48 84 49 112 b 48 215 49 167 48 192 b 49 252 48 228 48 240 l 49 312 b 130 343 72 331 99 340 b 206 347 156 346 180 347 b 372 314 262 347 318 338 l 390 307 l 390 245 b 390 138 392 212 390 176 b 397 23 390 101 392 62 b 405 0 399 14 393 1 z\"\n    },\n    \"stringsUpBow\": {\n      \"x_min\": 0,\n      \"x_max\": 219.2842808242076,\n      \"y_min\": 0,\n      \"y_max\": 489,\n      \"ha\": 489,\n      \"o\": \"m 150 0 l 151 0 b 184 42 170 12 180 26 b 297 554 223 212 261 382 b 315 690 305 598 318 645 b 304 704 315 697 311 704 b 276 670 288 704 282 697 b 157 131 236 490 196 311 l 157 144 b 73 526 134 276 104 396 b 30 677 60 576 52 638 b 13 694 26 684 22 694 b 0 674 9 694 0 691 l 0 671 b 10 603 3 649 6 626 b 105 174 42 461 72 317 b 150 0 117 117 128 58 z\"\n    },\n    \"stringsHarmonic\": {\n      \"x_min\": 0,\n      \"x_max\": 191,\n      \"y_min\": 0,\n      \"y_max\": 202,\n      \"ha\": 202,\n      \"o\": \"m 143 0 b 275 122 217 0 275 53 b 127 291 275 206 202 291 b 0 154 63 291 0 222 b 143 0 0 76 71 0 z m 122 68 b 43 105 89 66 59 75 b 39 124 40 111 39 117 b 79 199 39 148 56 180 b 145 226 101 216 122 226 b 199 210 163 226 180 220 b 235 150 223 196 235 173 b 203 92 235 128 225 107 b 122 68 181 76 150 68 z\"\n    },\n    \"pluckedSnapPizzicatoAbove\": {\n      \"x_min\": 0,\n      \"x_max\": 201,\n      \"y_min\": 0,\n      \"y_max\": 325,\n      \"ha\": 325,\n      \"o\": \"m 171 0 b 289 99 240 0 289 45 b 258 183 289 130 274 156 b 174 269 236 217 203 240 l 174 408 b 174 429 174 415 176 422 b 131 468 168 451 153 468 b 117 451 120 468 117 461 b 118 429 117 444 118 435 b 115 307 117 389 115 347 b 0 166 59 295 0 223 b 171 0 0 85 89 0 z m 134 55 b 52 131 84 55 52 85 b 115 233 52 179 81 209 b 114 192 114 220 114 206 b 174 120 114 137 114 137 l 174 228 b 233 148 200 207 223 183 b 236 130 235 143 236 135 b 197 72 236 105 223 85 b 134 55 177 60 157 55 z\"\n    },\n    \"pluckedSnapPizzicatoBelow\": {\n      \"x_min\": 0,\n      \"x_max\": 211,\n      \"y_min\": 0,\n      \"y_max\": 307,\n      \"ha\": 307,\n      \"o\": \"m 145 7 b 163 0 153 3 158 0 b 173 23 170 0 173 7 l 173 140 l 170 140 l 170 163 l 171 163 b 206 170 179 164 193 166 b 304 287 264 186 304 233 b 281 354 304 308 297 333 b 118 442 240 412 186 439 b 0 324 69 442 0 370 b 115 176 0 266 55 202 l 115 56 b 145 7 114 33 125 19 z m 115 220 b 62 256 92 223 73 230 b 53 292 56 269 53 281 b 78 344 53 311 60 328 b 168 384 105 372 135 384 b 213 376 183 384 199 382 b 253 321 239 366 253 346 b 246 291 253 311 251 301 b 170 226 230 256 203 236 l 170 258 b 148 305 171 278 163 292 b 128 315 143 310 135 315 l 124 315 b 115 301 117 314 115 308 z\"\n    },\n    \"pluckedLeftHandPizzicato\": {\n      \"x_min\": 0,\n      \"x_max\": 271,\n      \"y_min\": 0,\n      \"y_max\": 284,\n      \"ha\": 284,\n      \"o\": \"m 213 0 b 223 14 222 0 223 7 b 222 35 223 22 222 29 l 222 176 b 373 170 272 174 323 170 b 390 180 382 170 390 171 l 390 184 b 347 232 386 207 382 232 b 219 238 307 233 266 235 l 219 364 b 171 409 219 395 193 409 b 156 393 160 409 156 402 b 158 370 156 384 158 376 l 158 240 b 16 239 115 240 66 239 b 0 226 7 239 0 238 l 0 223 b 50 179 1 203 29 179 b 158 177 86 179 122 179 l 158 63 b 161 29 158 52 158 40 b 213 0 166 -1 194 1 z\"\n    },\n    \"keyboardPedalPed\": {\n      \"x_min\": 0,\n      \"x_max\": 944,\n      \"y_min\": -13,\n      \"y_max\": 550,\n      \"ha\": 563,\n      \"o\": \"m 22 0 b 109 78 53 0 105 46 l 144 333 b 163 376 147 347 140 372 b 364 465 238 390 301 426 b 454 599 416 497 454 540 b 452 618 454 605 454 612 b 320 770 442 694 396 747 b 248 779 295 778 272 779 b 193 778 229 779 212 779 b 160 780 181 778 167 775 b 137 792 153 789 144 791 b 109 789 128 792 118 789 b 7 719 59 789 48 737 b 23 708 16 714 20 708 b 36 710 29 710 33 710 b 53 684 52 710 53 698 l 53 674 b 43 386 53 577 53 482 b 20 164 36 312 30 238 b 1 30 14 120 7 75 b 0 19 0 26 0 22 b 22 0 0 9 4 0 z m 393 -17 b 634 145 494 16 579 52 b 638 160 636 151 638 156 b 625 168 638 166 634 168 b 621 167 624 168 622 168 b 524 118 582 164 544 160 b 495 79 517 104 505 92 b 435 33 471 49 452 33 b 380 96 416 33 397 55 b 369 145 373 114 369 131 b 442 225 369 186 395 213 b 468 232 451 228 459 229 b 654 344 539 255 606 285 b 677 395 667 360 677 376 b 672 415 677 402 675 408 b 612 459 661 442 639 455 b 589 461 602 461 592 461 b 348 328 500 461 409 408 b 269 120 302 268 269 199 b 379 -19 269 45 318 -19 b 393 -17 383 -19 389 -19 z m 395 240 b 494 383 418 300 452 344 l 521 405 b 544 419 528 409 536 418 b 554 415 547 419 550 418 b 570 383 564 406 570 396 l 570 379 b 552 331 570 360 562 344 b 395 240 511 285 462 253 z m 171 425 b 156 442 160 425 156 429 b 157 475 157 452 157 464 b 164 602 161 517 164 560 b 161 698 164 635 163 667 b 184 729 161 720 167 729 l 193 729 b 348 563 278 719 348 641 b 346 539 348 554 347 547 b 171 425 328 459 229 422 z m 827 89 b 792 111 815 89 804 96 b 766 204 775 131 766 158 b 845 360 772 256 799 314 b 871 372 854 369 863 372 b 897 366 880 372 888 369 b 978 279 942 353 963 320 b 976 259 981 272 981 265 b 858 104 942 203 909 147 b 827 89 847 94 837 89 z m 979 6 b 1008 13 986 6 995 9 b 1081 101 1047 29 1079 46 b 1116 449 1087 217 1104 333 b 1143 654 1123 518 1133 586 b 1148 685 1145 664 1148 675 b 1140 704 1148 693 1146 700 b 1107 716 1130 713 1119 716 b 1056 706 1092 716 1073 710 b 1037 671 1035 703 1038 685 b 1004 439 1025 595 1014 517 b 986 419 1001 428 999 419 b 979 419 985 419 982 420 b 935 426 965 423 949 425 b 795 376 884 426 838 405 b 664 153 714 323 664 249 b 665 130 664 145 665 138 b 753 29 671 65 704 29 b 815 40 773 29 792 33 b 975 147 873 65 923 101 b 965 45 971 108 968 76 b 979 6 963 17 966 6 z m 1282 12 b 1336 35 1303 14 1320 23 b 1359 71 1351 45 1359 58 b 1338 102 1359 82 1352 95 b 1254 130 1312 118 1284 130 b 1187 88 1223 130 1202 109 b 1178 65 1182 81 1178 72 b 1195 37 1178 55 1182 45 b 1282 12 1223 23 1253 19 z\"\n    },\n    \"keyboardPedalUp\": {\n      \"x_min\": 0,\n      \"x_max\": 436.6015132318337,\n      \"y_min\": 0,\n      \"y_max\": 461,\n      \"ha\": 461,\n      \"o\": \"m 330 0 b 334 1 331 0 333 0 b 340 12 338 4 340 7 l 338 26 b 340 264 338 105 338 184 b 526 95 400 206 461 148 b 559 71 536 88 547 71 b 564 72 560 71 563 71 b 580 121 580 79 580 102 l 580 127 b 543 203 585 158 573 184 b 472 259 518 219 495 238 l 445 285 b 590 292 494 288 541 291 b 622 318 609 294 618 302 b 628 359 625 331 626 346 b 586 402 632 393 621 405 b 464 395 546 399 504 396 l 559 491 b 567 524 567 500 567 510 b 564 543 567 527 567 536 b 539 596 559 563 560 590 b 494 564 521 600 508 577 b 340 413 442 514 390 464 l 340 560 b 287 664 340 600 321 632 b 271 518 274 612 272 566 b 268 445 269 494 269 469 b 117 569 219 488 168 530 b 96 579 109 575 102 579 b 85 560 89 579 85 573 b 124 446 85 518 82 477 b 209 380 153 426 181 403 b 45 374 154 377 99 376 b 0 324 9 374 0 359 b 63 266 0 265 1 265 b 144 272 89 269 117 272 l 196 272 b 108 193 167 246 138 219 b 60 135 76 164 60 151 b 99 73 60 121 73 105 b 104 68 101 72 102 71 b 114 58 107 60 111 58 b 130 66 120 58 124 62 b 259 186 173 107 217 145 b 256 117 259 163 256 140 b 311 13 256 72 271 37 b 330 0 317 10 323 0 z\"\n    },\n    \"pictChokeCymbal\": {\n      \"x_min\": 1,\n      \"x_max\": 147,\n      \"y_min\": 0,\n      \"y_max\": 242,\n      \"ha\": 242,\n      \"o\": \"m 79 4 b 207 158 153 32 192 88 b 212 200 210 173 212 187 b 143 336 212 253 187 298 b 98 348 131 344 115 348 b 4 295 60 348 16 327 b 1 276 1 289 1 282 b 9 249 1 266 3 258 b 121 183 35 206 72 183 b 156 186 132 183 144 183 b 26 53 134 115 91 73 b 7 39 13 49 7 45 b 19 20 7 33 12 27 b 59 0 30 9 43 0 b 79 4 65 0 72 1 z\"\n    },\n    \"wiggleArpeggiatoUp\": {\n      \"x_min\": -22,\n      \"x_max\": 300,\n      \"y_min\": 0,\n      \"y_max\": 176,\n      \"ha\": 176,\n      \"o\": \"m 173 4 b 196 0 180 1 189 0 b 246 26 215 0 230 9 b 301 117 271 53 285 85 b 312 131 305 125 307 131 b 327 124 315 131 321 128 b 373 86 341 112 353 101 b 412 69 389 75 402 69 b 432 94 425 69 432 79 b 373 181 432 117 413 154 b 235 252 323 216 285 245 b 220 253 229 253 225 253 b 168 215 196 253 181 240 b 111 112 151 180 140 141 b 94 102 105 105 99 102 b 78 111 89 102 84 105 b 0 181 55 135 35 160 b -32 153 -20 194 -32 168 b 0 86 -32 124 -32 109 b 94 36 22 71 73 46 b 173 4 134 16 131 17 z\"\n    },\n    \"arrowheadBlackUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"arrowheadBlackDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"arpeggiatoUp\": {\n      \"x_min\": 0,\n      \"x_max\": 262,\n      \"y_min\": 0,\n      \"y_max\": 1459,\n      \"ha\": 1459,\n      \"o\": \"m 190 0 b 160 63 187 29 170 45 b 145 108 150 81 145 95 b 183 163 145 128 157 145 b 300 246 222 190 262 216 b 347 318 333 272 347 295 b 301 393 347 341 331 364 b 258 413 289 403 272 408 b 145 449 220 425 183 436 b 117 464 135 452 120 452 b 140 491 115 477 128 484 b 294 593 192 526 243 557 b 330 647 318 611 330 626 b 314 693 330 660 324 675 b 262 736 302 714 285 729 b 170 763 230 744 200 753 b 122 783 153 768 125 768 b 160 831 120 804 143 818 b 288 922 202 861 246 890 b 333 999 318 945 333 972 b 266 1083 333 1032 310 1064 b 189 1115 240 1094 215 1103 b 122 1178 145 1133 122 1153 b 168 1250 122 1200 138 1223 l 180 1257 b 269 1333 210 1283 240 1306 b 305 1405 294 1356 305 1381 b 284 1469 305 1426 298 1447 b 228 1525 269 1492 251 1511 b 183 1600 197 1545 183 1571 b 190 1640 183 1613 184 1626 b 197 1670 193 1650 194 1660 b 272 1735 213 1719 230 1735 b 295 1734 279 1735 287 1735 b 323 1732 305 1732 314 1732 b 350 1731 333 1732 341 1732 b 377 1742 369 1729 377 1732 b 370 1761 377 1747 374 1754 l 301 1898 b 217 2066 274 1954 248 2012 b 186 2101 204 2089 196 2101 b 154 2069 177 2101 167 2091 b 12 1824 105 1987 59 1907 b 0 1787 4 1810 0 1797 b 59 1744 0 1761 20 1745 b 160 1738 92 1744 125 1740 b 145 1692 156 1721 151 1706 b 135 1633 138 1672 135 1652 b 184 1518 135 1591 151 1552 b 229 1475 199 1503 213 1488 b 259 1431 249 1456 259 1444 b 229 1388 259 1420 249 1407 b 151 1325 203 1365 177 1345 b 105 1279 134 1310 118 1296 b 73 1202 84 1251 73 1227 b 108 1123 73 1176 85 1152 b 255 1031 148 1077 199 1051 b 282 1014 274 1025 282 1021 b 262 991 282 1008 275 1001 b 151 914 226 963 189 939 b 79 851 125 896 99 877 b 63 809 69 837 63 824 b 79 769 63 796 68 783 b 202 697 111 729 154 710 b 266 670 225 690 266 688 b 210 622 266 648 232 635 b 82 534 167 593 120 570 b 55 491 63 518 55 505 b 79 448 55 478 63 465 b 255 361 127 395 192 380 b 288 343 269 359 288 357 b 266 312 288 331 275 320 b 144 223 229 278 184 253 b 85 134 104 193 85 166 b 118 53 85 111 96 85 b 190 0 135 29 160 14 z\"\n    },\n    \"arpeggiatoDown\": {\n      \"x_min\": 0,\n      \"x_max\": 218,\n      \"y_min\": 0,\n      \"y_max\": 1440,\n      \"ha\": 1440,\n      \"o\": \"m 161 16 b 310 261 210 98 259 180 b 314 275 312 266 314 271 b 302 295 314 282 310 289 b 252 311 287 308 269 311 b 217 310 240 311 229 310 b 190 333 202 310 194 315 b 151 412 186 363 171 389 b 102 501 120 452 102 477 b 150 588 102 524 118 547 b 161 603 154 592 158 598 b 181 661 176 622 181 641 b 173 704 181 675 179 690 b 86 795 156 746 121 770 b 53 829 63 811 53 819 b 78 868 53 840 62 851 b 102 888 85 876 94 883 b 180 956 128 912 156 933 b 216 1028 204 979 216 1002 b 203 1081 216 1044 212 1061 b 115 1171 186 1123 148 1145 b 75 1221 88 1191 75 1207 b 114 1272 75 1237 88 1251 b 173 1308 132 1284 154 1296 b 226 1339 190 1318 209 1328 b 265 1405 253 1359 265 1380 b 258 1447 265 1418 264 1431 b 154 1541 242 1499 199 1521 b 109 1581 124 1555 109 1567 b 141 1627 109 1594 121 1608 b 204 1680 163 1646 184 1662 b 233 1742 223 1699 233 1719 b 226 1777 233 1752 230 1764 b 135 1862 210 1822 173 1840 b 104 1895 114 1875 104 1884 b 118 1930 104 1904 109 1914 b 192 2006 135 1961 161 1986 b 206 2029 203 2013 206 2022 b 192 2064 206 2040 197 2052 b 180 2074 187 2071 184 2074 b 156 2061 171 2074 163 2065 b 84 1983 125 2040 102 2013 b 65 1921 71 1961 65 1941 b 88 1853 65 1899 72 1876 b 171 1784 108 1820 138 1801 b 190 1764 184 1777 190 1770 b 174 1741 190 1757 184 1750 b 107 1683 153 1722 128 1704 b 68 1610 81 1659 68 1636 b 88 1548 68 1591 75 1571 b 177 1470 109 1512 141 1489 b 223 1431 209 1453 223 1443 b 179 1390 223 1420 209 1408 b 128 1361 163 1380 145 1371 b 71 1322 108 1348 88 1338 b 32 1253 45 1300 32 1277 b 48 1198 32 1236 37 1218 b 147 1090 71 1152 108 1120 b 174 1057 166 1076 174 1067 b 153 1022 174 1047 167 1037 b 109 982 140 1008 124 995 b 37 919 85 962 59 942 b 9 860 17 899 9 880 b 26 806 9 844 14 827 b 120 717 50 769 84 740 b 138 691 132 708 138 700 b 130 668 138 684 135 677 b 92 618 118 651 105 635 b 59 531 71 589 59 560 b 84 455 59 507 68 481 b 132 386 98 431 115 408 b 148 341 144 372 148 357 b 144 317 148 333 147 324 b 121 305 140 307 131 305 l 98 305 b 82 304 94 304 88 304 l 32 304 b 0 292 10 304 0 302 b 12 266 0 287 4 279 b 60 164 32 233 46 199 b 127 20 84 117 105 68 b 144 0 132 9 137 0 b 161 16 150 0 154 4 z\"\n    },\n    \"repeat1Bar\": {\n      \"x_min\": 0,\n      \"x_max\": 599.1057280164835,\n      \"y_min\": -250,\n      \"y_max\": 175,\n      \"ha\": 425,\n      \"o\": \"m 76 -334 b 181 -285 111 -315 148 -302 b 831 52 396 -168 613 -58 b 863 114 855 63 864 82 b 828 202 855 140 855 176 b 808 213 821 209 815 213 b 793 209 804 213 799 212 l 422 19 b 26 -179 291 -48 164 -124 b 0 -213 10 -186 0 -196 b 3 -232 0 -219 0 -225 b 52 -325 14 -265 37 -294 b 66 -337 55 -331 59 -337 b 76 -334 69 -337 72 -336 z m 216 98 b 255 75 236 84 246 75 b 291 104 265 75 274 85 b 323 147 304 117 327 125 b 289 215 323 168 314 184 b 238 252 269 239 253 252 b 187 222 222 252 207 242 b 173 206 183 216 177 212 b 157 170 163 194 157 183 b 174 138 157 160 161 150 b 216 98 189 127 200 109 z m 769 -360 b 829 -264 779 -360 829 -284 b 769 -176 822 -232 799 -200 b 742 -163 760 -167 750 -163 b 716 -184 733 -163 723 -168 b 683 -228 708 -202 693 -213 b 672 -253 675 -236 672 -245 b 683 -281 672 -262 675 -271 b 752 -353 703 -308 732 -327 b 769 -360 756 -357 763 -360 z\"\n    },\n    \"repeat2Bars\": {\n      \"x_min\": 0.008571918423331715,\n      \"x_max\": 775,\n      \"y_min\": -246.92374029115243,\n      \"y_max\": 362.82068246705313,\n      \"ha\": 609.7444227582056,\n      \"o\": \"m 909 412 b 873 351 906 384 893 367 b 436 50 729 249 585 147 b 91 -179 321 -26 206 -102 b 62 -174 76 -189 68 -183 b 12 -96 48 -147 24 -125 b 36 -16 -7 -53 -6 -43 b 220 104 96 24 158 65 b 819 507 425 232 624 369 b 881 495 852 530 861 528 b 909 412 899 469 900 439 z m 1116 228 b 1067 158 1115 192 1092 174 b 910 59 1015 125 963 92 b 478 -240 762 -33 622 -140 b 311 -350 423 -279 366 -314 b 285 -344 298 -360 289 -356 b 239 -258 272 -314 251 -288 b 261 -196 228 -228 235 -210 b 517 -29 348 -144 436 -91 b 1030 321 681 98 861 202 b 1093 307 1060 343 1076 340 b 1116 228 1107 281 1109 252 z m 1070 -105 b 1020 -210 1057 -143 1038 -176 b 998 -210 1014 -219 1004 -215 b 924 -153 973 -192 949 -171 b 913 -88 899 -135 897 -112 b 949 -22 926 -66 939 -45 b 998 -7 960 6 976 9 b 1070 -105 1032 -32 1058 -63 z m 333 338 b 302 240 330 307 317 274 b 276 235 297 225 287 228 b 233 269 262 246 248 258 b 203 376 186 307 183 318 b 225 441 212 397 217 419 b 246 454 228 452 232 458 b 333 338 284 441 333 380 z\"\n    },\n    \"repeat4Bars\": {\n      \"x_min\": 0,\n      \"x_max\": 1374,\n      \"y_min\": -304,\n      \"y_max\": 304,\n      \"ha\": 608,\n      \"o\": \"m 815 -367 b 829 -359 819 -367 824 -364 b 851 -343 835 -353 844 -347 b 1375 6 1027 -228 1205 -117 l 1610 170 b 1644 235 1632 184 1643 203 b 1626 300 1639 253 1634 276 b 1590 337 1614 325 1604 337 b 1551 320 1580 337 1567 330 b 873 -135 1329 161 1103 10 b 749 -222 829 -161 785 -184 b 737 -245 742 -230 737 -238 b 742 -261 737 -249 739 -255 b 802 -357 755 -297 782 -325 b 815 -367 805 -363 809 -367 z m 291 148 b 325 223 302 148 308 170 b 333 256 328 235 330 246 b 264 363 330 305 298 336 b 242 373 255 369 248 373 b 220 347 232 373 225 364 b 202 288 216 327 213 305 b 190 252 193 275 190 262 b 222 200 190 232 202 215 b 291 148 264 170 279 148 z m 78 -266 b 92 -258 82 -266 88 -264 b 114 -240 98 -251 107 -246 b 638 107 289 -125 467 -14 b 873 271 716 161 793 216 b 907 337 894 285 906 305 b 887 400 901 354 897 379 b 852 438 877 426 867 438 b 814 420 842 438 829 432 b 135 -33 592 262 366 111 b 12 -121 92 -60 48 -84 b 0 -144 4 -128 0 -135 b 4 -160 0 -148 1 -154 b 63 -255 17 -196 45 -223 b 78 -266 68 -262 72 -266 z m 396 -360 b 408 -356 400 -360 403 -359 b 609 -223 471 -307 543 -269 b 896 -19 706 -156 795 -81 b 1164 154 985 37 1074 96 b 1214 223 1189 170 1211 187 b 1176 321 1204 253 1205 292 b 1159 330 1169 327 1165 330 b 1145 324 1155 330 1151 328 b 1048 258 1113 302 1081 278 b 357 -202 809 117 598 -65 b 333 -238 341 -212 333 -223 b 338 -262 333 -245 334 -253 b 384 -350 350 -294 372 -318 b 396 -360 386 -354 390 -360 z m 1162 -438 b 1174 -433 1166 -438 1169 -436 b 1374 -300 1237 -384 1309 -346 b 1660 -96 1470 -233 1561 -158 b 1930 76 1751 -39 1840 19 b 1979 147 1954 92 1977 109 b 1943 243 1968 177 1971 216 b 1924 253 1935 251 1930 253 b 1911 248 1920 253 1915 252 b 1814 181 1878 225 1848 202 b 1123 -279 1575 40 1364 -141 b 1099 -315 1106 -289 1099 -300 b 1103 -338 1099 -321 1100 -330 b 1149 -426 1115 -370 1138 -396 b 1162 -438 1151 -432 1156 -438 z m 1875 -295 b 1882 -291 1878 -295 1879 -294 b 1934 -189 1904 -258 1921 -223 b 1872 -96 1925 -147 1901 -120 b 1840 -78 1858 -84 1848 -78 b 1812 -109 1830 -78 1823 -88 l 1777 -173 b 1770 -199 1773 -181 1770 -190 b 1786 -230 1770 -210 1774 -220 b 1862 -289 1809 -253 1837 -269 b 1875 -295 1865 -292 1871 -295 z\"\n    },\n    \"repeatBarSlash\": {\n      \"x_min\": 0,\n      \"x_max\": 630,\n      \"y_min\": -225.19160170741765,\n      \"y_max\": 265.1261822123701,\n      \"ha\": 490.31778391978776,\n      \"o\": \"m 78 -324 b 92 -314 82 -325 88 -321 b 114 -298 96 -307 107 -302 b 638 49 289 -183 467 -72 b 873 215 716 104 792 161 b 907 279 894 229 906 248 b 887 344 901 298 897 321 b 852 382 877 369 867 380 b 814 363 842 383 829 376 b 135 -91 603 192 364 55 b 12 -177 92 -118 45 -137 b 0 -202 4 -186 0 -192 b 4 -217 0 -206 1 -212 b 63 -312 17 -253 42 -284 b 78 -324 68 -318 72 -323 z\"\n    },\n    \"csymDiminished\": {\n      \"x_min\": 0,\n      \"x_max\": 506,\n      \"y_min\": -0.011036179317259481,\n      \"y_max\": 500,\n      \"ha\": 500.0110361793173,\n      \"o\": \"m 397 0 b 729 265 576 -1 729 95 b 711 367 729 297 723 331 b 472 670 668 498 586 595 b 315 720 423 701 372 720 b 253 713 295 720 275 719 b 32 514 144 687 75 615 b 0 374 12 468 0 420 b 27 251 0 333 9 292 b 140 117 52 196 92 153 b 397 0 223 52 317 4 z m 340 95 b 132 314 233 84 122 216 b 324 589 145 438 200 539 b 415 611 360 603 389 611 b 544 505 469 611 505 576 b 590 392 564 471 583 432 b 596 343 593 374 596 359 b 340 95 596 210 485 96 z\"\n    },\n    \"csymHalfDiminished\": {\n      \"x_min\": -32,\n      \"x_max\": 496,\n      \"y_min\": -33,\n      \"y_max\": 492,\n      \"ha\": 525,\n      \"o\": \"m -29 -48 b 0 -36 -19 -48 -9 -40 b 17 -20 7 -32 12 -24 b 134 94 56 19 95 56 b 372 0 207 43 282 0 b 455 13 397 0 426 4 b 677 258 556 45 671 141 b 678 289 677 268 678 278 b 593 539 678 380 654 467 b 592 541 593 540 592 540 l 684 632 b 713 678 700 647 711 665 b 714 691 714 684 714 688 b 707 704 714 698 711 701 b 691 708 701 707 696 708 b 660 691 680 708 670 701 l 552 585 b 478 634 530 606 507 624 b 361 684 438 648 397 661 b 301 703 341 697 320 703 b 226 677 275 703 251 693 b 27 449 140 618 72 543 b 0 324 9 410 -4 370 b 88 128 -1 243 30 177 b -30 -7 43 86 0 46 b -46 -33 -35 -16 -46 -24 b -42 -42 -46 -36 -45 -39 b -29 -48 -37 -46 -33 -48 z m 281 105 b 179 137 240 105 206 117 b 210 168 189 147 200 157 l 537 487 b 547 455 541 477 544 467 b 556 370 552 426 556 397 b 429 154 556 274 503 207 b 281 105 384 122 336 105 z m 141 179 b 121 251 128 200 121 225 b 128 297 121 265 124 281 b 351 575 163 420 248 505 b 377 582 359 579 369 580 b 501 536 422 586 468 567 b 141 179 382 416 261 298 z\"\n    },\n    \"csymAugmented\": {\n      \"x_min\": 0,\n      \"x_max\": 530,\n      \"y_min\": 0,\n      \"y_max\": 539,\n      \"ha\": 539,\n      \"o\": \"m 380 0 b 393 14 384 4 390 9 b 397 46 397 24 397 36 l 397 333 b 736 327 511 331 624 330 b 763 343 755 327 763 333 b 755 361 763 348 760 354 b 635 431 726 402 688 431 l 390 431 l 390 485 b 386 606 392 526 386 566 b 392 664 386 625 387 645 b 395 690 393 672 395 681 b 376 753 395 711 389 734 b 357 776 372 762 369 776 b 350 775 354 776 353 776 b 327 740 337 769 327 759 b 327 621 328 700 327 661 b 330 438 328 559 328 498 l 29 438 b 4 431 20 438 7 442 b 0 413 3 425 0 419 b 7 399 0 408 1 403 b 131 338 45 369 85 340 b 331 334 199 336 265 334 b 333 163 333 276 333 220 b 366 13 333 109 348 63 b 380 0 367 7 374 4 z\"\n    },\n    \"csymMajorSeventh\": {\n      \"x_min\": 0,\n      \"x_max\": 593.1050509327923,\n      \"y_min\": 0,\n      \"y_max\": 569,\n      \"ha\": 569,\n      \"o\": \"m 109 0 l 124 1 l 497 27 b 819 50 605 35 711 43 b 854 98 847 52 855 63 b 812 200 845 128 835 166 b 564 585 730 328 648 456 b 435 786 521 652 480 720 b 397 819 419 809 408 819 b 369 792 387 819 379 811 b 7 173 248 585 128 379 b 0 150 3 166 0 158 b 7 128 0 143 3 135 b 89 10 30 86 65 50 b 109 0 95 1 102 0 z m 163 147 b 153 153 158 147 156 148 b 164 179 147 163 158 170 b 426 644 251 334 338 488 b 442 660 432 655 436 660 b 458 645 446 660 452 655 b 727 220 547 503 636 361 b 736 202 732 213 736 206 b 714 190 736 196 730 192 b 179 148 537 177 359 163 b 163 147 174 150 168 147 z\"\n    },\n    \"csymMinor\": {\n      \"x_min\": 0,\n      \"x_max\": 481.6448458467591,\n      \"y_min\": 193,\n      \"y_max\": 265.20435472429375,\n      \"ha\": 72.20435472429375,\n      \"o\": \"m 168 278 b 197 279 177 278 187 278 b 431 292 275 287 353 288 l 431 291 b 661 302 508 295 585 300 b 693 311 672 304 688 300 b 674 346 697 324 685 338 b 564 382 641 366 606 384 l 27 360 b 0 347 17 360 1 366 b 19 314 0 333 3 321 b 168 278 66 291 115 278 z\"\n    },\n    \"csymParensLeftTall\": {\n      \"x_min\": 0,\n      \"x_max\": 185,\n      \"y_min\": 0,\n      \"y_max\": 1034,\n      \"ha\": 1034,\n      \"o\": \"m 212 0 l 215 0 b 226 17 223 1 223 10 b 229 37 229 24 229 32 b 220 81 229 52 225 66 b 167 203 206 124 181 160 b 86 616 124 338 89 474 b 82 765 85 665 82 716 b 91 886 82 805 84 845 b 245 1319 120 1038 171 1184 b 266 1397 259 1346 266 1371 b 259 1443 266 1411 264 1427 b 226 1489 253 1463 248 1489 b 193 1454 212 1489 203 1467 b 114 1292 158 1404 140 1346 b 0 806 40 1138 0 978 b 3 721 0 779 0 750 b 1 677 1 707 1 693 b 36 418 1 593 16 504 b 144 96 62 307 95 199 b 196 12 158 66 179 39 b 212 0 200 7 204 0 z\"\n    },\n    \"csymParensRightTall\": {\n      \"x_min\": -40,\n      \"x_max\": 188.5411603861406,\n      \"y_min\": 0.20204102886728756,\n      \"y_max\": 1058,\n      \"ha\": 1057.7979589711326,\n      \"o\": \"m 30 1 b 63 14 42 -3 55 6 b 122 99 86 40 108 68 b 189 258 145 153 166 204 b 271 667 239 379 268 503 b 246 852 275 708 261 780 b 10 1495 197 1077 128 1295 b -14 1524 4 1505 1 1524 b -16 1522 -14 1524 -16 1524 b -46 1489 -33 1521 -43 1503 b -58 1417 -53 1464 -58 1440 b -36 1335 -58 1390 -52 1364 b 68 1138 0 1270 35 1204 b 163 883 108 1056 137 969 b 206 668 184 814 200 742 b 207 631 207 655 207 642 b 166 426 207 560 192 492 b 46 143 130 330 111 228 b 19 29 19 109 17 69 b 30 1 20 19 24 3 z\"\n    },\n    \"csymBracketLeftTall\": {\n      \"x_min\": 0,\n      \"x_max\": 328,\n      \"y_min\": 2,\n      \"y_max\": 807,\n      \"ha\": 805,\n      \"o\": \"m 68 3 b 76 4 71 3 73 3 b 186 13 112 12 150 13 b 240 13 204 13 222 13 b 287 13 256 13 271 13 b 379 17 317 13 348 13 b 472 121 435 24 472 69 b 467 156 472 132 469 144 b 446 174 462 168 456 174 b 439 174 444 174 442 174 b 327 166 402 167 364 166 b 265 167 307 166 285 167 l 209 167 b 187 475 199 269 189 372 b 166 985 186 645 187 815 l 377 1002 b 415 1001 389 1002 402 1001 b 456 1027 432 1001 448 1005 b 472 1096 467 1048 472 1073 b 464 1146 472 1113 469 1130 b 439 1162 459 1161 452 1162 b 40 1129 305 1151 173 1139 b 1 1093 17 1128 1 1120 b 0 1009 0 1064 0 1037 b 13 975 0 991 3 981 b 30 670 23 873 30 772 b 29 608 30 649 29 628 b 29 563 29 593 29 579 b 56 88 29 405 49 246 b 53 22 55 66 55 43 b 68 3 53 12 56 3 z\"\n    },\n    \"csymBracketRightTall\": {\n      \"x_min\": 0.8519422934604696,\n      \"x_max\": 306,\n      \"y_min\": -0.17180889215212544,\n      \"y_max\": 829.1037519824849,\n      \"ha\": 829.2755608746371,\n      \"o\": \"m 105 0 l 117 0 b 372 29 203 -3 287 20 l 373 29 b 406 32 383 30 395 30 b 436 60 428 33 432 43 b 441 109 439 76 441 92 b 433 200 441 140 436 170 b 409 696 422 366 409 530 b 416 887 409 763 416 831 b 415 920 416 899 415 910 l 415 1106 b 412 1135 415 1116 415 1126 l 412 1145 b 373 1189 413 1171 408 1192 b 321 1189 356 1189 338 1189 b 215 1189 285 1189 251 1189 l 215 1194 l 56 1194 b 6 1153 27 1195 10 1187 b 1 1064 3 1123 4 1093 b 22 1043 0 1050 6 1043 b 84 1044 42 1044 63 1044 b 264 1038 144 1044 203 1040 b 265 958 264 1011 265 985 b 262 845 265 920 264 883 b 259 710 259 801 259 755 b 279 243 259 554 271 399 b 285 170 281 219 284 194 b 95 151 222 161 158 156 b 29 81 27 147 27 147 l 29 73 b 105 0 33 0 33 0 z\"\n    },\n    \"csymParensLeftVeryTall\": {\n      \"x_min\": 0,\n      \"x_max\": 116,\n      \"y_min\": 0,\n      \"y_max\": 934.1531437146923,\n      \"ha\": 934.1531437146923,\n      \"o\": \"m 128 0 b 147 17 137 0 144 9 b 167 102 160 45 167 73 b 158 154 167 120 164 137 b 117 307 141 204 130 256 b 63 698 84 435 71 567 b 62 788 62 729 62 757 b 69 916 62 829 63 873 b 109 1172 81 1001 94 1087 b 132 1320 118 1221 137 1269 b 124 1345 131 1329 134 1342 b 96 1332 114 1346 102 1341 b 71 1269 82 1313 75 1292 b 39 1104 59 1214 48 1159 b 0 742 19 988 0 871 b 10 559 3 688 6 624 b 58 226 16 446 33 336 b 112 20 73 157 94 89 b 128 0 115 13 118 0 z\"\n    },\n    \"csymParensRightVeryTall\": {\n      \"x_min\": -20,\n      \"x_max\": 111.4332498248095,\n      \"y_min\": -0.07657185734616112,\n      \"y_max\": 1009,\n      \"ha\": 1009.0765718573462,\n      \"o\": \"m -3 0 b 20 22 9 -1 14 12 b 36 56 26 33 32 45 b 99 274 58 128 84 199 b 160 788 135 439 163 605 b 122 1181 164 912 145 1047 b 50 1431 108 1267 86 1351 b 36 1453 48 1439 46 1453 b 35 1453 36 1453 35 1453 l 30 1453 b 7 1423 17 1449 7 1440 b 27 1287 9 1377 10 1331 b 96 963 71 1184 85 1074 b 105 818 102 914 105 867 b 91 624 105 753 99 688 b -4 213 72 484 48 344 b -29 101 -19 174 -29 138 b -16 27 -29 76 -24 52 b -3 0 -13 17 -14 3 z\"\n    },\n    \"csymDiagonalArrangementSlash\": {\n      \"x_min\": -0.19862981551275186,\n      \"x_max\": 990,\n      \"y_min\": -26.946823529189132,\n      \"y_max\": 1027.5514326488437,\n      \"ha\": 1054.4982561780328,\n      \"o\": \"m 14 -37 b 58 -9 35 -45 46 -22 b 392 333 170 105 279 217 b 765 711 516 458 639 585 b 1372 1329 968 916 1168 1125 b 1424 1439 1403 1359 1417 1397 b 1426 1457 1424 1444 1426 1450 b 1416 1477 1426 1466 1423 1475 b 1374 1462 1400 1485 1385 1473 b 1181 1269 1309 1397 1246 1331 b 736 831 1031 1122 884 979 b 356 452 609 704 485 576 b 32 132 246 347 143 236 b 0 50 7 109 1 84 b 6 9 -1 37 3 23 b 14 -37 10 -9 0 -32 z\"\n    },\n    \"brassScoop\": {\n      \"x_min\": -0.4444444444444445,\n      \"x_max\": 312,\n      \"y_min\": -390,\n      \"y_max\": 28,\n      \"ha\": 418,\n      \"leftSideBearing\": -1,\n      \"advanceWidth\": 312,\n      \"o\": \"m 0 -562 b 393 -256 171 -504 307 -412 b 449 -39 431 -189 449 -115 b 448 -1 449 -26 449 -14 b 433 40 446 14 448 40 b 408 -3 410 40 412 14 b 396 -66 403 -23 402 -46 b 45 -397 346 -243 209 -337 b 0 -451 13 -409 1 -423 b 0 -562 -1 -485 0 -520 z\"\n    },\n    \"brassDoitMedium\": {\n      \"x_min\": -0.32815253965710617,\n      \"x_max\": 476.2125117760856,\n      \"y_min\": -50,\n      \"y_max\": 333.1535583875376,\n      \"ha\": 383.1535583875376,\n      \"leftSideBearing\": -1,\n      \"advanceWidth\": 476,\n      \"o\": \"m 16 -72 b 27 -71 19 -72 23 -72 b 215 -33 89 -56 153 -48 b 521 114 327 -7 435 35 b 685 432 615 199 691 295 b 670 480 684 449 688 475 b 642 441 654 482 648 456 b 403 183 599 321 513 240 b 79 89 301 130 192 105 b 0 -1 -12 76 0 76 b 0 -50 0 -17 1 -33 b 16 -72 0 -65 3 -72 z\"\n    },\n    \"brassFallLipShort\": {\n      \"x_min\": 0,\n      \"x_max\": 298,\n      \"y_min\": -344,\n      \"y_max\": 65,\n      \"ha\": 409,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 298,\n      \"o\": \"m 396 -495 b 420 -461 412 -487 418 -474 b 429 -382 428 -435 429 -409 b 426 -330 429 -364 428 -347 b 285 -6 410 -209 356 -104 b 98 94 239 59 173 94 b 39 86 79 94 58 92 b 0 49 20 81 0 73 l 0 -52 b 10 -69 0 -62 1 -69 b 20 -68 13 -69 16 -69 b 88 -56 45 -59 66 -56 b 261 -160 156 -56 213 -95 b 396 -495 333 -259 382 -369 z\"\n    },\n    \"brassLiftMedium\": {\n      \"x_min\": 0,\n      \"x_max\": 807,\n      \"y_min\": 0,\n      \"y_max\": 838,\n      \"ha\": 838,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 807,\n      \"o\": \"m 50 0 b 55 1 52 0 53 0 b 58 23 65 7 59 16 b 55 58 56 36 55 48 b 130 117 55 99 75 112 b 220 213 202 121 220 141 b 315 308 220 289 238 308 l 336 308 b 408 380 393 310 406 321 b 461 452 409 438 416 452 b 485 451 468 452 477 451 b 569 510 531 448 556 464 b 573 543 572 520 572 531 b 657 619 580 605 595 618 b 698 621 670 619 684 619 b 788 700 749 625 778 649 b 798 778 792 726 793 752 b 873 857 806 841 809 845 b 985 950 927 867 973 887 b 1084 1047 1002 1035 1004 1034 b 1162 1128 1133 1056 1162 1087 b 1146 1182 1162 1145 1158 1164 b 1125 1207 1140 1191 1136 1207 l 1122 1207 b 1110 1191 1113 1205 1110 1198 b 1112 1174 1110 1185 1112 1178 b 1048 1110 1109 1126 1096 1113 b 1028 1109 1043 1110 1035 1109 b 939 1022 969 1102 948 1081 b 845 922 929 949 917 936 b 746 812 773 909 753 886 b 744 780 744 802 744 791 b 635 681 737 700 717 683 b 524 583 553 680 536 665 b 439 510 514 520 503 510 b 357 431 377 510 360 492 l 357 406 b 314 364 356 379 343 364 b 238 361 288 364 264 364 b 173 300 202 357 180 334 b 167 245 168 281 167 262 b 105 174 166 192 157 180 b 75 171 95 173 85 171 b 6 112 30 166 14 153 b 0 73 1 98 0 85 b 37 10 0 45 13 26 b 50 0 42 7 46 0 z\"\n    },\n    \"brassFallRoughMedium\": {\n      \"x_min\": 0,\n      \"x_max\": 791,\n      \"y_min\": 0,\n      \"y_max\": 819,\n      \"ha\": 819,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 791,\n      \"o\": \"m 1117 0 b 1139 101 1129 26 1139 71 b 1138 121 1139 109 1139 115 b 1084 193 1125 171 1110 193 b 1044 183 1073 193 1060 189 b 1022 177 1035 179 1028 177 b 1007 209 1012 177 1008 186 b 876 324 1004 292 959 330 b 799 317 850 321 825 320 b 759 354 772 314 755 320 b 760 373 760 360 760 366 b 759 392 760 379 760 384 b 681 477 753 451 730 477 b 654 474 672 477 664 475 b 606 467 638 471 622 468 b 586 465 599 465 592 465 b 564 481 570 465 564 469 b 569 505 564 487 566 495 b 575 553 572 521 575 537 b 572 585 575 564 573 575 b 481 665 560 657 539 668 b 412 665 458 664 435 665 b 382 690 392 667 382 672 b 383 700 382 693 383 696 b 386 773 387 724 387 749 b 297 858 382 828 351 857 b 229 861 274 858 251 858 b 190 897 207 863 193 871 b 163 1012 186 936 180 976 b 79 1084 145 1050 124 1084 b 66 1083 75 1084 71 1083 b 43 1096 49 1081 43 1087 b 48 1112 43 1100 45 1106 b 53 1130 52 1119 53 1125 b 39 1169 53 1145 45 1158 b 26 1179 36 1175 30 1179 b 16 1171 22 1179 17 1176 b 0 1103 10 1149 0 1126 b 9 1067 0 1092 1 1079 b 91 1021 26 1031 52 1018 b 145 978 122 1024 141 1011 b 156 913 147 956 151 935 b 291 795 170 831 210 795 b 346 768 337 795 346 796 b 344 743 346 760 344 753 b 343 716 344 733 343 724 b 455 600 343 651 390 602 b 505 605 471 599 490 605 b 528 598 514 605 523 603 b 536 579 534 592 536 586 b 524 523 536 562 526 541 b 523 505 524 517 523 511 b 621 405 523 442 560 405 b 639 406 626 405 634 406 b 677 413 652 408 664 410 b 701 416 687 415 696 416 b 721 392 716 416 721 410 b 720 373 721 386 720 380 b 831 255 714 301 759 252 b 897 261 854 255 876 261 b 926 262 909 261 919 262 b 969 197 963 262 965 252 b 971 184 969 193 971 189 b 1031 115 979 137 998 115 b 1071 122 1043 115 1056 118 b 1096 130 1079 125 1086 127 b 1087 59 1094 107 1087 82 b 1117 0 1087 37 1094 17 z\"\n    },\n    \"brassBend\": {\n      \"x_min\": 0,\n      \"x_max\": 381,\n      \"y_min\": 0,\n      \"y_max\": 367,\n      \"ha\": 367,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 381,\n      \"o\": \"m 298 0 b 472 50 359 0 418 14 b 537 135 501 71 530 92 b 543 216 543 163 543 190 l 543 266 b 544 308 543 281 543 295 b 549 433 546 354 549 395 b 543 507 549 459 547 482 b 533 528 541 516 544 528 b 511 508 524 528 514 520 b 508 478 510 498 508 488 b 504 318 507 425 504 372 b 505 264 504 300 505 282 b 446 181 505 220 484 199 b 294 150 396 160 344 150 b 92 194 226 150 158 167 b 45 269 62 207 45 230 b 46 359 46 300 46 328 b 37 497 46 405 45 451 b 27 523 36 507 37 523 b 4 498 14 524 6 513 b 3 481 3 492 3 487 b 0 409 1 456 0 433 b 4 228 0 348 4 288 b 3 177 4 210 4 194 b 68 53 1 125 20 84 b 200 10 108 27 154 17 b 298 0 233 4 266 0 z\"\n    },\n    \"brassMuteClosed\": {\n      \"x_min\": 0,\n      \"x_max\": 274,\n      \"y_min\": 0,\n      \"y_max\": 260,\n      \"ha\": 260,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 274,\n      \"o\": \"m 203 0 b 209 1 206 0 207 0 b 216 13 215 4 216 9 l 215 27 l 215 153 b 216 161 216 156 216 158 b 372 164 268 163 318 164 b 395 184 383 164 395 166 l 395 189 b 357 229 392 209 386 229 b 219 228 311 229 265 228 l 223 310 b 209 357 225 328 219 344 b 189 374 203 364 197 374 b 184 373 187 374 186 373 b 177 359 179 372 177 366 l 177 348 l 173 222 l 39 222 b 0 206 12 222 0 219 b 10 174 0 199 3 189 b 46 157 19 157 30 157 b 108 160 68 158 88 160 b 171 161 130 161 150 161 l 167 58 b 184 16 167 40 171 26 b 203 0 192 12 196 0 z\"\n    },\n    \"brassMuteOpen\": {\n      \"x_min\": 1,\n      \"x_max\": 313.01193341111656,\n      \"y_min\": 0,\n      \"y_max\": 309,\n      \"ha\": 309,\n      \"leftSideBearing\": 1,\n      \"advanceWidth\": 312,\n      \"o\": \"m 230 0 l 265 0 b 451 189 363 7 452 88 l 451 215 b 348 383 441 285 405 343 b 209 445 288 426 248 445 b 84 379 168 445 132 420 b 69 364 79 373 73 369 b 1 213 30 323 1 275 b 230 0 1 88 94 0 z m 210 62 b 128 73 181 62 154 66 b 40 171 71 91 42 125 b 52 226 40 187 45 206 b 197 374 79 295 130 344 b 228 382 207 380 217 382 b 300 361 252 382 276 370 b 374 308 328 350 353 331 b 410 223 397 284 410 253 b 393 163 410 202 405 181 b 210 62 354 91 288 63 z\"\n    },\n    \"brassFlip\": {\n      \"x_min\": 0,\n      \"x_max\": 402,\n      \"y_min\": 0,\n      \"y_max\": 361,\n      \"ha\": 361,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 402,\n      \"o\": \"m 579 0 b 511 153 579 68 557 117 b 52 504 359 271 206 387 b 29 520 45 510 39 520 b 20 517 26 520 23 518 b 0 477 3 510 0 494 l 0 125 b 17 20 1 92 1 56 b 40 84 37 40 40 60 b 42 287 40 151 42 219 l 42 363 z\"\n    },\n    \"brassJazzTurn\": {\n      \"x_min\": 0,\n      \"x_max\": 646,\n      \"y_min\": 0,\n      \"y_max\": 212,\n      \"ha\": 212,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 646,\n      \"o\": \"m 310 0 b 367 33 327 0 344 10 b 389 55 374 40 382 49 b 490 145 423 85 456 114 b 507 154 495 151 501 154 b 524 144 513 154 517 151 b 598 72 547 120 575 98 b 700 24 625 42 662 24 b 765 43 721 24 744 30 b 893 147 812 72 855 105 b 930 212 910 166 923 186 b 912 215 923 213 917 215 b 871 199 896 215 883 209 b 812 153 852 183 832 167 b 789 144 805 148 796 144 b 773 156 782 144 776 147 b 691 251 757 199 720 222 b 603 301 658 282 631 301 b 527 258 580 301 556 288 b 420 156 494 222 455 190 b 399 143 412 147 405 143 b 377 157 392 143 386 147 b 259 282 340 200 300 242 b 219 305 245 298 232 305 b 177 279 204 305 192 297 b 55 127 137 228 95 177 b 0 52 36 104 20 79 b 14 50 6 50 10 50 b 53 66 32 50 45 58 b 115 131 75 88 98 108 b 135 148 124 143 130 148 b 157 132 141 148 148 143 b 252 33 186 96 219 65 b 310 0 275 12 292 0 z\"\n    },\n    \"brassSmear\": {\n      \"x_min\": 0,\n      \"x_max\": 334,\n      \"y_min\": 0,\n      \"y_max\": 151,\n      \"ha\": 151,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 334,\n      \"o\": \"m 321 0 b 475 125 390 0 436 43 b 481 143 478 131 481 137 b 475 154 481 147 480 151 b 449 148 468 158 458 154 b 395 132 432 137 413 132 b 343 140 377 132 360 137 b 229 194 301 148 266 173 b 168 217 206 209 186 217 b 109 192 148 217 130 209 b 0 26 59 148 32 89 b 59 63 32 29 45 48 b 98 84 72 78 84 84 b 130 73 108 84 118 81 b 213 26 157 58 183 37 b 321 0 255 9 289 0 z\"\n    },\n    \"accSagittal5v7KleismaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v7KleismaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal25SmallDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal25SmallDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal35MediumDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal35MediumDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11MediumDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11MediumDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11LargeDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11LargeDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal35LargeDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal35LargeDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp25SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat25SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp7CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat7CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v7kDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v7kUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v7kUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v7kDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp7CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat7CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp25SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat25SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp35MUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat35MDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp11MUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat11MDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp11LUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat11LDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp35LUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat35LDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp25SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat25SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp7CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat7CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp5CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat5CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp5v7kDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat5v7kUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7v11KleismaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7v11KleismaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal17CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal17CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal55CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal55CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7v11CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7v11CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v11SmallDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v11SmallDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v11SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v11SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp7v11CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat7v11CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp55CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat55CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp17CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat17CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp7v11kDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat7v11kUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp7v11kUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat7v11kDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp17CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat17CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp55CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat55CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp7v11CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat7v11CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v11SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v11SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp5v11SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat5v11SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp7v11CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat7v11CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp55CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat55CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp17CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat17CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp7v11kDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat7v11kUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal23CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal23CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v19CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v19CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v23SmallDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v23SmallDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v23SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v23SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v19CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v19CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp23CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat23CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp23CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat23CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v19CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v19CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v23SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v23SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp5v23SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat5v23SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp5v19CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat5v19CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp23CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat23CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal19SchismaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal19SchismaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal17KleismaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal17KleismaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal143CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal143CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11v49CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11v49CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal19CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal19CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7v19CommaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7v19CommaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal49SmallDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal49SmallDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal23SmallDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal23SmallDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v13MediumDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v13MediumDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11v19MediumDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11v19MediumDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal49MediumDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal49MediumDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v49MediumDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v49MediumDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal49LargeDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal49LargeDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11v19LargeDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal11v19LargeDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v13LargeDiesisUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5v13LargeDiesisDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp23SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat23SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp49SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat49SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp7v19CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat7v19CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp19CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat19CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp11v49CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat11v49CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp143CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat143CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp17kDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat17kUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp19sDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat19sUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp19sUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat19sDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp17kUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat17kDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp143CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat143CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp11v49CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat11v49CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp19CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat19CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp7v19CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat7v19CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp49SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat49SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp23SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat23SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v13MUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v13MDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp11v19MUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat11v19MDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp49MUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat49MDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v49MUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v49MDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp49LUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat49LDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp11v19LUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat11v19LDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalSharp5v13LUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFlat5v13LDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp23SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat23SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp49SDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat49SUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp7v19CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat7v19CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp19CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat19CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp11v49CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat11v49CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp143CDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat143CUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp17kDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat17kUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleSharp19sDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalDoubleFlat19sUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalShaftUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalShaftDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalAcute\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalGrave\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal1MinaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal1MinaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal2MinasUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal2MinasDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal1TinaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal1TinaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal2TinasUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal2TinasDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal3TinasUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal3TinasDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal4TinasUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal4TinasDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5TinasUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal5TinasDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal6TinasUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal6TinasDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7TinasUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal7TinasDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal8TinasUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal8TinasDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal9TinasUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittal9TinasDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFractionalTinaUp\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accSagittalFractionalTinaDown\": {\n      \"x_min\": 186,\n      \"x_max\": 820,\n      \"y_min\": -1000,\n      \"y_max\": 1000,\n      \"ha\": 2000,\n      \"o\": \"m 1181 1440 l 268 1440 l 268 -1440 l 1181 -1440 z m 959 -524 l 959 -850 l 481 -850 l 481 -524 z m 864 -619 l 576 -619 l 576 -755 l 864 -755 z m 959 -26 l 959 -351 l 481 -351 l 481 -26 l 576 -26 l 576 -256 l 864 -256 l 864 -121 l 769 -121 l 769 -187 l 671 -187 l 671 -26 z m 959 325 l 959 37 l 481 37 l 481 135 l 864 135 l 864 325 z m 959 498 l 959 403 l 769 403 l 769 202 l 481 202 l 481 297 l 671 297 l 671 403 l 481 403 l 481 498 z m 671 778 l 576 778 l 576 674 l 671 674 z m 769 876 l 769 674 l 959 674 l 959 576 l 481 576 l 481 876 z m 959 1247 l 959 1152 l 769 1152 l 769 1045 l 959 1045 l 959 950 l 481 950 l 481 1045 l 671 1045 l 671 1152 l 484 1152 l 484 1247 z m 959 -916 l 959 -1011 l 867 -1011 l 665 -1146 l 959 -1146 l 959 -1241 l 481 -1241 l 481 -1146 l 683 -1011 l 481 -1011 l 481 -916 z\"\n    },\n    \"accidentalNarrowReversedFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 208,\n      \"y_min\": -231,\n      \"y_max\": 449,\n      \"ha\": 680,\n      \"o\": \"m 272 -333 b 284 -320 278 -333 281 -328 b 300 -174 297 -272 300 -222 b 275 190 298 -52 279 68 b 268 445 272 275 268 360 l 268 490 b 264 612 269 530 265 572 b 236 647 264 632 252 645 l 235 647 b 217 618 220 647 220 628 b 207 526 210 588 207 556 b 210 432 207 494 210 464 b 216 268 213 377 215 323 l 216 230 l 215 232 b 154 256 194 240 174 251 b 111 264 138 261 124 264 b 3 153 50 264 10 223 b 0 94 0 132 0 114 b 194 -276 0 -63 68 -186 b 255 -323 215 -291 236 -307 b 272 -333 262 -330 268 -333 z m 233 -138 b 71 30 168 -92 105 -45 b 63 59 65 42 63 50 b 96 95 62 75 73 86 b 130 102 108 99 120 102 b 215 76 160 102 187 88 l 220 73 b 225 -22 220 42 222 10 b 233 -138 229 -62 230 -101 z\"\n    },\n    \"accidentalNarrowReversedFlatAndFlat\": {\n      \"x_min\": 0,\n      \"x_max\": 335,\n      \"y_min\": -231,\n      \"y_max\": 449,\n      \"ha\": 680,\n      \"o\": \"m 210 -333 b 228 -323 215 -333 220 -330 b 288 -276 246 -307 268 -291 b 482 94 415 -186 482 -63 b 480 153 482 114 482 132 b 372 264 472 223 432 264 b 328 256 359 264 344 261 b 268 232 308 251 288 240 l 266 230 l 266 268 b 272 432 266 323 269 377 b 275 526 272 464 275 494 b 265 618 275 556 272 588 b 248 647 262 628 262 647 l 246 647 b 219 612 230 645 219 632 b 215 490 217 572 213 530 l 215 445 b 207 190 215 360 210 275 b 183 -174 203 68 183 -52 b 199 -320 183 -222 186 -272 b 210 -333 202 -328 204 -333 z m 131 -138 b 40 30 95 -92 60 -43 b 36 59 36 42 36 50 b 55 95 35 75 42 86 b 73 102 60 99 68 102 b 121 76 89 102 105 88 l 124 73 b 127 -22 124 42 125 10 b 131 -138 128 -62 130 -101 z m 153 -333 b 160 -320 157 -333 158 -328 b 168 -174 167 -272 168 -222 b 154 190 168 -52 157 68 b 151 445 153 275 151 360 l 151 490 b 148 612 151 530 150 572 b 132 647 148 632 141 645 b 122 618 124 647 124 628 b 117 526 118 588 117 556 b 118 432 117 494 118 464 b 121 268 120 377 121 323 l 121 230 l 121 232 b 86 256 109 240 98 251 b 62 264 78 261 69 264 b 1 153 29 264 6 223 b 0 94 0 132 0 114 b 109 -276 0 -63 37 -186 b 144 -323 121 -291 132 -307 b 153 -333 147 -330 151 -333 z m 249 -138 b 258 -22 252 -101 253 -62 b 262 73 261 10 262 42 l 268 76 b 353 102 295 88 323 102 b 386 95 363 102 374 99 b 419 59 409 86 420 75 b 412 30 419 50 418 42 b 249 -138 374 -43 314 -92 z\"\n    },\n    \"accidentalWilsonPlus\": {\n      \"x_min\": 0,\n      \"x_max\": 298,\n      \"y_min\": -218,\n      \"y_max\": 218,\n      \"ha\": 436,\n      \"o\": \"m 232 -314 b 236 -301 236 -310 236 -305 l 236 -295 b 243 -52 239 -213 242 -132 l 369 62 b 429 200 413 101 425 147 b 416 243 429 216 428 236 b 383 225 406 251 393 232 l 377 220 b 246 98 336 177 291 138 b 249 242 248 145 246 193 b 225 304 251 265 242 287 b 209 314 220 308 215 314 b 204 312 207 314 206 312 b 196 292 196 310 196 300 b 193 184 194 256 194 220 b 187 48 192 140 190 94 b 46 -72 141 7 94 -32 b 0 -163 13 -98 0 -127 b 1 -187 0 -170 0 -179 b 10 -235 4 -203 6 -219 b 20 -255 12 -242 14 -251 b 36 -245 26 -259 30 -249 b 181 -109 85 -200 132 -154 b 176 -258 180 -158 176 -209 b 232 -314 176 -298 186 -307 z\"\n    },\n    \"accidentalWilsonMinus\": {\n      \"x_min\": 0,\n      \"x_max\": 284.2093390143919,\n      \"y_min\": -163,\n      \"y_max\": 163,\n      \"ha\": 326,\n      \"o\": \"m 386 -232 b 409 -163 415 -222 408 -180 b 382 -69 410 -120 408 -89 b 32 228 264 30 141 118 b 17 235 26 233 22 235 b 3 219 9 235 3 228 b 0 157 3 199 0 179 b 29 69 0 125 6 95 b 323 -194 115 -29 222 -111 b 374 -235 338 -206 353 -235 b 386 -232 377 -235 382 -233 z\"\n    }\n  },\n  \"fontFamily\": \"Petaluma\",\n  \"resolution\": 1000,\n  \"generatedOn\": \"2020-11-16T21:48:49.454Z\"\n};\n","export const PetalumaMetrics = {\n  name: 'Petaluma',\n  smufl: true,\n\n  stave: {\n    padding: 15,\n    endPaddingMax: 15,\n    endPaddingMin: 8,\n    unalignedNotePadding: 11\n  },\n\n  clef: {\n    default: {\n      point: 32,\n      width: 26,\n    },\n    small: {\n      point: 26,\n      width: 20,\n    },\n\n    annotations: {\n      '8va': {\n        smuflCode: 'timeSig8',\n        default: {\n          point: 18,\n          treble: {\n            line: -1.4,\n            shiftX: 12,\n          },\n        },\n        small: {\n          point: 16,\n          treble: {\n            line: -0.2,\n            shiftX: 8,\n          },\n        },\n      },\n      '8vb': {\n        smuflCode: 'timeSig8',\n        default: {\n          point: 18,\n          treble: {\n            line: 6,\n            shiftX: 10,\n          },\n          bass: {\n            line: 3.5,\n            shiftX: 1,\n          },\n        },\n        small: {\n          point: 16,\n          treble: {\n            line: 5.3,\n            shiftX: 6,\n          },\n          bass: {\n            line: 3.1,\n            shiftX: 0.5,\n          },\n        },\n      },\n    },\n\n    // These may no longer be necessary\n    lineCount: {\n      '8': { point: 55, shiftY: 14 },\n      '7': { point: 47, shiftY: 8 },\n      '6': { point: 32, shiftY: 1 },\n      '5': { point: 30, shiftY: -6 },\n      '4': { point: 23, shiftY: -12 },\n    },\n  },\n\n  pedalMarking: {\n    up: {\n      point: 40,\n    },\n    down: {\n      point: 34,\n    },\n  },\n\n  // These are for numeric digits, such as in time signatures\n  digits: {\n    // used by timesig\n    shiftLine: -1,\n    point: 22,\n\n    // used by tuplets\n    tupletPoint: 16,\n    shiftY: -2,\n  },\n\n  articulation: {\n    articStaccatissimoAbove: {\n      padding: 2,\n    },\n    articStaccatissimoBelow: {\n      padding: 2,\n    },\n  },\n\n  tremolo: {\n    default: {\n      point: 25,\n      spacing: 5,\n      offsetYStemUp: -5,\n      offsetYStemDown: 5,\n      offsetXStemUp: 11,\n      offsetXStemDown: 1,\n    },\n    grace: {\n      point: 18,\n      spacing: 4,\n      offsetYStemUp: -5,\n      offsetYStemDown: 5,\n      offsetXStemUp: 7,\n      offsetXStemDown: 1,\n    },\n  },\n\n  noteHead: {\n    displaced: {\n      shiftX: -2,\n    },\n  },\n\n  stem: {\n    heightAdjustmentForFlag: -3,\n    // These are stem (Y) offsets to the note heads. To shift the\n    // noteheads (x-position) themselves, see glyphs.notehead.custom.\n    noteHead: {\n      noteheadTriangleUpHalf: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadTriangleUpBlack: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadTriangleUpWhole: {\n        offsetYBaseStemUp: 5,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXHalf: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXBlack: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadXWhole: {\n        offsetYBaseStemUp: -4,\n        offsetYBaseStemDown: 4,\n      },\n      noteheadHalf: {\n        offsetYBaseStemDown: 1.8,\n        offsetYBaseStemUp: -1.8,\n      },\n      noteheadBlack: {\n        offsetYBaseStemDown: 2,\n        offsetYBaseStemUp: -2,\n      },\n      noteheadSquareWhite: {\n        offsetYBaseStemDown: -5,\n        offsetYBaseStemUp: 5,\n      },\n    },\n  },\n\n  // Values under here are used by the Glyph class to reposition and rescale\n  // glyphs based on their category. This should be the first stop for\n  // custom font glyph repositioning.\n  //\n  // The glyph loader first looks up a specific set of settings based on the\n  // glyph code, and if not found, uses the defaults from the category. See\n  // glyphs.textNote for an example of this.\n  //\n  // Details in Glyph.lookupFontMetrics.\n  glyphs: {\n    coda: {\n      point: 20,\n      shiftX: -7,\n      shiftY: 8,\n    },\n    segno: {\n      shiftX: -7,\n    },\n    flag: {\n      shiftX: -0.77,\n      flag16thUp: {\n        shiftX: -0.75,\n      },\n      flag32ndUp: {\n        shiftX: -0.85,\n      },\n      flag64thUp: {\n        shiftX: -1.55,\n      },\n      flag128thUp: {\n        shiftX: -1.3,\n      },\n      flag16thDown: {\n        shiftX: -0.75,\n      },\n      flag32ndDown: {\n        shiftX: -0.76,\n      },\n      flag64thDown: {\n        shiftX: -1.5,\n      },\n      flag128thDown: {\n        shiftX: -1.2,\n      },\n      tabStem: {\n        shiftX: -1.75,\n      },\n      staveTempo: {\n        shiftX: -1,\n      },\n    },\n    clef: {\n      gClef: {\n        default: { scale: 1.1, shiftY: 1 },\n        small: { shiftY: 1.5 },\n      },\n      fClef: {\n        default: { shiftY: -0.5 },\n      },\n    },\n    ornament: {\n      ornamentTurn: {\n        scale: 1.2,\n      },\n      ornamentTurnSlash: {\n        scale: 1.2,\n      },\n    },\n    stroke: {\n      arrowheadBlackDown: {\n        straight: {\n          shiftX: -4.5,\n        },\n        wiggly: {\n          shiftX: -1,\n          shiftY: 1,\n        },\n      },\n      arrowheadBlackUp: {\n        straight: {\n          shiftX: -0.85,\n        },\n        wiggly: {\n          shiftX: -1,\n          shiftY: 1,\n        },\n      },\n    },\n    textNote: {\n      point: 34,\n      breathMarkTick: {\n        point: 36,\n        shiftY: 9,\n      },\n      breathMarkComma: {\n        point: 36,\n      },\n      segno: {\n        point: 30,\n        shiftX: -7,\n        shiftY: 8,\n      },\n      coda: {\n        point: 20,\n        shiftX: -7,\n        shiftY: 8,\n      },\n      ornamentTrill: {\n        shiftX: -10,\n        shiftY: 8,\n      },\n      ornamentMordent: {\n        shiftX: -8,\n      },\n      ornamentShortTrill: {\n        shiftX: -8,\n      },\n    },\n    noteHead: {\n      standard: {\n        noteheadBlackStemUp: {\n          shiftX: 1.625,\n          point: 34,\n        },\n        noteheadBlackStemDown: {\n          point: 34,\n        },\n        noteheadHalfStemUp: {\n          shiftX: 1.725,\n          point: 34,\n        },\n        noteheadHalfStemDown: {\n          point: 34,\n        },\n        noteheadWholeStemUp: {\n          shiftX: 1,\n          point: 34,\n        },\n        noteheadWholeStemDown: {\n          point: 34,\n        },\n        restQuarterStemUp: {\n          point: 35,\n        },\n        restQuarterStemDown: {\n          point: 35,\n        },\n      },\n      custom: {\n        noteheadCircleXStemUp: {\n          shiftX: -1,\n        },\n        noteheadCircleXStemDown: {\n          shiftX: 0.25,\n        },\n        noteheadDiamondHalfStemUp: {\n          shiftX: 1.5,\n        },\n        noteheadDiamondBlackStemUp: {\n          shiftX: 1.5,\n        },\n        noteheadDiamondWholeStemUp: {\n          shiftX: 1,\n        },\n        noteheadXBlackStemUp: {\n          shiftX: 1,\n        },\n        noteheadXHalfStemUp: {\n          shiftX: -3,\n        },\n        noteheadXHalfStemDown: {\n          shiftX: 1,\n        },\n        noteheadXWholeStemUp: {\n          shiftX: -7,\n        },\n        noteheadXWholeStemDown: {\n          shiftX: 1,\n        },\n        noteheadSquareWhiteStemDown: {\n          shiftX: 0.25,\n        },\n        noteheadSquareWhiteStemUp: {\n          shiftX: -0.75,\n        },\n        noteheadSquareBlackStemUp: {\n          shiftX: -0.75,\n        },\n        noteheadTriangleUpWholeStemUp: {\n          shiftX: -0.75,\n        },\n      },\n    },\n    chordSymbol: {\n      global: {\n        superscriptOffset: -400,\n        subscriptOffset: 300,\n        kerningOffset: -150,\n        lowerKerningText: ['D', 'F', 'P', 'T', 'V', 'Y'],\n        upperKerningText: ['L'],\n        spacing: 20,\n        superSubRatio: 0.73,\n      },\n      csymDiminished: {\n        scale: 0.8,\n        leftSideBearing: -95,\n        advanceWidth: 506,\n        yOffset: 0,\n      },\n      csymHalfDiminished: {\n        scale: 0.8,\n        leftSideBearing: -32,\n        advanceWidth: 506,\n        yOffset: 0,\n      },\n      csymAugmented: {\n        scale: 1,\n        leftSideBearing: -25,\n        advanceWidth: 530,\n        yOffset: 0,\n      },\n      csymParensLeftTall: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 155,\n        yOffset: 150,\n      },\n      csymParensRightTall: {\n        scale: 0.8,\n        leftSideBearing: 40,\n        advanceWidth: 189,\n        yOffset: 150,\n      },\n      csymBracketLeftTall: {\n        scale: 0.8,\n        leftSideBearing: 0,\n        advanceWidth: 328,\n        yOffset: 0,\n      },\n      csymBracketRightTall: {\n        scale: 0.8,\n        leftSideBearing: 1,\n        advanceWidth: 600,\n        yOffset: 0,\n      },\n      csymParensLeftVeryTall: {\n        scale: 0.95,\n        leftSideBearing: 0,\n        advanceWidth: 210,\n        yOffset: 250,\n      },\n      csymParensRightVeryTall: {\n        scale: 0.9,\n        leftSideBearing: -100,\n        advanceWidth: 111,\n        yOffset: 250,\n      },\n      csymDiagonalArrangementSlash: {\n        scale: 0.6,\n        leftSideBearing: -1,\n        advanceWidth: 990,\n        yOffset: 0,\n      },\n      csymMinor: {\n        scale: 0.7,\n        leftSideBearing: 0,\n        advanceWidth: 482,\n        yOffset: 0,\n      },\n      csymMajorSeventh: {\n        scale: 0.8,\n        leftSideBearing: 100,\n        yOffset: 0,\n        advanceWidth: 600,\n      },\n      accidentalSharp: {\n        scale: 0.7,\n        leftSideBearing: 0,\n        advanceWidth: 425,\n        yOffset: -422,\n      },\n      accidentalFlat: {\n        scale: 0.8,\n        leftSideBearing: -10,\n        advanceWidth: 228,\n        yOffset: -284,\n      },\n    },\n    jazzOrnaments: {\n      brassScoop: {\n        scale: 1.0,\n        xOffset: -12,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 10,\n      },\n      brassDoitMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassFallLipShort: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 0,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassLiftMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 5,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassFallRoughMedium: {\n        scale: 1.0,\n        xOffset: 16,\n        yOffset: 26,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassBend: {\n        scale: 1.0,\n        xOffset: 3,\n        yOffset: -8,\n        stemUpYOffset: 28,\n        reportedWidth: 5,\n      },\n      brassMuteClosed: {\n        scale: 1.0,\n        xOffset: 3,\n        yOffset: -8,\n        stemUpYOffset: 26,\n        reportedWidth: 5,\n      },\n      brassMuteOpen: {\n        scale: 1.0,\n        xOffset: 4,\n        yOffset: -8,\n        stemUpYOffset: 27,\n        reportedWidth: 5,\n      },\n      brassFlip: {\n        scale: 1.0,\n        xOffset: 10,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassJazzTurn: {\n        scale: 1.0,\n        xOffset: 6,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n      brassSmear: {\n        scale: 1.0,\n        xOffset: 10,\n        yOffset: -4,\n        stemUpYOffset: 0,\n        reportedWidth: 5,\n      },\n    },\n  },\n};\n","export const PetalumaScriptTextMetrics = {\n  name: 'petalumaScript',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": 0,\n      \"y_max\": 500,\n      \"ha\": 500,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 250\n    },\"0\": {\n      \"x_min\": 33,\n      \"x_max\": 534,\n      \"y_min\": -13,\n      \"y_max\": 751,\n      \"ha\": 764,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 570\n    },\n    \"1\": {\n      \"x_min\": 48,\n      \"x_max\": 235,\n      \"y_min\": -17,\n      \"y_max\": 734,\n      \"ha\": 751,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 286\n    },\n    \"2\": {\n      \"x_min\": 56,\n      \"x_max\": 571,\n      \"y_min\": -19,\n      \"y_max\": 741,\n      \"ha\": 760,\n      \"leftSideBearing\": 56,\n      \"advanceWidth\": 626\n    },\n    \"3\": {\n      \"x_min\": 50,\n      \"x_max\": 528,\n      \"y_min\": -7,\n      \"y_max\": 731,\n      \"ha\": 738,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 589\n    },\n    \"4\": {\n      \"x_min\": 38,\n      \"x_max\": 564,\n      \"y_min\": -13,\n      \"y_max\": 743,\n      \"ha\": 756,\n      \"leftSideBearing\": 38,\n      \"advanceWidth\": 614\n    },\n    \"5\": {\n      \"x_min\": 42,\n      \"x_max\": 601,\n      \"y_min\": -34,\n      \"y_max\": 743,\n      \"ha\": 777,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 648\n    },\n    \"6\": {\n      \"x_min\": 47,\n      \"x_max\": 606,\n      \"y_min\": -16,\n      \"y_max\": 743,\n      \"ha\": 759,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 667\n    },\n    \"7\": {\n      \"x_min\": 47,\n      \"x_max\": 567,\n      \"y_min\": 5,\n      \"y_max\": 739,\n      \"ha\": 734,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 615\n    },\n    \"8\": {\n      \"x_min\": 40,\n      \"x_max\": 541,\n      \"y_min\": -15,\n      \"y_max\": 752,\n      \"ha\": 767,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 585\n    },\n    \"9\": {\n      \"x_min\": 40,\n      \"x_max\": 537,\n      \"y_min\": -52,\n      \"y_max\": 736,\n      \"ha\": 788,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 592\n    },\n    \"!\": {\n      \"x_min\": 49,\n      \"x_max\": 180,\n      \"y_min\": -7,\n      \"y_max\": 761,\n      \"ha\": 768,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 230\n    },\n    \"\\\"\": {\n      \"x_min\": 39,\n      \"x_max\": 304,\n      \"y_min\": 596,\n      \"y_max\": 804,\n      \"ha\": 208,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 353\n    },\n    \"#\": {\n      \"x_min\": 33,\n      \"x_max\": 599,\n      \"y_min\": -8,\n      \"y_max\": 765,\n      \"ha\": 773,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 648\n    },\n    \"$\": {\n      \"x_min\": 53,\n      \"x_max\": 495,\n      \"y_min\": -111,\n      \"y_max\": 823,\n      \"ha\": 934,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 560\n    },\n    \"%\": {\n      \"x_min\": 35,\n      \"x_max\": 656,\n      \"y_min\": -128,\n      \"y_max\": 808,\n      \"ha\": 936,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 711\n    },\n    \"&\": {\n      \"x_min\": 53,\n      \"x_max\": 441,\n      \"y_min\": -3,\n      \"y_max\": 753,\n      \"ha\": 756,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 500\n    },\n    \"'\": {\n      \"x_min\": 43,\n      \"x_max\": 161,\n      \"y_min\": 590,\n      \"y_max\": 811,\n      \"ha\": 221,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 217\n    },\n    \"(\": {\n      \"x_min\": 41,\n      \"x_max\": 311,\n      \"y_min\": -36,\n      \"y_max\": 845,\n      \"ha\": 881,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 308\n    },\n    \")\": {\n      \"x_min\": -8,\n      \"x_max\": 257,\n      \"y_min\": -21,\n      \"y_max\": 852,\n      \"ha\": 873,\n      \"leftSideBearing\": -8,\n      \"advanceWidth\": 280\n    },\n    \"*\": {\n      \"x_min\": 59,\n      \"x_max\": 539,\n      \"y_min\": 175,\n      \"y_max\": 589,\n      \"ha\": 414,\n      \"leftSideBearing\": 59,\n      \"advanceWidth\": 601\n    },\n    \"+\": {\n      \"x_min\": 33,\n      \"x_max\": 361,\n      \"y_min\": 180,\n      \"y_max\": 587,\n      \"ha\": 407,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 400\n    },\n    \",\": {\n      \"x_min\": 15,\n      \"x_max\": 176,\n      \"y_min\": -129,\n      \"y_max\": 92,\n      \"ha\": 221,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 205\n    },\n    \"-\": {\n      \"x_min\": 40,\n      \"x_max\": 380,\n      \"y_min\": 317,\n      \"y_max\": 452,\n      \"ha\": 135,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \".\": {\n      \"x_min\": 48,\n      \"x_max\": 185,\n      \"y_min\": -56,\n      \"y_max\": 84,\n      \"ha\": 140,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 227\n    },\n    \"/\": {\n      \"x_min\": -58,\n      \"x_max\": 654,\n      \"y_min\": -122,\n      \"y_max\": 844,\n      \"ha\": 966,\n      \"leftSideBearing\": -58,\n      \"advanceWidth\": 626\n    },\n    \":\": {\n      \"x_min\": 65,\n      \"x_max\": 225,\n      \"y_min\": 97,\n      \"y_max\": 536,\n      \"ha\": 439,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 302\n    },\n    \";\": {\n      \"x_min\": 13,\n      \"x_max\": 295,\n      \"y_min\": -139,\n      \"y_max\": 536,\n      \"ha\": 675,\n      \"leftSideBearing\": 13,\n      \"advanceWidth\": 334\n    },\n    \"<\": {\n      \"x_min\": 28,\n      \"x_max\": 438,\n      \"y_min\": -1,\n      \"y_max\": 607,\n      \"ha\": 608,\n      \"leftSideBearing\": 28,\n      \"advanceWidth\": 475\n    },\n    \"=\": {\n      \"x_min\": 40,\n      \"x_max\": 383,\n      \"y_min\": 199.9598640852289,\n      \"y_max\": 541,\n      \"ha\": 341.0401359147711,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \">\": {\n      \"x_min\": 35,\n      \"x_max\": 421,\n      \"y_min\": 28,\n      \"y_max\": 632,\n      \"ha\": 604,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 466\n    },\n    \"?\": {\n      \"x_min\": 45,\n      \"x_max\": 548,\n      \"y_min\": -17,\n      \"y_max\": 767,\n      \"ha\": 784,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 592\n    },\n    \"@\": {\n      \"x_min\": 51,\n      \"x_max\": 730,\n      \"y_min\": -78,\n      \"y_max\": 753,\n      \"ha\": 831,\n      \"leftSideBearing\": 51,\n      \"advanceWidth\": 781\n    },\n    \"A\": {\n      \"x_min\": 37,\n      \"x_max\": 554,\n      \"y_min\": -4,\n      \"y_max\": 746,\n      \"ha\": 750,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 617\n    },\n    \"B\": {\n      \"x_min\": 37,\n      \"x_max\": 532,\n      \"y_min\": 3,\n      \"y_max\": 783,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 579\n    },\n    \"C\": {\n      \"x_min\": 37,\n      \"x_max\": 583,\n      \"y_min\": -3,\n      \"y_max\": 775,\n      \"ha\": 778,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 623\n    },\n    \"D\": {\n      \"x_min\": 50,\n      \"x_max\": 530,\n      \"y_min\": -15,\n      \"y_max\": 749,\n      \"ha\": 764,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 579\n    },\n    \"E\": {\n      \"x_min\": 45,\n      \"x_max\": 531,\n      \"y_min\": -1,\n      \"y_max\": 743,\n      \"ha\": 744,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 585\n    },\n    \"F\": {\n      \"x_min\": 45,\n      \"x_max\": 459,\n      \"y_min\": 23,\n      \"y_max\": 727,\n      \"ha\": 704,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 510\n    },\n    \"G\": {\n      \"x_min\": 31,\n      \"x_max\": 577,\n      \"y_min\": -8,\n      \"y_max\": 733,\n      \"ha\": 741,\n      \"leftSideBearing\": 31,\n      \"advanceWidth\": 611\n    },\n    \"H\": {\n      \"x_min\": 37,\n      \"x_max\": 493,\n      \"y_min\": -22,\n      \"y_max\": 758,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 535\n    },\n    \"I\": {\n      \"x_min\": 47,\n      \"x_max\": 501,\n      \"y_min\": -3,\n      \"y_max\": 731,\n      \"ha\": 734,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 541\n    },\n    \"J\": {\n      \"x_min\": 33,\n      \"x_max\": 531,\n      \"y_min\": -23,\n      \"y_max\": 725,\n      \"ha\": 748,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 573\n    },\n    \"K\": {\n      \"x_min\": 43,\n      \"x_max\": 505,\n      \"y_min\": -10,\n      \"y_max\": 740,\n      \"ha\": 750,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 560\n    },\n    \"L\": {\n      \"x_min\": 49,\n      \"x_max\": 457,\n      \"y_min\": -2,\n      \"y_max\": 746,\n      \"ha\": 748,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 510\n    },\n    \"M\": {\n      \"x_min\": 35,\n      \"x_max\": 699,\n      \"y_min\": 1,\n      \"y_max\": 744,\n      \"ha\": 743,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 743\n    },\n    \"N\": {\n      \"x_min\": 34,\n      \"x_max\": 533,\n      \"y_min\": -17,\n      \"y_max\": 761,\n      \"ha\": 778,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 579\n    },\n    \"O\": {\n      \"x_min\": 41,\n      \"x_max\": 608,\n      \"y_min\": -5,\n      \"y_max\": 735,\n      \"ha\": 740,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 667\n    },\n    \"P\": {\n      \"x_min\": 53,\n      \"x_max\": 451,\n      \"y_min\": -18,\n      \"y_max\": 735,\n      \"ha\": 753,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 497\n    },\n    \"Q\": {\n      \"x_min\": 40,\n      \"x_max\": 599,\n      \"y_min\": -67,\n      \"y_max\": 744,\n      \"ha\": 811,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 648\n    },\n    \"R\": {\n      \"x_min\": 39,\n      \"x_max\": 487,\n      \"y_min\": 16,\n      \"y_max\": 735,\n      \"ha\": 719,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 535\n    },\n    \"S\": {\n      \"x_min\": 35,\n      \"x_max\": 552,\n      \"y_min\": -47,\n      \"y_max\": 708,\n      \"ha\": 755,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 604\n    },\n    \"T\": {\n      \"x_min\": 26,\n      \"x_max\": 656,\n      \"y_min\": -13,\n      \"y_max\": 718,\n      \"ha\": 731,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 705\n    },\n    \"U\": {\n      \"x_min\": 41,\n      \"x_max\": 518,\n      \"y_min\": -20,\n      \"y_max\": 748,\n      \"ha\": 768,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 567\n    },\n    \"V\": {\n      \"x_min\": 47,\n      \"x_max\": 509,\n      \"y_min\": -26,\n      \"y_max\": 744,\n      \"ha\": 770,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 567\n    },\n    \"W\": {\n      \"x_min\": 44,\n      \"x_max\": 789,\n      \"y_min\": -35,\n      \"y_max\": 720,\n      \"ha\": 755,\n      \"leftSideBearing\": 44,\n      \"advanceWidth\": 833\n    },\n    \"X\": {\n      \"x_min\": 63,\n      \"x_max\": 635,\n      \"y_min\": -10,\n      \"y_max\": 745,\n      \"ha\": 755,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 680\n    },\n    \"Y\": {\n      \"x_min\": 43,\n      \"x_max\": 503,\n      \"y_min\": -21,\n      \"y_max\": 734,\n      \"ha\": 755,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 541\n    },\n    \"Z\": {\n      \"x_min\": 42,\n      \"x_max\": 584,\n      \"y_min\": -10,\n      \"y_max\": 739,\n      \"ha\": 749,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 629\n    },\n    \"[\": {\n      \"x_min\": 46,\n      \"x_max\": 346,\n      \"y_min\": -150,\n      \"y_max\": 884,\n      \"ha\": 1034,\n      \"leftSideBearing\": 46,\n      \"advanceWidth\": 291\n    },\n    \"\\\\\": {\n      \"x_min\": 20,\n      \"x_max\": 616,\n      \"y_min\": -100,\n      \"y_max\": 797,\n      \"ha\": 897,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 645\n    },\n    \"]\": {\n      \"x_min\": -76,\n      \"x_max\": 226,\n      \"y_min\": -150,\n      \"y_max\": 881,\n      \"ha\": 1031,\n      \"leftSideBearing\": -76,\n      \"advanceWidth\": 297\n    },\n    \"^\": {\n      \"x_min\": 43,\n      \"x_max\": 437,\n      \"y_min\": 517,\n      \"y_max\": 812,\n      \"ha\": 295,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 478\n    },\n    \"_\": {\n      \"x_min\": 29,\n      \"x_max\": 563,\n      \"y_min\": -110,\n      \"y_max\": -1,\n      \"ha\": 109,\n      \"leftSideBearing\": 29,\n      \"advanceWidth\": 598\n    },\n    \"`\": {\n      \"x_min\": 54,\n      \"x_max\": 321,\n      \"y_min\": 540,\n      \"y_max\": 747,\n      \"ha\": 207,\n      \"leftSideBearing\": 54,\n      \"advanceWidth\": 368\n    },\n    \"a\": {\n      \"x_min\": 20,\n      \"x_max\": 447,\n      \"y_min\": -17,\n      \"y_max\": 495,\n      \"ha\": 512,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 494\n    },\n    \"b\": {\n      \"x_min\": 37,\n      \"x_max\": 466,\n      \"y_min\": -27,\n      \"y_max\": 770,\n      \"ha\": 797,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 510\n    },\n    \"c\": {\n      \"x_min\": 35,\n      \"x_max\": 456,\n      \"y_min\": -9,\n      \"y_max\": 507,\n      \"ha\": 516,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 460\n    },\n    \"d\": {\n      \"x_min\": 45,\n      \"x_max\": 520,\n      \"y_min\": -15,\n      \"y_max\": 764,\n      \"ha\": 779,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 560\n    },\n    \"e\": {\n      \"x_min\": 33,\n      \"x_max\": 370,\n      \"y_min\": -5,\n      \"y_max\": 501,\n      \"ha\": 506,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 397\n    },\n    \"f\": {\n      \"x_min\": 35,\n      \"x_max\": 411,\n      \"y_min\": -13,\n      \"y_max\": 695,\n      \"ha\": 708,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 453\n    },\n    \"g\": {\n      \"x_min\": 33,\n      \"x_max\": 551,\n      \"y_min\": -257,\n      \"y_max\": 505,\n      \"ha\": 762,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 611\n    },\n    \"h\": {\n      \"x_min\": 32,\n      \"x_max\": 458,\n      \"y_min\": -29,\n      \"y_max\": 743,\n      \"ha\": 772,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 491\n    },\n    \"i\": {\n      \"x_min\": 45,\n      \"x_max\": 167,\n      \"y_min\": -13,\n      \"y_max\": 631,\n      \"ha\": 644,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 220\n    },\n    \"j\": {\n      \"x_min\": -127,\n      \"x_max\": 261,\n      \"y_min\": -231,\n      \"y_max\": 601,\n      \"ha\": 832,\n      \"leftSideBearing\": -127,\n      \"advanceWidth\": 308\n    },\n    \"k\": {\n      \"x_min\": 39,\n      \"x_max\": 443,\n      \"y_min\": -3,\n      \"y_max\": 700,\n      \"ha\": 703,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 497\n    },\n    \"l\": {\n      \"x_min\": 58,\n      \"x_max\": 168,\n      \"y_min\": -8,\n      \"y_max\": 686,\n      \"ha\": 694,\n      \"leftSideBearing\": 58,\n      \"advanceWidth\": 227\n    },\n    \"m\": {\n      \"x_min\": 39,\n      \"x_max\": 688,\n      \"y_min\": -14,\n      \"y_max\": 501,\n      \"ha\": 515,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 718\n    },\n    \"n\": {\n      \"x_min\": 45,\n      \"x_max\": 491,\n      \"y_min\": -32,\n      \"y_max\": 512,\n      \"ha\": 544,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 541\n    },\n    \"o\": {\n      \"x_min\": 41,\n      \"x_max\": 424,\n      \"y_min\": -12,\n      \"y_max\": 493,\n      \"ha\": 505,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 447\n    },\n    \"p\": {\n      \"x_min\": 25,\n      \"x_max\": 529,\n      \"y_min\": -260,\n      \"y_max\": 500,\n      \"ha\": 760,\n      \"leftSideBearing\": 25,\n      \"advanceWidth\": 573\n    },\n    \"q\": {\n      \"x_min\": 53,\n      \"x_max\": 603,\n      \"y_min\": -235,\n      \"y_max\": 514,\n      \"ha\": 749,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 623\n    },\n    \"r\": {\n      \"x_min\": 32,\n      \"x_max\": 407,\n      \"y_min\": -7,\n      \"y_max\": 492,\n      \"ha\": 499,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 460\n    },\n    \"s\": {\n      \"x_min\": 49,\n      \"x_max\": 416,\n      \"y_min\": -12,\n      \"y_max\": 519,\n      \"ha\": 531,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 460\n    },\n    \"t\": {\n      \"x_min\": 32,\n      \"x_max\": 442,\n      \"y_min\": -5,\n      \"y_max\": 684,\n      \"ha\": 689,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 469\n    },\n    \"u\": {\n      \"x_min\": 41,\n      \"x_max\": 487,\n      \"y_min\": -5,\n      \"y_max\": 507,\n      \"ha\": 512,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 510\n    },\n    \"v\": {\n      \"x_min\": 16,\n      \"x_max\": 441,\n      \"y_min\": -20,\n      \"y_max\": 542,\n      \"ha\": 562,\n      \"leftSideBearing\": 16,\n      \"advanceWidth\": 456\n    },\n    \"w\": {\n      \"x_min\": 39,\n      \"x_max\": 639,\n      \"y_min\": -22,\n      \"y_max\": 505,\n      \"ha\": 527,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 661\n    },\n    \"x\": {\n      \"x_min\": 15,\n      \"x_max\": 505,\n      \"y_min\": -39,\n      \"y_max\": 539,\n      \"ha\": 578,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 541\n    },\n    \"y\": {\n      \"x_min\": -98,\n      \"x_max\": 501,\n      \"y_min\": -242,\n      \"y_max\": 511,\n      \"ha\": 753,\n      \"leftSideBearing\": -98,\n      \"advanceWidth\": 548\n    },\n    \"z\": {\n      \"x_min\": 27,\n      \"x_max\": 479,\n      \"y_min\": -3,\n      \"y_max\": 494,\n      \"ha\": 497,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 494\n    },\n    \"{\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"|\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"}\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"~\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    }\n\n  },\n  \"fontFamily\": \"Petaluma Script\",\n  \"resolution\": 1000,\n  \"generatedOn\": \"2020-06-14T18:33:25.407Z\"\n};\n","export const RobotoSlabTextMetrics = {\n  name: 'Roboto Slab',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 509,\n      \"y_min\": 0,\n      \"y_max\": 2000,\n      \"ha\": 2000,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 509\n    },\n    \"0\": {\n      \"x_min\": 121,\n      \"x_max\": 1048,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1168\n    },\n    \"1\": {\n      \"x_min\": 117,\n      \"x_max\": 767,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 117,\n      \"advanceWidth\": 844\n    },\n    \"2\": {\n      \"x_min\": 75.8474576645637,\n      \"x_max\": 1040,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 75,\n      \"advanceWidth\": 1131\n    },\n    \"3\": {\n      \"x_min\": 74.85365853658536,\n      \"x_max\": 994,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1106\n    },\n    \"4\": {\n      \"x_min\": 63,\n      \"x_max\": 1114,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1187\n    },\n    \"5\": {\n      \"x_min\": 96.8448275474953,\n      \"x_max\": 982,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1081\n    },\n    \"6\": {\n      \"x_min\": 121,\n      \"x_max\": 1067,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1144\n    },\n    \"7\": {\n      \"x_min\": 76,\n      \"x_max\": 1060,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": -30,\n      \"advanceWidth\": 1128\n    },\n    \"8\": {\n      \"x_min\": 92,\n      \"x_max\": 1039,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 92,\n      \"advanceWidth\": 1131\n    },\n    \"9\": {\n      \"x_min\": 84,\n      \"x_max\": 1026,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1154\n    },\n    \"!\": {\n      \"x_min\": 143,\n      \"x_max\": 340,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 143,\n      \"advanceWidth\": 483\n    },\n    \"\\\"\": {\n      \"x_min\": 166,\n      \"x_max\": 634,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 770\n    },\n    \"#\": {\n      \"x_min\": 63,\n      \"x_max\": 1179,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1246\n    },\n    \"$\": {\n      \"x_min\": 81.92156915727656,\n      \"x_max\": 1012,\n      \"y_min\": -208,\n      \"y_max\": 1693,\n      \"ha\": 1901,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1110\n    },\n    \"%\": {\n      \"x_min\": 77,\n      \"x_max\": 1384,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 77,\n      \"advanceWidth\": 1460\n    },\n    \"&\": {\n      \"x_min\": 74,\n      \"x_max\": 1242,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1289\n    },\n    \"'\": {\n      \"x_min\": 166,\n      \"x_max\": 324,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 460\n    },\n    \"(\": {\n      \"x_min\": 114,\n      \"x_max\": 650,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 114,\n      \"advanceWidth\": 662\n    },\n    \")\": {\n      \"x_min\": 11,\n      \"x_max\": 547,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 11,\n      \"advanceWidth\": 654\n    },\n    \"*\": {\n      \"x_min\": 66,\n      \"x_max\": 893,\n      \"y_min\": 607,\n      \"y_max\": 1456,\n      \"ha\": 849,\n      \"leftSideBearing\": 66,\n      \"advanceWidth\": 958\n    },\n    \"+\": {\n      \"x_min\": 73,\n      \"x_max\": 1071,\n      \"y_min\": 146,\n      \"y_max\": 1206,\n      \"ha\": 1060,\n      \"leftSideBearing\": 73,\n      \"advanceWidth\": 1145\n    },\n    \",\": {\n      \"x_min\": 23,\n      \"x_max\": 315,\n      \"y_min\": -311,\n      \"y_max\": 221,\n      \"ha\": 532,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 404\n    },\n    \"-\": {\n      \"x_min\": 154,\n      \"x_max\": 643,\n      \"y_min\": 538,\n      \"y_max\": 692,\n      \"ha\": 154,\n      \"leftSideBearing\": 154,\n      \"advanceWidth\": 797\n    },\n    \".\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 202,\n      \"ha\": 202,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 493\n    },\n    \"/\": {\n      \"x_min\": 0,\n      \"x_max\": 774,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 824\n    },\n    \":\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 419\n    },\n    \";\": {\n      \"x_min\": 53,\n      \"x_max\": 345,\n      \"y_min\": -311,\n      \"y_max\": 1082,\n      \"ha\": 1393,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 424\n    },\n    \"<\": {\n      \"x_min\": 76,\n      \"x_max\": 892,\n      \"y_min\": 107,\n      \"y_max\": 1013,\n      \"ha\": 906,\n      \"leftSideBearing\": 76,\n      \"advanceWidth\": 1017\n    },\n    \"=\": {\n      \"x_min\": 147,\n      \"x_max\": 981,\n      \"y_min\": 407,\n      \"y_max\": 987,\n      \"ha\": 580,\n      \"leftSideBearing\": 147,\n      \"advanceWidth\": 1127\n    },\n    \">\": {\n      \"x_min\": 125,\n      \"x_max\": 980,\n      \"y_min\": 87,\n      \"y_max\": 993,\n      \"ha\": 906,\n      \"leftSideBearing\": 125,\n      \"advanceWidth\": 1060\n    },\n    \"?\": {\n      \"x_min\": 65.92660602419838,\n      \"x_max\": 890,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 953\n    },\n    \"@\": {\n      \"x_min\": 84.3592218305664,\n      \"x_max\": 1705.2346925277395,\n      \"y_min\": -453,\n      \"y_max\": 1431,\n      \"ha\": 1884,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1821\n    },\n    \"A\": {\n      \"x_min\": 70,\n      \"x_max\": 1463,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1533\n    },\n    \"B\": {\n      \"x_min\": 81,\n      \"x_max\": 1253,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1322\n    },\n    \"C\": {\n      \"x_min\": 80,\n      \"x_max\": 1174,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1290\n    },\n    \"D\": {\n      \"x_min\": 81,\n      \"x_max\": 1291,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1356\n    },\n    \"E\": {\n      \"x_min\": 81,\n      \"x_max\": 1190,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1306\n    },\n    \"F\": {\n      \"x_min\": 81,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1256\n    },\n    \"G\": {\n      \"x_min\": 80,\n      \"x_max\": 1226,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1346\n    },\n    \"H\": {\n      \"x_min\": 81,\n      \"x_max\": 1497,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1578\n    },\n    \"I\": {\n      \"x_min\": 81,\n      \"x_max\": 604,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 685\n    },\n    \"J\": {\n      \"x_min\": 60,\n      \"x_max\": 1100,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 60,\n      \"advanceWidth\": 1169\n    },\n    \"K\": {\n      \"x_min\": 81,\n      \"x_max\": 1427,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1501\n    },\n    \"L\": {\n      \"x_min\": 81,\n      \"x_max\": 1130,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1210\n    },\n    \"M\": {\n      \"x_min\": 94,\n      \"x_max\": 1888,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 94,\n      \"advanceWidth\": 1982\n    },\n    \"N\": {\n      \"x_min\": 83,\n      \"x_max\": 1509,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 83,\n      \"advanceWidth\": 1592\n    },\n    \"O\": {\n      \"x_min\": 70,\n      \"x_max\": 1281,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1351\n    },\n    \"P\": {\n      \"x_min\": 81,\n      \"x_max\": 1242,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1297\n    },\n    \"Q\": {\n      \"x_min\": 70,\n      \"x_max\": 1348,\n      \"y_min\": -245,\n      \"y_max\": 1477,\n      \"ha\": 1722,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1376\n    },\n    \"R\": {\n      \"x_min\": 81,\n      \"x_max\": 1285,\n      \"y_min\": 0,\n      \"y_max\": 1455,\n      \"ha\": 1455,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1385\n    },\n    \"S\": {\n      \"x_min\": 115,\n      \"x_max\": 1116,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 115,\n      \"advanceWidth\": 1206\n    },\n    \"T\": {\n      \"x_min\": 96,\n      \"x_max\": 1306,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1406\n    },\n    \"U\": {\n      \"x_min\": 70,\n      \"x_max\": 1452,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1522\n    },\n    \"V\": {\n      \"x_min\": 65,\n      \"x_max\": 1443,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1508\n    },\n    \"W\": {\n      \"x_min\": 72,\n      \"x_max\": 2057,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 2129\n    },\n    \"X\": {\n      \"x_min\": 80,\n      \"x_max\": 1449,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1529\n    },\n    \"Y\": {\n      \"x_min\": 65,\n      \"x_max\": 1396,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1461\n    },\n    \"Z\": {\n      \"x_min\": 90,\n      \"x_max\": 1107,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 90,\n      \"advanceWidth\": 1197\n    },\n    \"[\": {\n      \"x_min\": 157,\n      \"x_max\": 541,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 157,\n      \"advanceWidth\": 573\n    },\n    \"\\\\\": {\n      \"x_min\": 36,\n      \"x_max\": 830,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 36,\n      \"advanceWidth\": 841\n    },\n    \"]\": {\n      \"x_min\": 23,\n      \"x_max\": 408,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 552\n    },\n    \"^\": {\n      \"x_min\": 71,\n      \"x_max\": 802,\n      \"y_min\": 729,\n      \"y_max\": 1456,\n      \"ha\": 727,\n      \"leftSideBearing\": 71,\n      \"advanceWidth\": 864\n    },\n    \"_\": {\n      \"x_min\": 119,\n      \"x_max\": 1041,\n      \"y_min\": -154,\n      \"y_max\": 0,\n      \"ha\": 154,\n      \"leftSideBearing\": 119,\n      \"advanceWidth\": 1168\n    },\n    \"`\": {\n      \"x_min\": 40,\n      \"x_max\": 456,\n      \"y_min\": 1288,\n      \"y_max\": 1560,\n      \"ha\": 272,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 496\n    },\n    \"a\": {\n      \"x_min\": 79,\n      \"x_max\": 1053,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 79,\n      \"advanceWidth\": 1132\n    },\n    \"b\": {\n      \"x_min\": -16,\n      \"x_max\": 1071,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": -16,\n      \"advanceWidth\": 1145\n    },\n    \"c\": {\n      \"x_min\": 78,\n      \"x_max\": 988,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1067\n    },\n    \"d\": {\n      \"x_min\": 78,\n      \"x_max\": 1156,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1218\n    },\n    \"e\": {\n      \"x_min\": 74,\n      \"x_max\": 980,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1059\n    },\n    \"f\": {\n      \"x_min\": 64,\n      \"x_max\": 731,\n      \"y_min\": 0,\n      \"y_max\": 1581,\n      \"ha\": 1581,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 725\n    },\n    \"g\": {\n      \"x_min\": 78,\n      \"x_max\": 1133,\n      \"y_min\": -437,\n      \"y_max\": 1102,\n      \"ha\": 1539,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1157\n    },\n    \"h\": {\n      \"x_min\": 49,\n      \"x_max\": 1255,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 1315\n    },\n    \"i\": {\n      \"x_min\": 67,\n      \"x_max\": 590,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 67,\n      \"advanceWidth\": 652\n    },\n    \"j\": {\n      \"x_min\": -56,\n      \"x_max\": 381,\n      \"y_min\": -437,\n      \"y_max\": 1560,\n      \"ha\": 1997,\n      \"leftSideBearing\": -56,\n      \"advanceWidth\": 525\n    },\n    \"k\": {\n      \"x_min\": 64,\n      \"x_max\": 1248,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 1287\n    },\n    \"l\": {\n      \"x_min\": 64,\n      \"x_max\": 587,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 653\n    },\n    \"m\": {\n      \"x_min\": 74,\n      \"x_max\": 1905,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1977\n    },\n    \"n\": {\n      \"x_min\": 74,\n      \"x_max\": 1278,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1343\n    },\n    \"o\": {\n      \"x_min\": 78,\n      \"x_max\": 1046,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1124\n    },\n    \"p\": {\n      \"x_min\": 34,\n      \"x_max\": 1119,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 1197\n    },\n    \"q\": {\n      \"x_min\": 78,\n      \"x_max\": 1135,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1139\n    },\n    \"r\": {\n      \"x_min\": 72,\n      \"x_max\": 808,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 854\n    },\n    \"s\": {\n      \"x_min\": 104,\n      \"x_max\": 933,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 104,\n      \"advanceWidth\": 1022\n    },\n    \"t\": {\n      \"x_min\": 24,\n      \"x_max\": 678,\n      \"y_min\": -17,\n      \"y_max\": 1343,\n      \"ha\": 1360,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 730\n    },\n    \"u\": {\n      \"x_min\": 52,\n      \"x_max\": 1181,\n      \"y_min\": -21,\n      \"y_max\": 1082,\n      \"ha\": 1103,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1245\n    },\n    \"v\": {\n      \"x_min\": 26,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 1206\n    },\n    \"w\": {\n      \"x_min\": 52,\n      \"x_max\": 1777,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1823\n    },\n    \"x\": {\n      \"x_min\": 42,\n      \"x_max\": 1163,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 1203\n    },\n    \"y\": {\n      \"x_min\": 24,\n      \"x_max\": 1172,\n      \"y_min\": -437,\n      \"y_max\": 1082,\n      \"ha\": 1519,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 1192\n    },\n    \"z\": {\n      \"x_min\": 88,\n      \"x_max\": 960,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 88,\n      \"advanceWidth\": 1032\n    },\n    \"{\": {\n      \"x_min\": 63,\n      \"x_max\": 671,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 701\n    },\n    \"|\": {\n      \"x_min\": 150,\n      \"x_max\": 307,\n      \"y_min\": -270,\n      \"y_max\": 1456,\n      \"ha\": 1726,\n      \"leftSideBearing\": 150,\n      \"advanceWidth\": 451\n    },\n    \"}\": {\n      \"x_min\": 27,\n      \"x_max\": 635,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 701\n    },\n    \"~\": {\n      \"x_min\": 121,\n      \"x_max\": 1257,\n      \"y_min\": 401,\n      \"y_max\": 803,\n      \"ha\": 402,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1386\n    }\n  },\n  \"fontFamily\": \"Roboto Slab\",\n  \"resolution\": 2048,\n  \"generatedOn\": \"2020-06-15T19:12:58.120Z\"\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the formatting and layout algorithms that are used\n// to position notes in a voice. The algorithm can align multiple voices both\n// within a stave, and across multiple staves.\n//\n// To do this, the formatter breaks up voices into a grid of rational-valued\n// `ticks`, to which each note is assigned. Then, minimum widths are assigned\n// to each tick based on the widths of the notes and modifiers in that tick. This\n// establishes the smallest amount of space required for each tick.\n//\n// Finally, the formatter distributes the left over space proportionally to\n// all the ticks, setting the `x` values of the notes in each tick.\n//\n// See `tests/formatter_tests.js` for usage examples. The helper functions included\n// here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n\nimport { Vex } from './vex';\nimport { Beam } from './beam';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\nimport { Voice } from './voice';\nimport { StaveConnector } from './staveconnector';\nimport { Note } from './note';\nimport { ModifierContext } from './modifiercontext';\nimport { TickContext } from './tickcontext';\nimport { RenderContext } from './types/common';\nimport { Stave } from './stave';\nimport { StemmableNote } from './stemmablenote';\nimport { Tickable } from './tickable';\nimport { TabStave } from './tabstave';\nimport { TabNote } from './tabnote';\nimport { BoundingBox } from './boundingbox';\nimport { StaveNote } from './stavenote';\nimport { check } from './common';\n\ninterface Distance {\n  maxNegativeShiftPx: number;\n  expectedDistance: number;\n  fromTickable?: Tickable;\n  errorPx?: number;\n  fromTickablePx?: number;\n}\n\nexport interface FormatterOptions {\n  softmaxFactor?: number;\n  globalSoftmax?: boolean;\n  maxIterations: number;\n}\n\nexport interface FormatOptions {\n  align_rests?: boolean;\n  padding?: number;\n  stave?: Stave;\n  context?: RenderContext;\n  auto_beam?: boolean;\n}\n\nexport interface AlignmentContexts<T> {\n  list: number[];\n  map: Record<number, T>;\n  array: T[];\n  resolutionMultiplier: number;\n}\n\ntype addToContextFn<T> = (tickable: Note, context: T, voiceIndex: number) => void;\ntype makeContextFn<T> = (tick?: { tickID: number }) => T;\n\n// Create `Alignment`s for each tick in `voices`. Also calculate the\n// total number of ticks in voices.\nfunction createContexts<T>(\n  voices: Voice[],\n  makeContext: makeContextFn<T>,\n  addToContext: addToContextFn<T>\n): AlignmentContexts<T> {\n  const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n\n  // Initialize tick maps.\n  const tickToContextMap: Record<number, T> = {};\n  const tickList: number[] = [];\n  const contexts: T[] = [];\n\n  // For each voice, extract notes and create a context for every\n  // new tick that hasn't been seen before.\n  voices.forEach((voice, voiceIndex) => {\n    // Use resolution multiplier as denominator so that no additional expansion\n    // of fractional tick values is needed.\n    const ticksUsed = new Fraction(0, resolutionMultiplier);\n\n    voice.getTickables().forEach((tickable) => {\n      const integerTicks = ticksUsed.numerator;\n\n      // If we have no tick context for this tick, create one.\n      if (!tickToContextMap[integerTicks]) {\n        const newContext = makeContext({ tickID: integerTicks });\n        contexts.push(newContext);\n        tickToContextMap[integerTicks] = newContext;\n        // Maintain a list of unique integerTicks.\n        tickList.push(integerTicks);\n      }\n\n      // Add this tickable to the TickContext.\n      addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n      ticksUsed.add(tickable.getTicks());\n    });\n  });\n\n  return {\n    map: tickToContextMap,\n    array: contexts,\n    list: tickList.sort((a, b) => a - b),\n    resolutionMultiplier,\n  };\n}\n\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (Formatter.DEBUG) Vex.L('Vex.Flow.Formatter', args);\n}\n\n// Helper function to locate the next non-rest note(s).\nfunction lookAhead(notes: Note[], restLine: number, i: number, compare: boolean) {\n  // If no valid next note group, nextRestLine is same as current.\n  let nextRestLine = restLine;\n\n  // Get the rest line for next valid non-rest note group.\n  for (i += 1; i < notes.length; i += 1) {\n    const note = notes[i];\n    if (!note.isRest() && !note.shouldIgnoreTicks()) {\n      nextRestLine = note.getLineForRest();\n      break;\n    }\n  }\n\n  // Locate the mid point between two lines.\n  if (compare && restLine !== nextRestLine) {\n    const top = Math.max(restLine, nextRestLine);\n    const bot = Math.min(restLine, nextRestLine);\n    nextRestLine = Vex.MidLine(top, bot);\n  }\n  return nextRestLine;\n}\n\nexport class Formatter {\n  static DEBUG: boolean;\n  protected hasMinTotalWidth: boolean;\n  protected minTotalWidth: number;\n  protected contextGaps: {\n    total: number;\n    gaps: { x1: number; x2: number }[];\n  };\n  protected justifyWidth: number;\n  protected totalCost: number;\n  protected totalShift: number;\n  protected tickContexts?: AlignmentContexts<TickContext>;\n  protected formatterOptions: FormatterOptions;\n  protected modifierContexts?: AlignmentContexts<ModifierContext>;\n  protected voices: Voice[];\n  protected lossHistory: number[];\n  protected durationStats: Record<string, { mean: number; count: number }>;\n\n  // Helper function to layout \"notes\" one after the other without\n  // regard for proportions. Useful for tests and debugging.\n  static SimpleFormat(notes: Note[], x = 0, { paddingBetween = 10 } = {}): void {\n    notes.reduce((accumulator, note) => {\n      note.addToModifierContext(new ModifierContext());\n      const tick = new TickContext().addTickable(note).preFormat();\n      const metrics = tick.getMetrics();\n      tick.setX(accumulator + metrics.totalLeftPx);\n\n      return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n    }, x);\n  }\n\n  // Helper function to plot formatter debug info.\n  static plotDebugging(\n    ctx: RenderContext,\n    formatter: Formatter,\n    xPos: number,\n    y1: number,\n    y2: number,\n    options?: { stavePadding: number }\n  ): void {\n    options = {\n      stavePadding: Flow.DEFAULT_FONT_STACK[0].lookupMetric('stave.padding'),\n      ...options,\n    };\n\n    const x = xPos + options.stavePadding;\n    const contextGaps = formatter.contextGaps;\n\n    function stroke(x1: number, x2: number, color: string) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(1);\n      ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n    }\n\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n\n    contextGaps.gaps.forEach((gap) => {\n      stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n      ctx.setFillStyle('green');\n      ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n    });\n\n    ctx.setFillStyle('red');\n    ctx.fillText(\n      `Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(\n        2\n      )} Gap: ${contextGaps.total.toFixed(2)}`,\n      x - 20,\n      y2 + 27\n    );\n    ctx.restore();\n  }\n\n  // Helper function to format and draw a single voice. Returns a bounding\n  // box for the notation.\n  //\n  // Parameters:\n  // * `ctx` - The rendering context\n  // * `stave` - The stave to which to draw (`Stave` or `TabStave`)\n  // * `notes` - Array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n  // * `params` - One of below:\n  //    * Setting `autobeam` only `(context, stave, notes, true)` or\n  //      `(ctx, stave, notes, {autobeam: true})`\n  //    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n  //    * Setting both a struct is needed `(context, stave, notes, {\n  //      autobeam: true, align_rests: true})`\n  //\n  // `autobeam` automatically generates beams for the notes.\n  // `align_rests` aligns rests with nearby notes.\n  static FormatAndDraw(\n    ctx: RenderContext,\n    stave: Stave,\n    notes: StemmableNote[],\n    params?: FormatOptions | boolean\n  ): BoundingBox | undefined {\n    let options = {\n      auto_beam: false,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      options = { ...options, ...params };\n    } else if (typeof params === 'boolean') {\n      options.auto_beam = params;\n    }\n\n    // Start by creating a voice and adding all the notes to it.\n    const voice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Then create beams, if requested.\n    const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n\n    // Instantiate a `Formatter` and format the notes.\n    new Formatter()\n      .joinVoices([voice]) // , { align_rests: options.align_rests })\n      .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n\n    // Render the voice and beams to the stave.\n    voice.setStave(stave).draw(ctx, stave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Return the bounding box of the voice.\n    return voice.getBoundingBox();\n  }\n\n  // Helper function to format and draw aligned tab and stave notes in two\n  // separate staves.\n  //\n  // Parameters:\n  // * `ctx` - The rendering context\n  // * `tabstave` - A `TabStave` instance on which to render `TabNote`s.\n  // * `stave` - A `Stave` instance on which to render `Note`s.\n  // * `notes` - Array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n  // * `tabnotes` - Array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n  // * `autobeam` - Automatically generate beams.\n  // * `params` - A configuration object:\n  //    * `autobeam` automatically generates beams for the notes.\n  //    * `align_rests` aligns rests with nearby notes.\n  static FormatAndDrawTab(\n    ctx: RenderContext,\n    tabstave: TabStave,\n    stave: Stave,\n    tabnotes: TabNote[],\n    notes: Note[],\n    autobeam: boolean,\n    params: FormatOptions\n  ): void {\n    let opts = {\n      auto_beam: autobeam,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      opts = { ...opts, ...params };\n    } else if (typeof params === 'boolean') {\n      opts.auto_beam = params;\n    }\n\n    // Create a `4/4` voice for `notes`.\n    const notevoice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Create a `4/4` voice for `tabnotes`.\n    const tabvoice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n\n    // Then create beams, if requested.\n    const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n\n    // Instantiate a `Formatter` and align tab and stave notes.\n    new Formatter()\n      .joinVoices([notevoice]) // , { align_rests: opts.align_rests })\n      .joinVoices([tabvoice])\n      .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n\n    // Render voices and beams to staves.\n    notevoice.draw(ctx, stave);\n    tabvoice.draw(ctx, tabstave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Draw a connector between tab and note staves.\n    new StaveConnector(stave, tabstave).setContext(ctx).draw();\n  }\n\n  // Auto position rests based on previous/next note positions.\n  //\n  // Params:\n  // * `notes`: An array of notes.\n  // * `alignAllNotes`: If set to false, only aligns non-beamed notes.\n  // * `alignTuplets`: If set to false, ignores tuplets.\n  static AlignRestsToNotes(notes: Note[], alignAllNotes: boolean, alignTuplets?: boolean): void {\n    notes.forEach((note, index) => {\n      if (note instanceof StaveNote && note.isRest()) {\n        if (note.getTuplet() && !alignTuplets) return;\n\n        // If activated rests not on default can be rendered as specified.\n        const position = note.getGlyph().position.toUpperCase();\n        if (position !== 'R/4' && position !== 'B/4') return;\n\n        if (alignAllNotes || note.getBeam()) {\n          // Align rests with previous/next notes.\n          const props = note.getKeyProps()[0];\n          if (index === 0) {\n            props.line = lookAhead(notes, props.line, index, false);\n            note.setKeyLine(0, props.line);\n          } else if (index > 0 && index < notes.length) {\n            // If previous note is a rest, use its line number.\n            let restLine;\n            const prevNote = notes[index - 1];\n            if (prevNote && prevNote.isRest()) {\n              restLine = prevNote.keyProps[0].line;\n              props.line = restLine;\n            } else {\n              restLine = prevNote.getLineForRest();\n              // Get the rest line for next valid non-rest note group.\n              props.line = lookAhead(notes, restLine, index, true);\n            }\n            note.setKeyLine(0, props.line);\n          }\n        }\n      }\n    });\n  }\n\n  static estimateJustifiedMinWidth(voices: Voice[], formatterOptions?: FormatterOptions): number {\n    const formatter = new Formatter(formatterOptions);\n    voices.forEach((voice) => {\n      formatter.joinVoices([voice]);\n    });\n    return formatter.preCalculateMinTotalWidth(voices);\n  }\n\n  constructor(formatterOptions?: FormatterOptions) {\n    this.formatterOptions = {\n      globalSoftmax: false,\n      maxIterations: 5,\n      ...formatterOptions,\n    };\n    this.justifyWidth = 0;\n    this.totalCost = 0;\n    this.totalShift = 0;\n    this.durationStats = {};\n\n    // Minimum width required to render all the notes in the voices.\n    this.minTotalWidth = 0;\n\n    // This is set to `true` after `minTotalWidth` is calculated.\n    this.hasMinTotalWidth = false;\n\n    // Arrays of tick and modifier contexts.\n    this.tickContexts = undefined;\n    this.modifierContexts = undefined;\n\n    // Gaps between contexts, for free movement of notes post\n    // formatting.\n    this.contextGaps = {\n      total: 0,\n      gaps: [],\n    };\n\n    this.voices = [];\n    this.lossHistory = [];\n  }\n\n  // Find all the rests in each of the `voices` and align them\n  // to neighboring notes. If `alignAllNotes` is `false`, then only\n  // align non-beamed notes.\n  alignRests(voices: Voice[], alignAllNotes: boolean): void {\n    if (!voices || !voices.length) {\n      throw new Vex.RERR('BadArgument', 'No voices to format rests');\n    }\n\n    voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n  }\n\n  // Calculate the minimum width required to align and format `voices`.\n  preCalculateMinTotalWidth(voices: Voice[]): number {\n    const unalignedPadding = Flow.DEFAULT_FONT_STACK[0].lookupMetric('stave.unalignedNotePadding');\n    let unalignedCtxCount = 0;\n    // Cache results.\n    if (this.hasMinTotalWidth) return this.minTotalWidth;\n\n    // Create tick contexts if not already created.\n    if (!this.tickContexts) {\n      if (!voices) {\n        throw new Vex.RERR('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n      }\n\n      this.createTickContexts(voices);\n    }\n\n    // eslint-disable-next-line\n    const { list: contextList, map: contextMap } = this.tickContexts!;\n\n    // const maxTicks = contextList.map(tick => tick.maxTicks.value()).reduce((a, b) => a + b, 0);\n    // Go through each tick context and calculate total width.\n    this.minTotalWidth = contextList\n      .map((tick) => {\n        const context = contextMap[tick];\n        // context.setPadding(5);\n        context.preFormat();\n        if (context.getTickables().length < voices.length) {\n          unalignedCtxCount += 1;\n        }\n        return context.getWidth();\n      })\n      .reduce((a: number, b: number) => a + b, 0);\n\n    this.hasMinTotalWidth = true;\n\n    return this.minTotalWidth + unalignedPadding * unalignedCtxCount;\n  }\n\n  // Get minimum width required to render all voices. Either `format` or\n  // `preCalculateMinTotalWidth` must be called before this method.\n  getMinTotalWidth(): number {\n    if (!this.hasMinTotalWidth) {\n      throw new Vex.RERR(\n        'NoMinTotalWidth',\n        \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\"\n      );\n    }\n\n    return this.minTotalWidth;\n  }\n\n  // calculates the resolution multiplier for `voices`.\n  static getResolutionMultiplier(voices: Voice[]): number {\n    if (!voices || !voices.length) {\n      throw new Vex.RERR('BadArgument', 'No voices to format');\n    }\n    const totalTicks = voices[0].getTotalTicks();\n    const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n      if (!voice.getTotalTicks().equals(totalTicks)) {\n        throw new Vex.RERR('TickMismatch', 'Voices should have same total note duration in ticks.');\n      }\n\n      if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n        throw new Vex.RERR('IncompleteVoice', 'Voice does not have enough notes.');\n      }\n\n      return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n    }, 1);\n    return resolutionMultiplier;\n  }\n\n  // Create `ModifierContext`s for each tick in `voices`.\n  createModifierContexts(voices: Voice[]): AlignmentContexts<ModifierContext> {\n    const fn: addToContextFn<ModifierContext> = (tickable: Note, context: ModifierContext, voiceIndex: number) =>\n      tickable.addToModifierContext(context);\n    const contexts = createContexts(voices, () => new ModifierContext(), fn);\n    this.modifierContexts = contexts;\n    return contexts;\n  }\n\n  // Create `TickContext`s for each tick in `voices`. Also calculate the\n  // total number of ticks in voices.\n  createTickContexts(voices: Voice[]): AlignmentContexts<TickContext> {\n    const fn: addToContextFn<TickContext> = (tickable: Note, context: TickContext, voiceIndex: number) =>\n      context.addTickable(tickable, voiceIndex);\n    const contexts = createContexts(voices, (tick?: { tickID: number }) => new TickContext(tick), fn);\n    this.tickContexts = contexts;\n    const contextArray = this.tickContexts.array;\n\n    contextArray.forEach((context) => {\n      context.tContexts = contextArray;\n    });\n    return contexts;\n  }\n\n  // This is the core formatter logic. Format voices and justify them\n  // to `justifyWidth` pixels. `renderingContext` is required to justify elements\n  // that can't retreive widths without a canvas. This method sets the `x` positions\n  // of all the tickables/notes in the formatter.\n  preFormat(justifyWidth = 0, renderingContext?: RenderContext, voicesParam?: Voice[], stave?: Stave): number {\n    // Initialize context maps.\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      throw new Vex.RERR('NoTickContexts', 'preFormat requires TickContexs');\n    }\n\n    const { list: contextList, map: contextMap } = contexts;\n\n    // Reset loss history for evaluator.\n    this.lossHistory = [];\n\n    // If voices and a stave were provided, set the Stave for each voice\n    // and preFormat to apply Y values to the notes;\n    if (voicesParam && stave) {\n      voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n    }\n\n    // Now distribute the ticks to each tick context, and assign them their\n    // own X positions.\n    let x = 0;\n    let shift = 0;\n    this.minTotalWidth = 0;\n    let totalTicks = 0;\n\n    // Pass 1: Give each note maximum width requested by context.\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n      if (renderingContext) context.setContext(renderingContext);\n\n      // Make sure that all tickables in this context have calculated their\n      // space requirements.\n      context.preFormat();\n\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n\n      const maxTicks = context.getMaxTicks().value();\n      totalTicks += maxTicks;\n\n      const metrics = context.getMetrics();\n      x = x + shift + metrics.totalLeftPx;\n      context.setX(x);\n\n      // Calculate shift for the next tick.\n      shift = width - metrics.totalLeftPx;\n    });\n\n    // Use softmax based on all notes across all staves. (options.globalSoftmax)\n    const formatterOptions = this.formatterOptions;\n    const softmaxFactor = formatterOptions.softmaxFactor || 100;\n    const exp = (tick: number) => softmaxFactor ** (contextMap[tick].getMaxTicks().value() / totalTicks);\n    const expTicksUsed = contextList.map(exp).reduce((a: number, b: number) => a + b);\n\n    this.minTotalWidth = x + shift;\n    this.hasMinTotalWidth = true;\n\n    // No justification needed. End formatting.\n    if (justifyWidth <= 0) return this.evaluate();\n\n    // Start justification. Subtract the right extra pixels of the final context because the formatter\n    // justifies based on the context's X position, which is the left-most part of the note head.\n    const firstContext = contextMap[contextList[0]];\n    const lastContext = contextMap[contextList[contextList.length - 1]];\n\n    // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n    // the softmax of the ticks.\n    function calculateIdealDistances(adjustedJustifyWidth: number): Distance[] {\n      const distances: Distance[] = contextList.map((tick: number, i: number) => {\n        const context: TickContext = contextMap[tick];\n        const voices = context.getTickablesByVoice();\n        let backTickable: Note | undefined;\n        if (i > 0) {\n          const prevContext: TickContext = contextMap[contextList[i - 1]];\n          // Go through each tickable and search backwards for another tickable\n          // in the same voice. If found, use that duration (ticks) to calculate\n          // the expected distance.\n          for (let j = i - 1; j >= 0; j--) {\n            const backTick: TickContext = contextMap[contextList[j]];\n            const backVoices = backTick.getTickablesByVoice();\n\n            // Look for matching voices between tick contexts.\n            const matchingVoices: string[] = [];\n            Object.keys(voices).forEach((v) => {\n              if (backVoices[v]) {\n                matchingVoices.push(v);\n              }\n            });\n\n            if (matchingVoices.length > 0) {\n              // Found matching voices, get largest duration\n              let maxTicks = 0;\n              let maxNegativeShiftPx = Infinity;\n              let expectedDistance = 0;\n\n              matchingVoices.forEach((v) => {\n                const ticks = backVoices[v].getTicks().value();\n                if (ticks > maxTicks) {\n                  backTickable = backVoices[v];\n                  maxTicks = ticks;\n                }\n\n                // Calculate the limits of the shift based on modifiers, etc.\n                const thisTickable = voices[v];\n                const insideLeftEdge =\n                  thisTickable.getX() -\n                  (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n\n                const backMetrics = backVoices[v].getMetrics();\n                const insideRightEdge =\n                  backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n\n                // Don't allow shifting if notes in the same voice can collide\n                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n              });\n\n              // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n              // so that two different tick contexts don't align across staves.\n              maxNegativeShiftPx = Math.min(\n                maxNegativeShiftPx,\n                context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05)\n              );\n\n              // Calculate the expected distance of the current context from the last matching tickable. The\n              // distance is scaled down by the softmax for the voice.\n              if (formatterOptions.globalSoftmax) {\n                const t = totalTicks;\n                expectedDistance = (softmaxFactor ** (maxTicks / t) / expTicksUsed) * adjustedJustifyWidth;\n              } else if (backTickable) {\n                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n              }\n\n              return {\n                expectedDistance,\n                maxNegativeShiftPx,\n                fromTickable: backTickable,\n              };\n            }\n          }\n        }\n\n        return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n      });\n      return distances;\n    }\n\n    function shiftToIdealDistances(idealDistances: Distance[]): number {\n      // Distribute ticks to the contexts based on the calculated distance error.\n      const centerX = adjustedJustifyWidth / 2;\n      let spaceAccum = 0;\n\n      contextList.forEach((tick, index) => {\n        const context = contextMap[tick];\n        if (index > 0) {\n          const contextX = context.getX();\n          const ideal = idealDistances[index];\n          const errorPx = check<Tickable>(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n\n          let negativeShiftPx = 0;\n          if (errorPx > 0) {\n            spaceAccum += errorPx;\n          } else if (errorPx < 0) {\n            negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n            spaceAccum += -negativeShiftPx;\n          }\n\n          context.setX(contextX + spaceAccum);\n        }\n\n        // Move center aligned tickables to middle\n        context.getCenterAlignedTickables().forEach((tickable: Note) => {\n          tickable.setCenterXShift(centerX - context.getX());\n        });\n      });\n\n      return lastContext.getX() - firstContext.getX();\n    }\n\n    const adjustedJustifyWidth =\n      justifyWidth -\n      lastContext.getMetrics().notePx -\n      lastContext.getMetrics().totalRightPx -\n      firstContext.getMetrics().totalLeftPx;\n    let targetWidth = adjustedJustifyWidth;\n    let actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    // The min padding we allow to the left of the right bar, before moving things left\n    const paddingMin = musicFont.lookupMetric('stave.endPaddingMin');\n    // the max padding we allow to the left of the right bar, before moving things back right.\n    const paddingMax = musicFont.lookupMetric('stave.endPaddingMax');\n    const maxX = adjustedJustifyWidth + lastContext.getMetrics().notePx - paddingMin;\n\n    let iterations = this.formatterOptions.maxIterations;\n    while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n      // If we couldn't fit all the notes into the jusification width, recalculate softmax over a smaller width\n      if (actualWidth > maxX) {\n        targetWidth -= actualWidth - maxX;\n      } else {\n        // If we overshoot and add too much right padding, split the difference and move right again\n        targetWidth += (maxX - actualWidth) / 2;\n      }\n      actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n      iterations--;\n    }\n\n    // Just one context. Done formatting.\n    if (contextList.length === 1) return 0;\n\n    this.justifyWidth = justifyWidth;\n    return this.evaluate();\n  }\n\n  // Calculate the total cost of this formatting decision.\n  evaluate(): number {\n    if (!this.tickContexts) return 0;\n    const contexts = this.tickContexts;\n    const justifyWidth = this.justifyWidth;\n    // Calculate available slack per tick context. This works out how much freedom\n    // to move a context has in either direction, without affecting other notes.\n    this.contextGaps = { total: 0, gaps: [] };\n    contexts.list.forEach((tick, index) => {\n      if (index === 0) return;\n      const prevTick = contexts.list[index - 1];\n      const prevContext = contexts.map[prevTick];\n      const context = contexts.map[tick];\n      const prevMetrics = prevContext.getMetrics();\n      const currMetrics = context.getMetrics();\n\n      // Calculate X position of right edge of previous note\n      const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n      // Calculate X position of left edge of current note\n      const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n      const gap = insideLeftEdge - insideRightEdge;\n      this.contextGaps.total += gap;\n      this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n\n      // Tell the tick contexts how much they can reposition themselves.\n      context.getFormatterMetrics().freedom.left = gap;\n      prevContext.getFormatterMetrics().freedom.right = gap;\n    });\n\n    // Calculate mean distance in each voice for each duration type, then calculate\n    // how far each note is from the mean.\n    this.durationStats = {};\n    const durationStats = this.durationStats;\n\n    function updateStats(duration: string, space: number) {\n      const stats = durationStats[duration];\n      if (stats === undefined) {\n        durationStats[duration] = { mean: space, count: 1 };\n      } else {\n        stats.count += 1;\n        stats.mean = (stats.mean + space) / 2;\n      }\n    }\n\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note, i, notes) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getMetrics();\n        const formatterMetrics = note.getFormatterMetrics();\n        const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n        let space = 0;\n\n        if (i < notes.length - 1) {\n          const rightNote = notes[i + 1];\n          const rightMetrics = rightNote.getMetrics();\n          const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n\n          space = rightNoteEdge - leftNoteEdge;\n          formatterMetrics.space.used = rightNote.getX() - note.getX();\n          rightNote.getFormatterMetrics().freedom.left = space;\n        } else {\n          space = justifyWidth - leftNoteEdge;\n          formatterMetrics.space.used = justifyWidth - note.getX();\n        }\n\n        formatterMetrics.freedom.right = space;\n        updateStats(duration, formatterMetrics.space.used);\n      });\n    });\n\n    // Calculate how much each note deviates from the mean. Loss function is square\n    // root of the sum of squared deviations.\n    let totalDeviation = 0;\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getFormatterMetrics();\n\n        metrics.space.mean = durationStats[duration].mean;\n        metrics.duration = duration;\n        metrics.iterations += 1;\n        metrics.space.deviation = metrics.space.used - metrics.space.mean;\n\n        totalDeviation += metrics.space.deviation ** 2;\n      });\n    });\n\n    this.totalCost = Math.sqrt(totalDeviation);\n    this.lossHistory.push(this.totalCost);\n    return this.totalCost;\n  }\n\n  // Run a single iteration of rejustification. At a high level, this method calculates\n  // the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n  // attempt to reduce the cost. You can call this method multiple times until it finds\n  // and oscillates around a global minimum.\n  //\n  // Alpha is the \"learning rate\" for the formatter. It determines how much of a shift\n  // the formatter should make based on its cost function.\n  tune(options?: { alpha: number }): number {\n    if (!this.tickContexts) return 0;\n    const contexts = this.tickContexts;\n    options = {\n      alpha: 0.5,\n      ...options,\n    };\n\n    const sum = (arr: number[]) => arr.reduce((a, b) => a + b);\n\n    // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n    // on adjacent tickcontexts.\n    function move(current: TickContext, shift: number, prev?: TickContext, next?: TickContext) {\n      current.setX(current.getX() + shift);\n      current.getFormatterMetrics().freedom.left += shift;\n      current.getFormatterMetrics().freedom.right -= shift;\n\n      if (prev) prev.getFormatterMetrics().freedom.right += shift;\n      if (next) next.getFormatterMetrics().freedom.left -= shift;\n    }\n\n    let shift = 0;\n    this.totalShift = 0;\n    contexts.list.forEach((tick, index, list) => {\n      const context = contexts.map[tick];\n      const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n      const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n\n      move(context, shift, prevContext, nextContext);\n\n      const cost = -sum(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n\n      if (cost > 0) {\n        shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n      } else if (cost < 0) {\n        if (nextContext) {\n          shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n        } else {\n          shift = 0;\n        }\n      }\n\n      shift *= check<{ alpha: number }>(options).alpha;\n      this.totalShift += shift;\n    });\n\n    return this.evaluate();\n  }\n\n  // This is the top-level call for all formatting logic completed\n  // after `x` *and* `y` values have been computed for the notes\n  // in the voices.\n  postFormat(): this {\n    const postFormatContexts = (contexts: AlignmentContexts<ModifierContext> | AlignmentContexts<TickContext>) =>\n      contexts.list.forEach((tick) => contexts.map[tick].postFormat());\n\n    if (this.modifierContexts) postFormatContexts(this.modifierContexts);\n    if (this.tickContexts) postFormatContexts(this.tickContexts);\n\n    return this;\n  }\n\n  // Take all `voices` and create `ModifierContext`s out of them. This tells\n  // the formatters that the voices belong on a single stave.\n  joinVoices(voices: Voice[]): this {\n    this.createModifierContexts(voices);\n    this.hasMinTotalWidth = false;\n    return this;\n  }\n\n  // Align rests in voices, justify the contexts, and position the notes\n  // so voices are aligned and ready to render onto the stave. This method\n  // mutates the `x` positions of all tickables in `voices`.\n  //\n  // Voices are full justified to fit in `justifyWidth` pixels.\n  //\n  // Set `options.context` to the rendering context. Set `options.align_rests`\n  // to true to enable rest alignment.\n  format(voices: Voice[], justifyWidth?: number, options?: FormatOptions): this {\n    const opts = {\n      align_rests: false,\n      ...options,\n    };\n\n    this.voices = voices;\n    const softmaxFactor = this.formatterOptions.softmaxFactor;\n    if (softmaxFactor) {\n      this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n    }\n\n    this.alignRests(voices, opts.align_rests);\n    this.createTickContexts(voices);\n    this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n\n    // Only postFormat if a stave was supplied for y value formatting\n    if (opts.stave) this.postFormat();\n\n    return this;\n  }\n\n  // This method is just like `format` except that the `justifyWidth` is inferred\n  // from the `stave`.\n  formatToStave(voices: Voice[], stave: Stave, optionsParam?: FormatOptions): this {\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    const padding = musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n    const options: FormatOptions = { padding, /*stave,*/ context: stave.getContext(), ...optionsParam };\n\n    // eslint-disable-next-line\n    const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - options.padding!;\n    L('Formatting voices to width: ', justifyWidth);\n    return this.format(voices, justifyWidth, options);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Fraction class that represents a rational number\n//\n// @author zz85\n// @author incompleteopus (modifications)\n\nimport { Vex } from './vex';\n\n/** Fraction represents a rational number. */\nexport class Fraction {\n  numerator: number = 1;\n\n  denominator: number = 1;\n\n  // Cached objects for comparisons\n  private static __staticFractionA = new Fraction();\n\n  private static __staticFractionB = new Fraction();\n\n  private static __staticFractionTmp = new Fraction();\n\n  /**\n   * GCD: Greatest common divisor using Euclidean algorithm.\n   */\n  static GCD(a: number, b: number): number {\n    if (typeof a !== 'number' || typeof b !== 'number') {\n      throw new Vex.RERR('BadArgument', `Invalid numbers: ${a}, ${b}`);\n    }\n\n    let t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  }\n\n  /**\n   * LCM: Lowest common multiple.\n   */\n  static LCM(a: number, b: number): number {\n    return (a * b) / Fraction.GCD(a, b);\n  }\n\n  /**\n   * LCMM: Lowest common multiple for more than two numbers.\n   */\n  static LCMM(\n    // eslint-disable-next-line\n    args: any): number {\n    if (args.length === 0) {\n      return 0;\n    }\n    if (args.length === 1) {\n      return args[0];\n    }\n    if (args.length === 2) {\n      return Fraction.LCM(args[0], args[1]);\n    }\n    const arg0 = args[0];\n    args.shift();\n    return Fraction.LCM(arg0, Fraction.LCMM(args));\n  }\n\n  /** Constructs providing numerator and denominator. */\n  constructor(numerator?: number, denominator?: number) {\n    this.set(numerator, denominator);\n  }\n\n  /** Sets numerator and denominator. */\n  set(numerator: number = 1, denominator: number = 1): this {\n    this.numerator = numerator;\n    this.denominator = denominator;\n    return this;\n  }\n\n  /** Returns the value of the fraction. */\n  value(): number {\n    return this.numerator / this.denominator;\n  }\n\n  /** Simplifies numerator and denominator using GCD. */\n  simplify(): this {\n    let u = this.numerator;\n    let d = this.denominator;\n\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n    return this.set(u, d);\n  }\n\n  /** Adds value of another fraction. */\n  add(param1: Fraction | number = 0, param2: number = 1): this {\n    let otherNumerator: number;\n    let otherDenominator: number;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      otherNumerator = param1;\n      otherDenominator = param2;\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Substracts value of another fraction. */\n  subtract(param1: Fraction | number = 0, param2: number = 1): this {\n    let otherNumerator: number;\n    let otherDenominator: number;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      otherNumerator = param1;\n      otherDenominator = param2;\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Multiplies by value of another fraction. */\n  multiply(param1: Fraction | number = 1, param2: number = 1): this {\n    let otherNumerator: number;\n    let otherDenominator: number;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      otherNumerator = param1;\n      otherDenominator = param2;\n    }\n\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n\n  /** Divides by value of another Fraction. */\n  divide(param1: Fraction | number = 1, param2: number = 1): this {\n    let otherNumerator: number;\n    let otherDenominator: number;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      otherNumerator = param1;\n      otherDenominator = param2;\n    }\n\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  }\n\n  /** Simplifies both sides and checks if they are equal. */\n  equals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionA.copy(compare).simplify();\n    const b = Fraction.__staticFractionB.copy(this).simplify();\n\n    return a.numerator === b.numerator && a.denominator === b.denominator;\n  }\n\n  /** Greater than operator. */\n  greaterThan(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator > 0;\n  }\n\n  /** Greater than or equals operator. */\n  greaterThanEquals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator >= 0;\n  }\n\n  /** Less than operator. */\n  lessThan(compare: Fraction | number): boolean {\n    return !this.greaterThanEquals(compare);\n  }\n\n  /** Less than or equals operator. */\n  lessThanEquals(compare: Fraction | number): boolean {\n    return !this.greaterThan(compare);\n  }\n\n  /** Returns a new copy with current values. */\n  clone(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  /** Copies value of another fraction. */\n  copy(copy: Fraction | number): this {\n    if (typeof copy === 'number') {\n      return this.set(copy || 0, 1);\n    }\n    return this.set(copy.numerator, copy.denominator);\n  }\n\n  /** Returns the integer component (eg. 5/2 => 2). */\n  quotient(): number {\n    return Math.floor(this.numerator / this.denominator);\n  }\n\n  /** Returns the remainder component (eg. 5/2 => 1). */\n  remainder(): number {\n    return this.numerator % this.denominator;\n  }\n\n  /** Calculates absolute value. */\n  makeAbs(): this {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  }\n\n  /** Returns a raw string representation (eg. \"5/2\"). */\n  toString(): string {\n    return `${this.numerator}/${this.denominator}`;\n  }\n\n  /** Returns a simplified string respresentation. */\n  toSimplifiedString(): string {\n    return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n  }\n\n  /** Returns string representation in mixed form. */\n  toMixedString(): string {\n    let s = '';\n    const q = this.quotient();\n    const f = Fraction.__staticFractionTmp.copy(this);\n\n    if (q < 0) {\n      f.makeAbs();\n    }\n\n    if (q !== 0) {\n      s += q;\n\n      if (f.numerator !== 0) {\n        s += ` ${f.toSimplifiedString()}`;\n      }\n    } else if (f.numerator === 0) {\n      s = '0';\n    } else {\n      s = f.toSimplifiedString();\n    }\n\n    return s;\n  }\n\n  /** Parses a fraction string. */\n  parse(str: string): this {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = i[1] ? parseInt(i[1], 10) : 1;\n\n    return this.set(n, d);\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { FontInfo } from './types/common';\nimport { StaveNote } from './stavenote';\nimport { Builder } from './easyscore';\nimport { ModifierContextState } from './modifiercontext';\n\n/**\n * @constructor\n */\nexport class FretHandFinger extends Modifier {\n  protected finger: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'frethandfinger';\n  }\n\n  // Arrange fingerings inside a ModifierContext.\n  static format(nums: FretHandFinger[], state: ModifierContextState): boolean {\n    const { left_shift, right_shift } = state;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shiftLeft = 0;\n    let shiftRight = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote() as StaveNote;\n      const pos = num.getPosition();\n      const props = note.getKeyProps()[num.getIndex()];\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n          }\n          if (right_shift === 0) {\n            shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        note,\n        num,\n        pos,\n        line: props.line,\n        shiftL: shiftLeft,\n        shiftR: shiftRight,\n      });\n    }\n\n    // Sort fingernumbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let numShiftL = 0;\n    let numShiftR = 0;\n    let xWidthL = 0;\n    let xWidthR = 0;\n    let lastLine = null;\n    let lastNote = null;\n\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n\n      // Reset the position of the string number every line.\n      if (line !== lastLine || note !== lastNote) {\n        numShiftL = left_shift + shiftL;\n        numShiftR = right_shift + shiftR;\n      }\n\n      const numWidth = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift + numShiftL);\n        num_shift = left_shift + numWidth; // spacing\n        xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(numShiftR);\n        num_shift = shiftRight + numWidth; // spacing\n        xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n      }\n      lastLine = line;\n      lastNote = note;\n    }\n\n    state.left_shift += xWidthL;\n    state.right_shift += xWidthR;\n\n    return true;\n  }\n\n  static easyScoreHook({ fingerings }: { fingerings?: string } = {}, note: StaveNote, builder: Builder): void {\n    if (!fingerings) return;\n\n    fingerings\n      .split(',')\n      .map((fingeringString: string) => {\n        const split = fingeringString.trim().split('.');\n        const params: { number: string; position?: string } = { number: split[0] };\n        if (split[1]) params.position = split[1];\n        return builder.getFactory().Fingering(params);\n      })\n      .map((fingering: Modifier, index: number) => note.addModifier(fingering, index));\n  }\n\n  constructor(finger: string) {\n    super();\n    this.setAttribute('type', 'FretHandFinger');\n\n    this.finger = finger;\n    this.width = 7;\n    this.position = Modifier.Position.LEFT; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  getCategory(): string {\n    return FretHandFinger.CATEGORY;\n  }\n\n  setFretHandFinger(finger: string): this {\n    this.finger = finger;\n    return this;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  draw(): void {\n    this.checkContext();\n\n    if (!this.note || this.index == null) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw string number without a note and index.\");\n    }\n\n    this.setRendered();\n    const ctx = this.checkContext();\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset + 5;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n        dot_x -= 4;\n        dot_y -= 12;\n        break;\n      case Modifier.Position.BELOW:\n        dot_x -= 2;\n        dot_y += 10;\n        break;\n      case Modifier.Position.LEFT:\n        dot_x -= this.width;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += 1;\n        break;\n      default:\n        throw new Vex.RERR('InvalidPostion', `The position ${this.position} does not exist`);\n    }\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText('' + this.finger, dot_x, dot_y);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n\nimport { Vex } from './vex';\nimport { StemmableNote } from './stemmablenote';\nimport { Stave } from './stave';\nimport { NoteStruct } from './note';\n\nexport class GhostNote extends StemmableNote {\n  /** @constructor */\n  constructor(parameter: string | NoteStruct) {\n    // Sanity check\n    if (!parameter) {\n      throw new Vex.RERR('BadArguments', 'Ghost note must have valid initialization data to identify duration.');\n    }\n\n    let note_struct;\n\n    // Preserve backwards-compatibility\n    if (typeof parameter === 'string') {\n      note_struct = { duration: parameter };\n    } else if (typeof parameter === 'object') {\n      note_struct = parameter;\n    } else {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        'Ghost note must have valid initialization data to identify ' + 'duration.'\n      );\n    }\n\n    super(note_struct);\n    this.setAttribute('type', 'GhostNote');\n\n    // Note properties\n    this.setWidth(0);\n  }\n\n  isRest(): boolean {\n    return true;\n  }\n\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    return this;\n  }\n\n  addToModifierContext(): this {\n    /* intentionally overridden */ return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    // Draw the modifiers\n    this.setRendered();\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { BoundingBox } from './boundingbox';\nimport { Font, FontGlyph } from './font';\nimport { RenderContext, TypeProps } from './types/common';\nimport { Stave } from './stave';\nimport { Stem } from './stem';\n\nexport interface DurationCode {\n  common: TypeProps;\n  type: Record<string, TypeProps>;\n}\n\nexport interface GlyphProps {\n  code_head: string;\n  dot_shiftY: number;\n  position: string;\n  rest: boolean;\n  line_below: number;\n  line_above: number;\n  stem_up_extension: number;\n  stem_down_extension: number;\n  stem: Stem;\n  code: string;\n  code_flag_upstem: string;\n  code_flag_downstem: string;\n  flag: boolean;\n  width: number;\n  text: string;\n  tabnote_stem_down_extension: number;\n  tabnote_stem_up_extension: number;\n  beam_count: number;\n  duration_codes: Record<string, DurationCode>;\n  validTypes: Record<string, string>;\n  shift_y: number;\n\n  getWidth(a?: number): number;\n\n  getMetrics(): GlyphMetrics;\n}\nexport interface GlyphOptions {\n  fontStack: Font[];\n  category?: string;\n}\nexport interface GlyphMetrics {\n  width?: number;\n  height?: number;\n  x_min: number;\n  x_max: number;\n  x_shift: number;\n  y_shift: number;\n  scale: number;\n  ha: number;\n  outline: string[];\n  font: Font;\n}\n\nfunction processOutline(\n  outline: string[],\n  originX: number,\n  originY: number,\n  scaleX: number,\n  scaleY: number,\n  // eslint-disable-next-line\n  outlineFns: Record<string, ((...args: any[]) => void) >\n): void {\n  let command: string;\n  let x: number;\n  let y: number;\n  let i = 0;\n\n  function nextX(): number {\n    return originX + parseInt(outline[i++]) * scaleX;\n  }\n  function nextY(): number {\n    return originY + parseInt(outline[i++]) * scaleY;\n  }\n  // eslint-disable-next-line\n  function doOutline(command: string, ...args: any[]) {\n    outlineFns[command](...args);\n  }\n\n  while (i < outline.length) {\n    command = outline[i++];\n    switch (command) {\n      case 'm':\n      case 'l':\n        doOutline(command, nextX(), nextY());\n        break;\n      case 'q':\n        x = nextX();\n        y = nextY();\n        doOutline(command, nextX(), nextY(), x, y);\n        break;\n      case 'b':\n        x = nextX();\n        y = nextY();\n        doOutline(command, nextX(), nextY(), nextX(), nextY(), x, y);\n        break;\n      case 'z':\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class Glyph extends Element {\n  bbox: BoundingBox = new BoundingBox(0, 0, 0, 0);\n  code: string;\n  // metrics is initialised in the constructor by either setOptions or reset\n  // eslint-disable-next-line\n  metrics!: GlyphMetrics; \n  topGlyphs: Glyph[] = [];\n  botGlyphs: Glyph[] = [];\n\n  protected options: GlyphOptions;\n  protected originShift: { x: number; y: number };\n  protected x_shift: number;\n  protected y_shift: number;\n  scale: number = 1;\n  protected point: number;\n  protected stave?: Stave;\n\n  // eslint-disable-next-line\n  draw() {};\n\n  /*\n    Static methods used to implement loading and rendering glyphs.\n\n    Below categoryPath can be any metric path under 'glyphs', so stem.up would respolve\n    to glyphs.stem.up.shifX, glyphs.stem.up.shiftY, etc.\n  */\n  static lookupFontMetric({\n    font,\n    category,\n    code,\n    key,\n    defaultValue,\n  }: {\n    font: Font;\n    category: string;\n    code: string;\n    key: string;\n    defaultValue: number;\n  }): number {\n    let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);\n    if (value === undefined) {\n      value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);\n    }\n    return value;\n  }\n\n  static lookupGlyph(fontStack: Font[], code: string): { font: Font; glyph: FontGlyph } {\n    if (!fontStack) {\n      throw new Vex.RERR('BAD_FONTSTACK', 'Font stack is misconfigured');\n    }\n\n    let glyph: FontGlyph;\n    let font: Font;\n    for (let i = 0; i < fontStack.length; i++) {\n      font = fontStack[i];\n      glyph = font.getGlyphs()[code];\n      if (glyph) return { glyph, font };\n    }\n\n    throw new Vex.RERR('BadGlyph', `Glyph ${code} does not exist in font.`);\n  }\n\n  static loadMetrics(fontStack: Font[], code: string, category?: string): GlyphMetrics {\n    const { glyph, font } = Glyph.lookupGlyph(fontStack, code);\n\n    let x_shift = 0;\n    let y_shift = 0;\n    let scale = 1;\n    if (category && font) {\n      x_shift = Glyph.lookupFontMetric({ font, category, code, key: 'shiftX', defaultValue: 0 });\n      y_shift = Glyph.lookupFontMetric({ font, category, code, key: 'shiftY', defaultValue: 0 });\n      scale = Glyph.lookupFontMetric({ font, category, code, key: 'scale', defaultValue: 1 });\n    }\n\n    const x_min = glyph.x_min;\n    const x_max = glyph.x_max;\n    const ha = glyph.ha;\n\n    let outline: string[];\n\n    const CACHE = true;\n    if (glyph.o) {\n      if (CACHE) {\n        if (glyph.cached_outline) {\n          outline = glyph.cached_outline;\n        } else {\n          outline = glyph.o.split(' ');\n          glyph.cached_outline = outline;\n        }\n      } else {\n        if (glyph.cached_outline) delete glyph.cached_outline;\n        outline = glyph.o.split(' ');\n      }\n\n      return {\n        x_min,\n        x_max,\n        x_shift,\n        y_shift,\n        scale,\n        ha,\n        outline,\n        font,\n      };\n    } else {\n      throw new Vex.RERR('BadGlyph', `Glyph ${code} has no outline defined.`);\n    }\n  }\n\n  /**\n   * A quick and dirty static glyph renderer. Renders glyphs from the default\n   * font defined in Vex.Flow.Font.\n   */\n  static renderGlyph(\n    /** The canvas context. */\n    ctx: RenderContext,\n    /** X coordinate. */\n    x_pos: number,\n    /** Y coordinate. */\n    y_pos: number,\n    /** The point size to use. */\n    point: number,\n    /** The glyph code in font.getGlyphs() */\n    val: string,\n    options?: { font?: Font; category: string }\n  ): GlyphMetrics {\n    const params = {\n      fontStack: Flow.DEFAULT_FONT_STACK,\n      ...options,\n    };\n    const metrics = Glyph.loadMetrics(params.fontStack, val, params.category);\n    if (params.category && metrics.font) {\n      point = Glyph.lookupFontMetric({\n        font: metrics.font,\n        category: params.category,\n        code: val,\n        key: 'point',\n        defaultValue: point,\n      });\n    }\n\n    const scale = (point * 72.0) / (metrics.font.getResolution() * 100.0);\n\n    Glyph.renderOutline(ctx, metrics.outline, scale * metrics.scale, x_pos + metrics.x_shift, y_pos + metrics.y_shift);\n    return metrics;\n  }\n\n  static renderOutline(ctx: RenderContext, outline: string[], scale: number, x_pos: number, y_pos: number): void {\n    ctx.beginPath();\n    ctx.moveTo(x_pos, y_pos);\n    processOutline(outline, x_pos, y_pos, scale, -scale, {\n      m: ctx.moveTo.bind(ctx),\n      l: ctx.lineTo.bind(ctx),\n      q: ctx.quadraticCurveTo.bind(ctx),\n      b: ctx.bezierCurveTo.bind(ctx),\n      // z: ctx.fill.bind(ctx), // ignored\n    });\n    ctx.fill();\n  }\n\n  static getOutlineBoundingBox(outline: string[], scale: number, x_pos: number, y_pos: number): BoundingBox {\n    const bboxComp = new BoundingBoxComputation();\n\n    processOutline(outline, x_pos, y_pos, scale, -scale, {\n      m: bboxComp.addPoint.bind(bboxComp),\n      l: bboxComp.addPoint.bind(bboxComp),\n      q: bboxComp.addQuadraticCurve.bind(bboxComp),\n      b: bboxComp.addBezierCurve.bind(bboxComp),\n      z: bboxComp.noOp.bind(bboxComp),\n    });\n\n    return new BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());\n  }\n\n  /**\n   * @constructor\n   */\n  constructor(code: string, point: number, options?: { category: string }) {\n    super();\n    this.setAttribute('type', 'Glyph');\n\n    this.code = code;\n    this.point = point;\n    this.options = {\n      fontStack: this.getFontStack(),\n    };\n\n    this.x_shift = 0;\n    this.y_shift = 0;\n\n    this.originShift = {\n      x: 0,\n      y: 0,\n    };\n\n    if (options) {\n      this.setOptions(options);\n    } else {\n      this.reset();\n    }\n  }\n\n  getCode(): string {\n    return this.code;\n  }\n\n  // eslint-disable-next-line\n  setOptions(options: any): void {\n    this.options = { ...this.options, ...options };\n    this.reset();\n  }\n\n  setPoint(point: number): this {\n    this.point = point;\n    return this;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  setXShift(x_shift: number): this {\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  setYShift(y_shift: number): this {\n    this.y_shift = y_shift;\n    return this;\n  }\n\n  reset(): void {\n    this.metrics = Glyph.loadMetrics(this.options.fontStack, this.code, this.options.category);\n    // Override point from metrics file\n    if (this.options.category) {\n      this.point = Glyph.lookupFontMetric({\n        category: this.options.category,\n        font: this.metrics.font,\n        code: this.code,\n        key: 'point',\n        defaultValue: this.point,\n      });\n    }\n\n    this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);\n    this.bbox = Glyph.getOutlineBoundingBox(\n      this.metrics.outline,\n      this.scale * this.metrics.scale,\n      this.metrics.x_shift,\n      this.metrics.y_shift\n    );\n  }\n\n  getMetrics(): GlyphMetrics {\n    if (!this.metrics) {\n      throw new Vex.RuntimeError('BadGlyph', `Glyph ${this.code} is not initialized.`);\n    }\n\n    return {\n      x_min: this.metrics.x_min * this.scale * this.metrics.scale,\n      x_max: this.metrics.x_max * this.scale * this.metrics.scale,\n      width: this.bbox.getW(),\n      height: this.bbox.getH(),\n      scale: this.scale * this.metrics.scale,\n      x_shift: this.metrics.x_shift,\n      y_shift: this.metrics.y_shift,\n      outline: this.metrics.outline,\n      font: this.metrics.font,\n      ha: this.metrics.ha,\n    };\n  }\n\n  setOriginX(x: number): void {\n    const { bbox } = this;\n    const originX = Math.abs(bbox.getX() / bbox.getW());\n    const xShift = (x - originX) * bbox.getW();\n    this.originShift.x = -xShift;\n  }\n\n  setOriginY(y: number): void {\n    const { bbox } = this;\n    const originY = Math.abs(bbox.getY() / bbox.getH());\n    const yShift = (y - originY) * bbox.getH();\n    this.originShift.y = -yShift;\n  }\n\n  setOrigin(x: number, y: number): void {\n    this.setOriginX(x);\n    this.setOriginY(y);\n  }\n\n  render(ctx: RenderContext, x: number, y: number): void {\n    if (!this.metrics) {\n      throw new Vex.RuntimeError('BadGlyph', `Glyph ${this.code} is not initialized.`);\n    }\n\n    const outline = this.metrics.outline;\n    const scale = this.scale * this.metrics.scale;\n\n    this.setRendered();\n    this.applyStyle(ctx);\n    Glyph.renderOutline(\n      ctx,\n      outline,\n      scale,\n      x + this.originShift.x + this.metrics.x_shift,\n      y + this.originShift.y + this.metrics.y_shift\n    );\n    this.restoreStyle(ctx);\n  }\n\n  renderToStave(x: number): void {\n    const context = this.checkContext();\n\n    if (!this.metrics) {\n      throw new Vex.RuntimeError('BadGlyph', `Glyph ${this.code} is not initialized.`);\n    }\n\n    if (!this.stave) {\n      throw new Vex.RuntimeError('GlyphError', 'No valid stave');\n    }\n\n    const outline = this.metrics.outline;\n    const scale = this.scale * this.metrics.scale;\n\n    this.setRendered();\n    this.applyStyle();\n    Glyph.renderOutline(\n      context,\n      outline,\n      scale,\n      x + this.x_shift + this.metrics.x_shift,\n      this.stave.getYForGlyphs() + this.y_shift + this.metrics.y_shift\n    );\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { BoundingBox } from './boundingbox';\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { ModifierContext } from './modifiercontext';\n\nexport interface GlyphNoteOptions {\n  ignoreTicks?: boolean;\n  line?: number;\n}\n\nexport class GlyphNote extends Note {\n  protected options: GlyphNoteOptions;\n\n  constructor(glyph: Glyph | undefined, noteStruct: NoteStruct, options?: GlyphNoteOptions) {\n    super(noteStruct);\n    this.options = {\n      ignoreTicks: false,\n      line: 2,\n      ...options,\n    };\n    this.setAttribute('type', 'GlyphNote');\n\n    // Note properties\n    this.ignore_ticks = this.options.ignoreTicks as boolean;\n    if (glyph) {\n      this.setGlyph(glyph);\n    }\n  }\n\n  setGlyph(glyph: Glyph): this {\n    this.glyph = glyph;\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return this.glyph.getBoundingBox();\n  }\n\n  // Add self to modifier context. `mContext` is the `ModifierContext`\n  // to be added to.\n  addToModifierContext(mContext: ModifierContext): this {\n    this.modifierContext = mContext;\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addMember(this.modifiers[i]);\n    }\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  preFormat(): this {\n    if (!this.preFormatted && this.modifierContext) {\n      this.modifierContext.preFormat();\n    }\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n    }\n    ctx.closeGroup();\n  }\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n    ctx.openGroup('glypheNote', this.getAttribute('id'));\n\n    // Context is set when setStave is called on Note\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(ctx);\n    }\n\n    this.glyph.setStave(stave);\n    this.glyph.setYShift(stave.getYForLine(this.options.line as number) - stave.getYForGlyphs());\n\n    const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n    this.glyph.renderToStave(x);\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { StaveNote, StaveNoteStruct } from './stavenote';\nimport { Stem } from './stem';\nimport { Flow } from './tables';\n\nexport interface GraceNoteStruct extends StaveNoteStruct {\n  slash: boolean;\n}\nexport class GraceNote extends StaveNote {\n  protected slash: boolean;\n  protected slur: boolean;\n\n  static get CATEGORY(): string {\n    return 'gracenotes';\n  }\n\n  static get LEDGER_LINE_OFFSET(): number {\n    return 2;\n  }\n\n  static get SCALE(): number {\n    return 0.66;\n  }\n\n  constructor(note_struct: GraceNoteStruct) {\n    super({\n      ...{\n        glyph_font_scale: Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,\n        stroke_px: GraceNote.LEDGER_LINE_OFFSET,\n      },\n      ...note_struct,\n    });\n    this.setAttribute('type', 'GraceNote');\n\n    this.slash = note_struct.slash;\n    this.slur = true;\n\n    this.buildNoteHeads();\n\n    this.width = 3;\n  }\n\n  getStemExtension(): number {\n    if (this.stem_extension_override) {\n      return this.stem_extension_override;\n    }\n\n    const glyph = this.getGlyph();\n    if (glyph) {\n      let ret = super.getStemExtension();\n      if (glyph.stem) {\n        const staveNoteScale = this.getStaveNoteScale();\n        ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n      }\n      return ret;\n    }\n\n    return 0;\n  }\n\n  getCategory(): string {\n    return GraceNote.CATEGORY;\n  }\n\n  // FIXME: move this to more basic class.\n  getStaveNoteScale(): number {\n    return this.render_options.glyph_font_scale / Flow.DEFAULT_NOTATION_FONT_SCALE;\n  }\n\n  draw(): void {\n    super.draw();\n    this.setRendered();\n    const stem = this.stem;\n    if (this.slash && stem) {\n      const staveNoteScale = this.getStaveNoteScale();\n\n      // some magic numbers are based on the staveNoteScale 0.66.\n      const offsetScale = staveNoteScale / 0.66;\n      let slashBBox = undefined;\n      const beam = this.beam;\n      if (beam) {\n        // FIXME: should render slash after beam?\n        if (!beam.postFormatted) {\n          beam.postFormat();\n        }\n\n        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n          stem: 6 * offsetScale,\n          beam: 5 * offsetScale,\n        });\n      } else {\n        const stem_direction = this.getStemDirection();\n        const noteHeadBounds = this.getNoteHeadBounds();\n        const noteStemHeight = stem.getHeight();\n        let x = this.getAbsoluteX();\n        let y =\n          stem_direction === Stem.DOWN\n            ? noteHeadBounds.y_top - noteStemHeight\n            : noteHeadBounds.y_bottom - noteStemHeight;\n\n        const defaultStemExtention =\n          stem_direction === Stem.DOWN ? this.glyph.stem_down_extension : this.glyph.stem_up_extension;\n\n        let defaultOffsetY = Flow.STEM_HEIGHT;\n        defaultOffsetY -= defaultOffsetY / 2.8;\n        defaultOffsetY += defaultStemExtention;\n        y += defaultOffsetY * staveNoteScale * stem_direction;\n\n        const offsets =\n          stem_direction === Stem.UP\n            ? {\n                x1: 1,\n                y1: 0,\n                x2: 13,\n                y2: -9,\n              }\n            : {\n                x1: -4,\n                y1: 1,\n                x2: 13,\n                y2: 9,\n              };\n\n        x += offsets.x1 * offsetScale;\n        y += offsets.y1 * offsetScale;\n        slashBBox = {\n          x1: x,\n          y1: y,\n          x2: x + offsets.x2 * offsetScale,\n          y2: y + offsets.y2 * offsetScale,\n        };\n      }\n\n      // FIXME: avoide staff lines, leadger lines or others.\n\n      const ctx = this.checkContext();\n      ctx.save();\n      ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n      ctx.beginPath();\n      ctx.moveTo(slashBBox.x1, slashBBox.y1);\n      ctx.lineTo(slashBBox.x2, slashBBox.y2);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  calcBeamedNotesSlashBBox(\n    slashStemOffset: number,\n    slashBeamOffset: number,\n    protrusions: { beam: number; stem: number }\n  ): Record<string, number> {\n    const beam = this.beam;\n    if (!beam) throw new Vex.RERR('NoBeam', \"Can't calculate without a beam.\");\n\n    const beam_slope = beam.slope;\n    const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n    const scaleX = isBeamEndNote ? -1 : 1;\n    const beam_angle = Math.atan(beam_slope * scaleX);\n\n    // slash line intersecting point on beam.\n    const iPointOnBeam = {\n      dx: Math.cos(beam_angle) * slashBeamOffset,\n      dy: Math.sin(beam_angle) * slashBeamOffset,\n    };\n\n    slashStemOffset *= this.getStemDirection();\n    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n\n    const stemX = this.getStemX();\n    const stem0X = beam.notes[0].getStemX();\n    const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n\n    const ret = {\n      x1: stemX - protrusion_stem_dx,\n      y1: stemY + slashStemOffset - protrusion_stem_dy,\n      x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n    };\n    return ret;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\nimport { TabTie } from './tabtie';\nimport { StaveNote } from './stavenote';\nimport { Note } from './note';\nimport { StemmableNote } from './stemmablenote';\n\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any) {\n  if (GraceNoteGroup.DEBUG) Vex.L('Vex.Flow.GraceNoteGroup', args);\n}\n\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n  static DEBUG: boolean;\n\n  protected readonly voice: Voice;\n  protected readonly grace_notes: StemmableNote[];\n  protected readonly show_slur?: boolean;\n\n  protected preFormatted: boolean;\n  protected formatter: Formatter;\n  protected render_options: { slur_y_shift: number };\n  protected slur?: StaveTie | TabTie;\n  protected beams: Beam[];\n\n  static get CATEGORY(): string {\n    return 'gracenotegroups';\n  }\n\n  /** Arranges groups inside a `ModifierContext`. */\n  static format(gracenote_groups: GraceNoteGroup[], state: { left_shift: number }): boolean {\n    const group_spacing_stave = 4;\n    const group_spacing_tab = 0;\n\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\n    const group_list = [];\n    let prev_note = null;\n    let shiftL = 0;\n\n    for (let i = 0; i < gracenote_groups.length; ++i) {\n      const gracenote_group = gracenote_groups[i];\n      const note = gracenote_group.getNote();\n      const is_stavenote = note.getCategory() === StaveNote.CATEGORY;\n      const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n\n      if (is_stavenote && note !== prev_note) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prev_note = note;\n      }\n\n      group_list.push({ shift: shiftL, gracenote_group, spacing });\n    }\n\n    // If first note left shift in case it is displaced\n    let group_shift = group_list[0].shift;\n    let formatWidth;\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  }\n\n  //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n  constructor(grace_notes: StemmableNote[], show_slur?: boolean) {\n    super();\n    this.setAttribute('type', 'GraceNoteGroup');\n\n    this.position = Modifier.Position.LEFT;\n    this.grace_notes = grace_notes;\n    this.width = 0;\n\n    this.preFormatted = false;\n\n    this.show_slur = show_slur;\n    this.slur = undefined;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.render_options = {\n      slur_y_shift: 0,\n    };\n\n    this.beams = [];\n\n    this.voice.addTickables(this.grace_notes);\n\n    return this;\n  }\n\n  getCategory(): string {\n    return GraceNoteGroup.CATEGORY;\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  beamNotes(grace_notes?: StemmableNote[]): this {\n    grace_notes = grace_notes || this.grace_notes;\n    if (grace_notes.length > 1) {\n      const beam = new Beam(grace_notes);\n\n      beam.render_options.beam_width = 3;\n      beam.render_options.partial_beam_length = 4;\n\n      this.beams.push(beam);\n    }\n\n    return this;\n  }\n\n  setNote(note: Note): this {\n    this.note = note;\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getGraceNotes(): Note[] {\n    return this.grace_notes;\n  }\n\n  draw(): void {\n    this.checkContext();\n\n    const note = this.getNote();\n\n    L('Drawing grace note group for:', note);\n\n    if (!(note && this.index !== null)) {\n      throw new Vex.RuntimeError(\n        'NoAttachedNote',\n        \"Can't draw grace note without a parent note and parent note index.\"\n      );\n    }\n\n    this.setRendered();\n    this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n\n    // Draw notes\n    this.grace_notes.forEach((graceNote) => {\n      graceNote.setContext(this.getContext()).draw();\n    });\n\n    // Draw beam\n    this.beams.forEach((beam) => {\n      beam.setContext(this.getContext()).draw();\n    });\n\n    if (this.show_slur) {\n      // Create and draw slur\n      const is_stavenote = this.getNote().getCategory() === StaveNote.CATEGORY;\n      const TieClass = is_stavenote ? StaveTie : TabTie;\n\n      this.slur = new TieClass({\n        last_note: this.grace_notes[0],\n        first_note: note,\n        first_indices: [0],\n        last_indices: [0],\n      });\n\n      this.slur.render_options.cp2 = 12;\n      this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n      this.slur.setContext(this.getContext()).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.js` for usage examples.\n\nimport { TabNote, TabNoteStruct } from './tabnote';\n\n/** Implements Crace Tab Note. */\nexport class GraceTabNote extends TabNote {\n  static get CATEGORY(): string {\n    return 'gracetabnotes';\n  }\n\n  /** Constructor providing a stave note struct */\n  constructor(note_struct: TabNoteStruct) {\n    super(note_struct, false);\n    this.setAttribute('type', 'GraceTabNote');\n\n    this.render_options = {\n      ...this.render_options,\n      ...{\n        // vertical shift from stave line\n        y_shift: 0.3,\n        // grace glyph scale\n        scale: 0.6,\n        // grace tablature font\n        font: '7.5pt Arial',\n      },\n    };\n\n    this.updateWidth();\n  }\n\n  /** Returns the category. */\n  getCategory(): string {\n    return GraceTabNote.CATEGORY;\n  }\n\n  /** Draws the note. */\n  draw(): void {\n    super.draw();\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Renderer } from './renderer';\nimport { Formatter } from './formatter';\nimport { WidthFormatter } from './widthformatter';\nimport { Music } from './music';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveNote } from './stavenote';\nimport { StaveModifier } from './stavemodifier';\nimport { StaveTempo } from './stavetempo';\nimport { Voice } from './voice';\nimport { Accidental } from './accidental';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\nimport { TabStave } from './tabstave';\nimport { TabNote } from './tabnote';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Note } from './note';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { TickContext } from './tickcontext';\nimport { Articulation } from './articulation';\nimport { Annotation } from './annotation';\nimport { ChordSymbol } from './chordsymbol';\nimport { Barline } from './stavebarline';\nimport { NoteHead } from './notehead';\nimport { StaveConnector } from './staveconnector';\nimport { ClefNote } from './clefnote';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Stem } from './stem';\nimport { TabTie } from './tabtie';\nimport { Clef } from './clef';\nimport { Dot } from './dot';\nimport { Modifier } from './modifier';\nimport { TabSlide } from './tabslide';\nimport { Tuplet } from './tuplet';\nimport { GraceNote } from './gracenote';\nimport { GraceTabNote } from './gracetabnote';\nimport { Tuning } from './tuning';\nimport { KeyManager } from './keymanager';\nimport { StaveHairpin } from './stavehairpin';\nimport { BoundingBox } from './boundingbox';\nimport { Stroke } from './strokes';\nimport { TextNote } from './textnote';\nimport { Curve } from './curve';\nimport { TextDynamics } from './textdynamics';\nimport { StaveLine } from './staveline';\nimport { Ornament } from './ornament';\nimport { PedalMarking } from './pedalmarking';\nimport { TextBracket } from './textbracket';\nimport { FretHandFinger } from './frethandfinger';\nimport { Repetition } from './staverepetition';\nimport { BarNote } from './barnote';\nimport { GhostNote } from './ghostnote';\nimport { NoteSubGroup } from './notesubgroup';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Tremolo } from './tremolo';\nimport { StringNumber } from './stringnumber';\nimport { Crescendo } from './crescendo';\nimport { Volta } from './stavevolta';\nimport { System } from './system';\nimport { Factory } from './factory';\nimport { Parser } from './parser';\nimport { EasyScore } from './easyscore';\nimport { Registry } from './registry';\nimport { StaveText } from './stavetext';\nimport { GlyphNote } from './glyphnote';\nimport { RepeatNote } from './repeatnote';\nimport { TextFont } from './textfont';\nimport { PetalumaScriptTextMetrics } from './fonts/petalumascript_textmetrics';\nimport { RobotoSlabTextMetrics } from './fonts/robotoslab_textmetrics';\n\nimport { Font, Fonts, DefaultFontStack } from './font';\n\nVex.Flow = Flow;\nVex.Flow.Element = Element;\nVex.Flow.Fraction = Fraction;\nVex.Flow.Renderer = Renderer;\nVex.Flow.Formatter = Formatter;\nVex.Flow.WidthFormatter = WidthFormatter;\nVex.Flow.Music = Music;\nVex.Flow.Glyph = Glyph;\nVex.Flow.Stave = Stave;\nVex.Flow.StaveNote = StaveNote;\nVex.Flow.StaveModifier = StaveModifier;\nVex.Flow.StaveTempo = StaveTempo;\nVex.Flow.Voice = Voice;\nVex.Flow.Accidental = Accidental;\nVex.Flow.Beam = Beam;\nVex.Flow.StaveTie = StaveTie;\nVex.Flow.TabStave = TabStave;\nVex.Flow.TabNote = TabNote;\nVex.Flow.Bend = Bend;\nVex.Flow.Vibrato = Vibrato;\nVex.Flow.VibratoBracket = VibratoBracket;\nVex.Flow.Note = Note;\nVex.Flow.ModifierContext = ModifierContext;\nVex.Flow.MultiMeasureRest = MultiMeasureRest;\nVex.Flow.TickContext = TickContext;\nVex.Flow.Articulation = Articulation;\nVex.Flow.Annotation = Annotation;\nVex.Flow.ChordSymbol = ChordSymbol;\nVex.Flow.Barline = Barline;\nVex.Flow.NoteHead = NoteHead;\nVex.Flow.StaveConnector = StaveConnector;\nVex.Flow.ClefNote = ClefNote;\nVex.Flow.KeySignature = KeySignature;\nVex.Flow.KeySigNote = KeySigNote;\nVex.Flow.TimeSignature = TimeSignature;\nVex.Flow.TimeSigNote = TimeSigNote;\nVex.Flow.Stem = Stem;\nVex.Flow.TabTie = TabTie;\nVex.Flow.Clef = Clef;\nVex.Flow.Dot = Dot;\nVex.Flow.Modifier = Modifier;\nVex.Flow.TabSlide = TabSlide;\nVex.Flow.Tuplet = Tuplet;\nVex.Flow.GraceNote = GraceNote;\nVex.Flow.GraceTabNote = GraceTabNote;\nVex.Flow.Tuning = Tuning;\nVex.Flow.KeyManager = KeyManager;\nVex.Flow.StaveHairpin = StaveHairpin;\nVex.Flow.BoundingBox = BoundingBox;\nVex.Flow.Stroke = Stroke;\nVex.Flow.TextNote = TextNote;\nVex.Flow.Curve = Curve;\nVex.Flow.TextDynamics = TextDynamics;\nVex.Flow.StaveLine = StaveLine;\nVex.Flow.Ornament = Ornament;\nVex.Flow.PedalMarking = PedalMarking;\nVex.Flow.TextBracket = TextBracket;\nVex.Flow.FretHandFinger = FretHandFinger;\nVex.Flow.Repetition = Repetition;\nVex.Flow.BarNote = BarNote;\nVex.Flow.GhostNote = GhostNote;\nVex.Flow.NoteSubGroup = NoteSubGroup;\nVex.Flow.GraceNoteGroup = GraceNoteGroup;\nVex.Flow.Tremolo = Tremolo;\nVex.Flow.StringNumber = StringNumber;\nVex.Flow.Crescendo = Crescendo;\nVex.Flow.Volta = Volta;\nVex.Flow.System = System;\nVex.Flow.Factory = Factory;\nVex.Flow.Parser = Parser;\nVex.Flow.EasyScore = EasyScore;\nVex.Flow.Registry = Registry;\nVex.Flow.StaveText = StaveText;\nVex.Flow.GlyphNote = GlyphNote;\nVex.Flow.RepeatNote = RepeatNote;\n\nVex.Flow.Font = Font;\nVex.Flow.Fonts = Fonts;\nVex.Flow.TextFont = TextFont;\nVex.Flow.DefaultFontStack = DefaultFontStack;\nVex.Flow.PetalumaScriptTextMetrics = PetalumaScriptTextMetrics;\nVex.Flow.RobotoSlabTextMetrics = RobotoSlabTextMetrics;\n\nexport default Vex;\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\n\nimport { Vex } from './vex';\nimport { Music } from './music';\n\nexport class KeyManager {\n  constructor(key) {\n    this.music = new Music();\n    this.setKey(key);\n  }\n\n  setKey(key) {\n    this.key = key;\n    this.reset();\n    return this;\n  }\n\n  getKey() {\n    return this.key;\n  }\n\n  reset() {\n    this.keyParts = this.music.getKeyParts(this.key);\n\n    this.keyString = this.keyParts.root;\n    if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\n    const is_supported_type = Music.scaleTypes[this.keyParts.type];\n    if (!is_supported_type) {\n      throw new Vex.RERR('BadArguments', `Unsupported key type: ${this.key}`);\n    }\n\n    this.scale = this.music.getScaleTones(\n      this.music.getNoteValue(this.keyString),\n      Music.scaleTypes[this.keyParts.type]\n    );\n\n    this.scaleMap = {};\n    this.scaleMapByValue = {};\n    this.originalScaleMapByValue = {};\n\n    const noteLocation = Music.root_indices[this.keyParts.root];\n\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n\n      const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n      this.scaleMap[rootName] = noteName;\n      this.scaleMapByValue[this.scale[i]] = noteName;\n      this.originalScaleMapByValue[this.scale[i]] = noteName;\n    }\n\n    return this;\n  }\n\n  getAccidental(key) {\n    const root = this.music.getKeyParts(key).root;\n    const parts = this.music.getNoteParts(this.scaleMap[root]);\n\n    return {\n      note: this.scaleMap[root],\n      accidental: parts.accidental,\n    };\n  }\n\n  selectNote(note) {\n    note = note.toLowerCase();\n    const parts = this.music.getNoteParts(note);\n\n    // First look for matching note in our altered scale\n    const scaleNote = this.scaleMap[parts.root];\n    const modparts = this.music.getNoteParts(scaleNote);\n\n    if (scaleNote === note) {\n      return {\n        note: scaleNote,\n        accidental: parts.accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in our altered scale\n    const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n    if (valueNote != null) {\n      return {\n        note: valueNote,\n        accidental: this.music.getNoteParts(valueNote).accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in the original scale\n    const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n    if (originalValueNote != null) {\n      this.scaleMap[modparts.root] = originalValueNote;\n      delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n      this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n      return {\n        note: originalValueNote,\n        accidental: this.music.getNoteParts(originalValueNote).accidental,\n        change: true,\n      };\n    }\n\n    // Then try to unmodify a currently modified note.\n    if (modparts.root === note) {\n      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n      this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n      this.scaleMap[modparts.root] = modparts.root;\n      return {\n        note: modparts.root,\n        accidental: null,\n        change: true,\n      };\n    }\n\n    // Last resort -- shitshoot\n    delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n    this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\n    delete this.scaleMap[modparts.root];\n    this.scaleMap[modparts.root] = note;\n\n    return {\n      note,\n      accidental: parts.accidental,\n      change: true,\n    };\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\nexport class KeySignature extends StaveModifier {\n  static get CATEGORY() {\n    return 'keysignatures';\n  }\n\n  // Space between natural and following accidental depending\n  // on vertical position\n  static get accidentalSpacing() {\n    return {\n      '#': {\n        above: 6,\n        below: 4,\n      },\n      b: {\n        above: 4,\n        below: 7,\n      },\n      n: {\n        above: 4,\n        below: 1,\n      },\n      '##': {\n        above: 6,\n        below: 4,\n      },\n      bb: {\n        above: 4,\n        below: 7,\n      },\n      db: {\n        above: 4,\n        below: 7,\n      },\n      d: {\n        above: 4,\n        below: 7,\n      },\n      bbs: {\n        above: 4,\n        below: 7,\n      },\n      '++': {\n        above: 6,\n        below: 4,\n      },\n      '+': {\n        above: 6,\n        below: 4,\n      },\n      '+-': {\n        above: 6,\n        below: 4,\n      },\n      '++-': {\n        above: 6,\n        below: 4,\n      },\n      bs: {\n        above: 4,\n        below: 10,\n      },\n      bss: {\n        above: 4,\n        below: 10,\n      },\n    };\n  }\n\n  // Create a new Key Signature based on a `key_spec`\n  constructor(keySpec, cancelKeySpec, alterKeySpec) {\n    super();\n    this.setAttribute('type', 'KeySignature');\n\n    this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n    this.glyphs = [];\n    this.xPositions = []; // relative to this.x\n    this.paddingForced = false;\n  }\n\n  getCategory() {\n    return KeySignature.CATEGORY;\n  }\n\n  // Add an accidental glyph to the `KeySignature` instance which represents\n  // the provided `acc`. If `nextAcc` is also provided, the appropriate\n  // spacing will be included in the glyph's position\n  convertToGlyph(acc, nextAcc) {\n    const accGlyphData = Flow.accidentalCodes(acc.type);\n    const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n\n    // Determine spacing between current accidental and the next accidental\n    let extraWidth = 1;\n    if (acc.type === 'n' && nextAcc) {\n      const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n      if (spacing) {\n        const isAbove = nextAcc.line >= acc.line;\n        extraWidth = isAbove ? spacing.above : spacing.below;\n      }\n    }\n\n    // Place the glyph on the stave\n    this.placeGlyphOnLine(glyph, this.stave, acc.line);\n    this.glyphs.push(glyph);\n\n    const xPosition = this.xPositions[this.xPositions.length - 1];\n    const glyphWidth = glyph.getMetrics().width + extraWidth;\n    // Store the next accidental's x position\n    this.xPositions.push(xPosition + glyphWidth);\n    // Expand size of key signature\n    this.width += glyphWidth;\n  }\n\n  // Cancel out a key signature provided in the `spec` parameter. This will\n  // place appropriate natural accidentals before the key signature.\n  cancelKey(spec) {\n    this.formatted = false;\n    this.cancelKeySpec = spec;\n\n    return this;\n  }\n\n  convertToCancelAccList(spec) {\n    // Get the accidental list for the cancelled key signature\n    const cancel_accList = Flow.keySignature(spec);\n\n    // If the cancelled key has a different accidental type, ie: # vs b\n    const different_types =\n      this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\n\n    // Determine how many naturals needed to add\n    const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\n\n    // Return if no naturals needed\n    if (naturals < 1) return undefined;\n\n    // Get the line position for each natural\n    const cancelled = [];\n    for (let i = 0; i < naturals; i++) {\n      let index = i;\n      if (!different_types) {\n        index = cancel_accList.length - naturals + i;\n      }\n\n      const acc = cancel_accList[index];\n      cancelled.push({ type: 'n', line: acc.line });\n    }\n\n    // Combine naturals with main accidental list for the key signature\n    this.accList = cancelled.concat(this.accList);\n\n    return {\n      accList: cancelled,\n      type: cancel_accList[0].type,\n    };\n  }\n\n  // Deprecated\n  addToStave(stave) {\n    this.paddingForced = true;\n    stave.addModifier(this);\n\n    return this;\n  }\n\n  // Apply the accidental staff line placement based on the `clef` and\n  // the  accidental `type` for the key signature ('# or 'b').\n  convertAccLines(clef, type, accList = this.accList) {\n    let offset = 0.0; // if clef === \"treble\"\n    let customLines; // when clef doesn't follow treble key sig shape\n\n    switch (clef) {\n      // Treble & Subbass both have offsets of 0, so are not included.\n      case 'soprano':\n        if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n        else offset = -1;\n        break;\n      case 'mezzo-soprano':\n        if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n        else offset = 1.5;\n        break;\n      case 'alto':\n        offset = 0.5;\n        break;\n      case 'tenor':\n        if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n        else offset = -0.5;\n        break;\n      case 'baritone-f':\n      case 'baritone-c':\n        if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n        else offset = 2;\n        break;\n      case 'bass':\n      case 'french':\n        offset = 1;\n        break;\n      default:\n        break;\n    }\n\n    // If there's a special case, assign those lines/spaces:\n    let i;\n    if (typeof customLines !== 'undefined') {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line = customLines[i];\n      }\n    } else if (offset !== 0) {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line += offset;\n      }\n    }\n  }\n\n  getPadding(index) {\n    if (!this.formatted) this.format();\n\n    return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n  }\n\n  getWidth() {\n    if (!this.formatted) this.format();\n\n    return this.width;\n  }\n\n  setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n    this.formatted = false;\n    this.keySpec = keySpec;\n    this.cancelKeySpec = cancelKeySpec;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  // Alter the accidentals of a key spec one by one.\n  // Each alteration is a new accidental that replaces the\n  // original accidental (or the canceled one).\n  alterKey(alterKeySpec) {\n    this.formatted = false;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  convertToAlterAccList(alterKeySpec) {\n    const max = Math.min(alterKeySpec.length, this.accList.length);\n    for (let i = 0; i < max; ++i) {\n      if (alterKeySpec[i]) {\n        this.accList[i].type = alterKeySpec[i];\n      }\n    }\n  }\n\n  format() {\n    if (!this.stave) {\n      throw new Vex.RERR('KeySignatureError', \"Can't draw key signature without stave.\");\n    }\n\n    this.width = 0;\n    this.glyphs = [];\n    this.xPositions = [0]; // initialize with initial x position\n    this.accList = Flow.keySignature(this.keySpec);\n    const accList = this.accList;\n    const firstAccidentalType = accList.length > 0 ? accList[0].type : null;\n    let cancelAccList;\n    if (this.cancelKeySpec) {\n      cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n    }\n    if (this.alterKeySpec) {\n      this.convertToAlterAccList(this.alterKeySpec);\n    }\n\n    if (this.accList.length > 0) {\n      const clef =\n        (this.position === StaveModifier.Position.END ? this.stave.endClef : this.stave.clef) || this.stave.clef;\n      if (cancelAccList) {\n        this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n      }\n      this.convertAccLines(clef, firstAccidentalType, accList);\n      for (let i = 0; i < this.accList.length; ++i) {\n        this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n      }\n    }\n\n    this.formatted = true;\n  }\n\n  draw() {\n    if (!this.x) {\n      throw new Vex.RERR('KeySignatureError', \"Can't draw key signature without x.\");\n    }\n\n    if (!this.stave) {\n      throw new Vex.RERR('KeySignatureError', \"Can't draw key signature without stave.\");\n    }\n\n    if (!this.formatted) this.format();\n    this.setRendered();\n\n    for (let i = 0; i < this.glyphs.length; i++) {\n      const glyph = this.glyphs[i];\n      const x = this.x + this.xPositions[i];\n      glyph.setStave(this.stave);\n      glyph.setContext(this.stave.context);\n      glyph.renderToStave(x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Mark Meeus 2019\n\nimport { Note } from './note';\nimport { KeySignature } from './keysignature';\n\nexport class KeySigNote extends Note {\n  protected keySignature: KeySignature;\n  constructor(keySpec: string, cancelKeySpec: string, alterKeySpec: string) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'KeySigNote');\n\n    this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  addToModifierContext(): this {\n    /* overridden to ignore */\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    this.keySignature.setStave(this.checkStave());\n    this.keySignature.format();\n    this.setWidth(this.keySignature.width);\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkStave().checkContext();\n    this.setRendered();\n    this.keySignature.setX(this.getAbsoluteX());\n    this.keySignature.setContext(ctx);\n    this.keySignature.draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// `Modifier` is an abstract interface for notational elements that modify\n// a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n//\n// For a `Modifier` instance to be positioned correctly, it must be part of\n// a `ModifierContext`. All modifiers in the same context are rendered relative to\n// one another.\n//\n// Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n// in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n// `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\n\nexport enum ModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n}\n\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) Vex.L('Vex.Flow.Modifier', args); }\n\nexport class Modifier extends Element {\n  protected note?: Note;\n\n  protected width: number;\n  protected text_line: number;\n  protected position: ModifierPosition;\n  protected y_shift: number;\n  protected index: number;\n  protected x_shift: number;\n\n  private spacingFromNextModifier: number;\n  private modifier_context?: ModifierContext;\n\n  static get CATEGORY(): string {\n    return 'none';\n  }\n\n  // Modifiers can be positioned almost anywhere, relative to a note.\n  static get Position(): typeof ModifierPosition {\n    return ModifierPosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      center: Modifier.Position.CENTER,\n      above: Modifier.Position.ABOVE,\n      below: Modifier.Position.BELOW,\n      left: Modifier.Position.LEFT,\n      right: Modifier.Position.RIGHT,\n    };\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'Modifier');\n\n    this.width = 0;\n\n    // Modifiers are attached to a note and an index. An index is a\n    // specific head in a chord.\n    this.note = undefined;\n    this.index = 0;\n\n    // The `text_line` is reserved space above or below a stave.\n    this.text_line = 0;\n    this.position = Modifier.Position.LEFT;\n    this.modifier_context = undefined;\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.spacingFromNextModifier = 0;\n  }\n\n  // Called when position changes\n  reset(): void {\n    // do nothing\n  }\n\n  // Every modifier has a category. The `ModifierContext` uses this to determine\n  // the type and order of the modifiers.\n  getCategory(): string {\n    return Modifier.CATEGORY;\n  }\n\n  // Get and set modifier widths.\n  getWidth(): number {\n    return this.width;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  // Get and set attached note (`StaveNote`, `TabNote`, etc.)\n  getNote(): Note {\n    if (!this.note) throw new Vex.RERR('NoNote', 'Modifier has no note.');\n    return this.note;\n  }\n\n  setNote(note: Note): this {\n    this.note = note;\n    return this;\n  }\n\n  // Get and set note index, which is a specific note in a chord.\n  getIndex(): number {\n    return this.index;\n  }\n\n  setIndex(index: number): this {\n    this.index = index;\n    return this;\n  }\n\n  // Every modifier must be part of a `ModifierContext`.\n  getModifierContext(): ModifierContext | undefined {\n    return this.modifier_context;\n  }\n\n  checkModifierContext(): ModifierContext {\n    if (!this.modifier_context) throw new Vex.RERR('NoModifierContext', 'Modifier Context Required');\n    return this.modifier_context;\n  }\n\n  setModifierContext(c: ModifierContext): this {\n    this.modifier_context = c;\n    return this;\n  }\n\n  // Get and set articulation position.\n  getPosition(): number {\n    return this.position;\n  }\n\n  setPosition(position: number): this {\n    this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n    this.reset();\n    return this;\n  }\n\n  // Set the `text_line` for the modifier.\n  setTextLine(line: number): this {\n    this.text_line = line;\n    return this;\n  }\n\n  // Shift modifier down `y` pixels. Negative values shift up.\n  setYShift(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  setSpacingFromNextModifier(x: number): void {\n    this.spacingFromNextModifier = x;\n  }\n\n  getSpacingFromNextModifier(): number {\n    return this.spacingFromNextModifier;\n  }\n\n  // Shift modifier `x` pixels in the direction of the modifier. Negative values\n  // shift reverse.\n  setXShift(x: number): this {\n    this.x_shift = 0;\n    if (this.position === Modifier.Position.LEFT) {\n      this.x_shift -= x;\n    } else {\n      this.x_shift += x;\n    }\n    return this;\n  }\n\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  // Render the modifier onto the canvas.\n  draw(): void {\n    this.checkContext();\n    throw new Vex.RERR('MethodNotImplemented', 'draw() not implemented for this modifier.');\n  }\n\n  // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n  alignSubNotesWithNote(subNotes: Note[], note: Note): void {\n    // Shift over the tick contexts of each note\n    const tickContext = note.getTickContext();\n    const metrics = tickContext.getMetrics();\n    const stave = note.getStave();\n    const subNoteXOffset =\n      tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n\n    subNotes.forEach((subNote) => {\n      const subTickContext = subNote.getTickContext();\n      if (stave) subNote.setStave(stave);\n      subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.)\n\nimport { Vex } from './vex';\nimport { StaveNote } from './stavenote';\nimport { GlyphNote } from './glyphnote';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Accidental } from './accidental';\nimport { NoteSubGroup } from './notesubgroup';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Stroke } from './strokes';\nimport { StringNumber } from './stringnumber';\nimport { Articulation } from './articulation';\nimport { Ornament } from './ornament';\nimport { Annotation } from './annotation';\nimport { ChordSymbol } from './chordsymbol';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato';\nimport { Modifier } from './modifier';\nimport { TabNote } from './tabnote';\nimport { Note } from './note';\n\nexport interface ModifierContextState {\n  right_shift: number;\n  left_shift: number;\n  text_line: number;\n  top_text_line: number;\n}\n\nexport interface ModifierContextMetrics {\n  width: number;\n  spacing: number;\n}\n\nexport type ModifierContextMember = Modifier | StaveNote | TabNote;\n\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (ModifierContext.DEBUG) Vex.L('Vex.Flow.ModifierContext', args);\n}\n\nexport class ModifierContext {\n  static DEBUG: boolean;\n\n  state: ModifierContextState;\n\n  protected postFormatted: boolean;\n  protected spacing: number;\n  protected members: Record<string, ModifierContextMember[]>;\n\n  protected preFormatted: boolean;\n  protected width: number;\n  protected formatted?: boolean;\n  // eslint-disable-next-line\n  protected PREFORMAT: any[];\n  // eslint-disable-next-line\n  protected POSTFORMAT: any[];\n\n  constructor() {\n    // Current members\n    this.members = {};\n\n    // Formatting data.\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0,\n    };\n\n    // Add new members to this array. The ordering is significant -- lower\n    // members are formatted and rendered before higher ones.\n    this.PREFORMAT = [\n      StaveNote,\n      Dot,\n      FretHandFinger,\n      Accidental,\n      Stroke,\n      GraceNoteGroup,\n      NoteSubGroup,\n      StringNumber,\n      Articulation,\n      Ornament,\n      Annotation,\n      ChordSymbol,\n      Bend,\n      Vibrato,\n    ];\n\n    // If post-formatting is required for an element, add it to this array.\n    this.POSTFORMAT = [StaveNote];\n  }\n\n  addModifier(member: ModifierContextMember): this {\n    L('addModifier is deprecated, use addMember instead.');\n    return this.addMember(member);\n  }\n\n  addMember(member: ModifierContextMember): this {\n    const type = member.getCategory();\n    if (!this.members[type]) this.members[type] = [];\n    this.members[type].push(member);\n    member.setModifierContext(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  getModifiers(type: string): ModifierContextMember[] {\n    L('getModifiers is deprecated, use getMembers instead.');\n    return this.getMembers(type);\n  }\n\n  getMembers(type: string): ModifierContextMember[] {\n    return this.members[type];\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getLeftShift(): number {\n    return this.state.left_shift;\n  }\n\n  getRightShift(): number {\n    return this.state.right_shift;\n  }\n\n  getState(): ModifierContextState {\n    return this.state;\n  }\n\n  getMetrics(): ModifierContextMetrics {\n    if (!this.formatted) {\n      throw new Vex.RERR('UnformattedMember', 'Unformatted member has no metrics.');\n    }\n\n    return {\n      width: this.state.left_shift + this.state.right_shift + this.spacing,\n      spacing: this.spacing,\n    };\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n    this.PREFORMAT.forEach((member) => {\n      L('Preformatting ModifierContext: ', member.CATEGORY);\n      member.format(this.getMembers(member.CATEGORY), this.state, this);\n    });\n\n    // Update width of this member context\n    this.width = this.state.left_shift + this.state.right_shift;\n    this.preFormatted = true;\n  }\n\n  postFormat(): void {\n    if (this.postFormatted) return;\n    this.POSTFORMAT.forEach((member) => {\n      L('Postformatting ModifierContext: ', member.CATEGORY);\n      member.postFormat(this.getMembers(member.CATEGORY) as Note[]);\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { StaveModifier } from './stavemodifier';\nimport { TimeSignature } from './timesignature';\n\nlet semibrave_rest;\nfunction get_semibrave_rest() {\n  if (!semibrave_rest) {\n    const notehead = new NoteHead({ duration: 'w', note_type: 'r' });\n    semibrave_rest = {\n      glyph_font_scale: notehead.render_options.glyph_font_scale,\n      glyph_code: notehead.glyph_code,\n      width: notehead.getWidth(),\n    };\n  }\n  return semibrave_rest;\n}\n\nexport class MultiMeasureRest extends Element {\n  // Parameters:\n  // * `number_of_measures` - Number of measures.\n  // * `options` - The options object.\n  //   * `show_number` - Show number of measures string or not.\n  //   * `number_line` -  Staff line to render the number of measures string.\n  //   * `number_glyph_point` - Size of the number of measures string glyphs.\n  //   * `padding_left` - Left padding from stave x.\n  //   * `padding_right` - Right padding from stave end x.\n  //   * `line` - Staff line to render rest line or rest symbols.\n  //   * `spacing_between_lines_px` - Spacing between staff lines to\n  // resolve serif height or {2-bar and 4-bar}rest symbol height.\n  //   * `line_thickness` - Rest line thickness.\n  //   * `serif_thickness` - Rest serif line thickness.\n  //   * `use_symbols` - Use rest symbols or not.\n  //   * `symbol_spacing` - Spacing between each rest symbol glyphs.\n  //   * `semibrave_rest_glyph_scale` - Size of the semibrave(1-bar) rest symbol.\n  constructor(number_of_measures, options) {\n    super();\n    this.setAttribute('type', 'MultiMeasureRest');\n\n    const point = this.musicFont.lookupMetric('digits.point');\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n\n    this.render_options = {\n      show_number: true,\n      number_line: -0.5,\n      number_glyph_point: point, // same as TimeSignature.\n\n      padding_left: undefined,\n      padding_right: undefined,\n\n      line: 2,\n\n      spacing_between_lines_px: 10, // same as Stave.\n\n      line_thickness: undefined,\n      serif_thickness: 2,\n\n      use_symbols: false,\n      symbol_spacing: undefined,\n\n      /* same as NoteHead. */\n      semibrave_rest_glyph_scale: Flow.DEFAULT_NOTATION_FONT_SCALE,\n    };\n    Vex.Merge(this.render_options, options);\n\n    this.render_options.number_line += fontLineShift;\n\n    this.number_of_measures = number_of_measures;\n    this.xs = {\n      left: NaN,\n      right: NaN,\n    };\n  }\n\n  getXs() {\n    return this.xs;\n  }\n\n  setStave(stave) {\n    this.stave = stave;\n    return this;\n  }\n\n  getStave() {\n    return this.stave;\n  }\n\n  drawLine(ctx, left, right, sbl) {\n    const y = this.stave.getYForLine(this.render_options.line);\n    const padding = (right - left) * 0.1;\n\n    left += padding;\n    right -= padding;\n\n    const serif = {\n      thickness: this.render_options.serif_thickness,\n      height: sbl,\n    };\n    let lineThicknessHalf = sbl * 0.25;\n    if (!isNaN(this.render_options.line_thickness)) {\n      lineThicknessHalf = this.render_options.line_thickness * 0.5;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(left, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - sbl);\n    ctx.lineTo(right, y - sbl);\n    ctx.lineTo(right, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + sbl);\n    ctx.lineTo(left, y + sbl);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  drawSymbols(ctx, left, right, sbl) {\n    const n4 = Math.floor(this.number_of_measures / 4);\n    const n = this.number_of_measures % 4;\n    const n2 = Math.floor(n / 2);\n    const n1 = n % 2;\n\n    const semibrave_rest = get_semibrave_rest();\n    const semibrave_rest_width =\n      semibrave_rest.width * (this.render_options.semibrave_rest_glyph_scale / semibrave_rest.glyph_font_scale);\n    const glyphs = {\n      2: {\n        width: semibrave_rest_width * 0.5,\n        height: sbl,\n      },\n      1: {\n        width: semibrave_rest_width,\n      },\n    };\n\n    let spacing = semibrave_rest_width * 1.35;\n    if (!isNaN(this.render_options.symbol_spacing)) {\n      spacing = this.render_options.symbol_spacing;\n    }\n\n    const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n    let x = left + (right - left) * 0.5 - width * 0.5;\n    const yTop = this.stave.getYForLine(this.render_options.line - 1);\n    const yMiddle = this.stave.getYForLine(this.render_options.line);\n    const yBottom = this.stave.getYForLine(this.render_options.line + 1);\n\n    ctx.save();\n    ctx.setStrokeStyle('none');\n    ctx.setLineWidth(0);\n\n    for (let i = 0; i < n4; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n2; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n1; ++i) {\n      Glyph.renderGlyph(ctx, x, yTop, this.render_options.semibrave_rest_glyph_scale, semibrave_rest.glyph_code);\n      x += glyphs[1].width + spacing;\n    }\n\n    ctx.restore();\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const ctx = this.context;\n    const stave = this.stave;\n    const sbl = this.render_options.spacing_between_lines_px;\n\n    let left = stave.getNoteStartX();\n    let right = stave.getNoteEndX();\n\n    // FIXME: getNoteStartX() returns x+5(barline width) and\n    // getNoteEndX() returns x + width(no barline width) by default. how to fix?\n    const begModifiers = stave.getModifiers(StaveModifier.Position.BEGIN);\n    if (begModifiers.length === 1 && begModifiers[0].getCategory() === 'barlines') {\n      left -= begModifiers[0].getWidth();\n    }\n\n    if (!isNaN(this.render_options.padding_left)) {\n      left = stave.getX() + this.render_options.padding_left;\n    }\n\n    if (!isNaN(this.render_options.padding_right)) {\n      right = stave.getX() + stave.getWidth() - this.render_options.padding_right;\n    }\n\n    this.xs.left = left;\n    this.xs.right = right;\n\n    if (this.render_options.use_symbols) {\n      this.drawSymbols(ctx, left, right, sbl);\n    } else {\n      this.drawLine(ctx, left, right, sbl);\n    }\n\n    if (this.render_options.show_number) {\n      const timeSpec = '/' + this.number_of_measures;\n      const timeSig = new TimeSignature(timeSpec, 0, false);\n      timeSig.point = this.render_options.number_glyph_point;\n      timeSig.setTimeSig(timeSpec);\n      timeSig.setStave(stave);\n      timeSig.x = left + (right - left) * 0.5 - timeSig.timeSig.glyph.getMetrics().width * 0.5;\n      timeSig.bottomLine = this.render_options.number_line;\n      timeSig.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements some standard music theory routines.\n\nimport { Vex } from './vex';\n\nexport interface NoteAccidental {\n  note: number;\n  accidental: AccidentalValue;\n}\n\nexport interface NoteParts {\n  root: string;\n  accidental: string;\n  type?: string;\n}\n\nexport type KeyValue = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\n\nexport type RootValue = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport type AccidentalValue = -2 | -1 | 0 | 1 | 2;\n\nexport interface Key {\n  root_index: RootValue;\n  int_val: KeyValue;\n}\nexport class Music {\n  static get NUM_TONES(): number {\n    return 12;\n  }\n\n  static get roots(): string[] {\n    return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n  }\n\n  static get root_values(): KeyValue[] {\n    return [0, 2, 4, 5, 7, 9, 11];\n  }\n\n  static get root_indices(): Record<string, RootValue> {\n    return {\n      c: 0,\n      d: 1,\n      e: 2,\n      f: 3,\n      g: 4,\n      a: 5,\n      b: 6,\n    };\n  }\n\n  static get canonical_notes(): string[] {\n    return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n  }\n\n  static get diatonic_intervals(): string[] {\n    return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n  }\n\n  static get diatonic_accidentals(): Record<string, NoteAccidental> {\n    return {\n      unison: { note: 0, accidental: 0 },\n      m2: { note: 1, accidental: -1 },\n      M2: { note: 1, accidental: 0 },\n      m3: { note: 2, accidental: -1 },\n      M3: { note: 2, accidental: 0 },\n      p4: { note: 3, accidental: 0 },\n      dim5: { note: 4, accidental: -1 },\n      p5: { note: 4, accidental: 0 },\n      m6: { note: 5, accidental: -1 },\n      M6: { note: 5, accidental: 0 },\n      b7: { note: 6, accidental: -1 },\n      M7: { note: 6, accidental: 0 },\n      octave: { note: 7, accidental: 0 },\n    };\n  }\n\n  static get intervals(): Record<string, number> {\n    return {\n      u: 0,\n      unison: 0,\n      m2: 1,\n      b2: 1,\n      min2: 1,\n      S: 1,\n      H: 1,\n      2: 2,\n      M2: 2,\n      maj2: 2,\n      T: 2,\n      W: 2,\n      m3: 3,\n      b3: 3,\n      min3: 3,\n      M3: 4,\n      3: 4,\n      maj3: 4,\n      4: 5,\n      p4: 5,\n      '#4': 6,\n      b5: 6,\n      aug4: 6,\n      dim5: 6,\n      5: 7,\n      p5: 7,\n      '#5': 8,\n      b6: 8,\n      aug5: 8,\n      6: 9,\n      M6: 9,\n      maj6: 9,\n      b7: 10,\n      m7: 10,\n      min7: 10,\n      dom7: 10,\n      M7: 11,\n      maj7: 11,\n      8: 12,\n      octave: 12,\n    };\n  }\n\n  static get scales(): Record<string, number[]> {\n    return {\n      major: [2, 2, 1, 2, 2, 2, 1],\n      dorian: [2, 1, 2, 2, 2, 1, 2],\n      mixolydian: [2, 2, 1, 2, 2, 1, 2],\n      minor: [2, 1, 2, 2, 1, 2, 2],\n    };\n  }\n\n  static get scaleTypes(): Record<string, number[]> {\n    return {\n      M: Music.scales.major,\n      m: Music.scales.minor,\n    };\n  }\n\n  static get accidentals(): string[] {\n    return ['bb', 'b', 'n', '#', '##'];\n  }\n\n  static get noteValues(): Record<string, Key> {\n    return {\n      c: { root_index: 0, int_val: 0 },\n      cn: { root_index: 0, int_val: 0 },\n      'c#': { root_index: 0, int_val: 1 },\n      'c##': { root_index: 0, int_val: 2 },\n      cb: { root_index: 0, int_val: 11 },\n      cbb: { root_index: 0, int_val: 10 },\n      d: { root_index: 1, int_val: 2 },\n      dn: { root_index: 1, int_val: 2 },\n      'd#': { root_index: 1, int_val: 3 },\n      'd##': { root_index: 1, int_val: 4 },\n      db: { root_index: 1, int_val: 1 },\n      dbb: { root_index: 1, int_val: 0 },\n      e: { root_index: 2, int_val: 4 },\n      en: { root_index: 2, int_val: 4 },\n      'e#': { root_index: 2, int_val: 5 },\n      'e##': { root_index: 2, int_val: 6 },\n      eb: { root_index: 2, int_val: 3 },\n      ebb: { root_index: 2, int_val: 2 },\n      f: { root_index: 3, int_val: 5 },\n      fn: { root_index: 3, int_val: 5 },\n      'f#': { root_index: 3, int_val: 6 },\n      'f##': { root_index: 3, int_val: 7 },\n      fb: { root_index: 3, int_val: 4 },\n      fbb: { root_index: 3, int_val: 3 },\n      g: { root_index: 4, int_val: 7 },\n      gn: { root_index: 4, int_val: 7 },\n      'g#': { root_index: 4, int_val: 8 },\n      'g##': { root_index: 4, int_val: 9 },\n      gb: { root_index: 4, int_val: 6 },\n      gbb: { root_index: 4, int_val: 5 },\n      a: { root_index: 5, int_val: 9 },\n      an: { root_index: 5, int_val: 9 },\n      'a#': { root_index: 5, int_val: 10 },\n      'a##': { root_index: 5, int_val: 11 },\n      ab: { root_index: 5, int_val: 8 },\n      abb: { root_index: 5, int_val: 7 },\n      b: { root_index: 6, int_val: 11 },\n      bn: { root_index: 6, int_val: 11 },\n      'b#': { root_index: 6, int_val: 0 },\n      'b##': { root_index: 6, int_val: 1 },\n      bb: { root_index: 6, int_val: 10 },\n      bbb: { root_index: 6, int_val: 9 },\n    };\n  }\n\n  isValidNoteValue(note: number): boolean {\n    return note >= 0 && note < Music.NUM_TONES;\n  }\n\n  isValidIntervalValue(interval: number): boolean {\n    return this.isValidNoteValue(interval);\n  }\n\n  getNoteParts(noteString: string): NoteParts {\n    if (!noteString || noteString.length < 1) {\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    if (noteString.length > 3) {\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    const note = noteString.toLowerCase();\n\n    const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n    const match = regex.exec(note);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n\n      return {\n        root,\n        accidental,\n      };\n    } else {\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n    }\n  }\n\n  getKeyParts(keyString: string): NoteParts {\n    if (!keyString || keyString.length < 1) {\n      throw new Vex.RERR('BadArguments', 'Invalid key: ' + keyString);\n    }\n\n    const key = keyString.toLowerCase();\n\n    // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n    const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n    const match = regex.exec(key);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n      let type = match[3];\n\n      // Unspecified type implies major\n      if (!type) type = 'M';\n\n      return {\n        root,\n        accidental,\n        type,\n      };\n    } else {\n      throw new Vex.RERR('BadArguments', `Invalid key: ${keyString}`);\n    }\n  }\n\n  getNoteValue(noteString: string): number {\n    const value = Music.noteValues[noteString];\n    if (value === undefined) {\n      throw new Vex.RERR('BadArguments', `Invalid note name: ${noteString}`);\n    }\n    return value.int_val;\n  }\n\n  getIntervalValue(intervalString: string): number {\n    const value = Music.intervals[intervalString];\n    if (value === undefined) {\n      throw new Vex.RERR('BadArguments', `Invalid interval name: ${intervalString}`);\n    }\n    return value;\n  }\n\n  getCanonicalNoteName(noteValue: number): string {\n    if (!this.isValidNoteValue(noteValue)) {\n      throw new Vex.RERR('BadArguments', `Invalid note value: ${noteValue}`);\n    }\n    return Music.canonical_notes[noteValue];\n  }\n\n  getCanonicalIntervalName(intervalValue: number): string {\n    if (!this.isValidIntervalValue(intervalValue)) {\n      throw new Vex.RERR('BadArguments', `Invalid interval value: ${intervalValue}`);\n    }\n    return Music.diatonic_intervals[intervalValue];\n  }\n\n  /**\n   * Given a note, interval, and interval direction, produce the relative note.\n   */\n  getRelativeNoteValue(noteValue: number, intervalValue: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new Vex.RERR('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n    if (sum < 0) sum += Music.NUM_TONES;\n\n    return sum;\n  }\n\n  getRelativeNoteName(root: string, noteValue: number): string {\n    const parts = this.getNoteParts(root);\n    const rootValue = this.getNoteValue(parts.root);\n    let interval = noteValue - rootValue;\n\n    if (Math.abs(interval) > Music.NUM_TONES - 3) {\n      let multiplier = 1;\n      if (interval > 0) multiplier = -1;\n\n      // Possibly wrap around. (Add +1 for modulo operator)\n      const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n\n      if (Math.abs(reverse_interval) > 2) {\n        throw new Vex.RERR('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n      } else {\n        interval = reverse_interval;\n      }\n    }\n\n    if (Math.abs(interval) > 2) {\n      throw new Vex.RERR('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n    }\n\n    let relativeNoteName = parts.root;\n    if (interval > 0) {\n      for (let i = 1; i <= interval; ++i) {\n        relativeNoteName += '#';\n      }\n    } else if (interval < 0) {\n      for (let i = -1; i >= interval; --i) {\n        relativeNoteName += 'b';\n      }\n    }\n\n    return relativeNoteName;\n  }\n\n  /**\n   * Return scale tones, given intervals. Each successive interval is\n   * relative to the previous one, e.g., Major Scale:\n   *\n   *   TTSTTTS = [2,2,1,2,2,2,1]\n   *\n   * When used with key = 0, returns C scale (which is isomorphic to\n   * interval list).\n   */\n  getScaleTones(key: number, intervals: number[]): number[] {\n    const tones = [key];\n\n    let nextNote = key;\n    for (let i = 0; i < intervals.length; i += 1) {\n      nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n      if (nextNote !== key) tones.push(nextNote);\n    }\n\n    return tones;\n  }\n\n  /**\n   * Return the interval of a note, given a diatonic scale.\n   * e.g., given the scale C, and the note E, returns M3.\n   */\n  getIntervalBetween(note1: number, note2: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new Vex.RERR('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n      throw new Vex.RERR('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n    }\n\n    let difference = direction === 1 ? note2 - note1 : note1 - note2;\n\n    if (difference < 0) difference += Music.NUM_TONES;\n\n    return difference;\n  }\n\n  /**\n   * Create a scale map that represents the pitch state for a\n   * `keySignature`. For example, passing a `G` to `keySignature` would\n   * return a scale map with every note naturalized except for `F` which\n   * has an `F#` state.\n   */\n  createScaleMap(keySignature: string): Record<string, string> {\n    const keySigParts = this.getKeyParts(keySignature);\n    if (!keySigParts.type) throw new Vex.RERR('BadArguments', 'Unsupported key type: undefined');\n    const scaleName = Music.scaleTypes[keySigParts.type];\n\n    let keySigString = keySigParts.root;\n    if (keySigParts.accidental) keySigString += keySigParts.accidental;\n\n    if (!scaleName) throw new Vex.RERR('BadArguments', 'Unsupported key type: ' + keySignature);\n\n    const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n    const noteLocation = Music.root_indices[keySigParts.root];\n\n    const scaleMap = {} as Record<string, string>;\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n      let noteName = this.getRelativeNoteName(rootName, scale[i]);\n\n      if (noteName.length === 1) {\n        noteName += 'n';\n      }\n\n      scaleMap[rootName] = noteName;\n    }\n\n    return scaleMap;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements an abstract interface for notes and chords that\n// are rendered on a stave. Notes have some common properties: All of them\n// have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n//\n// Some notes have stems, heads, dots, etc. Most notational elements that\n// surround a note are called *modifiers*, and every note has an associated\n// array of them. All notes also have a rendering context and belong to a stave.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Tickable } from './tickable';\nimport { Stroke } from './strokes';\nimport { Stave } from './stave';\nimport { Voice } from './voice';\nimport { TickContext } from './tickcontext';\nimport { ModifierContext } from './modifiercontext';\nimport { Modifier } from './modifier';\nimport { KeyProps, RenderContext } from './types/common';\nimport { GlyphProps } from './glyph';\nimport { GLYPH_PROPS_VALID_TYPES } from './common';\nimport { Fraction } from './fraction';\nimport { Beam } from './beam';\n\nexport interface NoteMetrics {\n  /** The total width of the note (including modifiers). */\n  width: number;\n  glyphWidth?: number;\n  /** The width of the note head only. */\n  notePx: number;\n  /** Start `X` for left modifiers. */\n  modLeftPx: number;\n  /** Start `X` for right modifiers. */\n  modRightPx: number;\n  /** Extra space on left of note. */\n  leftDisplacedHeadPx: number;\n  glyphPx: number;\n  /** Extra space on right of note. */\n  rightDisplacedHeadPx: number;\n}\n\nexport interface NoteDuration {\n  duration: string;\n  dots: number;\n  type: string;\n}\n\nexport interface NoteRenderOptions {\n  draw_stem_through_stave?: boolean;\n  draw_dots?: boolean;\n  draw_stem?: boolean;\n  y_shift: number;\n  extend_left?: number;\n  extend_right?: number;\n  glyph_font_scale: number;\n  annotation_spacing: number;\n  glyph_font_size?: number;\n  scale: number;\n  font: string;\n  stroke_px: number;\n}\n\nexport interface ParsedNote {\n  duration: string;\n  type: string;\n  customTypes: string[];\n  dots: number;\n  ticks: number;\n}\n\nexport interface NoteStruct {\n  line?: number;\n  /** The number of dots, which affects the duration. */\n  dots?: number;\n  keys?: string[];\n  /** The note type (e.g., `r` for rest, `s` for slash notes, etc.). */\n  type?: string;\n  align_center?: boolean;\n  duration_override?: Fraction;\n  /** The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.). */\n  duration: string;\n}\n\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport abstract class Note extends Tickable {\n  keys: string[];\n  keyProps: KeyProps[];\n\n  protected stave?: Stave;\n  protected render_options: NoteRenderOptions;\n  protected duration: string;\n  protected dots: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected noteType: string;\n  protected customGlyphs: GlyphProps[];\n  protected ys: number[];\n  // eslint-disable-next-line\n  protected glyph: any;\n  protected customTypes: string[];\n  protected playNote?: Note;\n  protected beam?: Beam;\n\n  static get CATEGORY(): string {\n    return 'note';\n  }\n\n  /** Debug helper. Displays various note metrics for the given\n   * note.\n   */\n  static plotMetrics(ctx: RenderContext, note: Note, yPos: number): void {\n    const metrics = note.getMetrics();\n    const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n    const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n    const xAbs = note.getAbsoluteX();\n    const xPost1 = note.getAbsoluteX() + metrics.notePx;\n    const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n    const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n    const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);\n\n    const xWidth = xEnd - xStart;\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n    ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n\n    const y = yPos + 7;\n    function stroke(x1: number, x2: number, color: string, yy: number = y) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(3);\n      ctx.moveTo(x1 + note.getXShift(), yy);\n      ctx.lineTo(x2 + note.getXShift(), yy);\n      ctx.stroke();\n    }\n\n    stroke(xStart, xPre1, 'red');\n    stroke(xPre1, xAbs, '#999');\n    stroke(xAbs, xPost1, 'green');\n    stroke(xPost1, xPost2, '#999');\n    stroke(xPost2, xEnd, 'red');\n    stroke(xEnd, xFreedomRight, '#DD0');\n    stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n    Vex.drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n\n    const formatterMetrics = note.getFormatterMetrics();\n    if (formatterMetrics.iterations > 0) {\n      const spaceDeviation = formatterMetrics.space.deviation;\n      const prefix = spaceDeviation >= 0 ? '+' : '';\n      ctx.setFillStyle('red');\n      ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n    }\n    ctx.restore();\n  }\n\n  static parseDuration(durationString: string): NoteDuration | undefined {\n    const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n    const result = regexp.exec(durationString);\n    if (!result) {\n      return undefined;\n    }\n\n    const duration = result[1];\n    const dots = result[2].length;\n    const type = result[3] || 'n';\n\n    return { duration, dots, type };\n  }\n\n  static parseNoteStruct(noteStruct: NoteStruct): ParsedNote | undefined {\n    const durationString = noteStruct.duration;\n    const customTypes: string[] = [];\n\n    // Preserve backwards-compatibility\n    const durationProps = Note.parseDuration(durationString);\n    if (!durationProps) {\n      return undefined;\n    }\n\n    // If specified type is invalid, return undefined\n    let type = noteStruct.type;\n    if (type && !GLYPH_PROPS_VALID_TYPES[type]) {\n      return undefined;\n    }\n\n    // If no type specified, check duration or custom types\n    if (!type) {\n      type = durationProps.type || 'n';\n\n      // If we have keys, try and check if we've got a custom glyph\n      if (noteStruct.keys !== undefined) {\n        noteStruct.keys.forEach((k, i) => {\n          const result = k.split('/');\n          // We have a custom glyph specified after the note eg. /X2\n          customTypes[i] = (result && result.length === 3 ? result[2] : type) as string;\n        });\n      }\n    }\n\n    // Calculate the tick duration of the note\n    let ticks = Flow.durationToTicks(durationProps.duration);\n    if (!ticks) {\n      return undefined;\n    }\n\n    // Are there any dots?\n    const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n    if (typeof dots !== 'number') {\n      return undefined;\n    }\n\n    // Add ticks as necessary depending on the numbr of dots\n    let currentTicks = ticks;\n    for (let i = 0; i < dots; i++) {\n      if (currentTicks <= 1) return undefined;\n\n      currentTicks = currentTicks / 2;\n      ticks += currentTicks;\n    }\n\n    return {\n      duration: durationProps.duration,\n      type,\n      customTypes,\n      dots,\n      ticks,\n    };\n  }\n\n  /**\n   * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n   * positioning and layout.\n   * To create a new note you need to provide a `noteStruct`.\n   */\n  constructor(noteStruct: NoteStruct) {\n    super();\n    this.setAttribute('type', 'Note');\n\n    if (!noteStruct) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        'Note must have valid initialization data to identify duration and type.'\n      );\n    }\n\n    /** Parses `noteStruct` and get note properties. */\n    const initStruct = Note.parseNoteStruct(noteStruct);\n    if (!initStruct) {\n      throw new Vex.RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n    }\n\n    // Set note properties from parameters.\n    this.keys = noteStruct.keys || [];\n    // per-pitch properties\n    this.keyProps = [];\n\n    this.duration = initStruct.duration;\n    this.dots = initStruct.dots;\n    this.noteType = initStruct.type;\n    this.customTypes = initStruct.customTypes;\n\n    if (noteStruct.duration_override) {\n      // Custom duration\n      this.setDuration(noteStruct.duration_override);\n    } else {\n      // Default duration\n      this.setIntrinsicTicks(initStruct.ticks);\n    }\n\n    this.modifiers = [];\n\n    // Get the glyph code for this note from the font.\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n    this.customGlyphs = this.customTypes.map((t) => Flow.getGlyphProps(this.duration, t));\n\n    // Note to play for audio players.\n    this.playNote = undefined;\n\n    // Positioning contexts used by the Formatter.\n    this.ignore_ticks = false;\n\n    // Positioning variables\n    this.width = 0; // Width in pixels calculated after preFormat\n    this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n    this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n    this.x_shift = 0; // X shift from tick context X\n    this.preFormatted = false; // Is this note preFormatted?\n    this.ys = []; // list of y coordinates for each note\n    // we need to hold on to these for ties and beams.\n\n    if (noteStruct.align_center) {\n      this.setCenterAlignment(noteStruct.align_center);\n    }\n\n    // The render surface.\n    this.render_options = {\n      annotation_spacing: 5,\n      glyph_font_scale: 1,\n      stroke_px: 1,\n      scale: 1,\n      font: '',\n      y_shift: 0,\n    };\n  }\n\n  // Get and set the play note, which is arbitrary data that can be used by an\n  // audio player.\n  getPlayNote(): Note | undefined {\n    return this.playNote;\n  }\n\n  setPlayNote(note: Note): this {\n    this.playNote = note;\n    return this;\n  }\n\n  // Don't play notes by default, call them rests. This is also used by things like\n  // beams and dots for positioning.\n  isRest(): boolean {\n    return false;\n  }\n\n  // TODO(0xfe): Why is this method here?\n  addStroke(index: number, stroke: Stroke): this {\n    stroke.setNote(this);\n    stroke.setIndex(index);\n    this.modifiers.push(stroke);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the target stave. */\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  /** Check and get the target stave. */\n  checkStave(): Stave {\n    if (!this.stave) {\n      throw new Vex.RERR('NoStave', 'No stave attached to instance');\n    }\n    return this.stave;\n  }\n\n  /** Set the target stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n    this.setContext(this.stave.getContext());\n    return this;\n  }\n\n  /**\n   * `Note` is not really a modifier, but is used in\n   * a `ModifierContext`.\n   */\n  getCategory(): string {\n    return Note.CATEGORY;\n  }\n\n  // Get and set spacing to the left and right of the notes.\n  getLeftDisplacedHeadPx(): number {\n    return this.leftDisplacedHeadPx;\n  }\n  getRightDisplacedHeadPx(): number {\n    return this.rightDisplacedHeadPx;\n  }\n  setLeftDisplacedHeadPx(x: number): this {\n    this.leftDisplacedHeadPx = x;\n    return this;\n  }\n  setRightDisplacedHeadPx(x: number): this {\n    this.rightDisplacedHeadPx = x;\n    return this;\n  }\n\n  /** Returns true if this note has no duration (e.g., bar notes, spacers, etc.) */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Gets the stave line number for the note. */\n  getLineNumber(\n    // eslint-disable-next-line\n    isTopNote: boolean): number {\n    return 0;\n  }\n\n  /** Gets the stave line number for rest. */\n  getLineForRest(): number {\n    return 0;\n  }\n\n  /** Get the glyph associated with this note. */\n  getGlyph(): // eslint-disable-next-line\n  any {\n    return this.glyph;\n  }\n\n  /** Get the glyph width. */\n  getGlyphWidth(): number {\n    // TODO: FIXME (multiple potential values for this.glyph)\n    if (this.glyph) {\n      if (this.glyph.getMetrics) {\n        return this.glyph.getMetrics().width;\n      } else if (this.glyph.getWidth) {\n        return this.glyph.getWidth(this.render_options.glyph_font_scale);\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Sets Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  setYs(ys: number[]): this {\n    this.ys = ys;\n    return this;\n  }\n\n  /**\n   * Gets Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  getYs(): number[] {\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', 'No Y-values calculated for this note.');\n    }\n\n    return this.ys;\n  }\n\n  /**\n   * Get the Y position of the space above the stave onto which text can\n   * be rendered.\n   */\n  getYForTopText(text_line: number): number {\n    return this.checkStave().getYForTopText(text_line);\n  }\n\n  /** Returns the voice that this note belongs in. */\n  getVoice(): Voice {\n    if (!this.voice) throw new Vex.RERR('NoVoice', 'Note has no voice.');\n    return this.voice;\n  }\n\n  /** Attaches this note to `voice`. */\n  setVoice(voice: Voice): this {\n    this.voice = voice;\n    this.preFormatted = false;\n    return this;\n  }\n\n  /** Gets the `TickContext` for this note. */\n  getTickContext(): TickContext {\n    if (!this.tickContext) throw new Vex.RERR('NoTickContext', 'Note has no tick context.');\n    return this.tickContext;\n  }\n\n  /** Sets the `TickContext` for this note. */\n  setTickContext(tc: TickContext): this {\n    this.tickContext = tc;\n    this.preFormatted = false;\n    return this;\n  }\n\n  /** Accessors to duration. */\n  getDuration(): string {\n    return this.duration;\n  }\n\n  /** Accessors to isDotted. */\n  isDotted(): boolean {\n    return this.dots > 0;\n  }\n\n  /** Accessors to hasStem. */\n  hasStem(): boolean {\n    return false;\n  }\n\n  /** Accessors to note type. */\n  getNoteType(): string {\n    return this.noteType;\n  }\n\n  /** Gets the beam. */\n  getBeam(): Beam | undefined {\n    return this.beam;\n  }\n\n  /** Checks and gets the beam. */\n  checkBeam(): Beam {\n    if (!this.beam) {\n      throw new Vex.RERR('NoBeam', 'No beam attached to instance');\n    }\n    return this.beam;\n  }\n\n  /** Checks it has a beam. */\n  hasBeam(): boolean {\n    return this.beam != undefined;\n  }\n\n  /** Sets the beam. */\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    return this;\n  }\n\n  /** Attach this note to a modifier context. */\n  setModifierContext(mc?: ModifierContext): this {\n    this.modifierContext = mc;\n    return this;\n  }\n\n  /** Attach a modifier to this note. */\n  addModifier(a: number | Modifier, b: number | Modifier = 0): this {\n    let index: number;\n    let modifier: Modifier;\n\n    if (typeof a === 'object' && typeof b === 'number') {\n      index = b;\n      modifier = a;\n    } else {\n      throw new Vex.RERR(\n        'WrongParams',\n        'Call signature to addModifier not supported, use addModifier(modifier, index) instead.'\n      );\n    }\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n  /** Get the coordinates for where modifiers begin. */\n  getModifierStartXY(\n    // eslint-disable-next-line\n    position?: number, index?: number, options?: any\n  ): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    return {\n      x: this.getAbsoluteX(),\n      y: this.ys[0],\n    };\n  }\n\n  /** Get the metrics for this note. */\n  getMetrics(): NoteMetrics {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n    }\n\n    const modLeftPx = this.modifierContext ? this.modifierContext.state.left_shift : 0;\n    const modRightPx = this.modifierContext ? this.modifierContext.state.right_shift : 0;\n    const width = this.getWidth();\n    const glyphWidth = this.getGlyphWidth();\n    const notePx =\n      width -\n      modLeftPx - // subtract left modifiers\n      modRightPx - // subtract right modifiers\n      this.leftDisplacedHeadPx - // subtract left displaced head\n      this.rightDisplacedHeadPx; // subtract right displaced head\n\n    return {\n      // ----------\n      // NOTE: If you change this, remember to update MockTickable in the tests/ directory.\n      // --------------\n      width,\n      glyphWidth,\n      notePx,\n\n      // Modifier spacing.\n      modLeftPx,\n      modRightPx,\n\n      // Displaced note head on left or right.\n      leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n      rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n      glyphPx: 0,\n    };\n  }\n\n  /**\n   * Gets the absolute `X` position of this note's tick context. This\n   * excludes x_shift, so you'll need to factor it in if you're\n   * looking for the post-formatted x-position.\n   */\n  getAbsoluteX(): number {\n    if (!this.tickContext) {\n      throw new Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');\n    }\n\n    // Position note to left edge of tick context.\n    let x = this.tickContext.getX();\n    if (this.stave) {\n      x += this.stave.getNoteStartX() + this.musicFont.lookupMetric('stave.padding');\n    }\n\n    if (this.isCenterAligned()) {\n      x += this.getCenterXShift();\n    }\n\n    return x;\n  }\n\n  /** Sets preformatted status. */\n  setPreFormatted(value: boolean): void {\n    this.preFormatted = value;\n  }\n\n  // Get the direction of the stem\n  getStemDirection(): number {\n    throw new Vex.RERR('NoStem', 'No stem attached to this note.');\n  }\n\n  // Get the top and bottom `y` values of the stem.\n  getStemExtents(): Record<string, number> {\n    throw new Vex.RERR('NoStem', 'No stem attached to this note.');\n  }\n\n  // Get the `x` coordinate to the right of the note\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieStartX += note_glyph_width / 2;\n    tieStartX += -this.width / 2 + this.width + 2;\n\n    return tieStartX;\n  }\n\n  // Get the `x` coordinate to the left of the note\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieEndX += note_glyph_width / 2;\n    tieEndX -= this.width / 2 + 2;\n\n    return tieEndX;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `NoteHeads`. `NoteHeads` are typically not manipulated\n// directly, but used internally in `StaveNote`.\n//\n// See `tests/notehead_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Note, NoteStruct } from './note';\nimport { Stem } from './stem';\nimport { StaveNote } from './stavenote';\nimport { Glyph, GlyphProps } from './glyph';\nimport { RenderContext } from './types/common';\nimport { BoundingBox } from './boundingbox';\nimport { Stave } from './stave';\nimport { ElementStyle } from './element';\n\n// To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any []) {\n  if (NoteHead.DEBUG) Vex.L('Vex.Flow.NoteHead', args);\n}\n\nexport interface NoteHeadStruct extends NoteStruct {\n  glyph_font_scale: number;\n  slashed?: boolean;\n  style?: ElementStyle;\n  stem_down_x_offset: number;\n  stem_up_x_offset: number;\n  custom_glyph_code?: string;\n  x_shift: number;\n  line: number;\n  stem_direction?: number;\n  displaced?: boolean;\n  //  duration: string;\n  note_type: string;\n  y?: number;\n  x?: number;\n  index?: number;\n}\n\n// Draw slashnote head manually. No glyph exists for this.\n//\n// Parameters:\n// * `ctx`: the Canvas context\n// * `duration`: the duration of the note. ex: \"4\"\n// * `x`: the x coordinate to draw at\n// * `y`: the y coordinate to draw at\n// * `stem_direction`: the direction of the stem\nfunction drawSlashNoteHead(\n  ctx: RenderContext,\n  duration: string,\n  x: number,\n  y: number,\n  stem_direction: number,\n  staveSpace: number\n) {\n  const width = Flow.SLASH_NOTEHEAD_WIDTH;\n  ctx.save();\n  ctx.setLineWidth(Flow.STEM_WIDTH);\n\n  let fill = false;\n\n  if (Flow.durationToNumber(duration) > 2) {\n    fill = true;\n  }\n\n  if (!fill) x -= (Flow.STEM_WIDTH / 2) * stem_direction;\n\n  ctx.beginPath();\n  ctx.moveTo(x, y + staveSpace);\n  ctx.lineTo(x, y + 1);\n  ctx.lineTo(x + width, y - staveSpace);\n  ctx.lineTo(x + width, y);\n  ctx.lineTo(x, y + staveSpace);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n\n  if (Flow.durationToFraction(duration).equals(0.5)) {\n    const breve_lines = [-3, -1, width + 1, width + 3];\n    for (let i = 0; i < breve_lines.length; i++) {\n      ctx.beginPath();\n      ctx.moveTo(x + breve_lines[i], y - 10);\n      ctx.lineTo(x + breve_lines[i], y + 11);\n      ctx.stroke();\n    }\n  }\n\n  ctx.restore();\n}\n\nexport class NoteHead extends Note {\n  static DEBUG: boolean;\n\n  protected glyph_code: string;\n\n  protected custom_glyph: boolean = false;\n  protected stem_up_x_offset: number = 0;\n  protected stem_down_x_offset: number = 0;\n  protected note_type: string;\n  protected displaced: boolean;\n  protected stem_direction: number;\n\n  protected x: number;\n  protected y: number;\n  protected line: number;\n  protected index?: number;\n  protected slashed: boolean;\n\n  static get CATEGORY(): string {\n    return 'notehead';\n  }\n\n  constructor(head_options: NoteHeadStruct) {\n    super(head_options);\n    this.setAttribute('type', 'NoteHead');\n\n    this.index = head_options.index;\n    this.x = head_options.x || 0;\n    this.y = head_options.y || 0;\n    this.note_type = head_options.note_type;\n    this.duration = head_options.duration;\n    this.displaced = head_options.displaced || false;\n    this.stem_direction = head_options.stem_direction || StaveNote.STEM_UP;\n    this.line = head_options.line;\n\n    // Get glyph code based on duration and note type. This could be\n    // regular notes, rests, or other custom codes.\n    this.glyph = Flow.getGlyphProps(this.duration, this.note_type);\n    if (!this.glyph) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        `No glyph found for duration '${this.duration}' and type '${this.note_type}'`\n      );\n    }\n\n    this.glyph_code = this.glyph.code_head;\n    this.x_shift = head_options.x_shift || 0;\n    if (head_options.custom_glyph_code) {\n      this.custom_glyph = true;\n      this.glyph_code = head_options.custom_glyph_code;\n      this.stem_up_x_offset = head_options.stem_up_x_offset || 0;\n      this.stem_down_x_offset = head_options.stem_down_x_offset || 0;\n    }\n\n    this.style = head_options.style;\n    this.slashed = head_options.slashed || false;\n\n    Vex.Merge(this.render_options, {\n      // font size for note heads\n      glyph_font_scale: head_options.glyph_font_scale || Flow.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: 3,\n    });\n\n    this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));\n  }\n\n  getCategory(): string {\n    return NoteHead.CATEGORY;\n  }\n\n  // Get the width of the notehead\n  getWidth(): number {\n    return this.width;\n  }\n\n  // Determine if the notehead is displaced\n  isDisplaced(): boolean {\n    return this.displaced === true;\n  }\n\n  // Get the glyph data\n  getGlyph(): GlyphProps {\n    return this.glyph;\n  }\n\n  // Set the X coordinate\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  // get/set the Y coordinate\n  getY(): number {\n    return this.y;\n  }\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  // Get/set the stave line the notehead is placed on\n  getLine(): number {\n    return this.line;\n  }\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Get the canvas `x` coordinate position of the notehead.\n  getAbsoluteX(): number {\n    // If the note has not been preformatted, then get the static x value\n    // Otherwise, it's been formatted and we should use it's x value relative\n    // to its tick context\n    const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n\n    // For a more natural displaced notehead, we adjust the displacement amount\n    // by half the stem width in order to maintain a slight overlap with the stem\n    const displacementStemAdjustment = Stem.WIDTH / 2;\n    const fontShift = this.musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\n    const displacedFontShift = this.musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;\n\n    return (\n      x +\n      fontShift +\n      (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0)\n    );\n  }\n\n  // Get the `BoundingBox` for the `NoteHead`\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n    const spacing = this.checkStave().getSpacingBetweenLines();\n    const half_spacing = spacing / 2;\n    const min_y = this.y - half_spacing;\n\n    return new BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n  }\n\n  // Set notehead to a provided `stave`\n  setStave(stave: Stave): this {\n    const line = this.getLine();\n\n    this.stave = stave;\n    if (this.stave) {\n      this.setY(this.stave.getYForNote(line));\n      this.setContext(this.stave.getContext());\n    }\n    return this;\n  }\n\n  // Pre-render formatting\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Draw the notehead\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let head_x = this.getAbsoluteX();\n    if (this.custom_glyph) {\n      // head_x += this.x_shift;\n      head_x += this.stem_direction === Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;\n    }\n\n    const y = this.y;\n\n    L(\"Drawing note head '\", this.note_type, this.duration, \"' at\", head_x, y);\n\n    // Begin and end positions for head.\n    const stem_direction = this.stem_direction;\n    const glyph_font_scale = this.render_options.glyph_font_scale;\n\n    if (this.style) {\n      this.applyStyle(ctx);\n    }\n\n    const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\n    if (this.note_type === 's') {\n      const staveSpace = this.checkStave().getSpacingBetweenLines();\n      drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n    } else {\n      Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\n        font: this.musicFont,\n        category: this.custom_glyph ? `noteHead.custom.${categorySuffix}` : `noteHead.standard.${categorySuffix}`,\n      });\n    }\n\n    if (this.style) {\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\n\nexport class NoteSubGroup extends Modifier {\n  static get CATEGORY() {\n    return 'notesubgroup';\n  }\n\n  // Arrange groups inside a `ModifierContext`\n  static format(groups, state) {\n    if (!groups || groups.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < groups.length; ++i) {\n      const group = groups[i];\n      group.preFormat();\n      width += group.getWidth();\n    }\n\n    state.left_shift += width;\n    return true;\n  }\n\n  constructor(subNotes) {\n    super();\n    this.setAttribute('type', 'NoteSubGroup');\n\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.LEFT;\n    this.subNotes = subNotes;\n    this.subNotes.forEach((subNote) => {\n      subNote.ignore_ticks = false;\n    });\n    this.width = 0;\n    this.preFormatted = false;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.voice.addTickables(this.subNotes);\n\n    return this;\n  }\n\n  getCategory() {\n    return NoteSubGroup.CATEGORY;\n  }\n\n  preFormat() {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  setNote(note) {\n    this.note = note;\n  }\n  setWidth(width) {\n    this.width = width;\n  }\n  getWidth() {\n    return this.width;\n  }\n\n  draw() {\n    this.checkContext();\n\n    const note = this.getNote();\n\n    if (!(note && this.index !== null)) {\n      throw new Vex.RuntimeError('NoAttachedNote', \"Can't draw notes without a parent note and parent note index.\");\n    }\n\n    this.setRendered();\n    this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n\n    // Draw notes\n    this.subNotes.forEach((subNote) => subNote.setContext(this.context).drawWithStyle());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements ornaments as modifiers that can be\n// attached to notes. The complete list of ornaments is available in\n// `tables.js` under `Vex.Flow.ornamentCodes`.\n//\n// See `tests/ornament_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { TickContext } from './tickcontext';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`.\nfunction L(...args) {\n  if (Ornament.DEBUG) Vex.L('Vex.Flow.Ornament', args);\n}\n\nexport class Ornament extends Modifier {\n  static get CATEGORY() {\n    return 'ornaments';\n  }\n\n  // ## Static Methods\n  // Arrange ornaments inside `ModifierContext`\n  static format(ornaments, state) {\n    if (!ornaments || ornaments.length === 0) return false;\n\n    let width = 0; // width is used by ornaments, which are always centered on the note head\n    let right_shift = state.right_shift; // jazz ornaments calculate r/l shift separately\n    let left_shift = state.left_shift;\n    let yOffset = 0;\n\n    for (let i = 0; i < ornaments.length; ++i) {\n      const ornament = ornaments[i];\n      const increment = 2;\n\n      if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {\n        ornament.x_shift += right_shift + 2;\n      }\n      if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {\n        ornament.x_shift -= left_shift + 2;\n      }\n      if (ornament.reportedWidth && ornament.x_shift < 0) {\n        left_shift += ornament.reportedWidth;\n      } else if (ornament.reportedWidth && ornament.x_shift > 0) {\n        right_shift += ornament.reportedWidth;\n      } else {\n        width = Math.max(ornament.getWidth(), width);\n      }\n      // articulations above/below the line can be stacked.\n      if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {\n        // Unfortunately we don't know the stem direction.  So we base it\n        // on the line number, but also allow it to be overridden.\n        if (ornament.note.getLineNumber() >= 3 || ornament.getPosition() === Modifier.Position.ABOVE) {\n          state.top_text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset -= ornament.glyph.bbox.h;\n        } else {\n          state.text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset += ornament.glyph.bbox.h;\n        }\n      } else {\n        if (ornament.getPosition() === Modifier.Position.ABOVE) {\n          ornament.setTextLine(state.top_text_line);\n          state.top_text_line += increment;\n        } else {\n          ornament.setTextLine(state.text_line);\n          state.text_line += increment;\n        }\n      }\n    }\n\n    // Note: 'legit' ornaments don't consider other modifiers when calculating their\n    // X position, but jazz ornaments sometimes need to.\n    state.left_shift = left_shift + width / 2;\n    state.right_shift = right_shift + width / 2;\n    return true;\n  }\n\n  // ### ornamentNoteTransition\n  // means the jazz ornament represents an effect from one note to another,\n  // these are generally on the top of the staff.\n  static get ornamentNoteTransition() {\n    return ['flip', 'jazzTurn', 'smear'];\n  }\n\n  // ### ornamentAttack\n  // Indicates something that happens in the attach, placed before the note and\n  // any accidentals\n  static get ornamentAttack() {\n    return ['scoop'];\n  }\n\n  // ### ornamentAlignWithNoteHead\n  // The ornament is aligned based on the note head, but without regard to whether the\n  // stem goes up or down.\n  static get ornamentAlignWithNoteHead() {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];\n  }\n\n  // ### ornamentRelease\n  // An ornament that happens on the release of the note, generally placed after the\n  // note and overlapping the next beat/measure..\n  static get ornamentRelease() {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n  }\n\n  // ### ornamentArticulation\n  // goes above/below the note based on space availablity\n  static get ornamentArticulation() {\n    return ['bend', 'plungerClosed', 'plungerOpen'];\n  }\n\n  // ### getMetrics\n  // legacy ornaments have hard-coded metrics.  If additional ornament types are\n  // added, get their metrics here.\n  getMetrics() {\n    return this.getFontStack()[0].metrics.glyphs.jazzOrnaments[this.ornament.code];\n  }\n\n  // Create a new ornament of type `type`, which is an entry in\n  // `Vex.Flow.ornamentCodes` in `tables.js`.\n  constructor(type) {\n    super();\n    this.setAttribute('type', 'Ornament');\n\n    this.note = null;\n    this.index = null;\n    this.type = type;\n    this.delayed = false;\n\n    this.accidentalUpper = null;\n    this.accidentalLower = null;\n\n    this.render_options = {\n      font_scale: 38,\n      accidentalLowerPadding: 3,\n      accidentalUpperPadding: 3,\n    };\n\n    this.ornament = Flow.ornamentCodes(this.type);\n\n    // new ornaments have their origin at the origin, and have more specific\n    // metrics.  Legacy ornaments do some\n    // x scaling, and have hard-coded metrics\n    const metrics = this.getMetrics();\n\n    // some jazz ornaments are above or below depending on stem direction.\n    this.adjustForStemDirection = false;\n\n    // some jazz ornaments like falls are supposed to overlap with future bars\n    // and so we report a different width than they actually take up.\n    this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;\n\n    this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;\n\n    this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n\n    if (!this.ornament) {\n      throw new Vex.RERR('ArgumentError', `Ornament not found: '${this.type}'`);\n    }\n\n    this.x_shift = metrics ? metrics.xOffset : 0;\n    this.y_shift = metrics ? metrics.yOffset : 0;\n\n    this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale, {\n      category: `ornament.${this.ornament.code}`,\n    });\n\n    // Is this a jazz ornament that goes between this note and the next note.\n    if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      this.delayed = true;\n    }\n\n    // Legacy ornaments need this.  I don't know why, but horizontal spacing issues\n    // happen if I don't set it.\n    if (!metrics) {\n      this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\n    }\n  }\n\n  getCategory() {\n    return Ornament.CATEGORY;\n  }\n\n  // Set whether the ornament is to be delayed\n  setDelayed(delayed) {\n    this.delayed = delayed;\n    return this;\n  }\n\n  // Set the upper accidental for the ornament\n  setUpperAccidental(accid) {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalUpper = new Glyph(Flow.accidentalCodes(accid).code, scale);\n    this.accidentalUpper.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  // Set the lower accidental for the ornament\n  setLowerAccidental(accid) {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalLower = new Glyph(Flow.accidentalCodes(accid).code, scale);\n    this.accidentalLower.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  // Render ornament in position next to note.\n  draw() {\n    this.checkContext();\n\n    if (!this.note || this.index == null) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Ornament without a note and index.\");\n    }\n\n    this.setRendered();\n\n    const ctx = this.context;\n    const stemDir = this.note.getStemDirection();\n    const stave = this.note.getStave();\n\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    this.context.openGroup(classString, this.getAttribute('id'));\n\n    // Get stem extents\n    const stemExtents = this.note.getStem().getExtents();\n    let y = stemDir === StaveNote.STEM_DOWN ? stemExtents.baseY : stemExtents.topY;\n\n    // TabNotes don't have stems attached to them. Tab stems are rendered\n    // outside the stave.\n    if (this.note.getCategory() === 'tabnotes') {\n      if (this.note.hasStem()) {\n        if (stemDir === StaveNote.STEM_DOWN) {\n          y = stave.getYForTopText(this.text_line);\n        }\n      } else {\n        // Without a stem\n        y = stave.getYForTopText(this.text_line);\n      }\n    }\n\n    const isPlacedOnNoteheadSide = stemDir === StaveNote.STEM_DOWN;\n    const spacing = stave.getSpacingBetweenLines();\n    let lineSpacing = 1;\n\n    // Beamed stems are longer than quarter note stems, adjust accordingly\n    if (!isPlacedOnNoteheadSide && this.note.beam) {\n      lineSpacing += 0.5;\n    }\n\n    const totalSpacing = spacing * (this.text_line + lineSpacing);\n    const glyphYBetweenLines = y - totalSpacing;\n\n    // Get initial coordinates for the modifier position\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let glyphX = start.x;\n\n    // If the ornament is aligned with the note head, don't consider the stave y\n    // but use the 'natural' modifier y\n    let glyphY = this.ornamentAlignWithNoteHead\n      ? start.y\n      : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n    glyphY += this.y_shift;\n\n    // Ajdust x position if ornament is delayed\n    if (this.delayed) {\n      let delayXShift = 0;\n      const startX = glyphX - (stave.getX() - 10);\n      if (this.delayXShift !== undefined) {\n        delayXShift = this.delayXShift;\n      } else {\n        delayXShift += this.glyph.getMetrics().width / 2;\n        const nextContext = TickContext.getNextContext(this.note.getTickContext());\n        if (nextContext) {\n          delayXShift += (nextContext.getX() - startX) * 0.5;\n        } else {\n          delayXShift += (stave.x + stave.width - startX) * 0.5;\n        }\n        this.delayXShift = delayXShift;\n      }\n      glyphX += delayXShift;\n    }\n\n    L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n\n    if (this.accidentalLower) {\n      this.accidentalLower.render(ctx, glyphX, glyphY);\n      glyphY -= this.accidentalLower.getMetrics().height;\n      glyphY -= this.render_options.accidentalLowerPadding;\n    }\n\n    if (this.stemUpYOffset && this.note.hasStem() && this.note.getStemDirection() === 1) {\n      glyphY += this.stemUpYOffset;\n    }\n    if (this.note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      glyphY = this.note.getStave().getBoundingBox().y + 40;\n    }\n\n    this.glyph.render(ctx, glyphX + this.x_shift, glyphY);\n\n    if (this.accidentalUpper) {\n      glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;\n      this.accidentalUpper.render(ctx, glyphX, glyphY);\n    }\n    this.context.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// A generic text parsing class for VexFlow.\n\nimport { Vex } from './vex';\nimport { Grammar } from './easyscore';\n\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (Parser.DEBUG) Vex.L('Vex.Flow.Parser', args);\n}\n\nconst X = Vex.MakeException('ParserError');\n\nconst NO_ERROR_POS = -1;\n\nexport type Match = string | Match[] | null;\nexport type RuleFunction = () => Rule;\nexport type TriggerFunction = (state?: { matches: Match[] }) => void;\n\nexport interface Rule {\n  // Lexer Rules\n  token?: string; // The token property is a string that is compiled into a RegExp.\n  noSpace?: boolean;\n\n  // Parser Rules\n  expect?: RuleFunction[];\n  zeroOrMore?: boolean;\n  oneOrMore?: boolean;\n  maybe?: boolean;\n  or?: boolean;\n  run?: TriggerFunction;\n}\n\nexport interface Result {\n  success: boolean;\n\n  // Lexer Results\n  pos?: number;\n  incrementPos?: number;\n  matchedString?: string;\n\n  // Parser Results\n  matches?: Match[];\n  numMatches?: number;\n  results?: GroupedResults;\n  errorPos?: number; // Set to NO_ERROR if successful. N if there is an error in the string.\n}\n\n// Represents a mixed array containing Result and/or Result[].\n// The grouping is determined by the structure of the Grammar.\ntype GroupedResults = (Result | Result[])[];\n\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r: Result | Result[]): Match {\n  if ('matchedString' in r) return r.matchedString as string; // string\n  if ('results' in r) return flattenMatches(r.results as Result[]);\n  const results = r as Result[];\n  if (results.length === 1) return flattenMatches(results[0]);\n  if (results.length === 0) return null;\n  return results.map(flattenMatches); // nested array\n}\n\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n  static DEBUG: boolean = false;\n\n  protected grammar: Grammar;\n\n  protected line: string; // Use RegExp to extract tokens from this line.\n  protected pos: number;\n  protected errorPos: number;\n\n  // For an example of a simple grammar, take a look at tests/parser_tests.js or\n  // the EasyScore grammar in easyscore.ts.\n  constructor(grammar: Grammar) {\n    this.grammar = grammar;\n    this.line = '';\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Parse `line` using current grammar. Returns `{success: true}` if the\n  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n  // where `errorPos` is the location of the error in the string.\n  parse(line: string): Result {\n    this.line = line;\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n    const result = this.expect(this.grammar.begin());\n    result.errorPos = this.errorPos;\n    return result;\n  }\n\n  matchFail(returnPos: number): void {\n    if (this.errorPos === NO_ERROR_POS) this.errorPos = this.pos;\n    this.pos = returnPos;\n  }\n\n  matchSuccess(): void {\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Look for `token` in this.line[this.pos], and return success\n  // if one is found. `token` is specified as a regular expression.\n  matchToken(token: string, noSpace: boolean = false): Result {\n    const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n    const workingLine = this.line.slice(this.pos);\n    const result = workingLine.match(regexp);\n    if (result !== null) {\n      return {\n        success: true,\n        matchedString: result[2],\n        incrementPos: result[1].length,\n        pos: this.pos,\n      };\n    } else {\n      return {\n        success: false,\n        pos: this.pos,\n      };\n    }\n  }\n\n  // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n  // set, then return success even if the token is not found, but reset\n  // the position before exiting.\n  // TODO: expectOne(...) is never called with the `maybe` parameter.\n  expectOne(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n\n    let allMatches = true;\n    let oneMatch = false;\n    maybe = maybe === true || rule.maybe === true;\n\n    // Execute all sub rules in sequence.\n    if (rule.expect) {\n      for (const next of rule.expect) {\n        const localPos = this.pos;\n        const result = this.expect(next);\n\n        // If `rule.or` is set, then return success if any one\n        // of the subrules match, else all subrules must match.\n        if (result.success) {\n          results.push(result);\n          oneMatch = true;\n          if (rule.or) break;\n        } else {\n          allMatches = false;\n          if (!rule.or) {\n            this.pos = localPos;\n            break;\n          }\n        }\n      }\n    }\n\n    const gotOne = (rule.or && oneMatch) || allMatches;\n    const success = gotOne || maybe === true;\n    const numMatches = gotOne ? 1 : 0;\n    if (maybe && !gotOne) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n  // then a failed match is also a success (but the position is reset).\n  expectOneOrMore(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n    let numMatches = 0;\n    let more = true;\n\n    do {\n      const result = this.expectOne(rule);\n      if (result.success && result.results) {\n        numMatches++;\n        results.push(result.results as Result[]);\n      } else {\n        more = false;\n      }\n    } while (more);\n\n    const success = numMatches > 0 || maybe === true;\n    if (maybe && !(numMatches > 0)) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n  expectZeroOrMore(rule: Rule): Result {\n    return this.expectOneOrMore(rule, true);\n  }\n\n  // Execute the rule produced by the provided `rules` function. This\n  // offloads to one of the above matchers and consolidates the results. It is also\n  // responsible for executing any code triggered by the rule (in `rule.run`.)\n  expect(ruleFunc: RuleFunction): Result {\n    L('Evaluating rule function:', ruleFunc);\n    if (!ruleFunc) {\n      throw new X('Invalid rule function: ' + ruleFunc, ruleFunc);\n    }\n    let result: Result;\n\n    // Get rule from Grammar class.\n    // expect(...) handles both lexing & parsing:\n    // - lexer rules produce tokens.\n    // - parser rules produce expressions which may trigger code via the\n    //   { run: () => ... } trigger functions in easyscore.ts.\n    //   These functions build the VexFlow objects that are displayed on screen.\n    const rule: Rule = ruleFunc.bind(this.grammar)();\n    if (rule.token) {\n      // A lexer rule has a `token` property.\n      // Base case: parse the regex and throw an error if the\n      // line doesn't match.\n      result = this.matchToken(rule.token, rule.noSpace === true);\n      if (result.success) {\n        // Token match! Update position and throw away parsed portion\n        // of string.\n        this.pos += result.incrementPos as number;\n      }\n    } else if (rule.expect) {\n      // A parser rule has an `expect` property.\n      if (rule.oneOrMore) {\n        result = this.expectOneOrMore(rule);\n      } else if (rule.zeroOrMore) {\n        result = this.expectZeroOrMore(rule);\n      } else {\n        result = this.expectOne(rule);\n      }\n    } else {\n      throw new X('Bad grammar! No `token` or `expect` property', rule);\n    }\n\n    // If there's a trigger attached to this rule, then run it.\n    // Make the matches accessible through `state.matches` in the\n    // `run: (state) => ...` trigger.\n    const matches: Match[] = [];\n    result.matches = matches;\n    if (result.results) {\n      result.results.forEach((r) => {\n        matches.push(flattenMatches(r));\n      });\n    }\n    if (rule.run && result.success) {\n      rule.run({ matches });\n    }\n    return result;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements different types of pedal markings. These notation\n// elements indicate to the performer when to depress and release the a pedal.\n//\n// In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n// custom text for the release/depress pedal markings.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { FontInfo, RenderContext } from './types/common';\nimport { StaveNote } from './stavenote';\n\n// To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (PedalMarking.DEBUG) Vex.L('Vex.Flow.PedalMarking', args);\n}\n\n// Draws a pedal glyph with the provided `name` on a rendering `context`\n// at the coordinates `x` and `y. Takes into account the glyph data\n// coordinate shifts.\nfunction drawPedalGlyph(name: string, context: RenderContext, x: number, y: number, point: number) {\n  const glyph_data = PedalMarking.GLYPHS[name];\n  const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\n  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n\nexport class PedalMarking extends Element {\n  static DEBUG: boolean;\n\n  protected line: number;\n  protected type: number;\n  protected custom_depress_text: string;\n  protected custom_release_text: string;\n  protected render_options: {\n    color: string;\n    bracket_height: number;\n    text_margin_right: number;\n    bracket_line_width: number;\n  };\n  protected font: FontInfo;\n  protected notes: StaveNote[];\n\n  // Glyph data\n  static readonly GLYPHS: Record<string, { code: string; y_shift: number; x_shift: number }> = {\n    pedal_depress: {\n      code: 'keyboardPedalPed',\n      x_shift: -10,\n      y_shift: 0,\n    },\n    pedal_release: {\n      code: 'keyboardPedalUp',\n      x_shift: -2,\n      y_shift: 3,\n    },\n  };\n\n  static readonly type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n  };\n\n  static readonly typeString: Record<string, number> = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n  };\n\n  setType(type: string | number): this {\n    type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n\n    if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  // Create a sustain pedal marking. Returns the defaults PedalMarking.\n  // Which uses the traditional \"Ped\" and \"*\"\" markings.\n  static createSustain(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    return pedal;\n  }\n\n  // Create a sostenuto pedal marking\n  static createSostenuto(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.MIXED);\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n  }\n\n  // Create an una corda pedal marking\n  static createUnaCorda(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.TEXT);\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n  }\n\n  // ## Prototype Methods\n  constructor(notes: StaveNote[]) {\n    super();\n    this.setAttribute('type', 'PedalMarking');\n\n    this.notes = notes;\n    this.type = PedalMarking.type.TEXT;\n    this.line = 0;\n\n    // Custom text for the release/depress markings\n    this.custom_depress_text = '';\n    this.custom_release_text = '';\n\n    this.font = {\n      family: 'Times New Roman',\n      size: 12,\n      weight: 'italic bold',\n    };\n\n    this.render_options = {\n      bracket_height: 10,\n      text_margin_right: 6,\n      bracket_line_width: 1,\n      color: 'black',\n    };\n  }\n\n  // Set custom text for the `depress`/`release` pedal markings. No text is\n  // set if the parameter is falsy.\n  setCustomText(depress: string, release?: string): this {\n    this.custom_depress_text = depress || '';\n    this.custom_release_text = release || '';\n    return this;\n  }\n\n  // Set the staff line to render the markings on\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Draw the bracket based pedal markings\n  drawBracketed(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n    let prev_x: number;\n    let prev_y: number;\n\n    // Iterate through each note\n    this.notes.forEach((note, index, notes) => {\n      // Each note triggers the opposite pedal action\n      is_pedal_depressed = !is_pedal_depressed;\n\n      // Get the initial coordinates for the note\n      const x = note.getAbsoluteX();\n      const y = note.checkStave().getYForBottomText(this.line + 3);\n\n      // Throw if current note is positioned before the previous note\n      if (x < prev_x) {\n        throw new Vex.RERR('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n      }\n\n      // Determine if the previous or next note are the same\n      // as the current note. We need to keep track of this for\n      // when adjustments are made for the release+depress action\n      const next_is_same = notes[index + 1] === note;\n      const prev_is_same = notes[index - 1] === note;\n\n      let x_shift = 0;\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      if (is_pedal_depressed) {\n        // Adjustment for release+depress\n        x_shift = prev_is_same ? 5 : 0;\n\n        if (this.type === PedalMarking.type.MIXED && !prev_is_same) {\n          // For MIXED style, start with text instead of bracket\n          if (this.custom_depress_text) {\n            // If we have custom text, use instead of the default \"Ped\" glyph\n            const text_width = ctx.measureText(this.custom_depress_text).width;\n            ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n            x_shift = text_width / 2 + this.render_options.text_margin_right;\n          } else {\n            // Render the Ped glyph in position\n            drawPedalGlyph('pedal_depress', ctx, x, y, point);\n            x_shift = 20 + this.render_options.text_margin_right;\n          }\n        } else {\n          // Draw start bracket\n          ctx.beginPath();\n          ctx.moveTo(x, y - this.render_options.bracket_height);\n          ctx.lineTo(x + x_shift, y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      } else {\n        // Adjustment for release+depress\n        x_shift = next_is_same ? -5 : 0;\n\n        // Draw end bracket\n        ctx.beginPath();\n        ctx.moveTo(prev_x, prev_y);\n        ctx.lineTo(x + x_shift, y);\n        ctx.lineTo(x, y - this.render_options.bracket_height);\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      // Store previous coordinates\n      prev_x = x + x_shift;\n      prev_y = y;\n    });\n  }\n\n  // Draw the text based pedal markings. This defaults to the traditional\n  // \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n  drawText(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n\n    // Iterate through each note, placing glyphs or custom text accordingly\n    this.notes.forEach((note) => {\n      is_pedal_depressed = !is_pedal_depressed;\n      const stave = note.checkStave();\n      const x = note.getAbsoluteX();\n      const y = stave.getYForBottomText(this.line + 3);\n\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      let text_width = 0;\n      if (is_pedal_depressed) {\n        if (this.custom_depress_text) {\n          text_width = ctx.measureText(this.custom_depress_text).width;\n          ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_depress', ctx, x, y, point);\n        }\n      } else {\n        if (this.custom_release_text) {\n          text_width = ctx.measureText(this.custom_release_text).width;\n          ctx.fillText(this.custom_release_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_release', ctx, x, y, point);\n        }\n      }\n    });\n  }\n\n  // Render the pedal marking in position on the rendering context\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setStrokeStyle(this.render_options.color);\n    ctx.setFillStyle(this.render_options.color);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    L('Rendering Pedal Marking');\n\n    if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n      ctx.setLineWidth(this.render_options.bracket_line_width);\n      this.drawBracketed();\n    } else if (this.type === PedalMarking.type.TEXT) {\n      this.drawText();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A rendering context for the Raphael backend.\n//\n// ## Warning: Deprecated for SVGContext\n// Except in instances where SVG support for IE < 9.0 is\n// needed, SVGContext is recommended.\n\nexport class RaphaelContext {\n  constructor(element) {\n    this.element = element;\n    this.paper = Raphael(element); // eslint-disable-line\n    this.path = '';\n    this.pen = { x: 0, y: 0 };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      font_family: 'Arial',\n      font_size: 8,\n      font_weight: 800,\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      fill: 'black',\n      stroke: 'black',\n      font: '10pt Arial',\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      fill: 'white',\n      stroke: 'white',\n      font: '10pt Arial',\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n  }\n\n  // Containers not implemented\n  openGroup() {}\n  closeGroup() {}\n  add() {}\n\n  setFont(family, size, weight) {\n    this.state.font_family = family;\n    this.state.font_size = size;\n    this.state.font_weight = weight;\n    this.attributes.font =\n      (this.state.font_weight || '') + ' ' + this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.attributes.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  }\n\n  // Empty because there is no equivalent in SVG\n  setLineDash() {\n    return this;\n  }\n  setLineCap() {\n    return this;\n  }\n\n  scale(x, y) {\n    this.state.scale = { x, y };\n    // The scale() method is deprecated as of Raphael.JS 2.0, and\n    // can no longer be used as an option in an Element.attr() call.\n    // It is preserved here for users running earlier versions of\n    // Raphael.JS, though it has no effect on the SVG output in\n    // Raphael 2 and higher.\n    this.attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.attributes.scale = x + ',' + y + ',0,0';\n    this.attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;\n    this.background_attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.background_attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;\n    return this;\n  }\n\n  clear() {\n    this.paper.clear();\n  }\n\n  resize(width, height) {\n    this.element.style.width = width;\n    this.paper.setSize(width, height);\n    return this;\n  }\n\n  // Sets the SVG `viewBox` property, which results in auto scaling images when its container\n  // is resized.\n  //\n  // Usage: `ctx.setViewBox(\"0 0 600 400\")`\n  setViewBox(viewBox) {\n    this.paper.canvas.setAttribute('viewBox', viewBox);\n  }\n\n  rect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper\n      .rect(x, y, width - 0.5, height - 0.5)\n      .attr(this.attributes)\n      .attr('fill', 'none')\n      .attr('stroke-width', this.lineWidth);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.background_attributes);\n    return this;\n  }\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = 0;\n    this.pen.y = 0;\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' + x1 + ',' + y1 + ',' + x2 + ',' + y2 + ',' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' + x1 + ',' + y1 + ',' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n    } else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n    if (antiClockwise) {\n      sweepFlag = 1;\n      if (endAngle - startAngle < Math.PI) {\n        largeArcFlag = 1;\n      }\n    } else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path +=\n      'M' +\n      x1 +\n      ',' +\n      y1 +\n      ',A' +\n      radius +\n      ',' +\n      radius +\n      ',0,' +\n      largeArcFlag +\n      ',' +\n      sweepFlag +\n      ',' +\n      x2 +\n      ',' +\n      y2 +\n      'M' +\n      this.pen.x +\n      ',' +\n      this.pen.y;\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    const out = this.paper.set();\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n      for (let i = 1; i <= num_paths; i++) {\n        out.push(\n          this.paper.path(this.path).attr({\n            stroke: sa.color,\n            'stroke-linejoin': 'round',\n            'stroke-linecap': 'round',\n            'stroke-width': +((sa.width / num_paths) * i).toFixed(3),\n            opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n            // See note in this.scale(): In Raphael the scale() method\n            // is deprecated and removed as of Raphael 2.0 and replaced\n            // by the transform() method.  It is preserved here for\n            // users with earlier versions of Raphael, but has no effect\n            // on the output SVG in Raphael 2.0+.\n            transform: this.attributes.transform,\n            scale: this.attributes.scale,\n          })\n        );\n      }\n    }\n    return out;\n  }\n\n  fill() {\n    const elem = this.paper.path(this.path).attr(this.attributes).attr('stroke-width', 0);\n    this.glow(elem);\n    return this;\n  }\n\n  stroke() {\n    // The first line of code below is, unfortunately, a bit of a hack:\n    // Raphael's transform() scaling does not scale the stroke-width, so\n    // in order to scale a stroke, we have to manually scale the\n    // stroke-width.\n    //\n    // This works well so long as the X & Y states for this.scale() are\n    // relatively similar.  However, if they are very different, we\n    // would expect horizontal and vertical lines to have different\n    // stroke-widths.\n    //\n    // In the future, if we want to support very divergent values for\n    // horizontal and vertical scaling, we may want to consider\n    // implementing SVG scaling with properties of the SVG viewBox &\n    // viewPort and removing it entirely from the Element.attr() calls.\n    // This would more closely parallel the approach taken in\n    // canvascontext.js as well.\n\n    const strokeWidth = (this.lineWidth * (this.state.scale.x + this.state.scale.y)) / 2;\n    const elem = this.paper\n      .path(this.path)\n      .attr(this.attributes)\n      .attr('fill', 'none')\n      .attr('stroke-width', strokeWidth);\n    this.glow(elem);\n    return this;\n  }\n\n  closePath() {\n    this.path += 'Z';\n    return this;\n  }\n\n  measureText(text) {\n    const txt = this.paper.text(0, 0, text).attr(this.attributes).attr('fill', 'none').attr('stroke', 'none');\n    const bounds = txt.getBBox();\n    txt.remove();\n\n    return {\n      width: bounds.width,\n      height: bounds.height,\n    };\n  }\n\n  fillText(text, x, y) {\n    this.paper\n      .text(x + this.measureText(text).width / 2, y - this.state.font_size / (2.25 * this.state.scale.y), text)\n      .attr(this.attributes);\n\n    return this;\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        font_family: this.state.font_family,\n      },\n      attributes: {\n        font: this.attributes.font,\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state.font_family = state.state.font_family;\n    this.attributes.font = state.attributes.font;\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\n\nconst X = Vex.MakeException('RegistryError');\n\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n  // [attribute_name][attribute_value][element_id] => Element\n  [key: string]: { [key: string]: { [key: string]: Element } };\n  constructor() {\n    this.id = {};\n    this.type = {};\n    this.class = {};\n  }\n}\n\ninterface RegistryUpdate {\n  id: string;\n  name: string;\n  value: string | undefined;\n  oldValue: string | undefined;\n}\n\nexport class Registry {\n  private static defaultRegistry?: Registry;\n\n  static getDefaultRegistry(): Registry | undefined {\n    return Registry.defaultRegistry;\n  }\n\n  // If you call `enableDefaultRegistry`, any new elements will auto-register with\n  // the provided registry as soon as they're constructed.\n  static enableDefaultRegistry(registry: Registry): void {\n    Registry.defaultRegistry = registry;\n  }\n\n  static disableDefaultRegistry(): void {\n    Registry.defaultRegistry = undefined;\n  }\n\n  protected index: Index;\n\n  constructor() {\n    this.index = new Index();\n  }\n\n  clear(): this {\n    this.index = new Index();\n    return this;\n  }\n\n  setIndexValue(name: string, value: string, id: string, elem: Element): void {\n    const index = this.index;\n    if (!index[name][value]) {\n      index[name][value] = {};\n    }\n    index[name][value][id] = elem;\n  }\n\n  // Updates the indexes for element 'id'. If an element's attribute changes\n  // from A -> B, make sure to remove the element from A.\n  updateIndex({ id, name, value, oldValue }: RegistryUpdate): void {\n    const elem = this.getElementById(id);\n    if (oldValue !== undefined && this.index[name][oldValue]) {\n      delete this.index[name][oldValue][id];\n    }\n    if (value && elem) {\n      this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n    }\n  }\n\n  // Register element `elem` with this registry. This adds the element to its index and watches\n  // it for attribute changes.\n  register(elem: Element, id?: string): this {\n    id = id || elem.getAttribute('id');\n    if (!id) {\n      throw new X(\"Can't add element without `id` attribute to registry\", elem);\n    }\n\n    // Manually add id to index, then update other indexes.\n    elem.setAttribute('id', id);\n    this.setIndexValue('id', id, id, elem);\n    this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n    elem.onRegister(this);\n    return this;\n  }\n\n  getElementById(id: string): Element | undefined {\n    return this.index.id?.[id]?.[id]; // return undefined if the id is not found.\n  }\n\n  getElementsByAttribute(attribute: string, value: string): Element[] {\n    const index_attr = this.index[attribute];\n    if (index_attr) {\n      const index_attr_val = index_attr[value];\n      if (index_attr_val) {\n        const keys = Object.keys(index_attr_val);\n        return keys.map((k) => index_attr_val[k]);\n      }\n    }\n    return [];\n  }\n\n  getElementsByType(type: string): Element[] {\n    return this.getElementsByAttribute('type', type);\n  }\n\n  getElementsByClass(className: string): Element[] {\n    return this.getElementsByAttribute('class', className);\n  }\n\n  // This is called by the element when an attribute value changes. If an indexed\n  // attribute changes, then update the local index.\n  onUpdate(info: RegistryUpdate): this {\n    const allowedNames = ['id', 'type', 'class'];\n    if (allowedNames.includes(info.name)) {\n      this.updateIndex(info);\n    }\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Support for different rendering contexts: Canvas, Raphael\n\nimport { CanvasContext } from './canvascontext';\nimport { RaphaelContext } from './raphaelcontext';\nimport { SVGContext } from './svgcontext';\nimport { Vex } from './vex';\n\nlet lastContext = null;\n\nexport class Renderer {\n  static get Backends() {\n    return {\n      CANVAS: 1,\n      RAPHAEL: 2,\n      SVG: 3,\n      VML: 4,\n    };\n  }\n\n  // End of line types\n  static get LineEndType() {\n    return {\n      NONE: 1, // No leg\n      UP: 2, // Upward leg\n      DOWN: 3, // Downward leg\n    };\n  }\n\n  // Set this to true if you're using VexFlow inside a runtime\n  // that does not allow modifiying canvas objects. There is a small\n  // performance degradation due to the extra indirection.\n  static get USE_CANVAS_PROXY() {\n    return false;\n  }\n\n  static get lastContext() {\n    return lastContext;\n  }\n  static set lastContext(ctx) {\n    lastContext = ctx;\n  }\n\n  static buildContext(elementId, backend, width, height, background) {\n    const renderer = new Renderer(elementId, backend);\n    if (width && height) {\n      renderer.resize(width, height);\n    }\n\n    if (!background) background = '#FFF';\n    const ctx = renderer.getContext();\n    ctx.setBackgroundFillStyle(background);\n    Renderer.lastContext = ctx;\n    return ctx;\n  }\n\n  static getCanvasContext(elementId, width, height, background) {\n    return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n  }\n\n  static getRaphaelContext(elementId, width, height, background) {\n    return Renderer.buildContext(elementId, Renderer.Backends.RAPHAEL, width, height, background);\n  }\n\n  static getSVGContext(elementId, width, height, background) {\n    return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n  }\n\n  static bolsterCanvasContext(ctx) {\n    if (Renderer.USE_CANVAS_PROXY) {\n      return new CanvasContext(ctx);\n    }\n\n    const methodNames = [\n      'clear',\n      'setFont',\n      'setRawFont',\n      'setFillStyle',\n      'setBackgroundFillStyle',\n      'setStrokeStyle',\n      'setShadowColor',\n      'setShadowBlur',\n      'setLineWidth',\n      'setLineCap',\n      'setLineDash',\n      'openGroup',\n      'closeGroup',\n      'getGroup',\n    ];\n\n    ctx.vexFlowCanvasContext = ctx;\n\n    methodNames.forEach((methodName) => {\n      ctx[methodName] = ctx[methodName] || CanvasContext.prototype[methodName];\n    });\n\n    return ctx;\n  }\n\n  // Draw a dashed line (horizontal, vertical or diagonal\n  // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n  // setting the second number to 0 draws a solid line.\n  static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n    context.beginPath();\n\n    const dx = toX - fromX;\n    const dy = toY - fromY;\n    const angle = Math.atan2(dy, dx);\n    let x = fromX;\n    let y = fromY;\n    context.moveTo(fromX, fromY);\n    let idx = 0;\n    let draw = true;\n    while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n      const dashLength = dashPattern[idx++ % dashPattern.length];\n      const nx = x + Math.cos(angle) * dashLength;\n      x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n      const ny = y + Math.sin(angle) * dashLength;\n      y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n      if (draw) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n      draw = !draw;\n    }\n\n    context.closePath();\n    context.stroke();\n  }\n\n  constructor(elementId, backend) {\n    this.elementId = elementId;\n    if (!this.elementId) {\n      throw new Vex.RERR('BadArgument', 'Invalid id for renderer.');\n    }\n\n    this.element = document.getElementById(elementId);\n    if (!this.element) this.element = elementId;\n\n    // Verify backend and create context\n    this.ctx = null;\n    this.paper = null;\n    this.backend = backend;\n    if (this.backend === Renderer.Backends.CANVAS) {\n      // Create context.\n      if (!this.element.getContext) {\n        throw new Vex.RERR('BadElement', `Can't get canvas context from element: ${elementId}`);\n      }\n      this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));\n    } else if (this.backend === Renderer.Backends.RAPHAEL) {\n      this.ctx = new RaphaelContext(this.element);\n    } else if (this.backend === Renderer.Backends.SVG) {\n      this.ctx = new SVGContext(this.element);\n    } else {\n      throw new Vex.RERR('InvalidBackend', `No support for backend: ${this.backend}`);\n    }\n  }\n\n  resize(width, height) {\n    if (this.backend === Renderer.Backends.CANVAS) {\n      if (!this.element.getContext) {\n        throw new Vex.RERR('BadElement', `Can't get canvas context from element: ${this.elementId}`);\n      }\n      [width, height] = CanvasContext.SanitizeCanvasDims(width, height);\n\n      const devicePixelRatio = window.devicePixelRatio || 1;\n\n      this.element.width = width * devicePixelRatio;\n      this.element.height = height * devicePixelRatio;\n      this.element.style.width = width + 'px';\n      this.element.style.height = height + 'px';\n\n      this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));\n      this.ctx.scale(devicePixelRatio, devicePixelRatio);\n    } else {\n      this.ctx.resize(width, height);\n    }\n\n    return this;\n  }\n\n  getContext() {\n    return this.ctx;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { GlyphNote } from './glyphnote';\nimport { Glyph } from './glyph';\nimport { NoteStruct } from './note';\nimport { GlyphNoteOptions } from './glyphnote';\n\nexport class RepeatNote extends GlyphNote {\n  constructor(type: string, noteStruct?: NoteStruct, options?: GlyphNoteOptions) {\n    // Smufl Codes\n    const CODES = {\n      '1': 'repeat1Bar',\n      '2': 'repeat2Bars',\n      '4': 'repeat4Bars',\n      slash: 'repeatBarSlash',\n    } as Record<string, string>;\n\n    super(undefined, { duration: 'q', align_center: type !== 'slash', ...noteStruct }, options);\n    this.setAttribute('type', 'RepeatNote');\n\n    const glyphCode = CODES[type] || 'repeat1Bar';\n    const glyph = new Glyph(glyphCode, this.musicFont.lookupMetric('repeatNote.point', 40), { category: 'repeatNote' });\n    this.setGlyph(glyph);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Element, ElementStyle } from './element';\nimport { Flow } from './tables';\nimport { Barline } from './stavebarline';\nimport { StaveModifier } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { KeySignature } from './keysignature';\nimport { TimeSignature } from './timesignature';\nimport { Volta } from './stavevolta';\nimport { Bounds, FontInfo } from './types/common';\nimport { StaveTempoOptions } from './stavetempo';\n\nexport interface StaveLineConfig {\n  visible: boolean;\n}\n\nexport interface StaveOptions {\n  //[name: string]: any;\n  spacing: number;\n  thickness: number;\n  x_shift: number;\n  y_shift: number;\n  position_end?: number;\n  invert?: boolean;\n  cps?: { x: number; y: number }[];\n  bottom_text_position: number;\n  line_config: StaveLineConfig[];\n  space_below_staff_ln: number;\n  glyph_spacing_px: number;\n  space_above_staff_ln: number;\n  vertical_bar_width: number;\n  fill_style: string;\n  left_bar: boolean;\n  right_bar: boolean;\n  spacing_between_lines_px: number;\n  top_text_position: number;\n  num_lines: number;\n}\n\nexport class Stave extends Element {\n  protected x: number;\n  protected start_x: number;\n  protected clef: string;\n  protected options: StaveOptions;\n  protected endClef?: string;\n  protected width: number;\n  protected height?: number;\n  protected y: number;\n\n  protected formatted: boolean;\n  protected end_x: number;\n  protected measure: number;\n  protected font: FontInfo;\n  protected bounds: Bounds;\n  protected readonly modifiers: StaveModifier[];\n\n  // This is the sum of the padding that normally goes on left + right of a stave during\n  // drawing.  Used to size staves correctly with content width\n  static get defaultPadding() {\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n  }\n\n  constructor(x: number, y: number, width: number, options?: StaveOptions) {\n    super();\n    this.setAttribute('type', 'Stave');\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.formatted = false;\n    this.start_x = x + 5;\n    this.end_x = x + width;\n    this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n    this.measure = 0;\n    this.clef = 'treble';\n    this.endClef = undefined;\n    this.font = {\n      family: 'sans-serif',\n      size: 8,\n      weight: '',\n    };\n    this.options = {\n      spacing: 2,\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      vertical_bar_width: 10, // Width around vertical bar end-marker\n      glyph_spacing_px: 10,\n      num_lines: 5,\n      fill_style: '#999999',\n      left_bar: true, // draw vertical bar on left\n      right_bar: true, // draw vertical bar on right\n      spacing_between_lines_px: Flow.STAVE_LINE_DISTANCE, // in pixels\n      space_above_staff_ln: 4, // in staff lines\n      space_below_staff_ln: 4, // in staff lines\n      top_text_position: 1, // in staff lines\n      bottom_text_position: 4, // in staff lines\n      line_config: [],\n    };\n    this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n    Vex.Merge(this.options, options);\n\n    this.resetLines();\n\n    const BARTYPE = Barline.type;\n    // beg bar\n    this.addModifier(new Barline(this.options.left_bar ? BARTYPE.SINGLE : BARTYPE.NONE));\n    // end bar\n    this.addEndModifier(new Barline(this.options.right_bar ? BARTYPE.SINGLE : BARTYPE.NONE));\n  }\n\n  space(spacing: number): number {\n    return this.options.spacing_between_lines_px * spacing;\n  }\n\n  resetLines(): void {\n    this.options.line_config = [];\n    for (let i = 0; i < this.options.num_lines; i++) {\n      this.options.line_config.push({ visible: true });\n    }\n    this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n    this.options.bottom_text_position = this.options.num_lines;\n  }\n\n  getOptions(): StaveOptions {\n    return this.options;\n  }\n\n  setNoteStartX(x: number): this {\n    if (!this.formatted) this.format();\n\n    this.start_x = x;\n    const begBarline = this.modifiers[0];\n    begBarline.setX(this.start_x - begBarline.getWidth());\n    return this;\n  }\n\n  getNoteStartX(): number {\n    if (!this.formatted) this.format();\n\n    return this.start_x;\n  }\n\n  getNoteEndX(): number {\n    if (!this.formatted) this.format();\n\n    return this.end_x;\n  }\n\n  getTieStartX(): number {\n    return this.start_x;\n  }\n\n  getTieEndX(): number {\n    return this.x + this.width;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  getNumLines(): number {\n    return this.options.num_lines;\n  }\n\n  setNumLines(lines: string): this {\n    this.options.num_lines = parseInt(lines, 10);\n    this.resetLines();\n    return this;\n  }\n\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  getTopLineTopY(): number {\n    return this.getYForLine(0) - Flow.STAVE_LINE_THICKNESS / 2;\n  }\n\n  getBottomLineBottomY(): number {\n    return this.getYForLine(this.getNumLines() - 1) + Flow.STAVE_LINE_THICKNESS / 2;\n  }\n\n  setX(x: number): this {\n    const shift = x - this.x;\n    this.formatted = false;\n    this.x = x;\n    this.start_x += shift;\n    this.end_x += shift;\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const mod = this.modifiers[i];\n      mod.setX(mod.getX() + shift);\n    }\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.formatted = false;\n    this.width = width;\n    this.end_x = this.x + width;\n\n    // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n    // this.modifiers[1].setX(this.end_x);\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getStyle(): ElementStyle {\n    return {\n      fillStyle: this.options.fill_style,\n      strokeStyle: this.options.fill_style, // yes, this is correct for legacy compatibility\n      lineWidth: Flow.STAVE_LINE_THICKNESS,\n      ...(this.style || {}),\n    };\n  }\n\n  setMeasure(measure: number): this {\n    this.measure = measure;\n    return this;\n  }\n\n  /**\n   * Gets the pixels to shift from the beginning of the stave\n   * following the modifier at the provided index\n   * @param  {Number} index The index from which to determine the shift\n   * @return {Number}       The amount of pixels shifted\n   */\n  getModifierXShift(index = 0): number {\n    if (typeof index !== 'number') {\n      throw new Vex.RERR('InvalidIndex', 'Must be of number type');\n    }\n\n    if (!this.formatted) this.format();\n\n    if (this.getModifiers(StaveModifier.Position.BEGIN).length === 1) {\n      return 0;\n    }\n\n    // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n    if (this.modifiers[index].getPosition() === StaveModifier.Position.RIGHT) {\n      return 0;\n    }\n\n    let start_x = this.start_x - this.x;\n    const begBarline = this.modifiers[0] as Barline;\n    if (begBarline.getType() === Barline.type.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n      start_x -= begBarline.getWidth();\n    }\n\n    return start_x;\n  }\n\n  // Coda & Segno Symbol functions\n  setRepetitionTypeLeft(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  setRepetitionTypeRight(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  // Volta functions\n  setVoltaType(type: number, number_t: string, y: number): this {\n    this.modifiers.push(new Volta(type, number_t, this.x, y));\n    return this;\n  }\n\n  // Section functions\n  setSection(section: string, y: number): this {\n    this.modifiers.push(new StaveSection(section, this.x, y));\n    return this;\n  }\n\n  // Tempo functions\n  setTempo(tempo: StaveTempoOptions, y: number): this {\n    this.modifiers.push(new StaveTempo(tempo, this.x, y));\n    return this;\n  }\n\n  // Text functions\n  setText(\n    text: string,\n    position: number,\n    options: {\n      shift_x: number;\n      shift_y: number;\n      justification: number;\n    }\n  ): this {\n    this.modifiers.push(new StaveText(text, position, options));\n    return this;\n  }\n\n  getHeight(): number | undefined {\n    return this.height;\n  }\n\n  getSpacingBetweenLines(): number {\n    return this.options.spacing_between_lines_px;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n  }\n\n  getBottomY(): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n\n    return score_bottom;\n  }\n\n  getBottomLineY(): number {\n    return this.getYForLine(this.options.num_lines);\n  }\n\n  // This returns the y for the *center* of a staff line\n  getYForLine(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n\n    const y = this.y + line * spacing + headroom * spacing;\n\n    return y;\n  }\n\n  getLineForY(y: number): number {\n    // Does the reverse of getYForLine - somewhat dumb and just calls\n    // getYForLine until the right value is reaches\n\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return (y - this.y) / spacing - headroom;\n  }\n\n  getYForTopText(line: number = 0): number {\n    return this.getYForLine(-line - this.options.top_text_position);\n  }\n\n  getYForBottomText(line: number = 0): number {\n    return this.getYForLine(this.options.bottom_text_position + line);\n  }\n\n  getYForNote(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    const y = this.y + headroom * spacing + 5 * spacing - line * spacing;\n\n    return y;\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(3);\n  }\n\n  // This method adds a stave modifier to the stave. Note that the first two\n  // modifiers (BarLines) are automatically added upon construction.\n  addModifier(modifier: StaveModifier, position?: number): this {\n    if (position !== undefined) {\n      modifier.setPosition(position);\n    }\n\n    modifier.setStave(this);\n    this.formatted = false;\n    this.modifiers.push(modifier);\n    return this;\n  }\n\n  addEndModifier(modifier: StaveModifier): this {\n    this.addModifier(modifier, StaveModifier.Position.END);\n    return this;\n  }\n\n  // Bar Line functions\n  setBegBarType(type: number): this {\n    // Only valid bar types at beginning of stave is none, single or begin repeat\n    const { SINGLE, REPEAT_BEGIN, NONE } = Barline.type;\n    if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n      (this.modifiers[0] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setEndBarType(type: number): this {\n    // Repeat end not valid at end of stave\n    if (type !== Barline.type.REPEAT_BEGIN) {\n      (this.modifiers[1] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setClef(clefSpec: string, size: string, annotation: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    if (position === StaveModifier.Position.END) {\n      this.endClef = clefSpec;\n    } else {\n      this.clef = clefSpec;\n    }\n\n    const clefs = this.getModifiers(position, Clef.CATEGORY) as Clef[];\n    if (clefs.length === 0) {\n      this.addClef(clefSpec, size, annotation, position);\n    } else {\n      clefs[0].setType(clefSpec, size, annotation);\n    }\n\n    return this;\n  }\n\n  setEndClef(clefSpec: string, size: string, annotation: string): this {\n    this.setClef(clefSpec, size, annotation, StaveModifier.Position.END);\n    return this;\n  }\n\n  setKeySignature(keySpec: string, cancelKeySpec: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    const keySignatures = this.getModifiers(position, KeySignature.CATEGORY) as KeySignature[];\n    if (keySignatures.length === 0) {\n      this.addKeySignature(keySpec, cancelKeySpec, position);\n    } else {\n      keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n    }\n\n    return this;\n  }\n\n  setEndKeySignature(keySpec: string, cancelKeySpec: string): this {\n    this.setKeySignature(keySpec, cancelKeySpec, StaveModifier.Position.END);\n    return this;\n  }\n\n  setTimeSignature(timeSpec: string, customPadding: number, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY) as TimeSignature[];\n    if (timeSignatures.length === 0) {\n      this.addTimeSignature(timeSpec, customPadding, position);\n    } else {\n      timeSignatures[0].setTimeSig(timeSpec);\n    }\n\n    return this;\n  }\n\n  setEndTimeSignature(timeSpec: string, customPadding: number): this {\n    this.setTimeSignature(timeSpec, customPadding, StaveModifier.Position.END);\n    return this;\n  }\n\n  addKeySignature(keySpec: string, cancelKeySpec: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n    this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n    return this;\n  }\n\n  addClef(clef: string, size?: string, annotation?: string, position?: number): this {\n    if (position === undefined || position === StaveModifier.Position.BEGIN) {\n      this.clef = clef;\n    } else if (position === StaveModifier.Position.END) {\n      this.endClef = clef;\n    }\n\n    this.addModifier(new Clef(clef, size, annotation), position);\n    return this;\n  }\n\n  addEndClef(clef: string, size: string, annotation: string): this {\n    this.addClef(clef, size, annotation, StaveModifier.Position.END);\n    return this;\n  }\n\n  addTimeSignature(timeSpec: string, customPadding?: number, position?: number): this {\n    this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n    return this;\n  }\n\n  addEndTimeSignature(timeSpec: string, customPadding: number): this {\n    this.addTimeSignature(timeSpec, customPadding, StaveModifier.Position.END);\n    return this;\n  }\n\n  // Deprecated\n  addTrebleGlyph(): this {\n    this.addClef('treble');\n    return this;\n  }\n\n  getModifiers(position?: number, category?: string): StaveModifier[] {\n    if (position === undefined && category === undefined) return this.modifiers;\n\n    return this.modifiers.filter(\n      (modifier) =>\n        (position === undefined || position === modifier.getPosition()) &&\n        (category === undefined || category === modifier.getCategory())\n    );\n  }\n\n  sortByCategory(items: StaveModifier[], order: Record<string, number>): void {\n    for (let i = items.length - 1; i >= 0; i--) {\n      for (let j = 0; j < i; j++) {\n        if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n          const temp = items[j];\n          items[j] = items[j + 1];\n          items[j + 1] = temp;\n        }\n      }\n    }\n  }\n\n  format(): void {\n    const begBarline = this.modifiers[0] as Barline;\n    const endBarline = this.modifiers[1];\n\n    const begModifiers = this.getModifiers(StaveModifier.Position.BEGIN);\n    const endModifiers = this.getModifiers(StaveModifier.Position.END);\n\n    this.sortByCategory(begModifiers, {\n      barlines: 0,\n      clefs: 1,\n      keysignatures: 2,\n      timesignatures: 3,\n    });\n\n    this.sortByCategory(endModifiers, {\n      timesignatures: 0,\n      keysignatures: 1,\n      barlines: 2,\n      clefs: 3,\n    });\n\n    if (begModifiers.length > 1 && begBarline.getType() === Barline.type.REPEAT_BEGIN) {\n      begModifiers.push(begModifiers.splice(0, 1)[0]);\n      begModifiers.splice(0, 0, new Barline(Barline.type.SINGLE));\n    }\n\n    if (endModifiers.indexOf(endBarline) > 0) {\n      endModifiers.splice(0, 0, new Barline(Barline.type.NONE));\n    }\n\n    let width;\n    let padding;\n    let modifier;\n    let offset = 0;\n    let x = this.x;\n    for (let i = 0; i < begModifiers.length; i++) {\n      modifier = begModifiers[i];\n      padding = modifier.getPadding(i + offset);\n      width = modifier.getWidth();\n\n      x += padding;\n      modifier.setX(x);\n      x += width;\n\n      if (padding + width === 0) offset--;\n    }\n\n    this.start_x = x;\n    x = this.x + this.width;\n\n    const widths = {\n      left: 0,\n      right: 0,\n      paddingRight: 0,\n      paddingLeft: 0,\n    };\n\n    let lastBarlineIdx = 0;\n\n    for (let i = 0; i < endModifiers.length; i++) {\n      modifier = endModifiers[i];\n      lastBarlineIdx = modifier.getCategory() === 'barlines' ? i : lastBarlineIdx;\n\n      widths.right = 0;\n      widths.left = 0;\n      widths.paddingRight = 0;\n      widths.paddingLeft = 0;\n      const layoutMetrics = modifier.getLayoutMetrics();\n\n      if (layoutMetrics) {\n        if (i !== 0) {\n          widths.right = layoutMetrics.xMax || 0;\n          widths.paddingRight = layoutMetrics.paddingRight || 0;\n        }\n        widths.left = -layoutMetrics.xMin || 0;\n        widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n\n        if (i === endModifiers.length - 1) {\n          widths.paddingLeft = 0;\n        }\n      } else {\n        widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n        if (i !== 0) {\n          widths.right = modifier.getWidth();\n        }\n        if (i === 0) {\n          widths.left = modifier.getWidth();\n        }\n      }\n      x -= widths.paddingRight;\n      x -= widths.right;\n\n      modifier.setX(x);\n\n      x -= widths.left;\n      x -= widths.paddingLeft;\n    }\n\n    this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n    this.formatted = true;\n  }\n\n  /**\n   * All drawing functions below need the context to be set.\n   */\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (!this.formatted) this.format();\n\n    const num_lines = this.options.num_lines;\n    const width = this.width;\n    const x = this.x;\n    let y;\n\n    // Render lines\n    for (let line = 0; line < num_lines; line++) {\n      y = this.getYForLine(line);\n\n      this.applyStyle();\n      if (this.options.line_config[line].visible) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + width, y);\n        ctx.stroke();\n      }\n      this.restoreStyle();\n    }\n\n    // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n    for (let i = 0; i < this.modifiers.length; i++) {\n      // Only draw modifier if it has a draw function\n      if (typeof this.modifiers[i].draw === 'function') {\n        this.modifiers[i].applyStyle(ctx);\n        this.modifiers[i].draw(this, this.getModifierXShift(i));\n        this.modifiers[i].restoreStyle(ctx);\n      }\n    }\n\n    // Render measure numbers\n    if (this.measure > 0) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      const text_width = ctx.measureText('' + this.measure).width;\n      y = this.getYForTopText(0) + 3;\n      ctx.fillText('' + this.measure, this.x - text_width / 2, y);\n      ctx.restore();\n    }\n\n    return this;\n  }\n\n  // Draw Simple barlines for backward compatability\n  // Do not delete - draws the beginning bar of the stave\n  drawVertical(x: number, isDouble: boolean): void {\n    this.drawVerticalFixed(this.x + x, isDouble);\n  }\n\n  drawVerticalFixed(x: number, isDouble: boolean): void {\n    const ctx = this.checkContext();\n\n    const top_line = this.getYForLine(0);\n    const bottom_line = this.getYForLine(this.options.num_lines - 1);\n    if (isDouble) {\n      ctx.fillRect(x - 3, top_line, 1, bottom_line - top_line + 1);\n    }\n    ctx.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n  }\n\n  drawVerticalBar(x: number): void {\n    this.drawVerticalBarFixed(this.x + x);\n  }\n\n  drawVerticalBarFixed(x: number): void {\n    const ctx = this.checkContext();\n\n    const top_line = this.getYForLine(0);\n    const bottom_line = this.getYForLine(this.options.num_lines - 1);\n    ctx.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n  }\n\n  /**\n   * Get the current configuration for the Stave.\n   * @return {Array} An array of configuration objects.\n   */\n  getConfigForLines(): StaveLineConfig[] {\n    return this.options.line_config;\n  }\n\n  /**\n   * Configure properties of the lines in the Stave\n   * @param line_number The index of the line to configure.\n   * @param line_config An configuration object for the specified line.\n   * @throws Vex.RERR \"StaveConfigError\" When the specified line number is out of\n   *   range of the number of lines specified in the constructor.\n   */\n  setConfigForLine(line_number: number, line_config: StaveLineConfig): this {\n    if (line_number >= this.options.num_lines || line_number < 0) {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        'The line number must be within the range of the number of lines in the Stave.'\n      );\n    }\n\n    if (line_config.visible === undefined) {\n      throw new Vex.RERR('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n    }\n\n    if (typeof line_config.visible !== 'boolean') {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        \"The line configuration objects 'visible' property must be true or false.\"\n      );\n    }\n\n    this.options.line_config[line_number] = line_config;\n\n    return this;\n  }\n\n  /**\n   * Set the staff line configuration array for all of the lines at once.\n   * @param lines_configuration An array of line configuration objects.  These objects\n   *   are of the same format as the single one passed in to setLineConfiguration().\n   *   The caller can set null for any line config entry if it is desired that the default be used\n   * @throws Vex.RERR \"StaveConfigError\" When the lines_configuration array does not have\n   *   exactly the same number of elements as the num_lines configuration object set in\n   *   the constructor.\n   */\n  setConfigForLines(lines_configuration: StaveLineConfig[]): this {\n    if (lines_configuration.length !== this.options.num_lines) {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        'The length of the lines configuration array must match the number of lines in the Stave'\n      );\n    }\n\n    // Make sure the defaults are present in case an incomplete set of\n    //  configuration options were supplied.\n    // eslint-disable-next-line\n    for (const line_config in lines_configuration) {\n      // Allow 'null' to be used if the caller just wants the default for a particular node.\n      if (!lines_configuration[line_config]) {\n        lines_configuration[line_config] = this.options.line_config[line_config];\n      }\n      Vex.Merge(this.options.line_config[line_config], lines_configuration[line_config]);\n    }\n\n    this.options.line_config = lines_configuration;\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\n\nimport { Flow } from './tables';\nimport { LayoutMetrics, StaveModifier } from './stavemodifier';\nimport { Stave } from './stave';\n\nexport enum BarlineType {\n  SINGLE = 1,\n  DOUBLE = 2,\n  END = 3,\n  REPEAT_BEGIN = 4,\n  REPEAT_END = 5,\n  REPEAT_BOTH = 6,\n  NONE = 7,\n}\n\nexport class Barline extends StaveModifier {\n  protected widths: Record<string, number>;\n  protected paddings: Record<string, number>;\n  protected layoutMetricsMap: Record<number, LayoutMetrics>;\n\n  protected thickness: number;\n  protected type!: BarlineType;\n\n  static get CATEGORY(): string {\n    return 'barlines';\n  }\n\n  static get type(): typeof BarlineType {\n    return BarlineType;\n  }\n\n  static get typeString(): Record<string, BarlineType> {\n    return {\n      single: Barline.type.SINGLE,\n      double: Barline.type.DOUBLE,\n      end: Barline.type.END,\n      repeatBegin: Barline.type.REPEAT_BEGIN,\n      repeatEnd: Barline.type.REPEAT_END,\n      repeatBoth: Barline.type.REPEAT_BOTH,\n      none: Barline.type.NONE,\n    };\n  }\n\n  /**\n   * @constructor\n   */\n  constructor(type: BarlineType | string) {\n    super();\n    this.setAttribute('type', 'Barline');\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n\n    const TYPE = Barline.type;\n    this.widths = {};\n    this.widths[TYPE.SINGLE] = 5;\n    this.widths[TYPE.DOUBLE] = 5;\n    this.widths[TYPE.END] = 5;\n    this.widths[TYPE.REPEAT_BEGIN] = 5;\n    this.widths[TYPE.REPEAT_END] = 5;\n    this.widths[TYPE.REPEAT_BOTH] = 5;\n    this.widths[TYPE.NONE] = 5;\n\n    this.paddings = {};\n    this.paddings[TYPE.SINGLE] = 0;\n    this.paddings[TYPE.DOUBLE] = 0;\n    this.paddings[TYPE.END] = 0;\n    this.paddings[TYPE.REPEAT_BEGIN] = 15;\n    this.paddings[TYPE.REPEAT_END] = 15;\n    this.paddings[TYPE.REPEAT_BOTH] = 15;\n    this.paddings[TYPE.NONE] = 0;\n\n    this.layoutMetricsMap = {};\n    this.layoutMetricsMap[TYPE.SINGLE] = {\n      xMin: 0,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.DOUBLE] = {\n      xMin: -3,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.END] = {\n      xMin: -5,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_END] = {\n      xMin: -10,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n      xMin: -2,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n      xMin: -10,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.NONE] = {\n      xMin: 0,\n      xMax: 0,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type);\n  }\n\n  getCategory(): string {\n    return Barline.CATEGORY;\n  }\n\n  getType(): number {\n    return this.type;\n  }\n\n  setType(type: string | number): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    this.setWidth(this.widths[this.type]);\n    this.setPadding(this.paddings[this.type]);\n    this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n    return this;\n  }\n\n  // Draw barlines\n  draw(stave: Stave): void {\n    stave.checkContext();\n    this.setRendered();\n\n    switch (this.type) {\n      case Barline.type.SINGLE:\n        this.drawVerticalBar(stave, this.x, false);\n        break;\n      case Barline.type.DOUBLE:\n        this.drawVerticalBar(stave, this.x, true);\n        break;\n      case Barline.type.END:\n        this.drawVerticalEndBar(stave, this.x);\n        break;\n      case Barline.type.REPEAT_BEGIN:\n        // If the barline is shifted over (in front of clef/time/key)\n        // Draw vertical bar at the beginning.\n        this.drawRepeatBar(stave, this.x, true);\n        if (stave.getX() !== this.x) {\n          this.drawVerticalBar(stave, stave.getX());\n        }\n\n        break;\n      case Barline.type.REPEAT_END:\n        this.drawRepeatBar(stave, this.x, false);\n        break;\n      case Barline.type.REPEAT_BOTH:\n        this.drawRepeatBar(stave, this.x, false);\n        this.drawRepeatBar(stave, this.x, true);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n  }\n\n  drawVerticalBar(stave: Stave, x: number, double_bar?: boolean): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    if (double_bar) {\n      staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n    }\n    staveCtx.fillRect(x, topY, 1, botY - topY);\n  }\n\n  drawVerticalEndBar(stave: Stave, x: number): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n  }\n\n  drawRepeatBar(stave: Stave, x: number, begin: boolean): void {\n    const staveCtx = stave.checkContext();\n\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    let x_shift = 3;\n\n    if (!begin) {\n      x_shift = -5;\n    }\n\n    staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n\n    const dot_radius = 2;\n\n    // Shift dots left or right\n    if (begin) {\n      x_shift += 4;\n    } else {\n      x_shift -= 4;\n    }\n\n    const dot_x = x + x_shift + dot_radius / 2;\n\n    // calculate the y offset based on number of stave lines\n    let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n    y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n    let dot_y = topY + y_offset + dot_radius / 2;\n\n    // draw the top repeat dot\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n\n    // draw the bottom repeat dot\n    dot_y += stave.getSpacingBetweenLines();\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { Glyph } from './glyph';\nimport { FontInfo, RenderContext } from './types/common';\nimport { Stave } from './stave';\n\nfunction drawBoldDoubleLine(ctx: RenderContext, type: number, topX: number, topY: number, botY: number) {\n  if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    throw new Vex.RERR('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n  }\n\n  let x_shift = 3;\n  let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n  const thickLineOffset = 2; // For aesthetics\n\n  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    x_shift = -5; // Flips the side of the thin line\n    variableWidth = 3;\n  }\n\n  // Thin line\n  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n  // Thick line\n  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n\nexport class StaveConnector extends Element {\n  protected thickness: number;\n  protected width: number;\n  protected font: FontInfo;\n  protected texts: {\n    content: string;\n    options: {\n      shift_x: number;\n      shift_y: number;\n    };\n  }[];\n\n  protected type: number;\n  protected x_shift: number;\n  protected top_stave: Stave;\n  protected bottom_stave: Stave;\n\n  // SINGLE_LEFT and SINGLE are the same value for compatibility\n  // with older versions of vexflow which didn't have right sided\n  // stave connectors\n  static readonly type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n  };\n\n  static readonly typeString: Record<string, number> = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n  };\n\n  constructor(top_stave: Stave, bottom_stave: Stave) {\n    super();\n    this.setAttribute('type', 'StaveConnector');\n\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n    this.width = 3;\n    this.top_stave = top_stave;\n    this.bottom_stave = bottom_stave;\n    this.type = StaveConnector.type.DOUBLE;\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n    // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n    // 2. Offset BRACE type not to overlap with another StaveConnector\n    this.x_shift = 0;\n    this.texts = [];\n  }\n\n  setType(type: number | string): this {\n    type = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n\n    if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  setText(\n    text: string,\n    options?: {\n      shift_x: number;\n      shift_y: number;\n    }\n  ): this {\n    this.texts.push({\n      content: text,\n      options: Vex.Merge({ shift_x: 0, shift_y: 0 }, options),\n    });\n    return this;\n  }\n\n  setFont(font: FontInfo): void {\n    Vex.Merge(this.font, font);\n  }\n\n  setXShift(x_shift: number): this {\n    if (typeof x_shift !== 'number') {\n      throw new Vex.RERR('InvalidType', 'x_shift must be a Number');\n    }\n\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let topY = this.top_stave.getYForLine(0);\n    let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n    let width = this.width;\n    let topX = this.top_stave.getX();\n\n    const isRightSidedConnector =\n      this.type === StaveConnector.type.SINGLE_RIGHT ||\n      this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n      this.type === StaveConnector.type.THIN_DOUBLE;\n\n    if (isRightSidedConnector) {\n      topX = this.top_stave.getX() + this.top_stave.getWidth();\n    }\n\n    let attachment_height = botY - topY;\n    switch (this.type) {\n      case StaveConnector.type.SINGLE:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_LEFT:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_RIGHT:\n        width = 1;\n        break;\n      case StaveConnector.type.DOUBLE:\n        topX -= this.width + 2;\n        topY -= this.thickness;\n        attachment_height += 0.5;\n        break;\n      case StaveConnector.type.BRACE: {\n        width = 12;\n        // May need additional code to draw brace\n        const x1 = this.top_stave.getX() - 2 + this.x_shift;\n        const y1 = topY;\n        const x3 = x1;\n        const y3 = botY;\n        const x2 = x1 - width;\n        const y2 = y1 + attachment_height / 2.0;\n        const cpx1 = x2 - 0.9 * width;\n        const cpy1 = y1 + 0.2 * attachment_height;\n        const cpx2 = x1 + 1.1 * width;\n        const cpy2 = y2 - 0.135 * attachment_height;\n        const cpx3 = cpx2;\n        const cpy3 = y2 + 0.135 * attachment_height;\n        const cpx4 = cpx1;\n        const cpy4 = y3 - 0.2 * attachment_height;\n        const cpx5 = x2 - width;\n        const cpy5 = cpy4;\n        const cpx6 = x1 + 0.4 * width;\n        const cpy6 = y2 + 0.135 * attachment_height;\n        const cpx7 = cpx6;\n        const cpy7 = y2 - 0.135 * attachment_height;\n        const cpx8 = cpx5;\n        const cpy8 = cpy1;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n        ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n        ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n        ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n        ctx.fill();\n        ctx.stroke();\n        break;\n      }\n      case StaveConnector.type.BRACKET:\n        topY -= 6;\n        botY += 6;\n        attachment_height = botY - topY;\n        Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n        Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n        topX -= this.width + 2;\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_LEFT:\n        drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n        drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.THIN_DOUBLE:\n        width = 1;\n        attachment_height -= this.thickness;\n        break;\n      case StaveConnector.type.NONE:\n        break;\n      default:\n        throw new Vex.RERR('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid`);\n    }\n\n    if (\n      this.type !== StaveConnector.type.BRACE &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n      this.type !== StaveConnector.type.NONE\n    ) {\n      ctx.fillRect(topX, topY, width, attachment_height);\n    }\n\n    // If the connector is a thin double barline, draw the paralell line\n    if (this.type === StaveConnector.type.THIN_DOUBLE) {\n      ctx.fillRect(topX - 3, topY, width, attachment_height);\n    }\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Add stave connector text\n    for (let i = 0; i < this.texts.length; i++) {\n      const text = this.texts[i];\n      const text_width = ctx.measureText('' + text.content).width;\n      const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n      const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n\n      ctx.fillText('' + text.content, x, y + 4);\n    }\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class by Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either Crescendo or Descrescendo.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Modifier } from './modifier';\n\nexport class StaveHairpin extends Element {\n  static get type() {\n    return {\n      CRESC: 1,\n      DECRESC: 2,\n    };\n  }\n\n  /* Helper function to convert ticks into pixels.\n   * Requires a Formatter with voices joined and formatted (to\n   * get pixels per tick)\n   *\n   * options is struct that has:\n   *\n   *  {\n   *   height: px,\n   *   y_shift: px, //vertical offset\n   *   left_shift_ticks: 0, //left horizontal offset expressed in ticks\n   *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n   *  }\n   *\n   **/\n  static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n    const ppt = formatter.pixelsPerTick;\n\n    if (ppt == null) {\n      throw new Vex.RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n    }\n\n    const l_shift_px = ppt * options.left_shift_ticks;\n    const r_shift_px = ppt * options.right_shift_ticks;\n\n    const hairpin_options = {\n      height: options.height,\n      y_shift: options.y_shift,\n      left_shift_px: l_shift_px,\n      right_shift_px: r_shift_px,\n    };\n\n    new StaveHairpin(\n      {\n        first_note: notes.first_note,\n        last_note: notes.last_note,\n      },\n      type\n    )\n      .setContext(ctx)\n      .setRenderOptions(hairpin_options)\n      .setPosition(position)\n      .draw();\n  }\n\n  /**\n   * Create a new hairpin from the specified notes.\n   *\n   * @constructor\n   * @param {!Object} notes The notes to tie up.\n   * @param {!Object} type The type of hairpin\n   */\n  constructor(notes, type) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *  }\n     *\n     **/\n    super();\n    this.setAttribute('type', 'StaveHairpin');\n    this.notes = notes;\n    this.hairpin = type;\n    this.position = Modifier.Position.BELOW;\n\n    this.render_options = {\n      height: 10,\n      y_shift: 0, // vertical offset\n      left_shift_px: 0, // left horizontal offset\n      right_shift_px: 0, // right horizontal offset\n    };\n\n    this.setNotes(notes);\n  }\n\n  setPosition(position) {\n    if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n      this.position = position;\n    }\n    return this;\n  }\n\n  setRenderOptions(options) {\n    if (\n      options.height != null &&\n      options.y_shift != null &&\n      options.left_shift_px != null &&\n      options.right_shift_px != null\n    ) {\n      this.render_options = options;\n    }\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this hairpin to.\n   *\n   * @param {!Object} notes The start and end notes.\n   */\n  setNotes(notes) {\n    if (!notes.first_note && !notes.last_note) {\n      throw new Vex.RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\n    }\n\n    // Success. Lets grab 'em notes.\n    this.first_note = notes.first_note;\n    this.last_note = notes.last_note;\n    return this;\n  }\n\n  renderHairpin(params) {\n    const ctx = this.checkContext();\n    let dis = this.render_options.y_shift + 20;\n    let y_shift = params.first_y;\n\n    if (this.position === Modifier.Position.ABOVE) {\n      dis = -dis + 30;\n      y_shift = params.first_y - params.staff_height;\n    }\n\n    const l_shift = this.render_options.left_shift_px;\n    const r_shift = this.render_options.right_shift_px;\n\n    ctx.beginPath();\n\n    switch (this.hairpin) {\n      case StaveHairpin.type.CRESC:\n        ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n        break;\n      case StaveHairpin.type.DECRESC:\n        ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const firstNote = this.first_note;\n    const lastNote = this.last_note;\n\n    const start = firstNote.getModifierStartXY(this.position, 0);\n    const end = lastNote.getModifierStartXY(this.position, 0);\n\n    this.renderHairpin({\n      first_x: start.x,\n      last_x: end.x,\n      first_y: firstNote.getStave().y + firstNote.getStave().height,\n      last_y: lastNote.getStave().y + lastNote.getStave().height,\n      staff_height: firstNote.getStave().height,\n    });\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { FontInfo, RenderContext } from './types/common';\nimport { StaveNote } from './stavenote';\n\nexport interface StaveLineNotes {\n  last_indices: number[];\n  first_indices: number[];\n  last_note: StaveNote;\n  first_note: StaveNote;\n}\n\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates\nfunction drawArrowHead(ctx: RenderContext, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number) {\n  // all cases do this.\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x0, y0);\n  ctx.closePath();\n\n  ctx.fill();\n}\n\n// Helper function to draw a line with arrow heads\nfunction drawArrowLine(\n  ctx: RenderContext,\n  point1: { x: number; y: number },\n  point2: { x: number; y: number },\n  config: {\n    draw_start_arrow: boolean;\n    padding_left: number;\n    text_justification: number;\n    color?: string;\n    line_width: number;\n    line_dash?: string;\n    rounded_end: boolean;\n    arrowhead_length: number;\n    text_position_vertical: number;\n    draw_end_arrow: boolean;\n    arrowhead_angle: number;\n    padding_right: number;\n  }\n) {\n  const both_arrows = config.draw_start_arrow && config.draw_end_arrow;\n\n  const x1 = point1.x;\n  const y1 = point1.y;\n  const x2 = point2.x;\n  const y2 = point2.y;\n\n  // For ends with arrow we actually want to stop before we get to the arrow\n  // so that wide lines won't put a flat end on the arrow.\n  const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  const ratio = (distance - config.arrowhead_length / 3) / distance;\n  let end_x;\n  let end_y;\n  let start_x;\n  let start_y;\n  if (config.draw_end_arrow || both_arrows) {\n    end_x = Math.round(x1 + (x2 - x1) * ratio);\n    end_y = Math.round(y1 + (y2 - y1) * ratio);\n  } else {\n    end_x = x2;\n    end_y = y2;\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    start_x = x1 + (x2 - x1) * (1 - ratio);\n    start_y = y1 + (y2 - y1) * (1 - ratio);\n  } else {\n    start_x = x1;\n    start_y = y1;\n  }\n\n  if (config.color) {\n    ctx.setStrokeStyle(config.color);\n    ctx.setFillStyle(config.color);\n  }\n\n  // Draw the shaft of the arrow\n  ctx.beginPath();\n  ctx.moveTo(start_x, start_y);\n  ctx.lineTo(end_x, end_y);\n  ctx.stroke();\n  ctx.closePath();\n\n  // calculate the angle of the line\n  const line_angle = Math.atan2(y2 - y1, x2 - x1);\n  // h is the line length of a side of the arrow head\n  const h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));\n\n  let angle1;\n  let angle2;\n  let top_x;\n  let top_y;\n  let bottom_x;\n  let bottom_y;\n\n  if (config.draw_end_arrow || both_arrows) {\n    angle1 = line_angle + Math.PI + config.arrowhead_angle;\n    top_x = x2 + Math.cos(angle1) * h;\n    top_y = y2 + Math.sin(angle1) * h;\n\n    angle2 = line_angle + Math.PI - config.arrowhead_angle;\n    bottom_x = x2 + Math.cos(angle2) * h;\n    bottom_y = y2 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    angle1 = line_angle + config.arrowhead_angle;\n    top_x = x1 + Math.cos(angle1) * h;\n    top_y = y1 + Math.sin(angle1) * h;\n\n    angle2 = line_angle - config.arrowhead_angle;\n    bottom_x = x1 + Math.cos(angle2) * h;\n    bottom_y = y1 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n  }\n}\n\nexport class StaveLine extends Element {\n  readonly render_options: {\n    draw_start_arrow: boolean;\n    padding_left: number;\n    text_justification: number;\n    color?: string;\n    line_width: number;\n    line_dash?: string;\n    rounded_end: boolean;\n    arrowhead_length: number;\n    text_position_vertical: number;\n    draw_end_arrow: boolean;\n    arrowhead_angle: number;\n    padding_right: number;\n  };\n\n  protected text: string;\n  protected font: FontInfo;\n  protected first_indices!: number[];\n  protected last_indices!: number[];\n  protected notes: StaveLineNotes;\n  protected first_note!: StaveNote;\n  protected last_note!: StaveNote;\n  // Text Positioning\n  static readonly TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n  };\n\n  static readonly TextJustification = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3,\n  };\n\n  // Initialize the StaveLine with the given `notes`.\n  //\n  // `notes` is a struct that has:\n  //\n  //  ```\n  //  {\n  //    first_note: Note,\n  //    last_note: Note,\n  //    first_indices: [n1, n2, n3],\n  //    last_indices: [n1, n2, n3]\n  //  }\n  //  ```\n  constructor(notes: StaveLineNotes) {\n    super();\n    this.setAttribute('type', 'StaveLine');\n\n    this.notes = notes;\n\n    this.text = '';\n\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    this.render_options = {\n      // Space to add to the left or the right\n      padding_left: 4,\n      padding_right: 3,\n\n      // The width of the line in pixels\n      line_width: 1,\n      // An array of line/space lengths. Unsupported with Raphael (SVG)\n      line_dash: undefined,\n      // Can draw rounded line end, instead of a square. Unsupported with Raphael (SVG)\n      rounded_end: true,\n      // The color of the line and arrowheads\n      color: undefined,\n\n      // Flags to draw arrows on each end of the line\n      draw_start_arrow: false,\n      draw_end_arrow: false,\n\n      // The length of the arrowhead sides\n      arrowhead_length: 10,\n      // The angle of the arrowhead\n      arrowhead_angle: Math.PI / 8,\n\n      // The position of the text\n      text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n      text_justification: StaveLine.TextJustification.CENTER,\n    };\n\n    this.setNotes(notes);\n  }\n\n  // Set the font for the `StaveLine` text\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n  // The the annotation for the `StaveLine`\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  // Set the notes for the `StaveLine`\n  setNotes(notes: StaveLineNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new Vex.RERR('BadArguments', 'Notes needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new Vex.RERR('BadArguments', 'Connected notes must have similar index sizes');\n    }\n\n    // Success. Lets grab 'em notes.\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n\n  // Apply the style of the `StaveLine` to the context\n  applyLineStyle(): void {\n    const ctx = this.checkContext();\n    const render_options = this.render_options;\n\n    if (render_options.line_dash) {\n      ctx.setLineDash(render_options.line_dash);\n    }\n\n    if (render_options.line_width) {\n      ctx.setLineWidth(render_options.line_width);\n    }\n\n    if (render_options.rounded_end) {\n      ctx.setLineCap('round');\n    } else {\n      ctx.setLineCap('square');\n    }\n  }\n\n  // Apply the text styling to the context\n  applyFontStyle(): void {\n    const ctx = this.checkContext();\n\n    if (this.font) {\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    }\n\n    if (this.render_options.color) {\n      ctx.setStrokeStyle(this.render_options.color);\n      ctx.setFillStyle(this.render_options.color);\n    }\n  }\n\n  // Renders the `StaveLine` on the context\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    const render_options = this.render_options;\n\n    ctx.save();\n    this.applyLineStyle();\n\n    // Cycle through each set of indices and draw lines\n    let start_position = { x: 0, y: 0 };\n    let end_position = { x: 0, y: 0 };\n    this.first_indices.forEach((first_index, i) => {\n      const last_index = this.last_indices[i];\n\n      // Get initial coordinates for the start/end of the line\n      start_position = first_note.getModifierStartXY(2, first_index);\n      end_position = last_note.getModifierStartXY(1, last_index);\n      const upwards_slope = start_position.y > end_position.y;\n\n      // Adjust `x` coordinates for modifiers\n      start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n      end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n\n      // Adjust first `x` coordinates for displacements\n      const notehead_width = first_note.getGlyph().getWidth();\n      const first_displaced = first_note.getKeyProps()[first_index].displaced;\n      if (first_displaced && first_note.getStemDirection() === 1) {\n        start_position.x += notehead_width + render_options.padding_left;\n      }\n\n      // Adjust last `x` coordinates for displacements\n      const last_displaced = last_note.getKeyProps()[last_index].displaced;\n      if (last_displaced && last_note.getStemDirection() === -1) {\n        end_position.x -= notehead_width + render_options.padding_right;\n      }\n\n      // Adjust y position better if it's not coming from the center of the note\n      start_position.y += upwards_slope ? -3 : 1;\n      end_position.y += upwards_slope ? 2 : 0;\n\n      drawArrowLine(ctx, start_position, end_position, this.render_options);\n    });\n\n    ctx.restore();\n\n    // Determine the x coordinate where to start the text\n    const text_width = ctx.measureText(this.text).width;\n    const justification = render_options.text_justification;\n    let x = 0;\n    if (justification === StaveLine.TextJustification.LEFT) {\n      x = start_position.x;\n    } else if (justification === StaveLine.TextJustification.CENTER) {\n      const delta_x = end_position.x - start_position.x;\n      const center_x = delta_x / 2 + start_position.x;\n      x = center_x - text_width / 2;\n    } else if (justification === StaveLine.TextJustification.RIGHT) {\n      x = end_position.x - text_width;\n    }\n\n    // Determine the y value to start the text\n    let y = 0;\n    const vertical_position = render_options.text_position_vertical;\n    if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n      y = first_note.checkStave().getYForTopText();\n    } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n      y = first_note.checkStave().getYForBottomText(Flow.TEXT_HEIGHT_OFFSET_HACK);\n    }\n\n    // Draw the text\n    ctx.save();\n    this.applyFontStyle();\n    ctx.fillText(this.text, x, y);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\n\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\n\nexport interface LayoutMetrics {\n  xMin: number;\n  xMax: number;\n  paddingLeft: number;\n  paddingRight: number;\n}\n\nexport enum StaveModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n  BEGIN = 5,\n  END = 6,\n}\n\nexport class StaveModifier extends Element {\n  protected width: number = 0;\n  protected x: number = 0;\n\n  protected padding: number;\n  protected position: StaveModifierPosition;\n  protected stave?: Stave;\n  protected layoutMetrics?: LayoutMetrics;\n  static get Position(): typeof StaveModifierPosition {\n    return StaveModifierPosition;\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'StaveModifier');\n\n    this.padding = 10;\n    this.position = StaveModifier.Position.ABOVE;\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  setPosition(position: number): this {\n    this.position = position;\n    return this;\n  }\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  getCategory(): string {\n    return '';\n  }\n\n  placeGlyphOnLine(glyph: Glyph, stave: Stave, line?: number, customShift = 0): void {\n    glyph.setYShift(stave.getYForLine(line ?? 0) - stave.getYForGlyphs() + customShift);\n  }\n\n  getPadding(index: number): number {\n    return index !== undefined && index < 2 ? 0 : this.padding;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  setLayoutMetrics(layoutMetrics: LayoutMetrics): this {\n    this.layoutMetrics = layoutMetrics;\n    return this;\n  }\n\n  getLayoutMetrics(): LayoutMetrics | undefined {\n    return this.layoutMetrics;\n  }\n\n  draw(\n    // eslint-disable-next-line\n    element?: Element, x_shift?: number): void {\n    // do nothing\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// *Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.*\n//\n// See `tests/stavenote_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { BoundingBox } from './boundingbox';\nimport { Stem } from './stem';\nimport { NoteHead } from './notehead';\nimport { StemmableNote } from './stemmablenote';\nimport { StemOptions } from './stem';\nimport { Modifier } from './modifier';\nimport { Dot } from './dot';\nimport { KeyProps } from './types/common';\nimport { Beam } from './beam';\nimport { ModifierContext } from './modifiercontext';\nimport { ElementStyle } from './element';\nimport { Stave } from './stave';\nimport { Note, NoteStruct } from './note';\nimport { ModifierContextState } from './modifiercontext';\n\nexport interface StaveNoteHeadBounds {\n  y_top: number;\n  y_bottom: number;\n  displaced_x?: number;\n  non_displaced_x?: number;\n  highest_line: number;\n  lowest_line: number;\n  highest_displaced_line?: number;\n  lowest_displaced_line?: number;\n  highest_non_displaced_line: number;\n  lowest_non_displaced_line: number;\n}\n\nexport interface StaveNoteFormatSettings {\n  line: number;\n  maxLine: number;\n  minLine: number;\n  isrest: boolean;\n  stemDirection?: number;\n  stemMax: number;\n  stemMin: number;\n  voice_shift: number;\n  is_displaced: boolean;\n  note: StaveNote;\n}\n\nexport interface StaveNoteStruct extends NoteStruct {\n  stem_down_x_offset: number;\n  stem_up_x_offset: number;\n  stroke_px: number;\n  glyph_font_scale: number;\n  stem_direction: number;\n  auto_stem: boolean;\n  octave_shift: number;\n  clef: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\nfunction L(\n  ...args: // eslint-disable-next-line\n  any[]\n) {\n  if (StaveNote.DEBUG) Vex.L('Vex.Flow.StaveNote', args);\n}\n\nconst isInnerNoteIndex = (note: StaveNote, index: number) =>\n  index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest: StaveNoteFormatSettings, note: StaveNoteFormatSettings, dir: number) {\n  const delta = (note.isrest ? 0.0 : 1.0) * dir;\n\n  rest.line += delta;\n  rest.maxLine += delta;\n  rest.minLine += delta;\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest: StaveNoteFormatSettings, noteU: StaveNoteFormatSettings, noteL: StaveNoteFormatSettings) {\n  const delta = rest.line - Vex.MidLine(noteU.minLine, noteL.maxLine);\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n  rest.line -= delta;\n  rest.maxLine -= delta;\n  rest.minLine -= delta;\n}\n\nexport class StaveNote extends StemmableNote {\n  static DEBUG: boolean;\n\n  minLine: number = 0;\n  maxLine: number = 0;\n\n  protected readonly clef: string;\n  protected readonly octave_shift: number;\n\n  protected displaced: boolean;\n  protected dot_shiftY: number;\n  protected use_default_head_x: boolean;\n  protected note_heads: NoteHead[];\n  protected ledgerLineStyle?: ElementStyle;\n  protected flagStyle?: ElementStyle;\n\n  static get CATEGORY(): string {\n    return 'stavenotes';\n  }\n  static get STEM_UP(): number {\n    return Stem.UP;\n  }\n  static get STEM_DOWN(): number {\n    return Stem.DOWN;\n  }\n  static get DEFAULT_LEDGER_LINE_OFFSET(): number {\n    return 3;\n  }\n\n  // ## Static Methods\n  //\n  // Format notes inside a ModifierContext.\n  static format(notes: StaveNote[], state: ModifierContextState): boolean {\n    if (!notes || notes.length < 2) return false;\n\n    // FIXME: VexFlow will soon require that a stave be set before formatting.\n    // Which, according to the below condition, means that following branch will\n    // always be taken and the rest of this function is dead code.\n    //\n    // Problematically, `Formatter#formatByY` was not designed to work for more\n    // than 2 voices (although, doesn't throw on this condition, just tries\n    // to power through).\n    //\n    // Based on the above:\n    //   * 2 voices can be formatted *with or without* a stave being set but\n    //     the output will be different\n    //   * 3 voices can only be formatted *without* a stave\n    if (notes[0].getStave()) {\n      StaveNote.formatByY(notes, state);\n      return true;\n    }\n\n    const notesList: StaveNoteFormatSettings[] = [];\n\n    for (let i = 0; i < notes.length; i++) {\n      const props = notes[i].getKeyProps();\n      const line = props[0].line;\n      let minL = props[props.length - 1].line;\n      const stemDirection = notes[i].getStemDirection();\n      const stemMax = notes[i].getStemLength() / 10;\n      const stemMin = notes[i].getStemMinimumLength() / 10;\n\n      let maxL;\n      if (notes[i].isRest()) {\n        maxL = line + notes[i].glyph.line_above;\n        minL = line - notes[i].glyph.line_below;\n      } else {\n        maxL = stemDirection === 1 ? props[props.length - 1].line + stemMax : props[props.length - 1].line;\n\n        minL = stemDirection === 1 ? props[0].line : props[0].line - stemMax;\n      }\n\n      notesList.push({\n        line: props[0].line, // note/rest base line\n        maxLine: maxL, // note/rest upper bounds line\n        minLine: minL, // note/rest lower bounds line\n        isrest: notes[i].isRest(),\n        stemDirection: stemDirection,\n        stemMax, // Maximum (default) note stem length;\n        stemMin, // minimum note stem length\n        voice_shift: notes[i].getVoiceShiftWidth(),\n        is_displaced: notes[i].isDisplaced(), // note manually displaced\n        note: notes[i],\n      });\n    }\n\n    const voices = notesList.length;\n\n    let noteU = notesList[0];\n    const noteM = voices > 2 ? notesList[1] : undefined;\n    let noteL = voices > 2 ? notesList[2] : notesList[1];\n\n    // for two voice backward compatibility, ensure upper voice is stems up\n    // for three voices, the voices must be in order (upper, middle, lower)\n    if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n      noteU = notesList[1];\n      noteL = notesList[0];\n    }\n\n    const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n    let xShift = 0;\n    let stemDelta;\n\n    // Test for two voice note intersection\n    if (voices === 2) {\n      const lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n      // if top voice is a middle voice, check stem intersection with lower voice\n      if (noteU.stemDirection === noteL.stemDirection && noteU.minLine <= noteL.maxLine) {\n        if (!noteU.isrest) {\n          stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));\n          stemDelta = Math.max(stemDelta, noteU.stemMin);\n          noteU.minLine = noteU.line - stemDelta;\n          noteU.note.setStemLength(stemDelta * 10);\n        }\n      }\n      if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n        if (noteU.isrest) {\n          // shift rest up\n          shiftRestVertical(noteU, noteL, 1);\n        } else if (noteL.isrest) {\n          // shift rest down\n          shiftRestVertical(noteL, noteU, -1);\n        } else {\n          xShift = voiceXShift;\n          if (noteU.stemDirection === noteL.stemDirection) {\n            // upper voice is middle voice, so shift it right\n            noteU.note.setXShift(xShift + 3);\n          } else {\n            // shift lower voice right\n            noteL.note.setXShift(xShift);\n          }\n        }\n      }\n\n      // format complete\n      return true;\n    }\n\n    if (!noteM) throw new Vex.RERR('InvalidState', 'noteM not defined.');\n\n    // Check middle voice stem intersection with lower voice\n    if (noteM.minLine < noteL.maxLine + 0.5) {\n      if (!noteM.isrest) {\n        stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));\n        stemDelta = Math.max(stemDelta, noteM.stemMin);\n        noteM.minLine = noteM.line - stemDelta;\n        noteM.note.setStemLength(stemDelta * 10);\n      }\n    }\n\n    // For three voices, test if rests can be repositioned\n    //\n    // Special case 1 :: middle voice rest between two notes\n    //\n    if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n      if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n        const restHeight = noteM.maxLine - noteM.minLine;\n        const space = noteU.minLine - noteL.maxLine;\n        if (restHeight < space) {\n          // center middle voice rest between the upper and lower voices\n          centerRest(noteM, noteU, noteL);\n        } else {\n          xShift = voiceXShift + 3; // shift middle rest right\n          noteM.note.setXShift(xShift);\n        }\n        // format complete\n        return true;\n      }\n    }\n\n    // Special case 2 :: all voices are rests\n    if (noteU.isrest && noteM.isrest && noteL.isrest) {\n      // Shift upper voice rest up\n      shiftRestVertical(noteU, noteM, 1);\n      // Shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n      // format complete\n      return true;\n    }\n\n    // Test if any other rests can be repositioned\n    if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n      // Shift middle voice rest up\n      shiftRestVertical(noteM, noteL, 1);\n    }\n    if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n      // Shift middle voice rest down\n      shiftRestVertical(noteM, noteU, -1);\n    }\n    if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n      // shift upper voice rest up;\n      shiftRestVertical(noteU, noteM, 1);\n    }\n    if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n      // shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n    }\n\n    // If middle voice intersects upper or lower voice\n    if (\n      (!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5) ||\n      (!noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine)\n    ) {\n      xShift = voiceXShift + 3; // shift middle note right\n      noteM.note.setXShift(xShift);\n    }\n\n    return true;\n  }\n\n  static formatByY(notes: StaveNote[], state: ModifierContextState): void {\n    // NOTE: this function does not support more than two voices per stave\n    // use with care.\n    let hasStave = true;\n\n    for (let i = 0; i < notes.length; i++) {\n      hasStave = hasStave && notes[i].getStave() != undefined;\n    }\n\n    if (!hasStave) {\n      throw new Vex.RERR('Stave Missing', 'All notes must have a stave - Vex.Flow.ModifierContext.formatMultiVoice!');\n    }\n\n    let xShift = 0;\n\n    for (let i = 0; i < notes.length - 1; i++) {\n      let topNote = notes[i];\n      let bottomNote = notes[i + 1];\n\n      if (topNote.getStemDirection() === Stem.DOWN) {\n        topNote = notes[i + 1];\n        bottomNote = notes[i];\n      }\n\n      const topKeys = topNote.getKeyProps();\n      const bottomKeys = bottomNote.getKeyProps();\n\n      const HALF_NOTEHEAD_HEIGHT = 0.5;\n\n      // `keyProps` and `stave.getYForLine` have different notions of a `line`\n      // so we have to convert the keyProps value by subtracting 5.\n      // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas\n      //\n      // We also extend the y for each note by a half notehead because the\n      // notehead's origin is centered\n      const topStave = topNote.checkStave();\n      const topNoteBottomY = topStave.getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);\n\n      const bottomStave = bottomNote.checkStave();\n      const bottomNoteTopY = bottomStave.getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);\n\n      const areNotesColliding =\n        bottomNoteTopY != undefined && topNoteBottomY != undefined ? bottomNoteTopY - topNoteBottomY < 0 : false;\n\n      if (areNotesColliding) {\n        xShift = topNote.getVoiceShiftWidth() + 2;\n        bottomNote.setXShift(xShift);\n      }\n    }\n\n    state.right_shift += xShift;\n  }\n\n  static postFormat(notes: Note[]): boolean {\n    if (!notes) return false;\n\n    notes.forEach((note) => note.postFormat());\n\n    return true;\n  }\n\n  constructor(noteStruct: StaveNoteStruct) {\n    super(noteStruct);\n    this.setAttribute('type', 'StaveNote');\n\n    this.clef = noteStruct.clef;\n    this.octave_shift = noteStruct.octave_shift;\n\n    // Pull note rendering properties\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n\n    if (!this.glyph) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        `Invalid note initialization data (No glyph found): ${JSON.stringify(noteStruct)}`\n      );\n    }\n\n    // if true, displace note to right\n    this.displaced = false;\n    this.dot_shiftY = 0;\n    // for displaced ledger lines\n    this.use_default_head_x = false;\n\n    // Drawing\n    this.note_heads = [];\n    this.modifiers = [];\n    this.ledgerLineStyle = {};\n\n    Vex.Merge(this.render_options, {\n      // font size for note heads and rests\n      glyph_font_scale: noteStruct.glyph_font_scale || Flow.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET,\n    });\n\n    this.calculateKeyProps();\n    this.buildStem();\n\n    // Set the stem direction\n    if (noteStruct.auto_stem) {\n      this.autoStem();\n    } else {\n      this.setStemDirection(noteStruct.stem_direction);\n    }\n    this.reset();\n    this.buildFlag();\n  }\n\n  reset(): this {\n    super.reset();\n\n    // Save prior noteHead styles & reapply them after making new noteheads.\n    const noteHeadStyles = this.note_heads.map((noteHead) => noteHead.getStyle());\n    this.buildNoteHeads();\n    this.note_heads.forEach((noteHead, index) => {\n      const noteHeadStyle = noteHeadStyles[index];\n      if (noteHeadStyle) noteHead.setStyle(noteHeadStyle);\n    });\n\n    const stave = this.stave;\n    if (stave) {\n      this.note_heads.forEach((head) => head.setStave(stave));\n    }\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  getCategory(): string {\n    return StaveNote.CATEGORY;\n  }\n\n  // Builds a `Stem` for the note\n  buildStem(): this {\n    this.setStem(new Stem({ hide: !!this.isRest() }));\n    return this;\n  }\n\n  // Builds a `NoteHead` for each key in the note\n  buildNoteHeads(): void {\n    this.note_heads = [];\n    const stemDirection = this.getStemDirection();\n    const keys = this.getKeys();\n\n    let lastLine = undefined;\n    let lineDiff = undefined;\n    let displaced = false;\n\n    // Draw notes from bottom to top.\n\n    // For down-stem notes, we draw from top to bottom.\n    let start: number;\n    let end: number;\n    let step: number;\n    if (stemDirection === Stem.UP) {\n      start = 0;\n      end = keys.length;\n      step = 1;\n    } else {\n      start = keys.length - 1;\n      end = -1;\n      step = -1;\n    }\n\n    for (let i = start; i !== end; i += step) {\n      const noteProps = this.keyProps[i];\n      const line = noteProps.line;\n\n      // Keep track of last line with a note head, so that consecutive heads\n      // are correctly displaced.\n      if (lastLine === undefined) {\n        lastLine = line;\n      } else {\n        lineDiff = Math.abs(lastLine - line);\n        if (lineDiff === 0 || lineDiff === 0.5) {\n          displaced = !displaced;\n        } else {\n          displaced = false;\n          this.use_default_head_x = true;\n        }\n      }\n      lastLine = line;\n\n      const notehead = new NoteHead({\n        duration: this.duration,\n        note_type: this.noteType,\n        displaced,\n        stem_direction: stemDirection,\n        custom_glyph_code: noteProps.code,\n        glyph_font_scale: this.render_options.glyph_font_scale,\n        x_shift: noteProps.shift_right,\n        stem_up_x_offset: noteProps.stem_up_x_offset,\n        stem_down_x_offset: noteProps.stem_down_x_offset,\n        line: noteProps.line,\n      });\n\n      this.note_heads[i] = notehead;\n    }\n  }\n\n  // Automatically sets the stem direction based on the keys in the note\n  autoStem(): void {\n    this.setStemDirection(this.calculateOptimalStemDirection());\n  }\n\n  calculateOptimalStemDirection(): number {\n    // Figure out optimal stem direction based on given notes\n    this.minLine = this.keyProps[0].line;\n    this.maxLine = this.keyProps[this.keyProps.length - 1].line;\n\n    const MIDDLE_LINE = 3;\n    const decider = (this.minLine + this.maxLine) / 2;\n    const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n\n    return stemDirection;\n  }\n\n  // Calculates and stores the properties for each key in the note\n  calculateKeyProps(): void {\n    let lastLine: number | undefined;\n    for (let i = 0; i < this.keys.length; ++i) {\n      const key = this.keys[i];\n\n      // All rests use the same position on the line.\n      // if (this.glyph.rest) key = this.glyph.position;\n      if (this.glyph.rest) this.glyph.position = key;\n\n      const options = { octave_shift: this.octave_shift || 0 };\n      const props = Flow.keyProperties(key, this.clef, options);\n\n      if (!props) {\n        throw new Vex.RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n      }\n\n      // Override line placement for default rests\n      if (props.key === 'R') {\n        if (this.duration === '1' || this.duration === 'w') {\n          props.line = 4;\n        } else {\n          props.line = 3;\n        }\n      }\n\n      // Calculate displacement of this note\n      const line = props.line;\n      if (lastLine == undefined) {\n        lastLine = line;\n      } else {\n        if (Math.abs(lastLine - line) === 0.5) {\n          this.displaced = true;\n          props.displaced = true;\n\n          // Have to mark the previous note as\n          // displaced as well, for modifier placement\n          if (this.keyProps.length > 0) {\n            this.keyProps[i - 1].displaced = true;\n          }\n        }\n      }\n\n      lastLine = line;\n      this.keyProps.push(props);\n    }\n\n    // Sort the notes from lowest line to highest line\n    lastLine = undefined;\n    this.keyProps.forEach((key) => {\n      if (lastLine && key.line < lastLine) {\n        Vex.W('Unsorted keys in note will be sorted. ' + 'See https://github.com/0xfe/vexflow/issues/104 for details.');\n      }\n      lastLine = key.line;\n    });\n    this.keyProps.sort((a, b) => a.line - b.line);\n  }\n\n  // Get the `BoundingBox` for the entire note\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n\n    const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();\n    const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;\n\n    let minY: number = 0;\n    let maxY: number = 0;\n    const halfLineSpacing = (this.getStave()?.getSpacingBetweenLines() ?? 0) / 2;\n    const lineSpacing = halfLineSpacing * 2;\n\n    if (this.isRest()) {\n      const y = this.ys[0];\n      const frac = Flow.durationToFraction(this.duration);\n      if (frac.equals(1) || frac.equals(2)) {\n        minY = y - halfLineSpacing;\n        maxY = y + halfLineSpacing;\n      } else {\n        minY = y - this.glyph.line_above * lineSpacing;\n        maxY = y + this.glyph.line_below * lineSpacing;\n      }\n    } else if (this.glyph.stem) {\n      const ys = this.getStemExtents();\n      ys.baseY += halfLineSpacing * this.getStemDirection();\n      minY = Math.min(ys.topY, ys.baseY);\n      maxY = Math.max(ys.topY, ys.baseY);\n    } else {\n      minY = 0;\n      maxY = 0;\n\n      for (let i = 0; i < this.ys.length; ++i) {\n        const yy = this.ys[i];\n        if (i === 0) {\n          minY = yy;\n          maxY = yy;\n        } else {\n          minY = Math.min(yy, minY);\n          maxY = Math.max(yy, maxY);\n        }\n      }\n      minY -= halfLineSpacing;\n      maxY += halfLineSpacing;\n    }\n\n    return new BoundingBox(x, minY, w, maxY - minY);\n  }\n\n  // Gets the line number of the bottom note in the chord.\n  // If `isTopNote` is `true` then get the top note's line number instead\n  getLineNumber(isTopNote: boolean): number {\n    if (!this.keyProps.length) {\n      throw new Vex.RERR('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n    }\n\n    let resultLine = this.keyProps[0].line;\n\n    // No precondition assumed for sortedness of keyProps array\n    for (let i = 0; i < this.keyProps.length; i++) {\n      const thisLine = this.keyProps[i].line;\n      if (isTopNote) {\n        if (thisLine > resultLine) resultLine = thisLine;\n      } else {\n        if (thisLine < resultLine) resultLine = thisLine;\n      }\n    }\n\n    return resultLine;\n  }\n\n  // Determine if current note is a rest\n  isRest(): boolean {\n    return this.glyph.rest;\n  }\n\n  // Determine if the current note is a chord\n  isChord(): boolean {\n    return !this.isRest() && this.keys.length > 1;\n  }\n\n  // Determine if the `StaveNote` has a stem\n  hasStem(): boolean {\n    return this.glyph.stem;\n  }\n\n  hasFlag(): boolean {\n    return super.hasFlag() && !this.isRest();\n  }\n\n  getStemX(): number {\n    if (this.noteType === 'r') {\n      return this.getCenterGlyphX();\n    } else {\n      // We adjust the origin of the stem because we want the stem left-aligned\n      // with the notehead if stemmed-down, and right-aligned if stemmed-up\n      return super.getStemX() + (this.stem_direction ? Stem.WIDTH / (2 * -this.stem_direction) : 0);\n    }\n  }\n\n  // Get the `y` coordinate for text placed on the top/bottom of a\n  // note at a desired `text_line`\n  getYForTopText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.min(\n      this.checkStave().getYForTopText(textLine),\n      extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n    );\n  }\n  getYForBottomText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.max(\n      this.checkStave().getYForTopText(textLine),\n      extents.baseY + this.render_options.annotation_spacing * textLine\n    );\n  }\n\n  // Sets the current note to the provided `stave`. This applies\n  // `y` values to the `NoteHeads`.\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n\n    const ys = this.note_heads.map((notehead) => {\n      notehead.setStave(stave);\n      return notehead.getY();\n    });\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      this.stem.setYBounds(y_top, y_bottom);\n    }\n\n    return this;\n  }\n\n  // Get the pitches in the note\n  getKeys(): string[] {\n    return this.keys;\n  }\n\n  // Get the properties for all the keys in the note\n  getKeyProps(): KeyProps[] {\n    return this.keyProps;\n  }\n\n  // Check if note is shifted to the right\n  isDisplaced(): boolean {\n    return this.displaced;\n  }\n\n  // Sets whether shift note to the right. `displaced` is a `boolean`\n  setNoteDisplaced(displaced: boolean): this {\n    this.displaced = displaced;\n    return this;\n  }\n\n  // Get the starting `x` coordinate for a `StaveTie`\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;\n    if (this.modifierContext) tieStartX += this.modifierContext.getRightShift();\n    return tieStartX;\n  }\n\n  // Get the ending `x` coordinate for a `StaveTie`\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    tieEndX += this.x_shift - this.leftDisplacedHeadPx;\n    return tieEndX;\n  }\n\n  // Get the stave line on which to place a rest\n  getLineForRest(): number {\n    let restLine = this.keyProps[0].line;\n    if (this.keyProps.length > 1) {\n      const lastLine = this.keyProps[this.keyProps.length - 1].line;\n      const top = Math.max(restLine, lastLine);\n      const bot = Math.min(restLine, lastLine);\n      restLine = Vex.MidLine(top, bot);\n    }\n\n    return restLine;\n  }\n\n  // Get the default `x` and `y` coordinates for the provided `position`\n  // and key `index`\n  getModifierStartXY(\n    position: number,\n    index: number,\n    options: {\n      forceFlagRight?: boolean;\n    } = {}\n  ): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n    let x = 0;\n    if (position === LEFT) {\n      // FIXME: Left modifier padding, move to font file\n      x = -1 * 2;\n    } else if (position === RIGHT) {\n      // FIXME: Right modifier padding, move to font file\n      x = this.getGlyphWidth() + this.x_shift + 2;\n\n      if (\n        this.stem_direction === Stem.UP &&\n        this.hasFlag() &&\n        (options.forceFlagRight || isInnerNoteIndex(this, index))\n      ) {\n        x += this?.flag?.getMetrics().width ?? 0;\n      }\n    } else if (position === BELOW || position === ABOVE) {\n      x = this.getGlyphWidth() / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Sets the style of the complete StaveNote, including all keys\n  // and the stem.\n  setStyle(style: ElementStyle): this {\n    super.setStyle(style);\n    this.note_heads.forEach((notehead) => notehead.setStyle(style));\n    this.stem?.setStyle(style);\n    return this;\n  }\n\n  setStemStyle(style: ElementStyle): this {\n    const stem = this.getStem();\n    stem?.setStyle(style);\n    return this;\n  }\n  getStemStyle(): ElementStyle | undefined {\n    return this.stem?.getStyle();\n  }\n\n  setLedgerLineStyle(style: ElementStyle): void {\n    this.ledgerLineStyle = style;\n  }\n  getLedgerLineStyle(): ElementStyle | undefined {\n    return this.ledgerLineStyle;\n  }\n\n  setFlagStyle(style: ElementStyle): void {\n    this.flagStyle = style;\n  }\n  getFlagStyle(): ElementStyle | undefined {\n    return this.flagStyle;\n  }\n\n  // Sets the notehead at `index` to the provided coloring `style`.\n  //\n  // `style` is an `object` with the following properties: `shadowColor`,\n  // `shadowBlur`, `fillStyle`, `strokeStyle`\n  setKeyStyle(index: number, style: ElementStyle): this {\n    this.note_heads[index].setStyle(style);\n    return this;\n  }\n\n  setKeyLine(index: number, line: number): this {\n    this.keyProps[index].line = line;\n    this.reset();\n    return this;\n  }\n\n  getKeyLine(index: number): number {\n    return this.keyProps[index].line;\n  }\n\n  // Add self to modifier context. `mContext` is the `ModifierContext`\n  // to be added to.\n  addToModifierContext(mContext: ModifierContext): this {\n    this.modifierContext = mContext;\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addMember(this.modifiers[i]);\n    }\n    this.modifierContext.addMember(this);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Generic function to add modifiers to a note\n  //\n  // Parameters:\n  // * `index`: The index of the key that we're modifying\n  // * `modifier`: The modifier to add\n  addModifier(a: number | Modifier, b: number | Modifier): this {\n    let index: number;\n    let modifier: Modifier;\n\n    if (typeof a === 'object' && typeof b === 'number') {\n      index = b;\n      modifier = a;\n    } else if (typeof a === 'number' && typeof b === 'object') {\n      // eslint-disable-next-line\n      console.warn('deprecated call signature to addModifier, use addModifier(modifier, index) instead');\n      index = a;\n      modifier = b;\n    } else {\n      throw new Vex.RERR(\n        'WrongParams',\n        'Call signature to addModifier not supported, use addModifier(modifier, index) instead.'\n      );\n    }\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Helper function to add an accidental to a key\n  addAccidental(index: number, accidental: Modifier): this {\n    return this.addModifier(accidental, index);\n  }\n\n  // Helper function to add an articulation to a key\n  addArticulation(index: number, articulation: Modifier): this {\n    return this.addModifier(articulation, index);\n  }\n\n  // Helper function to add an annotation to a key\n  addAnnotation(index: number, annotation: Modifier): this {\n    return this.addModifier(annotation, index);\n  }\n\n  // Helper function to add a dot on a specific key\n  addDot(index: number): this {\n    const dot = new Dot();\n    dot.setDotShiftY(this.glyph.dot_shiftY);\n    this.dots++;\n    return this.addModifier(dot, index);\n  }\n\n  // Convenience method to add dot to all keys in note\n  addDotToAll(): this {\n    for (let i = 0; i < this.keys.length; ++i) {\n      this.addDot(i);\n    }\n    return this;\n  }\n\n  // Get all accidentals in the `ModifierContext`\n  getAccidentals(): Modifier[] {\n    if (!this.modifierContext) throw new Vex.RERR('NoModifierContext', 'No modifier context attached to this note.');\n    return this.modifierContext.getMembers('accidentals') as Modifier[];\n  }\n\n  // Get all dots in the `ModifierContext`\n  getDots(): Modifier[] {\n    if (!this.modifierContext) throw new Vex.RERR('NoModifierContext', 'No modifier context attached to this note.');\n    return this.modifierContext.getMembers('dots') as Modifier[];\n  }\n\n  // Get the width of the note if it is displaced. Used for `Voice`\n  // formatting\n  getVoiceShiftWidth(): number {\n    // TODO: may need to accomodate for dot here.\n    return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n  }\n\n  // Calculates and sets the extra pixels to the left or right\n  // if the note is displaced.\n  calcNoteDisplacements(): void {\n    this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === Stem.DOWN ? this.getGlyphWidth() : 0);\n\n    // For upstems with flags, the extra space is unnecessary, since it's taken\n    // up by the flag.\n    this.setRightDisplacedHeadPx(\n      !this.hasFlag() && this.displaced && this.stem_direction === Stem.UP ? this.getGlyphWidth() : 0\n    );\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n    const glyphWidth = this.getGlyphWidth();\n    let noteWidth: number;\n\n    const flagWidth: number = this.flag?.getMetrics()?.width ?? 0;\n    if (this.shouldDrawFlag() && this.stem_direction === Stem.DOWN) {\n      noteWidth = Math.max(flagWidth + Flow.STEM_WIDTH, glyphWidth);\n    } else if (this.shouldDrawFlag() && this.stem_direction === Stem.UP) {\n      noteWidth = flagWidth + glyphWidth + Flow.STEM_WIDTH;\n    } else {\n      noteWidth = glyphWidth;\n    }\n    const width = noteWidth + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n  }\n\n  /**\n   * @typedef {Object} noteHeadBounds\n   * @property {number} y_top the highest notehead bound\n   * @property {number} y_bottom the lowest notehead bound\n   * @property {number|Null} displaced_x the starting x for displaced noteheads\n   * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads\n   * @property {number} highest_line the highest notehead line in traditional music line\n   *  numbering (bottom line = 1, top line = 5)\n   * @property {number} lowest_line the lowest notehead line\n   * @property {number|false} highest_displaced_line the highest staff line number\n   *   for a displaced notehead\n   * @property {number|false} lowest_displaced_line\n   * @property {number} highest_non_displaced_line\n   * @property {number} lowest_non_displaced_line\n   */\n\n  /**\n   * Get the staff line and y value for the highest & lowest noteheads\n   * @returns {noteHeadBounds}\n   */\n  getNoteHeadBounds(): StaveNoteHeadBounds {\n    // Top and bottom Y values for stem.\n    let yTop: number = +Infinity;\n    let yBottom: number = -Infinity;\n    let nonDisplacedX: number | undefined;\n    let displacedX: number | undefined;\n\n    let highestLine = this.checkStave().getNumLines();\n    let lowestLine = 1;\n    let highestDisplacedLine: number | undefined;\n    let lowestDisplacedLine: number | undefined;\n    let highestNonDisplacedLine = highestLine;\n    let lowestNonDisplacedLine = lowestLine;\n\n    this.note_heads.forEach((notehead) => {\n      const line: number = notehead.getLine();\n      const y = notehead.getY();\n\n      yTop = Math.min(y, yTop);\n      yBottom = Math.max(y, yBottom);\n\n      if (displacedX === undefined && notehead.isDisplaced()) {\n        displacedX = notehead.getAbsoluteX();\n      }\n\n      if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n        nonDisplacedX = notehead.getAbsoluteX();\n      }\n\n      highestLine = Math.max(line, highestLine);\n      lowestLine = Math.min(line, lowestLine);\n\n      if (notehead.isDisplaced()) {\n        highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n        lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n      } else {\n        highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n        lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n      }\n    }, this);\n\n    return {\n      y_top: yTop,\n      y_bottom: yBottom,\n      displaced_x: displacedX,\n      non_displaced_x: nonDisplacedX,\n      highest_line: highestLine,\n      lowest_line: lowestLine,\n      highest_displaced_line: highestDisplacedLine,\n      lowest_displaced_line: lowestDisplacedLine,\n      highest_non_displaced_line: highestNonDisplacedLine,\n      lowest_non_displaced_line: lowestNonDisplacedLine,\n    };\n  }\n\n  // Get the starting `x` coordinate for the noteheads\n  getNoteHeadBeginX(): number {\n    return this.getAbsoluteX() + this.x_shift;\n  }\n\n  // Get the ending `x` coordinate for the noteheads\n  getNoteHeadEndX(): number {\n    const xBegin = this.getNoteHeadBeginX();\n    return xBegin + this.getGlyphWidth();\n  }\n\n  // Draw the ledger lines between the stave and the highest/lowest keys\n  drawLedgerLines(): void {\n    const stave = this.checkStave();\n    const {\n      glyph,\n      render_options: { stroke_px },\n    } = this;\n    const ctx = this.checkContext();\n    const width = glyph.getWidth() + stroke_px * 2;\n    const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - Stem.WIDTH / 2;\n\n    if (this.isRest()) return;\n    if (!ctx) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const {\n      highest_line,\n      lowest_line,\n      highest_displaced_line,\n      highest_non_displaced_line,\n      lowest_displaced_line,\n      lowest_non_displaced_line,\n      displaced_x,\n      non_displaced_x,\n    } = this.getNoteHeadBounds();\n\n    const min_x = Math.min(displaced_x ?? 0, non_displaced_x ?? 0);\n\n    const drawLedgerLine = (y: number, normal: boolean, displaced: boolean) => {\n      let x;\n      if (displaced && normal) x = min_x - stroke_px;\n      else if (normal) x = (non_displaced_x ?? 0) - stroke_px;\n      else x = (displaced_x ?? 0) - stroke_px;\n      const ledgerWidth = normal && displaced ? doubleWidth : width;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + ledgerWidth, y);\n      ctx.stroke();\n    };\n\n    const style = { ...(stave.getStyle() || {}), ...(this.getLedgerLineStyle() || {}) };\n    if (typeof style.lineWidth === 'undefined') {\n      style.lineWidth = Flow.STAVE_LINE_THICKNESS * 2;\n    } else {\n      style.lineWidth *= 2;\n    }\n    this.applyStyle(ctx, style);\n\n    // Draw ledger lines below the staff:\n    for (let line = 6; line <= highest_line; ++line) {\n      const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;\n      const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    // Draw ledger lines above the staff:\n    for (let line = 0; line >= lowest_line; --line) {\n      const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;\n      const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    this.restoreStyle(ctx, style);\n  }\n\n  // Draw all key modifiers\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      const notehead = this.note_heads[modifier.getIndex()];\n      const noteheadStyle = notehead.getStyle();\n      notehead.applyStyle(ctx, noteheadStyle);\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n      notehead.restoreStyle(ctx, noteheadStyle);\n    }\n    ctx.closeGroup();\n  }\n\n  shouldDrawFlag(): boolean {\n    const hasStem = this.stem !== undefined;\n    const hasFlag = this.glyph.flag as boolean; // specified in tables.js\n    const hasNoBeam = this.beam === undefined;\n    return hasStem && hasFlag && hasNoBeam;\n  }\n\n  // Draw the flag for the note\n  drawFlag(): void {\n    const ctx = this.checkContext();\n    if (!ctx) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    if (this.shouldDrawFlag()) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      // eslint-disable-next-line\n      const noteStemHeight = this.stem!.getHeight();\n      const flagX = this.getStemX();\n      // FIXME: What's with the magic +/- 2\n      // ANSWER: a corner of the note stem pokes out beyond the tip of the flag.\n      // The extra +/- 2 pushes the flag glyph outward so it covers the stem entirely.\n      // Alternatively, we could shorten the stem.\n      const flagY =\n        this.getStemDirection() === Stem.DOWN\n          ? // Down stems are below the note head and have flags on the right.\n            y_top - noteStemHeight + 2\n          : // Up stems are above the note head and have flags on the right.\n            y_bottom - noteStemHeight - 2;\n\n      // Draw the Flag\n      ctx.openGroup('flag', undefined, { pointerBBox: true });\n      this.applyStyle(ctx, this.getFlagStyle());\n      this.flag?.render(ctx, flagX, flagY);\n      this.restoreStyle(ctx, this.getFlagStyle());\n      ctx.closeGroup();\n    }\n  }\n\n  // Draw the NoteHeads\n  drawNoteHeads(): void {\n    const ctx = this.checkContext();\n    this.note_heads.forEach((notehead) => {\n      ctx.openGroup('notehead', undefined, { pointerBBox: true });\n      notehead.setContext(ctx).draw();\n      ctx.closeGroup();\n    });\n  }\n\n  drawStem(stemOptions?: StemOptions): void {\n    // GCR TODO: I can't find any context in which this is called with the stemStruct\n    // argument in the codebase or tests. Nor can I find a case where super.drawStem\n    // is called at all. Perhaps these should be removed?\n    const ctx = this.checkContext();\n\n    if (stemOptions) {\n      this.setStem(new Stem(stemOptions));\n    }\n\n    // If we will render a flag, we shorten the stem so that the tip\n    // does not poke through the flag.\n    if (this.shouldDrawFlag() && this.stem) {\n      this.stem.adjustHeightForFlag();\n    }\n\n    ctx.openGroup('stem', undefined, { pointerBBox: true });\n    this.stem?.setContext(ctx).draw();\n    ctx.closeGroup();\n  }\n\n  /**\n   * Override stemmablenote stem extension to adjust for distance from middle line.\n   */\n  getStemExtension(): number {\n    const super_stem_extension = super.getStemExtension();\n    if (!this.glyph.stem) {\n      return super_stem_extension;\n    }\n\n    const stem_direction = this.getStemDirection();\n    if (stem_direction !== this.calculateOptimalStemDirection()) {\n      return super_stem_extension; // no adjustment for manually set stem direction.\n    }\n    let mid_line_distance;\n    const MIDDLE_LINE = 3;\n    if (stem_direction === Stem.UP) {\n      // Note that the use of maxLine here instead of minLine might\n      // seem counterintuitive, but in the case of (say) treble clef\n      // chord(F2, E4) stem up, we do not want to extend the stem because\n      // of F2, when a normal octave-length stem above E4 is fine.\n      //\n      // maxLine and minLine are set in calculateOptimalStemDirection() so\n      // will be known.\n      mid_line_distance = MIDDLE_LINE - this.maxLine;\n    } else {\n      mid_line_distance = this.minLine - MIDDLE_LINE;\n    }\n\n    // how many lines more than an octave is the relevant notehead?\n    const lines_over_octave_from_mid_line = mid_line_distance - 3.5;\n    if (lines_over_octave_from_mid_line <= 0) {\n      return super_stem_extension;\n    }\n    const stave = this.getStave();\n    let spacing_between_lines = 10;\n    if (stave != undefined) {\n      spacing_between_lines = stave.getSpacingBetweenLines();\n    }\n    return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;\n  }\n\n  // Draws all the `StaveNote` parts. This is the main drawing method.\n  draw(): void {\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    const ctx = this.checkContext();\n    const xBegin = this.getNoteHeadBeginX();\n    const shouldRenderStem = this.hasStem() && !this.beam;\n\n    // Format note head x positions\n    this.note_heads.forEach((notehead) => notehead.setX(xBegin));\n\n    // Format stem x positions\n    const stemX = this.getStemX();\n    this.stem?.setNoteHeadXBounds(stemX, stemX);\n\n    L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n\n    // Apply the overall style -- may be contradicted by local settings:\n    this.applyStyle();\n    this.setAttribute('el', ctx.openGroup('stavenote', this.getAttribute('id')));\n    this.drawLedgerLines();\n    ctx.openGroup('note', undefined, { pointerBBox: true });\n    if (shouldRenderStem) this.drawStem();\n    this.drawNoteHeads();\n    this.drawFlag();\n    ctx.closeGroup();\n    this.drawModifiers();\n    ctx.closeGroup();\n    this.restoreStyle();\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { FontInfo } from './types/common';\nimport { Stave } from './stave';\n\nexport class Repetition extends StaveModifier {\n  protected symbol_type: number;\n\n  protected x_shift: number;\n  protected y_shift: number;\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'repetitions';\n  }\n  static readonly type = {\n    NONE: 1, // no coda or segno\n    CODA_LEFT: 2, // coda at beginning of stave\n    CODA_RIGHT: 3, // coda at end of stave\n    SEGNO_LEFT: 4, // segno at beginning of stave\n    SEGNO_RIGHT: 5, // segno at end of stave\n    DC: 6, // D.C. at end of stave\n    DC_AL_CODA: 7, // D.C. al coda at end of stave\n    DC_AL_FINE: 8, // D.C. al Fine end of stave\n    DS: 9, // D.S. at end of stave\n    DS_AL_CODA: 10, // D.S. al coda at end of stave\n    DS_AL_FINE: 11, // D.S. al Fine at end of stave\n    FINE: 12, // Fine at end of stave\n  };\n\n  constructor(type: number, x: number, y_shift: number) {\n    super();\n    this.setAttribute('type', 'Repetition');\n\n    this.symbol_type = type;\n    this.x = x;\n    this.x_shift = 0;\n    this.y_shift = y_shift;\n    this.font = {\n      family: 'times',\n      size: 12,\n      weight: 'bold',\n      style: 'italic',\n    };\n  }\n\n  getCategory(): string {\n    return Repetition.CATEGORY;\n  }\n\n  setShiftX(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    this.setRendered();\n\n    switch (this.symbol_type) {\n      case Repetition.type.CODA_RIGHT:\n        this.drawCodaFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.CODA_LEFT:\n        this.drawSymbolText(stave, x, 'Coda', true);\n        break;\n      case Repetition.type.SEGNO_LEFT:\n        this.drawSignoFixed(stave, x);\n        break;\n      case Repetition.type.SEGNO_RIGHT:\n        this.drawSignoFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.DC:\n        this.drawSymbolText(stave, x, 'D.C.', false);\n        break;\n      case Repetition.type.DC_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.C. al', true);\n        break;\n      case Repetition.type.DC_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n        break;\n      case Repetition.type.DS:\n        this.drawSymbolText(stave, x, 'D.S.', false);\n        break;\n      case Repetition.type.DS_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.S. al', true);\n        break;\n      case Repetition.type.DS_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n        break;\n      case Repetition.type.FINE:\n        this.drawSymbolText(stave, x, 'Fine', false);\n        break;\n      default:\n        break;\n    }\n\n    return this;\n  }\n\n  drawCodaFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 40, 'coda', { category: 'coda' });\n    return this;\n  }\n\n  drawSignoFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 30, 'segno', { category: 'segno' });\n    return this;\n  }\n\n  drawSymbolText(stave: Stave, x: number, text: string, draw_coda: boolean): this {\n    const ctx = stave.checkContext();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Default to right symbol\n    let text_x = 0 + this.x_shift;\n    let symbol_x = x + this.x_shift;\n    if (this.symbol_type === Repetition.type.CODA_LEFT) {\n      // Offset Coda text to right of stave beginning\n      text_x = this.x + stave.getOptions().vertical_bar_width;\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    } else if (this.symbol_type === Repetition.type.DS) {\n      const modifierWidth = stave.getNoteStartX() - this.x;\n      text_x = this.x + x + this.x_shift + stave.getWidth() - 5 - modifierWidth - ctx.measureText(text).width;\n      // TODO this is weird. setting the x position should probably be refactored, parameters aren't clear here.\n    } else {\n      // Offset Signo text to left stave end\n      symbol_x = this.x + x + stave.getWidth() - 5 + this.x_shift;\n      text_x = symbol_x - +ctx.measureText(text).width - 12;\n    }\n\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    if (draw_coda) {\n      Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\n    }\n\n    ctx.fillText(text, text_x, y + 5);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport class StaveSection extends StaveModifier {\n  protected section: string;\n  protected shift_x: number;\n  protected shift_y: number;\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'stavesection';\n  }\n\n  constructor(section: string, x: number, shift_y: number) {\n    super();\n    this.setAttribute('type', 'StaveSection');\n\n    this.setWidth(16);\n    this.section = section;\n    this.x = x;\n    this.shift_x = 0;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'sans-serif',\n      size: 12,\n      weight: 'bold',\n    };\n  }\n\n  getCategory(): string {\n    return StaveSection.CATEGORY;\n  }\n\n  setStaveSection(section: string): this {\n    this.section = section;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.section).width;\n    let width = text_width + 6; // add left & right padding\n    if (width < 18) width = 18;\n    const height = 20;\n    //  Seems to be a good default y\n    const y = stave.getYForTopText(3) + this.shift_y;\n    let x = this.x + shift_x;\n    ctx.beginPath();\n    ctx.setLineWidth(2);\n    ctx.rect(x, y, width, height);\n    ctx.stroke();\n    x += (width - text_width) / 2;\n    ctx.fillText('' + this.section, x, y + 16);\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Radosaw Eichler 2012\n\nimport { Flow } from './tables';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { FontInfo } from './types/common';\nimport { Stave } from './stave';\n\nexport interface StaveTempoOptions {\n  bpm: number;\n  dots: number;\n  duration: string;\n  name: string;\n}\n\nexport class StaveTempo extends StaveModifier {\n  protected font: FontInfo;\n  protected render_options: {\n    glyph_font_scale: number;\n  };\n\n  protected tempo: StaveTempoOptions;\n  protected shift_x: number;\n  protected shift_y: number;\n\n  static get CATEGORY(): string {\n    return 'stavetempo';\n  }\n\n  constructor(tempo: StaveTempoOptions, x: number, shift_y: number) {\n    super();\n    this.setAttribute('type', 'StaveTempo');\n\n    this.tempo = tempo;\n    this.position = StaveModifier.Position.ABOVE;\n    this.x = x;\n    this.shift_x = 10;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'times',\n      size: 14,\n      weight: 'bold',\n    };\n    this.render_options = {\n      glyph_font_scale: 30, // font size for note\n    };\n  }\n\n  getCategory(): string {\n    return StaveTempo.CATEGORY;\n  }\n\n  setTempo(tempo: StaveTempoOptions): this {\n    this.tempo = tempo;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    const options = this.render_options;\n    // FIXME: What does the '38' mean? Why 38? Is that supposed to\n    // be the default font size for standard notation?\n    const scale = options.glyph_font_scale / 38;\n    const name = this.tempo.name;\n    const duration = this.tempo.duration;\n    const dots = this.tempo.dots;\n    const bpm = this.tempo.bpm;\n    const font = this.font;\n    let x = this.x + this.shift_x + shift_x;\n    const y = stave.getYForTopText(1) + this.shift_y;\n\n    ctx.save();\n\n    if (name) {\n      ctx.setFont(font.family, font.size, font.weight);\n      ctx.fillText(name, x, y);\n      x += ctx.measureText(name).width;\n    }\n\n    if (duration && bpm) {\n      ctx.setFont(font.family, font.size, 'normal');\n\n      if (name) {\n        x += ctx.measureText(' ').width;\n        ctx.fillText('(', x, y);\n        x += ctx.measureText('(').width;\n      }\n\n      const code = Flow.getGlyphProps(duration);\n\n      x += 3 * scale;\n      Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n      x += code.getWidth() * scale;\n\n      // Draw stem and flags\n      if (code.stem) {\n        let stem_height = 30;\n\n        if (code.beam_count) stem_height += 3 * (code.beam_count - 1);\n\n        stem_height *= scale;\n\n        const y_top = y - stem_height;\n        ctx.fillRect(x - scale, y_top, scale, stem_height);\n\n        if (code.flag) {\n          Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem, {\n            category: 'flag.staveTempo',\n          });\n\n          if (!dots) x += 6 * scale;\n        }\n      }\n\n      // Draw dot\n      for (let i = 0; i < dots; i++) {\n        x += 6 * scale;\n        ctx.beginPath();\n        ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n        ctx.fill();\n      }\n\n      ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n    }\n\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\nimport { TextNote } from './textnote';\nimport { FontInfo } from './types/common';\nimport { Stave } from './stave';\n\nexport class StaveText extends StaveModifier {\n  protected options: {\n    shift_x: number;\n    shift_y: number;\n    justification: number;\n  };\n  protected font: FontInfo;\n\n  protected text: string;\n  protected shift_x?: number;\n  protected shift_y?: number;\n\n  static get CATEGORY(): string {\n    return 'stavetext';\n  }\n\n  constructor(\n    text: string,\n    position: number,\n    options: {\n      shift_x: number;\n      shift_y: number;\n      justification: number;\n    }\n  ) {\n    super();\n    this.setAttribute('type', 'StaveText');\n\n    this.setWidth(16);\n    this.text = text;\n    this.position = position;\n    this.options = {\n      shift_x: 0,\n      shift_y: 0,\n      justification: TextNote.Justification.CENTER,\n    };\n    Vex.Merge(this.options, options);\n\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n  }\n\n  getCategory(): string {\n    return StaveText.CATEGORY;\n  }\n\n  setStaveText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  draw(stave: Stave): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.text).width;\n\n    let x;\n    let y;\n    const Position = StaveModifier.Position;\n    const Justification = TextNote.Justification;\n    switch (this.position) {\n      case Position.LEFT:\n      case Position.RIGHT:\n        y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n        if (this.position === Position.LEFT) {\n          x = stave.getX() - text_width - 24 + this.options.shift_x;\n        } else {\n          x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n        }\n        break;\n      case Position.ABOVE:\n      case Position.BELOW:\n        x = stave.getX() + this.options.shift_x;\n        if (this.options.justification === Justification.CENTER) {\n          x += stave.getWidth() / 2 - text_width / 2;\n        } else if (this.options.justification === Justification.RIGHT) {\n          x += stave.getWidth() - text_width;\n        }\n\n        if (this.position === Position.ABOVE) {\n          y = stave.getYForTopText(2) + this.options.shift_y;\n        } else {\n          y = stave.getYForBottomText(2) + this.options.shift_y;\n        }\n        break;\n      default:\n        throw new Vex.RERR('InvalidPosition', 'Value Must be in Modifier.Position.');\n    }\n\n    ctx.fillText('' + this.text, x, y + 4);\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { FontInfo, TieNotes } from './types/common';\n\nexport class StaveTie extends Element {\n  render_options: {\n    cp2: number;\n    last_x_shift: number;\n    tie_spacing: number;\n    cp1: number;\n    first_x_shift: number;\n    text_shift_x: number;\n    y_shift: number;\n    font: FontInfo;\n  };\n\n  protected text?: string;\n\n  protected font: FontInfo;\n  protected notes: TieNotes;\n  protected direction?: number;\n\n  constructor(notes: TieNotes, text?: string) {\n    /**\n     * TieNotes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super();\n    this.setAttribute('type', 'StaveTie');\n    this.notes = notes;\n    this.text = text;\n    this.render_options = {\n      cp1: 8, // Curve control point 1\n      cp2: 12, // Curve control point 2\n      text_shift_x: 0,\n      first_x_shift: 0,\n      last_x_shift: 0,\n      y_shift: 7,\n      tie_spacing: 0,\n      font: { family: 'Arial', size: 10, weight: '' },\n    };\n\n    this.font = this.render_options.font;\n    this.setNotes(notes);\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n\n  setDirection(direction: number): this {\n    this.direction = direction;\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this tie to.\n   *\n   * @param {!Object} notes The notes to tie up.\n   */\n  setNotes(notes: TieNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new Vex.RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new Vex.RuntimeError('BadArguments', 'Tied notes must have similar index sizes');\n    }\n\n    // Success. Lets grab 'em notes.\n    this.notes = notes;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.notes.first_note || !this.notes.last_note;\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new Vex.RERR('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    let cp1 = this.render_options.cp1;\n    let cp2 = this.render_options.cp2;\n\n    if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n      cp1 = 2;\n      cp2 = 8;\n    }\n\n    const first_x_shift = this.render_options.first_x_shift;\n    const last_x_shift = this.render_options.last_x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    for (let i = 0; i < this.notes.first_indices.length; ++i) {\n      const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\n      const first_y_px = params.first_ys[this.notes.first_indices[i]] + y_shift;\n      const last_y_px = params.last_ys[this.notes.last_indices[i]] + y_shift;\n\n      if (isNaN(first_y_px) || isNaN(last_y_px)) {\n        throw new Vex.RERR('BadArguments', 'Bad indices for tie rendering.');\n      }\n\n      const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\n      const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\n\n      ctx.beginPath();\n      ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n      ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n      ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }\n\n  renderText(first_x_px: number, last_x_px: number): void {\n    if (!this.text) return;\n    const ctx = this.checkContext();\n    let center_x = (first_x_px + last_x_px) / 2;\n    center_x -= ctx.measureText(this.text).width / 2;\n    const stave = this.notes.first_note?.checkStave() ?? this.notes.last_note?.checkStave();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText(this.text, center_x + this.render_options.text_shift_x, stave.getYForTopText() - 1);\n    ctx.restore();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.notes.first_note;\n    const last_note = this.notes.last_note;\n\n    let first_x_px;\n    let last_x_px;\n    let first_ys;\n    let last_ys;\n    let stem_direction = 0;\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      stem_direction = first_note.getStemDirection();\n      first_ys = first_note.getYs();\n    } else {\n      const stave = last_note.checkStave();\n      first_x_px = stave.getTieStartX();\n      first_ys = last_note.getYs();\n      this.notes.first_indices = this.notes.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      stem_direction = last_note.getStemDirection();\n      last_ys = last_note.getYs();\n    } else {\n      const stave = first_note.checkStave();\n      last_x_px = stave.getTieEndX();\n      last_ys = first_note.getYs();\n      this.notes.last_indices = this.notes.first_indices;\n    }\n\n    if (this.direction) {\n      stem_direction = this.direction;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: stem_direction,\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport enum VoltaType {\n  NONE = 1,\n  BEGIN = 2,\n  MID = 3,\n  END = 4,\n  BEGIN_END = 5,\n}\n\nexport class Volta extends StaveModifier {\n  protected volta: number;\n  protected number: string;\n\n  protected font: FontInfo;\n  protected y_shift: number;\n  static get CATEGORY(): string {\n    return 'voltas';\n  }\n\n  static get type(): typeof VoltaType {\n    return VoltaType;\n  }\n\n  constructor(type: number, number: string, x: number, y_shift: number) {\n    super();\n    this.setAttribute('type', 'Volta');\n    this.volta = type;\n    this.x = x;\n    this.y_shift = y_shift;\n    this.number = number;\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  getCategory(): string {\n    return Volta.CATEGORY;\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    let width = stave.getWidth() - x; // don't include x (offset) for width\n    const top_y = stave.getYForTopText(stave.getOptions().num_lines) + this.y_shift;\n    const vert_height = 1.5 * stave.getOptions().spacing_between_lines_px;\n    switch (this.volta) {\n      case Volta.type.BEGIN:\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        break;\n      case Volta.type.END:\n        width -= 5;\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      case Volta.type.BEGIN_END:\n        width -= 3;\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      default:\n        break;\n    }\n    // If the beginning of a volta, draw measure number\n    if (this.volta === Volta.type.BEGIN || this.volta === Volta.type.BEGIN_END) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n      ctx.restore();\n    }\n\n    ctx.fillRect(this.x + x, top_y, width, 1);\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { BoundingBox } from './boundingbox';\n\n// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Stem.DEBUG) Vex.L('Vex.Flow.Stem', args);\n}\n\nexport interface StemOptions {\n  stem_down_y_base_offset?: number;\n  stem_up_y_base_offset?: number;\n  stem_down_y_offset?: number;\n  stem_up_y_offset?: number;\n  stemletHeight?: number;\n  isStemlet?: boolean;\n  hide?: boolean;\n  stem_direction?: number;\n  stem_extension?: number;\n  y_bottom?: number;\n  y_top?: number;\n  x_end?: number;\n  x_begin?: number;\n}\n\nexport class Stem extends Element {\n  static DEBUG: boolean;\n\n  protected hide: boolean;\n  protected isStemlet: boolean;\n  protected stemletHeight: number;\n  protected x_begin: number;\n  protected x_end: number;\n  protected y_top: number;\n  protected stem_up_y_offset: number = 0;\n  protected y_bottom: number;\n  protected stem_down_y_offset: number = 0;\n  protected stem_up_y_base_offset: number = 0;\n  protected stem_down_y_base_offset: number = 0;\n  protected stem_direction: number;\n  protected stem_extension: number;\n  protected renderHeightAdjustment: number;\n\n  static get CATEGORY(): string {\n    return 'stem';\n  }\n\n  // Stem directions\n  static get UP(): number {\n    return 1;\n  }\n\n  static get DOWN(): number {\n    return -1;\n  }\n\n  // Theme\n  static get WIDTH(): number {\n    return Flow.STEM_WIDTH;\n  }\n\n  static get HEIGHT(): number {\n    return Flow.STEM_HEIGHT;\n  }\n\n  constructor(options?: StemOptions) {\n    super();\n    this.setAttribute('type', 'Stem');\n\n    // Default notehead x bounds\n    this.x_begin = options?.x_begin || 0;\n    this.x_end = options?.x_end || 0;\n\n    // Y bounds for top/bottom most notehead\n    this.y_top = options?.y_top || 0;\n    this.y_bottom = options?.y_bottom || 0;\n\n    // Stem top extension\n    this.stem_extension = options?.stem_extension || 0;\n\n    // Direction of the stem\n    this.stem_direction = options?.stem_direction || 0;\n\n    // Flag to override all draw calls\n    this.hide = options?.hide || false;\n\n    this.isStemlet = options?.isStemlet || false;\n    this.stemletHeight = options?.stemletHeight || 0;\n\n    // Use to adjust the rendered height without affecting\n    // the results of `.getExtents()`\n    this.renderHeightAdjustment = 0;\n    this.setOptions(options);\n  }\n\n  setOptions(options?: StemOptions): void {\n    // Changing where the stem meets the head\n    this.stem_up_y_offset = options?.stem_up_y_offset || 0;\n    this.stem_down_y_offset = options?.stem_down_y_offset || 0;\n    this.stem_up_y_base_offset = options?.stem_up_y_base_offset || 0;\n    this.stem_down_y_base_offset = options?.stem_down_y_base_offset || 0;\n  }\n\n  // Set the x bounds for the default notehead\n  setNoteHeadXBounds(x_begin: number, x_end: number): this {\n    this.x_begin = x_begin;\n    this.x_end = x_end;\n    return this;\n  }\n\n  // Set the direction of the stem in relation to the noteheads\n  setDirection(direction: number): void {\n    this.stem_direction = direction;\n  }\n\n  // Set the extension for the stem, generally for flags or beams\n  setExtension(ext: number): void {\n    this.stem_extension = ext;\n  }\n\n  getExtension(): number {\n    return this.stem_extension;\n  }\n\n  // The the y bounds for the top and bottom noteheads\n  setYBounds(y_top: number, y_bottom: number): void {\n    this.y_top = y_top;\n    this.y_bottom = y_bottom;\n  }\n\n  // The category of the object\n  getCategory(): string {\n    return Stem.CATEGORY;\n  }\n\n  // Gets the entire height for the stem\n  getHeight(): number {\n    const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;\n    const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension); // parentheses just for grouping.\n    return unsigned_height * this.stem_direction;\n  }\n\n  getBoundingBox(): BoundingBox {\n    throw new Vex.RERR('NotImplemented', 'getBoundingBox() not implemented.');\n  }\n\n  // Get the y coordinates for the very base of the stem to the top of\n  // the extension\n  getExtents(): Record<string, number> {\n    const isStemUp = this.stem_direction === Stem.UP;\n    const ys = [this.y_top, this.y_bottom];\n    const stemHeight = Stem.HEIGHT + this.stem_extension;\n\n    const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n    const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n    const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n\n    return { topY: stemTipY, baseY: outerMostNoteheadY };\n  }\n\n  setVisibility(isVisible: boolean): this {\n    this.hide = !isVisible;\n    return this;\n  }\n\n  setStemlet(isStemlet: boolean, stemletHeight: number): this {\n    this.isStemlet = isStemlet;\n    this.stemletHeight = stemletHeight;\n    return this;\n  }\n\n  adjustHeightForFlag(): void {\n    this.renderHeightAdjustment = this.musicFont.lookupMetric('stem.heightAdjustmentForFlag', -3);\n  }\n\n  adjustHeightForBeam(): void {\n    this.renderHeightAdjustment = -Stem.WIDTH / 2;\n  }\n\n  // Render the stem onto the canvas\n  draw(): void {\n    this.setRendered();\n    if (this.hide) return;\n    const ctx = this.checkContext();\n\n    let stem_x;\n    let stem_y;\n    const stem_direction = this.stem_direction;\n\n    let y_base_offset: number = 0;\n    if (stem_direction === Stem.DOWN) {\n      // Down stems are rendered to the left of the head.\n      stem_x = this.x_begin;\n      stem_y = this.y_top + this.stem_down_y_offset;\n      y_base_offset = this.stem_down_y_base_offset;\n    } else {\n      // Up stems are rendered to the right of the head.\n      stem_x = this.x_end;\n      stem_y = this.y_bottom - this.stem_up_y_offset;\n      y_base_offset = this.stem_up_y_base_offset;\n    }\n\n    const stemHeight = this.getHeight();\n\n    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n\n    // The offset from the stem's base which is required fo satisfy the stemlet height\n    const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\n\n    // Draw the stem\n    ctx.save();\n    this.applyStyle(ctx);\n    ctx.beginPath();\n    ctx.setLineWidth(Stem.WIDTH);\n    ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n    ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n    ctx.stroke();\n    this.restoreStyle(ctx);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Stem, StemOptions } from './stem';\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { GlyphProps } from './glyph';\n\nexport abstract class StemmableNote extends Note {\n  stem_direction?: number;\n  stem?: Stem;\n\n  protected flag?: Glyph;\n  protected stem_extension_override?: number;\n\n  constructor(note_struct: NoteStruct) {\n    super(note_struct);\n    this.setAttribute('type', 'StemmableNote');\n  }\n\n  // Get and set the note's `Stem`\n  getStem(): Stem | undefined {\n    return this.stem;\n  }\n\n  checkStem(): Stem {\n    if (!this.stem) {\n      throw new Vex.RERR('NoStem', 'No stem attached to instance');\n    }\n    return this.stem;\n  }\n\n  setStem(stem: Stem): this {\n    this.stem = stem;\n    return this;\n  }\n\n  // Builds and sets a new stem\n  buildStem(): this {\n    const stem = new Stem();\n    this.setStem(stem);\n    return this;\n  }\n\n  buildFlag(category = 'flag'): void {\n    const { glyph } = this;\n\n    if (this.hasFlag()) {\n      const flagCode = this.getStemDirection() === Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;\n\n      this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\n    }\n  }\n\n  // Get the custom glyph associated with the outer note head on the base of the stem.\n  getBaseCustomNoteHeadGlyph(): GlyphProps {\n    if (this.getStemDirection() === Stem.DOWN) {\n      return this.customGlyphs[this.customGlyphs.length - 1];\n    } else {\n      return this.customGlyphs[0];\n    }\n  }\n\n  // Get the full length of stem\n  getStemLength(): number {\n    return Stem.HEIGHT + this.getStemExtension();\n  }\n\n  // Get the number of beams for this duration\n  getBeamCount(): number {\n    const glyph = this.getGlyph();\n\n    if (glyph) {\n      return glyph.beam_count;\n    } else {\n      return 0;\n    }\n  }\n\n  // Get the minimum length of stem\n  getStemMinimumLength(): number {\n    const frac = Flow.durationToFraction(this.duration);\n    let length = frac.value() <= 1 ? 0 : 20;\n    // if note is flagged, cannot shorten beam\n    switch (this.duration) {\n      case '8':\n        if (this.beam == undefined) length = 35;\n        break;\n      case '16':\n        length = this.beam == undefined ? 35 : 25;\n        break;\n      case '32':\n        length = this.beam == undefined ? 45 : 35;\n        break;\n      case '64':\n        length = this.beam == undefined ? 50 : 40;\n        break;\n      case '128':\n        length = this.beam == undefined ? 55 : 45;\n        break;\n      default:\n        break;\n    }\n    return length;\n  }\n\n  // Get/set the direction of the stem\n  getStemDirection(): number {\n    if (!this.stem_direction) throw new Vex.RERR('NoStem', 'No stem attached to this note.');\n    return this.stem_direction;\n  }\n\n  setStemDirection(direction: number): this {\n    if (!direction) direction = Stem.UP;\n    if (direction !== Stem.UP && direction !== Stem.DOWN) {\n      throw new Vex.RERR('BadArgument', `Invalid stem direction: ${direction}`);\n    }\n\n    this.stem_direction = direction;\n\n    if (this.stem) {\n      this.stem.setDirection(direction);\n      this.stem.setExtension(this.getStemExtension());\n\n      // Lookup the base custom notehead (closest to the base of the stem) to extend or shorten\n      // the stem appropriately. If there's no custom note head, lookup the standard notehead.\n      const glyph = this.getBaseCustomNoteHeadGlyph() || this.getGlyph();\n\n      // Get the font-specific customizations for the note heads.\n      const offsets = this.musicFont.lookupMetric(`stem.noteHead.${glyph.code_head}`, {\n        offsetYBaseStemUp: 0,\n        offsetYTopStemUp: 0,\n        offsetYBaseStemDown: 0,\n        offsetYTopStemDown: 0,\n      });\n\n      // Configure the stem to use these offsets.\n      this.stem.setOptions({\n        stem_up_y_offset: offsets.offsetYTopStemUp, // glyph.stem_up_y_offset,\n        stem_down_y_offset: offsets.offsetYTopStemDown, // glyph.stem_down_y_offset,\n        stem_up_y_base_offset: offsets.offsetYBaseStemUp, // glyph.stem_up_y_base_offset,\n        stem_down_y_base_offset: offsets.offsetYBaseStemDown, // glyph.stem_down_y_base_offset,\n      });\n    }\n\n    // Reset and reformat everything.\n    this.reset();\n    if (this.hasFlag()) {\n      this.buildFlag();\n    }\n    this.beam = undefined;\n    if (this.preFormatted) {\n      this.preFormat();\n    }\n    return this;\n  }\n\n  // Get the `x` coordinate of the stem\n  getStemX(): number {\n    const x_begin = this.getAbsoluteX() + this.x_shift;\n    const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n    const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n    return stem_x;\n  }\n\n  // Get the `x` coordinate for the center of the glyph.\n  // Used for `TabNote` stems and stemlets over rests\n  getCenterGlyphX(): number {\n    return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n  }\n\n  // Get the stem extension for the current duration\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != undefined) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === Stem.UP ? glyph.stem_up_extension : glyph.stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Set the stem length to a specific. Will override the default length.\n  setStemLength(height: number): this {\n    this.stem_extension_override = height - Stem.HEIGHT;\n    return this;\n  }\n\n  // Get the top and bottom `y` values of the stem.\n  getStemExtents(): Record<string, number> {\n    if (!this.stem) throw new Vex.RERR('NoStem', 'No stem attached to this note.');\n    return this.stem.getExtents();\n  }\n\n  /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n  getYForTopText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new Vex.RERR('InvalidState', 'Stem does not have extents.');\n\n      return Math.min(\n        stave.getYForTopText(textLine),\n        extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n      );\n    } else {\n      return stave.getYForTopText(textLine);\n    }\n  }\n\n  /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n  getYForBottomText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new Vex.RERR('InvalidState', 'Stem does not have extents.');\n\n      return Math.max(\n        stave.getYForTopText(textLine),\n        extents.baseY + this.render_options.annotation_spacing * textLine\n      );\n    } else {\n      return stave.getYForBottomText(textLine);\n    }\n  }\n\n  hasFlag(): boolean {\n    return Flow.getGlyphProps(this.duration).flag && !this.beam;\n  }\n\n  /** Post formats the note. */\n  postFormat(): this {\n    this.beam?.postFormat();\n    this.postFormatted = true;\n\n    return this;\n  }\n\n  /** Renders the stem onto the canvas. */\n  drawStem(stemOptions: StemOptions): void {\n    this.checkContext();\n    this.setRendered();\n\n    this.setStem(new Stem(stemOptions));\n    this.stem?.setContext(this.getContext()).draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Renderer } from './renderer';\nimport { StaveNote } from './stavenote';\nimport { FontInfo } from './types/common';\nimport { Note } from './note';\nimport { ModifierContextState } from './modifiercontext';\nimport { StemmableNote } from './stemmablenote';\n\nexport class StringNumber extends Modifier {\n  protected note?: Note;\n\n  protected radius: number;\n\n  protected last_note?: Note;\n  protected string_number: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected dashed: boolean;\n  protected leg: number;\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'stringnumber';\n  }\n\n  // ## Static Methods\n  // Arrange string numbers inside a `ModifierContext`\n  static format(nums: StringNumber[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const right_shift = state.right_shift;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shift_left = 0;\n    let shift_right = 0;\n\n    let i;\n    let num;\n    let note;\n    let pos;\n    for (i = 0; i < nums.length; ++i) {\n      num = nums[i];\n      note = num.getNote();\n\n      for (i = 0; i < nums.length; ++i) {\n        num = nums[i];\n        note = num.getNote();\n        pos = num.getPosition();\n\n        if (!(note instanceof StaveNote)) {\n          throw new Vex.RERR('NoStaveNote');\n        }\n\n        const props = note.getKeyProps()[num.getIndex()];\n\n        if (note !== prev_note) {\n          for (let n = 0; n < note.keys.length; ++n) {\n            if (left_shift === 0) {\n              shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);\n            }\n            if (right_shift === 0) {\n              shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);\n            }\n          }\n          prev_note = note;\n        }\n\n        nums_list.push({\n          pos,\n          note,\n          num,\n          line: props.line,\n          shiftL: shift_left,\n          shiftR: shift_right,\n        });\n      }\n    }\n\n    // Sort string numbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    // TODO: This variable never gets assigned to anything. Is that a bug or can this be removed?\n    let num_shiftL = 0; // eslint-disable-line\n    let num_shiftR = 0;\n    let x_widthL = 0;\n    let x_widthR = 0;\n    let last_line = null;\n    let last_note = null;\n    for (i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      note = nums_list[i].note;\n      pos = nums_list[i].pos;\n      num = nums_list[i].num;\n      const line = nums_list[i].line;\n      const shiftL = nums_list[i].shiftL;\n      const shiftR = nums_list[i].shiftR;\n\n      // Reset the position of the string number every line.\n      if (line !== last_line || note !== last_note) {\n        num_shiftL = left_shift + shiftL; // eslint-disable-line\n        num_shiftR = right_shift + shiftR;\n      }\n\n      const num_width = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift);\n        num_shift = shift_left + num_width; // spacing\n        x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(num_shiftR);\n        num_shift += num_width; // spacing\n        x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\n      }\n      last_line = line;\n      last_note = note;\n    }\n\n    state.left_shift += x_widthL;\n    state.right_shift += x_widthR;\n    return true;\n  }\n\n  constructor(number: string) {\n    super();\n    this.setAttribute('type', 'StringNumber');\n\n    this.string_number = number;\n    this.setWidth(20); // ???\n    this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.dashed = true; // true - draw dashed extension  false - no extension\n    this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n    this.radius = 8;\n    this.font = {\n      family: 'sans-serif',\n      size: 10,\n      weight: 'bold',\n    };\n  }\n\n  getCategory(): string {\n    return StringNumber.CATEGORY;\n  }\n\n  setLineEndType(leg: number): this {\n    if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n      this.leg = leg;\n    }\n    return this;\n  }\n\n  setStringNumber(number: string): this {\n    this.string_number = number;\n    return this;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  setLastNote(note: Note): this {\n    this.last_note = note;\n    return this;\n  }\n\n  setDashed(dashed: boolean): this {\n    this.dashed = dashed;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    if (!(this.note && this.index != null)) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw string number without a note and index.\");\n    }\n    this.setRendered();\n\n    const line_space = this.note.checkStave().getOptions().spacing_between_lines_px;\n\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n      case Modifier.Position.BELOW: {\n        const stem_ext = this.note.getStemExtents();\n        let top = stem_ext.topY;\n        let bottom = stem_ext.baseY + 2;\n\n        if (this.note.getStemDirection() === StaveNote.STEM_DOWN) {\n          top = stem_ext.baseY;\n          bottom = stem_ext.topY - 2;\n        }\n\n        if (this.position === Modifier.Position.ABOVE) {\n          dot_y = this.note.hasStem() ? top - line_space * 1.75 : start.y - line_space * 1.75;\n        } else {\n          dot_y = this.note.hasStem() ? bottom + line_space * 1.5 : start.y + line_space * 1.75;\n        }\n\n        dot_y += this.y_shift + this.y_offset;\n\n        break;\n      }\n      case Modifier.Position.LEFT:\n        dot_x -= this.radius / 2 + 5;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += this.radius / 2 + 6;\n        break;\n      default:\n        throw new Vex.RERR('InvalidPosition', `The position ${this.position} is invalid`);\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n    ctx.setLineWidth(1.5);\n    ctx.stroke();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const x = dot_x - ctx.measureText(this.string_number).width / 2;\n    ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n\n    if (this.last_note instanceof StemmableNote) {\n      const end = this.last_note.getStemX() - this.note.getX() + 5;\n      ctx.setStrokeStyle('#000000');\n      ctx.setLineCap('round');\n      ctx.setLineWidth(0.6);\n      if (this.dashed) {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n      } else {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n      }\n\n      let len;\n      let pattern;\n      switch (this.leg) {\n        case Renderer.LineEndType.UP:\n          len = -10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        case Renderer.LineEndType.DOWN:\n          len = 10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        default:\n          break;\n      }\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { FontInfo } from './types/common';\nimport { TabNote } from './tabnote';\nimport { ModifierContextState } from './modifiercontext';\n\nexport class Stroke extends Modifier {\n  protected options: {\n    all_voices: boolean;\n  };\n  protected all_voices: boolean;\n  protected type: number;\n\n  protected note_end?: Note;\n  protected render_options: {\n    font_scale: number;\n    stroke_px: number;\n    stroke_spacing: number;\n  };\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'strokes';\n  }\n\n  static readonly Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3, // Arpeggiated chord\n    ROLL_UP: 4, // Arpeggiated chord\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n  };\n\n  // Arrange strokes inside `ModifierContext`\n  static format(strokes: Stroke[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const stroke_spacing = 0;\n\n    if (!strokes || strokes.length === 0) return false;\n\n    const strokeList = strokes.map((stroke) => {\n      const note = stroke.getNote();\n      if (note instanceof StaveNote) {\n        const { line } = note.getKeyProps()[stroke.getIndex()];\n        const shift = note.getLeftDisplacedHeadPx();\n        return { line, shift, stroke };\n      } else if (note instanceof TabNote) {\n        const { str: string } = note.getPositions()[stroke.getIndex()];\n        return { line: string, shift: 0, stroke };\n      } else {\n        throw new Vex.RERR('Internal', 'Unexpexted');\n      }\n    });\n\n    const strokeShift = left_shift;\n\n    // There can only be one stroke .. if more than one, they overlay each other\n    const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n      stroke.setXShift(strokeShift + shift);\n      return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n    }, 0);\n\n    state.left_shift += xShift;\n\n    return true;\n  }\n\n  constructor(type: number, options: { all_voices: boolean }) {\n    super();\n    this.setAttribute('type', 'Stroke');\n\n    this.options = Vex.Merge({}, options);\n\n    // multi voice - span stroke across all voices if true\n    this.all_voices = 'all_voices' in this.options ? this.options.all_voices : true;\n\n    // multi voice - end note of stroke, set in draw()\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      font_scale: 38,\n      stroke_px: 3,\n      stroke_spacing: 10,\n    };\n\n    this.font = {\n      family: 'serif',\n      size: 10,\n      weight: 'bold italic',\n    };\n\n    this.setXShift(0);\n    this.setWidth(10);\n  }\n\n  getCategory(): string {\n    return Stroke.CATEGORY;\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  addEndNote(note: Note): this {\n    this.note_end = note;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (!(this.note && this.index != null)) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw stroke without a note and index.\");\n    }\n\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let ys = this.note.getYs();\n    let topY = start.y;\n    let botY = start.y;\n    const x = start.x - 5;\n    const line_space = this.note.checkStave().getOptions().spacing_between_lines_px;\n\n    const notes = this.checkModifierContext().getMembers(this.note.getCategory());\n    for (let i = 0; i < notes.length; i++) {\n      const note = notes[i];\n      if (note instanceof Note) {\n        ys = note.getYs();\n        for (let n = 0; n < ys.length; n++) {\n          if (this.note === notes[i] || this.all_voices) {\n            topY = Vex.Min(topY, ys[n]);\n            botY = Vex.Max(botY, ys[n]);\n          }\n        }\n      }\n    }\n\n    let arrow = '';\n    let arrow_shift_x = 0;\n    let arrow_y = 0;\n    let text_shift_x = 0;\n    let text_y = 0;\n\n    switch (this.type) {\n      case Stroke.Type.BRUSH_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        arrow_y = topY - line_space / 2 + 10;\n        botY += line_space / 2;\n        break;\n      case Stroke.Type.BRUSH_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = 0.5;\n        arrow_y = botY + line_space / 2;\n        topY -= line_space / 2;\n        break;\n      case Stroke.Type.ROLL_DOWN:\n      case Stroke.Type.RASQUEDO_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        text_shift_x = this.x_shift + arrow_shift_x - 2;\n        if (this.note instanceof StaveNote) {\n          topY += 1.5 * line_space;\n          if ((botY - topY) % 2 !== 0) {\n            botY += 0.5 * line_space;\n          } else {\n            botY += line_space;\n          }\n          arrow_y = topY - line_space;\n          text_y = botY + line_space + 2;\n        } else {\n          topY += 1.5 * line_space;\n          botY += line_space;\n          arrow_y = topY - 0.75 * line_space;\n          text_y = botY + 0.25 * line_space;\n        }\n        break;\n      case Stroke.Type.ROLL_UP:\n      case Stroke.Type.RASQUEDO_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = -4;\n        text_shift_x = this.x_shift + arrow_shift_x - 1;\n        if (this.note instanceof StaveNote) {\n          arrow_y = line_space / 2;\n          topY += 0.5 * line_space;\n          if ((botY - topY) % 2 === 0) {\n            botY += line_space / 2;\n          }\n          arrow_y = botY + 0.5 * line_space;\n          text_y = topY - 1.25 * line_space;\n        } else {\n          topY += 0.25 * line_space;\n          botY += 0.5 * line_space;\n          arrow_y = botY + 0.25 * line_space;\n          text_y = topY - line_space;\n        }\n        break;\n      case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n        topY += 0.5 * line_space;\n        botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\n        break;\n      default:\n        throw new Vex.RERR('InvalidType', `The stroke type ${this.type} does not exist`);\n    }\n\n    let strokeLine = 'straight';\n    // Draw the stroke\n    if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n      ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);\n    } else {\n      strokeLine = 'wiggly';\n      if (this.note instanceof StaveNote) {\n        for (let i = topY; i <= botY; i += line_space) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n      } else {\n        let i;\n        for (i = topY; i <= botY; i += 10) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n        if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n          text_y = i + 0.25 * line_space;\n        }\n      }\n    }\n\n    if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n      return; // skip drawing arrow heads or text\n    }\n\n    // Draw the arrow head\n    Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {\n      category: `stroke.${arrow}.${strokeLine}`,\n    });\n\n    // Draw the rasquedo \"R\"\n    if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText('R', x + text_shift_x, text_y);\n      ctx.restore();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Gregory Ristow (2015)\n\nimport { Vex } from './vex';\n\nconst attrNamesToIgnoreMap = {\n  path: {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n  },\n  rect: {},\n  text: {\n    width: true,\n    height: true,\n  },\n};\n\n{\n  const fontAttrNamesToIgnore = {\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  };\n\n  Vex.Merge(attrNamesToIgnoreMap.rect, fontAttrNamesToIgnore);\n  Vex.Merge(attrNamesToIgnoreMap.path, fontAttrNamesToIgnore);\n}\n\nexport class SVGContext {\n  constructor(element) {\n    // element is the parent DOM object\n    this.element = element;\n    // Create the SVG in the SVG namespace:\n    this.svgNS = 'http://www.w3.org/2000/svg';\n    const svg = this.create('svg');\n    // Add it to the canvas:\n    this.element.appendChild(svg);\n\n    // Point to it:\n    this.svg = svg;\n    this.groups = [this.svg]; // Create the group stack\n    this.parent = this.svg;\n\n    this.path = '';\n    this.pen = { x: NaN, y: NaN };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      'font-family': 'Arial',\n      'font-size': '8pt',\n      'font-weight': 'normal',\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      fill: 'black',\n      stroke: 'black',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      fill: 'white',\n      stroke: 'white',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n\n    // Test for Internet Explorer\n    this.iePolyfill();\n  }\n\n  create(svgElementType) {\n    return document.createElementNS(this.svgNS, svgElementType);\n  }\n\n  // Allow grouping elements in containers for interactivity.\n  openGroup(cls, id, attrs) {\n    const group = this.create('g');\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', Vex.Prefix(cls));\n    if (id) group.setAttribute('id', Vex.Prefix(id));\n\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n    return group;\n  }\n\n  closeGroup() {\n    this.groups.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n\n  add(elem) {\n    this.parent.appendChild(elem);\n  }\n\n  // Tests if the browser is Internet Explorer; if it is,\n  // we do some tricks to improve text layout.  See the\n  // note at ieMeasureTextFix() for details.\n  iePolyfill() {\n    if (typeof navigator !== 'undefined') {\n      this.ie =\n        /MSIE 9/i.test(navigator.userAgent) ||\n        /MSIE 10/i.test(navigator.userAgent) ||\n        /rv:11\\.0/i.test(navigator.userAgent) ||\n        /Trident/i.test(navigator.userAgent);\n    }\n  }\n\n  // ### Styling & State Methods:\n\n  setFont(family, size, weight) {\n    // Unlike canvas, in SVG italic is handled by font-style,\n    // not weight. So: we search the weight argument and\n    // apply bold and italic to weight and style respectively.\n    let bold = false;\n    let italic = false;\n    let style = 'normal';\n    // Weight might also be a number (200, 400, etc...) so we\n    // test its type to be sure we have access to String methods.\n    if (typeof weight === 'string') {\n      // look for \"italic\" in the weight:\n      if (weight.indexOf('italic') !== -1) {\n        weight = weight.replace(/italic/g, '');\n        italic = true;\n      }\n      // look for \"bold\" in weight\n      if (weight.indexOf('bold') !== -1) {\n        weight = weight.replace(/bold/g, '');\n        bold = true;\n      }\n      // remove any remaining spaces\n      weight = weight.replace(/ /g, '');\n    }\n    weight = bold ? 'bold' : weight;\n    weight = typeof weight === 'undefined' || weight === '' ? 'normal' : weight;\n\n    style = italic ? 'italic' : style;\n\n    const fontAttributes = {\n      'font-family': family,\n      'font-size': size + 'pt',\n      'font-weight': weight,\n      'font-style': style,\n    };\n\n    // Store the font size so that if the browser is Internet\n    // Explorer we can fix its calculations of text width.\n    this.fontSize = Number(size);\n\n    Vex.Merge(this.attributes, fontAttributes);\n    Vex.Merge(this.state, fontAttributes);\n\n    return this;\n  }\n\n  setRawFont(font) {\n    font = font.trim();\n    // Assumes size first, splits on space -- which is presently\n    // how all existing modules are calling this.\n    const fontArray = font.split(' ');\n\n    this.attributes['font-family'] = fontArray[1];\n    this.state['font-family'] = fontArray[1];\n\n    this.attributes['font-size'] = fontArray[0];\n    this.state['font-size'] = fontArray[0];\n\n    // Saves fontSize for IE polyfill\n    this.fontSize = Number(fontArray[0].match(/\\d+/));\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  }\n\n  // @param array {lineDash} as [dashInt, spaceInt, dashInt, spaceInt, etc...]\n  setLineDash(lineDash) {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      lineDash = lineDash.join(', ');\n      this.attributes['stroke-dasharray'] = lineDash;\n      return this;\n    } else {\n      throw new Vex.RERR('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n\n  setLineCap(lineCap) {\n    this.attributes['stroke-linecap'] = lineCap;\n    return this;\n  }\n\n  // ### Sizing & Scaling Methods:\n\n  // TODO (GCR): See note at scale() -- seperate our internal\n  // conception of pixel-based width/height from the style.width\n  // and style.height properties eventually to allow users to\n  // apply responsive sizing attributes to the SVG.\n  resize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width;\n\n    this.svg.style.width = width;\n    this.svg.style.height = height;\n\n    const attributes = {\n      width,\n      height,\n    };\n\n    this.applyAttributes(this.svg, attributes);\n    this.scale(this.state.scale.x, this.state.scale.y);\n    return this;\n  }\n\n  scale(x, y) {\n    // uses viewBox to scale\n    // TODO (GCR): we may at some point want to distinguish the\n    // style.width / style.height properties that are applied to\n    // the SVG object from our internal conception of the SVG\n    // width/height.  This would allow us to create automatically\n    // scaling SVG's that filled their containers, for instance.\n    //\n    // As this isn't implemented in Canvas or Raphael contexts,\n    // I've left as is for now, but in using the viewBox to\n    // handle internal scaling, am trying to make it possible\n    // for us to eventually move in that direction.\n\n    this.state.scale = { x, y };\n    const visibleWidth = this.width / x;\n    const visibleHeight = this.height / y;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n\n    return this;\n  }\n\n  setViewBox(...args) {\n    // Override for \"x y w h\" style:\n    if (args.length === 1) {\n      const [viewBox] = args;\n      this.svg.setAttribute('viewBox', viewBox);\n    } else {\n      const [xMin, yMin, width, height] = args;\n      const viewBoxString = xMin + ' ' + yMin + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }\n\n  // ### Drawing helper methods:\n\n  applyAttributes(element, attributes) {\n    const attrNamesToIgnore = attrNamesToIgnoreMap[element.nodeName];\n    Object.keys(attributes).forEach((propertyName) => {\n      if (attrNamesToIgnore && attrNamesToIgnore[propertyName]) {\n        return;\n      }\n      element.setAttributeNS(null, propertyName, attributes[propertyName]);\n    });\n\n    return element;\n  }\n\n  // ### Shape & Path Methods:\n\n  clear() {\n    // Clear the SVG by removing all inner children.\n\n    // (This approach is usually slightly more efficient\n    // than removing the old SVG & adding a new one to\n    // the container element, since it does not cause the\n    // container to resize twice.  Also, the resize\n    // triggered by removing the entire SVG can trigger\n    // a touchcancel event when the element resizes away\n    // from a touch point.)\n\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    }\n\n    // Replace the viewbox attribute we just removed:\n    this.scale(this.state.scale.x, this.state.scale.y);\n  }\n\n  // ## Rectangles:\n\n  rect(x, y, width, height, attributes) {\n    // Avoid invalid negative height attribs by\n    // flipping the rectangle on its head:\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    // Create the rect & style it:\n    const rectangle = this.create('rect');\n    if (typeof attributes === 'undefined') {\n      attributes = {\n        fill: 'none',\n        'stroke-width': this.lineWidth,\n        stroke: 'black',\n      };\n    }\n\n    Vex.Merge(attributes, {\n      x,\n      y,\n      width,\n      height,\n    });\n\n    this.applyAttributes(rectangle, attributes);\n\n    this.add(rectangle);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    this.rect(x, y, width, height, this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    // TODO(GCR): Improve implementation of this...\n    // Currently it draws a box of the background color, rather\n    // than creating alpha through lower z-levels.\n    //\n    // See the implementation of this in SVGKit:\n    // http://sourceforge.net/projects/svgkit/\n    // as a starting point.\n    //\n    // Adding a large number of transform paths (as we would\n    // have to do) could be a real performance hit.  Since\n    // tabNote seems to be the only module that makes use of this\n    // it may be worth creating a seperate tabStave that would\n    // draw lines around locations of tablature fingering.\n    //\n\n    this.rect(x, y, width, height, this.background_attributes);\n    return this;\n  }\n\n  // ## Paths:\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = NaN;\n    this.pen.y = NaN;\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n    } else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n    if (antiClockwise) {\n      sweepFlag = 1;\n      if (endAngle - startAngle < Math.PI) {\n        largeArcFlag = 1;\n      }\n    } else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path +=\n      'M' + x1 + ' ' + y1 + ' A' + radius + ' ' + radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + x2 + ' ' + y2;\n    if (!isNaN(this.pen.x) && !isNaN(this.pen.y)) {\n      this.peth += 'M' + this.pen.x + ' ' + this.pen.y;\n    }\n  }\n\n  closePath() {\n    this.path += 'Z';\n\n    return this;\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    // Calculate the width & paths of the glow:\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n      // Stroke at varying widths to create effect of gaussian blur:\n      for (let i = 1; i <= num_paths; i++) {\n        const attributes = {\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +(((sa.width * 0.4) / num_paths) * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n        };\n\n        const path = this.create('path');\n        attributes.d = this.path;\n        this.applyAttributes(path, attributes);\n        this.add(path);\n      }\n    }\n    return this;\n  }\n\n  fill(attributes) {\n    // If our current path is set to glow, make it glow\n    this.glow();\n\n    const path = this.create('path');\n    if (typeof attributes === 'undefined') {\n      attributes = {};\n      Vex.Merge(attributes, this.attributes);\n      attributes.stroke = 'none';\n    }\n\n    attributes.d = this.path;\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  stroke() {\n    // If our current path is set to glow, make it glow.\n    this.glow();\n\n    const path = this.create('path');\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    attributes.fill = 'none';\n    attributes['stroke-width'] = this.lineWidth;\n    attributes.d = this.path;\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  // ## Text Methods:\n  measureText(text) {\n    const txt = this.create('text');\n    if (typeof txt.getBBox !== 'function') {\n      return { x: 0, y: 0, width: 0, height: 0 };\n    }\n\n    txt.textContent = text;\n    this.applyAttributes(txt, this.attributes);\n\n    // Temporarily add it to the document for measurement.\n    this.svg.appendChild(txt);\n\n    let bbox = txt.getBBox();\n    if (this.ie && text !== '' && this.attributes['font-style'] === 'italic') {\n      bbox = this.ieMeasureTextFix(bbox, text);\n    }\n\n    this.svg.removeChild(txt);\n    return bbox;\n  }\n\n  ieMeasureTextFix(bbox) {\n    // Internet Explorer over-pads text in italics,\n    // resulting in giant width estimates for measureText.\n    // To fix this, we use this formula, tested against\n    // ie 11:\n    // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96\n    // And then subtract the overestimate from calculated width.\n\n    const fontSize = Number(this.fontSize);\n    const m = 1.196;\n    const b = 1.9598;\n    const widthCorrection = m * fontSize + b;\n    const width = bbox.width - widthCorrection;\n    const height = bbox.height - 1.5;\n\n    // Get non-protected copy:\n    const box = {\n      x: bbox.x,\n      y: bbox.y,\n      width,\n      height,\n    };\n\n    return box;\n  }\n\n  fillText(text, x, y) {\n    if (!text || text.length <= 0) {\n      return;\n    }\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    attributes.stroke = 'none';\n    attributes.x = x;\n    attributes.y = y;\n\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n        scale: this.state.scale,\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n      lineWidth: this.lineWidth,\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state['font-family'] = state.state['font-family'];\n    this.state['font-weight'] = state.state['font-weight'];\n    this.state['font-style'] = state.state['font-style'];\n    this.state['font-size'] = state.state['font-size'];\n    this.state.scale = state.state.scale;\n\n    this.attributes['font-family'] = state.attributes['font-family'];\n    this.attributes['font-weight'] = state.attributes['font-weight'];\n    this.attributes['font-style'] = state.attributes['font-style'];\n    this.attributes['font-size'] = state.attributes['font-size'];\n\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n\n    this.lineWidth = state.lineWidth;\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This class implements a musical system, which is a collection of staves,\n// each which can have one or more voices. All voices across all staves in\n// the system are formatted together.\n\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Stave } from './stave';\nimport { Formatter } from './formatter';\nimport { Note } from './note';\n\nexport class System extends Element {\n  constructor(params = {}) {\n    super();\n    this.setAttribute('type', 'System');\n    this.setOptions(params);\n    this.parts = [];\n  }\n\n  setOptions(options = {}) {\n    this.options = {\n      x: 10,\n      y: 10,\n      width: 500,\n      connector: null,\n      spaceBetweenStaves: 12, // stave spaces\n      factory: null,\n      noJustification: false,\n      debugFormatter: false,\n      formatIterations: 0, // number of formatter tuning steps\n      noPadding: false,\n      ...options,\n      details: {\n        alpha: 0.5, // formatter tuner learning/shifting rate\n        ...options.details,\n      },\n    };\n\n    this.factory = this.options.factory || new Factory({ renderer: { el: null } });\n  }\n\n  setContext(context) {\n    super.setContext(context);\n    this.factory.setContext(context);\n    return this;\n  }\n\n  addConnector(type = 'double') {\n    this.connector = this.factory.StaveConnector({\n      top_stave: this.parts[0].stave,\n      bottom_stave: this.parts[this.parts.length - 1].stave,\n      type,\n    });\n    return this.connector;\n  }\n\n  addStave(params) {\n    params = {\n      stave: null,\n      voices: [],\n      spaceAbove: 0, // stave spaces\n      spaceBelow: 0, // stave spaces\n      debugNoteMetrics: false,\n      ...params,\n      options: {\n        left_bar: false,\n        ...params.options,\n      },\n    };\n\n    if (!params.stave) {\n      params.stave = this.factory.Stave({\n        x: this.options.x,\n        y: this.options.y,\n        width: this.options.width,\n        options: params.options,\n      });\n    }\n\n    params.voices.forEach((voice) =>\n      voice\n        .setContext(this.context)\n        .setStave(params.stave)\n        .getTickables()\n        .forEach((tickable) => tickable.setStave(params.stave))\n    );\n\n    this.parts.push(params);\n    return params.stave;\n  }\n\n  format() {\n    const formatter = new Formatter({ ...this.options.details });\n    this.formatter = formatter;\n\n    let y = this.options.y;\n    let startX = 0;\n    let allVoices = [];\n    const debugNoteMetricsYs = [];\n\n    // Join the voices for each stave.\n    this.parts.forEach((part) => {\n      y = y + part.stave.space(part.spaceAbove);\n      part.stave.setY(y);\n      formatter.joinVoices(part.voices);\n      y = y + part.stave.space(part.spaceBelow);\n      y = y + part.stave.space(this.options.spaceBetweenStaves);\n      if (part.debugNoteMetrics) {\n        debugNoteMetricsYs.push({ y, voice: part.voices[0] });\n        y += 15;\n      }\n      allVoices = allVoices.concat(part.voices);\n\n      startX = Math.max(startX, part.stave.getNoteStartX());\n    });\n\n    // Update the start position of all staves.\n    this.parts.forEach((part) => part.stave.setNoteStartX(startX));\n    const justifyWidth = this.options.noPadding\n      ? this.options.width - this.options.x\n      : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n\n    formatter.format(allVoices, this.options.noJustification ? 0 : justifyWidth);\n\n    for (let i = 0; i < this.options.formatIterations; i++) {\n      formatter.tune({ alpha: this.options.details.alpha });\n    }\n\n    this.startX = startX;\n    this.debugNoteMetricsYs = debugNoteMetricsYs;\n    this.lastY = y;\n  }\n\n  draw() {\n    // Render debugging information, if requested.\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (this.options.debugFormatter) {\n      Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n    }\n\n    this.debugNoteMetricsYs.forEach((d) => {\n      d.voice.getTickables().forEach((note) => Note.plotMetrics(ctx, note, d.y));\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/* eslint-disable key-spacing */\n\nimport { Vex } from './vex';\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { DefaultFontStack } from './font';\n\nconst Flow = {\n  STEM_WIDTH: 1.5,\n  STEM_HEIGHT: 35,\n  STAVE_LINE_THICKNESS: 1,\n  RESOLUTION: 16384,\n\n  DEFAULT_FONT_STACK: DefaultFontStack,\n  DEFAULT_NOTATION_FONT_SCALE: 39,\n  DEFAULT_TABLATURE_FONT_SCALE: 39,\n  SLASH_NOTEHEAD_WIDTH: 15,\n  STAVE_LINE_DISTANCE: 10,\n\n  // HACK:\n  // Since text origins are positioned at the baseline, we must\n  // compensate for the ascender of the text. Of course, 1 staff space is\n  // a very poor approximation.\n  //\n  // This will be deprecated in the future. This is a temporary solution until\n  // we have more robust text metrics.\n  TEXT_HEIGHT_OFFSET_HACK: 1,\n\n  /* Kerning (DEPRECATED) */\n  IsKerned: true,\n  keyProperties: keyProperties,\n  integerToNote: integerToNote,\n  durationToTicks: durationToTicks,\n  durationToFraction: durationToFraction,\n  durationToNumber: durationToNumber,\n  getGlyphProps: getGlyphProps,\n  textWidth: textWidth,\n  tabToGlyph: tabToGlyph,\n  articulationCodes: articulationCodes,\n  TIME4_4: TIME4_4,\n};\n\nFlow.clefProperties = (clef) => {\n  if (!clef) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\n  const props = Flow.clefProperties.values[clef];\n  if (!props) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\n  return props;\n};\n\nFlow.clefProperties.values = {\n  treble: { line_shift: 0 },\n  bass: { line_shift: 6 },\n  tenor: { line_shift: 4 },\n  alto: { line_shift: 3 },\n  soprano: { line_shift: 1 },\n  percussion: { line_shift: 0 },\n  'mezzo-soprano': { line_shift: 2 },\n  'baritone-c': { line_shift: 5 },\n  'baritone-f': { line_shift: 5 },\n  subbass: { line_shift: 7 },\n  french: { line_shift: -1 },\n};\n\n/*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n*/\nfunction keyProperties(key, clef, params) {\n  if (clef === undefined) {\n    clef = 'treble';\n  }\n\n  const options = { octave_shift: 0 };\n\n  if (typeof params === 'object') {\n    Vex.Merge(options, params);\n  }\n\n  const pieces = key.split('/');\n\n  if (pieces.length < 2) {\n    throw new Vex.RERR('BadArguments', `Key must have note + octave and an optional glyph: ${key}`);\n  }\n\n  const k = pieces[0].toUpperCase();\n  const value = Flow.keyProperties.note_values[k];\n  if (!value) throw new Vex.RERR('BadArguments', 'Invalid key name: ' + k);\n  if (value.octave) pieces[1] = value.octave;\n\n  let octave = parseInt(pieces[1], 10);\n\n  // Octave_shift is the shift to compensate for clef 8va/8vb.\n  octave += -1 * options.octave_shift;\n\n  const base_index = octave * 7 - 4 * 7;\n  let line = (base_index + value.index) / 2;\n  line += Flow.clefProperties(clef).line_shift;\n\n  let stroke = 0;\n\n  if (line <= 0 && (line * 2) % 2 === 0) stroke = 1; // stroke up\n  if (line >= 6 && (line * 2) % 2 === 0) stroke = -1; // stroke down\n\n  // Integer value for note arithmetic.\n  const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : null;\n\n  /* Check if the user specified a glyph. */\n  const code = value.code;\n  const shift_right = value.shift_right;\n  let extraProps = {};\n  if (pieces.length > 2 && pieces[2]) {\n    const glyph_name = pieces[2].toUpperCase();\n    extraProps = Flow.keyProperties.customNoteHeads[glyph_name] || {};\n  }\n\n  return {\n    key: k,\n    octave,\n    line,\n    int_value,\n    accidental: value.accidental,\n    code,\n    stroke,\n    shift_right,\n    displaced: false,\n    ...extraProps,\n  };\n}\n\nFlow.keyProperties.note_values = {\n  C: { index: 0, int_val: 0, accidental: null },\n  CN: { index: 0, int_val: 0, accidental: 'n' },\n  'C#': { index: 0, int_val: 1, accidental: '#' },\n  'C##': { index: 0, int_val: 2, accidental: '##' },\n  CB: { index: 0, int_val: -1, accidental: 'b' },\n  CBB: { index: 0, int_val: -2, accidental: 'bb' },\n  D: { index: 1, int_val: 2, accidental: null },\n  DN: { index: 1, int_val: 2, accidental: 'n' },\n  'D#': { index: 1, int_val: 3, accidental: '#' },\n  'D##': { index: 1, int_val: 4, accidental: '##' },\n  DB: { index: 1, int_val: 1, accidental: 'b' },\n  DBB: { index: 1, int_val: 0, accidental: 'bb' },\n  E: { index: 2, int_val: 4, accidental: null },\n  EN: { index: 2, int_val: 4, accidental: 'n' },\n  'E#': { index: 2, int_val: 5, accidental: '#' },\n  'E##': { index: 2, int_val: 6, accidental: '##' },\n  EB: { index: 2, int_val: 3, accidental: 'b' },\n  EBB: { index: 2, int_val: 2, accidental: 'bb' },\n  F: { index: 3, int_val: 5, accidental: null },\n  FN: { index: 3, int_val: 5, accidental: 'n' },\n  'F#': { index: 3, int_val: 6, accidental: '#' },\n  'F##': { index: 3, int_val: 7, accidental: '##' },\n  FB: { index: 3, int_val: 4, accidental: 'b' },\n  FBB: { index: 3, int_val: 3, accidental: 'bb' },\n  G: { index: 4, int_val: 7, accidental: null },\n  GN: { index: 4, int_val: 7, accidental: 'n' },\n  'G#': { index: 4, int_val: 8, accidental: '#' },\n  'G##': { index: 4, int_val: 9, accidental: '##' },\n  GB: { index: 4, int_val: 6, accidental: 'b' },\n  GBB: { index: 4, int_val: 5, accidental: 'bb' },\n  A: { index: 5, int_val: 9, accidental: null },\n  AN: { index: 5, int_val: 9, accidental: 'n' },\n  'A#': { index: 5, int_val: 10, accidental: '#' },\n  'A##': { index: 5, int_val: 11, accidental: '##' },\n  AB: { index: 5, int_val: 8, accidental: 'b' },\n  ABB: { index: 5, int_val: 7, accidental: 'bb' },\n  B: { index: 6, int_val: 11, accidental: null },\n  BN: { index: 6, int_val: 11, accidental: 'n' },\n  'B#': { index: 6, int_val: 12, accidental: '#' },\n  'B##': { index: 6, int_val: 13, accidental: '##' },\n  BB: { index: 6, int_val: 10, accidental: 'b' },\n  BBB: { index: 6, int_val: 9, accidental: 'bb' },\n  R: { index: 6, int_val: 9, rest: true }, // Rest\n  X: {\n    index: 6,\n    accidental: '',\n    octave: 4,\n    code: 'noteheadXBlack',\n    shift_right: 5.5,\n  },\n};\n\nfunction integerToNote(integer) {\n  if (typeof integer === 'undefined') {\n    throw new Vex.RERR('BadArguments', 'Undefined integer for integerToNote');\n  }\n\n  if (integer < -2) {\n    throw new Vex.RERR('BadArguments', `integerToNote requires integer > -2: ${integer}`);\n  }\n\n  const noteValue = Flow.integerToNote.table[integer];\n  if (!noteValue) {\n    throw new Vex.RERR('BadArguments', `Unknown note value for integer: ${integer}`);\n  }\n\n  return noteValue;\n}\n\nFlow.integerToNote.table = {\n  0: 'C',\n  1: 'C#',\n  2: 'D',\n  3: 'D#',\n  4: 'E',\n  5: 'F',\n  6: 'F#',\n  7: 'G',\n  8: 'G#',\n  9: 'A',\n  10: 'A#',\n  11: 'B',\n};\n\nfunction tabToGlyph(fret, scale = 1.0) {\n  let glyph = null;\n  let width = 0;\n  let shift_y = 0;\n\n  if (fret.toString().toUpperCase() === 'X') {\n    const glyphMetrics = new Glyph('accidentalDoubleSharp', Flow.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();\n    glyph = 'accidentalDoubleSharp';\n    width = glyphMetrics.width;\n    shift_y = -glyphMetrics.height / 2;\n  } else {\n    width = Flow.textWidth(fret.toString());\n  }\n\n  return {\n    text: fret,\n    code: glyph,\n    getWidth: () => width * scale,\n    shift_y,\n  };\n}\n\nfunction textWidth(text) {\n  return 7 * text.toString().length;\n}\n\nfunction articulationCodes(artic) {\n  return Flow.articulationCodes.articulations[artic];\n}\n\nFlow.articulationCodes.articulations = {\n  'a.': { code: 'augmentationDot', between_lines: true }, // Staccato\n  av: {\n    aboveCode: 'articStaccatissimoAbove',\n    belowCode: 'articStaccatissimoBelow',\n    between_lines: true,\n  }, // Staccatissimo\n  'a>': {\n    aboveCode: 'articAccentAbove',\n    belowCode: 'articAccentBelow',\n    between_lines: true,\n  }, // Accent\n  'a-': {\n    aboveCode: 'articTenutoAbove',\n    belowCode: 'articTenutoBelow',\n    between_lines: true,\n  }, // Tenuto\n  'a^': {\n    aboveCode: 'articMarcatoAbove',\n    belowCode: 'articMarcatoBelow',\n    between_lines: false,\n  }, // Marcato\n  'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false }, // Left hand pizzicato\n  ao: {\n    aboveCode: 'pluckedSnapPizzicatoAbove',\n    belowCode: 'pluckedSnapPizzicatoBelow',\n    between_lines: false,\n  }, // Snap pizzicato\n  ah: { code: 'stringsHarmonic', between_lines: false }, // Natural harmonic or open note\n  'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false }, // Fermata\n  'a@a': { code: 'fermataAbove', between_lines: false }, // Fermata above staff\n  'a@u': { code: 'fermataBelow', between_lines: false }, // Fermata below staff\n  'a|': { code: 'stringsUpBow', between_lines: false }, // Bow up - up stroke\n  am: { code: 'stringsDownBow', between_lines: false }, // Bow down - down stroke\n  'a,': { code: 'pictChokeCymbal', between_lines: false }, // Choked\n};\n\nFlow.accidentalCodes = (acc) => Flow.accidentalCodes.accidentals[acc];\n\nFlow.accidentalCodes.accidentals = {\n  '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\n  '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\n  bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\n  n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\n  '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\n  '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\n  db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\n  d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\n  '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\n  '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\n  '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\n  bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\n  bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\n  o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\n  k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\n  bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\n  '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\n  ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\n  afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },\n  accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },\n  accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlatAndFlat: { code: 'accidentalNarrowReversedFlatAndFlat', parenRightPaddingAdjustment: -1 },\n  accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },\n  accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },\n};\n\nFlow.accidentalColumnsTable = {\n  1: {\n    a: [1],\n    b: [1],\n  },\n  2: {\n    a: [1, 2],\n  },\n  3: {\n    a: [1, 3, 2],\n    b: [1, 2, 1],\n    second_on_bottom: [1, 2, 3],\n  },\n  4: {\n    a: [1, 3, 4, 2],\n    b: [1, 2, 3, 1],\n    spaced_out_tetrachord: [1, 2, 1, 2],\n  },\n  5: {\n    a: [1, 3, 5, 4, 2],\n    b: [1, 2, 4, 3, 1],\n    spaced_out_pentachord: [1, 2, 3, 2, 1],\n    very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n  },\n  6: {\n    a: [1, 3, 5, 6, 4, 2],\n    b: [1, 2, 4, 5, 3, 1],\n    spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n    very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n  },\n};\n\nFlow.ornamentCodes = (acc) => Flow.ornamentCodes.ornaments[acc];\n\nFlow.ornamentCodes.ornaments = {\n  mordent: { code: 'ornamentShortTrill' },\n  mordent_inverted: { code: 'ornamentMordent' },\n  turn: { code: 'ornamentTurn' },\n  turn_inverted: { code: 'ornamentTurnSlash' },\n  tr: { code: 'ornamentTrill' },\n  upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },\n  downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\n  prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },\n  pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },\n  upmordent: { code: 'ornamentPrecompSlideTrillBach' },\n  downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\n  lineprall: { code: 'ornamentPrecompAppoggTrill' },\n  prallprall: { code: 'ornamentTremblement' },\n  scoop: { code: 'brassScoop' },\n  doit: { code: 'brassDoitMedium' },\n  fall: { code: 'brassFallLipShort' },\n  doitLong: { code: 'brassLiftMedium' },\n  fallLong: { code: 'brassFallRoughMedium' },\n  bend: { code: 'brassBend' },\n  plungerClosed: { code: 'brassMuteClosed' },\n  plungerOpen: { code: 'brassMuteOpen' },\n  flip: { code: 'brassFlip' },\n  jazzTurn: { code: 'brassJazzTurn' },\n  smear: { code: 'brassSmear' },\n};\n\nFlow.keySignature = (spec) => {\n  const keySpec = Flow.keySignature.keySpecs[spec];\n\n  if (!keySpec) {\n    throw new Vex.RERR('BadKeySignature', `Bad key signature spec: '${spec}'`);\n  }\n\n  if (!keySpec.acc) {\n    return [];\n  }\n\n  const notes = Flow.keySignature.accidentalList(keySpec.acc);\n\n  const acc_list = [];\n  for (let i = 0; i < keySpec.num; ++i) {\n    const line = notes[i];\n    acc_list.push({ type: keySpec.acc, line });\n  }\n\n  return acc_list;\n};\n\nFlow.keySignature.keySpecs = {\n  C: { acc: null, num: 0 },\n  Am: { acc: null, num: 0 },\n  F: { acc: 'b', num: 1 },\n  Dm: { acc: 'b', num: 1 },\n  Bb: { acc: 'b', num: 2 },\n  Gm: { acc: 'b', num: 2 },\n  Eb: { acc: 'b', num: 3 },\n  Cm: { acc: 'b', num: 3 },\n  Ab: { acc: 'b', num: 4 },\n  Fm: { acc: 'b', num: 4 },\n  Db: { acc: 'b', num: 5 },\n  Bbm: { acc: 'b', num: 5 },\n  Gb: { acc: 'b', num: 6 },\n  Ebm: { acc: 'b', num: 6 },\n  Cb: { acc: 'b', num: 7 },\n  Abm: { acc: 'b', num: 7 },\n  G: { acc: '#', num: 1 },\n  Em: { acc: '#', num: 1 },\n  D: { acc: '#', num: 2 },\n  Bm: { acc: '#', num: 2 },\n  A: { acc: '#', num: 3 },\n  'F#m': { acc: '#', num: 3 },\n  E: { acc: '#', num: 4 },\n  'C#m': { acc: '#', num: 4 },\n  B: { acc: '#', num: 5 },\n  'G#m': { acc: '#', num: 5 },\n  'F#': { acc: '#', num: 6 },\n  'D#m': { acc: '#', num: 6 },\n  'C#': { acc: '#', num: 7 },\n  'A#m': { acc: '#', num: 7 },\n};\n\nFlow.unicode = {\n  // Unicode accidentals\n  sharp: String.fromCharCode(parseInt('266F', 16)),\n  flat: String.fromCharCode(parseInt('266D', 16)),\n  natural: String.fromCharCode(parseInt('266E', 16)),\n  // Major Chord\n  triangle: String.fromCharCode(parseInt('25B3', 16)),\n  // half-diminished\n  'o-with-slash': String.fromCharCode(parseInt('00F8', 16)),\n  // Diminished\n  degrees: String.fromCharCode(parseInt('00B0', 16)),\n  circle: String.fromCharCode(parseInt('25CB', 16)),\n};\n\nFlow.keySignature.accidentalList = (acc) => {\n  const patterns = {\n    b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n    '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n  };\n\n  return patterns[acc];\n};\n\n// Used to convert duration aliases to the number based duration.\n// If the input isn't an alias, simply return the input.\n//\n// example: 'q' -> '4', '8' -> '8'\nFlow.sanitizeDuration = (duration) => {\n  const alias = Flow.durationAliases[duration];\n  if (alias !== undefined) {\n    duration = alias;\n  }\n\n  if (Flow.durationToTicks.durations[duration] === undefined) {\n    throw new Vex.RERR('BadArguments', `The provided duration is not valid: ${duration}`);\n  }\n\n  return duration;\n};\n\n// Convert the `duration` to an fraction\nfunction durationToFraction(duration) {\n  return new Fraction().parse(Flow.sanitizeDuration(duration));\n}\n\n// Convert the `duration` to an number\nfunction durationToNumber(duration) {\n  return durationToFraction(duration).value();\n}\n\n// Convert the `duration` to total ticks\nfunction durationToTicks(duration) {\n  duration = Flow.sanitizeDuration(duration);\n\n  const ticks = Flow.durationToTicks.durations[duration];\n  if (ticks === undefined) {\n    return null;\n  }\n\n  return ticks;\n}\n\nFlow.durationToTicks.durations = {\n  '1/2': Flow.RESOLUTION * 2,\n  1: Flow.RESOLUTION / 1,\n  2: Flow.RESOLUTION / 2,\n  4: Flow.RESOLUTION / 4,\n  8: Flow.RESOLUTION / 8,\n  16: Flow.RESOLUTION / 16,\n  32: Flow.RESOLUTION / 32,\n  64: Flow.RESOLUTION / 64,\n  128: Flow.RESOLUTION / 128,\n  256: Flow.RESOLUTION / 256,\n};\n\nFlow.durationAliases = {\n  w: '1',\n  h: '2',\n  q: '4',\n\n  // This is the default duration used to render bars (BarNote). Bars no longer\n  // consume ticks, so this should be a no-op.\n  //\n  // TODO(0xfe): This needs to be cleaned up.\n  b: '256',\n};\n\n// Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\nfunction getGlyphProps(duration, type) {\n  duration = Flow.sanitizeDuration(duration);\n  type = type || 'n'; // default type is a regular note\n\n  // Lookup duration for default glyph head code\n  const code = Flow.getGlyphProps.duration_codes[duration];\n  if (code === undefined) {\n    return null;\n  }\n\n  // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\n  let glyphTypeProperties = code.type[type];\n\n  // If this isn't a standard type, then lookup the custom note head map.\n  if (glyphTypeProperties === undefined) {\n    // Try and get it from the custom list of note heads\n    const customGlyphTypeProperties = Flow.keyProperties.customNoteHeads[type.toUpperCase()];\n\n    // If not, then return with nothing\n    if (customGlyphTypeProperties === undefined) {\n      return null;\n    }\n\n    // Otherwise set it as the code_head value\n    glyphTypeProperties = {\n      code_head: customGlyphTypeProperties.code,\n      ...customGlyphTypeProperties,\n    };\n  }\n\n  // Merge duration props for 'duration' with the note head properties.\n  return { ...code.common, ...glyphTypeProperties };\n}\n\nFlow.getGlyphProps.validTypes = {\n  n: { name: 'note' },\n  r: { name: 'rest' },\n  h: { name: 'harmonic' },\n  m: { name: 'muted' },\n  s: { name: 'slash' },\n};\n\n// Custom note heads\nFlow.keyProperties.customNoteHeads = {\n  /* Diamond */\n  D0: { code: 'noteheadDiamondWhole' },\n  D1: { code: 'noteheadDiamondHalf' },\n  D2: { code: 'noteheadDiamondBlack' },\n  D3: { code: 'noteheadDiamondBlack' },\n\n  /* Triangle */\n  T0: { code: 'noteheadTriangleUpWhole' },\n  T1: { code: 'noteheadTriangleUpHalf' },\n  T2: { code: 'noteheadTriangleUpBlack' },\n  T3: { code: 'noteheadTriangleUpBlack' },\n\n  /* Cross */\n  X0: { code: 'noteheadXWhole' },\n  X1: { code: 'noteheadXHalf' },\n  X2: { code: 'noteheadXBlack' },\n  X3: { code: 'noteheadCircleX' },\n\n  /* Square */\n  S1: { code: 'noteheadSquareWhite' },\n  S2: { code: 'noteheadSquareBlack' },\n\n  /* Rectangle */\n  R1: { code: 'vexNoteHeadRectWhite' }, // no smufl code\n  R2: { code: 'vexNoteHeadRectBlack' }, // no smufl code\n};\n\nFlow.getGlyphProps.duration_codes = {\n  '1/2': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'v53', scale).getMetrics().width;\n      },\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      n: {\n        // Breve note\n        code_head: 'noteheadDoubleWhole',\n      },\n      h: {\n        // Breve note harmonic\n        code_head: 'unpitchedPercussionClef1',\n      },\n      m: {\n        // Breve note muted -\n        code_head: 'vexNoteHeadMutedBreve',\n        stem_offset: 0,\n      },\n      r: {\n        // Breve rest\n        code_head: 'restDoubleWhole',\n        rest: true,\n        position: 'B/5',\n        dot_shiftY: 0.5,\n      },\n      s: {\n        // Breve note slash -\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  1: {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'v1d', scale).getMetrics().width;\n      },\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      n: {\n        // Whole note\n        code_head: 'noteheadWhole',\n      },\n      h: {\n        // Whole note harmonic\n        code_head: 'noteheadDiamondWhole',\n      },\n      m: {\n        // Whole note muted\n        code_head: 'noteheadXWhole',\n        stem_offset: -3,\n      },\n      r: {\n        // Whole rest\n        code_head: 'restWhole',\n        rest: true,\n        position: 'D/5',\n        dot_shiftY: 0.5,\n      },\n      s: {\n        // Whole note slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  2: {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadHalf', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      n: {\n        // Half note\n        code_head: 'noteheadHalf',\n      },\n      h: {\n        // Half note harmonic\n        code_head: 'noteheadDiamondHalf',\n      },\n      m: {\n        // Half note muted\n        code_head: 'noteheadXHalf',\n        stem_offset: -3,\n      },\n      r: {\n        // Half rest\n        code_head: 'restHalf',\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n      },\n      s: {\n        // Half note slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  4: {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      n: {\n        // Quarter note\n        code_head: 'noteheadBlack',\n      },\n      h: {\n        // Quarter harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      m: {\n        // Quarter muted\n        code_head: 'noteheadXBlack',\n      },\n      r: {\n        // Quarter rest\n        code_head: 'restQuarter',\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.5,\n        line_below: 1.5,\n      },\n      s: {\n        // Quarter slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  8: {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      beam_count: 1,\n      code_flag_upstem: 'flag8thUp',\n      code_flag_downstem: 'flag8thDown',\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      n: {\n        // Eighth note\n        code_head: 'noteheadBlack',\n      },\n      h: {\n        // Eighth note harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      m: {\n        // Eighth note muted\n        code_head: 'noteheadXBlack',\n      },\n      r: {\n        // Eighth rest\n        code_head: 'rest8th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 1.0,\n      },\n      s: {\n        // Eight slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  16: {\n    common: {\n      beam_count: 2,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag16thUp',\n      code_flag_downstem: 'flag16thDown',\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      n: {\n        // Sixteenth note\n        code_head: 'noteheadBlack',\n      },\n      h: {\n        // Sixteenth note harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      m: {\n        // Sixteenth note muted\n        code_head: 'noteheadXBlack',\n      },\n      r: {\n        // Sixteenth rest\n        code_head: 'rest16th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 2.0,\n      },\n      s: {\n        // Sixteenth slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  32: {\n    common: {\n      beam_count: 3,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag32ndUp',\n      code_flag_downstem: 'flag32ndDown',\n      stem_up_extension: 9,\n      stem_down_extension: 9,\n      tabnote_stem_up_extension: 8,\n      tabnote_stem_down_extension: 5,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      n: {\n        // Thirty-second note\n        code_head: 'noteheadBlack',\n      },\n      h: {\n        // Thirty-second harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      m: {\n        // Thirty-second muted\n        code_head: 'noteheadXBlack',\n      },\n      r: {\n        // Thirty-second rest\n        code_head: 'rest32nd',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 2.0,\n      },\n      s: {\n        // Thirty-second slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  64: {\n    common: {\n      beam_count: 4,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag64thUp',\n      code_flag_downstem: 'flag64thDown',\n      stem_up_extension: 13,\n      stem_down_extension: 13,\n      tabnote_stem_up_extension: 12,\n      tabnote_stem_down_extension: 9,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      n: {\n        // Sixty-fourth note\n        code_head: 'noteheadBlack',\n      },\n      h: {\n        // Sixty-fourth harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      m: {\n        // Sixty-fourth muted\n        code_head: 'noteheadXBlack',\n      },\n      r: {\n        // Sixty-fourth rest\n        code_head: 'rest64th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 3.0,\n      },\n      s: {\n        // Sixty-fourth slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  128: {\n    common: {\n      beam_count: 5,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag128thUp',\n      code_flag_downstem: 'flag128thDown',\n      stem_up_extension: 22,\n      stem_down_extension: 22,\n      tabnote_stem_up_extension: 21,\n      tabnote_stem_down_extension: 18,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      n: {\n        // Hundred-twenty-eight note\n        code_head: 'noteheadBlack',\n      },\n      h: {\n        // Hundred-twenty-eight harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      m: {\n        // Hundred-twenty-eight muted\n        code_head: 'noteheadXBlack',\n      },\n      r: {\n        // Hundred-twenty-eight rest\n        code_head: 'rest128th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: 1.5,\n        line_above: 3.0,\n        line_below: 3.0,\n      },\n      s: {\n        // Hundred-twenty-eight rest\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n};\n\n// Some defaults\nconst TIME4_4 = {\n  num_beats: 4,\n  beat_value: 4,\n  resolution: Flow.RESOLUTION,\n};\nexport { Flow };\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.js` for usage examples\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Dot } from './dot';\nimport { Glyph, GlyphProps } from './glyph';\nimport { Stave } from './stave';\nimport { StaveNoteStruct } from './stavenote';\nimport { ModifierContext } from './modifiercontext';\n\nexport interface TabNoteStruct extends StaveNoteStruct {\n  positions: { str: string; fret: string }[];\n}\n// Gets the unused strings grouped together if consecutive.\n//\n// Parameters:\n// * num_lines - The number of lines\n// * strings_used - An array of numbers representing which strings have fret positions\nfunction getUnusedStringGroups(num_lines: number, strings_used: number[]) {\n  const stem_through = [];\n  let group = [];\n  for (let string = 1; string <= num_lines; string++) {\n    const is_used = strings_used.indexOf(string) > -1;\n\n    if (!is_used) {\n      group.push(string);\n    } else {\n      stem_through.push(group);\n      group = [];\n    }\n  }\n  if (group.length > 0) stem_through.push(group);\n\n  return stem_through;\n}\n\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stem_Y - The `y` coordinate the stem is located on\n// * unused_strings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stem_direction - The direction of the stem\nfunction getPartialStemLines(stem_y: number, unused_strings: number[][], stave: Stave, stem_direction: number) {\n  const up_stem = stem_direction !== 1;\n  const down_stem = stem_direction !== -1;\n\n  const line_spacing = stave.getSpacingBetweenLines();\n  const total_lines = stave.getNumLines();\n\n  const stem_lines: number[][] = [];\n\n  unused_strings.forEach((strings) => {\n    const containsLastString = strings.indexOf(total_lines) > -1;\n    const containsFirstString = strings.indexOf(1) > -1;\n\n    if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {\n      return;\n    }\n\n    // If there's only one string in the group, push a duplicate value.\n    // We do this because we need 2 strings to convert into upper/lower y\n    // values.\n    if (strings.length === 1) {\n      strings.push(strings[0]);\n    }\n\n    const line_ys: number[] = [];\n    // Iterate through each group string and store it's y position\n    strings.forEach((string, index, strings) => {\n      const isTopBound = string === 1;\n      const isBottomBound = string === total_lines;\n\n      // Get the y value for the appropriate staff line,\n      // we adjust for a 0 index array, since string numbers are index 1\n      let y = stave.getYForLine(string - 1);\n\n      // Unless the string is the first or last, add padding to each side\n      // of the line\n      if (index === 0 && !isTopBound) {\n        y -= line_spacing / 2 - 1;\n      } else if (index === strings.length - 1 && !isBottomBound) {\n        y += line_spacing / 2 - 1;\n      }\n\n      // Store the y value\n      line_ys.push(y);\n\n      // Store a subsequent y value connecting this group to the main\n      // stem above/below the stave if it's the top/bottom string\n      if (stem_direction === 1 && isTopBound) {\n        line_ys.push(stem_y - 2);\n      } else if (stem_direction === -1 && isBottomBound) {\n        line_ys.push(stem_y + 2);\n      }\n    });\n\n    // Add the sorted y values to the\n    stem_lines.push(line_ys.sort((a, b) => a - b));\n  });\n\n  return stem_lines;\n}\n\nexport class TabNote extends StemmableNote {\n  protected ghost: boolean;\n  protected glyphs: GlyphProps[] = [];\n  protected positions: { str: string; fret: string }[];\n\n  static get CATEGORY(): string {\n    return 'tabnotes';\n  }\n\n  // Initialize the TabNote with a `tab_struct` full of properties\n  // and whether to `draw_stem` when rendering the note\n  constructor(tab_struct: TabNoteStruct, draw_stem?: boolean) {\n    super(tab_struct);\n    this.setAttribute('type', 'TabNote');\n\n    this.ghost = false; // Renders parenthesis around notes\n    // Note properties\n    //\n    // The fret positions in the note. An array of `{ str: X, fret: X }`\n    this.positions = tab_struct.positions;\n\n    // Render Options\n    Vex.Merge(this.render_options, {\n      // font size for note heads and rests\n      glyph_font_scale: Flow.DEFAULT_TABLATURE_FONT_SCALE,\n      // Flag to draw a stem\n      draw_stem,\n      // Flag to draw dot modifiers\n      draw_dots: draw_stem,\n      // Flag to extend the main stem through the stave and fret positions\n      draw_stem_through_stave: false,\n      // vertical shift from stave line\n      y_shift: 0,\n      // normal glyph scale\n      scale: 1.0,\n      // default tablature font\n      font: '10pt Arial',\n    });\n\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n\n    if (!this.glyph) {\n      throw new Vex.RERR(\n        'BadArguments',\n        `Invalid note initialization data (No glyph found): ${JSON.stringify(tab_struct)}`\n      );\n    }\n\n    this.buildStem();\n\n    if (tab_struct.stem_direction) {\n      this.setStemDirection(tab_struct.stem_direction);\n    } else {\n      this.setStemDirection(Stem.UP);\n    }\n\n    // Renders parenthesis around notes\n    this.ghost = false;\n    this.updateWidth();\n  }\n\n  reset(): this {\n    if (this.stave) this.setStave(this.stave);\n    return this;\n  }\n\n  // The ModifierContext category\n  getCategory(): string {\n    return TabNote.CATEGORY;\n  }\n\n  // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n  // Often used for indicating frets that are being bent to\n  setGhost(ghost: boolean): this {\n    this.ghost = ghost;\n    this.updateWidth();\n    return this;\n  }\n\n  // Determine if the note has a stem\n  hasStem(): boolean {\n    if (this.render_options.draw_stem) return true;\n    return false;\n  }\n\n  // Get the default stem extension for the note\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Add a dot to the note\n  addDot(): this {\n    const dot = new Dot();\n    this.dots += 1;\n    return this.addModifier(dot, 0);\n  }\n\n  // Calculate and store the width of the note\n  updateWidth(): void {\n    this.glyphs = [];\n    this.width = 0;\n    for (let i = 0; i < this.positions.length; ++i) {\n      let fret = this.positions[i].fret;\n      if (this.ghost) fret = '(' + fret + ')';\n      const glyph = Flow.tabToGlyph(fret, this.render_options.scale);\n      this.glyphs.push(glyph as GlyphProps);\n      this.width = Math.max(glyph.getWidth(), this.width);\n    }\n    // For some reason we associate a notehead glyph with a TabNote, and this\n    // glyph is used for certain width calculations. Of course, this is totally\n    // incorrect since a notehead is a poor approximation for the dimensions of\n    // a fret number which can have multiple digits. As a result, we must\n    // overwrite getWidth() to return the correct width\n    this.glyph.getWidth = () => this.width;\n  }\n\n  // Set the `stave` to the note\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    const ctx = stave.getContext();\n    this.setContext(ctx);\n\n    // Calculate the fret number width based on font used\n    if (ctx) {\n      this.width = 0;\n      for (let i = 0; i < this.glyphs.length; ++i) {\n        const glyph = this.glyphs[i];\n        const text = '' + glyph.text;\n        if (text.toUpperCase() !== 'X') {\n          ctx.save();\n          ctx.setRawFont(this.render_options.font as string);\n          glyph.width = ctx.measureText(text).width;\n          ctx.restore();\n          glyph.getWidth = () => glyph.width;\n        }\n        this.width = Math.max(glyph.getWidth(), this.width);\n      }\n      this.glyph.getWidth = () => this.width;\n    }\n\n    // we subtract 1 from `line` because getYForLine expects a 0-based index,\n    // while the position.str is a 1-based index\n    const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      this.stem.setYBounds(this.getStemY(), this.getStemY());\n    }\n\n    return this;\n  }\n\n  // Get the fret positions for the note\n  getPositions(): { str: string; fret: string }[] {\n    return this.positions;\n  }\n\n  // Add self to the provided modifier context `mc`\n  addToModifierContext(mc: ModifierContext): this {\n    this.modifierContext = mc;\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addMember(this.modifiers[i]);\n    }\n    this.modifierContext.addMember(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  // Get the default `x` and `y` coordinates for a modifier at a specific\n  // `position` at a fret position `index`\n  getModifierStartXY(position: number, index: number): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    let x = 0;\n    if (position === Modifier.Position.LEFT) {\n      x = -1 * 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.RIGHT) {\n      x = this.width + 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n      const note_glyph_width = this.glyph.getWidth();\n      x = note_glyph_width / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Get the default line for rest\n  getLineForRest(): number {\n    return Number(this.positions[0].str);\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n    // width is already set during init()\n    this.setPreFormatted(true);\n  }\n\n  // Get the x position for the stem\n  getStemX(): number {\n    return this.getCenterGlyphX();\n  }\n\n  // Get the y position for the stem\n  getStemY(): number {\n    const num_lines = this.checkStave().getNumLines();\n\n    // The decimal staff line amounts provide optimal spacing between the\n    // fret number and the stem\n    const stemUpLine = -0.5;\n    const stemDownLine = num_lines - 0.5;\n    const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n\n    return this.checkStave().getYForLine(stemStartLine);\n  }\n\n  // Get the stem extents for the tabnote\n  getStemExtents(): Record<string, number> {\n    return this.checkStem().getExtents();\n  }\n\n  // Draw the fal onto the context\n  drawFlag(): void {\n    const {\n      beam,\n      glyph,\n      stem_direction,\n      render_options: { draw_stem, glyph_font_scale },\n    } = this;\n    const context = this.checkContext();\n\n    const shouldDrawFlag = beam == undefined && draw_stem;\n\n    // Now it's the flag's turn.\n    if (glyph.flag && shouldDrawFlag) {\n      const flag_x = this.getStemX() + 1;\n      const flag_y = this.getStemY() - this.checkStem().getHeight();\n\n      const flag_code =\n        stem_direction === Stem.DOWN\n          ? glyph.code_flag_downstem // Down stems have flags on the left.\n          : glyph.code_flag_upstem;\n\n      // Draw the Flag\n      Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code, { category: 'flag.tabStem' });\n    }\n  }\n\n  // Render the modifiers onto the context\n  drawModifiers(): void {\n    // Draw the modifiers\n    this.modifiers.forEach((modifier) => {\n      // Only draw the dots if enabled\n      if (modifier.getCategory() === 'dots' && !this.render_options.draw_dots) return;\n\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    });\n  }\n\n  // Render the stem extension through the fret positions\n  drawStemThrough(): void {\n    const stem_x = this.getStemX();\n    const stem_y = this.getStemY();\n    const ctx = this.checkContext();\n\n    const stem_through = this.render_options.draw_stem_through_stave;\n    const draw_stem = this.render_options.draw_stem;\n    if (draw_stem && stem_through) {\n      const total_lines = this.checkStave().getNumLines();\n      const strings_used = this.positions.map((position) => Number(position.str));\n\n      const unused_strings = getUnusedStringGroups(total_lines, strings_used);\n      const stem_lines = getPartialStemLines(stem_y, unused_strings, this.checkStave(), this.getStemDirection());\n\n      ctx.save();\n      ctx.setLineWidth(Stem.WIDTH);\n      stem_lines.forEach((bounds) => {\n        if (bounds.length === 0) return;\n\n        ctx.beginPath();\n        ctx.moveTo(stem_x, bounds[0]);\n        ctx.lineTo(stem_x, bounds[bounds.length - 1]);\n        ctx.stroke();\n        ctx.closePath();\n      });\n      ctx.restore();\n    }\n  }\n\n  // Render the fret positions onto the context\n  drawPositions(): void {\n    const ctx = this.checkContext();\n    const x = this.getAbsoluteX();\n    const ys = this.ys;\n    for (let i = 0; i < this.positions.length; ++i) {\n      const y = ys[i] + this.render_options.y_shift;\n      const glyph = this.glyphs[i];\n\n      // Center the fret text beneath the notation note head\n      const note_glyph_width = this.glyph.getWidth();\n      const tab_x = x + note_glyph_width / 2 - glyph.getWidth() / 2;\n\n      // FIXME: Magic numbers.\n      ctx.clearRect(tab_x - 2, y - 3, glyph.getWidth() + 4, 6);\n\n      if (glyph.code) {\n        Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyph.code);\n      } else {\n        ctx.save();\n        ctx.setRawFont(this.render_options.font);\n        const text = glyph.text.toString();\n        ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\n        ctx.restore();\n      }\n    }\n  }\n\n  // The main rendering function for the entire note\n  draw(): void {\n    const ctx = this.checkContext();\n\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    this.setRendered();\n    const render_stem = this.beam == undefined && this.render_options.draw_stem;\n\n    ctx.openGroup('tabnote', null, { pointerBBox: true });\n    this.drawPositions();\n    this.drawStemThrough();\n\n    if (this.stem && render_stem) {\n      const stem_x = this.getStemX();\n      this.stem.setNoteHeadXBounds(stem_x, stem_x);\n      ctx.openGroup('stem', null, { pointerBBox: true });\n      this.stem.setContext(ctx).draw();\n      ctx.closeGroup();\n    }\n\n    this.drawFlag();\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { Vex } from './vex';\nimport { TabTie } from './tabtie';\nimport { TabNote } from './tabnote';\nimport { TieNotes } from './types/common';\n\nexport class TabSlide extends TabTie {\n  static get SLIDE_UP(): number {\n    return 1;\n  }\n\n  static get SLIDE_DOWN(): number {\n    return -1;\n  }\n\n  static createSlideUp(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_UP);\n  }\n\n  static createSlideDown(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n  }\n\n  constructor(notes: TieNotes, direction?: number) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super(notes, 'sl.');\n    this.setAttribute('type', 'TabSlide');\n\n    if (!direction) {\n      const first_fret = (notes.first_note as TabNote).getPositions()[0].fret;\n      const last_fret = (notes.last_note as TabNote).getPositions()[0].fret;\n\n      direction = parseInt(first_fret, 10) > parseInt(last_fret, 10) ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n    }\n\n    this.direction = direction;\n    this.render_options.cp1 = 11;\n    this.render_options.cp2 = 14;\n    this.render_options.y_shift = 0.5;\n\n    this.setFont({ family: 'Times', size: 10, weight: 'bold italic' });\n    this.setNotes(notes);\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new Vex.RERR('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    const first_x_px = params.first_x_px;\n    const first_ys = params.first_ys;\n    const last_x_px = params.last_x_px;\n\n    const direction = params.direction;\n    if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n      throw new Vex.RERR('BadSlide', 'Invalid slide direction');\n    }\n\n    for (let i = 0; i < this.notes.first_indices.length; ++i) {\n      const slide_y = first_ys[this.notes.first_indices[i]] + this.render_options.y_shift;\n\n      if (isNaN(slide_y)) {\n        throw new Vex.RERR('BadArguments', 'Bad indices for slide rendering.');\n      }\n\n      ctx.beginPath();\n      ctx.moveTo(first_x_px, slide_y + 3 * direction);\n      ctx.lineTo(last_x_px, slide_y - 3 * direction);\n      ctx.closePath();\n      ctx.stroke();\n    }\n\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Stave, StaveOptions } from './stave';\n\nexport class TabStave extends Stave {\n  constructor(x: number, y: number, width: number, options: StaveOptions) {\n    const tab_options = {\n      ...{\n        spacing_between_lines_px: 13,\n        num_lines: 6,\n        top_text_position: 1,\n      },\n      ...options,\n    };\n\n    super(x, y, width, tab_options);\n    this.setAttribute('type', 'TabStave');\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(2.5);\n  }\n\n  // Deprecated\n  addTabGlyph(): this {\n    this.addClef('tab');\n    return this;\n  }\n}\n","// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { StaveTie } from './stavetie';\nimport { TieNotes } from './types/common';\n\nexport class TabTie extends StaveTie {\n  static createHammeron(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'H');\n  }\n\n  static createPulloff(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'P');\n  }\n\n  constructor(notes: TieNotes, text?: string) {\n    /**\n     * TieNotes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super(notes, text);\n    this.setAttribute('type', 'TabTie');\n\n    this.render_options.cp1 = 9;\n    this.render_options.cp2 = 11;\n    this.render_options.y_shift = 3;\n\n    this.direction = -1; // Tab tie's are always face up.\n\n    this.setNotes(notes);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Renderer } from './renderer';\nimport { FontInfo, RenderContext } from './types/common';\nimport { Note } from './note';\n\nexport interface TextBracketParams {\n  start: Note;\n  stop: Note;\n  text: string;\n  superscript: string;\n  position: number | string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (TextBracket.DEBUG) Vex.L('Vex.Flow.TextBracket', args);\n}\n\nexport enum TextBracketPosition {\n  TOP = 1,\n  BOTTOM = -1,\n}\n\nexport class TextBracket extends Element {\n  static DEBUG: boolean;\n\n  render_options: {\n    dashed: boolean;\n    color: string;\n    line_width: number;\n    underline_superscript: boolean;\n    show_bracket: boolean;\n    dash: number[];\n    bracket_height: number;\n  };\n\n  protected readonly text: string;\n  protected readonly superscript: string;\n  protected readonly position: TextBracketPosition;\n\n  protected line: number;\n  protected start: Note;\n  protected stop: Note;\n  protected font: FontInfo;\n\n  static get Positions(): typeof TextBracketPosition {\n    L('Positions is deprecated, use Position instead.');\n    return TextBracket.Position;\n  }\n\n  static get Position(): typeof TextBracketPosition {\n    return TextBracketPosition;\n  }\n\n  static get PositionsString(): Record<string, number> {\n    L('PositionsString is deprecated, use PositionString instead.');\n    return TextBracket.PositionsString;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      top: TextBracket.Position.TOP,\n      bottom: TextBracket.Position.BOTTOM,\n    };\n  }\n\n  constructor({ start, stop, text = '', superscript = '', position = TextBracket.Position.TOP }: TextBracketParams) {\n    super();\n    this.setAttribute('type', 'TextBracket');\n\n    this.start = start;\n    this.stop = stop;\n\n    this.text = text;\n    this.superscript = superscript;\n\n    this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n\n    this.line = 1;\n\n    this.font = {\n      family: 'Serif',\n      size: 15,\n      weight: 'italic',\n    };\n\n    this.render_options = {\n      dashed: true,\n      dash: [5],\n      color: 'black',\n      line_width: 1,\n      show_bracket: true,\n      bracket_height: 8,\n\n      // In the BOTTOM position, the bracket line can extend\n      // under the superscript.\n      underline_superscript: true,\n    };\n  }\n\n  // Apply the text backet styling to the provided `context`\n  applyStyle(context: RenderContext): this {\n    // Apply style for the octave bracket\n    context.setFont(this.font.family, this.font.size, this.font.weight);\n    context.setStrokeStyle(this.render_options.color);\n    context.setFillStyle(this.render_options.color);\n    context.setLineWidth(this.render_options.line_width);\n\n    return this;\n  }\n\n  // Set whether the bracket line should be `dashed`. You can also\n  // optionally set the `dash` pattern by passing in an array of numbers\n  setDashed(dashed: boolean, dash?: number[]): this {\n    this.render_options.dashed = dashed;\n    if (dash) this.render_options.dash = dash;\n    return this;\n  }\n\n  // Set the font for the text\n  setFont(font: FontInfo): this {\n    // We use Object.assign to support partial updates to the font object\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n  // Set the rendering `context` for the octave bracket\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Draw the octave bracket on the rendering context\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let y = 0;\n    switch (this.position) {\n      case TextBracket.Position.TOP:\n        y = this.start.checkStave().getYForTopText(this.line);\n        break;\n      case TextBracket.Position.BOTTOM:\n        y = this.start.checkStave().getYForBottomText(this.line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n        break;\n      default:\n        throw new Vex.RERR('InvalidPosition', `The position ${this.position} is invalid`);\n    }\n\n    // Get the preliminary start and stop coordintates for the bracket\n    const start = { x: this.start.getAbsoluteX(), y };\n    const stop = { x: this.stop.getAbsoluteX(), y };\n\n    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n\n    const bracket_height = this.render_options.bracket_height * this.position;\n\n    ctx.save();\n    this.applyStyle(ctx);\n\n    // Draw text\n    ctx.fillText(this.text, start.x, start.y);\n\n    // Get the width and height for the octave number\n    const main_width = ctx.measureText(this.text).width;\n    const main_height = ctx.measureText('M').width;\n\n    // Calculate the y position for the super script\n    const super_y = start.y - main_height / 2.5;\n\n    // Draw the superscript\n    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n    ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\n    // Determine width and height of the superscript\n    const superscript_width = ctx.measureText(this.superscript).width;\n    const super_height = ctx.measureText('M').width;\n\n    // Setup initial coordinates for the bracket line\n    let start_x = start.x;\n    let line_y = super_y;\n    const end_x = stop.x + this.stop.getGlyph().getWidth();\n\n    // Adjust x and y coordinates based on position\n    if (this.position === TextBracket.Position.TOP) {\n      start_x += main_width + superscript_width + 5;\n      line_y -= super_height / 2.7;\n    } else if (this.position === TextBracket.Position.BOTTOM) {\n      line_y += super_height / 2.7;\n      start_x += main_width + 2;\n\n      if (!this.render_options.underline_superscript) {\n        start_x += superscript_width;\n      }\n    }\n\n    if (this.render_options.dashed) {\n      // Main line\n      Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\n      // Ending Bracket\n      if (this.render_options.show_bracket) {\n        Renderer.drawDashedLine(\n          ctx,\n          end_x,\n          line_y + 1 * this.position,\n          end_x,\n          line_y + bracket_height,\n          this.render_options.dash\n        );\n      }\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(start_x, line_y);\n      // Main line\n      ctx.lineTo(end_x, line_y);\n      if (this.render_options.show_bracket) {\n        // Ending bracket\n        ctx.lineTo(end_x, line_y + bracket_height);\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `TextDynamics` which renders traditional\n// text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n//\n// You can render any dynamics string that contains a combination of\n// the following letters:  P, M, F, Z, R, S\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Glyph } from './glyph';\nimport { TextNoteStruct } from './textnote';\nimport { check } from './common';\n\n// To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (TextDynamics.DEBUG) Vex.L('Vex.Flow.TextDynamics', args);\n}\n\nexport class TextDynamics extends Note {\n  static DEBUG: boolean;\n\n  protected sequence: string;\n\n  protected line: number;\n  protected glyphs: Glyph[];\n\n  // The glyph data for each dynamics letter\n  static get GLYPHS(): Record<string, { code: string; width: number }> {\n    return {\n      f: {\n        code: 'dynamicForte',\n        width: 12,\n      },\n      p: {\n        code: 'dynamicPiano',\n        width: 14,\n      },\n      m: {\n        code: 'dynamicMezzo',\n        width: 17,\n      },\n      s: {\n        code: 'dynamicSforzando',\n        width: 10,\n      },\n      z: {\n        code: 'dynamicZ',\n        width: 12,\n      },\n      r: {\n        code: 'dynamicRinforzando',\n        width: 12,\n      },\n    };\n  }\n\n  // A `TextDynamics` object inherits from `Note` so that it can be formatted\n  // within a `Voice`.\n  // Create the dynamics marking. `text_struct` is an object\n  // that contains a `duration` property and a `sequence` of\n  // letters that represents the letters to render\n  constructor(text_struct: TextNoteStruct) {\n    super(text_struct);\n    this.setAttribute('type', 'TextDynamics');\n\n    this.sequence = text_struct.text.toLowerCase();\n    this.line = text_struct.line || 0;\n    this.glyphs = [];\n\n    Vex.Merge(this.render_options, {\n      glyph_font_size: 40,\n    });\n\n    L('New Dynamics Text: ', this.sequence);\n  }\n\n  // Set the Stave line on which the note should be placed\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Preformat the dynamics text\n  preFormat(): this {\n    let total_width = 0;\n    // Iterate through each letter\n    this.sequence.split('').forEach((letter) => {\n      // Get the glyph data for the letter\n      const glyph_data = TextDynamics.GLYPHS[letter];\n      if (!glyph_data) throw new Vex.RERR('Invalid dynamics character: ' + letter);\n\n      const size = check<number>(this.render_options.glyph_font_size);\n      const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\n\n      // Add the glyph\n      this.glyphs.push(glyph);\n\n      total_width += glyph_data.width;\n    });\n\n    // Store the width of the text\n    this.setWidth(total_width);\n    this.preFormatted = true;\n    return this;\n  }\n\n  // Draw the dynamics text on the rendering context\n  draw(): void {\n    this.setRendered();\n    const x = this.getAbsoluteX();\n    const y = this.checkStave().getYForLine(this.line + -3);\n\n    L('Rendering Dynamics: ', this.sequence);\n\n    let letter_x = x;\n    this.glyphs.forEach((glyph, index) => {\n      const current_letter = this.sequence[index];\n      glyph.render(this.checkContext(), letter_x, y);\n      letter_x += TextDynamics.GLYPHS[current_letter].width;\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file handles a registry of text font metric information, so all\n// VEX modules can take advantage of font metrics in a uniform way.\n//\n\nimport { Vex } from './vex';\nimport { PetalumaScriptTextMetrics } from './fonts/petalumascript_textmetrics';\nimport { RobotoSlabTextMetrics } from './fonts/robotoslab_textmetrics';\nimport { FontGlyph } from './font';\nimport { FontInfo } from './types/common';\nexport interface TextFontMetrics {\n  advanceWidth: number;\n  ha: number;\n}\n\nexport interface TextFontRegistry {\n  [name: string]: unknown;\n  name?: string;\n  resolution?: number;\n  glyphs?: Record<string, FontGlyph>;\n  family: string;\n  serifs: boolean;\n  monospaced?: boolean;\n  italic: boolean;\n  bold: boolean;\n  maxSizeGlyph?: string;\n  superscriptOffset?: number;\n  subscriptOffset?: number;\n  description: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextFont.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (TextFont.DEBUG) Vex.L('Vex.Flow.TextFont', args);\n}\n\nexport class TextFont {\n  protected static debug: boolean;\n  protected resolution: number = 1000;\n  protected name?: string;\n  protected glyphs: Record<string, TextFontMetrics> = {};\n  protected family: string = '';\n  protected serifs?: boolean;\n  protected monospaced?: boolean;\n  protected italic?: boolean;\n  protected bold?: boolean;\n  protected superscriptOffset?: number;\n  protected subscriptOffset?: number;\n  protected description?: string;\n  protected maxSizeGlyph: string;\n  protected weight: string;\n  protected style: string;\n  protected fontCacheKey: string = '';\n\n  protected static registryInstance: TextFontRegistry[];\n  protected static textWidthCacheInstance?: Record<string, Record<string, number>>;\n\n  protected size: number;\n  protected attrs: { type: string };\n\n  static get CATEGORY(): string {\n    return 'textFont';\n  }\n\n  static get DEBUG(): boolean {\n    return TextFont.debug;\n  }\n\n  static set DEBUG(val: boolean) {\n    TextFont.debug = val;\n  }\n\n  // ### fontRegistry\n  // Getter of an array of available fonts.  Applications may register their\n  // own fonts and the metrics for those fonts will be available to the\n  // application.\n  static get fontRegistry(): TextFontRegistry[] {\n    if (!TextFont.registryInstance) {\n      TextFont.registryInstance = [];\n      TextFont.registryInstance.push({\n        name: 'Roboto Slab',\n        resolution: RobotoSlabTextMetrics.resolution,\n        glyphs: RobotoSlabTextMetrics.glyphs,\n        family: RobotoSlabTextMetrics.fontFamily,\n        serifs: true,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default serif text font to pair with Bravura/Gonville engraving font',\n      });\n      TextFont.registryInstance.push({\n        name: 'petalumaScript',\n        resolution: PetalumaScriptTextMetrics.resolution,\n        glyphs: PetalumaScriptTextMetrics.glyphs,\n        family: PetalumaScriptTextMetrics.fontFamily,\n        serifs: false,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default sans-serif text font to pair with Petaluma engraving font',\n      });\n    }\n    return TextFont.registryInstance;\n  }\n\n  // ### getFontFamilies\n  // Web font files are generally distributed per weight and style (bold, italic).\n  // return the family with the attributes that are available for that font.\n  // We assume descriptions are the same for different weights/styles.\n  static getFontFamilies(): TextFontRegistry[] {\n    const hash: Record<string, TextFontRegistry> = {};\n    const returnedFonts: TextFontRegistry[] = [];\n    TextFont.fontRegistry.forEach((font) => {\n      if (!hash[font.family]) {\n        hash[font.family] = {\n          family: font.family,\n          description: font.description,\n          bold: font.bold,\n          serifs: font.serifs,\n          italic: font.italic,\n        };\n      } else {\n        ['bold', 'italic', 'monospaced', 'serifs'].forEach((attr) => {\n          if (font[attr]) {\n            hash[font.family][attr] = true;\n          }\n        });\n      }\n    });\n    const keys = Object.keys(hash);\n    keys.forEach((key) => {\n      returnedFonts.push(hash[key]);\n    });\n    return returnedFonts;\n  }\n\n  // ### fontWeightToBold\n  // return true if the font weight indicates we desire a 'bold'\n  // used in getTextFontFromVexFontData\n  static fontWeightToBold(fw?: string): boolean {\n    if (!fw) {\n      return false;\n    }\n    if (isNaN(parseInt(fw, 10))) {\n      return fw.toLowerCase() === 'bold';\n    }\n    // very subjective...\n    return parseInt(fw, 10) >= 600;\n  }\n\n  // ### fontStyleToItalic\n  // return true if the font style indicates we desire 'italic' style\n  // used in getTextFontFromVexFontData\n  static fontStyleToItalic(fs?: string): boolean {\n    return typeof fs === 'string' && fs.toLowerCase() === 'italic';\n  }\n\n  // ### textWidthCache\n  // Static cache of widths hashed on font/string.\n  static get textWidthCache(): Record<string, Record<string, number>> {\n    if (typeof TextFont.textWidthCacheInstance === 'undefined') {\n      TextFont.textWidthCacheInstance = {};\n    }\n    return TextFont.textWidthCacheInstance;\n  }\n\n  // ### getTextFontFromVexFontData\n  // Find the font that most closely matches the parameters from the given font data.\n  // Primarily we look for font family, also bold and italic attributes.  This\n  // method will always return a fallback font if there are no matches.\n  static getTextFontFromVexFontData(fd: FontInfo): TextFont {\n    let i = 0;\n    let selectedFont = null;\n    const fallback = TextFont.fontRegistry[0];\n    let candidates: TextFontRegistry[] = [];\n    const families = fd.family.split(',');\n    for (i = 0; i < families.length; ++i) {\n      const famliy = families[i];\n      candidates = TextFont.fontRegistry.filter((font) => font.family === famliy);\n      if (candidates.length) {\n        break;\n      }\n    }\n    if (candidates.length === 0) {\n      selectedFont = new TextFont(fallback);\n    } else if (candidates.length === 1) {\n      selectedFont = new TextFont(candidates[0]);\n    } else {\n      const bold = TextFont.fontWeightToBold(fd.weight);\n      const italic = TextFont.fontStyleToItalic(fd.style);\n      const perfect = candidates.find((font) => font.bold === bold && font.italic === italic);\n      if (perfect) {\n        selectedFont = new TextFont(perfect);\n      } else {\n        const ok = candidates.find((font) => font.italic === italic || font.bold === bold);\n        if (ok) {\n          selectedFont = new TextFont(ok);\n        } else {\n          selectedFont = new TextFont(candidates[0]);\n        }\n      }\n    }\n    if (typeof fd.size === 'number' && fd.size > 0) {\n      selectedFont.setFontSize(fd.size);\n    }\n    return selectedFont;\n  }\n\n  static getFontDataByName(fontName: string): TextFontRegistry | undefined {\n    return TextFont.fontRegistry.find((fd) => fd.name === fontName);\n  }\n\n  // ### registerFont\n  // Applications may register their own fonts and the metrics, and those metrics\n  // will be available to the application for formatting.  See fontRegistry\n  // for format of font metrics.  Metrics can be generated from any font file\n  // using font_fontgen.js in the tools/smufl directory.\n  static registerFont(fontData: TextFontRegistry, overwrite?: boolean): void {\n    // Get via external reference to make sure initial object is created\n    const reg = TextFont.fontRegistry;\n    const exists = reg.find((td) => fontData.name === td.name);\n    if (exists && overwrite) {\n      TextFont.registryInstance = TextFont.fontRegistry.filter((fd) => fd.name !== exists.name);\n    }\n    if (!exists) {\n      L('registering font ' + fontData.name);\n      TextFont.registryInstance.push(fontData);\n    }\n  }\n\n  // ## Prototype Methods\n  //\n  // create a font instance.\n  // The preferred method for returning an instance of this class is via\n  // getTextFontFromVexFontData\n  constructor(params: TextFontRegistry) {\n    this.size = 14;\n    this.maxSizeGlyph = 'H';\n    this.weight = '';\n    this.style = '';\n    this.attrs = { type: 'TextFont' };\n    if (!params.name) {\n      throw new Vex.RERR('BadArgument', 'Font constructor must specify a name');\n    }\n    const fontData = params.glyphs ? params : TextFont.getFontDataByName(params.name);\n    if (!fontData) {\n      if (params.glyphs && params.resolution) {\n        TextFont.registerFont(params);\n      } else {\n        throw new Vex.RERR('BadArgument', 'Unknown font, must have glyph metrics and resolution');\n      }\n    } else {\n      Vex.Merge(this, fontData);\n    }\n    Vex.Merge(this, params);\n\n    this.updateCacheKey();\n  }\n  // Create a hash with the current font data, so we can cache computed widths\n  updateCacheKey(): void {\n    this.fontCacheKey = `${this.family}-${this.size}-${this.weight}-${this.style}`;\n  }\n\n  getMetricForCharacter(c: string): TextFontMetrics {\n    if (this.glyphs[c]) {\n      return this.glyphs[c];\n    }\n    return this.glyphs[this.maxSizeGlyph];\n  }\n\n  get maxHeight(): number {\n    const glyph = this.getMetricForCharacter(this.maxSizeGlyph);\n    return (glyph.ha / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForCharacter(c: string): number {\n    const metric = this.getMetricForCharacter(c);\n    if (!metric) {\n      return 0.65 * this.pointsToPixels;\n    }\n    return (metric.advanceWidth / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForString(s: string): number {\n    // Store width in 2-level cache, so I don't have to recompute for\n    // same string/font\n    if (typeof TextFont.textWidthCache[this.fontCacheKey] === 'undefined') {\n      TextFont.textWidthCache[this.fontCacheKey] = {};\n    }\n    let width = 0;\n    if (!TextFont.textWidthCache[this.fontCacheKey][s]) {\n      for (let j = 0; j < s.length; ++j) {\n        width += this.getWidthForCharacter(s[j]);\n      }\n      TextFont.textWidthCache[this.fontCacheKey][s] = width;\n    }\n    return TextFont.textWidthCache[this.fontCacheKey][s];\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels(): number {\n    return this.size / 72 / (1 / 96);\n  }\n\n  setFontSize(size: number): this {\n    this.size = size;\n    // font size mangled into cache key, so use the correct one.\n    this.updateCacheKey();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `TextNote` is a notation element that is positioned in time. Generally\n// meant for objects that sit above/below the staff and inline with each other.\n// Examples of this would be such as dynamics, lyrics, chord changes, etc.\n\nimport { Vex } from './vex';\nimport { Note, NoteStruct } from './note';\nimport { Glyph } from './glyph';\nimport { FontInfo } from './types/common';\n\nexport enum Justification {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n}\n\nexport interface TextNoteStruct extends NoteStruct {\n  ignore_ticks: boolean;\n  smooth: boolean;\n  glyph: string;\n  font?: FontInfo;\n  subscript: string;\n  superscript: string;\n  text: string;\n}\n\nexport class TextNote extends Note {\n  protected text: string;\n  protected superscript: string;\n  protected subscript: string;\n  protected smooth: boolean;\n\n  protected font: FontInfo;\n  protected justification: Justification;\n  protected line: number;\n\n  static get Justification(): typeof Justification {\n    return Justification;\n  }\n\n  // Glyph data\n  static get GLYPHS(): Record<string, { code: string }> {\n    return {\n      segno: {\n        code: 'segno',\n      },\n      tr: {\n        code: 'ornamentTrill',\n      },\n      mordent: {\n        code: 'ornamentMordent',\n      },\n      mordent_upper: {\n        code: 'ornamentShortTrill',\n      },\n      mordent_lower: {\n        code: 'ornamentMordent',\n      },\n      f: {\n        code: 'dynamicForte',\n      },\n      p: {\n        code: 'dynamicPiano',\n      },\n      m: {\n        code: 'dynamicMezzo',\n      },\n      s: {\n        code: 'dynamicSforzando',\n      },\n      z: {\n        code: 'dynamicZ',\n      },\n      coda: {\n        code: 'coda',\n      },\n      pedal_open: {\n        code: 'keyboardPedalPed',\n      },\n      pedal_close: {\n        code: 'keyboardPedalUp',\n      },\n      caesura_straight: {\n        code: 'caesura',\n      },\n      caesura_curved: {\n        code: 'caesuraCurved',\n      },\n      breath: {\n        code: 'breathMarkComma',\n      },\n      tick: {\n        code: 'breathMarkTick',\n      },\n      turn: {\n        code: 'ornamentTurn',\n      },\n      turn_inverted: {\n        code: 'ornamentTurnSlash',\n      },\n    };\n  }\n\n  constructor(options: TextNoteStruct) {\n    super(options);\n    this.setAttribute('type', 'TextNote');\n\n    // Note properties\n    this.text = options.text;\n    this.superscript = options.superscript;\n    this.subscript = options.subscript;\n    this.glyph = null;\n    this.font = {\n      family: 'Arial',\n      size: 12,\n      weight: '',\n      ...options.font,\n    };\n\n    // Determine and set initial note width. Note that the text width is\n    // an approximation and isn't very accurate. The only way to accurately\n    // measure the length of text is with `canvasmeasureText()`\n    if (options.glyph) {\n      const struct = TextNote.GLYPHS[options.glyph];\n      if (!struct) throw new Vex.RERR('Invalid glyph type: ' + options.glyph);\n\n      this.glyph = new Glyph(struct.code, 40, { category: 'textNote' });\n      this.setWidth(this.glyph.getMetrics().width);\n    }\n\n    this.line = options.line || 0;\n    this.smooth = options.smooth || false;\n    this.ignore_ticks = options.ignore_ticks || false;\n    this.justification = TextNote.Justification.LEFT;\n  }\n\n  // Set the horizontal justification of the TextNote\n  setJustification(just: Justification): this {\n    this.justification = just;\n    return this;\n  }\n\n  // Set the Stave line on which the note should be placed\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    const ctx = this.checkContext();\n    if (!this.tickContext) throw new Vex.RERR('NoTickContext', \"Can't preformat without a TickContext.\");\n\n    if (this.preFormatted) return;\n\n    if (this.smooth) {\n      this.setWidth(0);\n    } else {\n      if (this.glyph) {\n        // Width already set.\n      } else {\n        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n        this.setWidth(ctx.measureText(this.text).width);\n      }\n    }\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      this.leftDisplacedHeadPx = this.width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      this.leftDisplacedHeadPx = this.width;\n    }\n\n    // We reposition to the center of the note head\n    this.rightDisplacedHeadPx = this.tickContext.getMetrics().glyphPx / 2;\n    this.setPreFormatted(true);\n  }\n\n  // Renders the TextNote\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    if (!this.tickContext) throw new Vex.RERR('NoTickContext', \"Can't draw without a TickContext.\");\n\n    this.setRendered();\n\n    // Reposition to center of note head\n    let x = this.getAbsoluteX() + this.tickContext.getMetrics().glyphPx / 2;\n\n    // Align based on tick-context width.\n    const width = this.getWidth();\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      x -= width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      x -= width;\n    }\n\n    let y;\n    if (this.glyph) {\n      y = stave.getYForLine(this.line + -3);\n      this.glyph.render(ctx, x, y);\n    } else {\n      y = stave.getYForLine(this.line + -3);\n      this.applyStyle(ctx);\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.text, x, y);\n\n      const height = ctx.measureText(this.text).height;\n\n      // Write superscript\n      if (this.superscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.superscript, x + width + 2, y - height / 2.2);\n      }\n\n      // Write subscript\n      if (this.subscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.subscript, x + width + 2, y + height / 2.2 - 1);\n      }\n\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// The tickable interface. Tickables are things that sit on a score and\n// have a duration, i.e., they occupy space in the musical rendering dimension.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\nimport { TickContext } from './tickcontext';\nimport { ModifierContext } from './modifiercontext';\nimport { Tuplet } from './tuplet';\nimport { Voice } from './voice';\nimport { Modifier } from './modifier';\n\n//** Spacing */\nexport interface Space {\n  used: number;\n  mean: number;\n  deviation: number;\n}\n\n/** Formatter metrics interface */\nexport interface FormatterMetrics {\n  duration: string;\n  freedom: {\n    left: number;\n    right: number;\n  };\n  iterations: number;\n  space: Space;\n}\n\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport abstract class Tickable extends Element {\n  protected ignore_ticks: boolean;\n  tupletStack: Tuplet[];\n  protected tuplet?: Tuplet;\n  protected ticks: Fraction;\n  protected center_x_shift: number;\n  protected voice?: Voice;\n  protected width: number;\n  protected x_shift: number;\n  protected preFormatted: boolean;\n  protected postFormatted: boolean;\n  protected modifierContext?: ModifierContext;\n  protected tickContext?: TickContext;\n  protected modifiers: Modifier[];\n  protected tickMultiplier: Fraction;\n  protected formatterMetrics: FormatterMetrics;\n  protected intrinsicTicks: number;\n  protected align_center: boolean;\n\n  /** Constructor */\n  constructor() {\n    super();\n    this.setAttribute('type', 'Tickable');\n\n    // These properties represent the duration of\n    // this tickable element.\n    this.ticks = new Fraction(0, 1); // Fractional value of ticks\n    this.intrinsicTicks = 0; // Floating point value of ticks\n    this.tickMultiplier = new Fraction(1, 1);\n\n    // Formatter metrics\n    this.width = 0;\n    this.x_shift = 0; // Shift from tick context\n\n    this.modifiers = [];\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.tupletStack = [];\n\n    this.align_center = false;\n    this.center_x_shift = 0; // Shift from tick context if center aligned\n\n    // This flag tells the formatter to ignore this tickable during\n    // formatting and justification. It is set by tickables such as BarNote.\n    this.ignore_ticks = false;\n\n    // This is a space for an external formatting class or function to maintain\n    // metrics.\n    this.formatterMetrics = {\n      // The freedom of a tickable is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n\n      // The simplified rational duration of this tick as a string. It can be\n      // used as an index to a map or hashtable.\n      duration: '',\n\n      // The number of formatting iterations undergone.\n      iterations: 0,\n\n      // The space in pixels allocated by this formatter, along with the mean space\n      // for tickables of this duration, and the deviation from the mean.\n      space: {\n        used: 0,\n        mean: 0,\n        deviation: 0,\n      },\n    };\n  }\n\n  /** Resets the Tickable, this function will be overloaded. */\n  reset(): this {\n    return this;\n  }\n\n  /** Returns the ticks. */\n  getTicks(): Fraction {\n    return this.ticks;\n  }\n\n  /** Checks if it ignores the ticks. */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Sets width of note. Used by the formatter for positioning. */\n  setWidth(width: number): void {\n    this.width = width;\n  }\n\n  /** Gets width of note. Used by the formatter for positioning. */\n  getWidth(): number {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n    }\n\n    return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n  }\n\n  /** Displaces note by `x` pixels. Used by the formatter. */\n  setXShift(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  /** Gets the `x`pixels of the note. */\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  /** Gets `X` position of this tick context. */\n  getX(): number {\n    if (!this.tickContext) {\n      throw new Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');\n    }\n\n    return this.tickContext.getX() + this.x_shift;\n  }\n\n  /** Returns the formatterMetrics */\n  getFormatterMetrics(): FormatterMetrics {\n    return this.formatterMetrics;\n  }\n\n  /** Returns the center x shift. */\n  getCenterXShift(): number {\n    if (this.isCenterAligned()) {\n      return this.center_x_shift;\n    }\n\n    return 0;\n  }\n\n  /** Sets the center x shift. */\n  setCenterXShift(centerXShift: number): this {\n    this.center_x_shift = centerXShift;\n    return this;\n  }\n\n  // Checks if tickable is center aligned. */\n  isCenterAligned(): boolean {\n    return this.align_center;\n  }\n\n  // Sets/unsets center alignment. */\n  setCenterAlignment(align_center: boolean): this {\n    this.align_center = align_center;\n    return this;\n  }\n\n  /**\n   * Returns the associated voice. Every tickable must be associated with a voice.\n   * This allows formatters and preFormatter to associate them with the right modifierContexts.\n   */\n  getVoice(): Voice {\n    if (!this.voice) throw new Vex.RERR('NoVoice', 'Tickable has no voice.');\n    return this.voice;\n  }\n\n  /** Sets the associated voice. */\n  setVoice(voice: Voice): void {\n    this.voice = voice;\n  }\n\n  /** Gets the tuplet */\n  getTuplet(): Tuplet | undefined {\n    return this.tuplet;\n  }\n\n  /*\n   * Resets the specific Tuplet if this is not provided, all tuplets are reset.\n   * Removes any prior tuplets from the tick calculation and\n   * resets the intrinsic tick value to\n   */\n  resetTuplet(tuplet?: Tuplet): this {\n    let noteCount;\n    let notesOccupied;\n    if (tuplet) {\n      const i = this.tupletStack.indexOf(tuplet);\n      if (i !== -1) {\n        this.tupletStack.splice(i, 1);\n        noteCount = tuplet.getNoteCount();\n        notesOccupied = tuplet.getNotesOccupied();\n\n        // Revert old multiplier by inverting numerator & denom.:\n        this.applyTickMultiplier(noteCount, notesOccupied);\n      }\n      return this;\n    }\n\n    while (this.tupletStack.length) {\n      tuplet = this.tupletStack.pop() as Tuplet;\n      noteCount = tuplet.getNoteCount();\n      notesOccupied = tuplet.getNotesOccupied();\n\n      // Revert old multiplier by inverting numerator & denom.:\n      this.applyTickMultiplier(noteCount, notesOccupied);\n    }\n    return this;\n  }\n\n  /** Attaches to new tuplet. */\n  setTuplet(tuplet: Tuplet): this {\n    if (tuplet) {\n      this.tupletStack.push(tuplet);\n\n      const noteCount = tuplet.getNoteCount();\n      const notesOccupied = tuplet.getNotesOccupied();\n\n      this.applyTickMultiplier(notesOccupied, noteCount);\n    }\n\n    this.tuplet = tuplet;\n\n    return this;\n  }\n\n  /** Optional, if tickable has modifiers, sets modifierContext. */\n  addToModifierContext(mc: ModifierContext): void {\n    this.modifierContext = mc;\n    // Add modifiers to modifier context (if any)\n    this.preFormatted = false;\n  }\n\n  /** Optional, if tickable has modifiers, associates a Modifier. */\n  addModifier(mod: Modifier): this {\n    this.modifiers.push(mod);\n    this.preFormatted = false;\n    return this;\n  }\n\n  /** Gets the list of associated modifiers. */\n  getModifiers(): Modifier[] {\n    return this.modifiers;\n  }\n\n  /** Sets the Tick Contxt. */\n  setTickContext(tc: TickContext): void {\n    this.tickContext = tc;\n    this.preFormatted = false;\n  }\n\n  /** Preformats the Tickable. */\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.width = 0;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      this.width += this.modifierContext.getWidth();\n    }\n  }\n\n  /** Postformats the Tickable. */\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n\n  /** Returns the intrinsic ticks */\n  getIntrinsicTicks(): number {\n    return this.intrinsicTicks;\n  }\n\n  /** Sets the intrinsic ticks. */\n  setIntrinsicTicks(intrinsicTicks: number): void {\n    this.intrinsicTicks = intrinsicTicks;\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Gets the tick multiplier. */\n  getTickMultiplier(): Fraction {\n    return this.tickMultiplier;\n  }\n\n  /** Applies a tick multiplier. */\n  applyTickMultiplier(numerator: number, denominator: number): void {\n    this.tickMultiplier.multiply(numerator, denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Sets the duration. */\n  setDuration(duration: Fraction): void {\n    const ticks = duration.numerator * (Flow.RESOLUTION / duration.denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(ticks);\n    this.intrinsicTicks = this.ticks.value();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\n\nimport { Vex } from './vex';\nimport { Tickable } from './tickable';\nimport { Fraction } from './fraction';\nimport { NoteMetrics, Note } from './note';\n\nexport interface TickContextMetrics extends NoteMetrics {\n  totalLeftPx: number;\n  totalRightPx: number;\n}\n\nexport interface TickContextOptions {\n  tickID: number;\n}\n\n/**\n * Tickcontext formats abstract tickable objects, such as notes, chords,\n * tabs, etc.\n */\nexport class TickContext extends Tickable {\n  protected readonly tickID: number;\n  protected readonly tickables: Note[];\n  protected readonly tickablesByVoice: Record<string, Note>;\n  protected currentTick: Fraction;\n  protected maxTicks: Fraction;\n  protected padding: number;\n  protected xBase: number;\n  protected x: number;\n  protected xOffset: number;\n  protected notePx: number;\n  protected glyphPx: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected modLeftPx: number;\n  protected modRightPx: number;\n  protected totalLeftPx: number;\n  protected totalRightPx: number;\n  protected maxTickable?: Note;\n  protected minTicks?: Fraction;\n  protected minTickable?: Note;\n  tContexts: TickContext[];\n\n  // eslint-disable-next-line\n  draw() {}\n\n  static getNextContext(tContext: TickContext): TickContext | undefined {\n    const contexts = tContext.tContexts;\n    const index = contexts.indexOf(tContext);\n\n    if (index + 1 < contexts.length) return contexts[index + 1];\n  }\n\n  constructor(options?: TickContextOptions) {\n    super();\n    this.tickID = options && options.tickID ? options.tickID : 0;\n    this.setAttribute('type', 'TickContext');\n    this.currentTick = new Fraction(0, 1);\n\n    this.maxTicks = new Fraction(0, 1);\n    this.maxTickable = undefined; // Biggest tickable\n    this.minTicks = undefined; // this can remian null if all tickables have ignore_ticks\n    this.minTickable = undefined;\n\n    this.padding = 1; // padding on each side (width += padding * 2)\n    this.x = 0;\n    this.xBase = 0; // base x position without xOffset\n    this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n    this.tickables = []; // Notes, tabs, chords, lyrics.\n    this.tickablesByVoice = {}; // Tickables indeced by voice number\n\n    // Formatting metrics\n    this.notePx = 0; // width of widest note in this context\n    this.glyphPx = 0; // width of glyph (note head)\n    this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n    this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n    this.modLeftPx = 0; // Left modifier pixels\n    this.modRightPx = 0; // Right modifier pixels\n    this.totalLeftPx = 0; // Total left pixels\n    this.totalRightPx = 0; // Total right pixels\n    this.tContexts = []; // Parent array of tick contexts\n  }\n\n  getTickID(): number {\n    return this.tickID;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    this.xBase = x;\n    this.xOffset = 0;\n    return this;\n  }\n\n  getXBase(): number {\n    return this.xBase;\n  } // use of xBase and xOffset is optional, avoids offset creep\n\n  setXBase(xBase: number): void {\n    this.xBase = xBase;\n    this.x = xBase + this.xOffset;\n  }\n\n  getXOffset(): number {\n    return this.xOffset;\n  }\n\n  setXOffset(xOffset: number): void {\n    this.xOffset = xOffset;\n    this.x = this.xBase + xOffset;\n  }\n\n  getWidth(): number {\n    return this.width + this.padding * 2;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  getMaxTicks(): Fraction {\n    return this.maxTicks;\n  }\n\n  getMinTicks(): Fraction | undefined {\n    return this.minTicks;\n  }\n\n  getMaxTickable(): Note | undefined {\n    return this.maxTickable;\n  }\n\n  getMinTickable(): Note | undefined {\n    return this.minTickable;\n  }\n\n  getTickables(): Note[] {\n    return this.tickables;\n  }\n\n  getTickablesForVoice(voiceIndex: number): Note {\n    return this.tickablesByVoice[voiceIndex];\n  }\n\n  getTickablesByVoice(): Record<string, Note> {\n    return this.tickablesByVoice;\n  }\n\n  getCenterAlignedTickables(): Note[] {\n    return this.tickables.filter((tickable) => tickable.isCenterAligned());\n  }\n\n  /** Gets widths context, note and left/right modifiers for formatting. */\n  getMetrics(): TickContextMetrics {\n    const {\n      width,\n      glyphPx,\n      notePx,\n      leftDisplacedHeadPx,\n      rightDisplacedHeadPx,\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    } = this;\n    return {\n      width, // Width of largest tickable in context\n      glyphPx, // Width of largest glyph (note head)\n      notePx, // Width of notehead + stem\n      leftDisplacedHeadPx, // Left modifiers\n      rightDisplacedHeadPx, // Right modifiers\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    };\n  }\n\n  getCurrentTick(): Fraction {\n    return this.currentTick;\n  }\n\n  setCurrentTick(tick: Fraction): void {\n    this.currentTick = tick;\n    this.preFormatted = false;\n  }\n\n  addTickable(tickable: Note, voiceIndex?: number): this {\n    if (!tickable) {\n      throw new Vex.RERR('BadArgument', 'Invalid tickable added.');\n    }\n\n    if (!tickable.shouldIgnoreTicks()) {\n      this.ignore_ticks = false;\n\n      const ticks = tickable.getTicks();\n\n      if (ticks.greaterThan(this.maxTicks)) {\n        this.maxTicks = ticks.clone();\n        this.maxTickable = tickable;\n      }\n\n      if (this.minTicks == null) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      } else if (ticks.lessThan(this.minTicks)) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      }\n    }\n\n    tickable.setTickContext(this);\n    this.tickables.push(tickable);\n    this.tickablesByVoice[voiceIndex || 0] = tickable;\n    this.preFormatted = false;\n    return this;\n  }\n\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      tickable.preFormat();\n      const metrics = tickable.getMetrics();\n\n      // Maintain max displaced head pixels from all tickables in the context\n      this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n      this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n\n      // Maintain the widest note for all tickables in the context\n      this.notePx = Math.max(this.notePx, metrics.notePx);\n\n      // Maintain the widest note head\n      this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);\n\n      // Total modifier shift\n      this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n      this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n\n      // Total shift\n      this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n      this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n\n      // Recalculate the tick context total width\n      this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n    }\n\n    return this;\n  }\n\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n}\n","import { Glyph, GlyphMetrics } from './glyph';\nimport { TimeSignature } from './timesignature';\nimport { check } from './common';\nimport { Stave } from './stave';\n\nexport class TimeSignatureGlyph extends Glyph {\n  timeSignature: TimeSignature;\n  topStartX: number;\n  botStartX: number;\n  width: number;\n  xMin: number;\n\n  constructor(\n    timeSignature: TimeSignature,\n    topDigits: string[],\n    botDigits: string[],\n    code: string,\n    point: number,\n    options?: { category: string }\n  ) {\n    super(code, point, options);\n    this.timeSignature = timeSignature;\n    this.topGlyphs = [];\n    this.botGlyphs = [];\n\n    let topWidth = 0;\n    for (let i = 0; i < topDigits.length; ++i) {\n      const num = topDigits[i];\n      const topGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.topGlyphs.push(topGlyph);\n      topWidth += topGlyph.getMetrics().width ?? 0;\n    }\n\n    let botWidth = 0;\n    for (let i = 0; i < botDigits.length; ++i) {\n      const num = botDigits[i];\n      const botGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.botGlyphs.push(botGlyph);\n      botWidth += check<number>(botGlyph.getMetrics().width);\n    }\n\n    this.width = Math.max(topWidth, botWidth);\n    this.xMin = this.getMetrics().x_min;\n    this.topStartX = (this.width - topWidth) / 2.0;\n    this.botStartX = (this.width - botWidth) / 2.0;\n    this.reset();\n  }\n\n  getMetrics(): GlyphMetrics {\n    return {\n      x_min: this.xMin,\n      x_max: this.xMin + this.width,\n      width: this.width,\n    } as GlyphMetrics;\n  }\n\n  renderToStave(x: number): void {\n    const stave = check<Stave>(this.stave);\n    let start_x = x + this.topStartX;\n    for (let i = 0; i < this.topGlyphs.length; ++i) {\n      const glyph = this.topGlyphs[i];\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + this.x_shift,\n        stave.getYForLine(this.timeSignature.topLine)\n      );\n      start_x += check<number>(glyph.getMetrics().width);\n    }\n\n    start_x = x + this.botStartX;\n    for (let i = 0; i < this.botGlyphs.length; ++i) {\n      const glyph = this.botGlyphs[i];\n      this.timeSignature.placeGlyphOnLine(glyph, stave, 0);\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + glyph.getMetrics().x_shift,\n        stave.getYForLine(this.timeSignature.bottomLine)\n      );\n      start_x += check<number>(glyph.getMetrics().width);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\n\nimport { Vex } from './vex';\nimport { Glyph } from './glyph';\nimport { StaveModifier } from './stavemodifier';\nimport { TimeSignatureGlyph } from './timesigglyph';\nimport { check } from './common';\n\nexport interface TimeSignatureInfo {\n  glyph: Glyph;\n  line?: number;\n  num: boolean;\n}\n\nconst assertIsValidFraction = (timeSpec: string) => {\n  const numbers = timeSpec.split('/').filter((number) => number !== '');\n\n  if (numbers.length !== 2) {\n    throw new Vex.RERR(\n      'BadTimeSignature',\n      `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`\n    );\n  }\n\n  numbers.forEach((number) => {\n    if (isNaN(Number(number))) {\n      throw new Vex.RERR('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain two valid numbers.`);\n    }\n  });\n};\n\nexport class TimeSignature extends StaveModifier {\n  point: number;\n  bottomLine: number;\n  topLine: number;\n\n  protected timeSig: TimeSignatureInfo;\n  protected validate_args: boolean;\n\n  static get CATEGORY(): string {\n    return 'timesignatures';\n  }\n\n  static get glyphs(): Record<string, { code: string; point: number; line: number }> {\n    return {\n      C: {\n        code: 'timeSigCommon',\n        point: 40,\n        line: 2,\n      },\n      'C|': {\n        code: 'timeSigCutCommon',\n        point: 40,\n        line: 2,\n      },\n    };\n  }\n\n  constructor(timeSpec: string = '4/4', customPadding = 15, validate_args = true) {\n    super();\n    this.setAttribute('type', 'TimeSignature');\n    this.validate_args = validate_args;\n\n    const padding = customPadding;\n\n    this.point = this.musicFont.lookupMetric('digits.point');\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n    this.topLine = 2 + fontLineShift;\n    this.bottomLine = 4 + fontLineShift;\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.timeSig = this.parseTimeSpec(timeSpec);\n    this.setWidth(check<number>(this.timeSig.glyph.getMetrics().width));\n    this.setPadding(padding);\n  }\n\n  getCategory(): string {\n    return TimeSignature.CATEGORY;\n  }\n\n  parseTimeSpec(timeSpec: string): TimeSignatureInfo {\n    if (timeSpec === 'C' || timeSpec === 'C|') {\n      const { line, code, point } = TimeSignature.glyphs[timeSpec];\n      return {\n        line,\n        num: false,\n        glyph: new Glyph(code, point),\n      };\n    }\n\n    if (this.validate_args) {\n      assertIsValidFraction(timeSpec);\n    }\n\n    const [topDigits, botDigits] = timeSpec.split('/').map((number) => number.split(''));\n\n    return {\n      num: true,\n      glyph: this.makeTimeSignatureGlyph(topDigits, botDigits),\n    };\n  }\n\n  makeTimeSignatureGlyph(topDigits: string[], botDigits: string[]): Glyph {\n    const glyph = new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n    return glyph;\n  }\n\n  getTimeSig(): TimeSignatureInfo | undefined {\n    return this.timeSig;\n  }\n\n  setTimeSig(timeSpec: string): this {\n    this.timeSig = this.parseTimeSpec(timeSpec);\n    return this;\n  }\n\n  draw(): void {\n    if (!this.x) {\n      throw new Vex.RERR('TimeSignatureError', \"Can't draw time signature without x.\");\n    }\n\n    if (!this.stave) {\n      throw new Vex.RERR('TimeSignatureError', \"Can't draw time signature without stave.\");\n    }\n\n    this.setRendered();\n    this.timeSig.glyph.setStave(this.stave);\n    this.timeSig.glyph.setContext(this.stave.getContext());\n    this.placeGlyphOnLine(this.timeSig.glyph, this.stave, this.timeSig.line);\n    this.timeSig.glyph.renderToStave(this.x);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { TimeSignature, TimeSignatureInfo } from './timesignature';\n\nexport class TimeSigNote extends Note {\n  protected timeSig?: TimeSignatureInfo;\n\n  constructor(timeSpec: string, customPadding?: number) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'TimeSigNote');\n\n    const timeSignature = new TimeSignature(timeSpec, customPadding);\n    this.timeSig = timeSignature.getTimeSig();\n    this.setWidth(this.timeSig?.glyph.getMetrics().width ?? 0);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  addToModifierContext(): this {\n    /* overridden to ignore */\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    if (!this.timeSig) throw new Vex.RERR('NoTimeSignatureInfo', 'No TimeSignatureInfo attached to this note.');\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (!this.timeSig.glyph.getContext()) {\n      this.timeSig.glyph.setContext(ctx);\n    }\n\n    this.timeSig.glyph.setStave(stave);\n    this.timeSig.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n    this.timeSig.glyph.renderToStave(this.getAbsoluteX());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n//\n// This class implements tremolo notation.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Stem } from './stem';\nimport { FontInfo } from './types/common';\n\nexport interface TremoloRenderOptions {\n  stroke_spacing: number;\n  stroke_px: number;\n  // eslint-disable-next-line\n  font_scale: any;\n}\n\nexport class Tremolo extends Modifier {\n  protected readonly code: string;\n  protected readonly num: number;\n  protected y_spacing?: number;\n  protected font?: FontInfo;\n  protected render_options?: TremoloRenderOptions;\n\n  static get CATEGORY(): string {\n    return 'tremolo';\n  }\n\n  constructor(num: number) {\n    super();\n    this.setAttribute('type', 'Tremolo');\n\n    this.num = num;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'tremolo1';\n  }\n\n  getCategory(): string {\n    return Tremolo.CATEGORY;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n\n    if (!(this.note && this.index != null)) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Tremolo without a note and index.\");\n    }\n\n    this.setRendered();\n    const stemDirection = this.note.getStemDirection();\n\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n    const isGraceNote = this.note.getCategory() === 'gracenotes';\n    const scale = isGraceNote ? GraceNote.SCALE : 1;\n    const category = `tremolo.${isGraceNote ? 'grace' : 'default'}`;\n\n    this.y_spacing = this.musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n    const height = this.num * this.y_spacing;\n    let y = this.note.getStemExtents().baseY - height;\n\n    if (stemDirection < 0) {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n    } else {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n    }\n\n    this.font = {\n      family: 'Arial',\n      size: 16 * scale,\n      weight: '',\n    };\n\n    this.render_options = {\n      font_scale: this.musicFont.lookupMetric(`${category}.point`),\n      stroke_px: 3,\n      stroke_spacing: 10 * scale,\n    };\n\n    x += this.musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(ctx, x, y, this.render_options.font_scale, this.code, { category });\n      y += this.y_spacing;\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of tunings for tablature.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\n\n/** Tuning implements varies types of tunings for tablature. */\nexport class Tuning {\n  protected numStrings: number = 0;\n\n  protected tuningString: string = '';\n\n  protected tuningValues: number[] = [];\n\n  static get names(): Record<string, string> {\n    return {\n      standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n      dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n      dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n      eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n      standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n    };\n  }\n\n  /**\n   * Constructs providing tuning by name (eg. 'dagdad')\n   * or by comma separated note strings.\n   */\n  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n    // Default to standard tuning.\n    this.setTuning(tuningString);\n  }\n\n  /** Returns the note number associated to the note string. */\n  noteToInteger(noteString: string): number {\n    return Flow.keyProperties(noteString).int_value;\n  }\n\n  /**\n   * Set tuning identified by tuning name (eg. 'dagdad')\n   * or comma separated note strings (eg. 'D/5,A/4,G/4,D/4,A/3,D/3').\n   */\n  setTuning(noteString: string): void {\n    if (Tuning.names[noteString]) {\n      noteString = Tuning.names[noteString];\n    }\n\n    this.tuningString = noteString;\n    this.tuningValues = [];\n    this.numStrings = 0;\n\n    const keys = noteString.split(/\\s*,\\s*/);\n    if (keys.length === 0) {\n      throw new Vex.RERR('BadArguments', `Invalid tuning string: ${noteString}`);\n    }\n\n    this.numStrings = keys.length;\n    for (let i = 0; i < this.numStrings; ++i) {\n      this.tuningValues[i] = this.noteToInteger(keys[i]);\n    }\n  }\n\n  /** Returns the note number associated with a tablature string. */\n  getValueForString(stringNum: string | number): number {\n    const s = Number(stringNum);\n    if (s < 1 || s > this.numStrings) {\n      throw new Vex.RERR('BadArguments', `String number must be between 1 and ${this.numStrings}:${stringNum}`);\n    }\n\n    return this.tuningValues[s - 1];\n  }\n\n  /** Returns the note number associated with a tablature string and fret. */\n  getValueForFret(fretNum: string | number, stringNum: string | number): number {\n    const stringValue = this.getValueForString(stringNum);\n    const f = Number(fretNum);\n\n    if (f < 0) {\n      throw new Vex.RERR('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n    }\n\n    return stringValue + f;\n  }\n\n  /** Returns the note string associated with tablature string and fret. */\n  getNoteForFret(fretNum: string | number, stringNum: string | number): string {\n    const noteValue = this.getValueForFret(fretNum, stringNum);\n\n    const octave = Math.floor(noteValue / 12);\n    const value = noteValue % 12;\n\n    return `${Flow.integerToNote(value)}/${octave}`;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.num_notes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   num_notes: fit this many notes into...\n *   notes_occupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of num_notes : notes_occupied.\n *       num_notes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notes_occupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between num_notes and\n *     notes_occupied is greater than 1.\n *\n *   y_offset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\nimport { Note } from './note';\nimport { StemmableNote } from './stemmablenote';\nimport { check } from './common';\n\nexport interface TupletOptions {\n  beats_occupied: number;\n  bracketed: boolean;\n  location: number;\n  notes_occupied: number;\n  num_notes: number;\n  ratioed: boolean;\n  y_offset: number;\n}\n\nexport class Tuplet extends Element {\n  notes: Note[];\n\n  protected options: TupletOptions;\n  protected num_notes: number;\n  protected point: number;\n\n  protected bracketed: boolean;\n  protected y_pos: number;\n  protected x_pos: number;\n  protected width: number;\n  protected location: number;\n  protected notes_occupied: number;\n  protected ratioed: boolean;\n  protected numerator_glyphs: Glyph[] = [];\n  protected denom_glyphs: Glyph[] = [];\n\n  static get LOCATION_TOP(): number {\n    return 1;\n  }\n  static get LOCATION_BOTTOM(): number {\n    return -1;\n  }\n  static get NESTING_OFFSET(): number {\n    return 15;\n  }\n\n  constructor(notes: Note[], options?: TupletOptions) {\n    super();\n    this.setAttribute('type', 'Tuplet');\n    if (!notes || !notes.length) {\n      throw new Vex.RERR('BadArguments', 'No notes provided for tuplet.');\n    }\n\n    this.options = Vex.Merge({}, options);\n    this.notes = notes;\n    this.num_notes = 'num_notes' in this.options ? this.options.num_notes : notes.length;\n\n    // We accept beats_occupied, but warn that it's deprecated:\n    // the preferred property name is now notes_occupied.\n    if (this.options.beats_occupied) {\n      this.beatsOccupiedDeprecationWarning();\n    }\n    this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n    if ('bracketed' in this.options) {\n      this.bracketed = this.options.bracketed;\n    } else {\n      this.bracketed = notes.some((note) => !note.hasBeam());\n    }\n\n    this.ratioed =\n      'ratioed' in this.options ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n    this.point = this.musicFont.lookupMetric('digits.tupletPoint');\n    this.y_pos = 16;\n    this.x_pos = 100;\n    this.width = 200;\n    this.location = this.options.location || Tuplet.LOCATION_TOP;\n\n    Formatter.AlignRestsToNotes(notes, true, true);\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  attach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.setTuplet(this);\n    }\n  }\n\n  detach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.resetTuplet(this);\n    }\n  }\n\n  /**\n   * Set whether or not the bracket is drawn.\n   */\n  setBracketed(bracketed: boolean): this {\n    this.bracketed = !!bracketed;\n    return this;\n  }\n\n  /**\n   * Set whether or not the ratio is shown.\n   */\n  setRatioed(ratioed: boolean): this {\n    this.ratioed = !!ratioed;\n    return this;\n  }\n\n  /**\n   * Set the tuplet to be displayed either on the top or bottom of the stave\n   */\n  setTupletLocation(location: number): this {\n    if (!location) {\n      location = Tuplet.LOCATION_TOP;\n    } else if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n      throw new Vex.RERR('BadArgument', 'Invalid tuplet location: ' + location);\n    }\n\n    this.location = location;\n    return this;\n  }\n\n  getNotes(): Note[] {\n    return this.notes;\n  }\n\n  getNoteCount(): number {\n    return this.num_notes;\n  }\n\n  beatsOccupiedDeprecationWarning(): void {\n    const msg = [\n      'beats_occupied has been deprecated as an ',\n      'option for tuplets. Please use notes_occupied ',\n      'instead. Calls to getBeatsOccupied and ',\n      'setBeatsOccupied should now be routed to ',\n      'getNotesOccupied and setNotesOccupied instead',\n    ].join('');\n\n    // eslint-disable-next-line\n    if (console && console.warn) {\n      // eslint-disable-next-line\n      console.warn(msg);\n    } else if (console) {\n      // eslint-disable-next-line\n      console.log(msg);\n    }\n  }\n\n  getBeatsOccupied(): number {\n    this.beatsOccupiedDeprecationWarning();\n    return this.getNotesOccupied();\n  }\n\n  setBeatsOccupied(beats: number): void {\n    this.beatsOccupiedDeprecationWarning();\n    return this.setNotesOccupied(beats);\n  }\n\n  getNotesOccupied(): number {\n    return this.notes_occupied;\n  }\n\n  setNotesOccupied(notes: number): void {\n    this.detach();\n    this.notes_occupied = notes;\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  resolveGlyphs(): void {\n    this.numerator_glyphs = [];\n    let n = this.num_notes;\n    while (n >= 1) {\n      this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n\n    this.denom_glyphs = [];\n    n = this.notes_occupied;\n    while (n >= 1) {\n      this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n  }\n\n  // determine how many tuplets are nested within this tuplet\n  // on the same side (above/below), to calculate a y\n  // offset for this tuplet:\n  getNestedTupletCount(): number {\n    const location = this.location;\n    const first_note = this.notes[0];\n    let maxTupletCount = countTuplets(first_note, location);\n    let minTupletCount = countTuplets(first_note, location);\n\n    // Count the tuplets that are on the same side (above/below)\n    // as this tuplet:\n    function countTuplets(note: Note, location: number) {\n      return note.tupletStack.filter((tuplet) => tuplet.location === location).length;\n    }\n\n    this.notes.forEach((note) => {\n      const tupletCount = countTuplets(note, location);\n      maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n      minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n    });\n\n    return maxTupletCount - minTupletCount;\n  }\n\n  // determine the y position of the tuplet:\n  getYPosition(): number {\n    // offset the tuplet for any nested tuplets between\n    // it and the notes:\n    const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n\n    // offset the tuplet for any manual y_offset:\n    const y_offset = this.options.y_offset || 0;\n\n    // now iterate through the notes and find our highest\n    // or lowest locations, to form a base y_pos\n    const first_note = this.notes[0];\n    let y_pos;\n    if (this.location === Tuplet.LOCATION_TOP) {\n      y_pos = first_note.checkStave().getYForLine(0) - 15;\n      // y_pos = first_note.getStemExtents().topY - 10;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const top_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().topY - 10\n            : this.notes[i].getStemExtents().baseY - 20;\n\n        if (top_y < y_pos) {\n          y_pos = top_y;\n        }\n      }\n    } else {\n      y_pos = first_note.checkStave().getYForLine(4) + 20;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const bottom_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().baseY + 20\n            : this.notes[i].getStemExtents().topY + 10;\n        if (bottom_y > y_pos) {\n          y_pos = bottom_y;\n        }\n      }\n    }\n\n    return y_pos + nested_tuplet_y_offset + y_offset;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    // determine x value of left bound of tuplet\n    const first_note = this.notes[0] as StemmableNote;\n    const last_note = this.notes[this.notes.length - 1] as StemmableNote;\n\n    if (!this.bracketed) {\n      this.x_pos = first_note.getStemX();\n      this.width = last_note.getStemX() - this.x_pos;\n    } else {\n      this.x_pos = first_note.getTieLeftX() - 5;\n      this.width = last_note.getTieRightX() - this.x_pos + 5;\n    }\n\n    // determine y value for tuplet\n    this.y_pos = this.getYPosition();\n\n    const addGlyphWidth = (width: number, glyph: Glyph) => width + check<number>(glyph.getMetrics().width);\n\n    // calculate total width of tuplet notation\n    let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n    if (this.ratioed) {\n      width = this.denom_glyphs.reduce(addGlyphWidth, width);\n      width += this.point * 0.32;\n    }\n\n    const notation_center_x = this.x_pos + this.width / 2;\n    const notation_start_x = notation_center_x - width / 2;\n\n    // draw bracket if the tuplet is not beamed\n    if (this.bracketed) {\n      const line_width = this.width / 2 - width / 2 - 5;\n\n      // only draw the bracket if it has positive length\n      if (line_width > 0) {\n        ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n        ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n        ctx.fillRect(\n          this.x_pos,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n        ctx.fillRect(\n          this.x_pos + this.width,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n      }\n    }\n\n    // draw numerator glyphs\n    const shiftY = this.musicFont.lookupMetric('digits.shiftY', 0);\n\n    let x_offset = 0;\n    this.numerator_glyphs.forEach((glyph) => {\n      glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n      x_offset += check<number>(glyph.getMetrics().width);\n    });\n\n    // display colon and denominator if the ratio is to be shown\n    if (this.ratioed) {\n      const colon_x = notation_start_x + x_offset + this.point * 0.16;\n      const colon_radius = this.point * 0.06;\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      x_offset += this.point * 0.32;\n      this.denom_glyphs.forEach((glyph) => {\n        glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n        x_offset += check<number>(glyph.getMetrics().width);\n      });\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n\n/* eslint max-classes-per-file: \"off\" */\n\nconst Vex = () => {};\n\n// Default log function sends all arguments to console.\nVex.L = (block, args) => {\n  if (!args) return;\n  const line = Array.prototype.slice.call(args).join(' ');\n  window.console.log(block + ': ' + line);\n};\n\nVex.MakeException = (name) => {\n  const exception = class extends Error {\n    constructor(message, data) {\n      super(message);\n      this.name = name;\n      this.message = message;\n      this.data = data;\n    }\n  };\n\n  return exception;\n};\n\n// Default runtime exception.\nclass RuntimeError extends Error {\n  constructor(code, message) {\n    super('[RuntimeError] ' + code + ':' + message);\n    this.code = code;\n  }\n}\n\n// Shortcut method for `RuntimeError`.\nVex.RuntimeError = RuntimeError;\nVex.RERR = Vex.RuntimeError;\n\n// Merge `destination` hash with `source` hash, overwriting like keys\n// in `source` if necessary.\nVex.Merge = (destination, source) => {\n  for (const property in source) {\n    // eslint-disable-line guard-for-in\n    destination[property] = source[property];\n  }\n  return destination;\n};\n\n// DEPRECATED. Use `Math.*`.\nVex.Min = Math.min;\nVex.Max = Math.max;\nVex.forEach = (a, fn) => {\n  for (let i = 0; i < a.length; i++) {\n    fn(a[i], i);\n  }\n};\n\n// Round number to nearest fractional value (`.5`, `.25`, etc.)\nVex.RoundN = (x, n) => (x % n >= n / 2 ? parseInt(x / n, 10) * n + n : parseInt(x / n, 10) * n);\n\n// Locate the mid point between stave lines. Returns a fractional line if a space.\nVex.MidLine = (a, b) => {\n  let mid_line = b + (a - b) / 2;\n  if (mid_line % 2 > 0) {\n    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;\n  }\n  return mid_line;\n};\n\n// Take `arr` and return a new list consisting of the sorted, unique,\n// contents of arr. Does not modify `arr`.\nVex.SortAndUnique = (arr, cmp, eq) => {\n  if (arr.length > 1) {\n    const newArr = [];\n    let last;\n    arr.sort(cmp);\n\n    for (let i = 0; i < arr.length; ++i) {\n      if (i === 0 || !eq(arr[i], last)) {\n        newArr.push(arr[i]);\n      }\n      last = arr[i];\n    }\n\n    return newArr;\n  } else {\n    return arr;\n  }\n};\n\n// Check if array `a` contains `obj`.\nVex.Contains = (a, obj) => {\n  let i = a.length;\n  while (i--) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Get the 2D Canvas context from DOM element `canvas_sel`.\nVex.getCanvasContext = (canvas_sel) => {\n  if (!canvas_sel) {\n    throw new Vex.RERR('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n  }\n\n  const canvas = document.getElementById(canvas_sel);\n  if (!(canvas && canvas.getContext)) {\n    throw new Vex.RERR('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n  }\n\n  return canvas.getContext('2d');\n};\n\n// Draw a tiny dot marker on the specified canvas. A great debugging aid.\n//\n// `ctx`: Canvas context.\n// `x`, `y`: Dot coordinates.\nVex.drawDot = (ctx, x, y, color = '#55') => {\n  ctx.save();\n  ctx.setFillStyle(color);\n\n  // draw a circle\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n};\n\n// Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\nVex.BM = (s, f) => {\n  const start_time = new Date().getTime();\n  f();\n  const elapsed = new Date().getTime() - start_time;\n  Vex.L(s + elapsed + 'ms');\n};\n\n// Get stack trace.\nVex.StackTrace = () => {\n  const err = new Error();\n  return err.stack;\n};\n\n// Dump warning to console.\nVex.W = (...args) => {\n  const line = args.join(' ');\n  window.console.log('Warning: ', line, Vex.StackTrace());\n};\n\n// Used by various classes (e.g., SVGContext) to provide a\n// unique prefix to element names (or other keys in shared namespaces).\nVex.Prefix = (text) => Vex.Prefix.prefix + text;\nVex.Prefix.prefix = 'vf-';\n\nexport { Vex };\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements vibratos.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Bend } from './bend';\nimport { RenderContext } from './types/common';\nimport { ModifierContext, ModifierContextState } from './modifiercontext';\n\nexport interface VibratoRenderOptions {\n  wave_height: number;\n  wave_girth: number;\n  vibrato_width: number;\n  harsh: boolean;\n  wave_width: number;\n}\n\nexport class Vibrato extends Modifier {\n  render_options: VibratoRenderOptions;\n\n  static get CATEGORY(): string {\n    return 'vibratos';\n  }\n\n  // ## Static Methods\n  // Arrange vibratos inside a `ModifierContext`.\n  static format(vibratos: Vibrato[], state: ModifierContextState, context: ModifierContext): boolean {\n    if (!vibratos || vibratos.length === 0) return false;\n\n    // Vibratos are always on top.\n    let text_line = state.top_text_line;\n    let width = 0;\n    let shift = state.right_shift - 7;\n\n    // If there's a bend, drop the text line\n    const bends = context.getMembers(Bend.CATEGORY) as Modifier[];\n    if (bends && bends.length > 0) {\n      text_line--;\n    }\n\n    // Format Vibratos\n    for (let i = 0; i < vibratos.length; ++i) {\n      const vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  // ## Prototype Methods\n  constructor() {\n    super();\n    this.setAttribute('type', 'Vibrato');\n\n    this.position = Modifier.Position.RIGHT;\n    this.render_options = {\n      harsh: false,\n      vibrato_width: 20,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n    };\n\n    this.setVibratoWidth(this.render_options.vibrato_width);\n  }\n\n  getCategory(): string {\n    return Vibrato.CATEGORY;\n  }\n\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  setVibratoWidth(width: number): this {\n    this.render_options.vibrato_width = width;\n    this.setWidth(width);\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n\n    if (!this.note) {\n      throw new Vex.RERR('NoNoteForVibrato', \"Can't draw vibrato without an attached note.\");\n    }\n\n    this.setRendered();\n    const start = this.note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n\n    const vx = start.x + this.x_shift;\n    const vy = this.note.getYForTopText(this.text_line) + 2;\n\n    Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n  }\n\n  // Static rendering method that can be called from\n  // other classes (e.g. VibratoBracket)\n  static renderVibrato(ctx: RenderContext, x: number, y: number, opts: VibratoRenderOptions): void {\n    const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n    const num_waves = vibrato_width / wave_width;\n\n    ctx.beginPath();\n\n    let i;\n    if (harsh) {\n      ctx.moveTo(x, y + wave_girth + 1);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x + wave_width, y - wave_height / 2);\n        x += wave_width;\n        ctx.lineTo(x + wave_width, y + wave_height / 2);\n        x += wave_width;\n      }\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n        ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n      }\n      ctx.fill();\n    } else {\n      ctx.moveTo(x, y + wave_girth);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n        x += wave_width;\n        ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n        x += wave_width;\n      }\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n        ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n      }\n      ctx.fill();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Balazs Forian-Szabo\n//\n// ## Description\n//\n// This file implements `VibratoBrackets`\n// that renders vibrato effect between two notes.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Vibrato } from './vibrato';\nimport { Note } from './note';\n\n// To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any []) {\n  if (VibratoBracket.DEBUG) Vex.L('Vex.Flow.VibratoBracket', args);\n}\n\nexport class VibratoBracket extends Element {\n  static DEBUG: boolean;\n\n  protected line: number;\n\n  protected start: Note;\n  protected stop: Note;\n  protected render_options: {\n    vibrato_width: number;\n    wave_height: number;\n    wave_girth: number;\n    harsh: boolean;\n    wave_width: number;\n  };\n\n  // bracket_data = {\n  //   start: Vex.Flow.Note (optional)\n  //   stop: Vex.Flow.Note (optional)\n  // };\n  // Either the stop or start note must be set, or both of them.\n  // A null value for the start or stop note indicates that the vibrato\n  // is drawn from the beginning or until the end of the stave accordingly.\n  constructor(bracket_data: { stop: Note; start: Note }) {\n    super();\n    this.setAttribute('type', 'VibratoBracket');\n\n    this.start = bracket_data.start;\n    this.stop = bracket_data.stop;\n\n    this.line = 1;\n\n    this.render_options = {\n      harsh: false,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n      vibrato_width: 0,\n    };\n  }\n\n  // Set line position of the vibrato bracket\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  // Draw the vibrato bracket on the rendering context\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    const y: number =\n      (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n      (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n      0;\n    // If start note is not set then vibrato will be drawn\n    // from the beginning of the stave\n    const start_x: number =\n      (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n    // If stop note is not set then vibrato will be drawn\n    // until the end of the stave\n    const stop_x: number =\n      (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n      (this.start && this.start.checkStave().getTieEndX() - 10) ||\n      0;\n\n    this.render_options.vibrato_width = stop_x - start_x;\n\n    L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n\n    Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the main Voice class. It's mainly a container\n// object to group `Tickables` for formatting.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\nimport { Stave } from './stave';\nimport { VoiceGroup } from './voicegroup';\nimport { Note } from './note';\nimport { BoundingBox } from './boundingbox';\nimport { Tickable } from './tickable';\nimport { RenderContext } from './types/common';\nimport { check } from './common';\n\nexport interface VoiceTime {\n  num_beats: number;\n  beat_value: number;\n  resolution: number;\n}\n\nexport enum VoiceMode {\n  STRICT = 1,\n  SOFT = 2,\n  FULL = 3,\n}\n\nexport class Voice extends Element {\n  protected resolutionMultiplier: number;\n  protected smallestTickCount: Fraction;\n  protected stave?: Stave;\n  protected mode: VoiceMode;\n  protected voiceGroup?: VoiceGroup;\n  protected expTicksUsed?: number;\n  protected preFormatted?: boolean;\n  protected options: { softmaxFactor: number };\n\n  protected readonly totalTicks: Fraction;\n  protected readonly ticksUsed: Fraction;\n  protected readonly largestTickWidth: number;\n  protected readonly tickables: Note[];\n  protected readonly time: VoiceTime;\n\n  // Modes allow the addition of ticks in three different ways:\n  //\n  // STRICT: This is the default. Ticks must fill the voice.\n  // SOFT:   Ticks can be added without restrictions.\n  // FULL:   Ticks do not need to fill the voice, but can't exceed the maximum\n  //         tick length.\n  static get Mode(): typeof VoiceMode {\n    return VoiceMode;\n  }\n\n  constructor(time: VoiceTime | string, options?: { softmaxFactor: number }) {\n    super();\n    this.setAttribute('type', 'Voice');\n\n    this.options = {\n      softmaxFactor: 100,\n      ...options,\n    };\n\n    // Time signature shortcut: \"4/4\", \"3/8\", etc.\n    if (typeof time === 'string') {\n      const match = time.match(/(\\d+)\\/(\\d+)/);\n      if (match) {\n        time = {\n          num_beats: parseInt(match[1]),\n          beat_value: parseInt(match[2]),\n          resolution: Flow.RESOLUTION,\n        };\n      }\n    }\n\n    // Default time sig is 4/4\n    this.time = Vex.Merge(\n      {\n        num_beats: 4,\n        beat_value: 4,\n        resolution: Flow.RESOLUTION,\n      },\n      time\n    );\n\n    // Recalculate total ticks.\n    this.totalTicks = new Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n\n    this.resolutionMultiplier = 1;\n\n    // Set defaults\n    this.tickables = [];\n    this.ticksUsed = new Fraction(0, 1);\n    this.smallestTickCount = this.totalTicks.clone();\n    this.largestTickWidth = 0;\n    // Do we care about strictly timed notes\n    this.mode = Voice.Mode.STRICT;\n  }\n\n  // Get the total ticks in the voice\n  getTotalTicks(): Fraction {\n    return this.totalTicks;\n  }\n\n  // Get the total ticks used in the voice by all the tickables\n  getTicksUsed(): Fraction {\n    return this.ticksUsed;\n  }\n\n  // Get the largest width of all the tickables\n  getLargestTickWidth(): number {\n    return this.largestTickWidth;\n  }\n\n  // Get the tick count for the shortest tickable\n  getSmallestTickCount(): Fraction {\n    return this.smallestTickCount;\n  }\n\n  // Get the tickables in the voice\n  getTickables(): Note[] {\n    return this.tickables;\n  }\n\n  // Get/set the voice mode, use a value from `Voice.Mode`\n  getMode(): number {\n    return this.mode;\n  }\n\n  setMode(mode: number): this {\n    this.mode = mode;\n    return this;\n  }\n\n  // Get the resolution multiplier for the voice\n  getResolutionMultiplier(): number {\n    return this.resolutionMultiplier;\n  }\n\n  // Get the actual tick resolution for the voice\n  getActualResolution(): number {\n    return this.resolutionMultiplier * this.time.resolution;\n  }\n\n  // Set the voice's stave\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    this.boundingBox = undefined; // Reset bounding box so we can reformat\n    return this;\n  }\n\n  // Get the bounding box for the voice\n  getBoundingBox(): BoundingBox | undefined {\n    let boundingBox;\n    let bb;\n    let i;\n\n    if (!this.boundingBox) {\n      boundingBox = undefined;\n\n      for (i = 0; i < this.tickables.length; ++i) {\n        this.tickables[i].setStave(check<Stave>(this.stave));\n\n        bb = this.tickables[i].getBoundingBox();\n        if (!bb) continue;\n\n        boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n      }\n\n      this.boundingBox = boundingBox;\n    }\n    return this.boundingBox;\n  }\n\n  // Every tickable must be associated with a voiceGroup. This allows formatters\n  // and preformatters to associate them with the right modifierContexts.\n  getVoiceGroup(): VoiceGroup {\n    if (!this.voiceGroup) {\n      throw new Vex.RERR('NoVoiceGroup', 'No voice group for voice.');\n    }\n\n    return this.voiceGroup;\n  }\n\n  // Set the voice group\n  setVoiceGroup(g: VoiceGroup): this {\n    this.voiceGroup = g;\n    return this;\n  }\n\n  // Set the voice mode to strict or soft\n  setStrict(strict: boolean): this {\n    this.mode = strict ? Voice.Mode.STRICT : Voice.Mode.SOFT;\n    return this;\n  }\n\n  // Determine if the voice is complete according to the voice mode\n  isComplete(): boolean {\n    if (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) {\n      return this.ticksUsed.equals(this.totalTicks);\n    } else {\n      return true;\n    }\n  }\n\n  // We use softmax to layout the tickables proportional to the exponent of\n  // their duration. The softmax factor is used to determine the 'linearness' of\n  // the layout.\n  //\n  // The softmax of all the tickables in this voice should sum to 1.\n  setSoftmaxFactor(factor: number): this {\n    this.options.softmaxFactor = factor;\n    return this;\n  }\n\n  // Calculate the sum of the exponents of all the ticks in this voice to use as the denominator\n  // of softmax.\n  reCalculateExpTicksUsed(): number {\n    const totalTicks = this.ticksUsed.value();\n    const exp = (tickable: Tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n    this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b);\n    return this.expTicksUsed;\n  }\n\n  // Get the softmax-scaled value of a tick duration. 'tickValue' is a number.\n  softmax(tickValue: number): number {\n    if (!this.expTicksUsed) {\n      this.expTicksUsed = this.reCalculateExpTicksUsed();\n    }\n\n    const totalTicks = this.ticksUsed.value();\n    const exp = (v: number) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n    const sm = exp(tickValue) / this.expTicksUsed;\n    return sm;\n  }\n\n  // Add a tickable to the voice\n  addTickable(tickable: Note): this {\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      // Update the total ticks for this line.\n      this.ticksUsed.add(ticks);\n      this.expTicksUsed = 0; // reset\n\n      if (\n        (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) &&\n        this.ticksUsed.greaterThan(this.totalTicks)\n      ) {\n        this.ticksUsed.subtract(ticks);\n        throw new Vex.RERR('BadArgument', 'Too many ticks.');\n      }\n\n      // Track the smallest tickable for formatting.\n      if (ticks.lessThan(this.smallestTickCount)) {\n        this.smallestTickCount = ticks.clone();\n      }\n\n      this.resolutionMultiplier = this.ticksUsed.denominator;\n\n      // Expand total ticks using denominator from ticks used.\n      this.totalTicks.add(0, this.ticksUsed.denominator);\n    }\n\n    // Add the tickable to the line.\n    this.tickables.push(tickable);\n    tickable.setVoice(this);\n    return this;\n  }\n\n  // Add an array of tickables to the voice.\n  addTickables(tickables: Note[]): this {\n    for (let i = 0; i < tickables.length; ++i) {\n      this.addTickable(tickables[i]);\n    }\n\n    return this;\n  }\n\n  // Preformats the voice by applying the voice's stave to each note.\n  preFormat(): this {\n    if (this.preFormatted) return this;\n    const stave = check<Stave>(this.stave);\n    this.tickables.forEach((tickable) => {\n      if (!tickable.getStave()) {\n        tickable.setStave(stave);\n      }\n    });\n\n    this.preFormatted = true;\n    return this;\n  }\n\n  // Render the voice onto the canvas `context` and an optional `stave`.\n  // If `stave` is omitted, it is expected that the notes have staves\n  // already set.\n  draw(context: RenderContext = this.checkContext(), stave: Stave | undefined = this.stave): void {\n    this.setRendered();\n    let boundingBox = undefined;\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n\n      // Set the stave if provided\n      if (stave) tickable.setStave(stave);\n\n      if (!tickable.getStave()) {\n        throw new Vex.RuntimeError('MissingStave', 'The voice cannot draw tickables without staves.');\n      }\n\n      if (i === 0) boundingBox = tickable.getBoundingBox();\n\n      if (i > 0 && boundingBox) {\n        const tickable_bb = tickable.getBoundingBox();\n        if (tickable_bb) boundingBox.mergeWith(tickable_bb);\n      }\n\n      tickable.setContext(context);\n      tickable.drawWithStyle();\n    }\n\n    this.boundingBox = boundingBox;\n  }\n}\n","import { Vex } from './vex';\nimport { Formatter } from './formatter';\n\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\nfunction L(...args) {\n  if (WidthFormatter.DEBUG) Vex.L('Vex.Flow.WidthFormatter', args);\n}\n\nexport class WidthFormatter extends Formatter {\n  constructor(options) {\n    super(options);\n    this.options.maxIterations = 5;\n  }\n  // Calculate the minimum width required to align and format `voices`.\n  preCalculateMinTotalWidth(voices) {\n    // Cache results.\n    if (this.hasMinTotalWidth) return this.minTotalWidth;\n\n    // Create tick contexts if not already created.\n    if (!this.tickContexts) {\n      if (!voices) {\n        throw new Vex.RERR('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n      }\n\n      this.createTickContexts(voices);\n    }\n\n    const { list: contextList, map: contextMap } = this.tickContexts;\n\n    // const maxTicks = contextList.map(tick => tick.maxTicks.value()).reduce((a, b) => a + b, 0);\n    // Go through each tick context and calculate total width.\n    this.minTotalWidth = contextList\n      .map((tick) => {\n        const context = contextMap[tick];\n        context.preFormat();\n        const width = context.getWidth();\n        const metrics = context.getMetrics();\n        return width + metrics.totalLeftPx;\n      })\n      .reduce((a, b) => a + b, 0);\n\n    this.hasMinTotalWidth = true;\n\n    return this.minTotalWidth;\n  }\n  computeVoiceFormatting() {\n    this.voices.forEach((voice) => {\n      voice.widthTicksUsed = voice.tickables.map((tickable) => tickable.widthTicks).reduce((a, b) => a + b);\n      const exp = (tickable) => Math.pow(voice.options.softmaxFactor, tickable.widthTicks / voice.widthTicksUsed);\n      voice.expTicksUsed = voice.tickables.map(exp).reduce((a, b) => a + b);\n    });\n  }\n  computeMaxWidthEstimate(ideals) {\n    const voiceWidths = [];\n    this.voices.forEach((voice, index) => {\n      voiceWidths.push(0);\n      ideals.forEach((ideal, idIx) => {\n        if (idIx > 0) {\n          const tickByVoice = ideal.fromTickable.tickContext.getTickablesByVoice();\n          if (tickByVoice[index]) {\n            voiceWidths[index] += ideal.expectedDistance;\n            if (ideal.overlap > 0) {\n              voiceWidths[index] += ideal.overlap;\n            }\n          }\n        }\n      });\n      const lastContext = voice.tickables[voice.tickables.length - 1].getTickContext();\n      const metrics = lastContext.getMetrics();\n      voiceWidths[index] += metrics.notePx + metrics.totalLeftPx + metrics.totalRightPx;\n    });\n    return voiceWidths.reduce((a, b) => (a > b ? a : b));\n  }\n\n  softmax(voice, tickValue) {\n    const exp = (v) => Math.pow(voice.options.softmaxFactor, v / voice.widthTicksUsed);\n    return exp(tickValue) / voice.expTicksUsed;\n  }\n  calculateWidthMap(adjustedJustifyWidth) {\n    const widthMap = {};\n    const previousWidthByVoice = {};\n    const contexts = this.tickContexts;\n    let i = 0;\n    const voiceMap = {};\n    let foundOverlappingLine = false;\n    // Calculate softmax basis based on current widthTick levels\n    this.computeVoiceFormatting();\n    const { list: contextList, map: contextMap } = contexts;\n\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n      widthMap[tick] = {\n        context,\n        tick,\n        widthData: {},\n      };\n      const voicesInContext = context.getTickablesByVoice();\n      Object.keys(voicesInContext).forEach((voiceKey) => {\n        if (typeof previousWidthByVoice[voiceKey] === 'undefined') {\n          previousWidthByVoice[voiceKey] = null;\n        }\n        const widthEntry = {\n          expectedDistance: 0,\n          previousWidth: previousWidthByVoice[voiceKey],\n          nextWidth: null,\n          overlap: 0,\n          voiceKey,\n          tick,\n          x: 0,\n          tickable: voicesInContext[voiceKey],\n        };\n        // Keep track of existing voices for backtrack\n        if (!voiceMap[voiceKey]) {\n          voiceMap[voiceKey] = true;\n        }\n        const tickableMetrics = widthEntry.tickable.getMetrics();\n        widthEntry.width = tickableMetrics.notePx + tickableMetrics.modRightPx + tickableMetrics.rightDisplacedHeadPx;\n        if (widthEntry.previousWidth) {\n          widthEntry.previousWidth.nextWidth = widthEntry;\n          const previousMetrics = widthEntry.previousWidth.tickable.getMetrics();\n          widthEntry.expectedDistance =\n            this.softmax(widthEntry.previousWidth.tickable.getVoice(), widthEntry.previousWidth.tickable.widthTicks) *\n            adjustedJustifyWidth;\n          widthEntry.overlap =\n            previousMetrics.notePx +\n            previousMetrics.rightDisplacedHeadPx +\n            previousMetrics.modRightPx -\n            (widthEntry.expectedDistance - widthEntry.tickable.tickContext.totalLeftPx);\n          widthEntry.x = widthEntry.previousWidth.x + widthEntry.expectedDistance;\n          if (widthEntry.overlap > 0) {\n            foundOverlappingLine = true;\n          }\n        } else {\n          widthEntry.x = context.getX();\n        }\n        L(\n          'expectedDistance/overlap/x/tick/ticks/voice',\n          widthEntry.expectedDistance,\n          widthEntry.overlap,\n          widthEntry.x,\n          tick,\n          widthEntry.tickable.ticks.value(),\n          widthEntry.voiceKey\n        );\n        previousWidthByVoice[voiceKey] = widthEntry;\n        widthMap[tick].widthData[voiceKey] = widthEntry;\n      });\n    });\n    // If we haven't found any collisions per voice, look for overlaps between voices (unaligned/misaligned voices)\n    if (!foundOverlappingLine) {\n      // We start by a 'dress rehearsal' where each tickable is put at what it's X would be - max X of tickables at a context\n      let j = 0;\n      for (i = 0; i < contextList.length; ++i) {\n        const widthData = widthMap[contextList[i]].widthData;\n        const voiceKeys = Object.keys(widthData);\n        let maxX = 0;\n        for (j = 0; j < voiceKeys.length; ++j) {\n          const widthEntry = widthData[voiceKeys[j]];\n          const x = widthEntry.previousWidth ? widthEntry.previousWidth.x + widthEntry.expectedDistance : widthEntry.x;\n          maxX = x > maxX ? x : maxX;\n        }\n        for (j = 0; j < voiceKeys.length; ++j) {\n          widthData[voiceKeys[j]].x = maxX;\n        }\n      }\n      const voiceCount = Object.keys(voiceMap).length;\n      const ticksSoFar = [0];\n      // Now see if any tickable is to the left of a tickable earlier in the measure, in a different voice\n      for (i = 1; i < contextList.length; ++i) {\n        const tick = contextList[i];\n        const widthData = widthMap[tick].widthData;\n        const voicesInContext = Object.keys(widthData);\n        const checkedVoices = {};\n        let p = 0;\n        for (p = 0; p < voicesInContext.length; ++p) {\n          const widthEntry = widthData[voicesInContext[p]];\n          // Go backwards from this tick context to find previous notes per voice\n          // and compare x with our x\n          for (j = ticksSoFar.length - 1; j >= 0; --j) {\n            const previousWidths = widthMap[contextList[j]];\n            let k = 0;\n            const prevKeys = Object.keys(previousWidths.widthData);\n            for (k = 0; k < prevKeys.length; ++k) {\n              const prevKey = prevKeys[k];\n              const prevEntry = previousWidths.widthData[prevKey];\n              checkedVoices[prevKey] = true;\n              if (prevEntry.x >= widthEntry.x && prevEntry.x - widthEntry.x > widthEntry.overlap) {\n                widthEntry.overlap = prevEntry.x - widthEntry.x + 1;\n                // foundOverlappingVoice = true;\n                L('alternate overlap from tick/voice/newVal', prevEntry.tick, prevEntry.voiceKey, widthEntry.overlap);\n              }\n            }\n            if (Object.keys(checkedVoices).length === voiceCount) {\n              break; // we've searched all voices at this tick\n            }\n          }\n        }\n        ticksSoFar.push(tick);\n      }\n    }\n    return widthMap;\n  }\n  adjustOverlaps(contextList, widthMap, istats) {\n    let overlaps = false;\n    let maxUnderlap = null;\n    contextList.forEach((tick) => {\n      const widthContext = widthMap[tick];\n      Object.keys(widthContext.widthData).forEach((voiceKey) => {\n        const widthEntry = widthContext.widthData[voiceKey];\n        if (widthEntry.overlap > 0 && istats.stdDev > 1) {\n          overlaps = true;\n          widthEntry.previousWidth.tickable.widthTicks =\n            widthEntry.previousWidth.tickable.widthTicks * (1 + widthEntry.overlap / istats.stdDev);\n        } else if (\n          (widthEntry.overlap < istats.mean - istats.stdDev || widthEntry.overlap < 2 * istats.mean) &&\n          (maxUnderlap === null || widthEntry.overlap < maxUnderlap.overlap) &&\n          widthEntry.overlap < 0 &&\n          istats.stdDev > 1 &&\n          overlaps\n        ) {\n          maxUnderlap = widthEntry;\n        }\n      });\n    });\n    // If there were overlaps, reduce the greatest overlap to make room for the additional ticks\n    if (overlaps && maxUnderlap && maxUnderlap.previousWidth) {\n      maxUnderlap.previousWidth.tickable.widthTicks = maxUnderlap.previousWidth.tickable.widthTicks * 0.85;\n    }\n    return overlaps;\n  }\n\n  // This is the core formatter logic. Format voices and justify them\n  // to `justifyWidth` pixels. `renderingContext` is required to justify elements\n  // that can't retreive widths without a canvas. This method sets the `x` positions\n  // of all the tickables/notes in the formatter.\n  preFormat(justifyWidth = 0, renderingContext, voices, stave) {\n    // Initialize context maps.\n    const contexts = this.tickContexts;\n    const { list: contextList, map: contextMap } = contexts;\n    let widthMap = null;\n\n    // Reset loss history for evaluator.\n    this.lossHistory = [];\n\n    // If voices and a stave were provided, set the Stave for each voice\n    // and preFormat to apply Y values to the notes;\n    if (voices && stave) {\n      voices.forEach((voice) => voice.setStave(stave).preFormat());\n    }\n\n    // Now distribute the ticks to each tick context, and assign them their\n    // own X positions.\n    let x = 0;\n    let shift = 0;\n    this.minTotalWidth = 0;\n\n    // Step 1: Calculate starting X based on the widths and time-order alone\n    // The music will be aligned vertically and fully left-justified\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n      if (renderingContext) context.setContext(renderingContext);\n\n      // Make sure that all tickables in this context have calculated their\n      // space requirements.\n      context.preFormat();\n\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n\n      const metrics = context.getMetrics();\n      x = x + shift + metrics.totalLeftPx;\n      context.setX(x);\n\n      // Calculate shift for the next tick.\n      shift = width - metrics.totalLeftPx;\n    });\n\n    this.minTotalWidth = x + shift;\n    this.hasMinTotalWidth = true;\n\n    // If we are not justifying, we are done.  Leave music left-justified.\n    if (justifyWidth <= 0) return this.evaluate();\n\n    // Start justification. Subtract the right extra pixels of the final context because the formatter\n    // justifies based on the context's X position, which is the left-most part of the note head.\n    const lastContext = contextMap[contextList[contextList.length - 1]];\n    const lastMetrics = lastContext.getMetrics();\n    const adjustedJustifyWidth = justifyWidth - lastMetrics.notePx - lastMetrics.totalRightPx - lastMetrics.totalLeftPx;\n\n    // step 1: Format the music proportionally\n    widthMap = this.calculateWidthMap(adjustedJustifyWidth);\n\n    function shiftToIdealDistances(widthMap) {\n      // Distribute ticks to the contexts based on the calculated distance error.\n      const centerX = adjustedJustifyWidth / 2;\n\n      contextList.forEach((tick) => {\n        const widthData = widthMap[tick].widthData;\n        let contextX = 0;\n        Object.keys(widthData).forEach((widthKey) => {\n          const widthEntry = widthData[widthKey];\n          const startX = widthEntry.previousWidth\n            ? widthEntry.previousWidth.tickable.getX()\n            : widthMap[tick].context.getX();\n          const total = startX + widthEntry.expectedDistance;\n          if (total > contextX) {\n            contextX = total;\n          }\n        });\n        widthMap[tick].context.setX(contextX);\n        // Move center aligned tickables to middle\n        widthMap[tick].context.getCenterAlignedTickables().forEach(tickable => { // eslint-disable-line\n          tickable.center_x_shift = centerX - widthMap[tick].context.getX();\n        });\n      });\n    }\n\n    const targetWidth = adjustedJustifyWidth;\n    let overlapIterations = this.options.maxIterations;\n    const maxOverlap = (wd) =>\n      Object.keys(wd.widthData)\n        .map((key) => wd.widthData[key].overlap)\n        .reduce((a, b) => (a > b ? a : b));\n    const maxOverlaps = contextList.map((tick) => maxOverlap(widthMap[tick]));\n    maxOverlaps.splice(0, 1);\n    const std = (numArray) => {\n      if (numArray.length < 1) {\n        return { mean: 1, stdDev: 1 };\n      }\n      const sum = numArray.reduce((a, b) => a + b);\n      const mean = sum / numArray.length;\n      const variance = numArray.map((a) => Math.pow(a - mean, 2)).reduce((a, b) => a + b) / numArray.length;\n      return { mean, stdDev: Math.sqrt(variance) };\n    };\n    const istats = std(maxOverlaps);\n    L('ideal means/stdDev', istats.mean, istats.stdDev);\n\n    // Step 2: alignment\n    // If any notes collide with their left neighbor (overlap is > 0), do 2 things:\n    // 1. add ticks to those notes to make the distance between them and left neighbor greater\n    // 2. remove ticks from notes that have an extra large space between them and their neihbor, to give the crowded notes more room\n    let overlaps = this.adjustOverlaps(contextList, widthMap, istats);\n    while (overlaps && overlapIterations) {\n      overlapIterations -= 1;\n      // recalculate softMax based on new ticks\n      widthMap = this.calculateWidthMap(targetWidth);\n      overlaps = this.adjustOverlaps(contextList, widthMap, istats);\n    }\n\n    // Assign X positions based on the formatting.\n    shiftToIdealDistances(widthMap);\n\n    // Just one context. Done formatting.\n    if (contextList.length === 1) return null;\n\n    const actualWidth =\n      lastContext.getX() + lastContext.totalRightPx + lastContext.notePx + lastContext.rightDisplacedHeadPx + 10;\n    const ratio = justifyWidth - actualWidth - 10;\n    const ccount = contextList.length;\n    contextList.forEach((tick, i) => {\n      const context = contextMap[tick];\n      const oldX = context.getX();\n      context.setX(oldX + (ratio / ccount) * i);\n    });\n\n    this.justifyWidth = justifyWidth;\n    return this.evaluate();\n  }\n\n  // Calculate the total cost of this formatting decision.\n  evaluate() {\n    const justifyWidth = this.justifyWidth;\n    // Calculate available slack per tick context. This works out how much freedom\n    // to move a context has in either direction, without affecting other notes.\n    this.contextGaps = { total: 0, gaps: [] };\n    this.tickContexts.list.forEach((tick, index) => {\n      if (index === 0) return;\n      const prevTick = this.tickContexts.list[index - 1];\n      const prevContext = this.tickContexts.map[prevTick];\n      const context = this.tickContexts.map[tick];\n      const prevMetrics = prevContext.getMetrics();\n      const currMetrics = context.getMetrics();\n\n      // Calculate X position of right edge of previous note\n      const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n      // Calculate X position of left edge of current note\n      const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n      const gap = insideLeftEdge - insideRightEdge;\n      this.contextGaps.total += gap;\n      this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n\n      // Tell the tick contexts how much they can reposition themselves.\n      context.getFormatterMetrics().freedom.left = gap;\n      prevContext.getFormatterMetrics().freedom.right = gap;\n    });\n\n    // Calculate mean distance in each voice for each duration type, then calculate\n    // how far each note is from the mean.\n    const durationStats = (this.durationStats = {});\n\n    function updateStats(duration, space) {\n      const stats = durationStats[duration];\n      if (stats === undefined) {\n        durationStats[duration] = { mean: space, count: 1 };\n      } else {\n        stats.count += 1;\n        stats.mean = (stats.mean + space) / 2;\n      }\n    }\n\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note, i, notes) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getMetrics();\n        const formatterMetrics = note.getFormatterMetrics();\n        const leftNoteEdge = note.getX() + metrics.notePx + metrics.totalRightPx;\n        let space = 0;\n\n        if (i < notes.length - 1) {\n          const rightNote = notes[i + 1];\n          const rightMetrics = rightNote.getMetrics();\n          const rightNoteEdge = rightNote.getX() - rightMetrics.totalLeftPx;\n\n          space = rightNoteEdge - leftNoteEdge;\n          formatterMetrics.space.used = rightNote.getX() - note.getX();\n          rightNote.getFormatterMetrics().freedom.left = space;\n        } else {\n          space = justifyWidth - leftNoteEdge;\n          formatterMetrics.space.used = justifyWidth - note.getX();\n        }\n\n        formatterMetrics.freedom.right = space;\n        updateStats(duration, formatterMetrics.space.used);\n      });\n    });\n\n    // Calculate how much each note deviates from the mean. Loss function is square\n    // root of the sum of squared deviations.\n    let totalDeviation = 0;\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getFormatterMetrics();\n\n        metrics.space.mean = durationStats[duration].mean;\n        metrics.duration = duration;\n        metrics.iterations += 1;\n        metrics.space.deviation = metrics.space.used - metrics.space.mean;\n\n        totalDeviation += Math.pow(metrics.space.deviation, 2);\n      });\n    });\n\n    this.totalCost = Math.sqrt(totalDeviation);\n    this.lossHistory.push(this.totalCost);\n    return this.totalCost;\n  }\n}\n"],"sourceRoot":""}