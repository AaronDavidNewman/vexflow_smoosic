{"version":3,"file":"vexflow-core-min.js","mappings":"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B,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,EACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB8N,IAAM,CACJ,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,EACV,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,iBAAoB,EACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,GACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,GACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,GACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,kBACT,MAAS,IACT,GAAM,kBACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,KAAM,CACJ,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,OAAU,EACV,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,IACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,IACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,GACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,MAIpB,WAAc,kBACd,WAAc,IACd,YAAe,4BC/1BJC,EAAwB,CACnC9pC,KAAM,cACN4pC,OAAO,EACP7N,QAAQ,GACR,OAAU,CACR,IAAK,CACH,MAAS,EACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,EACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,EAAK,CACH,MAAS,iBACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,kBACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,iBACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB8N,IAAM,CACJ,MAAS,IACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,kBACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,IACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,kBACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,iBACT,MAAS,mBACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,KAAM,CACJ,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,IACV,MAAS,EACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,OAAU,GACV,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,KACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,OAGpB,WAAc,cACd,WAAc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","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/webpack/runtime/load script","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/boundingboxcomputation.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/font.ts","webpack://Vex/./src/fonts/loadDynamic.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/glyph.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/fonts/petalumascript_textmetrics.ts","webpack://Vex/./src/fonts/robotoslab_textmetrics.ts","webpack://Vex/./src/textfont.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/rendercontext.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/timesigglyph.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/util.ts","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/ensure chunk","webpack://Vex/webpack/runtime/get javascript chunk filename","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/webpack/runtime/make namespace object","webpack://Vex/webpack/runtime/publicPath","webpack://Vex/webpack/runtime/jsonp chunk loading","webpack://Vex/","webpack://Vex/./src/vex.ts","webpack://Vex/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})(typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this, function() {\nreturn ","var inProgress = {};\nvar dataWebpackPrefix = \"Vex:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n//\n// Author: Joshua Koo / @zz85\n// Author: @incompleteopus\n\nimport { RuntimeError } from './util';\n\n/** Fraction represents a rational number. */\nexport class Fraction {\n  static get CATEGORY(): string {\n    return 'Fraction';\n  }\n\n  // Cached objects for comparisons.\n  private static __staticFractionA = new Fraction();\n  private static __staticFractionB = new Fraction();\n  private static __staticFractionTmp = new Fraction();\n\n  /** GCD: Greatest common divisor using Euclidean algorithm. */\n  static GCD(a: number, b: number): number {\n    if (typeof a !== 'number' || Number.isNaN(a) || a === 0 || typeof b !== 'number' || Number.isNaN(b) || b === 0) {\n      throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n    }\n\n    let t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  }\n\n  /** LCM: Lowest common multiple. */\n  static LCM(a: number, b: number): number {\n    return (a * b) / Fraction.GCD(a, b);\n  }\n\n  /** Lowest common multiple for more than two numbers. */\n  static LCMM(args: number[]): number {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length === 1) {\n      return args[0];\n    } else if (args.length === 2) {\n      return Fraction.LCM(args[0], args[1]);\n    } else {\n      // args.shift() removes the first number.\n      // LCM the first number with the rest of the numbers.\n      return Fraction.LCM(args.shift() as number, Fraction.LCMM(args));\n    }\n  }\n\n  numerator: number = 1;\n  denominator: number = 1;\n\n  /** Set the numerator and denominator. */\n  constructor(numerator?: number, denominator?: number) {\n    this.set(numerator, denominator);\n  }\n\n  /** Set the numerator and denominator. */\n  set(numerator: number = 1, denominator: number = 1): this {\n    this.numerator = numerator;\n    this.denominator = denominator;\n    return this;\n  }\n\n  /** Return the value of the fraction. */\n  value(): number {\n    return this.numerator / this.denominator;\n  }\n\n  /** Simplify numerator and denominator using GCD. */\n  simplify(): this {\n    let u = this.numerator;\n    let d = this.denominator;\n\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n    return this.set(u, d);\n  }\n\n  /** Add value of another fraction. */\n  add(param1: Fraction | number = 0, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Substract value of another fraction. */\n  subtract(param1: Fraction | number = 0, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Multiply by value of another fraction. */\n  multiply(param1: Fraction | number = 1, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n\n  /** Divide by value of another Fraction. */\n  divide(param1: Fraction | number = 1, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  }\n\n  /** Simplify both sides and check if they are equal. */\n  equals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionA.copy(compare).simplify();\n    const b = Fraction.__staticFractionB.copy(this).simplify();\n\n    return a.numerator === b.numerator && a.denominator === b.denominator;\n  }\n\n  /** Greater than operator. */\n  greaterThan(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator > 0;\n  }\n\n  /** Greater than or equals operator. */\n  greaterThanEquals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator >= 0;\n  }\n\n  /** Less than operator. */\n  lessThan(compare: Fraction | number): boolean {\n    return !this.greaterThanEquals(compare);\n  }\n\n  /** Less than or equals operator. */\n  lessThanEquals(compare: Fraction | number): boolean {\n    return !this.greaterThan(compare);\n  }\n\n  /** Return a new copy with current values. */\n  clone(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  /** Copy value of another fraction. */\n  copy(other: Fraction | number): this {\n    if (typeof other === 'number') {\n      return this.set(other, 1);\n    } else {\n      return this.set(other.numerator, other.denominator);\n    }\n  }\n\n  /** Return the integer component (eg. 5/2 => 2). */\n  quotient(): number {\n    return Math.floor(this.numerator / this.denominator);\n  }\n\n  /** Return the remainder component (eg. 5/2 => 1). */\n  remainder(): number {\n    return this.numerator % this.denominator;\n  }\n\n  /** Calculate absolute value. */\n  makeAbs(): this {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  }\n\n  /** Return a raw string representation (eg. \"5/2\"). */\n  toString(): string {\n    return `${this.numerator}/${this.denominator}`;\n  }\n\n  /** Return a simplified string respresentation. */\n  toSimplifiedString(): string {\n    return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n  }\n\n  /** Return string representation in mixed form. */\n  toMixedString(): string {\n    let s = '';\n    const q = this.quotient();\n    const f = Fraction.__staticFractionTmp.copy(this);\n\n    if (q < 0) {\n      f.makeAbs();\n    }\n\n    if (q !== 0) {\n      s += q;\n\n      if (f.numerator !== 0) {\n        s += ` ${f.toSimplifiedString()}`;\n      }\n    } else if (f.numerator === 0) {\n      s = '0';\n    } else {\n      s = f.toSimplifiedString();\n    }\n\n    return s;\n  }\n\n  /** Parse a fraction string. */\n  parse(str: string): this {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = i[1] ? parseInt(i[1], 10) : 1;\n\n    return this.set(n, d);\n  }\n}\n\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n: Fraction | number, d: number = 1): [number, number] {\n  if (typeof n === 'number') {\n    // Both params are numbers, so we return them as [numerator, denominator].\n    return [n, d];\n  } else {\n    // First param is a Fraction object. We ignore the second param.\n    return [n.numerator, n.denominator];\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\n/** Bounding boxes for interactive notation */\n\nexport class BoundingBox {\n  protected x: number;\n  protected y: number;\n  protected w: number;\n  protected h: number;\n\n  /**\n   * Create a new copy.\n   */\n  static copy(that: BoundingBox): BoundingBox {\n    return new BoundingBox(that.x, that.y, that.w, that.h);\n  }\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  /** Get x position. */\n  getX(): number {\n    return this.x;\n  }\n\n  /** Get y position. */\n  getY(): number {\n    return this.y;\n  }\n\n  /** Get width. */\n  getW(): number {\n    return this.w;\n  }\n\n  /** Get height. */\n  getH(): number {\n    return this.h;\n  }\n\n  /** Set x position. */\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  /** Set y position. */\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  /** Set width. */\n  setW(w: number): this {\n    this.w = w;\n    return this;\n  }\n\n  /** Set height. */\n  setH(h: number): this {\n    this.h = h;\n    return this;\n  }\n\n  /** Move to position. */\n  move(x: number, y: number): this {\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  /** Clone. */\n  clone(): BoundingBox {\n    return BoundingBox.copy(this);\n  }\n\n  /**\n   * Merge my box with given box. Creates a bigger bounding box unless\n   * the given box is contained in this one.\n   */\n  mergeWith(boundingBox: BoundingBox): this {\n    const that = boundingBox;\n\n    const new_x = this.x < that.x ? this.x : that.x;\n    const new_y = this.y < that.y ? this.y : that.y;\n    const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n    const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n\n    this.x = new_x;\n    this.y = new_y;\n    this.w = new_w;\n    this.h = new_h;\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\n/**\n * BoundingBoxComputation computes metrics for a bounding box by continuously\n * taking canvas path commands.\n *\n * Warning: This class is merely a crutch to get bounding box information without\n * explicit metadata. This is likely to get deprecated following SMuFL support.\n *\n * based on: https://github.com/canvg/canvg/blob/master/src/BoundingBox.ts (MIT License)\n */\nexport class BoundingBoxComputation {\n  protected x1: number = Number.NaN;\n  protected y1: number = Number.NaN;\n  protected x2: number = Number.NaN;\n  protected y2: number = Number.NaN;\n\n  /** Get calculated X1. */\n  getX1(): number {\n    return this.x1;\n  }\n\n  /** Get calculated Y1. */\n  getY1(): number {\n    return this.y1;\n  }\n\n  /** Get calculated width. */\n  width(): number {\n    return this.x2 - this.x1;\n  }\n\n  /** Get calculated height. */\n  height(): number {\n    return this.y2 - this.y1;\n  }\n\n  /** Add point to BoundingBox. */\n  addPoint(x: number, y: number): void {\n    if (isNaN(this.x1) || x < this.x1) this.x1 = x;\n    if (isNaN(this.x2) || x > this.x2) this.x2 = x;\n    if (isNaN(this.y1) || y < this.y1) this.y1 = y;\n    if (isNaN(this.y2) || y > this.y2) this.y2 = y;\n  }\n\n  /** Add X to BoundingBox. */\n  addX(x: number): void {\n    this.addPoint(x, this.y1);\n  }\n\n  /** Add Y to BoundingBox. */\n  addY(y: number): void {\n    this.addPoint(this.x1, y);\n  }\n\n  /** Add quadratic curve to BoundingBox. */\n  addQuadraticCurve(p0x: number, p0y: number, p1x: number, p1y: number, p2x: number, p2y: number): void {\n    this.addPoint(p0x, p0y);\n    this.addPoint(p2x, p2y);\n\n    const p01x = p1x - p0x;\n    const p12x = p2x - p1x;\n    let denom = p01x - p12x;\n    if (denom != 0) {\n      const t = p01x / denom;\n      if (t > 0 && t < 1) {\n        const it = 1 - t;\n        this.addX(it * it * p0x + 2 * it * t * p1x + t * t * p2x);\n      }\n    }\n\n    const p01y = p1y - p0y;\n    const p12y = p2y - p1y;\n    denom = p01y - p12y;\n    if (denom != 0) {\n      const t = p01y / denom;\n      if (t > 0 && t < 1) {\n        const it = 1 - t;\n        this.addY(it * it * p0y + 2 * it * t * p1y + t * t * p2y);\n      }\n    }\n  }\n\n  /** Add bezier curve to BoundingBox. */\n  addBezierCurve(\n    p0x: number,\n    p0y: number,\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number\n  ): void {\n    // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    const p0 = [p0x, p0y];\n    const p1 = [p1x, p1y];\n    const p2 = [p2x, p2y];\n    const p3 = [p3x, p3y];\n    let i;\n\n    this.addPoint(p0[0], p0[1]);\n    this.addPoint(p3[0], p3[1]);\n\n    const f = (t: number, i: number) =>\n      Math.pow(1 - t, 3) * p0[i] +\n      3 * Math.pow(1 - t, 2) * t * p1[i] +\n      3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n      Math.pow(t, 3) * p3[i];\n\n    for (i = 0; i <= 1; i++) {\n      const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n      const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n      const c = 3 * p1[i] - 3 * p0[i];\n\n      if (a === 0) {\n        if (b === 0) continue;\n        const t = -c / b;\n        if (0 < t && t < 1) {\n          if (i === 0) this.addX(f(t, i));\n          if (i === 1) this.addY(f(t, i));\n        }\n        continue;\n      }\n\n      const b2ac = Math.pow(b, 2) - 4 * c * a;\n      if (b2ac < 0) continue;\n      const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        if (i === 0) this.addX(f(t1, i));\n        if (i === 1) this.addY(f(t1, i));\n      }\n      const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        if (i === 0) this.addX(f(t2, i));\n        if (i === 1) this.addY(f(t2, i));\n      }\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\n\nimport { Element } from './element';\nimport { RuntimeError } from './util';\n\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n  // [attribute_name][attribute_value][element_id] => Element\n  [key: string]: { [key: string]: { [key: string]: Element } };\n  constructor() {\n    this.id = {};\n    this.type = {};\n    this.class = {};\n  }\n}\n\ninterface RegistryUpdate {\n  id: string;\n  name: string;\n  value: string | undefined;\n  oldValue: string | undefined;\n}\n\nexport class Registry {\n  private static defaultRegistry?: Registry;\n\n  static getDefaultRegistry(): Registry | undefined {\n    return Registry.defaultRegistry;\n  }\n\n  // If you call `enableDefaultRegistry`, any new elements will auto-register with\n  // the provided registry as soon as they're constructed.\n  static enableDefaultRegistry(registry: Registry): void {\n    Registry.defaultRegistry = registry;\n  }\n\n  static disableDefaultRegistry(): void {\n    Registry.defaultRegistry = undefined;\n  }\n\n  protected index: Index;\n\n  constructor() {\n    this.index = new Index();\n  }\n\n  clear(): this {\n    this.index = new Index();\n    return this;\n  }\n\n  setIndexValue(name: string, value: string, id: string, elem: Element): void {\n    const index = this.index;\n    if (!index[name][value]) {\n      index[name][value] = {};\n    }\n    index[name][value][id] = elem;\n  }\n\n  // Updates the indexes for element 'id'. If an element's attribute changes\n  // from A -> B, make sure to remove the element from A.\n  updateIndex({ id, name, value, oldValue }: RegistryUpdate): void {\n    const elem = this.getElementById(id);\n    if (oldValue !== undefined && this.index[name][oldValue]) {\n      delete this.index[name][oldValue][id];\n    }\n    if (value && elem) {\n      this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n    }\n  }\n\n  /**\n   * Register element `elem` with this registry.\n   * This adds the element to its index and watches it for attribute changes.\n   * @param elem\n   * @param id\n   * @returns this\n   */\n  register(elem: Element, id?: string): this {\n    id = id || elem.getAttribute('id');\n    if (!id) {\n      throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n    }\n\n    // Manually add id to index, then update other indexes.\n    elem.setAttribute('id', id);\n    this.setIndexValue('id', id, id, elem);\n    this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n    elem.onRegister(this);\n    return this;\n  }\n\n  getElementById(id: string): Element | undefined {\n    return this.index.id?.[id]?.[id]; // return undefined if the id is not found.\n  }\n\n  getElementsByAttribute(attribute: string, value: string): Element[] {\n    const index_attr = this.index[attribute];\n    if (index_attr) {\n      const index_attr_val = index_attr[value];\n      if (index_attr_val) {\n        const keys = Object.keys(index_attr_val);\n        return keys.map((k) => index_attr_val[k]);\n      }\n    }\n    return [];\n  }\n\n  getElementsByType(type: string): Element[] {\n    return this.getElementsByAttribute('type', type);\n  }\n\n  getElementsByClass(className: string): Element[] {\n    return this.getElementsByAttribute('class', className);\n  }\n\n  // This is called by the element when an attribute value changes. If an indexed\n  // attribute changes, then update the local index.\n  onUpdate(info: RegistryUpdate): this {\n    const allowedNames = ['id', 'type', 'class'];\n    if (allowedNames.includes(info.name)) {\n      this.updateIndex(info);\n    }\n    return this;\n  }\n}\n","import { loadBravura } from '@bravura';\nimport { loadCustom } from '@custom';\nimport { loadGonville } from '@gonville';\nimport { loadLeland } from '@leland';\nimport { loadPetaluma } from '@petaluma';\n\nimport { defined } from './util';\n\nexport interface FontData {\n  glyphs: Record<string, FontGlyph>;\n  fontFamily?: string;\n  resolution: number;\n  generatedOn?: string;\n}\n\nexport interface FontDataMetrics {\n  fontData?: FontData;\n  // eslint-disable-next-line\n  metrics?: Record<string, any>;\n}\n\nexport interface FontGlyph {\n  x_min: number;\n  x_max: number;\n  y_min?: number;\n  y_max?: number;\n  ha: number;\n  o: string;\n  leftSideBearing?: number;\n  advanceWidth?: number;\n  cached_outline?: number[];\n}\n\nclass Font {\n  protected name: string;\n  protected fontDataMetrics: FontDataMetrics;\n\n  // eslint-disable-next-line\n  constructor(name: string, metrics?: Record<string, any>, fontData?: FontData) {\n    this.name = name;\n    this.fontDataMetrics = { fontData: undefined, metrics: undefined };\n    switch (name) {\n      case 'Bravura':\n        loadBravura(this.fontDataMetrics);\n        break;\n      case 'Custom':\n        loadCustom(this.fontDataMetrics);\n        break;\n      case 'Gonville':\n        loadGonville(this.fontDataMetrics);\n        break;\n      case 'Petaluma':\n        loadPetaluma(this.fontDataMetrics);\n        break;\n      case 'Leland':\n        loadLeland(this.fontDataMetrics);\n        break;\n      default:\n        this.fontDataMetrics.metrics = metrics;\n        this.fontDataMetrics.fontData = fontData;\n    }\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getResolution(): number {\n    return this.getFontData().resolution;\n  }\n\n  // eslint-disable-next-line\n  getMetrics(): Record<string, any> {\n    return defined(this.fontDataMetrics.metrics, 'FontError', 'Missing metrics');\n  }\n\n  /**\n   * Use the provided key to look up a value in this font's metrics file (e.g., bravura_metrics.ts, petaluma_metrics.ts).\n   * @param key is a string separated by periods (e.g., stave.endPaddingMax, clef.lineCount.'5'.shiftY).\n   * @param defaultValue is returned if the lookup fails.\n   * @returns the retrieved value (or `defaultValue` if the lookup fails).\n   */\n  // eslint-disable-next-line\n  lookupMetric(key: string, defaultValue?: Record<string, any> | number): any {\n    // console.log('lookupMetric:', key);\n\n    const keyParts = key.split('.');\n\n    // Start with the top level font metrics object, and keep looking deeper into the object (via each part of the period-delimited key).\n    let currObj = this.getMetrics();\n    for (let i = 0; i < keyParts.length; i++) {\n      const keyPart = keyParts[i];\n      const value = currObj[keyPart];\n      if (value === undefined) {\n        // If the key lookup fails, we fall back to the defaultValue.\n        return defaultValue;\n      }\n      // The most recent lookup succeeded, so we drill deeper into the object.\n      currObj = value;\n    }\n\n    // After checking every part of the key (i.e., the loop completed), return the most recently retrieved value.\n    // console.log('found:', key, currObj);\n    return currObj;\n  }\n\n  getFontData(): FontData {\n    return defined(this.fontDataMetrics.fontData, 'FontError', 'Missing font data');\n  }\n\n  getGlyphs(): Record<string, FontGlyph> {\n    return this.getFontData().glyphs;\n  }\n}\n\nconst Fonts = {\n  Bravura: (): Font => new Font('Bravura'),\n  Gonville: (): Font => new Font('Gonville'),\n  Petaluma: (): Font => new Font('Petaluma'),\n  Leland: (): Font => new Font('Leland'),\n  Custom: (): Font => new Font('Custom'),\n};\n\nexport { Font, Fonts };\n","import { FontDataMetrics } from '../font';\nexport async function loadBravura(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"bravura\" */ '../fonts/bravura');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadCustom(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"custom\" */ '../fonts/custom');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadGonville(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"gonville\" */ '../fonts/gonville');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadPetaluma(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"petaluma\" */ '../fonts/petaluma');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\nexport async function loadLeland(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"leland\" */ '../fonts/leland');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\n\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/* eslint-disable key-spacing */\n\nimport { ArticulationStruct } from './articulation';\nimport { Fonts } from './font';\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { RuntimeError } from './util';\n\n// Custom note heads\nconst customNoteHeads: Record<string, { code: string }> = {\n  /* Diamond */\n  D0: { code: 'noteheadDiamondWhole' },\n  D1: { code: 'noteheadDiamondHalf' },\n  D2: { code: 'noteheadDiamondBlack' },\n  D3: { code: 'noteheadDiamondBlack' },\n\n  /* Triangle */\n  T0: { code: 'noteheadTriangleUpWhole' },\n  T1: { code: 'noteheadTriangleUpHalf' },\n  T2: { code: 'noteheadTriangleUpBlack' },\n  T3: { code: 'noteheadTriangleUpBlack' },\n\n  /* Cross */\n  X0: { code: 'noteheadXWhole' },\n  X1: { code: 'noteheadXHalf' },\n  X2: { code: 'noteheadXBlack' },\n  X3: { code: 'noteheadCircleX' },\n\n  /* Square */\n  S1: { code: 'noteheadSquareWhite' },\n  S2: { code: 'noteheadSquareBlack' },\n\n  /* Rectangle */\n  R1: { code: 'vexNoteHeadRectWhite' }, // no smufl code\n  R2: { code: 'vexNoteHeadRectBlack' }, // no smufl code\n};\n\nconst RESOLUTION = 16384;\n\nconst durations: Record<string, number> = {\n  '1/2': RESOLUTION * 2,\n  1: RESOLUTION / 1,\n  2: RESOLUTION / 2,\n  4: RESOLUTION / 4,\n  8: RESOLUTION / 8,\n  16: RESOLUTION / 16,\n  32: RESOLUTION / 32,\n  64: RESOLUTION / 64,\n  128: RESOLUTION / 128,\n  256: RESOLUTION / 256,\n};\n\nconst accidentals: Record<string, { code: string; parenRightPaddingAdjustment: number }> = {\n  '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\n  '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\n  bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\n  n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\n  '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\n  '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\n  db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\n  d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\n  '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\n  '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\n  '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\n  bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\n  bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\n  o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\n  k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\n  bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\n  '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\n  ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\n  afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },\n  accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },\n  accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlatAndFlat: {\n    code: 'accidentalNarrowReversedFlatAndFlat',\n    parenRightPaddingAdjustment: -1,\n  },\n  accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },\n  accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },\n};\n\n// eslint-disable-next-line\nlet duration_codes: Record<string, any>;\n\nexport const Tables = {\n  STEM_WIDTH: 1.5,\n  STEM_HEIGHT: 35,\n  STAVE_LINE_THICKNESS: 1,\n  RESOLUTION: RESOLUTION,\n\n  /**\n   * Customize this to choose a different music font.\n   * For example: Vex.Flow.DEFAULT_FONT_STACK = [Fonts.Petaluma(), Fonts.Custom()];\n   */\n  DEFAULT_FONT_STACK: [Fonts.Bravura(), Fonts.Gonville(), Fonts.Custom()],\n  DEFAULT_NOTATION_FONT_SCALE: 39,\n  DEFAULT_TABLATURE_FONT_SCALE: 39,\n  SLASH_NOTEHEAD_WIDTH: 15,\n  STAVE_LINE_DISTANCE: 10,\n\n  // HACK:\n  // Since text origins are positioned at the baseline, we must\n  // compensate for the ascender of the text. Of course, 1 staff space is\n  // a very poor approximation.\n  //\n  // This will be deprecated in the future. This is a temporary solution until\n  // we have more robust text metrics.\n  TEXT_HEIGHT_OFFSET_HACK: 1,\n\n  /* Kerning (DEPRECATED) */\n  IsKerned: true,\n\n  clefProperties: (clef: string): { line_shift: number } => {\n    const values: Record<string, { line_shift: number }> = {\n      treble: { line_shift: 0 },\n      bass: { line_shift: 6 },\n      tenor: { line_shift: 4 },\n      alto: { line_shift: 3 },\n      soprano: { line_shift: 1 },\n      percussion: { line_shift: 0 },\n      'mezzo-soprano': { line_shift: 2 },\n      'baritone-c': { line_shift: 5 },\n      'baritone-f': { line_shift: 5 },\n      subbass: { line_shift: 7 },\n      french: { line_shift: -1 },\n    };\n    if (!clef) throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n\n    const props = values[clef];\n    if (!props) throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n\n    return props;\n  },\n\n  /*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n  */\n  // eslint-disable-next-line\n  keyProperties(key: string, clef?: string, params?: any): any {\n    const noteValues: Record<\n      string,\n      {\n        index: number;\n        int_val?: number;\n        accidental?: string;\n        rest?: boolean;\n        octave?: number;\n        code?: string;\n        shift_right?: number;\n      }\n    > = {\n      C: { index: 0, int_val: 0 },\n      CN: { index: 0, int_val: 0, accidental: 'n' },\n      'C#': { index: 0, int_val: 1, accidental: '#' },\n      'C##': { index: 0, int_val: 2, accidental: '##' },\n      CB: { index: 0, int_val: 11, accidental: 'b' },\n      CBB: { index: 0, int_val: 10, accidental: 'bb' },\n      D: { index: 1, int_val: 2 },\n      DN: { index: 1, int_val: 2, accidental: 'n' },\n      'D#': { index: 1, int_val: 3, accidental: '#' },\n      'D##': { index: 1, int_val: 4, accidental: '##' },\n      DB: { index: 1, int_val: 1, accidental: 'b' },\n      DBB: { index: 1, int_val: 0, accidental: 'bb' },\n      E: { index: 2, int_val: 4 },\n      EN: { index: 2, int_val: 4, accidental: 'n' },\n      'E#': { index: 2, int_val: 5, accidental: '#' },\n      'E##': { index: 2, int_val: 6, accidental: '##' },\n      EB: { index: 2, int_val: 3, accidental: 'b' },\n      EBB: { index: 2, int_val: 2, accidental: 'bb' },\n      F: { index: 3, int_val: 5 },\n      FN: { index: 3, int_val: 5, accidental: 'n' },\n      'F#': { index: 3, int_val: 6, accidental: '#' },\n      'F##': { index: 3, int_val: 7, accidental: '##' },\n      FB: { index: 3, int_val: 4, accidental: 'b' },\n      FBB: { index: 3, int_val: 3, accidental: 'bb' },\n      G: { index: 4, int_val: 7 },\n      GN: { index: 4, int_val: 7, accidental: 'n' },\n      'G#': { index: 4, int_val: 8, accidental: '#' },\n      'G##': { index: 4, int_val: 9, accidental: '##' },\n      GB: { index: 4, int_val: 6, accidental: 'b' },\n      GBB: { index: 4, int_val: 5, accidental: 'bb' },\n      A: { index: 5, int_val: 9 },\n      AN: { index: 5, int_val: 9, accidental: 'n' },\n      'A#': { index: 5, int_val: 10, accidental: '#' },\n      'A##': { index: 5, int_val: 11, accidental: '##' },\n      AB: { index: 5, int_val: 8, accidental: 'b' },\n      ABB: { index: 5, int_val: 7, accidental: 'bb' },\n      B: { index: 6, int_val: 11 },\n      BN: { index: 6, int_val: 11, accidental: 'n' },\n      'B#': { index: 6, int_val: 12, accidental: '#' },\n      'B##': { index: 6, int_val: 13, accidental: '##' },\n      BB: { index: 6, int_val: 10, accidental: 'b' },\n      BBB: { index: 6, int_val: 9, accidental: 'bb' },\n      R: { index: 6, rest: true }, // Rest\n      X: {\n        index: 6,\n        accidental: '',\n        octave: 4,\n        code: 'noteheadXBlack',\n        shift_right: 5.5,\n      },\n    };\n\n    if (clef === undefined) {\n      clef = 'treble';\n    }\n\n    let options = { octave_shift: 0 };\n\n    if (typeof params === 'object') {\n      options = { ...options, ...params };\n    }\n\n    const pieces = key.split('/');\n\n    if (pieces.length < 2) {\n      throw new RuntimeError('BadArguments', `Key must have note + octave and an optional glyph: ${key}`);\n    }\n\n    const k = pieces[0].toUpperCase();\n    const value = noteValues[k];\n    if (!value) throw new RuntimeError('BadArguments', 'Invalid key name: ' + k);\n    if (value.octave) pieces[1] = value.octave.toString();\n\n    let octave = parseInt(pieces[1], 10);\n\n    // Octave_shift is the shift to compensate for clef 8va/8vb.\n    octave += -1 * options.octave_shift;\n\n    const base_index = octave * 7 - 4 * 7;\n    let line = (base_index + value.index) / 2;\n    line += Tables.clefProperties(clef).line_shift;\n\n    let stroke = 0;\n\n    if (line <= 0 && (line * 2) % 2 === 0) stroke = 1; // stroke up\n    if (line >= 6 && (line * 2) % 2 === 0) stroke = -1; // stroke down\n\n    // Integer value for note arithmetic.\n    const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : undefined;\n\n    /* Check if the user specified a glyph. */\n    const code = value.code;\n    const shift_right = value.shift_right;\n    let extraProps = {};\n    if (pieces.length > 2 && pieces[2]) {\n      const glyph_name = pieces[2].toUpperCase();\n      extraProps = customNoteHeads[glyph_name] || {};\n    }\n\n    return {\n      key: k,\n      octave,\n      line,\n      int_value,\n      accidental: value.accidental,\n      code,\n      stroke,\n      shift_right,\n      displaced: false,\n      ...extraProps,\n    };\n  },\n\n  integerToNote(integer?: number): string {\n    const table: Record<number, string> = {\n      0: 'C',\n      1: 'C#',\n      2: 'D',\n      3: 'D#',\n      4: 'E',\n      5: 'F',\n      6: 'F#',\n      7: 'G',\n      8: 'G#',\n      9: 'A',\n      10: 'A#',\n      11: 'B',\n    };\n\n    if (typeof integer === 'undefined') {\n      throw new RuntimeError('BadArguments', 'Undefined integer for integerToNote');\n    }\n\n    if (integer < -2) {\n      throw new RuntimeError('BadArguments', `integerToNote requires integer > -2: ${integer}`);\n    }\n\n    const noteValue = table[integer];\n    if (!noteValue) {\n      throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n    }\n\n    return noteValue;\n  },\n\n  tabToGlyph(fret: string, scale = 1.0): { text: string; code?: string; getWidth: () => number; shift_y: number } {\n    let glyph = undefined;\n    let width = 0;\n    let shift_y = 0;\n\n    if (fret.toUpperCase() === 'X') {\n      const glyphMetrics = new Glyph('accidentalDoubleSharp', Tables.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();\n      glyph = 'accidentalDoubleSharp';\n      if (glyphMetrics.width == undefined || glyphMetrics.height == undefined)\n        throw new RuntimeError('InvalidMetrics', 'Width and height required');\n      width = glyphMetrics.width;\n      shift_y = -glyphMetrics.height / 2;\n    } else {\n      width = Tables.textWidth(fret);\n    }\n\n    return {\n      text: fret,\n      code: glyph,\n      getWidth: () => width * scale,\n      shift_y,\n    };\n  },\n\n  textWidth(text: string): number {\n    return 7 * text.toString().length;\n  },\n\n  articulationCodes(artic: string): ArticulationStruct {\n    const articulations: Record<string, ArticulationStruct> = {\n      'a.': { code: 'augmentationDot', between_lines: true }, // Staccato\n      av: {\n        aboveCode: 'articStaccatissimoAbove',\n        belowCode: 'articStaccatissimoBelow',\n        between_lines: true,\n      }, // Staccatissimo\n      'a>': {\n        aboveCode: 'articAccentAbove',\n        belowCode: 'articAccentBelow',\n        between_lines: true,\n      }, // Accent\n      'a-': {\n        aboveCode: 'articTenutoAbove',\n        belowCode: 'articTenutoBelow',\n        between_lines: true,\n      }, // Tenuto\n      'a^': {\n        aboveCode: 'articMarcatoAbove',\n        belowCode: 'articMarcatoBelow',\n        between_lines: false,\n      }, // Marcato\n      'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false }, // Left hand pizzicato\n      ao: {\n        aboveCode: 'pluckedSnapPizzicatoAbove',\n        belowCode: 'pluckedSnapPizzicatoBelow',\n        between_lines: false,\n      }, // Snap pizzicato\n      ah: { code: 'stringsHarmonic', between_lines: false }, // Natural harmonic or open note\n      'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false }, // Fermata\n      'a@a': { code: 'fermataAbove', between_lines: false }, // Fermata above staff\n      'a@u': { code: 'fermataBelow', between_lines: false }, // Fermata below staff\n      'a|': { code: 'stringsUpBow', between_lines: false }, // Bow up - up stroke\n      am: { code: 'stringsDownBow', between_lines: false }, // Bow down - down stroke\n      'a,': { code: 'pictChokeCymbal', between_lines: false }, // Choked\n    };\n    return articulations[artic];\n  },\n\n  accidentalMap: accidentals,\n\n  accidentalCodes(acc: string): { code: string; parenRightPaddingAdjustment: number } {\n    return accidentals[acc];\n  },\n\n  accidentalColumnsTable: {\n    1: {\n      a: [1],\n      b: [1],\n    },\n    2: {\n      a: [1, 2],\n    },\n    3: {\n      a: [1, 3, 2],\n      b: [1, 2, 1],\n      second_on_bottom: [1, 2, 3],\n    },\n    4: {\n      a: [1, 3, 4, 2],\n      b: [1, 2, 3, 1],\n      spaced_out_tetrachord: [1, 2, 1, 2],\n    },\n    5: {\n      a: [1, 3, 5, 4, 2],\n      b: [1, 2, 4, 3, 1],\n      spaced_out_pentachord: [1, 2, 3, 2, 1],\n      very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n      a: [1, 3, 5, 6, 4, 2],\n      b: [1, 2, 4, 5, 3, 1],\n      spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n      very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n    },\n  } as Record<number, { [name: string]: number[] }>,\n\n  ornamentCodes(acc: string): { code: string } {\n    const ornaments: Record<string, { code: string }> = {\n      mordent: { code: 'ornamentShortTrill' },\n      mordent_inverted: { code: 'ornamentMordent' },\n      turn: { code: 'ornamentTurn' },\n      turn_inverted: { code: 'ornamentTurnSlash' },\n      tr: { code: 'ornamentTrill' },\n      upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },\n      downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\n      prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },\n      pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },\n      upmordent: { code: 'ornamentPrecompSlideTrillBach' },\n      downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\n      lineprall: { code: 'ornamentPrecompAppoggTrill' },\n      prallprall: { code: 'ornamentTremblement' },\n      scoop: { code: 'brassScoop' },\n      doit: { code: 'brassDoitMedium' },\n      fall: { code: 'brassFallLipShort' },\n      doitLong: { code: 'brassLiftMedium' },\n      fallLong: { code: 'brassFallRoughMedium' },\n      bend: { code: 'brassBend' },\n      plungerClosed: { code: 'brassMuteClosed' },\n      plungerOpen: { code: 'brassMuteOpen' },\n      flip: { code: 'brassFlip' },\n      jazzTurn: { code: 'brassJazzTurn' },\n      smear: { code: 'brassSmear' },\n    };\n    return ornaments[acc];\n  },\n\n  keySignature(spec: string): { type: string; line: number }[] {\n    const keySpecs: Record<string, { acc?: string; num: number }> = {\n      C: { num: 0 },\n      Am: { num: 0 },\n      F: { acc: 'b', num: 1 },\n      Dm: { acc: 'b', num: 1 },\n      Bb: { acc: 'b', num: 2 },\n      Gm: { acc: 'b', num: 2 },\n      Eb: { acc: 'b', num: 3 },\n      Cm: { acc: 'b', num: 3 },\n      Ab: { acc: 'b', num: 4 },\n      Fm: { acc: 'b', num: 4 },\n      Db: { acc: 'b', num: 5 },\n      Bbm: { acc: 'b', num: 5 },\n      Gb: { acc: 'b', num: 6 },\n      Ebm: { acc: 'b', num: 6 },\n      Cb: { acc: 'b', num: 7 },\n      Abm: { acc: 'b', num: 7 },\n      G: { acc: '#', num: 1 },\n      Em: { acc: '#', num: 1 },\n      D: { acc: '#', num: 2 },\n      Bm: { acc: '#', num: 2 },\n      A: { acc: '#', num: 3 },\n      'F#m': { acc: '#', num: 3 },\n      E: { acc: '#', num: 4 },\n      'C#m': { acc: '#', num: 4 },\n      B: { acc: '#', num: 5 },\n      'G#m': { acc: '#', num: 5 },\n      'F#': { acc: '#', num: 6 },\n      'D#m': { acc: '#', num: 6 },\n      'C#': { acc: '#', num: 7 },\n      'A#m': { acc: '#', num: 7 },\n    };\n    const keySpec = keySpecs[spec];\n\n    if (!keySpec) {\n      throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n    }\n\n    if (!keySpec.acc) {\n      return [];\n    }\n\n    const accidentalList: Record<string, number[]> = {\n      b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n      '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n    };\n\n    const notes = accidentalList[keySpec.acc];\n\n    const acc_list = [];\n    for (let i = 0; i < keySpec.num; ++i) {\n      const line = notes[i];\n      acc_list.push({ type: keySpec.acc, line });\n    }\n\n    return acc_list;\n  },\n\n  unicode: {\n    // ♯ accidental sharp\n    sharp: String.fromCharCode(0x266f),\n    // ♭ accidental flat\n    flat: String.fromCharCode(0x266d),\n    // ♮ accidental natural\n    natural: String.fromCharCode(0x266e),\n    // △ major seventh\n    triangle: String.fromCharCode(0x25b3),\n    // ø half-diminished\n    'o-with-slash': String.fromCharCode(0x00f8),\n    // ° diminished\n    degrees: String.fromCharCode(0x00b0),\n    // ○ diminished\n    circle: String.fromCharCode(0x25cb),\n  },\n\n  // Used to convert duration aliases to the number based duration.\n  // If the input isn't an alias, simply return the input.\n  //\n  // example: 'q' -> '4', '8' -> '8'\n  sanitizeDuration(duration: string): string {\n    const durationAliases: Record<string, string> = {\n      w: '1',\n      h: '2',\n      q: '4',\n\n      // This is the default duration used to render bars (BarNote). Bars no longer\n      // consume ticks, so this should be a no-op.\n      //\n      // TODO(0xfe): This needs to be cleaned up.\n      b: '256',\n    };\n    const alias = durationAliases[duration];\n    if (alias !== undefined) {\n      duration = alias;\n    }\n\n    if (durations[duration] === undefined) {\n      throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n    }\n\n    return duration;\n  },\n\n  // Convert the `duration` to an fraction\n  durationToFraction(duration: string): Fraction {\n    return new Fraction().parse(Tables.sanitizeDuration(duration));\n  },\n\n  // Convert the `duration` to an number\n  durationToNumber(duration: string): number {\n    return Tables.durationToFraction(duration).value();\n  },\n\n  // Convert the `duration` to total ticks\n  durationToTicks(duration: string): number {\n    duration = Tables.sanitizeDuration(duration);\n\n    const ticks = durations[duration];\n    if (ticks === undefined) {\n      throw new RuntimeError('InvalidDuration');\n    }\n\n    return ticks;\n  },\n\n  // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n  // eslint-disable-next-line\n  getGlyphProps(duration: string, type?: string): any {\n    duration_codes = duration_codes || {\n      '1/2': {\n        common: {\n          stem: false,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: -Tables.STEM_HEIGHT,\n          stem_down_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Breve note\n            code_head: 'noteheadDoubleWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDoubleWhole', scale);\n            },\n          },\n          h: {\n            // Breve note harmonic\n            code_head: 'unpitchedPercussionClef1',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'unpitchedPercussionClef1', scale);\n            },\n          },\n          m: {\n            // Breve note muted -\n            code_head: 'vexNoteHeadMutedBreve',\n            stem_offset: 0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'vexNoteHeadMutedBreve', scale);\n            },\n          },\n          r: {\n            // Breve rest\n            code_head: 'restDoubleWhole',\n            rest: true,\n            position: 'B/5',\n            dot_shiftY: 0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'restDoubleWhole', scale);\n            },\n          },\n          s: {\n            // Breve note slash -\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      1: {\n        common: {\n          stem: false,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: -Tables.STEM_HEIGHT,\n          stem_down_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Whole note\n            code_head: 'noteheadWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadWhole', scale);\n            },\n          },\n          h: {\n            // Whole note harmonic\n            code_head: 'noteheadDiamondWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondWhole', scale);\n            },\n          },\n          m: {\n            // Whole note muted\n            code_head: 'noteheadXWhole',\n            stem_offset: -3,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXWhole', scale);\n            },\n          },\n          r: {\n            // Whole rest\n            code_head: 'restWhole',\n            rest: true,\n            position: 'D/5',\n            dot_shiftY: 0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'restWhole', scale);\n            },\n          },\n          s: {\n            // Whole note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      2: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Half note\n            code_head: 'noteheadHalf',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadHalf', scale);\n            },\n          },\n          h: {\n            // Half note harmonic\n            code_head: 'noteheadDiamondHalf',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondHalf', scale);\n            },\n          },\n          m: {\n            // Half note muted\n            code_head: 'noteheadXHalf',\n            stem_offset: -3,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXHalf', scale);\n            },\n          },\n          r: {\n            // Half rest\n            code_head: 'restHalf',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'restHalf', scale);\n            },\n          },\n          s: {\n            // Half note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      4: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Quarter note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Quarter harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Quarter muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Quarter rest\n            code_head: 'restQuarter',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.5,\n            line_below: 1.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'restQuarter', scale);\n            },\n          },\n          s: {\n            // Quarter slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      8: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          beam_count: 1,\n          code_flag_upstem: 'flag8thUp',\n          code_flag_downstem: 'flag8thDown',\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Eighth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Eighth note harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Eighth note muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Eighth rest\n            code_head: 'rest8th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 1.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest8th', scale);\n            },\n          },\n          s: {\n            // Eight slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      16: {\n        common: {\n          beam_count: 2,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag16thUp',\n          code_flag_downstem: 'flag16thDown',\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Sixteenth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Sixteenth note harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Sixteenth note muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Sixteenth rest\n            code_head: 'rest16th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 2.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest16th', scale);\n            },\n          },\n          s: {\n            // Sixteenth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      32: {\n        common: {\n          beam_count: 3,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag32ndUp',\n          code_flag_downstem: 'flag32ndDown',\n          stem_up_extension: 9,\n          stem_down_extension: 9,\n          tabnote_stem_up_extension: 8,\n          tabnote_stem_down_extension: 5,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Thirty-second note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Thirty-second harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Thirty-second muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Thirty-second rest\n            code_head: 'rest32nd',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 2.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest32nd', scale);\n            },\n          },\n          s: {\n            // Thirty-second slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      64: {\n        common: {\n          beam_count: 4,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag64thUp',\n          code_flag_downstem: 'flag64thDown',\n          stem_up_extension: 13,\n          stem_down_extension: 13,\n          tabnote_stem_up_extension: 12,\n          tabnote_stem_down_extension: 9,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Sixty-fourth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Sixty-fourth harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Sixty-fourth muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Sixty-fourth rest\n            code_head: 'rest64th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 3.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest64th', scale);\n            },\n          },\n          s: {\n            // Sixty-fourth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      128: {\n        common: {\n          beam_count: 5,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag128thUp',\n          code_flag_downstem: 'flag128thDown',\n          stem_up_extension: 22,\n          stem_down_extension: 22,\n          tabnote_stem_up_extension: 21,\n          tabnote_stem_down_extension: 18,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Hundred-twenty-eight note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Hundred-twenty-eight harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Hundred-twenty-eight muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Hundred-twenty-eight rest\n            code_head: 'rest128th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -2.5,\n            line_above: 3.0,\n            line_below: 3.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest128th', scale);\n            },\n          },\n          s: {\n            // Hundred-twenty-eight rest\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n    };\n\n    duration = Tables.sanitizeDuration(duration);\n    type = type || 'n'; // default type is a regular note\n\n    // Lookup duration for default glyph head code\n    const code = duration_codes[duration];\n    if (code === undefined) {\n      return;\n    }\n\n    // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\n    let glyphTypeProperties = code.type[type];\n\n    // If this isn't a standard type, then lookup the custom note head map.\n    if (glyphTypeProperties === undefined) {\n      // Try and get it from the custom list of note heads\n      const customGlyphTypeProperties = customNoteHeads[type.toUpperCase()];\n\n      // If not, then return with nothing\n      if (customGlyphTypeProperties === undefined) {\n        return;\n      }\n\n      // Otherwise set it as the code_head value\n      glyphTypeProperties = {\n        code_head: customGlyphTypeProperties.code,\n        ...customGlyphTypeProperties,\n      };\n    }\n\n    // Merge duration props for 'duration' with the note head properties.\n    return { ...code.common, ...glyphTypeProperties };\n  },\n\n  validTypes: {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n  } as Record<string, Record<string, string>>,\n\n  // Default time signature.\n  TIME4_4: {\n    num_beats: 4,\n    beat_value: 4,\n    resolution: RESOLUTION,\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { defined } from './util';\n\n/** Element attributes. */\nexport interface ElementAttributes {\n  // eslint-disable-next-line\n  [name: string]: any;\n  id: string;\n  // eslint-disable-next-line\n  el?: any;\n  type: string;\n  classes: Record<string, boolean>;\n}\n\n/** Element style */\nexport interface ElementStyle {\n  shadowColor?: string;\n  shadowBlur?: number;\n  fillStyle?: string;\n  strokeStyle?: string;\n  lineWidth?: number;\n}\n\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n */\nexport abstract class Element {\n  static get CATEGORY(): string {\n    return 'Element';\n  }\n\n  protected static ID: number = 1000;\n  protected static newID(): string {\n    return `auto${Element.ID++}`;\n  }\n\n  private context?: RenderContext;\n  protected rendered: boolean;\n  protected style?: ElementStyle;\n  private attrs: ElementAttributes;\n  protected boundingBox?: BoundingBox;\n  protected registry?: Registry;\n\n  // fontStack and musicFont are both initialized by the constructor via this.setFontStack(...).\n  protected fontStack!: Font[];\n  protected musicFont!: Font;\n\n  constructor() {\n    this.attrs = {\n      id: Element.newID(),\n      el: undefined,\n      type: this.getCategory(),\n      classes: {},\n    };\n\n    this.rendered = false;\n    this.setFontStack(Tables.DEFAULT_FONT_STACK);\n\n    // If a default registry exist, then register with it right away.\n    Registry.getDefaultRegistry()?.register(this);\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return (<typeof Element>this.constructor).CATEGORY;\n  }\n\n  /** Set music fonts stack. */\n  setFontStack(fontStack: Font[]): this {\n    this.fontStack = fontStack;\n    this.musicFont = fontStack[0];\n    return this;\n  }\n\n  /** Get music fonts stack. */\n  getFontStack(): Font[] {\n    return this.fontStack;\n  }\n\n  /** Set the draw style of a stemmable note. */\n  setStyle(style: ElementStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  /** Get the draw style of a stemmable note. */\n  getStyle(): ElementStyle | undefined {\n    return this.style;\n  }\n\n  /** Apply current style to Canvas `context`. */\n  applyStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n\n    context.save();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    if (style.lineWidth) context.setLineWidth(style.lineWidth);\n    return this;\n  }\n\n  /** Restore style of `context`. */\n  restoreStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n    context.restore();\n    return this;\n  }\n\n  /** Draw with style of an element. */\n  drawWithStyle(): void {\n    this.checkContext();\n    this.applyStyle();\n    this.draw();\n    this.restoreStyle();\n  }\n\n  /** Draw an element. */\n  // eslint-disable-next-line\n  abstract draw(...args: any[]): void;\n\n  /** Check if it has a class label (An element can have multiple class labels).  */\n  hasClass(className: string): boolean {\n    return this.attrs.classes[className] === true;\n  }\n\n  /** Add a class label (An element can have multiple class labels).  */\n  addClass(className: string): this {\n    this.attrs.classes[className] = true;\n    this.registry?.onUpdate({\n      id: this.attrs.id,\n      name: 'class',\n      value: className,\n      oldValue: undefined,\n    });\n    return this;\n  }\n\n  /** Remove a class label (An element can have multiple class labels).  */\n  removeClass(className: string): this {\n    delete this.attrs.classes[className];\n    this.registry?.onUpdate({\n      id: this.attrs.id,\n      name: 'class',\n      value: undefined,\n      oldValue: className,\n    });\n    return this;\n  }\n\n  /** Call back from registry after the element is registered. */\n  onRegister(registry: Registry): this {\n    this.registry = registry;\n    return this;\n  }\n\n  /** Return the rendered status. */\n  isRendered(): boolean {\n    return this.rendered;\n  }\n\n  /** Set the rendered status. */\n  setRendered(rendered = true): this {\n    this.rendered = rendered;\n    return this;\n  }\n\n  /** Return the element attributes. */\n  getAttributes(): ElementAttributes {\n    return this.attrs;\n  }\n\n  /** Return an attribute. */\n  // eslint-disable-next-line\n  getAttribute(name: string): any {\n    return this.attrs[name];\n  }\n\n  /** Set an attribute. */\n  // eslint-disable-next-line\n  setAttribute(name: string, value: any): this {\n    const oldID = this.attrs.id;\n    const oldValue = this.attrs[name];\n    this.attrs[name] = value;\n    // Register with old id to support id changes.\n    this.registry?.onUpdate({ id: oldID, name, value, oldValue });\n    return this;\n  }\n\n  /** Get the boundingBox. */\n  getBoundingBox(): BoundingBox | undefined {\n    return this.boundingBox;\n  }\n\n  /** Return the context. */\n  getContext(): RenderContext | undefined {\n    return this.context;\n  }\n\n  /** Set the context. */\n  setContext(context?: RenderContext): this {\n    this.context = context;\n    return this;\n  }\n\n  /** Validate and return the context. */\n  checkContext(): RenderContext {\n    return defined(this.context, 'NoContext', 'No rendering context attached to instance.');\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { Element } from './element';\nimport { Font, FontGlyph } from './font';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TypeProps } from './types/common';\nimport { defined, RuntimeError } from './util';\n\nexport interface DurationCode {\n  common: TypeProps;\n  type: Record<string, TypeProps>;\n}\n\nexport interface GlyphProps {\n  code_head: string;\n  dot_shiftY: number;\n  position: string;\n  rest: boolean;\n  line_below: number;\n  line_above: number;\n  stem_up_extension: number;\n  stem_down_extension: number;\n  stem: Stem;\n  code: string;\n  code_flag_upstem: string;\n  code_flag_downstem: string;\n  flag: boolean;\n  width: number;\n  text: string;\n  tabnote_stem_down_extension: number;\n  tabnote_stem_up_extension: number;\n  beam_count: number;\n  duration_codes: Record<string, DurationCode>;\n  validTypes: Record<string, string>;\n  shift_y: number;\n\n  getWidth(a?: number): number;\n\n  getMetrics(): GlyphMetrics;\n}\n\nexport interface GlyphOptions {\n  fontStack: Font[];\n  category?: string;\n}\n\nexport interface GlyphMetrics {\n  width: number;\n  height: number;\n  x_min: number;\n  x_max: number;\n  x_shift: number;\n  y_shift: number;\n  scale: number;\n  ha: number;\n  outline: number[];\n  font: Font;\n}\n\nexport const enum OutlineCode {\n  MOVE = 0,\n  LINE = 1,\n  QUADRATIC = 2,\n  BEZIER = 3,\n}\n\nclass GlyphCacheEntry {\n  metrics: GlyphMetrics;\n  bbox: BoundingBox;\n  point: number = -1;\n\n  constructor(fontStack: Font[], code: string, category?: string) {\n    this.metrics = Glyph.loadMetrics(fontStack, code, category);\n    this.bbox = Glyph.getOutlineBoundingBox(\n      this.metrics.outline,\n      this.metrics.scale,\n      this.metrics.x_shift,\n      this.metrics.y_shift\n    );\n\n    if (category) {\n      this.point = Glyph.lookupFontMetric(this.metrics.font, category, code, 'point', -1);\n    }\n  }\n}\n\nclass GlyphCache {\n  protected cache: Map<Font[], Record<string, GlyphCacheEntry>> = new Map();\n\n  lookup(fontStack: Font[], code: string, category?: string): GlyphCacheEntry {\n    let entries = this.cache.get(fontStack);\n    if (entries === undefined) {\n      entries = {};\n      this.cache.set(fontStack, entries);\n    }\n    const key = category ? `${code}%${category}` : code;\n    let entry = entries[key];\n    if (entry === undefined) {\n      entry = new GlyphCacheEntry(fontStack, code, category);\n      entries[key] = entry;\n    }\n    return entry;\n  }\n}\n\nclass GlyphOutline {\n  private i: number = 0;\n\n  constructor(private outline: number[], private originX: number, private originY: number, private scale: number) {}\n\n  done(): boolean {\n    return this.i >= this.outline.length;\n  }\n  next(): number {\n    return this.outline[this.i++];\n  }\n  nextX(): number {\n    return this.originX + this.outline[this.i++] * this.scale;\n  }\n  nextY(): number {\n    return this.originY - this.outline[this.i++] * this.scale;\n  }\n\n  static parse(str: string): number[] {\n    const result: number[] = [];\n    const parts = str.split(' ');\n    let i = 0;\n    while (i < parts.length) {\n      switch (parts[i++]) {\n        case 'm':\n          result.push(OutlineCode.MOVE, parseInt(parts[i++]), parseInt(parts[i++]));\n          break;\n        case 'l':\n          result.push(OutlineCode.LINE, parseInt(parts[i++]), parseInt(parts[i++]));\n          break;\n        case 'q':\n          result.push(\n            OutlineCode.QUADRATIC,\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++])\n          );\n          break;\n        case 'b':\n          result.push(\n            OutlineCode.BEZIER,\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++])\n          );\n          break;\n      }\n    }\n    return result;\n  }\n}\n\nexport class Glyph extends Element {\n  static get CATEGORY(): string {\n    return 'Glyph';\n  }\n\n  protected static cache = new GlyphCache();\n\n  bbox: BoundingBox = new BoundingBox(0, 0, 0, 0);\n  code: string;\n  // metrics is initialised in the constructor by either setOptions or reset\n  // eslint-disable-next-line\n  metrics!: GlyphMetrics;\n  topGlyphs: Glyph[] = [];\n  botGlyphs: Glyph[] = [];\n\n  protected options: GlyphOptions;\n  protected originShift: { x: number; y: number };\n  protected x_shift: number;\n  protected y_shift: number;\n  scale: number = 1;\n  protected point: number;\n  protected stave?: Stave;\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Static methods for loading and rendering glyphs.\n\n  /**\n   * Pass a key of the form `glyphs.{category}.{code}.{key}` to Font.lookupMetric(). If the initial lookup fails,\n   * try again with the path `glyphs.{category}.{key}`. If the second lookup fails, return the defaultValue.\n   *\n   * @param font\n   * @param category any metric path under 'glyphs', so 'stem.up' could resolve to glyphs.stem.up.shiftX, glyphs.stem.up.shiftY, etc.\n   * @param code\n   * @param key\n   * @param defaultValue\n   */\n  static lookupFontMetric(font: Font, category: string, code: string, key: string, defaultValue: number): number {\n    let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);\n    if (value === undefined) {\n      // The first lookup failed, so we omit .${code} and try again (with a defaultValue this time).\n      value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);\n    }\n    return value;\n  }\n\n  static lookupGlyph(fontStack: Font[], code: string): { font: Font; glyph: FontGlyph } {\n    defined(fontStack, 'BadFontStack', 'Font stack is misconfigured');\n\n    let glyph: FontGlyph;\n    let font: Font;\n    for (let i = 0; i < fontStack.length; i++) {\n      font = fontStack[i];\n      glyph = font.getGlyphs()[code];\n      if (glyph) return { glyph, font };\n    }\n\n    throw new RuntimeError('BadGlyph', `Glyph ${code} does not exist in font.`);\n  }\n\n  static loadMetrics(fontStack: Font[], code: string, category?: string): GlyphMetrics {\n    const { glyph, font } = Glyph.lookupGlyph(fontStack, code);\n\n    if (!glyph.o) throw new RuntimeError('BadGlyph', `Glyph ${code} has no outline defined.`);\n\n    let x_shift = 0;\n    let y_shift = 0;\n    let scale = 1;\n    if (category && font) {\n      x_shift = Glyph.lookupFontMetric(font, category, code, 'shiftX', 0);\n      y_shift = Glyph.lookupFontMetric(font, category, code, 'shiftY', 0);\n      scale = Glyph.lookupFontMetric(font, category, code, 'scale', 1);\n    }\n\n    const x_min = glyph.x_min;\n    const x_max = glyph.x_max;\n    const ha = glyph.ha;\n\n    if (!glyph.cached_outline) {\n      glyph.cached_outline = GlyphOutline.parse(glyph.o);\n    }\n\n    return {\n      x_min,\n      x_max,\n      x_shift,\n      y_shift,\n      scale,\n      ha,\n      outline: glyph.cached_outline,\n      font,\n      width: x_max - x_min,\n      height: ha,\n    };\n  }\n\n  /**\n   * Renders glyphs from the default font stack.\n   *\n   * @param ctx Canvas or SVG context\n   * @param x_pos x coordinate\n   * @param y_pos y coordinate\n   * @param point the point size of the font\n   * @param code the glyph code in font.getGlyphs()\n   * @param options\n   * @returns\n   */\n  static renderGlyph(\n    ctx: RenderContext,\n    x_pos: number,\n    y_pos: number,\n    point: number,\n    code: string,\n    options?: { font?: Font; category: string }\n  ): GlyphMetrics {\n    const params = {\n      fontStack: Tables.DEFAULT_FONT_STACK,\n      ...options,\n    };\n    const data = Glyph.cache.lookup(params.fontStack, code, params.category);\n    const metrics = data.metrics;\n    if (data.point != -1) {\n      point = data.point;\n    }\n\n    const scale = (point * 72.0) / (metrics.font.getResolution() * 100.0);\n\n    Glyph.renderOutline(ctx, metrics.outline, scale * metrics.scale, x_pos + metrics.x_shift, y_pos + metrics.y_shift);\n    return metrics;\n  }\n\n  static renderOutline(ctx: RenderContext, outline: number[], scale: number, x_pos: number, y_pos: number): void {\n    const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n\n    ctx.beginPath();\n    let x, y: number;\n    while (!go.done()) {\n      switch (go.next()) {\n        case OutlineCode.MOVE:\n          ctx.moveTo(go.nextX(), go.nextY());\n          break;\n        case OutlineCode.LINE:\n          ctx.lineTo(go.nextX(), go.nextY());\n          break;\n        case OutlineCode.QUADRATIC:\n          x = go.nextX();\n          y = go.nextY();\n          ctx.quadraticCurveTo(go.nextX(), go.nextY(), x, y);\n          break;\n        case OutlineCode.BEZIER:\n          x = go.nextX();\n          y = go.nextY();\n          ctx.bezierCurveTo(go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n          break;\n      }\n    }\n    ctx.fill();\n  }\n\n  static getOutlineBoundingBox(outline: number[], scale: number, x_pos: number, y_pos: number): BoundingBox {\n    const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n    const bboxComp = new BoundingBoxComputation();\n\n    // (penX, penY) hold the pen position: the start of each stroke.\n    let penX: number = x_pos;\n    let penY: number = y_pos;\n    let x, y: number;\n    while (!go.done()) {\n      switch (go.next()) {\n        case OutlineCode.MOVE:\n          // Note that we don't add any points to the bounding box until a srroke is actually drawn.\n          penX = go.nextX();\n          penY = go.nextY();\n          break;\n        case OutlineCode.LINE:\n          bboxComp.addPoint(penX, penY);\n          penX = go.nextX();\n          penY = go.nextY();\n          bboxComp.addPoint(penX, penY);\n          break;\n        case OutlineCode.QUADRATIC:\n          x = go.nextX();\n          y = go.nextY();\n          bboxComp.addQuadraticCurve(penX, penY, go.nextX(), go.nextY(), x, y);\n          penX = x;\n          penY = y;\n          break;\n        case OutlineCode.BEZIER:\n          x = go.nextX();\n          y = go.nextY();\n          bboxComp.addBezierCurve(penX, penY, go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n          penX = x;\n          penY = y;\n          break;\n      }\n    }\n\n    return new BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());\n  }\n\n  static getWidth(fontStack: Font[], code: string, point: number, category?: string): number {\n    const data = Glyph.cache.lookup(fontStack, code, category);\n    if (data.point != -1) {\n      point = data.point;\n    }\n    const scale = (point * 72) / (data.metrics.font.getResolution() * 100);\n    return data.bbox.getW() * scale;\n  }\n\n  /**\n   * @param code\n   * @param point\n   * @param options\n   */\n  constructor(code: string, point: number, options?: { category: string }) {\n    super();\n\n    this.code = code;\n    this.point = point;\n    this.options = {\n      fontStack: this.getFontStack(),\n    };\n\n    this.x_shift = 0;\n    this.y_shift = 0;\n\n    this.originShift = {\n      x: 0,\n      y: 0,\n    };\n\n    if (options) {\n      this.setOptions(options);\n    } else {\n      this.reset();\n    }\n  }\n\n  // eslint-disable-next-line\n  draw(...args: any[]): void {\n    // DO NOTHING.\n  }\n\n  getCode(): string {\n    return this.code;\n  }\n\n  // eslint-disable-next-line\n  setOptions(options: any): void {\n    this.options = { ...this.options, ...options };\n    this.reset();\n  }\n\n  setPoint(point: number): this {\n    this.point = point;\n    return this;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  setXShift(x_shift: number): this {\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  setYShift(y_shift: number): this {\n    this.y_shift = y_shift;\n    return this;\n  }\n\n  reset(): void {\n    const data = Glyph.cache.lookup(this.options.fontStack, this.code, this.options.category);\n    this.metrics = data.metrics;\n    // Override point from metrics file\n    if (data.point != -1) {\n      this.point = data.point;\n    }\n\n    this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);\n    this.bbox = new BoundingBox(\n      data.bbox.getX() * this.scale,\n      data.bbox.getY() * this.scale,\n      data.bbox.getW() * this.scale,\n      data.bbox.getH() * this.scale\n    );\n  }\n\n  checkMetrics(): GlyphMetrics {\n    return defined(this.metrics, 'BadGlyph', `Glyph ${this.code} is not initialized.`);\n  }\n\n  getMetrics(): GlyphMetrics {\n    const metrics = this.checkMetrics();\n    const metricsScale = metrics.scale;\n    return {\n      x_min: metrics.x_min * this.scale * metricsScale,\n      x_max: metrics.x_max * this.scale * metricsScale,\n      width: this.bbox.getW(),\n      height: this.bbox.getH(),\n      scale: this.scale * metricsScale,\n      x_shift: metrics.x_shift,\n      y_shift: metrics.y_shift,\n      outline: metrics.outline,\n      font: metrics.font,\n      ha: metrics.ha,\n    };\n  }\n\n  setOriginX(x: number): void {\n    const { bbox } = this;\n    const originX = Math.abs(bbox.getX() / bbox.getW());\n    const xShift = (x - originX) * bbox.getW();\n    this.originShift.x = -xShift;\n  }\n\n  setOriginY(y: number): void {\n    const { bbox } = this;\n    const originY = Math.abs(bbox.getY() / bbox.getH());\n    const yShift = (y - originY) * bbox.getH();\n    this.originShift.y = -yShift;\n  }\n\n  setOrigin(x: number, y: number): void {\n    this.setOriginX(x);\n    this.setOriginY(y);\n  }\n\n  render(ctx: RenderContext, x: number, y: number): void {\n    const metrics = this.checkMetrics();\n\n    const outline = metrics.outline;\n    const scale = this.scale * metrics.scale;\n\n    this.setRendered();\n    this.applyStyle(ctx);\n    const xPos = x + this.originShift.x + metrics.x_shift;\n    const yPos = y + this.originShift.y + metrics.y_shift;\n    Glyph.renderOutline(ctx, outline, scale, xPos, yPos);\n    this.restoreStyle(ctx);\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  renderToStave(x: number): void {\n    const context = this.checkContext();\n    const metrics = this.checkMetrics();\n    const stave = this.checkStave();\n\n    const outline = metrics.outline;\n    const scale = this.scale * metrics.scale;\n\n    this.setRendered();\n    this.applyStyle();\n\n    const xPos = x + this.x_shift + metrics.x_shift;\n    const yPos = stave.getYForGlyphs() + this.y_shift + metrics.y_shift;\n    Glyph.renderOutline(context, outline, scale, xPos, yPos);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Element } from './element';\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { defined, RuntimeError } from './util';\n\nexport enum ModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n}\n\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\n\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n  /**\n   * Modifiers category string. Every modifier has a different category.\n   * The `ModifierContext` uses this to determine the type and order of the modifiers.\n   */\n  static get CATEGORY(): string {\n    return 'Modifier';\n  }\n\n  /** Modifiers can be positioned almost anywhere, relative to a note. */\n  static get Position(): typeof ModifierPosition {\n    return ModifierPosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      center: ModifierPosition.CENTER,\n      above: ModifierPosition.ABOVE,\n      below: ModifierPosition.BELOW,\n      left: ModifierPosition.LEFT,\n      right: ModifierPosition.RIGHT,\n    };\n  }\n\n  // Modifiers are attached to a note and an index. An index is a specific head in a chord.\n  protected note?: Note;\n  protected index?: number;\n\n  protected width: number;\n  protected text_line: number;\n  protected position: ModifierPosition;\n  protected y_shift: number;\n  protected x_shift: number;\n\n  private spacingFromNextModifier: number;\n  private modifierContext?: ModifierContext;\n\n  constructor() {\n    super();\n\n    this.width = 0;\n\n    // The `text_line` is reserved space above or below a stave.\n    this.text_line = 0;\n    this.position = Modifier.Position.LEFT;\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.spacingFromNextModifier = 0;\n  }\n\n  /** Called when position changes. */\n  protected reset(): void {\n    // DO NOTHING.\n  }\n\n  /** Get modifier widths. */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /** Set modifier widths. */\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n  getNote(): Note {\n    return defined(this.note, 'NoNote', 'Modifier has no note.');\n  }\n\n  /**\n   * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n   * Also verifies that the index is valid.\n   */\n  checkAttachedNote(): Note {\n    const category = this.getCategory();\n    defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n    return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n  }\n\n  /**\n   * Set attached note.\n   * @param note (`StaveNote`, `TabNote`, etc.)\n   */\n  setNote(note: Note): this {\n    this.note = note;\n    return this;\n  }\n\n  /** Get note index, which is a specific note in a chord. */\n  getIndex(): number | undefined {\n    return this.index;\n  }\n\n  /** Check and get note index, which is a specific note in a chord. */\n  checkIndex(): number {\n    return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n  }\n\n  /** Set note index, which is a specific note in a chord. */\n  setIndex(index: number): this {\n    this.index = index;\n    return this;\n  }\n\n  /** Get `ModifierContext`. */\n  getModifierContext(): ModifierContext | undefined {\n    return this.modifierContext;\n  }\n\n  /** Check and get `ModifierContext`. */\n  checkModifierContext(): ModifierContext {\n    return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');\n  }\n\n  /** Every modifier must be part of a `ModifierContext`. */\n  setModifierContext(c: ModifierContext): this {\n    this.modifierContext = c;\n    return this;\n  }\n\n  /** Get position. */\n  getPosition(): number {\n    return this.position;\n  }\n\n  /**\n   * Set position.\n   * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n   */\n  setPosition(position: string | number): this {\n    this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n    this.reset();\n    return this;\n  }\n\n  /** Set the `text_line` for the modifier. */\n  setTextLine(line: number): this {\n    this.text_line = line;\n    return this;\n  }\n\n  /** Shift modifier down `y` pixels. Negative values shift up. */\n  setYShift(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  /** Set spacing from next modifier. */\n  setSpacingFromNextModifier(x: number): void {\n    this.spacingFromNextModifier = x;\n  }\n\n  /** Get spacing from next modifier. */\n  getSpacingFromNextModifier(): number {\n    return this.spacingFromNextModifier;\n  }\n\n  /**\n   * Shift modifier `x` pixels in the direction of the modifier. Negative values\n   * shift reverse.\n   */\n  setXShift(x: number): this {\n    this.x_shift = 0;\n    if (this.position === Modifier.Position.LEFT) {\n      this.x_shift -= x;\n    } else {\n      this.x_shift += x;\n    }\n    return this;\n  }\n\n  /** Get shift modifier `x` */\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  /** Render the modifier onto the canvas. */\n  draw(): void {\n    this.checkContext();\n    throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n  }\n\n  // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n  alignSubNotesWithNote(subNotes: Note[], note: Note): void {\n    // Shift over the tick contexts of each note\n    const tickContext = note.getTickContext();\n    const metrics = tickContext.getMetrics();\n    const stave = note.getStave();\n    const subNoteXOffset =\n      tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n\n    subNotes.forEach((subNote) => {\n      const subTickContext = subNote.getTickContext();\n      if (stave) subNote.setStave(stave);\n      subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\n\nexport interface NoteAccidental {\n  note: number;\n  accidental: AccidentalValue;\n}\n\nexport interface NoteParts {\n  root: string;\n  accidental: string;\n}\n\nexport interface KeyParts {\n  root: string;\n  accidental: string;\n  type: string;\n}\n\nexport type KeyValue = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\n\nexport type RootValue = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport type AccidentalValue = -2 | -1 | 0 | 1 | 2;\n\nexport interface Key {\n  root_index: RootValue;\n  int_val: KeyValue;\n}\n\n/** Music implements some standard music theory routines. */\nexport class Music {\n  /** Number of an canonical notes (12). */\n  static get NUM_TONES(): number {\n    return this.canonical_notes.length;\n  }\n\n  /** Names of root notes ('c', 'd',...) */\n  static get roots(): string[] {\n    return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n  }\n\n  /** Values of the root notes.*/\n  static get root_values(): KeyValue[] {\n    return [0, 2, 4, 5, 7, 9, 11];\n  }\n\n  /** Indices of the root notes.*/\n  static get root_indices(): Record<string, RootValue> {\n    return {\n      c: 0,\n      d: 1,\n      e: 2,\n      f: 3,\n      g: 4,\n      a: 5,\n      b: 6,\n    };\n  }\n\n  /** Names of canonical notes ('c', 'c#', 'd',...). */\n  static get canonical_notes(): string[] {\n    return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n  }\n\n  /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n  static get diatonic_intervals(): string[] {\n    return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n  }\n\n  /** NoteAccidental associated to diatonic intervals. */\n  static get diatonic_accidentals(): Record<string, NoteAccidental> {\n    return {\n      unison: { note: 0, accidental: 0 },\n      m2: { note: 1, accidental: -1 },\n      M2: { note: 1, accidental: 0 },\n      m3: { note: 2, accidental: -1 },\n      M3: { note: 2, accidental: 0 },\n      p4: { note: 3, accidental: 0 },\n      dim5: { note: 4, accidental: -1 },\n      p5: { note: 4, accidental: 0 },\n      m6: { note: 5, accidental: -1 },\n      M6: { note: 5, accidental: 0 },\n      b7: { note: 6, accidental: -1 },\n      M7: { note: 6, accidental: 0 },\n      octave: { note: 7, accidental: 0 },\n    };\n  }\n\n  /** Semitones shift associated to intervals .*/\n  static get intervals(): Record<string, number> {\n    return {\n      u: 0,\n      unison: 0,\n      m2: 1,\n      b2: 1,\n      min2: 1,\n      S: 1,\n      H: 1,\n      2: 2,\n      M2: 2,\n      maj2: 2,\n      T: 2,\n      W: 2,\n      m3: 3,\n      b3: 3,\n      min3: 3,\n      M3: 4,\n      3: 4,\n      maj3: 4,\n      4: 5,\n      p4: 5,\n      '#4': 6,\n      b5: 6,\n      aug4: 6,\n      dim5: 6,\n      5: 7,\n      p5: 7,\n      '#5': 8,\n      b6: 8,\n      aug5: 8,\n      6: 9,\n      M6: 9,\n      maj6: 9,\n      b7: 10,\n      m7: 10,\n      min7: 10,\n      dom7: 10,\n      M7: 11,\n      maj7: 11,\n      8: 12,\n      octave: 12,\n    };\n  }\n\n  /** Semitones shifts associated with scales. */\n  static get scales(): Record<string, number[]> {\n    return {\n      major: [2, 2, 1, 2, 2, 2, 1],\n      minor: [2, 1, 2, 2, 1, 2, 2],\n      ionian: [2, 2, 1, 2, 2, 2, 1],\n      dorian: [2, 1, 2, 2, 2, 1, 2],\n      phyrgian: [1, 2, 2, 2, 1, 2, 2],\n      lydian: [2, 2, 2, 1, 2, 2, 1],\n      mixolydian: [2, 2, 1, 2, 2, 1, 2],\n      aeolian: [2, 1, 2, 2, 1, 2, 2],\n      locrian: [1, 2, 2, 1, 2, 2, 2],\n    };\n  }\n\n  /** Scales associated with m (minor) and M (major). */\n  static get scaleTypes(): Record<string, number[]> {\n    return {\n      M: Music.scales.major,\n      m: Music.scales.minor,\n    };\n  }\n\n  /** Accidentals abbreviations. */\n  static get accidentals(): string[] {\n    return ['bb', 'b', 'n', '#', '##'];\n  }\n\n  /** Note values. */\n  static get noteValues(): Record<string, Key> {\n    return {\n      c: { root_index: 0, int_val: 0 },\n      cn: { root_index: 0, int_val: 0 },\n      'c#': { root_index: 0, int_val: 1 },\n      'c##': { root_index: 0, int_val: 2 },\n      cb: { root_index: 0, int_val: 11 },\n      cbb: { root_index: 0, int_val: 10 },\n      d: { root_index: 1, int_val: 2 },\n      dn: { root_index: 1, int_val: 2 },\n      'd#': { root_index: 1, int_val: 3 },\n      'd##': { root_index: 1, int_val: 4 },\n      db: { root_index: 1, int_val: 1 },\n      dbb: { root_index: 1, int_val: 0 },\n      e: { root_index: 2, int_val: 4 },\n      en: { root_index: 2, int_val: 4 },\n      'e#': { root_index: 2, int_val: 5 },\n      'e##': { root_index: 2, int_val: 6 },\n      eb: { root_index: 2, int_val: 3 },\n      ebb: { root_index: 2, int_val: 2 },\n      f: { root_index: 3, int_val: 5 },\n      fn: { root_index: 3, int_val: 5 },\n      'f#': { root_index: 3, int_val: 6 },\n      'f##': { root_index: 3, int_val: 7 },\n      fb: { root_index: 3, int_val: 4 },\n      fbb: { root_index: 3, int_val: 3 },\n      g: { root_index: 4, int_val: 7 },\n      gn: { root_index: 4, int_val: 7 },\n      'g#': { root_index: 4, int_val: 8 },\n      'g##': { root_index: 4, int_val: 9 },\n      gb: { root_index: 4, int_val: 6 },\n      gbb: { root_index: 4, int_val: 5 },\n      a: { root_index: 5, int_val: 9 },\n      an: { root_index: 5, int_val: 9 },\n      'a#': { root_index: 5, int_val: 10 },\n      'a##': { root_index: 5, int_val: 11 },\n      ab: { root_index: 5, int_val: 8 },\n      abb: { root_index: 5, int_val: 7 },\n      b: { root_index: 6, int_val: 11 },\n      bn: { root_index: 6, int_val: 11 },\n      'b#': { root_index: 6, int_val: 0 },\n      'b##': { root_index: 6, int_val: 1 },\n      bb: { root_index: 6, int_val: 10 },\n      bbb: { root_index: 6, int_val: 9 },\n    };\n  }\n\n  protected isValidNoteValue(note: number): boolean {\n    return note >= 0 && note < Music.canonical_notes.length;\n  }\n\n  protected isValidIntervalValue(interval: number): boolean {\n    return interval >= 0 && interval < Music.diatonic_intervals.length;\n  }\n\n  /** Return root and accidental associated to a note. */\n  getNoteParts(noteString: string): NoteParts {\n    if (!noteString || noteString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    if (noteString.length > 3) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    const note = noteString.toLowerCase();\n\n    const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n    const match = regex.exec(note);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n\n      return {\n        root,\n        accidental,\n      };\n    } else {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n  }\n\n  /** Return root, accidental and type associated to a key. */\n  getKeyParts(keyString: string): KeyParts {\n    if (!keyString || keyString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n    }\n\n    const key = keyString.toLowerCase();\n\n    // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n    const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n    const match = regex.exec(key);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n      let type = match[3];\n\n      // Unspecified type implies major\n      if (!type) type = 'M';\n\n      return {\n        root,\n        accidental,\n        type,\n      };\n    } else {\n      throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n    }\n  }\n\n  /** Note value associated to a note name. */\n  getNoteValue(noteString: string): number {\n    const value = Music.noteValues[noteString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n    }\n    return value.int_val;\n  }\n\n  /** Interval value associated to an interval name. */\n  getIntervalValue(intervalString: string): number {\n    const value = Music.intervals[intervalString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n    }\n    return value;\n  }\n\n  /** Canonical note name associated to a value. */\n  getCanonicalNoteName(noteValue: number): string {\n    if (!this.isValidNoteValue(noteValue)) {\n      throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n    }\n    return Music.canonical_notes[noteValue];\n  }\n\n  /** Interval name associated to a value. */\n  getCanonicalIntervalName(intervalValue: number): string {\n    if (!this.isValidIntervalValue(intervalValue)) {\n      throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n    }\n    return Music.diatonic_intervals[intervalValue];\n  }\n\n  /**\n   * Given a note, interval, and interval direction, produce the relative note.\n   */\n  getRelativeNoteValue(noteValue: number, intervalValue: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n    if (sum < 0) sum += Music.NUM_TONES;\n\n    return sum;\n  }\n\n  /**\n   * Given a root and note value, produce the relative note name.\n   */\n  getRelativeNoteName(root: string, noteValue: number): string {\n    const parts = this.getNoteParts(root);\n    const rootValue = this.getNoteValue(parts.root);\n    let interval = noteValue - rootValue;\n\n    if (Math.abs(interval) > Music.NUM_TONES - 3) {\n      let multiplier = 1;\n      if (interval > 0) multiplier = -1;\n\n      // Possibly wrap around. (Add +1 for modulo operator)\n      const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n\n      if (Math.abs(reverse_interval) > 2) {\n        throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n      } else {\n        interval = reverse_interval;\n      }\n    }\n\n    if (Math.abs(interval) > 2) {\n      throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n    }\n\n    let relativeNoteName = parts.root;\n    if (interval > 0) {\n      for (let i = 1; i <= interval; ++i) {\n        relativeNoteName += '#';\n      }\n    } else if (interval < 0) {\n      for (let i = -1; i >= interval; --i) {\n        relativeNoteName += 'b';\n      }\n    }\n\n    return relativeNoteName;\n  }\n\n  /**\n   * Return scale tones, given intervals. Each successive interval is\n   * relative to the previous one, e.g., Major Scale:\n   *\n   *   TTSTTTS = [2,2,1,2,2,2,1]\n   *\n   * When used with key = 0, returns C scale (which is isomorphic to\n   * interval list).\n   */\n  getScaleTones(key: number, intervals: number[]): number[] {\n    const tones = [key];\n\n    let nextNote = key;\n    for (let i = 0; i < intervals.length; i++) {\n      nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n      if (nextNote !== key) tones.push(nextNote);\n    }\n\n    return tones;\n  }\n\n  /**\n   * Return the interval of a note, given a diatonic scale.\n   * e.g., given the scale C, and the note E, returns M3.\n   */\n  getIntervalBetween(note1: number, note2: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n      throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n    }\n\n    let difference = direction === 1 ? note2 - note1 : note1 - note2;\n\n    if (difference < 0) difference += Music.NUM_TONES;\n\n    return difference;\n  }\n\n  /**\n   * Create a scale map that represents the pitch state for a\n   * `keySignature`. For example, passing a `G` to `keySignature` would\n   * return a scale map with every note naturalized except for `F` which\n   * has an `F#` state.\n   */\n  createScaleMap(keySignature: string): Record<string, string> {\n    const keySigParts = this.getKeyParts(keySignature);\n    if (!keySigParts.type) throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n    const scaleName = Music.scaleTypes[keySigParts.type];\n\n    let keySigString = keySigParts.root;\n    if (keySigParts.accidental) keySigString += keySigParts.accidental;\n\n    if (!scaleName) throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n\n    const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n    const noteLocation = Music.root_indices[keySigParts.root];\n\n    const scaleMap = {} as Record<string, string>;\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n      let noteName = this.getRelativeNoteName(rootName, scale[i]);\n\n      if (noteName.length === 1) {\n        noteName += 'n';\n      }\n\n      scaleMap[rootName] = noteName;\n    }\n\n    return scaleMap;\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements dot modifiers for notes.\n\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { isGraceNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\n\nexport class Dot extends Modifier {\n  static get CATEGORY(): string {\n    return 'Dot';\n  }\n\n  protected radius: number;\n  protected dot_shiftY: number;\n\n  // Arrange dots inside a ModifierContext.\n  static format(dots: Dot[], state: ModifierContextState): boolean {\n    const right_shift = state.right_shift;\n    const dot_spacing = 1;\n\n    if (!dots || dots.length === 0) return false;\n\n    const dot_list = [];\n    const max_shift_map: Record<string, number> = {};\n    for (let i = 0; i < dots.length; ++i) {\n      const dot = dots[i];\n      const note = dot.getNote();\n\n      let props;\n      let shift;\n\n      if (isStaveNote(note)) {\n        const index = dot.checkIndex();\n        props = note.getKeyProps()[index];\n        shift = note.getRightDisplacedHeadPx();\n      } else if (isTabNote(note)) {\n        props = { line: 0.5 }; // Shim key props for dot placement\n        shift = 0;\n      } else {\n        // note object is not StaveNote or TabNote.\n        throw new RuntimeError('Internal', 'Unexpected instance.');\n      }\n\n      const note_id = note.getAttribute('id');\n      dot_list.push({ line: props.line, note, note_id, dot });\n      max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\n    }\n\n    // Sort dots by line number.\n    dot_list.sort((a, b) => b.line - a.line);\n\n    let dot_shift = right_shift;\n    let x_width = 0;\n    let last_line = null;\n    let last_note = null;\n    let prev_dotted_space = null;\n    let half_shiftY = 0;\n\n    for (let i = 0; i < dot_list.length; ++i) {\n      const { dot, note, note_id, line } = dot_list[i];\n\n      // Reset the position of the dot every line.\n      if (line !== last_line || note !== last_note) {\n        dot_shift = max_shift_map[note_id];\n      }\n\n      if (!note.isRest() && line !== last_line) {\n        if (Math.abs(line % 1) === 0.5) {\n          // note is on a space, so no dot shift\n          half_shiftY = 0;\n        } else {\n          // note is on a line, so shift dot to space above the line\n          half_shiftY = 0.5;\n          if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {\n            // previous note on a space, so shift dot to space below the line\n            half_shiftY = -0.5;\n          } else if (line + half_shiftY === prev_dotted_space) {\n            // previous space is dotted, so shift dot to space below the line\n            half_shiftY = -0.5;\n          }\n        }\n      }\n\n      // convert half_shiftY to a multiplier for dots.draw()\n      if (note.isRest()) {\n        dot.dot_shiftY += -half_shiftY;\n      } else {\n        dot.dot_shiftY = -half_shiftY;\n      }\n      prev_dotted_space = line + half_shiftY;\n\n      dot.setXShift(dot_shift);\n      dot_shift += dot.getWidth() + dot_spacing; // spacing\n      x_width = dot_shift > x_width ? dot_shift : x_width;\n      last_line = line;\n      last_note = note;\n    }\n\n    // Update state.\n    state.right_shift += x_width;\n    return true;\n  }\n\n  constructor() {\n    super();\n\n    this.position = Modifier.Position.RIGHT;\n\n    this.radius = 2;\n    this.setWidth(5);\n    this.dot_shiftY = 0;\n  }\n\n  setNote(note: Note): this {\n    this.note = note;\n    if (isGraceNote(note)) {\n      this.radius *= 0.5;\n      this.setWidth(3);\n    }\n    return this;\n  }\n\n  setDotShiftY(y: number): this {\n    this.dot_shiftY = y;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const stave = note.checkStave();\n    const lineSpace = stave.getSpacingBetweenLines();\n\n    const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n\n    // Set the starting y coordinate to the base of the stem for TabNotes.\n    if (isTabNote(note)) {\n      start.y = note.getStemExtents().baseY;\n    }\n\n    const x = start.x + this.x_shift + this.width - this.radius;\n    const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\n\n    ctx.beginPath();\n    ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Modifier } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { Stave } from './stave';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { Tuplet } from './tuplet';\nimport { defined, RuntimeError } from './util';\nimport { Voice } from './voice';\n\n/** Formatter metrics interface */\nexport interface FormatterMetrics {\n  duration: string;\n  freedom: {\n    left: number;\n    right: number;\n  };\n  iterations: number;\n  space: {\n    used: number;\n    mean: number;\n    deviation: number;\n  };\n}\n\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport abstract class Tickable extends Element {\n  static get CATEGORY(): string {\n    return 'Tickable';\n  }\n\n  protected ignore_ticks: boolean;\n  protected tupletStack: Tuplet[];\n  protected tuplet?: Tuplet;\n  protected ticks: Fraction;\n  protected center_x_shift: number;\n  protected voice?: Voice;\n  protected width: number;\n  protected x_shift: number;\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected modifierContext?: ModifierContext;\n  protected tickContext?: TickContext;\n  protected modifiers: Modifier[];\n  protected tickMultiplier: Fraction;\n  protected formatterMetrics: FormatterMetrics;\n  protected intrinsicTicks: number;\n  protected align_center: boolean;\n\n  constructor() {\n    super();\n\n    // These properties represent the duration of\n    // this tickable element.\n    this.ticks = new Fraction(0, 1); // Fractional value of ticks\n    this.intrinsicTicks = 0; // Floating point value of ticks\n    this.tickMultiplier = new Fraction(1, 1);\n\n    // Formatter metrics\n    this.width = 0;\n    this.x_shift = 0; // Shift from tick context\n\n    this.modifiers = [];\n    this.tupletStack = [];\n\n    this.align_center = false;\n    this.center_x_shift = 0; // Shift from tick context if center aligned\n\n    // This flag tells the formatter to ignore this tickable during\n    // formatting and justification. It is set by tickables such as BarNote.\n    this.ignore_ticks = false;\n\n    // This is a space for an external formatting class or function to maintain\n    // metrics.\n    this.formatterMetrics = {\n      // The freedom of a tickable is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n\n      // The simplified rational duration of this tick as a string. It can be\n      // used as an index to a map or hashtable.\n      duration: '',\n\n      // The number of formatting iterations undergone.\n      iterations: 0,\n\n      // The space in pixels allocated by this formatter, along with the mean space\n      // for tickables of this duration, and the deviation from the mean.\n      space: {\n        used: 0,\n        mean: 0,\n        deviation: 0,\n      },\n    };\n  }\n\n  /** Reset the Tickable, this function will be overloaded. */\n  reset(): this {\n    return this;\n  }\n\n  /** Return the ticks. */\n  getTicks(): Fraction {\n    return this.ticks;\n  }\n\n  /** Check if it ignores the ticks. */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Ignore the ticks. */\n  setIgnoreTicks(flag: boolean): this {\n    this.ignore_ticks = flag;\n    return this;\n  }\n\n  /** Set width of note. Used by the formatter for positioning. */\n  setWidth(width: number): void {\n    this.width = width;\n  }\n\n  /** Get width of note. Used by the formatter for positioning. */\n  getWidth(): number {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n    }\n\n    return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n  }\n\n  /** Displace note by `x` pixels. Used by the formatter. */\n  setXShift(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  /** Get the `x` displaced pixels of the note. */\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  /** Get `x` position of this tick context. */\n  getX(): number {\n    const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n    return tickContext.getX() + this.x_shift;\n  }\n\n  /** Return the formatterMetrics. */\n  getFormatterMetrics(): FormatterMetrics {\n    return this.formatterMetrics;\n  }\n\n  /** Return the center `x` shift. */\n  getCenterXShift(): number {\n    if (this.isCenterAligned()) {\n      return this.center_x_shift;\n    }\n\n    return 0;\n  }\n\n  /** Set the center `x` shift. */\n  setCenterXShift(centerXShift: number): this {\n    this.center_x_shift = centerXShift;\n    return this;\n  }\n\n  // Check if tickable is center aligned. */\n  isCenterAligned(): boolean {\n    return this.align_center;\n  }\n\n  // Set/unset center alignment. */\n  setCenterAlignment(align_center: boolean): this {\n    this.align_center = align_center;\n    return this;\n  }\n\n  /**\n   * Return the associated voice. Every tickable must be associated with a voice.\n   * This allows formatters and preFormatter to associate them with the right modifierContexts.\n   */\n  getVoice(): Voice {\n    return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n  }\n\n  /** Set the associated voice. */\n  setVoice(voice: Voice): void {\n    this.voice = voice;\n  }\n\n  /** Get the tuplet. */\n  getTuplet(): Tuplet | undefined {\n    return this.tuplet;\n  }\n\n  /** Return the intrinsic ticks. */\n  getTupletStack(): Tuplet[] {\n    return this.tupletStack;\n  }\n\n  /**\n   * Reset the specific Tuplet if this is not provided, all tuplets are reset.\n   * Remove any prior tuplets from the tick calculation and\n   * reset the intrinsic tick value.\n   */\n  resetTuplet(tuplet?: Tuplet): this {\n    let noteCount;\n    let notesOccupied;\n    if (tuplet) {\n      const i = this.tupletStack.indexOf(tuplet);\n      if (i !== -1) {\n        this.tupletStack.splice(i, 1);\n        noteCount = tuplet.getNoteCount();\n        notesOccupied = tuplet.getNotesOccupied();\n\n        // Revert old multiplier by inverting numerator & denom.:\n        this.applyTickMultiplier(noteCount, notesOccupied);\n      }\n      return this;\n    }\n\n    while (this.tupletStack.length) {\n      tuplet = this.tupletStack.pop() as Tuplet;\n      noteCount = tuplet.getNoteCount();\n      notesOccupied = tuplet.getNotesOccupied();\n\n      // Revert old multiplier by inverting numerator & denom.:\n      this.applyTickMultiplier(noteCount, notesOccupied);\n    }\n    return this;\n  }\n\n  /** Attach to new tuplet. */\n  setTuplet(tuplet: Tuplet): this {\n    if (tuplet) {\n      this.tupletStack.push(tuplet);\n\n      const noteCount = tuplet.getNoteCount();\n      const notesOccupied = tuplet.getNotesOccupied();\n\n      this.applyTickMultiplier(notesOccupied, noteCount);\n    }\n\n    this.tuplet = tuplet;\n\n    return this;\n  }\n\n  /**\n   * Add self to the provided ModifierContext `mc`.\n   * If this tickable has modifiers, set modifierContext.\n   * @returns this\n   */\n  addToModifierContext(mc: ModifierContext): this {\n    this.modifierContext = mc;\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addMember(this.modifiers[i]);\n    }\n    this.modifierContext.addMember(this);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Optional, if tickable has modifiers, associate a Modifier. */\n  // eslint-disable-next-line\n  addModifier(mod: Modifier, ...optionalArgs: any[]): this {\n    this.modifiers.push(mod);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the list of associated modifiers. */\n  getModifiers(): Modifier[] {\n    return this.modifiers;\n  }\n\n  /** Set the Tick Context. */\n  setTickContext(tc: TickContext): void {\n    this.tickContext = tc;\n    this.setPreFormatted(false);\n  }\n\n  checkTickContext(message = 'Tickable has no tick context.'): TickContext {\n    return defined(this.tickContext, 'NoTickContext', message);\n  }\n\n  /** Preformat the Tickable. */\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.width = 0;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      this.width += this.modifierContext.getWidth();\n    }\n  }\n\n  /** Set preformatted status. */\n  setPreFormatted(value: boolean): void {\n    this.preFormatted = value;\n  }\n\n  /** Postformat the Tickable. */\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n\n  /** Return the intrinsic ticks. */\n  getIntrinsicTicks(): number {\n    return this.intrinsicTicks;\n  }\n\n  /** Set the intrinsic ticks. */\n  setIntrinsicTicks(intrinsicTicks: number): void {\n    this.intrinsicTicks = intrinsicTicks;\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Get the tick multiplier. */\n  getTickMultiplier(): Fraction {\n    return this.tickMultiplier;\n  }\n\n  /** Apply a tick multiplier. */\n  applyTickMultiplier(numerator: number, denominator: number): void {\n    this.tickMultiplier.multiply(numerator, denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Set the duration. */\n  setDuration(duration: Fraction): void {\n    const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(ticks);\n    this.intrinsicTicks = this.ticks.value();\n  }\n\n  getAbsoluteX(): number {\n    const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n    return tickContext.getX();\n  }\n\n  /** Attach this note to a modifier context. */\n  setModifierContext(mc?: ModifierContext): this {\n    this.modifierContext = mc;\n    return this;\n  }\n\n  /** Get `ModifierContext`. */\n  getModifierContext(): ModifierContext | undefined {\n    return this.modifierContext;\n  }\n\n  /** Check and get `ModifierContext`. */\n  checkModifierContext(): ModifierContext {\n    return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n  }\n\n  /** Get the target stave. */\n  abstract getStave(): Stave | undefined;\n\n  /** Set the target stave. */\n  abstract setStave(stave: Stave): this;\n\n  // eslint-disable-next-line\n  abstract getMetrics(): any;\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Beam } from './beam';\nimport { Fraction } from './fraction';\nimport { GlyphProps } from './glyph';\nimport { Modifier } from './modifier';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Stroke } from './strokes';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { TickContext } from './tickcontext';\nimport { KeyProps } from './types/common';\nimport { defined, drawDot, RuntimeError } from './util';\nimport { Voice } from './voice';\n\nexport interface NoteMetrics {\n  /** The total width of the note (including modifiers). */\n  width: number;\n  glyphWidth?: number;\n  /** The width of the note head only. */\n  notePx: number;\n  /** Start `X` for left modifiers. */\n  modLeftPx: number;\n  /** Start `X` for right modifiers. */\n  modRightPx: number;\n  /** Extra space on left of note. */\n  leftDisplacedHeadPx: number;\n  glyphPx: number;\n  /** Extra space on right of note. */\n  rightDisplacedHeadPx: number;\n}\n\nexport interface NoteDuration {\n  duration: string;\n  dots: number;\n  type: string;\n}\n\nexport interface ParsedNote {\n  duration: string;\n  type: string;\n  customTypes: string[];\n  dots: number;\n  ticks: number;\n}\n\nexport interface NoteStruct {\n  /** Array of pitches, e.g: `['c/4', 'e/4', 'g/4']` */\n  keys?: string[];\n  /** The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.). */\n  duration?: string;\n  line?: number;\n  /** The number of dots, which affects the duration. */\n  dots?: number;\n  /** The note type (e.g., `r` for rest, `s` for slash notes, etc.). */\n  type?: string;\n  align_center?: boolean;\n  duration_override?: Fraction;\n}\n\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport abstract class Note extends Tickable {\n  static get CATEGORY(): string {\n    return 'Note';\n  }\n\n  keys: string[];\n  keyProps: KeyProps[];\n\n  protected stave?: Stave;\n  public render_options: {\n    draw_stem_through_stave?: boolean;\n    draw_dots?: boolean;\n    draw_stem?: boolean;\n    y_shift: number;\n    extend_left?: number;\n    extend_right?: number;\n    glyph_font_scale: number;\n    annotation_spacing: number;\n    glyph_font_size?: number;\n    scale: number;\n    font: string;\n    stroke_px: number;\n  };\n  protected duration: string;\n  protected dots: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected noteType: string;\n  protected customGlyphs: GlyphProps[];\n  protected ys: number[];\n  // eslint-disable-next-line\n  protected glyph?: any;\n  protected customTypes: string[];\n  protected playNote?: Note;\n  protected beam?: Beam;\n\n  /** Debug helper. Displays various note metrics for the given note. */\n  static plotMetrics(ctx: RenderContext, note: Tickable, yPos: number): void {\n    const metrics = note.getMetrics();\n    const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n    const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n    const xAbs = note.getAbsoluteX();\n    const xPost1 = note.getAbsoluteX() + metrics.notePx;\n    const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n    const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n    const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);\n\n    const xWidth = xEnd - xStart;\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n    ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n\n    const y = yPos + 7;\n    function stroke(x1: number, x2: number, color: string, yy: number = y) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(3);\n      ctx.moveTo(x1 + note.getXShift(), yy);\n      ctx.lineTo(x2 + note.getXShift(), yy);\n      ctx.stroke();\n    }\n\n    stroke(xStart, xPre1, 'red');\n    stroke(xPre1, xAbs, '#999');\n    stroke(xAbs, xPost1, 'green');\n    stroke(xPost1, xPost2, '#999');\n    stroke(xPost2, xEnd, 'red');\n    stroke(xEnd, xFreedomRight, '#DD0');\n    stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n    drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n\n    const formatterMetrics = note.getFormatterMetrics();\n    if (formatterMetrics.iterations > 0) {\n      const spaceDeviation = formatterMetrics.space.deviation;\n      const prefix = spaceDeviation >= 0 ? '+' : '';\n      ctx.setFillStyle('red');\n      ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n    }\n    ctx.restore();\n  }\n\n  protected static parseDuration(durationString?: string): NoteDuration | undefined {\n    if (!durationString) {\n      return undefined;\n    }\n    const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n    const result = regexp.exec(durationString);\n    if (!result) {\n      return undefined;\n    }\n\n    const duration = result[1];\n    const dots = result[2].length;\n    const type = result[3] || 'n';\n\n    return { duration, dots, type };\n  }\n\n  protected static parseNoteStruct(noteStruct: NoteStruct): ParsedNote | undefined {\n    // Preserve backwards-compatibility\n    const durationProps = Note.parseDuration(noteStruct.duration);\n    if (!durationProps) {\n      return undefined;\n    }\n\n    // If specified type is invalid, return undefined\n    let type = noteStruct.type;\n    if (type && !Tables.validTypes[type]) {\n      return undefined;\n    }\n\n    // If no type specified, check duration or custom types\n    const customTypes: string[] = [];\n    if (!type) {\n      type = durationProps.type || 'n';\n\n      // If we have keys, try and check if we've got a custom glyph\n      if (noteStruct.keys !== undefined) {\n        noteStruct.keys.forEach((k, i) => {\n          const result = k.split('/');\n          // We have a custom glyph specified after the note eg. /X2\n          customTypes[i] = (result && result.length === 3 ? result[2] : type) as string;\n        });\n      }\n    }\n\n    // Calculate the tick duration of the note\n    let ticks = Tables.durationToTicks(durationProps.duration);\n    if (!ticks) {\n      return undefined;\n    }\n\n    // Are there any dots?\n    const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n    if (typeof dots !== 'number') {\n      return undefined;\n    }\n\n    // Add ticks as necessary depending on the numbr of dots\n    let currentTicks = ticks;\n    for (let i = 0; i < dots; i++) {\n      if (currentTicks <= 1) return undefined;\n\n      currentTicks = currentTicks / 2;\n      ticks += currentTicks;\n    }\n\n    return {\n      duration: durationProps.duration,\n      type,\n      customTypes,\n      dots,\n      ticks,\n    };\n  }\n\n  /**\n   * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n   * positioning and layout.\n   *\n   * @param noteStruct To create a new note you need to provide a `noteStruct`.\n   */\n  constructor(noteStruct: NoteStruct) {\n    super();\n\n    if (!noteStruct) {\n      throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n    }\n\n    /** Parses `noteStruct` and get note properties. */\n    const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n    if (!parsedNoteStruct) {\n      throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n    }\n\n    // Set note properties from parameters.\n    this.keys = noteStruct.keys || [];\n    // per-pitch properties\n    this.keyProps = [];\n\n    this.duration = parsedNoteStruct.duration;\n    this.dots = parsedNoteStruct.dots;\n    this.noteType = parsedNoteStruct.type;\n    this.customTypes = parsedNoteStruct.customTypes;\n\n    if (noteStruct.duration_override) {\n      // Custom duration\n      this.setDuration(noteStruct.duration_override);\n    } else {\n      // Default duration\n      this.setIntrinsicTicks(parsedNoteStruct.ticks);\n    }\n\n    this.modifiers = [];\n\n    // Get the glyph code for this note from the font.\n    this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n    this.customGlyphs = this.customTypes.map((t) => Tables.getGlyphProps(this.duration, t));\n\n    // Note to play for audio players.\n    this.playNote = undefined;\n\n    // Positioning contexts used by the Formatter.\n    this.ignore_ticks = false;\n\n    // Positioning variables\n    this.width = 0; // Width in pixels calculated after preFormat\n    this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n    this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n    this.x_shift = 0; // X shift from tick context X\n    this.preFormatted = false; // Is this note preFormatted?\n    this.ys = []; // list of y coordinates for each note\n    // we need to hold on to these for ties and beams.\n\n    if (noteStruct.align_center) {\n      this.setCenterAlignment(noteStruct.align_center);\n    }\n\n    // The render surface.\n    this.render_options = {\n      annotation_spacing: 5,\n      glyph_font_scale: 1,\n      stroke_px: 1,\n      scale: 1,\n      font: '',\n      y_shift: 0,\n    };\n  }\n\n  /**\n   * Get the play note, which is arbitrary data that can be used by an\n   * audio player.\n   */\n  getPlayNote(): Note | undefined {\n    return this.playNote;\n  }\n\n  /**\n   * Set the play note, which is arbitrary data that can be used by an\n   * audio player.\n   */\n  setPlayNote(note: Note): this {\n    this.playNote = note;\n    return this;\n  }\n\n  /**\n   * @returns true if this note is a type of rest.\n   *\n   * Rests don't have pitches, but take up space in the score.\n   * Subclasses should override this default implementation.\n   */\n  isRest(): boolean {\n    return false;\n  }\n\n  /** Add stroke. */\n  addStroke(index: number, stroke: Stroke): this {\n    stroke.setNote(this);\n    stroke.setIndex(index);\n    this.modifiers.push(stroke);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the target stave. */\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  /** Check and get the target stave. */\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  /** Set the target stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n    this.setContext(this.stave.getContext());\n    return this;\n  }\n\n  /** Get spacing to the left of the notes. */\n  getLeftDisplacedHeadPx(): number {\n    return this.leftDisplacedHeadPx;\n  }\n\n  /** Get spacing to the right of the notes. */\n  getRightDisplacedHeadPx(): number {\n    return this.rightDisplacedHeadPx;\n  }\n\n  /** Set spacing to the left of the notes. */\n  setLeftDisplacedHeadPx(x: number): this {\n    this.leftDisplacedHeadPx = x;\n    return this;\n  }\n\n  /** Set spacing to the right of the notes. */\n  setRightDisplacedHeadPx(x: number): this {\n    this.rightDisplacedHeadPx = x;\n    return this;\n  }\n\n  /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Get the stave line number for the note. */\n  // eslint-disable-next-line\n  getLineNumber(isTopNote?: boolean): number {\n    return 0;\n  }\n\n  /** Get the stave line number for rest. */\n  getLineForRest(): number {\n    return 0;\n  }\n\n  /** Get the glyph associated with this note. */\n  // eslint-disable-next-line\n  getGlyph(): any {\n    return this.glyph;\n  }\n\n  /** Get the glyph width. */\n  getGlyphWidth(): number {\n    // TODO: FIXME (multiple potential values for this.glyph)\n    if (this.glyph) {\n      if (this.glyph.getMetrics) {\n        return this.glyph.getMetrics().width;\n      } else if (this.glyph.getWidth) {\n        return this.glyph.getWidth(this.render_options.glyph_font_scale);\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Set Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  setYs(ys: number[]): this {\n    this.ys = ys;\n    return this;\n  }\n\n  /**\n   * Get Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  getYs(): number[] {\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n    }\n\n    return this.ys;\n  }\n\n  /**\n   * Get the Y position of the space above the stave onto which text can\n   * be rendered.\n   */\n  getYForTopText(text_line: number): number {\n    return this.checkStave().getYForTopText(text_line);\n  }\n\n  /** Return the voice that this note belongs in. */\n  getVoice(): Voice {\n    if (!this.voice) throw new RuntimeError('NoVoice', 'Note has no voice.');\n    return this.voice;\n  }\n\n  /** Attach this note to `voice`. */\n  setVoice(voice: Voice): this {\n    this.voice = voice;\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the `TickContext` for this note. */\n  getTickContext(): TickContext {\n    return this.checkTickContext();\n  }\n\n  /** Set the `TickContext` for this note. */\n  setTickContext(tc: TickContext): this {\n    this.tickContext = tc;\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Accessor to duration. */\n  getDuration(): string {\n    return this.duration;\n  }\n\n  /** Accessor to isDotted. */\n  isDotted(): boolean {\n    return this.dots > 0;\n  }\n\n  /** Accessor to hasStem. */\n  hasStem(): boolean {\n    return false;\n  }\n\n  /** Accessor to note type. */\n  getNoteType(): string {\n    return this.noteType;\n  }\n\n  /** Get the beam. */\n  getBeam(): Beam | undefined {\n    return this.beam;\n  }\n\n  /** Check and get the beam. */\n  checkBeam(): Beam {\n    return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n  }\n\n  /** Check it has a beam. */\n  hasBeam(): boolean {\n    return this.beam != undefined;\n  }\n\n  /** Set the beam. */\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    return this;\n  }\n\n  /**\n   * Attach a modifier to this note.\n   * @param modifier the Modifier to add.\n   * @param index of the key to modify.\n   * @returns this\n   */\n  addModifier(modifier: Modifier, index: number = 0): this {\n    // Legacy versions of VexFlow had the two parameters swapped.\n    // We check here and throw an error if the argument types are not correct.\n    if (typeof modifier !== 'object' || typeof index !== 'number') {\n      throw new RuntimeError(\n        'WrongParams',\n        'Call signature to addModifier not supported, use addModifier(modifier: Modifier, index) instead.'\n      );\n    }\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the coordinates for where modifiers begin. */\n  // eslint-disable-next-line\n  getModifierStartXY(position?: number, index?: number, options?: any): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    return {\n      x: this.getAbsoluteX(),\n      y: this.ys[0],\n    };\n  }\n\n  /** Get the metrics for this note. */\n  getMetrics(): NoteMetrics {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n    }\n\n    const modLeftPx = this.modifierContext ? this.modifierContext.state.left_shift : 0;\n    const modRightPx = this.modifierContext ? this.modifierContext.state.right_shift : 0;\n    const width = this.getWidth();\n    const glyphWidth = this.getGlyphWidth();\n    const notePx =\n      width -\n      modLeftPx - // subtract left modifiers\n      modRightPx - // subtract right modifiers\n      this.leftDisplacedHeadPx - // subtract left displaced head\n      this.rightDisplacedHeadPx; // subtract right displaced head\n\n    return {\n      // ----------\n      // NOTE: If you change this, remember to update MockTickable in the tests/ directory.\n      // --------------\n      width,\n      glyphWidth,\n      notePx,\n\n      // Modifier spacing.\n      modLeftPx,\n      modRightPx,\n\n      // Displaced note head on left or right.\n      leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n      rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n      glyphPx: 0,\n    };\n  }\n\n  /**\n   * Get the absolute `X` position of this note's tick context. This\n   * excludes x_shift, so you'll need to factor it in if you're\n   * looking for the post-formatted x-position.\n   */\n  getAbsoluteX(): number {\n    const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n    // Position note to left edge of tick context.\n    let x = tickContext.getX();\n    if (this.stave) {\n      x += this.stave.getNoteStartX() + this.musicFont.lookupMetric('stave.padding');\n    }\n    if (this.isCenterAligned()) {\n      x += this.getCenterXShift();\n    }\n    return x;\n  }\n\n  /** Get the direction of the stem. */\n  getStemDirection(): number {\n    throw new RuntimeError('NoStem', 'No stem attached to this note.');\n  }\n\n  /** Get the top and bottom `y` values of the stem. */\n  getStemExtents(): Record<string, number> {\n    throw new RuntimeError('NoStem', 'No stem attached to this note.');\n  }\n\n  /** Get the `x` coordinate to the right of the note. */\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieStartX += note_glyph_width / 2;\n    tieStartX += -this.width / 2 + this.width + 2;\n\n    return tieStartX;\n  }\n\n  /** Get the `x` coordinate to the left of the note. */\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieEndX += note_glyph_width / 2;\n    tieEndX -= this.width / 2 + 2;\n\n    return tieEndX;\n  }\n\n  // Get the pitches in the note\n  getKeys(): string[] {\n    return this.keys;\n  }\n\n  // Get the properties for all the keys in the note\n  getKeyProps(): KeyProps[] {\n    return this.keyProps;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\n\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { log, RuntimeError } from './util';\n\n// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Stem.DEBUG) log('Vex.Flow.Stem', args);\n}\n\nexport interface StemOptions {\n  stem_down_y_base_offset?: number;\n  stem_up_y_base_offset?: number;\n  stem_down_y_offset?: number;\n  stem_up_y_offset?: number;\n  stemletHeight?: number;\n  isStemlet?: boolean;\n  hide?: boolean;\n  stem_direction?: number;\n  stem_extension?: number;\n  y_bottom?: number;\n  y_top?: number;\n  x_end?: number;\n  x_begin?: number;\n}\n\nexport class Stem extends Element {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'Stem';\n  }\n\n  // Stem directions\n  static get UP(): number {\n    return 1;\n  }\n  static get DOWN(): number {\n    return -1;\n  }\n\n  // Theme\n  static get WIDTH(): number {\n    return Tables.STEM_WIDTH;\n  }\n  static get HEIGHT(): number {\n    return Tables.STEM_HEIGHT;\n  }\n\n  protected hide: boolean;\n  protected isStemlet: boolean;\n  protected stemletHeight: number;\n  protected x_begin: number;\n  protected x_end: number;\n  protected y_top: number;\n  protected stem_up_y_offset: number = 0;\n  protected y_bottom: number;\n  protected stem_down_y_offset: number = 0;\n  protected stem_up_y_base_offset: number = 0;\n  protected stem_down_y_base_offset: number = 0;\n  protected stem_direction: number;\n  protected stem_extension: number;\n  protected renderHeightAdjustment: number;\n\n  constructor(options?: StemOptions) {\n    super();\n\n    // Default notehead x bounds\n    this.x_begin = options?.x_begin || 0;\n    this.x_end = options?.x_end || 0;\n\n    // Y bounds for top/bottom most notehead\n    this.y_top = options?.y_top || 0;\n    this.y_bottom = options?.y_bottom || 0;\n\n    // Stem top extension\n    this.stem_extension = options?.stem_extension || 0;\n\n    // Direction of the stem\n    this.stem_direction = options?.stem_direction || 0;\n\n    // Flag to override all draw calls\n    this.hide = options?.hide || false;\n\n    this.isStemlet = options?.isStemlet || false;\n    this.stemletHeight = options?.stemletHeight || 0;\n\n    // Use to adjust the rendered height without affecting\n    // the results of `.getExtents()`\n    this.renderHeightAdjustment = 0;\n    this.setOptions(options);\n  }\n\n  setOptions(options?: StemOptions): void {\n    // Changing where the stem meets the head\n    this.stem_up_y_offset = options?.stem_up_y_offset || 0;\n    this.stem_down_y_offset = options?.stem_down_y_offset || 0;\n    this.stem_up_y_base_offset = options?.stem_up_y_base_offset || 0;\n    this.stem_down_y_base_offset = options?.stem_down_y_base_offset || 0;\n  }\n\n  // Set the x bounds for the default notehead\n  setNoteHeadXBounds(x_begin: number, x_end: number): this {\n    this.x_begin = x_begin;\n    this.x_end = x_end;\n    return this;\n  }\n\n  // Set the direction of the stem in relation to the noteheads\n  setDirection(direction: number): void {\n    this.stem_direction = direction;\n  }\n\n  // Set the extension for the stem, generally for flags or beams\n  setExtension(ext: number): void {\n    this.stem_extension = ext;\n  }\n\n  getExtension(): number {\n    return this.stem_extension;\n  }\n\n  // The the y bounds for the top and bottom noteheads\n  setYBounds(y_top: number, y_bottom: number): void {\n    this.y_top = y_top;\n    this.y_bottom = y_bottom;\n  }\n\n  // Gets the entire height for the stem\n  getHeight(): number {\n    const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;\n    const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension); // parentheses just for grouping.\n    return unsigned_height * this.stem_direction;\n  }\n\n  getBoundingBox(): BoundingBox {\n    throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n  }\n\n  // Get the y coordinates for the very base of the stem to the top of\n  // the extension\n  getExtents(): Record<string, number> {\n    const isStemUp = this.stem_direction === Stem.UP;\n    const ys = [this.y_top, this.y_bottom];\n    const stemHeight = Stem.HEIGHT + this.stem_extension;\n\n    const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n    const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n    const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n\n    return { topY: stemTipY, baseY: outerMostNoteheadY };\n  }\n\n  setVisibility(isVisible: boolean): this {\n    this.hide = !isVisible;\n    return this;\n  }\n\n  setStemlet(isStemlet: boolean, stemletHeight: number): this {\n    this.isStemlet = isStemlet;\n    this.stemletHeight = stemletHeight;\n    return this;\n  }\n\n  adjustHeightForFlag(): void {\n    this.renderHeightAdjustment = this.musicFont.lookupMetric('stem.heightAdjustmentForFlag', -3);\n  }\n\n  adjustHeightForBeam(): void {\n    this.renderHeightAdjustment = -Stem.WIDTH / 2;\n  }\n\n  // Render the stem onto the canvas\n  draw(): void {\n    this.setRendered();\n    if (this.hide) return;\n    const ctx = this.checkContext();\n\n    let stem_x;\n    let stem_y;\n    const stem_direction = this.stem_direction;\n\n    let y_base_offset: number = 0;\n    if (stem_direction === Stem.DOWN) {\n      // Down stems are rendered to the left of the head.\n      stem_x = this.x_begin;\n      stem_y = this.y_top + this.stem_down_y_offset;\n      y_base_offset = this.stem_down_y_base_offset;\n    } else {\n      // Up stems are rendered to the right of the head.\n      stem_x = this.x_end;\n      stem_y = this.y_bottom - this.stem_up_y_offset;\n      y_base_offset = this.stem_up_y_base_offset;\n    }\n\n    const stemHeight = this.getHeight();\n\n    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n\n    // The offset from the stem's base which is required fo satisfy the stemlet height\n    const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\n\n    // Draw the stem\n    ctx.save();\n    this.applyStyle(ctx);\n    ctx.beginPath();\n    ctx.setLineWidth(Stem.WIDTH);\n    ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n    ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n    ctx.stroke();\n    this.restoreStyle(ctx);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { ElementStyle } from './element';\nimport { Glyph, GlyphProps } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { defined, log, RuntimeError } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (NoteHead.DEBUG) log('Vex.Flow.NoteHead', args);\n}\n\nexport interface NoteHeadStruct extends NoteStruct {\n  line?: number;\n  glyph_font_scale?: number;\n  slashed?: boolean;\n  style?: ElementStyle;\n  stem_down_x_offset?: number;\n  stem_up_x_offset?: number;\n  custom_glyph_code?: string;\n  x_shift?: number;\n  stem_direction?: number;\n  displaced?: boolean;\n  note_type?: string;\n  x?: number;\n  y?: number;\n  index?: number;\n}\n\n/**\n * Draw slashnote head manually. No glyph exists for this.\n * @param ctx the Canvas context\n * @param duration the duration of the note. ex: \"4\"\n * @param x the x coordinate to draw at\n * @param y the y coordinate to draw at\n * @param stem_direction the direction of the stem\n */\nfunction drawSlashNoteHead(\n  ctx: RenderContext,\n  duration: string,\n  x: number,\n  y: number,\n  stem_direction: number,\n  staveSpace: number\n) {\n  const width = Tables.SLASH_NOTEHEAD_WIDTH;\n  ctx.save();\n  ctx.setLineWidth(Tables.STEM_WIDTH);\n\n  let fill = false;\n\n  if (Tables.durationToNumber(duration) > 2) {\n    fill = true;\n  }\n\n  if (!fill) x -= (Tables.STEM_WIDTH / 2) * stem_direction;\n\n  ctx.beginPath();\n  ctx.moveTo(x, y + staveSpace);\n  ctx.lineTo(x, y + 1);\n  ctx.lineTo(x + width, y - staveSpace);\n  ctx.lineTo(x + width, y);\n  ctx.lineTo(x, y + staveSpace);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n\n  if (Tables.durationToFraction(duration).equals(0.5)) {\n    const breve_lines = [-3, -1, width + 1, width + 3];\n    for (let i = 0; i < breve_lines.length; i++) {\n      ctx.beginPath();\n      ctx.moveTo(x + breve_lines[i], y - 10);\n      ctx.lineTo(x + breve_lines[i], y + 11);\n      ctx.stroke();\n    }\n  }\n\n  ctx.restore();\n}\n\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'NoteHead';\n  }\n\n  glyph_code: string;\n\n  protected custom_glyph: boolean = false;\n  protected stem_up_x_offset: number = 0;\n  protected stem_down_x_offset: number = 0;\n  protected displaced: boolean;\n  protected stem_direction: number;\n\n  protected x: number;\n  protected y: number;\n  protected line: number;\n  protected index?: number;\n  protected slashed: boolean;\n\n  constructor(noteStruct: NoteHeadStruct) {\n    super(noteStruct);\n\n    this.index = noteStruct.index;\n    this.x = noteStruct.x || 0;\n    this.y = noteStruct.y || 0;\n    if (noteStruct.note_type) this.noteType = noteStruct.note_type;\n    this.displaced = noteStruct.displaced || false;\n    this.stem_direction = noteStruct.stem_direction || Stem.UP;\n    this.line = noteStruct.line || 0;\n\n    // Get glyph code based on duration and note type. This could be\n    // regular notes, rests, or other custom codes.\n    this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    this.glyph_code = this.glyph.code_head;\n    this.x_shift = noteStruct.x_shift || 0;\n    if (noteStruct.custom_glyph_code) {\n      this.custom_glyph = true;\n      this.glyph_code = noteStruct.custom_glyph_code;\n      this.stem_up_x_offset = noteStruct.stem_up_x_offset || 0;\n      this.stem_down_x_offset = noteStruct.stem_down_x_offset || 0;\n    }\n\n    this.style = noteStruct.style;\n    this.slashed = noteStruct.slashed || false;\n\n    this.render_options = {\n      ...this.render_options,\n      // font size for note heads\n      glyph_font_scale: noteStruct.glyph_font_scale || Tables.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: 3,\n    };\n\n    this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));\n  }\n\n  /** Get the width of the notehead. */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /** Determine if the notehead is displaced. */\n  isDisplaced(): boolean {\n    return this.displaced === true;\n  }\n\n  /** Get the glyph data. */\n  getGlyph(): GlyphProps {\n    return this.glyph;\n  }\n\n  /** Set the X coordinate. */\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  /** Get the Y coordinate. */\n  getY(): number {\n    return this.y;\n  }\n\n  /** Set the Y coordinate. */\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  /** Get the stave line the notehead is placed on. */\n  getLine(): number {\n    return this.line;\n  }\n\n  /** Set the stave line the notehead is placed on. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Get the canvas `x` coordinate position of the notehead. */\n  getAbsoluteX(): number {\n    // If the note has not been preformatted, then get the static x value\n    // Otherwise, it's been formatted and we should use it's x value relative\n    // to its tick context\n    const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n\n    // For a more natural displaced notehead, we adjust the displacement amount\n    // by half the stem width in order to maintain a slight overlap with the stem\n    const displacementStemAdjustment = Stem.WIDTH / 2;\n    const fontShift = this.musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\n    const displacedFontShift = this.musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;\n\n    return (\n      x +\n      fontShift +\n      (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0)\n    );\n  }\n\n  /** Get the `BoundingBox` for the `NoteHead`. */\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n    const spacing = this.checkStave().getSpacingBetweenLines();\n    const half_spacing = spacing / 2;\n    const min_y = this.y - half_spacing;\n\n    return new BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n  }\n\n  /** Set notehead to a provided `stave`. */\n  setStave(stave: Stave): this {\n    const line = this.getLine();\n\n    this.stave = stave;\n    if (this.stave) {\n      this.setY(this.stave.getYForNote(line));\n      this.setContext(this.stave.getContext());\n    }\n    return this;\n  }\n\n  /** Pre-render formatting. */\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Draw the notehead. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let head_x = this.getAbsoluteX();\n    if (this.custom_glyph) {\n      // head_x += this.x_shift;\n      head_x += this.stem_direction === Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;\n    }\n\n    const y = this.y;\n\n    L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", head_x, y);\n\n    // Begin and end positions for head.\n    const stem_direction = this.stem_direction;\n    const glyph_font_scale = this.render_options.glyph_font_scale;\n\n    if (this.style) {\n      this.applyStyle(ctx);\n    }\n\n    const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\n    if (this.noteType === 's') {\n      const staveSpace = this.checkStave().getSpacingBetweenLines();\n      drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n    } else {\n      Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\n        font: this.musicFont,\n        category: this.custom_glyph ? `noteHead.custom.${categorySuffix}` : `noteHead.standard.${categorySuffix}`,\n      });\n    }\n\n    if (this.style) {\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\n\nimport { Glyph } from './glyph';\nimport { GlyphProps } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { Stem, StemOptions } from './stem';\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n\nexport abstract class StemmableNote extends Note {\n  static get CATEGORY(): string {\n    return 'StemmableNote';\n  }\n\n  stem_direction?: number;\n  stem?: Stem;\n\n  protected flag?: Glyph;\n  protected stem_extension_override?: number;\n\n  constructor(noteStruct: NoteStruct) {\n    super(noteStruct);\n  }\n\n  // Get and set the note's `Stem`\n  getStem(): Stem | undefined {\n    return this.stem;\n  }\n\n  checkStem(): Stem {\n    if (!this.stem) {\n      throw new RuntimeError('NoStem', 'No stem attached to instance');\n    }\n    return this.stem;\n  }\n\n  setStem(stem: Stem): this {\n    this.stem = stem;\n    return this;\n  }\n\n  // Builds and sets a new stem\n  buildStem(): this {\n    const stem = new Stem();\n    this.setStem(stem);\n    return this;\n  }\n\n  buildFlag(category = 'flag'): void {\n    const { glyph } = this;\n\n    if (this.hasFlag()) {\n      const flagCode = this.getStemDirection() === Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;\n\n      this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\n    }\n  }\n\n  // Get the custom glyph associated with the outer note head on the base of the stem.\n  getBaseCustomNoteHeadGlyph(): GlyphProps {\n    if (this.getStemDirection() === Stem.DOWN) {\n      return this.customGlyphs[this.customGlyphs.length - 1];\n    } else {\n      return this.customGlyphs[0];\n    }\n  }\n\n  // Get the full length of stem\n  getStemLength(): number {\n    return Stem.HEIGHT + this.getStemExtension();\n  }\n\n  // Get the number of beams for this duration\n  getBeamCount(): number {\n    const glyph = this.getGlyph();\n\n    if (glyph) {\n      return glyph.beam_count;\n    } else {\n      return 0;\n    }\n  }\n\n  // Get the minimum length of stem\n  getStemMinimumLength(): number {\n    const frac = Tables.durationToFraction(this.duration);\n    let length = frac.value() <= 1 ? 0 : 20;\n    // if note is flagged, cannot shorten beam\n    switch (this.duration) {\n      case '8':\n        if (this.beam == undefined) length = 35;\n        break;\n      case '16':\n        length = this.beam == undefined ? 35 : 25;\n        break;\n      case '32':\n        length = this.beam == undefined ? 45 : 35;\n        break;\n      case '64':\n        length = this.beam == undefined ? 50 : 40;\n        break;\n      case '128':\n        length = this.beam == undefined ? 55 : 45;\n        break;\n      default:\n        break;\n    }\n    return length;\n  }\n\n  // Get/set the direction of the stem\n  getStemDirection(): number {\n    if (!this.stem_direction) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem_direction;\n  }\n\n  setStemDirection(direction?: number): this {\n    if (!direction) direction = Stem.UP;\n    if (direction !== Stem.UP && direction !== Stem.DOWN) {\n      throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n    }\n\n    this.stem_direction = direction;\n\n    if (this.stem) {\n      this.stem.setDirection(direction);\n      this.stem.setExtension(this.getStemExtension());\n\n      // Lookup the base custom notehead (closest to the base of the stem) to extend or shorten\n      // the stem appropriately. If there's no custom note head, lookup the standard notehead.\n      const glyph = this.getBaseCustomNoteHeadGlyph() || this.getGlyph();\n\n      // Get the font-specific customizations for the note heads.\n      const offsets = this.musicFont.lookupMetric(`stem.noteHead.${glyph.code_head}`, {\n        offsetYBaseStemUp: 0,\n        offsetYTopStemUp: 0,\n        offsetYBaseStemDown: 0,\n        offsetYTopStemDown: 0,\n      });\n\n      // Configure the stem to use these offsets.\n      this.stem.setOptions({\n        stem_up_y_offset: offsets.offsetYTopStemUp, // glyph.stem_up_y_offset,\n        stem_down_y_offset: offsets.offsetYTopStemDown, // glyph.stem_down_y_offset,\n        stem_up_y_base_offset: offsets.offsetYBaseStemUp, // glyph.stem_up_y_base_offset,\n        stem_down_y_base_offset: offsets.offsetYBaseStemDown, // glyph.stem_down_y_base_offset,\n      });\n    }\n\n    // Reset and reformat everything.\n    this.reset();\n    if (this.hasFlag()) {\n      this.buildFlag();\n    }\n    this.beam = undefined;\n    if (this.preFormatted) {\n      this.preFormat();\n    }\n    return this;\n  }\n\n  // Get the `x` coordinate of the stem\n  getStemX(): number {\n    const x_begin = this.getAbsoluteX() + this.x_shift;\n    const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n    const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n    return stem_x;\n  }\n\n  // Get the `x` coordinate for the center of the glyph.\n  // Used for `TabNote` stems and stemlets over rests\n  getCenterGlyphX(): number {\n    return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n  }\n\n  // Get the stem extension for the current duration\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != undefined) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === Stem.UP ? glyph.stem_up_extension : glyph.stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Set the stem length to a specific. Will override the default length.\n  setStemLength(height: number): this {\n    this.stem_extension_override = height - Stem.HEIGHT;\n    return this;\n  }\n\n  // Get the top and bottom `y` values of the stem.\n  getStemExtents(): Record<string, number> {\n    if (!this.stem) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem.getExtents();\n  }\n\n  /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n  getYForTopText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n\n      return Math.min(\n        stave.getYForTopText(textLine),\n        extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n      );\n    } else {\n      return stave.getYForTopText(textLine);\n    }\n  }\n\n  /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n  getYForBottomText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n\n      return Math.max(\n        stave.getYForTopText(textLine),\n        extents.baseY + this.render_options.annotation_spacing * textLine\n      );\n    } else {\n      return stave.getYForBottomText(textLine);\n    }\n  }\n\n  hasFlag(): boolean {\n    return Tables.getGlyphProps(this.duration).flag && !this.beam;\n  }\n\n  /** Post formats the note. */\n  postFormat(): this {\n    this.beam?.postFormat();\n    this.postFormatted = true;\n\n    return this;\n  }\n\n  /** Renders the stem onto the canvas. */\n  drawStem(stemOptions: StemOptions): void {\n    this.checkContext();\n    this.setRendered();\n\n    this.setStem(new Stem(stemOptions));\n    this.stem?.setContext(this.getContext()).draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// *Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.*\n//\n// See `tests/stavenote_tests.ts` for usage examples.\n\nimport { Accidental } from './accidental';\nimport { Beam } from './beam';\nimport { BoundingBox } from './boundingbox';\nimport { Dot } from './dot';\nimport { ElementStyle } from './element';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note, NoteStruct } from './note';\nimport { NoteHead } from './notehead';\nimport { Stave } from './stave';\nimport { Stem } from './stem';\nimport { StemOptions } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { defined, log, midLine, RuntimeError, warn } from './util';\n\nexport interface StaveNoteHeadBounds {\n  y_top: number;\n  y_bottom: number;\n  displaced_x?: number;\n  non_displaced_x?: number;\n  highest_line: number;\n  lowest_line: number;\n  highest_displaced_line?: number;\n  lowest_displaced_line?: number;\n  highest_non_displaced_line: number;\n  lowest_non_displaced_line: number;\n}\n\nexport interface StaveNoteFormatSettings {\n  line: number;\n  maxLine: number;\n  minLine: number;\n  isrest: boolean;\n  stemDirection?: number;\n  stemMax: number;\n  stemMin: number;\n  voice_shift: number;\n  is_displaced: boolean;\n  note: StaveNote;\n}\n\nexport interface StaveNoteStruct extends NoteStruct {\n  /** `Stem.UP` or `Stem.DOWN`. */\n  stem_direction?: number;\n  auto_stem?: boolean;\n  stem_down_x_offset?: number;\n  stem_up_x_offset?: number;\n  stroke_px?: number;\n  glyph_font_scale?: number;\n  octave_shift?: number;\n  clef?: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (StaveNote.DEBUG) log('Vex.Flow.StaveNote', args);\n}\n\nconst isInnerNoteIndex = (note: StaveNote, index: number) =>\n  index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest: StaveNoteFormatSettings, note: StaveNoteFormatSettings, dir: number) {\n  const delta = (note.isrest ? 0.0 : 1.0) * dir;\n\n  rest.line += delta;\n  rest.maxLine += delta;\n  rest.minLine += delta;\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest: StaveNoteFormatSettings, noteU: StaveNoteFormatSettings, noteL: StaveNoteFormatSettings) {\n  const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n  rest.line -= delta;\n  rest.maxLine -= delta;\n  rest.minLine -= delta;\n}\n\nexport class StaveNote extends StemmableNote {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'StaveNote';\n  }\n\n  /**\n   * @deprecated Use Stem.UP.\n   */\n  static get STEM_UP(): number {\n    return Stem.UP;\n  }\n\n  /**\n   * @deprecated Use Stem.DOWN.\n   */\n  static get STEM_DOWN(): number {\n    return Stem.DOWN;\n  }\n\n  static get DEFAULT_LEDGER_LINE_OFFSET(): number {\n    return 3;\n  }\n\n  static get minNoteheadPadding(): number {\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('glyphs.noteHead.minPadding');\n  }\n\n  minLine: number = 0;\n  maxLine: number = 0;\n\n  protected readonly clef: string;\n  protected readonly octave_shift?: number;\n\n  protected displaced: boolean;\n  protected dot_shiftY: number;\n  protected use_default_head_x: boolean;\n  protected note_heads: NoteHead[];\n  protected ledgerLineStyle: ElementStyle;\n  protected flagStyle?: ElementStyle;\n\n  // ## Static Methods\n  //\n  // Format notes inside a ModifierContext.\n  static format(notes: StaveNote[], state: ModifierContextState): boolean {\n    if (!notes || notes.length < 2) return false;\n\n    // FIXME: VexFlow will soon require that a stave be set before formatting.\n    // Which, according to the below condition, means that following branch will\n    // always be taken and the rest of this function is dead code.\n    //\n    // Problematically, `Formatter#formatByY` was not designed to work for more\n    // than 2 voices (although, doesn't throw on this condition, just tries\n    // to power through).\n    //\n    // Based on the above:\n    //   * 2 voices can be formatted *with or without* a stave being set but\n    //     the output will be different\n    //   * 3 voices can only be formatted *without* a stave\n    if (notes[0].getStave()) {\n      StaveNote.formatByY(notes, state);\n      return true;\n    }\n\n    const notesList: StaveNoteFormatSettings[] = [];\n\n    for (let i = 0; i < notes.length; i++) {\n      const props = notes[i].getKeyProps();\n      const line = props[0].line;\n      let minL = props[props.length - 1].line;\n      const stemDirection = notes[i].getStemDirection();\n      const stemMax = notes[i].getStemLength() / 10;\n      const stemMin = notes[i].getStemMinimumLength() / 10;\n\n      let maxL;\n      if (notes[i].isRest()) {\n        maxL = line + notes[i].glyph.line_above;\n        minL = line - notes[i].glyph.line_below;\n      } else {\n        maxL = stemDirection === 1 ? props[props.length - 1].line + stemMax : props[props.length - 1].line;\n\n        minL = stemDirection === 1 ? props[0].line : props[0].line - stemMax;\n      }\n\n      notesList.push({\n        line: props[0].line, // note/rest base line\n        maxLine: maxL, // note/rest upper bounds line\n        minLine: minL, // note/rest lower bounds line\n        isrest: notes[i].isRest(),\n        stemDirection: stemDirection,\n        stemMax, // Maximum (default) note stem length;\n        stemMin, // minimum note stem length\n        voice_shift: notes[i].getVoiceShiftWidth(),\n        is_displaced: notes[i].isDisplaced(), // note manually displaced\n        note: notes[i],\n      });\n    }\n\n    const voices = notesList.length;\n\n    let noteU = notesList[0];\n    const noteM = voices > 2 ? notesList[1] : undefined;\n    let noteL = voices > 2 ? notesList[2] : notesList[1];\n\n    // for two voice backward compatibility, ensure upper voice is stems up\n    // for three voices, the voices must be in order (upper, middle, lower)\n    if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n      noteU = notesList[1];\n      noteL = notesList[0];\n    }\n\n    const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n    let xShift = 0;\n    let stemDelta;\n\n    // Test for two voice note intersection\n    if (voices === 2) {\n      const lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n      // if top voice is a middle voice, check stem intersection with lower voice\n      if (noteU.stemDirection === noteL.stemDirection && noteU.minLine <= noteL.maxLine) {\n        if (!noteU.isrest) {\n          stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));\n          stemDelta = Math.max(stemDelta, noteU.stemMin);\n          noteU.minLine = noteU.line - stemDelta;\n          noteU.note.setStemLength(stemDelta * 10);\n        }\n      }\n      if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n        if (noteU.isrest) {\n          // shift rest up\n          shiftRestVertical(noteU, noteL, 1);\n        } else if (noteL.isrest) {\n          // shift rest down\n          shiftRestVertical(noteL, noteU, -1);\n        } else {\n          xShift = voiceXShift;\n          if (noteU.stemDirection === noteL.stemDirection) {\n            // upper voice is middle voice, so shift it right\n            noteU.note.setXShift(xShift + 3);\n          } else {\n            // shift lower voice right\n            noteL.note.setXShift(xShift);\n          }\n        }\n      }\n\n      // format complete\n      return true;\n    }\n\n    if (!noteM) throw new RuntimeError('InvalidState', 'noteM not defined.');\n\n    // Check middle voice stem intersection with lower voice\n    if (noteM.minLine < noteL.maxLine + 0.5) {\n      if (!noteM.isrest) {\n        stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));\n        stemDelta = Math.max(stemDelta, noteM.stemMin);\n        noteM.minLine = noteM.line - stemDelta;\n        noteM.note.setStemLength(stemDelta * 10);\n      }\n    }\n\n    // For three voices, test if rests can be repositioned\n    //\n    // Special case 1 :: middle voice rest between two notes\n    //\n    if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n      if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n        const restHeight = noteM.maxLine - noteM.minLine;\n        const space = noteU.minLine - noteL.maxLine;\n        if (restHeight < space) {\n          // center middle voice rest between the upper and lower voices\n          centerRest(noteM, noteU, noteL);\n        } else {\n          xShift = voiceXShift + 3; // shift middle rest right\n          noteM.note.setXShift(xShift);\n        }\n        // format complete\n        return true;\n      }\n    }\n\n    // Special case 2 :: all voices are rests\n    if (noteU.isrest && noteM.isrest && noteL.isrest) {\n      // Shift upper voice rest up\n      shiftRestVertical(noteU, noteM, 1);\n      // Shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n      // format complete\n      return true;\n    }\n\n    // Test if any other rests can be repositioned\n    if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n      // Shift middle voice rest up\n      shiftRestVertical(noteM, noteL, 1);\n    }\n    if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n      // Shift middle voice rest down\n      shiftRestVertical(noteM, noteU, -1);\n    }\n    if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n      // shift upper voice rest up;\n      shiftRestVertical(noteU, noteM, 1);\n    }\n    if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n      // shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n    }\n\n    // If middle voice intersects upper or lower voice\n    if (\n      (!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5) ||\n      (!noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine)\n    ) {\n      xShift = voiceXShift + 3; // shift middle note right\n      noteM.note.setXShift(xShift);\n    }\n\n    return true;\n  }\n\n  static formatByY(notes: StaveNote[], state: ModifierContextState): void {\n    // NOTE: this function does not support more than two voices per stave. Use with care.\n\n    let hasStave = true;\n    for (let i = 0; i < notes.length; i++) {\n      hasStave = hasStave && notes[i].getStave() != undefined;\n    }\n    if (!hasStave) {\n      throw new RuntimeError('NoStave', 'All notes must have a stave.');\n    }\n\n    let xShift = 0;\n\n    for (let i = 0; i < notes.length - 1; i++) {\n      let topNote = notes[i];\n      let bottomNote = notes[i + 1];\n\n      if (topNote.getStemDirection() === Stem.DOWN) {\n        topNote = notes[i + 1];\n        bottomNote = notes[i];\n      }\n\n      const topKeys = topNote.getKeyProps();\n      const bottomKeys = bottomNote.getKeyProps();\n\n      const HALF_NOTEHEAD_HEIGHT = 0.5;\n\n      // `keyProps` and `stave.getYForLine` have different notions of a `line`\n      // so we have to convert the keyProps value by subtracting 5.\n      // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas\n      //\n      // We also extend the y for each note by a half notehead because the\n      // notehead's origin is centered\n      const topStave = topNote.checkStave();\n      const topNoteBottomY = topStave.getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);\n\n      const bottomStave = bottomNote.checkStave();\n      const bottomNoteTopY = bottomStave.getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);\n\n      const areNotesColliding =\n        bottomNoteTopY != undefined && topNoteBottomY != undefined ? bottomNoteTopY - topNoteBottomY < 0 : false;\n\n      if (areNotesColliding) {\n        xShift = topNote.getVoiceShiftWidth() + 2;\n        bottomNote.setXShift(xShift);\n      }\n    }\n\n    state.right_shift += xShift;\n  }\n\n  static postFormat(notes: Note[]): boolean {\n    if (!notes) return false;\n\n    notes.forEach((note) => note.postFormat());\n\n    return true;\n  }\n\n  constructor(noteStruct: StaveNoteStruct) {\n    super(noteStruct);\n\n    this.ledgerLineStyle = {};\n\n    this.clef = noteStruct.clef ?? 'treble';\n    this.octave_shift = noteStruct.octave_shift ?? 0;\n\n    // Pull note rendering properties.\n    this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    // if true, displace note to right\n    this.displaced = false;\n    this.dot_shiftY = 0;\n    // for displaced ledger lines\n    this.use_default_head_x = false;\n\n    // Drawing\n    this.note_heads = [];\n    this.modifiers = [];\n\n    this.render_options = {\n      ...this.render_options,\n      // font size for note heads and rests\n      glyph_font_scale: noteStruct.glyph_font_scale || Tables.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET,\n    };\n\n    this.calculateKeyProps();\n    this.buildStem();\n\n    // Set the stem direction\n    if (noteStruct.auto_stem) {\n      this.autoStem();\n    } else {\n      this.setStemDirection(noteStruct.stem_direction ?? Stem.UP);\n    }\n    this.reset();\n    this.buildFlag();\n  }\n\n  reset(): this {\n    super.reset();\n\n    // Save prior noteHead styles & reapply them after making new noteheads.\n    const noteHeadStyles = this.note_heads.map((noteHead) => noteHead.getStyle());\n    this.buildNoteHeads();\n    this.note_heads.forEach((noteHead, index) => {\n      const noteHeadStyle = noteHeadStyles[index];\n      if (noteHeadStyle) noteHead.setStyle(noteHeadStyle);\n    });\n\n    const stave = this.stave;\n    if (stave) {\n      this.note_heads.forEach((head) => head.setStave(stave));\n    }\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  // Builds a `Stem` for the note\n  buildStem(): this {\n    this.setStem(new Stem({ hide: !!this.isRest() }));\n    return this;\n  }\n\n  // Builds a `NoteHead` for each key in the note\n  buildNoteHeads(): void {\n    this.note_heads = [];\n    const stemDirection = this.getStemDirection();\n    const keys = this.getKeys();\n\n    let lastLine = undefined;\n    let lineDiff = undefined;\n    let displaced = false;\n\n    // Draw notes from bottom to top.\n\n    // For down-stem notes, we draw from top to bottom.\n    let start: number;\n    let end: number;\n    let step: number;\n    if (stemDirection === Stem.UP) {\n      start = 0;\n      end = keys.length;\n      step = 1;\n    } else {\n      start = keys.length - 1;\n      end = -1;\n      step = -1;\n    }\n\n    for (let i = start; i !== end; i += step) {\n      const noteProps = this.keyProps[i];\n      const line = noteProps.line;\n\n      // Keep track of last line with a note head, so that consecutive heads\n      // are correctly displaced.\n      if (lastLine === undefined) {\n        lastLine = line;\n      } else {\n        lineDiff = Math.abs(lastLine - line);\n        if (lineDiff === 0 || lineDiff === 0.5) {\n          displaced = !displaced;\n        } else {\n          displaced = false;\n          this.use_default_head_x = true;\n        }\n      }\n      lastLine = line;\n\n      const notehead = new NoteHead({\n        duration: this.duration,\n        note_type: this.noteType,\n        displaced,\n        stem_direction: stemDirection,\n        custom_glyph_code: noteProps.code,\n        glyph_font_scale: this.render_options.glyph_font_scale,\n        x_shift: noteProps.shift_right,\n        stem_up_x_offset: noteProps.stem_up_x_offset,\n        stem_down_x_offset: noteProps.stem_down_x_offset,\n        line: noteProps.line,\n      });\n\n      this.note_heads[i] = notehead;\n    }\n  }\n\n  // Automatically sets the stem direction based on the keys in the note\n  autoStem(): void {\n    this.setStemDirection(this.calculateOptimalStemDirection());\n  }\n\n  calculateOptimalStemDirection(): number {\n    // Figure out optimal stem direction based on given notes\n    this.minLine = this.keyProps[0].line;\n    this.maxLine = this.keyProps[this.keyProps.length - 1].line;\n\n    const MIDDLE_LINE = 3;\n    const decider = (this.minLine + this.maxLine) / 2;\n    const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n\n    return stemDirection;\n  }\n\n  // Calculates and stores the properties for each key in the note\n  calculateKeyProps(): void {\n    let lastLine: number | undefined;\n    for (let i = 0; i < this.keys.length; ++i) {\n      const key = this.keys[i];\n\n      // All rests use the same position on the line.\n      // if (this.glyph.rest) key = this.glyph.position;\n      if (this.glyph.rest) this.glyph.position = key;\n\n      const options = { octave_shift: this.octave_shift || 0 };\n      const props = Tables.keyProperties(key, this.clef, options);\n\n      if (!props) {\n        throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n      }\n\n      // Override line placement for default rests\n      if (props.key === 'R') {\n        if (this.duration === '1' || this.duration === 'w') {\n          props.line = 4;\n        } else {\n          props.line = 3;\n        }\n      }\n\n      // Calculate displacement of this note\n      const line = props.line;\n      if (lastLine == undefined) {\n        lastLine = line;\n      } else {\n        if (Math.abs(lastLine - line) === 0.5) {\n          this.displaced = true;\n          props.displaced = true;\n\n          // Have to mark the previous note as\n          // displaced as well, for modifier placement\n          if (this.keyProps.length > 0) {\n            this.keyProps[i - 1].displaced = true;\n          }\n        }\n      }\n\n      lastLine = line;\n      this.keyProps.push(props);\n    }\n\n    // Sort the notes from lowest line to highest line\n    lastLine = undefined;\n    this.keyProps.forEach((key) => {\n      if (lastLine && key.line < lastLine) {\n        warn('Unsorted keys in note will be sorted. ' + 'See https://github.com/0xfe/vexflow/issues/104 for details.');\n      }\n      lastLine = key.line;\n    });\n    this.keyProps.sort((a, b) => a.line - b.line);\n  }\n\n  // Get the `BoundingBox` for the entire note\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n\n    const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();\n    const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;\n\n    let minY: number = 0;\n    let maxY: number = 0;\n    const halfLineSpacing = (this.getStave()?.getSpacingBetweenLines() ?? 0) / 2;\n    const lineSpacing = halfLineSpacing * 2;\n\n    if (this.isRest()) {\n      const y = this.ys[0];\n      const frac = Tables.durationToFraction(this.duration);\n      if (frac.equals(1) || frac.equals(2)) {\n        minY = y - halfLineSpacing;\n        maxY = y + halfLineSpacing;\n      } else {\n        minY = y - this.glyph.line_above * lineSpacing;\n        maxY = y + this.glyph.line_below * lineSpacing;\n      }\n    } else if (this.glyph.stem) {\n      const ys = this.getStemExtents();\n      ys.baseY += halfLineSpacing * this.getStemDirection();\n      minY = Math.min(ys.topY, ys.baseY);\n      maxY = Math.max(ys.topY, ys.baseY);\n    } else {\n      minY = 0;\n      maxY = 0;\n\n      for (let i = 0; i < this.ys.length; ++i) {\n        const yy = this.ys[i];\n        if (i === 0) {\n          minY = yy;\n          maxY = yy;\n        } else {\n          minY = Math.min(yy, minY);\n          maxY = Math.max(yy, maxY);\n        }\n      }\n      minY -= halfLineSpacing;\n      maxY += halfLineSpacing;\n    }\n\n    return new BoundingBox(x, minY, w, maxY - minY);\n  }\n\n  // Gets the line number of the bottom note in the chord.\n  // If `isTopNote` is `true` then get the top note's line number instead\n  getLineNumber(isTopNote?: boolean): number {\n    if (!this.keyProps.length) {\n      throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n    }\n\n    let resultLine = this.keyProps[0].line;\n\n    // No precondition assumed for sortedness of keyProps array\n    for (let i = 0; i < this.keyProps.length; i++) {\n      const thisLine = this.keyProps[i].line;\n      if (isTopNote) {\n        if (thisLine > resultLine) resultLine = thisLine;\n      } else {\n        if (thisLine < resultLine) resultLine = thisLine;\n      }\n    }\n\n    return resultLine;\n  }\n\n  /**\n   * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n   */\n  isRest(): boolean {\n    return this.glyph.rest;\n  }\n\n  // Determine if the current note is a chord\n  isChord(): boolean {\n    return !this.isRest() && this.keys.length > 1;\n  }\n\n  // Determine if the `StaveNote` has a stem\n  hasStem(): boolean {\n    return this.glyph.stem;\n  }\n\n  hasFlag(): boolean {\n    return super.hasFlag() && !this.isRest();\n  }\n\n  getStemX(): number {\n    if (this.noteType === 'r') {\n      return this.getCenterGlyphX();\n    } else {\n      // We adjust the origin of the stem because we want the stem left-aligned\n      // with the notehead if stemmed-down, and right-aligned if stemmed-up\n      return super.getStemX() + (this.stem_direction ? Stem.WIDTH / (2 * -this.stem_direction) : 0);\n    }\n  }\n\n  // Get the `y` coordinate for text placed on the top/bottom of a\n  // note at a desired `text_line`\n  getYForTopText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.min(\n      this.checkStave().getYForTopText(textLine),\n      extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n    );\n  }\n  getYForBottomText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.max(\n      this.checkStave().getYForTopText(textLine),\n      extents.baseY + this.render_options.annotation_spacing * textLine\n    );\n  }\n\n  // Sets the current note to the provided `stave`. This applies\n  // `y` values to the `NoteHeads`.\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n\n    const ys = this.note_heads.map((notehead) => {\n      notehead.setStave(stave);\n      return notehead.getY();\n    });\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      this.stem.setYBounds(y_top, y_bottom);\n    }\n\n    return this;\n  }\n\n  // Check if note is shifted to the right\n  isDisplaced(): boolean {\n    return this.displaced;\n  }\n\n  // Sets whether shift note to the right. `displaced` is a `boolean`\n  setNoteDisplaced(displaced: boolean): this {\n    this.displaced = displaced;\n    return this;\n  }\n\n  // Get the starting `x` coordinate for a `StaveTie`\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;\n    if (this.modifierContext) tieStartX += this.modifierContext.getRightShift();\n    return tieStartX;\n  }\n\n  // Get the ending `x` coordinate for a `StaveTie`\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    tieEndX += this.x_shift - this.leftDisplacedHeadPx;\n    return tieEndX;\n  }\n\n  // Get the stave line on which to place a rest\n  getLineForRest(): number {\n    let restLine = this.keyProps[0].line;\n    if (this.keyProps.length > 1) {\n      const lastLine = this.keyProps[this.keyProps.length - 1].line;\n      const top = Math.max(restLine, lastLine);\n      const bot = Math.min(restLine, lastLine);\n      restLine = midLine(top, bot);\n    }\n\n    return restLine;\n  }\n\n  // Get the default `x` and `y` coordinates for the provided `position`\n  // and key `index`\n  getModifierStartXY(\n    position: number,\n    index: number,\n    options: { forceFlagRight?: boolean } = {}\n  ): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n    let x = 0;\n    if (position === LEFT) {\n      // FIXME: Left modifier padding, move to font file\n      x = -1 * 2;\n    } else if (position === RIGHT) {\n      // FIXME: Right modifier padding, move to font file\n      x = this.getGlyphWidth() + this.x_shift + 2;\n\n      if (\n        this.stem_direction === Stem.UP &&\n        this.hasFlag() &&\n        (options.forceFlagRight || isInnerNoteIndex(this, index))\n      ) {\n        x += this?.flag?.getMetrics().width ?? 0;\n      }\n    } else if (position === BELOW || position === ABOVE) {\n      x = this.getGlyphWidth() / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Sets the style of the complete StaveNote, including all keys\n  // and the stem.\n  setStyle(style: ElementStyle): this {\n    super.setStyle(style);\n    this.note_heads.forEach((notehead) => notehead.setStyle(style));\n    this.stem?.setStyle(style);\n    return this;\n  }\n\n  setStemStyle(style: ElementStyle): this {\n    const stem = this.getStem();\n    stem?.setStyle(style);\n    return this;\n  }\n  getStemStyle(): ElementStyle | undefined {\n    return this.stem?.getStyle();\n  }\n\n  setLedgerLineStyle(style: ElementStyle): void {\n    this.ledgerLineStyle = style;\n  }\n\n  getLedgerLineStyle(): ElementStyle {\n    return this.ledgerLineStyle;\n  }\n\n  setFlagStyle(style: ElementStyle): void {\n    this.flagStyle = style;\n  }\n  getFlagStyle(): ElementStyle | undefined {\n    return this.flagStyle;\n  }\n\n  // Sets the notehead at `index` to the provided coloring `style`.\n  //\n  // `style` is an `object` with the following properties: `shadowColor`,\n  // `shadowBlur`, `fillStyle`, `strokeStyle`\n  setKeyStyle(index: number, style: ElementStyle): this {\n    this.note_heads[index].setStyle(style);\n    return this;\n  }\n\n  setKeyLine(index: number, line: number): this {\n    this.keyProps[index].line = line;\n    this.reset();\n    return this;\n  }\n\n  getKeyLine(index: number): number {\n    return this.keyProps[index].line;\n  }\n\n  // Helper function to add an accidental to a key\n  addAccidental(index: number, accidental: Modifier): this {\n    return this.addModifier(accidental, index);\n  }\n\n  // Helper function to add an articulation to a key\n  addArticulation(index: number, articulation: Modifier): this {\n    return this.addModifier(articulation, index);\n  }\n\n  // Helper function to add an annotation to a key\n  addAnnotation(index: number, annotation: Modifier): this {\n    return this.addModifier(annotation, index);\n  }\n\n  // Helper function to add a dot on a specific key\n  addDot(index: number): this {\n    const dot = new Dot();\n    dot.setDotShiftY(this.glyph.dot_shiftY);\n    this.dots++;\n    return this.addModifier(dot, index);\n  }\n\n  // Convenience method to add dot to all keys in note\n  addDotToAll(): this {\n    for (let i = 0; i < this.keys.length; ++i) {\n      this.addDot(i);\n    }\n    return this;\n  }\n\n  // Get all accidentals in the `ModifierContext`\n  getAccidentals(): Accidental[] {\n    return this.checkModifierContext().getMembers(Accidental.CATEGORY) as Accidental[];\n  }\n\n  // Get all dots in the `ModifierContext`\n  getDots(): Dot[] {\n    return this.checkModifierContext().getMembers(Dot.CATEGORY) as Dot[];\n  }\n\n  // Get the width of the note if it is displaced. Used for `Voice`\n  // formatting\n  getVoiceShiftWidth(): number {\n    // TODO: may need to accomodate for dot here.\n    return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n  }\n\n  // Calculates and sets the extra pixels to the left or right\n  // if the note is displaced.\n  calcNoteDisplacements(): void {\n    this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === Stem.DOWN ? this.getGlyphWidth() : 0);\n\n    // For upstems with flags, the extra space is unnecessary, since it's taken\n    // up by the flag.\n    this.setRightDisplacedHeadPx(\n      !this.hasFlag() && this.displaced && this.stem_direction === Stem.UP ? this.getGlyphWidth() : 0\n    );\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    let noteHeadPadding = 0;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      // If there are no modifiers on this note, make sure there is adequate padding\n      // between the notes.\n      if (this.modifierContext.getWidth() === 0) {\n        noteHeadPadding = StaveNote.minNoteheadPadding;\n      }\n    }\n\n    let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n\n    // For upward flagged notes, the width of the flag needs to be added\n    if (this.shouldDrawFlag() && this.stem_direction === Stem.UP) {\n      width += this.getGlyphWidth();\n      // TODO: Add flag width as a separate metric\n    }\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n  }\n\n  /**\n   * @typedef {Object} noteHeadBounds\n   * @property {number} y_top the highest notehead bound\n   * @property {number} y_bottom the lowest notehead bound\n   * @property {number|Null} displaced_x the starting x for displaced noteheads\n   * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads\n   * @property {number} highest_line the highest notehead line in traditional music line\n   *  numbering (bottom line = 1, top line = 5)\n   * @property {number} lowest_line the lowest notehead line\n   * @property {number|false} highest_displaced_line the highest staff line number\n   *   for a displaced notehead\n   * @property {number|false} lowest_displaced_line\n   * @property {number} highest_non_displaced_line\n   * @property {number} lowest_non_displaced_line\n   */\n\n  /**\n   * Get the staff line and y value for the highest & lowest noteheads\n   * @returns {noteHeadBounds}\n   */\n  getNoteHeadBounds(): StaveNoteHeadBounds {\n    // Top and bottom Y values for stem.\n    let yTop: number = +Infinity;\n    let yBottom: number = -Infinity;\n    let nonDisplacedX: number | undefined;\n    let displacedX: number | undefined;\n\n    let highestLine = this.checkStave().getNumLines();\n    let lowestLine = 1;\n    let highestDisplacedLine: number | undefined;\n    let lowestDisplacedLine: number | undefined;\n    let highestNonDisplacedLine = highestLine;\n    let lowestNonDisplacedLine = lowestLine;\n\n    this.note_heads.forEach((notehead) => {\n      const line: number = notehead.getLine();\n      const y = notehead.getY();\n\n      yTop = Math.min(y, yTop);\n      yBottom = Math.max(y, yBottom);\n\n      if (displacedX === undefined && notehead.isDisplaced()) {\n        displacedX = notehead.getAbsoluteX();\n      }\n\n      if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n        nonDisplacedX = notehead.getAbsoluteX();\n      }\n\n      highestLine = Math.max(line, highestLine);\n      lowestLine = Math.min(line, lowestLine);\n\n      if (notehead.isDisplaced()) {\n        highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n        lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n      } else {\n        highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n        lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n      }\n    }, this);\n\n    return {\n      y_top: yTop,\n      y_bottom: yBottom,\n      displaced_x: displacedX,\n      non_displaced_x: nonDisplacedX,\n      highest_line: highestLine,\n      lowest_line: lowestLine,\n      highest_displaced_line: highestDisplacedLine,\n      lowest_displaced_line: lowestDisplacedLine,\n      highest_non_displaced_line: highestNonDisplacedLine,\n      lowest_non_displaced_line: lowestNonDisplacedLine,\n    };\n  }\n\n  // Get the starting `x` coordinate for the noteheads\n  getNoteHeadBeginX(): number {\n    return this.getAbsoluteX() + this.x_shift;\n  }\n\n  // Get the ending `x` coordinate for the noteheads\n  getNoteHeadEndX(): number {\n    const xBegin = this.getNoteHeadBeginX();\n    return xBegin + this.getGlyphWidth();\n  }\n\n  // Draw the ledger lines between the stave and the highest/lowest keys\n  drawLedgerLines(): void {\n    const stave = this.checkStave();\n    const {\n      glyph,\n      render_options: { stroke_px },\n    } = this;\n    const ctx = this.checkContext();\n    const width = glyph.getWidth() + stroke_px * 2;\n    const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - Stem.WIDTH / 2;\n\n    if (this.isRest()) return;\n    if (!ctx) {\n      throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const {\n      highest_line,\n      lowest_line,\n      highest_displaced_line,\n      highest_non_displaced_line,\n      lowest_displaced_line,\n      lowest_non_displaced_line,\n      displaced_x,\n      non_displaced_x,\n    } = this.getNoteHeadBounds();\n\n    // Early out if there are no ledger lines to draw.\n    if (highest_line < 6 && lowest_line > 0) return;\n\n    const min_x = Math.min(displaced_x ?? 0, non_displaced_x ?? 0);\n\n    const drawLedgerLine = (y: number, normal: boolean, displaced: boolean) => {\n      let x;\n      if (displaced && normal) x = min_x - stroke_px;\n      else if (normal) x = (non_displaced_x ?? 0) - stroke_px;\n      else x = (displaced_x ?? 0) - stroke_px;\n      const ledgerWidth = normal && displaced ? doubleWidth : width;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + ledgerWidth, y);\n      ctx.stroke();\n    };\n\n    const style = { ...stave.getDefaultLedgerLineStyle(), ...this.getLedgerLineStyle() };\n    this.applyStyle(ctx, style);\n\n    // Draw ledger lines below the staff:\n    for (let line = 6; line <= highest_line; ++line) {\n      const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;\n      const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    // Draw ledger lines above the staff:\n    for (let line = 0; line >= lowest_line; --line) {\n      const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;\n      const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    this.restoreStyle(ctx, style);\n  }\n\n  // Draw all key modifiers\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      const index = modifier.checkIndex();\n      const notehead = this.note_heads[index];\n      const noteheadStyle = notehead.getStyle();\n      notehead.applyStyle(ctx, noteheadStyle);\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n      notehead.restoreStyle(ctx, noteheadStyle);\n    }\n    ctx.closeGroup();\n  }\n\n  shouldDrawFlag(): boolean {\n    const hasStem = this.stem !== undefined;\n    const hasFlag = this.glyph.flag as boolean; // specified in tables.js\n    const hasNoBeam = this.beam === undefined;\n    return hasStem && hasFlag && hasNoBeam;\n  }\n\n  // Draw the flag for the note\n  drawFlag(): void {\n    const ctx = this.checkContext();\n    if (!ctx) {\n      throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    if (this.shouldDrawFlag()) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      // eslint-disable-next-line\n      const noteStemHeight = this.stem!.getHeight();\n      const flagX = this.getStemX();\n      // FIXME: What's with the magic +/- 2\n      // ANSWER: a corner of the note stem pokes out beyond the tip of the flag.\n      // The extra +/- 2 pushes the flag glyph outward so it covers the stem entirely.\n      // Alternatively, we could shorten the stem.\n      const flagY =\n        this.getStemDirection() === Stem.DOWN\n          ? // Down stems are below the note head and have flags on the right.\n            y_top - noteStemHeight + 2\n          : // Up stems are above the note head and have flags on the right.\n            y_bottom - noteStemHeight - 2;\n\n      // Draw the Flag\n      ctx.openGroup('flag', undefined, { pointerBBox: true });\n      this.applyStyle(ctx, this.getFlagStyle());\n      this.flag?.render(ctx, flagX, flagY);\n      this.restoreStyle(ctx, this.getFlagStyle());\n      ctx.closeGroup();\n    }\n  }\n\n  // Draw the NoteHeads\n  drawNoteHeads(): void {\n    const ctx = this.checkContext();\n    this.note_heads.forEach((notehead) => {\n      ctx.openGroup('notehead', undefined, { pointerBBox: true });\n      notehead.setContext(ctx).draw();\n      ctx.closeGroup();\n    });\n  }\n\n  drawStem(stemOptions?: StemOptions): void {\n    // GCR TODO: I can't find any context in which this is called with the stemStruct\n    // argument in the codebase or tests. Nor can I find a case where super.drawStem\n    // is called at all. Perhaps these should be removed?\n    const ctx = this.checkContext();\n\n    if (stemOptions) {\n      this.setStem(new Stem(stemOptions));\n    }\n\n    // If we will render a flag, we shorten the stem so that the tip\n    // does not poke through the flag.\n    if (this.shouldDrawFlag() && this.stem) {\n      this.stem.adjustHeightForFlag();\n    }\n\n    ctx.openGroup('stem', undefined, { pointerBBox: true });\n    this.stem?.setContext(ctx).draw();\n    ctx.closeGroup();\n  }\n\n  /**\n   * Override stemmablenote stem extension to adjust for distance from middle line.\n   */\n  getStemExtension(): number {\n    const super_stem_extension = super.getStemExtension();\n    if (!this.glyph.stem) {\n      return super_stem_extension;\n    }\n\n    const stem_direction = this.getStemDirection();\n    if (stem_direction !== this.calculateOptimalStemDirection()) {\n      return super_stem_extension; // no adjustment for manually set stem direction.\n    }\n    let mid_line_distance;\n    const MIDDLE_LINE = 3;\n    if (stem_direction === Stem.UP) {\n      // Note that the use of maxLine here instead of minLine might\n      // seem counterintuitive, but in the case of (say) treble clef\n      // chord(F2, E4) stem up, we do not want to extend the stem because\n      // of F2, when a normal octave-length stem above E4 is fine.\n      //\n      // maxLine and minLine are set in calculateOptimalStemDirection() so\n      // will be known.\n      mid_line_distance = MIDDLE_LINE - this.maxLine;\n    } else {\n      mid_line_distance = this.minLine - MIDDLE_LINE;\n    }\n\n    // how many lines more than an octave is the relevant notehead?\n    const lines_over_octave_from_mid_line = mid_line_distance - 3.5;\n    if (lines_over_octave_from_mid_line <= 0) {\n      return super_stem_extension;\n    }\n    const stave = this.getStave();\n    let spacing_between_lines = 10;\n    if (stave != undefined) {\n      spacing_between_lines = stave.getSpacingBetweenLines();\n    }\n    return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;\n  }\n\n  // Draws all the `StaveNote` parts. This is the main drawing method.\n  draw(): void {\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    const ctx = this.checkContext();\n    const xBegin = this.getNoteHeadBeginX();\n    const shouldRenderStem = this.hasStem() && !this.beam;\n\n    // Format note head x positions\n    this.note_heads.forEach((notehead) => notehead.setX(xBegin));\n\n    // Format stem x positions\n    const stemX = this.getStemX();\n    this.stem?.setNoteHeadXBounds(stemX, stemX);\n\n    L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n\n    // Apply the overall style -- may be contradicted by local settings:\n    this.applyStyle();\n    this.setAttribute('el', ctx.openGroup('stavenote', this.getAttribute('id')));\n    this.drawLedgerLines();\n    ctx.openGroup('note', undefined, { pointerBBox: true });\n    if (shouldRenderStem) this.drawStem();\n    this.drawNoteHeads();\n    this.drawFlag();\n    ctx.closeGroup();\n    this.drawModifiers();\n    ctx.closeGroup();\n    this.restoreStyle();\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { StaveNote, StaveNoteStruct } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n\nexport interface GraceNoteStruct extends StaveNoteStruct {\n  slash?: boolean;\n}\n\nexport class GraceNote extends StaveNote {\n  static get CATEGORY(): string {\n    return 'GraceNote';\n  }\n\n  static get LEDGER_LINE_OFFSET(): number {\n    return 2;\n  }\n\n  static get SCALE(): number {\n    return 0.66;\n  }\n\n  protected slash: boolean;\n  protected slur: boolean;\n\n  constructor(noteStruct: GraceNoteStruct) {\n    super({\n      glyph_font_scale: Tables.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,\n      stroke_px: GraceNote.LEDGER_LINE_OFFSET,\n      ...noteStruct,\n    });\n\n    this.slash = noteStruct.slash || false;\n    this.slur = true;\n\n    this.buildNoteHeads();\n\n    this.width = 3;\n  }\n\n  getStemExtension(): number {\n    if (this.stem_extension_override) {\n      return this.stem_extension_override;\n    }\n\n    const glyph = this.getGlyph();\n    if (glyph) {\n      let ret = super.getStemExtension();\n      if (glyph.stem) {\n        const staveNoteScale = this.getStaveNoteScale();\n        ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n      }\n      return ret;\n    }\n\n    return 0;\n  }\n\n  // FIXME: move this to more basic class.\n  getStaveNoteScale(): number {\n    return this.render_options.glyph_font_scale / Tables.DEFAULT_NOTATION_FONT_SCALE;\n  }\n\n  draw(): void {\n    super.draw();\n    this.setRendered();\n    const stem = this.stem;\n    if (this.slash && stem) {\n      const staveNoteScale = this.getStaveNoteScale();\n\n      // some magic numbers are based on the staveNoteScale 0.66.\n      const offsetScale = staveNoteScale / 0.66;\n      let slashBBox = undefined;\n      const beam = this.beam;\n      if (beam) {\n        // FIXME: should render slash after beam?\n        if (!beam.postFormatted) {\n          beam.postFormat();\n        }\n\n        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n          stem: 6 * offsetScale,\n          beam: 5 * offsetScale,\n        });\n      } else {\n        const stem_direction = this.getStemDirection();\n        const noteHeadBounds = this.getNoteHeadBounds();\n        const noteStemHeight = stem.getHeight();\n        let x = this.getAbsoluteX();\n        let y =\n          stem_direction === Stem.DOWN\n            ? noteHeadBounds.y_top - noteStemHeight\n            : noteHeadBounds.y_bottom - noteStemHeight;\n\n        const defaultStemExtention =\n          stem_direction === Stem.DOWN ? this.glyph.stem_down_extension : this.glyph.stem_up_extension;\n\n        let defaultOffsetY = Tables.STEM_HEIGHT;\n        defaultOffsetY -= defaultOffsetY / 2.8;\n        defaultOffsetY += defaultStemExtention;\n        y += defaultOffsetY * staveNoteScale * stem_direction;\n\n        const offsets =\n          stem_direction === Stem.UP\n            ? {\n                x1: 1,\n                y1: 0,\n                x2: 13,\n                y2: -9,\n              }\n            : {\n                x1: -4,\n                y1: 1,\n                x2: 13,\n                y2: 9,\n              };\n\n        x += offsets.x1 * offsetScale;\n        y += offsets.y1 * offsetScale;\n        slashBBox = {\n          x1: x,\n          y1: y,\n          x2: x + offsets.x2 * offsetScale,\n          y2: y + offsets.y2 * offsetScale,\n        };\n      }\n\n      // FIXME: avoid staff lines, ledger lines or others.\n\n      const ctx = this.checkContext();\n      ctx.save();\n      ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n      ctx.beginPath();\n      ctx.moveTo(slashBBox.x1, slashBBox.y1);\n      ctx.lineTo(slashBBox.x2, slashBBox.y2);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  calcBeamedNotesSlashBBox(\n    slashStemOffset: number,\n    slashBeamOffset: number,\n    protrusions: { beam: number; stem: number }\n  ): Record<string, number> {\n    const beam = this.beam;\n    if (!beam) throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n\n    const beam_slope = beam.slope;\n    const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n    const scaleX = isBeamEndNote ? -1 : 1;\n    const beam_angle = Math.atan(beam_slope * scaleX);\n\n    // slash line intersecting point on beam.\n    const iPointOnBeam = {\n      dx: Math.cos(beam_angle) * slashBeamOffset,\n      dy: Math.sin(beam_angle) * slashBeamOffset,\n    };\n\n    slashStemOffset *= this.getStemDirection();\n    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n\n    const stemX = this.getStemX();\n    const stem0X = beam.notes[0].getStemX();\n    const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n\n    const ret = {\n      x1: stemX - protrusion_stem_dx,\n      y1: stemY + slashStemOffset - protrusion_stem_dy,\n      x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n    };\n    return ret;\n  }\n}\n","export const PetalumaScriptTextMetrics = {\n  name: 'petalumaScript',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": 0,\n      \"y_max\": 500,\n      \"ha\": 500,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 250\n    },\"0\": {\n      \"x_min\": 33,\n      \"x_max\": 534,\n      \"y_min\": -13,\n      \"y_max\": 751,\n      \"ha\": 764,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 570\n    },\n    \"1\": {\n      \"x_min\": 48,\n      \"x_max\": 235,\n      \"y_min\": -17,\n      \"y_max\": 734,\n      \"ha\": 751,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 286\n    },\n    \"2\": {\n      \"x_min\": 56,\n      \"x_max\": 571,\n      \"y_min\": -19,\n      \"y_max\": 741,\n      \"ha\": 760,\n      \"leftSideBearing\": 56,\n      \"advanceWidth\": 626\n    },\n    \"3\": {\n      \"x_min\": 50,\n      \"x_max\": 528,\n      \"y_min\": -7,\n      \"y_max\": 731,\n      \"ha\": 738,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 589\n    },\n    \"4\": {\n      \"x_min\": 38,\n      \"x_max\": 564,\n      \"y_min\": -13,\n      \"y_max\": 743,\n      \"ha\": 756,\n      \"leftSideBearing\": 38,\n      \"advanceWidth\": 614\n    },\n    \"5\": {\n      \"x_min\": 42,\n      \"x_max\": 601,\n      \"y_min\": -34,\n      \"y_max\": 743,\n      \"ha\": 777,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 648\n    },\n    \"6\": {\n      \"x_min\": 47,\n      \"x_max\": 606,\n      \"y_min\": -16,\n      \"y_max\": 743,\n      \"ha\": 759,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 667\n    },\n    \"7\": {\n      \"x_min\": 47,\n      \"x_max\": 567,\n      \"y_min\": 5,\n      \"y_max\": 739,\n      \"ha\": 734,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 615\n    },\n    \"8\": {\n      \"x_min\": 40,\n      \"x_max\": 541,\n      \"y_min\": -15,\n      \"y_max\": 752,\n      \"ha\": 767,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 585\n    },\n    \"9\": {\n      \"x_min\": 40,\n      \"x_max\": 537,\n      \"y_min\": -52,\n      \"y_max\": 736,\n      \"ha\": 788,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 592\n    },\n    \"!\": {\n      \"x_min\": 49,\n      \"x_max\": 180,\n      \"y_min\": -7,\n      \"y_max\": 761,\n      \"ha\": 768,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 230\n    },\n    \"\\\"\": {\n      \"x_min\": 39,\n      \"x_max\": 304,\n      \"y_min\": 596,\n      \"y_max\": 804,\n      \"ha\": 208,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 353\n    },\n    \"#\": {\n      \"x_min\": 33,\n      \"x_max\": 599,\n      \"y_min\": -8,\n      \"y_max\": 765,\n      \"ha\": 773,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 648\n    },\n    \"$\": {\n      \"x_min\": 53,\n      \"x_max\": 495,\n      \"y_min\": -111,\n      \"y_max\": 823,\n      \"ha\": 934,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 560\n    },\n    \"%\": {\n      \"x_min\": 35,\n      \"x_max\": 656,\n      \"y_min\": -128,\n      \"y_max\": 808,\n      \"ha\": 936,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 711\n    },\n    \"&\": {\n      \"x_min\": 53,\n      \"x_max\": 441,\n      \"y_min\": -3,\n      \"y_max\": 753,\n      \"ha\": 756,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 500\n    },\n    \"'\": {\n      \"x_min\": 43,\n      \"x_max\": 161,\n      \"y_min\": 590,\n      \"y_max\": 811,\n      \"ha\": 221,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 217\n    },\n    \"(\": {\n      \"x_min\": 41,\n      \"x_max\": 311,\n      \"y_min\": -36,\n      \"y_max\": 845,\n      \"ha\": 881,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 308\n    },\n    \")\": {\n      \"x_min\": -8,\n      \"x_max\": 257,\n      \"y_min\": -21,\n      \"y_max\": 852,\n      \"ha\": 873,\n      \"leftSideBearing\": -8,\n      \"advanceWidth\": 280\n    },\n    \"*\": {\n      \"x_min\": 59,\n      \"x_max\": 539,\n      \"y_min\": 175,\n      \"y_max\": 589,\n      \"ha\": 414,\n      \"leftSideBearing\": 59,\n      \"advanceWidth\": 601\n    },\n    \"+\": {\n      \"x_min\": 33,\n      \"x_max\": 361,\n      \"y_min\": 180,\n      \"y_max\": 587,\n      \"ha\": 407,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 400\n    },\n    \",\": {\n      \"x_min\": 15,\n      \"x_max\": 176,\n      \"y_min\": -129,\n      \"y_max\": 92,\n      \"ha\": 221,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 205\n    },\n    \"-\": {\n      \"x_min\": 40,\n      \"x_max\": 380,\n      \"y_min\": 317,\n      \"y_max\": 452,\n      \"ha\": 135,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \".\": {\n      \"x_min\": 48,\n      \"x_max\": 185,\n      \"y_min\": -56,\n      \"y_max\": 84,\n      \"ha\": 140,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 227\n    },\n    \"/\": {\n      \"x_min\": -58,\n      \"x_max\": 654,\n      \"y_min\": -122,\n      \"y_max\": 844,\n      \"ha\": 966,\n      \"leftSideBearing\": -58,\n      \"advanceWidth\": 626\n    },\n    \":\": {\n      \"x_min\": 65,\n      \"x_max\": 225,\n      \"y_min\": 97,\n      \"y_max\": 536,\n      \"ha\": 439,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 302\n    },\n    \";\": {\n      \"x_min\": 13,\n      \"x_max\": 295,\n      \"y_min\": -139,\n      \"y_max\": 536,\n      \"ha\": 675,\n      \"leftSideBearing\": 13,\n      \"advanceWidth\": 334\n    },\n    \"<\": {\n      \"x_min\": 28,\n      \"x_max\": 438,\n      \"y_min\": -1,\n      \"y_max\": 607,\n      \"ha\": 608,\n      \"leftSideBearing\": 28,\n      \"advanceWidth\": 475\n    },\n    \"=\": {\n      \"x_min\": 40,\n      \"x_max\": 383,\n      \"y_min\": 199.9598640852289,\n      \"y_max\": 541,\n      \"ha\": 341.0401359147711,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \">\": {\n      \"x_min\": 35,\n      \"x_max\": 421,\n      \"y_min\": 28,\n      \"y_max\": 632,\n      \"ha\": 604,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 466\n    },\n    \"?\": {\n      \"x_min\": 45,\n      \"x_max\": 548,\n      \"y_min\": -17,\n      \"y_max\": 767,\n      \"ha\": 784,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 592\n    },\n    \"@\": {\n      \"x_min\": 51,\n      \"x_max\": 730,\n      \"y_min\": -78,\n      \"y_max\": 753,\n      \"ha\": 831,\n      \"leftSideBearing\": 51,\n      \"advanceWidth\": 781\n    },\n    \"A\": {\n      \"x_min\": 37,\n      \"x_max\": 554,\n      \"y_min\": -4,\n      \"y_max\": 746,\n      \"ha\": 750,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 617\n    },\n    \"B\": {\n      \"x_min\": 37,\n      \"x_max\": 532,\n      \"y_min\": 3,\n      \"y_max\": 783,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 579\n    },\n    \"C\": {\n      \"x_min\": 37,\n      \"x_max\": 583,\n      \"y_min\": -3,\n      \"y_max\": 775,\n      \"ha\": 778,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 623\n    },\n    \"D\": {\n      \"x_min\": 50,\n      \"x_max\": 530,\n      \"y_min\": -15,\n      \"y_max\": 749,\n      \"ha\": 764,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 579\n    },\n    \"E\": {\n      \"x_min\": 45,\n      \"x_max\": 531,\n      \"y_min\": -1,\n      \"y_max\": 743,\n      \"ha\": 744,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 585\n    },\n    \"F\": {\n      \"x_min\": 45,\n      \"x_max\": 459,\n      \"y_min\": 23,\n      \"y_max\": 727,\n      \"ha\": 704,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 510\n    },\n    \"G\": {\n      \"x_min\": 31,\n      \"x_max\": 577,\n      \"y_min\": -8,\n      \"y_max\": 733,\n      \"ha\": 741,\n      \"leftSideBearing\": 31,\n      \"advanceWidth\": 611\n    },\n    \"H\": {\n      \"x_min\": 37,\n      \"x_max\": 493,\n      \"y_min\": -22,\n      \"y_max\": 758,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 535\n    },\n    \"I\": {\n      \"x_min\": 47,\n      \"x_max\": 501,\n      \"y_min\": -3,\n      \"y_max\": 731,\n      \"ha\": 734,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 541\n    },\n    \"J\": {\n      \"x_min\": 33,\n      \"x_max\": 531,\n      \"y_min\": -23,\n      \"y_max\": 725,\n      \"ha\": 748,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 573\n    },\n    \"K\": {\n      \"x_min\": 43,\n      \"x_max\": 505,\n      \"y_min\": -10,\n      \"y_max\": 740,\n      \"ha\": 750,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 560\n    },\n    \"L\": {\n      \"x_min\": 49,\n      \"x_max\": 457,\n      \"y_min\": -2,\n      \"y_max\": 746,\n      \"ha\": 748,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 510\n    },\n    \"M\": {\n      \"x_min\": 35,\n      \"x_max\": 699,\n      \"y_min\": 1,\n      \"y_max\": 744,\n      \"ha\": 743,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 743\n    },\n    \"N\": {\n      \"x_min\": 34,\n      \"x_max\": 533,\n      \"y_min\": -17,\n      \"y_max\": 761,\n      \"ha\": 778,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 579\n    },\n    \"O\": {\n      \"x_min\": 41,\n      \"x_max\": 608,\n      \"y_min\": -5,\n      \"y_max\": 735,\n      \"ha\": 740,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 667\n    },\n    \"P\": {\n      \"x_min\": 53,\n      \"x_max\": 451,\n      \"y_min\": -18,\n      \"y_max\": 735,\n      \"ha\": 753,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 497\n    },\n    \"Q\": {\n      \"x_min\": 40,\n      \"x_max\": 599,\n      \"y_min\": -67,\n      \"y_max\": 744,\n      \"ha\": 811,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 648\n    },\n    \"R\": {\n      \"x_min\": 39,\n      \"x_max\": 487,\n      \"y_min\": 16,\n      \"y_max\": 735,\n      \"ha\": 719,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 535\n    },\n    \"S\": {\n      \"x_min\": 35,\n      \"x_max\": 552,\n      \"y_min\": -47,\n      \"y_max\": 708,\n      \"ha\": 755,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 604\n    },\n    \"T\": {\n      \"x_min\": 26,\n      \"x_max\": 656,\n      \"y_min\": -13,\n      \"y_max\": 718,\n      \"ha\": 731,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 705\n    },\n    \"U\": {\n      \"x_min\": 41,\n      \"x_max\": 518,\n      \"y_min\": -20,\n      \"y_max\": 748,\n      \"ha\": 768,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 567\n    },\n    \"V\": {\n      \"x_min\": 47,\n      \"x_max\": 509,\n      \"y_min\": -26,\n      \"y_max\": 744,\n      \"ha\": 770,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 567\n    },\n    \"W\": {\n      \"x_min\": 44,\n      \"x_max\": 789,\n      \"y_min\": -35,\n      \"y_max\": 720,\n      \"ha\": 755,\n      \"leftSideBearing\": 44,\n      \"advanceWidth\": 833\n    },\n    \"X\": {\n      \"x_min\": 63,\n      \"x_max\": 635,\n      \"y_min\": -10,\n      \"y_max\": 745,\n      \"ha\": 755,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 680\n    },\n    \"Y\": {\n      \"x_min\": 43,\n      \"x_max\": 503,\n      \"y_min\": -21,\n      \"y_max\": 734,\n      \"ha\": 755,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 541\n    },\n    \"Z\": {\n      \"x_min\": 42,\n      \"x_max\": 584,\n      \"y_min\": -10,\n      \"y_max\": 739,\n      \"ha\": 749,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 629\n    },\n    \"[\": {\n      \"x_min\": 46,\n      \"x_max\": 346,\n      \"y_min\": -150,\n      \"y_max\": 884,\n      \"ha\": 1034,\n      \"leftSideBearing\": 46,\n      \"advanceWidth\": 291\n    },\n    \"\\\\\": {\n      \"x_min\": 20,\n      \"x_max\": 616,\n      \"y_min\": -100,\n      \"y_max\": 797,\n      \"ha\": 897,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 645\n    },\n    \"]\": {\n      \"x_min\": -76,\n      \"x_max\": 226,\n      \"y_min\": -150,\n      \"y_max\": 881,\n      \"ha\": 1031,\n      \"leftSideBearing\": -76,\n      \"advanceWidth\": 297\n    },\n    \"^\": {\n      \"x_min\": 43,\n      \"x_max\": 437,\n      \"y_min\": 517,\n      \"y_max\": 812,\n      \"ha\": 295,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 478\n    },\n    \"_\": {\n      \"x_min\": 29,\n      \"x_max\": 563,\n      \"y_min\": -110,\n      \"y_max\": -1,\n      \"ha\": 109,\n      \"leftSideBearing\": 29,\n      \"advanceWidth\": 598\n    },\n    \"`\": {\n      \"x_min\": 54,\n      \"x_max\": 321,\n      \"y_min\": 540,\n      \"y_max\": 747,\n      \"ha\": 207,\n      \"leftSideBearing\": 54,\n      \"advanceWidth\": 368\n    },\n    \"a\": {\n      \"x_min\": 20,\n      \"x_max\": 447,\n      \"y_min\": -17,\n      \"y_max\": 495,\n      \"ha\": 512,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 494\n    },\n    \"b\": {\n      \"x_min\": 37,\n      \"x_max\": 466,\n      \"y_min\": -27,\n      \"y_max\": 770,\n      \"ha\": 797,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 510\n    },\n    \"c\": {\n      \"x_min\": 35,\n      \"x_max\": 456,\n      \"y_min\": -9,\n      \"y_max\": 507,\n      \"ha\": 516,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 460\n    },\n    \"d\": {\n      \"x_min\": 45,\n      \"x_max\": 520,\n      \"y_min\": -15,\n      \"y_max\": 764,\n      \"ha\": 779,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 560\n    },\n    \"e\": {\n      \"x_min\": 33,\n      \"x_max\": 370,\n      \"y_min\": -5,\n      \"y_max\": 501,\n      \"ha\": 506,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 397\n    },\n    \"f\": {\n      \"x_min\": 35,\n      \"x_max\": 411,\n      \"y_min\": -13,\n      \"y_max\": 695,\n      \"ha\": 708,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 453\n    },\n    \"g\": {\n      \"x_min\": 33,\n      \"x_max\": 551,\n      \"y_min\": -257,\n      \"y_max\": 505,\n      \"ha\": 762,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 611\n    },\n    \"h\": {\n      \"x_min\": 32,\n      \"x_max\": 458,\n      \"y_min\": -29,\n      \"y_max\": 743,\n      \"ha\": 772,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 491\n    },\n    \"i\": {\n      \"x_min\": 45,\n      \"x_max\": 167,\n      \"y_min\": -13,\n      \"y_max\": 631,\n      \"ha\": 644,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 220\n    },\n    \"j\": {\n      \"x_min\": -127,\n      \"x_max\": 261,\n      \"y_min\": -231,\n      \"y_max\": 601,\n      \"ha\": 832,\n      \"leftSideBearing\": -127,\n      \"advanceWidth\": 308\n    },\n    \"k\": {\n      \"x_min\": 39,\n      \"x_max\": 443,\n      \"y_min\": -3,\n      \"y_max\": 700,\n      \"ha\": 703,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 497\n    },\n    \"l\": {\n      \"x_min\": 58,\n      \"x_max\": 168,\n      \"y_min\": -8,\n      \"y_max\": 686,\n      \"ha\": 694,\n      \"leftSideBearing\": 58,\n      \"advanceWidth\": 227\n    },\n    \"m\": {\n      \"x_min\": 39,\n      \"x_max\": 688,\n      \"y_min\": -14,\n      \"y_max\": 501,\n      \"ha\": 515,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 718\n    },\n    \"n\": {\n      \"x_min\": 45,\n      \"x_max\": 491,\n      \"y_min\": -32,\n      \"y_max\": 512,\n      \"ha\": 544,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 541\n    },\n    \"o\": {\n      \"x_min\": 41,\n      \"x_max\": 424,\n      \"y_min\": -12,\n      \"y_max\": 493,\n      \"ha\": 505,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 447\n    },\n    \"p\": {\n      \"x_min\": 25,\n      \"x_max\": 529,\n      \"y_min\": -260,\n      \"y_max\": 500,\n      \"ha\": 760,\n      \"leftSideBearing\": 25,\n      \"advanceWidth\": 573\n    },\n    \"q\": {\n      \"x_min\": 53,\n      \"x_max\": 603,\n      \"y_min\": -235,\n      \"y_max\": 514,\n      \"ha\": 749,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 623\n    },\n    \"r\": {\n      \"x_min\": 32,\n      \"x_max\": 407,\n      \"y_min\": -7,\n      \"y_max\": 492,\n      \"ha\": 499,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 460\n    },\n    \"s\": {\n      \"x_min\": 49,\n      \"x_max\": 416,\n      \"y_min\": -12,\n      \"y_max\": 519,\n      \"ha\": 531,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 460\n    },\n    \"t\": {\n      \"x_min\": 32,\n      \"x_max\": 442,\n      \"y_min\": -5,\n      \"y_max\": 684,\n      \"ha\": 689,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 469\n    },\n    \"u\": {\n      \"x_min\": 41,\n      \"x_max\": 487,\n      \"y_min\": -5,\n      \"y_max\": 507,\n      \"ha\": 512,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 510\n    },\n    \"v\": {\n      \"x_min\": 16,\n      \"x_max\": 441,\n      \"y_min\": -20,\n      \"y_max\": 542,\n      \"ha\": 562,\n      \"leftSideBearing\": 16,\n      \"advanceWidth\": 456\n    },\n    \"w\": {\n      \"x_min\": 39,\n      \"x_max\": 639,\n      \"y_min\": -22,\n      \"y_max\": 505,\n      \"ha\": 527,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 661\n    },\n    \"x\": {\n      \"x_min\": 15,\n      \"x_max\": 505,\n      \"y_min\": -39,\n      \"y_max\": 539,\n      \"ha\": 578,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 541\n    },\n    \"y\": {\n      \"x_min\": -98,\n      \"x_max\": 501,\n      \"y_min\": -242,\n      \"y_max\": 511,\n      \"ha\": 753,\n      \"leftSideBearing\": -98,\n      \"advanceWidth\": 548\n    },\n    \"z\": {\n      \"x_min\": 27,\n      \"x_max\": 479,\n      \"y_min\": -3,\n      \"y_max\": 494,\n      \"ha\": 497,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 494\n    },\n    \"{\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"|\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"}\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"~\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    }\n\n  },\n  \"fontFamily\": \"Petaluma Script\",\n  \"resolution\": 1000,\n  \"generatedOn\": \"2020-06-14T18:33:25.407Z\"\n};\n","export const RobotoSlabTextMetrics = {\n  name: 'Roboto Slab',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 509,\n      \"y_min\": 0,\n      \"y_max\": 2000,\n      \"ha\": 2000,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 509\n    },\n    \"0\": {\n      \"x_min\": 121,\n      \"x_max\": 1048,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1168\n    },\n    \"1\": {\n      \"x_min\": 117,\n      \"x_max\": 767,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 117,\n      \"advanceWidth\": 844\n    },\n    \"2\": {\n      \"x_min\": 75.8474576645637,\n      \"x_max\": 1040,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 75,\n      \"advanceWidth\": 1131\n    },\n    \"3\": {\n      \"x_min\": 74.85365853658536,\n      \"x_max\": 994,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1106\n    },\n    \"4\": {\n      \"x_min\": 63,\n      \"x_max\": 1114,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1187\n    },\n    \"5\": {\n      \"x_min\": 96.8448275474953,\n      \"x_max\": 982,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1081\n    },\n    \"6\": {\n      \"x_min\": 121,\n      \"x_max\": 1067,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1144\n    },\n    \"7\": {\n      \"x_min\": 76,\n      \"x_max\": 1060,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": -30,\n      \"advanceWidth\": 1128\n    },\n    \"8\": {\n      \"x_min\": 92,\n      \"x_max\": 1039,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 92,\n      \"advanceWidth\": 1131\n    },\n    \"9\": {\n      \"x_min\": 84,\n      \"x_max\": 1026,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1154\n    },\n    \"!\": {\n      \"x_min\": 143,\n      \"x_max\": 340,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 143,\n      \"advanceWidth\": 483\n    },\n    \"\\\"\": {\n      \"x_min\": 166,\n      \"x_max\": 634,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 770\n    },\n    \"#\": {\n      \"x_min\": 63,\n      \"x_max\": 1179,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1246\n    },\n    \"$\": {\n      \"x_min\": 81.92156915727656,\n      \"x_max\": 1012,\n      \"y_min\": -208,\n      \"y_max\": 1693,\n      \"ha\": 1901,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1110\n    },\n    \"%\": {\n      \"x_min\": 77,\n      \"x_max\": 1384,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 77,\n      \"advanceWidth\": 1460\n    },\n    \"&\": {\n      \"x_min\": 74,\n      \"x_max\": 1242,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1289\n    },\n    \"'\": {\n      \"x_min\": 166,\n      \"x_max\": 324,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 460\n    },\n    \"(\": {\n      \"x_min\": 114,\n      \"x_max\": 650,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 114,\n      \"advanceWidth\": 662\n    },\n    \")\": {\n      \"x_min\": 11,\n      \"x_max\": 547,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 11,\n      \"advanceWidth\": 654\n    },\n    \"*\": {\n      \"x_min\": 66,\n      \"x_max\": 893,\n      \"y_min\": 607,\n      \"y_max\": 1456,\n      \"ha\": 849,\n      \"leftSideBearing\": 66,\n      \"advanceWidth\": 958\n    },\n    \"+\": {\n      \"x_min\": 73,\n      \"x_max\": 1071,\n      \"y_min\": 146,\n      \"y_max\": 1206,\n      \"ha\": 1060,\n      \"leftSideBearing\": 73,\n      \"advanceWidth\": 1145\n    },\n    \",\": {\n      \"x_min\": 23,\n      \"x_max\": 315,\n      \"y_min\": -311,\n      \"y_max\": 221,\n      \"ha\": 532,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 404\n    },\n    \"-\": {\n      \"x_min\": 154,\n      \"x_max\": 643,\n      \"y_min\": 538,\n      \"y_max\": 692,\n      \"ha\": 154,\n      \"leftSideBearing\": 154,\n      \"advanceWidth\": 797\n    },\n    \".\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 202,\n      \"ha\": 202,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 493\n    },\n    \"/\": {\n      \"x_min\": 0,\n      \"x_max\": 774,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 824\n    },\n    \":\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 419\n    },\n    \";\": {\n      \"x_min\": 53,\n      \"x_max\": 345,\n      \"y_min\": -311,\n      \"y_max\": 1082,\n      \"ha\": 1393,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 424\n    },\n    \"<\": {\n      \"x_min\": 76,\n      \"x_max\": 892,\n      \"y_min\": 107,\n      \"y_max\": 1013,\n      \"ha\": 906,\n      \"leftSideBearing\": 76,\n      \"advanceWidth\": 1017\n    },\n    \"=\": {\n      \"x_min\": 147,\n      \"x_max\": 981,\n      \"y_min\": 407,\n      \"y_max\": 987,\n      \"ha\": 580,\n      \"leftSideBearing\": 147,\n      \"advanceWidth\": 1127\n    },\n    \">\": {\n      \"x_min\": 125,\n      \"x_max\": 980,\n      \"y_min\": 87,\n      \"y_max\": 993,\n      \"ha\": 906,\n      \"leftSideBearing\": 125,\n      \"advanceWidth\": 1060\n    },\n    \"?\": {\n      \"x_min\": 65.92660602419838,\n      \"x_max\": 890,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 953\n    },\n    \"@\": {\n      \"x_min\": 84.3592218305664,\n      \"x_max\": 1705.2346925277395,\n      \"y_min\": -453,\n      \"y_max\": 1431,\n      \"ha\": 1884,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1821\n    },\n    \"A\": {\n      \"x_min\": 70,\n      \"x_max\": 1463,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1533\n    },\n    \"B\": {\n      \"x_min\": 81,\n      \"x_max\": 1253,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1322\n    },\n    \"C\": {\n      \"x_min\": 80,\n      \"x_max\": 1174,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1290\n    },\n    \"D\": {\n      \"x_min\": 81,\n      \"x_max\": 1291,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1356\n    },\n    \"E\": {\n      \"x_min\": 81,\n      \"x_max\": 1190,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1306\n    },\n    \"F\": {\n      \"x_min\": 81,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1256\n    },\n    \"G\": {\n      \"x_min\": 80,\n      \"x_max\": 1226,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1346\n    },\n    \"H\": {\n      \"x_min\": 81,\n      \"x_max\": 1497,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1578\n    },\n    \"I\": {\n      \"x_min\": 81,\n      \"x_max\": 604,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 685\n    },\n    \"J\": {\n      \"x_min\": 60,\n      \"x_max\": 1100,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 60,\n      \"advanceWidth\": 1169\n    },\n    \"K\": {\n      \"x_min\": 81,\n      \"x_max\": 1427,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1501\n    },\n    \"L\": {\n      \"x_min\": 81,\n      \"x_max\": 1130,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1210\n    },\n    \"M\": {\n      \"x_min\": 94,\n      \"x_max\": 1888,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 94,\n      \"advanceWidth\": 1982\n    },\n    \"N\": {\n      \"x_min\": 83,\n      \"x_max\": 1509,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 83,\n      \"advanceWidth\": 1592\n    },\n    \"O\": {\n      \"x_min\": 70,\n      \"x_max\": 1281,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1351\n    },\n    \"P\": {\n      \"x_min\": 81,\n      \"x_max\": 1242,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1297\n    },\n    \"Q\": {\n      \"x_min\": 70,\n      \"x_max\": 1348,\n      \"y_min\": -245,\n      \"y_max\": 1477,\n      \"ha\": 1722,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1376\n    },\n    \"R\": {\n      \"x_min\": 81,\n      \"x_max\": 1285,\n      \"y_min\": 0,\n      \"y_max\": 1455,\n      \"ha\": 1455,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1385\n    },\n    \"S\": {\n      \"x_min\": 115,\n      \"x_max\": 1116,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 115,\n      \"advanceWidth\": 1206\n    },\n    \"T\": {\n      \"x_min\": 96,\n      \"x_max\": 1306,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1406\n    },\n    \"U\": {\n      \"x_min\": 70,\n      \"x_max\": 1452,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1522\n    },\n    \"V\": {\n      \"x_min\": 65,\n      \"x_max\": 1443,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1508\n    },\n    \"W\": {\n      \"x_min\": 72,\n      \"x_max\": 2057,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 2129\n    },\n    \"X\": {\n      \"x_min\": 80,\n      \"x_max\": 1449,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1529\n    },\n    \"Y\": {\n      \"x_min\": 65,\n      \"x_max\": 1396,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1461\n    },\n    \"Z\": {\n      \"x_min\": 90,\n      \"x_max\": 1107,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 90,\n      \"advanceWidth\": 1197\n    },\n    \"[\": {\n      \"x_min\": 157,\n      \"x_max\": 541,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 157,\n      \"advanceWidth\": 573\n    },\n    \"\\\\\": {\n      \"x_min\": 36,\n      \"x_max\": 830,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 36,\n      \"advanceWidth\": 841\n    },\n    \"]\": {\n      \"x_min\": 23,\n      \"x_max\": 408,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 552\n    },\n    \"^\": {\n      \"x_min\": 71,\n      \"x_max\": 802,\n      \"y_min\": 729,\n      \"y_max\": 1456,\n      \"ha\": 727,\n      \"leftSideBearing\": 71,\n      \"advanceWidth\": 864\n    },\n    \"_\": {\n      \"x_min\": 119,\n      \"x_max\": 1041,\n      \"y_min\": -154,\n      \"y_max\": 0,\n      \"ha\": 154,\n      \"leftSideBearing\": 119,\n      \"advanceWidth\": 1168\n    },\n    \"`\": {\n      \"x_min\": 40,\n      \"x_max\": 456,\n      \"y_min\": 1288,\n      \"y_max\": 1560,\n      \"ha\": 272,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 496\n    },\n    \"a\": {\n      \"x_min\": 79,\n      \"x_max\": 1053,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 79,\n      \"advanceWidth\": 1132\n    },\n    \"b\": {\n      \"x_min\": -16,\n      \"x_max\": 1071,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": -16,\n      \"advanceWidth\": 1145\n    },\n    \"c\": {\n      \"x_min\": 78,\n      \"x_max\": 988,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1067\n    },\n    \"d\": {\n      \"x_min\": 78,\n      \"x_max\": 1156,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1218\n    },\n    \"e\": {\n      \"x_min\": 74,\n      \"x_max\": 980,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1059\n    },\n    \"f\": {\n      \"x_min\": 64,\n      \"x_max\": 731,\n      \"y_min\": 0,\n      \"y_max\": 1581,\n      \"ha\": 1581,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 725\n    },\n    \"g\": {\n      \"x_min\": 78,\n      \"x_max\": 1133,\n      \"y_min\": -437,\n      \"y_max\": 1102,\n      \"ha\": 1539,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1157\n    },\n    \"h\": {\n      \"x_min\": 49,\n      \"x_max\": 1255,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 1315\n    },\n    \"i\": {\n      \"x_min\": 67,\n      \"x_max\": 590,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 67,\n      \"advanceWidth\": 652\n    },\n    \"j\": {\n      \"x_min\": -56,\n      \"x_max\": 381,\n      \"y_min\": -437,\n      \"y_max\": 1560,\n      \"ha\": 1997,\n      \"leftSideBearing\": -56,\n      \"advanceWidth\": 525\n    },\n    \"k\": {\n      \"x_min\": 64,\n      \"x_max\": 1248,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 1287\n    },\n    \"l\": {\n      \"x_min\": 64,\n      \"x_max\": 587,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 653\n    },\n    \"m\": {\n      \"x_min\": 74,\n      \"x_max\": 1905,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1977\n    },\n    \"n\": {\n      \"x_min\": 74,\n      \"x_max\": 1278,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1343\n    },\n    \"o\": {\n      \"x_min\": 78,\n      \"x_max\": 1046,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1124\n    },\n    \"p\": {\n      \"x_min\": 34,\n      \"x_max\": 1119,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 1197\n    },\n    \"q\": {\n      \"x_min\": 78,\n      \"x_max\": 1135,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1139\n    },\n    \"r\": {\n      \"x_min\": 72,\n      \"x_max\": 808,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 854\n    },\n    \"s\": {\n      \"x_min\": 104,\n      \"x_max\": 933,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 104,\n      \"advanceWidth\": 1022\n    },\n    \"t\": {\n      \"x_min\": 24,\n      \"x_max\": 678,\n      \"y_min\": -17,\n      \"y_max\": 1343,\n      \"ha\": 1360,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 730\n    },\n    \"u\": {\n      \"x_min\": 52,\n      \"x_max\": 1181,\n      \"y_min\": -21,\n      \"y_max\": 1082,\n      \"ha\": 1103,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1245\n    },\n    \"v\": {\n      \"x_min\": 26,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 1206\n    },\n    \"w\": {\n      \"x_min\": 52,\n      \"x_max\": 1777,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1823\n    },\n    \"x\": {\n      \"x_min\": 42,\n      \"x_max\": 1163,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 1203\n    },\n    \"y\": {\n      \"x_min\": 24,\n      \"x_max\": 1172,\n      \"y_min\": -437,\n      \"y_max\": 1082,\n      \"ha\": 1519,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 1192\n    },\n    \"z\": {\n      \"x_min\": 88,\n      \"x_max\": 960,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 88,\n      \"advanceWidth\": 1032\n    },\n    \"{\": {\n      \"x_min\": 63,\n      \"x_max\": 671,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 701\n    },\n    \"|\": {\n      \"x_min\": 150,\n      \"x_max\": 307,\n      \"y_min\": -270,\n      \"y_max\": 1456,\n      \"ha\": 1726,\n      \"leftSideBearing\": 150,\n      \"advanceWidth\": 451\n    },\n    \"}\": {\n      \"x_min\": 27,\n      \"x_max\": 635,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 701\n    },\n    \"~\": {\n      \"x_min\": 121,\n      \"x_max\": 1257,\n      \"y_min\": 401,\n      \"y_max\": 803,\n      \"ha\": 402,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1386\n    }\n  },\n  \"fontFamily\": \"Roboto Slab\",\n  \"resolution\": 2048,\n  \"generatedOn\": \"2020-06-15T19:12:58.120Z\"\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file handles a registry of text font metric information, so all\n// VEX modules can take advantage of font metrics in a uniform way.\n//\n\nimport { PetalumaScriptTextMetrics } from './fonts/petalumascript_textmetrics';\nimport { RobotoSlabTextMetrics } from './fonts/robotoslab_textmetrics';\nimport { FontInfo } from './types/common';\nimport { log, RuntimeError } from './util';\n\nexport interface TextFontMetrics {\n  x_min: number;\n  x_max: number;\n  y_min: number;\n  y_max: number;\n  ha: number;\n  leftSideBearing: number;\n  advanceWidth: number;\n}\n\nexport interface TextFontRegistry {\n  [name: string]: unknown;\n  name?: string;\n  resolution?: number;\n  glyphs?: Record<string, TextFontMetrics>;\n  family: string;\n  serifs: boolean;\n  monospaced?: boolean;\n  italic: boolean;\n  bold: boolean;\n  maxSizeGlyph?: string;\n  superscriptOffset?: number;\n  subscriptOffset?: number;\n  description: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextFont.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextFont.DEBUG) log('Vex.Flow.TextFont', args);\n}\n\nexport class TextFont {\n  static DEBUG: boolean;\n  static get CATEGORY(): string {\n    return 'TextFont';\n  }\n\n  resolution: number = 1000;\n  protected name?: string;\n  protected glyphs: Record<string, TextFontMetrics> = {};\n  protected family: string = '';\n  protected serifs?: boolean;\n  protected monospaced?: boolean;\n  protected italic?: boolean;\n  protected bold?: boolean;\n  protected superscriptOffset?: number;\n  protected subscriptOffset?: number;\n  protected description?: string;\n  protected maxSizeGlyph: string;\n  protected weight: string;\n  protected style: string;\n  protected fontCacheKey: string = '';\n\n  protected static registryInstance: TextFontRegistry[];\n  protected static textWidthCacheInstance?: Record<string, Record<string, number>>;\n\n  protected size: number;\n  protected attrs: { type: string };\n\n  // ### fontRegistry\n  // Getter of an array of available fonts.  Applications may register their\n  // own fonts and the metrics for those fonts will be available to the\n  // application.\n  static get fontRegistry(): TextFontRegistry[] {\n    if (!TextFont.registryInstance) {\n      TextFont.registryInstance = [];\n      TextFont.registryInstance.push({\n        name: 'Roboto Slab',\n        resolution: RobotoSlabTextMetrics.resolution,\n        glyphs: RobotoSlabTextMetrics.glyphs,\n        family: RobotoSlabTextMetrics.fontFamily,\n        serifs: true,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default serif text font to pair with Bravura/Gonville engraving font',\n      });\n      TextFont.registryInstance.push({\n        name: 'petalumaScript',\n        resolution: PetalumaScriptTextMetrics.resolution,\n        glyphs: PetalumaScriptTextMetrics.glyphs,\n        family: PetalumaScriptTextMetrics.fontFamily,\n        serifs: false,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default sans-serif text font to pair with Petaluma engraving font',\n      });\n    }\n    return TextFont.registryInstance;\n  }\n\n  // ### getFontFamilies\n  // Web font files are generally distributed per weight and style (bold, italic).\n  // return the family with the attributes that are available for that font.\n  // We assume descriptions are the same for different weights/styles.\n  static getFontFamilies(): TextFontRegistry[] {\n    const hash: Record<string, TextFontRegistry> = {};\n    const returnedFonts: TextFontRegistry[] = [];\n    TextFont.fontRegistry.forEach((font) => {\n      if (!hash[font.family]) {\n        hash[font.family] = {\n          family: font.family,\n          description: font.description,\n          bold: font.bold,\n          serifs: font.serifs,\n          italic: font.italic,\n        };\n      } else {\n        ['bold', 'italic', 'monospaced', 'serifs'].forEach((attr) => {\n          if (font[attr]) {\n            hash[font.family][attr] = true;\n          }\n        });\n      }\n    });\n    const keys = Object.keys(hash);\n    keys.forEach((key) => {\n      returnedFonts.push(hash[key]);\n    });\n    return returnedFonts;\n  }\n\n  // ### fontWeightToBold\n  // return true if the font weight indicates we desire a 'bold'\n  // used in getTextFontFromVexFontData\n  static fontWeightToBold(fw?: string): boolean {\n    if (!fw) {\n      return false;\n    }\n    if (isNaN(parseInt(fw, 10))) {\n      return fw.toLowerCase() === 'bold';\n    }\n    // very subjective...\n    return parseInt(fw, 10) >= 600;\n  }\n\n  // ### fontStyleToItalic\n  // return true if the font style indicates we desire 'italic' style\n  // used in getTextFontFromVexFontData\n  static fontStyleToItalic(fs?: string): boolean {\n    return typeof fs === 'string' && fs.toLowerCase() === 'italic';\n  }\n\n  // ### textWidthCache\n  // Static cache of widths hashed on font/string.\n  static get textWidthCache(): Record<string, Record<string, number>> {\n    if (typeof TextFont.textWidthCacheInstance === 'undefined') {\n      TextFont.textWidthCacheInstance = {};\n    }\n    return TextFont.textWidthCacheInstance;\n  }\n\n  // ### getTextFontFromVexFontData\n  // Find the font that most closely matches the parameters from the given font data.\n  // Primarily we look for font family, also bold and italic attributes.  This\n  // method will always return a fallback font if there are no matches.\n  static getTextFontFromVexFontData(fd: FontInfo): TextFont {\n    let i = 0;\n    let selectedFont = undefined;\n    const fallback = TextFont.fontRegistry[0];\n    let candidates: TextFontRegistry[] = [];\n    if (!fd.family) {\n      fd.family = 'Arial';\n    }\n    const families = fd.family.split(',');\n    for (i = 0; i < families.length; ++i) {\n      const famliy = families[i];\n      candidates = TextFont.fontRegistry.filter((font) => font.family === famliy);\n      if (candidates.length) {\n        break;\n      }\n    }\n    if (candidates.length === 0) {\n      selectedFont = new TextFont(fallback);\n    } else if (candidates.length === 1) {\n      selectedFont = new TextFont(candidates[0]);\n    } else {\n      const bold = TextFont.fontWeightToBold(fd.weight);\n      const italic = TextFont.fontStyleToItalic(fd.style);\n      const perfect = candidates.find((font) => font.bold === bold && font.italic === italic);\n      if (perfect) {\n        selectedFont = new TextFont(perfect);\n      } else {\n        const ok = candidates.find((font) => font.italic === italic || font.bold === bold);\n        if (ok) {\n          selectedFont = new TextFont(ok);\n        } else {\n          selectedFont = new TextFont(candidates[0]);\n        }\n      }\n    }\n    if (typeof fd.size === 'number' && fd.size > 0) {\n      selectedFont.setFontSize(fd.size);\n    }\n    return selectedFont;\n  }\n\n  static getFontDataByName(fontName: string): TextFontRegistry | undefined {\n    return TextFont.fontRegistry.find((fd) => fd.name === fontName);\n  }\n\n  // ### registerFont\n  // Applications may register their own fonts and the metrics, and those metrics\n  // will be available to the application for formatting.  See fontRegistry\n  // for format of font metrics.  Metrics can be generated from any font file\n  // using font_fontgen.js in the tools/smufl directory.\n  static registerFont(fontData: TextFontRegistry, overwrite?: boolean): void {\n    // Get via external reference to make sure initial object is created\n    const reg = TextFont.fontRegistry;\n    const exists = reg.find((td) => fontData.name === td.name);\n    if (exists && overwrite) {\n      TextFont.registryInstance = TextFont.fontRegistry.filter((fd) => fd.name !== exists.name);\n    }\n    if (!exists) {\n      L('registering font ' + fontData.name);\n      TextFont.registryInstance.push(fontData);\n    }\n  }\n\n  // ## Prototype Methods\n  //\n  // create a font instance.\n  // The preferred method for returning an instance of this class is via\n  // getTextFontFromVexFontData\n  constructor(params: TextFontRegistry) {\n    this.size = 14;\n    this.maxSizeGlyph = 'H';\n    this.weight = '';\n    this.style = '';\n    this.attrs = { type: TextFont.CATEGORY };\n    if (!params.name) {\n      throw new RuntimeError('BadArgument', 'Font constructor must specify a name');\n    }\n    const fontData = params.glyphs ? params : TextFont.getFontDataByName(params.name);\n    if (!fontData) {\n      if (params.glyphs && params.resolution) {\n        TextFont.registerFont(params);\n      } else {\n        throw new RuntimeError('BadArgument', 'Unknown font, must have glyph metrics and resolution');\n      }\n    } else {\n      this.updateParams(fontData);\n    }\n    this.updateParams(params);\n\n    this.updateCacheKey();\n  }\n\n  updateParams(params: TextFontRegistry): void {\n    if (params.name) this.name = params.name;\n    if (params.resolution) this.resolution = params.resolution;\n    if (params.glyphs) this.glyphs = params.glyphs;\n    this.family = params.family;\n    this.serifs = params.serifs;\n    if (params.monospaced) this.monospaced = params.monospaced;\n    this.italic = params.italic;\n    this.bold = params.bold;\n    if (params.maxSizeGlyph) this.maxSizeGlyph = params.maxSizeGlyph;\n    if (params.superscriptOffset) this.superscriptOffset = params.superscriptOffset;\n    if (params.subscriptOffset) this.subscriptOffset = params.subscriptOffset;\n  }\n\n  // Create a hash with the current font data, so we can cache computed widths\n  updateCacheKey(): void {\n    this.fontCacheKey = `${this.family}-${this.size}-${this.weight}-${this.style}`;\n  }\n\n  getMetricForCharacter(c: string): TextFontMetrics {\n    if (this.glyphs[c]) {\n      return this.glyphs[c];\n    }\n    return this.glyphs[this.maxSizeGlyph];\n  }\n\n  get maxHeight(): number {\n    const glyph = this.getMetricForCharacter(this.maxSizeGlyph);\n    return (glyph.ha / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForCharacter(c: string): number {\n    const metric = this.getMetricForCharacter(c);\n    if (!metric) {\n      return 0.65 * this.pointsToPixels;\n    }\n    return (metric.advanceWidth / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForString(s: string): number {\n    // Store width in 2-level cache, so I don't have to recompute for\n    // same string/font\n    if (typeof TextFont.textWidthCache[this.fontCacheKey] === 'undefined') {\n      TextFont.textWidthCache[this.fontCacheKey] = {};\n    }\n    let width = 0;\n    if (!TextFont.textWidthCache[this.fontCacheKey][s]) {\n      for (let j = 0; j < s.length; ++j) {\n        width += this.getWidthForCharacter(s[j]);\n      }\n      TextFont.textWidthCache[this.fontCacheKey][s] = width;\n    }\n    return TextFont.textWidthCache[this.fontCacheKey][s];\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels(): number {\n    return this.size / 72 / (1 / 96);\n  }\n\n  setFontSize(size: number): this {\n    this.size = size;\n    // font size mangled into cache key, so use the correct one.\n    this.updateCacheKey();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TextFont } from './textfont';\nimport { FontInfo } from './types/common';\nimport { log } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Annotation.DEBUG) log('Vex.Flow.Annotation', args);\n}\n\nenum Justify {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n  CENTER_STEM = 4,\n}\n\nenum VerticalJustify {\n  TOP = 1,\n  CENTER = 2,\n  BOTTOM = 3,\n  CENTER_STEM = 4,\n}\n\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Annotations category string. */\n  static get CATEGORY(): string {\n    return 'Annotation';\n  }\n\n  /** Text annotations can be positioned and justified relative to the note. */\n  static Justify = Justify;\n\n  static JustifyString: Record<string, number> = {\n    left: Justify.LEFT,\n    right: Justify.RIGHT,\n    center: Justify.CENTER,\n    centerStem: Justify.CENTER_STEM,\n  };\n\n  static VerticalJustify = VerticalJustify;\n\n  static VerticalJustifyString: Record<string, number> = {\n    above: Annotation.VerticalJustify.TOP,\n    top: Annotation.VerticalJustify.TOP,\n    below: Annotation.VerticalJustify.BOTTOM,\n    bottom: Annotation.VerticalJustify.BOTTOM,\n    center: Annotation.VerticalJustify.CENTER,\n    centerStem: Annotation.VerticalJustify.CENTER_STEM,\n  };\n\n  /** Arrange annotations within a `ModifierContext` */\n  static format(annotations: Annotation[], state: ModifierContextState): boolean {\n    if (!annotations || annotations.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < annotations.length; ++i) {\n      let testWidth = 0;\n      const annotation = annotations[i];\n      const textFont = TextFont.getTextFontFromVexFontData({\n        family: annotation.font.family,\n        size: annotation.font.size,\n        weight: 'normal',\n      });\n      // Calculate if the vertical extent will exceed a single line and adjust accordingly.\n      const numLines = Math.floor(textFont.maxHeight / Tables.STAVE_LINE_DISTANCE) + 1;\n      // Get the string width from the font metrics\n      testWidth = textFont.getWidthForString(annotation.text);\n      width = Math.max(width, testWidth);\n      if (annotation.getPosition() === Modifier.Position.ABOVE) {\n        annotation.setTextLine(state.top_text_line);\n        state.top_text_line += numLines;\n      } else {\n        annotation.setTextLine(state.text_line);\n        state.text_line += numLines;\n      }\n    }\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  protected justification: Justify;\n  protected vert_justification: VerticalJustify;\n  protected text: string;\n  // Initialized by the constructor via this.setFont('Arial', 10).\n  protected font!: FontInfo;\n\n  /**\n   * Annotations inherit from `Modifier` and is positioned correctly when\n   * in a `ModifierContext`.\n   * Create a new `Annotation` with the string `text`.\n   */\n  constructor(text: string) {\n    super();\n\n    this.text = text;\n    this.justification = Justify.CENTER;\n    this.vert_justification = Annotation.VerticalJustify.TOP;\n    this.setFont('Arial', 10);\n\n    // The default width is calculated from the text.\n    this.setWidth(Tables.textWidth(text));\n  }\n\n  /** Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`. */\n  setFont(family: string, size: number, weight: string = ''): this {\n    this.font = { family, size, weight };\n    return this;\n  }\n\n  /**\n   * Set vertical position of text (above or below stave).\n   * @param just value in `Annotation.VerticalJustify`.\n   */\n  setVerticalJustification(just: string | VerticalJustify): this {\n    this.vert_justification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n    return this;\n  }\n\n  /**\n   * Get horizontal justification.\n   */\n  getJustification(): Justify {\n    return this.justification;\n  }\n\n  /**\n   * Set horizontal justification.\n   * @param justification value in `Annotation.Justify`.\n   */\n  setJustification(just: string | Justify): this {\n    this.justification = typeof just === 'string' ? Annotation.JustifyString[just] : just;\n    return this;\n  }\n\n  /** Render text beside the note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n\n    // We're changing context parameters. Save current state.\n    ctx.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText(this.text).width;\n\n    // Estimate text height to be the same as the width of an 'm'.\n    //\n    // This is a hack to work around the inability to measure text height\n    // in HTML5 Canvas (and SVG).\n    const text_height = ctx.measureText('m').width;\n    let x;\n    let y;\n\n    if (this.justification === Annotation.Justify.LEFT) {\n      x = start.x;\n    } else if (this.justification === Annotation.Justify.RIGHT) {\n      x = start.x - text_width;\n    } else if (this.justification === Annotation.Justify.CENTER) {\n      x = start.x - text_width / 2;\n    } /* CENTER_STEM */ else {\n      x = (note as StemmableNote).getStemX() - text_width / 2;\n    }\n\n    let stem_ext: Record<string, number> = {};\n    let spacing = 0;\n    const has_stem = note.hasStem();\n    const stave = note.checkStave();\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    if (has_stem) {\n      stem_ext = (note as StemmableNote).checkStem().getExtents();\n      spacing = stave.getSpacingBetweenLines();\n    }\n\n    if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin\n      // is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n      if (has_stem) {\n        const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {\n      const yt = note.getYForTopText(this.text_line) - 1;\n      const yb = stave.getYForBottomText(this.text_line);\n      y = yt + (yb - yt) / 2 + text_height / 2;\n    } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {\n      y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\n      if (has_stem) {\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    } /* CENTER_STEM */ else {\n      const extents = note.getStemExtents();\n      y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\n    }\n\n    L('Rendering annotation: ', this.text, x, y);\n    ctx.fillText(this.text, x, y);\n    ctx.closeGroup();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n// MIT License\n\nimport { Builder } from './easyscore';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { isGraceNote, isStaveNote, isTabNote } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n\nexport interface ArticulationStruct {\n  code?: string;\n  aboveCode?: string;\n  belowCode?: string;\n  between_lines: boolean;\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Articulation.DEBUG) log('Vex.Flow.Articulation', args);\n}\n\nconst { ABOVE, BELOW } = Modifier.Position;\n\nfunction roundToNearestHalf(mathFn: (a: number) => number, value: number): number {\n  return mathFn(value / 0.5) * 0.5;\n}\n\n// This includes both staff and ledger lines\nfunction isWithinLines(line: number, position: number): boolean {\n  return position === ABOVE ? line <= 5 : line >= 1;\n}\n\nfunction getRoundingFunction(line: number, position: number): (a: number) => number {\n  if (isWithinLines(line, position)) {\n    if (position === ABOVE) {\n      return Math.ceil;\n    } else {\n      return Math.floor;\n    }\n  } else {\n    return Math.round;\n  }\n}\n\nfunction snapLineToStaff(canSitBetweenLines: boolean, line: number, position: number, offsetDirection: number): number {\n  // Initially, snap to nearest staff line or space\n  const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n  const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n  const onStaffLine = snappedLine % 1 === 0;\n\n  if (canSnapToStaffSpace && onStaffLine) {\n    const HALF_STAFF_SPACE = 0.5;\n    return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n  } else {\n    return snappedLine;\n  }\n}\n\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note: Note) => isStaveNote(note) || isGraceNote(note);\n\nfunction getTopY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveOrGraceNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return stemBaseY;\n      }\n    } else {\n      return Math.min(...note.getYs());\n    }\n  } else if (isTabNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return note.checkStave().getYForTopText(textLine);\n      }\n    } else {\n      return note.checkStave().getYForTopText(textLine);\n    }\n  } else {\n    throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\nfunction getBottomY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveOrGraceNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemBaseY;\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return Math.max(...note.getYs());\n    }\n  } else if (isTabNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return note.checkStave().getYForBottomText(textLine);\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return note.checkStave().getYForBottomText(textLine);\n    }\n  } else {\n    throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nfunction getInitialOffset(note: Note, position: number): number {\n  const isOnStemTip =\n    (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n    (position === BELOW && note.getStemDirection() === Stem.DOWN);\n\n  if (isStaveOrGraceNote(note)) {\n    if (note.hasStem() && isOnStemTip) {\n      return 0.5;\n    } else {\n      // this amount is larger than the stem-tip offset because we start from\n      // the center of the notehead\n      return 1;\n    }\n  } else {\n    if (note.hasStem() && isOnStemTip) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}\n\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `Vex.Flow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Articulations category string. */\n  static get CATEGORY(): string {\n    return 'Articulation';\n  }\n\n  protected static readonly INITIAL_OFFSET: number = -0.5;\n\n  /** Articulation code provided to the constructor. */\n  readonly type: string;\n\n  public render_options: { font_scale: number };\n  // articulation defined calling reset in constructor\n  protected articulation!: ArticulationStruct;\n  // glyph defined calling reset in constructor\n  protected glyph!: Glyph;\n\n  /**\n   * FIXME:\n   * Most of the complex formatting logic (ie: snapping to space) is\n   * actually done in .render(). But that logic belongs in this method.\n   *\n   * Unfortunately, this isn't possible because, by this point, stem lengths\n   * have not yet been finalized. Finalized stem lengths are required to determine the\n   * initial position of any stem-side articulation.\n   *\n   * This indicates that all objects should have their stave set before being\n   * formatted. It can't be an optional if you want accurate vertical positioning.\n   * Consistently positioned articulations that play nice with other modifiers\n   * won't be possible until we stop relying on render-time formatting.\n   *\n   * Ideally, when this function has completed, the vertical articulation positions\n   * should be ready to render without further adjustment. But the current state\n   * is far from this ideal.\n   */\n  static format(articulations: Articulation[], state: ModifierContextState): boolean {\n    if (!articulations || articulations.length === 0) return false;\n\n    const isAbove = (artic: Articulation) => artic.getPosition() === ABOVE;\n    const isBelow = (artic: Articulation) => artic.getPosition() === BELOW;\n    const margin = 0.5;\n    const getIncrement = (articulation: Articulation, line: number, position: number) =>\n      roundToNearestHalf(\n        getRoundingFunction(line, position),\n        defined(articulation.glyph.getMetrics().height) / 10 + margin\n      );\n\n    articulations.filter(isAbove).forEach((articulation) => {\n      articulation.setTextLine(state.top_text_line);\n      state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);\n    });\n\n    articulations.filter(isBelow).forEach((articulation) => {\n      articulation.setTextLine(state.text_line);\n      state.text_line += getIncrement(articulation, state.text_line, BELOW);\n    });\n\n    const width = articulations\n      .map((articulation) => articulation.getWidth())\n      .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  static easyScoreHook({ articulations }: { articulations: string }, note: StaveNote, builder: Builder): void {\n    if (!articulations) return;\n\n    const articNameToCode: Record<string, string> = {\n      staccato: 'a.',\n      tenuto: 'a-',\n      accent: 'a>',\n    };\n\n    articulations\n      .split(',')\n      .map((articString) => articString.trim().split('.'))\n      .map(([name, position]) => {\n        const artic: { type: string; position?: number } = { type: articNameToCode[name] };\n        if (position) artic.position = Modifier.PositionString[position];\n        return builder.getFactory().Articulation(artic);\n      })\n      .map((artic) => note.addModifier(artic, 0));\n  }\n\n  /**\n   * Create a new articulation.\n   * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts`\n   */\n  constructor(type: string) {\n    super();\n\n    this.type = type;\n    this.position = BELOW;\n    this.render_options = {\n      font_scale: 38,\n    };\n\n    this.reset();\n  }\n\n  protected reset(): void {\n    this.articulation = Tables.articulationCodes(this.type);\n    const articulation = defined(this.articulation, 'ArgumentError', `Articulation not found: ${this.type}`);\n    const code = (this.position === ABOVE ? articulation.aboveCode : articulation.belowCode) || articulation.code;\n    this.glyph = new Glyph(code ?? '', this.render_options.font_scale);\n\n    this.setWidth(defined(this.glyph.getMetrics().width));\n  }\n\n  /** Render articulation in position next to note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const index = this.checkIndex();\n    const { position, glyph, text_line: textLine } = this;\n    const canSitBetweenLines = this.articulation.between_lines;\n\n    const stave = note.checkStave();\n    const staffSpace = stave.getSpacingBetweenLines();\n    const isTab = isTabNote(note);\n\n    // Articulations are centered over/under the note head.\n    const { x } = note.getModifierStartXY(position, index);\n    const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n\n    const initialOffset = getInitialOffset(note, position);\n\n    const padding = this.musicFont.lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);\n\n    let y = (\n      {\n        [ABOVE]: () => {\n          glyph.setOrigin(0.5, 1);\n          const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n        [BELOW]: () => {\n          glyph.setOrigin(0.5, 0);\n          const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n      } as Record<number, () => number>\n    )[position]();\n\n    if (!isTab) {\n      const offsetDirection = position === ABOVE ? -1 : +1;\n      const noteLine = note.getKeyProps()[index].line;\n      const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n      const articLine = distanceFromNote + Number(noteLine);\n      const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n\n      if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);\n\n      y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;\n    }\n\n    L(`Rendering articulation at (x: ${x}, y: ${y})`);\n\n    glyph.render(ctx, x, y);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n\nexport interface BendPhrase {\n  x?: number;\n  type: number;\n  text: string;\n  width?: number;\n  draw_width?: number;\n}\n\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n  static get CATEGORY(): string {\n    return 'Bend';\n  }\n\n  static get UP(): number {\n    return 0;\n  }\n\n  static get DOWN(): number {\n    return 1;\n  }\n\n  // Arrange bends in `ModifierContext`\n  static format(bends: Bend[], state: ModifierContextState): boolean {\n    if (!bends || bends.length === 0) return false;\n\n    let last_width = 0;\n    // Bends are always on top.\n    const text_line = state.top_text_line;\n\n    // Format Bends\n    for (let i = 0; i < bends.length; ++i) {\n      const bend = bends[i];\n      bend.setXShift(last_width);\n      last_width = bend.getWidth();\n      bend.setTextLine(text_line);\n    }\n\n    state.right_shift += last_width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  protected text: string;\n  protected release: boolean;\n  protected phrase: BendPhrase[];\n  protected font: string;\n  public render_options: {\n    line_width: number;\n    release_width: number;\n    bend_width: number;\n    line_style: string;\n  };\n\n  /**\n   * Example of a phrase:\n   * ```\n   *    [{\n   *     type: UP,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: DOWN,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: UP,\n   *     text: \"half\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: UP,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: DOWN,\n   *     text: \"1 1/2\"\n   *     width: 8;\n   *   }]\n   * ```\n   * @param text text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n   * @param release if true, render a release. (DEPRECATED)\n   * @param phrase if set, ignore \"text\" and \"release\", and use the more sophisticated phrase specified\n   */\n  constructor(text: string, release: boolean = false, phrase?: BendPhrase[]) {\n    super();\n\n    this.text = text;\n    this.x_shift = 0;\n    this.release = release;\n    this.font = '10pt Arial';\n    this.render_options = {\n      line_width: 1.5,\n      line_style: '#777777',\n      bend_width: 8,\n      release_width: 8,\n    };\n\n    if (phrase) {\n      this.phrase = phrase;\n    } else {\n      // Backward compatibility\n      this.phrase = [{ type: Bend.UP, text: this.text }];\n      if (this.release) this.phrase.push({ type: Bend.DOWN, text: '' });\n    }\n\n    this.updateWidth();\n  }\n\n  /** Set horizontal shift in pixels. */\n  setXShift(value: number): this {\n    this.x_shift = value;\n    this.updateWidth();\n    return this;\n  }\n\n  /** Set text's font. */\n  setFont(font: string): this {\n    this.font = font;\n    return this;\n  }\n\n  /** Get text provided in the constructor. */\n  getText(): string {\n    return this.text;\n  }\n\n  /** Recalculate width. */\n  protected updateWidth(): this {\n    // eslint-disable-next-line\n    const that = this;\n\n    function measure_text(text: string) {\n      let text_width;\n      const ctxThat = that.getContext();\n      if (ctxThat) {\n        text_width = ctxThat.measureText(text).width;\n      } else {\n        text_width = Tables.textWidth(text);\n      }\n\n      return text_width;\n    }\n\n    let total_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (bend.width != undefined) {\n        total_width += bend.width;\n      } else {\n        const additional_width =\n          bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\n\n        bend.width = Math.max(additional_width, measure_text(bend.text)) + 3;\n        bend.draw_width = bend.width / 2;\n        total_width += bend.width;\n      }\n    }\n\n    this.setWidth(total_width + this.x_shift);\n    return this;\n  }\n\n  /** Draw the bend on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n    start.x += 3;\n    start.y += 0.5;\n    const x_shift = this.x_shift;\n\n    const stave = note.checkStave();\n    const bend_height = stave.getYForTopText(this.text_line) + 3;\n    const annotation_y = stave.getYForTopText(this.text_line) - 1;\n    // eslint-disable-next-line\n    const that = this;\n\n    function renderBend(x: number, y: number, width: number, height: number) {\n      const cp_x = x + width;\n      const cp_y = y;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, y);\n      ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderRelease(x: number, y: number, width: number, height: number) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, height);\n      ctx.quadraticCurveTo(x + width, height, x + width, y);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderArrowHead(x: number, y: number, direction?: number) {\n      const width = 4;\n      const dir = direction || 1;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x - width, y + width * dir);\n      ctx.lineTo(x + width, y + width * dir);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    function renderText(x: number, text: string) {\n      ctx.save();\n      ctx.setRawFont(that.font);\n      const render_x = x - ctx.measureText(text).width / 2;\n      ctx.fillText(text, render_x, annotation_y);\n      ctx.restore();\n    }\n\n    let last_bend = undefined;\n    let last_bend_draw_width = 0;\n    let last_drawn_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (!bend.draw_width) bend.draw_width = 0;\n      if (i === 0) bend.draw_width += x_shift;\n\n      last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);\n      if (bend.type === Bend.UP) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderArrowHead(start.x, bend_height);\n        }\n\n        renderBend(start.x, start.y, last_drawn_width, bend_height);\n      }\n\n      if (bend.type === Bend.DOWN) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend && last_bend.type === Bend.DOWN) {\n          renderArrowHead(start.x, start.y, -1);\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (!last_bend) {\n          last_drawn_width = bend.draw_width;\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n      }\n\n      renderText(start.x + last_drawn_width, bend.text);\n      last_bend = bend;\n      last_bend_draw_width = bend.draw_width;\n      last_bend.x = start.x;\n\n      start.x += last_drawn_width;\n    }\n\n    if (!last_bend || last_bend.x == undefined) {\n      throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n    }\n\n    // Final arrowhead and text\n    if (last_bend.type === Bend.UP) {\n      renderArrowHead(last_bend.x + last_drawn_width, bend_height);\n    } else if (last_bend.type === Bend.DOWN) {\n      renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author: @AaronDavidNewman\n//\n// This implements chord symbols as modifiers that can be attached to notes.\n// Chord symbols can contain multiple 'blocks' which can contain\n// text or glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\n\nimport { ModifierContextState } from 'modifiercontext';\n\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TextFont } from './textfont';\nimport { FontInfo } from './types/common';\nimport { log } from './util';\n\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (ChordSymbol.DEBUG) log('Vex.Flow.ChordSymbol', args);\n}\n\nexport interface ChordSymbolBlock {\n  text: string;\n  symbolType: SymbolTypes;\n  symbolModifier: SymbolModifiers;\n  xShift: number;\n  yShift: number;\n  vAlign: boolean;\n  width: number;\n  glyph?: Glyph;\n}\n\nexport enum HorizontalJustify {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n  CENTER_STEM = 4,\n}\n\nexport enum VerticalJustify {\n  TOP = 1,\n  BOTTOM = 2,\n}\n\nexport enum SymbolTypes {\n  GLYPH = 1,\n  TEXT = 2,\n  LINE = 3,\n}\n\nexport enum SymbolModifiers {\n  NONE = 1,\n  SUBSCRIPT = 2,\n  SUPERSCRIPT = 3,\n}\n\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n  static DEBUG: boolean = false;\n\n  static get CATEGORY(): string {\n    return 'ChordSymbol';\n  }\n\n  protected symbolBlocks: ChordSymbolBlock[];\n  protected horizontal: number;\n  protected vertical: number;\n  protected useKerning: boolean;\n  protected reportWidth: boolean;\n  protected font: FontInfo;\n  protected textFont: TextFont;\n  /** Currently unused. */\n  protected static noFormat: boolean = false;\n\n  // Chord symbols can be positioned and justified relative to the note.\n  static readonly horizontalJustify = HorizontalJustify;\n\n  static readonly horizontalJustifyString: Record<string, HorizontalJustify> = {\n    left: HorizontalJustify.LEFT,\n    right: HorizontalJustify.RIGHT,\n    center: HorizontalJustify.CENTER,\n    centerStem: HorizontalJustify.CENTER_STEM,\n  };\n\n  static readonly verticalJustify = VerticalJustify;\n\n  static readonly verticalJustifyString: Record<string, VerticalJustify> = {\n    top: VerticalJustify.TOP,\n    above: VerticalJustify.TOP,\n    below: VerticalJustify.BOTTOM,\n    bottom: VerticalJustify.BOTTOM,\n  };\n\n  static get superSubRatio(): number {\n    return ChordSymbol.chordSymbolMetrics.global.superSubRatio;\n  }\n\n  /** Currently unused: Globally turn off text formatting, if the built-in formatting does not work for your font. */\n  static set NO_TEXT_FORMAT(val: boolean) {\n    ChordSymbol.noFormat = val;\n  }\n\n  static get NO_TEXT_FORMAT(): boolean {\n    return ChordSymbol.noFormat;\n  }\n\n  // eslint-disable-next-line\n  static getMetricForGlyph(glyphCode: string): any {\n    if (ChordSymbol.chordSymbolMetrics[glyphCode]) {\n      return ChordSymbol.chordSymbolMetrics[glyphCode];\n    }\n    return undefined;\n  }\n\n  getYOffsetForText(text: string): number {\n    let acc = 0;\n    let ix = 0;\n    const resolution = this.textFont.resolution;\n    for (ix = 0; ix < text.length; ++ix) {\n      const metric = this.textFont.getMetricForCharacter(text[ix]);\n\n      if (metric) {\n        acc = metric.y_max < acc ? metric.y_max : acc;\n      }\n    }\n\n    return ix > 0 ? -1 * (acc / resolution) : 0;\n  }\n\n  static get engravingFontResolution(): number {\n    return Tables.DEFAULT_FONT_STACK[0].getResolution();\n  }\n\n  static get spacingBetweenBlocks(): number {\n    return ChordSymbol.chordSymbolMetrics.global.spacing / ChordSymbol.engravingFontResolution;\n  }\n\n  getWidthForCharacter(c: string): number {\n    return this.textFont.getMetricForCharacter(c).advanceWidth / this.textFont.resolution;\n  }\n\n  static getWidthForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0.65; // probably should do something here.\n    }\n    return metric.advanceWidth / ChordSymbol.engravingFontResolution;\n  }\n\n  static getYShiftForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return metric.yOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static getXShiftForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;\n  }\n\n  static get superscriptOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get subscriptOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get kerningOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.kerningOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  // Glyph data\n  static readonly glyphs: Record<string, { code: string }> = {\n    diminished: {\n      code: 'csymDiminished',\n    },\n    dim: {\n      code: 'csymDiminished',\n    },\n    halfDiminished: {\n      code: 'csymHalfDiminished',\n    },\n    '+': {\n      code: 'csymAugmented',\n    },\n    augmented: {\n      code: 'csymAugmented',\n    },\n    majorSeventh: {\n      code: 'csymMajorSeventh',\n    },\n    minor: {\n      code: 'csymMinor',\n    },\n    '-': {\n      code: 'csymMinor',\n    },\n    '(': {\n      code: 'csymParensLeftTall',\n    },\n    leftParen: {\n      code: 'csymParensLeftTall',\n    },\n    ')': {\n      code: 'csymParensRightTall',\n    },\n    rightParen: {\n      code: 'csymParensRightTall',\n    },\n    leftBracket: {\n      code: 'csymBracketLeftTall',\n    },\n    rightBracket: {\n      code: 'csymBracketRightTall',\n    },\n    leftParenTall: {\n      code: 'csymParensLeftVeryTall',\n    },\n    rightParenTall: {\n      code: 'csymParensRightVeryTall',\n    },\n    '/': {\n      code: 'csymDiagonalArrangementSlash',\n    },\n    over: {\n      code: 'csymDiagonalArrangementSlash',\n    },\n    '#': {\n      code: 'accidentalSharp',\n    },\n    b: {\n      code: 'accidentalFlat',\n    },\n  };\n\n  static readonly symbolTypes = SymbolTypes;\n\n  static readonly symbolModifiers = SymbolModifiers;\n\n  // eslint-disable-next-line\n  static get chordSymbolMetrics(): any {\n    return Tables.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol;\n  }\n\n  static get lowerKerningText(): string[] {\n    return Tables.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol.global.lowerKerningText;\n  }\n\n  static get upperKerningText(): string[] {\n    return Tables.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol.global.upperKerningText;\n  }\n\n  /**\n   * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n   * Estimate how many lines above/below the staff we need.\n   */\n  static format(instances: ChordSymbol[], state: ModifierContextState): boolean {\n    if (!instances || instances.length === 0) return false;\n\n    let width = 0;\n    let nonSuperWidth = 0;\n    const reportedWidths = [];\n\n    for (let i = 0; i < instances.length; ++i) {\n      const instance = instances[i];\n      const fontAdj = instance.font.size / 20;\n      const glyphAdj = fontAdj * 2;\n      let lineSpaces = 1;\n      let vAlign = false;\n\n      for (let j = 0; j < instance.symbolBlocks.length; ++j) {\n        const symbol = instance.symbolBlocks[j];\n        const sup = instance.isSuperscript(symbol);\n        const sub = instance.isSubscript(symbol);\n        const subAdj = sup || sub ? ChordSymbol.superSubRatio : 1;\n        const adj = symbol.symbolType === SymbolTypes.GLYPH ? glyphAdj * subAdj : fontAdj * subAdj;\n\n        // If there are super/subscripts, they extend beyond the line so\n        // assume they take up 2 lines\n        if (sup || sub) {\n          lineSpaces = 2;\n        }\n\n        // If there is a symbol-specific offset, add it but consider font\n        // size since font and glyphs will be interspersed\n        if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph !== undefined) {\n          symbol.yShift += ChordSymbol.getYShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.xShift += ChordSymbol.getXShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.glyph.scale = symbol.glyph.scale * adj;\n          symbol.width = ChordSymbol.getWidthForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n        } else if (symbol.symbolType === SymbolTypes.TEXT) {\n          symbol.width = symbol.width * instance.textFont.pointsToPixels * subAdj;\n          symbol.yShift += instance.getYOffsetForText(symbol.text) * adj;\n        }\n\n        if (\n          symbol.symbolType === SymbolTypes.GLYPH &&\n          symbol.glyph !== undefined &&\n          symbol.glyph.code === ChordSymbol.glyphs.over.code\n        ) {\n          lineSpaces = 2;\n        }\n        symbol.width += ChordSymbol.spacingBetweenBlocks * instance.pointsToPixels * subAdj;\n\n        // If a subscript immediately  follows a superscript block, try to\n        // overlay them.\n        if (sup && j > 0) {\n          const prev = instance.symbolBlocks[j - 1];\n          if (!instance.isSuperscript(prev)) {\n            nonSuperWidth = width;\n          }\n        }\n        if (sub && nonSuperWidth > 0) {\n          vAlign = true;\n          // slide the symbol over so it lines up with superscript\n          symbol.xShift = symbol.xShift + (nonSuperWidth - width);\n          width = nonSuperWidth;\n          nonSuperWidth = 0;\n          // If we have vertically lined up, turn kerning off.\n          instance.setEnableKerning(false);\n        }\n        if (!sup && !sub) {\n          nonSuperWidth = 0;\n        }\n        symbol.vAlign = vAlign;\n        width += symbol.width;\n      }\n\n      // make kerning adjustments after computing super/subscripts\n      instance.updateKerningAdjustments();\n      instance.updateOverBarAdjustments();\n\n      if (instance.getVertical() === VerticalJustify.TOP) {\n        instance.setTextLine(state.top_text_line);\n        state.top_text_line += lineSpaces;\n      } else {\n        instance.setTextLine(state.text_line + 1);\n        state.text_line += lineSpaces + 1;\n      }\n      if (instance.getReportWidth()) {\n        reportedWidths.push(width);\n      } else {\n        reportedWidths.push(0);\n      }\n    }\n\n    width = reportedWidths.reduce((a, b) => a + b, 0);\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  constructor() {\n    super();\n    this.symbolBlocks = [];\n    this.horizontal = HorizontalJustify.LEFT;\n    this.vertical = VerticalJustify.TOP;\n    this.useKerning = true;\n    this.reportWidth = true;\n\n    let fontFamily = 'Arial';\n    if (this.musicFont.getName() === 'Petaluma') {\n      fontFamily = 'petalumaScript,Arial';\n    } else {\n      fontFamily = 'Roboto Slab,Times';\n    }\n    this.font = {\n      family: fontFamily,\n      size: 12,\n      weight: '',\n    };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels(): number {\n    return this.textFont.pointsToPixels;\n  }\n\n  get superscriptOffset(): number {\n    return ChordSymbol.superscriptOffset * this.pointsToPixels;\n  }\n\n  get subscriptOffset(): number {\n    return ChordSymbol.subscriptOffset * this.pointsToPixels;\n  }\n\n  setReportWidth(value: boolean): this {\n    this.reportWidth = value;\n    return this;\n  }\n\n  getReportWidth(): boolean {\n    return this.reportWidth;\n  }\n\n  updateOverBarAdjustments(): void {\n    const barIndex = this.symbolBlocks.findIndex(\n      ({ symbolType, glyph }: ChordSymbolBlock) =>\n        symbolType === SymbolTypes.GLYPH && glyph !== undefined && glyph.code === 'csymDiagonalArrangementSlash'\n    );\n\n    if (barIndex < 0) {\n      return;\n    }\n    const bar = this.symbolBlocks[barIndex];\n    const xoff = bar.width / 4;\n    const yoff = 0.25 * this.pointsToPixels;\n    let symIndex = 0;\n    for (symIndex === 0; symIndex < barIndex; ++symIndex) {\n      const symbol = this.symbolBlocks[symIndex];\n      symbol.xShift = symbol.xShift + xoff;\n      symbol.yShift = symbol.yShift - yoff;\n    }\n\n    for (symIndex = barIndex + 1; symIndex < this.symbolBlocks.length; ++symIndex) {\n      const symbol = this.symbolBlocks[symIndex];\n      symbol.xShift = symbol.xShift - xoff;\n      symbol.yShift = symbol.yShift + yoff;\n    }\n  }\n\n  updateKerningAdjustments(): void {\n    let accum = 0;\n    for (let j = 0; j < this.symbolBlocks.length; ++j) {\n      const symbol = this.symbolBlocks[j];\n      accum += this.getKerningAdjustment(j);\n      symbol.xShift += accum;\n    }\n  }\n\n  /** Do some basic kerning so that letter chords like 'A' don't have the extensions hanging off to the right. */\n  getKerningAdjustment(j: number): number {\n    if (!this.useKerning) {\n      return 0;\n    }\n    const currSymbol = this.symbolBlocks[j];\n    const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : undefined;\n    let adjustment = 0;\n\n    // Move things into the '/' over bar\n    if (\n      currSymbol.symbolType === SymbolTypes.GLYPH &&\n      currSymbol.glyph !== undefined &&\n      currSymbol.glyph.code === ChordSymbol.glyphs.over.code\n    ) {\n      adjustment += currSymbol.glyph.metrics.x_shift;\n    }\n\n    if (\n      prevSymbol !== undefined &&\n      prevSymbol.symbolType === SymbolTypes.GLYPH &&\n      prevSymbol.glyph !== undefined &&\n      prevSymbol.glyph.code === ChordSymbol.glyphs.over.code\n    ) {\n      adjustment += prevSymbol.glyph.metrics.x_shift;\n    }\n\n    // For superscripts that follow a letter without much top part, move it to the left slightly\n    let preKernUpper = false;\n    let preKernLower = false;\n    if (prevSymbol !== undefined && prevSymbol.symbolType === SymbolTypes.TEXT) {\n      preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n      preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n    }\n\n    const kerningOffsetPixels = ChordSymbol.kerningOffset * this.pointsToPixels;\n    // TODO: adjust kern for font size.\n    // Where should this constant live?\n    if (preKernUpper && currSymbol.symbolModifier === SymbolModifiers.SUPERSCRIPT) {\n      adjustment += kerningOffsetPixels;\n    }\n\n    if (preKernLower && currSymbol.symbolType === SymbolTypes.TEXT) {\n      if (currSymbol.text[0] >= 'a' && currSymbol.text[0] <= 'z') {\n        adjustment += kerningOffsetPixels / 2;\n      }\n      if (ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol?.text[prevSymbol.text.length - 1])) {\n        adjustment += kerningOffsetPixels / 2;\n      }\n    }\n    return adjustment;\n  }\n\n  /**\n   * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n   * Each block can have its own vertical orientation.\n   */\n  // eslint-disable-next-line\n  getSymbolBlock(params: any = {}): ChordSymbolBlock {\n    const symbolType = params.symbolType ?? SymbolTypes.TEXT;\n    const symbolBlock: ChordSymbolBlock = {\n      text: params.text ?? '',\n      symbolType,\n      symbolModifier: params.symbolModifier ?? SymbolModifiers.NONE,\n      xShift: 0,\n      yShift: 0,\n      vAlign: false,\n      width: 0,\n    };\n\n    // Note: all symbol widths are resolution and font-independent.\n    // We convert to pixel values when we know what the font is.\n    if (symbolType === SymbolTypes.GLYPH && typeof params.glyph === 'string') {\n      const glyphArgs = ChordSymbol.glyphs[params.glyph];\n      const glyphPoints = 20;\n      symbolBlock.glyph = new Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });\n      // Beware: glyph.metrics is not the same as glyph.getMetrics() !\n      // rv.glyph.point = rv.glyph.point * rv.glyph.metrics.scale;\n      // rv.width = rv.glyph.getMetrics().width;\n      // don't set yShift here, b/c we need to do it at formatting time after the font is set.\n    } else if (symbolType === SymbolTypes.TEXT) {\n      let textWidth = 0;\n      for (let i = 0; i < symbolBlock.text.length; ++i) {\n        textWidth += this.getWidthForCharacter(symbolBlock.text[i]);\n      }\n      symbolBlock.width = textWidth;\n    } else if (symbolType === SymbolTypes.LINE) {\n      symbolBlock.width = params.width;\n    }\n\n    return symbolBlock;\n  }\n\n  /** Add a symbol to this chord, could be text, glyph or line. */\n  // eslint-disable-next-line\n  addSymbolBlock(parameters: any): this {\n    this.symbolBlocks.push(this.getSymbolBlock(parameters));\n    return this;\n  }\n\n  // ### Convenience functions for creating different types of chord symbol parts.\n\n  /** Add a text block. */\n  // eslint-disable-next-line\n  addText(text: string, parameters: any = {}): this {\n    const symbolType = SymbolTypes.TEXT;\n    return this.addSymbolBlock({ ...parameters, text, symbolType });\n  }\n\n  /** Add a text block with superscript modifier. */\n  addTextSuperscript(text: string): this {\n    const symbolType = SymbolTypes.TEXT;\n    const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  /** Add a text block with subscript modifier. */\n  addTextSubscript(text: string): this {\n    const symbolType = SymbolTypes.TEXT;\n    const symbolModifier = SymbolModifiers.SUBSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  /** Add a glyph block with superscript modifier. */\n  addGlyphSuperscript(glyph: string): this {\n    const symbolType = SymbolTypes.GLYPH;\n    const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ glyph, symbolType, symbolModifier });\n  }\n\n  /** Add a glyph block. */\n  // eslint-disable-next-line\n  addGlyph(glyph: string, params: any = {}): this {\n    const symbolType = SymbolTypes.GLYPH;\n    return this.addSymbolBlock({ ...params, glyph, symbolType });\n  }\n\n  /**\n   * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n   * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n   */\n  // eslint-disable-next-line\n  addGlyphOrText(text: string, params: any = {}): this {\n    let str = '';\n    for (let i = 0; i < text.length; ++i) {\n      const char = text[i];\n      if (ChordSymbol.glyphs[char]) {\n        if (str.length > 0) {\n          this.addText(str, params);\n          str = '';\n        }\n        this.addGlyph(char, params);\n      } else {\n        // Collect consecutive characters with no glyphs.\n        str += char;\n      }\n    }\n    if (str.length > 0) {\n      this.addText(str, params);\n    }\n    return this;\n  }\n\n  /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n  // eslint-disable-next-line\n  addLine(width: number, params: any = {}): this {\n    const symbolType = SymbolTypes.LINE;\n    return this.addSymbolBlock({ ...params, symbolType, width });\n  }\n\n  // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n  setFont(family: string, size: number, weight: string): this {\n    this.font = { family, size, weight };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n    return this;\n  }\n\n  setFontSize(size: number): this {\n    this.font.size = size;\n    this.textFont.setFontSize(size);\n    return this;\n  }\n\n  setEnableKerning(val: boolean): this {\n    this.useKerning = val;\n    return this;\n  }\n\n  /** Set vertical position of text (above or below stave). */\n  setVertical(vj: VerticalJustify | string | number): this {\n    this.vertical = typeof vj === 'string' ? ChordSymbol.verticalJustifyString[vj] : vj;\n    return this;\n  }\n\n  getVertical(): number {\n    return this.vertical;\n  }\n\n  /** Set horizontal justification. */\n  setHorizontal(hj: HorizontalJustify | string | number): this {\n    this.horizontal = typeof hj === 'string' ? ChordSymbol.horizontalJustifyString[hj] : hj;\n    return this;\n  }\n\n  getHorizontal(): number {\n    return this.horizontal;\n  }\n\n  getWidth(): number {\n    let width = 0;\n    this.symbolBlocks.forEach((symbol) => {\n      width += symbol.vAlign ? 0 : symbol.width;\n    });\n    return width;\n  }\n\n  isSuperscript(symbol: ChordSymbolBlock): boolean {\n    return symbol.symbolModifier !== undefined && symbol.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n  }\n\n  isSubscript(symbol: ChordSymbolBlock): boolean {\n    return symbol.symbolModifier !== undefined && symbol.symbolModifier === SymbolModifiers.SUBSCRIPT;\n  }\n\n  /** Render text and glyphs above/below the note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote() as StemmableNote;\n    this.setRendered();\n\n    // We're changing context parameters. Save current state.\n    ctx.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n\n    const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    let y: number;\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    const hasStem = note.hasStem();\n    const stave = note.checkStave();\n\n    if (this.vertical === VerticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n      if (hasStem) {\n        const stem_ext = note.checkStem().getExtents();\n        const spacing = stave.getSpacingBetweenLines();\n        const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else {\n      // (this.vertical === VerticalJustify.TOP)\n      y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\n      if (hasStem) {\n        const stem_ext = note.checkStem().getExtents();\n        const spacing = stave.getSpacingBetweenLines();\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    }\n\n    let x = start.x;\n    if (this.horizontal === HorizontalJustify.LEFT) {\n      x = start.x;\n    } else if (this.horizontal === HorizontalJustify.RIGHT) {\n      x = start.x + this.getWidth();\n    } else if (this.horizontal === HorizontalJustify.CENTER) {\n      x = start.x - this.getWidth() / 2;\n    } else {\n      // HorizontalJustify.CENTER_STEM\n      x = note.getStemX() - this.getWidth() / 2;\n    }\n    L('Rendering ChordSymbol: ', this.textFont, x, y);\n\n    this.symbolBlocks.forEach((symbol) => {\n      const sp = this.isSuperscript(symbol);\n      const sub = this.isSubscript(symbol);\n      let curY = y;\n      L('shift was ', symbol.xShift, symbol.yShift);\n      L('curY pre sub ', curY);\n      if (sp) {\n        curY += this.superscriptOffset;\n      }\n      if (sub) {\n        curY += this.subscriptOffset;\n      }\n      L('curY sup/sub ', curY);\n\n      if (symbol.symbolType === SymbolTypes.TEXT) {\n        if (sp || sub) {\n          ctx.save();\n          ctx.setFont(this.font.family, this.font.size * ChordSymbol.superSubRatio, this.font.weight);\n        }\n        // TODO???\n        // We estimate the text width, fill it in with the empirical value so the formatting is even.\n        // const textDim = ctx.measureText(symbol.text);\n        // symbol.width = textDim.width;\n\n        L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);\n\n        ctx.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);\n        if (sp || sub) {\n          ctx.restore();\n        }\n      } else if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph) {\n        curY += symbol.yShift;\n        L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);\n        symbol.glyph.render(ctx, x + symbol.xShift, curY);\n      } else if (symbol.symbolType === SymbolTypes.LINE) {\n        L('Rendering Line : ', symbol.width, x, curY);\n        ctx.beginPath();\n        ctx.setLineWidth(1); // ?\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + symbol.width, curY);\n        ctx.stroke();\n      }\n\n      x += symbol.width;\n      if (symbol.vAlign) {\n        x += symbol.xShift;\n      }\n    });\n    ctx.closeGroup();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { defined, RuntimeError } from './util';\n\nexport interface VoiceTime {\n  num_beats: number;\n  beat_value: number;\n  /** Defaults to `Flow.RESOLUTION` if not provided. */\n  resolution?: number;\n}\n\nexport enum VoiceMode {\n  STRICT = 1,\n  SOFT = 2,\n  FULL = 3,\n}\n\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n  static get CATEGORY(): string {\n    return 'Voice';\n  }\n\n  /**\n   * Modes allow the addition of ticks in three different ways:\n   * - STRICT: This is the default. Ticks must fill the voice.\n   * - SOFT: Ticks can be added without restrictions.\n   * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n   */\n  static get Mode(): typeof VoiceMode {\n    return VoiceMode;\n  }\n\n  protected resolutionMultiplier: number = 1;\n  protected smallestTickCount: Fraction;\n  protected stave?: Stave;\n  protected mode: VoiceMode = VoiceMode.STRICT;\n  protected expTicksUsed?: number;\n  protected preFormatted?: boolean;\n  protected options: { softmaxFactor: number };\n\n  protected readonly totalTicks: Fraction;\n  protected readonly ticksUsed: Fraction = new Fraction(0, 1);\n  protected readonly largestTickWidth: number = 0;\n  protected readonly tickables: Tickable[] = [];\n  protected readonly time: Required<VoiceTime>;\n\n  constructor(time?: VoiceTime | string, options?: { softmaxFactor: number }) {\n    super();\n\n    this.options = {\n      softmaxFactor: 100,\n      ...options,\n    };\n\n    // Convert the `time` string into a VoiceTime object if necessary.\n    let voiceTime: VoiceTime | undefined;\n    if (typeof time === 'string') {\n      // Time signature shortcut: \"4/4\", \"3/8\", etc.\n      const match = time.match(/(\\d+)\\/(\\d+)/);\n      if (match) {\n        voiceTime = {\n          num_beats: parseInt(match[1]),\n          beat_value: parseInt(match[2]),\n        };\n      }\n    } else {\n      voiceTime = time;\n    }\n\n    // Default time signature is 4/4.\n    this.time = {\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Tables.RESOLUTION,\n      ...voiceTime,\n    };\n\n    // Recalculate total ticks.\n    this.totalTicks = new Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n    this.smallestTickCount = this.totalTicks.clone();\n  }\n\n  /** Get the total ticks in the voice. */\n  getTotalTicks(): Fraction {\n    return this.totalTicks;\n  }\n\n  /** Get the total ticks used in the voice by all the tickables. */\n  getTicksUsed(): Fraction {\n    return this.ticksUsed;\n  }\n\n  /** Get the largest width of all the tickables. */\n  getLargestTickWidth(): number {\n    return this.largestTickWidth;\n  }\n\n  /** Get the tick count for the shortest tickable */\n  getSmallestTickCount(): Fraction {\n    return this.smallestTickCount;\n  }\n\n  /** Get the tickables in the voice. */\n  getTickables(): Tickable[] {\n    return this.tickables;\n  }\n\n  /** Get the voice mode. */\n  getMode(): number {\n    return this.mode;\n  }\n\n  /**\n   * Set the voice mode.\n   * @param mode value from `VoiceMode`\n   */\n  setMode(mode: number): this {\n    this.mode = mode;\n    return this;\n  }\n\n  /** Get the resolution multiplier for the voice. */\n  getResolutionMultiplier(): number {\n    return this.resolutionMultiplier;\n  }\n\n  /** Get the actual tick resolution for the voice. */\n  getActualResolution(): number {\n    return this.resolutionMultiplier * this.time.resolution;\n  }\n\n  /** Set the voice's stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    // Reset the bounding box so we can reformat.\n    this.boundingBox = undefined;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  /** Get the bounding box for the voice. */\n  getBoundingBox(): BoundingBox | undefined {\n    if (!this.boundingBox) {\n      const stave = this.checkStave();\n      let boundingBox = undefined;\n      for (let i = 0; i < this.tickables.length; ++i) {\n        const tickable = this.tickables[i];\n        tickable.setStave(stave);\n        const bb = tickable.getBoundingBox();\n        if (bb) {\n          boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n        }\n      }\n      this.boundingBox = boundingBox;\n    }\n    return this.boundingBox;\n  }\n\n  /** Set the voice mode to strict or soft. */\n  setStrict(strict: boolean): this {\n    this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n    return this;\n  }\n\n  /** Determine if the voice is complete according to the voice mode. */\n  isComplete(): boolean {\n    if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n      return this.ticksUsed.equals(this.totalTicks);\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * We use softmax to layout the tickables proportional to the exponent of\n   * their duration. The softmax factor is used to determine the 'linearness' of\n   * the layout.\n   *\n   * The softmax of all the tickables in this voice should sum to 1.\n   */\n  setSoftmaxFactor(factor: number): this {\n    this.options.softmaxFactor = factor;\n    return this;\n  }\n\n  /**\n   * Calculate the sum of the exponents of all the ticks in this voice to use\n   * as the denominator of softmax.\n   */\n  protected reCalculateExpTicksUsed(): number {\n    const totalTicks = this.ticksUsed.value();\n    const exp = (tickable: Tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n    this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b, 0);\n    return this.expTicksUsed;\n  }\n\n  /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n  softmax(tickValue: number): number {\n    if (!this.expTicksUsed) {\n      this.expTicksUsed = this.reCalculateExpTicksUsed();\n    }\n\n    const totalTicks = this.ticksUsed.value();\n    const exp = (v: number) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n    const sm = exp(tickValue) / this.expTicksUsed;\n    return sm;\n  }\n\n  /** Add a tickable to the voice. */\n  addTickable(tickable: Tickable): this {\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      // Update the total ticks for this line.\n      this.ticksUsed.add(ticks);\n      this.expTicksUsed = 0; // reset\n\n      if (\n        (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n        this.ticksUsed.greaterThan(this.totalTicks)\n      ) {\n        this.ticksUsed.subtract(ticks);\n        throw new RuntimeError('BadArgument', 'Too many ticks.');\n      }\n\n      // Track the smallest tickable for formatting.\n      if (ticks.lessThan(this.smallestTickCount)) {\n        this.smallestTickCount = ticks.clone();\n      }\n\n      this.resolutionMultiplier = this.ticksUsed.denominator;\n\n      // Expand total ticks using denominator from ticks used.\n      this.totalTicks.add(0, this.ticksUsed.denominator);\n    }\n\n    // Add the tickable to the line.\n    this.tickables.push(tickable);\n    tickable.setVoice(this);\n    return this;\n  }\n\n  /** Add an array of tickables to the voice. */\n  addTickables(tickables: Tickable[]): this {\n    for (let i = 0; i < tickables.length; ++i) {\n      this.addTickable(tickables[i]);\n    }\n    return this;\n  }\n\n  /** Preformat the voice by applying the voice's stave to each note. */\n  preFormat(): this {\n    if (this.preFormatted) return this;\n    const stave = this.checkStave();\n    this.tickables.forEach((tickable) => {\n      if (!tickable.getStave()) {\n        tickable.setStave(stave);\n      }\n    });\n    this.preFormatted = true;\n    return this;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  /**\n   * Render the voice onto the canvas `context` and an optional `stave`.\n   * If `stave` is omitted, it is expected that the notes have staves\n   * already set.\n   *\n   * This method also calculates the voice's boundingBox while drawing\n   * the notes. Note the similarities with this.getBoundingBox().\n   */\n  draw(context: RenderContext = this.checkContext(), stave?: Stave): void {\n    stave = stave ?? this.stave;\n    this.setRendered();\n    let boundingBox = undefined;\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      // Set the stave if provided.\n      if (stave) {\n        tickable.setStave(stave);\n      }\n      defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n      const bb = tickable.getBoundingBox();\n      if (bb) {\n        boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n      }\n\n      tickable.setContext(context);\n      tickable.drawWithStyle();\n    }\n\n    this.boundingBox = boundingBox;\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\n\nimport { Builder } from './easyscore';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { StaveNote } from './stavenote';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport class FretHandFinger extends Modifier {\n  static get CATEGORY(): string {\n    return 'FretHandFinger';\n  }\n\n  // Arrange fingerings inside a ModifierContext.\n  static format(nums: FretHandFinger[], state: ModifierContextState): boolean {\n    const { left_shift, right_shift } = state;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shiftLeft = 0;\n    let shiftRight = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote();\n      const pos = num.getPosition();\n      const index = num.checkIndex();\n      const props = note.getKeyProps()[index];\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n          }\n          if (right_shift === 0) {\n            shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        note,\n        num,\n        pos,\n        line: props.line,\n        shiftL: shiftLeft,\n        shiftR: shiftRight,\n      });\n    }\n\n    // Sort fingernumbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let numShiftL = 0;\n    let numShiftR = 0;\n    let xWidthL = 0;\n    let xWidthR = 0;\n    let lastLine = null;\n    let lastNote = null;\n\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n\n      // Reset the position of the string number every line.\n      if (line !== lastLine || note !== lastNote) {\n        numShiftL = left_shift + shiftL;\n        numShiftR = right_shift + shiftR;\n      }\n\n      const numWidth = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift + numShiftL);\n        num_shift = left_shift + numWidth; // spacing\n        xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(numShiftR);\n        num_shift = shiftRight + numWidth; // spacing\n        xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n      }\n      lastLine = line;\n      lastNote = note;\n    }\n\n    state.left_shift += xWidthL;\n    state.right_shift += xWidthR;\n\n    return true;\n  }\n\n  static easyScoreHook({ fingerings }: { fingerings?: string } = {}, note: StaveNote, builder: Builder): void {\n    fingerings\n      ?.split(',')\n      .map((fingeringString: string) => {\n        const split = fingeringString.trim().split('.');\n        const params: { number: string; position?: string } = { number: split[0] };\n        if (split[1]) params.position = split[1];\n        return builder.getFactory().Fingering(params);\n      })\n      .map((fingering: Modifier, index: number) => note.addModifier(fingering, index));\n  }\n\n  protected finger: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected font: FontInfo;\n\n  constructor(finger: string) {\n    super();\n\n    this.finger = finger;\n    this.width = 7;\n    this.position = Modifier.Position.LEFT; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  setFretHandFinger(finger: string): this {\n    this.finger = finger;\n    return this;\n  }\n\n  getFretHandFinger(): string {\n    return this.finger;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset + 5;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n        dot_x -= 4;\n        dot_y -= 12;\n        break;\n      case Modifier.Position.BELOW:\n        dot_x -= 2;\n        dot_y += 10;\n        break;\n      case Modifier.Position.LEFT:\n        dot_x -= this.width;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += 1;\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n    }\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText('' + this.finger, dot_x, dot_y);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\n\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { Voice } from './voice';\n\nexport class NoteSubGroup extends Modifier {\n  static get CATEGORY(): string {\n    return 'NoteSubGroup';\n  }\n\n  // Arrange groups inside a `ModifierContext`\n  static format(groups: NoteSubGroup[], state: ModifierContextState): boolean {\n    if (!groups || groups.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < groups.length; ++i) {\n      const group = groups[i];\n      group.preFormat();\n      width += group.getWidth();\n    }\n\n    state.left_shift += width;\n    return true;\n  }\n\n  protected subNotes: Note[];\n  protected preFormatted: boolean = false;\n  protected formatter: Formatter;\n  protected voice: Voice;\n\n  constructor(subNotes: Note[]) {\n    super();\n\n    this.position = Modifier.Position.LEFT;\n    this.subNotes = subNotes;\n    this.subNotes.forEach((subNote) => {\n      subNote.setIgnoreTicks(false);\n    });\n    this.width = 0;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Tables.RESOLUTION,\n    }).setStrict(false);\n\n    this.voice.addTickables(this.subNotes);\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  draw(): void {\n    const ctx: RenderContext = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n    this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n    this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\n\nimport { Fraction } from './fraction';\nimport { NoteMetrics } from './note';\nimport { Tickable } from './tickable';\nimport { RuntimeError } from './util';\n\nexport interface TickContextMetrics extends NoteMetrics {\n  totalLeftPx: number;\n  totalRightPx: number;\n}\n\nexport interface TickContextOptions {\n  tickID: number;\n}\n\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext {\n  protected readonly tickID: number;\n  protected readonly tickables: Tickable[];\n  protected readonly tickablesByVoice: Record<string, Tickable>;\n  protected currentTick: Fraction;\n  protected maxTicks: Fraction;\n  protected padding: number;\n  protected xBase: number;\n  protected x: number;\n  protected xOffset: number;\n  protected notePx: number;\n  protected glyphPx: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected modLeftPx: number;\n  protected modRightPx: number;\n  protected totalLeftPx: number;\n  protected totalRightPx: number;\n  protected maxTickable?: Tickable;\n  protected minTicks?: Fraction;\n  protected minTickable?: Tickable;\n  tContexts: TickContext[];\n\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected width: number;\n  protected formatterMetrics: { freedom: { left: number; right: number } };\n\n  static getNextContext(tContext: TickContext): TickContext | undefined {\n    const contexts = tContext.tContexts;\n    const index = contexts.indexOf(tContext);\n\n    if (index + 1 < contexts.length) return contexts[index + 1];\n  }\n\n  constructor(options?: TickContextOptions) {\n    this.tickID = options && options.tickID ? options.tickID : 0;\n    this.currentTick = new Fraction(0, 1);\n\n    this.maxTicks = new Fraction(0, 1);\n    this.maxTickable = undefined; // Biggest tickable\n    this.minTicks = undefined; // this can remian null if all tickables have ignore_ticks\n    this.minTickable = undefined;\n\n    this.padding = 1; // padding on each side (width += padding * 2)\n    this.x = 0;\n    this.xBase = 0; // base x position without xOffset\n    this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n    this.tickables = []; // Notes, tabs, chords, lyrics.\n    this.tickablesByVoice = {}; // Tickables indexed by voice number\n\n    // Formatting metrics\n    this.notePx = 0; // width of widest note in this context\n    this.glyphPx = 0; // width of glyph (note head)\n    this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n    this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n    this.modLeftPx = 0; // Left modifier pixels\n    this.modRightPx = 0; // Right modifier pixels\n    this.totalLeftPx = 0; // Total left pixels\n    this.totalRightPx = 0; // Total right pixels\n    this.tContexts = []; // Parent array of tick contexts\n\n    this.width = 0;\n    this.formatterMetrics = {\n      // The freedom of a tickcontext is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n    };\n  }\n\n  getTickID(): number {\n    return this.tickID;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    this.xBase = x;\n    this.xOffset = 0;\n    return this;\n  }\n\n  getXBase(): number {\n    return this.xBase;\n  } // use of xBase and xOffset is optional, avoids offset creep\n\n  setXBase(xBase: number): void {\n    this.xBase = xBase;\n    this.x = xBase + this.xOffset;\n  }\n\n  getXOffset(): number {\n    return this.xOffset;\n  }\n\n  setXOffset(xOffset: number): void {\n    this.xOffset = xOffset;\n    this.x = this.xBase + xOffset;\n  }\n\n  getWidth(): number {\n    return this.width + this.padding * 2;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  getMaxTicks(): Fraction {\n    return this.maxTicks;\n  }\n\n  getMinTicks(): Fraction | undefined {\n    return this.minTicks;\n  }\n\n  getMaxTickable(): Tickable | undefined {\n    return this.maxTickable;\n  }\n\n  getMinTickable(): Tickable | undefined {\n    return this.minTickable;\n  }\n\n  getTickables(): Tickable[] {\n    return this.tickables;\n  }\n\n  /**\n   * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n   *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n   * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n   */\n  getTickableForVoice(voiceIndex: number): Tickable {\n    return this.tickablesByVoice[voiceIndex];\n  }\n\n  getTickablesByVoice(): Record<string, Tickable> {\n    return this.tickablesByVoice;\n  }\n\n  getCenterAlignedTickables(): Tickable[] {\n    return this.tickables.filter((tickable) => tickable.isCenterAligned());\n  }\n\n  /** Gets widths context, note and left/right modifiers for formatting. */\n  getMetrics(): TickContextMetrics {\n    const {\n      width,\n      glyphPx,\n      notePx,\n      leftDisplacedHeadPx,\n      rightDisplacedHeadPx,\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    } = this;\n    return {\n      width, // Width of largest tickable in context\n      glyphPx, // Width of largest glyph (note head)\n      notePx, // Width of notehead + stem\n      leftDisplacedHeadPx, // Left modifiers\n      rightDisplacedHeadPx, // Right modifiers\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    };\n  }\n\n  getCurrentTick(): Fraction {\n    return this.currentTick;\n  }\n\n  setCurrentTick(tick: Fraction): void {\n    this.currentTick = tick;\n    this.preFormatted = false;\n  }\n\n  addTickable(tickable: Tickable, voiceIndex?: number): this {\n    if (!tickable) {\n      throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n    }\n\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      if (ticks.greaterThan(this.maxTicks)) {\n        this.maxTicks = ticks.clone();\n        this.maxTickable = tickable;\n      }\n\n      if (this.minTicks == null) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      } else if (ticks.lessThan(this.minTicks)) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      }\n    }\n\n    tickable.setTickContext(this);\n    this.tickables.push(tickable);\n    this.tickablesByVoice[voiceIndex || 0] = tickable;\n    this.preFormatted = false;\n    return this;\n  }\n\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      tickable.preFormat();\n      const metrics = tickable.getMetrics();\n\n      // Maintain max displaced head pixels from all tickables in the context\n      this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n      this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n\n      // Maintain the widest note for all tickables in the context\n      this.notePx = Math.max(this.notePx, metrics.notePx);\n\n      // Maintain the widest note head\n      this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);\n\n      // Total modifier shift\n      this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n      this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n\n      // Total shift\n      this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n      this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n\n      // Recalculate the tick context total width\n      this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n    }\n\n    return this;\n  }\n\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n\n  getFormatterMetrics(): { freedom: { left: number; right: number } } {\n    return this.formatterMetrics;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n// MIT License\n\nimport { Stem } from 'stem';\nimport { isTabNote } from 'typeguard';\n\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { defined, log, RuntimeError } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Ornament.DEBUG) log('Vex.Flow.Ornament', args);\n}\n\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Ornaments category string. */\n  static get CATEGORY(): string {\n    return 'Ornament';\n  }\n\n  protected ornament: {\n    code: string;\n  };\n  protected stemUpYOffset: number;\n  protected ornamentAlignWithNoteHead: string[] | boolean;\n  protected type: string;\n\n  protected delayed: boolean;\n  protected reportedWidth: number;\n  protected adjustForStemDirection: boolean;\n  public render_options: {\n    accidentalUpperPadding: number;\n    accidentalLowerPadding: number;\n    font_scale: number;\n  };\n  protected glyph: Glyph;\n  protected accidentalUpper?: Glyph;\n  protected accidentalLower?: Glyph;\n  protected delayXShift?: number;\n\n  /** Arrange ornaments inside `ModifierContext` */\n  static format(ornaments: Ornament[], state: ModifierContextState): boolean {\n    if (!ornaments || ornaments.length === 0) return false;\n\n    let width = 0; // width is used by ornaments, which are always centered on the note head\n    let right_shift = state.right_shift; // jazz ornaments calculate r/l shift separately\n    let left_shift = state.left_shift;\n    let yOffset = 0;\n\n    for (let i = 0; i < ornaments.length; ++i) {\n      const ornament = ornaments[i];\n      const increment = 2;\n\n      if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {\n        ornament.x_shift += right_shift + 2;\n      }\n      if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {\n        ornament.x_shift -= left_shift + 2;\n      }\n      if (ornament.reportedWidth && ornament.x_shift < 0) {\n        left_shift += ornament.reportedWidth;\n      } else if (ornament.reportedWidth && ornament.x_shift > 0) {\n        right_shift += ornament.reportedWidth;\n      } else {\n        width = Math.max(ornament.getWidth(), width);\n      }\n      // articulations above/below the line can be stacked.\n      if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {\n        // Unfortunately we don't know the stem direction.  So we base it\n        // on the line number, but also allow it to be overridden.\n        const ornamentNote = defined(ornament.note, 'NoAttachedNote');\n        if (ornamentNote.getLineNumber() >= 3 || ornament.getPosition() === Modifier.Position.ABOVE) {\n          state.top_text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset -= ornament.glyph.bbox.getH();\n        } else {\n          state.text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset += ornament.glyph.bbox.getH();\n        }\n      } else {\n        if (ornament.getPosition() === Modifier.Position.ABOVE) {\n          ornament.setTextLine(state.top_text_line);\n          state.top_text_line += increment;\n        } else {\n          ornament.setTextLine(state.text_line);\n          state.text_line += increment;\n        }\n      }\n    }\n\n    // Note: 'legit' ornaments don't consider other modifiers when calculating their\n    // X position, but jazz ornaments sometimes need to.\n    state.left_shift = left_shift + width / 2;\n    state.right_shift = right_shift + width / 2;\n    return true;\n  }\n\n  /**\n   * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n   * these are generally on the top of the staff.\n   */\n  static get ornamentNoteTransition(): string[] {\n    return ['flip', 'jazzTurn', 'smear'];\n  }\n\n  /**\n   * ornamentAttack indicates something that happens in the attach, placed before the note and\n   * any accidentals\n   */\n  static get ornamentAttack(): string[] {\n    return ['scoop'];\n  }\n\n  /**\n   * The ornament is aligned based on the note head, but without regard to whether the\n   * stem goes up or down.\n   */\n  static get ornamentAlignWithNoteHead(): string[] {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];\n  }\n\n  /**\n   * An ornament that happens on the release of the note, generally placed after the\n   * note and overlapping the next beat/measure..\n   */\n  static get ornamentRelease(): string[] {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n  }\n\n  /** ornamentArticulation goes above/below the note based on space availablity */\n  static get ornamentArticulation(): string[] {\n    return ['bend', 'plungerClosed', 'plungerOpen'];\n  }\n\n  /**\n   * Legacy ornaments have hard-coded metrics.  If additional ornament types are\n   * added, get their metrics here.\n   */\n  // eslint-disable-next-line\n  getMetrics(): any {\n    return this.getFontStack()[0].getMetrics().glyphs.jazzOrnaments[this.ornament.code];\n  }\n\n  /**\n   * Create a new ornament of type `type`, which is an entry in\n   * `Vex.Flow.ornamentCodes` in `tables.ts`.\n   */\n  constructor(type: string) {\n    super();\n\n    this.type = type;\n    this.delayed = false;\n\n    this.render_options = {\n      font_scale: 38,\n      accidentalLowerPadding: 3,\n      accidentalUpperPadding: 3,\n    };\n\n    this.ornament = Tables.ornamentCodes(this.type);\n\n    // new ornaments have their origin at the origin, and have more specific\n    // metrics.  Legacy ornaments do some\n    // x scaling, and have hard-coded metrics\n    const metrics = this.getMetrics();\n\n    // some jazz ornaments are above or below depending on stem direction.\n    this.adjustForStemDirection = false;\n\n    // some jazz ornaments like falls are supposed to overlap with future bars\n    // and so we report a different width than they actually take up.\n    this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;\n\n    this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;\n\n    this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n\n    if (!this.ornament) {\n      throw new RuntimeError('ArgumentError', `Ornament not found: '${this.type}'`);\n    }\n\n    this.x_shift = metrics ? metrics.xOffset : 0;\n    this.y_shift = metrics ? metrics.yOffset : 0;\n\n    this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale, {\n      category: `ornament.${this.ornament.code}`,\n    });\n\n    // Is this a jazz ornament that goes between this note and the next note.\n    if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      this.delayed = true;\n    }\n\n    // Legacy ornaments need this.  I don't know why, but horizontal spacing issues\n    // happen if I don't set it.\n    if (!metrics) {\n      this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\n    }\n  }\n\n  /** Set whether the ornament is to be delayed. */\n  setDelayed(delayed: boolean): this {\n    this.delayed = delayed;\n    return this;\n  }\n\n  /** Set the upper accidental for the ornament. */\n  setUpperAccidental(accid: string): this {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalUpper = new Glyph(Tables.accidentalCodes(accid).code, scale);\n    this.accidentalUpper.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  /** Set the lower accidental for the ornament. */\n  setLowerAccidental(accid: string): this {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalLower = new Glyph(Tables.accidentalCodes(accid).code, scale);\n    this.accidentalLower.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  /** Render ornament in position next to note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote() as StemmableNote;\n    this.setRendered();\n\n    const stemDir = note.getStemDirection();\n    const stave = note.checkStave();\n\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n\n    // Get stem extents\n    const stemExtents = note.checkStem().getExtents();\n    let y = stemDir === Stem.DOWN ? stemExtents.baseY : stemExtents.topY;\n\n    // TabNotes don't have stems attached to them. Tab stems are rendered outside the stave.\n    if (isTabNote(note)) {\n      if (note.hasStem()) {\n        if (stemDir === Stem.DOWN) {\n          y = stave.getYForTopText(this.text_line);\n        }\n      } else {\n        // Without a stem\n        y = stave.getYForTopText(this.text_line);\n      }\n    }\n\n    const isPlacedOnNoteheadSide = stemDir === Stem.DOWN;\n    const spacing = stave.getSpacingBetweenLines();\n    let lineSpacing = 1;\n\n    // Beamed stems are longer than quarter note stems, adjust accordingly\n    if (!isPlacedOnNoteheadSide && note.hasBeam()) {\n      lineSpacing += 0.5;\n    }\n\n    const totalSpacing = spacing * (this.text_line + lineSpacing);\n    const glyphYBetweenLines = y - totalSpacing;\n\n    // Get initial coordinates for the modifier position\n    const start = note.getModifierStartXY(this.position, this.index);\n    let glyphX = start.x;\n\n    // If the ornament is aligned with the note head, don't consider the stave y\n    // but use the 'natural' modifier y\n    let glyphY = this.ornamentAlignWithNoteHead\n      ? start.y\n      : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n    glyphY += this.y_shift;\n\n    // Ajdust x position if ornament is delayed\n    if (this.delayed) {\n      let delayXShift = 0;\n      const startX = glyphX - (stave.getX() - 10);\n      if (this.delayXShift !== undefined) {\n        delayXShift = this.delayXShift;\n      } else {\n        delayXShift += this.glyph.getMetrics().width / 2;\n        const nextContext = TickContext.getNextContext(note.getTickContext());\n        if (nextContext) {\n          delayXShift += (nextContext.getX() - startX) * 0.5;\n        } else {\n          delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\n        }\n        this.delayXShift = delayXShift;\n      }\n      glyphX += delayXShift;\n    }\n\n    L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n\n    if (this.accidentalLower) {\n      this.accidentalLower.render(ctx, glyphX, glyphY);\n      glyphY -= this.accidentalLower.getMetrics().height;\n      glyphY -= this.render_options.accidentalLowerPadding;\n    }\n\n    if (this.stemUpYOffset && note.hasStem() && note.getStemDirection() === 1) {\n      glyphY += this.stemUpYOffset;\n    }\n    if (note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      glyphY = note.checkStave().getBoundingBox().getY() + 40;\n    }\n\n    this.glyph.render(ctx, glyphX + this.x_shift, glyphY);\n\n    if (this.accidentalUpper) {\n      glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;\n      this.accidentalUpper.render(ctx, glyphX, glyphY);\n    }\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2021.\n// MIT License\n\nexport interface TextMeasure {\n  width: number;\n  height: number;\n}\n\nexport interface GroupAttributes {\n  pointerBBox: boolean;\n}\n\nexport abstract class RenderContext {\n  abstract clear(): void;\n  abstract setFont(family: string, size: number, weight?: string): this;\n  abstract setRawFont(font: string): this;\n  abstract setFillStyle(style: string): this;\n  abstract setBackgroundFillStyle(style: string): this;\n  abstract setStrokeStyle(style: string): this;\n  abstract setShadowColor(color: string): this;\n  abstract setShadowBlur(blur: number): this;\n  abstract setLineWidth(width: number): this;\n  abstract setLineCap(capType: CanvasLineCap): this;\n  abstract setLineDash(dashPattern: number[]): this;\n  abstract scale(x: number, y: number): this;\n  abstract rect(x: number, y: number, width: number, height: number): this;\n  abstract resize(width: number, height: number): this;\n  abstract fillRect(x: number, y: number, width: number, height: number): this;\n  abstract clearRect(x: number, y: number, width: number, height: number): this;\n  abstract beginPath(): this;\n  abstract moveTo(x: number, y: number): this;\n  abstract lineTo(x: number, y: number): this;\n  abstract bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): this;\n  abstract quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): this;\n  abstract arc(\n    x: number,\n    y: number,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n    antiClockwise: boolean\n  ): this;\n  // eslint-disable-next-line\n  abstract fill(attributes?: any): this;\n  abstract stroke(): this;\n  abstract closePath(): this;\n  abstract fillText(text: string, x: number, y: number): this;\n  abstract save(): this;\n  abstract restore(): this;\n  // eslint-disable-next-line\n  abstract openGroup(cls: string, id?: string, attrs?: GroupAttributes): any;\n  abstract closeGroup(): void;\n  // eslint-disable-next-line\n  abstract add(child: any): void;\n\n  abstract measureText(text: string): TextMeasure;\n\n  abstract set font(value: string);\n  abstract get font(): string;\n  abstract set fillStyle(style: string | CanvasGradient | CanvasPattern);\n  abstract get fillStyle(): string | CanvasGradient | CanvasPattern;\n  abstract set strokeStyle(style: string | CanvasGradient | CanvasPattern);\n  abstract get strokeStyle(): string | CanvasGradient | CanvasPattern;\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { GroupAttributes, RenderContext, TextMeasure } from './rendercontext';\nimport { warn } from './util';\n\n/**\n * A rendering context for the Canvas backend (CanvasRenderingContext2D).\n */\nexport class CanvasContext extends RenderContext {\n  context2D: CanvasRenderingContext2D;\n  canvas: HTMLCanvasElement | { width: number; height: number };\n\n  /** Height of one line of text (in pixels). */\n  textHeight: number = 0;\n\n  static get WIDTH(): number {\n    return 600;\n  }\n\n  static get HEIGHT(): number {\n    return 400;\n  }\n\n  static get CANVAS_BROWSER_SIZE_LIMIT(): number {\n    return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n  }\n\n  /**\n   * Ensure that width and height do not exceed the browser limit.\n   * @returns array of [width, height] clamped to the browser limit.\n   */\n  static sanitizeCanvasDims(width: number, height: number): [number, number] {\n    const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n    if (Math.max(width, height) > limit) {\n      warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n      if (width > limit) {\n        width = limit;\n      }\n      if (height > limit) {\n        height = limit;\n      }\n    }\n    return [width, height];\n  }\n\n  constructor(context: CanvasRenderingContext2D) {\n    super();\n    this.context2D = context;\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT,\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n\n  /**\n   * Set all pixels to transparent black rgba(0,0,0,0).\n   */\n  clear(): void {\n    this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // eslint-disable-next-line\n  openGroup(cls: string, id?: string, attrs?: GroupAttributes): any {\n    // Containers not implemented.\n  }\n\n  closeGroup(): void {\n    // Containers not implemented.\n  }\n\n  // eslint-disable-next-line\n  add(child: any): void {\n    // Containers not implemented.\n  }\n\n  setFillStyle(style: string): this {\n    this.context2D.fillStyle = style;\n    return this;\n  }\n\n  /** CanvasContext ignores `setBackgroundFillStyle()`. */\n  // eslint-disable-next-line\n  setBackgroundFillStyle(style: string): this {\n    // DO NOTHING\n    return this;\n  }\n\n  setStrokeStyle(style: string): this {\n    this.context2D.strokeStyle = style;\n    return this;\n  }\n\n  setShadowColor(color: string): this {\n    this.context2D.shadowColor = color;\n    return this;\n  }\n\n  setShadowBlur(blur: number): this {\n    // CanvasRenderingContext2D does not scale the shadow blur by the current\n    // transform, so we have to do it manually. We assume uniform scaling\n    // (though allow for rotation) because the blur can only be scaled\n    // uniformly anyway.\n    const t = this.context2D.getTransform();\n    const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n    this.context2D.shadowBlur = scale * blur;\n    return this;\n  }\n\n  setLineWidth(width: number): this {\n    this.context2D.lineWidth = width;\n    return this;\n  }\n\n  setLineCap(capType: CanvasLineCap): this {\n    this.context2D.lineCap = capType;\n    return this;\n  }\n\n  setLineDash(dash: number[]): this {\n    this.context2D.setLineDash(dash);\n    return this;\n  }\n\n  scale(x: number, y: number): this {\n    this.context2D.scale(x, y);\n    return this;\n  }\n\n  resize(width: number, height: number): this {\n    const canvasElement = this.context2D.canvas;\n    const devicePixelRatio = window.devicePixelRatio || 1;\n\n    // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\n    [width, height] = CanvasContext.sanitizeCanvasDims(width * devicePixelRatio, height * devicePixelRatio);\n\n    // Divide back down by the pixel ratio and convert to integers.\n    width = (width / devicePixelRatio) | 0;\n    height = (height / devicePixelRatio) | 0;\n\n    canvasElement.width = width * devicePixelRatio;\n    canvasElement.height = height * devicePixelRatio;\n    canvasElement.style.width = width + 'px';\n    canvasElement.style.height = height + 'px';\n\n    return this.scale(devicePixelRatio, devicePixelRatio);\n  }\n\n  rect(x: number, y: number, width: number, height: number): this {\n    this.context2D.rect(x, y, width, height);\n    return this;\n  }\n\n  fillRect(x: number, y: number, width: number, height: number): this {\n    this.context2D.fillRect(x, y, width, height);\n    return this;\n  }\n\n  /**\n   * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\n   */\n  clearRect(x: number, y: number, width: number, height: number): this {\n    this.context2D.clearRect(x, y, width, height);\n    return this;\n  }\n\n  beginPath(): this {\n    this.context2D.beginPath();\n    return this;\n  }\n\n  moveTo(x: number, y: number): this {\n    this.context2D.moveTo(x, y);\n    return this;\n  }\n\n  lineTo(x: number, y: number): this {\n    this.context2D.lineTo(x, y);\n    return this;\n  }\n\n  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): this {\n    this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    return this;\n  }\n\n  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): this {\n    this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n    return this;\n  }\n\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise: boolean): this {\n    this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n    return this;\n  }\n\n  fill(): this {\n    this.context2D.fill();\n    return this;\n  }\n\n  stroke(): this {\n    this.context2D.stroke();\n    return this;\n  }\n\n  closePath(): this {\n    this.context2D.closePath();\n    return this;\n  }\n\n  measureText(text: string): TextMeasure {\n    const metrics = this.context2D.measureText(text);\n    return {\n      width: metrics.width,\n      height: this.textHeight,\n    };\n  }\n\n  fillText(text: string, x: number, y: number): this {\n    this.context2D.fillText(text, x, y);\n    return this;\n  }\n\n  save(): this {\n    this.context2D.save();\n    return this;\n  }\n\n  restore(): this {\n    this.context2D.restore();\n    return this;\n  }\n\n  set fillStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.context2D.fillStyle = style;\n  }\n\n  get fillStyle(): string | CanvasGradient | CanvasPattern {\n    return this.context2D.fillStyle;\n  }\n\n  set strokeStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.context2D.strokeStyle = style;\n  }\n\n  get strokeStyle(): string | CanvasGradient | CanvasPattern {\n    return this.context2D.strokeStyle;\n  }\n\n  setFont(family: string, size: number, weight?: string): this {\n    this.context2D.font = (weight || '') + ' ' + size + 'pt ' + family;\n    this.textHeight = (size * 4) / 3;\n    return this;\n  }\n\n  /** Return a string of the form `'italic bold 15pt Arial'` */\n  getFont(): string {\n    return this.context2D.font;\n  }\n\n  setRawFont(font: string): this {\n    this.context2D.font = font;\n\n    const fontArray = font.split(' ');\n    const size = Number(fontArray[0].match(/\\d+/));\n    // The font size is specified in points, scale it to canvas units.\n    // CSS specifies dpi to be 96 and there are 72 points to an inch: 96/72 == 4/3.\n    this.textHeight = (size * 4) / 3;\n\n    return this;\n  }\n\n  set font(value: string) {\n    this.setRawFont(value);\n  }\n\n  get font(): string {\n    return this.context2D.font;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Gregory Ristow (2015)\n\nimport { GroupAttributes, RenderContext, TextMeasure } from './rendercontext';\nimport { normalizeAngle, prefix, RuntimeError } from './util';\n\n// eslint-disable-next-line\ntype Attributes = { [key: string]: any };\n\nconst attrNamesToIgnoreMap: { [nodeName: string]: Attributes } = {\n  path: {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  },\n  rect: {\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  },\n  text: {\n    width: true,\n    height: true,\n  },\n};\n\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\n\nconst TWO_PI = 2 * Math.PI;\n\ninterface State {\n  state: Attributes;\n  attributes: Attributes;\n  shadow_attributes: Attributes;\n  lineWidth: number;\n}\n\nclass MeasureTextCache {\n  protected txt?: SVGTextElement;\n\n  // The cache is keyed first by the text string, then by the font attributes\n  // joined together.\n  protected cache: Record<string, Record<string, TextMeasure>> = {};\n\n  lookup(text: string, svg: SVGSVGElement, attributes: Attributes): TextMeasure {\n    let entries = this.cache[text];\n    if (entries === undefined) {\n      entries = {};\n      this.cache[text] = entries;\n    }\n\n    const family = attributes['font-family'];\n    const size = attributes['font-size'];\n    const style = attributes['font-style'];\n    const weight = attributes['font-weight'];\n\n    const key = `${family}%${size}%${style}%${weight}`;\n    let entry = entries[key];\n    if (entry === undefined) {\n      entry = this.measureImpl(text, svg, attributes);\n      entries[key] = entry;\n    }\n    return entry;\n  }\n\n  measureImpl(text: string, svg: SVGSVGElement, attributes: Attributes): TextMeasure {\n    let txt = this.txt;\n    if (!txt) {\n      // Create the SVG text element that will be used to measure text in the event\n      // of a cache miss.\n      txt = document.createElementNS(SVG_NS, 'text');\n      this.txt = txt;\n    }\n\n    txt.textContent = text;\n    txt.setAttributeNS(null, 'font-family', attributes['font-family']);\n    txt.setAttributeNS(null, 'font-size', attributes['font-size']);\n    txt.setAttributeNS(null, 'font-style', attributes['font-style']);\n    txt.setAttributeNS(null, 'font-weight', attributes['font-weight']);\n    svg.appendChild(txt);\n    const bbox = txt.getBBox();\n    svg.removeChild(txt);\n\n    // Remove the trailing 'pt' from the font size and scale to convert from points\n    // to canvas units.\n    // CSS specifies dpi to be 96 and there are 72 points to an inch: 96/72 == 4/3.\n    const fontSize = attributes['font-size'];\n    const height = (fontSize.substring(0, fontSize.length - 2) * 4) / 3;\n    return {\n      width: bbox.width,\n      height: height,\n    };\n  }\n}\n\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext extends RenderContext {\n  protected static measureTextCache = new MeasureTextCache();\n\n  element: HTMLElement; // the parent DOM object\n  svg: SVGSVGElement;\n  width: number = 0;\n  height: number = 0;\n  path: string;\n  pen: { x: number; y: number };\n  lineWidth: number;\n  attributes: Attributes;\n  background_attributes: Attributes;\n  shadow_attributes: Attributes;\n  state: Attributes;\n  state_stack: State[];\n  parent: SVGGElement;\n  groups: SVGGElement[];\n  fontString: string = '';\n\n  constructor(element: HTMLElement) {\n    super();\n    this.element = element;\n\n    const svg = this.create('svg');\n    // Add it to the canvas:\n    this.element.appendChild(svg);\n\n    // Point to it:\n    this.svg = svg;\n    this.groups = [this.svg]; // Create the group stack\n    this.parent = this.svg;\n\n    this.path = '';\n    this.pen = { x: NaN, y: NaN };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      'font-family': 'Arial',\n      'font-size': '8pt',\n      'font-weight': 'normal',\n    };\n\n    const defaultAttributes = {\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      fill: 'black',\n      stroke: 'black',\n      ...defaultAttributes,\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      fill: 'white',\n      stroke: 'white',\n      ...defaultAttributes,\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n  }\n\n  /**\n   * Use one of the overload signatures to create an SVG element of a specific type.\n   * The last overload accepts an arbitrary string, and is identical to the\n   * implementation signature.\n   * Feel free to add new overloads for other SVG element types as required.\n   */\n  create(svgElementType: 'g'): SVGGElement;\n  create(svgElementType: 'path'): SVGPathElement;\n  create(svgElementType: 'rect'): SVGRectElement;\n  create(svgElementType: 'svg'): SVGSVGElement;\n  create(svgElementType: 'text'): SVGTextElement;\n  create(svgElementType: string): SVGElement;\n  create(svgElementType: string): SVGElement {\n    return document.createElementNS(SVG_NS, svgElementType);\n  }\n\n  // Allow grouping elements in containers for interactivity.\n  openGroup(cls: string, id?: string, attrs?: GroupAttributes): SVGGElement {\n    const group = this.create('g');\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', prefix(cls));\n    if (id) group.setAttribute('id', prefix(id));\n\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n    return group;\n  }\n\n  closeGroup(): void {\n    this.groups.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n\n  add(elem: SVGElement): void {\n    this.parent.appendChild(elem);\n  }\n\n  // ### Styling & State Methods:\n\n  setFont(family: string, size: number, weight?: string): this {\n    // In SVG italic is handled by font-style.\n    // We search the weight argument and apply bold and italic\n    // to font-weight and font-style respectively.\n    let foundBold = false;\n    let foundItalic = false;\n    // Weight might also be a number (200, 400, etc...) so we\n    // test its type to be sure we have access to String methods.\n    if (typeof weight === 'string') {\n      // look for \"italic\" in the weight:\n      if (weight.indexOf('italic') !== -1) {\n        weight = weight.replace(/italic/g, '');\n        foundItalic = true;\n      }\n      // look for \"bold\" in weight\n      if (weight.indexOf('bold') !== -1) {\n        weight = weight.replace(/bold/g, '');\n        foundBold = true;\n      }\n      // remove any remaining spaces\n      weight = weight.replace(/ /g, '');\n    }\n    const noWeightProvided = typeof weight === 'undefined' || weight === '';\n    if (noWeightProvided) {\n      weight = 'normal';\n    }\n\n    const fontAttributes = {\n      'font-family': family,\n      'font-size': size + 'pt',\n      'font-weight': foundBold ? 'bold' : weight,\n      'font-style': foundItalic ? 'italic' : 'normal',\n    };\n\n    // Currently this.fontString only supports size & family. See setRawFont().\n    this.fontString = `${size}pt ${family}`;\n    this.attributes = { ...this.attributes, ...fontAttributes };\n    this.state = { ...this.state, ...fontAttributes };\n\n    return this;\n  }\n\n  setRawFont(font: string): this {\n    this.fontString = font.trim();\n    // Assumes size first, splits on space -- which is presently\n    // how all existing modules are calling this.\n    const fontArray = this.fontString.split(' ');\n\n    const size = fontArray[0];\n    this.attributes['font-size'] = size;\n    this.state['font-size'] = size;\n\n    const family = fontArray[1];\n    this.attributes['font-family'] = family;\n    this.state['font-family'] = family;\n\n    return this;\n  }\n\n  setFillStyle(style: string): this {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style: string): this {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style: string): this {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(color: string): this {\n    this.shadow_attributes.color = color;\n    return this;\n  }\n\n  /**\n   * @param blur A non-negative float specifying the level of shadow blur, where 0\n   *             represents no blur and larger numbers represent increasingly more blur.\n   * @returns this\n   */\n  setShadowBlur(blur: number): this {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  /**\n   * @param width\n   * @returns this\n   */\n  setLineWidth(width: number): this {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n    return this;\n  }\n\n  /**\n   * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n   * @returns this\n   *\n   * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n   */\n  setLineDash(lineDash: number[]): this {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      this.attributes['stroke-dasharray'] = lineDash.join(',');\n      return this;\n    } else {\n      throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n\n  /**\n   * @param capType\n   * @returns this\n   */\n  setLineCap(capType: CanvasLineCap): this {\n    this.attributes['stroke-linecap'] = capType;\n    return this;\n  }\n\n  // ### Sizing & Scaling Methods:\n\n  // TODO (GCR): See note at scale() -- separate our internal\n  // conception of pixel-based width/height from the style.width\n  // and style.height properties eventually to allow users to\n  // apply responsive sizing attributes to the SVG.\n  resize(width: number, height: number): this {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width.toString();\n\n    this.svg.style.width = width.toString();\n    this.svg.style.height = height.toString();\n\n    const attributes = {\n      width,\n      height,\n    };\n\n    this.applyAttributes(this.svg, attributes);\n    this.scale(this.state.scale.x, this.state.scale.y);\n    return this;\n  }\n\n  scale(x: number, y: number): this {\n    // uses viewBox to scale\n    // TODO (GCR): we may at some point want to distinguish the\n    // style.width / style.height properties that are applied to\n    // the SVG object from our internal conception of the SVG\n    // width/height.  This would allow us to create automatically\n    // scaling SVG's that filled their containers, for instance.\n    //\n    // As this isn't implemented in Canvas contexts,\n    // I've left as is for now, but in using the viewBox to\n    // handle internal scaling, am trying to make it possible\n    // for us to eventually move in that direction.\n\n    this.state.scale = { x, y };\n    const visibleWidth = this.width / x;\n    const visibleHeight = this.height / y;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n\n    return this;\n  }\n\n  /**\n   * 1 arg: string in the \"x y w h\" format\n   * 4 args: x:number, y:number, w:number, h:number\n   */\n  setViewBox(viewBox_or_minX: string | number, minY?: number, width?: number, height?: number): void {\n    if (typeof viewBox_or_minX === 'string') {\n      this.svg.setAttribute('viewBox', viewBox_or_minX);\n    } else {\n      const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }\n\n  // ### Drawing helper methods:\n\n  applyAttributes(element: SVGElement, attributes: Attributes): SVGElement {\n    const attrNamesToIgnore = attrNamesToIgnoreMap[element.nodeName];\n    Object.keys(attributes).forEach((propertyName) => {\n      if (attrNamesToIgnore && attrNamesToIgnore[propertyName]) {\n        return;\n      }\n      element.setAttributeNS(null, propertyName, attributes[propertyName]);\n    });\n\n    return element;\n  }\n\n  // ### Shape & Path Methods:\n\n  clear(): void {\n    // Clear the SVG by removing all inner children.\n\n    // (This approach is usually slightly more efficient\n    // than removing the old SVG & adding a new one to\n    // the container element, since it does not cause the\n    // container to resize twice.  Also, the resize\n    // triggered by removing the entire SVG can trigger\n    // a touchcancel event when the element resizes away\n    // from a touch point.)\n\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    }\n\n    // Replace the viewbox attribute we just removed:\n    this.scale(this.state.scale.x, this.state.scale.y);\n  }\n\n  // ## Rectangles:\n  rect(x: number, y: number, width: number, height: number, attributes?: Attributes): this {\n    // Avoid invalid negative height attribs by\n    // flipping the rectangle on its head:\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    // Create the rect & style it:\n    const rectangle = this.create('rect');\n    if (typeof attributes === 'undefined') {\n      attributes = {\n        fill: 'none',\n        'stroke-width': this.lineWidth,\n        stroke: 'black',\n      };\n    }\n\n    attributes = { ...attributes, x, y, width, height };\n\n    this.applyAttributes(rectangle, attributes);\n\n    this.add(rectangle);\n    return this;\n  }\n\n  fillRect(x: number, y: number, width: number, height: number): this {\n    const attributes = { fill: this.attributes.fill };\n    this.rect(x, y, width, height, attributes);\n    return this;\n  }\n\n  clearRect(x: number, y: number, width: number, height: number): this {\n    // TODO(GCR): Improve implementation of this...\n    // Currently it draws a box of the background color, rather\n    // than creating alpha through lower z-levels.\n    //\n    // See the implementation of this in SVGKit:\n    // http://sourceforge.net/projects/svgkit/\n    // as a starting point.\n    //\n    // Adding a large number of transform paths (as we would\n    // have to do) could be a real performance hit.  Since\n    // tabNote seems to be the only module that makes use of this\n    // it may be worth creating a separate tabStave that would\n    // draw lines around locations of tablature fingering.\n    //\n    this.rect(x, y, width, height, this.background_attributes);\n    return this;\n  }\n\n  // ## Paths:\n\n  beginPath(): this {\n    this.path = '';\n    this.pen.x = NaN;\n    this.pen.y = NaN;\n    return this;\n  }\n\n  moveTo(x: number, y: number): this {\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x: number, y: number): this {\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x: number, y: number): this {\n    this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1: number, y1: number, x: number, y: number): this {\n    this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise: boolean): this {\n    const x0 = x + radius * Math.cos(startAngle);\n    const y0 = y + radius * Math.sin(startAngle);\n\n    // Handle the edge case where arc length is greater than or equal to\n    // the circle's circumference:\n    //   https://html.spec.whatwg.org/multipage/canvas.html#ellipse-method-steps\n    if (\n      (!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n      (counterclockwise && startAngle - endAngle >= TWO_PI)\n    ) {\n      const x1 = x + radius * Math.cos(startAngle + Math.PI);\n      const y1 = y + radius * Math.sin(startAngle + Math.PI);\n      // There's no way to specify a completely circular arc in SVG so we have to\n      // use two semi-circular arcs.\n      this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n      this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n      this.pen.x = x0;\n      this.pen.y = y0;\n    } else {\n      const x1 = x + radius * Math.cos(endAngle);\n      const y1 = y + radius * Math.sin(endAngle);\n\n      startAngle = normalizeAngle(startAngle);\n      endAngle = normalizeAngle(endAngle);\n\n      let large: boolean;\n      if (Math.abs(endAngle - startAngle) < Math.PI) {\n        large = counterclockwise;\n      } else {\n        large = !counterclockwise;\n      }\n      if (startAngle > endAngle) {\n        large = !large;\n      }\n\n      const sweep = !counterclockwise;\n\n      this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n      this.pen.x = x1;\n      this.pen.y = y1;\n    }\n    return this;\n  }\n\n  closePath(): this {\n    this.path += 'Z';\n    return this;\n  }\n\n  private getShadowStyle(): string {\n    const sa = this.shadow_attributes;\n    // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n    // of the same radius, so we scale the drop-shadow radius here to make it\n    // look close to the canvas shadow.\n    return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n  }\n\n  fill(attributes: Attributes): this {\n    const path = this.create('path');\n    if (typeof attributes === 'undefined') {\n      attributes = { ...this.attributes, stroke: 'none' };\n    }\n\n    attributes.d = this.path;\n    if (this.shadow_attributes.width > 0) {\n      attributes.style = this.getShadowStyle();\n    }\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  stroke(): this {\n    const path = this.create('path');\n    const attributes: Attributes = {\n      ...this.attributes,\n      fill: 'none',\n      'stroke-width': this.lineWidth,\n      d: this.path,\n    };\n    if (this.shadow_attributes.width > 0) {\n      attributes.style = this.getShadowStyle();\n    }\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  // ## Text Methods:\n  measureText(text: string): TextMeasure {\n    return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\n  }\n\n  fillText(text: string, x: number, y: number): this {\n    if (!text || text.length <= 0) {\n      return this;\n    }\n    const attributes: Attributes = {\n      ...this.attributes,\n      stroke: 'none',\n      x,\n      y,\n    };\n\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n    return this;\n  }\n\n  save(): this {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n        scale: this.state.scale,\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n      lineWidth: this.lineWidth,\n    });\n    return this;\n  }\n\n  restore(): this {\n    // TODO(0xfe): State needs to be deep-restored.\n    const savedState = this.state_stack.pop();\n    if (savedState) {\n      const state = savedState;\n      this.state['font-family'] = state.state['font-family'];\n      this.state['font-weight'] = state.state['font-weight'];\n      this.state['font-style'] = state.state['font-style'];\n      this.state['font-size'] = state.state['font-size'];\n      this.state.scale = state.state.scale;\n\n      this.attributes['font-family'] = state.attributes['font-family'];\n      this.attributes['font-weight'] = state.attributes['font-weight'];\n      this.attributes['font-style'] = state.attributes['font-style'];\n      this.attributes['font-size'] = state.attributes['font-size'];\n\n      this.attributes.fill = state.attributes.fill;\n      this.attributes.stroke = state.attributes.stroke;\n      this.attributes['stroke-width'] = state.attributes['stroke-width'];\n      this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n\n      this.shadow_attributes.width = state.shadow_attributes.width;\n      this.shadow_attributes.color = state.shadow_attributes.color;\n\n      this.lineWidth = state.lineWidth;\n    }\n    return this;\n  }\n\n  set font(value: string) {\n    this.setRawFont(value);\n  }\n\n  get font(): string {\n    return this.fontString;\n  }\n\n  set fillStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.setFillStyle(style as string);\n  }\n\n  get fillStyle(): string | CanvasGradient | CanvasPattern {\n    return this.attributes.fill;\n  }\n\n  set strokeStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.setStrokeStyle(style as string);\n  }\n\n  get strokeStyle(): string | CanvasGradient | CanvasPattern {\n    return this.attributes.stroke;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { CanvasContext } from './canvascontext';\nimport { RenderContext } from './rendercontext';\nimport { SVGContext } from './svgcontext';\nimport { RuntimeError } from './util';\n\n// A ContextBuilder is either Renderer.getSVGContext or Renderer.getCanvasContext.\nexport type ContextBuilder = typeof Renderer.getSVGContext | typeof Renderer.getCanvasContext;\n\n// eslint-disable-next-line\nfunction isRenderContext(obj: any): obj is RenderContext {\n  return obj.setShadowBlur !== undefined;\n}\n\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n  protected ctx: RenderContext;\n\n  static lastContext?: RenderContext = undefined;\n\n  static buildContext(\n    elementId: string | HTMLCanvasElement | HTMLDivElement,\n    backend: number,\n    width: number,\n    height: number,\n    background: string = '#FFF'\n  ): RenderContext {\n    const renderer = new Renderer(elementId, backend);\n    if (width && height) {\n      renderer.resize(width, height);\n    }\n\n    const ctx = renderer.getContext();\n    ctx.setBackgroundFillStyle(background);\n    Renderer.lastContext = ctx;\n    return ctx;\n  }\n\n  static getCanvasContext(elementId: string, width: number, height: number, background?: string): RenderContext {\n    return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n  }\n\n  static getSVGContext(elementId: string, width: number, height: number, background?: string): RenderContext {\n    return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n  }\n\n  // Draw a dashed line (horizontal, vertical or diagonal\n  // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n  // setting the second number to 0 draws a solid line.\n  static drawDashedLine(\n    context: RenderContext,\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    dashPattern: number[]\n  ): void {\n    context.beginPath();\n\n    const dx = toX - fromX;\n    const dy = toY - fromY;\n    const angle = Math.atan2(dy, dx);\n    let x = fromX;\n    let y = fromY;\n    context.moveTo(fromX, fromY);\n    let idx = 0;\n    let draw = true;\n    while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n      const dashLength = dashPattern[idx++ % dashPattern.length];\n      const nx = x + Math.cos(angle) * dashLength;\n      x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n      const ny = y + Math.sin(angle) * dashLength;\n      y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n      if (draw) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n      draw = !draw;\n    }\n\n    context.closePath();\n    context.stroke();\n  }\n\n  /**\n   * @param canvasId can be:\n   *   - a string element ID (of a canvas or div element)\n   *   - a canvas element\n   *   - a div element, which will contain the SVG output\n   * @param backend Renderer.Backends.CANVAS or Renderer.Backends.SVG\n   */\n  constructor(context: RenderContext);\n  constructor(canvas: string | HTMLCanvasElement | HTMLDivElement, backend: number);\n  constructor(arg0: string | HTMLCanvasElement | HTMLDivElement | RenderContext, arg1?: number) {\n    if (isRenderContext(arg0)) {\n      // The user has provided what looks like a RenderContext, let's just use it.\n      // TODO(tommadams): RenderContext is an interface, can we introduce a context base class\n      // to make this check more robust?\n      this.ctx = arg0;\n    } else {\n      if (arg1 === undefined) {\n        // The backend must be specified if the render context isn't directly provided.\n        throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n      }\n      const backend: number = arg1;\n\n      let element: HTMLElement;\n      if (typeof arg0 == 'string') {\n        const maybeElement = document.getElementById(arg0);\n        if (maybeElement == null) {\n          throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n        }\n        element = maybeElement;\n      } else {\n        element = arg0 as HTMLElement;\n      }\n\n      // Verify backend and create context\n      if (backend === Renderer.Backends.CANVAS) {\n        if (!(element instanceof window.HTMLCanvasElement)) {\n          throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement');\n        }\n        const context = element.getContext('2d');\n        if (!context) {\n          throw new RuntimeError('BadElement', \"Can't get canvas context\");\n        }\n        this.ctx = new CanvasContext(context);\n      } else if (backend === Renderer.Backends.SVG) {\n        if (!(element instanceof window.HTMLDivElement)) {\n          throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n        }\n        this.ctx = new SVGContext(element);\n      } else {\n        throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n      }\n    }\n  }\n\n  resize(width: number, height: number): this {\n    this.ctx.resize(width, height);\n    return this;\n  }\n\n  getContext(): RenderContext {\n    return this.ctx;\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Renderer {\n  export enum Backends {\n    CANVAS = 1,\n    SVG = 2,\n  }\n\n  // End of line types\n  export enum LineEndType {\n    NONE = 1, // No leg\n    UP = 2, // Upward leg\n    DOWN = 3, // Downward leg\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\n\nimport { Stem } from 'stem';\n\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { Renderer } from './renderer';\nimport { isStaveNote, isStemmableNote } from './typeguard';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport class StringNumber extends Modifier {\n  static get CATEGORY(): string {\n    return 'StringNumber';\n  }\n\n  protected radius: number;\n  protected last_note?: Note;\n  protected string_number: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected dashed: boolean;\n  protected leg: number;\n  protected font: FontInfo;\n\n  // ## Static Methods\n  // Arrange string numbers inside a `ModifierContext`\n  static format(nums: StringNumber[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const right_shift = state.right_shift;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shift_left = 0;\n    let shift_right = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote();\n      const pos = num.getPosition();\n\n      if (!isStaveNote(note)) {\n        throw new RuntimeError('NoStaveNote');\n      }\n\n      const index = num.checkIndex();\n      const props = note.getKeyProps()[index];\n\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);\n          }\n          if (right_shift === 0) {\n            shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        pos,\n        note,\n        num,\n        line: props.line,\n        shiftL: shift_left,\n        shiftR: shift_right,\n      });\n    }\n\n    // Sort string numbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let num_shiftR = 0;\n    let x_widthL = 0;\n    let x_widthR = 0;\n    let last_line = null;\n    let last_note = null;\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const note = nums_list[i].note;\n      const pos = nums_list[i].pos;\n      const num = nums_list[i].num;\n      const line = nums_list[i].line;\n      const shiftR = nums_list[i].shiftR;\n\n      // Reset the position of the string number every line.\n      if (line !== last_line || note !== last_note) {\n        num_shiftR = right_shift + shiftR;\n      }\n\n      const num_width = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift);\n        num_shift = shift_left + num_width; // spacing\n        x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(num_shiftR);\n        num_shift += num_width; // spacing\n        x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\n      }\n      last_line = line;\n      last_note = note;\n    }\n\n    state.left_shift += x_widthL;\n    state.right_shift += x_widthR;\n    return true;\n  }\n\n  constructor(number: string) {\n    super();\n\n    this.string_number = number;\n    this.setWidth(20); // ???\n    this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.dashed = true; // true - draw dashed extension  false - no extension\n    this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n    this.radius = 8;\n    this.font = {\n      family: 'sans-serif',\n      size: 10,\n      weight: 'bold',\n    };\n  }\n\n  setLineEndType(leg: number): this {\n    if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n      this.leg = leg;\n    }\n    return this;\n  }\n\n  setStringNumber(number: string): this {\n    this.string_number = number;\n    return this;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  setLastNote(note: Note): this {\n    this.last_note = note;\n    return this;\n  }\n\n  setDashed(dashed: boolean): this {\n    this.dashed = dashed;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const line_space = note.checkStave().getSpacingBetweenLines();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n      case Modifier.Position.BELOW: {\n        const stem_ext = note.getStemExtents();\n        let top = stem_ext.topY;\n        let bottom = stem_ext.baseY + 2;\n\n        if (note.getStemDirection() === Stem.DOWN) {\n          top = stem_ext.baseY;\n          bottom = stem_ext.topY - 2;\n        }\n\n        if (this.position === Modifier.Position.ABOVE) {\n          dot_y = note.hasStem() ? top - line_space * 1.75 : start.y - line_space * 1.75;\n        } else {\n          dot_y = note.hasStem() ? bottom + line_space * 1.5 : start.y + line_space * 1.75;\n        }\n\n        dot_y += this.y_shift + this.y_offset;\n\n        break;\n      }\n      case Modifier.Position.LEFT:\n        dot_x -= this.radius / 2 + 5;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += this.radius / 2 + 6;\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n    ctx.setLineWidth(1.5);\n    ctx.stroke();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const x = dot_x - ctx.measureText(this.string_number).width / 2;\n    ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n\n    const lastNote = this.last_note;\n    if (isStemmableNote(lastNote)) {\n      // Only StemmableNote objects have getStemX().\n      const end = lastNote.getStemX() - note.getX() + 5;\n      ctx.setStrokeStyle('#000000');\n      ctx.setLineCap('round');\n      ctx.setLineWidth(0.6);\n      if (this.dashed) {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n      } else {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n      }\n\n      let len;\n      let pattern;\n      switch (this.leg) {\n        case Renderer.LineEndType.UP:\n          len = -10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        case Renderer.LineEndType.DOWN:\n          len = 10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        default:\n          break;\n      }\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\n\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { isNote, isStaveNote, isTabNote } from './typeguard';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport class Stroke extends Modifier {\n  static get CATEGORY(): string {\n    return 'Stroke';\n  }\n\n  static readonly Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3, // Arpeggiated chord\n    ROLL_UP: 4, // Arpeggiated chord\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n  };\n\n  protected options: {\n    all_voices: boolean;\n  };\n  protected all_voices: boolean;\n  protected type: number;\n\n  protected note_end?: Note;\n  public render_options: {\n    font_scale: number;\n    stroke_px: number;\n    stroke_spacing: number;\n  };\n  protected font: FontInfo;\n\n  // Arrange strokes inside `ModifierContext`\n  static format(strokes: Stroke[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const stroke_spacing = 0;\n\n    if (!strokes || strokes.length === 0) return false;\n\n    const strokeList = strokes.map((stroke) => {\n      const note = stroke.getNote();\n      const index = stroke.checkIndex();\n      if (isStaveNote(note)) {\n        // Only StaveNote objects have getKeyProps().\n        const { line } = note.getKeyProps()[index];\n        const shift = note.getLeftDisplacedHeadPx();\n        return { line, shift, stroke };\n      } else if (isTabNote(note)) {\n        // Only TabNote objects have getPositions().\n        const { str: string } = note.getPositions()[index];\n        return { line: string, shift: 0, stroke };\n      } else {\n        throw new RuntimeError('Internal', 'Unexpected instance.');\n      }\n    });\n\n    const strokeShift = left_shift;\n\n    // There can only be one stroke .. if more than one, they overlay each other\n    const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n      stroke.setXShift(strokeShift + shift);\n      return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n    }, 0);\n\n    state.left_shift += xShift;\n\n    return true;\n  }\n\n  constructor(type: number, options?: { all_voices: boolean }) {\n    super();\n\n    this.options = { all_voices: true, ...options };\n\n    // multi voice - span stroke across all voices if true\n    this.all_voices = this.options.all_voices;\n\n    // multi voice - end note of stroke, set in draw()\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      font_scale: 38,\n      stroke_px: 3,\n      stroke_spacing: 10,\n    };\n\n    this.font = {\n      family: 'serif',\n      size: 10,\n      weight: 'bold italic',\n    };\n\n    this.setXShift(0);\n    this.setWidth(10);\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  addEndNote(note: Note): this {\n    this.note_end = note;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let ys = note.getYs();\n    let topY = start.y;\n    let botY = start.y;\n    const x = start.x - 5;\n    const line_space = note.checkStave().getSpacingBetweenLines();\n\n    const notes = this.checkModifierContext().getMembers(note.getCategory());\n    for (let i = 0; i < notes.length; i++) {\n      const note = notes[i];\n      if (isNote(note)) {\n        // Only Note objects have getYs().\n        // note is an instance of either StaveNote or TabNote.\n        ys = note.getYs();\n        for (let n = 0; n < ys.length; n++) {\n          if (this.note === notes[i] || this.all_voices) {\n            topY = Math.min(topY, ys[n]);\n            botY = Math.max(botY, ys[n]);\n          }\n        }\n      }\n    }\n\n    let arrow = '';\n    let arrow_shift_x = 0;\n    let arrow_y = 0;\n    let text_shift_x = 0;\n    let text_y = 0;\n\n    switch (this.type) {\n      case Stroke.Type.BRUSH_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        arrow_y = topY - line_space / 2 + 10;\n        botY += line_space / 2;\n        break;\n      case Stroke.Type.BRUSH_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = 0.5;\n        arrow_y = botY + line_space / 2;\n        topY -= line_space / 2;\n        break;\n      case Stroke.Type.ROLL_DOWN:\n      case Stroke.Type.RASQUEDO_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        text_shift_x = this.x_shift + arrow_shift_x - 2;\n        if (isStaveNote(note)) {\n          topY += 1.5 * line_space;\n          if ((botY - topY) % 2 !== 0) {\n            botY += 0.5 * line_space;\n          } else {\n            botY += line_space;\n          }\n          arrow_y = topY - line_space;\n          text_y = botY + line_space + 2;\n        } else {\n          topY += 1.5 * line_space;\n          botY += line_space;\n          arrow_y = topY - 0.75 * line_space;\n          text_y = botY + 0.25 * line_space;\n        }\n        break;\n      case Stroke.Type.ROLL_UP:\n      case Stroke.Type.RASQUEDO_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = -4;\n        text_shift_x = this.x_shift + arrow_shift_x - 1;\n        if (isStaveNote(note)) {\n          arrow_y = line_space / 2;\n          topY += 0.5 * line_space;\n          if ((botY - topY) % 2 === 0) {\n            botY += line_space / 2;\n          }\n          arrow_y = botY + 0.5 * line_space;\n          text_y = topY - 1.25 * line_space;\n        } else {\n          topY += 0.25 * line_space;\n          botY += 0.5 * line_space;\n          arrow_y = botY + 0.25 * line_space;\n          text_y = topY - line_space;\n        }\n        break;\n      case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n        topY += 0.5 * line_space;\n        botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\n        break;\n      default:\n        throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n    }\n\n    let strokeLine = 'straight';\n    // Draw the stroke\n    if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n      ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);\n    } else {\n      strokeLine = 'wiggly';\n      if (isStaveNote(note)) {\n        for (let i = topY; i <= botY; i += line_space) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n      } else {\n        let i;\n        for (i = topY; i <= botY; i += 10) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n        if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n          text_y = i + 0.25 * line_space;\n        }\n      }\n    }\n\n    if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n      return; // skip drawing arrow heads or text\n    }\n\n    // Draw the arrow head\n    Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {\n      category: `stroke.${arrow}.${strokeLine}`,\n    });\n\n    // Draw the rasquedo \"R\"\n    if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText('R', x + text_shift_x, text_y);\n      ctx.restore();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Bend } from './bend';\nimport { Modifier } from './modifier';\nimport { ModifierContext, ModifierContextState } from './modifiercontext';\nimport { RenderContext } from './rendercontext';\n\nexport interface VibratoRenderOptions {\n  wave_height: number;\n  wave_girth: number;\n  vibrato_width: number;\n  harsh: boolean;\n  wave_width: number;\n}\n\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n  static get CATEGORY(): string {\n    return 'Vibrato';\n  }\n\n  public render_options: VibratoRenderOptions;\n\n  /** Arrange vibratos inside a `ModifierContext`. */\n  static format(vibratos: Vibrato[], state: ModifierContextState, context: ModifierContext): boolean {\n    if (!vibratos || vibratos.length === 0) return false;\n\n    // Vibratos are always on top.\n    let text_line = state.top_text_line;\n    let width = 0;\n    let shift = state.right_shift - 7;\n\n    // If there's a bend, drop the text line\n    const bends = context.getMembers(Bend.CATEGORY) as Bend[];\n    if (bends && bends.length > 0) {\n      text_line--;\n    }\n\n    // Format Vibratos\n    for (let i = 0; i < vibratos.length; ++i) {\n      const vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  constructor() {\n    super();\n\n    this.position = Modifier.Position.RIGHT;\n    this.render_options = {\n      harsh: false,\n      vibrato_width: 20,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n    };\n\n    this.setVibratoWidth(this.render_options.vibrato_width);\n  }\n\n  /** Set harsh vibrato. */\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  /** Set vibrato width in pixels. */\n  setVibratoWidth(width: number): this {\n    this.render_options.vibrato_width = width;\n    this.setWidth(width);\n    return this;\n  }\n\n  /** Draw the vibrato on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n\n    const vx = start.x + this.x_shift;\n    const vy = note.getYForTopText(this.text_line) + 2;\n\n    Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n  }\n\n  /**\n   * Static rendering method that can be called from\n   * other classes (e.g. VibratoBracket).\n   */\n  static renderVibrato(ctx: RenderContext, x: number, y: number, opts: VibratoRenderOptions): void {\n    const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n    const num_waves = vibrato_width / wave_width;\n\n    ctx.beginPath();\n\n    let i;\n    if (harsh) {\n      ctx.moveTo(x, y + wave_girth + 1);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x + wave_width, y - wave_height / 2);\n        x += wave_width;\n        ctx.lineTo(x + wave_width, y + wave_height / 2);\n        x += wave_width;\n      }\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n        ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n      }\n      ctx.fill();\n    } else {\n      ctx.moveTo(x, y + wave_girth);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n        x += wave_width;\n        ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n        x += wave_width;\n      }\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n        ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n      }\n      ctx.fill();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.)\n\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Bend } from './bend';\nimport { ChordSymbol } from './chordsymbol';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { StaveNote } from './stavenote';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { TabNote } from './tabnote';\nimport { Tickable } from './tickable';\nimport { log, RuntimeError } from './util';\nimport { Vibrato } from './vibrato';\n\nexport interface ModifierContextState {\n  right_shift: number;\n  left_shift: number;\n  text_line: number;\n  top_text_line: number;\n}\n\nexport interface ModifierContextMetrics {\n  width: number;\n  spacing: number;\n}\n\nexport type ModifierContextMember = Tickable | Modifier | StaveNote | TabNote;\n\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (ModifierContext.DEBUG) log('Vex.Flow.ModifierContext', args);\n}\n\nexport class ModifierContext {\n  static DEBUG: boolean;\n\n  state: ModifierContextState;\n\n  protected spacing: number;\n  protected members: Record<string, ModifierContextMember[]>;\n\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected width: number;\n  protected formatted?: boolean;\n  // eslint-disable-next-line\n  protected PREFORMAT: any[];\n  // eslint-disable-next-line\n  protected POSTFORMAT: any[];\n\n  constructor() {\n    // Current members\n    this.members = {};\n\n    // Formatting data.\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0,\n    };\n\n    // Add new members to this array. The ordering is significant -- lower\n    // members are formatted and rendered before higher ones.\n    this.PREFORMAT = [\n      StaveNote,\n      Dot,\n      FretHandFinger,\n      Accidental,\n      Stroke,\n      GraceNoteGroup,\n      NoteSubGroup,\n      StringNumber,\n      Articulation,\n      Ornament,\n      Annotation,\n      ChordSymbol,\n      Bend,\n      Vibrato,\n    ];\n\n    // If post-formatting is required for an element, add it to this array.\n    this.POSTFORMAT = [StaveNote];\n  }\n\n  addModifier(member: ModifierContextMember): this {\n    L('addModifier is deprecated, use addMember instead.');\n    return this.addMember(member);\n  }\n\n  /**\n   * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n   * Here we add a new member to this.members, and create a new array if needed.\n   * @param member\n   * @returns this\n   */\n  addMember(member: ModifierContextMember): this {\n    const category = member.getCategory();\n    if (!this.members[category]) {\n      this.members[category] = [];\n    }\n    this.members[category].push(member);\n    member.setModifierContext(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  /**\n   * @deprecated\n   */\n  getModifiers(category: string): ModifierContextMember[] {\n    L('getModifiers is deprecated, use getMembers instead.');\n    return this.getMembers(category);\n  }\n\n  getMembers(category: string): ModifierContextMember[] {\n    return this.members[category];\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getLeftShift(): number {\n    return this.state.left_shift;\n  }\n\n  getRightShift(): number {\n    return this.state.right_shift;\n  }\n\n  getState(): ModifierContextState {\n    return this.state;\n  }\n\n  getMetrics(): ModifierContextMetrics {\n    if (!this.formatted) {\n      throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n    }\n\n    return {\n      width: this.state.left_shift + this.state.right_shift + this.spacing,\n      spacing: this.spacing,\n    };\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n    this.PREFORMAT.forEach((member) => {\n      L('Preformatting ModifierContext: ', member.CATEGORY);\n      member.format(this.getMembers(member.CATEGORY), this.state, this);\n    });\n\n    // Update width of this member context\n    this.width = this.state.left_shift + this.state.right_shift;\n    this.preFormatted = true;\n  }\n\n  postFormat(): void {\n    if (this.postFormatted) return;\n    this.POSTFORMAT.forEach((member) => {\n      L('Postformatting ModifierContext: ', member.CATEGORY);\n      member.postFormat(this.getMembers(member.CATEGORY) as Note[]);\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\n\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { defined } from './util';\n\nexport interface LayoutMetrics {\n  xMin: number;\n  xMax: number;\n  paddingLeft: number;\n  paddingRight: number;\n}\n\nexport enum StaveModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n  BEGIN = 5,\n  END = 6,\n}\n\nexport class StaveModifier extends Element {\n  static get CATEGORY(): string {\n    return 'StaveModifier';\n  }\n\n  static get Position(): typeof StaveModifierPosition {\n    return StaveModifierPosition;\n  }\n\n  protected width: number = 0;\n  protected x: number = 0;\n\n  protected padding: number;\n  protected position: StaveModifierPosition;\n  protected stave?: Stave;\n  protected layoutMetrics?: LayoutMetrics;\n\n  constructor() {\n    super();\n\n    this.padding = 10;\n    this.position = StaveModifierPosition.ABOVE;\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  setPosition(position: number): this {\n    this.position = position;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  placeGlyphOnLine(glyph: Glyph, stave: Stave, line?: number, customShift = 0): void {\n    glyph.setYShift(stave.getYForLine(line ?? 0) - stave.getYForGlyphs() + customShift);\n  }\n\n  getPadding(index: number): number {\n    return index !== undefined && index < 2 ? 0 : this.padding;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  setLayoutMetrics(layoutMetrics: LayoutMetrics): this {\n    this.layoutMetrics = layoutMetrics;\n    return this;\n  }\n\n  getLayoutMetrics(): LayoutMetrics | undefined {\n    return this.layoutMetrics;\n  }\n\n  // eslint-disable-next-line\n  draw(element?: Element, x_shift?: number): void {\n    // DO NOTHING.\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { LayoutMetrics, StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\n\nexport enum BarlineType {\n  SINGLE = 1,\n  DOUBLE = 2,\n  END = 3,\n  REPEAT_BEGIN = 4,\n  REPEAT_END = 5,\n  REPEAT_BOTH = 6,\n  NONE = 7,\n}\n\nexport class Barline extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'Barline';\n  }\n\n  protected widths: Record<string, number>;\n  protected paddings: Record<string, number>;\n  protected layoutMetricsMap: Record<number, LayoutMetrics>;\n\n  protected thickness: number;\n  protected type!: BarlineType;\n\n  static get type(): typeof BarlineType {\n    return BarlineType;\n  }\n\n  static get typeString(): Record<string, BarlineType> {\n    return {\n      single: BarlineType.SINGLE,\n      double: BarlineType.DOUBLE,\n      end: BarlineType.END,\n      repeatBegin: BarlineType.REPEAT_BEGIN,\n      repeatEnd: BarlineType.REPEAT_END,\n      repeatBoth: BarlineType.REPEAT_BOTH,\n      none: BarlineType.NONE,\n    };\n  }\n\n  constructor(type: BarlineType | string) {\n    super();\n    this.thickness = Tables.STAVE_LINE_THICKNESS;\n\n    const TYPE = BarlineType;\n    this.widths = {};\n    this.widths[TYPE.SINGLE] = 5;\n    this.widths[TYPE.DOUBLE] = 5;\n    this.widths[TYPE.END] = 5;\n    this.widths[TYPE.REPEAT_BEGIN] = 5;\n    this.widths[TYPE.REPEAT_END] = 5;\n    this.widths[TYPE.REPEAT_BOTH] = 5;\n    this.widths[TYPE.NONE] = 5;\n\n    this.paddings = {};\n    this.paddings[TYPE.SINGLE] = 0;\n    this.paddings[TYPE.DOUBLE] = 0;\n    this.paddings[TYPE.END] = 0;\n    this.paddings[TYPE.REPEAT_BEGIN] = 15;\n    this.paddings[TYPE.REPEAT_END] = 15;\n    this.paddings[TYPE.REPEAT_BOTH] = 15;\n    this.paddings[TYPE.NONE] = 0;\n\n    this.layoutMetricsMap = {};\n    this.layoutMetricsMap[TYPE.SINGLE] = {\n      xMin: 0,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.DOUBLE] = {\n      xMin: -3,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.END] = {\n      xMin: -5,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_END] = {\n      xMin: -10,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n      xMin: -2,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n      xMin: -10,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.NONE] = {\n      xMin: 0,\n      xMax: 0,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.setType(type);\n  }\n\n  getType(): number {\n    return this.type;\n  }\n\n  setType(type: string | number): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    this.setWidth(this.widths[this.type]);\n    this.setPadding(this.paddings[this.type]);\n    this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n    return this;\n  }\n\n  // Draw barlines\n  draw(stave: Stave): void {\n    stave.checkContext();\n    this.setRendered();\n\n    switch (this.type) {\n      case BarlineType.SINGLE:\n        this.drawVerticalBar(stave, this.x, false);\n        break;\n      case BarlineType.DOUBLE:\n        this.drawVerticalBar(stave, this.x, true);\n        break;\n      case BarlineType.END:\n        this.drawVerticalEndBar(stave, this.x);\n        break;\n      case BarlineType.REPEAT_BEGIN:\n        // If the barline is shifted over (in front of clef/time/key)\n        // Draw vertical bar at the beginning.\n        this.drawRepeatBar(stave, this.x, true);\n        if (stave.getX() !== this.x) {\n          this.drawVerticalBar(stave, stave.getX());\n        }\n\n        break;\n      case BarlineType.REPEAT_END:\n        this.drawRepeatBar(stave, this.x, false);\n        break;\n      case BarlineType.REPEAT_BOTH:\n        this.drawRepeatBar(stave, this.x, false);\n        this.drawRepeatBar(stave, this.x, true);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n  }\n\n  drawVerticalBar(stave: Stave, x: number, double_bar?: boolean): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    if (double_bar) {\n      staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n    }\n    staveCtx.fillRect(x, topY, 1, botY - topY);\n  }\n\n  drawVerticalEndBar(stave: Stave, x: number): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n  }\n\n  drawRepeatBar(stave: Stave, x: number, begin: boolean): void {\n    const staveCtx = stave.checkContext();\n\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    let x_shift = 3;\n\n    if (!begin) {\n      x_shift = -5;\n    }\n\n    staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n\n    const dot_radius = 2;\n\n    // Shift dots left or right\n    if (begin) {\n      x_shift += 4;\n    } else {\n      x_shift -= 4;\n    }\n\n    const dot_x = x + x_shift + dot_radius / 2;\n\n    // calculate the y offset based on number of stave lines\n    let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n    y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n    let dot_y = topY + y_offset + dot_radius / 2;\n\n    // draw the top repeat dot\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n\n    // draw the bottom repeat dot\n    dot_y += stave.getSpacingBetweenLines();\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport enum Justification {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n}\n\nexport interface TextNoteStruct extends NoteStruct {\n  text?: string;\n  glyph?: string;\n  ignore_ticks?: boolean;\n  smooth?: boolean;\n  font?: FontInfo;\n  subscript?: string;\n  superscript?: string;\n}\n\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n  static get CATEGORY(): string {\n    return 'TextNote';\n  }\n\n  protected text: string;\n  protected superscript?: string;\n  protected subscript?: string;\n  protected smooth: boolean;\n\n  protected font: FontInfo;\n  protected justification: Justification;\n  protected line: number;\n\n  static get Justification(): typeof Justification {\n    return Justification;\n  }\n\n  /** Glyph data. */\n  static get GLYPHS(): Record<string, { code: string }> {\n    return {\n      segno: {\n        code: 'segno',\n      },\n      tr: {\n        code: 'ornamentTrill',\n      },\n      mordent: {\n        code: 'ornamentMordent',\n      },\n      mordent_upper: {\n        code: 'ornamentShortTrill',\n      },\n      mordent_lower: {\n        code: 'ornamentMordent',\n      },\n      f: {\n        code: 'dynamicForte',\n      },\n      p: {\n        code: 'dynamicPiano',\n      },\n      m: {\n        code: 'dynamicMezzo',\n      },\n      s: {\n        code: 'dynamicSforzando',\n      },\n      z: {\n        code: 'dynamicZ',\n      },\n      coda: {\n        code: 'coda',\n      },\n      pedal_open: {\n        code: 'keyboardPedalPed',\n      },\n      pedal_close: {\n        code: 'keyboardPedalUp',\n      },\n      caesura_straight: {\n        code: 'caesura',\n      },\n      caesura_curved: {\n        code: 'caesuraCurved',\n      },\n      breath: {\n        code: 'breathMarkComma',\n      },\n      tick: {\n        code: 'breathMarkTick',\n      },\n      turn: {\n        code: 'ornamentTurn',\n      },\n      turn_inverted: {\n        code: 'ornamentTurnSlash',\n      },\n    };\n  }\n\n  constructor(noteStruct: TextNoteStruct) {\n    super(noteStruct);\n\n    this.text = noteStruct.text || '';\n    this.superscript = noteStruct.superscript;\n    this.subscript = noteStruct.subscript;\n    this.font = {\n      family: 'Arial',\n      size: 12,\n      weight: '',\n      ...noteStruct.font,\n    };\n    this.line = noteStruct.line || 0;\n    this.smooth = noteStruct.smooth || false;\n    this.ignore_ticks = noteStruct.ignore_ticks || false;\n    this.justification = Justification.LEFT;\n\n    // Determine and set initial note width. Note that the text width is\n    // an approximation and isn't very accurate. The only way to accurately\n    // measure the length of text is with `CanvasRenderingContext2D.measureText()`.\n    if (noteStruct.glyph) {\n      const struct = TextNote.GLYPHS[noteStruct.glyph];\n      if (!struct) throw new RuntimeError('Invalid glyph type: ' + noteStruct.glyph);\n\n      this.glyph = new Glyph(struct.code, 40, { category: 'textNote' });\n      this.setWidth(this.glyph.getMetrics().width);\n    } else {\n      this.glyph = undefined;\n    }\n  }\n\n  /** Set the horizontal justification of the TextNote. */\n  setJustification(just: Justification): this {\n    this.justification = just;\n    return this;\n  }\n\n  /** Set the Stave line on which the note should be placed. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Pre-render formatting. */\n  preFormat(): void {\n    if (this.preFormatted) return;\n    const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n\n    if (this.smooth) {\n      this.setWidth(0);\n    } else {\n      if (this.glyph) {\n        // Width already set.\n      } else {\n        const ctx = this.checkContext();\n        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n        this.setWidth(ctx.measureText(this.text).width);\n      }\n    }\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      this.leftDisplacedHeadPx = this.width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      this.leftDisplacedHeadPx = this.width;\n    }\n\n    // We reposition to the center of the note head\n    this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n    this.setPreFormatted(true);\n  }\n\n  /**\n   * Renders the TextNote.\n   * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n   */\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n\n    this.setRendered();\n\n    // Reposition to center of note head\n    let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n\n    // Align based on tick-context width.\n    const width = this.getWidth();\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      x -= width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      x -= width;\n    }\n\n    let y;\n    if (this.glyph) {\n      y = stave.getYForLine(this.line + -3);\n      this.glyph.render(ctx, x, y);\n    } else {\n      y = stave.getYForLine(this.line + -3);\n      this.applyStyle(ctx);\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.text, x, y);\n\n      const height = ctx.measureText(this.text).height;\n\n      // Write superscript\n      if (this.superscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);\n      }\n\n      // Write subscript\n      if (this.subscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);\n      }\n\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport enum VoltaType {\n  NONE = 1,\n  BEGIN = 2,\n  MID = 3,\n  END = 4,\n  BEGIN_END = 5,\n}\n\nexport class Volta extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'Volta';\n  }\n\n  static get type(): typeof VoltaType {\n    return VoltaType;\n  }\n\n  protected volta: number;\n  protected number: string;\n\n  protected font: FontInfo;\n  protected y_shift: number;\n\n  constructor(type: number, number: string, x: number, y_shift: number) {\n    super();\n    this.volta = type;\n    this.x = x;\n    this.y_shift = y_shift;\n    this.number = number;\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    let width = stave.getWidth() - x; // don't include x (offset) for width\n    const top_y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    const vert_height = 1.5 * stave.getSpacingBetweenLines();\n    switch (this.volta) {\n      case VoltaType.BEGIN:\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        break;\n      case VoltaType.END:\n        width -= 5;\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      case VoltaType.BEGIN_END:\n        width -= 3;\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      default:\n        break;\n    }\n    // If the beginning of a volta, draw measure number\n    if (this.volta === VoltaType.BEGIN || this.volta === VoltaType.BEGIN_END) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n      ctx.restore();\n    }\n\n    ctx.fillRect(this.x + x, top_y, width, 1);\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n// MIT License\n\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { defined, log } from './util';\n\nexport interface ClefType {\n  point: number;\n  code: string;\n  line?: number;\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Clef.DEBUG) log('Vex.Flow.Clef', args);\n}\n\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n  /** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'Clef';\n  }\n\n  annotation?: {\n    code: string;\n    line: number;\n    x_shift: number;\n    point: number;\n  };\n\n  /**\n   * The attribute `clef` must be a key from\n   * `Clef.types`\n   */\n  clef: ClefType = Clef.types['treble'];\n\n  protected glyph?: Glyph;\n  protected attachment?: Glyph;\n  protected size?: string;\n  protected type?: string;\n\n  /**\n   * Every clef name is associated with a glyph code from the font file\n   * and a default stave line number.\n   */\n  static get types(): Record<string, ClefType> {\n    return {\n      treble: {\n        code: 'gClef',\n        line: 3,\n        point: 0,\n      },\n      bass: {\n        code: 'fClef',\n        line: 1,\n        point: 0,\n      },\n      alto: {\n        code: 'cClef',\n        line: 2,\n        point: 0,\n      },\n      tenor: {\n        code: 'cClef',\n        line: 1,\n        point: 0,\n      },\n      percussion: {\n        code: 'restMaxima',\n        line: 2,\n        point: 0,\n      },\n      soprano: {\n        code: 'cClef',\n        line: 4,\n        point: 0,\n      },\n      'mezzo-soprano': {\n        code: 'cClef',\n        line: 3,\n        point: 0,\n      },\n      'baritone-c': {\n        code: 'cClef',\n        line: 0,\n        point: 0,\n      },\n      'baritone-f': {\n        code: 'fClef',\n        line: 2,\n        point: 0,\n      },\n      subbass: {\n        code: 'fClef',\n        line: 0,\n        point: 0,\n      },\n      french: {\n        code: 'gClef',\n        line: 4,\n        point: 0,\n      },\n      tab: {\n        code: '6stringTabClef',\n        point: 0,\n      },\n    };\n  }\n\n  /** Create a new clef. */\n  constructor(type: string, size?: string, annotation?: string) {\n    super();\n\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(this.musicFont.lookupMetric(`clef.${this.size}.width`));\n    L('Creating clef:', type);\n  }\n\n  /** Set clef type, size and annotation. */\n  setType(type: string, size?: string, annotation?: string): this {\n    this.type = type;\n    this.clef = Clef.types[type];\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n    this.clef.point = this.musicFont.lookupMetric(`clef.${this.size}.point`, 0);\n    this.glyph = new Glyph(this.clef.code, this.clef.point, {\n      category: `clef.${this.clef.code}.${this.size}`,\n    });\n\n    // If an annotation, such as 8va, is specified, add it to the Clef object.\n    if (annotation !== undefined) {\n      const code = this.musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\n      const point = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\n      const line = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\n      const x_shift = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\n\n      this.annotation = { code, point, line, x_shift };\n\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n\n    return this;\n  }\n\n  /** Get clef width. */\n  getWidth(): number {\n    if (this.type === 'tab') {\n      defined(this.stave, 'ClefError', \"Can't get width without stave.\");\n    }\n    return this.width;\n  }\n\n  /** Set associated stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    if (this.type === 'tab') {\n      const glyph = defined(this.glyph, 'ClefError', \"Can't set stave without glyph.\");\n\n      const numLines = this.stave.getNumLines();\n      const point = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\n      const shiftY = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\n      glyph.setPoint(point);\n      glyph.setYShift(shiftY);\n    }\n    return this;\n  }\n\n  /** Render clef. */\n  draw(): void {\n    const glyph = defined(this.glyph, 'ClefError', \"Can't draw clef without glyph.\");\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.openGroup('clef', this.getAttribute('id'));\n    glyph.setStave(stave);\n    glyph.setContext(ctx);\n    if (this.clef.line !== undefined) {\n      this.placeGlyphOnLine(glyph, stave, this.clef.line);\n    }\n    glyph.renderToStave(this.x);\n\n    if (this.annotation !== undefined && this.attachment !== undefined) {\n      this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\n      this.attachment.setStave(stave);\n      this.attachment.setContext(ctx);\n      this.attachment.renderToStave(this.x);\n    }\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\n\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { defined } from './util';\n\nexport class KeySignature extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'KeySignature';\n  }\n\n  protected glyphFontScale: number;\n  protected glyphs: Glyph[];\n  protected xPositions: number[];\n  protected paddingForced: boolean;\n  protected formatted?: boolean;\n  protected cancelKeySpec?: string;\n  protected accList: { type: string; line: number }[] = [];\n  protected keySpec?: string;\n  protected alterKeySpec?: string[];\n\n  // Space between natural and following accidental depending\n  // on vertical position\n  static accidentalSpacing: Record<string, { above: number; below: number }> = {\n    '#': {\n      above: 6,\n      below: 4,\n    },\n    b: {\n      above: 4,\n      below: 7,\n    },\n    n: {\n      above: 4,\n      below: 1,\n    },\n    '##': {\n      above: 6,\n      below: 4,\n    },\n    bb: {\n      above: 4,\n      below: 7,\n    },\n    db: {\n      above: 4,\n      below: 7,\n    },\n    d: {\n      above: 4,\n      below: 7,\n    },\n    bbs: {\n      above: 4,\n      below: 7,\n    },\n    '++': {\n      above: 6,\n      below: 4,\n    },\n    '+': {\n      above: 6,\n      below: 4,\n    },\n    '+-': {\n      above: 6,\n      below: 4,\n    },\n    '++-': {\n      above: 6,\n      below: 4,\n    },\n    bs: {\n      above: 4,\n      below: 10,\n    },\n    bss: {\n      above: 4,\n      below: 10,\n    },\n  };\n\n  // Create a new Key Signature based on a `key_spec`\n  constructor(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string[]) {\n    super();\n\n    this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n    this.glyphs = [];\n    this.xPositions = []; // relative to this.x\n    this.paddingForced = false;\n  }\n\n  // Add an accidental glyph to the `KeySignature` instance which represents\n  // the provided `acc`. If `nextAcc` is also provided, the appropriate\n  // spacing will be included in the glyph's position\n  convertToGlyph(acc: { type: string; line: number }, nextAcc: { type: string; line: number }): void {\n    const accGlyphData = Tables.accidentalCodes(acc.type);\n    const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n\n    // Determine spacing between current accidental and the next accidental\n    let extraWidth = 1;\n    if (acc.type === 'n' && nextAcc) {\n      const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n      if (spacing) {\n        const isAbove = nextAcc.line >= acc.line;\n        extraWidth = isAbove ? spacing.above : spacing.below;\n      }\n    }\n\n    // Place the glyph on the stave\n    this.placeGlyphOnLine(glyph, this.checkStave(), acc.line);\n    this.glyphs.push(glyph);\n\n    const xPosition = this.xPositions[this.xPositions.length - 1];\n    const glyphWidth = glyph.getMetrics().width + extraWidth;\n    // Store the next accidental's x position\n    this.xPositions.push(xPosition + glyphWidth);\n    // Expand size of key signature\n    this.width += glyphWidth;\n  }\n\n  // Cancel out a key signature provided in the `spec` parameter. This will\n  // place appropriate natural accidentals before the key signature.\n  cancelKey(spec: string): this {\n    this.formatted = false;\n    this.cancelKeySpec = spec;\n\n    return this;\n  }\n\n  convertToCancelAccList(spec: string): { type: string; accList: { type: string; line: number }[] } | undefined {\n    // Get the accidental list for the cancelled key signature\n    const cancel_accList = Tables.keySignature(spec);\n\n    // If the cancelled key has a different accidental type, ie: # vs b\n    const different_types =\n      this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\n\n    // Determine how many naturals needed to add\n    const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\n\n    // Return if no naturals needed\n    if (naturals < 1) return undefined;\n\n    // Get the line position for each natural\n    const cancelled: { type: string; line: number }[] = [];\n    for (let i = 0; i < naturals; i++) {\n      let index = i;\n      if (!different_types) {\n        index = cancel_accList.length - naturals + i;\n      }\n\n      const acc = cancel_accList[index];\n      cancelled.push({ type: 'n', line: acc.line });\n    }\n\n    // Combine naturals with main accidental list for the key signature\n    this.accList = cancelled.concat(this.accList);\n\n    return {\n      accList: cancelled,\n      type: cancel_accList[0].type,\n    };\n  }\n\n  // Deprecated\n  addToStave(stave: Stave): this {\n    this.paddingForced = true;\n    stave.addModifier(this);\n\n    return this;\n  }\n\n  // Apply the accidental staff line placement based on the `clef` and\n  // the  accidental `type` for the key signature ('# or 'b').\n  convertAccLines(clef: string, type?: string, accList = this.accList): void {\n    let offset = 0.0; // if clef === \"treble\"\n    let customLines; // when clef doesn't follow treble key sig shape\n\n    switch (clef) {\n      // Treble & Subbass both have offsets of 0, so are not included.\n      case 'soprano':\n        if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n        else offset = -1;\n        break;\n      case 'mezzo-soprano':\n        if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n        else offset = 1.5;\n        break;\n      case 'alto':\n        offset = 0.5;\n        break;\n      case 'tenor':\n        if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n        else offset = -0.5;\n        break;\n      case 'baritone-f':\n      case 'baritone-c':\n        if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n        else offset = 2;\n        break;\n      case 'bass':\n      case 'french':\n        offset = 1;\n        break;\n      default:\n        break;\n    }\n\n    // If there's a special case, assign those lines/spaces:\n    let i;\n    if (typeof customLines !== 'undefined') {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line = customLines[i];\n      }\n    } else if (offset !== 0) {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line += offset;\n      }\n    }\n  }\n\n  getPadding(index: number): number {\n    if (!this.formatted) this.format();\n\n    return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n  }\n\n  getWidth(): number {\n    if (!this.formatted) this.format();\n\n    return this.width;\n  }\n\n  setKeySig(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string[]): this {\n    this.formatted = false;\n    this.keySpec = keySpec;\n    this.cancelKeySpec = cancelKeySpec;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  // Alter the accidentals of a key spec one by one.\n  // Each alteration is a new accidental that replaces the\n  // original accidental (or the canceled one).\n  alterKey(alterKeySpec: string[]): this {\n    this.formatted = false;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  convertToAlterAccList(alterKeySpec: string[]): void {\n    const max = Math.min(alterKeySpec.length, this.accList.length);\n    for (let i = 0; i < max; ++i) {\n      if (alterKeySpec[i]) {\n        this.accList[i].type = alterKeySpec[i];\n      }\n    }\n  }\n\n  format(): void {\n    const stave = this.checkStave();\n\n    this.width = 0;\n    this.glyphs = [];\n    this.xPositions = [0]; // initialize with initial x position\n    this.accList = Tables.keySignature(defined(this.keySpec));\n    const accList = this.accList;\n    const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n    let cancelAccList;\n    if (this.cancelKeySpec) {\n      cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n    }\n    if (this.alterKeySpec) {\n      this.convertToAlterAccList(this.alterKeySpec);\n    }\n\n    if (this.accList.length > 0) {\n      const clef =\n        (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n      if (cancelAccList) {\n        this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n      }\n      this.convertAccLines(clef, firstAccidentalType, accList);\n      for (let i = 0; i < this.accList.length; ++i) {\n        this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n      }\n    }\n\n    this.formatted = true;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n\n    if (!this.formatted) this.format();\n    this.setRendered();\n\n    ctx.openGroup('keysignature', this.getAttribute('id'));\n    for (let i = 0; i < this.glyphs.length; i++) {\n      const glyph = this.glyphs[i];\n      const x = this.x + this.xPositions[i];\n      glyph.setStave(stave);\n      glyph.setContext(ctx);\n      glyph.renderToStave(x);\n    }\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport class Repetition extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'Repetition';\n  }\n\n  static readonly type = {\n    NONE: 1, // no coda or segno\n    CODA_LEFT: 2, // coda at beginning of stave\n    CODA_RIGHT: 3, // coda at end of stave\n    SEGNO_LEFT: 4, // segno at beginning of stave\n    SEGNO_RIGHT: 5, // segno at end of stave\n    DC: 6, // D.C. at end of stave\n    DC_AL_CODA: 7, // D.C. al coda at end of stave\n    DC_AL_FINE: 8, // D.C. al Fine end of stave\n    DS: 9, // D.S. at end of stave\n    DS_AL_CODA: 10, // D.S. al coda at end of stave\n    DS_AL_FINE: 11, // D.S. al Fine at end of stave\n    FINE: 12, // Fine at end of stave\n  };\n\n  protected symbol_type: number;\n\n  protected x_shift: number;\n  protected y_shift: number;\n  protected font: FontInfo;\n\n  constructor(type: number, x: number, y_shift: number) {\n    super();\n\n    this.symbol_type = type;\n    this.x = x;\n    this.x_shift = 0;\n    this.y_shift = y_shift;\n    this.font = {\n      family: 'times',\n      size: 12,\n      weight: 'bold',\n      style: 'italic',\n    };\n  }\n\n  setShiftX(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    this.setRendered();\n\n    switch (this.symbol_type) {\n      case Repetition.type.CODA_RIGHT:\n        this.drawCodaFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.CODA_LEFT:\n        this.drawSymbolText(stave, x, 'Coda', true);\n        break;\n      case Repetition.type.SEGNO_LEFT:\n        this.drawSignoFixed(stave, x);\n        break;\n      case Repetition.type.SEGNO_RIGHT:\n        this.drawSignoFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.DC:\n        this.drawSymbolText(stave, x, 'D.C.', false);\n        break;\n      case Repetition.type.DC_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.C. al', true);\n        break;\n      case Repetition.type.DC_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n        break;\n      case Repetition.type.DS:\n        this.drawSymbolText(stave, x, 'D.S.', false);\n        break;\n      case Repetition.type.DS_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.S. al', true);\n        break;\n      case Repetition.type.DS_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n        break;\n      case Repetition.type.FINE:\n        this.drawSymbolText(stave, x, 'Fine', false);\n        break;\n      default:\n        break;\n    }\n\n    return this;\n  }\n\n  drawCodaFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 40, 'coda', { category: 'coda' });\n    return this;\n  }\n\n  drawSignoFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 30, 'segno', { category: 'segno' });\n    return this;\n  }\n\n  drawSymbolText(stave: Stave, x: number, text: string, draw_coda: boolean): this {\n    const ctx = stave.checkContext();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Default to right symbol\n    let text_x = 0 + this.x_shift;\n    let symbol_x = x + this.x_shift;\n    if (this.symbol_type === Repetition.type.CODA_LEFT) {\n      // Offset Coda text to right of stave beginning\n      text_x = this.x + stave.getVerticalBarWidth();\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    } else if (this.symbol_type === Repetition.type.DS) {\n      const modifierWidth = stave.getNoteStartX() - this.x;\n      text_x = this.x + x + this.x_shift + stave.getWidth() - 5 - modifierWidth - ctx.measureText(text).width;\n      // TODO this is weird. setting the x position should probably be refactored, parameters aren't clear here.\n    } else {\n      // Offset Signo text to left stave end\n      symbol_x = this.x + x + stave.getWidth() - 5 + this.x_shift;\n      text_x = symbol_x - +ctx.measureText(text).width - 12;\n    }\n\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    if (draw_coda) {\n      Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\n    }\n\n    ctx.fillText(text, text_x, y + 5);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport class StaveSection extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'StaveSection';\n  }\n\n  protected section: string;\n  protected shift_x: number;\n  protected shift_y: number;\n  protected font: FontInfo;\n\n  constructor(section: string, x: number, shift_y: number) {\n    super();\n\n    this.setWidth(16);\n    this.section = section;\n    this.x = x;\n    this.shift_x = 0;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'sans-serif',\n      size: 12,\n      weight: 'bold',\n    };\n  }\n\n  setStaveSection(section: string): this {\n    this.section = section;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.section).width;\n    let width = text_width + 6; // add left & right padding\n    if (width < 18) width = 18;\n    const height = 20;\n    //  Seems to be a good default y\n    const y = stave.getYForTopText(3) + this.shift_y;\n    let x = this.x + shift_x;\n    ctx.beginPath();\n    ctx.setLineWidth(2);\n    ctx.rect(x, y, width, height);\n    ctx.stroke();\n    x += (width - text_width) / 2;\n    ctx.fillText('' + this.section, x, y + 16);\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Radosaw Eichler 2012\n\nimport { FontInfo } from 'types/common';\n\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\n\nexport interface StaveTempoOptions {\n  bpm?: number;\n  duration?: string;\n  dots?: number;\n  name?: string;\n}\n\nexport class StaveTempo extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'StaveTempo';\n  }\n\n  protected font: FontInfo;\n  /** Font size for note. */\n  public render_options = { glyph_font_scale: 30 };\n  protected tempo: StaveTempoOptions;\n  protected shift_x: number;\n  protected shift_y: number;\n\n  constructor(tempo: StaveTempoOptions, x: number, shift_y: number) {\n    super();\n\n    this.tempo = tempo;\n    this.position = StaveModifierPosition.ABOVE;\n    this.x = x;\n    this.shift_x = 10;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'times',\n      size: 14,\n      weight: 'bold',\n    };\n  }\n\n  setTempo(tempo: StaveTempoOptions): this {\n    this.tempo = tempo;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    const options = this.render_options;\n    // FIXME: What does the '38' mean? Why 38? Is that supposed to\n    // be the default font size for standard notation?\n    const scale = options.glyph_font_scale / 38;\n    const name = this.tempo.name;\n    const duration = this.tempo.duration;\n    const dots = this.tempo.dots || 0;\n    const bpm = this.tempo.bpm;\n    const font = this.font;\n    let x = this.x + this.shift_x + shift_x;\n    const y = stave.getYForTopText(1) + this.shift_y;\n\n    ctx.save();\n\n    if (name) {\n      ctx.setFont(font.family, font.size, font.weight);\n      ctx.fillText(name, x, y);\n      x += ctx.measureText(name).width;\n    }\n\n    if (duration && bpm) {\n      ctx.setFont(font.family, font.size, 'normal');\n\n      if (name) {\n        x += ctx.measureText(' ').width;\n        ctx.fillText('(', x, y);\n        x += ctx.measureText('(').width;\n      }\n\n      const code = Tables.getGlyphProps(duration);\n\n      x += 3 * scale;\n      Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n      x += code.getWidth() * scale;\n\n      // Draw stem and flags\n      if (code.stem) {\n        let stem_height = 30;\n\n        if (code.beam_count) stem_height += 3 * (code.beam_count - 1);\n\n        stem_height *= scale;\n\n        const y_top = y - stem_height;\n        ctx.fillRect(x - scale, y_top, scale, stem_height);\n\n        if (code.flag) {\n          Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem, {\n            category: 'flag.staveTempo',\n          });\n\n          if (!dots) x += 6 * scale;\n        }\n      }\n\n      // Draw dot\n      for (let i = 0; i < dots; i++) {\n        x += 6 * scale;\n        ctx.beginPath();\n        ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n        ctx.fill();\n      }\n\n      ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n    }\n\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { FontInfo } from 'types/common';\n\nimport { Stave } from './stave';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Justification, TextNote } from './textnote';\nimport { RuntimeError } from './util';\n\nexport class StaveText extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'StaveText';\n  }\n\n  protected text: string;\n  protected shift_x?: number;\n  protected shift_y?: number;\n  protected options: {\n    shift_x: number;\n    shift_y: number;\n    justification: number;\n  };\n  protected font: FontInfo;\n\n  constructor(\n    text: string,\n    position: number,\n    options: { shift_x?: number; shift_y?: number; justification?: number } = {}\n  ) {\n    super();\n\n    this.setWidth(16);\n    this.text = text;\n    this.position = position;\n    this.options = {\n      shift_x: 0,\n      shift_y: 0,\n      justification: TextNote.Justification.CENTER,\n      ...options,\n    };\n\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n  }\n\n  setStaveText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  draw(stave: Stave): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.text).width;\n\n    let x;\n    let y;\n    switch (this.position) {\n      case StaveModifierPosition.LEFT:\n      case StaveModifierPosition.RIGHT:\n        y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n        if (this.position === StaveModifierPosition.LEFT) {\n          x = stave.getX() - text_width - 24 + this.options.shift_x;\n        } else {\n          x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n        }\n        break;\n      case StaveModifierPosition.ABOVE:\n      case StaveModifierPosition.BELOW:\n        x = stave.getX() + this.options.shift_x;\n        if (this.options.justification === Justification.CENTER) {\n          x += stave.getWidth() / 2 - text_width / 2;\n        } else if (this.options.justification === Justification.RIGHT) {\n          x += stave.getWidth() - text_width;\n        }\n\n        if (this.position === StaveModifierPosition.ABOVE) {\n          y = stave.getYForTopText(2) + this.options.shift_y;\n        } else {\n          y = stave.getYForBottomText(2) + this.options.shift_y;\n        }\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n    }\n\n    ctx.fillText('' + this.text, x, y + 4);\n    ctx.restore();\n    return this;\n  }\n}\n","import { Glyph, GlyphMetrics } from './glyph';\nimport { TimeSignature } from './timesignature';\nimport { defined } from './util';\n\nexport class TimeSignatureGlyph extends Glyph {\n  timeSignature: TimeSignature;\n  topStartX: number;\n  botStartX: number;\n  width: number;\n  xMin: number;\n\n  constructor(\n    timeSignature: TimeSignature,\n    topDigits: string[],\n    botDigits: string[],\n    code: string,\n    point: number,\n    options?: { category: string }\n  ) {\n    super(code, point, options);\n    this.timeSignature = timeSignature;\n    this.topGlyphs = [];\n    this.botGlyphs = [];\n\n    let topWidth = 0;\n    for (let i = 0; i < topDigits.length; ++i) {\n      const num = topDigits[i];\n      const topGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.topGlyphs.push(topGlyph);\n      topWidth += topGlyph.getMetrics().width ?? 0;\n    }\n\n    let botWidth = 0;\n    for (let i = 0; i < botDigits.length; ++i) {\n      const num = botDigits[i];\n      const botGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.botGlyphs.push(botGlyph);\n      botWidth += defined(botGlyph.getMetrics().width);\n    }\n\n    this.width = Math.max(topWidth, botWidth);\n    this.xMin = this.getMetrics().x_min;\n    this.topStartX = (this.width - topWidth) / 2.0;\n    this.botStartX = (this.width - botWidth) / 2.0;\n    this.reset();\n  }\n\n  getMetrics(): GlyphMetrics {\n    return {\n      x_min: this.xMin,\n      x_max: this.xMin + this.width,\n      width: this.width,\n    } as GlyphMetrics;\n  }\n\n  renderToStave(x: number): void {\n    const stave = this.checkStave();\n\n    let start_x = x + this.topStartX;\n    for (let i = 0; i < this.topGlyphs.length; ++i) {\n      const glyph = this.topGlyphs[i];\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + this.x_shift,\n        stave.getYForLine(this.timeSignature.topLine)\n      );\n      start_x += defined(glyph.getMetrics().width);\n    }\n\n    start_x = x + this.botStartX;\n    for (let i = 0; i < this.botGlyphs.length; ++i) {\n      const glyph = this.botGlyphs[i];\n      this.timeSignature.placeGlyphOnLine(glyph, stave, 0);\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + glyph.getMetrics().x_shift,\n        stave.getYForLine(this.timeSignature.bottomLine)\n      );\n      start_x += defined(glyph.getMetrics().width);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\n\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { TimeSignatureGlyph } from './timesigglyph';\nimport { defined, RuntimeError } from './util';\n\nexport interface TimeSignatureInfo {\n  glyph: Glyph;\n  line?: number;\n  num: boolean;\n}\n\nconst assertIsValidFraction = (timeSpec: string) => {\n  const numbers = timeSpec.split('/').filter((number) => number !== '');\n\n  if (numbers.length !== 2) {\n    throw new RuntimeError(\n      'BadTimeSignature',\n      `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`\n    );\n  }\n\n  numbers.forEach((number) => {\n    if (isNaN(Number(number))) {\n      throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain two valid numbers.`);\n    }\n  });\n};\n\nexport class TimeSignature extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'TimeSignature';\n  }\n\n  static get glyphs(): Record<string, { code: string; point: number; line: number }> {\n    return {\n      C: {\n        code: 'timeSigCommon',\n        point: 40,\n        line: 2,\n      },\n      'C|': {\n        code: 'timeSigCutCommon',\n        point: 40,\n        line: 2,\n      },\n    };\n  }\n\n  point: number;\n  bottomLine: number;\n  topLine: number;\n\n  protected info: TimeSignatureInfo;\n  protected validate_args: boolean;\n\n  constructor(timeSpec: string = '4/4', customPadding = 15, validate_args = true) {\n    super();\n    this.validate_args = validate_args;\n\n    const padding = customPadding;\n\n    this.point = this.musicFont.lookupMetric('digits.point');\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n    this.topLine = 2 + fontLineShift;\n    this.bottomLine = 4 + fontLineShift;\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.info = this.parseTimeSpec(timeSpec);\n    this.setWidth(defined(this.info.glyph.getMetrics().width));\n    this.setPadding(padding);\n  }\n\n  parseTimeSpec(timeSpec: string): TimeSignatureInfo {\n    if (timeSpec === 'C' || timeSpec === 'C|') {\n      const { line, code, point } = TimeSignature.glyphs[timeSpec];\n      return {\n        line,\n        num: false,\n        glyph: new Glyph(code, point),\n      };\n    }\n\n    if (this.validate_args) {\n      assertIsValidFraction(timeSpec);\n    }\n\n    const [topDigits, botDigits] = timeSpec.split('/').map((number) => number.split(''));\n\n    return {\n      num: true,\n      glyph: this.makeTimeSignatureGlyph(topDigits, botDigits),\n    };\n  }\n\n  makeTimeSignatureGlyph(topDigits: string[], botDigits: string[]): Glyph {\n    return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n  }\n\n  getInfo(): TimeSignatureInfo {\n    return this.info;\n  }\n\n  setTimeSig(timeSpec: string): this {\n    this.info = this.parseTimeSpec(timeSpec);\n    return this;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.openGroup('timesignature', this.getAttribute('id'));\n    this.info.glyph.setStave(stave);\n    this.info.glyph.setContext(ctx);\n    this.placeGlyphOnLine(this.info.glyph, stave, this.info.line);\n    this.info.glyph.renderToStave(this.x);\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { isBarline } from 'typeguard';\n\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element, ElementStyle } from './element';\nimport { KeySignature } from './keysignature';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo, StaveTempoOptions } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Bounds, FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport interface StaveLineConfig {\n  visible?: boolean;\n}\n\nexport interface StaveOptions {\n  spacing?: number;\n  thickness?: number;\n  x_shift?: number;\n  y_shift?: number;\n  cps?: { x: number; y: number }[];\n  bottom_text_position?: number;\n  line_config?: StaveLineConfig[];\n  space_below_staff_ln?: number;\n  glyph_spacing_px?: number;\n  space_above_staff_ln?: number;\n  vertical_bar_width?: number;\n  fill_style?: string;\n  left_bar?: boolean;\n  right_bar?: boolean;\n  spacing_between_lines_px?: number;\n  top_text_position?: number;\n  num_lines?: number;\n}\n\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n  [Barline.CATEGORY]: 0,\n  [Clef.CATEGORY]: 1,\n  [KeySignature.CATEGORY]: 2,\n  [TimeSignature.CATEGORY]: 3,\n};\n\nconst SORT_ORDER_END_MODIFIERS = {\n  [TimeSignature.CATEGORY]: 0,\n  [KeySignature.CATEGORY]: 1,\n  [Barline.CATEGORY]: 2,\n  [Clef.CATEGORY]: 3,\n};\n\nexport class Stave extends Element {\n  static get CATEGORY(): string {\n    return 'Stave';\n  }\n\n  protected start_x: number;\n  protected clef: string;\n  protected options: Required<StaveOptions>;\n  protected endClef?: string;\n\n  protected x: number;\n  protected y: number;\n  protected width: number;\n  // Initialized by the constructor via this.resetLines().\n  protected height: number = 0;\n\n  protected formatted: boolean;\n  protected end_x: number;\n  protected measure: number;\n  protected font: FontInfo;\n  protected bounds: Bounds;\n  protected readonly modifiers: StaveModifier[];\n\n  protected defaultLedgerLineStyle: ElementStyle;\n\n  // This is the sum of the padding that normally goes on left + right of a stave during\n  // drawing. Used to size staves correctly with content width.\n  static get defaultPadding(): number {\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n  }\n  // Right padding, used by system if startX is already determined.\n  static get rightPadding(): number {\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('stave.endPaddingMax');\n  }\n\n  constructor(x: number, y: number, width: number, options?: StaveOptions) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.formatted = false;\n    this.start_x = x + 5;\n    this.end_x = x + width;\n    this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n    this.measure = 0;\n    this.clef = 'treble';\n    this.endClef = undefined;\n    this.font = {\n      family: 'sans-serif',\n      size: 8,\n      weight: '',\n    };\n    this.options = {\n      spacing: 2,\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      vertical_bar_width: 10, // Width around vertical bar end-marker\n      glyph_spacing_px: 10,\n      num_lines: 5,\n      fill_style: '#999999',\n      left_bar: true, // draw vertical bar on left\n      right_bar: true, // draw vertical bar on right\n      spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, // in pixels\n      space_above_staff_ln: 4, // in staff lines\n      space_below_staff_ln: 4, // in staff lines\n      top_text_position: 1, // in staff lines\n      bottom_text_position: 4, // in staff lines\n      line_config: [],\n      cps: [],\n      ...options,\n    };\n    this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n    this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n\n    this.resetLines();\n\n    // beg bar\n    this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\n    // end bar\n    this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\n  }\n\n  /** Set default style for ledger lines. */\n  setDefaultLedgerLineStyle(style: ElementStyle): void {\n    this.defaultLedgerLineStyle = style;\n  }\n\n  /** Get default style for ledger lines. */\n  getDefaultLedgerLineStyle(): ElementStyle {\n    return { ...this.getStyle(), ...this.defaultLedgerLineStyle };\n  }\n\n  space(spacing: number): number {\n    return this.options.spacing_between_lines_px * spacing;\n  }\n\n  resetLines(): void {\n    this.options.line_config = [];\n    for (let i = 0; i < this.options.num_lines; i++) {\n      this.options.line_config.push({ visible: true });\n    }\n    this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n    this.options.bottom_text_position = this.options.num_lines;\n  }\n\n  setNoteStartX(x: number): this {\n    if (!this.formatted) this.format();\n\n    this.start_x = x;\n    const begBarline = this.modifiers[0];\n    begBarline.setX(this.start_x - begBarline.getWidth());\n    return this;\n  }\n\n  getNoteStartX(): number {\n    if (!this.formatted) this.format();\n\n    return this.start_x;\n  }\n\n  getNoteEndX(): number {\n    if (!this.formatted) this.format();\n\n    return this.end_x;\n  }\n\n  getTieStartX(): number {\n    return this.start_x;\n  }\n\n  getTieEndX(): number {\n    return this.x + this.width;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  getNumLines(): number {\n    return this.options.num_lines;\n  }\n\n  setNumLines(n: number): this {\n    this.options.num_lines = n;\n    this.resetLines();\n    return this;\n  }\n\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  getY(): number {\n    return this.y;\n  }\n\n  getTopLineTopY(): number {\n    return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n  }\n\n  getBottomLineBottomY(): number {\n    return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n  }\n\n  setX(x: number): this {\n    const shift = x - this.x;\n    this.formatted = false;\n    this.x = x;\n    this.start_x += shift;\n    this.end_x += shift;\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const mod = this.modifiers[i];\n      mod.setX(mod.getX() + shift);\n    }\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.formatted = false;\n    this.width = width;\n    this.end_x = this.x + width;\n\n    // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n    // this.modifiers[1].setX(this.end_x);\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getStyle(): ElementStyle {\n    return {\n      fillStyle: this.options.fill_style,\n      strokeStyle: this.options.fill_style, // yes, this is correct for legacy compatibility\n      lineWidth: Tables.STAVE_LINE_THICKNESS,\n      ...this.style,\n    };\n  }\n\n  setMeasure(measure: number): this {\n    this.measure = measure;\n    return this;\n  }\n\n  /**\n   * Gets the pixels to shift from the beginning of the stave\n   * following the modifier at the provided index\n   * @param  {Number} index The index from which to determine the shift\n   * @return {Number}       The amount of pixels shifted\n   */\n  getModifierXShift(index: number = 0): number {\n    if (typeof index !== 'number') {\n      throw new RuntimeError('InvalidIndex', 'Must be of number type');\n    }\n\n    if (!this.formatted) this.format();\n\n    if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n      return 0;\n    }\n\n    // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n    if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n      return 0;\n    }\n\n    let start_x = this.start_x - this.x;\n    const begBarline = this.modifiers[0] as Barline;\n    if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n      start_x -= begBarline.getWidth();\n    }\n\n    return start_x;\n  }\n\n  // Coda & Segno Symbol functions\n  setRepetitionTypeLeft(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  setRepetitionTypeRight(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  // Volta functions\n  setVoltaType(type: number, number_t: string, y: number): this {\n    this.modifiers.push(new Volta(type, number_t, this.x, y));\n    return this;\n  }\n\n  // Section functions\n  setSection(section: string, y: number): this {\n    this.modifiers.push(new StaveSection(section, this.x, y));\n    return this;\n  }\n\n  // Tempo functions\n  setTempo(tempo: StaveTempoOptions, y: number): this {\n    this.modifiers.push(new StaveTempo(tempo, this.x, y));\n    return this;\n  }\n\n  // Text functions\n  setText(\n    text: string,\n    position: number,\n    options: {\n      shift_x?: number;\n      shift_y?: number;\n      justification?: number;\n    } = {}\n  ): this {\n    this.modifiers.push(new StaveText(text, position, options));\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  getSpacingBetweenLines(): number {\n    return this.options.spacing_between_lines_px;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n  }\n\n  getBottomY(): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n\n    return score_bottom;\n  }\n\n  getBottomLineY(): number {\n    return this.getYForLine(this.options.num_lines);\n  }\n\n  // This returns the y for the *center* of a staff line\n  getYForLine(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n\n    const y = this.y + line * spacing + headroom * spacing;\n\n    return y;\n  }\n\n  getLineForY(y: number): number {\n    // Does the reverse of getYForLine - somewhat dumb and just calls\n    // getYForLine until the right value is reaches\n\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return (y - this.y) / spacing - headroom;\n  }\n\n  getYForTopText(line: number = 0): number {\n    return this.getYForLine(-line - this.options.top_text_position);\n  }\n\n  getYForBottomText(line: number = 0): number {\n    return this.getYForLine(this.options.bottom_text_position + line);\n  }\n\n  getYForNote(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return this.y + headroom * spacing + 5 * spacing - line * spacing;\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(3);\n  }\n\n  // This method adds a stave modifier to the stave. Note that the first two\n  // modifiers (BarLines) are automatically added upon construction.\n  addModifier(modifier: StaveModifier, position?: number): this {\n    if (position !== undefined) {\n      modifier.setPosition(position);\n    }\n\n    modifier.setStave(this);\n    this.formatted = false;\n    this.modifiers.push(modifier);\n    return this;\n  }\n\n  addEndModifier(modifier: StaveModifier): this {\n    this.addModifier(modifier, StaveModifierPosition.END);\n    return this;\n  }\n\n  // Bar Line functions\n  setBegBarType(type: number): this {\n    // Only valid bar types at beginning of stave is none, single or begin repeat\n    const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n    if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n      (this.modifiers[0] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setEndBarType(type: number): this {\n    // Repeat end not valid at end of stave\n    if (type !== BarlineType.REPEAT_BEGIN) {\n      (this.modifiers[1] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setClef(clefSpec: string, size?: string, annotation?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n\n    if (position === StaveModifierPosition.END) {\n      this.endClef = clefSpec;\n    } else {\n      this.clef = clefSpec;\n    }\n\n    const clefs = this.getModifiers(position, Clef.CATEGORY) as Clef[];\n    if (clefs.length === 0) {\n      this.addClef(clefSpec, size, annotation, position);\n    } else {\n      clefs[0].setType(clefSpec, size, annotation);\n    }\n\n    return this;\n  }\n\n  getClef(): string {\n    return this.clef;\n  }\n\n  setEndClef(clefSpec: string, size?: string, annotation?: string): this {\n    this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n    return this;\n  }\n\n  getEndClef(): string | undefined {\n    return this.endClef;\n  }\n\n  setKeySignature(keySpec: string, cancelKeySpec?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n\n    const keySignatures = this.getModifiers(position, KeySignature.CATEGORY) as KeySignature[];\n    if (keySignatures.length === 0) {\n      this.addKeySignature(keySpec, cancelKeySpec, position);\n    } else {\n      keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n    }\n\n    return this;\n  }\n\n  setEndKeySignature(keySpec: string, cancelKeySpec?: string): this {\n    this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n    return this;\n  }\n\n  setTimeSignature(timeSpec: string, customPadding?: number, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n\n    const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY) as TimeSignature[];\n    if (timeSignatures.length === 0) {\n      this.addTimeSignature(timeSpec, customPadding, position);\n    } else {\n      timeSignatures[0].setTimeSig(timeSpec);\n    }\n\n    return this;\n  }\n\n  setEndTimeSignature(timeSpec: string, customPadding?: number): this {\n    this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n    return this;\n  }\n\n  /**\n   * Add a key signature to the stave.\n   *\n   * Example:\n   * `stave.addKeySignature('Db');`\n   * @param keySpec new key specification `[A-G][b|#]?`\n   * @param cancelKeySpec\n   * @param position\n   * @returns\n   */\n  addKeySignature(keySpec: string, cancelKeySpec?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n    this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n    return this;\n  }\n\n  /**\n   * Add a clef to the stave.\n   *\n   * Example:\n   *\n   * stave.addClef('treble')\n   * @param clef clef (treble|bass|...) see {@link Clef.types}\n   * @param size\n   * @param annotation\n   * @param position\n   * @returns\n   */\n  addClef(clef: string, size?: string, annotation?: string, position?: number): this {\n    if (position === undefined || position === StaveModifierPosition.BEGIN) {\n      this.clef = clef;\n    } else if (position === StaveModifierPosition.END) {\n      this.endClef = clef;\n    }\n\n    this.addModifier(new Clef(clef, size, annotation), position);\n    return this;\n  }\n\n  addEndClef(clef: string, size?: string, annotation?: string): this {\n    this.addClef(clef, size, annotation, StaveModifierPosition.END);\n    return this;\n  }\n\n  /**\n   * Add a time signature to the stave\n   *\n   * Example:\n   *\n   * `stave.addTimeSignature('4/4');`\n   * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n   * @param customPadding\n   * @param position\n   * @returns\n   */\n  addTimeSignature(timeSpec: string, customPadding?: number, position?: number): this {\n    this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n    return this;\n  }\n\n  addEndTimeSignature(timeSpec: string, customPadding?: number): this {\n    this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n    return this;\n  }\n\n  // Deprecated\n  addTrebleGlyph(): this {\n    this.addClef('treble');\n    return this;\n  }\n\n  /**\n   * @param position\n   * @param category\n   * @returns array of StaveModifiers that match the provided position and category.\n   */\n  getModifiers(position?: number, category?: string): StaveModifier[] {\n    const noPosition = position === undefined;\n    const noCategory = category === undefined;\n    if (noPosition && noCategory) {\n      return this.modifiers;\n    } else if (noPosition) {\n      // A category was provided.\n      return this.modifiers.filter((m: StaveModifier) => category === m.getCategory());\n    } else if (noCategory) {\n      // A position was provided.\n      return this.modifiers.filter((m: StaveModifier) => position === m.getPosition());\n    } else {\n      // Both position and category were provided!\n      return this.modifiers.filter((m: StaveModifier) => position === m.getPosition() && category === m.getCategory());\n    }\n  }\n\n  /**\n   * Use the modifier's `getCategory()` as a key for the `order` array.\n   * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n   */\n  sortByCategory(items: StaveModifier[], order: Record<string, number>): void {\n    for (let i = items.length - 1; i >= 0; i--) {\n      for (let j = 0; j < i; j++) {\n        if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n          const temp = items[j];\n          items[j] = items[j + 1];\n          items[j + 1] = temp;\n        }\n      }\n    }\n  }\n\n  format(): void {\n    const begBarline = this.modifiers[0] as Barline;\n    const endBarline = this.modifiers[1];\n\n    const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n    const endModifiers = this.getModifiers(StaveModifierPosition.END);\n\n    this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n    this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n\n    if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n      begModifiers.push(begModifiers.splice(0, 1)[0]);\n      begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n    }\n\n    if (endModifiers.indexOf(endBarline) > 0) {\n      endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n    }\n\n    let width;\n    let padding;\n    let modifier;\n    let offset = 0;\n    let x = this.x;\n    for (let i = 0; i < begModifiers.length; i++) {\n      modifier = begModifiers[i];\n      padding = modifier.getPadding(i + offset);\n      width = modifier.getWidth();\n\n      x += padding;\n      modifier.setX(x);\n      x += width;\n\n      if (padding + width === 0) offset--;\n    }\n\n    this.start_x = x;\n    x = this.x + this.width;\n\n    const widths = {\n      left: 0,\n      right: 0,\n      paddingRight: 0,\n      paddingLeft: 0,\n    };\n\n    let lastBarlineIdx = 0;\n\n    for (let i = 0; i < endModifiers.length; i++) {\n      modifier = endModifiers[i];\n      lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n\n      widths.right = 0;\n      widths.left = 0;\n      widths.paddingRight = 0;\n      widths.paddingLeft = 0;\n      const layoutMetrics = modifier.getLayoutMetrics();\n\n      if (layoutMetrics) {\n        if (i !== 0) {\n          widths.right = layoutMetrics.xMax || 0;\n          widths.paddingRight = layoutMetrics.paddingRight || 0;\n        }\n        widths.left = -layoutMetrics.xMin || 0;\n        widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n\n        if (i === endModifiers.length - 1) {\n          widths.paddingLeft = 0;\n        }\n      } else {\n        widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n        if (i !== 0) {\n          widths.right = modifier.getWidth();\n        }\n        if (i === 0) {\n          widths.left = modifier.getWidth();\n        }\n      }\n      x -= widths.paddingRight;\n      x -= widths.right;\n\n      modifier.setX(x);\n\n      x -= widths.left;\n      x -= widths.paddingLeft;\n    }\n\n    this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n    this.formatted = true;\n  }\n\n  /**\n   * All drawing functions below need the context to be set.\n   */\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    ctx.openGroup('stave', this.getAttribute('id'));\n    if (!this.formatted) this.format();\n\n    const num_lines = this.options.num_lines;\n    const width = this.width;\n    const x = this.x;\n    let y;\n\n    // Render lines\n    for (let line = 0; line < num_lines; line++) {\n      y = this.getYForLine(line);\n\n      this.applyStyle();\n      if (this.options.line_config[line].visible) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + width, y);\n        ctx.stroke();\n      }\n      this.restoreStyle();\n    }\n\n    // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      // Only draw modifier if it has a draw function\n      if (typeof modifier.draw === 'function') {\n        modifier.applyStyle(ctx);\n        modifier.draw(this, this.getModifierXShift(i));\n        modifier.restoreStyle(ctx);\n      }\n    }\n\n    // Render measure numbers\n    if (this.measure > 0) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      const text_width = ctx.measureText('' + this.measure).width;\n      y = this.getYForTopText(0) + 3;\n      ctx.fillText('' + this.measure, this.x - text_width / 2, y);\n      ctx.restore();\n    }\n    ctx.closeGroup();\n    return this;\n  }\n\n  getVerticalBarWidth(): number {\n    return this.options.vertical_bar_width;\n  }\n\n  /**\n   * Get the current configuration for the Stave.\n   * @return {Array} An array of configuration objects.\n   */\n  getConfigForLines(): StaveLineConfig[] {\n    return this.options.line_config;\n  }\n\n  /**\n   * Configure properties of the lines in the Stave\n   * @param line_number The index of the line to configure.\n   * @param line_config An configuration object for the specified line.\n   * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n   *   range of the number of lines specified in the constructor.\n   */\n  setConfigForLine(line_number: number, line_config: StaveLineConfig): this {\n    if (line_number >= this.options.num_lines || line_number < 0) {\n      throw new RuntimeError(\n        'StaveConfigError',\n        'The line number must be within the range of the number of lines in the Stave.'\n      );\n    }\n\n    if (line_config.visible === undefined) {\n      throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n    }\n\n    if (typeof line_config.visible !== 'boolean') {\n      throw new RuntimeError(\n        'StaveConfigError',\n        \"The line configuration objects 'visible' property must be true or false.\"\n      );\n    }\n\n    this.options.line_config[line_number] = line_config;\n\n    return this;\n  }\n\n  /**\n   * Set the staff line configuration array for all of the lines at once.\n   * @param lines_configuration An array of line configuration objects.  These objects\n   *   are of the same format as the single one passed in to setLineConfiguration().\n   *   The caller can set null for any line config entry if it is desired that the default be used\n   * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n   *   exactly the same number of elements as the num_lines configuration object set in\n   *   the constructor.\n   */\n  setConfigForLines(lines_configuration: StaveLineConfig[]): this {\n    if (lines_configuration.length !== this.options.num_lines) {\n      throw new RuntimeError(\n        'StaveConfigError',\n        'The length of the lines configuration array must match the number of lines in the Stave'\n      );\n    }\n\n    // Make sure the defaults are present in case an incomplete set of\n    //  configuration options were supplied.\n    // eslint-disable-next-line\n    for (const line_config in lines_configuration) {\n      // Allow '{}' to be used if the caller just wants the default for a particular node.\n      if (lines_configuration[line_config].visible == undefined) {\n        lines_configuration[line_config] = this.options.line_config[line_config];\n      }\n      this.options.line_config[line_config] = {\n        ...this.options.line_config[line_config],\n        ...lines_configuration[line_config],\n      };\n    }\n\n    this.options.line_config = lines_configuration;\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Tables } from './tables';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nfunction drawBoldDoubleLine(ctx: RenderContext, type: number, topX: number, topY: number, botY: number) {\n  if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n  }\n\n  let x_shift = 3;\n  let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n  const thickLineOffset = 2; // For aesthetics\n\n  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    x_shift = -5; // Flips the side of the thin line\n    variableWidth = 3;\n  }\n\n  // Thin line\n  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n  // Thick line\n  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n  static get CATEGORY(): string {\n    return 'StaveConnector';\n  }\n\n  protected thickness: number;\n  protected width: number;\n  protected font: FontInfo;\n  protected texts: {\n    content: string;\n    options: {\n      shift_x: number;\n      shift_y: number;\n    };\n  }[];\n\n  protected type: number;\n  protected x_shift: number;\n  protected top_stave: Stave;\n  protected bottom_stave: Stave;\n\n  /**\n   * SINGLE_LEFT and SINGLE are the same value for compatibility\n   * with older versions of vexflow which didn't have right sided\n   * stave connectors.\n   */\n  static readonly type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n  };\n\n  /**\n   * Connector type:\n   * * \"singleRight\"\n   * * \"singleLeft\"\n   * * \"single\"\n   * * \"double\"\n   * * \"brace\"\n   * * \"bracket\"\n   * * \"boldDoubleLeft\"\n   * * \"boldDoubleRight\"\n   * * \"thinDouble\"\n   * * \"none\"\n   */\n  static readonly typeString: Record<string, number> = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n  };\n\n  constructor(top_stave: Stave, bottom_stave: Stave) {\n    super();\n\n    this.thickness = Tables.STAVE_LINE_THICKNESS;\n    this.width = 3;\n    this.top_stave = top_stave;\n    this.bottom_stave = bottom_stave;\n    this.type = StaveConnector.type.DOUBLE;\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n    // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n    // 2. Offset BRACE type not to overlap with another StaveConnector\n    this.x_shift = 0;\n    this.texts = [];\n  }\n\n  /**\n   * Set type.\n   * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n   */\n  setType(type: number | string): this {\n    type = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n\n    if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  /** Set optional associated Text. */\n  setText(text: string, options: { shift_x?: number; shift_y?: number } = {}): this {\n    this.texts.push({\n      content: text,\n      options: {\n        shift_x: 0,\n        shift_y: 0,\n        ...options,\n      },\n    });\n    return this;\n  }\n\n  /** Set connector x shift. */\n  setXShift(x_shift: number): this {\n    if (typeof x_shift !== 'number') {\n      throw new RuntimeError('InvalidType', 'x_shift must be a Number');\n    }\n\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  /** Render connector and associated text. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let topY = this.top_stave.getYForLine(0);\n    let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n    let width = this.width;\n    let topX = this.top_stave.getX();\n\n    const isRightSidedConnector =\n      this.type === StaveConnector.type.SINGLE_RIGHT ||\n      this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n      this.type === StaveConnector.type.THIN_DOUBLE;\n\n    if (isRightSidedConnector) {\n      topX = this.top_stave.getX() + this.top_stave.getWidth();\n    }\n\n    let attachment_height = botY - topY;\n    switch (this.type) {\n      case StaveConnector.type.SINGLE:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_LEFT:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_RIGHT:\n        width = 1;\n        break;\n      case StaveConnector.type.DOUBLE:\n        topX -= this.width + 2;\n        topY -= this.thickness;\n        attachment_height += 0.5;\n        break;\n      case StaveConnector.type.BRACE: {\n        width = 12;\n        // May need additional code to draw brace\n        const x1 = this.top_stave.getX() - 2 + this.x_shift;\n        const y1 = topY;\n        const x3 = x1;\n        const y3 = botY;\n        const x2 = x1 - width;\n        const y2 = y1 + attachment_height / 2.0;\n        const cpx1 = x2 - 0.9 * width;\n        const cpy1 = y1 + 0.2 * attachment_height;\n        const cpx2 = x1 + 1.1 * width;\n        const cpy2 = y2 - 0.135 * attachment_height;\n        const cpx3 = cpx2;\n        const cpy3 = y2 + 0.135 * attachment_height;\n        const cpx4 = cpx1;\n        const cpy4 = y3 - 0.2 * attachment_height;\n        const cpx5 = x2 - width;\n        const cpy5 = cpy4;\n        const cpx6 = x1 + 0.4 * width;\n        const cpy6 = y2 + 0.135 * attachment_height;\n        const cpx7 = cpx6;\n        const cpy7 = y2 - 0.135 * attachment_height;\n        const cpx8 = cpx5;\n        const cpy8 = cpy1;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n        ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n        ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n        ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n        ctx.fill();\n        ctx.stroke();\n        break;\n      }\n      case StaveConnector.type.BRACKET:\n        topY -= 6;\n        botY += 6;\n        attachment_height = botY - topY;\n        Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n        Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n        topX -= this.width + 2;\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_LEFT:\n        drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n        drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.THIN_DOUBLE:\n        width = 1;\n        attachment_height -= this.thickness;\n        break;\n      case StaveConnector.type.NONE:\n        break;\n      default:\n        throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n    }\n\n    if (\n      this.type !== StaveConnector.type.BRACE &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n      this.type !== StaveConnector.type.NONE\n    ) {\n      ctx.fillRect(topX, topY, width, attachment_height);\n    }\n\n    // If the connector is a thin double barline, draw the paralell line\n    if (this.type === StaveConnector.type.THIN_DOUBLE) {\n      ctx.fillRect(topX - 3, topY, width, attachment_height);\n    }\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Add stave connector text\n    for (let i = 0; i < this.texts.length; i++) {\n      const text = this.texts[i];\n      const text_width = ctx.measureText('' + text.content).width;\n      const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n      const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n\n      ctx.fillText('' + text.content, x, y + 4);\n    }\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Beam } from './beam';\nimport { BoundingBox } from './boundingbox';\nimport { Fraction } from './fraction';\nimport { ModifierContext } from './modifiercontext';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { Tickable } from './tickable';\nimport { TickContext } from './tickcontext';\nimport { isNote, isStaveNote } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\nimport { Voice } from './voice';\n\ninterface Distance {\n  maxNegativeShiftPx: number;\n  expectedDistance: number;\n  fromTickable?: Tickable;\n  errorPx?: number;\n  fromTickablePx?: number;\n}\n\nexport interface FormatterOptions {\n  /** Defaults to 100. */\n  softmaxFactor?: number;\n\n  /** Defaults to `false`. */\n  globalSoftmax?: boolean;\n\n  /** Defaults to 5. */\n  maxIterations?: number;\n}\n\nexport interface FormatOptions {\n  align_rests?: boolean;\n  padding?: number;\n  stave?: Stave;\n  context?: RenderContext;\n  auto_beam?: boolean;\n}\n\nexport interface AlignmentContexts<T> {\n  list: number[];\n  map: Record<number, T>;\n  array: T[];\n  resolutionMultiplier: number;\n}\n\ntype addToContextFn<T> = (tickable: Tickable, context: T, voiceIndex: number) => void;\ntype makeContextFn<T> = (tick?: { tickID: number }) => T;\n\n// Helper function\nconst sumArray = (arr: number[]) => arr.reduce((a, b) => a + b, 0);\n\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts<T>(\n  voices: Voice[],\n  makeContext: makeContextFn<T>,\n  addToContext: addToContextFn<T>\n): AlignmentContexts<T> {\n  const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n\n  // Initialize tick maps.\n  const tickToContextMap: Record<number, T> = {};\n  const tickList: number[] = [];\n  const contexts: T[] = [];\n\n  // For each voice, extract notes and create a context for every\n  // new tick that hasn't been seen before.\n  voices.forEach((voice, voiceIndex) => {\n    // Use resolution multiplier as denominator so that no additional expansion\n    // of fractional tick values is needed.\n    const ticksUsed = new Fraction(0, resolutionMultiplier);\n\n    voice.getTickables().forEach((tickable) => {\n      const integerTicks = ticksUsed.numerator;\n\n      // If we have no tick context for this tick, create one.\n      if (!tickToContextMap[integerTicks]) {\n        const newContext = makeContext({ tickID: integerTicks });\n        contexts.push(newContext);\n        tickToContextMap[integerTicks] = newContext;\n        // Maintain a list of unique integerTicks.\n        tickList.push(integerTicks);\n      }\n\n      // Add this tickable to the TickContext.\n      addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n      ticksUsed.add(tickable.getTicks());\n    });\n  });\n\n  return {\n    map: tickToContextMap,\n    array: contexts,\n    list: tickList.sort((a, b) => a - b),\n    resolutionMultiplier,\n  };\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Formatter.DEBUG) log('Vex.Flow.Formatter', args);\n}\n\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(\n  notes: Tickable[],\n  currRestLine: number,\n  currNoteIndex: number,\n  compare: boolean\n): number {\n  // If no valid next note group, nextRestLine is same as current.\n  let nextRestLine = currRestLine;\n\n  // Start with the next note and keep going until we find a valid non-rest note group.\n  for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n    const note = notes[noteIndex];\n    if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n      nextRestLine = note.getLineForRest();\n      break;\n    }\n  }\n\n  // Locate the mid point between two lines.\n  if (compare && currRestLine !== nextRestLine) {\n    const top = Math.max(currRestLine, nextRestLine);\n    const bot = Math.min(currRestLine, nextRestLine);\n    nextRestLine = midLine(top, bot);\n  }\n  return nextRestLine;\n}\n\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n  // To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\n  static DEBUG: boolean;\n  protected hasMinTotalWidth: boolean;\n  protected minTotalWidth: number;\n  protected contextGaps: {\n    total: number;\n    gaps: { x1: number; x2: number }[];\n  };\n  protected justifyWidth: number;\n  protected totalCost: number;\n  protected totalShift: number;\n  protected tickContexts?: AlignmentContexts<TickContext>;\n  protected formatterOptions: Required<FormatterOptions>;\n  protected modifierContexts?: AlignmentContexts<ModifierContext>;\n  protected voices: Voice[];\n  protected lossHistory: number[];\n  protected durationStats: Record<string, { mean: number; count: number }>;\n\n  /**\n   * Helper function to layout \"notes\" one after the other without\n   * regard for proportions. Useful for tests and debugging.\n   */\n  static SimpleFormat(notes: Tickable[], x = 0, { paddingBetween = 10 } = {}): void {\n    notes.reduce((accumulator, note) => {\n      note.addToModifierContext(new ModifierContext());\n      const tick = new TickContext().addTickable(note).preFormat();\n      const metrics = tick.getMetrics();\n      tick.setX(accumulator + metrics.totalLeftPx);\n\n      return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n    }, x);\n  }\n\n  /** Helper function to plot formatter debug info. */\n  static plotDebugging(\n    ctx: RenderContext,\n    formatter: Formatter,\n    xPos: number,\n    y1: number,\n    y2: number,\n    options?: { stavePadding: number }\n  ): void {\n    options = {\n      stavePadding: Tables.DEFAULT_FONT_STACK[0].lookupMetric('stave.padding'),\n      ...options,\n    };\n\n    const x = xPos + options.stavePadding;\n    const contextGaps = formatter.contextGaps;\n\n    function stroke(x1: number, x2: number, color: string) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(1);\n      ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n    }\n\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n\n    contextGaps.gaps.forEach((gap) => {\n      stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n      ctx.setFillStyle('green');\n      ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n    });\n\n    ctx.setFillStyle('red');\n    ctx.fillText(\n      `Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(\n        2\n      )} Gap: ${contextGaps.total.toFixed(2)}`,\n      x - 20,\n      y2 + 27\n    );\n    ctx.restore();\n  }\n\n  /**\n   * Helper function to format and draw a single voice. Returns a bounding\n   * box for the notation.\n   * @param ctx  the rendering context\n   * @param stave the stave to which to draw (`Stave` or `TabStave`)\n   * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n   * @param params one of below:\n   *    * Setting `autobeam` only `(context, stave, notes, true)` or\n   *      `(ctx, stave, notes, {autobeam: true})`\n   *    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n   *    * Setting both a struct is needed `(context, stave, notes, {\n   *      autobeam: true, align_rests: true})`\n   *    * `autobeam` automatically generates beams for the notes.\n   *    * `align_rests` aligns rests with nearby notes.\n   */\n  static FormatAndDraw(\n    ctx: RenderContext,\n    stave: Stave,\n    notes: StemmableNote[],\n    params?: FormatOptions | boolean\n  ): BoundingBox | undefined {\n    let options = {\n      auto_beam: false,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      options = { ...options, ...params };\n    } else if (typeof params === 'boolean') {\n      options.auto_beam = params;\n    }\n\n    // Start by creating a voice and adding all the notes to it.\n    const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Then create beams, if requested.\n    const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n\n    // Instantiate a `Formatter` and format the notes.\n    new Formatter()\n      .joinVoices([voice]) // , { align_rests: options.align_rests })\n      .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n\n    // Render the voice and beams to the stave.\n    voice.setStave(stave).draw(ctx, stave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Return the bounding box of the voice.\n    return voice.getBoundingBox();\n  }\n\n  /**\n   * Helper function to format and draw aligned tab and stave notes in two\n   * separate staves.\n   * @param ctx the rendering context\n   * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n   * @param stave a `Stave` instance on which to render `Note`s.\n   * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n   * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n   * @param autobeam automatically generate beams.\n   * @param params a configuration object:\n   *    * `autobeam` automatically generates beams for the notes.\n   *    * `align_rests` aligns rests with nearby notes.\n   */\n  static FormatAndDrawTab(\n    ctx: RenderContext,\n    tabstave: TabStave,\n    stave: Stave,\n    tabnotes: TabNote[],\n    notes: Tickable[],\n    autobeam: boolean,\n    params: FormatOptions\n  ): void {\n    let opts = {\n      auto_beam: autobeam,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      opts = { ...opts, ...params };\n    } else if (typeof params === 'boolean') {\n      opts.auto_beam = params;\n    }\n\n    // Create a `4/4` voice for `notes`.\n    const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Create a `4/4` voice for `tabnotes`.\n    const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n\n    // Then create beams, if requested.\n    const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n\n    // Instantiate a `Formatter` and align tab and stave notes.\n    new Formatter()\n      .joinVoices([notevoice]) // , { align_rests: opts.align_rests })\n      .joinVoices([tabvoice])\n      .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n\n    // Render voices and beams to staves.\n    notevoice.draw(ctx, stave);\n    tabvoice.draw(ctx, tabstave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Draw a connector between tab and note staves.\n    new StaveConnector(stave, tabstave).setContext(ctx).draw();\n  }\n\n  /**\n   * Automatically set the vertical position of rests based on previous/next note positions.\n   * @param tickables an array of Tickables.\n   * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n   * @param alignTuplets If `false`, ignores tuplets.\n   */\n  static AlignRestsToNotes(tickables: Tickable[], alignAllNotes: boolean, alignTuplets?: boolean): void {\n    tickables.forEach((currTickable: Tickable, index: number) => {\n      if (isStaveNote(currTickable) && currTickable.isRest()) {\n        if (currTickable.getTuplet() && !alignTuplets) {\n          return;\n        }\n\n        // If activated rests not on default can be rendered as specified.\n        const position = currTickable.getGlyph().position.toUpperCase();\n        if (position !== 'R/4' && position !== 'B/4') {\n          return;\n        }\n\n        if (alignAllNotes || currTickable.getBeam()) {\n          // Align rests with previous/next notes.\n          const props = currTickable.getKeyProps()[0];\n          if (index === 0) {\n            props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n          } else if (index > 0 && index < tickables.length) {\n            // If previous tickable is a rest, use its line number.\n            const prevTickable = tickables[index - 1];\n            if (isStaveNote(prevTickable)) {\n              if (prevTickable.isRest()) {\n                props.line = prevTickable.getKeyProps()[0].line;\n              } else {\n                const restLine = prevTickable.getLineForRest();\n                // Get the rest line for next valid non-rest note group.\n                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n              }\n            }\n          }\n          currTickable.setKeyLine(0, props.line);\n        }\n      }\n    });\n  }\n\n  constructor(options?: FormatterOptions) {\n    this.formatterOptions = {\n      globalSoftmax: false,\n      softmaxFactor: 100,\n      maxIterations: 5,\n      ...options,\n    };\n    this.justifyWidth = 0;\n    this.totalCost = 0;\n    this.totalShift = 0;\n    this.durationStats = {};\n\n    // Minimum width required to render all the notes in the voices.\n    this.minTotalWidth = 0;\n\n    // This is set to `true` after `minTotalWidth` is calculated.\n    this.hasMinTotalWidth = false;\n\n    // Arrays of tick and modifier contexts.\n    this.tickContexts = undefined;\n    this.modifierContexts = undefined;\n\n    // Gaps between contexts, for free movement of notes post\n    // formatting.\n    this.contextGaps = {\n      total: 0,\n      gaps: [],\n    };\n\n    this.voices = [];\n    this.lossHistory = [];\n  }\n\n  /**\n   * Find all the rests in each of the `voices` and align them to neighboring notes.\n   *\n   * @param voices\n   * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n   */\n  alignRests(voices: Voice[], alignAllNotes: boolean): void {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format rests');\n    }\n\n    voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n  }\n\n  /**\n   * Estimate the width required to render 'voices'.  This is done by:\n   * 1. Sum the widths of all the tick contexts\n   * 2. Estimate the padding.\n   * The latter is done by calculating the padding 3 different ways, and taking the\n   * greatest value:\n   * 1. the padding required for unaligned notes in different voices\n   * 2. the padding based on the stddev of the tickable widths\n   * 3. the padding based on the stddev of the tickable durations.\n   *\n   * The last 2 quantities estimate a 'width entropy', where notes might need more\n   * room than the proportional formatting gives them.  A measure of all same duration\n   * and width will need no extra padding, and all these quantities will be\n   * zero in that case.\n   *\n   * @param voices the voices that contain the notes\n   * @returns the estimated width in pixels\n   */\n  preCalculateMinTotalWidth(voices: Voice[]): number {\n    const unalignedPadding = Tables.DEFAULT_FONT_STACK[0].lookupMetric('stave.unalignedNotePadding');\n    // Calculate additional padding based on 3 methods:\n    // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n    let unalignedCtxCount = 0;\n    let wsum = 0;\n    let dsum = 0;\n    const widths: number[] = [];\n    const durations: number[] = [];\n\n    // Cache results.\n    if (this.hasMinTotalWidth) return this.minTotalWidth;\n\n    // Create tick contexts if not already created.\n    if (!this.tickContexts) {\n      if (!voices) {\n        throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n      }\n\n      this.createTickContexts(voices);\n    }\n\n    // eslint-disable-next-line\n    const { list: contextList, map: contextMap } = this.tickContexts!;\n    this.minTotalWidth = 0;\n\n    // Go through each tick context and calculate total width,\n    // and also accumulate values used in padding hints\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n      context.preFormat();\n      // If this TC doesn't have all the voices on it, it's unaligned.\n      // so increment the unaligned padding accumulator\n      if (context.getTickables().length < voices.length) {\n        unalignedCtxCount += 1;\n      }\n      // Calculate the 'width entropy' over all the Tickables.\n      context.getTickables().forEach((t: Tickable) => {\n        wsum += t.getMetrics().width;\n        dsum += t.getTicks().value();\n        widths.push(t.getMetrics().width);\n        durations.push(t.getTicks().value());\n      });\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n    });\n\n    this.hasMinTotalWidth = true;\n    // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n    const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n    const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n    const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n\n    const davg = dsum / durations.length;\n    const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n    const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n\n    // Find max of 3 methods pad the width with that\n    const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n    const unalignedPad = unalignedPadding * unalignedCtxCount;\n\n    return this.minTotalWidth + Math.max(unalignedPad, padmax);\n  }\n\n  /**\n   * Get minimum width required to render all voices. Either `format` or\n   * `preCalculateMinTotalWidth` must be called before this method.\n   */\n  getMinTotalWidth(): number {\n    if (!this.hasMinTotalWidth) {\n      throw new RuntimeError(\n        'NoMinTotalWidth',\n        \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\"\n      );\n    }\n\n    return this.minTotalWidth;\n  }\n\n  /** Calculate the resolution multiplier for `voices`. */\n  static getResolutionMultiplier(voices: Voice[]): number {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format');\n    }\n    const totalTicks = voices[0].getTotalTicks();\n    const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n      if (!voice.getTotalTicks().equals(totalTicks)) {\n        throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n      }\n\n      if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n        throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n      }\n\n      return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n    }, 1);\n    return resolutionMultiplier;\n  }\n\n  /** Create a `ModifierContext` for each tick in `voices`. */\n  createModifierContexts(voices: Voice[]): AlignmentContexts<ModifierContext> {\n    const fn: addToContextFn<ModifierContext> = (tickable: Tickable, context: ModifierContext) =>\n      tickable.addToModifierContext(context);\n    const contexts = createContexts(voices, () => new ModifierContext(), fn);\n    this.modifierContexts = contexts;\n    return contexts;\n  }\n\n  /**\n   * Create a `TickContext` for each tick in `voices`. Also calculate the\n   * total number of ticks in voices.\n   */\n  createTickContexts(voices: Voice[]): AlignmentContexts<TickContext> {\n    const fn: addToContextFn<TickContext> = (tickable: Tickable, context: TickContext, voiceIndex: number) =>\n      context.addTickable(tickable, voiceIndex);\n    const contexts = createContexts(voices, (tick?: { tickID: number }) => new TickContext(tick), fn);\n    this.tickContexts = contexts;\n    const contextArray = this.tickContexts.array;\n\n    contextArray.forEach((context) => {\n      context.tContexts = contextArray;\n    });\n    return contexts;\n  }\n\n  /**\n   * This is the core formatter logic. Format voices and justify them\n   * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n   * that can't retreive widths without a canvas. This method sets the `x` positions\n   * of all the tickables/notes in the formatter.\n   */\n  preFormat(justifyWidth = 0, renderingContext?: RenderContext, voicesParam?: Voice[], stave?: Stave): number {\n    // Initialize context maps.\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n    }\n\n    const { list: contextList, map: contextMap } = contexts;\n\n    // Reset loss history for evaluator.\n    this.lossHistory = [];\n\n    // If voices and a stave were provided, set the Stave for each voice\n    // and preFormat to apply Y values to the notes;\n    if (voicesParam && stave) {\n      voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n    }\n\n    // Now distribute the ticks to each tick context, and assign them their\n    // own X positions.\n    let x = 0;\n    let shift = 0;\n    this.minTotalWidth = 0;\n    let totalTicks = 0;\n\n    // Pass 1: Give each note maximum width requested by context.\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n\n      // Make sure that all tickables in this context have calculated their\n      // space requirements.\n      context.preFormat();\n\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n\n      const maxTicks = context.getMaxTicks().value();\n      totalTicks += maxTicks;\n\n      const metrics = context.getMetrics();\n      x = x + shift + metrics.totalLeftPx;\n      context.setX(x);\n\n      // Calculate shift for the next tick.\n      shift = width - metrics.totalLeftPx;\n    });\n\n    // Use softmax based on all notes across all staves. (options.globalSoftmax)\n    const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n\n    const exp = (tick: number) => softmaxFactor ** (contextMap[tick].getMaxTicks().value() / totalTicks);\n    const expTicksUsed = sumArray(contextList.map(exp));\n\n    this.minTotalWidth = x + shift;\n    this.hasMinTotalWidth = true;\n\n    // No justification needed. End formatting.\n    if (justifyWidth <= 0) return this.evaluate();\n\n    // Start justification. Subtract the right extra pixels of the final context because the formatter\n    // justifies based on the context's X position, which is the left-most part of the note head.\n    const firstContext = contextMap[contextList[0]];\n    const lastContext = contextMap[contextList[contextList.length - 1]];\n\n    // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n    // the softmax of the ticks.\n    function calculateIdealDistances(adjustedJustifyWidth: number): Distance[] {\n      const distances: Distance[] = contextList.map((tick: number, i: number) => {\n        const context: TickContext = contextMap[tick];\n        const voices = context.getTickablesByVoice();\n        let backTickable: Tickable | undefined;\n        if (i > 0) {\n          const prevContext: TickContext = contextMap[contextList[i - 1]];\n          // Go through each tickable and search backwards for another tickable\n          // in the same voice. If found, use that duration (ticks) to calculate\n          // the expected distance.\n          for (let j = i - 1; j >= 0; j--) {\n            const backTick: TickContext = contextMap[contextList[j]];\n            const backVoices = backTick.getTickablesByVoice();\n\n            // Look for matching voices between tick contexts.\n            const matchingVoices: string[] = [];\n            Object.keys(voices).forEach((v) => {\n              if (backVoices[v]) {\n                matchingVoices.push(v);\n              }\n            });\n\n            if (matchingVoices.length > 0) {\n              // Found matching voices, get largest duration\n              let maxTicks = 0;\n              let maxNegativeShiftPx = Infinity;\n              let expectedDistance = 0;\n\n              matchingVoices.forEach((v) => {\n                const ticks = backVoices[v].getTicks().value();\n                if (ticks > maxTicks) {\n                  backTickable = backVoices[v];\n                  maxTicks = ticks;\n                }\n\n                // Calculate the limits of the shift based on modifiers, etc.\n                const thisTickable = voices[v];\n                const insideLeftEdge =\n                  thisTickable.getX() -\n                  (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n\n                const backMetrics = backVoices[v].getMetrics();\n                const insideRightEdge =\n                  backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n\n                // Don't allow shifting if notes in the same voice can collide\n                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n              });\n\n              // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n              // so that two different tick contexts don't align across staves.\n              maxNegativeShiftPx = Math.min(\n                maxNegativeShiftPx,\n                context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05)\n              );\n\n              // Calculate the expected distance of the current context from the last matching tickable. The\n              // distance is scaled down by the softmax for the voice.\n              if (globalSoftmax) {\n                const t = totalTicks;\n                expectedDistance = (softmaxFactor ** (maxTicks / t) / expTicksUsed) * adjustedJustifyWidth;\n              } else if (typeof backTickable !== 'undefined') {\n                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n              }\n              return {\n                expectedDistance,\n                maxNegativeShiftPx,\n                fromTickable: backTickable,\n              };\n            }\n          }\n        }\n\n        return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n      });\n      return distances;\n    }\n\n    function shiftToIdealDistances(idealDistances: Distance[]): number {\n      // Distribute ticks to the contexts based on the calculated distance error.\n      const centerX = adjustedJustifyWidth / 2;\n      let spaceAccum = 0;\n\n      contextList.forEach((tick, index) => {\n        const context = contextMap[tick];\n        if (index > 0) {\n          const contextX = context.getX();\n          const ideal = idealDistances[index];\n          const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n\n          let negativeShiftPx = 0;\n          if (errorPx > 0) {\n            spaceAccum += errorPx;\n          } else if (errorPx < 0) {\n            negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n            spaceAccum += -negativeShiftPx;\n          }\n          context.setX(contextX + spaceAccum);\n        }\n        // Move center aligned tickables to middle\n        context.getCenterAlignedTickables().forEach((tickable: Tickable) => {\n          tickable.setCenterXShift(centerX - context.getX());\n        });\n      });\n\n      return lastContext.getX() - firstContext.getX();\n    }\n\n    const adjustedJustifyWidth =\n      justifyWidth -\n      lastContext.getMetrics().notePx -\n      lastContext.getMetrics().totalRightPx -\n      firstContext.getMetrics().totalLeftPx;\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');\n    const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');\n    let targetWidth = adjustedJustifyWidth;\n    const distances = calculateIdealDistances(targetWidth);\n    let actualWidth = shiftToIdealDistances(distances);\n    // Calculate right justification by finding max of (configured value, min distance between tickables)\n    // so measures with lots of white space use it evenly, and crowded measures use at least the configured\n    // space\n    const calcMinDistance = (targetWidth: number, distances: Distance[]) => {\n      let mdCalc = targetWidth / 2;\n      if (distances.length > 1) {\n        for (let di = 1; di < distances.length; ++di) {\n          mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n        }\n      }\n      return mdCalc;\n    };\n    const minDistance = calcMinDistance(targetWidth, distances);\n\n    // Just one context. Done formatting.\n    if (contextList.length === 1) return 0;\n\n    // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n    // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n    // existing visual regression tests.\n    const paddingMax = configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n    const paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n    const maxX = adjustedJustifyWidth - paddingMin;\n\n    let iterations = maxIterations;\n    // Adjust justification width until the right margin is as close as possible to the calculated padding,\n    // without going over\n    while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n      targetWidth -= actualWidth - maxX;\n      actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n      iterations--;\n    }\n\n    this.justifyWidth = justifyWidth;\n    return this.evaluate();\n  }\n\n  /** Calculate the total cost of this formatting decision. */\n  evaluate(): number {\n    if (!this.tickContexts) return 0;\n    const contexts = this.tickContexts;\n    const justifyWidth = this.justifyWidth;\n    // Calculate available slack per tick context. This works out how much freedom\n    // to move a context has in either direction, without affecting other notes.\n    this.contextGaps = { total: 0, gaps: [] };\n    contexts.list.forEach((tick, index) => {\n      if (index === 0) return;\n      const prevTick = contexts.list[index - 1];\n      const prevContext = contexts.map[prevTick];\n      const context = contexts.map[tick];\n      const prevMetrics = prevContext.getMetrics();\n      const currMetrics = context.getMetrics();\n\n      // Calculate X position of right edge of previous note\n      const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n      // Calculate X position of left edge of current note\n      const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n      const gap = insideLeftEdge - insideRightEdge;\n      this.contextGaps.total += gap;\n      this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n\n      // Tell the tick contexts how much they can reposition themselves.\n      context.getFormatterMetrics().freedom.left = gap;\n      prevContext.getFormatterMetrics().freedom.right = gap;\n    });\n\n    // Calculate mean distance in each voice for each duration type, then calculate\n    // how far each note is from the mean.\n    this.durationStats = {};\n    const durationStats = this.durationStats;\n\n    function updateStats(duration: string, space: number) {\n      const stats = durationStats[duration];\n      if (stats === undefined) {\n        durationStats[duration] = { mean: space, count: 1 };\n      } else {\n        stats.count += 1;\n        stats.mean = (stats.mean + space) / 2;\n      }\n    }\n\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note, i, notes) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getMetrics();\n        const formatterMetrics = note.getFormatterMetrics();\n        const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n        let space = 0;\n\n        if (i < notes.length - 1) {\n          const rightNote = notes[i + 1];\n          const rightMetrics = rightNote.getMetrics();\n          const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n\n          space = rightNoteEdge - leftNoteEdge;\n          formatterMetrics.space.used = rightNote.getX() - note.getX();\n          rightNote.getFormatterMetrics().freedom.left = space;\n        } else {\n          space = justifyWidth - leftNoteEdge;\n          formatterMetrics.space.used = justifyWidth - note.getX();\n        }\n\n        formatterMetrics.freedom.right = space;\n        updateStats(duration, formatterMetrics.space.used);\n      });\n    });\n\n    // Calculate how much each note deviates from the mean. Loss function is square\n    // root of the sum of squared deviations.\n    let totalDeviation = 0;\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getFormatterMetrics();\n\n        metrics.space.mean = durationStats[duration].mean;\n        metrics.duration = duration;\n        metrics.iterations += 1;\n        metrics.space.deviation = metrics.space.used - metrics.space.mean;\n\n        totalDeviation += metrics.space.deviation ** 2;\n      });\n    });\n\n    this.totalCost = Math.sqrt(totalDeviation);\n    this.lossHistory.push(this.totalCost);\n    return this.totalCost;\n  }\n\n  /**\n   * Run a single iteration of rejustification. At a high level, this method calculates\n   * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n   * attempt to reduce the cost. You can call this method multiple times until it finds\n   * and oscillates around a global minimum.\n   * @param alpha the \"learning rate\" for the formatter. It determines how much of a shift\n   * the formatter should make based on its cost function.\n   */\n  tune(options?: { alpha?: number }): number {\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      return 0;\n    }\n\n    const alpha = options?.alpha ?? 0.5;\n\n    // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n    // on adjacent tickcontexts.\n    function move(current: TickContext, shift: number, prev?: TickContext, next?: TickContext) {\n      current.setX(current.getX() + shift);\n      current.getFormatterMetrics().freedom.left += shift;\n      current.getFormatterMetrics().freedom.right -= shift;\n\n      if (prev) prev.getFormatterMetrics().freedom.right += shift;\n      if (next) next.getFormatterMetrics().freedom.left -= shift;\n    }\n\n    let shift = 0;\n    this.totalShift = 0;\n    contexts.list.forEach((tick, index, list) => {\n      const context = contexts.map[tick];\n      const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n      const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n\n      move(context, shift, prevContext, nextContext);\n\n      const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n\n      if (cost > 0) {\n        shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n      } else if (cost < 0) {\n        if (nextContext) {\n          shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n        } else {\n          shift = 0;\n        }\n      }\n\n      shift *= alpha;\n      this.totalShift += shift;\n    });\n\n    return this.evaluate();\n  }\n\n  /**\n   * This is the top-level call for all formatting logic completed\n   * after `x` *and* `y` values have been computed for the notes\n   * in the voices.\n   */\n  postFormat(): this {\n    const postFormatContexts = (contexts: AlignmentContexts<ModifierContext> | AlignmentContexts<TickContext>) =>\n      contexts.list.forEach((tick) => contexts.map[tick].postFormat());\n\n    if (this.modifierContexts) postFormatContexts(this.modifierContexts);\n    if (this.tickContexts) postFormatContexts(this.tickContexts);\n\n    return this;\n  }\n\n  /**\n   * Take all `voices` and create `ModifierContext`s out of them. This tells\n   * the formatters that the voices belong on a single stave.\n   */\n  joinVoices(voices: Voice[]): this {\n    this.createModifierContexts(voices);\n    this.hasMinTotalWidth = false;\n    return this;\n  }\n\n  /**\n   * Align rests in voices, justify the contexts, and position the notes\n   * so voices are aligned and ready to render onto the stave. This method\n   * mutates the `x` positions of all tickables in `voices`.\n   *\n   * Voices are full justified to fit in `justifyWidth` pixels.\n   *\n   * Set `options.context` to the rendering context. Set `options.align_rests`\n   * to true to enable rest alignment.\n   */\n  format(voices: Voice[], justifyWidth?: number, options?: FormatOptions): this {\n    const opts = {\n      align_rests: false,\n      ...options,\n    };\n\n    this.voices = voices;\n    const softmaxFactor = this.formatterOptions.softmaxFactor;\n    if (softmaxFactor) {\n      this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n    }\n\n    this.alignRests(voices, opts.align_rests);\n    this.createTickContexts(voices);\n    this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n\n    // Only postFormat if a stave was supplied for y value formatting\n    if (opts.stave) this.postFormat();\n\n    return this;\n  }\n\n  // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n  formatToStave(voices: Voice[], stave: Stave, optionsParam?: FormatOptions): this {\n    const options: FormatOptions = { padding: 10, context: stave.getContext(), ...optionsParam };\n\n    // eslint-disable-next-line\n    const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n    L('Formatting voices to width: ', justifyWidth);\n    return this.format(voices, justifyWidth, options);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.num_notes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   num_notes: fit this many notes into...\n *   notes_occupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of num_notes : notes_occupied.\n *       num_notes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notes_occupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between num_notes and\n *     notes_occupied is greater than 1.\n *\n *   y_offset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\n\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { defined, RuntimeError } from './util';\n\nexport interface TupletOptions {\n  beats_occupied?: number;\n  bracketed?: boolean;\n  location?: number;\n  notes_occupied?: number;\n  num_notes?: number;\n  ratioed?: boolean;\n  y_offset?: number;\n}\n\nexport class Tuplet extends Element {\n  static get CATEGORY(): string {\n    return 'Tuplet';\n  }\n\n  notes: Note[];\n\n  protected options: TupletOptions;\n  protected num_notes: number;\n  protected point: number;\n\n  protected bracketed: boolean;\n  protected y_pos: number;\n  protected x_pos: number;\n  protected width: number;\n\n  // location is initialized by the constructor via setTupletLocation(...).\n  protected location!: number;\n\n  protected notes_occupied: number;\n  protected ratioed: boolean;\n  protected numerator_glyphs: Glyph[] = [];\n  protected denom_glyphs: Glyph[] = [];\n\n  static get LOCATION_TOP(): number {\n    return 1;\n  }\n  static get LOCATION_BOTTOM(): number {\n    return -1;\n  }\n  static get NESTING_OFFSET(): number {\n    return 15;\n  }\n\n  constructor(notes: Note[], options: TupletOptions = {}) {\n    super();\n    if (!notes || !notes.length) {\n      throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n    }\n\n    this.options = options;\n    this.notes = notes;\n    this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\n\n    // We accept beats_occupied, but warn that it's deprecated:\n    // the preferred property name is now notes_occupied.\n    if (this.options.beats_occupied) {\n      this.beatsOccupiedDeprecationWarning();\n    }\n    this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n    if (this.options.bracketed != undefined) {\n      this.bracketed = this.options.bracketed;\n    } else {\n      this.bracketed = notes.some((note) => !note.hasBeam());\n    }\n\n    this.ratioed =\n      this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n    this.point = this.musicFont.lookupMetric('digits.tupletPoint');\n    this.y_pos = 16;\n    this.x_pos = 100;\n    this.width = 200;\n\n    this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n\n    Formatter.AlignRestsToNotes(notes, true, true);\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  attach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.setTuplet(this);\n    }\n  }\n\n  detach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.resetTuplet(this);\n    }\n  }\n\n  /**\n   * Set whether or not the bracket is drawn.\n   */\n  setBracketed(bracketed: boolean): this {\n    this.bracketed = !!bracketed;\n    return this;\n  }\n\n  /**\n   * Set whether or not the ratio is shown.\n   */\n  setRatioed(ratioed: boolean): this {\n    this.ratioed = !!ratioed;\n    return this;\n  }\n\n  /**\n   * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n   */\n  setTupletLocation(location: number): this {\n    if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n      // eslint-disable-next-line\n      console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n      location = Tuplet.LOCATION_TOP;\n    }\n\n    this.location = location;\n    return this;\n  }\n\n  getNotes(): Note[] {\n    return this.notes;\n  }\n\n  getNoteCount(): number {\n    return this.num_notes;\n  }\n\n  beatsOccupiedDeprecationWarning(): void {\n    // eslint-disable-next-line\n    console.warn(\n      'beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.',\n      'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.'\n    );\n  }\n\n  getBeatsOccupied(): number {\n    this.beatsOccupiedDeprecationWarning();\n    return this.getNotesOccupied();\n  }\n\n  setBeatsOccupied(beats: number): void {\n    this.beatsOccupiedDeprecationWarning();\n    return this.setNotesOccupied(beats);\n  }\n\n  getNotesOccupied(): number {\n    return this.notes_occupied;\n  }\n\n  setNotesOccupied(notes: number): void {\n    this.detach();\n    this.notes_occupied = notes;\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  resolveGlyphs(): void {\n    this.numerator_glyphs = [];\n    let n = this.num_notes;\n    while (n >= 1) {\n      this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n\n    this.denom_glyphs = [];\n    n = this.notes_occupied;\n    while (n >= 1) {\n      this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n  }\n\n  // determine how many tuplets are nested within this tuplet\n  // on the same side (above/below), to calculate a y\n  // offset for this tuplet:\n  getNestedTupletCount(): number {\n    const location = this.location;\n    const first_note = this.notes[0];\n    let maxTupletCount = countTuplets(first_note, location);\n    let minTupletCount = countTuplets(first_note, location);\n\n    // Count the tuplets that are on the same side (above/below)\n    // as this tuplet:\n    function countTuplets(note: Note, location: number) {\n      return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n    }\n\n    this.notes.forEach((note) => {\n      const tupletCount = countTuplets(note, location);\n      maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n      minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n    });\n\n    return maxTupletCount - minTupletCount;\n  }\n\n  // determine the y position of the tuplet:\n  getYPosition(): number {\n    // offset the tuplet for any nested tuplets between\n    // it and the notes:\n    const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n\n    // offset the tuplet for any manual y_offset:\n    const y_offset = this.options.y_offset || 0;\n\n    // now iterate through the notes and find our highest\n    // or lowest locations, to form a base y_pos\n    const first_note = this.notes[0];\n    let y_pos;\n    if (this.location === Tuplet.LOCATION_TOP) {\n      y_pos = first_note.checkStave().getYForLine(0) - 15;\n      // y_pos = first_note.getStemExtents().topY - 10;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const top_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().topY - 10\n            : this.notes[i].getStemExtents().baseY - 20;\n\n        if (top_y < y_pos) {\n          y_pos = top_y;\n        }\n      }\n    } else {\n      y_pos = first_note.checkStave().getYForLine(4) + 20;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const bottom_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().baseY + 20\n            : this.notes[i].getStemExtents().topY + 10;\n        if (bottom_y > y_pos) {\n          y_pos = bottom_y;\n        }\n      }\n    }\n\n    return y_pos + nested_tuplet_y_offset + y_offset;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    // determine x value of left bound of tuplet\n    const first_note = this.notes[0] as StemmableNote;\n    const last_note = this.notes[this.notes.length - 1] as StemmableNote;\n\n    if (!this.bracketed) {\n      this.x_pos = first_note.getStemX();\n      this.width = last_note.getStemX() - this.x_pos;\n    } else {\n      this.x_pos = first_note.getTieLeftX() - 5;\n      this.width = last_note.getTieRightX() - this.x_pos + 5;\n    }\n\n    // determine y value for tuplet\n    this.y_pos = this.getYPosition();\n\n    const addGlyphWidth = (width: number, glyph: Glyph) => width + defined(glyph.getMetrics().width);\n\n    // calculate total width of tuplet notation\n    let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n    if (this.ratioed) {\n      width = this.denom_glyphs.reduce(addGlyphWidth, width);\n      width += this.point * 0.32;\n    }\n\n    const notation_center_x = this.x_pos + this.width / 2;\n    const notation_start_x = notation_center_x - width / 2;\n\n    // draw bracket if the tuplet is not beamed\n    if (this.bracketed) {\n      const line_width = this.width / 2 - width / 2 - 5;\n\n      // only draw the bracket if it has positive length\n      if (line_width > 0) {\n        ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n        ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n        ctx.fillRect(\n          this.x_pos,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n        ctx.fillRect(\n          this.x_pos + this.width,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n      }\n    }\n\n    // draw numerator glyphs\n    const shiftY = this.musicFont.lookupMetric('digits.shiftY', 0);\n\n    let x_offset = 0;\n    this.numerator_glyphs.forEach((glyph) => {\n      glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n      x_offset += defined(glyph.getMetrics().width);\n    });\n\n    // display colon and denominator if the ratio is to be shown\n    if (this.ratioed) {\n      const colon_x = notation_start_x + x_offset + this.point * 0.16;\n      const colon_radius = this.point * 0.06;\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      x_offset += this.point * 0.32;\n      this.denom_glyphs.forEach((glyph) => {\n        glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n        x_offset += defined(glyph.getMetrics().width);\n      });\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { isStaveNote, isTabNote } from 'typeguard';\n\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Tuplet } from './tuplet';\nimport { RuntimeError } from './util';\nimport { Voice } from './voice';\n\nfunction calculateStemDirection(notes: StemmableNote[]) {\n  let lineSum = 0;\n  notes.forEach((note) => {\n    if (note.keyProps) {\n      note.keyProps.forEach((keyProp) => {\n        lineSum += keyProp.line - 3;\n      });\n    }\n  });\n\n  if (lineSum >= 0) {\n    return Stem.DOWN;\n  }\n  return Stem.UP;\n}\n\nfunction getStemSlope(firstNote: StemmableNote, lastNote: StemmableNote) {\n  const firstStemTipY = firstNote.getStemExtents().topY;\n  const firstStemX = firstNote.getStemX();\n  const lastStemTipY = lastNote.getStemExtents().topY;\n  const lastStemX = lastNote.getStemX();\n  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\n\nconst BEAM_LEFT = 'L';\nconst BEAM_RIGHT = 'R';\nconst BEAM_BOTH = 'B';\n\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n  static get CATEGORY(): string {\n    return 'Beam';\n  }\n\n  public render_options: {\n    flat_beam_offset?: number;\n    flat_beams: boolean;\n    secondary_break_ticks?: number;\n    show_stemlets: boolean;\n    beam_width: number;\n    max_slope: number;\n    min_slope: number;\n    slope_iterations: number;\n    slope_cost: number;\n    stemlet_extension: number;\n    partial_beam_length: number;\n    min_flat_beam_offset: number;\n  };\n\n  notes: StemmableNote[];\n  postFormatted: boolean;\n  slope: number = 0;\n\n  private readonly stem_direction: number;\n  private readonly ticks: number;\n\n  private y_shift: number = 0;\n  private break_on_indices: number[];\n  private beam_count: number;\n  private unbeamable?: boolean;\n\n  /** Get the direction of the beam */\n  getStemDirection(): number {\n    return this.stem_direction;\n  }\n\n  /**\n   * Get the default beam groups for a provided time signature.\n   * Attempt to guess if the time signature is not found in table.\n   * Currently this is fairly naive.\n   */\n  static getDefaultBeamGroups(time_sig: string): Fraction[] {\n    if (!time_sig || time_sig === 'c') {\n      time_sig = '4/4';\n    }\n\n    const defaults: { [key: string]: [string] } = {\n      '1/2': ['1/2'],\n      '2/2': ['1/2'],\n      '3/2': ['1/2'],\n      '4/2': ['1/2'],\n\n      '1/4': ['1/4'],\n      '2/4': ['1/4'],\n      '3/4': ['1/4'],\n      '4/4': ['1/4'],\n\n      '1/8': ['1/8'],\n      '2/8': ['2/8'],\n      '3/8': ['3/8'],\n      '4/8': ['2/8'],\n\n      '1/16': ['1/16'],\n      '2/16': ['2/16'],\n      '3/16': ['3/16'],\n      '4/16': ['2/16'],\n    };\n\n    const groups: string[] = defaults[time_sig];\n\n    if (groups === undefined) {\n      // If no beam groups found, naively determine\n      // the beam groupings from the time signature\n      const beatTotal = parseInt(time_sig.split('/')[0], 10);\n      const beatValue = parseInt(time_sig.split('/')[1], 10);\n\n      const tripleMeter = beatTotal % 3 === 0;\n\n      if (tripleMeter) {\n        return [new Fraction(3, beatValue)];\n      } else if (beatValue > 4) {\n        return [new Fraction(2, beatValue)];\n      } else if (beatValue <= 4) {\n        return [new Fraction(1, beatValue)];\n      }\n    } else {\n      return groups.map((group) => new Fraction().parse(group));\n    }\n\n    return [new Fraction(1, 4)];\n  }\n\n  /**\n   * A helper function to automatically build basic beams for a voice. For more\n   * complex auto-beaming use `Beam.generateBeams()`.\n   * @param voice the voice to generate the beams for\n   * @param stem_direction a stem direction to apply to the entire voice\n   * @param groups an array of `Fraction` representing beat groupings for the beam\n   */\n  static applyAndGetBeams(voice: Voice, stem_direction?: number, groups?: Fraction[]): Beam[] {\n    return Beam.generateBeams(voice.getTickables() as StemmableNote[], { groups, stem_direction });\n  }\n\n  /**\n   * A helper function to autimatically build beams for a voice with\n   * configuration options.\n   *\n   * Example configuration object:\n   *\n   * ```\n   * config = {\n   *   groups: [new Vex.Flow.Fraction(2, 8)],\n   *   stem_direction: -1,\n   *   beam_rests: true,\n   *   beam_middle_only: true,\n   *   show_stemlets: false\n   * };\n   * ```\n   * @param notes an array of notes to create the beams for\n   * @param config the configuration object\n   * @param config.stem_direction set to apply the same direction to all notes\n   * @param config.beam_rests set to `true` to include rests in the beams\n   * @param config.beam_middle_only set to `true` to only beam rests in the middle of the beat\n   * @param config.show_stemlets set to `true` to draw stemlets for rests\n   * @param config.maintain_stem_directions set to `true` to not apply new stem directions\n   * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n   *\n   */\n  static generateBeams(\n    notes: StemmableNote[],\n    config: {\n      flat_beam_offset?: number;\n      flat_beams?: boolean;\n      secondary_breaks?: string;\n      show_stemlets?: boolean;\n      maintain_stem_directions?: boolean;\n      beam_middle_only?: boolean;\n      beam_rests?: boolean;\n      groups?: Fraction[];\n      stem_direction?: number;\n    } = {}\n  ): Beam[] {\n    if (!config.groups || !config.groups.length) {\n      config.groups = [new Fraction(2, 8)];\n    }\n\n    // Convert beam groups to tick amounts\n    const tickGroups = config.groups.map((group) => {\n      if (!group.multiply) {\n        throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n      }\n      return group.clone().multiply(Tables.RESOLUTION, 1);\n    });\n\n    const unprocessedNotes: StemmableNote[] = notes;\n    let currentTickGroup = 0;\n    let noteGroups: StemmableNote[][] = [];\n    let currentGroup: StemmableNote[] = [];\n\n    function getTotalTicks(vf_notes: Note[]) {\n      return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n    }\n\n    function nextTickGroup() {\n      if (tickGroups.length - 1 > currentTickGroup) {\n        currentTickGroup += 1;\n      } else {\n        currentTickGroup = 0;\n      }\n    }\n\n    function createGroups() {\n      let nextGroup: StemmableNote[] = [];\n      // number of ticks in current group\n      let currentGroupTotalTicks = new Fraction(0, 1);\n      unprocessedNotes.forEach((unprocessedNote) => {\n        nextGroup = [];\n        if (unprocessedNote.shouldIgnoreTicks()) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          return; // Ignore untickables (like bar notes)\n        }\n        currentGroup.push(unprocessedNote);\n        const ticksPerGroup = tickGroups[currentTickGroup].clone();\n        const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n\n        // Double the amount of ticks in a group, if it's an unbeamable tuplet\n        const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n        if (unbeamable && unprocessedNote.getTuplet()) {\n          ticksPerGroup.numerator *= 2;\n        }\n\n        // If the note that was just added overflows the group tick total\n        if (totalTicks.greaterThan(ticksPerGroup)) {\n          // If the overflow note can be beamed, start the next group\n          // with it. Unbeamable notes leave the group overflowed.\n          if (!unbeamable) {\n            const note = currentGroup.pop();\n            if (note) nextGroup.push(note);\n          }\n          noteGroups.push(currentGroup);\n\n          // We have overflown, so we're going to next tick group. As we might have\n          // overflown by more than 1 group, we need to go forward as many times as\n          // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n          // in current groups as we go forward.\n          do {\n            currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n            nextTickGroup();\n          } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n          currentGroup = nextGroup;\n        } else if (totalTicks.equals(ticksPerGroup)) {\n          noteGroups.push(currentGroup);\n          currentGroupTotalTicks = new Fraction(0, 1);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        }\n      });\n\n      // Adds any remainder notes beam\n      if (currentGroup.length > 0) {\n        noteGroups.push(currentGroup);\n      }\n    }\n    function getBeamGroups() {\n      return noteGroups.filter((group) => {\n        if (group.length > 1) {\n          let beamable = true;\n          group.forEach((note) => {\n            if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n              beamable = false;\n            }\n          });\n          return beamable;\n        }\n        return false;\n      });\n    }\n\n    // Splits up groups by Rest\n    function sanitizeGroups() {\n      const sanitizedGroups: StemmableNote[][] = [];\n      noteGroups.forEach((group) => {\n        let tempGroup: StemmableNote[] = [];\n        group.forEach((note, index, group) => {\n          const isFirstOrLast = index === 0 || index === group.length - 1;\n          const prevNote = group[index - 1];\n\n          const breaksOnEachRest = !config.beam_rests && note.isRest();\n          const breaksOnFirstOrLastRest =\n            config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\n\n          let breakOnStemChange = false;\n          if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\n            const prevDirection = prevNote.getStemDirection();\n            const currentDirection = note.getStemDirection();\n            breakOnStemChange = currentDirection !== prevDirection;\n          }\n\n          const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n\n          // Determine if the group should be broken at this note\n          const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n\n          if (shouldBreak) {\n            // Add current group\n            if (tempGroup.length > 0) {\n              sanitizedGroups.push(tempGroup);\n            }\n\n            // Start a new group. Include the current note if the group\n            // was broken up by stem direction, as that note needs to start\n            // the next group of notes\n            tempGroup = breakOnStemChange ? [note] : [];\n          } else {\n            // Add note to group\n            tempGroup.push(note);\n          }\n        });\n\n        // If there is a remaining group, add it as well\n        if (tempGroup.length > 0) {\n          sanitizedGroups.push(tempGroup);\n        }\n      });\n\n      noteGroups = sanitizedGroups;\n    }\n\n    function formatStems() {\n      noteGroups.forEach((group) => {\n        let stemDirection;\n        if (config.maintain_stem_directions) {\n          const note = findFirstNote(group);\n          stemDirection = note ? note.getStemDirection() : Stem.UP;\n        } else {\n          if (config.stem_direction) {\n            stemDirection = config.stem_direction;\n          } else {\n            stemDirection = calculateStemDirection(group);\n          }\n        }\n        applyStemDirection(group, stemDirection);\n      });\n    }\n\n    function findFirstNote(group: StemmableNote[]) {\n      for (let i = 0; i < group.length; i++) {\n        const note = group[i];\n        if (!note.isRest()) {\n          return note;\n        }\n      }\n\n      return false;\n    }\n\n    function applyStemDirection(group: StemmableNote[], direction: number) {\n      group.forEach((note) => {\n        note.setStemDirection(direction);\n      });\n    }\n\n    // Get all of the tuplets in all of the note groups\n    function getTuplets() {\n      const uniqueTuplets: Tuplet[] = [];\n\n      // Go through all of the note groups and inspect for tuplets\n      noteGroups.forEach((group) => {\n        let tuplet: Tuplet;\n        group.forEach((note) => {\n          const noteTuplet = note.getTuplet();\n          if (noteTuplet && tuplet !== noteTuplet) {\n            tuplet = noteTuplet;\n            uniqueTuplets.push(tuplet);\n          }\n        });\n      });\n      return uniqueTuplets;\n    }\n\n    // Using closures to store the variables throughout the various functions\n    // IMO Keeps it this process lot cleaner - but not super consistent with\n    // the rest of the API's style - Silverwolf90 (Cyril)\n    createGroups();\n    sanitizeGroups();\n    formatStems();\n\n    // Get the notes to be beamed\n    const beamedNoteGroups = getBeamGroups();\n\n    // Get the tuplets in order to format them accurately\n    const allTuplets = getTuplets();\n\n    // Create a Vex.Flow.Beam from each group of notes to be beamed\n    const beams: Beam[] = [];\n    beamedNoteGroups.forEach((group) => {\n      const beam = new Beam(group);\n\n      if (config.show_stemlets) {\n        beam.render_options.show_stemlets = true;\n      }\n      if (config.secondary_breaks) {\n        beam.render_options.secondary_break_ticks = Tables.durationToTicks(config.secondary_breaks);\n      }\n      if (config.flat_beams === true) {\n        beam.render_options.flat_beams = true;\n        beam.render_options.flat_beam_offset = config.flat_beam_offset;\n      }\n      beams.push(beam);\n    });\n\n    // Reformat tuplets\n    allTuplets.forEach((tuplet) => {\n      // Set the tuplet location based on the stem direction\n      const direction =\n        (tuplet.notes[0] as StemmableNote).stem_direction === Stem.DOWN ? Tuplet.LOCATION_BOTTOM : Tuplet.LOCATION_TOP;\n      tuplet.setTupletLocation(direction);\n\n      // If any of the notes in the tuplet are not beamed, draw a bracket.\n      let bracketed = false;\n      for (let i = 0; i < tuplet.notes.length; i++) {\n        const note = tuplet.notes[i];\n        if (!note.hasBeam()) {\n          bracketed = true;\n          break;\n        }\n      }\n      tuplet.setBracketed(bracketed);\n    });\n\n    return beams;\n  }\n\n  constructor(notes: StemmableNote[], auto_stem: boolean = false) {\n    super();\n\n    if (!notes || notes.length === 0) {\n      throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n    }\n\n    if (notes.length === 1) {\n      throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n    }\n\n    // Validate beam line, direction and ticks.\n    this.ticks = notes[0].getIntrinsicTicks();\n\n    if (this.ticks >= Tables.durationToTicks('4')) {\n      throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n    }\n\n    let i; // shared iterator\n    let note;\n\n    this.stem_direction = Stem.UP;\n\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (note.hasStem()) {\n        this.stem_direction = note.getStemDirection();\n        break;\n      }\n    }\n\n    let stem_direction = this.stem_direction;\n    // Figure out optimal stem direction based on given notes\n\n    if (auto_stem && isStaveNote(notes[0])) {\n      stem_direction = calculateStemDirection(notes);\n    } else if (auto_stem && isTabNote(notes[0])) {\n      // Auto Stem TabNotes\n      const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n      stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n    }\n\n    // Apply stem directions and attach beam to notes\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (auto_stem) {\n        note.setStemDirection(stem_direction);\n        this.stem_direction = stem_direction;\n      }\n      note.setBeam(this);\n    }\n\n    this.postFormatted = false;\n    this.notes = notes;\n    this.beam_count = this.getBeamCount();\n    this.break_on_indices = [];\n    this.render_options = {\n      beam_width: 5,\n      max_slope: 0.25,\n      min_slope: -0.25,\n      slope_iterations: 20,\n      slope_cost: 100,\n      show_stemlets: false,\n      stemlet_extension: 7,\n      partial_beam_length: 10,\n      flat_beams: false,\n      min_flat_beam_offset: 15,\n    };\n  }\n\n  /** Get the notes in this beam. */\n  getNotes(): StemmableNote[] {\n    return this.notes;\n  }\n\n  /** Get the max number of beams in the set of notes. */\n  getBeamCount(): number {\n    const beamCounts = this.notes.map((note) => note.getGlyph().beam_count);\n\n    const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n\n    return maxBeamCount;\n  }\n\n  /** Set which note `indices` to break the secondary beam at. */\n  breakSecondaryAt(indices: number[]): this {\n    this.break_on_indices = indices;\n    return this;\n  }\n\n  /** Return the y coordinate for linear function. */\n  getSlopeY(x: number, first_x_px: number, first_y_px: number, slope: number): number {\n    return first_y_px + (x - first_x_px) * slope;\n  }\n\n  /** Calculate the best possible slope for the provided notes. */\n  calculateSlope(): void {\n    const {\n      notes,\n      stem_direction: stemDirection,\n      render_options: { max_slope, min_slope, slope_iterations, slope_cost },\n    } = this;\n\n    const firstNote = notes[0];\n    const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n    const increment = (max_slope - min_slope) / slope_iterations;\n    let minCost = Number.MAX_VALUE;\n    let bestSlope = 0;\n    let yShift = 0;\n\n    // iterate through slope values to find best weighted fit\n    for (let slope = min_slope; slope <= max_slope; slope += increment) {\n      let totalStemExtension = 0;\n      let yShiftTemp = 0;\n\n      // iterate through notes, calculating y shift and stem extension\n      for (let i = 1; i < notes.length; ++i) {\n        const note = notes[i];\n        const adjustedStemTipY =\n          this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n\n        const stemTipY = note.getStemExtents().topY;\n        // beam needs to be shifted up to accommodate note\n        if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n          const diff = Math.abs(stemTipY - adjustedStemTipY);\n          yShiftTemp += diff * -stemDirection;\n          totalStemExtension += diff * i;\n        } else {\n          // beam overshoots note, account for the difference\n          totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n        }\n      }\n\n      // most engraving books suggest aiming for a slope about half the angle of the\n      // difference between the first and last notes' stem length;\n      const idealSlope = initialSlope / 2;\n      const distanceFromIdeal = Math.abs(idealSlope - slope);\n\n      // This tries to align most beams to something closer to the idealSlope, but\n      // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n      const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n\n      // update state when a more ideal slope is found\n      if (cost < minCost) {\n        minCost = cost;\n        bestSlope = slope;\n        yShift = yShiftTemp;\n      }\n    }\n\n    this.slope = bestSlope;\n    this.y_shift = yShift;\n  }\n\n  /** Calculate a slope and y-shift for flat beams. */\n  calculateFlatSlope(): void {\n    const {\n      notes,\n      stem_direction,\n      render_options: { beam_width, min_flat_beam_offset, flat_beam_offset },\n    } = this;\n\n    // If a flat beam offset has not yet been supplied or calculated,\n    // generate one based on the notes in this particular note group\n    let total = 0;\n    let extremeY = 0; // Store the highest or lowest note here\n    let extremeBeamCount = 0; // The beam count of the extreme note\n    let currentExtreme = 0;\n    for (let i = 0; i < notes.length; i++) {\n      // Total up all of the offsets so we can average them out later\n      const note = notes[i];\n      const stemTipY = note.getStemExtents().topY;\n      total += stemTipY;\n\n      // Store the highest (stems-up) or lowest (stems-down) note so the\n      //  offset can be adjusted in case the average isn't enough\n      if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\n        currentExtreme = stemTipY;\n        extremeY = Math.max(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      } else if (stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n        currentExtreme = stemTipY;\n        extremeY = Math.min(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      }\n    }\n\n    // Average the offsets to try and come up with a reasonable one that\n    //  works for all of the notes in the beam group.\n    let offset = total / notes.length;\n\n    // In case the average isn't long enough, add or subtract some more\n    //  based on the highest or lowest note (again, based on the stem\n    //  direction). This also takes into account the added height due to\n    //  the width of the beams.\n    const beamWidth = beam_width * 1.5;\n    const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\n    const newOffset = extremeY + extremeTest * -stem_direction;\n    if (stem_direction === Stem.DOWN && offset < newOffset) {\n      offset = extremeY + extremeTest;\n    } else if (stem_direction === Stem.UP && offset > newOffset) {\n      offset = extremeY - extremeTest;\n    }\n\n    if (!flat_beam_offset) {\n      // Set the offset for the group based on the calculations above.\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.DOWN && offset > flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.UP && offset < flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    }\n\n    // for flat beams, the slope and y_shift are simply 0\n    this.slope = 0;\n    this.y_shift = 0;\n  }\n\n  /** Return the Beam y offset. */\n  getBeamYToDraw(): number {\n    const firstNote = this.notes[0];\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    let beamY = firstStemTipY;\n\n    // For flat beams, set the first and last Y to the offset, rather than\n    //  using the note's stem extents.\n    if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n      beamY = this.render_options.flat_beam_offset;\n    }\n    return beamY;\n  }\n\n  /**\n   * Create new stems for the notes in the beam, so that each stem\n   * extends into the beams.\n   */\n  applyStemExtensions(): void {\n    const {\n      notes,\n      slope,\n      y_shift,\n      stem_direction,\n      beam_count,\n      render_options: { show_stemlets, stemlet_extension, beam_width },\n    } = this;\n\n    const firstNote = notes[0];\n    const firstStemTipY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n\n    for (let i = 0; i < notes.length; ++i) {\n      const note = notes[i];\n      const stem = note.getStem();\n      if (stem) {\n        const stemX = note.getStemX();\n        const { topY: stemTipY } = note.getStemExtents();\n        const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n        const preBeamExtension = stem.getExtension();\n        const beamExtension = stem_direction === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n\n        stem.setExtension(preBeamExtension + beamExtension);\n        stem.adjustHeightForBeam();\n\n        if (note.isRest() && show_stemlets) {\n          const beamWidth = beam_width;\n          const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\n          stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\n        }\n      } else {\n        throw new RuntimeError('NoStem', 'stem undefined.');\n      }\n    }\n  }\n\n  /** Return upper level beam direction. */\n  lookupBeamDirection(duration: string, prev_tick: number, tick: number, next_tick: number): string {\n    if (duration === '4') {\n      return BEAM_LEFT;\n    }\n\n    const lookup_duration = `${Tables.durationToNumber(duration) / 2}`;\n    const prev_note_gets_beam = prev_tick < Tables.durationToTicks(lookup_duration);\n    const next_note_gets_beam = next_tick < Tables.durationToTicks(lookup_duration);\n    const note_gets_beam = tick < Tables.durationToTicks(lookup_duration);\n\n    if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_BOTH;\n    } else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\n      return BEAM_LEFT;\n    } else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_RIGHT;\n    }\n\n    return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick);\n  }\n\n  /** Get the x coordinates for the beam lines of specific `duration`. */\n  getBeamLines(duration: string): { start: number; end?: number }[] {\n    const tick_of_duration = Tables.durationToTicks(duration);\n    let beam_started = false;\n\n    type BeamInfo = { start: number; end?: number };\n    const beam_lines: BeamInfo[] = [];\n    let current_beam: BeamInfo | undefined = undefined;\n    const partial_beam_length = this.render_options.partial_beam_length;\n    let previous_should_break = false;\n    let tick_tally = 0;\n    for (let i = 0; i < this.notes.length; ++i) {\n      const note = this.notes[i];\n\n      // See if we need to break secondary beams on this note.\n      const ticks = note.getTicks().value();\n      tick_tally += ticks;\n      let should_break = false;\n\n      // 8th note beams are always drawn.\n      if (parseInt(duration, 10) >= 8) {\n        // First, check to see if any indices were set up through breakSecondaryAt()\n        should_break = this.break_on_indices.indexOf(i) !== -1;\n\n        // If the secondary breaks were auto-configured in the render options,\n        //  handle that as well.\n        if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n          tick_tally = 0;\n          should_break = true;\n        }\n      }\n      const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\n\n      const stem_x = note.getStemX() - Stem.WIDTH / 2;\n\n      // Check to see if the next note in the group will get a beam at this\n      //  level. This will help to inform the partial beam logic below.\n      const prev_note = this.notes[i - 1];\n      const next_note = this.notes[i + 1];\n      const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\n      const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\n      const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      if (note_gets_beam) {\n        // This note gets a beam at the current level\n        if (beam_started) {\n          // We're currently in the middle of a beam. Just continue it on to\n          //  the stem X of the current note.\n          current_beam = beam_lines[beam_lines.length - 1];\n          current_beam.end = stem_x;\n\n          // If a secondary beam break is set up, end the beam right now.\n          if (should_break) {\n            beam_started = false;\n            if (next_note && !next_note_gets_beam && current_beam.end === undefined) {\n              // This note gets a beam,.but the next one does not. This means\n              //  we need a partial pointing right.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          }\n        } else {\n          // No beam started yet. Start a new one.\n          current_beam = { start: stem_x, end: undefined };\n          beam_started = true;\n\n          if (beam_alone) {\n            // previous and next beam exists and does not get a beam but current gets it.\n            const prev_tick = prev_note.getIntrinsicTicks();\n            const next_tick = next_note.getIntrinsicTicks();\n            const tick = note.getIntrinsicTicks();\n            const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick);\n\n            if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\n              current_beam.end = current_beam.start - partial_beam_length;\n            } else {\n              current_beam.end = current_beam.start + partial_beam_length;\n            }\n          } else if (!next_note_gets_beam) {\n            // The next note doesn't get a beam. Draw a partial.\n            if ((previous_should_break || i === 0) && next_note) {\n              // This is the first note (but not the last one), or it is\n              //  following a secondary break. Draw a partial to the right.\n              current_beam.end = current_beam.start + partial_beam_length;\n            } else {\n              // By default, draw a partial to the left.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          } else if (should_break) {\n            // This note should have a secondary break after it. Even though\n            //  we just started a beam, it needs to end immediately.\n            current_beam.end = current_beam.start - partial_beam_length;\n            beam_started = false;\n          }\n          beam_lines.push(current_beam);\n        }\n      } else {\n        // The current note does not get a beam.\n        beam_started = false;\n      }\n\n      // Store the secondary break flag to inform the partial beam logic in\n      //  the next iteration of the loop.\n      previous_should_break = should_break;\n    }\n\n    // Add a partial beam pointing left if this is the last note in the group\n    const last_beam = beam_lines[beam_lines.length - 1];\n    if (last_beam && last_beam.end === undefined) {\n      last_beam.end = last_beam.start - partial_beam_length;\n    }\n    return beam_lines;\n  }\n\n  /** Render the stems for each note. */\n  protected drawStems(ctx: RenderContext): void {\n    this.notes.forEach((note) => {\n      const stem = note.getStem();\n      if (stem) {\n        stem.setContext(ctx).draw();\n      }\n    }, this);\n  }\n\n  // Render the beam lines\n  protected drawBeamLines(ctx: RenderContext): void {\n    const valid_beam_durations = ['4', '8', '16', '32', '64'];\n\n    const firstNote = this.notes[0];\n    let beamY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n    const beamThickness = this.render_options.beam_width * this.stem_direction;\n\n    // Draw the beams.\n    for (let i = 0; i < valid_beam_durations.length; ++i) {\n      const duration = valid_beam_durations[i];\n      const beamLines = this.getBeamLines(duration);\n\n      for (let j = 0; j < beamLines.length; ++j) {\n        const beam_line = beamLines[j];\n        const startBeamX = beam_line.start;\n\n        const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n        const lastBeamX = beam_line.end;\n        if (lastBeamX) {\n          const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n\n          ctx.beginPath();\n          ctx.moveTo(startBeamX, startBeamY);\n          ctx.lineTo(startBeamX, startBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY);\n          ctx.closePath();\n          ctx.fill();\n        } else {\n          throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n        }\n      }\n\n      beamY += beamThickness * 1.5;\n    }\n  }\n\n  /** Pre-format the beam. */\n  preFormat(): this {\n    return this;\n  }\n\n  /**\n   * Post-format the beam. This can only be called after\n   * the notes in the beam have both `x` and `y` values. ie: they've\n   * been formatted and have staves.\n   */\n  postFormat(): void {\n    if (this.postFormatted) return;\n\n    // Calculate a smart slope if we're not forcing the beams to be flat.\n    if (isTabNote(this.notes[0]) || this.render_options.flat_beams) {\n      this.calculateFlatSlope();\n    } else {\n      this.calculateSlope();\n    }\n    this.applyStemExtensions();\n\n    this.postFormatted = true;\n  }\n\n  /** Render the beam to the canvas context */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    if (this.unbeamable) return;\n\n    if (!this.postFormatted) {\n      this.postFormat();\n    }\n\n    this.drawStems(ctx);\n    this.applyStyle();\n    this.drawBeamLines(ctx);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { Element } from './element';\nimport { Note } from './note';\nimport { Stave } from './stave';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport interface TieNotes {\n  first_note: Note | null;\n  last_note: Note | null;\n  first_indices?: number[];\n  last_indices?: number[];\n}\n\nexport class StaveTie extends Element {\n  static get CATEGORY(): string {\n    return 'StaveTie';\n  }\n\n  public render_options: {\n    cp2: number;\n    last_x_shift: number;\n    tie_spacing: number;\n    cp1: number;\n    first_x_shift: number;\n    text_shift_x: number;\n    y_shift: number;\n    font: FontInfo;\n  };\n\n  protected text?: string;\n\n  protected font: FontInfo;\n\n  // notes is initialized by the constructor via this.setNotes(notes).\n  protected notes!: TieNotes;\n\n  protected direction?: number;\n\n  /**\n   * @param notes is a struct that has:\n   *\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   *\n   * @param text\n   */\n  constructor(notes: TieNotes, text?: string) {\n    super();\n    this.setNotes(notes);\n    this.text = text;\n    this.render_options = {\n      cp1: 8, // Curve control point 1\n      cp2: 12, // Curve control point 2\n      text_shift_x: 0,\n      first_x_shift: 0,\n      last_x_shift: 0,\n      y_shift: 7,\n      tie_spacing: 0,\n      font: { family: 'Arial', size: 10, weight: '' },\n    };\n\n    this.font = this.render_options.font;\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n\n  setDirection(direction: number): this {\n    this.direction = direction;\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this tie to.\n   *\n   * @param {!Object} notes The notes to tie up.\n   */\n  setNotes(notes: TieNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) {\n      notes.first_indices = [0];\n    }\n    if (!notes.last_indices) {\n      notes.last_indices = [0];\n    }\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new RuntimeError('BadArguments', 'Tied notes must have same number of indices.');\n    }\n\n    this.notes = notes;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.notes.first_note || !this.notes.last_note;\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new RuntimeError('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    let cp1 = this.render_options.cp1;\n    let cp2 = this.render_options.cp2;\n\n    if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n      cp1 = 2;\n      cp2 = 8;\n    }\n\n    const first_x_shift = this.render_options.first_x_shift;\n    const last_x_shift = this.render_options.last_x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    // setNotes(...) verified that first_indices and last_indices are not undefined.\n    // As a result, we use the ! non-null assertion operator here.\n    // eslint-disable-next-line\n    const first_indices = this.notes.first_indices!;\n    // eslint-disable-next-line\n    const last_indices = this.notes.last_indices!;\n    for (let i = 0; i < first_indices.length; ++i) {\n      const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\n      const first_y_px = params.first_ys[first_indices[i]] + y_shift;\n      const last_y_px = params.last_ys[last_indices[i]] + y_shift;\n\n      if (isNaN(first_y_px) || isNaN(last_y_px)) {\n        throw new RuntimeError('BadArguments', 'Bad indices for tie rendering.');\n      }\n\n      const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\n      const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\n\n      ctx.beginPath();\n      ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n      ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n      ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }\n\n  renderText(first_x_px: number, last_x_px: number): void {\n    if (!this.text) return;\n    const ctx = this.checkContext();\n    let center_x = (first_x_px + last_x_px) / 2;\n    center_x -= ctx.measureText(this.text).width / 2;\n    const stave = this.notes.first_note?.checkStave() ?? this.notes.last_note?.checkStave();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText(this.text, center_x + this.render_options.text_shift_x, (stave as Stave).getYForTopText() - 1);\n    ctx.restore();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.notes.first_note;\n    const last_note = this.notes.last_note;\n\n    let first_x_px;\n    let last_x_px;\n    let first_ys;\n    let last_ys;\n    let stem_direction = 0;\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      stem_direction = first_note.getStemDirection();\n      first_ys = first_note.getYs();\n    } else {\n      const stave = (last_note as Note).checkStave();\n      first_x_px = stave.getTieStartX();\n      first_ys = (last_note as Note).getYs();\n      this.notes.first_indices = this.notes.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      stem_direction = last_note.getStemDirection();\n      last_ys = last_note.getYs();\n    } else {\n      const stave = (first_note as Note).checkStave();\n      last_x_px = stave.getTieEndX();\n      last_ys = (first_note as Note).getYs();\n      this.notes.last_indices = this.notes.first_indices;\n    }\n\n    if (this.direction) {\n      stem_direction = this.direction;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: stem_direction,\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n","// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { StaveTie, TieNotes } from './stavetie';\n\nexport class TabTie extends StaveTie {\n  static get CATEGORY(): string {\n    return 'TabTie';\n  }\n\n  static createHammeron(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'H');\n  }\n\n  static createPulloff(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'P');\n  }\n\n  /**\n   * @param notes is a struct that has:\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   *\n   * @param text\n   */\n  constructor(notes: TieNotes, text?: string) {\n    super(notes, text);\n\n    this.render_options.cp1 = 9;\n    this.render_options.cp2 = 11;\n    this.render_options.y_shift = 3;\n\n    this.direction = -1; // Tab tie's are always face up.\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\n\nimport { isStaveNote } from 'typeguard';\n\nimport { Beam } from './beam';\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { StaveTie } from './stavetie';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TabTie } from './tabtie';\nimport { log } from './util';\nimport { Voice } from './voice';\n\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any) {\n  if (GraceNoteGroup.DEBUG) log('Vex.Flow.GraceNoteGroup', args);\n}\n\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'GraceNoteGroup';\n  }\n\n  protected readonly voice: Voice;\n  protected readonly grace_notes: StemmableNote[];\n  protected readonly show_slur?: boolean;\n\n  protected preFormatted: boolean = false;\n  protected formatter: Formatter;\n  public render_options: { slur_y_shift: number };\n  protected slur?: StaveTie | TabTie;\n  protected beams: Beam[];\n\n  /** Arranges groups inside a `ModifierContext`. */\n  static format(gracenote_groups: GraceNoteGroup[], state: ModifierContextState): boolean {\n    const group_spacing_stave = 4;\n    const group_spacing_tab = 0;\n\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\n    const group_list = [];\n    let prev_note = null;\n    let shiftL = 0;\n\n    for (let i = 0; i < gracenote_groups.length; ++i) {\n      const gracenote_group = gracenote_groups[i];\n      const note = gracenote_group.getNote();\n      const is_stavenote = isStaveNote(note);\n      const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n\n      if (is_stavenote && note !== prev_note) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prev_note = note;\n      }\n\n      group_list.push({ shift: shiftL, gracenote_group, spacing });\n    }\n\n    // If first note left shift in case it is displaced\n    let group_shift = group_list[0].shift;\n    let formatWidth;\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  }\n\n  //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n  constructor(grace_notes: StemmableNote[], show_slur?: boolean) {\n    super();\n\n    this.position = Modifier.Position.LEFT;\n    this.grace_notes = grace_notes;\n    this.width = 0;\n\n    this.show_slur = show_slur;\n    this.slur = undefined;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Tables.RESOLUTION,\n    }).setStrict(false);\n\n    this.render_options = {\n      slur_y_shift: 0,\n    };\n\n    this.beams = [];\n\n    this.voice.addTickables(this.grace_notes);\n\n    return this;\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  beamNotes(grace_notes?: StemmableNote[]): this {\n    grace_notes = grace_notes || this.grace_notes;\n    if (grace_notes.length > 1) {\n      const beam = new Beam(grace_notes);\n\n      beam.render_options.beam_width = 3;\n      beam.render_options.partial_beam_length = 4;\n\n      this.beams.push(beam);\n    }\n\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getGraceNotes(): Note[] {\n    return this.grace_notes;\n  }\n\n  draw(): void {\n    const ctx: RenderContext = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    L('Drawing grace note group for:', note);\n\n    this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n\n    // Draw grace notes.\n    this.grace_notes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n    // Draw beams.\n    this.beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    if (this.show_slur) {\n      // Create and draw slur.\n      const is_stavenote = isStaveNote(note);\n      const TieClass = is_stavenote ? StaveTie : TabTie;\n\n      this.slur = new TieClass({\n        last_note: this.grace_notes[0],\n        first_note: note,\n        first_indices: [0],\n        last_indices: [0],\n      });\n\n      this.slur.render_options.cp2 = 12;\n      this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n      this.slur.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\n\nimport { isDot } from 'typeguard';\n\nimport { Dot } from './dot';\nimport { Glyph, GlyphProps } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stave } from './stave';\nimport { StaveNoteStruct } from './stavenote';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { defined, RuntimeError } from './util';\n\nexport interface TabNotePosition {\n  // For example, on a six stringed instrument, `str` ranges from 1 to 6.\n  str: number;\n\n  // fret: 'X' indicates an unused/muted string.\n  // fret: 3 indicates the third fret.\n  fret: number | string;\n}\n\nexport interface TabNoteStruct extends StaveNoteStruct {\n  positions: TabNotePosition[];\n}\n\n// Gets the unused strings grouped together if consecutive.\n//\n// Parameters:\n// * num_lines - The number of lines\n// * strings_used - An array of numbers representing which strings have fret positions\nfunction getUnusedStringGroups(num_lines: number, strings_used: number[]) {\n  const stem_through = [];\n  let group = [];\n  for (let string = 1; string <= num_lines; string++) {\n    const is_used = strings_used.indexOf(string) > -1;\n\n    if (!is_used) {\n      group.push(string);\n    } else {\n      stem_through.push(group);\n      group = [];\n    }\n  }\n  if (group.length > 0) stem_through.push(group);\n\n  return stem_through;\n}\n\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stem_Y - The `y` coordinate the stem is located on\n// * unused_strings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stem_direction - The direction of the stem\nfunction getPartialStemLines(stem_y: number, unused_strings: number[][], stave: Stave, stem_direction: number) {\n  const up_stem = stem_direction !== 1;\n  const down_stem = stem_direction !== -1;\n\n  const line_spacing = stave.getSpacingBetweenLines();\n  const total_lines = stave.getNumLines();\n\n  const stem_lines: number[][] = [];\n\n  unused_strings.forEach((strings) => {\n    const containsLastString = strings.indexOf(total_lines) > -1;\n    const containsFirstString = strings.indexOf(1) > -1;\n\n    if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {\n      return;\n    }\n\n    // If there's only one string in the group, push a duplicate value.\n    // We do this because we need 2 strings to convert into upper/lower y\n    // values.\n    if (strings.length === 1) {\n      strings.push(strings[0]);\n    }\n\n    const line_ys: number[] = [];\n    // Iterate through each group string and store it's y position\n    strings.forEach((string, index, strings) => {\n      const isTopBound = string === 1;\n      const isBottomBound = string === total_lines;\n\n      // Get the y value for the appropriate staff line,\n      // we adjust for a 0 index array, since string numbers are index 1\n      let y = stave.getYForLine(string - 1);\n\n      // Unless the string is the first or last, add padding to each side\n      // of the line\n      if (index === 0 && !isTopBound) {\n        y -= line_spacing / 2 - 1;\n      } else if (index === strings.length - 1 && !isBottomBound) {\n        y += line_spacing / 2 - 1;\n      }\n\n      // Store the y value\n      line_ys.push(y);\n\n      // Store a subsequent y value connecting this group to the main\n      // stem above/below the stave if it's the top/bottom string\n      if (stem_direction === 1 && isTopBound) {\n        line_ys.push(stem_y - 2);\n      } else if (stem_direction === -1 && isBottomBound) {\n        line_ys.push(stem_y + 2);\n      }\n    });\n\n    // Add the sorted y values to the\n    stem_lines.push(line_ys.sort((a, b) => a - b));\n  });\n\n  return stem_lines;\n}\n\nexport class TabNote extends StemmableNote {\n  static get CATEGORY(): string {\n    return 'TabNote';\n  }\n\n  protected ghost: boolean;\n  protected glyphs: GlyphProps[] = [];\n  protected positions: TabNotePosition[];\n\n  // Initialize the TabNote with a `noteStruct` full of properties\n  // and whether to `draw_stem` when rendering the note\n  constructor(noteStruct: TabNoteStruct, draw_stem: boolean = false) {\n    super(noteStruct);\n\n    this.ghost = false; // Renders parenthesis around notes\n\n    // Note properties\n    // The fret positions in the note. An array of `{ str: X, fret: X }`\n    this.positions = noteStruct.positions || [];\n\n    // Render Options\n    this.render_options = {\n      ...this.render_options,\n      // font size for note heads and rests\n      glyph_font_scale: Tables.DEFAULT_TABLATURE_FONT_SCALE,\n      // Flag to draw a stem\n      draw_stem,\n      // Flag to draw dot modifiers\n      draw_dots: draw_stem,\n      // Flag to extend the main stem through the stave and fret positions\n      draw_stem_through_stave: false,\n      // vertical shift from stave line\n      y_shift: 0,\n      // normal glyph scale\n      scale: 1.0,\n      // default tablature font\n      font: '10pt Arial',\n    };\n\n    this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    this.buildStem();\n\n    if (noteStruct.stem_direction) {\n      this.setStemDirection(noteStruct.stem_direction);\n    } else {\n      this.setStemDirection(Stem.UP);\n    }\n\n    // Renders parenthesis around notes\n    this.ghost = false;\n    this.updateWidth();\n  }\n\n  reset(): this {\n    if (this.stave) this.setStave(this.stave);\n    return this;\n  }\n\n  // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n  // Often used for indicating frets that are being bent to\n  setGhost(ghost: boolean): this {\n    this.ghost = ghost;\n    this.updateWidth();\n    return this;\n  }\n\n  // Determine if the note has a stem\n  hasStem(): boolean {\n    if (this.render_options.draw_stem) return true;\n    return false;\n  }\n\n  // Get the default stem extension for the note\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Add a dot to the note\n  addDot(): this {\n    const dot = new Dot();\n    this.dots += 1;\n    return this.addModifier(dot, 0);\n  }\n\n  // Calculate and store the width of the note\n  updateWidth(): void {\n    this.glyphs = [];\n    this.width = 0;\n    for (let i = 0; i < this.positions.length; ++i) {\n      let fret = this.positions[i].fret;\n      if (this.ghost) fret = '(' + fret + ')';\n      const glyph = Tables.tabToGlyph(fret.toString(), this.render_options.scale);\n      this.glyphs.push(glyph as GlyphProps);\n      this.width = Math.max(glyph.getWidth(), this.width);\n    }\n    // For some reason we associate a notehead glyph with a TabNote, and this\n    // glyph is used for certain width calculations. Of course, this is totally\n    // incorrect since a notehead is a poor approximation for the dimensions of\n    // a fret number which can have multiple digits. As a result, we must\n    // overwrite getWidth() to return the correct width\n    this.glyph.getWidth = () => this.width;\n  }\n\n  // Set the `stave` to the note\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    const ctx = stave.getContext();\n    this.setContext(ctx);\n\n    // Calculate the fret number width based on font used\n    if (ctx) {\n      this.width = 0;\n      for (let i = 0; i < this.glyphs.length; ++i) {\n        const glyph = this.glyphs[i];\n        const text = '' + glyph.text;\n        if (text.toUpperCase() !== 'X') {\n          ctx.save();\n          ctx.setRawFont(this.render_options.font);\n          glyph.width = ctx.measureText(text).width;\n          ctx.restore();\n          glyph.getWidth = () => glyph.width;\n        }\n        this.width = Math.max(glyph.getWidth(), this.width);\n      }\n      this.glyph.getWidth = () => this.width;\n    }\n\n    // we subtract 1 from `line` because getYForLine expects a 0-based index,\n    // while the position.str is a 1-based index\n    const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      this.stem.setYBounds(this.getStemY(), this.getStemY());\n    }\n\n    return this;\n  }\n\n  // Get the fret positions for the note\n  getPositions(): TabNotePosition[] {\n    return this.positions;\n  }\n\n  // Get the default `x` and `y` coordinates for a modifier at a specific\n  // `position` at a fret position `index`\n  getModifierStartXY(position: number, index: number): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    let x = 0;\n    if (position === Modifier.Position.LEFT) {\n      x = -1 * 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.RIGHT) {\n      x = this.width + 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n      const note_glyph_width = this.glyph.getWidth();\n      x = note_glyph_width / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Get the default line for rest\n  getLineForRest(): number {\n    return Number(this.positions[0].str);\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n    // width is already set during init()\n    this.setPreFormatted(true);\n  }\n\n  // Get the x position for the stem\n  getStemX(): number {\n    return this.getCenterGlyphX();\n  }\n\n  // Get the y position for the stem\n  getStemY(): number {\n    const num_lines = this.checkStave().getNumLines();\n\n    // The decimal staff line amounts provide optimal spacing between the\n    // fret number and the stem\n    const stemUpLine = -0.5;\n    const stemDownLine = num_lines - 0.5;\n    const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n\n    return this.checkStave().getYForLine(stemStartLine);\n  }\n\n  // Get the stem extents for the tabnote\n  getStemExtents(): Record<string, number> {\n    return this.checkStem().getExtents();\n  }\n\n  // Draw the fal onto the context\n  drawFlag(): void {\n    const {\n      beam,\n      glyph,\n      stem_direction,\n      render_options: { draw_stem, glyph_font_scale },\n    } = this;\n    const context = this.checkContext();\n\n    const shouldDrawFlag = beam == undefined && draw_stem;\n\n    // Now it's the flag's turn.\n    if (glyph.flag && shouldDrawFlag) {\n      const flag_x = this.getStemX() + 1;\n      const flag_y = this.getStemY() - this.checkStem().getHeight();\n\n      const flag_code =\n        stem_direction === Stem.DOWN\n          ? glyph.code_flag_downstem // Down stems have flags on the left.\n          : glyph.code_flag_upstem;\n\n      // Draw the Flag\n      Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code, { category: 'flag.tabStem' });\n    }\n  }\n\n  // Render the modifiers onto the context.\n  drawModifiers(): void {\n    this.modifiers.forEach((modifier) => {\n      // Only draw the dots if enabled.\n      if (isDot(modifier) && !this.render_options.draw_dots) {\n        return;\n      }\n\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    });\n  }\n\n  // Render the stem extension through the fret positions\n  drawStemThrough(): void {\n    const stem_x = this.getStemX();\n    const stem_y = this.getStemY();\n    const ctx = this.checkContext();\n\n    const stem_through = this.render_options.draw_stem_through_stave;\n    const draw_stem = this.render_options.draw_stem;\n    if (draw_stem && stem_through) {\n      const total_lines = this.checkStave().getNumLines();\n      const strings_used = this.positions.map((position) => Number(position.str));\n\n      const unused_strings = getUnusedStringGroups(total_lines, strings_used);\n      const stem_lines = getPartialStemLines(stem_y, unused_strings, this.checkStave(), this.getStemDirection());\n\n      ctx.save();\n      ctx.setLineWidth(Stem.WIDTH);\n      stem_lines.forEach((bounds) => {\n        if (bounds.length === 0) return;\n\n        ctx.beginPath();\n        ctx.moveTo(stem_x, bounds[0]);\n        ctx.lineTo(stem_x, bounds[bounds.length - 1]);\n        ctx.stroke();\n        ctx.closePath();\n      });\n      ctx.restore();\n    }\n  }\n\n  // Render the fret positions onto the context\n  drawPositions(): void {\n    const ctx = this.checkContext();\n    const x = this.getAbsoluteX();\n    const ys = this.ys;\n    for (let i = 0; i < this.positions.length; ++i) {\n      const y = ys[i] + this.render_options.y_shift;\n      const glyph = this.glyphs[i];\n\n      // Center the fret text beneath the notation note head\n      const note_glyph_width = this.glyph.getWidth();\n      const tab_x = x + note_glyph_width / 2 - glyph.getWidth() / 2;\n\n      // FIXME: Magic numbers.\n      ctx.clearRect(tab_x - 2, y - 3, glyph.getWidth() + 4, 6);\n\n      if (glyph.code) {\n        Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyph.code);\n      } else {\n        ctx.save();\n        ctx.setRawFont(this.render_options.font);\n        const text = glyph.text.toString();\n        ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\n        ctx.restore();\n      }\n    }\n  }\n\n  // The main rendering function for the entire note.\n  draw(): void {\n    const ctx = this.checkContext();\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    this.setRendered();\n    const render_stem = this.beam == undefined && this.render_options.draw_stem;\n\n    ctx.openGroup('tabnote', undefined, { pointerBBox: true });\n    this.drawPositions();\n    this.drawStemThrough();\n\n    if (this.stem && render_stem) {\n      const stem_x = this.getStemX();\n      this.stem.setNoteHeadXBounds(stem_x, stem_x);\n      ctx.openGroup('stem', undefined, { pointerBBox: true });\n      this.stem.setContext(ctx).draw();\n      ctx.closeGroup();\n    }\n\n    this.drawFlag();\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Ron B. Yeh\n// MIT License\n\nimport { Dot } from 'dot';\nimport { GraceNote } from 'gracenote';\nimport { GraceNoteGroup } from 'gracenotegroup';\nimport { Barline } from 'stavebarline';\n\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { StemmableNote } from './stemmablenote';\nimport { TabNote } from './tabnote';\n\n// Helper functions for checking an object's type, via `instanceof` and `obj.constructor.CATEGORY`.\nexport const isNote = (obj: unknown): obj is Note => isCategory(obj, Note);\nexport const isStemmableNote = (obj: unknown): obj is StemmableNote => isCategory(obj, StemmableNote);\nexport const isStaveNote = (obj: unknown): obj is StaveNote => isCategory(obj, StaveNote);\nexport const isTabNote = (obj: unknown): obj is TabNote => isCategory(obj, TabNote);\nexport const isGraceNote = (obj: unknown): obj is GraceNote => isCategory(obj, GraceNote);\nexport const isGraceNoteGroup = (obj: unknown): obj is GraceNoteGroup => isCategory(obj, GraceNoteGroup);\nexport const isDot = (obj: unknown): obj is Dot => isCategory(obj, Dot);\nexport const isBarline = (obj: unknown): obj is Barline => isCategory(obj, Barline);\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/ban-types */\n\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object is an instance of the provided `cls`.\n * @param cls a JavaScript class, such as `StaveNote`. `cls` is a constructor function, and it has a `prototype` property, and\n *            optionally a `CATEGORY` property (used in VexFlow for flexible type checking).\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` is an instance of `ClassName`, or has a static `CATEGORY` property that matches `ClassName.CATEGORY`.\n */\nexport function isCategory<T>(\n  obj: any,\n  cls: Function & { prototype: T; CATEGORY?: string },\n  checkAncestors: boolean = true\n): obj is T {\n  // obj is NOT an instance of cls if it is: undefined, a number, a primitive string, or null.\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n  let constructorFcn = obj.constructor;\n  if (obj instanceof cls || constructorFcn === cls) {\n    return true;\n  }\n\n  // If instanceof fails, fall back to checking if the object's static .CATEGORY matches the class's .CATEGORY property.\n  const categoryToMatch = cls.CATEGORY;\n  if (categoryToMatch === undefined) {\n    return false;\n  }\n\n  if (checkAncestors) {\n    // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n    while (obj !== null) {\n      constructorFcn = obj.constructor;\n      if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === categoryToMatch) {\n        return true;\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n    return false;\n  } else {\n    // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n    return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === categoryToMatch;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\n\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { isCategory, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\nimport { defined, log } from './util';\nimport { Voice } from './voice';\n\ntype Line = {\n  column: number;\n  line: number;\n  flatLine: boolean;\n  dblSharpLine: boolean;\n  numAcc: number;\n  width: number;\n};\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Accidental.DEBUG) log('Vex.Flow.Accidental', args);\n}\n\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\n\nexport class Accidental extends Modifier {\n  /** Accidental code provided to the constructor. */\n  readonly type: string;\n  /** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\n  static DEBUG: boolean;\n  protected accidental: {\n    code: string;\n    parenRightPaddingAdjustment: number;\n  };\n  public render_options: {\n    parenLeftPadding: number;\n    stroke_px: number;\n    font_scale: number;\n    parenRightPadding: number;\n  };\n  protected cautionary: boolean;\n  // initialised in reset which is called by the constructor\n  protected glyph!: Glyph;\n  protected parenRight?: Glyph;\n  protected parenLeft?: Glyph;\n\n  /** Accidentals category string. */\n  static get CATEGORY(): string {\n    return 'Accidental';\n  }\n\n  /** Arrange accidentals inside a ModifierContext. */\n  static format(accidentals: Accidental[], state: ModifierContextState): void {\n    type AccidentalListItem = {\n      y?: number;\n      line: number;\n      shift: number;\n      acc: Accidental;\n      lineSpace?: number;\n    };\n\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    const noteheadAccidentalPadding = musicFont.lookupMetric('accidental.noteheadAccidentalPadding');\n    const leftShift = state.left_shift + noteheadAccidentalPadding;\n    const accidentalSpacing = musicFont.lookupMetric('accidental.accidentalSpacing');\n    const additionalPadding = musicFont.lookupMetric('accidental.leftPadding'); // padding to the left of all accidentals\n\n    // If there are no accidentals, we needn't format their positions\n    if (!accidentals || accidentals.length === 0) return;\n\n    const accList: AccidentalListItem[] = [];\n    let prevNote = undefined;\n    let shiftL = 0;\n\n    // First determine the accidentals' Y positions from the note.keys\n    for (let i = 0; i < accidentals.length; ++i) {\n      const acc = accidentals[i];\n      const note = acc.getNote();\n      const stave = note.getStave();\n      const index = acc.checkIndex();\n      const props = note.getKeyProps()[index];\n      if (note !== prevNote) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prevNote = note;\n      }\n      if (stave) {\n        const lineSpace = stave.getSpacingBetweenLines();\n        const y = stave.getYForLine(props.line);\n        const accLine = Math.round((y / lineSpace) * 2) / 2;\n        accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n      } else {\n        accList.push({ line: props.line, shift: shiftL, acc });\n      }\n    }\n\n    // Sort accidentals by line number.\n    accList.sort((a, b) => b.line - a.line);\n\n    // FIXME: Confusing name. Each object in this array has a property called `line`.\n    // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n    const lineList: Line[] = [];\n\n    // amount by which all accidentals must be shifted right or left for\n    // stem flipping, notehead shifting concerns.\n    let accShift = 0;\n    let previousLine = undefined;\n\n    // Create an array of unique line numbers (lineList) from accList\n    for (let i = 0; i < accList.length; i++) {\n      const acc = accList[i];\n\n      // if this is the first line, or a new line, add a lineList\n      if (previousLine === undefined || previousLine !== acc.line) {\n        lineList.push({\n          line: acc.line,\n          flatLine: true,\n          dblSharpLine: true,\n          numAcc: 0,\n          width: 0,\n          column: 0,\n        });\n      }\n      // if this accidental is not a flat, the accidental needs 3.0 lines lower\n      // clearance instead of 2.5 lines for b or bb.\n      // FIXME: Naming could use work. acc.acc is very awkward\n      if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n        lineList[lineList.length - 1].flatLine = false;\n      }\n\n      // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n      if (acc.acc.type !== '##') {\n        lineList[lineList.length - 1].dblSharpLine = false;\n      }\n\n      // Track how many accidentals are on this line:\n      lineList[lineList.length - 1].numAcc++;\n\n      // Track the total x_offset needed for this line which will be needed\n      // for formatting lines w/ multiple accidentals:\n\n      // width = accidental width + universal spacing between accidentals\n      lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n\n      // if this accShift is larger, use it to keep first column accidentals in the same line\n      accShift = acc.shift > accShift ? acc.shift : accShift;\n\n      previousLine = acc.line;\n    }\n\n    // ### Place Accidentals in Columns\n    //\n    // Default to a classic triangular layout (middle accidental farthest left),\n    // but follow exceptions as outlined in G. Read's _Music Notation_ and\n    // Elaine Gould's _Behind Bars_.\n    //\n    // Additionally, this implements different vertical collision rules for\n    // flats (only need 2.5 lines clearance below) and double sharps (only\n    // need 2.5 lines of clearance above or below).\n    //\n    // Classic layouts and exception patterns are found in the 'tables.js'\n    // in 'Vex.Flow.accidentalColumnsTable'\n    //\n    // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n    // using as few columns as possible for the verticle structure.\n    //\n    // TODO (?): Allow column to be specified for an accidental at run-time?\n\n    let totalColumns = 0;\n\n    // establish the boundaries for a group of notes with clashing accidentals:\n    for (let i = 0; i < lineList.length; i++) {\n      let noFurtherConflicts = false;\n      const groupStart = i;\n      let groupEnd = i;\n\n      while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n        // if this note conflicts with the next:\n        if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n          // include the next note in the group:\n          groupEnd++;\n        } else {\n          noFurtherConflicts = true;\n        }\n      }\n\n      // Gets an a line from the `lineList`, relative to the current group\n      const getGroupLine = (index: number) => lineList[groupStart + index];\n      const getGroupLines = (indexes: number[]) => indexes.map(getGroupLine);\n      const lineDifference = (indexA: number, indexB: number) => {\n        const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n        return a - b;\n      };\n\n      const notColliding = (...indexPairs: number[][]) =>\n        indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));\n\n      // Set columns for the lines in this group:\n      const groupLength = groupEnd - groupStart + 1;\n\n      // Set the accidental column for each line of the group\n      let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n\n      switch (groupLength) {\n        case 3:\n          if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n            endCase = 'second_on_bottom';\n          }\n          break;\n        case 4:\n          if (notColliding([0, 2], [1, 3])) {\n            endCase = 'spaced_out_tetrachord';\n          }\n          break;\n        case 5:\n          if (endCase === 'b' && notColliding([1, 3])) {\n            endCase = 'spaced_out_pentachord';\n            if (notColliding([0, 2], [2, 4])) {\n              endCase = 'very_spaced_out_pentachord';\n            }\n          }\n          break;\n        case 6:\n          if (notColliding([0, 3], [1, 4], [2, 5])) {\n            endCase = 'spaced_out_hexachord';\n          }\n          if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n            endCase = 'very_spaced_out_hexachord';\n          }\n          break;\n        default:\n          break;\n      }\n\n      let groupMember;\n      let column;\n      // If the group contains more than seven members, use ascending parallel lines\n      // of accidentals, using as few columns as possible while avoiding collisions.\n      if (groupLength >= 7) {\n        // First, determine how many columns to use:\n        let patternLength = 2;\n        let collisionDetected = true;\n        while (collisionDetected === true) {\n          collisionDetected = false;\n          for (let line = 0; line + patternLength < lineList.length; line++) {\n            if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n              collisionDetected = true;\n              patternLength++;\n              break;\n            }\n          }\n        }\n        // Then, assign a column to each line of accidentals\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = ((groupMember - i) % patternLength) + 1;\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n\n        // Otherwise, if the group contains fewer than seven members, use the layouts from\n        // the accidentalsColumnsTable housed in tables.js.\n      } else {\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n      }\n\n      // Increment i to the last note that was set, so that if a lower set of notes\n      // does not conflict at all with this group, it can have its own classic shape.\n      i = groupEnd;\n    }\n\n    // ### Convert Columns to x_offsets\n    //\n    // This keeps columns aligned, even if they have different accidentals within them\n    // which sometimes results in a larger x_offset than is an accidental might need\n    // to preserve the symmetry of the accidental shape.\n    //\n    // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n    // music with complex chord clusters.\n    //\n    // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n    // parallel columns.\n\n    // track each column's max width, which will be used as initial shift of later columns:\n    const columnWidths: number[] = [];\n    const columnXOffsets: number[] = [];\n    for (let i = 0; i <= totalColumns; i++) {\n      columnWidths[i] = 0;\n      columnXOffsets[i] = 0;\n    }\n\n    columnWidths[0] = accShift + leftShift;\n    columnXOffsets[0] = accShift + leftShift;\n\n    // Fill columnWidths with widest needed x-space;\n    // this is what keeps the columns parallel.\n    lineList.forEach((line) => {\n      if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;\n    });\n\n    for (let i = 1; i < columnWidths.length; i++) {\n      // this column's offset = this column's width + previous column's offset\n      columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n    }\n\n    const totalShift = columnXOffsets[columnXOffsets.length - 1];\n    // Set the xShift for each accidental according to column offsets:\n    let accCount = 0;\n    lineList.forEach((line) => {\n      let lineWidth = 0;\n      const lastAccOnLine = accCount + line.numAcc;\n      // handle all of the accidentals on a given line:\n      for (accCount; accCount < lastAccOnLine; accCount++) {\n        const xShift = columnXOffsets[line.column - 1] + lineWidth;\n        accList[accCount].acc.setXShift(xShift);\n        // keep track of the width of accidentals we've added so far, so that when\n        // we loop, we add space for them.\n        lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n        L('Line, accCount, shift: ', line.line, accCount, xShift);\n      }\n    });\n\n    // update the overall layout with the full width of the accidental shapes:\n    state.left_shift += totalShift + additionalPadding;\n  }\n\n  /** Helper function to determine whether two lines of accidentals collide vertically */\n  static checkCollision(line1: Line, line2: Line): boolean {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) {\n      // then line 2 is on top\n      clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n      if (line1.dblSharpLine) clearance -= 0.5;\n    } else {\n      // line 1 is on top\n      clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n      if (line2.dblSharpLine) clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n  }\n\n  /**\n   * Use this method to automatically apply accidentals to a set of `voices`.\n   * The accidentals will be remembered between all the voices provided.\n   * Optionally, you can also provide an initial `keySignature`.\n   */\n  static applyAccidentals(voices: Voice[], keySignature: string): void {\n    const tickPositions: number[] = [];\n    const tickNoteMap: Record<number, Tickable[]> = {};\n\n    // Sort the tickables in each voice by their tick position in the voice.\n    voices.forEach((voice) => {\n      const tickPosition = new Fraction(0, 1);\n      const tickable = voice.getTickables();\n      tickable.forEach((t) => {\n        if (t.shouldIgnoreTicks()) return;\n\n        const notesAtPosition = tickNoteMap[tickPosition.value()];\n\n        if (!notesAtPosition) {\n          tickPositions.push(tickPosition.value());\n          tickNoteMap[tickPosition.value()] = [t];\n        } else {\n          notesAtPosition.push(t);\n        }\n\n        tickPosition.add(t.getTicks());\n      });\n    });\n\n    const music = new Music();\n\n    // Default key signature is C major.\n    if (!keySignature) keySignature = 'C';\n\n    // Get the scale map, which represents the current state of each pitch.\n    const scaleMapKey = music.createScaleMap(keySignature);\n    const scaleMap: Record<string, string> = {};\n\n    tickPositions.forEach((tickPos: number) => {\n      const tickables = tickNoteMap[tickPos];\n\n      // Array to store all pitches that modified accidental states\n      // at this tick position\n      const modifiedPitches: string[] = [];\n\n      const processNote = (t: Tickable) => {\n        // Only StaveNote implements .addAccidental(), which is used below.\n        if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n          return;\n        }\n\n        // Go through each key and determine if an accidental should be applied.\n        const staveNote = t;\n        staveNote.keys.forEach((keyString: string, keyIndex: number) => {\n          const key = music.getNoteParts(keyString.split('/')[0]);\n          const octave = keyString.split('/')[1];\n\n          // Force a natural for every key without an accidental\n          const accidentalString = key.accidental || 'n';\n          const pitch = key.root + accidentalString;\n\n          // Determine if the current pitch has the same accidental\n          // as the scale state\n          if (!scaleMap[key.root + octave]) scaleMap[key.root + octave] = scaleMapKey[key.root];\n          const sameAccidental = scaleMap[key.root + octave] === pitch;\n\n          // Determine if an identical pitch in the chord already\n          // modified the accidental state\n          const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n\n          // Remove accidentals\n          staveNote.getModifiers().forEach((modifier, index) => {\n            if (\n              isCategory(modifier, Accidental) &&\n              modifier.type == accidentalString &&\n              modifier.getIndex() == keyIndex\n            ) {\n              staveNote.getModifiers().splice(index, 1);\n            }\n          });\n\n          // Add the accidental to the StaveNote\n          if (!sameAccidental || (sameAccidental && previouslyModified)) {\n            // Modify the scale map so that the root pitch has an\n            // updated state\n            scaleMap[key.root + octave] = pitch;\n\n            // Create the accidental\n            const accidental = new Accidental(accidentalString);\n\n            // Attach the accidental to the StaveNote\n            staveNote.addAccidental(keyIndex, accidental);\n\n            // Add the pitch to list of pitches that modified accidentals\n            modifiedPitches.push(keyString);\n          }\n        });\n\n        // process grace notes\n        staveNote.getModifiers().forEach((modifier: Modifier) => {\n          if (isGraceNoteGroup(modifier)) {\n            modifier.getGraceNotes().forEach(processNote);\n          }\n        });\n      };\n\n      tickables.forEach(processNote);\n    });\n  }\n\n  /**\n   * Create accidental.\n   * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\n   * For example: `#`, `##`, `b`, `n`, etc.\n   */\n  constructor(type: string) {\n    super();\n\n    L('New accidental: ', type);\n\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      // Font size for glyphs\n      font_scale: 38,\n\n      // Length of stroke across heads above or below the stave.\n      stroke_px: 3,\n\n      // Padding between accidental and parentheses on each side\n      parenLeftPadding: 2,\n      parenRightPadding: 2,\n    };\n\n    this.accidental = Tables.accidentalCodes(this.type);\n    defined(this.accidental, 'ArgumentError', `Unknown accidental type: ${type}`);\n\n    // Cautionary accidentals have parentheses around them\n    this.cautionary = false;\n\n    this.reset();\n  }\n\n  protected reset(): void {\n    const fontScale = this.render_options.font_scale;\n    this.glyph = new Glyph(this.accidental.code, fontScale);\n    this.glyph.setOriginX(1.0);\n\n    if (this.cautionary) {\n      this.parenLeft = new Glyph(Tables.accidentalCodes('{').code, fontScale);\n      this.parenRight = new Glyph(Tables.accidentalCodes('}').code, fontScale);\n      this.parenLeft.setOriginX(1.0);\n      this.parenRight.setOriginX(1.0);\n    }\n  }\n\n  /** Get width in pixels. */\n  getWidth(): number {\n    if (this.cautionary) {\n      const parenLeft = defined(this.parenLeft);\n      const parenRight = defined(this.parenRight);\n      const parenWidth =\n        parenLeft.getMetrics().width +\n        parenRight.getMetrics().width +\n        this.render_options.parenLeftPadding +\n        this.render_options.parenRightPadding;\n      return this.glyph.getMetrics().width + parenWidth;\n    } else {\n      return this.glyph.getMetrics().width;\n    }\n  }\n\n  /** Attach this accidental to `note`, which must be a `StaveNote`. */\n  setNote(note: Note): this {\n    defined(note, 'ArgumentError', `Bad note value: ${note}`);\n\n    this.note = note;\n\n    // Accidentals attached to grace notes are rendered smaller.\n    if (isGraceNote(note)) {\n      this.render_options.font_scale = 25;\n      this.reset();\n    }\n    return this;\n  }\n\n  /** If called, draws parenthesis around accidental. */\n  setAsCautionary(): this {\n    this.cautionary = true;\n    this.render_options.font_scale = 28;\n    this.reset();\n    return this;\n  }\n\n  /** Render accidental onto canvas. */\n  draw(): void {\n    const {\n      type,\n      position,\n      index,\n      cautionary,\n      x_shift,\n      y_shift,\n      glyph,\n      render_options: { parenLeftPadding, parenRightPadding },\n    } = this;\n\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    // Figure out the start `x` and `y` coordinates for note and index.\n    const start = note.getModifierStartXY(position, index);\n    let accX = start.x + x_shift;\n    const accY = start.y + y_shift;\n    L('Rendering: ', type, accX, accY);\n\n    if (!cautionary) {\n      glyph.render(ctx, accX, accY);\n    } else {\n      const parenLeft = defined(this.parenLeft);\n      const parenRight = defined(this.parenRight);\n\n      // Render the accidental in parentheses.\n      parenRight.render(ctx, accX, accY);\n      accX -= parenRight.getMetrics().width;\n      accX -= parenRightPadding;\n      accX -= this.accidental.parenRightPaddingAdjustment;\n      glyph.render(ctx, accX, accY);\n      accX -= glyph.getMetrics().width;\n      accX -= parenLeftPadding;\n      parenLeft.render(ctx, accX, accY);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { log } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (BarNote.DEBUG) log('Vex.Flow.BarNote', args);\n}\n\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'BarNote';\n  }\n\n  protected metrics: { widths: Record<string, number> };\n  // Initialized by the constructor via this.setType(type)\n  protected type!: BarlineType;\n\n  constructor(type: string | BarlineType = BarlineType.SINGLE) {\n    super({ duration: 'b' });\n\n    this.metrics = {\n      widths: {},\n    };\n\n    const TYPE = BarlineType;\n    this.metrics.widths = {\n      [TYPE.SINGLE]: 8,\n      [TYPE.DOUBLE]: 12,\n      [TYPE.END]: 15,\n      [TYPE.REPEAT_BEGIN]: 14,\n      [TYPE.REPEAT_END]: 14,\n      [TYPE.REPEAT_BOTH]: 18,\n      [TYPE.NONE]: 0,\n    };\n\n    // Tell the formatter that bar notes have no duration.\n    this.ignore_ticks = true;\n    this.setType(type);\n  }\n\n  /** Get the type of bar note.*/\n  getType(): BarlineType {\n    return this.type;\n  }\n\n  /** Set the type of bar note. */\n  setType(type: string | BarlineType): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    // Set width to width of relevant `Barline`.\n    this.setWidth(this.metrics.widths[this.type]);\n    return this;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  /** Overridden to ignore. */\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Render note to stave. */\n  draw(): void {\n    const ctx = this.checkContext();\n    L('Rendering bar line at: ', this.getAbsoluteX());\n    if (this.style) this.applyStyle(ctx);\n    const barline = new Barline(this.type);\n    barline.setX(this.getAbsoluteX());\n    barline.draw(this.checkStave());\n    if (this.style) this.restoreStyle(ctx);\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { ClefType } from './clef';\nimport { Glyph } from './glyph';\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\n\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n  static get CATEGORY(): string {\n    return 'ClefNote';\n  }\n\n  protected clef_obj: Clef;\n  protected type: string;\n  protected clef: ClefType;\n\n  constructor(type: string, size?: string, annotation?: string) {\n    super({ duration: 'b' });\n\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /** Set clef type, size and annotation. */\n  setType(type: string, size: string, annotation: string): this {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  /** Get associated clef. */\n  getClef(): ClefType {\n    return this.clef;\n  }\n\n  /** Set associated context. */\n  setContext(context: RenderContext): this {\n    super.setContext(context);\n    this.glyph.setContext(this.getContext());\n    return this;\n  }\n\n  /** Get bounding box. */\n  getBoundingBox(): BoundingBox | undefined {\n    return super.getBoundingBox();\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  /** Set preformatted. */\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Render clef note. */\n  draw(): void {\n    const stave = this.checkStave();\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.getContext());\n    }\n\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n\n    this.glyph.setStave(stave);\n    this.glyph.setYShift(stave.getYForLine(this.clef.line ?? 0) - stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x);\n\n    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n      if (!attachment.getContext()) {\n        attachment.setContext(this.getContext());\n      }\n      attachment.setStave(stave);\n      attachment.setYShift(stave.getYForLine(this.clef_obj.annotation.line) - stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\n\nimport { Note, NoteStruct } from './note';\nimport { RenderContext } from './rendercontext';\nimport { TickContext } from './tickcontext';\nimport { log } from './util';\n\nexport interface CrescendoParams {\n  reverse: boolean;\n  height: number;\n  y: number;\n  end_x: number;\n  begin_x: number;\n}\n\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Crescendo.DEBUG) log('Vex.Flow.Crescendo', args);\n}\n\n// Private helper to draw the hairpin\nfunction renderHairpin(ctx: RenderContext, params: CrescendoParams) {\n  const begin_x = params.begin_x;\n  const end_x = params.end_x;\n  const y = params.y;\n  const half_height = params.height / 2;\n\n  ctx.beginPath();\n\n  if (params.reverse) {\n    ctx.moveTo(begin_x, y - half_height);\n    ctx.lineTo(end_x, y);\n    ctx.lineTo(begin_x, y + half_height);\n  } else {\n    ctx.moveTo(end_x, y - half_height);\n    ctx.lineTo(begin_x, y);\n    ctx.lineTo(end_x, y + half_height);\n  }\n\n  ctx.stroke();\n  ctx.closePath();\n}\n\nexport class Crescendo extends Note {\n  static DEBUG: boolean;\n\n  /** Crescendo category string. */\n  static get CATEGORY(): string {\n    return 'Crescendo';\n  }\n\n  protected decrescendo: boolean;\n  protected height: number;\n  protected line: number;\n  protected options = {\n    // Extensions to the length of the crescendo on either side\n    extend_left: 0,\n    extend_right: 0,\n    // Vertical shift\n    y_shift: 0,\n  };\n\n  // Initialize the crescendo's properties\n  constructor(noteStruct: NoteStruct) {\n    super(noteStruct);\n\n    // Whether the object is a decrescendo\n    this.decrescendo = false;\n\n    // The staff line to be placed on\n    this.line = noteStruct.line || 0;\n\n    // The height at the open end of the cresc/decresc\n    this.height = 15;\n  }\n\n  // Set the line to center the element on\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Set the full height at the open end\n  setHeight(height: number): this {\n    this.height = height;\n    return this;\n  }\n\n  // Set whether the sign should be a descresendo by passing a bool\n  // to `decresc`\n  setDecrescendo(decresc: boolean): this {\n    this.decrescendo = decresc;\n    return this;\n  }\n\n  // Preformat the note\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Render the Crescendo object onto the canvas\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    this.setRendered();\n\n    const tick_context = this.getTickContext();\n    const next_context = TickContext.getNextContext(tick_context);\n\n    const begin_x = this.getAbsoluteX();\n    const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();\n    const y = stave.getYForLine(this.line + -3) + 1;\n\n    L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\n\n    renderHairpin(ctx, {\n      begin_x: begin_x - this.options.extend_left,\n      end_x: end_x + this.options.extend_right,\n      y: y + this.options.y_shift,\n      height: this.height,\n      reverse: this.decrescendo,\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\n\nimport { Element } from './element';\nimport { Note } from './note';\nimport { RuntimeError } from './util';\n\nexport interface CurveOptions {\n  /** Two control points for the bezier curves. */\n  cps?: { x: number; y: number }[];\n  thickness?: number;\n  x_shift?: number;\n  y_shift?: number;\n  position?: string | number;\n  position_end?: string | number;\n  invert?: boolean;\n}\n\nexport enum CurvePosition {\n  NEAR_HEAD = 1,\n  NEAR_TOP = 2,\n}\n\nexport class Curve extends Element {\n  static get CATEGORY(): string {\n    return 'Curve';\n  }\n\n  public render_options: Required<CurveOptions>;\n  protected from: Note;\n  protected to: Note;\n\n  static get Position(): typeof CurvePosition {\n    return CurvePosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      nearHead: CurvePosition.NEAR_HEAD,\n      nearTop: CurvePosition.NEAR_TOP,\n    };\n  }\n\n  // from: Start note\n  // to: End note\n  // options:\n  //    cps: List of control points\n  //    x_shift: pixels to shift\n  //    y_shift: pixels to shift\n  constructor(from: Note, to: Note, options: CurveOptions) {\n    super();\n\n    this.render_options = {\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      position: CurvePosition.NEAR_HEAD,\n      position_end: CurvePosition.NEAR_HEAD,\n      invert: false,\n      cps: [\n        { x: 0, y: 10 },\n        { x: 0, y: 10 },\n      ],\n      ...options,\n    };\n\n    this.from = from;\n    this.to = to;\n  }\n\n  setNotes(from: Note, to: Note): this {\n    if (!from && !to) {\n      throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n    }\n\n    this.from = from;\n    this.to = to;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.from || !this.to;\n  }\n\n  renderCurve(params: { last_y: number; last_x: number; first_y: number; first_x: number; direction: number }): void {\n    const ctx = this.checkContext();\n\n    const x_shift = this.render_options.x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    const first_x = params.first_x + x_shift;\n    const first_y = params.first_y + y_shift;\n    const last_x = params.last_x - x_shift;\n    const last_y = params.last_y + y_shift;\n    const thickness = this.render_options.thickness;\n\n    const cps = this.render_options.cps;\n    const { x: cp0x, y: cp0y } = cps[0];\n    const { x: cp1x, y: cp1y } = cps[1];\n\n    const cp_spacing = (last_x - first_x) / (cps.length + 2);\n\n    ctx.beginPath();\n    ctx.moveTo(first_x, first_y);\n    ctx.bezierCurveTo(\n      first_x + cp_spacing + cp0x,\n      first_y + cp0y * params.direction,\n      last_x - cp_spacing + cp1x,\n      last_y + cp1y * params.direction,\n      last_x,\n      last_y\n    );\n    ctx.bezierCurveTo(\n      last_x - cp_spacing + cp1x,\n      last_y + (cp1y + thickness) * params.direction,\n      first_x + cp_spacing + cp0x,\n      first_y + (cp0y + thickness) * params.direction,\n      first_x,\n      first_y\n    );\n    ctx.stroke();\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.from;\n    const last_note = this.to;\n    let first_x;\n    let last_x;\n    let first_y;\n    let last_y;\n    let stem_direction = 0;\n\n    let metric = 'baseY';\n    let end_metric = 'baseY';\n\n    function getPosition(position: string | number) {\n      return typeof position === 'string' ? Curve.PositionString[position] : position;\n    }\n    const position = getPosition(this.render_options.position);\n    const position_end = getPosition(this.render_options.position_end);\n\n    if (position === CurvePosition.NEAR_TOP) {\n      metric = 'topY';\n      end_metric = 'topY';\n    }\n\n    if (position_end === CurvePosition.NEAR_HEAD) {\n      end_metric = 'baseY';\n    } else if (position_end === CurvePosition.NEAR_TOP) {\n      end_metric = 'topY';\n    }\n\n    if (first_note) {\n      first_x = first_note.getTieRightX();\n      stem_direction = first_note.getStemDirection();\n      first_y = first_note.getStemExtents()[metric];\n    } else {\n      const stave = last_note.checkStave();\n      first_x = stave.getTieStartX();\n      first_y = last_note.getStemExtents()[metric];\n    }\n\n    if (last_note) {\n      last_x = last_note.getTieLeftX();\n      stem_direction = last_note.getStemDirection();\n      last_y = last_note.getStemExtents()[end_metric];\n    } else {\n      const stave = first_note.checkStave();\n      last_x = stave.getTieEndX();\n      last_y = first_note.getStemExtents()[end_metric];\n    }\n\n    this.renderCurve({\n      first_x,\n      last_x,\n      first_y,\n      last_y,\n      direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\n    });\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// A generic text parsing class for VexFlow.\n\nimport { log, RuntimeError } from './util';\n\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (Parser.DEBUG) log('Vex.Flow.Parser', args);\n}\n\nconst NO_ERROR_POS = -1;\n\nexport type Match = string | Match[] | null;\nexport type RuleFunction = () => Rule;\nexport type TriggerFunction = (state?: { matches: Match[] }) => void;\n\nexport interface Rule {\n  // Lexer Rules\n  token?: string; // The token property is a string that is compiled into a RegExp.\n  noSpace?: boolean;\n\n  // Parser Rules\n  expect?: RuleFunction[];\n  zeroOrMore?: boolean;\n  oneOrMore?: boolean;\n  maybe?: boolean;\n  or?: boolean;\n  run?: TriggerFunction;\n}\n\nexport interface Result {\n  success: boolean;\n\n  // Lexer Results\n  pos?: number;\n  incrementPos?: number;\n  matchedString?: string;\n\n  // Parser Results\n  matches?: Match[];\n  numMatches?: number;\n  results?: GroupedResults;\n  errorPos?: number; // Set to NO_ERROR if successful. N if there is an error in the string.\n}\n\n// Represents a mixed array containing Result and/or Result[].\n// The grouping is determined by the structure of the Grammar.\ntype GroupedResults = (Result | Result[])[];\n\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r: Result | Result[]): Match {\n  if ('matchedString' in r) return r.matchedString as string; // string\n  if ('results' in r) return flattenMatches(r.results as Result[]);\n  const results = r as Result[];\n  if (results.length === 1) return flattenMatches(results[0]);\n  if (results.length === 0) return null;\n  return results.map(flattenMatches); // nested array\n}\n\nexport interface Grammar {\n  begin(): RuleFunction;\n}\n\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n  static DEBUG: boolean = false;\n\n  protected grammar: Grammar;\n\n  protected line: string; // Use RegExp to extract tokens from this line.\n  protected pos: number;\n  protected errorPos: number;\n\n  // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n  // the EasyScore grammar in easyscore.ts.\n  constructor(grammar: Grammar) {\n    this.grammar = grammar;\n    this.line = '';\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Parse `line` using current grammar. Returns `{success: true}` if the\n  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n  // where `errorPos` is the location of the error in the string.\n  parse(line: string): Result {\n    this.line = line;\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n    const result = this.expect(this.grammar.begin());\n    result.errorPos = this.errorPos;\n    return result;\n  }\n\n  matchFail(returnPos: number): void {\n    if (this.errorPos === NO_ERROR_POS) this.errorPos = this.pos;\n    this.pos = returnPos;\n  }\n\n  matchSuccess(): void {\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Look for `token` in this.line[this.pos], and return success\n  // if one is found. `token` is specified as a regular expression.\n  matchToken(token: string, noSpace: boolean = false): Result {\n    const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n    const workingLine = this.line.slice(this.pos);\n    const result = workingLine.match(regexp);\n    if (result !== null) {\n      return {\n        success: true,\n        matchedString: result[2],\n        incrementPos: result[1].length,\n        pos: this.pos,\n      };\n    } else {\n      return { success: false, pos: this.pos };\n    }\n  }\n\n  // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n  // set, then return success even if the token is not found, but reset\n  // the position before exiting.\n  // TODO: expectOne(...) is never called with the `maybe` parameter.\n  expectOne(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n\n    let allMatches = true;\n    let oneMatch = false;\n    maybe = maybe === true || rule.maybe === true;\n\n    // Execute all sub rules in sequence.\n    if (rule.expect) {\n      for (const next of rule.expect) {\n        const localPos = this.pos;\n        const result = this.expect(next);\n\n        // If `rule.or` is set, then return success if any one\n        // of the subrules match, else all subrules must match.\n        if (result.success) {\n          results.push(result);\n          oneMatch = true;\n          if (rule.or) break;\n        } else {\n          allMatches = false;\n          if (!rule.or) {\n            this.pos = localPos;\n            break;\n          }\n        }\n      }\n    }\n\n    const gotOne = (rule.or && oneMatch) || allMatches;\n    const success = gotOne || maybe === true;\n    const numMatches = gotOne ? 1 : 0;\n    if (maybe && !gotOne) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n  // then a failed match is also a success (but the position is reset).\n  expectOneOrMore(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n    let numMatches = 0;\n    let more = true;\n\n    do {\n      const result = this.expectOne(rule);\n      if (result.success && result.results) {\n        numMatches++;\n        results.push(result.results as Result[]);\n      } else {\n        more = false;\n      }\n    } while (more);\n\n    const success = numMatches > 0 || maybe === true;\n    if (maybe && !(numMatches > 0)) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n  expectZeroOrMore(rule: Rule): Result {\n    return this.expectOneOrMore(rule, true);\n  }\n\n  // Execute the rule produced by the provided `rules` function. This\n  // offloads to one of the above matchers and consolidates the results. It is also\n  // responsible for executing any code triggered by the rule (in `rule.run`.)\n  expect(ruleFunc: RuleFunction): Result {\n    L('Evaluating rule function:', ruleFunc);\n    if (!ruleFunc) {\n      throw new RuntimeError('Invalid rule function');\n    }\n    let result: Result;\n\n    // Get rule from Grammar class.\n    // expect(...) handles both lexing & parsing:\n    // - lexer rules produce tokens.\n    // - parser rules produce expressions which may trigger code via the\n    //   { run: () => ... } trigger functions in easyscore.ts.\n    //   These functions build the VexFlow objects that are displayed on screen.\n    const rule: Rule = ruleFunc.bind(this.grammar)();\n    if (rule.token) {\n      // A lexer rule has a `token` property.\n      // Base case: parse the regex and throw an error if the\n      // line doesn't match.\n      result = this.matchToken(rule.token, rule.noSpace === true);\n      if (result.success) {\n        // Token match! Update position and throw away parsed portion\n        // of string.\n        this.pos += result.incrementPos as number;\n      }\n    } else if (rule.expect) {\n      // A parser rule has an `expect` property.\n      if (rule.oneOrMore) {\n        result = this.expectOneOrMore(rule);\n      } else if (rule.zeroOrMore) {\n        result = this.expectZeroOrMore(rule);\n      } else {\n        result = this.expectOne(rule);\n      }\n    } else {\n      L(rule);\n      throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n    }\n\n    // If there's a trigger attached to this rule, then run it.\n    // Make the matches accessible through `state.matches` in the\n    // `run: (state) => ...` trigger.\n    const matches: Match[] = [];\n    result.matches = matches;\n    if (result.results) {\n      result.results.forEach((r) => matches.push(flattenMatches(r)));\n    }\n    if (rule.run && result.success) {\n      rule.run({ matches });\n    }\n    return result;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Stem } from 'stem';\n\nimport { Accidental } from './accidental';\nimport { Articulation } from './articulation';\nimport { Factory } from './factory';\nimport { FretHandFinger } from './frethandfinger';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { Grammar, Match, Parser, Result, Rule, RuleFunction } from './parser';\nimport { RenderContext } from './rendercontext';\nimport { StaveNote } from './stavenote';\nimport { TupletOptions } from './tuplet';\nimport { defined, log, RuntimeError } from './util';\nimport { Voice } from './voice';\n\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (EasyScore.DEBUG) log('Vex.Flow.EasyScore', args);\n}\n\n// eslint-disable-next-line\ntype CommitHook = (obj: any, note: StaveNote, builder: Builder) => void;\n\nclass EasyScoreGrammar implements Grammar {\n  builder: Builder;\n\n  constructor(builder: Builder) {\n    this.builder = builder;\n  }\n\n  begin(): RuleFunction {\n    return this.LINE;\n  }\n\n  LINE(): Rule {\n    return {\n      expect: [this.PIECE, this.PIECES, this.EOL],\n    };\n  }\n  PIECE(): Rule {\n    return {\n      expect: [this.CHORDORNOTE, this.PARAMS],\n      run: () => this.builder.commitPiece(),\n    };\n  }\n  PIECES(): Rule {\n    return {\n      expect: [this.COMMA, this.PIECE],\n      zeroOrMore: true,\n    };\n  }\n  PARAMS(): Rule {\n    return {\n      expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n    };\n  }\n  CHORDORNOTE(): Rule {\n    return {\n      expect: [this.CHORD, this.SINGLENOTE],\n      or: true,\n    };\n  }\n  CHORD(): Rule {\n    return {\n      expect: [this.LPAREN, this.NOTES, this.RPAREN],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addChord(state!.matches[1] as Match[]),\n    };\n  }\n  NOTES(): Rule {\n    return {\n      expect: [this.NOTE],\n      oneOrMore: true,\n    };\n  }\n  NOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n    };\n  }\n  SINGLENOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n      run: (state) => {\n        // eslint-disable-next-line\n        const s = state!;\n        this.builder.addSingleNote(s.matches[0] as string, s.matches[1] as string, s.matches[2] as string);\n      },\n    };\n  }\n  ACCIDENTAL(): Rule {\n    return {\n      expect: [this.MICROTONES, this.ACCIDENTALS],\n      maybe: true,\n      or: true,\n    };\n  }\n  DOTS(): Rule {\n    return {\n      expect: [this.DOT],\n      zeroOrMore: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDots(state!.matches),\n    };\n  }\n  TYPE(): Rule {\n    return {\n      expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteType(state!.matches[2] as string),\n    };\n  }\n  DURATION(): Rule {\n    return {\n      expect: [this.SLASH, this.DURATIONS],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDuration(state!.matches[1] as string),\n    };\n  }\n  OPTS(): Rule {\n    return {\n      expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n      maybe: true,\n    };\n  }\n  KEYVALS(): Rule {\n    return {\n      expect: [this.COMMA, this.KEYVAL],\n      zeroOrMore: true,\n    };\n  }\n  KEYVAL(): Rule {\n    const unquote = (str: string) => str.slice(1, -1);\n\n    return {\n      expect: [this.KEY, this.EQUALS, this.VAL],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addNoteOption(state!.matches[0] as string, unquote(state!.matches[2] as string)),\n    };\n  }\n  VAL(): Rule {\n    return {\n      expect: [this.SVAL, this.DVAL],\n      or: true,\n    };\n  }\n\n  KEY(): Rule {\n    return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n  }\n  DVAL(): Rule {\n    return { token: '[\"][^\"]*[\"]' };\n  }\n  SVAL(): Rule {\n    return { token: \"['][^']*[']\" };\n  }\n  NOTENAME(): Rule {\n    return { token: '[a-gA-G]' };\n  }\n  OCTAVE(): Rule {\n    return { token: '[0-9]+' };\n  }\n  ACCIDENTALS(): Rule {\n    return { token: 'bb|b|##|#|n' };\n  }\n  MICROTONES(): Rule {\n    return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n  }\n  DURATIONS(): Rule {\n    return { token: '[0-9whq]+' };\n  }\n  TYPES(): Rule {\n    return { token: '[rRsSxX]' };\n  }\n  LPAREN(): Rule {\n    return { token: '[(]' };\n  }\n  RPAREN(): Rule {\n    return { token: '[)]' };\n  }\n  COMMA(): Rule {\n    return { token: '[,]' };\n  }\n  DOT(): Rule {\n    return { token: '[.]' };\n  }\n  SLASH(): Rule {\n    return { token: '[/]' };\n  }\n  MAYBESLASH(): Rule {\n    return { token: '[/]?' };\n  }\n  EQUALS(): Rule {\n    return { token: '[=]' };\n  }\n  LBRACKET(): Rule {\n    return { token: '\\\\[' };\n  }\n  RBRACKET(): Rule {\n    return { token: '\\\\]' };\n  }\n  EOL(): Rule {\n    return { token: '$' };\n  }\n}\n\ninterface NotePiece {\n  key: string;\n  accid?: string | null;\n  octave?: string;\n}\n\nclass Piece {\n  chord: NotePiece[] = [];\n  duration: string;\n  dots: number = 0;\n  type?: string;\n  options: { [x: string]: string } = {};\n  constructor(duration: string) {\n    this.duration = duration;\n  }\n}\n\ninterface BuilderElements {\n  notes: StaveNote[];\n  accidentals: (Accidental | undefined)[][];\n}\n\n// Extending Record<string, any> allows arbitrary properties via Builder.reset() & EasyScore.parse().\n// eslint-disable-next-line\nexport interface BuilderOptions extends Record<string, any> {\n  stem?: string;\n  clef?: string;\n}\n\nexport class Builder {\n  factory: Factory;\n  // Initialized by the constructor via this.reset().\n  elements!: BuilderElements;\n  // Initialized by the constructor via this.reset().\n  options!: BuilderOptions;\n  // Initialized by the constructor via this.resetPiece().\n  piece!: Piece;\n  commitHooks: CommitHook[] = [];\n  rollingDuration!: string;\n\n  constructor(factory: Factory) {\n    this.factory = factory;\n    this.reset();\n  }\n\n  reset(options?: BuilderOptions): void {\n    this.options = {\n      stem: 'auto',\n      clef: 'treble',\n      ...options,\n    };\n    this.elements = { notes: [], accidentals: [] };\n    this.rollingDuration = '8';\n    this.resetPiece();\n  }\n\n  getFactory(): Factory {\n    return this.factory;\n  }\n\n  getElements(): BuilderElements {\n    return this.elements;\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.commitHooks.push(commitHook);\n  }\n\n  resetPiece(): void {\n    L('resetPiece');\n    this.piece = new Piece(this.rollingDuration);\n  }\n\n  setNoteDots(dots: Match[]): void {\n    L('setNoteDots:', dots);\n    if (dots) this.piece.dots = dots.length;\n  }\n\n  setNoteDuration(duration?: string): void {\n    L('setNoteDuration:', duration);\n    this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n  }\n\n  setNoteType(type?: string): void {\n    L('setNoteType:', type);\n    if (type) this.piece.type = type;\n  }\n\n  addNoteOption(key: string, value: string): void {\n    L('addNoteOption: key:', key, 'value:', value);\n    this.piece.options[key] = value;\n  }\n\n  addNote(key?: string, accid?: string | null, octave?: string): void {\n    L('addNote:', key, accid, octave);\n    this.piece.chord.push({\n      key: key as string,\n      accid,\n      octave,\n    });\n  }\n\n  addSingleNote(key: string, accid?: string | null, octave?: string): void {\n    L('addSingleNote:', key, accid, octave);\n    this.addNote(key, accid, octave);\n  }\n\n  // notes is an array with 3 entries\n  addChord(notes: Match[]): void {\n    L('startChord');\n    if (typeof notes[0] !== 'object') {\n      this.addSingleNote(notes[0]);\n    } else {\n      notes.forEach((n) => {\n        if (n) this.addNote(...(n as string[])); // n => [string, string | null, string]\n      });\n    }\n    L('endChord');\n  }\n\n  commitPiece(): void {\n    L('commitPiece');\n    const { factory } = this;\n\n    if (!factory) return;\n\n    const options = { ...this.options, ...this.piece.options };\n\n    // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n    // e.g., auto | up | down\n    const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n    // e.g., treble | bass\n    const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n\n    const { chord, duration, dots, type } = this.piece;\n\n    // Create a string[] that will be assigned to the .keys property of the StaveNote.\n    // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n    // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n    const standardAccidentals = Music.accidentals;\n    const keys = chord.map(\n      (notePiece) =>\n        notePiece.key +\n        (standardAccidentals.includes(notePiece.accid ?? '') ? notePiece.accid : '') +\n        '/' +\n        notePiece.octave\n    );\n    const auto_stem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n\n    // Build a StaveNote using the information we gathered.\n    const note = factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });\n    if (!auto_stem) note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n\n    // Attach accidentals.\n    const accidentals: (Accidental | undefined)[] = [];\n    chord.forEach((notePiece: NotePiece, index: number) => {\n      const accid = notePiece.accid;\n      if (typeof accid === 'string') {\n        const accidental = factory.Accidental({ type: accid });\n        note.addAccidental(index, accidental);\n        accidentals.push(accidental);\n      } else {\n        accidentals.push(undefined);\n      }\n    });\n\n    // Attach dots.\n    for (let i = 0; i < dots; i++) note.addDotToAll();\n\n    this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n\n    this.elements.notes.push(note);\n    this.elements.accidentals.push(accidentals);\n    this.resetPiece();\n  }\n}\n\nexport interface EasyScoreOptions {\n  factory?: Factory;\n  builder?: Builder;\n  commitHooks?: CommitHook[];\n  throwOnError?: boolean;\n}\n\n// Extending Record<string, any> allows arbitrary properties via set(defaults).\n// eslint-disable-next-line\nexport interface EasyScoreDefaults extends Record<string, any> {\n  clef?: string;\n  time?: string;\n  stem?: string;\n}\n\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options: { id?: string }, note: StaveNote) {\n  if (options.id === undefined) return;\n  note.setAttribute('id', options.id);\n}\n\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options: { class?: string }, note: StaveNote) {\n  if (options.class === undefined) return;\n  options.class.split(commaSeparatedRegex).forEach((className: string) => note.addClass(className));\n}\n\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n  static DEBUG: boolean = false;\n\n  defaults: EasyScoreDefaults = {\n    clef: 'treble',\n    time: '4/4',\n    stem: 'auto',\n  };\n\n  // options, factory, builder, grammar, and parser are all\n  // initialized by the constructor via this.setOptions().\n  options!: EasyScoreOptions;\n  factory!: Factory;\n  builder!: Builder;\n  grammar!: EasyScoreGrammar;\n  parser!: Parser;\n\n  constructor(options: EasyScoreOptions = {}) {\n    this.setOptions(options);\n  }\n\n  /**\n   * Set the score defaults.\n   * clef must be set appropriately to avoid errors when adding Staves.\n   * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n   * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n   * @param defaults.stem default stem arrangement (auto | up | down)\n   * @returns this\n   */\n  set(defaults: EasyScoreDefaults): this {\n    this.defaults = { ...this.defaults, ...defaults };\n    return this;\n  }\n\n  /**\n   * @param options.factory is required.\n   * @returns this\n   */\n  setOptions(options: EasyScoreOptions): this {\n    // eslint-disable-next-line\n    const factory = options.factory!; // ! operator, because options.factory was set in Factory.EasyScore().\n    const builder = options.builder ?? new Builder(factory);\n\n    this.options = {\n      commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook],\n      throwOnError: false,\n      ...options,\n      factory,\n      builder,\n    };\n\n    this.factory = factory;\n    this.builder = builder;\n    this.grammar = new EasyScoreGrammar(this.builder);\n    this.parser = new Parser(this.grammar);\n    this.options.commitHooks?.forEach((commitHook) => this.addCommitHook(commitHook));\n    return this;\n  }\n\n  setContext(context: RenderContext): this {\n    this.factory.setContext(context);\n    return this;\n  }\n\n  parse(line: string, options: BuilderOptions = {}): Result {\n    this.builder.reset(options);\n    const result = this.parser.parse(line);\n    if (!result.success && this.options.throwOnError) {\n      L(result);\n      throw new RuntimeError('Error parsing line: ' + line);\n    }\n    return result;\n  }\n\n  beam(notes: StaveNote[], options?: { autoStem?: boolean; secondaryBeamBreaks?: number[] }): StaveNote[] {\n    this.factory.Beam({ notes, options });\n    return notes;\n  }\n\n  tuplet(notes: StaveNote[], options?: TupletOptions): StaveNote[] {\n    this.factory.Tuplet({ notes, options });\n    return notes;\n  }\n\n  notes(line: string, options: BuilderOptions = {}): StaveNote[] {\n    options = { clef: this.defaults.clef, stem: this.defaults.stem, ...options };\n    this.parse(line, options);\n    return this.builder.getElements().notes;\n  }\n\n  voice(notes: Note[], options: { time?: string; options?: { softmaxFactor: number } } = {}): Voice {\n    options = { time: this.defaults.time, ...options };\n    return this.factory.Voice(options).addTickables(notes);\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.builder.addCommitHook(commitHook);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n\nimport { ModifierContext } from './modifiercontext';\nimport { NoteStruct } from './note';\nimport { Stave } from './stave';\nimport { StemmableNote } from './stemmablenote';\nimport { RuntimeError } from './util';\n\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\n\nexport class GhostNote extends StemmableNote {\n  static get CATEGORY(): string {\n    return 'GhostNote';\n  }\n\n  constructor(parameter: string | NoteStruct) {\n    if (!parameter) {\n      throw new RuntimeError('BadArguments', ERROR_MSG);\n    }\n\n    let noteStruct;\n    if (typeof parameter === 'string') {\n      // Preserve backwards-compatibility\n      noteStruct = { duration: parameter };\n    } else if (typeof parameter === 'object') {\n      noteStruct = parameter;\n    } else {\n      throw new RuntimeError('BadArguments', ERROR_MSG);\n    }\n\n    super(noteStruct);\n\n    // Note properties\n    this.setWidth(0);\n  }\n\n  /**\n   * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n   */\n  isRest(): boolean {\n    return true;\n  }\n\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    return this;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    // Draw the modifiers\n    this.setRendered();\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { BoundingBox } from './boundingbox';\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\n\nexport interface GlyphNoteOptions {\n  ignoreTicks?: boolean;\n  line?: number;\n}\n\nexport class GlyphNote extends Note {\n  static get CATEGORY(): string {\n    return 'GlyphNote';\n  }\n\n  protected options: Required<GlyphNoteOptions>;\n\n  constructor(glyph: Glyph | undefined, noteStruct: NoteStruct, options?: GlyphNoteOptions) {\n    super(noteStruct);\n    this.options = {\n      ignoreTicks: false,\n      line: 2,\n      ...options,\n    };\n\n    // Note properties\n    this.ignore_ticks = this.options.ignoreTicks;\n    if (glyph) {\n      this.setGlyph(glyph);\n    }\n  }\n\n  setGlyph(glyph: Glyph): this {\n    this.glyph = glyph;\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return this.glyph.getBoundingBox();\n  }\n\n  preFormat(): this {\n    if (!this.preFormatted && this.modifierContext) {\n      this.modifierContext.preFormat();\n    }\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n    }\n    ctx.closeGroup();\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n    ctx.openGroup('glyphNote', this.getAttribute('id'));\n\n    // Context is set when setStave is called on Note\n    const glyph = this.glyph;\n    if (!glyph.getContext()) {\n      glyph.setContext(ctx);\n    }\n\n    glyph.setStave(stave);\n    glyph.setYShift(stave.getYForLine(this.options.line) - stave.getYForGlyphs());\n\n    const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n    glyph.renderToStave(x);\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Mark Meeus 2019\n\nimport { KeySignature } from './keysignature';\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\n\nexport class KeySigNote extends Note {\n  static get CATEGORY(): string {\n    return 'KeySigNote';\n  }\n\n  protected keySignature: KeySignature;\n\n  constructor(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string[]) {\n    super({ duration: 'b' });\n\n    this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    this.keySignature.setStave(this.checkStave());\n    this.setWidth(this.keySignature.getWidth());\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkStave().checkContext();\n    this.setRendered();\n    this.keySignature.setX(this.getAbsoluteX());\n    this.keySignature.setContext(ctx);\n    this.keySignature.draw();\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests.\n\nimport { isBarline } from 'typeguard';\n\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { defined } from './util';\n\nexport interface MultimeasureRestRenderOptions {\n  /** Extracted by Factory.MultiMeasureRest() and passed to the MultiMeasureRest constructor. */\n  number_of_measures: number;\n\n  /** Use rest symbols. Defaults to `false`, which renders a thick horizontal line with serifs at both ends. */\n  use_symbols?: boolean;\n\n  /** Horizontal spacing between rest symbol glyphs (if `use_symbols` is `true`).*/\n  symbol_spacing?: number;\n\n  /** Show the number of measures at the top. Defaults to `true`. */\n  show_number?: boolean;\n\n  /** Vertical position of the \"number of measures\" text (measured in stave lines). Defaults to -0.5, which is above the stave. 6.5 is below the stave. */\n  number_line?: number;\n\n  /** Font size of the \"number of measures\" text. */\n  number_glyph_point?: number;\n\n  /** Left padding from `stave.getX()`. */\n  padding_left?: number;\n\n  /** Right padding from `stave.getX() + stave.getWidth()` */\n  padding_right?: number;\n\n  /** Vertical position of the rest line or symbols, expressed as stave lines. Default: 2. The top stave line is 1, and the bottom stave line is 5. */\n  line?: number;\n\n  /** Defaults to the number of vertical pixels between stave lines. Used for serif height or 2-bar / 4-bar symbol height. */\n  spacing_between_lines_px?: number;\n\n  /** Size of the semibreve (1-bar) rest symbol. Other symbols are scaled accordingly. */\n  semibreve_rest_glyph_scale?: number;\n\n  /** Thickness of the rest line. Used when `use_symbols` is false. Defaults to half the space between stave lines. */\n  line_thickness?: number;\n\n  /** Thickness of the rest line's serif. Used when `use_symbols` is false. */\n  serif_thickness?: number;\n}\n\nlet semibreve_rest: { glyph_font_scale: number; glyph_code: string; width: number } | undefined;\n\nfunction get_semibreve_rest() {\n  if (!semibreve_rest) {\n    const noteHead = new NoteHead({ duration: 'w', note_type: 'r' });\n    semibreve_rest = {\n      glyph_font_scale: noteHead.render_options.glyph_font_scale,\n      glyph_code: noteHead.glyph_code,\n      width: noteHead.getWidth(),\n    };\n  }\n  return semibreve_rest;\n}\n\nexport class MultiMeasureRest extends Element {\n  static get CATEGORY(): string {\n    return 'MultiMeasureRest';\n  }\n\n  public render_options: Required<MultimeasureRestRenderOptions>;\n  protected xs = { left: NaN, right: NaN };\n  protected number_of_measures: number;\n\n  protected stave?: Stave;\n\n  private hasPaddingLeft = false;\n  private hasPaddingRight = false;\n  private hasLineThickness = false;\n  private hasSymbolSpacing = false;\n\n  /**\n   *\n   * @param number_of_measures Number of measures.\n   * @param options The options object.\n   */\n  constructor(number_of_measures: number, options: MultimeasureRestRenderOptions) {\n    super();\n\n    this.number_of_measures = number_of_measures;\n\n    // Keep track of whether these four options were provided.\n    this.hasPaddingLeft = typeof options.padding_left === 'number';\n    this.hasPaddingRight = typeof options.padding_right === 'number';\n    this.hasLineThickness = typeof options.line_thickness === 'number';\n    this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';\n\n    this.render_options = {\n      use_symbols: false,\n      show_number: true,\n      number_line: -0.5,\n      number_glyph_point: this.musicFont.lookupMetric('digits.point'), // same as TimeSignature.\n      line: 2,\n      spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, // same as Stave.\n      serif_thickness: 2,\n      semibreve_rest_glyph_scale: Tables.DEFAULT_NOTATION_FONT_SCALE, // same as NoteHead.\n      padding_left: 0,\n      padding_right: 0,\n      line_thickness: 5,\n      symbol_spacing: 0,\n      ...options,\n    };\n\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n    this.render_options.number_line += fontLineShift;\n  }\n\n  getXs(): { left: number; right: number } {\n    return this.xs;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  drawLine(stave: Stave, ctx: RenderContext, left: number, right: number, spacingBetweenLines: number): void {\n    const options = this.render_options;\n\n    const y = stave.getYForLine(options.line);\n    const padding = (right - left) * 0.1;\n    left += padding;\n    right -= padding;\n\n    let lineThicknessHalf;\n    if (this.hasLineThickness) {\n      lineThicknessHalf = options.line_thickness * 0.5;\n    } else {\n      lineThicknessHalf = spacingBetweenLines * 0.25;\n    }\n    const serifThickness = options.serif_thickness;\n    const top = y - spacingBetweenLines;\n    const bot = y + spacingBetweenLines;\n    const leftIndented = left + serifThickness;\n    const rightIndented = right - serifThickness;\n    const lineTop = y - lineThicknessHalf;\n    const lineBottom = y + lineThicknessHalf;\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(left, top);\n    ctx.lineTo(leftIndented, top);\n    ctx.lineTo(leftIndented, lineTop);\n    ctx.lineTo(rightIndented, lineTop);\n    ctx.lineTo(rightIndented, top);\n    ctx.lineTo(right, top);\n    ctx.lineTo(right, bot);\n    ctx.lineTo(rightIndented, bot);\n    ctx.lineTo(rightIndented, lineBottom);\n    ctx.lineTo(leftIndented, lineBottom);\n    ctx.lineTo(leftIndented, bot);\n    ctx.lineTo(left, bot);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  drawSymbols(stave: Stave, ctx: RenderContext, left: number, right: number, spacingBetweenLines: number): void {\n    const n4 = Math.floor(this.number_of_measures / 4);\n    const n = this.number_of_measures % 4;\n    const n2 = Math.floor(n / 2);\n    const n1 = n % 2;\n\n    const options = this.render_options;\n\n    // FIXME: TODO: invalidate semibreve_rest at the appropriate time\n    // (e.g., if the system font settings are changed).\n    semibreve_rest = undefined;\n\n    const rest = get_semibreve_rest();\n    const rest_scale = options.semibreve_rest_glyph_scale;\n    const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);\n    const glyphs = {\n      2: {\n        width: rest_width * 0.5,\n        height: spacingBetweenLines,\n      },\n      1: {\n        width: rest_width,\n      },\n    };\n\n    /* 10: normal spacingBetweenLines */\n    const spacing = this.hasSymbolSpacing ? options.symbol_spacing : 10;\n\n    const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n    let x = left + (right - left) * 0.5 - width * 0.5;\n    const line = options.line;\n    const yTop = stave.getYForLine(line - 1);\n    const yMiddle = stave.getYForLine(line);\n    const yBottom = stave.getYForLine(line + 1);\n\n    ctx.save();\n    ctx.setStrokeStyle('none');\n    ctx.setLineWidth(0);\n\n    for (let i = 0; i < n4; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n2; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n1; ++i) {\n      Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);\n      x += glyphs[1].width + spacing;\n    }\n\n    ctx.restore();\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const stave = this.checkStave();\n\n    let left = stave.getNoteStartX();\n    let right = stave.getNoteEndX();\n\n    // FIXME: getNoteStartX() returns x + 5(barline width)\n    //        getNoteEndX() returns x + width(no barline width)\n    // See Stave constructor. How do we fix this?\n    // Here, we subtract the barline width.\n    const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n    if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n      left -= begModifiers[0].getWidth();\n    }\n\n    const options = this.render_options;\n    if (this.hasPaddingLeft) {\n      left = stave.getX() + options.padding_left;\n    }\n    if (this.hasPaddingRight) {\n      right = stave.getX() + stave.getWidth() - options.padding_right;\n    }\n\n    this.xs.left = left;\n    this.xs.right = right;\n\n    const spacingBetweenLines = options.spacing_between_lines_px;\n    if (options.use_symbols) {\n      this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\n    } else {\n      this.drawLine(stave, ctx, left, right, spacingBetweenLines);\n    }\n\n    if (options.show_number) {\n      const timeSpec = '/' + this.number_of_measures;\n      const timeSig = new TimeSignature(timeSpec, 0, false);\n      timeSig.point = options.number_glyph_point;\n      timeSig.setTimeSig(timeSpec);\n      timeSig.setStave(stave);\n      timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\n      timeSig.bottomLine = options.number_line;\n      timeSig.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { RenderContext } from './rendercontext';\nimport { StaveNote } from './stavenote';\nimport { FontInfo } from './types/common';\nimport { log, RuntimeError } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (PedalMarking.DEBUG) log('Vex.Flow.PedalMarking', args);\n}\n\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name: string, context: RenderContext, x: number, y: number, point: number): void {\n  const glyph_data = PedalMarking.GLYPHS[name];\n  const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\n  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n  /** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'PedalMarking';\n  }\n\n  protected line: number;\n  protected type: number;\n  protected custom_depress_text: string;\n  protected custom_release_text: string;\n  public render_options: {\n    color: string;\n    bracket_height: number;\n    text_margin_right: number;\n    bracket_line_width: number;\n  };\n  protected font: FontInfo;\n  protected notes: StaveNote[];\n\n  /** Glyph data */\n  static readonly GLYPHS: Record<string, { code: string; y_shift: number; x_shift: number }> = {\n    pedal_depress: {\n      code: 'keyboardPedalPed',\n      x_shift: -10,\n      y_shift: 0,\n    },\n    pedal_release: {\n      code: 'keyboardPedalUp',\n      x_shift: -2,\n      y_shift: 3,\n    },\n  };\n\n  /** Pedal type as number. */\n  static readonly type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n  };\n\n  /** Pedal type as string. */\n  static readonly typeString: Record<string, number> = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n  };\n\n  /**\n   * Create a sustain pedal marking. Returns the defaults PedalMarking.\n   * Which uses the traditional \"Ped\" and \"*\"\" markings.\n   */\n  static createSustain(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    return pedal;\n  }\n\n  /** Create a sostenuto pedal marking */\n  static createSostenuto(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.MIXED);\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n  }\n\n  /** Create an una corda pedal marking */\n  static createUnaCorda(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.TEXT);\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n  }\n\n  constructor(notes: StaveNote[]) {\n    super();\n\n    this.notes = notes;\n    this.type = PedalMarking.type.TEXT;\n    this.line = 0;\n\n    // Custom text for the release/depress markings\n    this.custom_depress_text = '';\n    this.custom_release_text = '';\n\n    this.font = {\n      family: 'Times New Roman',\n      size: 12,\n      weight: 'italic bold',\n    };\n\n    this.render_options = {\n      bracket_height: 10,\n      text_margin_right: 6,\n      bracket_line_width: 1,\n      color: 'black',\n    };\n  }\n\n  /** Set pedal type. */\n  setType(type: string | number): this {\n    type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n\n    if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  /**\n   * Set custom text for the `depress`/`release` pedal markings. No text is\n   * set if the parameter is falsy.\n   */\n  setCustomText(depress: string, release?: string): this {\n    this.custom_depress_text = depress || '';\n    this.custom_release_text = release || '';\n    return this;\n  }\n\n  /** Set the staff line to render the markings on. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Draw the bracket based pedal markings. */\n  drawBracketed(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n    let prev_x: number;\n    let prev_y: number;\n\n    // Iterate through each note\n    this.notes.forEach((note, index, notes) => {\n      // Each note triggers the opposite pedal action\n      is_pedal_depressed = !is_pedal_depressed;\n\n      // Get the initial coordinates for the note\n      const x = note.getAbsoluteX();\n      const y = note.checkStave().getYForBottomText(this.line + 3);\n\n      // Throw if current note is positioned before the previous note\n      if (x < prev_x) {\n        throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n      }\n\n      // Determine if the previous or next note are the same\n      // as the current note. We need to keep track of this for\n      // when adjustments are made for the release+depress action\n      const next_is_same = notes[index + 1] === note;\n      const prev_is_same = notes[index - 1] === note;\n\n      let x_shift = 0;\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      if (is_pedal_depressed) {\n        // Adjustment for release+depress\n        x_shift = prev_is_same ? 5 : 0;\n\n        if (this.type === PedalMarking.type.MIXED && !prev_is_same) {\n          // For MIXED style, start with text instead of bracket\n          if (this.custom_depress_text) {\n            // If we have custom text, use instead of the default \"Ped\" glyph\n            const text_width = ctx.measureText(this.custom_depress_text).width;\n            ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n            x_shift = text_width / 2 + this.render_options.text_margin_right;\n          } else {\n            // Render the Ped glyph in position\n            drawPedalGlyph('pedal_depress', ctx, x, y, point);\n            x_shift = 20 + this.render_options.text_margin_right;\n          }\n        } else {\n          // Draw start bracket\n          ctx.beginPath();\n          ctx.moveTo(x, y - this.render_options.bracket_height);\n          ctx.lineTo(x + x_shift, y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      } else {\n        // Adjustment for release+depress\n        x_shift = next_is_same ? -5 : 0;\n\n        // Draw end bracket\n        ctx.beginPath();\n        ctx.moveTo(prev_x, prev_y);\n        ctx.lineTo(x + x_shift, y);\n        ctx.lineTo(x, y - this.render_options.bracket_height);\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      // Store previous coordinates\n      prev_x = x + x_shift;\n      prev_y = y;\n    });\n  }\n\n  /**\n   * Draw the text based pedal markings. This defaults to the traditional\n   * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n   */\n  drawText(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n\n    // Iterate through each note, placing glyphs or custom text accordingly\n    this.notes.forEach((note) => {\n      is_pedal_depressed = !is_pedal_depressed;\n      const stave = note.checkStave();\n      const x = note.getAbsoluteX();\n      const y = stave.getYForBottomText(this.line + 3);\n\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      let text_width = 0;\n      if (is_pedal_depressed) {\n        if (this.custom_depress_text) {\n          text_width = ctx.measureText(this.custom_depress_text).width;\n          ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_depress', ctx, x, y, point);\n        }\n      } else {\n        if (this.custom_release_text) {\n          text_width = ctx.measureText(this.custom_release_text).width;\n          ctx.fillText(this.custom_release_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_release', ctx, x, y, point);\n        }\n      }\n    });\n  }\n\n  /** Render the pedal marking in position on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setStrokeStyle(this.render_options.color);\n    ctx.setFillStyle(this.render_options.color);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    L('Rendering Pedal Marking');\n\n    if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n      ctx.setLineWidth(this.render_options.bracket_line_width);\n      this.drawBracketed();\n    } else if (this.type === PedalMarking.type.TEXT) {\n      this.drawText();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { GlyphNoteOptions } from './glyphnote';\nimport { NoteStruct } from './note';\n\n// Map `type` to SMuFL glyph code.\nconst CODES: Record<string, string> = {\n  '1': 'repeat1Bar',\n  '2': 'repeat2Bars',\n  '4': 'repeat4Bars',\n  slash: 'repeatBarSlash',\n};\n\nexport class RepeatNote extends GlyphNote {\n  static get CATEGORY(): string {\n    return 'RepeatNote';\n  }\n\n  constructor(type: string, noteStruct?: NoteStruct, options?: GlyphNoteOptions) {\n    super(undefined, { duration: 'q', align_center: type !== 'slash', ...noteStruct }, options);\n\n    const glyphCode = CODES[type] || 'repeat1Bar';\n    const glyph = new Glyph(glyphCode, this.musicFont.lookupMetric('repeatNote.point', 40), { category: 'repeatNote' });\n    this.setGlyph(glyph);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Element } from './element';\nimport { RenderContext } from './rendercontext';\nimport { StaveNote } from './stavenote';\nimport { Tables } from './tables';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport interface StaveLineNotes {\n  first_note: StaveNote;\n  first_indices: number[];\n  last_note: StaveNote;\n  last_indices: number[];\n}\n\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(\n  ctx: RenderContext,\n  x0: number,\n  y0: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n): void {\n  // all cases do this.\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x0, y0);\n  ctx.closePath();\n\n  ctx.fill();\n}\n\nexport class StaveLine extends Element {\n  static get CATEGORY(): string {\n    return 'StaveLine';\n  }\n\n  // Text Positioning\n  static readonly TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n  };\n\n  static readonly TextJustification = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3,\n  };\n\n  public render_options: {\n    padding_left: number;\n    padding_right: number;\n    line_width: number;\n    line_dash?: number[];\n    rounded_end: boolean;\n    color?: string;\n    draw_start_arrow: boolean;\n    draw_end_arrow: boolean;\n    arrowhead_length: number;\n    arrowhead_angle: number;\n    text_position_vertical: number;\n    text_justification: number;\n  };\n\n  protected text: string;\n  protected font: FontInfo;\n\n  // These five instance variables are all initialized by the constructor via this.setNotes(notes).\n  protected notes!: StaveLineNotes;\n  protected first_note!: StaveNote;\n  protected first_indices!: number[];\n  protected last_note!: StaveNote;\n  protected last_indices!: number[];\n\n  // Initialize the StaveLine with the given `notes`.\n  //\n  // `notes` is a struct that has:\n  //\n  //  ```\n  //  {\n  //    first_note: Note,\n  //    last_note: Note,\n  //    first_indices: [n1, n2, n3],\n  //    last_indices: [n1, n2, n3]\n  //  }\n  //  ```\n  constructor(notes: StaveLineNotes) {\n    super();\n\n    this.setNotes(notes);\n\n    this.text = '';\n\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    this.render_options = {\n      // Space to add to the left or the right\n      padding_left: 4,\n      padding_right: 3,\n\n      // The width of the line in pixels\n      line_width: 1,\n      // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n      line_dash: undefined,\n      // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n      rounded_end: true,\n      // The color of the line and arrowheads\n      color: undefined,\n\n      // Flags to draw arrows on each end of the line\n      draw_start_arrow: false,\n      draw_end_arrow: false,\n\n      // The length of the arrowhead sides\n      arrowhead_length: 10,\n      // The angle of the arrowhead\n      arrowhead_angle: Math.PI / 8,\n\n      // The position of the text\n      text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n      text_justification: StaveLine.TextJustification.CENTER,\n    };\n  }\n\n  // Set the font for the `StaveLine` text\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n\n  // The the annotation for the `StaveLine`\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  // Set the notes for the `StaveLine`\n  setNotes(notes: StaveLineNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\n    }\n\n    this.notes = notes;\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n\n  // Apply the style of the `StaveLine` to the context\n  applyLineStyle(): void {\n    const ctx = this.checkContext();\n    const render_options = this.render_options;\n\n    if (render_options.line_dash) {\n      ctx.setLineDash(render_options.line_dash);\n    }\n\n    if (render_options.line_width) {\n      ctx.setLineWidth(render_options.line_width);\n    }\n\n    if (render_options.rounded_end) {\n      ctx.setLineCap('round');\n    } else {\n      ctx.setLineCap('square');\n    }\n  }\n\n  // Apply the text styling to the context\n  applyFontStyle(): void {\n    const ctx = this.checkContext();\n\n    if (this.font) {\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    }\n\n    const render_options = this.render_options;\n    const color = render_options.color;\n    if (color) {\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n    }\n  }\n\n  // Helper function to draw a line with arrow heads\n  protected drawArrowLine(ctx: RenderContext, pt1: { x: number; y: number }, pt2: { x: number; y: number }): void {\n    const both_arrows = this.render_options.draw_start_arrow && this.render_options.draw_end_arrow;\n\n    const x1 = pt1.x;\n    const y1 = pt1.y;\n    const x2 = pt2.x;\n    const y2 = pt2.y;\n\n    // For ends with arrow we actually want to stop before we get to the arrow\n    // so that wide lines won't put a flat end on the arrow.\n    const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    const ratio = (distance - this.render_options.arrowhead_length / 3) / distance;\n    let end_x;\n    let end_y;\n    let start_x;\n    let start_y;\n    if (this.render_options.draw_end_arrow || both_arrows) {\n      end_x = Math.round(x1 + (x2 - x1) * ratio);\n      end_y = Math.round(y1 + (y2 - y1) * ratio);\n    } else {\n      end_x = x2;\n      end_y = y2;\n    }\n\n    if (this.render_options.draw_start_arrow || both_arrows) {\n      start_x = x1 + (x2 - x1) * (1 - ratio);\n      start_y = y1 + (y2 - y1) * (1 - ratio);\n    } else {\n      start_x = x1;\n      start_y = y1;\n    }\n\n    if (this.render_options.color) {\n      ctx.setStrokeStyle(this.render_options.color);\n      ctx.setFillStyle(this.render_options.color);\n    }\n\n    // Draw the shaft of the arrow\n    ctx.beginPath();\n    ctx.moveTo(start_x, start_y);\n    ctx.lineTo(end_x, end_y);\n    ctx.stroke();\n    ctx.closePath();\n\n    // calculate the angle of the line\n    const line_angle = Math.atan2(y2 - y1, x2 - x1);\n    // h is the line length of a side of the arrow head\n    const h = Math.abs(this.render_options.arrowhead_length / Math.cos(this.render_options.arrowhead_angle));\n\n    let angle1;\n    let angle2;\n    let top_x;\n    let top_y;\n    let bottom_x;\n    let bottom_y;\n\n    if (this.render_options.draw_end_arrow || both_arrows) {\n      angle1 = line_angle + Math.PI + this.render_options.arrowhead_angle;\n      top_x = x2 + Math.cos(angle1) * h;\n      top_y = y2 + Math.sin(angle1) * h;\n\n      angle2 = line_angle + Math.PI - this.render_options.arrowhead_angle;\n      bottom_x = x2 + Math.cos(angle2) * h;\n      bottom_y = y2 + Math.sin(angle2) * h;\n\n      drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n    }\n\n    if (this.render_options.draw_start_arrow || both_arrows) {\n      angle1 = line_angle + this.render_options.arrowhead_angle;\n      top_x = x1 + Math.cos(angle1) * h;\n      top_y = y1 + Math.sin(angle1) * h;\n\n      angle2 = line_angle - this.render_options.arrowhead_angle;\n      bottom_x = x1 + Math.cos(angle2) * h;\n      bottom_y = y1 + Math.sin(angle2) * h;\n\n      drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n    }\n  }\n\n  // Renders the `StaveLine` on the context\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    const render_options = this.render_options;\n\n    ctx.save();\n    this.applyLineStyle();\n\n    // Cycle through each set of indices and draw lines\n    let start_position = { x: 0, y: 0 };\n    let end_position = { x: 0, y: 0 };\n    this.first_indices.forEach((first_index, i) => {\n      const last_index = this.last_indices[i];\n\n      // Get initial coordinates for the start/end of the line\n      start_position = first_note.getModifierStartXY(2, first_index);\n      end_position = last_note.getModifierStartXY(1, last_index);\n      const upwards_slope = start_position.y > end_position.y;\n\n      // Adjust `x` coordinates for modifiers\n      start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n      end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n\n      // Adjust first `x` coordinates for displacements\n      const notehead_width = first_note.getGlyph().getWidth();\n      const first_displaced = first_note.getKeyProps()[first_index].displaced;\n      if (first_displaced && first_note.getStemDirection() === 1) {\n        start_position.x += notehead_width + render_options.padding_left;\n      }\n\n      // Adjust last `x` coordinates for displacements\n      const last_displaced = last_note.getKeyProps()[last_index].displaced;\n      if (last_displaced && last_note.getStemDirection() === -1) {\n        end_position.x -= notehead_width + render_options.padding_right;\n      }\n\n      // Adjust y position better if it's not coming from the center of the note\n      start_position.y += upwards_slope ? -3 : 1;\n      end_position.y += upwards_slope ? 2 : 0;\n\n      this.drawArrowLine(ctx, start_position, end_position);\n    });\n\n    ctx.restore();\n\n    // Determine the x coordinate where to start the text\n    const text_width = ctx.measureText(this.text).width;\n    const justification = render_options.text_justification;\n    let x = 0;\n    if (justification === StaveLine.TextJustification.LEFT) {\n      x = start_position.x;\n    } else if (justification === StaveLine.TextJustification.CENTER) {\n      const delta_x = end_position.x - start_position.x;\n      const center_x = delta_x / 2 + start_position.x;\n      x = center_x - text_width / 2;\n    } else if (justification === StaveLine.TextJustification.RIGHT) {\n      x = end_position.x - text_width;\n    }\n\n    // Determine the y value to start the text\n    let y = 0;\n    const vertical_position = render_options.text_position_vertical;\n    if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n      y = first_note.checkStave().getYForTopText();\n    } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n      y = first_note.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n    }\n\n    // Draw the text\n    ctx.save();\n    this.applyFontStyle();\n    ctx.fillText(this.text, x, y);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { FormatOptions, Formatter, FormatterOptions } from './formatter';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Stave, StaveOptions } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { RuntimeError } from './util';\nimport { Voice } from './voice';\n\nexport interface SystemFormatterOptions extends FormatterOptions {\n  alpha?: number;\n}\n\nexport interface SystemParams {\n  voices: Voice[];\n  stave?: Stave;\n  noJustification?: boolean;\n  options?: StaveOptions;\n  spaceAbove?: number;\n  spaceBelow?: number;\n  debugNoteMetrics?: boolean;\n}\n\n/**\n * Formatting for systems created/drawn from factory:\n *\n * If width is provided, the system will use the specified width.\n *\n * If noJustification flag is 'true', there is no justification between voices\n * Otherwise, autoWidth defaults to true.\n *\n * If autowidth is true, the system uses format.preCalculateMinWidth\n * for the width of all voices, and default stave padding\n */\nexport interface SystemOptions {\n  factory?: Factory;\n  noPadding?: boolean;\n  debugFormatter?: boolean;\n  spaceBetweenStaves?: number;\n  formatIterations?: number;\n  autoWidth?: boolean;\n  x?: number;\n  width?: number;\n  y?: number;\n  details?: SystemFormatterOptions;\n  formatOptions?: FormatOptions;\n  noJustification?: boolean;\n}\n\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n  static get CATEGORY(): string {\n    return 'System';\n  }\n\n  protected options!: Required<SystemOptions>;\n  protected factory!: Factory;\n  protected formatter?: Formatter;\n  protected startX?: number;\n  protected lastY?: number;\n  protected parts: Required<SystemParams>[];\n  protected connector?: StaveConnector;\n  protected debugNoteMetricsYs?: { y: number; voice: Voice }[];\n\n  constructor(params: SystemOptions = {}) {\n    super();\n    this.setOptions(params);\n    this.parts = [];\n  }\n\n  /** Set formatting options. */\n  setOptions(options: SystemOptions = {}): void {\n    this.factory = options.factory ?? new Factory({ renderer: { elementId: null, width: 0, height: 0 } });\n    this.options = {\n      factory: this.factory,\n      x: 10,\n      y: 10,\n      width: 500,\n      spaceBetweenStaves: 12, // stave spaces\n      autoWidth: false,\n      noJustification: false,\n      debugFormatter: false,\n      formatIterations: 0, // number of formatter tuning steps\n      noPadding: false,\n      ...options,\n      details: {\n        alpha: 0.5, // formatter tuner learning/shifting rate\n        ...options.details,\n      },\n      formatOptions: {\n        ...options.formatOptions,\n      },\n    };\n\n    if (this.options.noJustification === false && typeof options.width === 'undefined') {\n      this.options.autoWidth = true;\n    }\n  }\n\n  /** Set associated context. */\n  setContext(context: RenderContext): this {\n    super.setContext(context);\n    this.factory.setContext(context);\n    return this;\n  }\n\n  /**\n   * Add connector between staves.\n   * @param type see {@link StaveConnector.typeString}\n   */\n  addConnector(type: string = 'double'): StaveConnector {\n    this.connector = this.factory.StaveConnector({\n      top_stave: this.parts[0].stave,\n      bottom_stave: this.parts[this.parts.length - 1].stave,\n      type,\n    });\n    return this.connector;\n  }\n\n  /**\n   * Add stave to the system.\n   *\n   * Examples:\n   *\n   *  (one voice)\n   *\n   * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n   *\n   *  (two voices)\n   *\n   * `system.addStave({voices: [`\n   *\n   *  `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n   *\n   *  `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))]});`\n   */\n  addStave(params: SystemParams): Stave {\n    const staveOptions: StaveOptions = { left_bar: false, ...params.options };\n\n    const stave =\n      params.stave ??\n      this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n\n    const p = {\n      stave,\n      /* voices: [], */\n      spaceAbove: 0, // stave spaces\n      spaceBelow: 0, // stave spaces\n      debugNoteMetrics: false,\n      noJustification: false,\n      ...params,\n      options: staveOptions, // this needs to go after ...params, so we can override the options field.\n    };\n\n    const ctx = this.getContext();\n    p.voices.forEach((voice) =>\n      voice\n        .setContext(ctx)\n        .setStave(stave)\n        .getTickables()\n        .forEach((tickable) => tickable.setStave(stave))\n    );\n\n    this.parts.push(p);\n    return stave;\n  }\n\n  /** Format the system. */\n  format(): void {\n    const options_details = this.options.details;\n    let justifyWidth = 0;\n    const formatter = new Formatter(options_details);\n    this.formatter = formatter;\n\n    let y = this.options.y;\n    let startX = 0;\n    let allVoices: Voice[] = [];\n    const debugNoteMetricsYs: { y: number; voice: Voice }[] = [];\n\n    // Join the voices for each stave.\n    this.parts.forEach((part) => {\n      y = y + part.stave.space(part.spaceAbove);\n      part.stave.setY(y);\n      if (this.options.autoWidth) {\n        part.voices.forEach((voice) => {\n          formatter.joinVoices([voice]);\n        });\n      } else {\n        formatter.joinVoices(part.voices);\n      }\n      y = y + part.stave.space(part.spaceBelow);\n      y = y + part.stave.space(this.options.spaceBetweenStaves);\n      if (part.debugNoteMetrics) {\n        debugNoteMetricsYs.push({ y, voice: part.voices[0] });\n        y += 15;\n      }\n      allVoices = allVoices.concat(part.voices);\n\n      startX = Math.max(startX, part.stave.getNoteStartX());\n    });\n\n    // Update the start position of all staves.\n    this.parts.forEach((part) => part.stave.setNoteStartX(startX));\n    if (this.options.autoWidth) {\n      justifyWidth = formatter.preCalculateMinTotalWidth(allVoices);\n      this.parts.forEach((part) => {\n        part.stave.setWidth(justifyWidth + Stave.rightPadding + (startX - this.options.x));\n      });\n    } else {\n      justifyWidth = this.options.noPadding\n        ? this.options.width - this.options.x\n        : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n    }\n    formatter.format(allVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n\n    for (let i = 0; i < this.options.formatIterations; i++) {\n      formatter.tune(options_details);\n    }\n\n    this.startX = startX;\n    this.debugNoteMetricsYs = debugNoteMetricsYs;\n    this.lastY = y;\n    this.boundingBox = new BoundingBox(this.options.x, this.options.y, this.options.width, this.lastY - this.options.y);\n  }\n\n  /** Render the system. */\n  draw(): void {\n    // Render debugging information, if requested.\n    const ctx = this.checkContext();\n    if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n      throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n    }\n    this.setRendered();\n\n    if (this.options.debugFormatter) {\n      Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n    }\n\n    this.debugNoteMetricsYs.forEach((d) => {\n      d.voice.getTickables().forEach((tickable) => Note.plotMetrics(ctx, tickable, d.y));\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Stave, StaveOptions } from './stave';\n\nexport class TabStave extends Stave {\n  static get CATEGORY(): string {\n    return 'TabStave';\n  }\n\n  constructor(x: number, y: number, width: number, options?: StaveOptions) {\n    const tab_options = {\n      spacing_between_lines_px: 13,\n      num_lines: 6,\n      top_text_position: 1,\n      ...options,\n    };\n\n    super(x, y, width, tab_options);\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(2.5);\n  }\n\n  // Deprecated\n  addTabGlyph(): this {\n    this.addClef('tab');\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\n\nimport { Element } from './element';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Renderer } from './renderer';\nimport { Tables } from './tables';\nimport { FontInfo } from './types/common';\nimport { log, RuntimeError } from './util';\n\nexport interface TextBracketParams {\n  start: Note;\n  stop: Note;\n  text: string;\n  superscript: string;\n  position: number | string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextBracket.DEBUG) log('Vex.Flow.TextBracket', args);\n}\n\nexport enum TextBracketPosition {\n  TOP = 1,\n  BOTTOM = -1,\n}\n\nexport class TextBracket extends Element {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'TextBracket';\n  }\n\n  public render_options: {\n    dashed: boolean;\n    color: string;\n    line_width: number;\n    underline_superscript: boolean;\n    show_bracket: boolean;\n    dash: number[];\n    bracket_height: number;\n  };\n\n  protected readonly text: string;\n  protected readonly superscript: string;\n  protected readonly position: TextBracketPosition;\n\n  protected line: number;\n  protected start: Note;\n  protected stop: Note;\n  protected font: FontInfo;\n\n  /**\n   * @deprecated\n   */\n  static get Positions(): typeof TextBracketPosition {\n    L('Positions is deprecated, use TextBracketPosition instead.');\n    return TextBracketPosition;\n  }\n\n  static get Position(): typeof TextBracketPosition {\n    return TextBracketPosition;\n  }\n\n  /**\n   * @deprecated Use `TextBracket.PositionString` instead.\n   */\n  static get PositionsString(): Record<string, number> {\n    L('PositionsString is deprecated, use PositionString instead.');\n    return TextBracket.PositionString;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      top: TextBracketPosition.TOP,\n      bottom: TextBracketPosition.BOTTOM,\n    };\n  }\n\n  constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }: TextBracketParams) {\n    super();\n\n    this.start = start;\n    this.stop = stop;\n\n    this.text = text;\n    this.superscript = superscript;\n\n    this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n\n    this.line = 1;\n\n    this.font = {\n      family: 'Serif',\n      size: 15,\n      weight: 'italic',\n    };\n\n    this.render_options = {\n      dashed: true,\n      dash: [5],\n      color: 'black',\n      line_width: 1,\n      show_bracket: true,\n      bracket_height: 8,\n\n      // In the BOTTOM position, the bracket line can extend\n      // under the superscript.\n      underline_superscript: true,\n    };\n  }\n\n  // Apply the text backet styling to the provided `context`\n  applyStyle(context: RenderContext): this {\n    // Apply style for the octave bracket\n    context.setFont(this.font.family, this.font.size, this.font.weight);\n    context.setStrokeStyle(this.render_options.color);\n    context.setFillStyle(this.render_options.color);\n    context.setLineWidth(this.render_options.line_width);\n\n    return this;\n  }\n\n  // Set whether the bracket line should be `dashed`. You can also\n  // optionally set the `dash` pattern by passing in an array of numbers\n  setDashed(dashed: boolean, dash?: number[]): this {\n    this.render_options.dashed = dashed;\n    if (dash) this.render_options.dash = dash;\n    return this;\n  }\n\n  // Set the font for the text\n  setFont(font: FontInfo): this {\n    // We use Object.assign to support partial updates to the font object\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n  // Set the rendering `context` for the octave bracket\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Draw the octave bracket on the rendering context\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let y = 0;\n    switch (this.position) {\n      case TextBracketPosition.TOP:\n        y = this.start.checkStave().getYForTopText(this.line);\n        break;\n      case TextBracketPosition.BOTTOM:\n        y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n    }\n\n    // Get the preliminary start and stop coordintates for the bracket\n    const start = { x: this.start.getAbsoluteX(), y };\n    const stop = { x: this.stop.getAbsoluteX(), y };\n\n    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n\n    const bracket_height = this.render_options.bracket_height * this.position;\n\n    ctx.save();\n    this.applyStyle(ctx);\n\n    // Draw text\n    ctx.fillText(this.text, start.x, start.y);\n\n    // Get the width and height for the octave number\n    const main_measure = ctx.measureText(this.text);\n    const main_width = main_measure.width;\n    const main_height = main_measure.height;\n\n    // Calculate the y position for the super script\n    const super_y = start.y - main_height / 2.5;\n\n    // Draw the superscript\n    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n    ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\n    // Determine width and height of the superscript\n    const super_measure = ctx.measureText(this.superscript);\n    const super_width = super_measure.width;\n    const super_height = super_measure.height;\n\n    // Setup initial coordinates for the bracket line\n    let start_x = start.x;\n    let line_y = super_y;\n    const end_x = stop.x + this.stop.getGlyph().getWidth();\n\n    // Adjust x and y coordinates based on position\n    if (this.position === TextBracketPosition.TOP) {\n      start_x += main_width + super_width + 5;\n      line_y -= super_height / 2.7;\n    } else if (this.position === TextBracketPosition.BOTTOM) {\n      line_y += super_height / 2.7;\n      start_x += main_width + 2;\n\n      if (!this.render_options.underline_superscript) {\n        start_x += super_width;\n      }\n    }\n\n    if (this.render_options.dashed) {\n      // Main line\n      Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\n      // Ending Bracket\n      if (this.render_options.show_bracket) {\n        Renderer.drawDashedLine(\n          ctx,\n          end_x,\n          line_y + 1 * this.position,\n          end_x,\n          line_y + bracket_height,\n          this.render_options.dash\n        );\n      }\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(start_x, line_y);\n      // Main line\n      ctx.lineTo(end_x, line_y);\n      if (this.render_options.show_bracket) {\n        // Ending bracket\n        ctx.lineTo(end_x, line_y + bracket_height);\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { TextNoteStruct } from './textnote';\nimport { defined, log, RuntimeError } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextDynamics.DEBUG) log('Vex.Flow.TextDynamics', args);\n}\n\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'TextDynamics';\n  }\n\n  protected sequence: string;\n\n  protected line: number;\n  protected glyphs: Glyph[];\n\n  /** The glyph data for each dynamics letter. */\n  static get GLYPHS(): Record<string, { code: string; width: number }> {\n    return {\n      f: {\n        code: 'dynamicForte',\n        width: 12,\n      },\n      p: {\n        code: 'dynamicPiano',\n        width: 14,\n      },\n      m: {\n        code: 'dynamicMezzo',\n        width: 17,\n      },\n      s: {\n        code: 'dynamicSforzando',\n        width: 10,\n      },\n      z: {\n        code: 'dynamicZ',\n        width: 12,\n      },\n      r: {\n        code: 'dynamicRinforzando',\n        width: 12,\n      },\n    };\n  }\n\n  /**\n   * Create the dynamics marking.\n   *\n   * A `TextDynamics` object inherits from `Note` so that it can be formatted\n   * within a `Voice`.\n   *\n   * @param noteStruct an object that contains a `duration` property and a\n   * `sequence` of letters that represents the letters to render.\n   */\n  constructor(noteStruct: TextNoteStruct) {\n    super(noteStruct);\n\n    this.sequence = (noteStruct.text || '').toLowerCase();\n    this.line = noteStruct.line || 0;\n    this.glyphs = [];\n\n    this.render_options = { ...this.render_options, glyph_font_size: 40 };\n\n    L('New Dynamics Text: ', this.sequence);\n  }\n\n  /** Set the Stave line on which the note should be placed. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Preformat the dynamics text. */\n  preFormat(): this {\n    let total_width = 0;\n    // length of this.glyphs must be <=\n    // length of this.sequence, so if we're formatted before\n    // create new glyphs.\n    this.glyphs = [];\n    // Iterate through each letter\n    this.sequence.split('').forEach((letter) => {\n      // Get the glyph data for the letter\n      const glyph_data = TextDynamics.GLYPHS[letter];\n      if (!glyph_data) throw new RuntimeError('Invalid dynamics character: ' + letter);\n\n      const size = defined(this.render_options.glyph_font_size);\n      const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\n\n      // Add the glyph\n      this.glyphs.push(glyph);\n\n      total_width += glyph_data.width;\n    });\n\n    // Store the width of the text\n    this.setWidth(total_width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Draw the dynamics text on the rendering context. */\n  draw(): void {\n    this.setRendered();\n    const x = this.getAbsoluteX();\n    const y = this.checkStave().getYForLine(this.line + -3);\n\n    L('Rendering Dynamics: ', this.sequence);\n\n    let letter_x = x;\n    this.glyphs.forEach((glyph, index) => {\n      const current_letter = this.sequence[index];\n      glyph.render(this.checkContext(), letter_x, y);\n      letter_x += TextDynamics.GLYPHS[current_letter].width;\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { TimeSignature, TimeSignatureInfo } from './timesignature';\n\nexport class TimeSigNote extends Note {\n  static get CATEGORY(): string {\n    return 'TimeSigNote';\n  }\n\n  protected timeSigInfo: TimeSignatureInfo;\n\n  constructor(timeSpec: string, customPadding?: number) {\n    super({ duration: 'b' });\n\n    const timeSignature = new TimeSignature(timeSpec, customPadding);\n    this.timeSigInfo = timeSignature.getInfo();\n    this.setWidth(this.timeSigInfo.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (!this.timeSigInfo.glyph.getContext()) {\n      this.timeSigInfo.glyph.setContext(ctx);\n    }\n\n    this.timeSigInfo.glyph.setStave(stave);\n    this.timeSigInfo.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n    this.timeSigInfo.glyph.renderToStave(this.getAbsoluteX());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Balazs Forian-Szabo\n// MIT License\n\nimport { Element } from './element';\nimport { Note } from './note';\nimport { log } from './util';\nimport { Vibrato } from './vibrato';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (VibratoBracket.DEBUG) log('Vex.Flow.VibratoBracket', args);\n}\n\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n  /** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'VibratoBracket';\n  }\n\n  protected line: number;\n\n  protected start?: Note;\n  protected stop?: Note;\n  public render_options: {\n    vibrato_width: number;\n    wave_height: number;\n    wave_girth: number;\n    harsh: boolean;\n    wave_width: number;\n  };\n\n  /**\n   * Either the stop or start note must be set, or both of them.\n   * An undefined value for the start or stop note indicates that the vibrato\n   * is drawn from the beginning or until the end of the stave accordingly.\n   */\n  constructor(bracket_data: { stop?: Note | null; start?: Note | null }) {\n    super();\n\n    if (bracket_data.start) this.start = bracket_data.start;\n    if (bracket_data.stop) this.stop = bracket_data.stop;\n\n    this.line = 1;\n\n    this.render_options = {\n      harsh: false,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n      vibrato_width: 0,\n    };\n  }\n\n  /** Set line position of the vibrato bracket. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Set harsh vibrato bracket. */\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  /** Draw the vibrato bracket on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    const y: number =\n      (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n      (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n      0;\n    // If start note is not set then vibrato will be drawn\n    // from the beginning of the stave\n    const start_x: number =\n      (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n    // If stop note is not set then vibrato will be drawn\n    // until the end of the stave\n    const stop_x: number =\n      (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n      (this.start && this.start.checkStave().getTieEndX() - 10) ||\n      0;\n\n    this.render_options.vibrato_width = stop_x - start_x;\n\n    L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n\n    Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\n\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { ChordSymbol } from './chordsymbol';\nimport { ClefNote } from './clefnote';\nimport { Curve, CurveOptions } from './curve';\nimport { EasyScore, EasyScoreOptions } from './easyscore';\nimport { Element } from './element';\nimport { Formatter, FormatterOptions } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { Glyph } from './glyph';\nimport { GlyphNote, GlyphNoteOptions } from './glyphnote';\nimport { GraceNote, GraceNoteStruct } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { KeySigNote } from './keysignote';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest, MultimeasureRestRenderOptions } from './multimeasurerest';\nimport { Note, NoteStruct } from './note';\nimport { NoteSubGroup } from './notesubgroup';\nimport { PedalMarking } from './pedalmarking';\nimport { RenderContext } from './rendercontext';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave, StaveOptions } from './stave';\nimport { BarlineType } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveLine } from './staveline';\nimport { StaveNote, StaveNoteStruct } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { StemmableNote } from './stemmablenote';\nimport { StringNumber } from './stringnumber';\nimport { System, SystemOptions } from './system';\nimport { TabNote, TabNoteStruct } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextFont, TextFontRegistry } from './textfont';\nimport { TextNote, TextNoteStruct } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSigNote } from './timesignote';\nimport { Tuplet, TupletOptions } from './tuplet';\nimport { FontInfo } from './types/common';\nimport { defined, log, RuntimeError } from './util';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice, VoiceTime } from './voice';\n\nexport interface FactoryOptions {\n  stave?: {\n    space: number;\n  };\n  renderer?: {\n    elementId: string | null;\n    backend?: number;\n    width: number;\n    height: number;\n    background?: string;\n  };\n  font?: {\n    family: string;\n    size: number;\n    weight: string;\n  };\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Factory.DEBUG) log('Vex.Flow.Factory', args);\n}\n\n/**\n * Factory implements a high level API around VexFlow. It will eventually\n * become the canonical way to use VexFlow.\n *\n * *This API is currently DRAFT*\n */\nexport class Factory {\n  /** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /**\n   * Static simplified function to access constructor without providing FactoryOptions\n   *\n   * Example:\n   *\n   * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n   *\n   * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\n   */\n  static newFromElementId(elementId: string | null, width = 500, height = 200): Factory {\n    return new Factory({ renderer: { elementId, width, height } });\n  }\n\n  protected options: Required<FactoryOptions>;\n\n  protected stave?: Stave;\n  protected context!: RenderContext;\n  protected staves!: Stave[];\n  protected voices!: Voice[];\n  protected renderQ!: Element[];\n  protected systems!: System[];\n\n  /**\n   * Example:\n   *\n   * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n   *\n   * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n   */\n  constructor(options: FactoryOptions = {}) {\n    L('New factory: ', options);\n    this.options = {\n      stave: {\n        space: 10,\n      },\n      renderer: {\n        elementId: '',\n        width: 500,\n        height: 200,\n        background: '#FFF',\n      },\n      font: {\n        family: 'Arial',\n        size: 10,\n        weight: '',\n      },\n    };\n\n    this.setOptions(options);\n  }\n\n  reset(): void {\n    this.renderQ = [];\n    this.systems = [];\n    this.staves = [];\n    this.voices = [];\n    this.stave = undefined; // current stave\n  }\n\n  setOptions(options?: FactoryOptions): void {\n    this.options = { ...this.options, ...options };\n    this.initRenderer();\n    this.reset();\n  }\n\n  initRenderer(): void {\n    const { elementId, width, height, background } = this.options.renderer;\n    if (elementId == null) {\n      return;\n    }\n\n    if (elementId == '') {\n      L(this);\n      throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n    }\n\n    let backend = this.options.renderer.backend;\n    if (backend === undefined) {\n      const elem = document.getElementById(elementId);\n      if (elem instanceof window.HTMLCanvasElement) {\n        backend = Renderer.Backends.CANVAS;\n      } else {\n        backend = Renderer.Backends.SVG;\n      }\n    }\n\n    this.context = Renderer.buildContext(elementId as string, backend, width, height, background);\n  }\n\n  getContext(): RenderContext {\n    return this.context;\n  }\n\n  setContext(context: RenderContext): this {\n    this.context = context;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  getVoices(): Voice[] {\n    return this.voices;\n  }\n\n  /** Return pixels from current stave spacing. */\n\n  Stave(params?: { x?: number; y?: number; width?: number; options?: StaveOptions }): Stave {\n    const staveSpace = this.options.stave.space;\n    const p = {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - staveSpace * 1.0,\n      options: { spacing_between_lines_px: staveSpace * 1.0 },\n      ...params,\n    };\n\n    const stave: Stave = new Stave(p.x, p.y, p.width, p.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  TabStave(params?: { x?: number; y?: number; width?: number; options?: StaveOptions }): TabStave {\n    const staveSpace = this.options.stave.space;\n    const p = {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - staveSpace * 1.0,\n      options: { spacing_between_lines_px: staveSpace * 1.3 },\n      ...params,\n    };\n\n    const stave = new TabStave(p.x, p.y, p.width, p.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  StaveNote(noteStruct: StaveNoteStruct): StaveNote {\n    const note = new StaveNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GlyphNote(glyph: Glyph, noteStruct: NoteStruct, options?: GlyphNoteOptions): GlyphNote {\n    const note = new GlyphNote(glyph, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  RepeatNote(type: string, noteStruct?: NoteStruct, options?: GlyphNoteOptions): RepeatNote {\n    const note = new RepeatNote(type, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GhostNote(noteStruct: string | NoteStruct): GhostNote {\n    const ghostNote = new GhostNote(noteStruct);\n    if (this.stave) ghostNote.setStave(this.stave);\n    ghostNote.setContext(this.context);\n    this.renderQ.push(ghostNote);\n    return ghostNote;\n  }\n\n  TextNote(noteStruct: TextNoteStruct): TextNote {\n    const textNote = new TextNote(noteStruct);\n    if (this.stave) textNote.setStave(this.stave);\n    textNote.setContext(this.context);\n    this.renderQ.push(textNote);\n    return textNote;\n  }\n\n  BarNote(params: { type?: BarlineType | string } = {}): BarNote {\n    const barNote = new BarNote(params.type);\n    if (this.stave) barNote.setStave(this.stave);\n    barNote.setContext(this.context);\n    this.renderQ.push(barNote);\n    return barNote;\n  }\n\n  ClefNote(params?: { type?: string; options?: { size?: string; annotation?: string } }): ClefNote {\n    const p = {\n      type: 'treble',\n      options: {\n        size: 'default',\n        annotation: undefined,\n      },\n      ...params,\n    };\n\n    const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n    if (this.stave) clefNote.setStave(this.stave);\n    clefNote.setContext(this.context);\n    this.renderQ.push(clefNote);\n    return clefNote;\n  }\n\n  TimeSigNote(params?: { time?: string }): TimeSigNote {\n    const p = {\n      time: '4/4',\n      ...params,\n    };\n\n    const timeSigNote = new TimeSigNote(p.time);\n    if (this.stave) timeSigNote.setStave(this.stave);\n    timeSigNote.setContext(this.context);\n    this.renderQ.push(timeSigNote);\n    return timeSigNote;\n  }\n\n  KeySigNote(params: { key: string; cancelKey?: string; alterKey?: string[] }): KeySigNote {\n    const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n    if (this.stave) keySigNote.setStave(this.stave);\n    keySigNote.setContext(this.context);\n    this.renderQ.push(keySigNote);\n    return keySigNote;\n  }\n\n  TabNote(noteStruct: TabNoteStruct): TabNote {\n    const note = new TabNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GraceNote(noteStruct: GraceNoteStruct): GraceNote {\n    const note = new GraceNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    return note;\n  }\n\n  GraceNoteGroup(params: { notes: StemmableNote[]; slur?: boolean }): GraceNoteGroup {\n    const group = new GraceNoteGroup(params.notes, params.slur);\n    group.setContext(this.context);\n    return group;\n  }\n\n  Accidental(params: { type: string }): Accidental {\n    const accid = new Accidental(params.type);\n    accid.setContext(this.context);\n    return accid;\n  }\n\n  Annotation(params?: {\n    text?: string;\n    vJustify?: string;\n    hJustify?: string;\n    fontFamily?: string;\n    fontSize?: number;\n    fontWeight?: string;\n  }): Annotation {\n    const p = {\n      text: 'p',\n      vJustify: 'below',\n      hJustify: 'center',\n      fontFamily: 'Times',\n      fontSize: 14,\n      fontWeight: 'bold italic',\n      options: {},\n      ...params,\n    };\n\n    const annotation = new Annotation(p.text);\n    annotation.setJustification(p.hJustify);\n    annotation.setVerticalJustification(p.vJustify);\n    annotation.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n    annotation.setContext(this.context);\n    return annotation;\n  }\n\n  ChordSymbol(params?: {\n    vJustify?: string;\n    hJustify?: string;\n    kerning?: boolean;\n    reportWidth?: boolean;\n    fontFamily?: string;\n    fontSize?: number;\n    fontWeight?: string;\n  }): ChordSymbol {\n    const p = {\n      vJustify: 'top',\n      hJustify: 'center',\n      kerning: true,\n      reportWidth: true,\n      ...params,\n    };\n\n    const chordSymbol = new ChordSymbol();\n    chordSymbol.setHorizontal(p.hJustify);\n    chordSymbol.setVertical(p.vJustify);\n    chordSymbol.setEnableKerning(p.kerning);\n    chordSymbol.setReportWidth(p.reportWidth);\n    // There is a default font based on the engraving font.  Only set then\n    // font if it is specific, else use the default\n    if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n      if (typeof p.fontWeight === 'string') chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n      else chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n    } else if (typeof p.fontSize === 'number') {\n      chordSymbol.setFontSize(p.fontSize);\n    }\n    chordSymbol.setContext(this.context);\n    return chordSymbol;\n  }\n\n  Articulation(params?: { type?: string; position?: string | number }): Articulation {\n    const p = {\n      type: 'a.',\n      position: 'above',\n      ...params,\n    };\n\n    const articulation = new Articulation(p.type);\n    articulation.setPosition(p.position);\n    articulation.setContext(this.context);\n    return articulation;\n  }\n\n  TextDynamics(params?: { text?: string; duration?: string; dots?: number; line?: number }): TextDynamics {\n    const p = {\n      text: 'p',\n      duration: 'q',\n      dots: 0,\n      line: 0,\n      ...params,\n    };\n\n    const text = new TextDynamics({\n      text: p.text,\n      line: p.line,\n      duration: p.duration,\n      dots: p.dots,\n    });\n\n    if (this.stave) text.setStave(this.stave);\n    text.setContext(this.context);\n    this.renderQ.push(text);\n    return text;\n  }\n\n  Fingering(params: { number?: string; position?: string }): FretHandFinger {\n    const p = {\n      number: '0',\n      position: 'left',\n      ...params,\n    };\n\n    const fingering = new FretHandFinger(p.number);\n    fingering.setPosition(p.position);\n    fingering.setContext(this.context);\n    return fingering;\n  }\n\n  StringNumber(params: { number: string; position: string }): StringNumber {\n    const stringNumber = new StringNumber(params.number);\n    stringNumber.setPosition(params.position);\n    stringNumber.setContext(this.context);\n    return stringNumber;\n  }\n\n  TickContext(): TickContext {\n    return new TickContext();\n  }\n\n  ModifierContext(): ModifierContext {\n    return new ModifierContext();\n  }\n\n  MultiMeasureRest(params: MultimeasureRestRenderOptions): MultiMeasureRest {\n    const numMeasures = defined(params.number_of_measures, 'NoNumberOfMeasures');\n    const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n    multiMeasureRest.setContext(this.context);\n    this.renderQ.push(multiMeasureRest);\n    return multiMeasureRest;\n  }\n\n  Voice(params?: { time?: VoiceTime | string; options?: { softmaxFactor: number } }): Voice {\n    const p = {\n      time: '4/4',\n      ...params,\n    };\n    const voice = new Voice(p.time, p.options);\n    this.voices.push(voice);\n    return voice;\n  }\n\n  StaveConnector(params: { top_stave: Stave; bottom_stave: Stave; type: string }): StaveConnector {\n    const connector = new StaveConnector(params.top_stave, params.bottom_stave);\n    connector.setType(params.type).setContext(this.context);\n    this.renderQ.push(connector);\n    return connector;\n  }\n\n  Formatter(options?: FormatterOptions): Formatter {\n    return new Formatter(options);\n  }\n\n  Tuplet(params?: { notes?: Note[]; options?: TupletOptions }): Tuplet {\n    const p = {\n      notes: [],\n      options: {},\n      ...params,\n    };\n\n    const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n    this.renderQ.push(tuplet);\n    return tuplet;\n  }\n\n  Beam(params: { notes: StemmableNote[]; options?: { autoStem?: boolean; secondaryBeamBreaks?: number[] } }): Beam {\n    const beam = new Beam(params.notes, params.options?.autoStem).setContext(this.context);\n    beam.breakSecondaryAt(params.options?.secondaryBeamBreaks ?? []);\n    this.renderQ.push(beam);\n    return beam;\n  }\n\n  Curve(params: { from: Note; to: Note; options: CurveOptions }): Curve {\n    const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n    this.renderQ.push(curve);\n    return curve;\n  }\n\n  StaveTie(params: {\n    from: Note | null;\n    to: Note | null;\n    first_indices?: number[];\n    last_indices?: number[];\n    text?: string;\n    options?: { direction?: number };\n  }): StaveTie {\n    const tie = new StaveTie(\n      {\n        first_note: params.from,\n        last_note: params.to,\n        first_indices: params.first_indices,\n        last_indices: params.last_indices,\n      },\n      params.text\n    );\n\n    if (params.options?.direction) tie.setDirection(params.options.direction);\n    tie.setContext(this.context);\n    this.renderQ.push(tie);\n    return tie;\n  }\n\n  StaveLine(params: {\n    from: StaveNote;\n    to: StaveNote;\n    first_indices: number[];\n    last_indices: number[];\n    options?: { text?: string; font?: FontInfo };\n  }): StaveLine {\n    const line = new StaveLine({\n      first_note: params.from,\n      last_note: params.to,\n      first_indices: params.first_indices,\n      last_indices: params.last_indices,\n    });\n\n    if (params.options?.text) line.setText(params.options.text);\n    if (params.options?.font) line.setFont(params.options.font);\n\n    line.setContext(this.context);\n    this.renderQ.push(line);\n    return line;\n  }\n\n  VibratoBracket(params: {\n    from: Note | null;\n    to: Note | null;\n    options: {\n      harsh?: boolean;\n      line?: number;\n    };\n  }): VibratoBracket {\n    const vibratoBracket = new VibratoBracket({\n      start: params.from,\n      stop: params.to,\n    });\n\n    if (params.options.line) vibratoBracket.setLine(params.options.line);\n    if (params.options.harsh) vibratoBracket.setHarsh(params.options.harsh);\n\n    vibratoBracket.setContext(this.context);\n    this.renderQ.push(vibratoBracket);\n\n    return vibratoBracket;\n  }\n\n  TextBracket(params: {\n    from: Note;\n    to: Note;\n    text: string;\n    options: {\n      superscript: string;\n      position: string;\n      line?: number;\n      font?: FontInfo;\n    };\n  }): TextBracket {\n    const textBracket = new TextBracket({\n      start: params.from,\n      stop: params.to,\n      text: params.text,\n      superscript: params.options.superscript,\n      position: params.options.position,\n    });\n\n    if (params.options.line) textBracket.setLine(params.options.line);\n    if (params.options.font) textBracket.setFont(params.options.font);\n\n    textBracket.setContext(this.context);\n    this.renderQ.push(textBracket);\n    return textBracket;\n  }\n\n  System(params: SystemOptions = {}): System {\n    params.factory = this;\n    const system = new System(params).setContext(this.context);\n    this.systems.push(system);\n    return system;\n  }\n\n  /**\n   * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n   * ```\n   * const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n   * const score: EasyScore = vf.EasyScore();\n   * ```\n   * @param options.factory optional instance of Factory\n   * @param options.builder instance of Builder\n   * @param options.commitHooks function to call after a note element is created\n   * @param options.throwOnError throw error in case of parsing error\n   */\n  EasyScore(options: EasyScoreOptions = {}): EasyScore {\n    options.factory = this;\n    return new EasyScore(options);\n  }\n\n  PedalMarking(params?: { notes?: StaveNote[]; options?: { style: string } }): PedalMarking {\n    const p = {\n      notes: [],\n      options: {\n        style: 'mixed',\n      },\n      ...params,\n    };\n\n    const pedal = new PedalMarking(p.notes);\n    pedal.setType(PedalMarking.typeString[p.options.style]);\n    pedal.setContext(this.context);\n    this.renderQ.push(pedal);\n    return pedal;\n  }\n\n  NoteSubGroup(params?: { notes?: Note[] }): NoteSubGroup {\n    const p = {\n      notes: [],\n      ...params,\n    };\n\n    const group = new NoteSubGroup(p.notes);\n    group.setContext(this.context);\n    return group;\n  }\n\n  TextFont(params: TextFontRegistry): TextFont {\n    params.factory = this;\n    return new TextFont(params);\n  }\n\n  /** Render the score. */\n  draw(): void {\n    const ctx = this.context;\n    this.systems.forEach((s) => s.setContext(ctx).format());\n    this.staves.forEach((s) => s.setContext(ctx).draw());\n    this.voices.forEach((v) => v.setContext(ctx).draw());\n    this.renderQ.forEach((e) => {\n      if (!e.isRendered()) e.setContext(ctx).draw();\n    });\n    this.systems.forEach((s) => s.setContext(ctx).draw());\n    this.reset();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Author: Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\n\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { RuntimeError } from './util';\n\nexport interface StaveHairpinRenderOptions {\n  right_shift_ticks?: number;\n  left_shift_ticks?: number;\n  left_shift_px: number;\n  right_shift_px: number;\n  height: number;\n  y_shift: number;\n}\n\nexport class StaveHairpin extends Element {\n  static get CATEGORY(): string {\n    return 'StaveHairpin';\n  }\n\n  protected hairpin: number;\n\n  protected position: number;\n  public render_options: StaveHairpinRenderOptions;\n\n  // notes is initialized by the constructor via this.setNotes(notes).\n  protected notes!: Record<string, Note>;\n\n  protected first_note?: Note;\n  protected last_note?: Note;\n\n  static readonly type = {\n    CRESC: 1,\n    DECRESC: 2,\n  };\n\n  /* Helper function to convert ticks into pixels.\n   * Requires a Formatter with voices joined and formatted (to\n   * get pixels per tick)\n   *\n   * options is struct that has:\n   *\n   *  {\n   *   height: px,\n   *   y_shift: px, //vertical offset\n   *   left_shift_ticks: 0, //left horizontal offset expressed in ticks\n   *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n   *  }\n   *\n   **/\n  static FormatByTicksAndDraw(\n    ctx: RenderContext,\n    formatter: { pixelsPerTick: number },\n    notes: Record<string, Note>,\n    type: number,\n    position: number,\n    options: StaveHairpinRenderOptions\n  ): void {\n    const ppt = formatter.pixelsPerTick;\n\n    if (ppt == null) {\n      throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n    }\n\n    const l_shift_px = ppt * (options.left_shift_ticks ?? 0);\n    const r_shift_px = ppt * (options.right_shift_ticks ?? 0);\n\n    const hairpin_options = {\n      height: options.height,\n      y_shift: options.y_shift,\n      left_shift_px: l_shift_px,\n      right_shift_px: r_shift_px,\n      right_shift_ticks: 0,\n      left_shift_ticks: 0,\n    };\n\n    new StaveHairpin(\n      {\n        first_note: notes.first_note,\n        last_note: notes.last_note,\n      },\n      type\n    )\n      .setContext(ctx)\n      .setRenderOptions(hairpin_options)\n      .setPosition(position)\n      .draw();\n  }\n\n  /**\n   * Create a new hairpin from the specified notes.\n   *\n   * @param {!Object} notes The notes to tie up.\n   * Notes is a struct that has:\n   *\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *  }\n   * @param {!Object} type The type of hairpin\n   */\n  constructor(notes: Record<string, Note>, type: number) {\n    super();\n    this.setNotes(notes);\n    this.hairpin = type;\n    this.position = Modifier.Position.BELOW;\n\n    this.render_options = {\n      height: 10,\n      y_shift: 0, // vertical offset\n      left_shift_px: 0, // left horizontal offset\n      right_shift_px: 0, // right horizontal offset\n      right_shift_ticks: 0,\n      left_shift_ticks: 0,\n    };\n  }\n\n  setPosition(position: number): this {\n    if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n      this.position = position;\n    }\n    return this;\n  }\n\n  setRenderOptions(options: StaveHairpinRenderOptions): this {\n    if (\n      options.height != null &&\n      options.y_shift != null &&\n      options.left_shift_px != null &&\n      options.right_shift_px != null\n    ) {\n      this.render_options = options;\n    }\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this hairpin to.\n   *\n   * @param {!Object} notes The start and end notes.\n   */\n  setNotes(notes: Record<string, Note>): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\n    }\n\n    this.notes = notes;\n    this.first_note = notes.first_note;\n    this.last_note = notes.last_note;\n    return this;\n  }\n\n  renderHairpin(params: {\n    first_x: number;\n    last_x: number;\n    first_y: number;\n    last_y: number;\n    staff_height: number;\n  }): void {\n    const ctx = this.checkContext();\n    let dis = this.render_options.y_shift + 20;\n    let y_shift = params.first_y;\n\n    if (this.position === Modifier.Position.ABOVE) {\n      dis = -dis + 30;\n      y_shift = params.first_y - params.staff_height;\n    }\n\n    const l_shift = this.render_options.left_shift_px;\n    const r_shift = this.render_options.right_shift_px;\n\n    ctx.beginPath();\n\n    switch (this.hairpin) {\n      case StaveHairpin.type.CRESC:\n        ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n        break;\n      case StaveHairpin.type.DECRESC:\n        ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  draw(): void {\n    this.checkContext();\n    this.setRendered();\n\n    const firstNote = this.first_note;\n    const lastNote = this.last_note;\n    if (!firstNote || !lastNote) throw new RuntimeError('NoNote', 'Notes required to draw');\n\n    const start = firstNote.getModifierStartXY(this.position, 0);\n    const end = lastNote.getModifierStartXY(this.position, 0);\n\n    this.renderHairpin({\n      first_x: start.x,\n      last_x: end.x,\n      first_y: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n      last_y: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n      staff_height: firstNote.checkStave().getHeight(),\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { TieNotes } from './stavetie';\nimport { TabNote } from './tabnote';\nimport { TabTie } from './tabtie';\nimport { RuntimeError } from './util';\n\nexport class TabSlide extends TabTie {\n  static get CATEGORY(): string {\n    return 'TabSlide';\n  }\n\n  static get SLIDE_UP(): number {\n    return 1;\n  }\n\n  static get SLIDE_DOWN(): number {\n    return -1;\n  }\n\n  static createSlideUp(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_UP);\n  }\n\n  static createSlideDown(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n  }\n\n  /**\n   * @param notes is a struct of the form:\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   * @param notes.first_note the starting note of the slide\n   * @param notes.last_note the ending note of the slide\n   * @param notes.first_indices specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n   * @param notes.last_indices currently unused. we assume it's the same as first_indices.\n   *\n   * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n   */\n  constructor(notes: TieNotes, direction?: number) {\n    super(notes, 'sl.');\n\n    // Determine the direction automatically if it is not provided.\n    if (!direction) {\n      let first_fret = (notes.first_note as TabNote).getPositions()[0].fret;\n      if (typeof first_fret === 'string') {\n        first_fret = parseInt(first_fret, 10);\n      }\n      let last_fret = (notes.last_note as TabNote).getPositions()[0].fret;\n      if (typeof last_fret === 'string') {\n        last_fret = parseInt(last_fret, 10);\n      }\n\n      // If either of the frets are 'X', parseInt() above will return NaN.\n      // Choose TabSlide.SLIDE_UP by default.\n      if (isNaN(first_fret) || isNaN(last_fret)) {\n        direction = TabSlide.SLIDE_UP;\n      } else {\n        direction = first_fret > last_fret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n      }\n    }\n\n    this.direction = direction;\n    this.render_options.cp1 = 11;\n    this.render_options.cp2 = 14;\n    this.render_options.y_shift = 0.5;\n\n    this.setFont({ family: 'Times', size: 10, weight: 'bold italic' });\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new RuntimeError('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    const first_x_px = params.first_x_px;\n    const first_ys = params.first_ys;\n    const last_x_px = params.last_x_px;\n\n    const direction = params.direction;\n    if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n      throw new RuntimeError('BadSlide', 'Invalid slide direction');\n    }\n\n    // eslint-disable-next-line\n    const first_indices = this.notes.first_indices!;\n    for (let i = 0; i < first_indices.length; ++i) {\n      const slide_y = first_ys[first_indices[i]] + this.render_options.y_shift;\n\n      if (isNaN(slide_y)) {\n        throw new RuntimeError('BadArguments', 'Bad indices for slide rendering.');\n      }\n\n      ctx.beginPath();\n      ctx.moveTo(first_x_px, slide_y + 3 * direction);\n      ctx.lineTo(last_x_px, slide_y - 3 * direction);\n      ctx.closePath();\n      ctx.stroke();\n    }\n\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n  protected tuningValues: number[] = [];\n\n  static get names(): Record<string, string> {\n    return {\n      standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n      dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n      dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n      eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n      standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n    };\n  }\n\n  /**\n   * Constructor.\n   * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n   */\n  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n    // Default to standard tuning.\n    this.setTuning(tuningString);\n  }\n\n  /** Return the note number associated to the note string. */\n  noteToInteger(noteString: string): number {\n    return Tables.keyProperties(noteString).int_value;\n  }\n\n  /**\n   * Set tuning identified by tuning name (eg. 'dagdad')\n   * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n   */\n  setTuning(tuningString: string): void {\n    if (Tuning.names[tuningString]) {\n      tuningString = Tuning.names[tuningString];\n    }\n\n    this.tuningValues = [];\n\n    const keys = tuningString.split(/\\s*,\\s*/);\n    if (keys.length === 0) {\n      throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n    }\n\n    for (let i = 0; i < keys.length; ++i) {\n      this.tuningValues[i] = this.noteToInteger(keys[i]);\n    }\n  }\n\n  /** Return the note number associated with a tablature string. */\n  getValueForString(stringNum: string | number): number {\n    const s = Number(stringNum);\n    if (s < 1 || s > this.tuningValues.length) {\n      throw new RuntimeError(\n        'BadArguments',\n        `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`\n      );\n    }\n\n    return this.tuningValues[s - 1];\n  }\n\n  /** Return the note number associated with a tablature string and fret. */\n  getValueForFret(fretNum: string | number, stringNum: string | number): number {\n    const stringValue = this.getValueForString(stringNum);\n    const f = Number(fretNum);\n\n    if (f < 0) {\n      throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n    }\n\n    return stringValue + f;\n  }\n\n  /** Return the note string associated with tablature string and fret. */\n  getNoteForFret(fretNum: string | number, stringNum: string | number): string {\n    const noteValue = this.getValueForFret(fretNum, stringNum);\n\n    const octave = Math.floor(noteValue / 12);\n    const value = noteValue % 12;\n\n    return `${Tables.integerToNote(value)}/${octave}`;\n  }\n}\n","import { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { ChordSymbol } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, Fonts } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Modifier } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { Barline } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { Repetition } from './staverepetition';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Volta } from './stavevolta';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { System } from './system';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextFont } from './textfont';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\n\nexport const Flow = {\n  Accidental,\n  Annotation,\n  Articulation,\n  Barline,\n  BarNote,\n  Beam,\n  Bend,\n  BoundingBox,\n  BoundingBoxComputation,\n  ChordSymbol,\n  Clef,\n  ClefNote,\n  Crescendo,\n  Curve,\n  Dot,\n  EasyScore,\n  Element,\n  Factory,\n  Font,\n  Fonts,\n  Formatter,\n  Fraction,\n  FretHandFinger,\n  GhostNote,\n  Glyph,\n  GlyphNote,\n  GraceNote,\n  GraceNoteGroup,\n  GraceTabNote,\n  KeyManager,\n  KeySignature,\n  KeySigNote,\n  Modifier,\n  ModifierContext,\n  MultiMeasureRest,\n  Music,\n  Note,\n  NoteHead,\n  NoteSubGroup,\n  Ornament,\n  Parser,\n  PedalMarking,\n  Registry,\n  RenderContext,\n  Renderer,\n  RepeatNote,\n  Repetition,\n  Stave,\n  StaveConnector,\n  StaveHairpin,\n  StaveLine,\n  StaveModifier,\n  StaveNote,\n  StaveTempo,\n  StaveText,\n  StaveTie,\n  Stem,\n  StringNumber,\n  Stroke,\n  System,\n  TabNote,\n  TabSlide,\n  TabStave,\n  TabTie,\n  TextBracket,\n  TextDynamics,\n  TextFont,\n  TextNote,\n  TickContext,\n  TimeSignature,\n  TimeSigNote,\n  Tremolo,\n  Tuning,\n  Tuplet,\n  Vibrato,\n  VibratoBracket,\n  Voice,\n  Volta,\n\n  // BUILD and VERSION are set by webpack. See: Gruntfile.js.\n  BUILD: '',\n  VERSION: '',\n\n  get DEFAULT_FONT_STACK(): Font[] {\n    return Tables.DEFAULT_FONT_STACK;\n  },\n  set DEFAULT_FONT_STACK(value: Font[]) {\n    Tables.DEFAULT_FONT_STACK = value;\n  },\n  get DEFAULT_NOTATION_FONT_SCALE(): number {\n    return Tables.DEFAULT_NOTATION_FONT_SCALE;\n  },\n  set DEFAULT_NOTATION_FONT_SCALE(value: number) {\n    Tables.DEFAULT_NOTATION_FONT_SCALE = value;\n  },\n  get DEFAULT_TABLATURE_FONT_SCALE(): number {\n    return Tables.DEFAULT_TABLATURE_FONT_SCALE;\n  },\n  set DEFAULT_TABLATURE_FONT_SCALE(value: number) {\n    Tables.DEFAULT_TABLATURE_FONT_SCALE = value;\n  },\n  get RESOLUTION(): number {\n    return Tables.RESOLUTION;\n  },\n  set RESOLUTION(value: number) {\n    Tables.RESOLUTION = value;\n  },\n  get SLASH_NOTEHEAD_WIDTH(): number {\n    return Tables.SLASH_NOTEHEAD_WIDTH;\n  },\n  set SLASH_NOTEHEAD_WIDTH(value: number) {\n    Tables.SLASH_NOTEHEAD_WIDTH = value;\n  },\n  get STAVE_LINE_DISTANCE(): number {\n    return Tables.STAVE_LINE_DISTANCE;\n  },\n  set STAVE_LINE_DISTANCE(value: number) {\n    Tables.STAVE_LINE_DISTANCE = value;\n  },\n  get STAVE_LINE_THICKNESS(): number {\n    return Tables.STAVE_LINE_THICKNESS;\n  },\n  set STAVE_LINE_THICKNESS(value: number) {\n    Tables.STAVE_LINE_THICKNESS = value;\n  },\n  get STEM_HEIGHT(): number {\n    return Tables.STEM_HEIGHT;\n  },\n  set STEM_HEIGHT(value: number) {\n    Tables.STEM_HEIGHT = value;\n  },\n  get STEM_WIDTH(): number {\n    return Tables.STEM_WIDTH;\n  },\n  set STEM_WIDTH(value: number) {\n    Tables.STEM_WIDTH = value;\n  },\n  get TIME4_4(): { num_beats: number; beat_value: number; resolution: number } {\n    return Tables.TIME4_4;\n  },\n  set TIME4_4(value: { num_beats: number; beat_value: number; resolution: number }) {\n    Tables.TIME4_4 = value;\n  },\n  get accidentalMap(): Record<string, { code: string; parenRightPaddingAdjustment: number }> {\n    return Tables.accidentalMap;\n  },\n  get unicode(): Record<string, string> {\n    return Tables.unicode;\n  },\n  keySignature(spec: string): { type: string; line: number }[] {\n    return Tables.keySignature(spec);\n  },\n  clefProperties(clef: string): { line_shift: number } {\n    return Tables.clefProperties(clef);\n  },\n  // eslint-disable-next-line\n  keyProperties(key: string, clef?: string, params?: any): any {\n    return Tables.keyProperties(key, clef, params);\n  },\n  durationToTicks(duration: string): number {\n    return Tables.durationToTicks(duration);\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\n\nimport { TabNote, TabNoteStruct } from './tabnote';\n\nexport class GraceTabNote extends TabNote {\n  static get CATEGORY(): string {\n    return 'GraceTabNote';\n  }\n\n  constructor(noteStruct: TabNoteStruct) {\n    super(noteStruct, false);\n\n    this.render_options = {\n      ...this.render_options,\n      // vertical shift from stave line\n      y_shift: 0.3,\n      // grace glyph scale\n      scale: 0.6,\n      // grace tablature font\n      font: '7.5pt Arial',\n    };\n\n    this.updateWidth();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\n\nimport { KeyParts, Music } from './music';\nimport { RuntimeError } from './util';\n\nexport class KeyManager {\n  protected music: Music;\n  // all attributes below are initialised in setKey which calls reset in the constructor\n  protected keyParts!: KeyParts;\n  protected keyString!: string;\n  protected key!: string;\n  protected scale!: number[];\n  protected scaleMap!: Record<string, string>;\n  protected scaleMapByValue!: Record<number, string>;\n  protected originalScaleMapByValue!: Record<number, string>;\n\n  constructor(key: string) {\n    this.music = new Music();\n    this.setKey(key);\n  }\n\n  setKey(key: string): this {\n    this.key = key;\n    this.reset();\n    return this;\n  }\n\n  getKey(): string {\n    return this.key;\n  }\n\n  reset(): this {\n    this.keyParts = this.music.getKeyParts(this.key);\n\n    this.keyString = this.keyParts.root;\n    if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\n    const is_supported_type = Music.scaleTypes[this.keyParts.type];\n    if (!is_supported_type) {\n      throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n    }\n\n    this.scale = this.music.getScaleTones(\n      this.music.getNoteValue(this.keyString),\n      Music.scaleTypes[this.keyParts.type]\n    );\n\n    this.scaleMap = {};\n    this.scaleMapByValue = {};\n    this.originalScaleMapByValue = {};\n\n    const noteLocation = Music.root_indices[this.keyParts.root];\n\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n\n      const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n      this.scaleMap[rootName] = noteName;\n      this.scaleMapByValue[this.scale[i]] = noteName;\n      this.originalScaleMapByValue[this.scale[i]] = noteName;\n    }\n\n    return this;\n  }\n\n  getAccidental(key: string): {\n    note: string;\n    accidental?: string;\n    change?: boolean;\n  } {\n    const root = this.music.getKeyParts(key).root;\n    const parts = this.music.getNoteParts(this.scaleMap[root]);\n\n    return {\n      note: this.scaleMap[root],\n      accidental: parts.accidental,\n    };\n  }\n\n  selectNote(note: string): {\n    note: string;\n    accidental?: string;\n    change: boolean;\n  } {\n    note = note.toLowerCase();\n    const parts = this.music.getNoteParts(note);\n\n    // First look for matching note in our altered scale\n    const scaleNote = this.scaleMap[parts.root];\n    const modparts = this.music.getNoteParts(scaleNote);\n\n    if (scaleNote === note) {\n      return {\n        note: scaleNote,\n        accidental: parts.accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in our altered scale\n    const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n    if (valueNote != null) {\n      return {\n        note: valueNote,\n        accidental: this.music.getNoteParts(valueNote).accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in the original scale\n    const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n    if (originalValueNote != null) {\n      this.scaleMap[modparts.root] = originalValueNote;\n      delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n      this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n      return {\n        note: originalValueNote,\n        accidental: this.music.getNoteParts(originalValueNote).accidental,\n        change: true,\n      };\n    }\n\n    // Then try to unmodify a currently modified note.\n    if (modparts.root === note) {\n      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n      this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n      this.scaleMap[modparts.root] = modparts.root;\n      return {\n        note: modparts.root,\n        accidental: undefined,\n        change: true,\n      };\n    }\n\n    // Last resort -- shitshoot\n    delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n    this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\n    delete this.scaleMap[modparts.root];\n    this.scaleMap[modparts.root] = note;\n\n    return {\n      note,\n      accidental: parts.accidental,\n      change: true,\n    };\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n// MIT License\n\nimport { isGraceNote } from 'typeguard';\n\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\n\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n  static get CATEGORY(): string {\n    return 'Tremolo';\n  }\n\n  protected readonly code: string;\n  protected readonly num: number;\n\n  /**\n   * @param num number of bars\n   */\n  constructor(num: number) {\n    super();\n\n    this.num = num;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'tremolo1';\n  }\n\n  /** Draw the tremolo on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const stemDirection = note.getStemDirection();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n\n    const gn = isGraceNote(note);\n    const scale = gn ? GraceNote.SCALE : 1;\n    const category = `tremolo.${gn ? 'grace' : 'default'}`;\n\n    const y_spacing = this.musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n    const height = this.num * y_spacing;\n    let y = note.getStemExtents().baseY - height;\n\n    if (stemDirection < 0) {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n    } else {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n    }\n\n    const fontScale = this.musicFont.lookupMetric(`${category}.point`);\n\n    x += this.musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(ctx, x, y, fontScale, this.code, { category });\n      y += y_spacing;\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RenderContext } from './rendercontext';\n\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n  code: string;\n  constructor(code: string, message: string = '') {\n    super('[RuntimeError] ' + code + ': ' + message);\n    this.code = code;\n  }\n}\n\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined<T>(x?: T, code: string = 'undefined', message: string = ''): T {\n  if (x === undefined) {\n    throw new RuntimeError(code, message);\n  }\n  return x;\n}\n\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block: string, ...args: any[]): void {\n  if (!args) return;\n  const line = Array.prototype.slice.call(args).join(' ');\n  window.console.log(block + ': ' + line);\n}\n\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args: any[]): void {\n  const line = args.join(' ');\n  const err = new Error();\n  window.console.log('Warning: ', line, err.stack);\n}\n\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x: number, n: number): number {\n  return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a: number, b: number): number {\n  let mid_line = b + (a - b) / 2;\n  if (mid_line % 2 > 0) {\n    mid_line = roundN(mid_line * 10, 5) / 10;\n  }\n  return mid_line;\n}\n\n/**\n * Draw a tiny dot marker on the specified canvas. A great debugging aid.\n * @param ctx canvas context\n * @param x dot x coordinate\n * @param y dot y coordinate\n */\nexport function drawDot(ctx: RenderContext, x: number, y: number, color = '#55'): void {\n  ctx.save();\n  ctx.setFillStyle(color);\n\n  // draw a circle\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n}\n\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text: string): string {\n  return `vf-${text}`;\n}\n\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a: number): number {\n  a = a % (2 * Math.PI);\n  if (a < 0) {\n    a += 2 * Math.PI;\n  }\n  return a;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"vexflow-font-\" + {\"81\":\"leland\",\"289\":\"custom\",\"347\":\"bravura\",\"571\":\"gonville\",\"623\":\"petaluma\"}[chunkId] + \"-min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this[\"webpackChunkVex\"] = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this[\"webpackChunkVex\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","import{Flow}from'flow';Flow.VERSION=\"3.0.9\";Flow.BUILD=\"3c8da63c734ed4a3d5d514de924d6fc96f6de5d3\";","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n\nimport { Flow } from './flow';\nimport { log, RuntimeError } from './util';\n\nexport const Vex = {\n  Flow: Flow,\n\n  forEach:\n    // eslint-disable-next-line\n  (a: any[], fn: any) => {\n      for (let i = 0; i < a.length; i++) {\n        fn(a[i], i);\n      }\n    },\n\n  // Take `arr` and return a new list consisting of the sorted, unique,\n  // contents of arr. Does not modify `arr`.\n  SortAndUnique:\n    // eslint-disable-next-line\n    (arr: any[], cmp: any, eq: any) => {\n      if (arr.length > 1) {\n        const newArr = [];\n        let last;\n        arr.sort(cmp);\n\n        for (let i = 0; i < arr.length; ++i) {\n          if (i === 0 || !eq(arr[i], last)) {\n            newArr.push(arr[i]);\n          }\n          last = arr[i];\n        }\n\n        return newArr;\n      } else {\n        return arr;\n      }\n    },\n\n  // Check if array `a` contains `obj`.\n  Contains:\n    // eslint-disable-next-line\n    (a: any[], obj: any) => {\n      let i = a.length;\n      while (i--) {\n        if (a[i] === obj) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n  // Get the 2D Canvas context from DOM element `canvas_sel`.\n  getCanvasContext: (canvas_sel: string): RenderingContext => {\n    if (!canvas_sel) {\n      throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n    }\n\n    const canvas = document.getElementById(canvas_sel) as HTMLCanvasElement;\n    if (!(canvas && canvas.getContext)) {\n      throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n    }\n\n    return canvas.getContext('2d') as RenderingContext;\n  },\n\n  // Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\n  BM:\n    // eslint-disable-next-line\n  (s: any, f: any) => {\n      const start_time = new Date().getTime();\n      f();\n      const elapsed = new Date().getTime() - start_time;\n      log(s, elapsed + 'ms');\n    },\n\n  // Get stack trace.\n  StackTrace: (): string | undefined => {\n    const err = new Error();\n    return err.stack;\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\n\nexport default Vex;\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","inProgress","dataWebpackPrefix","Fraction","numerator","denominator","set","a","b","Number","isNaN","t","GCD","args","length","LCM","shift","LCMM","u","d","gcd","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","compare","__staticFractionA","copy","simplify","__staticFractionB","subtract","greaterThanEquals","greaterThan","other","Math","floor","abs","__staticFractionTmp","toString","s","q","quotient","f","makeAbs","toSimplifiedString","str","i","split","n","parseInt","BoundingBox","x","y","w","h","that","boundingBox","new_x","new_y","new_w","max","new_h","BoundingBoxComputation","x1","NaN","y1","x2","y2","addPoint","p0x","p0y","p1x","p1y","p2x","p2y","p01x","denom","it","addX","p01y","addY","p3x","p3y","p0","p1","p2","p3","pow","c","b2ac","t1","sqrt","t2","Index","id","type","class","Registry","index","defaultRegistry","registry","undefined","name","value","elem","oldValue","getElementById","setIndexValue","getAttribute","setAttribute","updateIndex","onRegister","attribute","index_attr","index_attr_val","Object","keys","map","k","getElementsByAttribute","className","info","includes","Font","metrics","fontData","fontDataMetrics","_","default","loadBravura","loadCustom","loadGonville","loadPetaluma","loadLeland","getFontData","resolution","key","defaultValue","keyParts","currObj","getMetrics","glyphs","Fonts","Bravura","Gonville","Petaluma","Leland","Custom","customNoteHeads","D0","code","D1","D2","D3","T0","T1","T2","T3","X0","X1","X2","X3","S1","S2","R1","R2","RESOLUTION","durations","1","2","4","8","16","32","64","128","256","accidentals","parenRightPaddingAdjustment","bb","db","bs","bss","o","bbs","ashs","afhf","accSagittal5v7KleismaUp","accSagittal5v7KleismaDown","accSagittal5CommaUp","accSagittal5CommaDown","accSagittal7CommaUp","accSagittal7CommaDown","accSagittal25SmallDiesisUp","accSagittal25SmallDiesisDown","accSagittal35MediumDiesisUp","accSagittal35MediumDiesisDown","accSagittal11MediumDiesisUp","accSagittal11MediumDiesisDown","accSagittal11LargeDiesisUp","accSagittal11LargeDiesisDown","accSagittal35LargeDiesisUp","accSagittal35LargeDiesisDown","accSagittalSharp25SDown","accSagittalFlat25SUp","accSagittalSharp7CDown","accSagittalFlat7CUp","accSagittalSharp5CDown","accSagittalFlat5CUp","accSagittalSharp5v7kDown","accSagittalFlat5v7kUp","accSagittalSharp","accSagittalFlat","accSagittalSharp5v7kUp","accSagittalFlat5v7kDown","accSagittalSharp5CUp","accSagittalFlat5CDown","accSagittalSharp7CUp","accSagittalFlat7CDown","accSagittalSharp25SUp","accSagittalFlat25SDown","accSagittalSharp35MUp","accSagittalFlat35MDown","accSagittalSharp11MUp","accSagittalFlat11MDown","accSagittalSharp11LUp","accSagittalFlat11LDown","accSagittalSharp35LUp","accSagittalFlat35LDown","accSagittalDoubleSharp25SDown","accSagittalDoubleFlat25SUp","accSagittalDoubleSharp7CDown","accSagittalDoubleFlat7CUp","accSagittalDoubleSharp5CDown","accSagittalDoubleFlat5CUp","accSagittalDoubleSharp5v7kDown","accSagittalDoubleFlat5v7kUp","accSagittalDoubleSharp","accSagittalDoubleFlat","accSagittal7v11KleismaUp","accSagittal7v11KleismaDown","accSagittal17CommaUp","accSagittal17CommaDown","accSagittal55CommaUp","accSagittal55CommaDown","accSagittal7v11CommaUp","accSagittal7v11CommaDown","accSagittal5v11SmallDiesisUp","accSagittal5v11SmallDiesisDown","accSagittalSharp5v11SDown","accSagittalFlat5v11SUp","accSagittalSharp7v11CDown","accSagittalFlat7v11CUp","accSagittalSharp55CDown","accSagittalFlat55CUp","accSagittalSharp17CDown","accSagittalFlat17CUp","accSagittalSharp7v11kDown","accSagittalFlat7v11kUp","accSagittalSharp7v11kUp","accSagittalFlat7v11kDown","accSagittalSharp17CUp","accSagittalFlat17CDown","accSagittalSharp55CUp","accSagittalFlat55CDown","accSagittalSharp7v11CUp","accSagittalFlat7v11CDown","accSagittalSharp5v11SUp","accSagittalFlat5v11SDown","accSagittalDoubleSharp5v11SDown","accSagittalDoubleFlat5v11SUp","accSagittalDoubleSharp7v11CDown","accSagittalDoubleFlat7v11CUp","accSagittalDoubleSharp55CDown","accSagittalDoubleFlat55CUp","accSagittalDoubleSharp17CDown","accSagittalDoubleFlat17CUp","accSagittalDoubleSharp7v11kDown","accSagittalDoubleFlat7v11kUp","accSagittal23CommaUp","accSagittal23CommaDown","accSagittal5v19CommaUp","accSagittal5v19CommaDown","accSagittal5v23SmallDiesisUp","accSagittal5v23SmallDiesisDown","accSagittalSharp5v23SDown","accSagittalFlat5v23SUp","accSagittalSharp5v19CDown","accSagittalFlat5v19CUp","accSagittalSharp23CDown","accSagittalFlat23CUp","accSagittalSharp23CUp","accSagittalFlat23CDown","accSagittalSharp5v19CUp","accSagittalFlat5v19CDown","accSagittalSharp5v23SUp","accSagittalFlat5v23SDown","accSagittalDoubleSharp5v23SDown","accSagittalDoubleFlat5v23SUp","accSagittalDoubleSharp5v19CDown","accSagittalDoubleFlat5v19CUp","accSagittalDoubleSharp23CDown","accSagittalDoubleFlat23CUp","accSagittal19SchismaUp","accSagittal19SchismaDown","accSagittal17KleismaUp","accSagittal17KleismaDown","accSagittal143CommaUp","accSagittal143CommaDown","accSagittal11v49CommaUp","accSagittal11v49CommaDown","accSagittal19CommaUp","accSagittal19CommaDown","accSagittal7v19CommaUp","accSagittal7v19CommaDown","accSagittal49SmallDiesisUp","accSagittal49SmallDiesisDown","accSagittal23SmallDiesisUp","accSagittal23SmallDiesisDown","accSagittal5v13MediumDiesisUp","accSagittal5v13MediumDiesisDown","accSagittal11v19MediumDiesisUp","accSagittal11v19MediumDiesisDown","accSagittal49MediumDiesisUp","accSagittal49MediumDiesisDown","accSagittal5v49MediumDiesisUp","accSagittal5v49MediumDiesisDown","accSagittal49LargeDiesisUp","accSagittal49LargeDiesisDown","accSagittal11v19LargeDiesisUp","accSagittal11v19LargeDiesisDown","accSagittal5v13LargeDiesisUp","accSagittal5v13LargeDiesisDown","accSagittalSharp23SDown","accSagittalFlat23SUp","accSagittalSharp49SDown","accSagittalFlat49SUp","accSagittalSharp7v19CDown","accSagittalFlat7v19CUp","accSagittalSharp19CDown","accSagittalFlat19CUp","accSagittalSharp11v49CDown","accSagittalFlat11v49CUp","accSagittalSharp143CDown","accSagittalFlat143CUp","accSagittalSharp17kDown","accSagittalFlat17kUp","accSagittalSharp19sDown","accSagittalFlat19sUp","accSagittalSharp19sUp","accSagittalFlat19sDown","accSagittalSharp17kUp","accSagittalFlat17kDown","accSagittalSharp143CUp","accSagittalFlat143CDown","accSagittalSharp11v49CUp","accSagittalFlat11v49CDown","accSagittalSharp19CUp","accSagittalFlat19CDown","accSagittalSharp7v19CUp","accSagittalFlat7v19CDown","accSagittalSharp49SUp","accSagittalFlat49SDown","accSagittalSharp23SUp","accSagittalFlat23SDown","accSagittalSharp5v13MUp","accSagittalFlat5v13MDown","accSagittalSharp11v19MUp","accSagittalFlat11v19MDown","accSagittalSharp49MUp","accSagittalFlat49MDown","accSagittalSharp5v49MUp","accSagittalFlat5v49MDown","accSagittalSharp49LUp","accSagittalFlat49LDown","accSagittalSharp11v19LUp","accSagittalFlat11v19LDown","accSagittalSharp5v13LUp","accSagittalFlat5v13LDown","accSagittalDoubleSharp23SDown","accSagittalDoubleFlat23SUp","accSagittalDoubleSharp49SDown","accSagittalDoubleFlat49SUp","accSagittalDoubleSharp7v19CDown","accSagittalDoubleFlat7v19CUp","accSagittalDoubleSharp19CDown","accSagittalDoubleFlat19CUp","accSagittalDoubleSharp11v49CDown","accSagittalDoubleFlat11v49CUp","accSagittalDoubleSharp143CDown","accSagittalDoubleFlat143CUp","accSagittalDoubleSharp17kDown","accSagittalDoubleFlat17kUp","accSagittalDoubleSharp19sDown","accSagittalDoubleFlat19sUp","accSagittalShaftUp","accSagittalShaftDown","accSagittalAcute","accSagittalGrave","accSagittal1MinaUp","accSagittal1MinaDown","accSagittal2MinasUp","accSagittal2MinasDown","accSagittal1TinaUp","accSagittal1TinaDown","accSagittal2TinasUp","accSagittal2TinasDown","accSagittal3TinasUp","accSagittal3TinasDown","accSagittal4TinasUp","accSagittal4TinasDown","accSagittal5TinasUp","accSagittal5TinasDown","accSagittal6TinasUp","accSagittal6TinasDown","accSagittal7TinasUp","accSagittal7TinasDown","accSagittal8TinasUp","accSagittal8TinasDown","accSagittal9TinasUp","accSagittal9TinasDown","accSagittalFractionalTinaUp","accSagittalFractionalTinaDown","accidentalNarrowReversedFlat","accidentalNarrowReversedFlatAndFlat","accidentalWilsonPlus","accidentalWilsonMinus","duration_codes","Tables","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","DEFAULT_FONT_STACK","DEFAULT_NOTATION_FONT_SCALE","DEFAULT_TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","IsKerned","clefProperties","clef","props","treble","line_shift","bass","tenor","alto","soprano","percussion","subbass","french","params","options","octave_shift","pieces","toUpperCase","C","int_val","CN","accidental","CB","CBB","D","DN","DB","DBB","E","EN","EB","EBB","F","FN","FB","FBB","G","GN","GB","GBB","A","AN","AB","ABB","B","BN","BB","BBB","R","rest","X","octave","shift_right","line","stroke","int_value","extraProps","glyph_name","displaced","integer","noteValue","0","3","5","6","7","9","10","11","fret","scale","glyph","width","shift_y","glyphMetrics","Glyph","height","textWidth","text","getWidth","articulationCodes","artic","between_lines","av","aboveCode","belowCode","ao","ah","am","accidentalMap","accidentalCodes","acc","accidentalColumnsTable","second_on_bottom","spaced_out_tetrachord","spaced_out_pentachord","very_spaced_out_pentachord","spaced_out_hexachord","very_spaced_out_hexachord","ornamentCodes","mordent","mordent_inverted","turn","turn_inverted","tr","upprall","downprall","prallup","pralldown","upmordent","downmordent","lineprall","prallprall","scoop","doit","fall","doitLong","fallLong","bend","plungerClosed","plungerOpen","flip","jazzTurn","smear","spec","keySpec","num","Am","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","Em","Bm","notes","acc_list","push","unicode","sharp","String","fromCharCode","flat","natural","triangle","degrees","circle","duration","alias","durationToFraction","parse","sanitizeDuration","durationToNumber","ticks","common","stem","stem_offset","flag","stem_up_extension","stem_down_extension","tabnote_stem_up_extension","tabnote_stem_down_extension","dot_shiftY","line_above","line_below","code_head","m","r","position","beam_count","code_flag_upstem","code_flag_downstem","glyphTypeProperties","customGlyphTypeProperties","validTypes","TIME4_4","num_beats","beat_value","Element","attrs","newID","el","getCategory","classes","rendered","setFontStack","register","ID","constructor","CATEGORY","fontStack","musicFont","style","context","getStyle","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restore","checkContext","applyStyle","draw","restoreStyle","onUpdate","oldID","GlyphCacheEntry","category","point","loadMetrics","bbox","getOutlineBoundingBox","outline","x_shift","y_shift","lookupFontMetric","font","GlyphOutline","originX","originY","result","parts","super","topGlyphs","botGlyphs","getFontStack","originShift","setOptions","reset","lookupMetric","getGlyphs","lookupGlyph","x_min","x_max","ha","cached_outline","ctx","x_pos","y_pos","data","cache","lookup","getResolution","renderOutline","go","beginPath","done","next","moveTo","nextX","nextY","lineTo","quadraticCurveTo","bezierCurveTo","fill","bboxComp","penX","penY","addQuadraticCurve","addBezierCurve","getX1","getY1","getW","stave","getX","getY","getH","checkMetrics","metricsScale","xShift","yShift","setOriginX","setOriginY","setRendered","xPos","yPos","checkStave","getYForGlyphs","ModifierPosition","Map","entries","get","entry","Modifier","text_line","Position","LEFT","spacingFromNextModifier","center","CENTER","above","ABOVE","below","BELOW","left","right","RIGHT","note","modifierContext","PositionString","subNotes","tickContext","getTickContext","getStave","subNoteXOffset","modLeftPx","modRightPx","getSpacingFromNextModifier","forEach","subNote","subTickContext","setStave","setXOffset","Music","canonical_notes","e","g","unison","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","M","scales","root_index","cn","cb","cbb","dn","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bbb","interval","diatonic_intervals","noteString","toLowerCase","match","exec","keyString","noteValues","intervalString","intervals","isValidNoteValue","intervalValue","isValidIntervalValue","direction","sum","NUM_TONES","getNoteParts","rootValue","getNoteValue","multiplier","reverse_interval","relativeNoteName","tones","nextNote","getRelativeNoteValue","note1","note2","difference","keySignature","keySigParts","getKeyParts","scaleName","scaleTypes","keySigString","getScaleTones","noteLocation","root_indices","scaleMap","roots","rootName","noteName","getRelativeNoteName","Dot","radius","setWidth","dots","state","right_shift","dot_list","max_shift_map","dot","getNote","isStaveNote","checkIndex","getKeyProps","getRightDisplacedHeadPx","isTabNote","note_id","sort","dot_shift","x_width","last_line","last_note","prev_dotted_space","half_shiftY","isRest","setXShift","isGraceNote","checkAttachedNote","lineSpace","getSpacingBetweenLines","start","getModifierStartXY","forceFlagRight","getStemExtents","baseY","arc","PI","Tickable","preFormatted","postFormatted","intrinsicTicks","tickMultiplier","modifiers","tupletStack","align_center","center_x_shift","ignore_ticks","formatterMetrics","freedom","iterations","space","used","mean","deviation","checkTickContext","isCenterAligned","centerXShift","voice","tuplet","noteCount","notesOccupied","indexOf","splice","getNoteCount","getNotesOccupied","applyTickMultiplier","pop","mc","addMember","setPreFormatted","mod","optionalArgs","tc","message","preFormat","clone","multiply","Note","noteStruct","parsedNoteStruct","parseNoteStruct","JSON","stringify","keyProps","noteType","customTypes","duration_override","setDuration","setIntrinsicTicks","getGlyphProps","customGlyphs","playNote","leftDisplacedHeadPx","rightDisplacedHeadPx","ys","setCenterAlignment","render_options","annotation_spacing","glyph_font_scale","stroke_px","xStart","getAbsoluteX","xPre1","xAbs","xPost1","notePx","xPost2","xEnd","xFreedomRight","getFormatterMetrics","xWidth","setFont","fillText","round","getXShift","color","yy","spaceDeviation","prefix","durationString","durationProps","parseDuration","durationToTicks","currentTicks","setNote","setIndex","setYs","getYForLine","setContext","getContext","isTopNote","getYForTopText","beam","modifier","left_shift","glyphWidth","getGlyphWidth","glyphPx","getNoteStartX","getCenterXShift","tieStartX","tieEndX","Stem","stem_up_y_offset","stem_down_y_offset","stem_up_y_base_offset","stem_down_y_base_offset","x_begin","x_end","y_top","y_bottom","stem_extension","stem_direction","hide","isStemlet","stemletHeight","renderHeightAdjustment","ext","y_offset","UP","HEIGHT","isStemUp","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","isVisible","WIDTH","stem_x","stem_y","y_base_offset","DOWN","getHeight","DEBUG","L","stemletYOffset","NoteHead","custom_glyph","stem_up_x_offset","stem_down_x_offset","note_type","glyph_code","custom_glyph_code","slashed","displacementStemAdjustment","fontShift","displacedFontShift","spacing","half_spacing","min_y","getLine","setY","getYForNote","head_x","categorySuffix","staveSpace","closePath","equals","breve_lines","drawSlashNoteHead","renderGlyph","StemmableNote","setStem","hasFlag","flagCode","getStemDirection","getStemExtension","getGlyph","setDirection","setExtension","getBaseCustomNoteHeadGlyph","offsets","offsetYBaseStemUp","offsetYTopStemUp","offsetYBaseStemDown","offsetYTopStemDown","buildFlag","stem_extension_override","getExtents","textLine","hasStem","extents","getYForBottomText","postFormat","stemOptions","shiftRestVertical","dir","delta","isrest","maxLine","minLine","setKeyLine","getKeyLine","StaveNote","ledgerLineStyle","use_default_head_x","note_heads","DEFAULT_LEDGER_LINE_OFFSET","calculateKeyProps","buildStem","auto_stem","autoStem","setStemDirection","formatByY","notesList","minL","stemDirection","stemMax","getStemLength","stemMin","getStemMinimumLength","maxL","voice_shift","getVoiceShiftWidth","is_displaced","isDisplaced","voices","noteU","noteM","noteL","voiceXShift","stemDelta","lineSpacing","setStemLength","centerRest","hasStave","topNote","bottomNote","topKeys","bottomKeys","HALF_NOTEHEAD_HEIGHT","topNoteBottomY","bottomNoteTopY","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","setStyle","head","calcNoteDisplacements","getKeys","lastLine","lineDiff","end","step","noteProps","notehead","calculateOptimalStemDirection","keyProperties","minY","maxY","halfLineSpacing","frac","resultLine","thisLine","getCenterGlyphX","getStemX","getNoteHeadBounds","setYBounds","getRightShift","restLine","top","bot","isInnerNoteIndex","getStem","flagStyle","addModifier","articulation","annotation","setDotShiftY","addDot","checkModifierContext","getMembers","Accidental","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","noteHeadPadding","minNoteheadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","yTop","Infinity","yBottom","highestLine","getNumLines","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","displaced_x","non_displaced_x","highest_line","lowest_line","highest_displaced_line","lowest_displaced_line","highest_non_displaced_line","lowest_non_displaced_line","getNoteHeadBeginX","doubleWidth","min_x","drawLedgerLine","normal","ledgerWidth","getDefaultLedgerLineStyle","getLedgerLineStyle","openGroup","noteheadStyle","drawWithStyle","closeGroup","hasNoBeam","noteStemHeight","flagX","flagY","pointerBBox","getFlagStyle","render","adjustHeightForFlag","super_stem_extension","mid_line_distance","lines_over_octave_from_mid_line","spacing_between_lines","xBegin","shouldRenderStem","setX","stemX","setNoteHeadXBounds","isChord","drawLedgerLines","drawStem","drawNoteHeads","drawFlag","drawModifiers","GraceNote","SCALE","LEDGER_LINE_OFFSET","slash","slur","ret","staveNoteScale","getStaveNoteScale","offsetScale","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","defaultStemExtention","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beam_slope","slope","scaleX","beam_angle","atan","iPointOnBeam","cos","sin","slash_angle","protrusion_stem_dx","protrusion_stem_dy","protrusion_beam_dx","protrusion_beam_dy","stem0X","stemY","getBeamYToDraw","PetalumaScriptTextMetrics","smufl","\"","RobotoSlabTextMetrics","TextFont","family","fontCacheKey","size","maxSizeGlyph","weight","getFontDataByName","updateParams","registerFont","updateCacheKey","registryInstance","fontFamily","serifs","monospaced","italic","bold","superscriptOffset","subscriptOffset","description","hash","returnedFonts","fontRegistry","attr","fw","fs","textWidthCacheInstance","fd","selectedFont","fallback","candidates","families","famliy","filter","fontWeightToBold","fontStyleToItalic","perfect","find","ok","setFontSize","fontName","overwrite","exists","td","getMetricForCharacter","pointsToPixels","metric","advanceWidth","textWidthCache","j","getWidthForCharacter","Justify","VerticalJustify","Annotation","justification","vert_justification","TOP","annotations","testWidth","textFont","getTextFontFromVexFontData","numLines","maxHeight","getWidthForString","getPosition","setTextLine","top_text_line","just","VerticalJustifyString","JustifyString","classString","join","text_width","measureText","text_height","stem_ext","has_stem","checkStem","BOTTOM","stem_base","yt","getYs","centerStem","CENTER_STEM","bottom","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNote","Articulation","font_scale","articulations","getIncrement","reduce","maxWidth","articWidth","builder","articNameToCode","staccato","tenuto","accent","articString","trim","getFactory","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","isOnStemTip","getInitialOffset","padding","getCode","setOrigin","stemTipY","stemBaseY","getTopY","INITIAL_OFFSET","getBottomY","offsetDirection","noteLine","articLine","snappedLine","snapLineToStaff","Bend","release","phrase","line_width","line_style","bend_width","release_width","updateWidth","bends","last_width","measure_text","ctxThat","total_width","additional_width","draw_width","bend_height","annotation_y","renderBend","cp_x","cp_y","renderRelease","renderArrowHead","renderText","setRawFont","render_x","last_bend","last_bend_draw_width","last_drawn_width","ChordSymbol","HorizontalJustify","SymbolTypes","SymbolModifiers","VoiceMode","symbolBlocks","horizontal","vertical","useKerning","reportWidth","getName","chordSymbolMetrics","global","superSubRatio","val","noFormat","glyphCode","ix","y_max","engravingFontResolution","getMetricForGlyph","yOffset","leftSideBearing","kerningOffset","chordSymbol","lowerKerningText","upperKerningText","instances","nonSuperWidth","reportedWidths","instance","fontAdj","glyphAdj","lineSpaces","vAlign","symbol","sup","isSuperscript","sub","isSubscript","subAdj","adj","symbolType","GLYPH","getYShiftForGlyph","getXShiftForGlyph","getWidthForGlyph","TEXT","getYOffsetForText","over","spacingBetweenBlocks","prev","setEnableKerning","updateKerningAdjustments","updateOverBarAdjustments","getVertical","getReportWidth","barIndex","findIndex","xoff","yoff","symIndex","accum","getKerningAdjustment","currSymbol","prevSymbol","adjustment","preKernUpper","preKernLower","some","xx","kerningOffsetPixels","symbolModifier","SUPERSCRIPT","symbolBlock","NONE","glyphArgs","glyphPoints","LINE","parameters","getSymbolBlock","addSymbolBlock","SUBSCRIPT","char","addText","addGlyph","vj","verticalJustifyString","hj","horizontalJustifyString","sp","curY","horizontalJustify","verticalJustify","diminished","dim","halfDiminished","augmented","majorSeventh","leftParen","rightParen","leftBracket","rightBracket","leftParenTall","rightParenTall","symbolTypes","symbolModifiers","FretHandFinger","finger","x_offset","nums","nums_list","prev_note","shiftLeft","shiftRight","pos","getLeftDisplacedHeadPx","shiftL","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","lastNote","num_shift","numWidth","fingerings","fingeringString","number","Fingering","fingering","dot_x","dot_y","Voice","time","voiceTime","resolutionMultiplier","mode","STRICT","ticksUsed","largestTickWidth","tickables","softmaxFactor","totalTicks","smallestTickCount","tickable","getBoundingBox","mergeWith","strict","SOFT","FULL","factor","expTicksUsed","getTicks","tickValue","reCalculateExpTicksUsed","v","exp","shouldIgnoreTicks","add","lessThan","setVoice","addTickable","NoteSubGroup","setIgnoreTicks","formatter","Formatter","setStrict","addTickables","groups","group","joinVoices","format","getMinTotalWidth","alignSubNotesWithNote","TickContext","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","xOffset","tickablesByVoice","totalLeftPx","totalRightPx","tContexts","tContext","contexts","voiceIndex","tick","setTickContext","Ornament","delayed","accidentalLowerPadding","accidentalUpperPadding","ornament","adjustForStemDirection","reportedWidth","stemUpYOffset","ornamentAlignWithNoteHead","ornamentNoteTransition","ornaments","increment","ornamentRelease","ornamentAttack","ornamentArticulation","getLineNumber","jazzOrnaments","accid","accidentalUpper","accidentalLower","stemDir","stemExtents","isPlacedOnNoteheadSide","hasBeam","glyphYBetweenLines","glyphX","glyphY","delayXShift","startX","nextContext","getNextContext","RenderContext","CanvasContext","textHeight","context2D","canvas","limit","CANVAS_BROWSER_SIZE_LIMIT","clearRect","cls","child","blur","getTransform","capType","lineCap","dash","setLineDash","canvasElement","devicePixelRatio","sanitizeCanvasDims","rect","fillRect","cp1x","cp1y","cp2x","cp2y","cpx","cpy","startAngle","endAngle","counterclockwise","fontArray","attrNamesToIgnoreMap","path","SVG_NS","TWO_PI","SVGContext","element","fontString","svg","create","appendChild","parent","pen","defaultAttributes","attributes","background_attributes","shadow_attributes","state_stack","svgElementType","document","createElementNS","foundBold","foundItalic","replace","fontAttributes","lineDash","prototype","call","applyAttributes","visibleWidth","visibleHeight","setViewBox","viewBox_or_minX","viewBoxString","attrNamesToIgnore","nodeName","propertyName","setAttributeNS","lastChild","removeChild","rectangle","x0","y0","large","sweep","sa","getShadowStyle","measureTextCache","txt","textContent","savedState","measureImpl","getBBox","fontSize","substring","Renderer","arg0","arg1","backend","maybeElement","Backends","CANVAS","HTMLCanvasElement","SVG","HTMLDivElement","elementId","background","renderer","resize","setBackgroundFillStyle","lastContext","buildContext","fromX","fromY","toX","toY","dashPattern","dx","dy","angle","atan2","idx","dashLength","nx","ny","LineEndType","StringNumber","string_number","dashed","leg","shift_left","num_shiftR","x_widthL","x_widthR","num_width","line_space","isStemmableNote","len","pattern","setLineCap","drawDashedLine","Stroke","all_voices","stroke_spacing","strokes","strokeList","string","getPositions","strokeShift","note_end","botY","isNote","arrow","arrow_shift_x","arrow_y","text_shift_x","text_y","Type","BRUSH_DOWN","BRUSH_UP","ROLL_DOWN","RASQUEDO_DOWN","ROLL_UP","RASQUEDO_UP","ARPEGGIO_DIRECTIONLESS","strokeLine","Vibrato","harsh","vibrato_width","wave_height","wave_width","wave_girth","setVibratoWidth","vibratos","vibrato","vx","vy","renderVibrato","opts","num_waves","ModifierContext","members","PREFORMAT","GraceNoteGroup","POSTFORMAT","member","setModifierContext","formatted","StaveModifierPosition","BarlineType","Justification","VoltaType","StaveModifier","customShift","setYShift","layoutMetrics","Clef","types","setPosition","BEGIN","setType","tab","attachment","shiftY","setPoint","placeGlyphOnLine","renderToStave","KeySignature","cancelKeySpec","alterKeySpec","accList","setKeySig","glyphFontScale","xPositions","paddingForced","nextAcc","accGlyphData","extraWidth","accidentalSpacing","xPosition","cancel_accList","different_types","naturals","cancelled","concat","customLines","offset","firstAccidentalType","cancelAccList","convertToCancelAccList","convertToAlterAccList","END","getEndClef","getClef","convertAccLines","convertToGlyph","Barline","thickness","TYPE","widths","SINGLE","DOUBLE","REPEAT_BEGIN","REPEAT_END","REPEAT_BOTH","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","single","double","repeatBegin","repeatEnd","repeatBoth","none","typeString","setPadding","setLayoutMetrics","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","double_bar","staveCtx","getTopLineTopY","getBottomLineBottomY","begin","dot_radius","Repetition","symbol_type","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSignoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","draw_coda","text_x","symbol_x","getVerticalBarWidth","modifierWidth","StaveSection","section","shift_x","StaveTempo","tempo","bpm","stem_height","TextNote","superscript","subscript","smooth","struct","GLYPHS","segno","mordent_upper","mordent_lower","p","z","coda","pedal_open","pedal_close","caesura_straight","caesura_curved","breath","StaveText","getBottomLineY","Volta","volta","top_y","vert_height","BEGIN_END","TimeSignatureGlyph","timeSignature","topDigits","botDigits","topWidth","topGlyph","botWidth","botGlyph","topStartX","botStartX","start_x","topLine","bottomLine","TimeSignature","timeSpec","customPadding","validate_args","fontLineShift","parseTimeSpec","numbers","assertIsValidFraction","makeTimeSignatureGlyph","SORT_ORDER_BEG_MODIFIERS","SORT_ORDER_END_MODIFIERS","Stave","end_x","measure","endClef","vertical_bar_width","glyph_spacing_px","num_lines","fill_style","left_bar","right_bar","spacing_between_lines_px","space_above_staff_ln","space_below_staff_ln","top_text_position","bottom_text_position","line_config","cps","bounds","defaultLedgerLineStyle","resetLines","addEndModifier","visible","begBarline","getModifiers","getType","number_t","headroom","clefSpec","clefs","addClef","setClef","keySignatures","addKeySignature","setKeySignature","timeSignatures","addTimeSignature","setTimeSig","setTimeSignature","noPosition","noCategory","items","order","temp","endBarline","begModifiers","endModifiers","sortByCategory","getPadding","lastBarlineIdx","isBarline","getLayoutMetrics","getModifierXShift","line_number","lines_configuration","drawBoldDoubleLine","topX","StaveConnector","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","top_stave","bottom_stave","texts","SINGLE_RIGHT","content","THIN_DOUBLE","attachment_height","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","singleRight","singleLeft","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","sumArray","arr","createContexts","makeContext","addToContext","getResolutionMultiplier","tickToContextMap","tickList","getTickables","integerTicks","newContext","array","list","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","getLineForRest","formatterOptions","globalSoftmax","maxIterations","justifyWidth","totalCost","totalShift","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","modifierContexts","contextGaps","total","gaps","lossHistory","paddingBetween","accumulator","addToModifierContext","stavePadding","gap","toFixed","auto_beam","align_rests","setMode","Mode","beams","Beam","applyAndGetBeams","formatToStave","tabstave","tabnotes","autobeam","notevoice","tabvoice","alignAllNotes","alignTuplets","currTickable","getTuplet","getBeam","prevTickable","AlignRestsToNotes","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","getTotalTicks","getMode","isComplete","contextArray","renderingContext","voicesParam","getMaxTicks","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","getTickablesByVoice","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","getVoice","softmax","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","centerX","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","getCenterAlignedTickables","setCenterXShift","configMinPadding","configMaxPadding","targetWidth","distances","actualWidth","minDistance","mdCalc","di","calcMinDistance","paddingMax","maxX","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","alpha","current","move","cost","postFormatContexts","createModifierContexts","setSoftmaxFactor","alignRests","optionsParam","getNoteEndX","defaultPadding","Tuplet","numerator_glyphs","denom_glyphs","num_notes","beats_occupied","beatsOccupiedDeprecationWarning","notes_occupied","bracketed","ratioed","setTupletLocation","location","LOCATION_TOP","resolveGlyphs","attach","setTuplet","resetTuplet","LOCATION_BOTTOM","console","warn","beats","setNotesOccupied","detach","unshift","first_note","maxTupletCount","countTuplets","minTupletCount","getTupletStack","tupletCount","nested_tuplet_y_offset","getNestedTupletCount","NESTING_OFFSET","bottom_y","getTieLeftX","getTieRightX","getYPosition","addGlyphWidth","notation_start_x","colon_x","colon_radius","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_BOTH","getIntrinsicTicks","memo","setBeam","getBeamCount","break_on_indices","beam_width","max_slope","min_slope","slope_iterations","slope_cost","show_stemlets","stemlet_extension","partial_beam_length","flat_beams","min_flat_beam_offset","time_sig","beatTotal","beatValue","generateBeams","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","vf_notes","unbeamable","getDuration","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","prevNote","breaksOnEachRest","beam_rests","breaksOnFirstOrLastRest","beam_middle_only","breakOnStemChange","maintain_stem_directions","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","secondary_breaks","secondary_break_ticks","flat_beam_offset","setBracketed","beamCount","indices","first_x_px","first_y_px","firstNote","initialSlope","firstStemTipY","firstStemX","getStemSlope","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","getSlopeY","diff","idealSlope","extremeY","extremeBeamCount","currentExtreme","extremeTest","newOffset","beamY","beamedStemTipY","preBeamExtension","getExtension","beamExtension","adjustHeightForBeam","totalBeamWidth","setVisibility","setStemlet","prev_tick","next_tick","lookup_duration","prev_note_gets_beam","next_note_gets_beam","note_gets_beam","lookupBeamDirection","tick_of_duration","beam_started","beam_lines","current_beam","previous_should_break","tick_tally","should_break","next_note","beam_alone","beam_direction","last_beam","valid_beam_durations","beamThickness","beamLines","getBeamLines","beam_line","startBeamX","startBeamY","lastBeamX","lastBeamY","calculateFlatSlope","calculateSlope","applyStemExtensions","drawStems","drawBeamLines","StaveTie","setNotes","cp1","cp2","first_x_shift","last_x_shift","tie_spacing","first_indices","last_indices","first_ys","last_ys","last_x_px","last_y_px","top_cp_y","bottom_cp_y","center_x","getTieStartX","getTieEndX","renderTie","TabTie","grace_notes","show_slur","slur_y_shift","gracenote_groups","group_list","gracenote_group","is_stavenote","formatWidth","group_shift","setSpacingFromNextModifier","getGraceNotes","graceNote","TieClass","TabNote","draw_stem","ghost","positions","draw_dots","draw_stem_through_stave","tabToGlyph","getStemY","stemDownLine","stemStartLine","flag_x","flag_y","flag_code","isDot","stem_through","stem_lines","unused_strings","up_stem","down_stem","line_spacing","total_lines","strings","containsLastString","containsFirstString","line_ys","isTopBound","isBottomBound","getPartialStemLines","strings_used","getUnusedStringGroups","tab_x","render_stem","drawPositions","drawStemThrough","obj","isCategory","checkAncestors","constructorFcn","categoryToMatch","getPrototypeOf","parenLeftPadding","parenRightPadding","cautionary","noteheadAccidentalPadding","leftShift","additionalPadding","accLine","lineList","previousLine","accShift","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","checkCollision","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","accCount","lastAccOnLine","clearance","clearanceRequired","collision","tickPositions","tickNoteMap","tickPosition","notesAtPosition","music","scaleMapKey","createScaleMap","tickPos","modifiedPitches","processNote","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","getIndex","addAccidental","fontScale","parenLeft","parenRight","parenWidth","accX","accY","BarNote","barline","ClefNote","clef_obj","abs_x","Crescendo","extend_left","extend_right","decrescendo","decresc","tick_context","next_context","begin_x","half_height","reverse","renderHairpin","CurvePosition","Curve","from","to","NEAR_HEAD","position_end","invert","nearHead","nearTop","NEAR_TOP","first_x","first_y","last_x","last_y","cp0x","cp0y","cp_spacing","end_metric","renderCurve","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","returnPos","token","noSpace","regexp","RegExp","slice","success","incrementPos","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","matchSuccess","matchFail","more","expectOne","expectOneOrMore","ruleFunc","bind","matchToken","oneOrMore","zeroOrMore","expectZeroOrMore","matches","run","EasyScore","EasyScoreGrammar","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","commitHook","piece","addNote","standardAccidentals","notePiece","addDotToAll","setId","commaSeparatedRegex","setClass","addClass","defaults","easyScoreHook","throwOnError","parser","addCommitHook","getElements","ERROR_MSG","GhostNote","parameter","GlyphNote","ignoreTicks","setGlyph","KeySigNote","semibreve_rest","MultiMeasureRest","number_of_measures","xs","hasPaddingLeft","hasPaddingRight","hasLineThickness","hasSymbolSpacing","padding_left","padding_right","line_thickness","symbol_spacing","use_symbols","show_number","number_line","number_glyph_point","serif_thickness","semibreve_rest_glyph_scale","spacingBetweenLines","lineThicknessHalf","serifThickness","leftIndented","rightIndented","lineTop","lineBottom","n4","n2","n1","get_semibreve_rest","rest_scale","rest_width","yMiddle","drawSymbols","drawLine","timeSig","getInfo","drawPedalGlyph","glyph_data","PedalMarking","custom_depress_text","custom_release_text","bracket_height","text_margin_right","bracket_line_width","pedal","MIXED","setCustomText","depress","prev_x","prev_y","is_pedal_depressed","next_is_same","prev_is_same","drawBracketed","drawText","pedal_depress","pedal_release","mixed","CODES","RepeatNote","drawArrowHead","StaveLine","line_dash","rounded_end","draw_start_arrow","draw_end_arrow","arrowhead_length","arrowhead_angle","text_position_vertical","TextVerticalPosition","text_justification","TextJustification","pt1","pt2","both_arrows","distance","ratio","end_y","start_y","line_angle","angle1","angle2","top_x","bottom_x","applyLineStyle","start_position","end_position","first_index","last_index","upwards_slope","notehead_width","drawArrowLine","vertical_position","applyFontStyle","System","Factory","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","connector","staveOptions","spaceAbove","spaceBelow","debugNoteMetrics","options_details","allVoices","debugNoteMetricsYs","part","setNoteStartX","preCalculateMinTotalWidth","rightPadding","tune","lastY","plotDebugging","plotMetrics","TabStave","TextBracket","TextBracketPosition","stop","show_bracket","underline_superscript","main_measure","main_width","main_height","super_y","super_measure","super_width","super_height","line_y","TextDynamics","sequence","glyph_font_size","letter","letter_x","current_letter","TimeSigNote","timeSigInfo","VibratoBracket","bracket_data","stop_x","renderQ","systems","staves","initRenderer","ghostNote","textNote","barNote","clefNote","timeSigNote","keySigNote","cancelKey","alterKey","vJustify","hJustify","fontWeight","setJustification","setVerticalJustification","kerning","setHorizontal","setVertical","setReportWidth","stringNumber","numMeasures","multiMeasureRest","breakSecondaryAt","secondaryBeamBreaks","curve","tie","setText","vibratoBracket","setLine","setHarsh","textBracket","system","isRendered","StaveHairpin","hairpin","left_shift_px","right_shift_px","right_shift_ticks","left_shift_ticks","ppt","pixelsPerTick","l_shift_px","r_shift_px","hairpin_options","setRenderOptions","dis","staff_height","l_shift","r_shift","CRESC","DECRESC","TabSlide","SLIDE_UP","SLIDE_DOWN","first_fret","last_fret","slide_y","Tuning","tuningString","tuningValues","setTuning","standard","dagdad","dropd","standardBanjo","names","noteToInteger","stringNum","fretNum","stringValue","getValueForString","getValueForFret","integerToNote","Flow","GraceTabNote","KeyManager","setKey","scaleMapByValue","originalScaleMapByValue","scaleNote","modparts","change","valueNote","originalValueNote","Tremolo","y_spacing","BUILD","VERSION","RuntimeError","Error","defined","log","block","Array","err","stack","midLine","mid_line","drawDot","normalizeAngle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","defineProperty","enumerable","chunkId","Promise","all","promises","Function","prop","hasOwnProperty","l","url","script","needAttach","scripts","getElementsByTagName","createElement","charset","timeout","nc","src","onScriptComplete","event","onerror","onload","clearTimeout","doneFns","parentNode","setTimeout","target","Symbol","toStringTag","scriptUrl","importScripts","currentScript","installedChunks","179","installedChunkData","promise","resolve","reject","error","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","chunkLoadingGlobal","SortAndUnique","cmp","eq","newArr","last","Contains","getCanvasContext","canvas_sel","BM","start_time","Date","getTime","elapsed","StackTrace"],"sourceRoot":""}