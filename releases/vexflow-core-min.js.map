{"version":3,"file":"vexflow-core-min.js","mappings":"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B,GAA4B,CACvCv7D,KAAM,iBACNw7D,OAAO,EACP7xB,QAAQ,GACR,OAAU,CACR,IAAK,CACH,MAAS,EACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,EACnB,aAAgB,KAChB,EAAK,CACL,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,EACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAM,CACJ,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,EACV,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,iBAAoB,EACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,GACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,GACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,GACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,kBACT,MAAS,IACT,GAAM,kBACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,KAAM,CACJ,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,OAAU,EACV,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,IACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,IACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,GACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,MAIpB,WAAc,kBACd,WAAc,IACd,YAAe,4BC/1BJ8xB,GAAwB,CACnCz7D,KAAM,cACNw7D,OAAO,EACP7xB,QAAQ,GACR,OAAU,CACR,IAAK,CACH,MAAS,EACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,EACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,EAAK,CACH,MAAS,iBACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,kBACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,iBACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAM,CACJ,MAAS,IACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,kBACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,IACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,kBACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,iBACT,MAAS,mBACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,KAAM,CACJ,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,IACV,MAAS,EACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,OAAU,GACV,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,KACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,OAGpB,WAAc,cACd,WAAc,KACd,YAAe,4BCjzBV,MAAM+xB,GA6MX37D,YAAY+Q,GAMV,GAjNF,KAAA/P,WAAqB,IAEX,KAAAY,OAA0C,GAC1C,KAAA0kD,OAAiB,GAWjB,KAAAsV,aAAuB,GA8L/Bh8D,KAAK2mD,KAAO,GACZ3mD,KAAKi8D,aAAe,IACpBj8D,KAAK4mD,OAAS,GACd5mD,KAAK+I,MAAQ,GACb/I,KAAKkI,MAAQ,CAAE/B,KAAM,aAChBgL,EAAO9Q,KACV,MAAM,IAAI,KAAa,cAAe,wCAExC,MAAME,EAAW4Q,EAAOnP,OAASmP,EAAS4qD,GAASG,kBAAkB/qD,EAAO9Q,MAC5E,GAAKE,EAOHP,KAAKm8D,aAAa57D,OAPL,CACb,IAAI4Q,EAAOnP,SAAUmP,EAAO/P,WAG1B,MAAM,IAAI,KAAa,cAAe,wDAFtC26D,GAASK,aAAajrD,GAO1BnR,KAAKm8D,aAAahrD,GAElBnR,KAAKq8D,iBA1MP,sBACE,MAAO,WAGT,mBACE,OAAON,GAASO,MAGlB,iBAAiBC,GACfR,GAASO,MAAQC,EAOnB,0BAgCE,OA/BKR,GAASS,mBACZT,GAASS,iBAAmB,GAC5BT,GAASS,iBAAiBtsD,KAAK,CAC7B7P,KAAM,cACNe,WAAY06D,GAAsB16D,WAClCY,OAAQ85D,GAAsB95D,OAC9B0kD,OAAQoV,GAAsBW,WAC9BC,QAAQ,EACRC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACNZ,aAAc,IACda,kBAAmB,IACnBC,gBAAiB,IACjBC,YAAa,yEAEfjB,GAASS,iBAAiBtsD,KAAK,CAC7B7P,KAAM,iBACNe,WAAYw6D,GAA0Bx6D,WACtCY,OAAQ45D,GAA0B55D,OAClC0kD,OAAQkV,GAA0Ba,WAClCC,QAAQ,EACRC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACNZ,aAAc,IACda,kBAAmB,IACnBC,gBAAiB,IACjBC,YAAa,uEAGVjB,GAASS,iBAOlB,yBACE,MAAMS,EAAyC,GACzCC,EAAoC,GAC1CnB,GAASoB,aAAa5jC,SAAS/pB,IACxBytD,EAAKztD,EAAKk3C,QASb,CAAC,OAAQ,SAAU,aAAc,UAAUntB,SAAS6jC,IAC9C5tD,EAAK4tD,KACPH,EAAKztD,EAAKk3C,QAAQ0W,IAAQ,MAV9BH,EAAKztD,EAAKk3C,QAAU,CAClBA,OAAQl3C,EAAKk3C,OACbsW,YAAaxtD,EAAKwtD,YAClBH,KAAMrtD,EAAKqtD,KACXH,OAAQltD,EAAKktD,OACbE,OAAQptD,EAAKotD,WAcnB,OAJar1D,OAAOC,KAAKy1D,GACpB1jC,SAASh4B,IACZ27D,EAAchtD,KAAK+sD,EAAK17D,OAEnB27D,EAMT,wBAAwBG,GACtB,QAAKA,IAGDv6D,MAAMkD,SAASq3D,EAAI,KACO,SAArBA,EAAG/oC,cAGLtuB,SAASq3D,EAAI,KAAO,KAM7B,yBAAyBC,GACvB,MAAqB,iBAAPA,GAAwC,WAArBA,EAAGhpC,cAKtC,4BAIE,YAH+C,IAApCynC,GAASwB,yBAClBxB,GAASwB,uBAAyB,IAE7BxB,GAASwB,uBAOlB,kCAAkCC,GAChC,IACIC,EADA77D,EAAI,EAER,MAAM87D,EAAW3B,GAASoB,aAAa,GACvC,IAAIQ,EAAiC,GACrC,MAAMC,EAAWJ,EAAG9W,OAAOhlD,MAAM,KACjC,IAAKE,EAAI,EAAGA,EAAIg8D,EAAS/7D,SAAUD,EAAG,CACpC,MAAMi8D,EAASD,EAASh8D,GAExB,GADA+7D,EAAa5B,GAASoB,aAAaj+B,QAAQ1vB,GAASA,EAAKk3C,SAAWmX,IAChEF,EAAW97D,OACb,MAGJ,GAA0B,IAAtB87D,EAAW97D,OACb47D,EAAe,IAAI1B,GAAS2B,QACvB,GAA0B,IAAtBC,EAAW97D,OACpB47D,EAAe,IAAI1B,GAAS4B,EAAW,QAClC,CACL,MAAMd,EAAOd,GAAS+B,iBAAiBN,EAAG5W,QACpCgW,EAASb,GAASgC,kBAAkBP,EAAGz0D,OACvCi1D,EAAUL,EAAWM,MAAMzuD,GAASA,EAAKqtD,OAASA,GAAQrtD,EAAKotD,SAAWA,IAChF,GAAIoB,EACFP,EAAe,IAAI1B,GAASiC,OACvB,CACL,MAAME,EAAKP,EAAWM,MAAMzuD,GAASA,EAAKotD,SAAWA,GAAUptD,EAAKqtD,OAASA,IAE3EY,EAAe,IAAI1B,GADjBmC,GAG0BP,EAAW,KAO7C,MAHuB,iBAAZH,EAAG7W,MAAqB6W,EAAG7W,KAAO,GAC3C8W,EAAaU,YAAYX,EAAG7W,MAEvB8W,EAGT,yBAAyBW,GACvB,OAAOrC,GAASoB,aAAac,MAAMT,GAAOA,EAAGn9D,OAAS+9D,IAQxD,oBAAoB79D,EAA4B89D,GAE9C,MACMC,EADMvC,GAASoB,aACFc,MAAMM,GAAOh+D,EAASF,OAASk+D,EAAGl+D,OACjDi+D,GAAUD,IACZtC,GAASS,iBAAmBT,GAASoB,aAAaj+B,QAAQs+B,GAAOA,EAAGn9D,OAASi+D,EAAOj+D,QAEjFi+D,KAxMT,YAEKr7D,GACC84D,GAASx/B,QAAO,QAAI,oBAAqBt5B,GAsMzC,CAAE,oBAAsB1C,EAASF,MACjC07D,GAASS,iBAAiBtsD,KAAK3P,IAiCnC47D,aAAahrD,GACPA,EAAO9Q,OAAML,KAAKK,KAAO8Q,EAAO9Q,MAChC8Q,EAAO/P,aAAYpB,KAAKoB,WAAa+P,EAAO/P,YAC5C+P,EAAOnP,SAAQhC,KAAKgC,OAASmP,EAAOnP,QACxChC,KAAK0mD,OAASv1C,EAAOu1C,OACrB1mD,KAAK08D,OAASvrD,EAAOurD,OACjBvrD,EAAOwrD,aAAY38D,KAAK28D,WAAaxrD,EAAOwrD,YAChD38D,KAAK48D,OAASzrD,EAAOyrD,OACrB58D,KAAK68D,KAAO1rD,EAAO0rD,KACf1rD,EAAO8qD,eAAcj8D,KAAKi8D,aAAe9qD,EAAO8qD,cAChD9qD,EAAO2rD,oBAAmB98D,KAAK88D,kBAAoB3rD,EAAO2rD,mBAC1D3rD,EAAO4rD,kBAAiB/8D,KAAK+8D,gBAAkB5rD,EAAO4rD,iBAI5DV,iBACEr8D,KAAKg8D,aAAe,GAAGh8D,KAAK0mD,UAAU1mD,KAAK2mD,QAAQ3mD,KAAK4mD,UAAU5mD,KAAK+I,QAGzEy1D,sBAAsBxxD,GACpB,OAAIhN,KAAKgC,OAAOgL,GACPhN,KAAKgC,OAAOgL,GAEdhN,KAAKgC,OAAOhC,KAAKi8D,cAG1B,gBAEE,OADcj8D,KAAKw+D,sBAAsBx+D,KAAKi8D,cAChClrD,GAAK/Q,KAAKoB,WAAcpB,KAAKy+D,eAG7CC,qBAAqB1xD,GACnB,MAAM2xD,EAAS3+D,KAAKw+D,sBAAsBxxD,GAC1C,OAAK2xD,EAGGA,EAAOC,aAAe5+D,KAAKoB,WAAcpB,KAAKy+D,eAF7C,IAAOz+D,KAAKy+D,eAKvBI,kBAAkBn5D,QAG0C,IAA/Cq2D,GAAS+C,eAAe9+D,KAAKg8D,gBACtCD,GAAS+C,eAAe9+D,KAAKg8D,cAAgB,IAE/C,IAAI1wD,EAAQ,EACZ,IAAKywD,GAAS+C,eAAe9+D,KAAKg8D,cAAct2D,GAAI,CAClD,IAAK,IAAI29C,EAAI,EAAGA,EAAI39C,EAAE7D,SAAUwhD,EAC9B/3C,GAAStL,KAAK0+D,qBAAqBh5D,EAAE29C,IAEvC0Y,GAAS+C,eAAe9+D,KAAKg8D,cAAct2D,GAAK4F,EAElD,OAAOywD,GAAS+C,eAAe9+D,KAAKg8D,cAAct2D,GAKpD,qBACE,OAAO1F,KAAK2mD,KAAO,IAAM,EAAI,IAG/BwX,YAAYxX,GAIV,OAHA3mD,KAAK2mD,KAAOA,EAEZ3mD,KAAKq8D,iBACEr8D,MCpUX,IAAK++D,GAOAC,GCNOC,GCTAC,GCAAC,GCDAC,IJSZ,SAAKL,GACH,mBACA,uBACA,qBACA,iCAJF,CAAKA,KAAAA,GAAO,KAOZ,SAAKC,GACH,iBACA,uBACA,uBACA,iCAJF,CAAKA,KAAAA,GAAe,KAab,MAAMK,WAAmBtoC,EAwE9B32B,YAAY4oB,GACV5Y,QACApQ,KAAKiH,aAAa,OAAQ,cAE1BjH,KAAKgpB,KAAOA,EACZhpB,KAAKs/D,cAAgBD,GAAWN,QAAQ1nC,OACxCr3B,KAAKu/D,mBAAqBF,GAAWL,gBAAgBQ,IACrDx/D,KAAKgmC,QAAQ,QAAS,IAGtBhmC,KAAK63B,SAASrvB,GAAKugB,UAAUC,IAvE/B,sBACE,MAAO,cAyBT,cAAcy2C,EAA2Bp3B,GACvC,IAAKo3B,GAAsC,IAAvBA,EAAY59D,OAAc,OAAO,EAErD,IAAIyJ,EAAQ,EACZ,IAAK,IAAI1J,EAAI,EAAGA,EAAI69D,EAAY59D,SAAUD,EAAG,CAC3C,IAAI89D,EAAY,EAChB,MAAMhuB,EAAa+tB,EAAY79D,GACzB+9D,EAAW5D,GAAS6D,2BAA2B,CACnDlZ,OAAQhV,EAAWliC,KAAKk3C,OACxBC,KAAMjV,EAAWliC,KAAKm3C,KACtBC,OAAQ,WAGJiZ,EAAW56D,KAAKC,MAAMy6D,EAASG,UAAYt3D,GAAKqc,qBAAuB,EAE7E66C,EAAYC,EAASd,kBAAkBntB,EAAW1oB,MAClD1d,EAAQrG,KAAKsJ,IAAIjD,EAAOo0D,GACpBhuB,EAAWlZ,gBAAkBzB,EAASE,SAASM,OACjDma,EAAW/Y,YAAY0P,EAAM+tB,eAC7B/tB,EAAM+tB,eAAiByJ,IAEvBnuB,EAAW/Y,YAAY0P,EAAMrR,WAC7BqR,EAAMrR,WAAa6oC,GAKvB,OAFAx3B,EAAMC,YAAch9B,EAAQ,EAC5B+8B,EAAME,aAAej9B,EAAQ,GACtB,EAsBTjI,cACE,OAAOg8D,GAAW/7D,SAIpB0iC,QAAQ0gB,EAAgBC,EAAcC,EAAiB,IAErD,OADA5mD,KAAKwP,KAAO,CAAEk3C,OAAAA,EAAQC,KAAAA,EAAMC,OAAAA,GACrB5mD,KAOT+/D,yBAAyBC,GAEvB,OADAhgE,KAAKu/D,mBAAqC,iBAATS,EAAoBX,GAAWY,sBAAsBD,GAAQA,EACvFhgE,KAMTkgE,mBACE,OAAOlgE,KAAKs/D,cAOda,iBAAiBH,GAEf,OADAhgE,KAAKs/D,cAAgC,iBAATU,EAAoBX,GAAWe,cAAcJ,GAAQA,EAC1EhgE,KAITkK,OACE,MAAMiE,EAAMnO,KAAKiK,eACXimB,EAAOlwB,KAAK+3B,oBAClB/3B,KAAKuK,cAEL,MAAMilC,EAAQtf,EAAKkY,mBAAmBrR,EAASE,SAASM,MAAOv3B,KAAKsG,OAGpE6H,EAAIhF,OACJ,MAAM+xD,EAAc3zD,OAAOC,KAAKxH,KAAK+G,aAAa,YAAY6pD,KAAK,KACnEziD,EAAIgmC,UAAU+mB,EAAal7D,KAAK+G,aAAa,OAC7CoH,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QACxD,MAAMiC,EAAa16C,EAAIirC,YAAYp5C,KAAKgpB,MAAM1d,MAMxC+0D,EAAclyD,EAAIirC,YAAY,KAAK9tC,MACzC,IAAIG,EACAC,EAGFD,EADEzL,KAAKs/D,gBAAkBD,GAAWN,QAAQ7nC,KACxCsY,EAAM/jC,EACDzL,KAAKs/D,gBAAkBD,GAAWN,QAAQnnC,MAC/C4X,EAAM/jC,EAAIo9C,EACL7oD,KAAKs/D,gBAAkBD,GAAWN,QAAQ1nC,OAC/CmY,EAAM/jC,EAAIo9C,EAAa,EAEtB34B,EAAuB8P,WAAa6oB,EAAa,EAGxD,IAAIwM,EAAmC,GACnCrrB,EAAU,EACd,MAAMs2B,EAAWpwC,EAAK2X,UAChBx1B,EAAQ6d,EAAKhd,aASnB,GALIotD,IACFjL,EAAYnlC,EAAuB4a,YAAY1P,aAC/C4O,EAAU33B,EAAM43B,0BAGdjqC,KAAKu/D,qBAAuBF,GAAWL,gBAAgBuB,QAIzD,GADA70D,EAAI2G,EAAM+5B,kBAAkBpsC,KAAKg3B,UAAYxuB,GAAKsc,yBAC9Cw7C,EAAU,CACZ,MAAME,EAAwC,IAA5BtwC,EAAKwP,mBAA2B21B,EAASz5B,MAAQy5B,EAAS15B,KAC5EjwB,EAAIzG,KAAKsJ,IAAI7C,EAAG80D,EAAYx2B,GAAWhqC,KAAKg3B,UAAY,UAErD,GAAIh3B,KAAKu/D,qBAAuBF,GAAWL,gBAAgB3nC,OAAQ,CACxE,MAAMopC,EAAKvwC,EAAKwX,eAAe1nC,KAAKg3B,WAAa,EAEjDtrB,EAAI+0D,GADOpuD,EAAM+5B,kBAAkBpsC,KAAKg3B,WACzBypC,GAAM,EAAIJ,EAAc,OAClC,GAAIrgE,KAAKu/D,qBAAuBF,GAAWL,gBAAgBQ,IAChE9zD,EAAIzG,KAAKw2B,IAAIppB,EAAMq1B,eAAe1nC,KAAKg3B,WAAY9G,EAAKuX,QAAQ,GAAK,IACjE64B,IACF50D,EAAIzG,KAAKw2B,IAAI/vB,EAAG2pD,EAAS15B,KAAO,EAAIqO,EAAUhqC,KAAKg3B,gBAE9B,CACvB,MAAMmV,EAAUjc,EAAKyP,iBACrBj0B,EAAIygC,EAAQxQ,MAAQwQ,EAAQvQ,MAAQuQ,EAAQxQ,MAAQ,EAAI0kC,EAAc,GAjN5E,YAAcp9D,GACRo8D,GAAW9iC,QAAO,QAAI,sBAAuBt5B,GAmN/C,CAAE,yBAA0BjD,KAAKgpB,KAAMvd,EAAGC,GAC1CyC,EAAI83B,SAASjmC,KAAKgpB,KAAMvd,EAAGC,GAC3ByC,EAAIkmC,aACJlmC,EAAIpE,WKpMR,SAAS,MAAK9G,GACRy9D,GAAYnkC,QAAO,QAAI,uBAAwBt5B,GLoB5C,GAAA87D,QAAUA,GAEV,GAAAqB,cAAwC,CAC7C1oC,KAAM2nC,GAAWN,QAAQ7nC,KACzBS,MAAO0nC,GAAWN,QAAQnnC,MAC1BR,OAAQioC,GAAWN,QAAQ1nC,OAC3BspC,WAAYtB,GAAWN,QAAQ6B,aAG1B,GAAA5B,gBAAkBA,GAElB,GAAAiB,sBAAgD,CACrD3oC,MAAO+nC,GAAWL,gBAAgBQ,IAClC9uB,IAAK2uB,GAAWL,gBAAgBQ,IAChChoC,MAAO6nC,GAAWL,gBAAgBuB,OAClCjL,OAAQ+J,GAAWL,gBAAgBuB,OACnCnpC,OAAQioC,GAAWL,gBAAgB3nC,OACnCspC,WAAYtB,GAAWL,gBAAgB4B,aKlCpC,MAAMF,WAAoB3pC,EAiU/B32B,cACEgQ,QACApQ,KAAKiH,aAAa,OAAQ,eAC1BjH,KAAK6gE,aAAe,GACpB7gE,KAAK8gE,WAAaJ,GAAYK,kBAAkB7pC,KAChDl3B,KAAKghE,SAAWN,GAAYO,gBAAgBzB,IAC5Cx/D,KAAKkhE,YAAa,EAClBlhE,KAAKmhE,aAAc,EAEnB,IAAI1E,EAAa,QAEfA,EAD+B,aAA7Bz8D,KAAK4I,UAAU3H,UACJ,uBAEA,oBAEfjB,KAAKwP,KAAO,CACVk3C,OAAQ+V,EACR9V,KAAM,GACNC,OAAQ,IAEV5mD,KAAK2/D,SAAW5D,GAAS6D,2BAA2B5/D,KAAKwP,MAxU3D,sBACE,MAAO,cAuBT,2BACE,OAAOkxD,GAAYU,mBAAmBC,OAAOC,cAM/C,0BACE,YAAuC,IAAzBZ,GAAYa,UAAmCb,GAAYa,SAG3E,wBAAwBhF,GACtBmE,GAAYa,SAAWhF,EAWzB,yBAAyBiF,GACvB,GAAId,GAAYU,mBAAmBI,GACjC,OAAOd,GAAYU,mBAAmBI,GAK1CC,kBAAkBz4C,GAChB,IAAIa,EAAM,EACN63C,EAAK,EACT,MAAMtgE,EAAapB,KAAK2/D,SAASv+D,WACjC,IAAKsgE,EAAK,EAAGA,EAAK14C,EAAKnnB,SAAU6/D,EAAI,CACnC,MAAM/C,EAAS3+D,KAAK2/D,SAASnB,sBAAsBx1C,EAAK04C,IAEpD/C,IACF90C,EAAM80C,EAAOgD,MAAQ93C,EAAM80C,EAAOgD,MAAQ93C,GAI9C,OAAO63C,EAAK,EAAU73C,EAAMzoB,GAAX,EAAyB,EAG5C,qCACE,OAAOoH,GAAKC,mBAAmB,GAAGvH,gBAGpC,kCACE,OAAOw/D,GAAYU,mBAAmBC,OAAOr3B,QAAU02B,GAAYkB,wBAGrElD,qBAAqB1xD,GACnB,OAAOhN,KAAK2/D,SAASnB,sBAAsBxxD,GAAG4xD,aAAe5+D,KAAK2/D,SAASv+D,WAG7E,wBAAwBsP,GACtB,MAAMiuD,EAAS+B,GAAYmB,kBAAkBnxD,EAAM9B,MACnD,OAAK+vD,EAGEA,EAAOC,aAAe8B,GAAYkB,wBAFhC,IAKX,yBAAyBlxD,GACvB,MAAMiuD,EAAS+B,GAAYmB,kBAAkBnxD,EAAM9B,MACnD,OAAK+vD,EAGEA,EAAOvE,QAAUsG,GAAYkB,wBAF3B,EAKX,yBAAyBlxD,GACvB,MAAMiuD,EAAS+B,GAAYmB,kBAAkBnxD,EAAM9B,MACnD,OAAK+vD,GAGI,EAAIA,EAAOmD,gBAAmBpB,GAAYkB,wBAF1C,EAKX,+BACE,OAAOlB,GAAYU,mBAAmBC,OAAOvE,kBAAoB4D,GAAYkB,wBAG/E,6BACE,OAAOlB,GAAYU,mBAAmBC,OAAOtE,gBAAkB2D,GAAYkB,wBAG7E,2BACE,OAAOlB,GAAYU,mBAAmBC,OAAOU,cAAgBrB,GAAYkB,wBAgF3E,gCACE,OAAOp5D,GAAKC,mBAAmB,GAAGpH,aAAaW,OAAOggE,YAGxD,8BACE,OAAOx5D,GAAKC,mBAAmB,GAAGpH,aAAaW,OAAOggE,YAAYX,OAAOY,iBAG3E,8BACE,OAAOz5D,GAAKC,mBAAmB,GAAGpH,aAAaW,OAAOggE,YAAYX,OAAOa,iBAQ3E,cAAcC,EAAgB95B,GAC5B,IAAK85B,GAAkC,IAArBA,EAAUtgE,OAAc,OAAO,EAEjD,IAAIyJ,EAAQ,EACR82D,EAAgB,EACpB,MAAMC,EAAiB,GAEvB,IAAK,IAAIzgE,EAAI,EAAGA,EAAIugE,EAAUtgE,SAAUD,EAAG,CACzC,MAAM0gE,EAAWH,EAAUvgE,GACrB2gE,EAAUD,EAAS9yD,KAAKm3C,KAAO,GAC/B6b,EAAqB,EAAVD,EACjB,IAAIE,EAAa,EACbC,GAAS,EAEb,IAAK,IAAIrf,EAAI,EAAGA,EAAIif,EAASzB,aAAah/D,SAAUwhD,EAAG,CACrD,MAAMsf,EAASL,EAASzB,aAAaxd,GAC/Buf,EAAMN,EAASO,cAAcF,GAC7BG,EAAMR,EAASS,YAAYJ,GAC3BK,EAASJ,GAAOE,EAAMpC,GAAYY,cAAgB,EAClD2B,EAAMN,EAAOO,aAAexC,GAAYyC,YAAYC,MAAQZ,EAAWQ,EAAST,EAAUS,EA2BhG,IAvBIJ,GAAOE,KACTL,EAAa,GAKXE,EAAOO,aAAexC,GAAYyC,YAAYC,OAChDT,EAAO9vD,QAAU6tD,GAAY2C,kBAAkBV,EAAOjyD,OAAS4xD,EAAS7D,eAAiBuE,EACzFL,EAAOhwD,QAAU+tD,GAAY4C,kBAAkBX,EAAOjyD,OAAS4xD,EAAS7D,eAAiBuE,EACzFL,EAAOjyD,MAAMtB,MAAQuzD,EAAOjyD,MAAMtB,MAAQ6zD,EAC1CN,EAAOr3D,MAAQo1D,GAAY6C,iBAAiBZ,EAAOjyD,OAAS4xD,EAAS7D,eAAiBuE,GAC7EL,EAAOO,aAAexC,GAAYyC,YAAYK,OACvDb,EAAOr3D,MAAQq3D,EAAOr3D,MAAQg3D,EAAS3C,SAASlB,eAAiBuE,EACjEL,EAAO9vD,QAAUyvD,EAASb,kBAAkBkB,EAAO35C,MAAQi6C,GAGzDN,EAAOO,aAAexC,GAAYyC,YAAYC,OAAST,EAAOjyD,MAAM9B,OAAS8xD,GAAY1+D,OAAOyhE,KAAK70D,OACvG6zD,EAAa,GAEfE,EAAOr3D,OAASo1D,GAAYgD,qBAAuBpB,EAAS7D,eAAiBuE,EAIzEJ,GAAOvf,EAAI,EAAG,CAChB,MAAMsgB,EAAOrB,EAASzB,aAAaxd,EAAI,GAClCif,EAASO,cAAcc,KAC1BvB,EAAgB92D,GAGhBw3D,GAAOV,EAAgB,IACzBM,GAAS,EAETC,EAAOhwD,OAASgwD,EAAOhwD,QAAUyvD,EAAgB92D,GACjDA,EAAQ82D,EACRA,EAAgB,EAEhBE,EAASsB,kBAAiB,IAEvBhB,GAAQE,IACXV,EAAgB,GAElBO,EAAOD,OAASA,EAChBp3D,GAASq3D,EAAOr3D,MAIlBg3D,EAASuB,2BACTvB,EAASwB,2BAELxB,EAASyB,gBAAkBrD,GAAYO,gBAAgBzB,KACzD8C,EAAS3pC,YAAY0P,EAAM+tB,eAC3B/tB,EAAM+tB,eAAiBqM,IAEvBH,EAAS3pC,YAAY0P,EAAMrR,UAAY,GACvCqR,EAAMrR,WAAayrC,EAAa,GAE9BH,EAAS0B,iBACX3B,EAAenyD,KAAK5E,GAEpB+2D,EAAenyD,KAAK,GAQxB,OAJA5E,EAAQ+2D,EAAeniC,QAAO,CAACv9B,EAAGC,IAAMD,EAAIC,GAAG,GAE/CylC,EAAMC,YAAch9B,EAAQ,EAC5B+8B,EAAME,aAAej9B,EAAQ,GACtB,EAgCT,qBACE,OAAOtL,KAAK2/D,SAASlB,eAGvB,wBACE,OAAOiC,GAAY5D,kBAAoB98D,KAAKy+D,eAG9C,sBACE,OAAOiC,GAAY3D,gBAAkB/8D,KAAKy+D,eAG5CwF,eAAeniE,GAEb,OADA9B,KAAKmhE,YAAcr/D,EACZ9B,KAGTgkE,iBACE,OAAOhkE,KAAKmhE,YAGd2C,2BACE,IAAII,EAAQ,EACZ,MAAMC,EAAQnkE,KAAK6gE,aAAauD,WAC7BzB,GACCA,EAAOO,aAAexC,GAAYyC,YAAYC,OAA+B,iCAAtBT,EAAOjyD,MAAM9B,OAGxE,GAAIu1D,EAAQ,EACV,OAEF,MACME,EADMrkE,KAAK6gE,aAAasD,GACb74D,MAAQ,EACnBg5D,EAAO,IAAOtkE,KAAKy+D,eACzB,KAAkByF,EAAQC,IAASD,EAAO,CACxC,MAAMvB,EAAS3iE,KAAK6gE,aAAaqD,GACjCvB,EAAOhwD,OAASgwD,EAAOhwD,OAAS0xD,EAChC1B,EAAO9vD,OAAS8vD,EAAO9vD,OAASyxD,EAGlC,IAAKJ,EAAQC,EAAQ,EAAGD,EAAQlkE,KAAK6gE,aAAah/D,SAAUqiE,EAAO,CACjE,MAAMvB,EAAS3iE,KAAK6gE,aAAaqD,GACjCvB,EAAOhwD,OAASgwD,EAAOhwD,OAAS0xD,EAChC1B,EAAO9vD,OAAS8vD,EAAO9vD,OAASyxD,GAIpCT,2BACE,IAAIU,EAAQ,EACZ,IAAK,IAAIlhB,EAAI,EAAGA,EAAIrjD,KAAK6gE,aAAah/D,SAAUwhD,EAAG,CACjD,MAAMsf,EAAS3iE,KAAK6gE,aAAaxd,GACjCkhB,GAASvkE,KAAKwkE,qBAAqBnhB,GACnCsf,EAAOhwD,QAAU4xD,GAOrBC,qBAAqBnhB,GACnB,IAAKrjD,KAAKkhE,WACR,OAAO,EAET,MAAMyB,EAAS3iE,KAAK6gE,aAAaxd,GAC3BohB,EAAY/D,GAAYqB,cAAgB/hE,KAAKy+D,eAC7CiG,EAAarhB,EAAI,EAAIrjD,KAAK6gE,aAAaxd,EAAI,QAAK5iD,EACtD,IAAIkkE,EAAK,EAGLhC,EAAOO,aAAexC,GAAYyC,YAAYC,OAAST,EAAOjyD,MAAM9B,OAAS8xD,GAAY1+D,OAAOyhE,KAAK70D,OACvG+1D,GAAMhC,EAAOjyD,MAAMpQ,QAAQ+O,cAIZ5O,IAAfikE,GACAA,EAAWxB,aAAexC,GAAYyC,YAAYC,OAClDsB,EAAWh0D,MAAM9B,OAAS8xD,GAAY1+D,OAAOyhE,KAAK70D,OAElD+1D,GAAMD,EAAWh0D,MAAMpQ,QAAQ+O,SAKjC,IAAIu1D,GAAe,EACfC,GAAe,EAoBnB,OAnBkB,MAAdH,GAAsBA,EAAWxB,aAAexC,GAAYyC,YAAYK,OAC1EoB,EAAelE,GAAYwB,iBAAiBhlC,MAAM4nC,GAAOA,IAAOJ,EAAW17C,KAAK07C,EAAW17C,KAAKnnB,OAAS,KACzGgjE,EAAenE,GAAYuB,iBAAiB/kC,MAAM4nC,GAAOA,IAAOJ,EAAW17C,KAAK07C,EAAW17C,KAAKnnB,OAAS,MAKvG+iE,GAAgBjC,EAAOoC,iBAAmBrE,GAAYsE,gBAAgBC,cACxEN,GAAMF,GAGJI,GAAgBlC,EAAOO,aAAexC,GAAYyC,YAAYK,OAC5Db,EAAO35C,KAAK,IAAM,KAAO25C,EAAO35C,KAAK,IAAM,MAC7C27C,GAAMF,EAAY,GAEhB/D,GAAYwB,iBAAiBhlC,MAAM4nC,GAAOA,KAAOJ,MAAAA,OAAU,EAAVA,EAAY17C,KAAK07C,EAAW17C,KAAKnnB,OAAS,QAC7F8iE,GAAMF,EAAY,IAGfE,EAOTO,eAAeC,GAEb,MAAMjC,GADNiC,EAA2B1kE,MAAd0kE,EAA0B,GAAKA,GACdjC,WAAaiC,EAAWjC,WAAaxC,GAAYyC,YAAYK,KAOrFmB,EAAK,CACT37C,KAPWm8C,EAAWn8C,KAAOm8C,EAAWn8C,KAAO,GAQ/Ck6C,WAAAA,EACA6B,eARqBI,EAAWJ,eAAiBI,EAAWJ,eAAiBrE,GAAYsE,gBAAgB/d,KASzGt0C,OARa,EASbE,OARa,EASb6vD,OARa,EASbp3D,OAAO,EAIE,GAHToF,WAAOjQ,GAMT,GAAIyiE,IAAexC,GAAYyC,YAAYC,OAAqC,iBAArB+B,EAAWz0D,MAAoB,CACxF,MAAM00D,EAAY1E,GAAY1+D,OAAOmjE,EAAWz0D,OAC1C20D,EAAc,GACpBV,EAAGj0D,MAAQ,IAAI3B,EAAMq2D,EAAUx2D,KAAMy2D,EAAa,CAAEx2D,SAAU,qBAKzD,GAAIq0D,IAAexC,GAAYyC,YAAYK,KAAM,CACtD,IAAI8B,EAAS,EACb,IAAK,IAAI1jE,EAAI,EAAGA,EAAI+iE,EAAG37C,KAAKnnB,SAAUD,EACpC0jE,GAAUtlE,KAAK0+D,qBAAqBiG,EAAG37C,KAAKpnB,IAE9C+iE,EAAGr5D,MAAQg6D,OACFpC,IAAexC,GAAYyC,YAAYoC,OAChDZ,EAAGr5D,MAAQ65D,EAAW75D,OAGxB,OAAOq5D,EAMTa,eAAeL,GAEb,OADAnlE,KAAK6gE,aAAa3wD,KAAKlQ,KAAKklE,eAAeC,IACpCnlE,KAQTylE,QAAQz8C,EAAcm8C,GAIpB,OAHAA,EAA2B,MAAdA,EAAqB,GAAKA,GAC5Bn8C,KAAOA,EAClBm8C,EAAWjC,WAAaxC,GAAYyC,YAAYK,KACzCxjE,KAAKwlE,eAAeL,GAK7BO,mBAAmB18C,GACjB,MAAMk6C,EAAaxC,GAAYyC,YAAYK,KACrCuB,EAAiBrE,GAAYsE,gBAAgBC,YACnD,OAAOjlE,KAAKwlE,eAAe,CAAEx8C,KAAAA,EAAMk6C,WAAAA,EAAY6B,eAAAA,IAKjDY,iBAAiB38C,GACf,MAAMk6C,EAAaxC,GAAYyC,YAAYK,KACrCuB,EAAiBrE,GAAYsE,gBAAgBY,UACnD,OAAO5lE,KAAKwlE,eAAe,CAAEx8C,KAAAA,EAAMk6C,WAAAA,EAAY6B,eAAAA,IAKjDc,oBAAoBn1D,GAClB,MAAMwyD,EAAaxC,GAAYyC,YAAYC,MACrC2B,EAAiBrE,GAAYsE,gBAAgBC,YACnD,OAAOjlE,KAAKwlE,eAAe,CAAE90D,MAAAA,EAAOwyD,WAAAA,EAAY6B,eAAAA,IAIlDe,SAASp1D,EAAey0D,GAItB,OAHAA,EAA2B,MAAdA,EAAqB,GAAKA,GAC5Bz0D,MAAQA,EACnBy0D,EAAWjC,WAAaxC,GAAYyC,YAAYC,MACzCpjE,KAAKwlE,eAAeL,GAS7BY,eAAe/8C,EAAgBm8C,GAC7BA,EAA2B,MAAdA,EAAqB,GAAKA,EACvC,IAAIr/D,EAAM,GACV,IAAK,IAAIlE,EAAI,EAAGA,EAAIonB,EAAKnnB,SAAUD,EAC7B8+D,GAAY1+D,OAAOgnB,EAAKpnB,KACtBkE,EAAIjE,OAAS,IACf7B,KAAKylE,QAAQ3/D,EAAKq/D,GAClBr/D,EAAM,IAER9F,KAAK8lE,SAAS98C,EAAKpnB,GAAIujE,IAEvBr/D,GAAOkjB,EAAKpnB,GAMhB,OAHIkE,EAAIjE,OAAS,GACf7B,KAAKylE,QAAQ3/D,EAAKq/D,GAEbnlE,KAMTgmE,QAAQ16D,EAAe65D,GAIrB,OAHAA,EAA2B,MAAdA,EAAqB,GAAKA,GAC5BjC,WAAaxC,GAAYyC,YAAYoC,KAChDJ,EAAW75D,MAAQA,EACZtL,KAAKwlE,eAAeL,GAG7B9hE,cACE,OAAOq9D,GAAYp9D,SAIrB0iC,QAAQ0gB,EAAgBC,EAAcC,GAGpC,OAFA5mD,KAAKwP,KAAO,CAAEk3C,OAAAA,EAAQC,KAAAA,EAAMC,OAAAA,GAC5B5mD,KAAK2/D,SAAW5D,GAAS6D,2BAA2B5/D,KAAKwP,MAClDxP,KAGTm+D,YAAYxX,GAGV,OAFA3mD,KAAKwP,KAAKm3C,KAAOA,EACjB3mD,KAAK2/D,SAASxB,YAAYxX,GACnB3mD,KAGT4jE,iBAAiBrH,GAEf,OADAv8D,KAAKkhE,WAAa3E,EACXv8D,KAKTimE,YAAYjG,GAEV,OADAhgE,KAAKghE,SAA2B,iBAAThB,EAAoBU,GAAYwF,sBAAsBlG,GAAQA,EAC9EhgE,KAGT+jE,cACE,OAAO/jE,KAAKghE,SAKdmF,cAAcnG,GAEZ,OADAhgE,KAAK8gE,WAA6B,iBAATd,EAAoBU,GAAY0F,wBAAwBpG,GAAQA,EAClFhgE,KAGTipB,WACE,IAAI07C,EAAK,EAIT,OAHA3kE,KAAK6gE,aAAatnC,SAASopC,IACzBgC,GAAMhC,EAAOD,OAAS,EAAIC,EAAOr3D,SAE5Bq5D,EAGT9B,cAAcF,GACZ,YAAiCliE,IAA1BkiE,EAAOoC,gBAAgCpC,EAAOoC,iBAAmBrE,GAAYsE,gBAAgBC,YAGtGlC,YAAYJ,GACV,YAAiCliE,IAA1BkiE,EAAOoC,gBAAgCpC,EAAOoC,iBAAmBrE,GAAYsE,gBAAgBY,UAItG17D,OACE,MAAMiE,EAAMnO,KAAKiK,eACXimB,EAAOlwB,KAAK+3B,oBAClB/3B,KAAKuK,cAGL4D,EAAIhF,OACJ,MAAM+xD,EAAc3zD,OAAOC,KAAKxH,KAAK+G,aAAa,YAAY6pD,KAAK,KACnEziD,EAAIgmC,UAAU+mB,EAAal7D,KAAK+G,aAAa,OAE7C,MAAMyoC,EAAQtf,EAAKkY,mBAAmBrR,EAASE,SAASM,MAAOv3B,KAAKsG,OAGpE,IAAIoF,EAFJyC,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QAMxD,MAAM0Z,EAAWpwC,EAAK2X,UAChBx1B,EAAQ6d,EAAKhd,aAEnB,GAAIlT,KAAKghE,WAAaN,GAAYO,gBAAgBV,QAIhD,GADA70D,EAAI2G,EAAM+5B,kBAAkBpsC,KAAKg3B,UAAYxuB,GAAKsc,yBAC9Cw7C,EAAU,CACZ,MAAMjL,EAAWnlC,EAAK4a,YAAY1P,aAC5B4O,EAAU33B,EAAM43B,yBAChBu2B,EAAwC,IAA5BtwC,EAAKwP,mBAA2B21B,EAASz5B,MAAQy5B,EAAS15B,KAC5EjwB,EAAIzG,KAAKsJ,IAAI7C,EAAG80D,EAAYx2B,GAAWhqC,KAAKg3B,UAAY,UAK1D,GADAtrB,EAAIzG,KAAKw2B,IAAIppB,EAAMq1B,eAAe1nC,KAAKg3B,WAAY9G,EAAKuX,QAAQ,GAAK,IACjE64B,EAAU,CACZ,MAAMjL,EAAWnlC,EAAK4a,YAAY1P,aAC5B4O,EAAU33B,EAAM43B,yBACtBv+B,EAAIzG,KAAKw2B,IAAI/vB,EAAG2pD,EAAS15B,KAAO,EAAIqO,EAAUhqC,KAAKg3B,WAIvD,IAAIvrB,EAAI+jC,EAAM/jC,EAEZA,EADEzL,KAAK8gE,aAAeJ,GAAYK,kBAAkB7pC,KAChDsY,EAAM/jC,EACDzL,KAAK8gE,aAAeJ,GAAYK,kBAAkBnpC,MACvD4X,EAAM/jC,EAAIzL,KAAKipB,WACVjpB,KAAK8gE,aAAeJ,GAAYK,kBAAkB1pC,OACvDmY,EAAM/jC,EAAIzL,KAAKipB,WAAa,EAE5BiH,EAAK8P,WAAahgC,KAAKipB,WAAa,EAE1C,GAAE,0BAA2BjpB,KAAK2/D,SAAUl0D,EAAGC,GAE/C1L,KAAK6gE,aAAatnC,SAASopC,IACzB,MAAM0D,EAAKrmE,KAAK6iE,cAAcF,GACxBG,EAAM9iE,KAAK+iE,YAAYJ,GAC7B,IAAI2D,EAAO56D,EACX,GAAE,aAAci3D,EAAOhwD,OAAQgwD,EAAO9vD,QACtC,GAAE,gBAAiByzD,GACfD,IACFC,GAAQtmE,KAAK88D,mBAEXgG,IACFwD,GAAQtmE,KAAK+8D,iBAEf,GAAE,gBAAiBuJ,GAEf3D,EAAOO,aAAexC,GAAYyC,YAAYK,OAC5C6C,GAAMvD,KACR30D,EAAIhF,OACJgF,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAO+Z,GAAYY,cAAethE,KAAKwP,KAAKo3C,SAMtF,GAAE,mBAAoB+b,EAAO35C,KAAMvd,EAAIk3D,EAAOhwD,OAAQ2zD,EAAO3D,EAAO9vD,QAEpE1E,EAAI83B,SAAS08B,EAAO35C,KAAMvd,EAAIk3D,EAAOhwD,OAAQ2zD,EAAO3D,EAAO9vD,SACvDwzD,GAAMvD,IACR30D,EAAIpE,WAEG44D,EAAOO,aAAexC,GAAYyC,YAAYC,OACvDkD,GAAQ3D,EAAO9vD,OACf,GAAE,oBAAqB8vD,EAAOjyD,MAAM9B,KAAMnD,EAAIk3D,EAAOhwD,OAAQ2zD,GAC7D3D,EAAOjyD,MAAMqC,OAAO5E,EAAK1C,EAAIk3D,EAAOhwD,OAAQ2zD,IACnC3D,EAAOO,aAAexC,GAAYyC,YAAYoC,OACvD,GAAE,oBAAqB5C,EAAOr3D,MAAOG,EAAG66D,GACxCn4D,EAAIsD,YACJtD,EAAItE,aAAa,GACjBsE,EAAIuD,OAAOjG,EAAGC,GACdyC,EAAIwD,OAAOlG,EAAIk3D,EAAOr3D,MAAOg7D,GAC7Bn4D,EAAIO,UAGNjD,GAAKk3D,EAAOr3D,MACRq3D,EAAOD,SACTj3D,GAAKk3D,EAAOhwD,WAGhBxE,EAAIkmC,aACJlmC,EAAIpE,WAzuBC,GAAAwyB,OAAiB,EAiBR,GAAAwkC,kBAAoB,CAClC7pC,KAAM,EACNG,OAAQ,EACRO,MAAO,EACPgpC,YAAa,GAGC,GAAAwF,wBAAkD,CAChE1uC,KAAMgpC,GAAYK,kBAAkB7pC,KACpCS,MAAO+oC,GAAYK,kBAAkBnpC,MACrCR,OAAQspC,GAAYK,kBAAkB1pC,OACtCspC,WAAYD,GAAYK,kBAAkBH,aAG5B,GAAAK,gBAAkB,CAChCzB,IAAK,EACLe,OAAQ,GAkBM,GAAA2F,sBAAgD,CAC9Dx1B,IAAKgwB,GAAYO,gBAAgBzB,IACjCloC,MAAOopC,GAAYO,gBAAgBzB,IACnChoC,MAAOkpC,GAAYO,gBAAgBV,OACnCjL,OAAQoL,GAAYO,gBAAgBV,QA2EtB,GAAAv+D,OAA2C,CACzDukE,WAAY,CACV33D,KAAM,kBAER43D,IAAK,CACH53D,KAAM,kBAER63D,eAAgB,CACd73D,KAAM,sBAER,IAAK,CACHA,KAAM,iBAER83D,UAAW,CACT93D,KAAM,iBAER+3D,aAAc,CACZ/3D,KAAM,oBAERsjB,MAAO,CACLtjB,KAAM,aAER,IAAK,CACHA,KAAM,aAER,IAAK,CACHA,KAAM,sBAERg4D,UAAW,CACTh4D,KAAM,sBAER,IAAK,CACHA,KAAM,uBAERi4D,WAAY,CACVj4D,KAAM,uBAERk4D,YAAa,CACXl4D,KAAM,uBAERm4D,aAAc,CACZn4D,KAAM,wBAERo4D,cAAe,CACbp4D,KAAM,0BAERq4D,eAAgB,CACdr4D,KAAM,2BAER,IAAK,CACHA,KAAM,gCAER60D,KAAM,CACJ70D,KAAM,gCAER,IAAK,CACHA,KAAM,mBAERhM,EAAG,CACDgM,KAAM,mBAIM,GAAAu0D,YAAc,CAC5BC,MAAO,EACPI,KAAM,EACN+B,KAAM,GAGQ,GAAAP,gBAAkB,CAChC/d,KAAM,EACN2e,UAAW,EACXX,YAAa,GCtNV,MAAMiC,WAAanwC,EAyExB32B,YAAY4oB,EAAcm+C,GAAmB,EAAOC,GAClDh3D,QACApQ,KAAKiH,aAAa,OAAQ,QAE1BjH,KAAKgpB,KAAOA,EACZhpB,KAAKqP,QAAU,EACfrP,KAAKmnE,QAAUA,EACfnnE,KAAKwP,KAAO,aACZxP,KAAKmlC,eAAiB,CACpB/E,WAAY,IACZinC,WAAY,UACZC,WAAY,EACZC,cAAe,GAGbH,EACFpnE,KAAKonE,OAASA,GAGdpnE,KAAKonE,OAAS,CAAC,CAAEjhE,KAAM+gE,GAAKhsC,GAAIlS,KAAMhpB,KAAKgpB,OACvChpB,KAAKmnE,SAASnnE,KAAKonE,OAAOl3D,KAAK,CAAE/J,KAAM+gE,GAAK5qC,KAAMtT,KAAM,MAG9DhpB,KAAKi5C,cAzFP,sBACE,MAAO,QAGT,gBACE,OAAO,EAGT,kBACE,OAAO,EAKT,cAAcuuB,EAAen/B,GAC3B,IAAKm/B,GAA0B,IAAjBA,EAAM3lE,OAAc,OAAO,EAEzC,IAAI4lE,EAAa,EAEjB,MAAMzwC,EAAYqR,EAAM+tB,cAGxB,IAAK,IAAIx0D,EAAI,EAAGA,EAAI4lE,EAAM3lE,SAAUD,EAAG,CACrC,MAAM4pB,EAAOg8C,EAAM5lE,GACnB4pB,EAAKlZ,UAAUm1D,GACfA,EAAaj8C,EAAKvC,WAClBuC,EAAKmN,YAAY3B,GAKnB,OAFAqR,EAAME,aAAek/B,EACrBp/B,EAAM+tB,eAAiB,GAChB,EA8DT/yD,cACE,OAAO6jE,GAAK5jE,SAIdgP,UAAUxQ,GAGR,OAFA9B,KAAKqP,QAAUvN,EACf9B,KAAKi5C,cACEj5C,KAITgmC,QAAQx2B,GAEN,OADAxP,KAAKwP,KAAOA,EACLxP,KAIT0nE,UACE,OAAO1nE,KAAKgpB,KAIJiwB,cAER,MAAMzrC,EAAOxN,KAEb,SAAS2nE,EAAa3+C,GACpB,IAAI6/B,EACJ,MAAM+e,EAAUp6D,EAAK5C,aAOrB,OALEi+C,EADE+e,EACWA,EAAQxuB,YAAYpwB,GAAM1d,MAE1B9C,GAAKugB,UAAUC,GAGvB6/B,EAGT,IAAIgf,EAAc,EAClB,IAAK,IAAIjmE,EAAI,EAAGA,EAAI5B,KAAKonE,OAAOvlE,SAAUD,EAAG,CAC3C,MAAM4pB,EAAOxrB,KAAKonE,OAAOxlE,GACzB,GAAkBnB,MAAd+qB,EAAKlgB,MACPu8D,GAAer8C,EAAKlgB,UACf,CACL,MAAMw8D,EACJt8C,EAAKrlB,OAAS+gE,GAAKhsC,GAAKl7B,KAAKmlC,eAAemiC,WAAatnE,KAAKmlC,eAAeoiC,cAE/E/7C,EAAKlgB,MAAQrG,KAAKsJ,IAAIu5D,EAAkBH,EAAan8C,EAAKxC,OAAS,EACnEwC,EAAKu8C,WAAav8C,EAAKlgB,MAAQ,EAC/Bu8D,GAAer8C,EAAKlgB,OAKxB,OADAtL,KAAK63B,SAASgwC,EAAc7nE,KAAKqP,SAC1BrP,KAITkK,OACE,MAAMiE,EAAMnO,KAAKiK,eACXimB,EAAOlwB,KAAK+3B,oBAClB/3B,KAAKuK,cAEL,MAAMilC,EAAQtf,EAAKkY,mBAAmBrR,EAASE,SAASW,MAAO53B,KAAKsG,OACpEkpC,EAAM/jC,GAAK,EACX+jC,EAAM9jC,GAAK,GACX,MAAM2D,EAAUrP,KAAKqP,QAEfgD,EAAQ6d,EAAKhd,aACb80D,EAAc31D,EAAMq1B,eAAe1nC,KAAKg3B,WAAa,EACrDixC,EAAe51D,EAAMq1B,eAAe1nC,KAAKg3B,WAAa,EAEtDxpB,EAAOxN,KAEb,SAASkoE,EAAWz8D,EAAWC,EAAWJ,EAAeC,GACvD,MAAM48D,EAAO18D,EAAIH,EACX88D,EAAO18D,EAEbyC,EAAIhF,OACJgF,EAAIsD,YACJtD,EAAItE,aAAa2D,EAAK23B,eAAe/E,YACrCjyB,EAAIxE,eAAe6D,EAAK23B,eAAekiC,YACvCl5D,EAAI1E,aAAa+D,EAAK23B,eAAekiC,YACrCl5D,EAAIuD,OAAOjG,EAAGC,GACdyC,EAAIyD,iBAAiBu2D,EAAMC,EAAM38D,EAAIH,EAAOC,GAC5C4C,EAAIO,SACJP,EAAIpE,UAGN,SAASs+D,EAAc58D,EAAWC,EAAWJ,EAAeC,GAC1D4C,EAAIhF,OACJgF,EAAIsD,YACJtD,EAAItE,aAAa2D,EAAK23B,eAAe/E,YACrCjyB,EAAIxE,eAAe6D,EAAK23B,eAAekiC,YACvCl5D,EAAI1E,aAAa+D,EAAK23B,eAAekiC,YACrCl5D,EAAIuD,OAAOjG,EAAGF,GACd4C,EAAIyD,iBAAiBnG,EAAIH,EAAOC,EAAQE,EAAIH,EAAOI,GACnDyC,EAAIO,SACJP,EAAIpE,UAGN,SAASu+D,EAAgB78D,EAAWC,EAAW0pB,GAC7C,MACMoX,EAAMpX,GAAa,EAEzBjnB,EAAIsD,YACJtD,EAAIuD,OAAOjG,EAAGC,GACdyC,EAAIwD,OAAOlG,EALG,EAKQC,EALR,EAKoB8gC,GAClCr+B,EAAIwD,OAAOlG,EANG,EAMQC,EANR,EAMoB8gC,GAClCr+B,EAAIyyB,YACJzyB,EAAI2D,OAGN,SAASy2D,EAAW98D,EAAWud,GAC7B7a,EAAIhF,OACJgF,EAAIgrC,WAAW3rC,EAAKgC,MACpB,MAAMg5D,EAAW/8D,EAAI0C,EAAIirC,YAAYpwB,GAAM1d,MAAQ,EACnD6C,EAAI83B,SAASjd,EAAMw/C,EAAUP,GAC7B95D,EAAIpE,UAGN,IAAI0+D,EACAC,EAAuB,EACvBC,EAAmB,EACvB,IAAK,IAAI/mE,EAAI,EAAGA,EAAI5B,KAAKonE,OAAOvlE,SAAUD,EAAG,CAC3C,MAAM4pB,EAAOxrB,KAAKonE,OAAOxlE,GACpB4pB,EAAKu8C,aAAYv8C,EAAKu8C,WAAa,GAC9B,IAANnmE,IAAS4pB,EAAKu8C,YAAc14D,GAEhCs5D,EAAmBn9C,EAAKu8C,WAAaW,GAA8B,IAAN9mE,EAAUyN,EAAU,GAC7Emc,EAAKrlB,OAAS+gE,GAAKhsC,KACjButC,GAAaA,EAAUtiE,OAAS+gE,GAAKhsC,IACvCotC,EAAgB94B,EAAM/jC,EAAGu8D,GAG3BE,EAAW14B,EAAM/jC,EAAG+jC,EAAM9jC,EAAGi9D,EAAkBX,IAG7Cx8C,EAAKrlB,OAAS+gE,GAAK5qC,OACjBmsC,GAAaA,EAAUtiE,OAAS+gE,GAAKhsC,IACvCmtC,EAAc74B,EAAM/jC,EAAG+jC,EAAM9jC,EAAGi9D,EAAkBX,GAGhDS,GAAaA,EAAUtiE,OAAS+gE,GAAK5qC,OACvCgsC,EAAgB94B,EAAM/jC,EAAG+jC,EAAM9jC,GAAI,GACnC28D,EAAc74B,EAAM/jC,EAAG+jC,EAAM9jC,EAAGi9D,EAAkBX,IAG/CS,IACHE,EAAmBn9C,EAAKu8C,WACxBM,EAAc74B,EAAM/jC,EAAG+jC,EAAM9jC,EAAGi9D,EAAkBX,KAItDO,EAAW/4B,EAAM/jC,EAAIk9D,EAAkBn9C,EAAKxC,MAC5Cy/C,EAAYj9C,EACZk9C,EAAuBl9C,EAAKu8C,WAC5BU,EAAUh9D,EAAI+jC,EAAM/jC,EAEpB+jC,EAAM/jC,GAAKk9D,EAGb,IAAKF,GAA4BhoE,MAAfgoE,EAAUh9D,EAC1B,MAAM,IAAI,KAAa,oBAAqB,mBAI1Cg9D,EAAUtiE,OAAS+gE,GAAKhsC,GAC1BotC,EAAgBG,EAAUh9D,EAAIk9D,EAAkBX,GACvCS,EAAUtiE,OAAS+gE,GAAK5qC,MACjCgsC,EAAgBG,EAAUh9D,EAAIk9D,EAAkBn5B,EAAM9jC,GAAI,ICtRzD,MAAMk9D,WAAgB7xC,EAqC3B32B,cACEgQ,QACApQ,KAAKiH,aAAa,OAAQ,WAE1BjH,KAAKmvB,SAAW4H,EAASE,SAASW,MAClC53B,KAAKmlC,eAAiB,CACpB0jC,OAAO,EACPC,cAAe,GACfC,YAAa,EACbC,WAAY,EACZC,WAAY,GAGdjpE,KAAKkpE,gBAAgBlpE,KAAKmlC,eAAe2jC,eA9C3C,sBACE,MAAO,WAIT,cAAcK,EAAqB9gC,EAA6Bn/B,GAC9D,IAAKigE,GAAgC,IAApBA,EAAStnE,OAAc,OAAO,EAG/C,IAAIm1B,EAAYqR,EAAM+tB,cAClB9qD,EAAQ,EACRnI,EAAQklC,EAAME,YAAc,EAGhC,MAAMi/B,EAAQt+D,EAAQ+oC,WAAWi1B,GAAK5jE,UAClCkkE,GAASA,EAAM3lE,OAAS,GAC1Bm1B,IAIF,IAAK,IAAIp1B,EAAI,EAAGA,EAAIunE,EAAStnE,SAAUD,EAAG,CACxC,MAAMwnE,EAAUD,EAASvnE,GACzBwnE,EAAQ92D,UAAUnP,GAClBimE,EAAQzwC,YAAY3B,GACpB1rB,GAAS89D,EAAQngD,WACjB9lB,GAASmI,EAKX,OAFA+8B,EAAME,aAAej9B,EACrB+8B,EAAM+tB,eAAiB,GAChB,EAoBT/yD,cACE,OAAOulE,GAAQtlE,SAIjB+lE,SAASR,GAEP,OADA7oE,KAAKmlC,eAAe0jC,MAAQA,EACrB7oE,KAITkpE,gBAAgB59D,GAGd,OAFAtL,KAAKmlC,eAAe2jC,cAAgBx9D,EACpCtL,KAAK63B,SAASvsB,GACPtL,KAITkK,OACE,MAAMiE,EAAMnO,KAAKiK,eACXimB,EAAOlwB,KAAK+3B,oBAClB/3B,KAAKuK,cAEL,MAEM++D,EAFQp5C,EAAKkY,mBAAmBrR,EAASE,SAASW,MAAO53B,KAAKsG,OAEnDmF,EAAIzL,KAAKqP,QACpBk6D,EAAKr5C,EAAKwX,eAAe1nC,KAAKg3B,WAAa,EAEjD4xC,GAAQY,cAAcr7D,EAAKm7D,EAAIC,EAAIvpE,KAAKmlC,gBAO1C,qBAAqBh3B,EAAoB1C,EAAWC,EAAW+9D,GAC7D,MAAM,MAAEZ,EAAK,cAAEC,EAAa,WAAEE,EAAU,WAAEC,EAAU,YAAEF,GAAgBU,EAChEC,EAAYZ,EAAgBE,EAIlC,IAAIpnE,EACJ,GAHAuM,EAAIsD,YAGAo3D,EAAO,CAET,IADA16D,EAAIuD,OAAOjG,EAAGC,EAAIu9D,EAAa,GAC1BrnE,EAAI,EAAGA,EAAI8nE,EAAY,IAAK9nE,EAC/BuM,EAAIwD,OAAOlG,EAAIu9D,EAAYt9D,EAAIq9D,EAAc,GAC7Ct9D,GAAKu9D,EACL76D,EAAIwD,OAAOlG,EAAIu9D,EAAYt9D,EAAIq9D,EAAc,GAC7Ct9D,GAAKu9D,EAEP,IAAKpnE,EAAI,EAAGA,EAAI8nE,EAAY,IAAK9nE,EAC/BuM,EAAIwD,OAAOlG,EAAIu9D,EAAYt9D,EAAIq9D,EAAc,EAAIE,EAAa,GAC9Dx9D,GAAKu9D,EACL76D,EAAIwD,OAAOlG,EAAIu9D,EAAYt9D,EAAIq9D,EAAc,EAAIE,EAAa,GAC9Dx9D,GAAKu9D,EAEP76D,EAAI2D,WACC,CAEL,IADA3D,EAAIuD,OAAOjG,EAAGC,EAAIu9D,GACbrnE,EAAI,EAAGA,EAAI8nE,EAAY,IAAK9nE,EAC/BuM,EAAIyD,iBAAiBnG,EAAIu9D,EAAa,EAAGt9D,EAAIq9D,EAAc,EAAGt9D,EAAIu9D,EAAYt9D,GAC9ED,GAAKu9D,EACL76D,EAAIyD,iBAAiBnG,EAAIu9D,EAAa,EAAGt9D,EAAIq9D,EAAc,EAAGt9D,EAAIu9D,EAAYt9D,GAC9ED,GAAKu9D,EAGP,IAAKpnE,EAAI,EAAGA,EAAI8nE,EAAY,IAAK9nE,EAC/BuM,EAAIyD,iBAAiBnG,EAAIu9D,EAAa,EAAGt9D,EAAIq9D,EAAc,EAAIE,EAAYx9D,EAAIu9D,EAAYt9D,EAAIu9D,GAC/Fx9D,GAAKu9D,EACL76D,EAAIyD,iBAAiBnG,EAAIu9D,EAAa,EAAGt9D,EAAIq9D,EAAc,EAAIE,EAAYx9D,EAAIu9D,EAAYt9D,EAAIu9D,GAC/Fx9D,GAAKu9D,EAEP76D,EAAI2D,SCnGV,SAAS,MAAK7O,GACR0mE,GAAgBptC,QAAO,QAAI,2BAA4Bt5B,GAGtD,MAAM0mE,GAiBXvpE,cATU,KAAA0gC,cAAwB,EACxB,KAAAC,eAAyB,EAUjC/gC,KAAK4pE,QAAU,GAGf5pE,KAAKsL,MAAQ,EACbtL,KAAKgqC,QAAU,EACfhqC,KAAKqoC,MAAQ,CACXC,WAAY,EACZC,YAAa,EACbvR,UAAW,EACXo/B,cAAe,GAKjBp2D,KAAK6pE,UAAY,CACfxgC,EACAwI,EACA4X,EACAqgB,GACAne,EACAoe,GACAze,EACAkJ,GACAyB,GACA0D,GACA0F,GACAqB,GACAwG,GACA0B,IAIF5oE,KAAKgqE,WAAa,CAAC3gC,GAGrB/F,YAAY2mC,GAEV,OADA,GAAE,qDACKjqE,KAAKojC,UAAU6mC,GAGxB7mC,UAAU6mC,GACR,MAAMp7D,EAAWo7D,EAAO5mE,cAOxB,OANKrD,KAAK4pE,QAAQ/6D,KAChB7O,KAAK4pE,QAAQ/6D,GAAY,IAE3B7O,KAAK4pE,QAAQ/6D,GAAUqB,KAAK+5D,GAC5BA,EAAO1xC,mBAAmBv4B,MAC1BA,KAAK8gC,cAAe,EACb9gC,KAGTyjC,aAAa50B,GAEX,OADA,GAAE,uDACK7O,KAAKiyC,WAAWpjC,GAGzBojC,WAAWpjC,GACT,OAAO7O,KAAK4pE,QAAQ/6D,GAGtBoa,WACE,OAAOjpB,KAAKsL,MAGd4+D,eACE,OAAOlqE,KAAKqoC,MAAMC,WAGpBkI,gBACE,OAAOxwC,KAAKqoC,MAAME,YAGpB4hC,WACE,OAAOnqE,KAAKqoC,MAGdhnC,aACE,IAAKrB,KAAKoqE,UACR,MAAM,IAAI,KAAa,oBAAqB,sCAG9C,MAAO,CACL9+D,MAAOtL,KAAKqoC,MAAMC,WAAatoC,KAAKqoC,MAAME,YAAcvoC,KAAKgqC,QAC7DA,QAAShqC,KAAKgqC,SAIlBnG,YACM7jC,KAAK8gC,eACT9gC,KAAK6pE,UAAUtwC,SAAS0wC,IACtB,GAAE,kCAAmCA,EAAO3mE,UAC5C2mE,EAAOxe,OAAOzrD,KAAKiyC,WAAWg4B,EAAO3mE,UAAWtD,KAAKqoC,MAAOroC,SAI9DA,KAAKsL,MAAQtL,KAAKqoC,MAAMC,WAAatoC,KAAKqoC,MAAME,YAChDvoC,KAAK8gC,cAAe,GAGtBgD,aACM9jC,KAAK+gC,eACT/gC,KAAKgqE,WAAWzwC,SAAS0wC,IACvB,GAAE,mCAAoCA,EAAO3mE,UAC7C2mE,EAAOnmC,WAAW9jC,KAAKiyC,WAAWg4B,EAAO3mE,gBPzJ/C,SAAY27D,GACV,uBACA,mBACA,qBACA,qBACA,qBACA,qBACA,iBAPF,CAAYA,KAAAA,GAAqB,KAU1B,MAAMoL,WAAsBpiE,EAajC7H,cACEgQ,QAbQ,KAAA9E,MAAgB,EAChB,KAAAG,EAAY,EAapBzL,KAAKiH,aAAa,OAAQ,iBAE1BjH,KAAKm3D,QAAU,GACfn3D,KAAKmvB,SAAWk7C,GAAcpzC,SAASM,MATzC,sBACE,OAAO0nC,GAWTzmC,cACE,OAAOx4B,KAAKmvB,SAGdsJ,YAAYtJ,GAEV,OADAnvB,KAAKmvB,SAAWA,EACTnvB,KAGTm5B,WACE,OAAOn5B,KAAKqS,MAGda,aACE,OAAO,QAAQlT,KAAKqS,MAAO,UAAW,kCAGxCD,SAASC,GAEP,OADArS,KAAKqS,MAAQA,EACNrS,KAGTipB,WACE,OAAOjpB,KAAKsL,MAGdusB,SAASvsB,GAEP,OADAtL,KAAKsL,MAAQA,EACNtL,KAGTyN,OACE,OAAOzN,KAAKyL,EAGdoC,KAAKpC,GAEH,OADAzL,KAAKyL,EAAIA,EACFzL,KAGTqD,cACE,MAAO,GAGTinE,iBAAiB55D,EAAc2B,EAAc8V,EAAeoiD,EAAc,GACxE75D,EAAM6B,UAAUF,EAAMmtB,YAAYrX,MAAAA,EAAAA,EAAQ,GAAK9V,EAAMe,gBAAkBm3D,GAGzEC,WAAWlkE,GACT,YAAiB7F,IAAV6F,GAAuBA,EAAQ,EAAI,EAAItG,KAAKm3D,QAGrD6B,WAAW7B,GAET,OADAn3D,KAAKm3D,QAAUA,EACRn3D,KAGTyqE,iBAAiBC,GAEf,OADA1qE,KAAK0qE,cAAgBA,EACd1qE,KAGT2qE,mBACE,OAAO3qE,KAAK0qE,cAIdxgE,KAAK8kD,EAAmB3/C,KQ1FnB,MAAMu7D,WAAaP,GAgGxBjqE,YAAY+F,EAAcwgD,EAAejV,GACvCthC,QAlFF,KAAA6U,KAAiB2lD,GAAKC,MAAc,OAmFlC7qE,KAAKiH,aAAa,OAAQ,QAE1BjH,KAAKy4B,YAAY4xC,GAAcpzC,SAAS6zC,OACxC9qE,KAAK8mD,QAAQ3gD,EAAMwgD,EAAMjV,GACzB1xC,KAAK63B,SAAS73B,KAAK4I,UAAUtH,aAAa,QAAQtB,KAAK2mD,eA/G3D,YAAc1jD,GACR2nE,GAAKruC,QAAO,QAAI,gBAAiBt5B,GA+GnC,CAAE,iBAAkBkD,GAhFtB,sBACE,MAAO,QAOT,mBACE,MAAO,CACLgf,OAAQ,CACNvW,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAETuW,KAAM,CACJzW,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAETyW,KAAM,CACJ3W,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAETwW,MAAO,CACL1W,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAET2W,WAAY,CACV7W,KAAM,aACNuZ,KAAM,EACNrZ,MAAO,GAET0W,QAAS,CACP5W,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAET,gBAAiB,CACfF,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAET,aAAc,CACZF,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAET,aAAc,CACZF,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAET4W,QAAS,CACP9W,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAET6W,OAAQ,CACN/W,KAAM,QACNuZ,KAAM,EACNrZ,MAAO,GAETi8D,IAAK,CACHn8D,KAAM,iBACNE,MAAO,IAiBbzL,cACE,OAAOunE,GAAKtnE,SAIdwjD,QAAQ3gD,EAAcwgD,EAAejV,GAcnC,GAbA1xC,KAAKmG,KAAOA,EACZnG,KAAKilB,KAAO2lD,GAAKC,MAAM1kE,GAErBnG,KAAK2mD,UADMlmD,IAATkmD,EACU,UAEAA,EAEd3mD,KAAKilB,KAAKnW,MAAQ9O,KAAK4I,UAAUtH,aAAa,QAAQtB,KAAK2mD,aAAc,GACzE3mD,KAAK0Q,MAAQ,IAAI3B,EAAM/O,KAAKilB,KAAKrW,KAAM5O,KAAKilB,KAAKnW,MAAO,CACtDD,SAAU,QAAQ7O,KAAKilB,KAAKrW,QAAQ5O,KAAK2mD,cAIxBlmD,IAAfixC,EAA0B,CAC5B,MAAM9iC,EAAO5O,KAAK4I,UAAUtH,aAAa,oBAAoBowC,eACvD5iC,EAAQ9O,KAAK4I,UAAUtH,aAAa,oBAAoBowC,KAAc1xC,KAAK2mD,cAC3Ex+B,EAAOnoB,KAAK4I,UAAUtH,aAAa,oBAAoBowC,KAAc1xC,KAAK2mD,QAAQ3mD,KAAKmG,aACvFkJ,EAAUrP,KAAK4I,UAAUtH,aAAa,oBAAoBowC,KAAc1xC,KAAK2mD,QAAQ3mD,KAAKmG,eAEhGnG,KAAK0xC,WAAa,CAAE9iC,KAAAA,EAAME,MAAAA,EAAOqZ,KAAAA,EAAM9Y,QAAAA,GAEvCrP,KAAKgrE,WAAa,IAAIj8D,EAAM/O,KAAK0xC,WAAW9iC,KAAM5O,KAAK0xC,WAAW5iC,OAClE9O,KAAKgrE,WAAW1qE,QAAQwQ,MAAQ,EAChC9Q,KAAKgrE,WAAW14D,UAAUtS,KAAK0xC,WAAWriC,cAE1CrP,KAAK0xC,gBAAajxC,EAGpB,OAAOT,KAITipB,WAIE,MAHkB,QAAdjpB,KAAKmG,OACP,QAAQnG,KAAKqS,MAAO,YAAa,kCAE5BrS,KAAKsL,MAId8G,SAASC,GAEP,GADArS,KAAKqS,MAAQA,EACK,QAAdrS,KAAKmG,KAAgB,CACvB,MAAMuK,GAAQ,QAAQ1Q,KAAK0Q,MAAO,YAAa,kCAEzCmvD,EAAW7/D,KAAKqS,MAAMomC,aAAamC,UACnC9rC,EAAQ9O,KAAK4I,UAAUtH,aAAa,kBAAkBu+D,WACtDv/B,EAAStgC,KAAK4I,UAAUtH,aAAa,kBAAkBu+D,YAC7DnvD,EAAMyB,SAASrD,GACf4B,EAAM6B,UAAU+tB,GAElB,OAAOtgC,KAITkK,OACE,IAAKlK,KAAKyL,EAAG,MAAM,IAAI,KAAa,YAAa,8BACjD,MAAMiF,GAAQ,QAAQ1Q,KAAK0Q,MAAO,YAAa,kCACzC2B,EAAQrS,KAAKkT,aACnBlT,KAAKuK,cAELmG,EAAM0B,SAASC,GACf3B,EAAM7F,WAAWwH,EAAMzH,mBACAnK,IAAnBT,KAAKilB,KAAKkD,MACZnoB,KAAKsqE,iBAAiB55D,EAAO2B,EAAOrS,KAAKilB,KAAKkD,MAEhDzX,EAAMyC,cAAcnT,KAAKyL,QAEDhL,IAApBT,KAAK0xC,iBAAgDjxC,IAApBT,KAAKgrE,aACxChrE,KAAKsqE,iBAAiBtqE,KAAKgrE,WAAY34D,EAAOrS,KAAK0xC,WAAWvpB,MAC9DnoB,KAAKgrE,WAAW54D,SAASC,GACzBrS,KAAKgrE,WAAWngE,WAAWwH,EAAMzH,cACjC5K,KAAKgrE,WAAW73D,cAAcnT,KAAKyL,KCpMlC,MAAMw/D,WAAqBZ,GA8EhCjqE,YAAY4rB,EAAiBk/C,EAAwBC,GACnD/6D,QAvEQ,KAAAg7D,QAA4C,GAwEpDprE,KAAKiH,aAAa,OAAQ,gBAE1BjH,KAAKqrE,UAAUr/C,EAASk/C,EAAeC,GACvCnrE,KAAKy4B,YAAY4xC,GAAcpzC,SAAS6zC,OACxC9qE,KAAKsrE,eAAiB,GACtBtrE,KAAKgC,OAAS,GACdhC,KAAKurE,WAAa,GAClBvrE,KAAKwrE,eAAgB,EA3EvB,sBACE,MAAO,gBA6ETnoE,cACE,OAAO4nE,GAAa3nE,SAMtBmoE,eAAe5hD,EAAqC6hD,GAClD,MAAMC,EAAenjE,GAAKohB,gBAAgBC,EAAI1jB,MACxCuK,EAAQ,IAAI3B,EAAM48D,EAAa/8D,KAAM5O,KAAKsrE,gBAGhD,IAAIM,EAAa,EACjB,GAAiB,MAAb/hD,EAAI1jB,MAAgBulE,EAAS,CAC/B,MAAM1hC,EAAUihC,GAAaY,kBAAkBH,EAAQvlE,MACvD,GAAI6jC,EAAS,CAEX4hC,EADgBF,EAAQvjD,MAAQ0B,EAAI1B,KACb6hB,EAAQ1S,MAAQ0S,EAAQxS,OAKnDx3B,KAAKsqE,iBAAiB55D,EAAO1Q,KAAKkT,aAAc2W,EAAI1B,MACpDnoB,KAAKgC,OAAOkO,KAAKQ,GAEjB,MAAMo7D,EAAY9rE,KAAKurE,WAAWvrE,KAAKurE,WAAW1pE,OAAS,GACrD2mC,EAAa93B,EAAMrP,aAAaiK,MAAQsgE,EAE9C5rE,KAAKurE,WAAWr7D,KAAK47D,EAAYtjC,GAEjCxoC,KAAKsL,OAASk9B,EAKhBujC,UAAUhgD,GAIR,OAHA/rB,KAAKoqE,WAAY,EACjBpqE,KAAKkrE,cAAgBn/C,EAEd/rB,KAGTgsE,uBAAuBjgD,GAErB,MAAMkgD,EAAiBzjE,GAAKsjB,aAAaC,GAGnCmgD,EACJlsE,KAAKorE,QAAQvpE,OAAS,GAAKoqE,EAAepqE,OAAS,GAAKoqE,EAAe,GAAG9lE,OAASnG,KAAKorE,QAAQ,GAAGjlE,KAG/FgmE,EAAWD,EAAkBD,EAAepqE,OAASoqE,EAAepqE,OAAS7B,KAAKorE,QAAQvpE,OAGhG,GAAIsqE,EAAW,EAAG,OAGlB,MAAMC,EAA8C,GACpD,IAAK,IAAIxqE,EAAI,EAAGA,EAAIuqE,EAAUvqE,IAAK,CACjC,IAAI0E,EAAQ1E,EACPsqE,IACH5lE,EAAQ2lE,EAAepqE,OAASsqE,EAAWvqE,GAG7C,MAAMioB,EAAMoiD,EAAe3lE,GAC3B8lE,EAAUl8D,KAAK,CAAE/J,KAAM,IAAKgiB,KAAM0B,EAAI1B,OAMxC,OAFAnoB,KAAKorE,QAAUgB,EAAUC,OAAOrsE,KAAKorE,SAE9B,CACLA,QAASgB,EACTjmE,KAAM8lE,EAAe,GAAG9lE,MAK5BmmE,WAAWj6D,GAIT,OAHArS,KAAKwrE,eAAgB,EACrBn5D,EAAMixB,YAAYtjC,MAEXA,KAKTusE,gBAAgBtnD,EAAc9e,EAAeilE,EAAUprE,KAAKorE,SAC1D,IACIoB,EAiCA5qE,EAlCAs/C,EAAS,EAGb,OAAQj8B,GAEN,IAAK,UACU,MAAT9e,EAAcqmE,EAAc,CAAC,IAAK,GAAK,EAAG,EAAG,KAAM,GAAK,GACvDtrB,GAAU,EACf,MACF,IAAK,gBACU,MAAT/6C,EAAcqmE,EAAc,CAAC,EAAG,EAAG,GAAK,IAAK,EAAG,EAAG,KAClDtrB,EAAS,IACd,MACF,IAAK,OACHA,EAAS,GACT,MACF,IAAK,QACU,MAAT/6C,EAAcqmE,EAAc,CAAC,EAAG,EAAG,IAAK,GAAK,EAAG,EAAG,KAClDtrB,GAAU,GACf,MACF,IAAK,aACL,IAAK,aACU,MAAT/6C,EAAcqmE,EAAc,CAAC,GAAK,IAAK,EAAG,EAAG,IAAK,IAAK,GACtDtrB,EAAS,EACd,MACF,IAAK,OACL,IAAK,SACHA,EAAS,EAQb,QAA2B,IAAhBsrB,EACT,IAAK5qE,EAAI,EAAGA,EAAIwpE,EAAQvpE,SAAUD,EAChCwpE,EAAQxpE,GAAGumB,KAAOqkD,EAAY5qE,QAE3B,GAAe,IAAXs/C,EACT,IAAKt/C,EAAI,EAAGA,EAAIwpE,EAAQvpE,SAAUD,EAChCwpE,EAAQxpE,GAAGumB,MAAQ+4B,EAKzBspB,WAAWlkE,GAGT,OAFKtG,KAAKoqE,WAAWpqE,KAAKyrD,SAEI,IAAvBzrD,KAAKgC,OAAOH,SAAkB7B,KAAKwrE,eAAiBllE,EAAQ,EAAK,EAAItG,KAAKm3D,QAGnFluC,WAGE,OAFKjpB,KAAKoqE,WAAWpqE,KAAKyrD,SAEnBzrD,KAAKsL,MAGd+/D,UAAUr/C,EAAiBk/C,EAAwBC,GAMjD,OALAnrE,KAAKoqE,WAAY,EACjBpqE,KAAKgsB,QAAUA,EACfhsB,KAAKkrE,cAAgBA,EACrBlrE,KAAKmrE,aAAeA,EAEbnrE,KAMTysE,SAAStB,GAIP,OAHAnrE,KAAKoqE,WAAY,EACjBpqE,KAAKmrE,aAAeA,EAEbnrE,KAGT0sE,sBAAsBvB,GACpB,MAAM58D,EAAMtJ,KAAKw2B,IAAI0vC,EAAatpE,OAAQ7B,KAAKorE,QAAQvpE,QACvD,IAAK,IAAID,EAAI,EAAGA,EAAI2M,IAAO3M,EACrBupE,EAAavpE,KACf5B,KAAKorE,QAAQxpE,GAAGuE,KAAOglE,EAAavpE,IAK1C6pD,SACE,MAAMp5C,EAAQrS,KAAKkT,aAEnBlT,KAAKsL,MAAQ,EACbtL,KAAKgC,OAAS,GACdhC,KAAKurE,WAAa,CAAC,GACnBvrE,KAAKorE,QAAU5iE,GAAKsjB,cAAa,QAAQ9rB,KAAKgsB,UAC9C,MAAMo/C,EAAUprE,KAAKorE,QACfuB,EAAsBvB,EAAQvpE,OAAS,EAAIupE,EAAQ,GAAGjlE,UAAO1F,EACnE,IAAImsE,EAQJ,GAPI5sE,KAAKkrE,gBACP0B,EAAgB5sE,KAAKgsE,uBAAuBhsE,KAAKkrE,gBAE/ClrE,KAAKmrE,cACPnrE,KAAK0sE,sBAAsB1sE,KAAKmrE,cAG9BnrE,KAAKorE,QAAQvpE,OAAS,EAAG,CAC3B,MAAMojB,GACHjlB,KAAKmvB,WAAak7C,GAAcpzC,SAAS41C,IAAMx6D,EAAMy6D,aAAez6D,EAAM06D,YAAc16D,EAAM06D,UAC7FH,GACF5sE,KAAKusE,gBAAgBtnD,EAAM2nD,EAAczmE,KAAMymE,EAAcxB,SAE/DprE,KAAKusE,gBAAgBtnD,EAAM0nD,EAAqBvB,GAChD,IAAK,IAAIxpE,EAAI,EAAGA,EAAI5B,KAAKorE,QAAQvpE,SAAUD,EACzC5B,KAAKyrE,eAAezrE,KAAKorE,QAAQxpE,GAAI5B,KAAKorE,QAAQxpE,EAAI,IAI1D5B,KAAKoqE,WAAY,EAGnBlgE,OACE,IAAKlK,KAAKyL,EACR,MAAM,IAAI,KAAa,oBAAqB,uCAG9C,MAAM4G,EAAQrS,KAAKkT,aAEdlT,KAAKoqE,WAAWpqE,KAAKyrD,SAC1BzrD,KAAKuK,cAEL,IAAK,IAAI3I,EAAI,EAAGA,EAAI5B,KAAKgC,OAAOH,OAAQD,IAAK,CAC3C,MAAM8O,EAAQ1Q,KAAKgC,OAAOJ,GACpB6J,EAAIzL,KAAKyL,EAAIzL,KAAKurE,WAAW3pE,GACnC8O,EAAM0B,SAASC,GACf3B,EAAM7F,WAAWwH,EAAMpI,gBACvByG,EAAMyC,cAAc1H,KArSjB,GAAAogE,kBAAsE,CAC3E,IAAK,CACHv0C,MAAO,EACPE,MAAO,GAET50B,EAAG,CACD00B,MAAO,EACPE,MAAO,GAETzxB,EAAG,CACDuxB,MAAO,EACPE,MAAO,GAET,KAAM,CACJF,MAAO,EACPE,MAAO,GAET1iB,GAAI,CACFwiB,MAAO,EACPE,MAAO,GAETziB,GAAI,CACFuiB,MAAO,EACPE,MAAO,GAET/zB,EAAG,CACD6zB,MAAO,EACPE,MAAO,GAETtiB,IAAK,CACHoiB,MAAO,EACPE,MAAO,GAET,KAAM,CACJF,MAAO,EACPE,MAAO,GAET,IAAK,CACHF,MAAO,EACPE,MAAO,GAET,KAAM,CACJF,MAAO,EACPE,MAAO,GAET,MAAO,CACLF,MAAO,EACPE,MAAO,GAETxiB,GAAI,CACFsiB,MAAO,EACPE,MAAO,IAETviB,IAAK,CACHqiB,MAAO,EACPE,MAAO,KR/Eb,SAAY0nC,GACV,uBACA,uBACA,iBACA,mCACA,+BACA,iCACA,mBAPF,CAAYA,KAAAA,GAAW,KAUhB,MAAM8N,WAAgB3C,GA+B3BjqE,YAAY+F,GACViK,QACApQ,KAAKiH,aAAa,OAAQ,WAC1BjH,KAAKwmD,UAAYh+C,GAAKic,qBAEtB,MAAMwoD,EAAO/N,GACbl/D,KAAKktE,OAAS,GACdltE,KAAKktE,OAAOD,EAAK1lB,QAAU,EAC3BvnD,KAAKktE,OAAOD,EAAKxmB,QAAU,EAC3BzmD,KAAKktE,OAAOD,EAAKJ,KAAO,EACxB7sE,KAAKktE,OAAOD,EAAKE,cAAgB,EACjCntE,KAAKktE,OAAOD,EAAKG,YAAc,EAC/BptE,KAAKktE,OAAOD,EAAKI,aAAe,EAChCrtE,KAAKktE,OAAOD,EAAKhmB,MAAQ,EAEzBjnD,KAAKstE,SAAW,GAChBttE,KAAKstE,SAASL,EAAK1lB,QAAU,EAC7BvnD,KAAKstE,SAASL,EAAKxmB,QAAU,EAC7BzmD,KAAKstE,SAASL,EAAKJ,KAAO,EAC1B7sE,KAAKstE,SAASL,EAAKE,cAAgB,GACnCntE,KAAKstE,SAASL,EAAKG,YAAc,GACjCptE,KAAKstE,SAASL,EAAKI,aAAe,GAClCrtE,KAAKstE,SAASL,EAAKhmB,MAAQ,EAE3BjnD,KAAKutE,iBAAmB,GACxBvtE,KAAKutE,iBAAiBN,EAAK1lB,QAAU,CACnCimB,KAAM,EACNC,KAAM,EACNC,YAAa,EACbC,aAAc,GAEhB3tE,KAAKutE,iBAAiBN,EAAKxmB,QAAU,CACnC+mB,MAAO,EACPC,KAAM,EACNC,YAAa,EACbC,aAAc,GAEhB3tE,KAAKutE,iBAAiBN,EAAKJ,KAAO,CAChCW,MAAO,EACPC,KAAM,EACNC,YAAa,EACbC,aAAc,GAEhB3tE,KAAKutE,iBAAiBN,EAAKG,YAAc,CACvCI,MAAO,GACPC,KAAM,EACNC,YAAa,EACbC,aAAc,GAEhB3tE,KAAKutE,iBAAiBN,EAAKE,cAAgB,CACzCK,MAAO,EACPC,KAAM,GACNC,YAAa,EACbC,aAAc,GAEhB3tE,KAAKutE,iBAAiBN,EAAKI,aAAe,CACxCG,MAAO,GACPC,KAAM,GACNC,YAAa,EACbC,aAAc,GAEhB3tE,KAAKutE,iBAAiBN,EAAKhmB,MAAQ,CACjCumB,KAAM,EACNC,KAAM,EACNC,YAAa,EACbC,aAAc,GAEhB3tE,KAAKy4B,YAAY4xC,GAAcpzC,SAAS6zC,OACxC9qE,KAAK8mD,QAAQ3gD,GA3Ff,sBACE,MAAO,WAGT,kBACE,OAAO+4D,GAGT,wBACE,MAAO,CACLjW,OAAQiW,GAAY3X,OACpB2B,OAAQgW,GAAYzY,OACpBhX,IAAKyvB,GAAY2N,IACjBe,YAAa1O,GAAYiO,aACzBU,UAAW3O,GAAYkO,WACvBU,WAAY5O,GAAYmO,YACxB7jB,KAAM0V,GAAYjY,MA8EtB5jD,cACE,OAAO2pE,GAAQ1pE,SAGjByqE,UACE,OAAO/tE,KAAKmG,KAGd2gD,QAAQ3gD,GAMN,OALAnG,KAAKmG,KAAuB,iBAATA,EAAoB6mE,GAAQjmB,WAAW5gD,GAAQA,EAElEnG,KAAK63B,SAAS73B,KAAKktE,OAAOltE,KAAKmG,OAC/BnG,KAAKg5D,WAAWh5D,KAAKstE,SAASttE,KAAKmG,OACnCnG,KAAKyqE,iBAAiBzqE,KAAKutE,iBAAiBvtE,KAAKmG,OAC1CnG,KAITkK,KAAKmI,GAIH,OAHAA,EAAMpI,eACNjK,KAAKuK,cAEGvK,KAAKmG,MACX,KAAK+4D,GAAY3X,OACfvnD,KAAKguE,gBAAgB37D,EAAOrS,KAAKyL,GAAG,GACpC,MACF,KAAKyzD,GAAYzY,OACfzmD,KAAKguE,gBAAgB37D,EAAOrS,KAAKyL,GAAG,GACpC,MACF,KAAKyzD,GAAY2N,IACf7sE,KAAKiuE,mBAAmB57D,EAAOrS,KAAKyL,GACpC,MACF,KAAKyzD,GAAYiO,aAGfntE,KAAKkuE,cAAc77D,EAAOrS,KAAKyL,GAAG,GAC9B4G,EAAM5E,SAAWzN,KAAKyL,GACxBzL,KAAKguE,gBAAgB37D,EAAOA,EAAM5E,QAGpC,MACF,KAAKyxD,GAAYkO,WACfptE,KAAKkuE,cAAc77D,EAAOrS,KAAKyL,GAAG,GAClC,MACF,KAAKyzD,GAAYmO,YACfrtE,KAAKkuE,cAAc77D,EAAOrS,KAAKyL,GAAG,GAClCzL,KAAKkuE,cAAc77D,EAAOrS,KAAKyL,GAAG,IAQxCuiE,gBAAgB37D,EAAc5G,EAAW0iE,GACvC,MAAMC,EAAW/7D,EAAMpI,eACjB0xB,EAAOtpB,EAAMg8D,iBACbpoB,EAAO5zC,EAAMi8D,uBACfH,GACFC,EAAS/tC,SAAS50B,EAAI,EAAGkwB,EAAM,EAAGsqB,EAAOtqB,GAE3CyyC,EAAS/tC,SAAS50B,EAAGkwB,EAAM,EAAGsqB,EAAOtqB,GAGvCsyC,mBAAmB57D,EAAc5G,GAC/B,MAAM2iE,EAAW/7D,EAAMpI,eACjB0xB,EAAOtpB,EAAMg8D,iBACbpoB,EAAO5zC,EAAMi8D,uBACnBF,EAAS/tC,SAAS50B,EAAI,EAAGkwB,EAAM,EAAGsqB,EAAOtqB,GACzCyyC,EAAS/tC,SAAS50B,EAAI,EAAGkwB,EAAM,EAAGsqB,EAAOtqB,GAG3CuyC,cAAc77D,EAAc5G,EAAW8iE,GACrC,MAAMH,EAAW/7D,EAAMpI,eAEjB0xB,EAAOtpB,EAAMg8D,iBACbpoB,EAAO5zC,EAAMi8D,uBACnB,IAAIj/D,EAAU,EAETk/D,IACHl/D,GAAW,GAGb++D,EAAS/tC,SAAS50B,EAAI4D,EAASssB,EAAM,EAAGsqB,EAAOtqB,GAC/CyyC,EAAS/tC,SAAS50B,EAAI,EAAGkwB,EAAM,EAAGsqB,EAAOtqB,GAKrC4yC,EACFl/D,GAAW,EAEXA,GAAW,EAGb,MAAM+7C,EAAQ3/C,EAAI4D,EAAUm/D,EAG5B,IAAIvzC,GAAY5oB,EAAMygC,cAAgB,GAAKzgC,EAAM43B,yBACjDhP,EAAWA,EAAW,EAAI5oB,EAAM43B,yBAA2B,EAC3D,IAAIohB,EAAQ1vB,EAAOV,EAAWuzC,EAG9BJ,EAAS38D,YACT28D,EAAS1tC,IAAI0qB,EAAOC,EAlBD,EAkBoB,EAAa,EAAVpmD,KAAK07B,IAAQ,GACvDytC,EAASt8D,OAGTu5C,GAASh5C,EAAM43B,yBACfmkC,EAAS38D,YACT28D,EAAS1tC,IAAI0qB,EAAOC,EAxBD,EAwBoB,EAAa,EAAVpmD,KAAK07B,IAAQ,GACvDytC,EAASt8D,QS/NN,MAAM28D,WAAmBpE,GAyB9BjqE,YAAY+F,EAAcsF,EAAW6D,GACnCc,QACApQ,KAAKiH,aAAa,OAAQ,cAE1BjH,KAAK0uE,YAAcvoE,EACnBnG,KAAKyL,EAAIA,EACTzL,KAAKqP,QAAU,EACfrP,KAAKsP,QAAUA,EACftP,KAAKwP,KAAO,CACVk3C,OAAQ,QACRC,KAAM,GACNC,OAAQ,OACR79C,MAAO,UA9BX,sBACE,MAAO,cAiCT1F,cACE,OAAOorE,GAAWnrE,SAGpBqrE,UAAUljE,GAER,OADAzL,KAAKqP,QAAU5D,EACRzL,KAGT4uE,UAAUljE,GAER,OADA1L,KAAKsP,QAAU5D,EACR1L,KAGTkK,KAAKmI,EAAc5G,GAGjB,OAFAzL,KAAKuK,cAEGvK,KAAK0uE,aACX,KAAKD,GAAWtoE,KAAK0oE,WACnB7uE,KAAK8uE,cAAcz8D,EAAO5G,EAAI4G,EAAM4W,YACpC,MACF,KAAKwlD,GAAWtoE,KAAK4oE,UACnB/uE,KAAKgvE,eAAe38D,EAAO5G,EAAG,QAAQ,GACtC,MACF,KAAKgjE,GAAWtoE,KAAK8oE,WACnBjvE,KAAKkvE,eAAe78D,EAAO5G,GAC3B,MACF,KAAKgjE,GAAWtoE,KAAKgpE,YACnBnvE,KAAKkvE,eAAe78D,EAAO5G,EAAI4G,EAAM4W,YACrC,MACF,KAAKwlD,GAAWtoE,KAAKipE,GACnBpvE,KAAKgvE,eAAe38D,EAAO5G,EAAG,QAAQ,GACtC,MACF,KAAKgjE,GAAWtoE,KAAKkpE,WACnBrvE,KAAKgvE,eAAe38D,EAAO5G,EAAG,WAAW,GACzC,MACF,KAAKgjE,GAAWtoE,KAAKmpE,WACnBtvE,KAAKgvE,eAAe38D,EAAO5G,EAAG,gBAAgB,GAC9C,MACF,KAAKgjE,GAAWtoE,KAAKopE,GACnBvvE,KAAKgvE,eAAe38D,EAAO5G,EAAG,QAAQ,GACtC,MACF,KAAKgjE,GAAWtoE,KAAKqpE,WACnBxvE,KAAKgvE,eAAe38D,EAAO5G,EAAG,WAAW,GACzC,MACF,KAAKgjE,GAAWtoE,KAAKspE,WACnBzvE,KAAKgvE,eAAe38D,EAAO5G,EAAG,gBAAgB,GAC9C,MACF,KAAKgjE,GAAWtoE,KAAKupE,KACnB1vE,KAAKgvE,eAAe38D,EAAO5G,EAAG,QAAQ,GAM1C,OAAOzL,KAGT8uE,cAAcz8D,EAAc5G,GAC1B,MAAMC,EAAI2G,EAAMq1B,eAAer1B,EAAMygC,eAAiB9yC,KAAKsP,QAE3D,OADAP,EAAM27B,YAAYr4B,EAAMpI,eAAgBjK,KAAKyL,EAAIA,EAAIzL,KAAKqP,QAAS3D,EAAI,GAAI,GAAI,OAAQ,CAAEmD,SAAU,SAC5F7O,KAGTkvE,eAAe78D,EAAc5G,GAC3B,MAAMC,EAAI2G,EAAMq1B,eAAer1B,EAAMygC,eAAiB9yC,KAAKsP,QAE3D,OADAP,EAAM27B,YAAYr4B,EAAMpI,eAAgBjK,KAAKyL,EAAIA,EAAIzL,KAAKqP,QAAS3D,EAAI,GAAI,GAAI,QAAS,CAAEmD,SAAU,UAC7F7O,KAGTgvE,eAAe38D,EAAc5G,EAAWud,EAAc2mD,GACpD,MAAMxhE,EAAMkE,EAAMpI,eAElBkE,EAAIhF,OACJgF,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QAExD,IAAIgpB,EAAS,EAAI5vE,KAAKqP,QAClBwgE,EAAWpkE,EAAIzL,KAAKqP,QACxB,GAAIrP,KAAK0uE,cAAgBD,GAAWtoE,KAAK4oE,UAEvCa,EAAS5vE,KAAKyL,EAAI4G,EAAMomC,aAAaq3B,mBACrCD,EAAWD,EAASzhE,EAAIirC,YAAYpwB,GAAM1d,MAAQ,QAC7C,GAAItL,KAAK0uE,cAAgBD,GAAWtoE,KAAKopE,GAAI,CAClD,MAAMQ,EAAgB19D,EAAMq2B,gBAAkB1oC,KAAKyL,EACnDmkE,EAAS5vE,KAAKyL,EAAIA,EAAIzL,KAAKqP,QAAUgD,EAAM4W,WAAa,EAAI8mD,EAAgB5hE,EAAIirC,YAAYpwB,GAAM1d,WAIlGukE,EAAW7vE,KAAKyL,EAAIA,EAAI4G,EAAM4W,WAAa,EAAIjpB,KAAKqP,QACpDugE,EAASC,GAAY1hE,EAAIirC,YAAYpwB,GAAM1d,MAAQ,GAGrD,MAAMI,EAAI2G,EAAMq1B,eAAer1B,EAAMygC,eAAiB9yC,KAAKsP,QAQ3D,OAPIqgE,GACF5gE,EAAM27B,YAAYv8B,EAAK0hE,EAAUnkE,EAAG,GAAI,OAAQ,CAAEmD,SAAU,SAG9DV,EAAI83B,SAASjd,EAAM4mD,EAAQlkE,EAAI,GAC/ByC,EAAIpE,UAEG/J,MAnIO,GAAAmG,KAAO,CACrB8gD,KAAM,EACN8nB,UAAW,EACXF,WAAY,EACZI,WAAY,EACZE,YAAa,EACbC,GAAI,EACJC,WAAY,EACZC,WAAY,EACZC,GAAI,EACJC,WAAY,GACZC,WAAY,GACZC,KAAM,ICvBH,MAAMM,WAAqB3F,GAUhCjqE,YAAY6vE,EAAiBxkE,EAAWod,GACtCzY,QACApQ,KAAKiH,aAAa,OAAQ,gBAE1BjH,KAAK63B,SAAS,IACd73B,KAAKiwE,QAAUA,EACfjwE,KAAKyL,EAAIA,EACTzL,KAAKonD,QAAU,EACfpnD,KAAK6oB,QAAUA,EACf7oB,KAAKwP,KAAO,CACVk3C,OAAQ,aACRC,KAAM,GACNC,OAAQ,QAhBZ,sBACE,MAAO,eAmBTvjD,cACE,OAAO2sE,GAAa1sE,SAGtB4sE,gBAAgBD,GAEd,OADAjwE,KAAKiwE,QAAUA,EACRjwE,KAGT2uE,UAAUljE,GAER,OADAzL,KAAKonD,QAAU37C,EACRzL,KAGT4uE,UAAUljE,GAER,OADA1L,KAAK6oB,QAAUnd,EACR1L,KAGTkK,KAAKmI,EAAc+0C,GACjB,MAAMj5C,EAAMkE,EAAMpI,eAClBjK,KAAKuK,cAEL4D,EAAIhF,OACJgF,EAAItE,aAAa,GACjBsE,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QACxD,MAAMiC,EAAa16C,EAAIirC,YAAY,GAAKp5C,KAAKiwE,SAAS3kE,MACtD,IAAIA,EAAQu9C,EAAa,EACrBv9C,EAAQ,KAAIA,EAAQ,IACxB,MAEMI,EAAI2G,EAAMq1B,eAAe,GAAK1nC,KAAK6oB,QACzC,IAAIpd,EAAIzL,KAAKyL,EAAI27C,EAQjB,OAPAj5C,EAAIsD,YACJtD,EAAItE,aAAa,GACjBsE,EAAIM,KAAKhD,EAAGC,EAAGJ,EANA,IAOf6C,EAAIO,SACJjD,IAAMH,EAAQu9C,GAAc,EAC5B16C,EAAI83B,SAAS,GAAKjmC,KAAKiwE,QAASxkE,EAAGC,EAAI,IACvCyC,EAAIpE,UACG/J,MCzDJ,MAAMmwE,WAAmB9F,GAc9BjqE,YAAYgwE,EAA0B3kE,EAAWod,GAC/CzY,QACApQ,KAAKiH,aAAa,OAAQ,cAE1BjH,KAAKowE,MAAQA,EACbpwE,KAAKmvB,SAAWk7C,GAAcpzC,SAASM,MACvCv3B,KAAKyL,EAAIA,EACTzL,KAAKonD,QAAU,GACfpnD,KAAK6oB,QAAUA,EACf7oB,KAAKwP,KAAO,CACVk3C,OAAQ,QACRC,KAAM,GACNC,OAAQ,QAEV5mD,KAAKmlC,eAAiB,CACpBE,iBAAkB,IAnBtB,sBACE,MAAO,aAsBThiC,cACE,OAAO8sE,GAAW7sE,SAGpB+sE,SAASD,GAEP,OADApwE,KAAKowE,MAAQA,EACNpwE,KAGT2uE,UAAUljE,GAER,OADAzL,KAAKonD,QAAU37C,EACRzL,KAGT4uE,UAAUljE,GAER,OADA1L,KAAK6oB,QAAUnd,EACR1L,KAGTkK,KAAKmI,EAAc+0C,GACjB,MAAMj5C,EAAMkE,EAAMpI,eAClBjK,KAAKuK,cAEL,MAAM4F,EAAUnQ,KAAKmlC,eAGf/1B,EAAQe,EAAQk1B,iBAAmB,GACnChlC,EAAOL,KAAKowE,MAAM/vE,KAClBytB,EAAW9tB,KAAKowE,MAAMtiD,SACtB6W,EAAO3kC,KAAKowE,MAAMzrC,KAClB2rC,EAAMtwE,KAAKowE,MAAME,IACjB9gE,EAAOxP,KAAKwP,KAClB,IAAI/D,EAAIzL,KAAKyL,EAAIzL,KAAKonD,QAAUA,EAChC,MAAM17C,EAAI2G,EAAMq1B,eAAe,GAAK1nC,KAAK6oB,QAUzC,GARA1a,EAAIhF,OAEA9I,IACF8N,EAAI63B,QAAQx2B,EAAKk3C,OAAQl3C,EAAKm3C,KAAMn3C,EAAKo3C,QACzCz4C,EAAI83B,SAAS5lC,EAAMoL,EAAGC,GACtBD,GAAK0C,EAAIirC,YAAY/4C,GAAMiL,OAGzBwiB,GAAYwiD,EAAK,CACnBniE,EAAI63B,QAAQx2B,EAAKk3C,OAAQl3C,EAAKm3C,KAAM,UAEhCtmD,IACFoL,GAAK0C,EAAIirC,YAAY,KAAK9tC,MAC1B6C,EAAI83B,SAAS,IAAKx6B,EAAGC,GACrBD,GAAK0C,EAAIirC,YAAY,KAAK9tC,OAG5B,MAAMsD,EAAOpG,GAAK4lB,cAAcN,GAOhC,GALAriB,GAAK,EAAI2D,EACTL,EAAM27B,YAAYv8B,EAAK1C,EAAGC,EAAGyE,EAAQk1B,iBAAkBz2B,EAAKogB,WAC5DvjB,GAAKmD,EAAKqa,WAAa7Z,EAGnBR,EAAK0f,KAAM,CACb,IAAIiiD,EAAc,GAEd3hE,EAAKwgB,aAAYmhD,GAAe,GAAK3hE,EAAKwgB,WAAa,IAE3DmhD,GAAenhE,EAEf,MAAM8qB,EAAQxuB,EAAI6kE,EAClBpiE,EAAIkyB,SAAS50B,EAAI2D,EAAO8qB,EAAO9qB,EAAOmhE,GAElC3hE,EAAK4f,OACPzf,EAAM27B,YAAYv8B,EAAK1C,EAAGyuB,EAAO/pB,EAAQk1B,iBAAkBz2B,EAAKygB,iBAAkB,CAChFxgB,SAAU,oBAGP81B,IAAMl5B,GAAK,EAAI2D,IAKxB,IAAK,IAAIxN,EAAI,EAAGA,EAAI+iC,EAAM/iC,IACxB6J,GAAK,EAAI2D,EACTjB,EAAIsD,YACJtD,EAAIuyB,IAAIj1B,EAAGC,EAAI,EAAI0D,EAAO,EAAIA,EAAO,EAAa,EAAVnK,KAAK07B,IAAQ,GACrDxyB,EAAI2D,OAGN3D,EAAI83B,SAAS,MAAQqqC,GAAOjwE,EAAO,IAAM,IAAKoL,EAAI,EAAI2D,EAAO1D,GAI/D,OADAyC,EAAIpE,UACG/J,OVnIX,SAAYm/D,GACV,mBACA,uBACA,qBAHF,CAAYA,KAAAA,GAAa,KAqBlB,MAAMqR,WAAiBpsC,EA6E5BhkC,YAAY+P,GAmBV,GAlBAC,MAAMD,GACNnQ,KAAKiH,aAAa,OAAQ,YAG1BjH,KAAKgpB,KAAO7Y,EAAQ6Y,KACpBhpB,KAAKywE,YAActgE,EAAQsgE,YAC3BzwE,KAAK0wE,UAAYvgE,EAAQugE,UACzB1wE,KAAK0Q,WAAQjQ,EACbT,KAAKwP,KAAO,OAAH,QACPk3C,OAAQ,QACRC,KAAM,GACNC,OAAQ,IACLz2C,EAAQX,MAMTW,EAAQO,MAAO,CACjB,MAAMigE,EAASH,GAASI,OAAOzgE,EAAQO,OACvC,IAAKigE,EAAQ,MAAM,IAAI,KAAa,uBAAyBxgE,EAAQO,OAErE1Q,KAAK0Q,MAAQ,IAAI3B,EAAM4hE,EAAO/hE,KAAM,GAAI,CAAEC,SAAU,aACpD7O,KAAK63B,SAAS73B,KAAK0Q,MAAMrP,aAAaiK,OAGxCtL,KAAKmoB,KAAOhY,EAAQgY,MAAQ,EAC5BnoB,KAAK6wE,OAAS1gE,EAAQ0gE,SAAU,EAChC7wE,KAAKshC,aAAenxB,EAAQmxB,eAAgB,EAC5CthC,KAAKs/D,cAAgBkR,GAASrR,cAAcjoC,KAjG9C,2BACE,OAAOioC,GAIT,oBACE,MAAO,CACL2R,MAAO,CACLliE,KAAM,SAER8b,GAAI,CACF9b,KAAM,iBAER0b,QAAS,CACP1b,KAAM,mBAERmiE,cAAe,CACbniE,KAAM,sBAERoiE,cAAe,CACbpiE,KAAM,mBAERhJ,EAAG,CACDgJ,KAAM,gBAERqiE,EAAG,CACDriE,KAAM,gBAERqgB,EAAG,CACDrgB,KAAM,gBAERlJ,EAAG,CACDkJ,KAAM,oBAERsiE,EAAG,CACDtiE,KAAM,YAERuiE,KAAM,CACJviE,KAAM,QAERwiE,WAAY,CACVxiE,KAAM,oBAERyiE,YAAa,CACXziE,KAAM,mBAER0iE,iBAAkB,CAChB1iE,KAAM,WAER2iE,eAAgB,CACd3iE,KAAM,iBAER4iE,OAAQ,CACN5iE,KAAM,mBAERizC,KAAM,CACJjzC,KAAM,kBAER4b,KAAM,CACJ5b,KAAM,gBAER6b,cAAe,CACb7b,KAAM,sBAuCZuxD,iBAAiBH,GAEf,OADAhgE,KAAKs/D,cAAgBU,EACdhgE,KAIT4pC,QAAQzhB,GAEN,OADAnoB,KAAKmoB,KAAOA,EACLnoB,KAIT6jC,YACE,GAAI7jC,KAAK8gC,aAAc,OACvB,MAAM7H,EAAcj5B,KAAKiiC,iBAAiB,0CAE1C,GAAIjiC,KAAK6wE,OACP7wE,KAAK63B,SAAS,QAEd,GAAI73B,KAAK0Q,WAEF,CACL,MAAMvC,EAAMnO,KAAKiK,eACjBkE,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QACxD5mD,KAAK63B,SAAS1pB,EAAIirC,YAAYp5C,KAAKgpB,MAAM1d,OAIzCtL,KAAKs/D,gBAAkBkR,GAASrR,cAAc9nC,OAChDr3B,KAAKilC,oBAAsBjlC,KAAKsL,MAAQ,EAC/BtL,KAAKs/D,gBAAkBkR,GAASrR,cAAcvnC,QACvD53B,KAAKilC,oBAAsBjlC,KAAKsL,OAIlCtL,KAAKklC,qBAAuBjM,EAAY53B,aAAaonC,QAAU,EAC/DzoC,KAAKqjC,iBAAgB,GAIvBn5B,OACE,MAAMiE,EAAMnO,KAAKiK,eACXoI,EAAQrS,KAAKkT,aACb+lB,EAAcj5B,KAAKiiC,iBAAiB,qCAE1CjiC,KAAKuK,cAGL,IAAIkB,EAAIzL,KAAKmkC,eAAiBlL,EAAY53B,aAAaonC,QAAU,EAGjE,MAAMn9B,EAAQtL,KAAKipB,WAQnB,IAAIvd,EACJ,GAPI1L,KAAKs/D,gBAAkBkR,GAASrR,cAAc9nC,OAChD5rB,GAAKH,EAAQ,EACJtL,KAAKs/D,gBAAkBkR,GAASrR,cAAcvnC,QACvDnsB,GAAKH,GAIHtL,KAAK0Q,MACPhF,EAAI2G,EAAMmtB,YAAYx/B,KAAKmoB,MAAQ,GACnCnoB,KAAK0Q,MAAMqC,OAAO5E,EAAK1C,EAAGC,OACrB,CACLA,EAAI2G,EAAMmtB,YAAYx/B,KAAKmoB,MAAQ,GACnCnoB,KAAKiJ,WAAWkF,GAChBA,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QACxDz4C,EAAI83B,SAASjmC,KAAKgpB,KAAMvd,EAAGC,GAE3B,IAAIH,EAAS4C,EAAIirC,YAAYp5C,KAAKgpB,MAAMzd,YAElB,IAAXA,IAETA,EAAS4C,EAAIirC,YAAY,KAAK9tC,OAI5BtL,KAAKywE,cACPtiE,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAO,IAAK3mD,KAAKwP,KAAKo3C,QAC9Dz4C,EAAI83B,SAASjmC,KAAKywE,YAAahlE,EAAIH,EAAQ,EAAGI,EAAIH,EAAS,MAIzDvL,KAAK0wE,YACPviE,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAO,IAAK3mD,KAAKwP,KAAKo3C,QAC9Dz4C,EAAI83B,SAASjmC,KAAK0wE,UAAWjlE,EAAIH,EAAQ,EAAGI,EAAIH,EAAS,IAAM,IAGjEvL,KAAK8J,aAAaqE,KW3NjB,MAAMsjE,WAAkBpH,GAgB7BjqE,YACE4oB,EACAmG,EACAhf,GAMAC,QACApQ,KAAKiH,aAAa,OAAQ,aAE1BjH,KAAK63B,SAAS,IACd73B,KAAKgpB,KAAOA,EACZhpB,KAAKmvB,SAAWA,EAChBnvB,KAAKmQ,QAAU,CACbi3C,QAAS,EACTv+B,QAAS,EACTy2C,cAAekR,GAASrR,cAAc9nC,QAExCr3B,KAAKmQ,QAAU,OAAH,wBAAQnQ,KAAKmQ,SAAYA,GAErCnQ,KAAKwP,KAAO,CACVk3C,OAAQ,QACRC,KAAM,GACNC,OAAQ,UA7BZ,sBACE,MAAO,YAgCTvjD,cACE,OAAOouE,GAAUnuE,SAGnBouE,aAAa1oD,GAEX,OADAhpB,KAAKgpB,KAAOA,EACLhpB,KAGT2uE,UAAUljE,GAER,OADAzL,KAAKonD,QAAU37C,EACRzL,KAGT4uE,UAAUljE,GAER,OADA1L,KAAK6oB,QAAUnd,EACR1L,KAGTgmC,QAAQx2B,GAEN,OADAxP,KAAKwP,KAAO,OAAH,wBAAQxP,KAAKwP,MAASA,GACxBxP,KAGTknD,QAAQl+B,GAEN,OADAhpB,KAAKgpB,KAAOA,EACLhpB,KAGTkK,KAAKmI,GACH,MAAMlE,EAAMkE,EAAMpI,eAClBjK,KAAKuK,cAEL4D,EAAIhF,OACJgF,EAAItE,aAAa,GACjBsE,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QACxD,MAAMiC,EAAa16C,EAAIirC,YAAY,GAAKp5C,KAAKgpB,MAAM1d,MAEnD,IAAIG,EACAC,EACJ,MAAMurB,EAAWozC,GAAcpzC,SACzBkoC,EAAgBqR,GAASrR,cAC/B,OAAQn/D,KAAKmvB,UACX,KAAK8H,EAASC,KACd,KAAKD,EAASW,MACZlsB,GAAK2G,EAAMmtB,YAAY,GAAKntB,EAAMy2C,kBAAoB,EAAI9oD,KAAKmQ,QAAQ0Y,QAErEpd,EADEzL,KAAKmvB,WAAa8H,EAASC,KACzB7kB,EAAM5E,OAASo7C,EAAa,GAAK7oD,KAAKmQ,QAAQi3C,QAE9C/0C,EAAM5E,OAAS4E,EAAM4W,WAAa,GAAKjpB,KAAKmQ,QAAQi3C,QAE1D,MACF,KAAKnwB,EAASM,MACd,KAAKN,EAASQ,MACZhsB,EAAI4G,EAAM5E,OAASzN,KAAKmQ,QAAQi3C,QAC5BpnD,KAAKmQ,QAAQmvD,gBAAkBH,EAAc9nC,OAC/C5rB,GAAK4G,EAAM4W,WAAa,EAAI4/B,EAAa,EAChC7oD,KAAKmQ,QAAQmvD,gBAAkBH,EAAcvnC,QACtDnsB,GAAK4G,EAAM4W,WAAa4/B,GAIxBn9C,EADE1L,KAAKmvB,WAAa8H,EAASM,MACzBllB,EAAMq1B,eAAe,GAAK1nC,KAAKmQ,QAAQ0Y,QAEvCxW,EAAM+5B,kBAAkB,GAAKpsC,KAAKmQ,QAAQ0Y,QAEhD,MACF,QACE,MAAM,IAAI,KAAa,kBAAmB,uCAK9C,OAFA1a,EAAI83B,SAAS,GAAKjmC,KAAKgpB,KAAMvd,EAAGC,EAAI,GACpCyC,EAAIpE,UACG/J,OVxHX,SAAYo/D,GACV,mBACA,qBACA,iBACA,iBACA,6BALF,CAAYA,KAAAA,GAAS,KAQd,MAAMuS,WAActH,GAczBjqE,YAAY+F,EAAcykD,EAAgBn/C,EAAW6D,GACnDc,QACApQ,KAAKiH,aAAa,OAAQ,SAC1BjH,KAAK4xE,MAAQzrE,EACbnG,KAAKyL,EAAIA,EACTzL,KAAKsP,QAAUA,EACftP,KAAK4qD,OAASA,EACd5qD,KAAKwP,KAAO,CACVk3C,OAAQ,aACRC,KAAM,EACNC,OAAQ,QAlBZ,sBACE,MAAO,SAGT,kBACE,OAAOwY,GAiBT/7D,cACE,OAAOsuE,GAAMruE,SAGfsrE,UAAUljE,GAER,OADA1L,KAAKsP,QAAU5D,EACR1L,KAGTkK,KAAKmI,EAAc5G,GACjB,MAAM0C,EAAMkE,EAAMpI,eAClBjK,KAAKuK,cAEL,IAAIe,EAAQ+G,EAAM4W,WAAaxd,EAC/B,MAAMg0B,EAAQptB,EAAMq1B,eAAer1B,EAAMomC,aAAamC,WAAa56C,KAAKsP,QAClEuiE,EAAc,IAAMx/D,EAAMomC,aAAaC,yBAC7C,OAAQ14C,KAAK4xE,OACX,KAAKD,GAAMxrE,KAAK2kE,MACd38D,EAAIkyB,SAASrgC,KAAKyL,EAAIA,EAAGg0B,EAAO,EAAGoyC,GACnC,MACF,KAAKF,GAAMxrE,KAAK0mE,IACdvhE,GAAS,EACT6C,EAAIkyB,SAASrgC,KAAKyL,EAAIA,EAAIH,EAAOm0B,EAAO,EAAGoyC,GAC3C,MACF,KAAKF,GAAMxrE,KAAK2rE,UACdxmE,GAAS,EACT6C,EAAIkyB,SAASrgC,KAAKyL,EAAIA,EAAGg0B,EAAO,EAAGoyC,GACnC1jE,EAAIkyB,SAASrgC,KAAKyL,EAAIA,EAAIH,EAAOm0B,EAAO,EAAGoyC,GAc/C,OARI7xE,KAAK4xE,QAAUD,GAAMxrE,KAAK2kE,OAAS9qE,KAAK4xE,QAAUD,GAAMxrE,KAAK2rE,YAC/D3jE,EAAIhF,OACJgF,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QACxDz4C,EAAI83B,SAASjmC,KAAK4qD,OAAQ5qD,KAAKyL,EAAIA,EAAI,EAAGg0B,EAAQ,IAClDtxB,EAAIpE,WAGNoE,EAAIkyB,SAASrgC,KAAKyL,EAAIA,EAAGg0B,EAAOn0B,EAAO,GAChCtL,MWhFJ,MAAM+xE,WAA2BhjE,EAOtC3O,YACE4xE,EACAC,EACAC,EACAtjE,EACAE,EACAqB,G,MAEAC,MAAMxB,EAAME,EAAOqB,GACnBnQ,KAAKgyE,cAAgBA,EACrBhyE,KAAKqQ,UAAY,GACjBrQ,KAAKsQ,UAAY,GAEjB,IAAI6hE,EAAW,EACf,IAAK,IAAIvwE,EAAI,EAAGA,EAAIqwE,EAAUpwE,SAAUD,EAAG,CACzC,MAAMqqB,EAAMgmD,EAAUrwE,GAChBwwE,EAAW,IAAIrjE,EAAM,UAAYkd,EAAKjsB,KAAKgyE,cAAcljE,OAE/D9O,KAAKqQ,UAAUH,KAAKkiE,GACpBD,GAAuC,QAA3B,EAAAC,EAAS/wE,aAAaiK,aAAK,QAAI,EAG7C,IAAI+mE,EAAW,EACf,IAAK,IAAIzwE,EAAI,EAAGA,EAAIswE,EAAUrwE,SAAUD,EAAG,CACzC,MAAMqqB,EAAMimD,EAAUtwE,GAChB0wE,EAAW,IAAIvjE,EAAM,UAAYkd,EAAKjsB,KAAKgyE,cAAcljE,OAE/D9O,KAAKsQ,UAAUJ,KAAKoiE,GACpBD,IAAY,QAAQC,EAASjxE,aAAaiK,OAG5CtL,KAAKsL,MAAQrG,KAAKsJ,IAAI4jE,EAAUE,GAChCryE,KAAKwtE,KAAOxtE,KAAKqB,aAAawP,MAC9B7Q,KAAKuyE,WAAavyE,KAAKsL,MAAQ6mE,GAAY,EAC3CnyE,KAAKwyE,WAAaxyE,KAAKsL,MAAQ+mE,GAAY,EAC3CryE,KAAKyQ,QAGPpP,aACE,MAAO,CACLwP,MAAO7Q,KAAKwtE,KACZ18D,MAAO9Q,KAAKwtE,KAAOxtE,KAAKsL,MACxBA,MAAOtL,KAAKsL,OAIhB6H,cAAc1H,GACZ,MAAM4G,EAAQrS,KAAKkT,aAEnB,IAAIu/D,EAAUhnE,EAAIzL,KAAKuyE,UACvB,IAAK,IAAI3wE,EAAI,EAAGA,EAAI5B,KAAKqQ,UAAUxO,SAAUD,EAAG,CAC9C,MAAM8O,EAAQ1Q,KAAKqQ,UAAUzO,GAC7BmN,EAAMwC,cACJvR,KAAKiK,eACLyG,EAAMrP,aAAa8N,QACnBnP,KAAKoP,MACLqjE,EAAUzyE,KAAKqP,QACfgD,EAAMmtB,YAAYx/B,KAAKgyE,cAAcU,UAEvCD,IAAW,QAAQ/hE,EAAMrP,aAAaiK,OAGxCmnE,EAAUhnE,EAAIzL,KAAKwyE,UACnB,IAAK,IAAI5wE,EAAI,EAAGA,EAAI5B,KAAKsQ,UAAUzO,SAAUD,EAAG,CAC9C,MAAM8O,EAAQ1Q,KAAKsQ,UAAU1O,GAC7B5B,KAAKgyE,cAAc1H,iBAAiB55D,EAAO2B,EAAO,GAClDtD,EAAMwC,cACJvR,KAAKiK,eACLyG,EAAMrP,aAAa8N,QACnBnP,KAAKoP,MACLqjE,EAAU/hE,EAAMrP,aAAagO,QAC7BgD,EAAMmtB,YAAYx/B,KAAKgyE,cAAcW,aAEvCF,IAAW,QAAQ/hE,EAAMrP,aAAaiK,SCjDrC,MAAMsnE,WAAsBvI,GA2BjCjqE,YAAYyyE,EAAmB,MAAOC,EAAgB,GAAIC,GAAgB,GACxE3iE,QACApQ,KAAKiH,aAAa,OAAQ,iBAC1BjH,KAAK+yE,cAAgBA,EAErB,MAAM5b,EAAU2b,EAEhB9yE,KAAK8O,MAAQ9O,KAAK4I,UAAUtH,aAAa,gBACzC,MAAM0xE,EAAgBhzE,KAAK4I,UAAUtH,aAAa,mBAAoB,GACtEtB,KAAK0yE,QAAU,EAAIM,EACnBhzE,KAAK2yE,WAAa,EAAIK,EACtBhzE,KAAKy4B,YAAY4xC,GAAcpzC,SAAS6zC,OACxC9qE,KAAK+H,KAAO/H,KAAKizE,cAAcJ,GAC/B7yE,KAAK63B,UAAS,QAAQ73B,KAAK+H,KAAK2I,MAAMrP,aAAaiK,QACnDtL,KAAKg5D,WAAW7B,GAjClB,sBACE,MAAO,iBAGT,oBACE,MAAO,CACLnxC,EAAG,CACDpX,KAAM,gBACNE,MAAO,GACPqZ,KAAM,GAER,KAAM,CACJvZ,KAAM,mBACNE,MAAO,GACPqZ,KAAM,IAsBZ9kB,cACE,OAAOuvE,GAActvE,SAGvB2vE,cAAcJ,GACZ,GAAiB,MAAbA,GAAiC,OAAbA,EAAmB,CACzC,MAAM,KAAE1qD,EAAI,KAAEvZ,EAAI,MAAEE,GAAU8jE,GAAc5wE,OAAO6wE,GACnD,MAAO,CACL1qD,KAAAA,EACA8D,KAAK,EACLvb,MAAO,IAAI3B,EAAMH,EAAME,IAIvB9O,KAAK+yE,eA3EiB,CAACF,IAC7B,MAAMK,EAAUL,EAASnxE,MAAM,KAAKw9B,QAAQ0rB,GAAsB,KAAXA,IAEvD,GAAuB,IAAnBsoB,EAAQrxE,OACV,MAAM,IAAI,KACR,mBACA,sBAAsBgxE,sDAI1BK,EAAQ35C,SAASqxB,IACf,GAAI9nD,MAAMD,OAAO+nD,IACf,MAAM,IAAI,KAAa,mBAAoB,sBAAsBioB,0CAgEjEM,CAAsBN,GAGxB,MAAOZ,EAAWC,GAAaW,EAASnxE,MAAM,KAAK+F,KAAKmjD,GAAWA,EAAOlpD,MAAM,MAEhF,MAAO,CACLuqB,KAAK,EACLvb,MAAO1Q,KAAKozE,uBAAuBnB,EAAWC,IAIlDkB,uBAAuBnB,EAAqBC,GAC1C,OAAO,IAAIH,GAAmB/xE,KAAMiyE,EAAWC,EAAW,WAAYlyE,KAAK8O,OAG7EukE,UACE,OAAOrzE,KAAK+H,KAGdurE,WAAWT,GAET,OADA7yE,KAAK+H,KAAO/H,KAAKizE,cAAcJ,GACxB7yE,KAGTkK,OACE,IAAKlK,KAAKyL,EACR,MAAM,IAAI,KAAa,qBAAsB,wCAG/C,MAAM4G,EAAQrS,KAAKkT,aAEnBlT,KAAKuK,cACLvK,KAAK+H,KAAK2I,MAAM0B,SAASC,GACzBrS,KAAK+H,KAAK2I,MAAM7F,WAAWwH,EAAMzH,cACjC5K,KAAKsqE,iBAAiBtqE,KAAK+H,KAAK2I,MAAO2B,EAAOrS,KAAK+H,KAAKogB,MACxDnoB,KAAK+H,KAAK2I,MAAMyC,cAAcnT,KAAKyL,ICnFhC,MAAM8nE,WAActrE,EAiCzB7H,YAAYqL,EAAWC,EAAWJ,EAAe6E,GAC/CC,QAxBQ,KAAA7E,OAAiB,EAyBzBvL,KAAKiH,aAAa,OAAQ,SAE1BjH,KAAKyL,EAAIA,EACTzL,KAAK0L,EAAIA,EACT1L,KAAKsL,MAAQA,EACbtL,KAAKoqE,WAAY,EACjBpqE,KAAKyyE,QAAUhnE,EAAI,EACnBzL,KAAKwzE,MAAQ/nE,EAAIH,EACjBtL,KAAKkhC,UAAY,GACjBlhC,KAAKyzE,QAAU,EACfzzE,KAAKilB,KAAO,SACZjlB,KAAK0zE,aAAUjzE,EACfT,KAAKwP,KAAO,CACVk3C,OAAQ,aACRC,KAAM,EACNC,OAAQ,IAEV5mD,KAAKmQ,QAAU,CACb65B,QAAS,EACTwc,UAAW,EACXn3C,QAAS,EACTC,QAAS,GACTwgE,mBAAoB,GACpB6D,iBAAkB,GAClB/4B,UAAW,EACXg5B,WAAY,UACZC,UAAU,EACVC,WAAW,EACXp7B,yBAA0BlwC,GAAKqc,oBAC/BkvD,qBAAsB,EACtBC,qBAAsB,EACtBC,kBAAmB,EACnBC,qBAAsB,EACtBC,YAAa,IAEfn0E,KAAKg7C,OAAS,CAAEvvC,EAAGzL,KAAKyL,EAAGC,EAAG1L,KAAK0L,EAAG4B,EAAGtN,KAAKsL,MAAOiC,EAAG,GACxDvN,KAAKmQ,QAAU,OAAH,wBAAQnQ,KAAKmQ,SAAYA,GACrCnQ,KAAKo0E,uBAAyB,GAE9Bp0E,KAAKq0E,aAGLr0E,KAAKsjC,YAAY,IAAI0pC,GAAQhtE,KAAKmQ,QAAQ0jE,SAAW3U,GAAY3X,OAAS2X,GAAYjY,OAEtFjnD,KAAKs0E,eAAe,IAAItH,GAAQhtE,KAAKmQ,QAAQ2jE,UAAY5U,GAAY3X,OAAS2X,GAAYjY,OAxD5F,4BACE,MAAMr+C,EAAYJ,GAAKC,mBAAmB,GAC1C,OAAOG,EAAUtH,aAAa,iBAAmBsH,EAAUtH,aAAa,uBAG1E,0BAEE,OADkBkH,GAAKC,mBAAmB,GACzBnH,aAAa,uBAqDhCizE,0BAA0BxrE,GACxB/I,KAAKo0E,uBAAyBrrE,EAIhCyrE,4BACE,OAAO,OAAP,wBAAYx0E,KAAKgJ,YAAehJ,KAAKo0E,wBAEvC1yC,MAAMsI,GACJ,OAAOhqC,KAAKmQ,QAAQuoC,yBAA2B1O,EAGjDqqC,aACEr0E,KAAKmQ,QAAQgkE,YAAc,GAC3B,IAAK,IAAIvyE,EAAI,EAAGA,EAAI5B,KAAKmQ,QAAQyqC,UAAWh5C,IAC1C5B,KAAKmQ,QAAQgkE,YAAYjkE,KAAK,CAAEukE,SAAS,IAE3Cz0E,KAAKuL,QAAUvL,KAAKmQ,QAAQyqC,UAAY56C,KAAKmQ,QAAQ4jE,sBAAwB/zE,KAAKmQ,QAAQuoC,yBAC1F14C,KAAKmQ,QAAQ+jE,qBAAuBl0E,KAAKmQ,QAAQyqC,UAGnDnC,aACE,OAAOz4C,KAAKmQ,QAGdukE,cAAcjpE,GACPzL,KAAKoqE,WAAWpqE,KAAKyrD,SAE1BzrD,KAAKyyE,QAAUhnE,EACf,MAAMkpE,EAAa30E,KAAKkhC,UAAU,GAElC,OADAyzC,EAAW9mE,KAAK7N,KAAKyyE,QAAUkC,EAAW1rD,YACnCjpB,KAGT0oC,gBAGE,OAFK1oC,KAAKoqE,WAAWpqE,KAAKyrD,SAEnBzrD,KAAKyyE,QAGdmC,cAGE,OAFK50E,KAAKoqE,WAAWpqE,KAAKyrD,SAEnBzrD,KAAKwzE,MAGdqB,eACE,OAAO70E,KAAKyyE,QAGdqC,aACE,OAAO90E,KAAKyL,EAAIzL,KAAKsL,MAGvBmC,OACE,OAAOzN,KAAKyL,EAGdqnC,cACE,OAAO9yC,KAAKmQ,QAAQyqC,UAGtBm6B,YAAYhvE,GAGV,OAFA/F,KAAKmQ,QAAQyqC,UAAY70C,EACzB/F,KAAKq0E,aACEr0E,KAGT8N,KAAKpC,GAEH,OADA1L,KAAK0L,EAAIA,EACF1L,KAGT0N,OACE,OAAO1N,KAAK0L,EAGd2iE,iBACE,OAAOruE,KAAKw/B,YAAY,GAAKh3B,GAAKic,qBAAuB,EAG3D6pD,uBACE,OAAOtuE,KAAKw/B,YAAYx/B,KAAK8yC,cAAgB,GAAKtqC,GAAKic,qBAAuB,EAGhF5W,KAAKpC,GACH,MAAMtI,EAAQsI,EAAIzL,KAAKyL,EACvBzL,KAAKoqE,WAAY,EACjBpqE,KAAKyL,EAAIA,EACTzL,KAAKyyE,SAAWtvE,EAChBnD,KAAKwzE,OAASrwE,EACd,IAAK,IAAIvB,EAAI,EAAGA,EAAI5B,KAAKkhC,UAAUr/B,OAAQD,IAAK,CAC9C,MAAM2hC,EAAMvjC,KAAKkhC,UAAUt/B,GAC3B2hC,EAAI11B,KAAK01B,EAAI91B,OAAStK,GAExB,OAAOnD,KAGT63B,SAASvsB,GAOP,OANAtL,KAAKoqE,WAAY,EACjBpqE,KAAKsL,MAAQA,EACbtL,KAAKwzE,MAAQxzE,KAAKyL,EAAIH,EAIftL,KAGTipB,WACE,OAAOjpB,KAAKsL,MAGdtC,WACE,OAAO,OAAP,QACEQ,UAAWxJ,KAAKmQ,QAAQyjE,WACxBlqE,YAAa1J,KAAKmQ,QAAQyjE,WAC1BhqE,UAAWpB,GAAKic,sBACZzkB,KAAK+I,OAAS,IAItBisE,WAAWvB,GAET,OADAzzE,KAAKyzE,QAAUA,EACRzzE,KASTi1E,kBAAkB3uE,EAAQ,GACxB,GAAqB,iBAAVA,EACT,MAAM,IAAI,KAAa,eAAgB,0BAKzC,GAFKtG,KAAKoqE,WAAWpqE,KAAKyrD,SAEqC,IAA3DzrD,KAAKyjC,aAAa4mC,GAAcpzC,SAAS6zC,OAAOjpE,OAClD,OAAO,EAIT,GAAI7B,KAAKkhC,UAAU56B,GAAOkyB,gBAAkB6xC,GAAcpzC,SAASW,MACjE,OAAO,EAGT,IAAI66C,EAAUzyE,KAAKyyE,QAAUzyE,KAAKyL,EAClC,MAAMkpE,EAAa30E,KAAKkhC,UAAU,GAKlC,OAJIyzC,EAAW5G,YAAc7O,GAAYiO,cAAgBsF,EAAUkC,EAAW1rD,aAC5EwpD,GAAWkC,EAAW1rD,YAGjBwpD,EAITyC,sBAAsB/uE,EAAcuF,GAElC,OADA1L,KAAKkhC,UAAUhxB,KAAK,IAAIu+D,GAAWtoE,EAAMnG,KAAKyL,EAAGC,IAC1C1L,KAGTm1E,uBAAuBhvE,EAAcuF,GAEnC,OADA1L,KAAKkhC,UAAUhxB,KAAK,IAAIu+D,GAAWtoE,EAAMnG,KAAKyL,EAAGC,IAC1C1L,KAITo1E,aAAajvE,EAAckvE,EAAkB3pE,GAE3C,OADA1L,KAAKkhC,UAAUhxB,KAAK,IAAIyhE,GAAMxrE,EAAMkvE,EAAUr1E,KAAKyL,EAAGC,IAC/C1L,KAITs1E,WAAWrF,EAAiBvkE,GAE1B,OADA1L,KAAKkhC,UAAUhxB,KAAK,IAAI8/D,GAAaC,EAASjwE,KAAKyL,EAAGC,IAC/C1L,KAITqwE,SAASD,EAA0B1kE,GAEjC,OADA1L,KAAKkhC,UAAUhxB,KAAK,IAAIigE,GAAWC,EAAOpwE,KAAKyL,EAAGC,IAC3C1L,KAITknD,QACEl+B,EACAmG,EACAhf,GAOA,OADAnQ,KAAKkhC,UAAUhxB,KAAK,IAAIuhE,GAAUzoD,EAAMmG,EAAUhf,IAC3CnQ,KAGTg7B,YACE,OAAOh7B,KAAKuL,OAGd0+B,yBACE,OAAOjqC,KAAKmQ,QAAQuoC,yBAGtBhuC,iBACE,OAAO,IAAI2C,EAAYrN,KAAKyL,EAAGzL,KAAK0L,EAAG1L,KAAKsL,MAAOtL,KAAKu3D,aAAev3D,KAAK0L,GAG9E6rD,aACE,MAAMpnD,EAAUnQ,KAAKmQ,QACf65B,EAAU75B,EAAQuoC,yBAGxB,OAFqB14C,KAAKw/B,YAAYrvB,EAAQyqC,WAAazqC,EAAQ6jE,qBAAuBhqC,EAK5F8e,iBACE,OAAO9oD,KAAKw/B,YAAYx/B,KAAKmQ,QAAQyqC,WAIvCpb,YAAYrX,GACV,MAAMhY,EAAUnQ,KAAKmQ,QACf65B,EAAU75B,EAAQuoC,yBAClB68B,EAAWplE,EAAQ4jE,qBAIzB,OAFU/zE,KAAK0L,EAAIyc,EAAO6hB,EAAUurC,EAAWvrC,EAKjDwrC,YAAY9pE,GAIV,MAAMyE,EAAUnQ,KAAKmQ,QACf65B,EAAU75B,EAAQuoC,yBAClB68B,EAAWplE,EAAQ4jE,qBACzB,OAAQroE,EAAI1L,KAAK0L,GAAKs+B,EAAUurC,EAGlC7tC,eAAevf,EAAe,GAC5B,OAAOnoB,KAAKw/B,aAAarX,EAAOnoB,KAAKmQ,QAAQ8jE,mBAG/C7nC,kBAAkBjkB,EAAe,GAC/B,OAAOnoB,KAAKw/B,YAAYx/B,KAAKmQ,QAAQ+jE,qBAAuB/rD,GAG9DiiB,YAAYjiB,GACV,MAAMhY,EAAUnQ,KAAKmQ,QACf65B,EAAU75B,EAAQuoC,yBAClB68B,EAAWplE,EAAQ4jE,qBAGzB,OAFU/zE,KAAK0L,EAAI6pE,EAAWvrC,EAAU,EAAIA,EAAU7hB,EAAO6hB,EAK/D52B,gBACE,OAAOpT,KAAKw/B,YAAY,GAK1B8D,YAAY6E,EAAyBhZ,GAQnC,YAPiB1uB,IAAb0uB,GACFgZ,EAAS1P,YAAYtJ,GAGvBgZ,EAAS/1B,SAASpS,MAClBA,KAAKoqE,WAAY,EACjBpqE,KAAKkhC,UAAUhxB,KAAKi4B,GACbnoC,KAGTs0E,eAAensC,GAEb,OADAnoC,KAAKsjC,YAAY6E,EAAUkiC,GAAcpzC,SAAS41C,KAC3C7sE,KAITy1E,cAActvE,GAEZ,MAAM,OAAEohD,EAAM,aAAE4lB,EAAY,KAAElmB,GAASiY,GAKvC,OAJI/4D,IAASohD,GAAUphD,IAASgnE,GAAgBhnE,IAAS8gD,IACtDjnD,KAAKkhC,UAAU,GAAe4lB,QAAQ3gD,GACvCnG,KAAKoqE,WAAY,GAEZpqE,KAGT01E,cAAcvvE,GAMZ,OAJIA,IAAS+4D,GAAYiO,eACtBntE,KAAKkhC,UAAU,GAAe4lB,QAAQ3gD,GACvCnG,KAAKoqE,WAAY,GAEZpqE,KAGT21E,QAAQC,EAAkBjvB,EAAejV,EAAqBviB,QAC3C1uB,IAAb0uB,IACFA,EAAWk7C,GAAcpzC,SAAS6zC,OAGhC37C,IAAak7C,GAAcpzC,SAAS41C,IACtC7sE,KAAK0zE,QAAUkC,EAEf51E,KAAKilB,KAAO2wD,EAGd,MAAMC,EAAQ71E,KAAKyjC,aAAatU,EAAUy7C,GAAKtnE,UAO/C,OANqB,IAAjBuyE,EAAMh0E,OACR7B,KAAK81E,QAAQF,EAAUjvB,EAAMjV,EAAYviB,GAEzC0mD,EAAM,GAAG/uB,QAAQ8uB,EAAUjvB,EAAMjV,GAG5B1xC,KAGT+sE,UACE,OAAO/sE,KAAKilB,KAGd8wD,WAAWH,EAAkBjvB,EAAejV,GAE1C,OADA1xC,KAAK21E,QAAQC,EAAUjvB,EAAMjV,EAAY24B,GAAcpzC,SAAS41C,KACzD7sE,KAGT8sE,aACE,OAAO9sE,KAAK0zE,QAGdsC,gBAAgBhqD,EAAiBk/C,EAAwB/7C,QACtC1uB,IAAb0uB,IACFA,EAAWk7C,GAAcpzC,SAAS6zC,OAGpC,MAAMmL,EAAgBj2E,KAAKyjC,aAAatU,EAAU87C,GAAa3nE,UAO/D,OAN6B,IAAzB2yE,EAAcp0E,OAChB7B,KAAKk2E,gBAAgBlqD,EAASk/C,EAAe/7C,GAE7C8mD,EAAc,GAAG5K,UAAUr/C,EAASk/C,GAG/BlrE,KAGTm2E,mBAAmBnqD,EAAiBk/C,GAElC,OADAlrE,KAAKg2E,gBAAgBhqD,EAASk/C,EAAeb,GAAcpzC,SAAS41C,KAC7D7sE,KAGTo2E,iBAAiBvD,EAAkBC,EAAwB3jD,QACxC1uB,IAAb0uB,IACFA,EAAWk7C,GAAcpzC,SAAS6zC,OAGpC,MAAMuL,EAAiBr2E,KAAKyjC,aAAatU,EAAUyjD,GAActvE,UAOjE,OAN8B,IAA1B+yE,EAAex0E,OACjB7B,KAAKs2E,iBAAiBzD,EAAUC,EAAe3jD,GAE/CknD,EAAe,GAAG/C,WAAWT,GAGxB7yE,KAGTu2E,oBAAoB1D,EAAkBC,GAEpC,OADA9yE,KAAKo2E,iBAAiBvD,EAAUC,EAAezI,GAAcpzC,SAAS41C,KAC/D7sE,KAaTk2E,gBAAgBlqD,EAAiBk/C,EAAwB/7C,GAKvD,YAJiB1uB,IAAb0uB,IACFA,EAAWk7C,GAAcpzC,SAAS6zC,OAEpC9qE,KAAKsjC,YAAY,IAAI2nC,GAAaj/C,EAASk/C,GAAezyC,YAAYtJ,GAAWA,GAC1EnvB,KAeT81E,QAAQ7wD,EAAc0hC,EAAejV,EAAqBviB,GAQxD,YAPiB1uB,IAAb0uB,GAA0BA,IAAak7C,GAAcpzC,SAAS6zC,MAChE9qE,KAAKilB,KAAOA,EACHkK,IAAak7C,GAAcpzC,SAAS41C,MAC7C7sE,KAAK0zE,QAAUzuD,GAGjBjlB,KAAKsjC,YAAY,IAAIsnC,GAAK3lD,EAAM0hC,EAAMjV,GAAaviB,GAC5CnvB,KAGTw2E,WAAWvxD,EAAc0hC,EAAejV,GAEtC,OADA1xC,KAAK81E,QAAQ7wD,EAAM0hC,EAAMjV,EAAY24B,GAAcpzC,SAAS41C,KACrD7sE,KAcTs2E,iBAAiBzD,EAAkBC,EAAwB3jD,GAEzD,OADAnvB,KAAKsjC,YAAY,IAAIsvC,GAAcC,EAAUC,GAAgB3jD,GACtDnvB,KAGTy2E,oBAAoB5D,EAAkBC,GAEpC,OADA9yE,KAAKs2E,iBAAiBzD,EAAUC,EAAezI,GAAcpzC,SAAS41C,KAC/D7sE,KAIT02E,iBAEE,OADA12E,KAAK81E,QAAQ,UACN91E,KAGTyjC,aAAatU,EAAmBtgB,GAC9B,YAAiBpO,IAAb0uB,QAAuC1uB,IAAboO,EAA+B7O,KAAKkhC,UAE3DlhC,KAAKkhC,UAAUhC,QACnBiJ,UACe1nC,IAAb0uB,GAA0BA,IAAagZ,EAAS3P,oBACnC/3B,IAAboO,GAA0BA,IAAas5B,EAAS9kC,iBAIvDszE,eAAeC,EAAwBC,GACrC,IAAK,IAAIj1E,EAAIg1E,EAAM/0E,OAAS,EAAGD,GAAK,EAAGA,IACrC,IAAK,IAAIyhD,EAAI,EAAGA,EAAIzhD,EAAGyhD,IACrB,GAAIwzB,EAAMD,EAAMvzB,GAAGhgD,eAAiBwzE,EAAMD,EAAMvzB,EAAI,GAAGhgD,eAAgB,CACrE,MAAMyzE,EAAOF,EAAMvzB,GACnBuzB,EAAMvzB,GAAKuzB,EAAMvzB,EAAI,GACrBuzB,EAAMvzB,EAAI,GAAKyzB,GAMvBrrB,SACE,MAAMkpB,EAAa30E,KAAKkhC,UAAU,GAC5B61C,EAAa/2E,KAAKkhC,UAAU,GAE5B81C,EAAeh3E,KAAKyjC,aAAa4mC,GAAcpzC,SAAS6zC,OACxDmM,EAAej3E,KAAKyjC,aAAa4mC,GAAcpzC,SAAS41C,KAyB9D,IAAIvhE,EACA6rD,EACAhvB,EAzBJnoC,KAAK22E,eAAeK,EAAc,CAChCE,SAAU,EACVrB,MAAO,EACPsB,cAAe,EACfC,eAAgB,IAGlBp3E,KAAK22E,eAAeM,EAAc,CAChCG,eAAgB,EAChBD,cAAe,EACfD,SAAU,EACVrB,MAAO,IAGLmB,EAAan1E,OAAS,GAAK8yE,EAAW5G,YAAc7O,GAAYiO,eAClE6J,EAAa9mE,KAAK8mE,EAAaj0C,OAAO,EAAG,GAAG,IAC5Ci0C,EAAaj0C,OAAO,EAAG,EAAG,IAAIiqC,GAAQ9N,GAAY3X,UAGhD0vB,EAAan0C,QAAQi0C,GAAc,GACrCE,EAAal0C,OAAO,EAAG,EAAG,IAAIiqC,GAAQ9N,GAAYjY,OAMpD,IAAI/F,EAAS,EACTz1C,EAAIzL,KAAKyL,EACb,IAAK,IAAI7J,EAAI,EAAGA,EAAIo1E,EAAan1E,OAAQD,IACvCumC,EAAW6uC,EAAap1E,GACxBu1D,EAAUhvB,EAASqiC,WAAW5oE,EAAIs/C,GAClC51C,EAAQ68B,EAASlf,WAEjBxd,GAAK0rD,EACLhvB,EAASt6B,KAAKpC,GACdA,GAAKH,EAED6rD,EAAU7rD,IAAU,GAAG41C,IAG7BlhD,KAAKyyE,QAAUhnE,EACfA,EAAIzL,KAAKyL,EAAIzL,KAAKsL,MAElB,MAAM4hE,EAAS,CACbx1C,KAAM,EACNC,MAAO,EACPg2C,aAAc,EACdD,YAAa,GAGf,IAAI2J,EAAiB,EAErB,IAAK,IAAIz1E,EAAI,EAAGA,EAAIq1E,EAAap1E,OAAQD,IAAK,CAC5CumC,EAAW8uC,EAAar1E,GACxBy1E,EAAiBlvC,EAAS9kC,gBAAkB2pE,GAAQ1pE,SAAW1B,EAAIy1E,EAEnEnK,EAAOv1C,MAAQ,EACfu1C,EAAOx1C,KAAO,EACdw1C,EAAOS,aAAe,EACtBT,EAAOQ,YAAc,EACrB,MAAMhD,EAAgBviC,EAASwiC,mBAE3BD,GACQ,IAAN9oE,IACFsrE,EAAOv1C,MAAQ+yC,EAAc+C,MAAQ,EACrCP,EAAOS,aAAejD,EAAciD,cAAgB,GAEtDT,EAAOx1C,MAAQgzC,EAAc8C,MAAQ,EACrCN,EAAOQ,YAAchD,EAAcgD,aAAe,EAE9C9rE,IAAMq1E,EAAap1E,OAAS,IAC9BqrE,EAAOQ,YAAc,KAGvBR,EAAOS,aAAexlC,EAASqiC,WAAW5oE,EAAIy1E,GACpC,IAANz1E,IACFsrE,EAAOv1C,MAAQwQ,EAASlf,YAEhB,IAANrnB,IACFsrE,EAAOx1C,KAAOyQ,EAASlf,aAG3Bxd,GAAKyhE,EAAOS,aACZliE,GAAKyhE,EAAOv1C,MAEZwQ,EAASt6B,KAAKpC,GAEdA,GAAKyhE,EAAOx1C,KACZjsB,GAAKyhE,EAAOQ,YAGd1tE,KAAKwzE,MAAgC,IAAxByD,EAAap1E,OAAe7B,KAAKyL,EAAIzL,KAAKsL,MAAQG,EAC/DzL,KAAKoqE,WAAY,EAMnBlgE,OACE,MAAMiE,EAAMnO,KAAKiK,eACjBjK,KAAKuK,cAEAvK,KAAKoqE,WAAWpqE,KAAKyrD,SAE1B,MAAM7Q,EAAY56C,KAAKmQ,QAAQyqC,UACzBtvC,EAAQtL,KAAKsL,MACbG,EAAIzL,KAAKyL,EACf,IAAIC,EAGJ,IAAK,IAAIyc,EAAO,EAAGA,EAAOyyB,EAAWzyB,IACnCzc,EAAI1L,KAAKw/B,YAAYrX,GAErBnoB,KAAKiJ,aACDjJ,KAAKmQ,QAAQgkE,YAAYhsD,GAAMssD,UACjCtmE,EAAIsD,YACJtD,EAAIuD,OAAOjG,EAAGC,GACdyC,EAAIwD,OAAOlG,EAAIH,EAAOI,GACtByC,EAAIO,UAEN1O,KAAK8J,eAIP,IAAK,IAAIlI,EAAI,EAAGA,EAAI5B,KAAKkhC,UAAUr/B,OAAQD,IAEH,mBAA3B5B,KAAKkhC,UAAUt/B,GAAGsI,OAC3BlK,KAAKkhC,UAAUt/B,GAAGqH,WAAWkF,GAC7BnO,KAAKkhC,UAAUt/B,GAAGsI,KAAKlK,KAAMA,KAAKi1E,kBAAkBrzE,IACpD5B,KAAKkhC,UAAUt/B,GAAGkI,aAAaqE,IAKnC,GAAInO,KAAKyzE,QAAU,EAAG,CACpBtlE,EAAIhF,OACJgF,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QACxD,MAAMiC,EAAa16C,EAAIirC,YAAY,GAAKp5C,KAAKyzE,SAASnoE,MACtDI,EAAI1L,KAAK0nC,eAAe,GAAK,EAC7Bv5B,EAAI83B,SAAS,GAAKjmC,KAAKyzE,QAASzzE,KAAKyL,EAAIo9C,EAAa,EAAGn9C,GACzDyC,EAAIpE,UAGN,OAAO/J,KAKTs3E,aAAa7rE,EAAW8rE,GACtBv3E,KAAKw3E,kBAAkBx3E,KAAKyL,EAAIA,EAAG8rE,GAGrCC,kBAAkB/rE,EAAW8rE,GAC3B,MAAMppE,EAAMnO,KAAKiK,eAEXwtE,EAAWz3E,KAAKw/B,YAAY,GAC5Bk4C,EAAc13E,KAAKw/B,YAAYx/B,KAAKmQ,QAAQyqC,UAAY,GAC1D28B,GACFppE,EAAIkyB,SAAS50B,EAAI,EAAGgsE,EAAU,EAAGC,EAAcD,EAAW,GAE5DtpE,EAAIkyB,SAAS50B,EAAGgsE,EAAU,EAAGC,EAAcD,EAAW,GAGxDzJ,gBAAgBviE,GACdzL,KAAK23E,qBAAqB33E,KAAKyL,EAAIA,GAGrCksE,qBAAqBlsE,GACnB,MAAM0C,EAAMnO,KAAKiK,eAEXwtE,EAAWz3E,KAAKw/B,YAAY,GAC5Bk4C,EAAc13E,KAAKw/B,YAAYx/B,KAAKmQ,QAAQyqC,UAAY,GAC9DzsC,EAAIkyB,SAAS50B,EAAGgsE,EAAU,EAAGC,EAAcD,EAAW,GAOxDG,oBACE,OAAO53E,KAAKmQ,QAAQgkE,YAUtB0D,iBAAiBC,EAAqB3D,GACpC,GAAI2D,GAAe93E,KAAKmQ,QAAQyqC,WAAak9B,EAAc,EACzD,MAAM,IAAI,KACR,mBACA,iFAIJ,QAA4Br3E,IAAxB0zE,EAAYM,QACd,MAAM,IAAI,KAAa,mBAAoB,oEAG7C,GAAmC,kBAAxBN,EAAYM,QACrB,MAAM,IAAI,KACR,mBACA,4EAMJ,OAFAz0E,KAAKmQ,QAAQgkE,YAAY2D,GAAe3D,EAEjCn0E,KAYT+3E,kBAAkBC,GAChB,GAAIA,EAAoBn2E,SAAW7B,KAAKmQ,QAAQyqC,UAC9C,MAAM,IAAI,KACR,mBACA,2FAOJ,IAAK,MAAMu5B,KAAe6D,EAEnBA,EAAoB7D,KACvB6D,EAAoB7D,GAAen0E,KAAKmQ,QAAQgkE,YAAYA,IAE9Dn0E,KAAKmQ,QAAQgkE,YAAYA,GAAe,OAAH,wBAChCn0E,KAAKmQ,QAAQgkE,YAAYA,IACzB6D,EAAoB7D,IAM3B,OAFAn0E,KAAKmQ,QAAQgkE,YAAc6D,EAEpBh4E,MChyBX,SAASi4E,GACPjqC,EACAkqC,EACAC,GAEA,MAAMp0B,EAAuBvmB,GAAUqnB,wBAAwB7W,GAGzDoqC,EAAsC,GACtCC,EAAqB,GACrB1f,EAAgB,GA2BtB,OAvBA3qB,EAAOzU,SAAQ,CAACkJ,EAAO62B,KAGrB,MAAMrV,EAAY,IAAI1hD,EAAS,EAAGwhD,GAElCthB,EAAMma,eAAerjB,SAASwrB,IAC5B,MAAMuzB,EAAer0B,EAAUzhD,UAG/B,IAAK41E,EAAiBE,GAAe,CACnC,MAAMC,EAAaL,EAAY,CAAEpgB,OAAQwgB,IACzC3f,EAASzoD,KAAKqoE,GACdH,EAAiBE,GAAgBC,EAEjCF,EAASnoE,KAAKooE,GAIhBH,EAAapzB,EAAUqzB,EAAiBE,GAAehf,GACvDrV,EAAUtgD,IAAIohD,EAASjjB,kBAIpB,CACLr6B,IAAK2wE,EACLI,MAAO7f,EACP8f,KAAMJ,EAASvoC,MAAK,CAACntC,EAAGC,IAAMD,EAAIC,IAClCmhD,qBAAAA,GAiBJ,SAAS20B,GACPxrD,EACAyrD,EACAC,EACAt0E,GAGA,IAAIu0E,EAAeF,EAGnB,IAAK,IAAIG,EAAYF,EAAgB,EAAGE,EAAY5rD,EAAMrrB,OAAQi3E,IAAa,CAC7E,MAAM5oD,EAAOhD,EAAM4rD,GACnB,GAAIzhC,EAAOnnB,KAAUA,EAAK2W,WAAa3W,EAAK6R,oBAAqB,CAC/D82C,EAAe3oD,EAAKoX,iBACpB,OAKJ,GAAIhjC,GAAWq0E,IAAiBE,EAAc,CAC5C,MAAMnoC,EAAMzrC,KAAKsJ,IAAIoqE,EAAcE,GAC7BloC,EAAM1rC,KAAKw2B,IAAIk9C,EAAcE,GACnCA,GAAe,QAAQnoC,EAAKC,GAE9B,OAAOkoC,EAmBF,MAAMr7C,GA8OXp9B,YAAY24E,EAA8C,IACxD/4E,KAAK+4E,iBAAmB,OAAH,QACnBC,eAAe,EACfC,cAAe,GACZF,GAEL/4E,KAAKk5E,aAAe,EACpBl5E,KAAKm5E,UAAY,EACjBn5E,KAAKo5E,WAAa,EAClBp5E,KAAKq5E,cAAgB,GAGrBr5E,KAAKs5E,cAAgB,EAGrBt5E,KAAKu5E,kBAAmB,EAGxBv5E,KAAKw5E,kBAAe/4E,EACpBT,KAAKy5E,sBAAmBh5E,EAIxBT,KAAK05E,YAAc,CACjB54B,MAAO,EACP64B,KAAM,IAGR35E,KAAKguC,OAAS,GACdhuC,KAAK45E,YAAc,GApPrB,oBAAoB1sD,EAAmBzhB,EAAI,GAAG,eAAEouE,EAAiB,IAAO,IACtE3sD,EAAMgT,QAAO,CAAC45C,EAAa5pD,KACzBA,EAAKgT,qBAAqB,IAAIymC,IAC9B,MAAM9nB,GAAO,IAAIgW,IAAchS,YAAY31B,GAAM2T,YAC3CvjC,EAAUuhD,EAAKxgD,aAGrB,OAFAwgD,EAAKh0C,KAAKisE,EAAcx5E,EAAQi4D,aAEzBuhB,EAAcj4B,EAAK54B,WAAa3oB,EAAQk4D,aAAeqhB,IAC7DpuE,GAIL,qBACE0C,EACAo9C,EACAv4C,EACA/H,EACAE,EACAgF,GAOA,MAAM1E,EAAIuH,GALV7C,EAAU,OAAH,QACL4pE,aAAcvxE,GAAKC,mBAAmB,GAAGnH,aAAa,kBACnD6O,IAGoB4pE,aACnBL,EAAcnuB,EAAUmuB,YAU9BvrE,EAAIhF,OACJgF,EAAI63B,QAAQ,QAAS,EAAG,IAExB0zC,EAAYC,KAAKpgD,SAASygD,IAX1B,IAAgBjvE,EAAYG,EAAYi7B,EAAxBp7B,EAYPU,EAAIuuE,EAAIjvE,GAZWG,EAYPO,EAAIuuE,EAAI9uE,GAZWi7B,EAYP,wBAX/Bh4B,EAAIsD,YACJtD,EAAIxE,eAAew8B,GACnBh4B,EAAI1E,aAAa08B,GACjBh4B,EAAItE,aAAa,GACjBsE,EAAIkyB,SAASt1B,EAAIE,EAAIhG,KAAKsJ,IAAIrD,EAAKH,EAAI,GAAII,EAAKF,GAQhDkD,EAAI1E,aAAa,SACjB0E,EAAI83B,SAAShhC,KAAKihC,MAAM8zC,EAAI9uE,GAAK8uE,EAAIjvE,IAAIzF,WAAYmG,EAAIuuE,EAAIjvE,GAAII,EAAK,OAGxEgD,EAAI1E,aAAa,OACjB0E,EAAI83B,SACF,UAAUslB,EAAU4tB,WAAa,GAAGjnB,QAAQ,cAAc3G,EAAU6tB,YAAc,GAAGlnB,QACnF,WACQwnB,EAAY54B,MAAMoR,QAAQ,KACpCzmD,EAAI,GACJN,EAAK,IAEPgD,EAAIpE,UAkBN,qBACEoE,EACAkE,EACA6a,EACA/b,GAEA,IAAIhB,EAAU,CACZ8pE,WAAW,EACXC,aAAa,GAGO,iBAAX/oE,EACThB,EAAU,OAAH,wBAAQA,GAAYgB,GACA,kBAAXA,IAChBhB,EAAQ8pE,UAAY9oE,GAItB,MAAMsxB,EAAQ,IAAImhB,EAAMp7C,GAAKknB,SAASk1B,QAAQhB,EAAMS,KAAKa,MAAMY,aAAa54B,GAGtE+xB,EAAQ9uC,EAAQ8pE,UAAYv+B,EAAKy+B,iBAAiB13C,GAAS,GAYjE,OATA,IAAIjF,IACDguB,WAAW,CAAC/oB,IACZ23C,cAAc,CAAC33C,GAAQpwB,EAAO,CAAE6nE,YAAa/pE,EAAQ+pE,YAAa7nE,MAAAA,IAGrEowB,EAAMrwB,SAASC,GAAOnI,KAAKiE,EAAKkE,GAChC4sC,EAAM1lB,SAASyO,GAASA,EAAKn9B,WAAWsD,GAAKjE,SAGtCu4B,EAAM/3B,iBAgBf,wBACEyD,EACAksE,EACAhoE,EACAioE,EACAptD,EACAqtD,EACAppE,GAEA,IAAIs4D,EAAO,CACTwQ,UAAWM,EACXL,aAAa,GAGO,iBAAX/oE,EACTs4D,EAAO,OAAH,wBAAQA,GAASt4D,GACM,kBAAXA,IAChBs4D,EAAKwQ,UAAY9oE,GAInB,MAAMqpE,EAAY,IAAI52B,EAAMp7C,GAAKknB,SAASk1B,QAAQhB,EAAMS,KAAKa,MAAMY,aAAa54B,GAG1EutD,EAAW,IAAI72B,EAAMp7C,GAAKknB,SAASk1B,QAAQhB,EAAMS,KAAKa,MAAMY,aAAaw0B,GAGzEr7B,EAAQwqB,EAAKwQ,UAAYv+B,EAAKy+B,iBAAiBK,GAAa,IAGlE,IAAIh9C,IACDguB,WAAW,CAACgvB,IACZhvB,WAAW,CAACivB,IACZL,cAAc,CAACI,EAAWC,GAAWpoE,EAAO,CAAE6nE,YAAazQ,EAAKyQ,cAGnEM,EAAUtwE,KAAKiE,EAAKkE,GACpBooE,EAASvwE,KAAKiE,EAAKksE,GACnBp7B,EAAM1lB,SAASyO,GAASA,EAAKn9B,WAAWsD,GAAKjE,SAG7C,IAAIg8C,EAAe7zC,EAAOgoE,GAAUxvE,WAAWsD,GAAKjE,OAStD,yBAAyB85C,EAAuB02B,EAAwBC,GACtE32B,EAAUzqB,SAAQ,CAACqhD,EAAwBt0E,KACzC,GAAIkxC,EAAYojC,IAAiBA,EAAa/zC,SAAU,CACtD,GAAI+zC,EAAaj4C,cAAgBg4C,EAC/B,OAIF,MAAMxrD,EAAWyrD,EAAarzC,WAAWpY,SAASpJ,cAClD,GAAiB,QAAboJ,GAAmC,QAAbA,EACxB,OAGF,GAAIurD,GAAiBE,EAAa7yC,UAAW,CAE3C,MAAM7iB,EAAQ01D,EAAa9xC,cAAc,GACzC,GAAc,IAAVxiC,EACF4e,EAAMiD,KAAOuwD,GAA4B10B,EAAW9+B,EAAMiD,KAAM7hB,GAAO,QAClE,GAAIA,EAAQ,GAAKA,EAAQ09C,EAAUniD,OAAQ,CAEhD,MAAMg5E,EAAe72B,EAAU19C,EAAQ,GACvC,GAAIkxC,EAAYqjC,GACd,GAAIA,EAAah0C,SACf3hB,EAAMiD,KAAO0yD,EAAa/xC,cAAc,GAAG3gB,SACtC,CACL,MAAMsoB,EAAWoqC,EAAavzC,iBAE9BpiB,EAAMiD,KAAOuwD,GAA4B10B,EAAWvT,EAAUnqC,GAAO,IAI3Es0E,EAAa/tC,WAAW,EAAG3nB,EAAMiD,WAMzC,iCAAiC6lB,EAAiB+qC,GAChD,MAAMxtB,EAAY,IAAI/tB,GAAUu7C,GAIhC,OAHA/qC,EAAOzU,SAASkJ,IACd8oB,EAAUC,WAAW,CAAC/oB,OAEjB8oB,EAAUuvB,0BAA0B9sC,GAyC7C+sC,WAAW/sC,EAAiB0sC,GAC1B,IAAK1sC,IAAWA,EAAOnsC,OACrB,MAAM,IAAI,KAAa,cAAe,6BAGxCmsC,EAAOzU,SAASkJ,GAAUjF,GAAUC,kBAAkBgF,EAAMma,eAAgB89B,KAqB9EI,0BAA0B9sC,GACxB,MAAMgtC,EAAmBxyE,GAAKC,mBAAmB,GAAGnH,aAAa,8BAGjE,IAAI25E,EAAoB,EACpBC,EAAO,EACPC,EAAO,EACX,MAAMjO,EAAmB,GACnBv4D,EAAsB,GAG5B,GAAI3U,KAAKu5E,iBAAkB,OAAOv5E,KAAKs5E,cAGvC,IAAKt5E,KAAKw5E,aAAc,CACtB,IAAKxrC,EACH,MAAM,IAAI,KAAa,cAAe,sDAGxChuC,KAAKo7E,mBAAmBptC,GAI5B,MAAQyqC,KAAM4C,EAAa5zE,IAAK6zE,GAAet7E,KAAKw5E,aAClDx5E,KAAKs5E,cAAgB,EAIrB+B,EAAY9hD,SAASsoB,IACnB,MAAM34C,EAAUoyE,EAAWz5B,GAC3B34C,EAAQ26B,YAGJ36B,EAAQ0zC,eAAe/6C,OAASmsC,EAAOnsC,SACzCo5E,GAAqB,GAGvB/xE,EAAQ0zC,eAAerjB,SAASx2B,IAC9Bm4E,GAAQn4E,EAAE1B,aAAaiK,MACvB6vE,GAAQp4E,EAAE++B,WAAWhgC,QACrBorE,EAAOh9D,KAAKnN,EAAE1B,aAAaiK,OAC3BqJ,EAAUzE,KAAKnN,EAAE++B,WAAWhgC,YAE9B,MAAMwJ,EAAQpC,EAAQ+f,WACtBjpB,KAAKs5E,eAAiBhuE,KAGxBtL,KAAKu5E,kBAAmB,EAExB,MAAMgC,EAAOL,EAAO,EAAIA,EAAOhO,EAAOrrE,OAAS,EAAIqrE,EAAOrrE,OACpD25E,EAAOC,GAASvO,EAAOzlE,KAAKi0E,GAAOz2E,KAAK8H,IAAI2uE,EAAKH,EAAM,MACvDI,EAAQ12E,KAAK8H,IAAIyuE,EAAOtO,EAAOrrE,OAAQ,IAAO05E,EAE9CK,EAAOT,EAAOxmE,EAAU9S,OACxBg6E,EAAOJ,GAAS9mE,EAAUlN,KAAKi0E,GAAOz2E,KAAK8H,IAAI2uE,EAAKE,EAAM,MAC1DE,EAAQ72E,KAAK8H,IAAI8uE,EAAOlnE,EAAU9S,OAAQ,IAAO+5E,EAGjDG,EAAS92E,KAAKsJ,IAAIutE,EAAOH,GAASN,EAAYx5E,OAASm5E,EACvDgB,EAAehB,EAAmBC,EAExC,OAAOj7E,KAAKs5E,cAAgBr0E,KAAKsJ,IAAIytE,EAAcD,GAOrDrwB,mBACE,IAAK1rD,KAAKu5E,iBACR,MAAM,IAAI,KACR,kBACA,qFAIJ,OAAOv5E,KAAKs5E,cAId,+BAA+BtrC,GAC7B,IAAKA,IAAWA,EAAOnsC,OACrB,MAAM,IAAI,KAAa,cAAe,uBAExC,MAAM27C,EAAaxP,EAAO,GAAGuW,gBAY7B,OAX6BvW,EAAO9N,QAAO,CAAC45C,EAAar3C,KACvD,IAAKA,EAAM8hB,gBAAgBlgD,OAAOm5C,GAChC,MAAM,IAAI,KAAa,eAAgB,yDAGzC,GAAI/a,EAAMkiB,YAAcf,EAAMS,KAAKC,SAAW7hB,EAAM0iB,aAClD,MAAM,IAAI,KAAa,kBAAmB,qCAG5C,OAAOlgD,KAAKsJ,IAAIurE,EAAav3E,EAASW,IAAI42E,EAAar3C,EAAMoiB,8BAC5D,GAKLo3B,uBAAuBjuC,GACrB,MAEM2qB,EAAWsf,GAAejqC,GAAQ,IAAM,IAAI27B,KAFN,CAAC5kB,EAAoB77C,IAC/D67C,EAAS7hB,qBAAqBh6B,KAGhC,OADAlJ,KAAKy5E,iBAAmB9gB,EACjBA,EAOTyiB,mBAAmBptC,GACjB,MAEM2qB,EAAWsf,GAAejqC,GAAS6T,GAA8B,IAAIgW,GAAYhW,KAF/C,CAACkD,EAAoB77C,EAAsBowD,IACjFpwD,EAAQ28C,YAAYd,EAAUuU,KAEhCt5D,KAAKw5E,aAAe7gB,EACpB,MAAMujB,EAAel8E,KAAKw5E,aAAahB,MAKvC,OAHA0D,EAAa3iD,SAASrwB,IACpBA,EAAQuvD,UAAYyjB,KAEfvjB,EAST90B,UAAUq1C,EAAe,EAAGiD,EAAkCC,EAAuB/pE,GAEnF,MAAMsmD,EAAW34D,KAAKw5E,aACtB,IAAK7gB,EACH,MAAM,IAAI,KAAa,iBAAkB,mCAG3C,MAAQ8f,KAAM4C,EAAa5zE,IAAK6zE,GAAe3iB,EAG/C34D,KAAK45E,YAAc,GAIfwC,GAAe/pE,GACjB+pE,EAAY7iD,SAASkJ,GAAUA,EAAMrwB,SAASC,GAAOwxB,cAKvD,IAAIp4B,EAAI,EACJtI,EAAQ,EACZnD,KAAKs5E,cAAgB,EACrB,IAAI97B,EAAa,EAGjB69B,EAAY9hD,SAASsoB,IACnB,MAAM34C,EAAUoyE,EAAWz5B,GACvBs6B,GAAkBjzE,EAAQ2B,WAAWsxE,GAIzCjzE,EAAQ26B,YAER,MAAMv4B,EAAQpC,EAAQ+f,WACtBjpB,KAAKs5E,eAAiBhuE,EAEtB,MAAM0sD,EAAW9uD,EAAQ+vD,cAAcn3D,QACvC07C,GAAcwa,EAEd,MAAM13D,EAAU4I,EAAQ7H,aACxBoK,EAAIA,EAAItI,EAAQ7C,EAAQi4D,YACxBrvD,EAAQ2E,KAAKpC,GAGbtI,EAAQmI,EAAQhL,EAAQi4D,eAI1B,MAAMwgB,EAAmB/4E,KAAK+4E,iBACxBj1B,EAAgBi1B,EAAiBj1B,eAAiB,IAElD0B,EAAei2B,GAASJ,EAAY5zE,KAD7Bo6C,GAAiB,SAAAiC,EAAkBw3B,EAAWz5B,GAAMoX,cAAcn3D,QAAU07C,MAOzF,GAJAx9C,KAAKs5E,cAAgB7tE,EAAItI,EACzBnD,KAAKu5E,kBAAmB,EAGpBL,GAAgB,EAAG,OAAOl5E,KAAKq8E,WAInC,MAAMC,EAAehB,EAAWD,EAAY,IACtChoB,EAAcioB,EAAWD,EAAYA,EAAYx5E,OAAS,IAIhE,SAAS06E,EAAwBC,GA4E/B,OA3E8BnB,EAAY5zE,KAAI,CAACo6C,EAAcjgD,KAC3D,MAAMsH,EAAuBoyE,EAAWz5B,GAClC7T,EAAS9kC,EAAQqwD,sBACvB,IAAIkjB,EACJ,GAAI76E,EAAI,EAAG,CACT,MAAM86E,EAA2BpB,EAAWD,EAAYz5E,EAAI,IAI5D,IAAK,IAAIyhD,EAAIzhD,EAAI,EAAGyhD,GAAK,EAAGA,IAAK,CAC/B,MACMs5B,EADwBrB,EAAWD,EAAYh4B,IACzBkW,sBAGtBqjB,EAA2B,GAOjC,GANAr1E,OAAOC,KAAKwmC,GAAQzU,SAASosB,IACvBg3B,EAAWh3B,IACbi3B,EAAe1sE,KAAKy1C,MAIpBi3B,EAAe/6E,OAAS,EAAG,CAE7B,IAAIm2D,EAAW,EACX6kB,EAAqBlqC,EAAAA,EACrBmqC,EAAmB,EAgCvB,GA9BAF,EAAerjD,SAASosB,IACtB,MAAMx3B,EAAQwuD,EAAWh3B,GAAG7jB,WAAWhgC,QACnCqsB,EAAQ6pC,IACVykB,EAAeE,EAAWh3B,GAC1BqS,EAAW7pC,GAIb,MAAM4uD,EAAe/uC,EAAO2X,GACtBq3B,EACJD,EAAatvE,QACZsvE,EAAa17E,aAAag4B,UAAY0jD,EAAa17E,aAAa4jC,qBAE7Dg4C,EAAcN,EAAWh3B,GAAGtkD,aAC5B67E,EACJP,EAAWh3B,GAAGl4C,OAASwvE,EAAYt3C,OAASs3C,EAAY3jD,WAAa2jD,EAAY/3C,qBAGnF23C,EAAqB53E,KAAKw2B,IAAIohD,EAAoBG,EAAiBE,MAKrEL,EAAqB53E,KAAKw2B,IACxBohD,EACA3zE,EAAQuE,QAAUivE,EAAYjvE,OAAgC,IAAvB+uE,IAKrCzD,EAAiBC,cAAe,CAClC,MAAMj2E,EAAIy6C,EACVs/B,EAAoB,SAAAh5B,EAAkBkU,EAAWj1D,GAAKyiD,EAAgBg3B,YACrC,IAAjBC,IAChBK,EAAmBL,EAAaj6C,WAAWijB,QAAQuS,GAAYwkB,GAGjE,MAAO,CACLM,iBAAAA,EACAD,mBAAAA,EACAM,aAAcV,KAMtB,MAAO,CAAEK,iBAAkB,EAAGM,eAAgB,EAAGP,mBAAoB,MAKzE,SAASQ,EAAsBC,GAE7B,MAAMC,EAAUf,EAAuB,EACvC,IAAIgB,EAAa,EA0BjB,OAxBAnC,EAAY9hD,SAAQ,CAACsoB,EAAMv7C,KACzB,MAAM4C,EAAUoyE,EAAWz5B,GAC3B,GAAIv7C,EAAQ,EAAG,CACb,MAAMm3E,EAAWv0E,EAAQuE,OACnBiwE,EAAQJ,EAAeh3E,GACvBq3E,GAAU,QAAQD,EAAMP,cAAc1vE,OAASiwE,EAAMZ,kBAAoBW,EAAWD,GAE1F,IAAII,EAAkB,EAClBD,EAAU,EACZH,GAAcG,EACLA,EAAU,IACnBC,EAAkB34E,KAAKw2B,IAAIiiD,EAAMb,mBAAoB53E,KAAKI,IAAIs4E,IAC9DH,IAAeI,GAGjB10E,EAAQ2E,KAAK4vE,EAAWD,GAI1Bt0E,EAAQswD,4BAA4BjgC,SAASwrB,IAC3CA,EAAS1iB,gBAAgBk7C,EAAUr0E,EAAQuE,cAIxC4lD,EAAY5lD,OAAS6uE,EAAa7uE,OAG3C,MAAM+uE,EACJtD,EACA7lB,EAAYhyD,aAAaskC,OACzB0tB,EAAYhyD,aAAam3D,aACzB8jB,EAAaj7E,aAAak3D,YAC5B,IAAIslB,EAAcrB,EACdsB,EAAcT,EAAsBd,EAAwBsB,IAChE,MAAMj1E,EAAYJ,GAAKC,mBAAmB,GACpCs1E,EAAan1E,EAAUtH,aAAa,uBACpC08E,EAAap1E,EAAUtH,aAAa,uBACpC28E,EAAOzB,EAAuBwB,EAEpC,IAAIv8C,EAAazhC,KAAK+4E,iBAAiBE,cACvC,KAAQ6E,EAAcG,GAAQx8C,EAAa,GAAOq8C,EAAcC,EAAaE,GAAQx8C,EAAa,GAIhGo8C,GAAeC,EAAcG,EAC7BH,EAAcT,EAAsBd,EAAwBsB,IAC5Dp8C,IAIF,OAA2B,IAAvB45C,EAAYx5E,OAAqB,GAErC7B,KAAKk5E,aAAeA,EACbl5E,KAAKq8E,YAIdA,WACE,IAAKr8E,KAAKw5E,aAAc,OAAO,EAC/B,MAAM7gB,EAAW34D,KAAKw5E,aAChBN,EAAel5E,KAAKk5E,aAG1Bl5E,KAAK05E,YAAc,CAAE54B,MAAO,EAAG64B,KAAM,IACrChhB,EAAS8f,KAAKl/C,SAAQ,CAACsoB,EAAMv7C,KAC3B,GAAc,IAAVA,EAAa,OACjB,MAAM43E,EAAWvlB,EAAS8f,KAAKnyE,EAAQ,GACjCo2E,EAAc/jB,EAASlxD,IAAIy2E,GAC3Bh1E,EAAUyvD,EAASlxD,IAAIo6C,GACvBs8B,EAAczB,EAAYr7E,aAC1B+8E,EAAcl1E,EAAQ7H,aAGtB67E,EAAkBR,EAAYjvE,OAAS0wE,EAAYx4C,OAASw4C,EAAY3lB,aAExEwkB,EAAiB9zE,EAAQuE,OAAS2wE,EAAY7lB,YAC9CyhB,EAAMgD,EAAiBE,EAC7Bl9E,KAAK05E,YAAY54B,OAASk5B,EAC1Bh6E,KAAK05E,YAAYC,KAAKzpE,KAAK,CAAEnF,GAAImyE,EAAiBhyE,GAAI8xE,IAGtD9zE,EAAQg5B,sBAAsBV,QAAQ9J,KAAOsiD,EAC7C0C,EAAYx6C,sBAAsBV,QAAQ7J,MAAQqiD,KAKpDh6E,KAAKq5E,cAAgB,GACrB,MAAMA,EAAgBr5E,KAAKq5E,cAY3Br5E,KAAKguC,OAAOzU,SAASkJ,IACnBA,EAAMma,eAAerjB,SAAQ,CAACrJ,EAAMtuB,EAAGsrB,KACrC,MAAMY,EAAWoC,EAAK4R,WAAWh9B,QAAQvB,WAAW+B,WAC9ChF,EAAU4vB,EAAK7uB,aACfkgC,EAAmBrR,EAAKgS,sBACxBm8C,EAAenuD,EAAKziB,OAASnN,EAAQqlC,OAASrlC,EAAQg5B,WAAah5B,EAAQ4kC,qBACjF,IAAIxD,EAAQ,EAEZ,GAAI9/B,EAAIsrB,EAAMrrB,OAAS,EAAG,CACxB,MAAMy8E,EAAYpxD,EAAMtrB,EAAI,GACtB28E,EAAeD,EAAUj9E,aAG/BqgC,EAFsB48C,EAAU7wE,OAAS8wE,EAAallD,UAAYklD,EAAat5C,oBAEvDo5C,EACxB98C,EAAiBG,MAAMC,KAAO28C,EAAU7wE,OAASyiB,EAAKziB,OACtD6wE,EAAUp8C,sBAAsBV,QAAQ9J,KAAOgK,OAE/CA,EAAQw3C,EAAemF,EACvB98C,EAAiBG,MAAMC,KAAOu3C,EAAehpD,EAAKziB,OAGpD8zB,EAAiBC,QAAQ7J,MAAQ+J,EA/BrC,SAAqB5T,EAAkB4T,GACrC,MAAM88C,EAAQnF,EAAcvrD,QACdrtB,IAAV+9E,EACFnF,EAAcvrD,GAAY,CAAE8T,KAAMF,EAAO+8C,MAAO,IAEhDD,EAAMC,OAAS,EACfD,EAAM58C,MAAQ48C,EAAM58C,KAAOF,GAAS,GA0BpCg9C,CAAY5wD,EAAUyT,EAAiBG,MAAMC,YAMjD,IAAIg9C,EAAiB,EAiBrB,OAhBA3+E,KAAKguC,OAAOzU,SAASkJ,IACnBA,EAAMma,eAAerjB,SAASrJ,IAC5B,MAAMpC,EAAWoC,EAAK4R,WAAWh9B,QAAQvB,WAAW+B,WAC9ChF,EAAU4vB,EAAKgS,sBAErB5hC,EAAQohC,MAAME,KAAOy3C,EAAcvrD,GAAU8T,KAC7CthC,EAAQwtB,SAAWA,EACnBxtB,EAAQmhC,YAAc,EACtBnhC,EAAQohC,MAAMG,UAAYvhC,EAAQohC,MAAMC,KAAOrhC,EAAQohC,MAAME,KAE7D+8C,GAAkB,SAAAr+E,EAAQohC,MAAMG,UAAa,SAIjD7hC,KAAKm5E,UAAYl0E,KAAKkI,KAAKwxE,GAC3B3+E,KAAK45E,YAAY1pE,KAAKlQ,KAAKm5E,WACpBn5E,KAAKm5E,UAWdyF,KAAKzuE,GACH,IAAKnQ,KAAKw5E,aAAc,OAAO,EAC/B,MAAM7gB,EAAW34D,KAAKw5E,aACtBrpE,EAAU,OAAH,QACL0uE,MAAO,IACJ1uE,GAcL,IAAIhN,EAAQ,EAyBZ,OAxBAnD,KAAKo5E,WAAa,EAClBzgB,EAAS8f,KAAKl/C,SAAQ,CAACsoB,EAAMv7C,EAAOmyE,KAClC,MAAMvvE,EAAUyvD,EAASlxD,IAAIo6C,GACvB66B,EAAcp2E,EAAQ,EAAIqyD,EAASlxD,IAAIgxE,EAAKnyE,EAAQ,SAAM7F,EAC1Di7D,EAAcp1D,EAAQmyE,EAAK52E,OAAS,EAAI82D,EAASlxD,IAAIgxE,EAAKnyE,EAAQ,SAAM7F,GAdhF,SAAcq+E,EAAsB37E,EAAewgE,EAAoB9zD,GACrEivE,EAAQjxE,KAAKixE,EAAQrxE,OAAStK,GAC9B27E,EAAQ58C,sBAAsBV,QAAQ9J,MAAQv0B,EAC9C27E,EAAQ58C,sBAAsBV,QAAQ7J,OAASx0B,EAE3CwgE,IAAMA,EAAKzhC,sBAAsBV,QAAQ7J,OAASx0B,GAClD0M,IAAMA,EAAKqyB,sBAAsBV,QAAQ9J,MAAQv0B,GAUrD8K,CAAK/E,EAAS/F,EAAOu5E,EAAahhB,GAElC,MAAM9a,GAAQ66B,GAASvyE,EAAQ0zC,eAAen1C,KAAK1E,GAAMA,EAAEm/B,sBAAsBR,MAAMG,aAEnF+e,EAAO,EACTz9C,GAAS8B,KAAKw2B,IAAIvyB,EAAQg5B,sBAAsBV,QAAQ7J,MAAO1yB,KAAKI,IAAIu7C,IAC/DA,EAAO,IAEdz9C,EADEu4D,EACMz2D,KAAKw2B,IAAIigC,EAAYx5B,sBAAsBV,QAAQ7J,MAAO1yB,KAAKI,IAAIu7C,IAEnE,GAIZz9C,IAAS,QAAQgN,GAAS0uE,MAC1B7+E,KAAKo5E,YAAcj2E,KAGdnD,KAAKq8E,WAQdv4C,aACE,MAAMi7C,EAAsBpmB,GAC1BA,EAAS8f,KAAKl/C,SAASsoB,GAAS8W,EAASlxD,IAAIo6C,GAAM/d,eAKrD,OAHI9jC,KAAKy5E,kBAAkBsF,EAAmB/+E,KAAKy5E,kBAC/Cz5E,KAAKw5E,cAAcuF,EAAmB/+E,KAAKw5E,cAExCx5E,KAOTwrD,WAAWxd,GAGT,OAFAhuC,KAAKi8E,uBAAuBjuC,GAC5BhuC,KAAKu5E,kBAAmB,EACjBv5E,KAaTyrD,OAAOzd,EAAiBkrC,EAAuB/oE,GAC7C,MAAMs5D,EAAO,OAAH,QACRyQ,aAAa,GACV/pE,GAGLnQ,KAAKguC,OAASA,EACd,MAAM8V,EAAgB9jD,KAAK+4E,iBAAiBj1B,cAY5C,OAXIA,GACF9jD,KAAKguC,OAAOzU,SAASosB,GAAMA,EAAEN,iBAAiBvB,KAGhD9jD,KAAK+6E,WAAW/sC,EAAQy7B,EAAKyQ,aAC7Bl6E,KAAKo7E,mBAAmBptC,GACxBhuC,KAAK6jC,UAAUq1C,EAAczP,EAAKvgE,QAAS8kC,EAAQy7B,EAAKp3D,OAGpDo3D,EAAKp3D,OAAOrS,KAAK8jC,aAEd9jC,KAKTo6E,cAAcpsC,EAAiB37B,EAAc2sE,GAC3C,MAAM7uE,EAAO,eAAoBgnD,QAAS,GAAejuD,QAASmJ,EAAMzH,cAAiBo0E,GAGnF9F,EAAe7mE,EAAMuiE,cAAgBviE,EAAMq2B,gBAAkB6qC,GAAM0L,eAEzE,OA34BJ,YAAch8E,GACRu6B,GAAUjB,QAAO,QAAI,qBAAsBt5B,GAy4B7C,CAAE,+BAAgCi2E,GAC3Bl5E,KAAKyrD,OAAOzd,EAAQkrC,EAAc/oE,IAK7C,MAAMklB,GAAM,CAAC1yB,EAAWC,IAAcD,EAAIC,EACpC64E,GAAYyD,GAAkBA,EAAIh/C,OAAO7K,GAAK,GC7+B7C,MAAM8pD,WAAiBl3E,EAiC5B7H,YAAY8sB,EAAiBlE,GAC3B5Y,QACApQ,KAAKiH,aAAa,OAAQ,YAC1BjH,KAAKo/E,SAASlyD,GACdltB,KAAKgpB,KAAOA,EACZhpB,KAAKmlC,eAAiB,CACpBk6C,IAAK,EACLC,IAAK,GACL9yB,aAAc,EACd+yB,cAAe,EACfC,aAAc,EACdlwE,QAAS,EACTmwE,YAAa,EACbjwE,KAAM,CAAEk3C,OAAQ,QAASC,KAAM,GAAIC,OAAQ,KAG7C5mD,KAAKwP,KAAOxP,KAAKmlC,eAAe31B,KAGlCw2B,QAAQx2B,GAEN,OADAxP,KAAKwP,KAAOA,EACLxP,KAGT26B,aAAavF,GAEX,OADAp1B,KAAKo1B,UAAYA,EACVp1B,KAQTo/E,SAASlyD,GACP,IAAKA,EAAM2R,aAAe3R,EAAM2S,UAC9B,MAAM,IAAI,KAAa,eAAgB,yDAUzC,GAPK3S,EAAMwyD,gBACTxyD,EAAMwyD,cAAgB,CAAC,IAEpBxyD,EAAMyyD,eACTzyD,EAAMyyD,aAAe,CAAC,IAGpBzyD,EAAMwyD,cAAc79E,SAAWqrB,EAAMyyD,aAAa99E,OACpD,MAAM,IAAI,KAAa,eAAgB,gDAIzC,OADA7B,KAAKktB,MAAQA,EACNltB,KAMT4/E,YACE,OAAQ5/E,KAAKktB,MAAM2R,aAAe7+B,KAAKktB,MAAM2S,UAG/CggD,UAAU1uE,GAOR,GAA+B,IAA3BA,EAAO2uE,SAASj+E,QAA0C,IAA1BsP,EAAO4uE,QAAQl+E,OACjD,MAAM,IAAI,KAAa,eAAgB,yBAGzC,MAAMsM,EAAMnO,KAAKiK,eACjB,IAAIo1E,EAAMr/E,KAAKmlC,eAAek6C,IAC1BC,EAAMt/E,KAAKmlC,eAAem6C,IAE1Br6E,KAAKI,IAAI8L,EAAO6uE,UAAY7uE,EAAOsuC,YAAc,KACnD4/B,EAAM,EACNC,EAAM,GAGR,MAAMC,EAAgBv/E,KAAKmlC,eAAeo6C,cACpCC,EAAex/E,KAAKmlC,eAAeq6C,aACnClwE,EAAUtP,KAAKmlC,eAAe71B,QAAU6B,EAAOikB,UAK/CsqD,EAAgB1/E,KAAKktB,MAAMwyD,cAE3BC,EAAe3/E,KAAKktB,MAAMyyD,aAChC,IAAK,IAAI/9E,EAAI,EAAGA,EAAI89E,EAAc79E,SAAUD,EAAG,CAC7C,MAAMumE,GAAQh3D,EAAO6uE,UAAYR,GAAgBruE,EAAOsuC,WAAa8/B,IAAkB,EACjF7/B,EAAavuC,EAAO2uE,SAASJ,EAAc99E,IAAM0N,EACjD2wE,EAAY9uE,EAAO4uE,QAAQJ,EAAa/9E,IAAM0N,EAEpD,GAAIxM,MAAM48C,IAAe58C,MAAMm9E,GAC7B,MAAM,IAAI,KAAa,eAAgB,kCAGzC,MAAMC,GAAYxgC,EAAaugC,GAAa,EAAIZ,EAAMluE,EAAOikB,UACvD+qD,GAAezgC,EAAaugC,GAAa,EAAIX,EAAMnuE,EAAOikB,UAEhEjnB,EAAIsD,YACJtD,EAAIuD,OAAOP,EAAOsuC,WAAa8/B,EAAe7/B,GAC9CvxC,EAAIyD,iBAAiBu2D,EAAM+X,EAAU/uE,EAAO6uE,UAAYR,EAAcS,GACtE9xE,EAAIyD,iBAAiBu2D,EAAMgY,EAAahvE,EAAOsuC,WAAa8/B,EAAe7/B,GAC3EvxC,EAAIyyB,YACJzyB,EAAI2D,QAIRy2D,WAAW9oB,EAAoBugC,G,UAC7B,IAAKhgF,KAAKgpB,KAAM,OAChB,MAAM7a,EAAMnO,KAAKiK,eACjB,IAAIm2E,GAAY3gC,EAAaugC,GAAa,EAC1CI,GAAYjyE,EAAIirC,YAAYp5C,KAAKgpB,MAAM1d,MAAQ,EAC/C,MAAM+G,EAA2C,QAAnC,EAAqB,QAArB,EAAArS,KAAKktB,MAAM2R,kBAAU,eAAE3rB,oBAAY,QAAwB,QAApB,EAAAlT,KAAKktB,MAAM2S,iBAAS,eAAE3sB,aAE3E/E,EAAIhF,OACJgF,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QACxDz4C,EAAI83B,SAASjmC,KAAKgpB,KAAMo3D,EAAWpgF,KAAKmlC,eAAeqnB,aAAcn6C,EAAMq1B,iBAAmB,GAC9Fv5B,EAAIpE,UAGNG,OACElK,KAAKiK,eACLjK,KAAKuK,cAEL,MAAMs0B,EAAa7+B,KAAKktB,MAAM2R,WACxBgB,EAAY7/B,KAAKktB,MAAM2S,UAE7B,IAAI4f,EACAugC,EACAF,EACAC,EACA1lD,EAAiB,EACrB,GAAIwE,EACF4gB,EAAa5gB,EAAWkB,eAAiB//B,KAAKmlC,eAAes6C,YAC7DplD,EAAiBwE,EAAWa,mBAC5BogD,EAAWjhD,EAAW4I,YACjB,CAELgY,EADc5f,EAAU3sB,aACL2hE,eACnBiL,EAAWjgD,EAAU4H,QACrBznC,KAAKktB,MAAMwyD,cAAgB1/E,KAAKktB,MAAMyyD,aAGxC,GAAI9/C,EACFmgD,EAAYngD,EAAUC,cAAgB9/B,KAAKmlC,eAAes6C,YAC1DplD,EAAiBwF,EAAUH,mBAC3BqgD,EAAUlgD,EAAU4H,YACf,CAELu4C,EADcnhD,EAAW3rB,aACP4hE,aAClBiL,EAAUlhD,EAAW4I,QACrBznC,KAAKktB,MAAMyyD,aAAe3/E,KAAKktB,MAAMwyD,cAgBvC,OAbI1/E,KAAKo1B,YACPiF,EAAiBr6B,KAAKo1B,WAGxBp1B,KAAK6/E,UAAU,CACbpgC,WAAAA,EACAugC,UAAAA,EACAF,SAAAA,EACAC,QAAAA,EACA3qD,UAAWiF,IAGbr6B,KAAKuoE,WAAW9oB,EAAYugC,IACrB,GC9MJ,MAAMK,WAAelB,GAC1B,sBAAsBjyD,GACpB,OAAO,IAAImzD,GAAOnzD,EAAO,KAG3B,qBAAqBA,GACnB,OAAO,IAAImzD,GAAOnzD,EAAO,KAc3B9sB,YAAY8sB,EAAiBlE,GAC3B5Y,MAAM8c,EAAOlE,GACbhpB,KAAKiH,aAAa,OAAQ,UAE1BjH,KAAKmlC,eAAek6C,IAAM,EAC1Br/E,KAAKmlC,eAAem6C,IAAM,GAC1Bt/E,KAAKmlC,eAAe71B,QAAU,EAE9BtP,KAAKo1B,WAAa,GCTf,MAAM20C,WAAuBhzC,EAkElC32B,YAAYkgF,EAA8BC,GA0BxC,OAzBAnwE,QA5DQ,KAAA0wB,cAAwB,EA6DhC9gC,KAAKiH,aAAa,OAAQ,kBAE1BjH,KAAKmvB,SAAW4H,EAASE,SAASC,KAClCl3B,KAAKsgF,YAAcA,EACnBtgF,KAAKsL,MAAQ,EAEbtL,KAAKugF,UAAYA,EACjBvgF,KAAKw1C,UAAO/0C,EAEZT,KAAKurD,UAAY,IAAI/tB,GACrBx9B,KAAKyiC,MAAQ,IAAImhB,EAAM,CACrBj0B,UAAW,EACXC,WAAY,EACZxuB,WAAYoH,GAAKkM,aAChBswC,WAAU,GAEbhlD,KAAKmlC,eAAiB,CACpBq7C,aAAc,GAGhBxgF,KAAKi/C,MAAQ,GAEbj/C,KAAKyiC,MAAMqjB,aAAa9lD,KAAKsgF,aAEtBtgF,KA/ET,sBACE,MAAO,kBAIT,cAAcygF,EAAoCp4C,GAIhD,IAAKo4C,GAAgD,IAA5BA,EAAiB5+E,OAAc,OAAO,EAE/D,MAAM6+E,EAAa,GACnB,IAAI/9B,EAAY,KACZqH,EAAS,EAEb,IAAK,IAAIpoD,EAAI,EAAGA,EAAI6+E,EAAiB5+E,SAAUD,EAAG,CAChD,MAAM++E,EAAkBF,EAAiB7+E,GACnCsuB,EAAOywD,EAAgB7oD,UACvB8oD,EAAe1wD,EAAK7sB,gBAAkBgmC,EAAU/lC,SAChD0mC,EAAU42C,EAbU,EACF,EAcxB,GAAIA,GAAgB1wD,IAASyyB,EAAW,CAEtC,IAAK,IAAI58C,EAAI,EAAGA,EAAImqB,EAAK1oB,KAAK3F,SAAUkE,EACtCikD,EAAS/kD,KAAKsJ,IAAI2hB,EAAK8W,yBAA0BgjB,GAEnDrH,EAAYzyB,EAGdwwD,EAAWxwE,KAAK,CAAE/M,MAAO6mD,EAAQ22B,gBAAAA,EAAiB32C,QAAAA,IAIpD,IACI62C,EADAC,EAAcJ,EAAW,GAAGv9E,MAEhC,IAAK,IAAIvB,EAAI,EAAGA,EAAI8+E,EAAW7+E,SAAUD,EAAG,CAC1C,MAAM++E,EAAkBD,EAAW9+E,GAAG++E,gBACtCA,EAAgB98C,YAChBg9C,EAAcF,EAAgB13D,WAAay3D,EAAW9+E,GAAGooC,QACzD82C,EAAc77E,KAAKsJ,IAAIsyE,EAAaC,GAGtC,IAAK,IAAIl/E,EAAI,EAAGA,EAAI8+E,EAAW7+E,SAAUD,EAAG,CAC1C,MAAM++E,EAAkBD,EAAW9+E,GAAG++E,gBACtCE,EAAcF,EAAgB13D,WAAay3D,EAAW9+E,GAAGooC,QACzD22C,EAAgB/nD,2BAA2BkoD,EAAc77E,KAAKw2B,IAAIolD,EAAaC,IAIjF,OADAz4C,EAAMC,YAAcw4C,GACb,EAiCTz9E,cACE,OAAO0mE,GAAezmE,SAGxBugC,YACM7jC,KAAK8gC,eAET9gC,KAAKurD,UAAUC,WAAW,CAACxrD,KAAKyiC,QAAQgpB,OAAO,CAACzrD,KAAKyiC,OAAQ,EAAG,IAChEziC,KAAK63B,SAAS73B,KAAKurD,UAAUG,oBAC7B1rD,KAAK8gC,cAAe,GAGtBigD,UAAUT,GAER,IADAA,EAAcA,GAAetgF,KAAKsgF,aAClBz+E,OAAS,EAAG,CAC1B,MAAMmmC,EAAO,IAAI0T,EAAK4kC,GAEtBt4C,EAAK7C,eAAe0W,WAAa,EACjC7T,EAAK7C,eAAeiX,oBAAsB,EAE1Cp8C,KAAKi/C,MAAM/uC,KAAK83B,GAGlB,OAAOhoC,KAGT63B,SAASvsB,GAEP,OADAtL,KAAKsL,MAAQA,EACNtL,KAGTipB,WACE,OAAOjpB,KAAKsL,MAGd01E,gBACE,OAAOhhF,KAAKsgF,YAGdp2E,OACE,MAAMiE,EAAqBnO,KAAKiK,eAC1BimB,EAAOlwB,KAAK+3B,oBAiBlB,GAhBA/3B,KAAKuK,cA9IT,YAActH,GACR8mE,GAAextC,QAAO,QAAI,0BAA2Bt5B,GA+IvD,CAAE,gCAAiCitB,GAEnClwB,KAAK+4B,sBAAsB/4B,KAAKghF,gBAAiB9wD,GAGjDlwB,KAAKsgF,YAAY/mD,SAAS0nD,IACxBA,EAAUp2E,WAAWsD,GAAKjE,UAI5BlK,KAAKi/C,MAAM1lB,SAASyO,IAClBA,EAAKn9B,WAAWsD,GAAKjE,UAGnBlK,KAAKugF,UAAW,CAElB,MAAMK,EAAe1wD,EAAK7sB,gBAAkBgmC,EAAU/lC,SAChD49E,EAAWN,EAAezB,GAAWkB,GAE3CrgF,KAAKw1C,KAAO,IAAI0rC,EAAS,CACvBrhD,UAAW7/B,KAAKsgF,YAAY,GAC5BzhD,WAAY3O,EACZwvD,cAAe,CAAC,GAChBC,aAAc,CAAC,KAGjB3/E,KAAKw1C,KAAKrQ,eAAem6C,IAAM,GAC/Bt/E,KAAKw1C,KAAKrQ,eAAe71B,SAAWsxE,EAAe,EAAI,GAAK5gF,KAAKmlC,eAAeq7C,aAChFxgF,KAAKw1C,KAAK3qC,WAAWsD,GAAKjE,SCrKhC,SAAS,MAAKjH,GACR6mE,GAAWvtC,QAAO,QAAI,sBAAuBt5B,GAW5C,MAAM6mE,WAAmB/yC,EAsb9B32B,YAAY+F,GACViK,QACApQ,KAAKiH,aAAa,OAAQ,cAE1B,GAAE,mBAAoBd,GAEtBnG,KAAKmG,KAAOA,EACZnG,KAAKmvB,SAAW4H,EAASE,SAASC,KAElCl3B,KAAKmlC,eAAiB,CAEpB0mB,WAAY,GAGZvmB,UAAW,EAGX67C,iBAAkB,EAClBC,kBAAmB,GAGrBphF,KAAKmmB,WAAa3d,GAAKohB,gBAAgB5pB,KAAKmG,OAC5C,QAAQnG,KAAKmmB,WAAY,gBAAiB,4BAA4BhgB,KAGtEnG,KAAKqhF,YAAa,EAElBrhF,KAAKyQ,QA3bP,sBACE,MAAO,cAIT,cAAcmE,EAA2ByzB,GASvC,MAAMz/B,EAAYJ,GAAKC,mBAAmB,GACpC64E,EAA4B14E,EAAUtH,aAAa,wCACnDigF,EAAYl5C,EAAMC,WAAag5C,EAC/BzV,EAAoBjjE,EAAUtH,aAAa,gCAC3CkgF,EAAoB54E,EAAUtH,aAAa,0BAGjD,IAAKsT,GAAsC,IAAvBA,EAAY/S,OAAc,OAE9C,MAAMupE,EAAgC,GACtC,IAAIrtB,EACAiM,EAAS,EAGb,IAAK,IAAIpoD,EAAI,EAAGA,EAAIgT,EAAY/S,SAAUD,EAAG,CAC3C,MAAMioB,EAAMjV,EAAYhT,GAClBsuB,EAAOrG,EAAIiO,UACXzlB,EAAQ6d,EAAKiJ,WACb7yB,EAAQujB,EAAIqO,aACZhT,EAAQgL,EAAK4Y,cAAcxiC,GACjC,GAAI4pB,IAAS6tB,EAAU,CAErB,IAAK,IAAIh4C,EAAI,EAAGA,EAAImqB,EAAK1oB,KAAK3F,SAAUkE,EACtCikD,EAAS/kD,KAAKsJ,IAAI2hB,EAAK8W,yBAA0BgjB,GAEnDjM,EAAW7tB,EAEb,GAAI7d,EAAO,CACT,MAAMmmC,EAAYnmC,EAAMomC,aAAaC,yBAC/BhtC,EAAI2G,EAAMmtB,YAAYta,EAAMiD,MAC5Bs5D,EAAUx8E,KAAKihC,MAAOx6B,EAAI8sC,EAAa,GAAK,EAClD4yB,EAAQl7D,KAAK,CAAExE,EAAAA,EAAGyc,KAAMs5D,EAASt+E,MAAO6mD,EAAQngC,IAAAA,EAAK2uB,UAAAA,SAErD4yB,EAAQl7D,KAAK,CAAEiY,KAAMjD,EAAMiD,KAAMhlB,MAAO6mD,EAAQngC,IAAAA,IAKpDuhD,EAAQt7B,MAAK,CAACntC,EAAGC,IAAMA,EAAEulB,KAAOxlB,EAAEwlB,OAIlC,MAAMu5D,EAAmB,GAIzB,IACIC,EADAC,EAAW,EAIf,IAAK,IAAIhgF,EAAI,EAAGA,EAAIwpE,EAAQvpE,OAAQD,IAAK,CACvC,MAAMioB,EAAMuhD,EAAQxpE,QAGCnB,IAAjBkhF,GAA8BA,IAAiB93D,EAAI1B,MACrDu5D,EAASxxE,KAAK,CACZiY,KAAM0B,EAAI1B,KACV05D,UAAU,EACVC,cAAc,EACdC,OAAQ,EACRz2E,MAAO,EACP02E,OAAQ,IAMS,MAAjBn4D,EAAIA,IAAI1jB,MAAiC,OAAjB0jB,EAAIA,IAAI1jB,OAClCu7E,EAASA,EAAS7/E,OAAS,GAAGggF,UAAW,GAItB,OAAjBh4D,EAAIA,IAAI1jB,OACVu7E,EAASA,EAAS7/E,OAAS,GAAGigF,cAAe,GAI/CJ,EAASA,EAAS7/E,OAAS,GAAGkgF,SAM9BL,EAASA,EAAS7/E,OAAS,GAAGyJ,OAASue,EAAIA,IAAIZ,WAAa4iD,EAG5D+V,EAAW/3D,EAAI1mB,MAAQy+E,EAAW/3D,EAAI1mB,MAAQy+E,EAE9CD,EAAe93D,EAAI1B,KAqBrB,IAAI85D,EAAe,EAGnB,IAAK,IAAIrgF,EAAI,EAAGA,EAAI8/E,EAAS7/E,OAAQD,IAAK,CACxC,IAAIsgF,GAAqB,EACzB,MAAMC,EAAavgF,EACnB,IAAIwgF,EAAWxgF,EAEf,KAAOwgF,EAAW,EAAIV,EAAS7/E,SAAWqgF,GAEpCliF,KAAKqiF,eAAeX,EAASU,GAAWV,EAASU,EAAW,IAE9DA,IAEAF,GAAqB,EAKzB,MAAMI,EAAgBh8E,GAAkBo7E,EAASS,EAAa77E,GACxDi8E,EAAiBC,GAAsBA,EAAQ/6E,IAAI66E,GACnDG,EAAiB,CAACC,EAAgBC,KACtC,MAAOhgF,EAAGC,GAAK2/E,EAAc,CAACG,EAAQC,IAASl7E,KAAKm7E,GAASA,EAAKz6D,OAClE,OAAOxlB,EAAIC,GAGPigF,EAAe,IAAIC,IACvBA,EAAWr7E,IAAI86E,GAAeQ,OAAM,EAAEC,EAAOC,MAAYjjF,KAAKqiF,eAAeW,EAAOC,KAGhFC,EAAcd,EAAWD,EAAa,EAG5C,IAiCIgB,EACAnB,EAlCAoB,EAAUpjF,KAAKqiF,eAAeX,EAASS,GAAaT,EAASU,IAAa,IAAM,IAEpF,OAAQc,GACN,KAAK,EACa,MAAZE,GAA4C,KAAzBX,EAAe,EAAG,IAAuC,KAAzBA,EAAe,EAAG,KACvEW,EAAU,oBAEZ,MACF,KAAK,EACCP,EAAa,CAAC,EAAG,GAAI,CAAC,EAAG,MAC3BO,EAAU,yBAEZ,MACF,KAAK,EACa,MAAZA,GAAmBP,EAAa,CAAC,EAAG,MACtCO,EAAU,wBACNP,EAAa,CAAC,EAAG,GAAI,CAAC,EAAG,MAC3BO,EAAU,+BAGd,MACF,KAAK,EACCP,EAAa,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,MACnCO,EAAU,wBAERP,EAAa,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,MAC3CO,EAAU,6BAWhB,GAAIF,GAAe,EAAG,CAEpB,IAAIG,EAAgB,EAChBC,GAAoB,EACxB,MAA6B,IAAtBA,GAA4B,CACjCA,GAAoB,EACpB,IAAK,IAAIn7D,EAAO,EAAGA,EAAOk7D,EAAgB3B,EAAS7/E,OAAQsmB,IACzD,GAAInoB,KAAKqiF,eAAeX,EAASv5D,GAAOu5D,EAASv5D,EAAOk7D,IAAiB,CACvEC,GAAoB,EACpBD,IACA,OAKN,IAAKF,EAAcvhF,EAAGuhF,GAAef,EAAUe,IAC7CnB,GAAWmB,EAAcvhF,GAAKyhF,EAAiB,EAC/C3B,EAASyB,GAAanB,OAASA,EAC/BC,EAAeA,EAAeD,EAASC,EAAeD,OAMxD,IAAKmB,EAAcvhF,EAAGuhF,GAAef,EAAUe,IAC7CnB,EAASx5E,GAAKshB,uBAAuBo5D,GAAaE,GAASD,EAAcvhF,GACzE8/E,EAASyB,GAAanB,OAASA,EAC/BC,EAAeA,EAAeD,EAASC,EAAeD,EAM1DpgF,EAAIwgF,EAgBN,MAAMmB,EAAyB,GACzBC,EAA2B,GACjC,IAAK,IAAI5hF,EAAI,EAAGA,GAAKqgF,EAAcrgF,IACjC2hF,EAAa3hF,GAAK,EAClB4hF,EAAe5hF,GAAK,EAGtB2hF,EAAa,GAAK3B,EAAWL,EAC7BiC,EAAe,GAAK5B,EAAWL,EAI/BG,EAASnoD,SAASpR,IACZA,EAAK7c,MAAQi4E,EAAap7D,EAAK65D,UAASuB,EAAap7D,EAAK65D,QAAU75D,EAAK7c,UAG/E,IAAK,IAAI1J,EAAI,EAAGA,EAAI2hF,EAAa1hF,OAAQD,IAEvC4hF,EAAe5hF,GAAK2hF,EAAa3hF,GAAK4hF,EAAe5hF,EAAI,GAG3D,MAAMw3E,EAAaoK,EAAeA,EAAe3hF,OAAS,GAE1D,IAAI4hF,EAAW,EACf/B,EAASnoD,SAASpR,IAChB,IAAIve,EAAY,EAChB,MAAM85E,EAAgBD,EAAWt7D,EAAK45D,OAEtC,KAAe0B,EAAWC,EAAeD,IAAY,CACnD,MAAM9wE,EAAS6wE,EAAer7D,EAAK65D,OAAS,GAAKp4E,EACjDwhE,EAAQqY,GAAU55D,IAAIvX,UAAUK,GAGhC/I,GAAawhE,EAAQqY,GAAU55D,IAAIZ,WAAa4iD,EAChD,GAAE,0BAA2B1jD,EAAKA,KAAMs7D,EAAU9wE,OAKtD01B,EAAMC,YAAc8wC,EAAaoI,EAInC,sBAAsBwB,EAAaC,GACjC,IAAIU,EAAYV,EAAM96D,KAAO66D,EAAM76D,KAC/By7D,EAAoB,EAEpBD,EAAY,GAEdC,EAAoBX,EAAMpB,UAAYoB,EAAMnB,aAAe,IAAM,EAC7DkB,EAAMlB,eAAc6B,GAAa,MAGrCC,EAAoBZ,EAAMnB,UAAYmB,EAAMlB,aAAe,IAAM,EAC7DmB,EAAMnB,eAAc6B,GAAa,KAEvC,MAAME,EAAY5+E,KAAKI,IAAIs+E,GAAaC,EAExC,OADA,GAAE,8BAA+BZ,EAAM76D,KAAM86D,EAAM96D,KAAM07D,GAClDA,EAQT,wBAAwB71C,EAAiBliB,GACvC,MAAMg4D,EAA0B,GAC1BC,EAA0C,GAGhD/1C,EAAOzU,SAASkJ,IACd,MAAMuhD,EAAe,IAAIzhF,EAAS,EAAG,GACpBkgC,EAAMma,eACdrjB,SAASx2B,IAChB,GAAIA,EAAEg/B,oBAAqB,OAE3B,MAAMkiD,EAAkBF,EAAYC,EAAaliF,SAE5CmiF,EAIHA,EAAgB/zE,KAAKnN,IAHrB+gF,EAAc5zE,KAAK8zE,EAAaliF,SAChCiiF,EAAYC,EAAaliF,SAAW,CAACiB,IAKvCihF,EAAargF,IAAIZ,EAAE++B,kBAIvB,MAAMoiD,EAAQ,IAAIr0D,EAGb/D,IAAcA,EAAe,KAGlC,MAAM4K,EAAWwtD,EAAM/tD,eAAerK,GAEtCg4D,EAAcvqD,SAAS4qD,IACrB,MAAMngC,EAAY+/B,EAAYI,GAIxBC,EAA4B,GAE5BC,EAAethF,IAEnB,IAAKy0C,EAAYz0C,IAAMA,EAAE8jC,UAAY9jC,EAAEg/B,oBACrC,OAIF,MAAMuiD,EAAYvhF,EAClBuhF,EAAU98E,KAAK+xB,SAAQ,CAAC7E,EAAmB6vD,KACzC,MAAMhjF,EAAM2iF,EAAM9vD,aAAaM,EAAUhzB,MAAM,KAAK,IAG9C8iF,EAAmBjjF,EAAI4kB,YAAc,IACrCs+D,EAAQljF,EAAI/B,KAAOglF,EAInBE,EAAiBhuD,EAASn1B,EAAI/B,QAAUilF,EAIxCE,EAAqBP,EAAgBthD,QAAQ2hD,IAAU,EAc7D,GAXAH,EAAU7gD,eAAelK,SAAQ,CAAC4O,EAAU7hC,KAExCixC,EAAWpP,EAAU2hC,KACrB3hC,EAAShiC,MAAQq+E,GACjBr8C,EAASlQ,YAAcssD,GAEvBD,EAAU7gD,eAAeV,OAAOz8B,EAAO,OAKtCo+E,GAAmBA,GAAkBC,EAAqB,CAG7DjuD,EAASn1B,EAAI/B,MAAQilF,EAGrB,MAAMt+D,EAAa,IAAI2jD,GAAW0a,GAGlCF,EAAUhzC,cAAcizC,EAAUp+D,GAGlCi+D,EAAgBl0E,KAAKu0E,OAKzBH,EAAU7gD,eAAelK,SAAS4O,IAE5BA,EAAS9kC,gBAAkB0mE,GAAezmE,UAC3C6kC,EAA4B64C,gBAAgBznD,QAAQ8qD,OAK3DrgC,EAAUzqB,QAAQ8qD,MAuCZ5zE,QACR,MAAMm0E,EAAY5kF,KAAKmlC,eAAe0mB,WACtC7rD,KAAK0Q,MAAQ,IAAI3B,EAAM/O,KAAKmmB,WAAWvX,KAAMg2E,GAC7C5kF,KAAK0Q,MAAMgC,WAAW,GAElB1S,KAAKqhF,aACPrhF,KAAK6kF,UAAY,IAAI91E,EAAMvG,GAAKohB,gBAAgB,KAAKhb,KAAMg2E,GAC3D5kF,KAAK8kF,WAAa,IAAI/1E,EAAMvG,GAAKohB,gBAAgB,KAAKhb,KAAMg2E,GAC5D5kF,KAAK6kF,UAAUnyE,WAAW,GAC1B1S,KAAK8kF,WAAWpyE,WAAW,IAK/BrP,cACE,OAAOymE,GAAWxmE,SAIpB2lB,WACE,GAAIjpB,KAAKqhF,WAAY,CACnB,MAAMwD,GAAY,QAAQ7kF,KAAK6kF,WACzBC,GAAa,QAAQ9kF,KAAK8kF,YAC1BC,EACJF,EAAUxjF,aAAaiK,MACvBw5E,EAAWzjF,aAAaiK,MACxBtL,KAAKmlC,eAAeg8C,iBACpBnhF,KAAKmlC,eAAei8C,kBACtB,OAAOphF,KAAK0Q,MAAMrP,aAAaiK,MAAQy5E,EAEvC,OAAO/kF,KAAK0Q,MAAMrP,aAAaiK,MAKnC0sB,QAAQ9H,GAUN,OATA,QAAQA,EAAM,gBAAiB,mBAAmBA,KAElDlwB,KAAKkwB,KAAOA,EAGRA,EAAK7sB,gBAAkB+xC,EAAU9xC,WACnCtD,KAAKmlC,eAAe0mB,WAAa,GACjC7rD,KAAKyQ,SAEAzQ,KAITglF,kBAIE,OAHAhlF,KAAKqhF,YAAa,EAClBrhF,KAAKmlC,eAAe0mB,WAAa,GACjC7rD,KAAKyQ,QACEzQ,KAITkK,OACE,MAAM,KACJ/D,EAAI,SACJgpB,EAAQ,MACR7oB,EAAK,WACL+6E,EAAU,QACVhyE,EAAO,QACPC,EAAO,MACPoB,EACAy0B,gBAAgB,iBAAEg8C,EAAgB,kBAAEC,IAClCphF,KAEEmO,EAAMnO,KAAKiK,eACXimB,EAAOlwB,KAAK+3B,oBAClB/3B,KAAKuK,cAGL,MAAMilC,EAAQtf,EAAKkY,mBAAmBjZ,EAAU7oB,GAChD,IAAI2+E,EAAOz1C,EAAM/jC,EAAI4D,EACrB,MAAM61E,EAAO11C,EAAM9jC,EAAI4D,EAGvB,GAFA,GAAE,cAAenJ,EAAM8+E,EAAMC,GAExB7D,EAEE,CACL,MAAMwD,GAAY,QAAQ7kF,KAAK6kF,WACzBC,GAAa,QAAQ9kF,KAAK8kF,YAGhCA,EAAW/xE,OAAO5E,EAAK82E,EAAMC,GAC7BD,GAAQH,EAAWzjF,aAAaiK,MAChC25E,GAAQ7D,EACR6D,GAAQjlF,KAAKmmB,WAAWtR,4BACxBnE,EAAMqC,OAAO5E,EAAK82E,EAAMC,GACxBD,GAAQv0E,EAAMrP,aAAaiK,MAC3B25E,GAAQ9D,EACR0D,EAAU9xE,OAAO5E,EAAK82E,EAAMC,QAb5Bx0E,EAAMqC,OAAO5E,EAAK82E,EAAMC,IC1jBvB,MAAMC,WAAgB/gD,EAO3BhkC,YAAY+F,EAAO+4D,GAAY3X,QAC7Bn3C,MAAM,CAAE0d,SAAU,MAClB9tB,KAAKiH,aAAa,OAAQ,WAE1BjH,KAAKM,QAAU,CACb4sE,OAAQ,IAGV,MAAMD,EAAO/N,GACbl/D,KAAKM,QAAQ4sE,OAAS,CACpB,CAACD,EAAK1lB,QAAS,EACf,CAAC0lB,EAAKxmB,QAAS,GACf,CAACwmB,EAAKJ,KAAM,GACZ,CAACI,EAAKE,cAAe,GACrB,CAACF,EAAKG,YAAa,GACnB,CAACH,EAAKI,aAAc,GACpB,CAACJ,EAAKhmB,MAAO,GAIfjnD,KAAKshC,cAAe,EACpBthC,KAAK8mD,QAAQ3gD,GAIf4nE,UACE,OAAO/tE,KAAKmG,KAId2gD,QAAQ3gD,GAKN,OAJAnG,KAAKmG,KAAuB,iBAATA,EAAoB6mE,GAAQjmB,WAAW5gD,GAAQA,EAGlEnG,KAAK63B,SAAS73B,KAAKM,QAAQ4sE,OAAOltE,KAAKmG,OAChCnG,KAKTkjC,qBAAqBC,GAEnB,OAAOnjC,KAIT6jC,YAEE,OADA7jC,KAAKqjC,iBAAgB,GACdrjC,KAITkK,OACE,MAAMiE,EAAMnO,KAAKiK,gBAvErB,YAAchH,GACRkiF,GAAQ5oD,QAAO,QAAI,mBAAoBt5B,GAuEzC,CAAE,0BAA2BjD,KAAKmkC,gBAC9BnkC,KAAK+I,OAAO/I,KAAKiJ,WAAWkF,GAChC,MAAMi3E,EAAU,IAAIpY,GAAQhtE,KAAKmG,MACjCi/E,EAAQv3E,KAAK7N,KAAKmkC,gBAClBihD,EAAQl7E,KAAKlK,KAAKkT,cACdlT,KAAK+I,OAAO/I,KAAK8J,aAAaqE,GAClCnO,KAAKuK,eC1EF,MAAM86E,WAAiBjhD,EAS5BhkC,YAAY+F,EAAcwgD,EAAejV,GACvCthC,MAAM,CAAE0d,SAAU,MAClB9tB,KAAKiH,aAAa,OAAQ,YAE1BjH,KAAKmG,KAAOA,EACZnG,KAAKslF,SAAW,IAAI1a,GAAKzkE,EAAMwgD,EAAMjV,GACrC1xC,KAAKilB,KAAOjlB,KAAKslF,SAASrgE,KAC1BjlB,KAAK0Q,MAAQ,IAAI3B,EAAM/O,KAAKilB,KAAKrW,KAAM5O,KAAKilB,KAAKnW,OACjD9O,KAAK63B,SAAS73B,KAAK0Q,MAAMrP,aAAaiK,OAGtCtL,KAAKshC,cAAe,EAftB,sBACE,MAAO,WAkBTwlB,QAAQ3gD,EAAcwgD,EAAcjV,GAMlC,OALA1xC,KAAKmG,KAAOA,EACZnG,KAAKslF,SAAW,IAAI1a,GAAKzkE,EAAMwgD,EAAMjV,GACrC1xC,KAAKilB,KAAOjlB,KAAKslF,SAASrgE,KAC1BjlB,KAAK0Q,MAAQ,IAAI3B,EAAM/O,KAAKilB,KAAKrW,KAAM5O,KAAKilB,KAAKnW,OACjD9O,KAAK63B,SAAS73B,KAAK0Q,MAAMrP,aAAaiK,OAC/BtL,KAIT+sE,UACE,OAAO/sE,KAAKilB,KAIdpa,WAAW3B,GAGT,OAFAkH,MAAMvF,WAAW3B,GACjBlJ,KAAK0Q,MAAM7F,WAAW7K,KAAK4K,cACpB5K,KAIT0K,iBACE,OAAO0F,MAAM1F,iBAKfw4B,qBAAqBC,GAEnB,OAAOnjC,KAITqD,cACE,OAAOgiF,GAAS/hF,SAIlBugC,YAEE,OADA7jC,KAAKqjC,iBAAgB,GACdrjC,KAITkK,O,MACE,MAAMmI,EAAQrS,KAAKkT,aACdlT,KAAK0Q,MAAM9F,cACd5K,KAAK0Q,MAAM7F,WAAW7K,KAAK4K,cAG7B5K,KAAKuK,cACL,MAAMg7E,EAAQvlF,KAAKmkC,eAOnB,GALAnkC,KAAK0Q,MAAM0B,SAASC,GACpBrS,KAAK0Q,MAAM6B,UAAUF,EAAMmtB,YAA0B,QAAd,EAAAx/B,KAAKilB,KAAKkD,YAAI,QAAI,GAAK9V,EAAMe,iBACpEpT,KAAK0Q,MAAMyC,cAAcoyE,QAGQ9kF,IAA7BT,KAAKslF,SAAS5zC,WAA0B,CAC1C,MAAMs5B,EAAa,IAAIj8D,EAAM/O,KAAKslF,SAAS5zC,WAAW9iC,KAAM5O,KAAKslF,SAAS5zC,WAAW5iC,OAChFk8D,EAAWpgE,cACdogE,EAAWngE,WAAW7K,KAAK4K,cAE7BogE,EAAW54D,SAASC,GACpB24D,EAAWz4D,UAAUF,EAAMmtB,YAAYx/B,KAAKslF,SAAS5zC,WAAWvpB,MAAQ9V,EAAMe,iBAC9E43D,EAAW14D,UAAUtS,KAAKslF,SAAS5zC,WAAWriC,SAC9C27D,EAAW73D,cAAcoyE,KCpDxB,MAAMC,WAAkBphD,EAe7BhkC,YAAYwqC,GACVx6B,MAAMw6B,GAVE,KAAAz6B,QAAU,CAElBs1E,YAAa,EACbC,aAAc,EAEdp2E,QAAS,GAMTtP,KAAKiH,aAAa,OAAQ,aAG1BjH,KAAK2lF,aAAc,EAGnB3lF,KAAKmoB,KAAOyiB,EAAYziB,MAAQ,EAGhCnoB,KAAKuL,OAAS,GAIhBq+B,QAAQzhB,GAEN,OADAnoB,KAAKmoB,KAAOA,EACLnoB,KAIT4lF,UAAUr6E,GAER,OADAvL,KAAKuL,OAASA,EACPvL,KAKT6lF,eAAeC,GAEb,OADA9lF,KAAK2lF,YAAcG,EACZ9lF,KAIT6jC,YAEE,OADA7jC,KAAKqjC,iBAAgB,GACdrjC,KAITkK,OACE,MAAMiE,EAAMnO,KAAKiK,eACXoI,EAAQrS,KAAKkT,aACnBlT,KAAKuK,cAEL,MAAMw7E,EAAe/lF,KAAKk5B,iBACpB8sD,EAAenuB,GAAY8D,eAAeoqB,GAE1CE,EAAUjmF,KAAKmkC,eACfqvC,EAAQwS,EAAeA,EAAav4E,OAAS4E,EAAM5E,OAAS4E,EAAM4W,WAClEvd,EAAI2G,EAAMmtB,YAAYx/B,KAAKmoB,MAAQ,GAAK,GA5FlD,YAAcllB,GACRuiF,GAAUjpD,QAAO,QAAI,qBAAsBt5B,GA6F7C,CAAE,WAAYjD,KAAK2lF,YAAc,eAAiB,aAAc3lF,KAAKuL,OAAQ,IAAK06E,EAAUzS,GAzFhG,SAAuBrlE,EAAoBgD,GACzC,MAAM80E,EAAU90E,EAAO80E,QACjBzS,EAAQriE,EAAOqiE,MACf9nE,EAAIyF,EAAOzF,EACXw6E,EAAc/0E,EAAO5F,OAAS,EAEpC4C,EAAIsD,YAEAN,EAAOg1E,SACTh4E,EAAIuD,OAAOu0E,EAASv6E,EAAIw6E,GACxB/3E,EAAIwD,OAAO6hE,EAAO9nE,GAClByC,EAAIwD,OAAOs0E,EAASv6E,EAAIw6E,KAExB/3E,EAAIuD,OAAO8hE,EAAO9nE,EAAIw6E,GACtB/3E,EAAIwD,OAAOs0E,EAASv6E,GACpByC,EAAIwD,OAAO6hE,EAAO9nE,EAAIw6E,IAGxB/3E,EAAIO,SACJP,EAAIyyB,YAwEFwlD,CAAcj4E,EAAK,CACjB83E,QAASA,EAAUjmF,KAAKmQ,QAAQs1E,YAChCjS,MAAOA,EAAQxzE,KAAKmQ,QAAQu1E,aAC5Bh6E,EAAGA,EAAI1L,KAAKmQ,QAAQb,QACpB/D,OAAQvL,KAAKuL,OACb46E,QAASnmF,KAAK2lF,eC3GpB,IAAYU,IAAZ,SAAYA,GACV,6BACA,2BAFF,CAAYA,KAAAA,GAAa,KAKlB,MAAMC,WAAcr+E,EAsBzB7H,YAAYmmF,EAAYC,EAAUr2E,GAChCC,QACApQ,KAAKiH,aAAa,OAAQ,SAE1BjH,KAAKmlC,eAAiB,OAAH,QACjBqhB,UAAW,EACXn3C,QAAS,EACTC,QAAS,GACT6f,SAAUm3D,GAAMrvD,SAASwvD,UACzBC,aAAcJ,GAAMrvD,SAASwvD,UAC7BE,QAAQ,EACRC,IAAK,CACH,CAAEn7E,EAAG,EAAGC,EAAG,IACX,CAAED,EAAG,EAAGC,EAAG,MAEVyE,GAGLnQ,KAAKumF,KAAOA,EACZvmF,KAAKwmF,GAAKA,EApCZ,sBACE,OAAOH,GAGT,4BACE,MAAO,CACLQ,SAAUP,GAAMrvD,SAASwvD,UACzBK,QAASR,GAAMrvD,SAAS8vD,UAgC5B3H,SAASmH,EAAYC,GACnB,IAAKD,IAASC,EACZ,MAAM,IAAI,KAAa,eAAgB,2DAKzC,OAFAxmF,KAAKumF,KAAOA,EACZvmF,KAAKwmF,GAAKA,EACHxmF,KAMT4/E,YACE,OAAQ5/E,KAAKumF,OAASvmF,KAAKwmF,GAG7BQ,YAAY71E,GACV,MAAMhD,EAAMnO,KAAKiK,eACX28E,EAAM5mF,KAAKmlC,eAAeyhD,IAE1Bv3E,EAAUrP,KAAKmlC,eAAe91B,QAC9BC,EAAUtP,KAAKmlC,eAAe71B,QAAU6B,EAAOikB,UAE/C6xD,EAAU91E,EAAO81E,QAAU53E,EAC3B63E,EAAU/1E,EAAO+1E,QAAU53E,EAC3B63E,EAASh2E,EAAOg2E,OAAS93E,EACzB+3E,EAASj2E,EAAOi2E,OAAS93E,EACzBk3C,EAAYxmD,KAAKmlC,eAAeqhB,UAEhC6gC,GAAcF,EAASF,IAAYL,EAAI/kF,OAAS,GAEtDsM,EAAIsD,YACJtD,EAAIuD,OAAOu1E,EAASC,GACpB/4E,EAAI0D,cACFo1E,EAAUI,EAAaT,EAAI,GAAGn7E,EAC9By7E,EAAUN,EAAI,GAAGl7E,EAAIyF,EAAOikB,UAC5B+xD,EAASE,EAAaT,EAAI,GAAGn7E,EAC7B27E,EAASR,EAAI,GAAGl7E,EAAIyF,EAAOikB,UAC3B+xD,EACAC,GAEFj5E,EAAI0D,cACFs1E,EAASE,EAAaT,EAAI,GAAGn7E,EAC7B27E,GAAUR,EAAI,GAAGl7E,EAAI86C,GAAar1C,EAAOikB,UACzC6xD,EAAUI,EAAaT,EAAI,GAAGn7E,EAC9By7E,GAAWN,EAAI,GAAGl7E,EAAI86C,GAAar1C,EAAOikB,UAC1C6xD,EACAC,GAEF/4E,EAAIO,SACJP,EAAIyyB,YACJzyB,EAAI2D,OAGN5H,OACElK,KAAKiK,eACLjK,KAAKuK,cAEL,MAAMs0B,EAAa7+B,KAAKumF,KAClB1mD,EAAY7/B,KAAKwmF,GACvB,IAAIS,EACAE,EACAD,EACAE,EACA/sD,EAAiB,EAEjBskC,EAAS,QACT2oB,EAAa,QAEjB,SAAS9uD,EAAYrJ,GACnB,MAA2B,iBAAbA,EAAwBm3D,GAAM5tD,eAAevJ,GAAYA,EAEzE,MAAMA,EAAWqJ,EAAYx4B,KAAKmlC,eAAehW,UAC3Cu3D,EAAeluD,EAAYx4B,KAAKmlC,eAAeuhD,cAarD,GAXIv3D,IAAam3D,GAAMrvD,SAAS8vD,WAC9BpoB,EAAS,OACT2oB,EAAa,QAGXZ,IAAiBJ,GAAMrvD,SAASwvD,UAClCa,EAAa,QACJZ,IAAiBJ,GAAMrvD,SAAS8vD,WACzCO,EAAa,QAGXzoD,EACFooD,EAAUpoD,EAAWkB,eACrB1F,EAAiBwE,EAAWa,mBAC5BwnD,EAAUroD,EAAWc,iBAAiBg/B,OACjC,CAELsoB,EADcpnD,EAAU3sB,aACR2hE,eAChBqS,EAAUrnD,EAAUF,iBAAiBg/B,GAGvC,GAAI9+B,EACFsnD,EAAStnD,EAAUC,cACnBzF,EAAiBwF,EAAUH,mBAC3B0nD,EAASvnD,EAAUF,iBAAiB2nD,OAC/B,CAELH,EADctoD,EAAW3rB,aACV4hE,aACfsS,EAASvoD,EAAWc,iBAAiB2nD,GAUvC,OAPAtnF,KAAKgnF,YAAY,CACfC,QAAAA,EACAE,OAAAA,EACAD,QAAAA,EACAE,OAAAA,EACAhyD,UAAWiF,IAAiD,IAA/Br6B,KAAKmlC,eAAewhD,QAAmB,EAAI,MAEnE,GC9KX,SAAS,MAAK1jF,GACRskF,GAAOhrD,QAAO,QAAI,kBAAmBt5B,GA+C3C,SAASukF,GAAet4D,GACtB,GAAI,kBAAmBA,EAAG,OAAOA,EAAEu4D,cACnC,GAAI,YAAav4D,EAAG,OAAOs4D,GAAet4D,EAAEw4D,SAC5C,MAAMA,EAAUx4D,EAChB,OAAuB,IAAnBw4D,EAAQ7lF,OAAqB2lF,GAAeE,EAAQ,IACjC,IAAnBA,EAAQ7lF,OAAqB,KAC1B6lF,EAAQjgF,IAAI+/E,IAUd,MAAMD,GAWXnnF,YAAYunF,GACV3nF,KAAK2nF,QAAUA,EACf3nF,KAAKmoB,KAAO,GACZnoB,KAAK+pD,IAAM,EACX/pD,KAAK4nF,UA3EY,EAiFnB/hF,MAAMsiB,GACJnoB,KAAKmoB,KAAOA,EACZnoB,KAAK+pD,IAAM,EACX/pD,KAAK4nF,UApFY,EAqFjB,MAAM53E,EAAShQ,KAAK6nF,OAAO7nF,KAAK2nF,QAAQpZ,SAExC,OADAv+D,EAAO43E,SAAW5nF,KAAK4nF,SAChB53E,EAGT83E,UAAUC,IA1FS,IA2Fb/nF,KAAK4nF,WAA2B5nF,KAAK4nF,SAAW5nF,KAAK+pD,KACzD/pD,KAAK+pD,IAAMg+B,EAGbC,eACEhoF,KAAK4nF,UAhGY,EAqGnBK,WAAWC,EAAeC,GAAmB,GAC3C,MAAMC,EAASD,EAAU,IAAIE,OAAO,MAAQH,EAAQ,MAAQ,IAAIG,OAAO,MAAQH,EAAQ,UAEjFl4E,EADchQ,KAAKmoB,KAAKmgE,MAAMtoF,KAAK+pD,KACdx1B,MAAM6zD,GACjC,OAAe,OAAXp4E,EACK,CACLu4E,SAAS,EACTd,cAAez3E,EAAO,GACtBw4E,aAAcx4E,EAAO,GAAGnO,OACxBkoD,IAAK/pD,KAAK+pD,KAGL,CAAEw+B,SAAS,EAAOx+B,IAAK/pD,KAAK+pD,KAQvC0+B,UAAUC,EAAYC,GAAiB,GACrC,MAAMjB,EAA0B,GAC1B39B,EAAM/pD,KAAK+pD,IAEjB,IAAI6+B,GAAa,EACbC,GAAW,EAIf,GAHAF,GAAkB,IAAVA,IAAiC,IAAfD,EAAKC,MAG3BD,EAAKb,OACP,IAAK,MAAMh4E,KAAQ64E,EAAKb,OAAQ,CAC9B,MAAMiB,EAAW9oF,KAAK+pD,IAChB/5C,EAAShQ,KAAK6nF,OAAOh4E,GAI3B,GAAIG,EAAOu4E,SAGT,GAFAb,EAAQx3E,KAAKF,GACb64E,GAAW,EACPH,EAAKK,GAAI,WAGb,GADAH,GAAa,GACRF,EAAKK,GAAI,CACZ/oF,KAAK+pD,IAAM++B,EACX,OAMR,MAAME,EAAUN,EAAKK,IAAMF,GAAaD,EAClCL,EAAUS,IAAoB,IAAVL,EACpBM,EAAaD,EAAS,EAAI,EAOhC,OANIL,IAAUK,IAAQhpF,KAAK+pD,IAAMA,GAC7Bw+B,EACFvoF,KAAKgoF,eAELhoF,KAAK8nF,UAAU/9B,GAEV,CAAEw+B,QAAAA,EAASb,QAAAA,EAASuB,WAAAA,GAK7BC,gBAAgBR,EAAYC,GAAiB,GAC3C,MAAMjB,EAA0B,GAC1B39B,EAAM/pD,KAAK+pD,IACjB,IAAIk/B,EAAa,EACbE,GAAO,EAEX,EAAG,CACD,MAAMn5E,EAAShQ,KAAKyoF,UAAUC,GAC1B14E,EAAOu4E,SAAWv4E,EAAO03E,SAC3BuB,IACAvB,EAAQx3E,KAAKF,EAAO03E,UAEpByB,GAAO,QAEFA,GAET,MAAMZ,EAAUU,EAAa,IAAe,IAAVN,EAOlC,OANIA,GAAWM,EAAa,IAAIjpF,KAAK+pD,IAAMA,GACvCw+B,EACFvoF,KAAKgoF,eAELhoF,KAAK8nF,UAAU/9B,GAEV,CAAEw+B,QAAAA,EAASb,QAAAA,EAASuB,WAAAA,GAI7BG,iBAAiBV,GACf,OAAO1oF,KAAKkpF,gBAAgBR,GAAM,GAMpCb,OAAOwB,GAEL,GADA,GAAE,4BAA6BA,IAC1BA,EACH,MAAM,IAAI,KAAa,yBAEzB,IAAIr5E,EAQJ,MAAM04E,EAAaW,EAASC,KAAKtpF,KAAK2nF,QAAnB0B,GACnB,GAAIX,EAAKR,MAIPl4E,EAAShQ,KAAKioF,WAAWS,EAAKR,OAAwB,IAAjBQ,EAAKP,SACtCn4E,EAAOu4E,UAGTvoF,KAAK+pD,KAAO/5C,EAAOw4E,kBAEhB,KAAIE,EAAKb,OAWd,MADA,GAAEa,GACI,IAAI,KAAa,gDAAkDA,GARvE14E,EADE04E,EAAKa,UACEvpF,KAAKkpF,gBAAgBR,GACrBA,EAAKc,WACLxpF,KAAKopF,iBAAiBV,GAEtB1oF,KAAKyoF,UAAUC,GAU5B,MAAMe,EAAmB,GAQzB,OAPAz5E,EAAOy5E,QAAUA,EACbz5E,EAAO03E,SACT13E,EAAO03E,QAAQnuD,SAASrK,GAAMu6D,EAAQv5E,KAAKs3E,GAAet4D,MAExDw5D,EAAKgB,KAAO15E,EAAOu4E,SACrBG,EAAKgB,IAAI,CAAED,QAAAA,IAENz5E,GClPX,SAAS,MAAK/M,GACR0mF,GAAUptD,QAAO,QAAI,qBAAsBt5B,GDsDxC,GAAAs5B,OAAiB,EChD1B,MAAMqtD,GAGJxpF,YAAYqqD,GACVzqD,KAAKyqD,QAAUA,EAGjB8jB,QACE,OAAOvuE,KAAKulE,KAGdA,OACE,MAAO,CACLsiB,OAAQ,CAAC7nF,KAAK6pF,MAAO7pF,KAAK8pF,OAAQ9pF,KAAK+pF,MAG3CF,QACE,MAAO,CACLhC,OAAQ,CAAC7nF,KAAKgqF,YAAahqF,KAAKiqF,QAChCP,IAAK,IAAM1pF,KAAKyqD,QAAQy/B,eAG5BJ,SACE,MAAO,CACLjC,OAAQ,CAAC7nF,KAAKmqF,MAAOnqF,KAAK6pF,OAC1BL,YAAY,GAGhBS,SACE,MAAO,CACLpC,OAAQ,CAAC7nF,KAAKoqF,SAAUpqF,KAAKitE,KAAMjtE,KAAKqqF,KAAMrqF,KAAKsqF,OAGvDN,cACE,MAAO,CACLnC,OAAQ,CAAC7nF,KAAKuqF,MAAOvqF,KAAKwqF,YAC1BzB,IAAI,GAGRwB,QACE,MAAO,CACL1C,OAAQ,CAAC7nF,KAAKyqF,OAAQzqF,KAAK0qF,MAAO1qF,KAAK2qF,QAEvCjB,IAAMrhD,GAAUroC,KAAKyqD,QAAQmgC,SAASviD,EAAOohD,QAAQ,KAGzDiB,QACE,MAAO,CACL7C,OAAQ,CAAC7nF,KAAK6qF,MACdtB,WAAW,GAGfsB,OACE,MAAO,CACLhD,OAAQ,CAAC7nF,KAAK8qF,SAAU9qF,KAAK+qF,WAAY/qF,KAAKgrF,SAGlDR,aACE,MAAO,CACL3C,OAAQ,CAAC7nF,KAAK8qF,SAAU9qF,KAAK+qF,WAAY/qF,KAAKgrF,QAC9CtB,IAAMrhD,IAEJ,MAAM3iC,EAAI2iC,EACVroC,KAAKyqD,QAAQwgC,cAAcvlF,EAAE+jF,QAAQ,GAAc/jF,EAAE+jF,QAAQ,GAAc/jF,EAAE+jF,QAAQ,MAI3FsB,aACE,MAAO,CACLlD,OAAQ,CAAC7nF,KAAKkrF,WAAYlrF,KAAKmrF,aAC/BxC,OAAO,EACPI,IAAI,GAGRsB,OACE,MAAO,CACLxC,OAAQ,CAAC7nF,KAAKorF,KACd5B,YAAY,EAEZE,IAAMrhD,GAAUroC,KAAKyqD,QAAQ4gC,YAAYhjD,EAAOohD,UAGpDxc,OACE,MAAO,CACL4a,OAAQ,CAAC7nF,KAAKsrF,MAAOtrF,KAAKurF,WAAYvrF,KAAKwrF,OAC3C7C,OAAO,EAEPe,IAAMrhD,GAAUroC,KAAKyqD,QAAQghC,YAAYpjD,EAAOohD,QAAQ,KAG5DW,WACE,MAAO,CACLvC,OAAQ,CAAC7nF,KAAKsrF,MAAOtrF,KAAK0rF,WAC1B/C,OAAO,EAEPe,IAAMrhD,GAAUroC,KAAKyqD,QAAQkhC,gBAAgBtjD,EAAOohD,QAAQ,KAGhEa,OACE,MAAO,CACLzC,OAAQ,CAAC7nF,KAAK4rF,SAAU5rF,KAAK6rF,OAAQ7rF,KAAK8rF,QAAS9rF,KAAK+rF,UACxDpD,OAAO,GAGXmD,UACE,MAAO,CACLjE,OAAQ,CAAC7nF,KAAKmqF,MAAOnqF,KAAK6rF,QAC1BrC,YAAY,GAGhBqC,SAGE,MAAO,CACLhE,OAAQ,CAAC7nF,KAAKgsF,IAAKhsF,KAAKisF,OAAQjsF,KAAKksF,KAErCxC,IAAMrhD,GAAUroC,KAAKyqD,QAAQ0hC,cAAc9jD,EAAOohD,QAAQ,GAAsBphD,EAAOohD,QAAQ,GAL5DnB,MAAM,GAAI,KAQjD4D,MACE,MAAO,CACLrE,OAAQ,CAAC7nF,KAAKosF,KAAMpsF,KAAKqsF,MACzBtD,IAAI,GAIRiD,MACE,MAAO,CAAE9D,MAAO,wBAElBmE,OACE,MAAO,CAAEnE,MAAO,eAElBkE,OACE,MAAO,CAAElE,MAAO,eAElB4C,WACE,MAAO,CAAE5C,MAAO,YAElB8C,SACE,MAAO,CAAE9C,MAAO,UAElBiD,cACE,MAAO,CAAEjD,MAAO,eAElBgD,aACE,MAAO,CAAEhD,MAAO,+CAElBwD,YACE,MAAO,CAAExD,MAAO,aAElBsD,QACE,MAAO,CAAEtD,MAAO,YAElBuC,SACE,MAAO,CAAEvC,MAAO,OAElByC,SACE,MAAO,CAAEzC,MAAO,OAElBiC,QACE,MAAO,CAAEjC,MAAO,OAElBkD,MACE,MAAO,CAAElD,MAAO,OAElBoD,QACE,MAAO,CAAEpD,MAAO,OAElBqD,aACE,MAAO,CAAErD,MAAO,QAElB+D,SACE,MAAO,CAAE/D,MAAO,OAElB0D,WACE,MAAO,CAAE1D,MAAO,OAElB6D,WACE,MAAO,CAAE7D,MAAO,OAElB6B,MACE,MAAO,CAAE7B,MAAO,MAUpB,MAAMoE,GAMJlsF,YAAY0tB,GALZ,KAAAy+D,MAAqB,GAErB,KAAA5nD,KAAe,EAEf,KAAAx0B,QAAmC,GAEjCnQ,KAAK8tB,SAAWA,GAgBb,MAAM0+D,GAWXpsF,YAAYX,GAHZ,KAAAgtF,YAA4B,GAI1BzsF,KAAKP,QAAUA,EACfO,KAAKyQ,QAGPA,MAAMN,EAA0B,IAC9BnQ,KAAKmQ,QAAU,OAAH,QACVme,KAAM,OACNrJ,KAAM,UACH9U,GAELnQ,KAAK0sF,SAAW,CAAEx/D,MAAO,GAAItY,YAAa,IAC1C5U,KAAK2sF,gBAAkB,IACvB3sF,KAAK4sF,aAGP/hC,aACE,OAAO7qD,KAAKP,QAGdotF,cACE,OAAO7sF,KAAK0sF,SAGdI,cAAcC,GACZ/sF,KAAKysF,YAAYv8E,KAAK68E,GAGxBH,aACE,GAAE,cACF5sF,KAAKgtF,MAAQ,IAAIV,GAAMtsF,KAAK2sF,iBAG9BtB,YAAY1mD,GACV,GAAE,eAAgBA,GACdA,IAAM3kC,KAAKgtF,MAAMroD,KAAOA,EAAK9iC,QAGnC8pF,gBAAgB79D,GACd,GAAE,mBAAoBA,GACtB9tB,KAAK2sF,gBAAkB3sF,KAAKgtF,MAAMl/D,SAAWA,GAAY9tB,KAAK2sF,gBAGhElB,YAAYtlF,GACV,GAAE,eAAgBA,GACdA,IAAMnG,KAAKgtF,MAAM7mF,KAAOA,GAG9BgmF,cAAc5qF,EAAaO,GACzB,GAAE,sBAAuBP,EAAK,SAAUO,GACxC9B,KAAKgtF,MAAM78E,QAAQ5O,GAAOO,EAG5BmrF,QAAQ1rF,EAAcs5D,EAAuB5yC,GAC3C,GAAE,WAAY1mB,EAAKs5D,EAAO5yC,GAC1BjoB,KAAKgtF,MAAMT,MAAMr8E,KAAK,CACpB3O,IAAKA,EACLs5D,MAAAA,EACA5yC,OAAAA,IAIJgjE,cAAc1pF,EAAas5D,EAAuB5yC,GAChD,GAAE,iBAAkB1mB,EAAKs5D,EAAO5yC,GAChCjoB,KAAKitF,QAAQ1rF,EAAKs5D,EAAO5yC,GAI3B2iE,SAAS19D,GACP,GAAE,cACsB,iBAAbA,EAAM,GACfltB,KAAKirF,cAAc/9D,EAAM,IAEzBA,EAAMqM,SAASxzB,IACTA,GAAG/F,KAAKitF,WAAYlnF,MAG5B,GAAE,YAGJmkF,cACE,GAAE,eACF,MAAM,QAAEzqF,GAAYO,KAEpB,IAAKP,EAAS,OAEd,MAAM0Q,EAAU,OAAH,wBAAQnQ,KAAKmQ,SAAYnQ,KAAKgtF,MAAM78E,SAI3Cme,GAAO,QAAQne,EAAQme,KAAM,eAAgB,+BAA+BgG,cAE5ErP,GAAO,QAAQ9U,EAAQ8U,KAAM,eAAgB,+BAA+BqP,eAE5E,MAAEi4D,EAAK,SAAEz+D,EAAQ,KAAE6W,EAAI,KAAEx+B,GAASnG,KAAKgtF,MAKvCE,EAAsBr9D,EAAMjb,YAC5BpN,EAAO+kF,EAAM9kF,KAChB0lF,I,MACC,OAAAA,EAAU5rF,KACT2rF,EAAoBllF,SAAwB,QAAf,EAAAmlF,EAAUtyB,aAAK,QAAI,IAAMsyB,EAAUtyB,MAAQ,IACzE,IACAsyB,EAAUllE,UAERmlB,EAAqB,SAAT9e,EAGZ4B,EAAOzwB,EAAQ4pC,UAAU,CAAE7hC,KAAAA,EAAMsmB,SAAAA,EAAU6W,KAAAA,EAAMx+B,KAAAA,EAAM8e,KAAAA,EAAMmoB,UAAAA,IAC9DA,GAAWld,EAAKub,iBAA0B,OAATnd,EAAgB+a,EAAUC,QAAUD,EAAUksB,WAGpF,MAAM3gD,EAA0C,GAChD23E,EAAMhzD,SAAQ,CAAC4zD,EAAsB7mF,KACnC,MAAMu0D,EAAQsyB,EAAUtyB,MACxB,GAAqB,iBAAVA,EAAoB,CAC7B,MAAM10C,EAAa1mB,EAAQqqE,WAAW,CAAE3jE,KAAM00D,IAC9C3qC,EAAKohB,cAAchrC,EAAO6f,GAC1BvR,EAAY1E,KAAKiW,QAEjBvR,EAAY1E,UAAKzP,MAKrB,IAAK,IAAImB,EAAI,EAAGA,EAAI+iC,EAAM/iC,IAAKsuB,EAAK6hB,cAEpC/xC,KAAKysF,YAAYlzD,SAASwzD,GAAeA,EAAW58E,EAAS+f,EAAMlwB,QAEnEA,KAAK0sF,SAASx/D,MAAMhd,KAAKggB,GACzBlwB,KAAK0sF,SAAS93E,YAAY1E,KAAK0E,GAC/B5U,KAAK4sF,cAsBT,SAASQ,GAAMj9E,EAA0B+f,QACpBzvB,IAAf0P,EAAQjK,IACZgqB,EAAKjpB,aAAa,KAAMkJ,EAAQjK,IAIlC,MAAMmnF,GAAsB,UAK5B,SAASC,GAASn9E,EAA6B+f,QACvBzvB,IAAlB0P,EAAQ/J,OACZ+J,EAAQ/J,MAAM1E,MAAM2rF,IAAqB9zD,SAAS1xB,GAAsBqoB,EAAK9lB,SAASvC,KAMjF,MAAM8hF,GAiBXvpF,YAAY+P,EAAqC,IAdjD,KAAAo9E,SAA8B,CAC5BtoE,KAAM,SACN4+B,KAAM,MACNv1B,KAAM,QAYNtuB,KAAKwQ,WAAWL,GAWlBzN,IAAI6qF,GAEF,OADAvtF,KAAKutF,SAAW,OAAH,wBAAQvtF,KAAKutF,UAAaA,GAChCvtF,KAOTwQ,WAAWL,G,MAET,MAAM1Q,EAAU0Q,EAAQ1Q,QAClBgrD,EAAyB,QAAf,EAAAt6C,EAAQs6C,eAAO,QAAI,IAAI+hC,GAAQ/sF,GAe/C,OAbAO,KAAKmQ,QAAU,OAAH,sBACVs8E,YAAa,CAACW,GAAOE,GAAUr3B,GAAau3B,cAAe/jC,EAAe+jC,eAC1EC,cAAc,GACXt9E,GAAO,CACV1Q,QAAAA,EACAgrD,QAAAA,IAGFzqD,KAAKP,QAAUA,EACfO,KAAKyqD,QAAUA,EACfzqD,KAAK2nF,QAAU,IAAIiC,GAAiB5pF,KAAKyqD,SACzCzqD,KAAK0tF,OAAS,IAAInG,GAAOvnF,KAAK2nF,SAC9B3nF,KAAKmQ,QAAQs8E,YAAYlzD,SAASwzD,GAAe/sF,KAAK8sF,cAAcC,KAC7D/sF,KAGT6K,WAAW3B,GAET,OADAlJ,KAAKP,QAAQoL,WAAW3B,GACjBlJ,KAGT6F,MAAMsiB,EAAchY,EAA0B,IAC5CnQ,KAAKyqD,QAAQh6C,MAAMN,GACnB,MAAMH,EAAShQ,KAAK0tF,OAAO7nF,MAAMsiB,GACjC,IAAKnY,EAAOu4E,SAAWvoF,KAAKmQ,QAAQs9E,aAElC,MADA,GAAEz9E,GACI,IAAI,KAAa,uBAAyBmY,GAElD,OAAOnY,EAGTg4B,KAAK9a,EAAoB/c,GAEvB,OADAnQ,KAAKP,QAAQi8C,KAAK,CAAExuB,MAAAA,EAAO/c,QAAAA,IACpB+c,EAGTiS,OAAOjS,EAAoB/c,GAEzB,OADAnQ,KAAKP,QAAQi9B,OAAO,CAAExP,MAAAA,EAAO/c,QAAAA,IACtB+c,EAGTA,MAAM/E,EAAchY,EAA0B,IAG5C,OAFAA,EAAU,OAAH,QAAK8U,KAAMjlB,KAAKutF,SAAStoE,KAAMqJ,KAAMtuB,KAAKutF,SAASj/D,MAASne,GACnEnQ,KAAK6F,MAAMsiB,EAAMhY,GACVnQ,KAAKyqD,QAAQoiC,cAAc3/D,MAGpCuV,MAAMvV,EAAe/c,EAAkE,IAErF,OADAA,EAAU,OAAH,QAAK0zC,KAAM7jD,KAAKutF,SAAS1pC,MAAS1zC,GAClCnQ,KAAKP,QAAQmkD,MAAMzzC,GAAS21C,aAAa54B,GAGlD4/D,cAAcC,GACZ/sF,KAAKyqD,QAAQqiC,cAAcC,IC/f/B,SAAS,MAAK9pF,GACR0qF,GAAapxD,QAAO,QAAI,wBAAyBt5B,GD+Z9C,GAAAs5B,OAAiB,ECrZnB,MAAMoxD,WAAqBvpD,EA8ChChkC,YAAYwtF,GACVx9E,MAAMw9E,GACN5tF,KAAKiH,aAAa,OAAQ,gBAE1BjH,KAAK6tF,SAAWD,EAAY5kE,KAAKsL,cACjCt0B,KAAKmoB,KAAOylE,EAAYzlE,MAAQ,EAChCnoB,KAAKgC,OAAS,GAEdhC,KAAKmlC,eAAiB,OAAH,wBACdnlC,KAAKmlC,gBACL,CACD2oD,gBAAiB,KAIrB,GAAE,sBAAuB9tF,KAAK6tF,UAnDhC,oBACE,MAAO,CACLjoF,EAAG,CACDgJ,KAAM,eACNtD,MAAO,IAET2lE,EAAG,CACDriE,KAAM,eACNtD,MAAO,IAET2jB,EAAG,CACDrgB,KAAM,eACNtD,MAAO,IAET5F,EAAG,CACDkJ,KAAM,mBACNtD,MAAO,IAET4lE,EAAG,CACDtiE,KAAM,WACNtD,MAAO,IAET4jB,EAAG,CACDtgB,KAAM,qBACNtD,MAAO,KA+Bbs+B,QAAQzhB,GAEN,OADAnoB,KAAKmoB,KAAOA,EACLnoB,KAIT6jC,YACE,IAAIgkC,EAAc,EAuBlB,OAnBA7nE,KAAKgC,OAAS,GAEdhC,KAAK6tF,SAASnsF,MAAM,IAAI63B,SAASw0D,IAE/B,MAAMC,EAAaL,GAAa/c,OAAOmd,GACvC,IAAKC,EAAY,MAAM,IAAI,KAAa,+BAAiCD,GAEzE,MAAMpnC,GAAO,QAAQ3mD,KAAKmlC,eAAe2oD,iBACnCp9E,EAAQ,IAAI3B,EAAMi/E,EAAWp/E,KAAM+3C,EAAM,CAAE93C,SAAU,aAG3D7O,KAAKgC,OAAOkO,KAAKQ,GAEjBm3D,GAAemmB,EAAW1iF,SAI5BtL,KAAK63B,SAASgwC,GACd7nE,KAAKqjC,iBAAgB,GACdrjC,KAITkK,OACElK,KAAKuK,cACL,MAAMkB,EAAIzL,KAAKmkC,eACTz4B,EAAI1L,KAAKkT,aAAassB,YAAYx/B,KAAKmoB,MAAQ,GAErD,GAAE,uBAAwBnoB,KAAK6tF,UAE/B,IAAII,EAAWxiF,EACfzL,KAAKgC,OAAOu3B,SAAQ,CAAC7oB,EAAOpK,KAC1B,MAAM4nF,EAAiBluF,KAAK6tF,SAASvnF,GACrCoK,EAAMqC,OAAO/S,KAAKiK,eAAgBgkF,EAAUviF,GAC5CuiF,GAAYN,GAAa/c,OAAOsd,GAAgB5iF,UClGtD,IAAI6iF,GAMJ,SAASC,KACP,IAAKD,GAAgB,CACnB,MAAMv+C,EAAW,IAAI7G,EAAS,CAAEjb,SAAU,IAAKsb,UAAW,MAC1D+kD,GAAiB,CACf9oD,iBAAkBuK,EAASzK,eAAeE,iBAC1CkE,WAAYqG,EAASrG,WACrBj+B,MAAOskC,EAAS3mB,YAGpB,OAAOklE,GAGF,MAAME,WAAyBpmF,EAsBpC7H,YAAYkuF,EAA4Bn+E,GACtCC,QACApQ,KAAKiH,aAAa,OAAQ,oBAE1B,MAAM6H,EAAQ9O,KAAK4I,UAAUtH,aAAa,gBACpC0xE,EAAgBhzE,KAAK4I,UAAUtH,aAAa,mBAAoB,GAEtEtB,KAAKmlC,eAAiB,CACpBopD,aAAa,EACbC,aAAc,GACdC,mBAAoB3/E,EAEpBqZ,KAAM,EAENuwB,yBAA0B,GAE1Bg2C,gBAAiB,EAEjBC,aAAa,EAGbC,2BAA4BpmF,GAAKkc,6BAEnC1kB,KAAKmlC,eAAiB,OAAH,wBAAQnlC,KAAKmlC,gBAAmBh1B,GAEnDnQ,KAAKmlC,eAAeqpD,aAAexb,EAEnChzE,KAAKsuF,mBAAqBA,EAC1BtuF,KAAK6uF,GAAK,CACRn3D,KAAM1sB,IACN2sB,MAAO3sB,KAIX8jF,QACE,OAAO9uF,KAAK6uF,GAGdz8E,SAASC,GAEP,OADArS,KAAKqS,MAAQA,EACNrS,KAGTm5B,WACE,OAAOn5B,KAAKqS,MAGda,aACE,OAAO,QAAQlT,KAAKqS,MAAO,UAAW,kCAGxC08E,SAAS5gF,EAAoBupB,EAAcC,EAAeq3D,GACxD,MAAMtjF,EAAI1L,KAAKkT,aAAassB,YAAYx/B,KAAKmlC,eAAehd,MACtDgvC,EAA2B,IAAhBx/B,EAAQD,GAEzBA,GAAQy/B,EACRx/B,GAASw/B,EAET,MAAM83B,EACOjvF,KAAKmlC,eAAeupD,gBAGjC,IAAIQ,EAA0B,IAANF,EACkBvuF,MAAtCT,KAAKmlC,eAAegqD,iBACtBD,EAAyD,GAArClvF,KAAKmlC,eAAegqD,gBAG1ChhF,EAAIhF,OACJgF,EAAIsD,YACJtD,EAAIuD,OAAOgmB,EAAMhsB,EAAIsjF,GACrB7gF,EAAIwD,OAAO+lB,EAAOu3D,EAAiBvjF,EAAIsjF,GACvC7gF,EAAIwD,OAAO+lB,EAAOu3D,EAAiBvjF,EAAIwjF,GACvC/gF,EAAIwD,OAAOgmB,EAAQs3D,EAAiBvjF,EAAIwjF,GACxC/gF,EAAIwD,OAAOgmB,EAAQs3D,EAAiBvjF,EAAIsjF,GACxC7gF,EAAIwD,OAAOgmB,EAAOjsB,EAAIsjF,GACtB7gF,EAAIwD,OAAOgmB,EAAOjsB,EAAIsjF,GACtB7gF,EAAIwD,OAAOgmB,EAAQs3D,EAAiBvjF,EAAIsjF,GACxC7gF,EAAIwD,OAAOgmB,EAAQs3D,EAAiBvjF,EAAIwjF,GACxC/gF,EAAIwD,OAAO+lB,EAAOu3D,EAAiBvjF,EAAIwjF,GACvC/gF,EAAIwD,OAAO+lB,EAAOu3D,EAAiBvjF,EAAIsjF,GACvC7gF,EAAIwD,OAAO+lB,EAAMhsB,EAAIsjF,GACrB7gF,EAAIyyB,YACJzyB,EAAI2D,OAGNs9E,YAAYjhF,EAAoBupB,EAAcC,EAAeq3D,GAC3D,MAAM38E,EAAQrS,KAAKkT,aACbm8E,EAAKpqF,KAAKC,MAAMlF,KAAKsuF,mBAAqB,GAC1CvoF,EAAI/F,KAAKsuF,mBAAqB,EAC9BgB,EAAKrqF,KAAKC,MAAMa,EAAI,GACpBwpF,EAAKxpF,EAAI,EAETooF,EAAiBC,KACjBoB,EACJrB,EAAe7iF,OAAStL,KAAKmlC,eAAeypD,2BAA6BT,EAAe9oD,kBACpFrjC,EAAS,CACb,EAAG,CACDsJ,MAA8B,GAAvBkkF,EACPjkF,OAAQyjF,GAEV,EAAG,CACD1jF,MAAOkkF,IAIX,IAAIxlD,EAAiC,KAAvBwlD,EAC4B/uF,MAAtCT,KAAKmlC,eAAesqD,iBACtBzlD,EAAUhqC,KAAKmlC,eAAesqD,gBAIhC,IAAIhkF,EAAIisB,EAAwB,IAAhBC,EAAQD,GAAsB,IADhC23D,EAAKrtF,EAAO,GAAGsJ,MAAQgkF,EAAKttF,EAAO,GAAGsJ,MAAQikF,EAAKvtF,EAAO,GAAGsJ,OAAS+jF,EAAKC,EAAKC,EAAK,GAAKvlD,GAExG,MAAM0I,EAAOrgC,EAAMmtB,YAAYx/B,KAAKmlC,eAAehd,KAAO,GACpDunE,EAAUr9E,EAAMmtB,YAAYx/B,KAAKmlC,eAAehd,MAChDyqB,EAAUvgC,EAAMmtB,YAAYx/B,KAAKmlC,eAAehd,KAAO,GAE7Dha,EAAIhF,OACJgF,EAAIxE,eAAe,QACnBwE,EAAItE,aAAa,GAEjB,IAAK,IAAIjI,EAAI,EAAGA,EAAIytF,IAAMztF,EACxBuM,EAAIkyB,SAAS50B,EAAGikF,EAAU1tF,EAAO,GAAGuJ,OAAQvJ,EAAO,GAAGsJ,MAAOtJ,EAAO,GAAGuJ,QACvE4C,EAAIkyB,SAAS50B,EAAGmnC,EAAU5wC,EAAO,GAAGuJ,OAAQvJ,EAAO,GAAGsJ,MAAOtJ,EAAO,GAAGuJ,QACvEE,GAAKzJ,EAAO,GAAGsJ,MAAQ0+B,EAEzB,IAAK,IAAIpoC,EAAI,EAAGA,EAAI0tF,IAAM1tF,EACxBuM,EAAIkyB,SAAS50B,EAAGikF,EAAU1tF,EAAO,GAAGuJ,OAAQvJ,EAAO,GAAGsJ,MAAOtJ,EAAO,GAAGuJ,QACvEE,GAAKzJ,EAAO,GAAGsJ,MAAQ0+B,EAEzB,IAAK,IAAIpoC,EAAI,EAAGA,EAAI2tF,IAAM3tF,EACxBmN,EAAM27B,YAAYv8B,EAAK1C,EAAGinC,EAAM1yC,KAAKmlC,eAAeypD,2BAA4BT,EAAe5kD,YAC/F99B,GAAKzJ,EAAO,GAAGsJ,MAAQ0+B,EAGzB77B,EAAIpE,UAGNG,OACE,MAAMiE,EAAMnO,KAAKiK,eACjBjK,KAAKuK,cAEL,MAAM8H,EAAQrS,KAAKkT,aACb87E,EAAMhvF,KAAKmlC,eAAeuT,yBAEhC,IAAIhhB,EAAOrlB,EAAMq2B,gBACb/Q,EAAQtlB,EAAMuiE,cAIlB,MAAMoC,EAAe3kE,EAAMoxB,aAAa4mC,GAAcpzC,SAAS6zC,OAsB/D,GArB4B,IAAxBkM,EAAan1E,QAAgBm1E,EAAa,GAAG3zE,gBAAkB2pE,GAAQ1pE,WACzEo0B,GAAQs/C,EAAa,GAAG/tD,YAGcxoB,MAApCT,KAAKmlC,eAAewqD,eACtBj4D,EAAOrlB,EAAM5E,OAASzN,KAAKmlC,eAAewqD,cAGHlvF,MAArCT,KAAKmlC,eAAeyqD,gBACtBj4D,EAAQtlB,EAAM5E,OAAS4E,EAAM4W,WAAajpB,KAAKmlC,eAAeyqD,eAGhE5vF,KAAK6uF,GAAGn3D,KAAOA,EACf13B,KAAK6uF,GAAGl3D,MAAQA,EAEZ33B,KAAKmlC,eAAewpD,YACtB3uF,KAAKovF,YAAYjhF,EAAKupB,EAAMC,EAAOq3D,GAEnChvF,KAAK+uF,SAAS5gF,EAAKupB,EAAMC,EAAOq3D,GAG9BhvF,KAAKmlC,eAAeopD,YAAa,CACnC,MAAM1b,EAAW,IAAM7yE,KAAKsuF,mBACtBuB,EAAU,IAAIjd,GAAcC,EAAU,GAAG,GAC/Cgd,EAAQ/gF,MAAQ9O,KAAKmlC,eAAespD,mBACpCoB,EAAQvc,WAAWT,GACnBgd,EAAQz9E,SAASC,GACjBw9E,EAAQhiF,KAAK6pB,EAAwB,IAAhBC,EAAQD,GAA2D,GAA7Cm4D,EAAQxc,UAAU3iE,MAAMrP,aAAaiK,OAChFukF,EAAQld,WAAa3yE,KAAKmlC,eAAeqpD,YACzCqB,EAAQhlF,WAAWsD,GAAKjE,SChO9B,SAAS4lF,GACP3hF,EACA4hF,EACAC,EACAjlF,EACAE,EACAC,EACAC,GAGAgD,EAAIsD,YACJtD,EAAIuD,OAAOq+E,EAAIC,GACf7hF,EAAIwD,OAAO5G,EAAIE,GACfkD,EAAIwD,OAAOzG,EAAIC,GACfgD,EAAIwD,OAAOo+E,EAAIC,GACf7hF,EAAIyyB,YAEJzyB,EAAI2D,OAyGC,MAAMm+E,WAAkBhoF,EAqC7B7H,YAAY8sB,GACV9c,QACApQ,KAAKiH,aAAa,OAAQ,aAE1BjH,KAAKo/E,SAASlyD,GAEdltB,KAAKgpB,KAAO,GAEZhpB,KAAKwP,KAAO,CACVk3C,OAAQ,QACRC,KAAM,GACNC,OAAQ,IAGV5mD,KAAKmlC,eAAiB,CAEpBwqD,aAAc,EACdC,cAAe,EAGfxvD,WAAY,EAEZ8vD,eAAWzvF,EAEX0vF,aAAa,EAEbhqD,WAAO1lC,EAGP2vF,kBAAkB,EAClBC,gBAAgB,EAGhBC,iBAAkB,GAElBC,gBAAiBtrF,KAAK07B,GAAK,EAG3B6vD,uBAAwBP,GAAUQ,qBAAqBjxB,IACvDkxB,mBAAoBT,GAAUU,kBAAkBt5D,QAKpD2O,QAAQx2B,GAEN,OADAxP,KAAKwP,KAAOA,EACLxP,KAGTknD,QAAQl+B,GAEN,OADAhpB,KAAKgpB,KAAOA,EACLhpB,KAITo/E,SAASlyD,GACP,IAAKA,EAAM2R,aAAe3R,EAAM2S,UAC9B,MAAM,IAAI,KAAa,eAAgB,2DAMzC,GAHK3S,EAAMwyD,gBAAexyD,EAAMwyD,cAAgB,CAAC,IAC5CxyD,EAAMyyD,eAAczyD,EAAMyyD,aAAe,CAAC,IAE3CzyD,EAAMwyD,cAAc79E,SAAWqrB,EAAMyyD,aAAa99E,OACpD,MAAM,IAAI,KAAa,eAAgB,qDAQzC,OALA7B,KAAKktB,MAAQA,EACbltB,KAAK6+B,WAAa3R,EAAM2R,WACxB7+B,KAAK0/E,cAAgBxyD,EAAMwyD,cAC3B1/E,KAAK6/B,UAAY3S,EAAM2S,UACvB7/B,KAAK2/E,aAAezyD,EAAMyyD,aACnB3/E,KAIT4wF,iBACE,MAAMziF,EAAMnO,KAAKiK,eACXk7B,EAAiBnlC,KAAKmlC,eAExBA,EAAe+qD,WACjB/hF,EAAI4/C,YAAY5oB,EAAe+qD,WAG7B/qD,EAAe/E,YACjBjyB,EAAItE,aAAas7B,EAAe/E,YAG9B+E,EAAegrD,YACjBhiF,EAAIy/C,WAAW,SAEfz/C,EAAIy/C,WAAW,UAKnBijC,iBACE,MAAM1iF,EAAMnO,KAAKiK,eAEbjK,KAAKwP,MACPrB,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QAG1D,MACMzgB,EADiBnmC,KAAKmlC,eACCgB,MACzBA,IACFh4B,EAAIxE,eAAew8B,GACnBh4B,EAAI1E,aAAa08B,IAKrBj8B,OACE,MAAMiE,EAAMnO,KAAKiK,eACjBjK,KAAKuK,cAEL,MAAMs0B,EAAa7+B,KAAK6+B,WAClBgB,EAAY7/B,KAAK6/B,UACjBsF,EAAiBnlC,KAAKmlC,eAE5Bh3B,EAAIhF,OACJnJ,KAAK4wF,iBAGL,IAAIE,EAAiB,CAAErlF,EAAG,EAAGC,EAAG,GAC5BqlF,EAAe,CAAEtlF,EAAG,EAAGC,EAAG,GAC9B1L,KAAK0/E,cAAcnmD,SAAQ,CAACy3D,EAAapvF,KACvC,MAAMqvF,EAAajxF,KAAK2/E,aAAa/9E,GAGrCkvF,EAAiBjyD,EAAWuJ,mBAAmB,EAAG4oD,GAClDD,EAAelxD,EAAUuI,mBAAmB,EAAG6oD,GAC/C,MAAMC,EAAgBJ,EAAeplF,EAAIqlF,EAAarlF,EAGtDolF,EAAerlF,GAAKozB,EAAWx9B,aAAai4B,WAAa6L,EAAewqD,aACxEoB,EAAatlF,GAAKo0B,EAAUx+B,aAAag4B,UAAY8L,EAAeyqD,cAGpE,MAAMuB,EAAiBtyD,EAAW0I,WAAWte,WACrB4V,EAAWiK,cAAckoD,GAAazoE,WACL,IAAlCsW,EAAWa,qBAChCoxD,EAAerlF,GAAK0lF,EAAiBhsD,EAAewqD,cAI/B9vD,EAAUiJ,cAAcmoD,GAAY1oE,YACH,IAAlCsX,EAAUH,qBAC9BqxD,EAAatlF,GAAK0lF,EAAiBhsD,EAAeyqD,eAIpDkB,EAAeplF,GAAKwlF,GAAiB,EAAI,EACzCH,EAAarlF,GAAKwlF,EAAgB,EAAI,EAnS5C,SACE/iF,EACAijF,EACAC,EACAx0C,GAEA,MAAMy0C,EAAcz0C,EAAOuzC,kBAAoBvzC,EAAOwzC,eAEhDtlF,EAAKqmF,EAAI3lF,EACTR,EAAKmmF,EAAI1lF,EACTR,EAAKmmF,EAAI5lF,EACTN,EAAKkmF,EAAI3lF,EAIT6lF,EAAWtsF,KAAKkI,MAAMjC,EAAKH,IAAOG,EAAKH,IAAOI,EAAKF,IAAOE,EAAKF,IAC/DumF,GAASD,EAAW10C,EAAOyzC,iBAAmB,GAAKiB,EACzD,IAAI/d,EACAie,EACAhf,EACAif,EACA70C,EAAOwzC,gBAAkBiB,GAC3B9d,EAAQvuE,KAAKihC,MAAMn7B,GAAMG,EAAKH,GAAMymF,GACpCC,EAAQxsF,KAAKihC,MAAMj7B,GAAME,EAAKF,GAAMumF,KAEpChe,EAAQtoE,EACRumF,EAAQtmF,GAGN0xC,EAAOuzC,kBAAoBkB,GAC7B7e,EAAU1nE,GAAMG,EAAKH,IAAO,EAAIymF,GAChCE,EAAUzmF,GAAME,EAAKF,IAAO,EAAIumF,KAEhC/e,EAAU1nE,EACV2mF,EAAUzmF,GAGR4xC,EAAO1W,QACTh4B,EAAIxE,eAAekzC,EAAO1W,OAC1Bh4B,EAAI1E,aAAaozC,EAAO1W,QAI1Bh4B,EAAIsD,YACJtD,EAAIuD,OAAO+gE,EAASif,GACpBvjF,EAAIwD,OAAO6hE,EAAOie,GAClBtjF,EAAIO,SACJP,EAAIyyB,YAGJ,MAAM+wD,EAAa1sF,KAAK+uD,MAAM7oD,EAAKF,EAAIC,EAAKH,GAEtCwC,EAAItI,KAAKI,IAAIw3C,EAAOyzC,iBAAmBrrF,KAAK0xC,IAAIkG,EAAO0zC,kBAE7D,IAAIqB,EACAC,EACAC,EACAryD,EACAsyD,EACAnyD,GAEAid,EAAOwzC,gBAAkBiB,KAC3BM,EAASD,EAAa1sF,KAAK07B,GAAKkc,EAAO0zC,gBACvCuB,EAAQ5mF,EAAKjG,KAAK0xC,IAAIi7C,GAAUrkF,EAChCkyB,EAAQt0B,EAAKlG,KAAK2xC,IAAIg7C,GAAUrkF,EAEhCskF,EAASF,EAAa1sF,KAAK07B,GAAKkc,EAAO0zC,gBACvCwB,EAAW7mF,EAAKjG,KAAK0xC,IAAIk7C,GAAUtkF,EACnCqyB,EAAWz0B,EAAKlG,KAAK2xC,IAAIi7C,GAAUtkF,EAEnCuiF,GAAc3hF,EAAK2jF,EAAOryD,EAAOv0B,EAAIC,EAAI4mF,EAAUnyD,KAGjDid,EAAOuzC,kBAAoBkB,KAC7BM,EAASD,EAAa90C,EAAO0zC,gBAC7BuB,EAAQ/mF,EAAK9F,KAAK0xC,IAAIi7C,GAAUrkF,EAChCkyB,EAAQx0B,EAAKhG,KAAK2xC,IAAIg7C,GAAUrkF,EAEhCskF,EAASF,EAAa90C,EAAO0zC,gBAC7BwB,EAAWhnF,EAAK9F,KAAK0xC,IAAIk7C,GAAUtkF,EACnCqyB,EAAW30B,EAAKhG,KAAK2xC,IAAIi7C,GAAUtkF,EAEnCuiF,GAAc3hF,EAAK2jF,EAAOryD,EAAO10B,EAAIE,EAAI8mF,EAAUnyD,IAmNjDoyD,CAAc7jF,EAAK2iF,EAAgBC,EAAc/wF,KAAKmlC,mBAGxDh3B,EAAIpE,UAGJ,MAAM8+C,EAAa16C,EAAIirC,YAAYp5C,KAAKgpB,MAAM1d,MACxCg0D,EAAgBn6B,EAAeurD,mBACrC,IAAIjlF,EAAI,EACR,GAAI6zD,IAAkB2wB,GAAUU,kBAAkBz5D,KAChDzrB,EAAIqlF,EAAerlF,OACd,GAAI6zD,IAAkB2wB,GAAUU,kBAAkBt5D,OAAQ,CAG/D5rB,GAFgBslF,EAAatlF,EAAIqlF,EAAerlF,GACrB,EAAIqlF,EAAerlF,EAC/Bo9C,EAAa,OACnByW,IAAkB2wB,GAAUU,kBAAkB/4D,QACvDnsB,EAAIslF,EAAatlF,EAAIo9C,GAIvB,IAAIn9C,EAAI,EACR,MAAMumF,EAAoB9sD,EAAeqrD,uBAazC,OAZIyB,IAAsBhC,GAAUQ,qBAAqBjxB,IACvD9zD,EAAImzB,EAAW3rB,aAAaw0B,iBACnBuqD,IAAsBhC,GAAUQ,qBAAqBlwB,SAC9D70D,EAAImzB,EAAW3rB,aAAak5B,kBAAkB5jC,GAAKsc,0BAIrD3W,EAAIhF,OACJnJ,KAAK6wF,iBACL1iF,EAAI83B,SAASjmC,KAAKgpB,KAAMvd,EAAGC,GAC3ByC,EAAIpE,UAEG/J,MApNO,GAAAywF,qBAAuB,CACrCjxB,IAAK,EACLe,OAAQ,GAGM,GAAAowB,kBAAoB,CAClCz5D,KAAM,EACNG,OAAQ,EACRO,MAAO,GChKJ,MAAMs6D,WAAkB9tD,EAG7BhkC,YAAYsQ,EAA0B2zB,EAAwBl0B,GAC5DC,MAAMi0B,GACNrkC,KAAKmQ,QAAU,OAAH,QACVgiF,aAAa,EACbhqE,KAAM,GACHhY,GAELnQ,KAAKiH,aAAa,OAAQ,aAG1BjH,KAAKshC,aAAethC,KAAKmQ,QAAQgiF,YAC7BzhF,GACF1Q,KAAKoyF,SAAS1hF,GAIlB0hF,SAAS1hF,GAGP,OAFA1Q,KAAK0Q,MAAQA,EACb1Q,KAAK63B,SAAS73B,KAAK0Q,MAAMrP,aAAaiK,OAC/BtL,KAGT0K,iBACE,OAAO1K,KAAK0Q,MAAMhG,iBAGpBm5B,YAKE,OAJK7jC,KAAK8gC,cAAgB9gC,KAAKq4B,iBAC7Br4B,KAAKq4B,gBAAgBwL,YAEvB7jC,KAAKqjC,iBAAgB,GACdrjC,KAGTk0C,gBACE,MAAM/lC,EAAMnO,KAAKiK,eACjBkE,EAAIgmC,UAAU,aACd,IAAK,IAAIvyC,EAAI,EAAGA,EAAI5B,KAAKkhC,UAAUr/B,OAAQD,IAAK,CAC9C,MAAMumC,EAAWnoC,KAAKkhC,UAAUt/B,GAChCumC,EAASt9B,WAAWsD,GACpBg6B,EAASn+B,gBAEXmE,EAAIkmC,aAENnqC,OACE,MAAMmI,EAAQrS,KAAKkT,aACb/E,EAAMkE,EAAMpI,eAClBjK,KAAKuK,cACL4D,EAAIgmC,UAAU,YAAan0C,KAAK+G,aAAa,OAGxC/G,KAAK0Q,MAAM9F,cACd5K,KAAK0Q,MAAM7F,WAAWsD,GAGxBnO,KAAK0Q,MAAM0B,SAASC,GACpBrS,KAAK0Q,MAAM6B,UAAUF,EAAMmtB,YAAYx/B,KAAKmQ,QAAQgY,MAAkB9V,EAAMe,iBAE5E,MAAM3H,EAAIzL,KAAKoiC,kBAAoBpiC,KAAKmkC,eAAiBnkC,KAAKipB,WAAa,EAAIjpB,KAAKmkC,eACpFnkC,KAAK0Q,MAAMyC,cAAc1H,GACzBzL,KAAKk0C,gBACL/lC,EAAIkmC,cCpED,MAAMg+C,WAAmBH,GAC9B9xF,YAAY+F,EAAck+B,EAAyBl0B,GASjDC,WAAM3P,EAAW,OAAF,QAAIqtB,SAAU,IAAKsT,aAAuB,UAATj7B,GAAqBk+B,GAAcl0B,GACnFnQ,KAAKiH,aAAa,OAAQ,cAE1B,MACMyJ,EAAQ,IAAI3B,EAXJ,CACZ,EAAK,aACL,EAAK,cACL,EAAK,cACLwmC,MAAO,kBAMepvC,IAAS,aACEnG,KAAK4I,UAAUtH,aAAa,mBAAoB,IAAK,CAAEuN,SAAU,eACpG7O,KAAKoyF,SAAS1hF,ICsCX,MAAM4hF,WAAerqF,EAS1B7H,YAAY+Q,EAAiC,IAC3Cf,QACApQ,KAAKiH,aAAa,OAAQ,UAC1BjH,KAAKwQ,WAAWW,GAChBnR,KAAKiQ,MAAQ,GAIfO,WAAWL,EAAkC,IAC3CnQ,KAAKmQ,QAAU,OAAH,sBACV1E,EAAG,GACHC,EAAG,GACHJ,MAAO,IACPinF,mBAAoB,GACpBC,WAAW,EACXC,iBAAiB,EACjBC,gBAAgB,EAChBC,iBAAkB,EAClBC,WAAW,GACRziF,GAAO,CACV0iF,QAAS,OAAF,QACLhU,MAAO,IACJ1uE,EAAQ0iF,SAEbC,cAAe,OAAF,UACR3iF,EAAQ2iF,kBAGsB,IAAjC9yF,KAAKmQ,QAAQsiF,sBAAsD,IAAlBtiF,EAAQ7E,QAC3DtL,KAAKmQ,QAAQqiF,WAAY,GAG3BxyF,KAAKP,QAAUO,KAAKmQ,QAAQ1Q,SAAW,IAAIszF,GAAQ,CAAE3/B,SAAU,CAAEP,UAAW,KAAMvnD,MAAO,EAAGC,OAAQ,KAItGV,WAAW3B,GAGT,OAFAkH,MAAMvF,WAAW3B,GACjBlJ,KAAKP,QAAQoL,WAAW3B,GACjBlJ,KAOTgzF,aAAa7sF,EAAO,UAMlB,OALAnG,KAAKizF,UAAYjzF,KAAKP,QAAQymD,eAAe,CAC3CI,UAAWtmD,KAAKiQ,MAAM,GAAGoC,MACzBk0C,aAAcvmD,KAAKiQ,MAAMjQ,KAAKiQ,MAAMpO,OAAS,GAAGwQ,MAChDlM,KAAAA,IAEKnG,KAAKizF,UAoBdC,SAASC,GACP,IAAI9gF,EAAQ8gF,EAAY9gF,MACnBA,IACHA,EAAQrS,KAAKP,QAAQ8zE,MAAM,CACzB9nE,EAAGzL,KAAKmQ,QAAQ1E,EAChBC,EAAG1L,KAAKmQ,QAAQzE,EAChBJ,MAAOtL,KAAKmQ,QAAQ7E,MACpB6E,QAAS,OAAF,QACL0jE,UAAU,GACPsf,EAAYhjF,YAKrB,MAAMgB,EAAM,6BACVkB,MAAAA,EACA27B,OAAQ,GACRolD,WAAY,EACZC,WAAY,EACZC,kBAAkB,GACfH,GAAW,CACdhjF,QAAS,OAAF,QACL0jE,UAAU,GACPsf,EAAYhjF,WAanB,OATAgB,EAAO68B,OAAOzU,SAASkJ,GACrBA,EACG53B,WAAW7K,KAAK4K,cAChBwH,SAASjB,EAAOkB,OAChBuqC,eACArjB,SAASwrB,GAAaA,EAAS3yC,SAASjB,EAAOkB,WAGpDrS,KAAKiQ,MAAMC,KAAKiB,GACTA,EAAOkB,MAIhBo5C,SACE,IAAIytB,EAAe,EACnB,MAAM3tB,EAAY,IAAI/tB,GAAU,OAAD,UAAMx9B,KAAKmQ,QAAQ0iF,UAClD7yF,KAAKurD,UAAYA,EAEjB,IAAI7/C,EAAI1L,KAAKmQ,QAAQzE,EACjB+vD,EAAS,EACT83B,EAAqB,GACzB,MAAMC,EAAoD,GAG1DxzF,KAAKiQ,MAAMspB,SAASk6D,IAClB/nF,GAAQ+nF,EAAKphF,MAAMqvB,MAAM+xD,EAAKL,YAC9BK,EAAKphF,MAAMvE,KAAKpC,GACZ1L,KAAKmQ,QAAQqiF,UACfiB,EAAKzlD,OAAOzU,SAASkJ,IACnB8oB,EAAUC,WAAW,CAAC/oB,OAGxB8oB,EAAUC,WAAWioC,EAAKzlD,QAE5BtiC,GAAQ+nF,EAAKphF,MAAMqvB,MAAM+xD,EAAKJ,YAC9B3nF,GAAQ+nF,EAAKphF,MAAMqvB,MAAM1hC,KAAKmQ,QAAQoiF,oBAClCkB,EAAKH,mBACPE,EAAmBtjF,KAAK,CAAExE,EAAAA,EAAG+2B,MAAOgxD,EAAKzlD,OAAO,KAChDtiC,GAAK,IAEP6nF,EAAYA,EAAUlnB,OAAOonB,EAAKzlD,QAElCytB,EAASx2D,KAAKsJ,IAAIktD,EAAQg4B,EAAKphF,MAAMq2B,oBAIvC1oC,KAAKiQ,MAAMspB,SAASk6D,GAASA,EAAKphF,MAAMqiE,cAAcjZ,KAClDz7D,KAAKmQ,QAAQqiF,WACftZ,EAAe3tB,EAAUuvB,0BAA0ByY,GACnDvzF,KAAKiQ,MAAMspB,SAASk6D,IAClBA,EAAKphF,MAAMwlB,SAASqhD,EAAe3F,GAAMmgB,cAAgBj4B,EAASz7D,KAAKmQ,QAAQ1E,QAGjFytE,EAAel5E,KAAKmQ,QAAQyiF,UACxB5yF,KAAKmQ,QAAQ7E,MAAQtL,KAAKmQ,QAAQ1E,EAClCzL,KAAKmQ,QAAQ7E,OAASmwD,EAASz7D,KAAKmQ,QAAQ1E,GAAK8nE,GAAM0L,eAE7D1zB,EAAUE,OAAO8nC,EAAWvzF,KAAKmQ,QAAQsiF,gBAAkB,EAAIvZ,EAAcl5E,KAAKmQ,QAAQ2iF,eAE1F,IAAK,IAAIlxF,EAAI,EAAGA,EAAI5B,KAAKmQ,QAAQwiF,iBAAkB/wF,IACjD2pD,EAAUqzB,KAAK,CAAEC,MAAO7+E,KAAKmQ,QAAQ0iF,QAAQhU,QAG/C7+E,KAAKy7D,OAASA,EACdz7D,KAAKwzF,mBAAqBA,EAC1BxzF,KAAK2zF,MAAQjoF,EACb1L,KAAK2K,YAAc,IAAI0C,EAAYrN,KAAKmQ,QAAQ1E,EAAGzL,KAAKmQ,QAAQzE,EAAG1L,KAAKmQ,QAAQ7E,MAAOtL,KAAK2zF,MAAQ3zF,KAAKmQ,QAAQzE,GAInHxB,OAEE,MAAMiE,EAAMnO,KAAKiK,eACjB,KAAKjK,KAAKurD,WAAcvrD,KAAKy7D,QAAWz7D,KAAK2zF,OAAU3zF,KAAKwzF,oBAC1D,MAAM,IAAI,KAAa,aAAc,0CAEvCxzF,KAAKuK,cAEDvK,KAAKmQ,QAAQuiF,gBACfl1D,GAAUo2D,cAAczlF,EAAKnO,KAAKurD,UAAWvrD,KAAKy7D,OAAQz7D,KAAKmQ,QAAQzE,EAAG1L,KAAK2zF,OAGjF3zF,KAAKwzF,mBAAmBj6D,SAAS91B,IAC/BA,EAAEg/B,MAAMma,eAAerjB,SAASwrB,GAAa3gB,EAAKyvD,YAAY1lF,EAAK42C,EAAUthD,EAAEiI,SCpP9E,MAAMooF,WAAoB1vD,EAG/BhkC,YAAYyyE,EAAkBC,GAC5B1iE,MAAM,CAAE0d,SAAU,MAClB9tB,KAAKiH,aAAa,OAAQ,eAE1B,MAAM+qE,EAAgB,IAAIY,GAAcC,EAAUC,GAClD9yE,KAAK+zF,YAAc/hB,EAAcqB,UACjCrzE,KAAK63B,SAAS73B,KAAK+zF,YAAYrjF,MAAMrP,aAAaiK,OAGlDtL,KAAKshC,cAAe,EAKtB4B,qBAAqBC,GAEnB,OAAOnjC,KAGT6jC,YAEE,OADA7jC,KAAKqjC,iBAAgB,GACdrjC,KAGTkK,OACE,MAAMmI,EAAQrS,KAAKkT,aACb/E,EAAMnO,KAAKiK,eACjBjK,KAAKuK,cAEAvK,KAAK+zF,YAAYrjF,MAAM9F,cAC1B5K,KAAK+zF,YAAYrjF,MAAM7F,WAAWsD,GAGpCnO,KAAK+zF,YAAYrjF,MAAM0B,SAASC,GAChCrS,KAAK+zF,YAAYrjF,MAAM6B,UAAUF,EAAMmtB,YAAY,GAAKntB,EAAMe,iBAC9DpT,KAAK+zF,YAAYrjF,MAAMyC,cAAcnT,KAAKmkC,iBCtCvC,MAAM6vD,WAAmB5vD,EAG9BhkC,YAAY4rB,EAAiBk/C,EAAuBC,GAClD/6D,MAAM,CAAE0d,SAAU,MAClB9tB,KAAKiH,aAAa,OAAQ,cAE1BjH,KAAK8rB,aAAe,IAAIm/C,GAAaj/C,EAASk/C,EAAeC,GAG7DnrE,KAAKshC,cAAe,EAKtB4B,qBAAqBC,GAEnB,OAAOnjC,KAGT6jC,YAIE,OAHA7jC,KAAKqjC,iBAAgB,GACrBrjC,KAAK8rB,aAAa1Z,SAASpS,KAAKkT,cAChClT,KAAK63B,SAAS73B,KAAK8rB,aAAa7C,YACzBjpB,KAGTkK,OACE,MAAMiE,EAAMnO,KAAKkT,aAAajJ,eAC9BjK,KAAKuK,cACLvK,KAAK8rB,aAAaje,KAAK7N,KAAKmkC,gBAC5BnkC,KAAK8rB,aAAajhB,WAAWsD,GAC7BnO,KAAK8rB,aAAa5hB,QCpBtB,SAAS+pF,GAAe5zF,EAAc6I,EAAwBuC,EAAWC,EAAWoD,GAClF,MAAMk/E,EAAakG,GAAatjB,OAAOvwE,GACzB,IAAI0O,EAAMi/E,EAAWp/E,KAAME,EAAO,CAAED,SAAU,iBACtDkE,OAAO7J,EAASuC,EAAIuiF,EAAW3+E,QAAS3D,EAAIsiF,EAAW1+E,SAUxD,MAAM4kF,WAAqBjsF,EAgFhC7H,YAAY8sB,GACV9c,QACApQ,KAAKiH,aAAa,OAAQ,gBAE1BjH,KAAKktB,MAAQA,EACbltB,KAAKmG,KAAO+tF,GAAa/tF,KAAKq9D,KAC9BxjE,KAAKmoB,KAAO,EAGZnoB,KAAKm0F,oBAAsB,GAC3Bn0F,KAAKo0F,oBAAsB,GAE3Bp0F,KAAKwP,KAAO,CACVk3C,OAAQ,kBACRC,KAAM,GACNC,OAAQ,eAGV5mD,KAAKmlC,eAAiB,CACpBkvD,eAAgB,GAChBC,kBAAmB,EACnBC,mBAAoB,EACpBpuD,MAAO,SAxDX2gB,QAAQ3gD,GAMN,OALAA,EAAuB,iBAATA,EAAoB+tF,GAAantC,WAAW5gD,GAAQA,IAEtD+tF,GAAa/tF,KAAKq9D,MAAQr9D,GAAQ+tF,GAAa/tF,KAAKquF,QAC9Dx0F,KAAKmG,KAAOA,GAEPnG,KAOT,qBAAqBktB,GAEnB,OADc,IAAIgnE,GAAahnE,GAKjC,uBAAuBA,GACrB,MAAMunE,EAAQ,IAAIP,GAAahnE,GAG/B,OAFAunE,EAAM3tC,QAAQotC,GAAa/tF,KAAKquF,OAChCC,EAAMC,cAAc,cACbD,EAIT,sBAAsBvnE,GACpB,MAAMunE,EAAQ,IAAIP,GAAahnE,GAG/B,OAFAunE,EAAM3tC,QAAQotC,GAAa/tF,KAAKq9D,MAChCixB,EAAMC,cAAc,YAAa,aAC1BD,EAiCTC,cAAcC,EAAiBxtB,GAG7B,OAFAnnE,KAAKm0F,oBAAsBQ,GAAW,GACtC30F,KAAKo0F,oBAAsBjtB,GAAW,GAC/BnnE,KAIT4pC,QAAQzhB,GAEN,OADAnoB,KAAKmoB,KAAOA,EACLnoB,KAIT40F,gBACE,MAAMzmF,EAAMnO,KAAKiK,eACjB,IACI4qF,EACAC,EAFAC,GAAqB,EAKzB/0F,KAAKktB,MAAMqM,SAAQ,CAACrJ,EAAM5pB,EAAO4mB,KAE/B6nE,GAAsBA,EAGtB,MAAMtpF,EAAIykB,EAAKiU,eACTz4B,EAAIwkB,EAAKhd,aAAak5B,kBAAkBpsC,KAAKmoB,KAAO,GAG1D,GAAI1c,EAAIopF,EACN,MAAM,IAAI,KAAa,uBAAwB,gEAMjD,MAAMG,EAAe9nE,EAAM5mB,EAAQ,KAAO4pB,EACpC+kE,EAAe/nE,EAAM5mB,EAAQ,KAAO4pB,EAE1C,IAAI7gB,EAAU,EACd,MAAMP,EAAQ9O,KAAK4I,UAAUtH,aAAa,gBAAgByzF,EAAqB,OAAS,cAExF,GAAIA,EAIF,GAFA1lF,EAAU4lF,EAAe,EAAI,EAEzBj1F,KAAKmG,OAAS+tF,GAAa/tF,KAAKquF,OAAUS,EAc5C9mF,EAAIsD,YACJtD,EAAIuD,OAAOjG,EAAGC,EAAI1L,KAAKmlC,eAAekvD,gBACtClmF,EAAIwD,OAAOlG,EAAI4D,EAAS3D,GACxByC,EAAIO,SACJP,EAAIyyB,iBAhBJ,GAAI5gC,KAAKm0F,oBAAqB,CAE5B,MAAMtrC,EAAa16C,EAAIirC,YAAYp5C,KAAKm0F,qBAAqB7oF,MAC7D6C,EAAI83B,SAASjmC,KAAKm0F,oBAAqB1oF,EAAIo9C,EAAa,EAAGn9C,GAC3D2D,EAAUw5C,EAAa,EAAI7oD,KAAKmlC,eAAemvD,uBAG/CL,GAAe,gBAAiB9lF,EAAK1C,EAAGC,EAAGoD,GAC3CO,EAAU,GAAKrP,KAAKmlC,eAAemvD,uBAYvCjlF,EAAU2lF,GAAgB,EAAI,EAG9B7mF,EAAIsD,YACJtD,EAAIuD,OAAOmjF,EAAQC,GACnB3mF,EAAIwD,OAAOlG,EAAI4D,EAAS3D,GACxByC,EAAIwD,OAAOlG,EAAGC,EAAI1L,KAAKmlC,eAAekvD,gBACtClmF,EAAIO,SACJP,EAAIyyB,YAINi0D,EAASppF,EAAI4D,EACbylF,EAASppF,KAQbwpF,WACE,MAAM/mF,EAAMnO,KAAKiK,eACjB,IAAI8qF,GAAqB,EAGzB/0F,KAAKktB,MAAMqM,SAASrJ,IAClB6kE,GAAsBA,EACtB,MAAM1iF,EAAQ6d,EAAKhd,aACbzH,EAAIykB,EAAKiU,eACTz4B,EAAI2G,EAAM+5B,kBAAkBpsC,KAAKmoB,KAAO,GAExCrZ,EAAQ9O,KAAK4I,UAAUtH,aAAa,gBAAgByzF,EAAqB,OAAS,cAExF,IAAIlsC,EAAa,EACbksC,EACE/0F,KAAKm0F,qBACPtrC,EAAa16C,EAAIirC,YAAYp5C,KAAKm0F,qBAAqB7oF,MACvD6C,EAAI83B,SAASjmC,KAAKm0F,oBAAqB1oF,EAAIo9C,EAAa,EAAGn9C,IAE3DuoF,GAAe,gBAAiB9lF,EAAK1C,EAAGC,EAAGoD,GAGzC9O,KAAKo0F,qBACPvrC,EAAa16C,EAAIirC,YAAYp5C,KAAKo0F,qBAAqB9oF,MACvD6C,EAAI83B,SAASjmC,KAAKo0F,oBAAqB3oF,EAAIo9C,EAAa,EAAGn9C,IAE3DuoF,GAAe,gBAAiB9lF,EAAK1C,EAAGC,EAAGoD,MAOnD5E,OACE,MAAMiE,EAAMnO,KAAKiK,eACjBjK,KAAKuK,cAEL4D,EAAIhF,OACJgF,EAAIxE,eAAe3J,KAAKmlC,eAAegB,OACvCh4B,EAAI1E,aAAazJ,KAAKmlC,eAAegB,OACrCh4B,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QArQ5D,YAAc3jD,GACRixF,GAAa33D,QAAO,QAAI,wBAAyBt5B,GAsQnD,CAAE,2BAEEjD,KAAKmG,OAAS+tF,GAAa/tF,KAAKyiD,SAAW5oD,KAAKmG,OAAS+tF,GAAa/tF,KAAKquF,OAC7ErmF,EAAItE,aAAa7J,KAAKmlC,eAAeovD,oBACrCv0F,KAAK40F,iBACI50F,KAAKmG,OAAS+tF,GAAa/tF,KAAKq9D,MACzCxjE,KAAKk1F,WAGP/mF,EAAIpE,WCjQR,SAAS,MAEJ9G,GACCkyF,GAAY54D,QAAO,QAAI,uBAAwBt5B,GAGrD,IAAYmyF,GDmBM,GAAAxkB,OAA6E,CAC3FykB,cAAe,CACbzmF,KAAM,mBACNS,SAAU,GACVC,QAAS,GAEXgmF,cAAe,CACb1mF,KAAM,kBACNS,SAAU,EACVC,QAAS,IAKG,GAAAnJ,KAAO,CACrBq9D,KAAM,EACN5a,QAAS,EACT4rC,MAAO,GAIO,GAAAztC,WAAqC,CACnD/9B,KAAMkrE,GAAa/tF,KAAKq9D,KACxBpa,QAAS8qC,GAAa/tF,KAAKyiD,QAC3B2sC,MAAOrB,GAAa/tF,KAAKquF,OC3C7B,SAAYY,GACV,iBACA,wBAFF,CAAYA,KAAAA,GAAmB,KAKxB,MAAMD,WAAoBltF,EA2C/B7H,aAAY,MAAEovC,EAAK,KAAEgmD,EAAI,KAAExsE,EAAO,GAAE,YAAEynD,EAAc,GAAE,SAAEthD,EAAWgmE,GAAYl+D,SAASuoC,MACtFpvD,QACApQ,KAAKiH,aAAa,OAAQ,eAE1BjH,KAAKwvC,MAAQA,EACbxvC,KAAKw1F,KAAOA,EAEZx1F,KAAKgpB,KAAOA,EACZhpB,KAAKywE,YAAcA,EAEnBzwE,KAAKmvB,SAA+B,iBAAbA,EAAwBgmE,GAAYz8D,eAAevJ,GAAYA,EAEtFnvB,KAAKmoB,KAAO,EAEZnoB,KAAKwP,KAAO,CACVk3C,OAAQ,QACRC,KAAM,GACNC,OAAQ,UAGV5mD,KAAKmlC,eAAiB,CACpBuvB,QAAQ,EACR1G,KAAM,CAAC,GACP7nB,MAAO,QACP/F,WAAY,EACZq1D,cAAc,EACdpB,eAAgB,EAIhBqB,uBAAuB,GAnD3B,uBAEE,OADA,GAAE,kDACKP,GAAYl+D,SAGrB,sBACE,OAAOm+D,GAGT,6BAEE,OADA,GAAE,8DACKD,GAAYQ,gBAGrB,4BACE,MAAO,CACLjlD,IAAKykD,GAAYl+D,SAASuoC,IAC1BlK,OAAQ6/B,GAAYl+D,SAASspC,QAuCjCt3D,WAAWC,GAOT,OALAA,EAAQ88B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAM3mD,KAAKwP,KAAKo3C,QAC5D19C,EAAQS,eAAe3J,KAAKmlC,eAAegB,OAC3Cj9B,EAAQO,aAAazJ,KAAKmlC,eAAegB,OACzCj9B,EAAQW,aAAa7J,KAAKmlC,eAAe/E,YAElCpgC,KAKTo1D,UAAUV,EAAiB1G,GAGzB,OAFAhuD,KAAKmlC,eAAeuvB,OAASA,EACzB1G,IAAMhuD,KAAKmlC,eAAe6oB,KAAOA,GAC9BhuD,KAITgmC,QAAQx2B,GAGN,OADAxP,KAAKwP,KAAO,OAAH,wBAAQxP,KAAKwP,MAASA,GACxBxP,KAGT4pC,QAAQzhB,GAEN,OADAnoB,KAAKmoB,KAAOA,EACLnoB,KAITkK,OACE,MAAMiE,EAAMnO,KAAKiK,eACjBjK,KAAKuK,cAEL,IAAImB,EAAI,EACR,OAAQ1L,KAAKmvB,UACX,KAAKgmE,GAAYl+D,SAASuoC,IACxB9zD,EAAI1L,KAAKwvC,MAAMt8B,aAAaw0B,eAAe1nC,KAAKmoB,MAChD,MACF,KAAKgtE,GAAYl+D,SAASspC,OACxB70D,EAAI1L,KAAKwvC,MAAMt8B,aAAak5B,kBAAkBpsC,KAAKmoB,KAAO3f,GAAKsc,yBAC/D,MACF,QACE,MAAM,IAAI,KAAa,kBAAmB,gBAAgB9kB,KAAKmvB,wBAInE,MAAMqgB,EAAQ,CAAE/jC,EAAGzL,KAAKwvC,MAAMrL,eAAgBz4B,EAAAA,GACxC8pF,EAAO,CAAE/pF,EAAGzL,KAAKw1F,KAAKrxD,eAAgBz4B,EAAAA,GAE5C,GAAE,gCAAiC8jC,EAAO,QAASgmD,EAAM,KAAM9pF,GAE/D,MAAM2oF,EAAiBr0F,KAAKmlC,eAAekvD,eAAiBr0F,KAAKmvB,SAEjEhhB,EAAIhF,OACJnJ,KAAKiJ,WAAWkF,GAGhBA,EAAI83B,SAASjmC,KAAKgpB,KAAMwmB,EAAM/jC,EAAG+jC,EAAM9jC,GAGvC,MAAMkqF,EAAaznF,EAAIirC,YAAYp5C,KAAKgpB,MAAM1d,MACxCuqF,EAAc1nF,EAAIirC,YAAY,KAAK9tC,MAGnCwqF,EAAUtmD,EAAM9jC,EAAImqF,EAAc,IAGxC1nF,EAAI63B,QAAQhmC,KAAKwP,KAAKk3C,OAAQ1mD,KAAKwP,KAAKm3C,KAAO,IAAK3mD,KAAKwP,KAAKo3C,QAC9Dz4C,EAAI83B,SAASjmC,KAAKywE,YAAajhC,EAAM/jC,EAAImqF,EAAa,EAAGE,GAGzD,MAAMC,EAAoB5nF,EAAIirC,YAAYp5C,KAAKywE,aAAanlE,MACtD0qF,EAAe7nF,EAAIirC,YAAY,KAAK9tC,MAG1C,IAAImnE,EAAUjjC,EAAM/jC,EAChBwqF,EAASH,EACb,MAAMtiB,EAAQgiB,EAAK/pF,EAAIzL,KAAKw1F,KAAKjuD,WAAWte,WAGxCjpB,KAAKmvB,WAAagmE,GAAYl+D,SAASuoC,KACzCiT,GAAWmjB,EAAaG,EAAoB,EAC5CE,GAAUD,EAAe,KAChBh2F,KAAKmvB,WAAagmE,GAAYl+D,SAASspC,SAChD01B,GAAUD,EAAe,IACzBvjB,GAAWmjB,EAAa,EAEnB51F,KAAKmlC,eAAeuwD,wBACvBjjB,GAAWsjB,IAIX/1F,KAAKmlC,eAAeuvB,QAEtBhC,GAASgD,eAAevnD,EAAKskE,EAASwjB,EAAQziB,EAAOyiB,EAAQj2F,KAAKmlC,eAAe6oB,MAE7EhuD,KAAKmlC,eAAeswD,cACtB/iC,GAASgD,eACPvnD,EACAqlE,EACAyiB,EAAS,EAAIj2F,KAAKmvB,SAClBqkD,EACAyiB,EAAS5B,EACTr0F,KAAKmlC,eAAe6oB,QAIxB7/C,EAAIsD,YACJtD,EAAIuD,OAAO+gE,EAASwjB,GAEpB9nF,EAAIwD,OAAO6hE,EAAOyiB,GACdj2F,KAAKmlC,eAAeswD,cAEtBtnF,EAAIwD,OAAO6hE,EAAOyiB,EAAS5B,GAE7BlmF,EAAIO,SACJP,EAAIyyB,aAGNzyB,EAAIpE,WC3ND,MAAMmsF,WAAuBjuF,EAqBlC7H,YAAY+1F,GACV/lF,QACApQ,KAAKiH,aAAa,OAAQ,kBAE1BjH,KAAKwvC,MAAQ2mD,EAAa3mD,MAC1BxvC,KAAKw1F,KAAOW,EAAaX,KAEzBx1F,KAAKmoB,KAAO,EAEZnoB,KAAKmlC,eAAiB,CACpB0jC,OAAO,EACPE,YAAa,EACbC,WAAY,EACZC,WAAY,EACZH,cAAe,GAKnBl/B,QAAQzhB,GAEN,OADAnoB,KAAKmoB,KAAOA,EACLnoB,KAITqpE,SAASR,GAEP,OADA7oE,KAAKmlC,eAAe0jC,MAAQA,EACrB7oE,KAITkK,OACE,MAAMiE,EAAMnO,KAAKiK,eACjBjK,KAAKuK,cACL,MAAMmB,EACH1L,KAAKwvC,OAASxvC,KAAKwvC,MAAMt8B,aAAaw0B,eAAe1nC,KAAKmoB,OAC1DnoB,KAAKw1F,MAAQx1F,KAAKw1F,KAAKtiF,aAAaw0B,eAAe1nC,KAAKmoB,OACzD,EAGIsqD,EACHzyE,KAAKwvC,OAASxvC,KAAKwvC,MAAMrL,gBAAoBnkC,KAAKw1F,MAAQx1F,KAAKw1F,KAAKtiF,aAAa2hE,gBAAmB,EAGjGuhB,EACHp2F,KAAKw1F,MAAQx1F,KAAKw1F,KAAKrxD,eAAiBnkC,KAAKw1F,KAAKvsE,WAAa,GAC/DjpB,KAAKwvC,OAASxvC,KAAKwvC,MAAMt8B,aAAa4hE,aAAe,IACtD,EAEF90E,KAAKmlC,eAAe2jC,cAAgBstB,EAAS3jB,EA7EjD,YAEKxvE,GACCizF,GAAe35D,QAAO,QAAI,0BAA2Bt5B,GA4EvD,CAAE,qCAAsCwvE,EAAS,UAAW2jB,EAAQ,KAAM1qF,GAE1Ek9D,GAAQY,cAAcr7D,EAAKskE,EAAS/mE,EAAG1L,KAAKmlC,iBChFzC,MAAMkxD,WAAkB1rD,EAE7BvqC,YAAYk2F,GAEV,IAAKA,EACH,MAAM,IAAI,KAAa,eAAgB,wEAGzC,IAAI1rD,EAGJ,GAAyB,iBAAd0rD,EACT1rD,EAAc,CAAE9c,SAAUwoE,OACrB,IAAyB,iBAAdA,EAGhB,MAAM,IAAI,KACR,eACA,wEAJF1rD,EAAc0rD,EAQhBlmF,MAAMw6B,GACN5qC,KAAKiH,aAAa,OAAQ,aAG1BjH,KAAK63B,SAAS,GAMhBgP,SACE,OAAO,EAGTz0B,SAASC,GAEP,OADAjC,MAAMgC,SAASC,GACRrS,KAKTkjC,qBAAqBC,GAEnB,OAAOnjC,KAGT6jC,YAEE,OADA7jC,KAAKqjC,iBAAgB,GACdrjC,KAGTkK,OAEElK,KAAKuK,cACL,IAAK,IAAI3I,EAAI,EAAGA,EAAI5B,KAAKkhC,UAAUr/B,SAAUD,EAAG,CAC9C,MAAMumC,EAAWnoC,KAAKkhC,UAAUt/B,GAChCumC,EAASt9B,WAAW7K,KAAK4K,cACzBu9B,EAASn+B,kBCjER,MAAMusF,WAAiBhjB,GAC5BnzE,YAAYqL,EAAWC,EAAWJ,EAAe6E,GAU/CC,MAAM3E,EAAGC,EAAGJ,EATQ,OAAH,OACZ,CACDotC,yBAA0B,GAC1BkC,UAAW,EACXq5B,kBAAmB,GAElB9jE,IAILnQ,KAAKiH,aAAa,OAAQ,YAG5BmM,gBACE,OAAOpT,KAAKw/B,YAAY,KAI1Bg3D,cAEE,OADAx2F,KAAK81E,QAAQ,OACN91E,MC8CX,SAAS,MAAKiD,GACR8vF,GAAQx2D,QAAO,QAAI,mBAAoBt5B,GAStC,MAAM8vF,GAsBX3yF,YAAY+P,EAAmC,IAC7C,GAAE,gBAAiBA,GACnB,MAAMo9E,EAA2B,CAC/Bl7E,MAAO,CACLqvB,MAAO,IAET0xB,SAAU,CACRP,UAAW,GACXD,QAASF,GAASI,SAASI,IAC3B5nD,MAAO,IACPC,OAAQ,IACR4nD,WAAY,QAEd3jD,KAAM,CACJk3C,OAAQ,QACRC,KAAM,GACNC,OAAQ,KAIZ5mD,KAAKmQ,QAAUo9E,EACfvtF,KAAKwQ,WAAWL,GAYlB,wBAAwB0iD,EAA0BvnD,EAAQ,IAAKC,EAAS,KACtE,OAAO,IAAIwnF,GAAQ,CAAE3/B,SAAU,CAAEP,UAAAA,EAAWvnD,MAAAA,EAAOC,OAAAA,EAAQqnD,QAASF,GAASI,SAASI,OAGxFziD,QACEzQ,KAAKy2F,QAAU,GACfz2F,KAAK02F,QAAU,GACf12F,KAAK22F,OAAS,GACd32F,KAAKguC,OAAS,GACdhuC,KAAKqS,WAAQ5R,EAGfg4C,aACE,OAAOz4C,KAAKmQ,QAGdK,WAAWL,EAAmC,IACxCA,EAAQkC,QAAOrS,KAAKmQ,QAAQkC,MAAQlC,EAAQkC,OAC5ClC,EAAQijD,WAAUpzD,KAAKmQ,QAAQijD,SAAWjjD,EAAQijD,UAClDjjD,EAAQX,OAAMxP,KAAKmQ,QAAQX,KAAOW,EAAQX,MACN,OAApCxP,KAAKmQ,QAAQijD,SAASP,WACxB7yD,KAAK42F,eAEP52F,KAAKyQ,QAGPmmF,eACE,IAAK52F,KAAKmQ,QAAQijD,SAAU,MAAM,IAAI,KAAa,cACnD,MAAM,UAAEP,EAAS,QAAED,EAAO,MAAEtnD,EAAK,OAAEC,EAAM,WAAE4nD,GAAenzD,KAAKmQ,QAAQijD,SACvE,GAAkB,KAAdP,EAEF,MADA,GAAE7yD,MACI,IAAI,KAAa,uCAGzBA,KAAKkJ,QAAUwpD,GAASY,aACtBT,EACAD,MAAAA,EAAAA,EAAWF,GAASI,SAASI,IAC7B5nD,EACAC,EACA4nD,GAIJvoD,aACE,OAAO5K,KAAKkJ,QAGd2B,WAAW3B,GAET,OADAlJ,KAAKkJ,QAAUA,EACRlJ,KAGTm5B,WACE,OAAOn5B,KAAKqS,MAGdwkF,YACE,OAAO72F,KAAKguC,OAIdtM,MAAMsI,GACJ,IAAKhqC,KAAKmQ,QAAQkC,MAAO,MAAM,IAAI,KAAa,WAChD,OAAOrS,KAAKmQ,QAAQkC,MAAMqvB,MAAQsI,EAGpCupC,MAAMujB,EAAuF,IAC3F,IAAK92F,KAAKmQ,QAAQijD,SAAU,MAAM,IAAI,KAAa,cACnD,IAAKpzD,KAAKmQ,QAAQkC,MAAO,MAAM,IAAI,KAAa,WAChD,MAAMlB,EAAS,OAAH,OACP,CACD1F,EAAG,EACHC,EAAG,EACHJ,MAAOtL,KAAKmQ,QAAQijD,SAAS9nD,MAAQtL,KAAK0hC,MAAM,GAChDvxB,QAAS,CACPuoC,yBAA0B14C,KAAKmQ,QAAQkC,MAAMqvB,QAG9Co1D,GAGCzkF,EAAe,IAAIkhE,GAAMpiE,EAAO1F,EAAG0F,EAAOzF,EAAGyF,EAAO7F,MAAO6F,EAAOhB,SAIxE,OAHAnQ,KAAK22F,OAAOzmF,KAAKmC,GACjBA,EAAMxH,WAAW7K,KAAKkJ,SACtBlJ,KAAKqS,MAAQA,EACNA,EAGTkkF,SAASO,EAAuF,IAC9F,IAAK92F,KAAKmQ,QAAQijD,SAAU,MAAM,IAAI,KAAa,cACnD,IAAKpzD,KAAKmQ,QAAQkC,MAAO,MAAM,IAAI,KAAa,WAChD,MAAMlB,EAAS,OAAH,OACP,CACD1F,EAAG,EACHC,EAAG,EACHJ,MAAOtL,KAAKmQ,QAAQijD,SAAS9nD,MAAQtL,KAAK0hC,MAAM,GAChDvxB,QAAS,CACPuoC,yBAAqD,IAA3B14C,KAAKmQ,QAAQkC,MAAMqvB,QAG9Co1D,GAGCzkF,EAAQ,IAAIkkF,GAASplF,EAAO1F,EAAG0F,EAAOzF,EAAGyF,EAAO7F,MAAO6F,EAAOhB,SAIpE,OAHAnQ,KAAK22F,OAAOzmF,KAAKmC,GACjBA,EAAMxH,WAAW7K,KAAKkJ,SACtBlJ,KAAKqS,MAAQA,EACNA,EAGTg3B,UAAUhF,GACR,MAAMnU,EAAO,IAAImZ,EAAUhF,GAI3B,OAHIrkC,KAAKqS,OAAO6d,EAAK9d,SAASpS,KAAKqS,OACnC6d,EAAKrlB,WAAW7K,KAAKkJ,SACrBlJ,KAAKy2F,QAAQvmF,KAAKggB,GACXA,EAGTgiE,UAAUxhF,EAAc2zB,EAAwBl0B,GAC9C,MAAM+f,EAAO,IAAIgiE,GAAUxhF,EAAO2zB,EAAYl0B,GAI9C,OAHInQ,KAAKqS,OAAO6d,EAAK9d,SAASpS,KAAKqS,OACnC6d,EAAKrlB,WAAW7K,KAAKkJ,SACrBlJ,KAAKy2F,QAAQvmF,KAAKggB,GACXA,EAGTmiE,WAAWlsF,EAAck+B,EAAwBl0B,GAC/C,MAAM+f,EAAO,IAAImiE,GAAWlsF,EAAMk+B,EAAYl0B,GAI9C,OAHInQ,KAAKqS,OAAO6d,EAAK9d,SAASpS,KAAKqS,OACnC6d,EAAKrlB,WAAW7K,KAAKkJ,SACrBlJ,KAAKy2F,QAAQvmF,KAAKggB,GACXA,EAGTmmE,UAAUhyD,GACR,MAAM0yD,EAAY,IAAIV,GAAUhyD,GAIhC,OAHIrkC,KAAKqS,OAAO0kF,EAAU3kF,SAASpS,KAAKqS,OACxC0kF,EAAUlsF,WAAW7K,KAAKkJ,SAC1BlJ,KAAKy2F,QAAQvmF,KAAK6mF,GACXA,EAGTvmB,SAASwmB,GACP,MAAMC,EAAW,IAAIzmB,GAASwmB,GAI9B,OAHIh3F,KAAKqS,OAAO4kF,EAAS7kF,SAASpS,KAAKqS,OACvC4kF,EAASpsF,WAAW7K,KAAKkJ,SACzBlJ,KAAKy2F,QAAQvmF,KAAK+mF,GACXA,EAGT9R,QAAQh0E,EAAiC,IACvC,MAAM+lF,EAAU,IAAI/R,GAAQh0E,EAAOhL,MAInC,OAHInG,KAAKqS,OAAO6kF,EAAQ9kF,SAASpS,KAAKqS,OACtC6kF,EAAQrsF,WAAW7K,KAAKkJ,SACxBlJ,KAAKy2F,QAAQvmF,KAAKgnF,GACXA,EAGT7R,SAASyR,EAA+E,IACtF,MAAM3lF,EAAS,OAAH,OACP,CACDhL,KAAM,SACNgK,QAAS,CACPw2C,KAAM,UACNjV,gBAAYjxC,IAGbq2F,GAGCK,EAAW,IAAI9R,GAASl0E,EAAOhL,KAAMgL,EAAOhB,QAAQw2C,KAAMx1C,EAAOhB,QAAQuhC,YAI/E,OAHI1xC,KAAKqS,OAAO8kF,EAAS/kF,SAASpS,KAAKqS,OACvC8kF,EAAStsF,WAAW7K,KAAKkJ,SACzBlJ,KAAKy2F,QAAQvmF,KAAKinF,GACXA,EAGTrD,YAAYgD,EAA6B,IACvC,MAAM3lF,EAAS,OAAH,OACP,CACD0yC,KAAM,OAELizC,GAGCM,EAAc,IAAItD,GAAY3iF,EAAO0yC,MAI3C,OAHI7jD,KAAKqS,OAAO+kF,EAAYhlF,SAASpS,KAAKqS,OAC1C+kF,EAAYvsF,WAAW7K,KAAKkJ,SAC5BlJ,KAAKy2F,QAAQvmF,KAAKknF,GACXA,EAGTpD,WAAW7iF,GACT,MAAMkmF,EAAa,IAAIrD,GAAW7iF,EAAO5P,IAAK4P,EAAO46D,UAAW56D,EAAOs7D,UAIvE,OAHIzsE,KAAKqS,OAAOglF,EAAWjlF,SAASpS,KAAKqS,OACzCglF,EAAWxsF,WAAW7K,KAAKkJ,SAC3BlJ,KAAKy2F,QAAQvmF,KAAKmnF,GACXA,EAGT3/C,QAAQrT,GACN,MAAMnU,EAAO,IAAIwnB,EAAQrT,GAIzB,OAHIrkC,KAAKqS,OAAO6d,EAAK9d,SAASpS,KAAKqS,OACnC6d,EAAKrlB,WAAW7K,KAAKkJ,SACrBlJ,KAAKy2F,QAAQvmF,KAAKggB,GACXA,EAGTklB,UAAU/Q,GACR,MAAMnU,EAAO,IAAIklB,EAAU/Q,GAG3B,OAFIrkC,KAAKqS,OAAO6d,EAAK9d,SAASpS,KAAKqS,OACnC6d,EAAKrlB,WAAW7K,KAAKkJ,SACdgnB,EAGT65C,eAAe54D,GACb,MAAM2pC,EAAQ,IAAIivB,GAAe54D,EAAO+b,MAAO/b,EAAOqkC,MAEtD,OADAsF,EAAMjwC,WAAW7K,KAAKkJ,SACf4xC,EAGTgvB,WAAW34D,GACT,MAAM0pD,EAAQ,IAAIiP,GAAW34D,EAAOhL,MAEpC,OADA00D,EAAMhwD,WAAW7K,KAAKkJ,SACf2xD,EAGTwE,WACEy3B,EAOI,IAEJ,MAAM3lF,EAAS,OAAH,OACP,CACD6X,KAAM,IACNsuE,SAAU,QACVC,SAAU,SACV96B,WAAY,QACZvN,SAAU,GACVsoC,WAAY,cACZrnF,QAAS,IAER2mF,GAGCplD,EAAa,IAAI2tB,GAAWluD,EAAO6X,MAKzC,OAJA0oB,EAAWyuB,iBAAiBhvD,EAAOomF,UACnC7lD,EAAWquB,yBAAyB5uD,EAAOmmF,UAC3C5lD,EAAW1L,QAAQ70B,EAAOsrD,WAAYtrD,EAAO+9C,SAAU/9C,EAAOqmF,YAC9D9lD,EAAW7mC,WAAW7K,KAAKkJ,SACpBwoC,EAGTgvB,YACEo2B,EAQI,IAEJ,MAAM3lF,EAAS,OAAH,OACP,CACDmmF,SAAU,MACVC,SAAU,SACVE,SAAS,EACTt2B,aAAa,GAEZ21B,GAGC90B,EAAc,IAAItB,GAexB,OAdAsB,EAAYmE,cAAch1D,EAAOomF,UACjCv1B,EAAYiE,YAAY90D,EAAOmmF,UAC/Bt1B,EAAY4B,iBAAiBzyD,EAAOsmF,SACpCz1B,EAAYiC,eAAe9yD,EAAOgwD,aAGD,iBAAtBhwD,EAAOsrD,YAAsD,iBAApBtrD,EAAO+9C,SACxB,iBAAtB/9C,EAAOqmF,WAChBx1B,EAAYh8B,QAAQ70B,EAAOsrD,WAAYtrD,EAAO+9C,SAAU/9C,EAAOqmF,YAC5Dx1B,EAAYh8B,QAAQ70B,EAAOsrD,WAAYtrD,EAAO+9C,SAAU,IACzB,iBAApB/9C,EAAO+9C,UACvB8S,EAAY7D,YAAYhtD,EAAO+9C,UAEjC8S,EAAYn3D,WAAW7K,KAAKkJ,SACrB84D,EAGT/L,aAAa6gC,EAAyD,IACpE,MAAM3lF,EAAS,OAAH,OACP,CACDhL,KAAM,KACNgpB,SAAU,SAET2nE,GAGCtlD,EAAe,IAAIykB,GAAa9kD,EAAOhL,MAG7C,OAFAqrC,EAAa/Y,YAAYtnB,EAAOge,UAChCqiB,EAAa3mC,WAAW7K,KAAKkJ,SACtBsoC,EAGTm8C,aAAamJ,EAA8E,IACzF,MAAM3lF,EAAS,OAAH,OACP,CACD6X,KAAM,IACN8E,SAAU,IACV6W,KAAM,EACNxc,KAAM,GAEL2uE,GAGC9tE,EAAO,IAAI2kE,GAAa,CAC5B3kE,KAAM7X,EAAO6X,KACbb,KAAMhX,EAAOgX,KACb2F,SAAU3c,EAAO2c,SACjB6W,KAAMxzB,EAAOwzB,OAMf,OAHI3kC,KAAKqS,OAAO2W,EAAK5W,SAASpS,KAAKqS,OACnC2W,EAAKne,WAAW7K,KAAKkJ,SACrBlJ,KAAKy2F,QAAQvmF,KAAK8Y,GACXA,EAGT8hC,UAAUgsC,GACR,MAAM3lF,EAAS,OAAH,OACP,CACDy5C,OAAQ,IACRz7B,SAAU,QAET2nE,GAGC/rC,EAAY,IAAItB,EAAet4C,EAAOy5C,QAG5C,OAFAG,EAAUtyB,YAAYtnB,EAAOge,UAC7B47B,EAAUlgD,WAAW7K,KAAKkJ,SACnB6hD,EAGTyJ,aAAarjD,GACX,MAAMumF,EAAe,IAAIljC,GAAarjD,EAAOy5C,QAG7C,OAFA8sC,EAAaj/D,YAAYtnB,EAAOge,UAChCuoE,EAAa7sF,WAAW7K,KAAKkJ,SACtBwuF,EAGT7/B,cACE,OAAO,IAAIA,IAAchtD,WAAW7K,KAAKkJ,SAG3CygE,kBACE,OAAO,IAAIA,GAGb0kB,iBAAiBl9E,GACf,QAAkC1Q,IAA9B0Q,EAAOm9E,mBAAkC,MAAM,IAAI,KAAa,sBACpE,MAAMqJ,EAAmB,IAAItJ,GAAiBl9E,EAAOm9E,mBAAoBn9E,GAGzE,OAFAwmF,EAAiB9sF,WAAW7K,KAAKkJ,SACjClJ,KAAKy2F,QAAQvmF,KAAKynF,GACXA,EAGT/zC,MAAMkzC,EAAkE,IACtE,MAAM3lF,EAAS,OAAH,OACP,CACD0yC,KAAM,OAELizC,GAECr0D,EAAQ,IAAImhB,EAAMzyC,EAAO0yC,KAAM1yC,EAAOhB,SAE5C,OADAnQ,KAAKguC,OAAO99B,KAAKuyB,GACVA,EAGTyjB,eAAe/0C,GACb,MAAM8hF,EAAY,IAAI/sC,EAAe/0C,EAAOm1C,UAAWn1C,EAAOo1C,cAG9D,OAFA0sC,EAAUnsC,QAAQ31C,EAAOhL,MAAM0E,WAAW7K,KAAKkJ,SAC/ClJ,KAAKy2F,QAAQvmF,KAAK+iF,GACXA,EAGTz1D,UAAUrtB,EAAqC,IAC7C,OAAO,IAAIqtB,GAAUrtB,GAGvBusB,OAAOo6D,EAAuD,IAC5D,MAAM3lF,EAAS,OAAH,OACP,CACD+b,MAAO,GACP/c,QAAS,IAER2mF,GAGC33D,EAAS,IAAIzC,EAAOvrB,EAAO+b,MAAO/b,EAAOhB,SAAStF,WAAW7K,KAAKkJ,SAExE,OADAlJ,KAAKy2F,QAAQvmF,KAAKivB,GACXA,EAGTuc,KAAKvqC,G,UACH,MAAM62B,EAAO,IAAI0T,EAAKvqC,EAAO+b,MAAqB,QAAd,EAAA/b,EAAOhB,eAAO,eAAEk9B,UAAUxiC,WAAW7K,KAAKkJ,SAG9E,OAFA8+B,EAAKsX,iBAAoD,QAAnC,EAAc,QAAd,EAAAnuC,EAAOhB,eAAO,eAAEynF,2BAAmB,QAAI,IAC7D53F,KAAKy2F,QAAQvmF,KAAK83B,GACXA,EAGTs+C,MAAMn1E,GACJ,MAAM0mF,EAAQ,IAAIvR,GAAMn1E,EAAOo1E,KAAMp1E,EAAOq1E,GAAIr1E,EAAOhB,SAAStF,WAAW7K,KAAKkJ,SAEhF,OADAlJ,KAAKy2F,QAAQvmF,KAAK2nF,GACXA,EAGT1Y,SAAShuE,G,MAQP,MAAM2mF,EAAM,IAAI3Y,GACd,CACEtgD,WAAY1tB,EAAOo1E,KACnB1mD,UAAW1uB,EAAOq1E,GAClB9G,cAAevuE,EAAOuuE,cACtBC,aAAcxuE,EAAOwuE,cAEvBxuE,EAAO6X,MAMT,OAHkB,QAAd,EAAA7X,EAAOhB,eAAO,eAAEilB,YAAW0iE,EAAIn9D,aAAaxpB,EAAOhB,QAAQilB,WAC/D0iE,EAAIjtF,WAAW7K,KAAKkJ,SACpBlJ,KAAKy2F,QAAQvmF,KAAK4nF,GACXA,EAGT7H,UAAU9+E,G,QAOR,MAAMgX,EAAO,IAAI8nE,GAAU,CACzBpxD,WAAY1tB,EAAOo1E,KACnB1mD,UAAW1uB,EAAOq1E,GAClB9G,cAAevuE,EAAOuuE,cACtBC,aAAcxuE,EAAOwuE,eAQvB,OALkB,QAAd,EAAAxuE,EAAOhB,eAAO,eAAE6Y,OAAMb,EAAK++B,QAAQ/1C,EAAOhB,QAAQ6Y,OACpC,QAAd,EAAA7X,EAAOhB,eAAO,eAAEX,OAAM2Y,EAAK6d,QAAQ70B,EAAOhB,QAAQX,MAEtD2Y,EAAKtd,WAAW7K,KAAKkJ,SACrBlJ,KAAKy2F,QAAQvmF,KAAKiY,GACXA,EAGT+tE,eAAe/kF,GAQb,MAAM4mF,EAAiB,IAAI7B,GAAe,CACxC1mD,MAAOr+B,EAAOo1E,KACdiP,KAAMrkF,EAAOq1E,KASf,OANIr1E,EAAOhB,QAAQgY,MAAM4vE,EAAenuD,QAAQz4B,EAAOhB,QAAQgY,MAC3DhX,EAAOhB,QAAQ04D,OAAOkvB,EAAe1uB,SAASl4D,EAAOhB,QAAQ04D,OAEjEkvB,EAAeltF,WAAW7K,KAAKkJ,SAC/BlJ,KAAKy2F,QAAQvmF,KAAK6nF,GAEXA,EAGT5C,YAAYhkF,GAWV,MAAM6mF,EAAc,IAAI7C,GAAY,CAClC3lD,MAAOr+B,EAAOo1E,KACdiP,KAAMrkF,EAAOq1E,GACbx9D,KAAM7X,EAAO6X,KACbynD,YAAat/D,EAAOhB,QAAQsgE,YAC5BthD,SAAUhe,EAAOhB,QAAQgf,WAQ3B,OALIhe,EAAOhB,QAAQgY,MAAM6vE,EAAYpuD,QAAQz4B,EAAOhB,QAAQgY,MACxDhX,EAAOhB,QAAQX,MAAMwoF,EAAYhyD,QAAQ70B,EAAOhB,QAAQX,MAE5DwoF,EAAYntF,WAAW7K,KAAKkJ,SAC5BlJ,KAAKy2F,QAAQvmF,KAAK8nF,GACXA,EAGT1F,OAAOnhF,EAAiC,IACtCA,EAAO1R,QAAUO,KACjB,MAAMi4F,EAAS,IAAI3F,GAAOnhF,GAAQtG,WAAW7K,KAAKkJ,SAElD,OADAlJ,KAAK02F,QAAQxmF,KAAK+nF,GACXA,EAgBTtO,UAAUx5E,EAAqC,IAE7C,OADAA,EAAQ1Q,QAAUO,KACX,IAAI2pF,GAAUx5E,GAGvB+jF,aAAa4C,EAAgE,IAC3E,MAAM3lF,EAAS,OAAH,OACP,CACD+b,MAAO,GACP/c,QAAS,CACPpH,MAAO,UAGR+tF,GAGCrC,EAAQ,IAAIP,GAAa/iF,EAAO+b,OAItC,OAHAunE,EAAM3tC,QAAQotC,GAAantC,WAAW51C,EAAOhB,QAAQpH,QACrD0rF,EAAM5pF,WAAW7K,KAAKkJ,SACtBlJ,KAAKy2F,QAAQvmF,KAAKukF,GACXA,EAGTnpC,aAAawrC,EAA8B,IACzC,MAAM3lF,EAAS,OAAH,OACP,CACD+b,MAAO,IAEN4pE,GAGCh8C,EAAQ,IAAIwQ,EAAan6C,EAAO+b,OAEtC,OADA4tB,EAAMjwC,WAAW7K,KAAKkJ,SACf4xC,EAGTihB,SAAS5qD,GACPA,EAAO1R,QAAUO,KAEjB,OADiB,IAAI+7D,GAAS5qD,GAKhCjH,OACElK,KAAK02F,QAAQn9D,SAAS33B,GAAMA,EAAEiJ,WAAW7K,KAAKkJ,SAASuiD,WACvDzrD,KAAK22F,OAAOp9D,SAAS33B,GAAMA,EAAEiJ,WAAW7K,KAAKkJ,SAASgB,SACtDlK,KAAKguC,OAAOzU,SAAS33B,GAAMA,EAAEiJ,WAAW7K,KAAKkJ,SAASgB,SACtDlK,KAAKy2F,QAAQl9D,SAAS33B,IACfA,EAAE0I,cAAc1I,EAAEiJ,WAAW7K,KAAKkJ,SAASgB,UAElDlK,KAAK02F,QAAQn9D,SAAS33B,GAAMA,EAAEiJ,WAAW7K,KAAKkJ,SAASgB,SACvDlK,KAAKyQ,SC3sBF,MAAMynF,WAAqBxgD,EAChC,sBACE,MAAO,gBAGTt3C,YAAYwqC,GACVx6B,MAAMw6B,GAAa,GACnB5qC,KAAKiH,aAAa,OAAQ,gBAE1BjH,KAAKmlC,eAAiB,OAAH,wBACdnlC,KAAKmlC,gBACL,CAED71B,QAAS,GAETF,MAAO,GAEPI,KAAM,gBAIVxP,KAAKi5C,cAGP51C,cACE,OAAO60F,GAAa50F,SAGtB4G,OACEkG,MAAMlG,OACNlK,KAAKuK,eCnBF,MAAM4tF,WAAqBlwF,EAoFhC7H,YAAY8sB,EAA6B/mB,GACvCiK,QACApQ,KAAKiH,aAAa,OAAQ,gBAC1BjH,KAAKo/E,SAASlyD,GACdltB,KAAKo4F,QAAUjyF,EACfnG,KAAKmvB,SAAW4H,EAASE,SAASQ,MAElCz3B,KAAKmlC,eAAiB,CACpB55B,OAAQ,GACR+D,QAAS,EACT+oF,cAAe,EACfC,eAAgB,EAChBC,kBAAmB,EACnBC,iBAAkB,GAlEtB,4BACErqF,EACAo9C,EAGAr+B,EACA/mB,EACAgpB,EACAhf,GAEA,MAAMsoF,EAAMltC,EAAUmtC,cAEtB,GAAW,MAAPD,EACF,MAAM,IAAI,KAAa,eAAgB,+DAGzC,MAAME,EAAaF,EAAMtoF,EAAQqoF,iBAC3BI,EAAaH,EAAMtoF,EAAQooF,kBAE3BM,EAAkB,CACtBttF,OAAQ4E,EAAQ5E,OAChB+D,QAASa,EAAQb,QACjB+oF,cAAeM,EACfL,eAAgBM,EAChBL,kBAAmB,EACnBC,iBAAkB,GAGpB,IAAIL,GACF,CACEt5D,WAAY3R,EAAM2R,WAClBgB,UAAW3S,EAAM2S,WAEnB15B,GAEC0E,WAAWsD,GACX2qF,iBAAiBD,GACjBpgE,YAAYtJ,GACZjlB,OAgCLuuB,YAAYtJ,GAIV,OAHIA,IAAa4H,EAASE,SAASM,OAASpI,IAAa4H,EAASE,SAASQ,QACzEz3B,KAAKmvB,SAAWA,GAEXnvB,KAGT84F,iBAAiB3oF,GASf,OAPoB,MAAlBA,EAAQ5E,QACW,MAAnB4E,EAAQb,SACiB,MAAzBa,EAAQkoF,eACkB,MAA1BloF,EAAQmoF,iBAERt4F,KAAKmlC,eAAiBh1B,GAEjBnQ,KAQTo/E,SAASlyD,GACP,IAAKA,EAAM2R,aAAe3R,EAAM2S,UAC9B,MAAM,IAAI,KAAa,eAAgB,6DAMzC,OAHA7/B,KAAKktB,MAAQA,EACbltB,KAAK6+B,WAAa3R,EAAM2R,WACxB7+B,KAAK6/B,UAAY3S,EAAM2S,UAChB7/B,KAGTomF,cAAcj1E,GAOZ,MAAMhD,EAAMnO,KAAKiK,eACjB,IAAI8uF,EAAM/4F,KAAKmlC,eAAe71B,QAAU,GACpCA,EAAU6B,EAAO+1E,QAEjBlnF,KAAKmvB,WAAa4H,EAASE,SAASM,QACtCwhE,EAAa,GAANA,EACPzpF,EAAU6B,EAAO+1E,QAAU/1E,EAAO6nF,cAGpC,MAAMC,EAAUj5F,KAAKmlC,eAAekzD,cAC9Ba,EAAUl5F,KAAKmlC,eAAemzD,eAIpC,OAFAnqF,EAAIsD,YAEIzR,KAAKo4F,SACX,KAAKD,GAAahyF,KAAKgzF,MACrBhrF,EAAIuD,OAAOP,EAAOg2E,OAAS+R,EAAS5pF,EAAUypF,GAC9C5qF,EAAIwD,OAAOR,EAAO81E,QAAUgS,EAAS3pF,EAAUtP,KAAKmlC,eAAe55B,OAAS,EAAIwtF,GAChF5qF,EAAIwD,OAAOR,EAAOg2E,OAAS+R,EAAS5pF,EAAUtP,KAAKmlC,eAAe55B,OAASwtF,GAC3E,MACF,KAAKZ,GAAahyF,KAAKizF,QACrBjrF,EAAIuD,OAAOP,EAAO81E,QAAUgS,EAAS3pF,EAAUypF,GAC/C5qF,EAAIwD,OAAOR,EAAOg2E,OAAS+R,EAAS5pF,EAAUtP,KAAKmlC,eAAe55B,OAAS,EAAIwtF,GAC/E5qF,EAAIwD,OAAOR,EAAO81E,QAAUgS,EAAS3pF,EAAUtP,KAAKmlC,eAAe55B,OAASwtF,GAOhF5qF,EAAIO,SACJP,EAAIyyB,YAGN12B,OACElK,KAAKiK,eACLjK,KAAKuK,cAEL,MAAMq1C,EAAY5/C,KAAK6+B,WACjBihB,EAAW9/C,KAAK6/B,UACtB,IAAK+f,IAAcE,EAAU,MAAM,IAAI,KAAa,SAAU,0BAE9D,MAAMtQ,EAAQoQ,EAAUxX,mBAAmBpoC,KAAKmvB,SAAU,GACpDsgB,EAAMqQ,EAAS1X,mBAAmBpoC,KAAKmvB,SAAU,GAEvDnvB,KAAKomF,cAAc,CACjBa,QAASz3C,EAAM/jC,EACf07E,OAAQ13C,EAAIhkC,EACZy7E,QAAStnC,EAAU1sC,aAAaxF,OAASkyC,EAAU1sC,aAAa8nB,YAChEosD,OAAQtnC,EAAS5sC,aAAaxF,OAASoyC,EAAS5sC,aAAa8nB,YAC7Dg+D,aAAcp5C,EAAU1sC,aAAa8nB,eArLzB,GAAA70B,KAAO,CACrBgzF,MAAO,EACPC,QAAS,GC1BN,MAAMC,WAAiBhZ,GAC5B,sBACE,OAAO,EAGT,wBACE,OAAQ,EAGV,qBAAqBnzD,GACnB,OAAO,IAAImsE,GAASnsE,EAAOmsE,GAASC,UAGtC,uBAAuBpsE,GACrB,OAAO,IAAImsE,GAASnsE,EAAOmsE,GAASE,YAkBtCn5F,YAAY8sB,EAAiBkI,GAK3B,GAJAhlB,MAAM8c,EAAO,OACbltB,KAAKiH,aAAa,OAAQ,aAGrBmuB,EAAW,CACd,IAAIokE,EAActsE,EAAM2R,WAAuBya,eAAe,GAAG1wB,KACvC,iBAAf4wE,IACTA,EAAaxzF,SAASwzF,EAAY,KAEpC,IAAIC,EAAavsE,EAAM2S,UAAsByZ,eAAe,GAAG1wB,KACtC,iBAAd6wE,IACTA,EAAYzzF,SAASyzF,EAAW,KAMhCrkE,EADEtyB,MAAM02F,IAAe12F,MAAM22F,GACjBJ,GAASC,SAETE,EAAaC,EAAYJ,GAASE,WAAaF,GAASC,SAIxEt5F,KAAKo1B,UAAYA,EACjBp1B,KAAKmlC,eAAek6C,IAAM,GAC1Br/E,KAAKmlC,eAAem6C,IAAM,GAC1Bt/E,KAAKmlC,eAAe71B,QAAU,GAE9BtP,KAAKgmC,QAAQ,CAAE0gB,OAAQ,QAASC,KAAM,GAAIC,OAAQ,gBAGpDi5B,UAAU1uE,GAOR,GAA+B,IAA3BA,EAAO2uE,SAASj+E,QAA0C,IAA1BsP,EAAO4uE,QAAQl+E,OACjD,MAAM,IAAI,KAAa,eAAgB,yBAGzC,MAAMsM,EAAMnO,KAAKiK,eACXw1C,EAAatuC,EAAOsuC,WACpBqgC,EAAW3uE,EAAO2uE,SAClBE,EAAY7uE,EAAO6uE,UAEnB5qD,EAAYjkB,EAAOikB,UACzB,GAAIA,IAAcikE,GAASC,UAAYlkE,IAAcikE,GAASE,WAC5D,MAAM,IAAI,KAAa,WAAY,2BAIrC,MAAM7Z,EAAgB1/E,KAAKktB,MAAMwyD,cACjC,IAAK,IAAI99E,EAAI,EAAGA,EAAI89E,EAAc79E,SAAUD,EAAG,CAC7C,MAAM83F,EAAU5Z,EAASJ,EAAc99E,IAAM5B,KAAKmlC,eAAe71B,QAEjE,GAAIxM,MAAM42F,GACR,MAAM,IAAI,KAAa,eAAgB,oCAGzCvrF,EAAIsD,YACJtD,EAAIuD,OAAO+tC,EAAYi6C,EAAU,EAAItkE,GACrCjnB,EAAIwD,OAAOquE,EAAW0Z,EAAU,EAAItkE,GACpCjnB,EAAIyyB,YACJzyB,EAAIO,SAGN1O,KAAKuK,eCtGF,MAAMovF,WAAgB5iE,EAa3B32B,YAAY6rB,GACV7b,QACApQ,KAAKiH,aAAa,OAAQ,WAE1BjH,KAAKisB,IAAMA,EACXjsB,KAAKmvB,SAAW4H,EAASE,SAASI,OAClCr3B,KAAK4O,KAAO,WAdd,sBACE,MAAO,UAiBTvL,cACE,OAAOs2F,GAAQr2F,SAIjB4G,OACE,MAAMiE,EAAMnO,KAAKiK,eACXimB,EAAOlwB,KAAK+3B,oBAClB/3B,KAAKuK,cAEL,MAAMkjC,EAAgBvd,EAAKwP,mBAG3B,IAAIj0B,EADUykB,EAAKkY,mBAAmBpoC,KAAKmvB,SAAUnvB,KAAKsG,OAC5CmF,EACd,MAAMmuF,EAAc1pE,EAAK7sB,gBAAkB+xC,EAAU9xC,SAC/C8L,EAAQwqF,EAAcxkD,EAAUC,MAAQ,EACxCxmC,EAAW,YAAW+qF,EAAc,QAAU,WAE9CC,EAAY75F,KAAK4I,UAAUtH,aAAa,GAAGuN,aAAsB4+B,EACjEliC,EAASvL,KAAKisB,IAAM4tE,EAC1B,IAAInuF,EAAIwkB,EAAKyP,iBAAiB/D,MAAQrwB,EAGpCG,GADE+hC,EAAgB,EACbztC,KAAK4I,UAAUtH,aAAa,GAAGuN,qBAA8BO,EAE7DpP,KAAK4I,UAAUtH,aAAa,GAAGuN,mBAA4BO,EAGlE,MAAMw1E,EAAY5kF,KAAK4I,UAAUtH,aAAa,GAAGuN,WAEjDpD,GAAKzL,KAAK4I,UAAUtH,aAAa,GAAGuN,gBAAuB4+B,IAAkB9T,EAAKuB,GAAK,KAAO,UAC9F,IAAK,IAAIt5B,EAAI,EAAGA,EAAI5B,KAAKisB,MAAOrqB,EAC9BmN,EAAM27B,YAAYv8B,EAAK1C,EAAGC,EAAGk5E,EAAW5kF,KAAK4O,KAAM,CAAEC,SAAAA,IACrDnD,GAAKmuF,GC3DJ,MAAMC,GAiBX15F,YAAY25F,EAAe,mCAhBjB,KAAAC,aAAyB,GAkBjCh6F,KAAKi6F,UAAUF,GAhBjB,mBACE,MAAO,CACLG,SAAU,0BACVC,OAAQ,0BACRC,MAAO,0BACPjnE,GAAI,gCACJknE,cAAe,uBAcnBC,cAAcjmE,GACZ,OAAO7rB,GAAKod,cAAcyO,GAAYjM,UAOxC6xE,UAAUF,GACJD,GAAOS,MAAMR,KACfA,EAAeD,GAAOS,MAAMR,IAG9B/5F,KAAKg6F,aAAe,GAEpB,MAAMxyF,EAAOuyF,EAAar4F,MAAM,WAChC,GAAoB,IAAhB8F,EAAK3F,OACP,MAAM,IAAI,KAAa,eAAgB,0BAA0Bk4F,KAGnE,IAAK,IAAIn4F,EAAI,EAAGA,EAAI4F,EAAK3F,SAAUD,EACjC5B,KAAKg6F,aAAap4F,GAAK5B,KAAKs6F,cAAc9yF,EAAK5F,IAKnD44F,kBAAkBC,GAChB,MAAM/0F,EAAI7C,OAAO43F,GACjB,GAAI/0F,EAAI,GAAKA,EAAI1F,KAAKg6F,aAAan4F,OACjC,MAAM,IAAI,KACR,eACA,uCAAuC7B,KAAKg6F,aAAan4F,UAAU44F,KAIvE,OAAOz6F,KAAKg6F,aAAat0F,EAAI,GAI/Bg1F,gBAAgBC,EAA0BF,GACxC,MAAMG,EAAc56F,KAAKw6F,kBAAkBC,GACrC70F,EAAI/C,OAAO83F,GAEjB,GAAI/0F,EAAI,EACN,MAAM,IAAI,KAAa,eAAgB,oCAAoC+0F,KAG7E,OAAOC,EAAch1F,EAIvBi1F,eAAeF,EAA0BF,GACvC,MAAM/xE,EAAY1oB,KAAK06F,gBAAgBC,EAASF,GAE1CxyE,EAAShjB,KAAKC,MAAMwjB,EAAY,IAChC5mB,EAAQ4mB,EAAY,GAE1B,MAAO,GAAGlgB,GAAKggB,cAAc1mB,MAAUmmB,KCRpC,MAAMzf,GAAO,OAAH,wBACZ8b,GAAM,CAETwlD,WAAU,GACVzK,WAAU,GACVpJ,aAAY,GACZ+W,QAAO,GACPmY,QAAO,GACPzpC,KAAI,EACJwrB,KAAI,GACJ75D,YAAW,EACXvC,uBAAsB,EACtB41D,YAAW,GACXkK,KAAI,GACJya,SAAQ,GACRG,UAAS,GACTc,MAAK,GACLz0C,IAAG,EACH83C,UAAS,GACT1hF,QAAO,EACP8qF,QAAO,GACP5yF,KAAI,EACJ8B,MAAK,EACLu7B,UAAS,GACTj7B,SAAQ,EACRknD,eAAc,EACd4sC,UAAS,GACTtnF,MAAK,EACLmjF,UAAS,GACT98C,UAAS,EACT20B,eAAc,GACdmuB,aAAY,GACZ4C,WCtGK,MAWL16F,YAAYmB,GACVvB,KAAKkkF,MAAQ,IAAIr0D,EACjB7vB,KAAK+6F,OAAOx5F,GAGdw5F,OAAOx5F,GAGL,OAFAvB,KAAKuB,IAAMA,EACXvB,KAAKyQ,QACEzQ,KAGTg7F,SACE,OAAOh7F,KAAKuB,IAGdkP,QACEzQ,KAAKyB,SAAWzB,KAAKkkF,MAAMzvD,YAAYz0B,KAAKuB,KAE5CvB,KAAK00B,UAAY10B,KAAKyB,SAASjC,KAC3BQ,KAAKyB,SAAS0kB,aAAYnmB,KAAK00B,WAAa10B,KAAKyB,SAAS0kB,YAG9D,IAD0B0J,EAAMyG,WAAWt2B,KAAKyB,SAAS0E,MAEvD,MAAM,IAAI,KAAa,eAAgB,yBAAyBnG,KAAKuB,OAGvEvB,KAAKoP,MAAQpP,KAAKkkF,MAAMtuD,cACtB51B,KAAKkkF,MAAMvvD,aAAa30B,KAAK00B,WAC7B7E,EAAMyG,WAAWt2B,KAAKyB,SAAS0E,OAGjCnG,KAAK02B,SAAW,GAChB12B,KAAKi7F,gBAAkB,GACvBj7F,KAAKk7F,wBAA0B,GAE/B,MAAM1kE,EAAe3G,EAAM4G,aAAaz2B,KAAKyB,SAASjC,MAEtD,IAAK,IAAIoC,EAAI,EAAGA,EAAIiuB,EAAM8G,MAAM90B,SAAUD,EAAG,CAC3C,MAAM0E,GAASkwB,EAAe50B,GAAKiuB,EAAM8G,MAAM90B,OACzC+0B,EAAW/G,EAAM8G,MAAMrwB,GAEvBuwB,EAAW72B,KAAKkkF,MAAM3uD,oBAAoBqB,EAAU52B,KAAKoP,MAAMxN,IACrE5B,KAAK02B,SAASE,GAAYC,EAC1B72B,KAAKi7F,gBAAgBj7F,KAAKoP,MAAMxN,IAAMi1B,EACtC72B,KAAKk7F,wBAAwBl7F,KAAKoP,MAAMxN,IAAMi1B,EAGhD,OAAO72B,KAGTm7F,cAAc55F,GAKZ,MAAM/B,EAAOQ,KAAKkkF,MAAMzvD,YAAYlzB,GAAK/B,KACnCyQ,EAAQjQ,KAAKkkF,MAAM9vD,aAAap0B,KAAK02B,SAASl3B,IAEpD,MAAO,CACL0wB,KAAMlwB,KAAK02B,SAASl3B,GACpB2mB,WAAYlW,EAAMkW,YAItBi1E,WAAWlrE,GAKTA,EAAOA,EAAKoE,cACZ,MAAMrkB,EAAQjQ,KAAKkkF,MAAM9vD,aAAalE,GAGhCmrE,EAAYr7F,KAAK02B,SAASzmB,EAAMzQ,MAChC87F,EAAWt7F,KAAKkkF,MAAM9vD,aAAainE,GAEzC,GAAIA,IAAcnrE,EAChB,MAAO,CACLA,KAAMmrE,EACNl1E,WAAYlW,EAAMkW,WAClBo1E,QAAQ,GAKZ,MAAMC,EAAYx7F,KAAKi7F,gBAAgBj7F,KAAKkkF,MAAMvvD,aAAazE,IAC/D,GAAiB,MAAbsrE,EACF,MAAO,CACLtrE,KAAMsrE,EACNr1E,WAAYnmB,KAAKkkF,MAAM9vD,aAAaonE,GAAWr1E,WAC/Co1E,QAAQ,GAKZ,MAAME,EAAoBz7F,KAAKk7F,wBAAwBl7F,KAAKkkF,MAAMvvD,aAAazE,IAC/E,OAAyB,MAArBurE,GACFz7F,KAAK02B,SAAS4kE,EAAS97F,MAAQi8F,SACxBz7F,KAAKi7F,gBAAgBj7F,KAAKkkF,MAAMvvD,aAAa0mE,IACpDr7F,KAAKi7F,gBAAgBj7F,KAAKkkF,MAAMvvD,aAAazE,IAASurE,EAC/C,CACLvrE,KAAMurE,EACNt1E,WAAYnmB,KAAKkkF,MAAM9vD,aAAaqnE,GAAmBt1E,WACvDo1E,QAAQ,IAKRD,EAAS97F,OAAS0wB,UACblwB,KAAKi7F,gBAAgBj7F,KAAKkkF,MAAMvvD,aAAa30B,KAAK02B,SAASzmB,EAAMzQ,QACxEQ,KAAKi7F,gBAAgBj7F,KAAKkkF,MAAMvvD,aAAa2mE,EAAS97F,OAAS87F,EAAS97F,KACxEQ,KAAK02B,SAAS4kE,EAAS97F,MAAQ87F,EAAS97F,KACjC,CACL0wB,KAAMorE,EAAS97F,KACf2mB,gBAAY1lB,EACZ86F,QAAQ,YAKLv7F,KAAKi7F,gBAAgBj7F,KAAKkkF,MAAMvvD,aAAa30B,KAAK02B,SAASzmB,EAAMzQ,QACxEQ,KAAKi7F,gBAAgBj7F,KAAKkkF,MAAMvvD,aAAazE,IAASA,SAE/ClwB,KAAK02B,SAAS4kE,EAAS97F,MAC9BQ,KAAK02B,SAAS4kE,EAAS97F,MAAQ0wB,EAExB,CACLA,KAAAA,EACA/J,WAAYlW,EAAMkW,WAClBo1E,QAAQ,MDrCZtwB,aAAY,GACZ+oB,WAAU,GACVj9D,SAAQ,EACR4yC,gBAAe,GACf0kB,iBAAgB,GAChBx+D,MAAK,EACLuU,KAAI,EACJ2E,SAAQ,EACRuiB,aAAY,EACZqO,SAAQ,GACR4tB,OAAM,GACN2M,aAAY,GACZ7tF,SAAQ,EACRqsD,SAAQ,GACR2/B,WAAU,GACV5jB,WAAU,GACV8E,MAAK,GACLrtB,eAAc,EACdiyC,aAAY,GACZlI,UAAS,GACT5lB,cAAa,GACbhhC,UAAS,EACT8mC,WAAU,GACVsB,UAAS,GACT0N,SAAQ,GACRxlD,KAAI,EACJ66B,aAAY,GACZ7I,OAAM,EACN2mC,OAAM,GACN56C,QAAO,EACP2hD,SAAQ,GACR9C,SAAQ,GACRlW,OAAM,GACN8U,YAAW,GACXxH,aAAY,GACZ5xB,SAAQ,GACRyU,SAAQ,GACR3Y,YAAW,GACX+a,cAAa,GACbkhB,YAAW,GACX6F,QAAO,GACPG,OAAM,GACNp9D,OAAM,EACNksC,QAAO,GACPstB,eAAc,GACdtyC,MAAK,EACL+tB,MAAK,GAGL+pB,MAAO,GACPC,QAAS,M,sFE5JJ,MAAMC,UAAqBC,MAEhCz7F,YAAYwO,EAAcg1B,EAAkB,IAC1CxzB,MAAM,kBAAoBxB,EAAO,KAAOg1B,GACxC5jC,KAAK4O,KAAOA,GAQT,SAASktF,EAAWrwF,EAAOmD,EAAe,YAAag1B,EAAkB,IAC9E,QAAUnjC,IAANgL,EACF,MAAM,IAAImwF,EAAahtF,EAAMg1B,GAE/B,OAAOn4B,EAKF,SAASswF,EAAIC,KAAkB/4F,GACpC,IAAKA,EAAM,OACX,MAAMklB,EAAO8zE,MAAMvrC,UAAU43B,MAAM33B,KAAK1tD,GAAM2tD,KAAK,KACnD9wD,OAAOo+B,QAAQ69D,IAAIC,EAAQ,KAAO7zE,GAK7B,SAASgW,KAAQl7B,GACtB,MAAMklB,EAAOllB,EAAK2tD,KAAK,KACjBsrC,EAAM,IAAIL,MAChB/7F,OAAOo+B,QAAQ69D,IAAI,YAAa5zE,EAAM+zE,EAAIC,OASrC,SAASC,EAAQz5F,EAAWC,GACjC,IAAIy5F,EAAWz5F,GAAKD,EAAIC,GAAK,EAN/B,IAAgB6I,EAAW1F,EAUzB,OAHIs2F,EAAW,EAAI,IACjBA,IARY5wF,EAQiB,GAAX4wF,IARKt2F,EAQU,IAPnBA,EAAI,EAAIC,SAAS,GAAGyF,EAAI1F,EAAK,IAAMA,EAAIA,EAAIC,SAAS,GAAGyF,EAAI1F,EAAK,IAAMA,GAO9C,IAEjCs2F,EASF,SAASC,EAAQnuF,EAAoB1C,EAAWC,EAAWy6B,EAAQ,OACxEh4B,EAAIhF,OACJgF,EAAI1E,aAAa08B,GAGjBh4B,EAAIsD,YACJtD,EAAIuyB,IAAIj1B,EAAGC,EAAG,EAAG,EAAa,EAAVzG,KAAK07B,IAAQ,GACjCxyB,EAAIyyB,YACJzyB,EAAI2D,OACJ3D,EAAIpE,UAOC,SAASu8B,EAAOtd,GACrB,MAAO,MAAMA,OC7EXuzE,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBh8F,IAAjBi8F,EACH,OAAOA,EAAah9F,QAGrB,IAAIC,EAAS48F,EAAyBE,GAAY,CAGjD/8F,QAAS,IAOV,OAHAi9F,EAAoBF,GAAU98F,EAAQA,EAAOD,QAAS88F,GAG/C78F,EAAOD,QAIf88F,EAAoBvtE,EAAI0tE,ECxBxBH,EAAoB/4F,EAAI,CAAC/D,EAASk9F,KACjC,IAAI,IAAIr7F,KAAOq7F,EACXJ,EAAoB5rF,EAAEgsF,EAAYr7F,KAASi7F,EAAoB5rF,EAAElR,EAAS6B,IAC5EgG,OAAOs1F,eAAen9F,EAAS6B,EAAK,CAAEu7F,YAAY,EAAMvpF,IAAKqpF,EAAWr7F,MCJ3Ei7F,EAAoB52F,EAAI,GAGxB42F,EAAoBzsE,EAAKgtE,GACjBC,QAAQC,IAAI11F,OAAOC,KAAKg1F,EAAoB52F,GAAGs6B,QAAO,CAACg9D,EAAU37F,KACvEi7F,EAAoB52F,EAAErE,GAAKw7F,EAASG,GAC7BA,IACL,KCNJV,EAAoBh5F,EAAKu5F,GAEjB,gBAAkB,CAAC,GAAK,SAAS,IAAM,SAAS,IAAM,UAAU,IAAM,WAAW,IAAM,YAAYA,GAAW,UCHtHP,EAAoBxsE,EAAI,WACvB,GAA0B,iBAAfjwB,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIm9F,SAAS,cAAb,GACd,MAAOptE,GACR,GAAsB,iBAAXjwB,OAAqB,OAAOA,QALjB,GCAxB08F,EAAoB5rF,EAAI,CAAC0mC,EAAK8lD,IAAU71F,OAAOmpD,UAAU2sC,eAAe1sC,KAAKrZ,EAAK8lD,G/FA9En9F,EAAa,GACbC,EAAoB,OAExBs8F,EAAoBc,EAAI,CAACC,EAAK3tF,EAAMrO,EAAKw7F,KACxC,GAAG98F,EAAWs9F,GAAQt9F,EAAWs9F,GAAKrtF,KAAKN,OAA3C,CACA,IAAI4tF,EAAQC,EACZ,QAAWh9F,IAARc,EAEF,IADA,IAAIm8F,EAAU1tC,SAAS2tC,qBAAqB,UACpC/7F,EAAI,EAAGA,EAAI87F,EAAQ77F,OAAQD,IAAK,CACvC,IAAI8D,EAAIg4F,EAAQ97F,GAChB,GAAG8D,EAAEqB,aAAa,QAAUw2F,GAAO73F,EAAEqB,aAAa,iBAAmB7G,EAAoBqB,EAAK,CAAEi8F,EAAS93F,EAAG,OAG1G83F,IACHC,GAAa,GACbD,EAASxtC,SAAS4tC,cAAc,WAEzBC,QAAU,QACjBL,EAAOM,QAAU,IACbtB,EAAoBuB,IACvBP,EAAOv2F,aAAa,QAASu1F,EAAoBuB,IAElDP,EAAOv2F,aAAa,eAAgB/G,EAAoBqB,GACxDi8F,EAAOQ,IAAMT,GAEdt9F,EAAWs9F,GAAO,CAAC3tF,GACnB,IAAIquF,EAAmB,CAACt6B,EAAMu6B,KAE7BV,EAAOW,QAAUX,EAAOY,OAAS,KACjCC,aAAaP,GACb,IAAIQ,EAAUr+F,EAAWs9F,GAIzB,UAHOt9F,EAAWs9F,GAClBC,EAAOe,YAAcf,EAAOe,WAAW/sC,YAAYgsC,GACnDc,GAAWA,EAAQ/kE,SAASlG,GAAQA,EAAG6qE,KACpCv6B,EAAM,OAAOA,EAAKu6B,IAGlBJ,EAAUU,WAAWP,EAAiB3U,KAAK,UAAM7oF,EAAW,CAAE0F,KAAM,UAAWs4F,OAAQjB,IAAW,MACtGA,EAAOW,QAAUF,EAAiB3U,KAAK,KAAMkU,EAAOW,SACpDX,EAAOY,OAASH,EAAiB3U,KAAK,KAAMkU,EAAOY,QACnDX,GAAcztC,SAAS5gB,KAAKkgB,YAAYkuC,KgGvCzChB,EAAoBttE,EAAKxvB,IACH,oBAAXg/F,QAA0BA,OAAOC,aAC1Cp3F,OAAOs1F,eAAen9F,EAASg/F,OAAOC,YAAa,CAAE78F,MAAO,WAE7DyF,OAAOs1F,eAAen9F,EAAS,aAAc,CAAEoC,OAAO,K,MCLvD,IAAI88F,EACApC,EAAoBxsE,EAAE6uE,gBAAeD,EAAYpC,EAAoBxsE,EAAEsN,SAAW,IACtF,IAAI0yB,EAAWwsC,EAAoBxsE,EAAEggC,SACrC,IAAK4uC,GAAa5uC,IACbA,EAAS8uC,gBACZF,EAAY5uC,EAAS8uC,cAAcd,MAC/BY,GAAW,CACf,IAAIlB,EAAU1tC,EAAS2tC,qBAAqB,UACzCD,EAAQ77F,SAAQ+8F,EAAYlB,EAAQA,EAAQ77F,OAAS,GAAGm8F,KAK7D,IAAKY,EAAW,MAAM,IAAI/C,MAAM,yDAChC+C,EAAYA,EAAUruC,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFisC,EAAoBvrB,EAAI2tB,G,SCVxB,IAAIG,EAAkB,CACrB,IAAK,GAGNvC,EAAoB52F,EAAEy9C,EAAI,CAAC05C,EAASG,KAElC,IAAI8B,EAAqBxC,EAAoB5rF,EAAEmuF,EAAiBhC,GAAWgC,EAAgBhC,QAAWt8F,EACtG,GAA0B,IAAvBu+F,EAGF,GAAGA,EACF9B,EAAShtF,KAAK8uF,EAAmB,QAC3B,CAGL,IAAIC,EAAU,IAAIjC,SAAQ,CAACkC,EAASC,IAAYH,EAAqBD,EAAgBhC,GAAW,CAACmC,EAASC,KAC1GjC,EAAShtF,KAAK8uF,EAAmB,GAAKC,GAGtC,IAAI1B,EAAMf,EAAoBvrB,EAAIurB,EAAoBh5F,EAAEu5F,GAEpDqC,EAAQ,IAAIvD,MAgBhBW,EAAoBc,EAAEC,GAfFW,IACnB,GAAG1B,EAAoB5rF,EAAEmuF,EAAiBhC,KAEf,KAD1BiC,EAAqBD,EAAgBhC,MACRgC,EAAgBhC,QAAWt8F,GACrDu+F,GAAoB,CACtB,IAAIK,EAAYnB,IAAyB,SAAfA,EAAM/3F,KAAkB,UAAY+3F,EAAM/3F,MAChEm5F,EAAUpB,GAASA,EAAMO,QAAUP,EAAMO,OAAOT,IACpDoB,EAAMx7D,QAAU,iBAAmBm5D,EAAU,cAAgBsC,EAAY,KAAOC,EAAU,IAC1FF,EAAM/+F,KAAO,iBACb++F,EAAMj5F,KAAOk5F,EACbD,EAAMG,QAAUD,EAChBN,EAAmB,GAAGI,MAIgB,SAAWrC,EAASA,KAiBlE,IAAIyC,EAAuB,CAACC,EAA4BruF,KACvD,IAGIqrF,EAAUM,GAHT2C,EAAUC,EAAaC,GAAWxuF,EAGhBxP,EAAI,EAC3B,GAAG89F,EAASxiE,MAAMh3B,GAAgC,IAAxB64F,EAAgB74F,KAAa,CACtD,IAAIu2F,KAAYkD,EACZnD,EAAoB5rF,EAAE+uF,EAAalD,KACrCD,EAAoBvtE,EAAEwtE,GAAYkD,EAAYlD,IAGhD,GAAGmD,EAAsBA,EAAQpD,GAGlC,IADGiD,GAA4BA,EAA2BruF,GACrDxP,EAAI89F,EAAS79F,OAAQD,IACzBm7F,EAAU2C,EAAS99F,GAChB46F,EAAoB5rF,EAAEmuF,EAAiBhC,IAAYgC,EAAgBhC,IACrEgC,EAAgBhC,GAAS,KAE1BgC,EAAgBW,EAAS99F,IAAM,GAK7Bi+F,EAAuC,oBAAX//F,OAAyBA,OAA+B,oBAAfC,WAA6BA,WAAaC,KAAsB,gBAAsB,oBAAXF,OAAyBA,OAA+B,oBAAfC,WAA6BA,WAAaC,KAAsB,iBAAK,GAClQ6/F,EAAmBtmE,QAAQimE,EAAqBlW,KAAK,KAAM,IAC3DuW,EAAmB3vF,KAAOsvF,EAAqBlW,KAAK,KAAMuW,EAAmB3vF,KAAKo5E,KAAKuW,K,+BCrFhE,UAAa,QAAQ,UAAW,2C,0CCUhD,MCNP,EDMmB,CACjBr3F,K,OAAM,EAEN+wB,QAEA,CAAC52B,EAAU0wB,KACP,IAAK,IAAIzxB,EAAI,EAAGA,EAAIe,EAAEd,OAAQD,IAC5ByxB,EAAG1wB,EAAEf,GAAIA,IAMfk+F,cAEE,CAAC5gB,EAAY6gB,EAAUC,KACrB,GAAI9gB,EAAIr9E,OAAS,EAAG,CAClB,MAAMo+F,EAAS,GACf,IAAIC,EACJhhB,EAAIpvC,KAAKiwD,GAET,IAAK,IAAIn+F,EAAI,EAAGA,EAAIs9E,EAAIr9E,SAAUD,EACtB,IAANA,GAAYo+F,EAAG9gB,EAAIt9E,GAAIs+F,IACzBD,EAAO/vF,KAAKgvE,EAAIt9E,IAElBs+F,EAAOhhB,EAAIt9E,GAGb,OAAOq+F,EAEP,OAAO/gB,GAKbihB,SAEE,CAACx9F,EAAU20C,KACT,IAAI11C,EAAIe,EAAEd,OACV,KAAOD,KACL,GAAIe,EAAEf,KAAO01C,EACX,OAAO,EAGX,OAAO,GAIX8oD,iBAAmBC,IACjB,IAAKA,EACH,MAAM,IAAI,KAAa,cAAe,4BAA8BA,GAGtE,MAAMhzC,EAAS2C,SAASlpD,eAAeu5F,GACvC,IAAMhzC,IAAUA,EAAOziD,WACrB,MAAM,IAAI,KAAa,0BAA2B,8CAGpD,OAAOyiD,EAAOziD,WAAW,OAI3B01F,GAEA,CAAC56F,EAAQE,KACL,MAAM26F,GAAa,IAAIC,MAAOC,UAC9B76F,IACA,MAAM86F,GAAU,IAAIF,MAAOC,UAAYF,GACvC,QAAI76F,EAAGg7F,EAAU,OAIrBC,WAAY,KACE,IAAI9E,OACLM,Q,gBrG1Ef","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/webpack/runtime/load script","webpack://Vex/./src/font.ts","webpack://Vex/./src/fonts/loadDynamic.ts","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/boundingboxcomputation.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/glyph.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/fonts/petalumascript_textmetrics.ts","webpack://Vex/./src/fonts/robotoslab_textmetrics.ts","webpack://Vex/./src/textfont.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/timesigglyph.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/util.ts","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/ensure chunk","webpack://Vex/webpack/runtime/get javascript chunk filename","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/webpack/runtime/make namespace object","webpack://Vex/webpack/runtime/publicPath","webpack://Vex/webpack/runtime/jsonp chunk loading","webpack://Vex/","webpack://Vex/./src/vex.ts","webpack://Vex/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})(typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this, function() {\nreturn ","var inProgress = {};\nvar dataWebpackPrefix = \"Vex:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { defined } from './util';\nimport { loadBravura } from '@bravura';\nimport { loadGonville } from '@gonville';\nimport { loadPetaluma } from '@petaluma';\nimport { loadLeland } from '@leland';\nimport { loadCustom } from '@custom';\n\nexport interface FontData {\n  glyphs: Record<string, FontGlyph>;\n  fontFamily?: string;\n  resolution: number;\n  generatedOn?: string;\n}\n\nexport interface FontDataMetrics {\n  fontData?: FontData;\n  // eslint-disable-next-line\n  metrics?: Record<string, any>;\n}\n\nexport interface FontGlyph {\n  x_min: number;\n  x_max: number;\n  y_min?: number;\n  y_max?: number;\n  ha: number;\n  o: string;\n  leftSideBearing?: number;\n  advanceWidth?: number;\n  cached_outline?: number[];\n}\n\nclass Font {\n  protected name: string;\n  protected fontDataMetrics: FontDataMetrics;\n\n  // eslint-disable-next-line\n  constructor(name: string, metrics?: Record<string, any>, fontData?: FontData) {\n    this.name = name;\n    this.fontDataMetrics = { fontData: undefined, metrics: undefined };\n    switch (name) {\n      case 'Bravura':\n        loadBravura(this.fontDataMetrics);\n        break;\n      case 'Custom':\n        loadCustom(this.fontDataMetrics);\n        break;\n      case 'Gonville':\n        loadGonville(this.fontDataMetrics);\n        break;\n      case 'Petaluma':\n        loadPetaluma(this.fontDataMetrics);\n        break;\n      case 'Leland':\n        loadLeland(this.fontDataMetrics);\n        break;\n      default:\n        this.fontDataMetrics.metrics = metrics;\n        this.fontDataMetrics.fontData = fontData;\n    }\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getResolution(): number {\n    return this.getFontData().resolution;\n  }\n\n  // eslint-disable-next-line\n  getMetrics(): Record<string, any> {\n    return defined(this.fontDataMetrics.metrics, 'FontError', 'Missing metrics');\n  }\n\n  /**\n   * Use the provided key to look up a value in this font's metrics file (e.g., bravura_metrics.ts, petaluma_metrics.ts).\n   * @param key is a string separated by periods (e.g., stave.endPaddingMax, clef.lineCount.'5'.shiftY).\n   * @param defaultValue is returned if the lookup fails.\n   * @returns the retrieved value (or `defaultValue` if the lookup fails).\n   */\n  // eslint-disable-next-line\n  lookupMetric(key: string, defaultValue?: Record<string, any> | number): any {\n    // console.log('lookupMetric:', key);\n\n    const keyParts = key.split('.');\n\n    // Start with the top level font metrics object, and keep looking deeper into the object (via each part of the period-delimited key).\n    let currObj = this.getMetrics();\n    for (let i = 0; i < keyParts.length; i++) {\n      const keyPart = keyParts[i];\n      const value = currObj[keyPart];\n      if (value === undefined) {\n        // If the key lookup fails, we fall back to the defaultValue.\n        return defaultValue;\n      }\n      // The most recent lookup succeeded, so we drill deeper into the object.\n      currObj = value;\n    }\n\n    // After checking every part of the key (i.e., the loop completed), return the most recently retrieved value.\n    // console.log('found:', key, currObj);\n    return currObj;\n  }\n\n  getFontData(): FontData {\n    return defined(this.fontDataMetrics.fontData, 'FontError', 'Missing font data');\n  }\n\n  getGlyphs(): Record<string, FontGlyph> {\n    return this.getFontData().glyphs;\n  }\n}\n\nconst Fonts = {\n  Bravura: (): Font => new Font('Bravura'),\n  Gonville: (): Font => new Font('Gonville'),\n  Petaluma: (): Font => new Font('Petaluma'),\n  Leland: (): Font => new Font('Leland'),\n  Custom: (): Font => new Font('Custom'),\n};\n\nexport { Fonts, Font };\n","import { FontDataMetrics } from '../font';\nexport async function loadBravura(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"bravura\" */ '../fonts/bravura');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadCustom(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"custom\" */ '../fonts/custom');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadGonville(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"gonville\" */ '../fonts/gonville');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadPetaluma(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"petaluma\" */ '../fonts/petaluma');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\nexport async function loadLeland(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"leland\" */ '../fonts/leland');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\n\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n//\n// Author: Joshua Koo / @zz85\n// Author: @incompleteopus\n\nimport { RuntimeError } from './util';\n\n/** Fraction represents a rational number. */\nexport class Fraction {\n  static get CATEGORY(): string {\n    return 'fractions';\n  }\n\n  numerator: number = 1;\n  denominator: number = 1;\n\n  // Cached objects for comparisons.\n  private static __staticFractionA = new Fraction();\n  private static __staticFractionB = new Fraction();\n  private static __staticFractionTmp = new Fraction();\n\n  /** GCD: Greatest common divisor using Euclidean algorithm. */\n  static GCD(a: number, b: number): number {\n    if (typeof a !== 'number' || Number.isNaN(a) || a === 0 || typeof b !== 'number' || Number.isNaN(b) || b === 0) {\n      throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n    }\n\n    let t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  }\n\n  /** LCM: Lowest common multiple. */\n  static LCM(a: number, b: number): number {\n    return (a * b) / Fraction.GCD(a, b);\n  }\n\n  /** Lowest common multiple for more than two numbers. */\n  static LCMM(args: number[]): number {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length === 1) {\n      return args[0];\n    } else if (args.length === 2) {\n      return Fraction.LCM(args[0], args[1]);\n    } else {\n      // args.shift() removes the first number.\n      // LCM the first number with the rest of the numbers.\n      return Fraction.LCM(args.shift() as number, Fraction.LCMM(args));\n    }\n  }\n\n  /** Construct providing numerator and denominator. */\n  constructor(numerator?: number, denominator?: number) {\n    this.set(numerator, denominator);\n  }\n\n  getCategory(): string {\n    return Fraction.CATEGORY;\n  }\n\n  /** Set numerator and denominator. */\n  set(numerator: number = 1, denominator: number = 1): this {\n    this.numerator = numerator;\n    this.denominator = denominator;\n    return this;\n  }\n\n  /** Return the value of the fraction. */\n  value(): number {\n    return this.numerator / this.denominator;\n  }\n\n  /** Simplify numerator and denominator using GCD. */\n  simplify(): this {\n    let u = this.numerator;\n    let d = this.denominator;\n\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n    return this.set(u, d);\n  }\n\n  /** Add value of another fraction. */\n  add(param1: Fraction | number = 0, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Substract value of another fraction. */\n  subtract(param1: Fraction | number = 0, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Multiply by value of another fraction. */\n  multiply(param1: Fraction | number = 1, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n\n  /** Divide by value of another Fraction. */\n  divide(param1: Fraction | number = 1, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  }\n\n  /** Simplify both sides and check if they are equal. */\n  equals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionA.copy(compare).simplify();\n    const b = Fraction.__staticFractionB.copy(this).simplify();\n\n    return a.numerator === b.numerator && a.denominator === b.denominator;\n  }\n\n  /** Greater than operator. */\n  greaterThan(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator > 0;\n  }\n\n  /** Greater than or equals operator. */\n  greaterThanEquals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator >= 0;\n  }\n\n  /** Less than operator. */\n  lessThan(compare: Fraction | number): boolean {\n    return !this.greaterThanEquals(compare);\n  }\n\n  /** Less than or equals operator. */\n  lessThanEquals(compare: Fraction | number): boolean {\n    return !this.greaterThan(compare);\n  }\n\n  /** Return a new copy with current values. */\n  clone(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  /** Copy value of another fraction. */\n  copy(other: Fraction | number): this {\n    if (typeof other === 'number') {\n      return this.set(other, 1);\n    } else {\n      return this.set(other.numerator, other.denominator);\n    }\n  }\n\n  /** Return the integer component (eg. 5/2 => 2). */\n  quotient(): number {\n    return Math.floor(this.numerator / this.denominator);\n  }\n\n  /** Return the remainder component (eg. 5/2 => 1). */\n  remainder(): number {\n    return this.numerator % this.denominator;\n  }\n\n  /** Calculate absolute value. */\n  makeAbs(): this {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  }\n\n  /** Return a raw string representation (eg. \"5/2\"). */\n  toString(): string {\n    return `${this.numerator}/${this.denominator}`;\n  }\n\n  /** Return a simplified string respresentation. */\n  toSimplifiedString(): string {\n    return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n  }\n\n  /** Return string representation in mixed form. */\n  toMixedString(): string {\n    let s = '';\n    const q = this.quotient();\n    const f = Fraction.__staticFractionTmp.copy(this);\n\n    if (q < 0) {\n      f.makeAbs();\n    }\n\n    if (q !== 0) {\n      s += q;\n\n      if (f.numerator !== 0) {\n        s += ` ${f.toSimplifiedString()}`;\n      }\n    } else if (f.numerator === 0) {\n      s = '0';\n    } else {\n      s = f.toSimplifiedString();\n    }\n\n    return s;\n  }\n\n  /** Parse a fraction string. */\n  parse(str: string): this {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = i[1] ? parseInt(i[1], 10) : 1;\n\n    return this.set(n, d);\n  }\n}\n\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n: Fraction | number, d: number = 1): [number, number] {\n  if (typeof n === 'number') {\n    // Both params are numbers, so we return them as [numerator, denominator].\n    return [n, d];\n  } else {\n    // First param is a Fraction object. We ignore the second param.\n    return [n.numerator, n.denominator];\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\n\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n  // [attribute_name][attribute_value][element_id] => Element\n  [key: string]: { [key: string]: { [key: string]: Element } };\n  constructor() {\n    this.id = {};\n    this.type = {};\n    this.class = {};\n  }\n}\n\ninterface RegistryUpdate {\n  id: string;\n  name: string;\n  value: string | undefined;\n  oldValue: string | undefined;\n}\n\nexport class Registry {\n  private static defaultRegistry?: Registry;\n\n  static getDefaultRegistry(): Registry | undefined {\n    return Registry.defaultRegistry;\n  }\n\n  // If you call `enableDefaultRegistry`, any new elements will auto-register with\n  // the provided registry as soon as they're constructed.\n  static enableDefaultRegistry(registry: Registry): void {\n    Registry.defaultRegistry = registry;\n  }\n\n  static disableDefaultRegistry(): void {\n    Registry.defaultRegistry = undefined;\n  }\n\n  protected index: Index;\n\n  constructor() {\n    this.index = new Index();\n  }\n\n  clear(): this {\n    this.index = new Index();\n    return this;\n  }\n\n  setIndexValue(name: string, value: string, id: string, elem: Element): void {\n    const index = this.index;\n    if (!index[name][value]) {\n      index[name][value] = {};\n    }\n    index[name][value][id] = elem;\n  }\n\n  // Updates the indexes for element 'id'. If an element's attribute changes\n  // from A -> B, make sure to remove the element from A.\n  updateIndex({ id, name, value, oldValue }: RegistryUpdate): void {\n    const elem = this.getElementById(id);\n    if (oldValue !== undefined && this.index[name][oldValue]) {\n      delete this.index[name][oldValue][id];\n    }\n    if (value && elem) {\n      this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n    }\n  }\n\n  /**\n   * Register element `elem` with this registry.\n   * This adds the element to its index and watches it for attribute changes.\n   * @param elem\n   * @param id\n   * @returns this\n   */\n  register(elem: Element, id?: string): this {\n    id = id || elem.getAttribute('id');\n    if (!id) {\n      throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n    }\n\n    // Manually add id to index, then update other indexes.\n    elem.setAttribute('id', id);\n    this.setIndexValue('id', id, id, elem);\n    this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n    elem.onRegister(this);\n    return this;\n  }\n\n  getElementById(id: string): Element | undefined {\n    return this.index.id?.[id]?.[id]; // return undefined if the id is not found.\n  }\n\n  getElementsByAttribute(attribute: string, value: string): Element[] {\n    const index_attr = this.index[attribute];\n    if (index_attr) {\n      const index_attr_val = index_attr[value];\n      if (index_attr_val) {\n        const keys = Object.keys(index_attr_val);\n        return keys.map((k) => index_attr_val[k]);\n      }\n    }\n    return [];\n  }\n\n  getElementsByType(type: string): Element[] {\n    return this.getElementsByAttribute('type', type);\n  }\n\n  getElementsByClass(className: string): Element[] {\n    return this.getElementsByAttribute('class', className);\n  }\n\n  // This is called by the element when an attribute value changes. If an indexed\n  // attribute changes, then update the local index.\n  onUpdate(info: RegistryUpdate): this {\n    const allowedNames = ['id', 'type', 'class'];\n    if (allowedNames.includes(info.name)) {\n      this.updateIndex(info);\n    }\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\n\nimport { defined } from './util';\nimport { Registry } from './registry';\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { RenderContext } from './types/common';\nimport { Flow } from './flow';\n\n/** Element attributes. */\nexport interface ElementAttributes {\n  // eslint-disable-next-line\n  [name: string]: any;\n  id: string;\n  // eslint-disable-next-line\n  el?: any;\n  type: string;\n  classes: Record<string, boolean>;\n}\n\n/** Element style */\nexport interface ElementStyle {\n  shadowColor?: string;\n  shadowBlur?: number;\n  fillStyle?: string;\n  strokeStyle?: string;\n  lineWidth?: number;\n}\n\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n */\nexport abstract class Element {\n  protected static ID: number = 1000;\n  private context?: RenderContext;\n  protected rendered: boolean;\n  protected style?: ElementStyle;\n  private attrs: ElementAttributes;\n  protected boundingBox?: BoundingBox;\n  protected registry?: Registry;\n\n  // fontStack and musicFont are both initialized by the constructor via this.setFontStack(...).\n  protected fontStack!: Font[];\n  protected musicFont!: Font;\n\n  protected static newID(): string {\n    return `auto${Element.ID++}`;\n  }\n\n  /** Constructor. */\n  constructor({ type }: { type?: string } = {}) {\n    this.attrs = {\n      id: Element.newID(),\n      el: undefined,\n      type: type || 'Base',\n      classes: {},\n    };\n\n    this.rendered = false;\n    this.setFontStack(Flow.DEFAULT_FONT_STACK);\n\n    // If a default registry exist, then register with it right away.\n    Registry.getDefaultRegistry()?.register(this);\n  }\n\n  /** Set music fonts stack. */\n  setFontStack(fontStack: Font[]): this {\n    this.fontStack = fontStack;\n    this.musicFont = fontStack[0];\n    return this;\n  }\n\n  /** Get music fonts stack. */\n  getFontStack(): Font[] {\n    return this.fontStack;\n  }\n\n  /** Set the draw style of a stemmable note. */\n  setStyle(style: ElementStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  /** Get the draw style of a stemmable note. */\n  getStyle(): ElementStyle | undefined {\n    return this.style;\n  }\n\n  /** Apply current style to Canvas `context`. */\n  applyStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n\n    context.save();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    if (style.lineWidth) context.setLineWidth(style.lineWidth);\n    return this;\n  }\n\n  /** Restore style of `context`. */\n  restoreStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n    context.restore();\n    return this;\n  }\n\n  /** Draw with style of an element. */\n  drawWithStyle(): void {\n    this.checkContext();\n    this.applyStyle();\n    this.draw();\n    this.restoreStyle();\n  }\n\n  /** Draw an element. */\n  // eslint-disable-next-line\n  abstract draw(...args: any[]): void;\n\n  /** Check if it has a class label (An element can have multiple class labels).  */\n  hasClass(className: string): boolean {\n    return this.attrs.classes[className] === true;\n  }\n\n  /** Add a class label (An element can have multiple class labels).  */\n  addClass(className: string): this {\n    this.attrs.classes[className] = true;\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.attrs.id,\n        name: 'class',\n        value: className,\n        oldValue: undefined,\n      });\n    }\n    return this;\n  }\n\n  /** Remove a class label (An element can have multiple class labels).  */\n  removeClass(className: string): this {\n    delete this.attrs.classes[className];\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.attrs.id,\n        name: 'class',\n        value: undefined,\n        oldValue: className,\n      });\n    }\n    return this;\n  }\n\n  /** Call back from registry after the element is registered. */\n  onRegister(registry: Registry): this {\n    this.registry = registry;\n    return this;\n  }\n\n  /** Return the rendered status. */\n  isRendered(): boolean {\n    return this.rendered;\n  }\n\n  /** Set the rendered status. */\n  setRendered(rendered = true): this {\n    this.rendered = rendered;\n    return this;\n  }\n\n  /** Return the element attributes. */\n  getAttributes(): ElementAttributes {\n    return this.attrs;\n  }\n\n  /** Return an attribute. */\n  // eslint-disable-next-line\n  getAttribute(name: string): any {\n    return this.attrs[name];\n  }\n\n  /** Set an attribute. */\n  // eslint-disable-next-line\n  setAttribute(name: string, value: any): this {\n    const oldID = this.attrs.id;\n    const oldValue = this.attrs[name];\n    this.attrs[name] = value;\n    if (this.registry) {\n      // Register with old id to support id changes.\n      this.registry.onUpdate({ id: oldID, name, value, oldValue });\n    }\n    return this;\n  }\n\n  /** Get the boundingBox. */\n  getBoundingBox(): BoundingBox | undefined {\n    return this.boundingBox;\n  }\n\n  /** Return the context. */\n  getContext(): RenderContext | undefined {\n    return this.context;\n  }\n\n  /** Set the context. */\n  setContext(context?: RenderContext): this {\n    this.context = context;\n    return this;\n  }\n\n  /** Validate and return the context. */\n  checkContext(): RenderContext {\n    return defined(this.context, 'NoContext', 'No rendering context attached to instance.');\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\n/**\n * BoundingBoxComputation computes metrics for a bounding box by continuously\n * taking canvas path commands.\n *\n * Warning: This class is merely a crutch to get bounding box information without\n * explicit metadata. This is likely to get deprecated following SMuFL support.\n *\n * based on: https://github.com/canvg/canvg/blob/master/src/BoundingBox.ts (MIT License)\n */\nexport class BoundingBoxComputation {\n  protected x1: number = Number.NaN;\n  protected y1: number = Number.NaN;\n  protected x2: number = Number.NaN;\n  protected y2: number = Number.NaN;\n\n  /** Get calculated X1. */\n  getX1(): number {\n    return this.x1;\n  }\n\n  /** Get calculated Y1. */\n  getY1(): number {\n    return this.y1;\n  }\n\n  /** Get calculated width. */\n  width(): number {\n    return this.x2 - this.x1;\n  }\n\n  /** Get calculated height. */\n  height(): number {\n    return this.y2 - this.y1;\n  }\n\n  /** Add point to BoundingBox. */\n  addPoint(x: number, y: number): void {\n    if (isNaN(this.x1) || x < this.x1) this.x1 = x;\n    if (isNaN(this.x2) || x > this.x2) this.x2 = x;\n    if (isNaN(this.y1) || y < this.y1) this.y1 = y;\n    if (isNaN(this.y2) || y > this.y2) this.y2 = y;\n  }\n\n  /** Add X to BoundingBox. */\n  addX(x: number): void {\n    this.addPoint(x, this.y1);\n  }\n\n  /** Add Y to BoundingBox. */\n  addY(y: number): void {\n    this.addPoint(this.x1, y);\n  }\n\n  /** Add quadratic curve to BoundingBox. */\n  addQuadraticCurve(p0x: number, p0y: number, p1x: number, p1y: number, p2x: number, p2y: number): void {\n    this.addPoint(p0x, p0y);\n    this.addPoint(p2x, p2y);\n\n    const p01x = p1x - p0x;\n    const p12x = p2x - p1x;\n    let denom = p01x - p12x;\n    if (denom != 0) {\n      const t = p01x / denom;\n      if (t > 0 && t < 1) {\n        const it = 1 - t;\n        this.addX(it * it * p0x + 2 * it * t * p1x + t * t * p2x);\n      }\n    }\n\n    const p01y = p1y - p0y;\n    const p12y = p2y - p1y;\n    denom = p01y - p12y;\n    if (denom != 0) {\n      const t = p01y / denom;\n      if (t > 0 && t < 1) {\n        const it = 1 - t;\n        this.addY(it * it * p0y + 2 * it * t * p1y + t * t * p2y);\n      }\n    }\n  }\n\n  /** Add bezier curve to BoundingBox. */\n  addBezierCurve(\n    p0x: number,\n    p0y: number,\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number\n  ): void {\n    // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    const p0 = [p0x, p0y];\n    const p1 = [p1x, p1y];\n    const p2 = [p2x, p2y];\n    const p3 = [p3x, p3y];\n    let i;\n\n    this.addPoint(p0[0], p0[1]);\n    this.addPoint(p3[0], p3[1]);\n\n    const f = (t: number, i: number) =>\n      Math.pow(1 - t, 3) * p0[i] +\n      3 * Math.pow(1 - t, 2) * t * p1[i] +\n      3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n      Math.pow(t, 3) * p3[i];\n\n    for (i = 0; i <= 1; i++) {\n      const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n      const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n      const c = 3 * p1[i] - 3 * p0[i];\n\n      if (a === 0) {\n        if (b === 0) continue;\n        const t = -c / b;\n        if (0 < t && t < 1) {\n          if (i === 0) this.addX(f(t, i));\n          if (i === 1) this.addY(f(t, i));\n        }\n        continue;\n      }\n\n      const b2ac = Math.pow(b, 2) - 4 * c * a;\n      if (b2ac < 0) continue;\n      const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        if (i === 0) this.addX(f(t1, i));\n        if (i === 1) this.addY(f(t1, i));\n      }\n      const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        if (i === 0) this.addX(f(t2, i));\n        if (i === 1) this.addY(f(t2, i));\n      }\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RenderContext } from './types/common';\n\n/** Bounding boxes for interactive notation */\n\nexport class BoundingBox {\n  protected x: number;\n  protected y: number;\n  protected w: number;\n  protected h: number;\n\n  /**\n   * Create a new copy.\n   */\n  static copy(that: BoundingBox): BoundingBox {\n    return new BoundingBox(that.x, that.y, that.w, that.h);\n  }\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  /** Get x position. */\n  getX(): number {\n    return this.x;\n  }\n\n  /** Get y position. */\n  getY(): number {\n    return this.y;\n  }\n\n  /** Get width. */\n  getW(): number {\n    return this.w;\n  }\n\n  /** Get height. */\n  getH(): number {\n    return this.h;\n  }\n\n  /** Set x position. */\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  /** Set y position. */\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  /** Set width. */\n  setW(w: number): this {\n    this.w = w;\n    return this;\n  }\n\n  /** Set height. */\n  setH(h: number): this {\n    this.h = h;\n    return this;\n  }\n\n  /** Move to position. */\n  move(x: number, y: number): this {\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  /** Clone. */\n  clone(): BoundingBox {\n    return BoundingBox.copy(this);\n  }\n\n  /**\n   * Merge my box with given box. Creates a bigger bounding box unless\n   * the given box is contained in this one.\n   */\n  mergeWith(boundingBox: BoundingBox, ctx?: RenderContext): this {\n    const that = boundingBox;\n\n    const new_x = this.x < that.x ? this.x : that.x;\n    const new_y = this.y < that.y ? this.y : that.y;\n    const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n    const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n\n    this.x = new_x;\n    this.y = new_y;\n    this.w = new_w;\n    this.h = new_h;\n\n    if (ctx) this.draw(ctx);\n    return this;\n  }\n\n  /**\n   * Render the BoundingBox.\n   * @param ctx rendering context\n   * @param x horizontal shift\n   * @param y vertical shift\n   */\n  draw(ctx: RenderContext, x?: number, y?: number): void {\n    if (!x) x = 0;\n    if (!y) y = 0;\n    ctx.rect(this.x + x, this.y + y, this.w, this.h);\n    ctx.stroke();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { defined, RuntimeError } from './util';\nimport { Element } from './element';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { BoundingBox } from './boundingbox';\nimport { Font, FontGlyph } from './font';\nimport { RenderContext, TypeProps } from './types/common';\nimport { Stave } from './stave';\nimport { Stem } from './stem';\nimport { Flow } from './flow';\n\nexport interface DurationCode {\n  common: TypeProps;\n  type: Record<string, TypeProps>;\n}\n\nexport interface GlyphProps {\n  code_head: string;\n  dot_shiftY: number;\n  position: string;\n  rest: boolean;\n  line_below: number;\n  line_above: number;\n  stem_up_extension: number;\n  stem_down_extension: number;\n  stem: Stem;\n  code: string;\n  code_flag_upstem: string;\n  code_flag_downstem: string;\n  flag: boolean;\n  width: number;\n  text: string;\n  tabnote_stem_down_extension: number;\n  tabnote_stem_up_extension: number;\n  beam_count: number;\n  duration_codes: Record<string, DurationCode>;\n  validTypes: Record<string, string>;\n  shift_y: number;\n\n  getWidth(a?: number): number;\n\n  getMetrics(): GlyphMetrics;\n}\nexport interface GlyphOptions {\n  fontStack: Font[];\n  category?: string;\n}\nexport interface GlyphMetrics {\n  width: number;\n  height: number;\n  x_min: number;\n  x_max: number;\n  x_shift: number;\n  y_shift: number;\n  scale: number;\n  ha: number;\n  outline: number[];\n  font: Font;\n}\n\nexport const enum OutlineCode {\n  MOVE = 0,\n  LINE = 1,\n  QUADRATIC = 2,\n  BEZIER = 3,\n}\n\nclass GlyphCacheEntry {\n  metrics: GlyphMetrics;\n  bbox: BoundingBox;\n  point: number = -1;\n\n  constructor(fontStack: Font[], code: string, category?: string) {\n    this.metrics = Glyph.loadMetrics(fontStack, code, category);\n    this.bbox = Glyph.getOutlineBoundingBox(\n      this.metrics.outline,\n      this.metrics.scale,\n      this.metrics.x_shift,\n      this.metrics.y_shift\n    );\n\n    if (category) {\n      this.point = Glyph.lookupFontMetric(this.metrics.font, category, code, 'point', -1);\n    }\n  }\n}\n\nclass GlyphCache {\n  protected cache: Map<Font[], Record<string, GlyphCacheEntry>> = new Map();\n\n  lookup(fontStack: Font[], code: string, category?: string): GlyphCacheEntry {\n    let entries = this.cache.get(fontStack);\n    if (entries === undefined) {\n      entries = {};\n      this.cache.set(fontStack, entries);\n    }\n    const key = category ? `${code}%${category}` : code;\n    let entry = entries[key];\n    if (entry === undefined) {\n      entry = new GlyphCacheEntry(fontStack, code, category);\n      entries[key] = entry;\n    }\n    return entry;\n  }\n}\n\nclass GlyphOutline {\n  private i: number = 0;\n\n  constructor(private outline: number[], private originX: number, private originY: number, private scale: number) {}\n\n  done(): boolean {\n    return this.i >= this.outline.length;\n  }\n  next(): number {\n    return this.outline[this.i++];\n  }\n  nextX(): number {\n    return this.originX + this.outline[this.i++] * this.scale;\n  }\n  nextY(): number {\n    return this.originY - this.outline[this.i++] * this.scale;\n  }\n\n  static parse(str: string): number[] {\n    const result: number[] = [];\n    const parts = str.split(' ');\n    let i = 0;\n    while (i < parts.length) {\n      switch (parts[i++]) {\n        case 'm':\n          result.push(OutlineCode.MOVE, parseInt(parts[i++]), parseInt(parts[i++]));\n          break;\n        case 'l':\n          result.push(OutlineCode.LINE, parseInt(parts[i++]), parseInt(parts[i++]));\n          break;\n        case 'q':\n          result.push(\n            OutlineCode.QUADRATIC,\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++])\n          );\n          break;\n        case 'b':\n          result.push(\n            OutlineCode.BEZIER,\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++])\n          );\n          break;\n      }\n    }\n    return result;\n  }\n}\n\nexport class Glyph extends Element {\n  protected static cache = new GlyphCache();\n\n  bbox: BoundingBox = new BoundingBox(0, 0, 0, 0);\n  code: string;\n  // metrics is initialised in the constructor by either setOptions or reset\n  // eslint-disable-next-line\n  metrics!: GlyphMetrics;\n  topGlyphs: Glyph[] = [];\n  botGlyphs: Glyph[] = [];\n\n  protected options: GlyphOptions;\n  protected originShift: { x: number; y: number };\n  protected x_shift: number;\n  protected y_shift: number;\n  scale: number = 1;\n  protected point: number;\n  protected stave?: Stave;\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Static methods for loading and rendering glyphs.\n\n  /**\n   * Pass a key of the form `glyphs.{category}.{code}.{key}` to Font.lookupMetric(). If the initial lookup fails,\n   * try again with the path `glyphs.{category}.{key}`. If the second lookup fails, return the defaultValue.\n   *\n   * @param font\n   * @param category any metric path under 'glyphs', so 'stem.up' could resolve to glyphs.stem.up.shiftX, glyphs.stem.up.shiftY, etc.\n   * @param code\n   * @param key\n   * @param defaultValue\n   */\n  static lookupFontMetric(font: Font, category: string, code: string, key: string, defaultValue: number): number {\n    let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);\n    if (value === undefined) {\n      // The first lookup failed, so we omit .${code} and try again (with a defaultValue this time).\n      value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);\n    }\n    return value;\n  }\n\n  static lookupGlyph(fontStack: Font[], code: string): { font: Font; glyph: FontGlyph } {\n    defined(fontStack, 'BadFontStack', 'Font stack is misconfigured');\n\n    let glyph: FontGlyph;\n    let font: Font;\n    for (let i = 0; i < fontStack.length; i++) {\n      font = fontStack[i];\n      glyph = font.getGlyphs()[code];\n      if (glyph) return { glyph, font };\n    }\n\n    throw new RuntimeError('BadGlyph', `Glyph ${code} does not exist in font.`);\n  }\n\n  static loadMetrics(fontStack: Font[], code: string, category?: string): GlyphMetrics {\n    const { glyph, font } = Glyph.lookupGlyph(fontStack, code);\n\n    if (!glyph.o) throw new RuntimeError('BadGlyph', `Glyph ${code} has no outline defined.`);\n\n    let x_shift = 0;\n    let y_shift = 0;\n    let scale = 1;\n    if (category && font) {\n      x_shift = Glyph.lookupFontMetric(font, category, code, 'shiftX', 0);\n      y_shift = Glyph.lookupFontMetric(font, category, code, 'shiftY', 0);\n      scale = Glyph.lookupFontMetric(font, category, code, 'scale', 1);\n    }\n\n    const x_min = glyph.x_min;\n    const x_max = glyph.x_max;\n    const ha = glyph.ha;\n\n    if (!glyph.cached_outline) {\n      glyph.cached_outline = GlyphOutline.parse(glyph.o);\n    }\n\n    return {\n      x_min,\n      x_max,\n      x_shift,\n      y_shift,\n      scale,\n      ha,\n      outline: glyph.cached_outline,\n      font,\n      width: x_max - x_min,\n      height: ha,\n    };\n  }\n\n  /**\n   * Renders glyphs from the default font stack.\n   *\n   * @param ctx Canvas or SVG context\n   * @param x_pos x coordinate\n   * @param y_pos y coordinate\n   * @param point the point size of the font\n   * @param code the glyph code in font.getGlyphs()\n   * @param options\n   * @returns\n   */\n  static renderGlyph(\n    ctx: RenderContext,\n    x_pos: number,\n    y_pos: number,\n    point: number,\n    code: string,\n    options?: { font?: Font; category: string }\n  ): GlyphMetrics {\n    const params = {\n      fontStack: Flow.DEFAULT_FONT_STACK,\n      ...options,\n    };\n    const data = Glyph.cache.lookup(params.fontStack, code, params.category);\n    const metrics = data.metrics;\n    if (data.point != -1) {\n      point = data.point;\n    }\n\n    const scale = (point * 72.0) / (metrics.font.getResolution() * 100.0);\n\n    Glyph.renderOutline(ctx, metrics.outline, scale * metrics.scale, x_pos + metrics.x_shift, y_pos + metrics.y_shift);\n    return metrics;\n  }\n\n  static renderOutline(ctx: RenderContext, outline: number[], scale: number, x_pos: number, y_pos: number): void {\n    const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n\n    ctx.beginPath();\n    ctx.moveTo(x_pos, y_pos);\n    let x, y: number;\n    while (!go.done()) {\n      switch (go.next()) {\n        case OutlineCode.MOVE:\n          ctx.moveTo(go.nextX(), go.nextY());\n          break;\n        case OutlineCode.LINE:\n          ctx.lineTo(go.nextX(), go.nextY());\n          break;\n        case OutlineCode.QUADRATIC:\n          x = go.nextX();\n          y = go.nextY();\n          ctx.quadraticCurveTo(go.nextX(), go.nextY(), x, y);\n          break;\n        case OutlineCode.BEZIER:\n          x = go.nextX();\n          y = go.nextY();\n          ctx.bezierCurveTo(go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n          break;\n      }\n    }\n    ctx.fill();\n  }\n\n  static getOutlineBoundingBox(outline: number[], scale: number, x_pos: number, y_pos: number): BoundingBox {\n    const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n    const bboxComp = new BoundingBoxComputation();\n\n    // (penX, penY) hold the pen position: the start of each stroke.\n    let penX: number = x_pos;\n    let penY: number = y_pos;\n    let x, y: number;\n    while (!go.done()) {\n      switch (go.next()) {\n        case OutlineCode.MOVE:\n          // Note that we don't add any points to the bounding box until a srroke is actually drawn.\n          penX = go.nextX();\n          penY = go.nextY();\n          break;\n        case OutlineCode.LINE:\n          bboxComp.addPoint(penX, penY);\n          penX = go.nextX();\n          penY = go.nextY();\n          bboxComp.addPoint(penX, penY);\n          break;\n        case OutlineCode.QUADRATIC:\n          x = go.nextX();\n          y = go.nextY();\n          bboxComp.addQuadraticCurve(penX, penY, go.nextX(), go.nextY(), x, y);\n          penX = x;\n          penY = y;\n          break;\n        case OutlineCode.BEZIER:\n          x = go.nextX();\n          y = go.nextY();\n          bboxComp.addBezierCurve(penX, penY, go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n          penX = x;\n          penY = y;\n          break;\n      }\n    }\n\n    return new BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());\n  }\n\n  static getWidth(fontStack: Font[], code: string, point: number, category?: string): number {\n    const data = Glyph.cache.lookup(fontStack, code, category);\n    if (data.point != -1) {\n      point = data.point;\n    }\n    const scale = (point * 72) / (data.metrics.font.getResolution() * 100);\n    return data.bbox.getW() * scale;\n  }\n\n  /**\n   * @param code\n   * @param point\n   * @param options\n   */\n  constructor(code: string, point: number, options?: { category: string }) {\n    super();\n    this.setAttribute('type', 'Glyph');\n\n    this.code = code;\n    this.point = point;\n    this.options = {\n      fontStack: this.getFontStack(),\n    };\n\n    this.x_shift = 0;\n    this.y_shift = 0;\n\n    this.originShift = {\n      x: 0,\n      y: 0,\n    };\n\n    if (options) {\n      this.setOptions(options);\n    } else {\n      this.reset();\n    }\n  }\n\n  // eslint-disable-next-line\n  draw(...args: any[]): void {\n    // DO NOTHING.\n  }\n\n  getCode(): string {\n    return this.code;\n  }\n\n  // eslint-disable-next-line\n  setOptions(options: any): void {\n    this.options = { ...this.options, ...options };\n    this.reset();\n  }\n\n  setPoint(point: number): this {\n    this.point = point;\n    return this;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  setXShift(x_shift: number): this {\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  setYShift(y_shift: number): this {\n    this.y_shift = y_shift;\n    return this;\n  }\n\n  reset(): void {\n    const data = Glyph.cache.lookup(this.options.fontStack, this.code, this.options.category);\n    this.metrics = data.metrics;\n    // Override point from metrics file\n    if (data.point != -1) {\n      this.point = data.point;\n    }\n\n    this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);\n    this.bbox = new BoundingBox(\n      data.bbox.getX() * this.scale,\n      data.bbox.getY() * this.scale,\n      data.bbox.getW() * this.scale,\n      data.bbox.getH() * this.scale\n    );\n  }\n\n  checkMetrics(): GlyphMetrics {\n    return defined(this.metrics, 'BadGlyph', `Glyph ${this.code} is not initialized.`);\n  }\n\n  getMetrics(): GlyphMetrics {\n    const metrics = this.checkMetrics();\n    const metricsScale = metrics.scale;\n    return {\n      x_min: metrics.x_min * this.scale * metricsScale,\n      x_max: metrics.x_max * this.scale * metricsScale,\n      width: this.bbox.getW(),\n      height: this.bbox.getH(),\n      scale: this.scale * metricsScale,\n      x_shift: metrics.x_shift,\n      y_shift: metrics.y_shift,\n      outline: metrics.outline,\n      font: metrics.font,\n      ha: metrics.ha,\n    };\n  }\n\n  setOriginX(x: number): void {\n    const { bbox } = this;\n    const originX = Math.abs(bbox.getX() / bbox.getW());\n    const xShift = (x - originX) * bbox.getW();\n    this.originShift.x = -xShift;\n  }\n\n  setOriginY(y: number): void {\n    const { bbox } = this;\n    const originY = Math.abs(bbox.getY() / bbox.getH());\n    const yShift = (y - originY) * bbox.getH();\n    this.originShift.y = -yShift;\n  }\n\n  setOrigin(x: number, y: number): void {\n    this.setOriginX(x);\n    this.setOriginY(y);\n  }\n\n  render(ctx: RenderContext, x: number, y: number): void {\n    const metrics = this.checkMetrics();\n\n    const outline = metrics.outline;\n    const scale = this.scale * metrics.scale;\n\n    this.setRendered();\n    this.applyStyle(ctx);\n    const xPos = x + this.originShift.x + metrics.x_shift;\n    const yPos = y + this.originShift.y + metrics.y_shift;\n    Glyph.renderOutline(ctx, outline, scale, xPos, yPos);\n    this.restoreStyle(ctx);\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  renderToStave(x: number): void {\n    const context = this.checkContext();\n    const metrics = this.checkMetrics();\n    const stave = this.checkStave();\n\n    const outline = metrics.outline;\n    const scale = this.scale * metrics.scale;\n\n    this.setRendered();\n    this.applyStyle();\n\n    const xPos = x + this.x_shift + metrics.x_shift;\n    const yPos = stave.getYForGlyphs() + this.y_shift + metrics.y_shift;\n    Glyph.renderOutline(context, outline, scale, xPos, yPos);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/* eslint-disable key-spacing */\n\nimport { ArticulationStruct } from './articulation';\nimport { Flow } from './flow';\nimport { Fonts } from './font';\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { RuntimeError } from './util';\n\n// Custom note heads\nconst customNoteHeads: Record<string, { code: string }> = {\n  /* Diamond */\n  D0: { code: 'noteheadDiamondWhole' },\n  D1: { code: 'noteheadDiamondHalf' },\n  D2: { code: 'noteheadDiamondBlack' },\n  D3: { code: 'noteheadDiamondBlack' },\n\n  /* Triangle */\n  T0: { code: 'noteheadTriangleUpWhole' },\n  T1: { code: 'noteheadTriangleUpHalf' },\n  T2: { code: 'noteheadTriangleUpBlack' },\n  T3: { code: 'noteheadTriangleUpBlack' },\n\n  /* Cross */\n  X0: { code: 'noteheadXWhole' },\n  X1: { code: 'noteheadXHalf' },\n  X2: { code: 'noteheadXBlack' },\n  X3: { code: 'noteheadCircleX' },\n\n  /* Square */\n  S1: { code: 'noteheadSquareWhite' },\n  S2: { code: 'noteheadSquareBlack' },\n\n  /* Rectangle */\n  R1: { code: 'vexNoteHeadRectWhite' }, // no smufl code\n  R2: { code: 'vexNoteHeadRectBlack' }, // no smufl code\n};\n\nconst RESOLUTION = 16384;\n\nconst durations: Record<string, number> = {\n  '1/2': RESOLUTION * 2,\n  1: RESOLUTION / 1,\n  2: RESOLUTION / 2,\n  4: RESOLUTION / 4,\n  8: RESOLUTION / 8,\n  16: RESOLUTION / 16,\n  32: RESOLUTION / 32,\n  64: RESOLUTION / 64,\n  128: RESOLUTION / 128,\n  256: RESOLUTION / 256,\n};\n\nconst accidentals: Record<string, { code: string; parenRightPaddingAdjustment: number }> = {\n  '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\n  '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\n  bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\n  n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\n  '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\n  '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\n  db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\n  d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\n  '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\n  '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\n  '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\n  bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\n  bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\n  o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\n  k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\n  bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\n  '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\n  ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\n  afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },\n  accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },\n  accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlatAndFlat: {\n    code: 'accidentalNarrowReversedFlatAndFlat',\n    parenRightPaddingAdjustment: -1,\n  },\n  accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },\n  accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },\n};\n\n// eslint-disable-next-line\nlet duration_codes: Record<string, any>;\n\nexport const Tables = {\n  STEM_WIDTH: 1.5,\n  STEM_HEIGHT: 35,\n  STAVE_LINE_THICKNESS: 1,\n  RESOLUTION: RESOLUTION,\n\n  /**\n   * Customize this to choose a different music font.\n   * For example: Vex.Flow.DEFAULT_FONT_STACK = [Fonts.Petaluma(), Fonts.Custom()];\n   */\n  DEFAULT_FONT_STACK: [Fonts.Bravura(), Fonts.Gonville(), Fonts.Custom()],\n  DEFAULT_NOTATION_FONT_SCALE: 39,\n  DEFAULT_TABLATURE_FONT_SCALE: 39,\n  SLASH_NOTEHEAD_WIDTH: 15,\n  STAVE_LINE_DISTANCE: 10,\n\n  // HACK:\n  // Since text origins are positioned at the baseline, we must\n  // compensate for the ascender of the text. Of course, 1 staff space is\n  // a very poor approximation.\n  //\n  // This will be deprecated in the future. This is a temporary solution until\n  // we have more robust text metrics.\n  TEXT_HEIGHT_OFFSET_HACK: 1,\n\n  /* Kerning (DEPRECATED) */\n  IsKerned: true,\n\n  clefProperties: (clef: string): { line_shift: number } => {\n    const values: Record<string, { line_shift: number }> = {\n      treble: { line_shift: 0 },\n      bass: { line_shift: 6 },\n      tenor: { line_shift: 4 },\n      alto: { line_shift: 3 },\n      soprano: { line_shift: 1 },\n      percussion: { line_shift: 0 },\n      'mezzo-soprano': { line_shift: 2 },\n      'baritone-c': { line_shift: 5 },\n      'baritone-f': { line_shift: 5 },\n      subbass: { line_shift: 7 },\n      french: { line_shift: -1 },\n    };\n    if (!clef) throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n\n    const props = values[clef];\n    if (!props) throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n\n    return props;\n  },\n\n  /*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n  */\n  // eslint-disable-next-line\n  keyProperties(key: string, clef?: string, params?: any): any {\n    const noteValues: Record<\n      string,\n      {\n        index: number;\n        int_val?: number;\n        accidental?: string;\n        rest?: boolean;\n        octave?: number;\n        code?: string;\n        shift_right?: number;\n      }\n    > = {\n      C: { index: 0, int_val: 0 },\n      CN: { index: 0, int_val: 0, accidental: 'n' },\n      'C#': { index: 0, int_val: 1, accidental: '#' },\n      'C##': { index: 0, int_val: 2, accidental: '##' },\n      CB: { index: 0, int_val: 11, accidental: 'b' },\n      CBB: { index: 0, int_val: 10, accidental: 'bb' },\n      D: { index: 1, int_val: 2 },\n      DN: { index: 1, int_val: 2, accidental: 'n' },\n      'D#': { index: 1, int_val: 3, accidental: '#' },\n      'D##': { index: 1, int_val: 4, accidental: '##' },\n      DB: { index: 1, int_val: 1, accidental: 'b' },\n      DBB: { index: 1, int_val: 0, accidental: 'bb' },\n      E: { index: 2, int_val: 4 },\n      EN: { index: 2, int_val: 4, accidental: 'n' },\n      'E#': { index: 2, int_val: 5, accidental: '#' },\n      'E##': { index: 2, int_val: 6, accidental: '##' },\n      EB: { index: 2, int_val: 3, accidental: 'b' },\n      EBB: { index: 2, int_val: 2, accidental: 'bb' },\n      F: { index: 3, int_val: 5 },\n      FN: { index: 3, int_val: 5, accidental: 'n' },\n      'F#': { index: 3, int_val: 6, accidental: '#' },\n      'F##': { index: 3, int_val: 7, accidental: '##' },\n      FB: { index: 3, int_val: 4, accidental: 'b' },\n      FBB: { index: 3, int_val: 3, accidental: 'bb' },\n      G: { index: 4, int_val: 7 },\n      GN: { index: 4, int_val: 7, accidental: 'n' },\n      'G#': { index: 4, int_val: 8, accidental: '#' },\n      'G##': { index: 4, int_val: 9, accidental: '##' },\n      GB: { index: 4, int_val: 6, accidental: 'b' },\n      GBB: { index: 4, int_val: 5, accidental: 'bb' },\n      A: { index: 5, int_val: 9 },\n      AN: { index: 5, int_val: 9, accidental: 'n' },\n      'A#': { index: 5, int_val: 10, accidental: '#' },\n      'A##': { index: 5, int_val: 11, accidental: '##' },\n      AB: { index: 5, int_val: 8, accidental: 'b' },\n      ABB: { index: 5, int_val: 7, accidental: 'bb' },\n      B: { index: 6, int_val: 11 },\n      BN: { index: 6, int_val: 11, accidental: 'n' },\n      'B#': { index: 6, int_val: 12, accidental: '#' },\n      'B##': { index: 6, int_val: 13, accidental: '##' },\n      BB: { index: 6, int_val: 10, accidental: 'b' },\n      BBB: { index: 6, int_val: 9, accidental: 'bb' },\n      R: { index: 6, rest: true }, // Rest\n      X: {\n        index: 6,\n        accidental: '',\n        octave: 4,\n        code: 'noteheadXBlack',\n        shift_right: 5.5,\n      },\n    };\n\n    if (clef === undefined) {\n      clef = 'treble';\n    }\n\n    let options = { octave_shift: 0 };\n\n    if (typeof params === 'object') {\n      options = { ...options, ...params };\n    }\n\n    const pieces = key.split('/');\n\n    if (pieces.length < 2) {\n      throw new RuntimeError('BadArguments', `Key must have note + octave and an optional glyph: ${key}`);\n    }\n\n    const k = pieces[0].toUpperCase();\n    const value = noteValues[k];\n    if (!value) throw new RuntimeError('BadArguments', 'Invalid key name: ' + k);\n    if (value.octave) pieces[1] = value.octave.toString();\n\n    let octave = parseInt(pieces[1], 10);\n\n    // Octave_shift is the shift to compensate for clef 8va/8vb.\n    octave += -1 * options.octave_shift;\n\n    const base_index = octave * 7 - 4 * 7;\n    let line = (base_index + value.index) / 2;\n    line += Tables.clefProperties(clef).line_shift;\n\n    let stroke = 0;\n\n    if (line <= 0 && (line * 2) % 2 === 0) stroke = 1; // stroke up\n    if (line >= 6 && (line * 2) % 2 === 0) stroke = -1; // stroke down\n\n    // Integer value for note arithmetic.\n    const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : undefined;\n\n    /* Check if the user specified a glyph. */\n    const code = value.code;\n    const shift_right = value.shift_right;\n    let extraProps = {};\n    if (pieces.length > 2 && pieces[2]) {\n      const glyph_name = pieces[2].toUpperCase();\n      extraProps = customNoteHeads[glyph_name] || {};\n    }\n\n    return {\n      key: k,\n      octave,\n      line,\n      int_value,\n      accidental: value.accidental,\n      code,\n      stroke,\n      shift_right,\n      displaced: false,\n      ...extraProps,\n    };\n  },\n\n  integerToNote(integer?: number): string {\n    const table: Record<number, string> = {\n      0: 'C',\n      1: 'C#',\n      2: 'D',\n      3: 'D#',\n      4: 'E',\n      5: 'F',\n      6: 'F#',\n      7: 'G',\n      8: 'G#',\n      9: 'A',\n      10: 'A#',\n      11: 'B',\n    };\n\n    if (typeof integer === 'undefined') {\n      throw new RuntimeError('BadArguments', 'Undefined integer for integerToNote');\n    }\n\n    if (integer < -2) {\n      throw new RuntimeError('BadArguments', `integerToNote requires integer > -2: ${integer}`);\n    }\n\n    const noteValue = table[integer];\n    if (!noteValue) {\n      throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n    }\n\n    return noteValue;\n  },\n\n  tabToGlyph(fret: string, scale = 1.0): { text: string; code?: string; getWidth: () => number; shift_y: number } {\n    let glyph = undefined;\n    let width = 0;\n    let shift_y = 0;\n\n    if (fret.toUpperCase() === 'X') {\n      const glyphMetrics = new Glyph('accidentalDoubleSharp', Tables.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();\n      glyph = 'accidentalDoubleSharp';\n      if (glyphMetrics.width == undefined || glyphMetrics.height == undefined)\n        throw new RuntimeError('InvalidMetrics', 'Width and height required');\n      width = glyphMetrics.width;\n      shift_y = -glyphMetrics.height / 2;\n    } else {\n      width = Tables.textWidth(fret);\n    }\n\n    return {\n      text: fret,\n      code: glyph,\n      getWidth: () => width * scale,\n      shift_y,\n    };\n  },\n\n  textWidth(text: string): number {\n    return 7 * text.toString().length;\n  },\n\n  articulationCodes(artic: string): ArticulationStruct {\n    const articulations: Record<string, ArticulationStruct> = {\n      'a.': { code: 'augmentationDot', between_lines: true }, // Staccato\n      av: {\n        aboveCode: 'articStaccatissimoAbove',\n        belowCode: 'articStaccatissimoBelow',\n        between_lines: true,\n      }, // Staccatissimo\n      'a>': {\n        aboveCode: 'articAccentAbove',\n        belowCode: 'articAccentBelow',\n        between_lines: true,\n      }, // Accent\n      'a-': {\n        aboveCode: 'articTenutoAbove',\n        belowCode: 'articTenutoBelow',\n        between_lines: true,\n      }, // Tenuto\n      'a^': {\n        aboveCode: 'articMarcatoAbove',\n        belowCode: 'articMarcatoBelow',\n        between_lines: false,\n      }, // Marcato\n      'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false }, // Left hand pizzicato\n      ao: {\n        aboveCode: 'pluckedSnapPizzicatoAbove',\n        belowCode: 'pluckedSnapPizzicatoBelow',\n        between_lines: false,\n      }, // Snap pizzicato\n      ah: { code: 'stringsHarmonic', between_lines: false }, // Natural harmonic or open note\n      'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false }, // Fermata\n      'a@a': { code: 'fermataAbove', between_lines: false }, // Fermata above staff\n      'a@u': { code: 'fermataBelow', between_lines: false }, // Fermata below staff\n      'a|': { code: 'stringsUpBow', between_lines: false }, // Bow up - up stroke\n      am: { code: 'stringsDownBow', between_lines: false }, // Bow down - down stroke\n      'a,': { code: 'pictChokeCymbal', between_lines: false }, // Choked\n    };\n    return articulations[artic];\n  },\n\n  accidentalMap: accidentals,\n\n  accidentalCodes(acc: string): { code: string; parenRightPaddingAdjustment: number } {\n    return accidentals[acc];\n  },\n\n  accidentalColumnsTable: {\n    1: {\n      a: [1],\n      b: [1],\n    },\n    2: {\n      a: [1, 2],\n    },\n    3: {\n      a: [1, 3, 2],\n      b: [1, 2, 1],\n      second_on_bottom: [1, 2, 3],\n    },\n    4: {\n      a: [1, 3, 4, 2],\n      b: [1, 2, 3, 1],\n      spaced_out_tetrachord: [1, 2, 1, 2],\n    },\n    5: {\n      a: [1, 3, 5, 4, 2],\n      b: [1, 2, 4, 3, 1],\n      spaced_out_pentachord: [1, 2, 3, 2, 1],\n      very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n      a: [1, 3, 5, 6, 4, 2],\n      b: [1, 2, 4, 5, 3, 1],\n      spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n      very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n    },\n  } as Record<number, { [name: string]: number[] }>,\n\n  ornamentCodes(acc: string): { code: string } {\n    const ornaments: Record<string, { code: string }> = {\n      mordent: { code: 'ornamentShortTrill' },\n      mordent_inverted: { code: 'ornamentMordent' },\n      turn: { code: 'ornamentTurn' },\n      turn_inverted: { code: 'ornamentTurnSlash' },\n      tr: { code: 'ornamentTrill' },\n      upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },\n      downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\n      prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },\n      pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },\n      upmordent: { code: 'ornamentPrecompSlideTrillBach' },\n      downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\n      lineprall: { code: 'ornamentPrecompAppoggTrill' },\n      prallprall: { code: 'ornamentTremblement' },\n      scoop: { code: 'brassScoop' },\n      doit: { code: 'brassDoitMedium' },\n      fall: { code: 'brassFallLipShort' },\n      doitLong: { code: 'brassLiftMedium' },\n      fallLong: { code: 'brassFallRoughMedium' },\n      bend: { code: 'brassBend' },\n      plungerClosed: { code: 'brassMuteClosed' },\n      plungerOpen: { code: 'brassMuteOpen' },\n      flip: { code: 'brassFlip' },\n      jazzTurn: { code: 'brassJazzTurn' },\n      smear: { code: 'brassSmear' },\n    };\n    return ornaments[acc];\n  },\n\n  keySignature(spec: string): { type: string; line: number }[] {\n    const keySpecs: Record<string, { acc?: string; num: number }> = {\n      C: { num: 0 },\n      Am: { num: 0 },\n      F: { acc: 'b', num: 1 },\n      Dm: { acc: 'b', num: 1 },\n      Bb: { acc: 'b', num: 2 },\n      Gm: { acc: 'b', num: 2 },\n      Eb: { acc: 'b', num: 3 },\n      Cm: { acc: 'b', num: 3 },\n      Ab: { acc: 'b', num: 4 },\n      Fm: { acc: 'b', num: 4 },\n      Db: { acc: 'b', num: 5 },\n      Bbm: { acc: 'b', num: 5 },\n      Gb: { acc: 'b', num: 6 },\n      Ebm: { acc: 'b', num: 6 },\n      Cb: { acc: 'b', num: 7 },\n      Abm: { acc: 'b', num: 7 },\n      G: { acc: '#', num: 1 },\n      Em: { acc: '#', num: 1 },\n      D: { acc: '#', num: 2 },\n      Bm: { acc: '#', num: 2 },\n      A: { acc: '#', num: 3 },\n      'F#m': { acc: '#', num: 3 },\n      E: { acc: '#', num: 4 },\n      'C#m': { acc: '#', num: 4 },\n      B: { acc: '#', num: 5 },\n      'G#m': { acc: '#', num: 5 },\n      'F#': { acc: '#', num: 6 },\n      'D#m': { acc: '#', num: 6 },\n      'C#': { acc: '#', num: 7 },\n      'A#m': { acc: '#', num: 7 },\n    };\n    const keySpec = keySpecs[spec];\n\n    if (!keySpec) {\n      throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n    }\n\n    if (!keySpec.acc) {\n      return [];\n    }\n\n    const accidentalList: Record<string, number[]> = {\n      b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n      '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n    };\n\n    const notes = accidentalList[keySpec.acc];\n\n    const acc_list = [];\n    for (let i = 0; i < keySpec.num; ++i) {\n      const line = notes[i];\n      acc_list.push({ type: keySpec.acc, line });\n    }\n\n    return acc_list;\n  },\n\n  unicode: {\n    // ♯ accidental sharp\n    sharp: String.fromCharCode(0x266f),\n    // ♭ accidental flat\n    flat: String.fromCharCode(0x266d),\n    // ♮ accidental natural\n    natural: String.fromCharCode(0x266e),\n    // △ major seventh\n    triangle: String.fromCharCode(0x25b3),\n    // ø half-diminished\n    'o-with-slash': String.fromCharCode(0x00f8),\n    // ° diminished\n    degrees: String.fromCharCode(0x00b0),\n    // ○ diminished\n    circle: String.fromCharCode(0x25cb),\n  },\n\n  // Used to convert duration aliases to the number based duration.\n  // If the input isn't an alias, simply return the input.\n  //\n  // example: 'q' -> '4', '8' -> '8'\n  sanitizeDuration(duration: string): string {\n    const durationAliases: Record<string, string> = {\n      w: '1',\n      h: '2',\n      q: '4',\n\n      // This is the default duration used to render bars (BarNote). Bars no longer\n      // consume ticks, so this should be a no-op.\n      //\n      // TODO(0xfe): This needs to be cleaned up.\n      b: '256',\n    };\n    const alias = durationAliases[duration];\n    if (alias !== undefined) {\n      duration = alias;\n    }\n\n    if (durations[duration] === undefined) {\n      throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n    }\n\n    return duration;\n  },\n\n  // Convert the `duration` to an fraction\n  durationToFraction(duration: string): Fraction {\n    return new Fraction().parse(Tables.sanitizeDuration(duration));\n  },\n\n  // Convert the `duration` to an number\n  durationToNumber(duration: string): number {\n    return Tables.durationToFraction(duration).value();\n  },\n\n  // Convert the `duration` to total ticks\n  durationToTicks(duration: string): number {\n    duration = Tables.sanitizeDuration(duration);\n\n    const ticks = durations[duration];\n    if (ticks === undefined) {\n      throw new RuntimeError('InvalidDuration');\n    }\n\n    return ticks;\n  },\n\n  // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n  // eslint-disable-next-line\n  getGlyphProps(duration: string, type?: string): any {\n    duration_codes = duration_codes || {\n      '1/2': {\n        common: {\n          stem: false,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: -Tables.STEM_HEIGHT,\n          stem_down_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Breve note\n            code_head: 'noteheadDoubleWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDoubleWhole', scale);\n            },\n          },\n          h: {\n            // Breve note harmonic\n            code_head: 'unpitchedPercussionClef1',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'unpitchedPercussionClef1', scale);\n            },\n          },\n          m: {\n            // Breve note muted -\n            code_head: 'vexNoteHeadMutedBreve',\n            stem_offset: 0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'vexNoteHeadMutedBreve', scale);\n            },\n          },\n          r: {\n            // Breve rest\n            code_head: 'restDoubleWhole',\n            rest: true,\n            position: 'B/5',\n            dot_shiftY: 0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'restDoubleWhole', scale);\n            },\n          },\n          s: {\n            // Breve note slash -\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      1: {\n        common: {\n          stem: false,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: -Tables.STEM_HEIGHT,\n          stem_down_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Whole note\n            code_head: 'noteheadWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadWhole', scale);\n            },\n          },\n          h: {\n            // Whole note harmonic\n            code_head: 'noteheadDiamondWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondWhole', scale);\n            },\n          },\n          m: {\n            // Whole note muted\n            code_head: 'noteheadXWhole',\n            stem_offset: -3,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXWhole', scale);\n            },\n          },\n          r: {\n            // Whole rest\n            code_head: 'restWhole',\n            rest: true,\n            position: 'D/5',\n            dot_shiftY: 0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'restWhole', scale);\n            },\n          },\n          s: {\n            // Whole note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      2: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Half note\n            code_head: 'noteheadHalf',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadHalf', scale);\n            },\n          },\n          h: {\n            // Half note harmonic\n            code_head: 'noteheadDiamondHalf',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondHalf', scale);\n            },\n          },\n          m: {\n            // Half note muted\n            code_head: 'noteheadXHalf',\n            stem_offset: -3,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXHalf', scale);\n            },\n          },\n          r: {\n            // Half rest\n            code_head: 'restHalf',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'restHalf', scale);\n            },\n          },\n          s: {\n            // Half note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      4: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Quarter note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Quarter harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Quarter muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Quarter rest\n            code_head: 'restQuarter',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.5,\n            line_below: 1.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'restQuarter', scale);\n            },\n          },\n          s: {\n            // Quarter slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      8: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          beam_count: 1,\n          code_flag_upstem: 'flag8thUp',\n          code_flag_downstem: 'flag8thDown',\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Eighth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Eighth note harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Eighth note muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Eighth rest\n            code_head: 'rest8th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 1.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest8th', scale);\n            },\n          },\n          s: {\n            // Eight slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      16: {\n        common: {\n          beam_count: 2,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag16thUp',\n          code_flag_downstem: 'flag16thDown',\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Sixteenth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Sixteenth note harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Sixteenth note muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Sixteenth rest\n            code_head: 'rest16th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 2.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest16th', scale);\n            },\n          },\n          s: {\n            // Sixteenth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      32: {\n        common: {\n          beam_count: 3,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag32ndUp',\n          code_flag_downstem: 'flag32ndDown',\n          stem_up_extension: 9,\n          stem_down_extension: 9,\n          tabnote_stem_up_extension: 8,\n          tabnote_stem_down_extension: 5,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Thirty-second note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Thirty-second harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Thirty-second muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Thirty-second rest\n            code_head: 'rest32nd',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 2.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest32nd', scale);\n            },\n          },\n          s: {\n            // Thirty-second slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      64: {\n        common: {\n          beam_count: 4,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag64thUp',\n          code_flag_downstem: 'flag64thDown',\n          stem_up_extension: 13,\n          stem_down_extension: 13,\n          tabnote_stem_up_extension: 12,\n          tabnote_stem_down_extension: 9,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Sixty-fourth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Sixty-fourth harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Sixty-fourth muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Sixty-fourth rest\n            code_head: 'rest64th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 3.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest64th', scale);\n            },\n          },\n          s: {\n            // Sixty-fourth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      128: {\n        common: {\n          beam_count: 5,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag128thUp',\n          code_flag_downstem: 'flag128thDown',\n          stem_up_extension: 22,\n          stem_down_extension: 22,\n          tabnote_stem_up_extension: 21,\n          tabnote_stem_down_extension: 18,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Hundred-twenty-eight note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Hundred-twenty-eight harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Hundred-twenty-eight muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Hundred-twenty-eight rest\n            code_head: 'rest128th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -2.5,\n            line_above: 3.0,\n            line_below: 3.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest128th', scale);\n            },\n          },\n          s: {\n            // Hundred-twenty-eight rest\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n    };\n\n    duration = Tables.sanitizeDuration(duration);\n    type = type || 'n'; // default type is a regular note\n\n    // Lookup duration for default glyph head code\n    const code = duration_codes[duration];\n    if (code === undefined) {\n      return;\n    }\n\n    // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\n    let glyphTypeProperties = code.type[type];\n\n    // If this isn't a standard type, then lookup the custom note head map.\n    if (glyphTypeProperties === undefined) {\n      // Try and get it from the custom list of note heads\n      const customGlyphTypeProperties = customNoteHeads[type.toUpperCase()];\n\n      // If not, then return with nothing\n      if (customGlyphTypeProperties === undefined) {\n        return;\n      }\n\n      // Otherwise set it as the code_head value\n      glyphTypeProperties = {\n        code_head: customGlyphTypeProperties.code,\n        ...customGlyphTypeProperties,\n      };\n    }\n\n    // Merge duration props for 'duration' with the note head properties.\n    return { ...code.common, ...glyphTypeProperties };\n  },\n\n  validTypes: {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n  } as Record<string, Record<string, string>>,\n\n  // Default time signature.\n  TIME4_4: {\n    num_beats: 4,\n    beat_value: 4,\n    resolution: RESOLUTION,\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\n\nexport interface NoteAccidental {\n  note: number;\n  accidental: AccidentalValue;\n}\n\nexport interface NoteParts {\n  root: string;\n  accidental: string;\n}\n\nexport interface KeyParts {\n  root: string;\n  accidental: string;\n  type: string;\n}\n\nexport type KeyValue = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\n\nexport type RootValue = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport type AccidentalValue = -2 | -1 | 0 | 1 | 2;\n\nexport interface Key {\n  root_index: RootValue;\n  int_val: KeyValue;\n}\n\n/** Music implements some standard music theory routines. */\nexport class Music {\n  /** Number of an canonical notes (12). */\n  static get NUM_TONES(): number {\n    return this.canonical_notes.length;\n  }\n\n  /** Names of root notes ('c', 'd',...) */\n  static get roots(): string[] {\n    return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n  }\n\n  /** Values of the root notes.*/\n  static get root_values(): KeyValue[] {\n    return [0, 2, 4, 5, 7, 9, 11];\n  }\n\n  /** Indices of the root notes.*/\n  static get root_indices(): Record<string, RootValue> {\n    return {\n      c: 0,\n      d: 1,\n      e: 2,\n      f: 3,\n      g: 4,\n      a: 5,\n      b: 6,\n    };\n  }\n\n  /** Names of canonical notes ('c', 'c#', 'd',...). */\n  static get canonical_notes(): string[] {\n    return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n  }\n\n  /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n  static get diatonic_intervals(): string[] {\n    return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n  }\n\n  /** NoteAccidental associated to diatonic intervals. */\n  static get diatonic_accidentals(): Record<string, NoteAccidental> {\n    return {\n      unison: { note: 0, accidental: 0 },\n      m2: { note: 1, accidental: -1 },\n      M2: { note: 1, accidental: 0 },\n      m3: { note: 2, accidental: -1 },\n      M3: { note: 2, accidental: 0 },\n      p4: { note: 3, accidental: 0 },\n      dim5: { note: 4, accidental: -1 },\n      p5: { note: 4, accidental: 0 },\n      m6: { note: 5, accidental: -1 },\n      M6: { note: 5, accidental: 0 },\n      b7: { note: 6, accidental: -1 },\n      M7: { note: 6, accidental: 0 },\n      octave: { note: 7, accidental: 0 },\n    };\n  }\n\n  /** Semitones shift associated to intervals .*/\n  static get intervals(): Record<string, number> {\n    return {\n      u: 0,\n      unison: 0,\n      m2: 1,\n      b2: 1,\n      min2: 1,\n      S: 1,\n      H: 1,\n      2: 2,\n      M2: 2,\n      maj2: 2,\n      T: 2,\n      W: 2,\n      m3: 3,\n      b3: 3,\n      min3: 3,\n      M3: 4,\n      3: 4,\n      maj3: 4,\n      4: 5,\n      p4: 5,\n      '#4': 6,\n      b5: 6,\n      aug4: 6,\n      dim5: 6,\n      5: 7,\n      p5: 7,\n      '#5': 8,\n      b6: 8,\n      aug5: 8,\n      6: 9,\n      M6: 9,\n      maj6: 9,\n      b7: 10,\n      m7: 10,\n      min7: 10,\n      dom7: 10,\n      M7: 11,\n      maj7: 11,\n      8: 12,\n      octave: 12,\n    };\n  }\n\n  /** Semitones shifts associated with scales. */\n  static get scales(): Record<string, number[]> {\n    return {\n      major: [2, 2, 1, 2, 2, 2, 1],\n      minor: [2, 1, 2, 2, 1, 2, 2],\n      ionian: [2, 2, 1, 2, 2, 2, 1],\n      dorian: [2, 1, 2, 2, 2, 1, 2],\n      phyrgian: [1, 2, 2, 2, 1, 2, 2],\n      lydian: [2, 2, 2, 1, 2, 2, 1],\n      mixolydian: [2, 2, 1, 2, 2, 1, 2],\n      aeolian: [2, 1, 2, 2, 1, 2, 2],\n      locrian: [1, 2, 2, 1, 2, 2, 2],\n    };\n  }\n\n  /** Scales associated with m (minor) and M (major). */\n  static get scaleTypes(): Record<string, number[]> {\n    return {\n      M: Music.scales.major,\n      m: Music.scales.minor,\n    };\n  }\n\n  /** Accidentals abbreviations. */\n  static get accidentals(): string[] {\n    return ['bb', 'b', 'n', '#', '##'];\n  }\n\n  /** Note values. */\n  static get noteValues(): Record<string, Key> {\n    return {\n      c: { root_index: 0, int_val: 0 },\n      cn: { root_index: 0, int_val: 0 },\n      'c#': { root_index: 0, int_val: 1 },\n      'c##': { root_index: 0, int_val: 2 },\n      cb: { root_index: 0, int_val: 11 },\n      cbb: { root_index: 0, int_val: 10 },\n      d: { root_index: 1, int_val: 2 },\n      dn: { root_index: 1, int_val: 2 },\n      'd#': { root_index: 1, int_val: 3 },\n      'd##': { root_index: 1, int_val: 4 },\n      db: { root_index: 1, int_val: 1 },\n      dbb: { root_index: 1, int_val: 0 },\n      e: { root_index: 2, int_val: 4 },\n      en: { root_index: 2, int_val: 4 },\n      'e#': { root_index: 2, int_val: 5 },\n      'e##': { root_index: 2, int_val: 6 },\n      eb: { root_index: 2, int_val: 3 },\n      ebb: { root_index: 2, int_val: 2 },\n      f: { root_index: 3, int_val: 5 },\n      fn: { root_index: 3, int_val: 5 },\n      'f#': { root_index: 3, int_val: 6 },\n      'f##': { root_index: 3, int_val: 7 },\n      fb: { root_index: 3, int_val: 4 },\n      fbb: { root_index: 3, int_val: 3 },\n      g: { root_index: 4, int_val: 7 },\n      gn: { root_index: 4, int_val: 7 },\n      'g#': { root_index: 4, int_val: 8 },\n      'g##': { root_index: 4, int_val: 9 },\n      gb: { root_index: 4, int_val: 6 },\n      gbb: { root_index: 4, int_val: 5 },\n      a: { root_index: 5, int_val: 9 },\n      an: { root_index: 5, int_val: 9 },\n      'a#': { root_index: 5, int_val: 10 },\n      'a##': { root_index: 5, int_val: 11 },\n      ab: { root_index: 5, int_val: 8 },\n      abb: { root_index: 5, int_val: 7 },\n      b: { root_index: 6, int_val: 11 },\n      bn: { root_index: 6, int_val: 11 },\n      'b#': { root_index: 6, int_val: 0 },\n      'b##': { root_index: 6, int_val: 1 },\n      bb: { root_index: 6, int_val: 10 },\n      bbb: { root_index: 6, int_val: 9 },\n    };\n  }\n\n  protected isValidNoteValue(note: number): boolean {\n    return note >= 0 && note < Music.canonical_notes.length;\n  }\n\n  protected isValidIntervalValue(interval: number): boolean {\n    return interval >= 0 && interval < Music.diatonic_intervals.length;\n  }\n\n  /** Return root and accidental associated to a note. */\n  getNoteParts(noteString: string): NoteParts {\n    if (!noteString || noteString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    if (noteString.length > 3) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    const note = noteString.toLowerCase();\n\n    const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n    const match = regex.exec(note);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n\n      return {\n        root,\n        accidental,\n      };\n    } else {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n  }\n\n  /** Return root, accidental and type associated to a key. */\n  getKeyParts(keyString: string): KeyParts {\n    if (!keyString || keyString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n    }\n\n    const key = keyString.toLowerCase();\n\n    // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n    const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n    const match = regex.exec(key);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n      let type = match[3];\n\n      // Unspecified type implies major\n      if (!type) type = 'M';\n\n      return {\n        root,\n        accidental,\n        type,\n      };\n    } else {\n      throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n    }\n  }\n\n  /** Note value associated to a note name. */\n  getNoteValue(noteString: string): number {\n    const value = Music.noteValues[noteString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n    }\n    return value.int_val;\n  }\n\n  /** Interval value associated to an interval name. */\n  getIntervalValue(intervalString: string): number {\n    const value = Music.intervals[intervalString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n    }\n    return value;\n  }\n\n  /** Canonical note name associated to a value. */\n  getCanonicalNoteName(noteValue: number): string {\n    if (!this.isValidNoteValue(noteValue)) {\n      throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n    }\n    return Music.canonical_notes[noteValue];\n  }\n\n  /** Interval name associated to a value. */\n  getCanonicalIntervalName(intervalValue: number): string {\n    if (!this.isValidIntervalValue(intervalValue)) {\n      throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n    }\n    return Music.diatonic_intervals[intervalValue];\n  }\n\n  /**\n   * Given a note, interval, and interval direction, produce the relative note.\n   */\n  getRelativeNoteValue(noteValue: number, intervalValue: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n    if (sum < 0) sum += Music.NUM_TONES;\n\n    return sum;\n  }\n\n  /**\n   * Given a root and note value, produce the relative note name.\n   */\n  getRelativeNoteName(root: string, noteValue: number): string {\n    const parts = this.getNoteParts(root);\n    const rootValue = this.getNoteValue(parts.root);\n    let interval = noteValue - rootValue;\n\n    if (Math.abs(interval) > Music.NUM_TONES - 3) {\n      let multiplier = 1;\n      if (interval > 0) multiplier = -1;\n\n      // Possibly wrap around. (Add +1 for modulo operator)\n      const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n\n      if (Math.abs(reverse_interval) > 2) {\n        throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n      } else {\n        interval = reverse_interval;\n      }\n    }\n\n    if (Math.abs(interval) > 2) {\n      throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n    }\n\n    let relativeNoteName = parts.root;\n    if (interval > 0) {\n      for (let i = 1; i <= interval; ++i) {\n        relativeNoteName += '#';\n      }\n    } else if (interval < 0) {\n      for (let i = -1; i >= interval; --i) {\n        relativeNoteName += 'b';\n      }\n    }\n\n    return relativeNoteName;\n  }\n\n  /**\n   * Return scale tones, given intervals. Each successive interval is\n   * relative to the previous one, e.g., Major Scale:\n   *\n   *   TTSTTTS = [2,2,1,2,2,2,1]\n   *\n   * When used with key = 0, returns C scale (which is isomorphic to\n   * interval list).\n   */\n  getScaleTones(key: number, intervals: number[]): number[] {\n    const tones = [key];\n\n    let nextNote = key;\n    for (let i = 0; i < intervals.length; i++) {\n      nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n      if (nextNote !== key) tones.push(nextNote);\n    }\n\n    return tones;\n  }\n\n  /**\n   * Return the interval of a note, given a diatonic scale.\n   * e.g., given the scale C, and the note E, returns M3.\n   */\n  getIntervalBetween(note1: number, note2: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n      throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n    }\n\n    let difference = direction === 1 ? note2 - note1 : note1 - note2;\n\n    if (difference < 0) difference += Music.NUM_TONES;\n\n    return difference;\n  }\n\n  /**\n   * Create a scale map that represents the pitch state for a\n   * `keySignature`. For example, passing a `G` to `keySignature` would\n   * return a scale map with every note naturalized except for `F` which\n   * has an `F#` state.\n   */\n  createScaleMap(keySignature: string): Record<string, string> {\n    const keySigParts = this.getKeyParts(keySignature);\n    if (!keySigParts.type) throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n    const scaleName = Music.scaleTypes[keySigParts.type];\n\n    let keySigString = keySigParts.root;\n    if (keySigParts.accidental) keySigString += keySigParts.accidental;\n\n    if (!scaleName) throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n\n    const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n    const noteLocation = Music.root_indices[keySigParts.root];\n\n    const scaleMap = {} as Record<string, string>;\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n      let noteName = this.getRelativeNoteName(rootName, scale[i]);\n\n      if (noteName.length === 1) {\n        noteName += 'n';\n      }\n\n      scaleMap[rootName] = noteName;\n    }\n\n    return scaleMap;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { defined, RuntimeError } from './util';\nimport { Element } from './element';\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\n\nexport enum ModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n}\n\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\n\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n  // Modifiers are attached to a note and an index. An index is a specific head in a chord.\n  protected note?: Note;\n  protected index?: number;\n\n  protected width: number;\n  protected text_line: number;\n  protected position: ModifierPosition;\n  protected y_shift: number;\n  protected x_shift: number;\n\n  private spacingFromNextModifier: number;\n  private modifierContext?: ModifierContext;\n\n  /** Modifiers category string. */\n  static get CATEGORY(): string {\n    return 'Modifier';\n  }\n\n  /** Modifiers can be positioned almost anywhere, relative to a note. */\n  static get Position(): typeof ModifierPosition {\n    return ModifierPosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      center: Modifier.Position.CENTER,\n      above: Modifier.Position.ABOVE,\n      below: Modifier.Position.BELOW,\n      left: Modifier.Position.LEFT,\n      right: Modifier.Position.RIGHT,\n    };\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'Modifier');\n\n    this.width = 0;\n\n    // The `text_line` is reserved space above or below a stave.\n    this.text_line = 0;\n    this.position = Modifier.Position.LEFT;\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.spacingFromNextModifier = 0;\n  }\n\n  /** Called when position changes. */\n  protected reset(): void {\n    // DO NOTHING.\n  }\n\n  /**\n   * Every modifier has a category. The `ModifierContext` uses this to determine\n   * the type and order of the modifiers.\n   */\n  getCategory(): string {\n    return Modifier.CATEGORY;\n  }\n\n  /** Get modifier widths. */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /** Set modifier widths. */\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n  getNote(): Note {\n    return defined(this.note, 'NoNote', 'Modifier has no note.');\n  }\n\n  /**\n   * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n   * Also verifies that the index is valid.\n   */\n  checkAttachedNote(): Note {\n    defined(this.index, 'NoIndex', `Can't draw ${this.getCategory()} without an index.`);\n    return defined(this.note, 'NoNote', `Can't draw ${this.getCategory()} without a note.`);\n  }\n\n  /**\n   * Set attached note.\n   * @param note (`StaveNote`, `TabNote`, etc.)\n   */\n  setNote(note: Note): this {\n    this.note = note;\n    return this;\n  }\n\n  /** Get note index, which is a specific note in a chord. */\n  getIndex(): number | undefined {\n    return this.index;\n  }\n\n  /** Check and get note index, which is a specific note in a chord. */\n  checkIndex(): number {\n    return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n  }\n\n  /** Set note index, which is a specific note in a chord. */\n  setIndex(index: number): this {\n    this.index = index;\n    return this;\n  }\n\n  /** Get `ModifierContext`. */\n  getModifierContext(): ModifierContext | undefined {\n    return this.modifierContext;\n  }\n\n  /** Check and get `ModifierContext`. */\n  checkModifierContext(): ModifierContext {\n    return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');\n  }\n\n  /** Every modifier must be part of a `ModifierContext`. */\n  setModifierContext(c: ModifierContext): this {\n    this.modifierContext = c;\n    return this;\n  }\n\n  /** Get position. */\n  getPosition(): number {\n    return this.position;\n  }\n\n  /**\n   * Set position.\n   * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n   */\n  setPosition(position: string | number): this {\n    this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n    this.reset();\n    return this;\n  }\n\n  /** Set the `text_line` for the modifier. */\n  setTextLine(line: number): this {\n    this.text_line = line;\n    return this;\n  }\n\n  /** Shift modifier down `y` pixels. Negative values shift up. */\n  setYShift(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  /** Set spacing from next modifier. */\n  setSpacingFromNextModifier(x: number): void {\n    this.spacingFromNextModifier = x;\n  }\n\n  /** Get spacing from next modifier. */\n  getSpacingFromNextModifier(): number {\n    return this.spacingFromNextModifier;\n  }\n\n  /**\n   * Shift modifier `x` pixels in the direction of the modifier. Negative values\n   * shift reverse.\n   */\n  setXShift(x: number): this {\n    this.x_shift = 0;\n    if (this.position === Modifier.Position.LEFT) {\n      this.x_shift -= x;\n    } else {\n      this.x_shift += x;\n    }\n    return this;\n  }\n\n  /** Get shift modifier `x` */\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  /** Render the modifier onto the canvas. */\n  draw(): void {\n    this.checkContext();\n    throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n  }\n\n  // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n  alignSubNotesWithNote(subNotes: Note[], note: Note): void {\n    // Shift over the tick contexts of each note\n    const tickContext = note.getTickContext();\n    const metrics = tickContext.getMetrics();\n    const stave = note.getStave();\n    const subNoteXOffset =\n      tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n\n    subNotes.forEach((subNote) => {\n      const subTickContext = subNote.getTickContext();\n      if (stave) subNote.setStave(stave);\n      subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\n\nimport { RuntimeError, log } from './util';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { BoundingBox } from './boundingbox';\n\n// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Stem.DEBUG) log('Vex.Flow.Stem', args);\n}\n\nexport interface StemOptions {\n  stem_down_y_base_offset?: number;\n  stem_up_y_base_offset?: number;\n  stem_down_y_offset?: number;\n  stem_up_y_offset?: number;\n  stemletHeight?: number;\n  isStemlet?: boolean;\n  hide?: boolean;\n  stem_direction?: number;\n  stem_extension?: number;\n  y_bottom?: number;\n  y_top?: number;\n  x_end?: number;\n  x_begin?: number;\n}\n\nexport class Stem extends Element {\n  static DEBUG: boolean;\n\n  protected hide: boolean;\n  protected isStemlet: boolean;\n  protected stemletHeight: number;\n  protected x_begin: number;\n  protected x_end: number;\n  protected y_top: number;\n  protected stem_up_y_offset: number = 0;\n  protected y_bottom: number;\n  protected stem_down_y_offset: number = 0;\n  protected stem_up_y_base_offset: number = 0;\n  protected stem_down_y_base_offset: number = 0;\n  protected stem_direction: number;\n  protected stem_extension: number;\n  protected renderHeightAdjustment: number;\n\n  static get CATEGORY(): string {\n    return 'stem';\n  }\n\n  // Stem directions\n  static get UP(): number {\n    return 1;\n  }\n\n  static get DOWN(): number {\n    return -1;\n  }\n\n  // Theme\n  static get WIDTH(): number {\n    return Flow.STEM_WIDTH;\n  }\n\n  static get HEIGHT(): number {\n    return Flow.STEM_HEIGHT;\n  }\n\n  constructor(options?: StemOptions) {\n    super();\n    this.setAttribute('type', 'Stem');\n\n    // Default notehead x bounds\n    this.x_begin = options?.x_begin || 0;\n    this.x_end = options?.x_end || 0;\n\n    // Y bounds for top/bottom most notehead\n    this.y_top = options?.y_top || 0;\n    this.y_bottom = options?.y_bottom || 0;\n\n    // Stem top extension\n    this.stem_extension = options?.stem_extension || 0;\n\n    // Direction of the stem\n    this.stem_direction = options?.stem_direction || 0;\n\n    // Flag to override all draw calls\n    this.hide = options?.hide || false;\n\n    this.isStemlet = options?.isStemlet || false;\n    this.stemletHeight = options?.stemletHeight || 0;\n\n    // Use to adjust the rendered height without affecting\n    // the results of `.getExtents()`\n    this.renderHeightAdjustment = 0;\n    this.setOptions(options);\n  }\n\n  setOptions(options?: StemOptions): void {\n    // Changing where the stem meets the head\n    this.stem_up_y_offset = options?.stem_up_y_offset || 0;\n    this.stem_down_y_offset = options?.stem_down_y_offset || 0;\n    this.stem_up_y_base_offset = options?.stem_up_y_base_offset || 0;\n    this.stem_down_y_base_offset = options?.stem_down_y_base_offset || 0;\n  }\n\n  // Set the x bounds for the default notehead\n  setNoteHeadXBounds(x_begin: number, x_end: number): this {\n    this.x_begin = x_begin;\n    this.x_end = x_end;\n    return this;\n  }\n\n  // Set the direction of the stem in relation to the noteheads\n  setDirection(direction: number): void {\n    this.stem_direction = direction;\n  }\n\n  // Set the extension for the stem, generally for flags or beams\n  setExtension(ext: number): void {\n    this.stem_extension = ext;\n  }\n\n  getExtension(): number {\n    return this.stem_extension;\n  }\n\n  // The the y bounds for the top and bottom noteheads\n  setYBounds(y_top: number, y_bottom: number): void {\n    this.y_top = y_top;\n    this.y_bottom = y_bottom;\n  }\n\n  // The category of the object\n  getCategory(): string {\n    return Stem.CATEGORY;\n  }\n\n  // Gets the entire height for the stem\n  getHeight(): number {\n    const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;\n    const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension); // parentheses just for grouping.\n    return unsigned_height * this.stem_direction;\n  }\n\n  getBoundingBox(): BoundingBox {\n    throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n  }\n\n  // Get the y coordinates for the very base of the stem to the top of\n  // the extension\n  getExtents(): Record<string, number> {\n    const isStemUp = this.stem_direction === Stem.UP;\n    const ys = [this.y_top, this.y_bottom];\n    const stemHeight = Stem.HEIGHT + this.stem_extension;\n\n    const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n    const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n    const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n\n    return { topY: stemTipY, baseY: outerMostNoteheadY };\n  }\n\n  setVisibility(isVisible: boolean): this {\n    this.hide = !isVisible;\n    return this;\n  }\n\n  setStemlet(isStemlet: boolean, stemletHeight: number): this {\n    this.isStemlet = isStemlet;\n    this.stemletHeight = stemletHeight;\n    return this;\n  }\n\n  adjustHeightForFlag(): void {\n    this.renderHeightAdjustment = this.musicFont.lookupMetric('stem.heightAdjustmentForFlag', -3);\n  }\n\n  adjustHeightForBeam(): void {\n    this.renderHeightAdjustment = -Stem.WIDTH / 2;\n  }\n\n  // Render the stem onto the canvas\n  draw(): void {\n    this.setRendered();\n    if (this.hide) return;\n    const ctx = this.checkContext();\n\n    let stem_x;\n    let stem_y;\n    const stem_direction = this.stem_direction;\n\n    let y_base_offset: number = 0;\n    if (stem_direction === Stem.DOWN) {\n      // Down stems are rendered to the left of the head.\n      stem_x = this.x_begin;\n      stem_y = this.y_top + this.stem_down_y_offset;\n      y_base_offset = this.stem_down_y_base_offset;\n    } else {\n      // Up stems are rendered to the right of the head.\n      stem_x = this.x_end;\n      stem_y = this.y_bottom - this.stem_up_y_offset;\n      y_base_offset = this.stem_up_y_base_offset;\n    }\n\n    const stemHeight = this.getHeight();\n\n    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n\n    // The offset from the stem's base which is required fo satisfy the stemlet height\n    const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\n\n    // Draw the stem\n    ctx.save();\n    this.applyStyle(ctx);\n    ctx.beginPath();\n    ctx.setLineWidth(Stem.WIDTH);\n    ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n    ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n    ctx.stroke();\n    this.restoreStyle(ctx);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.num_notes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   num_notes: fit this many notes into...\n *   notes_occupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of num_notes : notes_occupied.\n *       num_notes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notes_occupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between num_notes and\n *     notes_occupied is greater than 1.\n *\n *   y_offset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\n\nimport { RuntimeError, defined } from './util';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\nimport { Note } from './note';\nimport { StemmableNote } from './stemmablenote';\n\nexport interface TupletOptions {\n  beats_occupied?: number;\n  bracketed?: boolean;\n  location?: number;\n  notes_occupied?: number;\n  num_notes?: number;\n  ratioed?: boolean;\n  y_offset?: number;\n}\n\nexport class Tuplet extends Element {\n  notes: Note[];\n\n  protected options: TupletOptions;\n  protected num_notes: number;\n  protected point: number;\n\n  protected bracketed: boolean;\n  protected y_pos: number;\n  protected x_pos: number;\n  protected width: number;\n\n  // location is initialized by the constructor via setTupletLocation(...).\n  protected location!: number;\n\n  protected notes_occupied: number;\n  protected ratioed: boolean;\n  protected numerator_glyphs: Glyph[] = [];\n  protected denom_glyphs: Glyph[] = [];\n\n  static get LOCATION_TOP(): number {\n    return 1;\n  }\n  static get LOCATION_BOTTOM(): number {\n    return -1;\n  }\n  static get NESTING_OFFSET(): number {\n    return 15;\n  }\n\n  constructor(notes: Note[], options?: TupletOptions) {\n    super();\n    this.setAttribute('type', 'Tuplet');\n    if (!notes || !notes.length) {\n      throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n    }\n\n    this.options = { ...options };\n    this.notes = notes;\n    this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\n\n    // We accept beats_occupied, but warn that it's deprecated:\n    // the preferred property name is now notes_occupied.\n    if (this.options.beats_occupied) {\n      this.beatsOccupiedDeprecationWarning();\n    }\n    this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n    if (this.options.bracketed != undefined) {\n      this.bracketed = this.options.bracketed;\n    } else {\n      this.bracketed = notes.some((note) => !note.hasBeam());\n    }\n\n    this.ratioed =\n      this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n    this.point = this.musicFont.lookupMetric('digits.tupletPoint');\n    this.y_pos = 16;\n    this.x_pos = 100;\n    this.width = 200;\n\n    this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n\n    Formatter.AlignRestsToNotes(notes, true, true);\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  attach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.setTuplet(this);\n    }\n  }\n\n  detach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.resetTuplet(this);\n    }\n  }\n\n  /**\n   * Set whether or not the bracket is drawn.\n   */\n  setBracketed(bracketed: boolean): this {\n    this.bracketed = !!bracketed;\n    return this;\n  }\n\n  /**\n   * Set whether or not the ratio is shown.\n   */\n  setRatioed(ratioed: boolean): this {\n    this.ratioed = !!ratioed;\n    return this;\n  }\n\n  /**\n   * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n   */\n  setTupletLocation(location: number): this {\n    if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n      // eslint-disable-next-line\n      console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n      location = Tuplet.LOCATION_TOP;\n    }\n\n    this.location = location;\n    return this;\n  }\n\n  getNotes(): Note[] {\n    return this.notes;\n  }\n\n  getNoteCount(): number {\n    return this.num_notes;\n  }\n\n  beatsOccupiedDeprecationWarning(): void {\n    // eslint-disable-next-line\n    console.warn(\n      'beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.',\n      'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.'\n    );\n  }\n\n  getBeatsOccupied(): number {\n    this.beatsOccupiedDeprecationWarning();\n    return this.getNotesOccupied();\n  }\n\n  setBeatsOccupied(beats: number): void {\n    this.beatsOccupiedDeprecationWarning();\n    return this.setNotesOccupied(beats);\n  }\n\n  getNotesOccupied(): number {\n    return this.notes_occupied;\n  }\n\n  setNotesOccupied(notes: number): void {\n    this.detach();\n    this.notes_occupied = notes;\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  resolveGlyphs(): void {\n    this.numerator_glyphs = [];\n    let n = this.num_notes;\n    while (n >= 1) {\n      this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n\n    this.denom_glyphs = [];\n    n = this.notes_occupied;\n    while (n >= 1) {\n      this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n  }\n\n  // determine how many tuplets are nested within this tuplet\n  // on the same side (above/below), to calculate a y\n  // offset for this tuplet:\n  getNestedTupletCount(): number {\n    const location = this.location;\n    const first_note = this.notes[0];\n    let maxTupletCount = countTuplets(first_note, location);\n    let minTupletCount = countTuplets(first_note, location);\n\n    // Count the tuplets that are on the same side (above/below)\n    // as this tuplet:\n    function countTuplets(note: Note, location: number) {\n      return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n    }\n\n    this.notes.forEach((note) => {\n      const tupletCount = countTuplets(note, location);\n      maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n      minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n    });\n\n    return maxTupletCount - minTupletCount;\n  }\n\n  // determine the y position of the tuplet:\n  getYPosition(): number {\n    // offset the tuplet for any nested tuplets between\n    // it and the notes:\n    const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n\n    // offset the tuplet for any manual y_offset:\n    const y_offset = this.options.y_offset || 0;\n\n    // now iterate through the notes and find our highest\n    // or lowest locations, to form a base y_pos\n    const first_note = this.notes[0];\n    let y_pos;\n    if (this.location === Tuplet.LOCATION_TOP) {\n      y_pos = first_note.checkStave().getYForLine(0) - 15;\n      // y_pos = first_note.getStemExtents().topY - 10;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const top_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().topY - 10\n            : this.notes[i].getStemExtents().baseY - 20;\n\n        if (top_y < y_pos) {\n          y_pos = top_y;\n        }\n      }\n    } else {\n      y_pos = first_note.checkStave().getYForLine(4) + 20;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const bottom_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().baseY + 20\n            : this.notes[i].getStemExtents().topY + 10;\n        if (bottom_y > y_pos) {\n          y_pos = bottom_y;\n        }\n      }\n    }\n\n    return y_pos + nested_tuplet_y_offset + y_offset;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    // determine x value of left bound of tuplet\n    const first_note = this.notes[0] as StemmableNote;\n    const last_note = this.notes[this.notes.length - 1] as StemmableNote;\n\n    if (!this.bracketed) {\n      this.x_pos = first_note.getStemX();\n      this.width = last_note.getStemX() - this.x_pos;\n    } else {\n      this.x_pos = first_note.getTieLeftX() - 5;\n      this.width = last_note.getTieRightX() - this.x_pos + 5;\n    }\n\n    // determine y value for tuplet\n    this.y_pos = this.getYPosition();\n\n    const addGlyphWidth = (width: number, glyph: Glyph) => width + defined(glyph.getMetrics().width);\n\n    // calculate total width of tuplet notation\n    let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n    if (this.ratioed) {\n      width = this.denom_glyphs.reduce(addGlyphWidth, width);\n      width += this.point * 0.32;\n    }\n\n    const notation_center_x = this.x_pos + this.width / 2;\n    const notation_start_x = notation_center_x - width / 2;\n\n    // draw bracket if the tuplet is not beamed\n    if (this.bracketed) {\n      const line_width = this.width / 2 - width / 2 - 5;\n\n      // only draw the bracket if it has positive length\n      if (line_width > 0) {\n        ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n        ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n        ctx.fillRect(\n          this.x_pos,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n        ctx.fillRect(\n          this.x_pos + this.width,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n      }\n    }\n\n    // draw numerator glyphs\n    const shiftY = this.musicFont.lookupMetric('digits.shiftY', 0);\n\n    let x_offset = 0;\n    this.numerator_glyphs.forEach((glyph) => {\n      glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n      x_offset += defined(glyph.getMetrics().width);\n    });\n\n    // display colon and denominator if the ratio is to be shown\n    if (this.ratioed) {\n      const colon_x = notation_start_x + x_offset + this.point * 0.16;\n      const colon_radius = this.point * 0.06;\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      x_offset += this.point * 0.32;\n      this.denom_glyphs.forEach((glyph) => {\n        glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n        x_offset += defined(glyph.getMetrics().width);\n      });\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Stave } from './stave';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { Fraction } from './fraction';\nimport { Modifier } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { TickContext } from './tickcontext';\nimport { Tuplet } from './tuplet';\nimport { defined, RuntimeError } from './util';\nimport { Voice } from './voice';\n\n/** Formatter metrics interface */\nexport interface FormatterMetrics {\n  duration: string;\n  freedom: {\n    left: number;\n    right: number;\n  };\n  iterations: number;\n  space: {\n    used: number;\n    mean: number;\n    deviation: number;\n  };\n}\n\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport abstract class Tickable extends Element {\n  static get CATEGORY(): string {\n    return 'Tickable';\n  }\n\n  protected ignore_ticks: boolean;\n  protected tupletStack: Tuplet[];\n  protected tuplet?: Tuplet;\n  protected ticks: Fraction;\n  protected center_x_shift: number;\n  protected voice?: Voice;\n  protected width: number;\n  protected x_shift: number;\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected modifierContext?: ModifierContext;\n  protected tickContext?: TickContext;\n  protected modifiers: Modifier[];\n  protected tickMultiplier: Fraction;\n  protected formatterMetrics: FormatterMetrics;\n  protected intrinsicTicks: number;\n  protected align_center: boolean;\n\n  /** Constructor */\n  constructor() {\n    super();\n    this.setAttribute('type', 'Tickable');\n\n    // These properties represent the duration of\n    // this tickable element.\n    this.ticks = new Fraction(0, 1); // Fractional value of ticks\n    this.intrinsicTicks = 0; // Floating point value of ticks\n    this.tickMultiplier = new Fraction(1, 1);\n\n    // Formatter metrics\n    this.width = 0;\n    this.x_shift = 0; // Shift from tick context\n\n    this.modifiers = [];\n    this.tupletStack = [];\n\n    this.align_center = false;\n    this.center_x_shift = 0; // Shift from tick context if center aligned\n\n    // This flag tells the formatter to ignore this tickable during\n    // formatting and justification. It is set by tickables such as BarNote.\n    this.ignore_ticks = false;\n\n    // This is a space for an external formatting class or function to maintain\n    // metrics.\n    this.formatterMetrics = {\n      // The freedom of a tickable is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n\n      // The simplified rational duration of this tick as a string. It can be\n      // used as an index to a map or hashtable.\n      duration: '',\n\n      // The number of formatting iterations undergone.\n      iterations: 0,\n\n      // The space in pixels allocated by this formatter, along with the mean space\n      // for tickables of this duration, and the deviation from the mean.\n      space: {\n        used: 0,\n        mean: 0,\n        deviation: 0,\n      },\n    };\n  }\n\n  getCategory(): string {\n    return Tickable.CATEGORY;\n  }\n\n  /** Reset the Tickable, this function will be overloaded. */\n  reset(): this {\n    return this;\n  }\n\n  /** Return the ticks. */\n  getTicks(): Fraction {\n    return this.ticks;\n  }\n\n  /** Check if it ignores the ticks. */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Ignore the ticks. */\n  setIgnoreTicks(flag: boolean): this {\n    this.ignore_ticks = flag;\n    return this;\n  }\n\n  /** Set width of note. Used by the formatter for positioning. */\n  setWidth(width: number): void {\n    this.width = width;\n  }\n\n  /** Get width of note. Used by the formatter for positioning. */\n  getWidth(): number {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n    }\n\n    return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n  }\n\n  /** Displace note by `x` pixels. Used by the formatter. */\n  setXShift(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  /** Get the `x` displaced pixels of the note. */\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  /** Get `x` position of this tick context. */\n  getX(): number {\n    const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n    return tickContext.getX() + this.x_shift;\n  }\n\n  /** Return the formatterMetrics. */\n  getFormatterMetrics(): FormatterMetrics {\n    return this.formatterMetrics;\n  }\n\n  /** Return the center `x` shift. */\n  getCenterXShift(): number {\n    if (this.isCenterAligned()) {\n      return this.center_x_shift;\n    }\n\n    return 0;\n  }\n\n  /** Set the center `x` shift. */\n  setCenterXShift(centerXShift: number): this {\n    this.center_x_shift = centerXShift;\n    return this;\n  }\n\n  // Check if tickable is center aligned. */\n  isCenterAligned(): boolean {\n    return this.align_center;\n  }\n\n  // Set/unset center alignment. */\n  setCenterAlignment(align_center: boolean): this {\n    this.align_center = align_center;\n    return this;\n  }\n\n  /**\n   * Return the associated voice. Every tickable must be associated with a voice.\n   * This allows formatters and preFormatter to associate them with the right modifierContexts.\n   */\n  getVoice(): Voice {\n    return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n  }\n\n  /** Set the associated voice. */\n  setVoice(voice: Voice): void {\n    this.voice = voice;\n  }\n\n  /** Get the tuplet. */\n  getTuplet(): Tuplet | undefined {\n    return this.tuplet;\n  }\n\n  /** Return the intrinsic ticks. */\n  getTupletStack(): Tuplet[] {\n    return this.tupletStack;\n  }\n\n  /**\n   * Reset the specific Tuplet if this is not provided, all tuplets are reset.\n   * Remove any prior tuplets from the tick calculation and\n   * reset the intrinsic tick value.\n   */\n  resetTuplet(tuplet?: Tuplet): this {\n    let noteCount;\n    let notesOccupied;\n    if (tuplet) {\n      const i = this.tupletStack.indexOf(tuplet);\n      if (i !== -1) {\n        this.tupletStack.splice(i, 1);\n        noteCount = tuplet.getNoteCount();\n        notesOccupied = tuplet.getNotesOccupied();\n\n        // Revert old multiplier by inverting numerator & denom.:\n        this.applyTickMultiplier(noteCount, notesOccupied);\n      }\n      return this;\n    }\n\n    while (this.tupletStack.length) {\n      tuplet = this.tupletStack.pop() as Tuplet;\n      noteCount = tuplet.getNoteCount();\n      notesOccupied = tuplet.getNotesOccupied();\n\n      // Revert old multiplier by inverting numerator & denom.:\n      this.applyTickMultiplier(noteCount, notesOccupied);\n    }\n    return this;\n  }\n\n  /** Attach to new tuplet. */\n  setTuplet(tuplet: Tuplet): this {\n    if (tuplet) {\n      this.tupletStack.push(tuplet);\n\n      const noteCount = tuplet.getNoteCount();\n      const notesOccupied = tuplet.getNotesOccupied();\n\n      this.applyTickMultiplier(notesOccupied, noteCount);\n    }\n\n    this.tuplet = tuplet;\n\n    return this;\n  }\n\n  /**\n   * Add self to the provided ModifierContext `mc`.\n   * If this tickable has modifiers, set modifierContext.\n   * @returns this\n   */\n  addToModifierContext(mc: ModifierContext): this {\n    this.modifierContext = mc;\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addMember(this.modifiers[i]);\n    }\n    this.modifierContext.addMember(this);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Optional, if tickable has modifiers, associate a Modifier. */\n  // eslint-disable-next-line\n  addModifier(mod: Modifier, ...optionalArgs: any[]): this {\n    this.modifiers.push(mod);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the list of associated modifiers. */\n  getModifiers(): Modifier[] {\n    return this.modifiers;\n  }\n\n  /** Set the Tick Context. */\n  setTickContext(tc: TickContext): void {\n    this.tickContext = tc;\n    this.setPreFormatted(false);\n  }\n\n  checkTickContext(message = 'Tickable has no tick context.'): TickContext {\n    return defined(this.tickContext, 'NoTickContext', message);\n  }\n\n  /** Preformat the Tickable. */\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.width = 0;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      this.width += this.modifierContext.getWidth();\n    }\n  }\n\n  /** Set preformatted status. */\n  setPreFormatted(value: boolean): void {\n    this.preFormatted = value;\n  }\n\n  /** Postformat the Tickable. */\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n\n  /** Return the intrinsic ticks. */\n  getIntrinsicTicks(): number {\n    return this.intrinsicTicks;\n  }\n\n  /** Set the intrinsic ticks. */\n  setIntrinsicTicks(intrinsicTicks: number): void {\n    this.intrinsicTicks = intrinsicTicks;\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Get the tick multiplier. */\n  getTickMultiplier(): Fraction {\n    return this.tickMultiplier;\n  }\n\n  /** Apply a tick multiplier. */\n  applyTickMultiplier(numerator: number, denominator: number): void {\n    this.tickMultiplier.multiply(numerator, denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Set the duration. */\n  setDuration(duration: Fraction): void {\n    const ticks = duration.numerator * (Flow.RESOLUTION / duration.denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(ticks);\n    this.intrinsicTicks = this.ticks.value();\n  }\n\n  getAbsoluteX(): number {\n    const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n    return tickContext.getX();\n  }\n\n  /** Attach this note to a modifier context. */\n  setModifierContext(mc?: ModifierContext): this {\n    this.modifierContext = mc;\n    return this;\n  }\n\n  /** Get `ModifierContext`. */\n  getModifierContext(): ModifierContext | undefined {\n    return this.modifierContext;\n  }\n\n  /** Check and get `ModifierContext`. */\n  checkModifierContext(): ModifierContext {\n    return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n  }\n\n  /** Get the target stave. */\n  abstract getStave(): Stave | undefined;\n\n  /** Set the target stave. */\n  abstract setStave(stave: Stave): this;\n\n  // eslint-disable-next-line\n  abstract getMetrics(): any;\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Beam } from './beam';\nimport { RuntimeError, drawDot, defined } from './util';\nimport { Flow } from './flow';\nimport { Fraction } from './fraction';\nimport { GlyphProps } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stave } from './stave';\nimport { Stroke } from './strokes';\nimport { Tickable } from './tickable';\nimport { TickContext } from './tickcontext';\nimport { KeyProps, RenderContext } from './types/common';\nimport { Voice } from './voice';\n\nexport interface NoteMetrics {\n  /** The total width of the note (including modifiers). */\n  width: number;\n  glyphWidth?: number;\n  /** The width of the note head only. */\n  notePx: number;\n  /** Start `X` for left modifiers. */\n  modLeftPx: number;\n  /** Start `X` for right modifiers. */\n  modRightPx: number;\n  /** Extra space on left of note. */\n  leftDisplacedHeadPx: number;\n  glyphPx: number;\n  /** Extra space on right of note. */\n  rightDisplacedHeadPx: number;\n}\n\nexport interface NoteDuration {\n  duration: string;\n  dots: number;\n  type: string;\n}\n\nexport interface NoteRenderOptions {\n  draw_stem_through_stave?: boolean;\n  draw_dots?: boolean;\n  draw_stem?: boolean;\n  y_shift: number;\n  extend_left?: number;\n  extend_right?: number;\n  glyph_font_scale: number;\n  annotation_spacing: number;\n  glyph_font_size?: number;\n  scale: number;\n  font: string;\n  stroke_px: number;\n}\n\nexport interface ParsedNote {\n  duration: string;\n  type: string;\n  customTypes: string[];\n  dots: number;\n  ticks: number;\n}\n\nexport interface NoteStruct {\n  /** The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.). */\n  duration: string;\n  line?: number;\n  /** The number of dots, which affects the duration. */\n  dots?: number;\n  keys?: string[];\n  /** The note type (e.g., `r` for rest, `s` for slash notes, etc.). */\n  type?: string;\n  align_center?: boolean;\n  duration_override?: Fraction;\n}\n\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport abstract class Note extends Tickable {\n  keys: string[];\n  keyProps: KeyProps[];\n\n  protected stave?: Stave;\n  render_options: NoteRenderOptions;\n  protected duration: string;\n  protected dots: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected noteType: string;\n  protected customGlyphs: GlyphProps[];\n  protected ys: number[];\n  // eslint-disable-next-line\n  protected glyph?: any;\n  protected customTypes: string[];\n  protected playNote?: Note;\n  protected beam?: Beam;\n\n  static get CATEGORY(): string {\n    return 'note';\n  }\n\n  /** Debug helper. Displays various note metrics for the given note. */\n  static plotMetrics(ctx: RenderContext, note: Tickable, yPos: number): void {\n    const metrics = note.getMetrics();\n    const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n    const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n    const xAbs = note.getAbsoluteX();\n    const xPost1 = note.getAbsoluteX() + metrics.notePx;\n    const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n    const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n    const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);\n\n    const xWidth = xEnd - xStart;\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n    ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n\n    const y = yPos + 7;\n    function stroke(x1: number, x2: number, color: string, yy: number = y) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(3);\n      ctx.moveTo(x1 + note.getXShift(), yy);\n      ctx.lineTo(x2 + note.getXShift(), yy);\n      ctx.stroke();\n    }\n\n    stroke(xStart, xPre1, 'red');\n    stroke(xPre1, xAbs, '#999');\n    stroke(xAbs, xPost1, 'green');\n    stroke(xPost1, xPost2, '#999');\n    stroke(xPost2, xEnd, 'red');\n    stroke(xEnd, xFreedomRight, '#DD0');\n    stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n    drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n\n    const formatterMetrics = note.getFormatterMetrics();\n    if (formatterMetrics.iterations > 0) {\n      const spaceDeviation = formatterMetrics.space.deviation;\n      const prefix = spaceDeviation >= 0 ? '+' : '';\n      ctx.setFillStyle('red');\n      ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n    }\n    ctx.restore();\n  }\n\n  protected static parseDuration(durationString: string): NoteDuration | undefined {\n    const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n    const result = regexp.exec(durationString);\n    if (!result) {\n      return undefined;\n    }\n\n    const duration = result[1];\n    const dots = result[2].length;\n    const type = result[3] || 'n';\n\n    return { duration, dots, type };\n  }\n\n  protected static parseNoteStruct(noteStruct: NoteStruct): ParsedNote | undefined {\n    const durationString = noteStruct.duration;\n    const customTypes: string[] = [];\n\n    // Preserve backwards-compatibility\n    const durationProps = Note.parseDuration(durationString);\n    if (!durationProps) {\n      return undefined;\n    }\n\n    // If specified type is invalid, return undefined\n    let type = noteStruct.type;\n    if (type && !Flow.validTypes[type]) {\n      return undefined;\n    }\n\n    // If no type specified, check duration or custom types\n    if (!type) {\n      type = durationProps.type || 'n';\n\n      // If we have keys, try and check if we've got a custom glyph\n      if (noteStruct.keys !== undefined) {\n        noteStruct.keys.forEach((k, i) => {\n          const result = k.split('/');\n          // We have a custom glyph specified after the note eg. /X2\n          customTypes[i] = (result && result.length === 3 ? result[2] : type) as string;\n        });\n      }\n    }\n\n    // Calculate the tick duration of the note\n    let ticks = Flow.durationToTicks(durationProps.duration);\n    if (!ticks) {\n      return undefined;\n    }\n\n    // Are there any dots?\n    const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n    if (typeof dots !== 'number') {\n      return undefined;\n    }\n\n    // Add ticks as necessary depending on the numbr of dots\n    let currentTicks = ticks;\n    for (let i = 0; i < dots; i++) {\n      if (currentTicks <= 1) return undefined;\n\n      currentTicks = currentTicks / 2;\n      ticks += currentTicks;\n    }\n\n    return {\n      duration: durationProps.duration,\n      type,\n      customTypes,\n      dots,\n      ticks,\n    };\n  }\n\n  /**\n   * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n   * positioning and layout.\n   * To create a new note you need to provide a `noteStruct`.\n   */\n  constructor(noteStruct: NoteStruct) {\n    super();\n    this.setAttribute('type', 'Note');\n\n    if (!noteStruct) {\n      throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n    }\n\n    /** Parses `noteStruct` and get note properties. */\n    const initStruct = Note.parseNoteStruct(noteStruct);\n    if (!initStruct) {\n      throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n    }\n\n    // Set note properties from parameters.\n    this.keys = noteStruct.keys || [];\n    // per-pitch properties\n    this.keyProps = [];\n\n    this.duration = initStruct.duration;\n    this.dots = initStruct.dots;\n    this.noteType = initStruct.type;\n    this.customTypes = initStruct.customTypes;\n\n    if (noteStruct.duration_override) {\n      // Custom duration\n      this.setDuration(noteStruct.duration_override);\n    } else {\n      // Default duration\n      this.setIntrinsicTicks(initStruct.ticks);\n    }\n\n    this.modifiers = [];\n\n    // Get the glyph code for this note from the font.\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n    this.customGlyphs = this.customTypes.map((t) => Flow.getGlyphProps(this.duration, t));\n\n    // Note to play for audio players.\n    this.playNote = undefined;\n\n    // Positioning contexts used by the Formatter.\n    this.ignore_ticks = false;\n\n    // Positioning variables\n    this.width = 0; // Width in pixels calculated after preFormat\n    this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n    this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n    this.x_shift = 0; // X shift from tick context X\n    this.preFormatted = false; // Is this note preFormatted?\n    this.ys = []; // list of y coordinates for each note\n    // we need to hold on to these for ties and beams.\n\n    if (noteStruct.align_center) {\n      this.setCenterAlignment(noteStruct.align_center);\n    }\n\n    // The render surface.\n    this.render_options = {\n      annotation_spacing: 5,\n      glyph_font_scale: 1,\n      stroke_px: 1,\n      scale: 1,\n      font: '',\n      y_shift: 0,\n    };\n  }\n\n  /**\n   * Get the play note, which is arbitrary data that can be used by an\n   * audio player.\n   */\n  getPlayNote(): Note | undefined {\n    return this.playNote;\n  }\n\n  /**\n   * Set the play note, which is arbitrary data that can be used by an\n   * audio player.\n   */\n  setPlayNote(note: Note): this {\n    this.playNote = note;\n    return this;\n  }\n\n  /**\n   * @returns true if this note is a type of rest.\n   *\n   * Rests don't have pitches, but take up space in the score.\n   * Subclasses should override this default implementation.\n   */\n  isRest(): boolean {\n    return false;\n  }\n\n  /** Add stroke. */\n  addStroke(index: number, stroke: Stroke): this {\n    stroke.setNote(this);\n    stroke.setIndex(index);\n    this.modifiers.push(stroke);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the target stave. */\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  /** Check and get the target stave. */\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  /** Set the target stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n    this.setContext(this.stave.getContext());\n    return this;\n  }\n\n  /**\n   * `Note` is not really a modifier, but is used in\n   * a `ModifierContext`.\n   */\n  getCategory(): string {\n    return Note.CATEGORY;\n  }\n\n  /** Get spacing to the left of the notes. */\n  getLeftDisplacedHeadPx(): number {\n    return this.leftDisplacedHeadPx;\n  }\n\n  /** Get spacing to the right of the notes. */\n  getRightDisplacedHeadPx(): number {\n    return this.rightDisplacedHeadPx;\n  }\n\n  /** Set spacing to the left of the notes. */\n  setLeftDisplacedHeadPx(x: number): this {\n    this.leftDisplacedHeadPx = x;\n    return this;\n  }\n\n  /** Set spacing to the right of the notes. */\n  setRightDisplacedHeadPx(x: number): this {\n    this.rightDisplacedHeadPx = x;\n    return this;\n  }\n\n  /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Get the stave line number for the note. */\n  // eslint-disable-next-line\n  getLineNumber(isTopNote?: boolean): number {\n    return 0;\n  }\n\n  /** Get the stave line number for rest. */\n  getLineForRest(): number {\n    return 0;\n  }\n\n  /** Get the glyph associated with this note. */\n  // eslint-disable-next-line\n  getGlyph(): any {\n    return this.glyph;\n  }\n\n  /** Get the glyph width. */\n  getGlyphWidth(): number {\n    // TODO: FIXME (multiple potential values for this.glyph)\n    if (this.glyph) {\n      if (this.glyph.getMetrics) {\n        return this.glyph.getMetrics().width;\n      } else if (this.glyph.getWidth) {\n        return this.glyph.getWidth(this.render_options.glyph_font_scale);\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Set Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  setYs(ys: number[]): this {\n    this.ys = ys;\n    return this;\n  }\n\n  /**\n   * Get Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  getYs(): number[] {\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n    }\n\n    return this.ys;\n  }\n\n  /**\n   * Get the Y position of the space above the stave onto which text can\n   * be rendered.\n   */\n  getYForTopText(text_line: number): number {\n    return this.checkStave().getYForTopText(text_line);\n  }\n\n  /** Return the voice that this note belongs in. */\n  getVoice(): Voice {\n    if (!this.voice) throw new RuntimeError('NoVoice', 'Note has no voice.');\n    return this.voice;\n  }\n\n  /** Attach this note to `voice`. */\n  setVoice(voice: Voice): this {\n    this.voice = voice;\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the `TickContext` for this note. */\n  getTickContext(): TickContext {\n    return this.checkTickContext();\n  }\n\n  /** Set the `TickContext` for this note. */\n  setTickContext(tc: TickContext): this {\n    this.tickContext = tc;\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Accessor to duration. */\n  getDuration(): string {\n    return this.duration;\n  }\n\n  /** Accessor to isDotted. */\n  isDotted(): boolean {\n    return this.dots > 0;\n  }\n\n  /** Accessor to hasStem. */\n  hasStem(): boolean {\n    return false;\n  }\n\n  /** Accessor to note type. */\n  getNoteType(): string {\n    return this.noteType;\n  }\n\n  /** Get the beam. */\n  getBeam(): Beam | undefined {\n    return this.beam;\n  }\n\n  /** Check and get the beam. */\n  checkBeam(): Beam {\n    return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n  }\n\n  /** Check it has a beam. */\n  hasBeam(): boolean {\n    return this.beam != undefined;\n  }\n\n  /** Set the beam. */\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    return this;\n  }\n\n  /**\n   * Attach a modifier to this note.\n   * @param modifier the Modifier to add.\n   * @param index of the key to modify.\n   * @returns this\n   */\n  addModifier(modifier: Modifier, index: number = 0): this {\n    // Legacy versions of VexFlow had the two parameters swapped.\n    // We check here and throw an error if the argument types are not correct.\n    if (typeof modifier !== 'object' || typeof index !== 'number') {\n      throw new RuntimeError(\n        'WrongParams',\n        'Call signature to addModifier not supported, use addModifier(modifier: Modifier, index) instead.'\n      );\n    }\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the coordinates for where modifiers begin. */\n  // eslint-disable-next-line\n  getModifierStartXY(position?: number, index?: number, options?: any): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    return {\n      x: this.getAbsoluteX(),\n      y: this.ys[0],\n    };\n  }\n\n  /** Get the metrics for this note. */\n  getMetrics(): NoteMetrics {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n    }\n\n    const modLeftPx = this.modifierContext ? this.modifierContext.state.left_shift : 0;\n    const modRightPx = this.modifierContext ? this.modifierContext.state.right_shift : 0;\n    const width = this.getWidth();\n    const glyphWidth = this.getGlyphWidth();\n    const notePx =\n      width -\n      modLeftPx - // subtract left modifiers\n      modRightPx - // subtract right modifiers\n      this.leftDisplacedHeadPx - // subtract left displaced head\n      this.rightDisplacedHeadPx; // subtract right displaced head\n\n    return {\n      // ----------\n      // NOTE: If you change this, remember to update MockTickable in the tests/ directory.\n      // --------------\n      width,\n      glyphWidth,\n      notePx,\n\n      // Modifier spacing.\n      modLeftPx,\n      modRightPx,\n\n      // Displaced note head on left or right.\n      leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n      rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n      glyphPx: 0,\n    };\n  }\n\n  /**\n   * Get the absolute `X` position of this note's tick context. This\n   * excludes x_shift, so you'll need to factor it in if you're\n   * looking for the post-formatted x-position.\n   */\n  getAbsoluteX(): number {\n    const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n    // Position note to left edge of tick context.\n    let x = tickContext.getX();\n    if (this.stave) {\n      x += this.stave.getNoteStartX() + this.musicFont.lookupMetric('stave.padding');\n    }\n    if (this.isCenterAligned()) {\n      x += this.getCenterXShift();\n    }\n    return x;\n  }\n\n  /** Get the direction of the stem. */\n  getStemDirection(): number {\n    throw new RuntimeError('NoStem', 'No stem attached to this note.');\n  }\n\n  /** Get the top and bottom `y` values of the stem. */\n  getStemExtents(): Record<string, number> {\n    throw new RuntimeError('NoStem', 'No stem attached to this note.');\n  }\n\n  /** Get the `x` coordinate to the right of the note. */\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieStartX += note_glyph_width / 2;\n    tieStartX += -this.width / 2 + this.width + 2;\n\n    return tieStartX;\n  }\n\n  /** Get the `x` coordinate to the left of the note. */\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieEndX += note_glyph_width / 2;\n    tieEndX -= this.width / 2 + 2;\n\n    return tieEndX;\n  }\n\n  // Get the pitches in the note\n  getKeys(): string[] {\n    return this.keys;\n  }\n\n  // Get the properties for all the keys in the note\n  getKeyProps(): KeyProps[] {\n    return this.keyProps;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { Flow } from './flow';\nimport { Note, NoteStruct } from './note';\nimport { Stem } from './stem';\nimport { StaveNote } from './stavenote';\nimport { Glyph, GlyphProps } from './glyph';\nimport { RenderContext } from './types/common';\nimport { BoundingBox } from './boundingbox';\nimport { Stave } from './stave';\nimport { ElementStyle } from './element';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (NoteHead.DEBUG) log('Vex.Flow.NoteHead', args);\n}\n\nexport interface NoteHeadStruct extends NoteStruct {\n  glyph_font_scale?: number;\n  slashed?: boolean;\n  style?: ElementStyle;\n  stem_down_x_offset?: number;\n  stem_up_x_offset?: number;\n  custom_glyph_code?: string;\n  x_shift?: number;\n  line?: number;\n  stem_direction?: number;\n  displaced?: boolean;\n  //  duration: string;\n  note_type: string;\n  y?: number;\n  x?: number;\n  index?: number;\n}\n\n/**\n * Draw slashnote head manually. No glyph exists for this.\n * @param ctx the Canvas context\n * @param duration the duration of the note. ex: \"4\"\n * @param x the x coordinate to draw at\n * @param y the y coordinate to draw at\n * @param stem_direction the direction of the stem\n */\nfunction drawSlashNoteHead(\n  ctx: RenderContext,\n  duration: string,\n  x: number,\n  y: number,\n  stem_direction: number,\n  staveSpace: number\n) {\n  const width = Flow.SLASH_NOTEHEAD_WIDTH;\n  ctx.save();\n  ctx.setLineWidth(Flow.STEM_WIDTH);\n\n  let fill = false;\n\n  if (Flow.durationToNumber(duration) > 2) {\n    fill = true;\n  }\n\n  if (!fill) x -= (Flow.STEM_WIDTH / 2) * stem_direction;\n\n  ctx.beginPath();\n  ctx.moveTo(x, y + staveSpace);\n  ctx.lineTo(x, y + 1);\n  ctx.lineTo(x + width, y - staveSpace);\n  ctx.lineTo(x + width, y);\n  ctx.lineTo(x, y + staveSpace);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n\n  if (Flow.durationToFraction(duration).equals(0.5)) {\n    const breve_lines = [-3, -1, width + 1, width + 3];\n    for (let i = 0; i < breve_lines.length; i++) {\n      ctx.beginPath();\n      ctx.moveTo(x + breve_lines[i], y - 10);\n      ctx.lineTo(x + breve_lines[i], y + 11);\n      ctx.stroke();\n    }\n  }\n\n  ctx.restore();\n}\n\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  glyph_code: string;\n\n  protected custom_glyph: boolean = false;\n  protected stem_up_x_offset: number = 0;\n  protected stem_down_x_offset: number = 0;\n  protected note_type: string;\n  protected displaced: boolean;\n  protected stem_direction: number;\n\n  protected x: number;\n  protected y: number;\n  protected line: number;\n  protected index?: number;\n  protected slashed: boolean;\n\n  static get CATEGORY(): string {\n    return 'notehead';\n  }\n\n  constructor(head_options: NoteHeadStruct) {\n    super(head_options);\n    this.setAttribute('type', 'NoteHead');\n\n    this.index = head_options.index;\n    this.x = head_options.x || 0;\n    this.y = head_options.y || 0;\n    this.note_type = head_options.note_type;\n    this.duration = head_options.duration;\n    this.displaced = head_options.displaced || false;\n    this.stem_direction = head_options.stem_direction || StaveNote.STEM_UP;\n    this.line = head_options.line || 0;\n\n    // Get glyph code based on duration and note type. This could be\n    // regular notes, rests, or other custom codes.\n    this.glyph = Flow.getGlyphProps(this.duration, this.note_type);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.note_type}'`);\n\n    this.glyph_code = this.glyph.code_head;\n    this.x_shift = head_options.x_shift || 0;\n    if (head_options.custom_glyph_code) {\n      this.custom_glyph = true;\n      this.glyph_code = head_options.custom_glyph_code;\n      this.stem_up_x_offset = head_options.stem_up_x_offset || 0;\n      this.stem_down_x_offset = head_options.stem_down_x_offset || 0;\n    }\n\n    this.style = head_options.style;\n    this.slashed = head_options.slashed || false;\n\n    this.render_options = {\n      ...this.render_options,\n      ...{\n        // font size for note heads\n        glyph_font_scale: head_options.glyph_font_scale || Flow.DEFAULT_NOTATION_FONT_SCALE,\n        // number of stroke px to the left and right of head\n        stroke_px: 3,\n      },\n    };\n\n    this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));\n  }\n\n  getCategory(): string {\n    return NoteHead.CATEGORY;\n  }\n\n  /** Get the width of the notehead. */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /** Determine if the notehead is displaced. */\n  isDisplaced(): boolean {\n    return this.displaced === true;\n  }\n\n  /** Get the glyph data. */\n  getGlyph(): GlyphProps {\n    return this.glyph;\n  }\n\n  /** Set the X coordinate. */\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  /** Get the Y coordinate. */\n  getY(): number {\n    return this.y;\n  }\n\n  /** Set the Y coordinate. */\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  /** Get the stave line the notehead is placed on. */\n  getLine(): number {\n    return this.line;\n  }\n\n  /** Set the stave line the notehead is placed on. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Get the canvas `x` coordinate position of the notehead. */\n  getAbsoluteX(): number {\n    // If the note has not been preformatted, then get the static x value\n    // Otherwise, it's been formatted and we should use it's x value relative\n    // to its tick context\n    const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n\n    // For a more natural displaced notehead, we adjust the displacement amount\n    // by half the stem width in order to maintain a slight overlap with the stem\n    const displacementStemAdjustment = Stem.WIDTH / 2;\n    const fontShift = this.musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\n    const displacedFontShift = this.musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;\n\n    return (\n      x +\n      fontShift +\n      (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0)\n    );\n  }\n\n  /** Get the `BoundingBox` for the `NoteHead`. */\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n    const spacing = this.checkStave().getSpacingBetweenLines();\n    const half_spacing = spacing / 2;\n    const min_y = this.y - half_spacing;\n\n    return new BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n  }\n\n  /** Set notehead to a provided `stave`. */\n  setStave(stave: Stave): this {\n    const line = this.getLine();\n\n    this.stave = stave;\n    if (this.stave) {\n      this.setY(this.stave.getYForNote(line));\n      this.setContext(this.stave.getContext());\n    }\n    return this;\n  }\n\n  /** Pre-render formatting. */\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Draw the notehead. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let head_x = this.getAbsoluteX();\n    if (this.custom_glyph) {\n      // head_x += this.x_shift;\n      head_x += this.stem_direction === Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;\n    }\n\n    const y = this.y;\n\n    L(\"Drawing note head '\", this.note_type, this.duration, \"' at\", head_x, y);\n\n    // Begin and end positions for head.\n    const stem_direction = this.stem_direction;\n    const glyph_font_scale = this.render_options.glyph_font_scale;\n\n    if (this.style) {\n      this.applyStyle(ctx);\n    }\n\n    const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\n    if (this.note_type === 's') {\n      const staveSpace = this.checkStave().getSpacingBetweenLines();\n      drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n    } else {\n      Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\n        font: this.musicFont,\n        category: this.custom_glyph ? `noteHead.custom.${categorySuffix}` : `noteHead.standard.${categorySuffix}`,\n      });\n    }\n\n    if (this.style) {\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\n\nimport { RuntimeError } from './util';\nimport { Flow } from './flow';\nimport { Stem, StemOptions } from './stem';\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { GlyphProps } from './glyph';\n\nexport abstract class StemmableNote extends Note {\n  static get CATEGORY(): string {\n    return 'stemmablenote';\n  }\n\n  stem_direction?: number;\n  stem?: Stem;\n\n  protected flag?: Glyph;\n  protected stem_extension_override?: number;\n\n  constructor(note_struct: NoteStruct) {\n    super(note_struct);\n    this.setAttribute('type', 'StemmableNote');\n  }\n\n  // Get and set the note's `Stem`\n  getStem(): Stem | undefined {\n    return this.stem;\n  }\n\n  checkStem(): Stem {\n    if (!this.stem) {\n      throw new RuntimeError('NoStem', 'No stem attached to instance');\n    }\n    return this.stem;\n  }\n\n  setStem(stem: Stem): this {\n    this.stem = stem;\n    return this;\n  }\n\n  // Builds and sets a new stem\n  buildStem(): this {\n    const stem = new Stem();\n    this.setStem(stem);\n    return this;\n  }\n\n  buildFlag(category = 'flag'): void {\n    const { glyph } = this;\n\n    if (this.hasFlag()) {\n      const flagCode = this.getStemDirection() === Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;\n\n      this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\n    }\n  }\n\n  // Get the custom glyph associated with the outer note head on the base of the stem.\n  getBaseCustomNoteHeadGlyph(): GlyphProps {\n    if (this.getStemDirection() === Stem.DOWN) {\n      return this.customGlyphs[this.customGlyphs.length - 1];\n    } else {\n      return this.customGlyphs[0];\n    }\n  }\n\n  // Get the full length of stem\n  getStemLength(): number {\n    return Stem.HEIGHT + this.getStemExtension();\n  }\n\n  // Get the number of beams for this duration\n  getBeamCount(): number {\n    const glyph = this.getGlyph();\n\n    if (glyph) {\n      return glyph.beam_count;\n    } else {\n      return 0;\n    }\n  }\n\n  // Get the minimum length of stem\n  getStemMinimumLength(): number {\n    const frac = Flow.durationToFraction(this.duration);\n    let length = frac.value() <= 1 ? 0 : 20;\n    // if note is flagged, cannot shorten beam\n    switch (this.duration) {\n      case '8':\n        if (this.beam == undefined) length = 35;\n        break;\n      case '16':\n        length = this.beam == undefined ? 35 : 25;\n        break;\n      case '32':\n        length = this.beam == undefined ? 45 : 35;\n        break;\n      case '64':\n        length = this.beam == undefined ? 50 : 40;\n        break;\n      case '128':\n        length = this.beam == undefined ? 55 : 45;\n        break;\n      default:\n        break;\n    }\n    return length;\n  }\n\n  // Get/set the direction of the stem\n  getStemDirection(): number {\n    if (!this.stem_direction) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem_direction;\n  }\n\n  setStemDirection(direction?: number): this {\n    if (!direction) direction = Stem.UP;\n    if (direction !== Stem.UP && direction !== Stem.DOWN) {\n      throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n    }\n\n    this.stem_direction = direction;\n\n    if (this.stem) {\n      this.stem.setDirection(direction);\n      this.stem.setExtension(this.getStemExtension());\n\n      // Lookup the base custom notehead (closest to the base of the stem) to extend or shorten\n      // the stem appropriately. If there's no custom note head, lookup the standard notehead.\n      const glyph = this.getBaseCustomNoteHeadGlyph() || this.getGlyph();\n\n      // Get the font-specific customizations for the note heads.\n      const offsets = this.musicFont.lookupMetric(`stem.noteHead.${glyph.code_head}`, {\n        offsetYBaseStemUp: 0,\n        offsetYTopStemUp: 0,\n        offsetYBaseStemDown: 0,\n        offsetYTopStemDown: 0,\n      });\n\n      // Configure the stem to use these offsets.\n      this.stem.setOptions({\n        stem_up_y_offset: offsets.offsetYTopStemUp, // glyph.stem_up_y_offset,\n        stem_down_y_offset: offsets.offsetYTopStemDown, // glyph.stem_down_y_offset,\n        stem_up_y_base_offset: offsets.offsetYBaseStemUp, // glyph.stem_up_y_base_offset,\n        stem_down_y_base_offset: offsets.offsetYBaseStemDown, // glyph.stem_down_y_base_offset,\n      });\n    }\n\n    // Reset and reformat everything.\n    this.reset();\n    if (this.hasFlag()) {\n      this.buildFlag();\n    }\n    this.beam = undefined;\n    if (this.preFormatted) {\n      this.preFormat();\n    }\n    return this;\n  }\n\n  // Get the `x` coordinate of the stem\n  getStemX(): number {\n    const x_begin = this.getAbsoluteX() + this.x_shift;\n    const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n    const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n    return stem_x;\n  }\n\n  // Get the `x` coordinate for the center of the glyph.\n  // Used for `TabNote` stems and stemlets over rests\n  getCenterGlyphX(): number {\n    return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n  }\n\n  // Get the stem extension for the current duration\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != undefined) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === Stem.UP ? glyph.stem_up_extension : glyph.stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Set the stem length to a specific. Will override the default length.\n  setStemLength(height: number): this {\n    this.stem_extension_override = height - Stem.HEIGHT;\n    return this;\n  }\n\n  // Get the top and bottom `y` values of the stem.\n  getStemExtents(): Record<string, number> {\n    if (!this.stem) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem.getExtents();\n  }\n\n  /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n  getYForTopText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n\n      return Math.min(\n        stave.getYForTopText(textLine),\n        extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n      );\n    } else {\n      return stave.getYForTopText(textLine);\n    }\n  }\n\n  /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n  getYForBottomText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n\n      return Math.max(\n        stave.getYForTopText(textLine),\n        extents.baseY + this.render_options.annotation_spacing * textLine\n      );\n    } else {\n      return stave.getYForBottomText(textLine);\n    }\n  }\n\n  hasFlag(): boolean {\n    return Flow.getGlyphProps(this.duration).flag && !this.beam;\n  }\n\n  /** Post formats the note. */\n  postFormat(): this {\n    this.beam?.postFormat();\n    this.postFormatted = true;\n\n    return this;\n  }\n\n  /** Renders the stem onto the canvas. */\n  drawStem(stemOptions: StemOptions): void {\n    this.checkContext();\n    this.setRendered();\n\n    this.setStem(new Stem(stemOptions));\n    this.stem?.setContext(this.getContext()).draw();\n  }\n\n  getCategory(): string {\n    return StemmableNote.CATEGORY;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// *Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.*\n//\n// See `tests/stavenote_tests.ts` for usage examples.\n\nimport { RuntimeError, log, midLine, warn, defined } from './util';\nimport { Flow } from './flow';\nimport { BoundingBox } from './boundingbox';\nimport { Stem } from './stem';\nimport { NoteHead } from './notehead';\nimport { StemmableNote } from './stemmablenote';\nimport { StemOptions } from './stem';\nimport { Modifier } from './modifier';\nimport { Dot } from './dot';\nimport { Beam } from './beam';\nimport { ElementStyle } from './element';\nimport { Stave } from './stave';\nimport { Note, NoteStruct } from './note';\nimport { ModifierContextState } from './modifiercontext';\nimport { Accidental } from './accidental';\n\nexport interface StaveNoteHeadBounds {\n  y_top: number;\n  y_bottom: number;\n  displaced_x?: number;\n  non_displaced_x?: number;\n  highest_line: number;\n  lowest_line: number;\n  highest_displaced_line?: number;\n  lowest_displaced_line?: number;\n  highest_non_displaced_line: number;\n  lowest_non_displaced_line: number;\n}\n\nexport interface StaveNoteFormatSettings {\n  line: number;\n  maxLine: number;\n  minLine: number;\n  isrest: boolean;\n  stemDirection?: number;\n  stemMax: number;\n  stemMin: number;\n  voice_shift: number;\n  is_displaced: boolean;\n  note: StaveNote;\n}\n\nexport interface StaveNoteStruct extends NoteStruct {\n  stem_down_x_offset?: number;\n  stem_up_x_offset?: number;\n  stroke_px?: number;\n  glyph_font_scale?: number;\n  stem_direction?: number;\n  auto_stem?: boolean;\n  octave_shift?: number;\n  clef?: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (StaveNote.DEBUG) log('Vex.Flow.StaveNote', args);\n}\n\nconst isInnerNoteIndex = (note: StaveNote, index: number) =>\n  index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest: StaveNoteFormatSettings, note: StaveNoteFormatSettings, dir: number) {\n  const delta = (note.isrest ? 0.0 : 1.0) * dir;\n\n  rest.line += delta;\n  rest.maxLine += delta;\n  rest.minLine += delta;\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest: StaveNoteFormatSettings, noteU: StaveNoteFormatSettings, noteL: StaveNoteFormatSettings) {\n  const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n  rest.line -= delta;\n  rest.maxLine -= delta;\n  rest.minLine -= delta;\n}\n\nexport class StaveNote extends StemmableNote {\n  static DEBUG: boolean;\n\n  minLine: number = 0;\n  maxLine: number = 0;\n\n  protected readonly clef: string;\n  protected readonly octave_shift?: number;\n\n  protected displaced: boolean;\n  protected dot_shiftY: number;\n  protected use_default_head_x: boolean;\n  protected note_heads: NoteHead[];\n  protected ledgerLineStyle: ElementStyle;\n  protected flagStyle?: ElementStyle;\n\n  static get CATEGORY(): string {\n    return 'stavenotes';\n  }\n  static get STEM_UP(): number {\n    return Stem.UP;\n  }\n  static get STEM_DOWN(): number {\n    return Stem.DOWN;\n  }\n  static get DEFAULT_LEDGER_LINE_OFFSET(): number {\n    return 3;\n  }\n  static get minNoteheadPadding() {\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('glyphs.noteHead.minPadding');\n  }\n\n  // ## Static Methods\n  //\n  // Format notes inside a ModifierContext.\n  static format(notes: StaveNote[], state: ModifierContextState): boolean {\n    if (!notes || notes.length < 2) return false;\n\n    // FIXME: VexFlow will soon require that a stave be set before formatting.\n    // Which, according to the below condition, means that following branch will\n    // always be taken and the rest of this function is dead code.\n    //\n    // Problematically, `Formatter#formatByY` was not designed to work for more\n    // than 2 voices (although, doesn't throw on this condition, just tries\n    // to power through).\n    //\n    // Based on the above:\n    //   * 2 voices can be formatted *with or without* a stave being set but\n    //     the output will be different\n    //   * 3 voices can only be formatted *without* a stave\n    if (notes[0].getStave()) {\n      StaveNote.formatByY(notes, state);\n      return true;\n    }\n\n    const notesList: StaveNoteFormatSettings[] = [];\n\n    for (let i = 0; i < notes.length; i++) {\n      const props = notes[i].getKeyProps();\n      const line = props[0].line;\n      let minL = props[props.length - 1].line;\n      const stemDirection = notes[i].getStemDirection();\n      const stemMax = notes[i].getStemLength() / 10;\n      const stemMin = notes[i].getStemMinimumLength() / 10;\n\n      let maxL;\n      if (notes[i].isRest()) {\n        maxL = line + notes[i].glyph.line_above;\n        minL = line - notes[i].glyph.line_below;\n      } else {\n        maxL = stemDirection === 1 ? props[props.length - 1].line + stemMax : props[props.length - 1].line;\n\n        minL = stemDirection === 1 ? props[0].line : props[0].line - stemMax;\n      }\n\n      notesList.push({\n        line: props[0].line, // note/rest base line\n        maxLine: maxL, // note/rest upper bounds line\n        minLine: minL, // note/rest lower bounds line\n        isrest: notes[i].isRest(),\n        stemDirection: stemDirection,\n        stemMax, // Maximum (default) note stem length;\n        stemMin, // minimum note stem length\n        voice_shift: notes[i].getVoiceShiftWidth(),\n        is_displaced: notes[i].isDisplaced(), // note manually displaced\n        note: notes[i],\n      });\n    }\n\n    const voices = notesList.length;\n\n    let noteU = notesList[0];\n    const noteM = voices > 2 ? notesList[1] : undefined;\n    let noteL = voices > 2 ? notesList[2] : notesList[1];\n\n    // for two voice backward compatibility, ensure upper voice is stems up\n    // for three voices, the voices must be in order (upper, middle, lower)\n    if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n      noteU = notesList[1];\n      noteL = notesList[0];\n    }\n\n    const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n    let xShift = 0;\n    let stemDelta;\n\n    // Test for two voice note intersection\n    if (voices === 2) {\n      const lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n      // if top voice is a middle voice, check stem intersection with lower voice\n      if (noteU.stemDirection === noteL.stemDirection && noteU.minLine <= noteL.maxLine) {\n        if (!noteU.isrest) {\n          stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));\n          stemDelta = Math.max(stemDelta, noteU.stemMin);\n          noteU.minLine = noteU.line - stemDelta;\n          noteU.note.setStemLength(stemDelta * 10);\n        }\n      }\n      if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n        if (noteU.isrest) {\n          // shift rest up\n          shiftRestVertical(noteU, noteL, 1);\n        } else if (noteL.isrest) {\n          // shift rest down\n          shiftRestVertical(noteL, noteU, -1);\n        } else {\n          xShift = voiceXShift;\n          if (noteU.stemDirection === noteL.stemDirection) {\n            // upper voice is middle voice, so shift it right\n            noteU.note.setXShift(xShift + 3);\n          } else {\n            // shift lower voice right\n            noteL.note.setXShift(xShift);\n          }\n        }\n      }\n\n      // format complete\n      return true;\n    }\n\n    if (!noteM) throw new RuntimeError('InvalidState', 'noteM not defined.');\n\n    // Check middle voice stem intersection with lower voice\n    if (noteM.minLine < noteL.maxLine + 0.5) {\n      if (!noteM.isrest) {\n        stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));\n        stemDelta = Math.max(stemDelta, noteM.stemMin);\n        noteM.minLine = noteM.line - stemDelta;\n        noteM.note.setStemLength(stemDelta * 10);\n      }\n    }\n\n    // For three voices, test if rests can be repositioned\n    //\n    // Special case 1 :: middle voice rest between two notes\n    //\n    if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n      if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n        const restHeight = noteM.maxLine - noteM.minLine;\n        const space = noteU.minLine - noteL.maxLine;\n        if (restHeight < space) {\n          // center middle voice rest between the upper and lower voices\n          centerRest(noteM, noteU, noteL);\n        } else {\n          xShift = voiceXShift + 3; // shift middle rest right\n          noteM.note.setXShift(xShift);\n        }\n        // format complete\n        return true;\n      }\n    }\n\n    // Special case 2 :: all voices are rests\n    if (noteU.isrest && noteM.isrest && noteL.isrest) {\n      // Shift upper voice rest up\n      shiftRestVertical(noteU, noteM, 1);\n      // Shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n      // format complete\n      return true;\n    }\n\n    // Test if any other rests can be repositioned\n    if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n      // Shift middle voice rest up\n      shiftRestVertical(noteM, noteL, 1);\n    }\n    if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n      // Shift middle voice rest down\n      shiftRestVertical(noteM, noteU, -1);\n    }\n    if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n      // shift upper voice rest up;\n      shiftRestVertical(noteU, noteM, 1);\n    }\n    if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n      // shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n    }\n\n    // If middle voice intersects upper or lower voice\n    if (\n      (!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5) ||\n      (!noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine)\n    ) {\n      xShift = voiceXShift + 3; // shift middle note right\n      noteM.note.setXShift(xShift);\n    }\n\n    return true;\n  }\n\n  static formatByY(notes: StaveNote[], state: ModifierContextState): void {\n    // NOTE: this function does not support more than two voices per stave. Use with care.\n\n    let hasStave = true;\n    for (let i = 0; i < notes.length; i++) {\n      hasStave = hasStave && notes[i].getStave() != undefined;\n    }\n    if (!hasStave) {\n      throw new RuntimeError('NoStave', 'All notes must have a stave.');\n    }\n\n    let xShift = 0;\n\n    for (let i = 0; i < notes.length - 1; i++) {\n      let topNote = notes[i];\n      let bottomNote = notes[i + 1];\n\n      if (topNote.getStemDirection() === Stem.DOWN) {\n        topNote = notes[i + 1];\n        bottomNote = notes[i];\n      }\n\n      const topKeys = topNote.getKeyProps();\n      const bottomKeys = bottomNote.getKeyProps();\n\n      const HALF_NOTEHEAD_HEIGHT = 0.5;\n\n      // `keyProps` and `stave.getYForLine` have different notions of a `line`\n      // so we have to convert the keyProps value by subtracting 5.\n      // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas\n      //\n      // We also extend the y for each note by a half notehead because the\n      // notehead's origin is centered\n      const topStave = topNote.checkStave();\n      const topNoteBottomY = topStave.getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);\n\n      const bottomStave = bottomNote.checkStave();\n      const bottomNoteTopY = bottomStave.getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);\n\n      const areNotesColliding =\n        bottomNoteTopY != undefined && topNoteBottomY != undefined ? bottomNoteTopY - topNoteBottomY < 0 : false;\n\n      if (areNotesColliding) {\n        xShift = topNote.getVoiceShiftWidth() + 2;\n        bottomNote.setXShift(xShift);\n      }\n    }\n\n    state.right_shift += xShift;\n  }\n\n  static postFormat(notes: Note[]): boolean {\n    if (!notes) return false;\n\n    notes.forEach((note) => note.postFormat());\n\n    return true;\n  }\n\n  constructor(noteStruct: StaveNoteStruct) {\n    super(noteStruct);\n    this.setAttribute('type', 'StaveNote');\n\n    // Set default width of ledger lines to 2.0.\n    this.ledgerLineStyle = { lineWidth: 2.0 };\n\n    this.clef = noteStruct.clef ?? 'treble';\n    this.octave_shift = noteStruct.octave_shift ?? 0;\n\n    // Pull note rendering properties.\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    // if true, displace note to right\n    this.displaced = false;\n    this.dot_shiftY = 0;\n    // for displaced ledger lines\n    this.use_default_head_x = false;\n\n    // Drawing\n    this.note_heads = [];\n    this.modifiers = [];\n    this.ledgerLineStyle = {};\n\n    this.render_options = {\n      ...this.render_options,\n      ...{\n        // font size for note heads and rests\n        glyph_font_scale: noteStruct.glyph_font_scale || Flow.DEFAULT_NOTATION_FONT_SCALE,\n        // number of stroke px to the left and right of head\n        stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET,\n      },\n    };\n\n    this.calculateKeyProps();\n    this.buildStem();\n\n    // Set the stem direction\n    if (noteStruct.auto_stem) {\n      this.autoStem();\n    } else {\n      this.setStemDirection(noteStruct.stem_direction ?? Stem.UP);\n    }\n    this.reset();\n    this.buildFlag();\n  }\n\n  reset(): this {\n    super.reset();\n\n    // Save prior noteHead styles & reapply them after making new noteheads.\n    const noteHeadStyles = this.note_heads.map((noteHead) => noteHead.getStyle());\n    this.buildNoteHeads();\n    this.note_heads.forEach((noteHead, index) => {\n      const noteHeadStyle = noteHeadStyles[index];\n      if (noteHeadStyle) noteHead.setStyle(noteHeadStyle);\n    });\n\n    const stave = this.stave;\n    if (stave) {\n      this.note_heads.forEach((head) => head.setStave(stave));\n    }\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  getCategory(): string {\n    return StaveNote.CATEGORY;\n  }\n\n  // Builds a `Stem` for the note\n  buildStem(): this {\n    this.setStem(new Stem({ hide: !!this.isRest() }));\n    return this;\n  }\n\n  // Builds a `NoteHead` for each key in the note\n  buildNoteHeads(): void {\n    this.note_heads = [];\n    const stemDirection = this.getStemDirection();\n    const keys = this.getKeys();\n\n    let lastLine = undefined;\n    let lineDiff = undefined;\n    let displaced = false;\n\n    // Draw notes from bottom to top.\n\n    // For down-stem notes, we draw from top to bottom.\n    let start: number;\n    let end: number;\n    let step: number;\n    if (stemDirection === Stem.UP) {\n      start = 0;\n      end = keys.length;\n      step = 1;\n    } else {\n      start = keys.length - 1;\n      end = -1;\n      step = -1;\n    }\n\n    for (let i = start; i !== end; i += step) {\n      const noteProps = this.keyProps[i];\n      const line = noteProps.line;\n\n      // Keep track of last line with a note head, so that consecutive heads\n      // are correctly displaced.\n      if (lastLine === undefined) {\n        lastLine = line;\n      } else {\n        lineDiff = Math.abs(lastLine - line);\n        if (lineDiff === 0 || lineDiff === 0.5) {\n          displaced = !displaced;\n        } else {\n          displaced = false;\n          this.use_default_head_x = true;\n        }\n      }\n      lastLine = line;\n\n      const notehead = new NoteHead({\n        duration: this.duration,\n        note_type: this.noteType,\n        displaced,\n        stem_direction: stemDirection,\n        custom_glyph_code: noteProps.code,\n        glyph_font_scale: this.render_options.glyph_font_scale,\n        x_shift: noteProps.shift_right,\n        stem_up_x_offset: noteProps.stem_up_x_offset,\n        stem_down_x_offset: noteProps.stem_down_x_offset,\n        line: noteProps.line,\n      });\n\n      this.note_heads[i] = notehead;\n    }\n  }\n\n  // Automatically sets the stem direction based on the keys in the note\n  autoStem(): void {\n    this.setStemDirection(this.calculateOptimalStemDirection());\n  }\n\n  calculateOptimalStemDirection(): number {\n    // Figure out optimal stem direction based on given notes\n    this.minLine = this.keyProps[0].line;\n    this.maxLine = this.keyProps[this.keyProps.length - 1].line;\n\n    const MIDDLE_LINE = 3;\n    const decider = (this.minLine + this.maxLine) / 2;\n    const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n\n    return stemDirection;\n  }\n\n  // Calculates and stores the properties for each key in the note\n  calculateKeyProps(): void {\n    let lastLine: number | undefined;\n    for (let i = 0; i < this.keys.length; ++i) {\n      const key = this.keys[i];\n\n      // All rests use the same position on the line.\n      // if (this.glyph.rest) key = this.glyph.position;\n      if (this.glyph.rest) this.glyph.position = key;\n\n      const options = { octave_shift: this.octave_shift || 0 };\n      const props = Flow.keyProperties(key, this.clef, options);\n\n      if (!props) {\n        throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n      }\n\n      // Override line placement for default rests\n      if (props.key === 'R') {\n        if (this.duration === '1' || this.duration === 'w') {\n          props.line = 4;\n        } else {\n          props.line = 3;\n        }\n      }\n\n      // Calculate displacement of this note\n      const line = props.line;\n      if (lastLine == undefined) {\n        lastLine = line;\n      } else {\n        if (Math.abs(lastLine - line) === 0.5) {\n          this.displaced = true;\n          props.displaced = true;\n\n          // Have to mark the previous note as\n          // displaced as well, for modifier placement\n          if (this.keyProps.length > 0) {\n            this.keyProps[i - 1].displaced = true;\n          }\n        }\n      }\n\n      lastLine = line;\n      this.keyProps.push(props);\n    }\n\n    // Sort the notes from lowest line to highest line\n    lastLine = undefined;\n    this.keyProps.forEach((key) => {\n      if (lastLine && key.line < lastLine) {\n        warn('Unsorted keys in note will be sorted. ' + 'See https://github.com/0xfe/vexflow/issues/104 for details.');\n      }\n      lastLine = key.line;\n    });\n    this.keyProps.sort((a, b) => a.line - b.line);\n  }\n\n  // Get the `BoundingBox` for the entire note\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n\n    const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();\n    const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;\n\n    let minY: number = 0;\n    let maxY: number = 0;\n    const halfLineSpacing = (this.getStave()?.getSpacingBetweenLines() ?? 0) / 2;\n    const lineSpacing = halfLineSpacing * 2;\n\n    if (this.isRest()) {\n      const y = this.ys[0];\n      const frac = Flow.durationToFraction(this.duration);\n      if (frac.equals(1) || frac.equals(2)) {\n        minY = y - halfLineSpacing;\n        maxY = y + halfLineSpacing;\n      } else {\n        minY = y - this.glyph.line_above * lineSpacing;\n        maxY = y + this.glyph.line_below * lineSpacing;\n      }\n    } else if (this.glyph.stem) {\n      const ys = this.getStemExtents();\n      ys.baseY += halfLineSpacing * this.getStemDirection();\n      minY = Math.min(ys.topY, ys.baseY);\n      maxY = Math.max(ys.topY, ys.baseY);\n    } else {\n      minY = 0;\n      maxY = 0;\n\n      for (let i = 0; i < this.ys.length; ++i) {\n        const yy = this.ys[i];\n        if (i === 0) {\n          minY = yy;\n          maxY = yy;\n        } else {\n          minY = Math.min(yy, minY);\n          maxY = Math.max(yy, maxY);\n        }\n      }\n      minY -= halfLineSpacing;\n      maxY += halfLineSpacing;\n    }\n\n    return new BoundingBox(x, minY, w, maxY - minY);\n  }\n\n  // Gets the line number of the bottom note in the chord.\n  // If `isTopNote` is `true` then get the top note's line number instead\n  getLineNumber(isTopNote?: boolean): number {\n    if (!this.keyProps.length) {\n      throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n    }\n\n    let resultLine = this.keyProps[0].line;\n\n    // No precondition assumed for sortedness of keyProps array\n    for (let i = 0; i < this.keyProps.length; i++) {\n      const thisLine = this.keyProps[i].line;\n      if (isTopNote) {\n        if (thisLine > resultLine) resultLine = thisLine;\n      } else {\n        if (thisLine < resultLine) resultLine = thisLine;\n      }\n    }\n\n    return resultLine;\n  }\n\n  /**\n   * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n   */\n  isRest(): boolean {\n    return this.glyph.rest;\n  }\n\n  // Determine if the current note is a chord\n  isChord(): boolean {\n    return !this.isRest() && this.keys.length > 1;\n  }\n\n  // Determine if the `StaveNote` has a stem\n  hasStem(): boolean {\n    return this.glyph.stem;\n  }\n\n  hasFlag(): boolean {\n    return super.hasFlag() && !this.isRest();\n  }\n\n  getStemX(): number {\n    if (this.noteType === 'r') {\n      return this.getCenterGlyphX();\n    } else {\n      // We adjust the origin of the stem because we want the stem left-aligned\n      // with the notehead if stemmed-down, and right-aligned if stemmed-up\n      return super.getStemX() + (this.stem_direction ? Stem.WIDTH / (2 * -this.stem_direction) : 0);\n    }\n  }\n\n  // Get the `y` coordinate for text placed on the top/bottom of a\n  // note at a desired `text_line`\n  getYForTopText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.min(\n      this.checkStave().getYForTopText(textLine),\n      extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n    );\n  }\n  getYForBottomText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.max(\n      this.checkStave().getYForTopText(textLine),\n      extents.baseY + this.render_options.annotation_spacing * textLine\n    );\n  }\n\n  // Sets the current note to the provided `stave`. This applies\n  // `y` values to the `NoteHeads`.\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n\n    const ys = this.note_heads.map((notehead) => {\n      notehead.setStave(stave);\n      return notehead.getY();\n    });\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      this.stem.setYBounds(y_top, y_bottom);\n    }\n\n    return this;\n  }\n\n  // Check if note is shifted to the right\n  isDisplaced(): boolean {\n    return this.displaced;\n  }\n\n  // Sets whether shift note to the right. `displaced` is a `boolean`\n  setNoteDisplaced(displaced: boolean): this {\n    this.displaced = displaced;\n    return this;\n  }\n\n  // Get the starting `x` coordinate for a `StaveTie`\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;\n    if (this.modifierContext) tieStartX += this.modifierContext.getRightShift();\n    return tieStartX;\n  }\n\n  // Get the ending `x` coordinate for a `StaveTie`\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    tieEndX += this.x_shift - this.leftDisplacedHeadPx;\n    return tieEndX;\n  }\n\n  // Get the stave line on which to place a rest\n  getLineForRest(): number {\n    let restLine = this.keyProps[0].line;\n    if (this.keyProps.length > 1) {\n      const lastLine = this.keyProps[this.keyProps.length - 1].line;\n      const top = Math.max(restLine, lastLine);\n      const bot = Math.min(restLine, lastLine);\n      restLine = midLine(top, bot);\n    }\n\n    return restLine;\n  }\n\n  // Get the default `x` and `y` coordinates for the provided `position`\n  // and key `index`\n  getModifierStartXY(\n    position: number,\n    index: number,\n    options: { forceFlagRight?: boolean } = {}\n  ): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n    let x = 0;\n    if (position === LEFT) {\n      // FIXME: Left modifier padding, move to font file\n      x = -1 * 2;\n    } else if (position === RIGHT) {\n      // FIXME: Right modifier padding, move to font file\n      x = this.getGlyphWidth() + this.x_shift + 2;\n\n      if (\n        this.stem_direction === Stem.UP &&\n        this.hasFlag() &&\n        (options.forceFlagRight || isInnerNoteIndex(this, index))\n      ) {\n        x += this?.flag?.getMetrics().width ?? 0;\n      }\n    } else if (position === BELOW || position === ABOVE) {\n      x = this.getGlyphWidth() / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Sets the style of the complete StaveNote, including all keys\n  // and the stem.\n  setStyle(style: ElementStyle): this {\n    super.setStyle(style);\n    this.note_heads.forEach((notehead) => notehead.setStyle(style));\n    this.stem?.setStyle(style);\n    return this;\n  }\n\n  setStemStyle(style: ElementStyle): this {\n    const stem = this.getStem();\n    stem?.setStyle(style);\n    return this;\n  }\n  getStemStyle(): ElementStyle | undefined {\n    return this.stem?.getStyle();\n  }\n\n  setLedgerLineStyle(style: ElementStyle): void {\n    this.ledgerLineStyle = style;\n  }\n\n  getLedgerLineStyle(): ElementStyle {\n    return this.ledgerLineStyle;\n  }\n\n  setFlagStyle(style: ElementStyle): void {\n    this.flagStyle = style;\n  }\n  getFlagStyle(): ElementStyle | undefined {\n    return this.flagStyle;\n  }\n\n  // Sets the notehead at `index` to the provided coloring `style`.\n  //\n  // `style` is an `object` with the following properties: `shadowColor`,\n  // `shadowBlur`, `fillStyle`, `strokeStyle`\n  setKeyStyle(index: number, style: ElementStyle): this {\n    this.note_heads[index].setStyle(style);\n    return this;\n  }\n\n  setKeyLine(index: number, line: number): this {\n    this.keyProps[index].line = line;\n    this.reset();\n    return this;\n  }\n\n  getKeyLine(index: number): number {\n    return this.keyProps[index].line;\n  }\n\n  // Helper function to add an accidental to a key\n  addAccidental(index: number, accidental: Modifier): this {\n    return this.addModifier(accidental, index);\n  }\n\n  // Helper function to add an articulation to a key\n  addArticulation(index: number, articulation: Modifier): this {\n    return this.addModifier(articulation, index);\n  }\n\n  // Helper function to add an annotation to a key\n  addAnnotation(index: number, annotation: Modifier): this {\n    return this.addModifier(annotation, index);\n  }\n\n  // Helper function to add a dot on a specific key\n  addDot(index: number): this {\n    const dot = new Dot();\n    dot.setDotShiftY(this.glyph.dot_shiftY);\n    this.dots++;\n    return this.addModifier(dot, index);\n  }\n\n  // Convenience method to add dot to all keys in note\n  addDotToAll(): this {\n    for (let i = 0; i < this.keys.length; ++i) {\n      this.addDot(i);\n    }\n    return this;\n  }\n\n  // Get all accidentals in the `ModifierContext`\n  getAccidentals(): Accidental[] {\n    return this.checkModifierContext().getMembers('accidentals') as Accidental[];\n  }\n\n  // Get all dots in the `ModifierContext`\n  getDots(): Dot[] {\n    return this.checkModifierContext().getMembers('dots') as Dot[];\n  }\n\n  // Get the width of the note if it is displaced. Used for `Voice`\n  // formatting\n  getVoiceShiftWidth(): number {\n    // TODO: may need to accomodate for dot here.\n    return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n  }\n\n  // Calculates and sets the extra pixels to the left or right\n  // if the note is displaced.\n  calcNoteDisplacements(): void {\n    this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === Stem.DOWN ? this.getGlyphWidth() : 0);\n\n    // For upstems with flags, the extra space is unnecessary, since it's taken\n    // up by the flag.\n    this.setRightDisplacedHeadPx(\n      !this.hasFlag() && this.displaced && this.stem_direction === Stem.UP ? this.getGlyphWidth() : 0\n    );\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    let noteHeadPadding = 0;\n    if (this.preFormatted) return;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      // If there are no modifiers on this note, make sure there is adequate padding\n      // between the notes.\n      if (this.modifierContext.getWidth() === 0) {\n        noteHeadPadding = StaveNote.minNoteheadPadding;\n      }\n    }\n\n    let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n\n    // For upward flagged notes, the width of the flag needs to be added\n    if (this.shouldDrawFlag() && this.stem_direction === Stem.UP) {\n      width += this.getGlyphWidth();\n      // TODO: Add flag width as a separate metric\n    }\n    this.setWidth(width);\n    this.setPreFormatted(true);\n  }\n\n  /**\n   * @typedef {Object} noteHeadBounds\n   * @property {number} y_top the highest notehead bound\n   * @property {number} y_bottom the lowest notehead bound\n   * @property {number|Null} displaced_x the starting x for displaced noteheads\n   * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads\n   * @property {number} highest_line the highest notehead line in traditional music line\n   *  numbering (bottom line = 1, top line = 5)\n   * @property {number} lowest_line the lowest notehead line\n   * @property {number|false} highest_displaced_line the highest staff line number\n   *   for a displaced notehead\n   * @property {number|false} lowest_displaced_line\n   * @property {number} highest_non_displaced_line\n   * @property {number} lowest_non_displaced_line\n   */\n\n  /**\n   * Get the staff line and y value for the highest & lowest noteheads\n   * @returns {noteHeadBounds}\n   */\n  getNoteHeadBounds(): StaveNoteHeadBounds {\n    // Top and bottom Y values for stem.\n    let yTop: number = +Infinity;\n    let yBottom: number = -Infinity;\n    let nonDisplacedX: number | undefined;\n    let displacedX: number | undefined;\n\n    let highestLine = this.checkStave().getNumLines();\n    let lowestLine = 1;\n    let highestDisplacedLine: number | undefined;\n    let lowestDisplacedLine: number | undefined;\n    let highestNonDisplacedLine = highestLine;\n    let lowestNonDisplacedLine = lowestLine;\n\n    this.note_heads.forEach((notehead) => {\n      const line: number = notehead.getLine();\n      const y = notehead.getY();\n\n      yTop = Math.min(y, yTop);\n      yBottom = Math.max(y, yBottom);\n\n      if (displacedX === undefined && notehead.isDisplaced()) {\n        displacedX = notehead.getAbsoluteX();\n      }\n\n      if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n        nonDisplacedX = notehead.getAbsoluteX();\n      }\n\n      highestLine = Math.max(line, highestLine);\n      lowestLine = Math.min(line, lowestLine);\n\n      if (notehead.isDisplaced()) {\n        highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n        lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n      } else {\n        highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n        lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n      }\n    }, this);\n\n    return {\n      y_top: yTop,\n      y_bottom: yBottom,\n      displaced_x: displacedX,\n      non_displaced_x: nonDisplacedX,\n      highest_line: highestLine,\n      lowest_line: lowestLine,\n      highest_displaced_line: highestDisplacedLine,\n      lowest_displaced_line: lowestDisplacedLine,\n      highest_non_displaced_line: highestNonDisplacedLine,\n      lowest_non_displaced_line: lowestNonDisplacedLine,\n    };\n  }\n\n  // Get the starting `x` coordinate for the noteheads\n  getNoteHeadBeginX(): number {\n    return this.getAbsoluteX() + this.x_shift;\n  }\n\n  // Get the ending `x` coordinate for the noteheads\n  getNoteHeadEndX(): number {\n    const xBegin = this.getNoteHeadBeginX();\n    return xBegin + this.getGlyphWidth();\n  }\n\n  // Draw the ledger lines between the stave and the highest/lowest keys\n  drawLedgerLines(): void {\n    const stave = this.checkStave();\n    const {\n      glyph,\n      render_options: { stroke_px },\n    } = this;\n    const ctx = this.checkContext();\n    const width = glyph.getWidth() + stroke_px * 2;\n    const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - Stem.WIDTH / 2;\n\n    if (this.isRest()) return;\n    if (!ctx) {\n      throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const {\n      highest_line,\n      lowest_line,\n      highest_displaced_line,\n      highest_non_displaced_line,\n      lowest_displaced_line,\n      lowest_non_displaced_line,\n      displaced_x,\n      non_displaced_x,\n    } = this.getNoteHeadBounds();\n\n    const min_x = Math.min(displaced_x ?? 0, non_displaced_x ?? 0);\n\n    const drawLedgerLine = (y: number, normal: boolean, displaced: boolean) => {\n      let x;\n      if (displaced && normal) x = min_x - stroke_px;\n      else if (normal) x = (non_displaced_x ?? 0) - stroke_px;\n      else x = (displaced_x ?? 0) - stroke_px;\n      const ledgerWidth = normal && displaced ? doubleWidth : width;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + ledgerWidth, y);\n      ctx.stroke();\n    };\n\n    const style = { ...(stave.getStyle() || {}), ...(this.getLedgerLineStyle() || {}) };\n    if (typeof style.lineWidth === 'undefined') {\n      style.lineWidth = Flow.STAVE_LINE_THICKNESS * 2;\n    } else {\n      style.lineWidth *= 2;\n    }\n    this.applyStyle(ctx, style);\n\n    // Draw ledger lines below the staff:\n    for (let line = 6; line <= highest_line; ++line) {\n      const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;\n      const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    // Draw ledger lines above the staff:\n    for (let line = 0; line >= lowest_line; --line) {\n      const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;\n      const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    this.restoreStyle(ctx, style);\n  }\n\n  // Draw all key modifiers\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      const index = modifier.checkIndex();\n      const notehead = this.note_heads[index];\n      const noteheadStyle = notehead.getStyle();\n      notehead.applyStyle(ctx, noteheadStyle);\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n      notehead.restoreStyle(ctx, noteheadStyle);\n    }\n    ctx.closeGroup();\n  }\n\n  shouldDrawFlag(): boolean {\n    const hasStem = this.stem !== undefined;\n    const hasFlag = this.glyph.flag as boolean; // specified in tables.js\n    const hasNoBeam = this.beam === undefined;\n    return hasStem && hasFlag && hasNoBeam;\n  }\n\n  // Draw the flag for the note\n  drawFlag(): void {\n    const ctx = this.checkContext();\n    if (!ctx) {\n      throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    if (this.shouldDrawFlag()) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      // eslint-disable-next-line\n      const noteStemHeight = this.stem!.getHeight();\n      const flagX = this.getStemX();\n      // FIXME: What's with the magic +/- 2\n      // ANSWER: a corner of the note stem pokes out beyond the tip of the flag.\n      // The extra +/- 2 pushes the flag glyph outward so it covers the stem entirely.\n      // Alternatively, we could shorten the stem.\n      const flagY =\n        this.getStemDirection() === Stem.DOWN\n          ? // Down stems are below the note head and have flags on the right.\n            y_top - noteStemHeight + 2\n          : // Up stems are above the note head and have flags on the right.\n            y_bottom - noteStemHeight - 2;\n\n      // Draw the Flag\n      ctx.openGroup('flag', undefined, { pointerBBox: true });\n      this.applyStyle(ctx, this.getFlagStyle());\n      this.flag?.render(ctx, flagX, flagY);\n      this.restoreStyle(ctx, this.getFlagStyle());\n      ctx.closeGroup();\n    }\n  }\n\n  // Draw the NoteHeads\n  drawNoteHeads(): void {\n    const ctx = this.checkContext();\n    this.note_heads.forEach((notehead) => {\n      ctx.openGroup('notehead', undefined, { pointerBBox: true });\n      notehead.setContext(ctx).draw();\n      ctx.closeGroup();\n    });\n  }\n\n  drawStem(stemOptions?: StemOptions): void {\n    // GCR TODO: I can't find any context in which this is called with the stemStruct\n    // argument in the codebase or tests. Nor can I find a case where super.drawStem\n    // is called at all. Perhaps these should be removed?\n    const ctx = this.checkContext();\n\n    if (stemOptions) {\n      this.setStem(new Stem(stemOptions));\n    }\n\n    // If we will render a flag, we shorten the stem so that the tip\n    // does not poke through the flag.\n    if (this.shouldDrawFlag() && this.stem) {\n      this.stem.adjustHeightForFlag();\n    }\n\n    ctx.openGroup('stem', undefined, { pointerBBox: true });\n    this.stem?.setContext(ctx).draw();\n    ctx.closeGroup();\n  }\n\n  /**\n   * Override stemmablenote stem extension to adjust for distance from middle line.\n   */\n  getStemExtension(): number {\n    const super_stem_extension = super.getStemExtension();\n    if (!this.glyph.stem) {\n      return super_stem_extension;\n    }\n\n    const stem_direction = this.getStemDirection();\n    if (stem_direction !== this.calculateOptimalStemDirection()) {\n      return super_stem_extension; // no adjustment for manually set stem direction.\n    }\n    let mid_line_distance;\n    const MIDDLE_LINE = 3;\n    if (stem_direction === Stem.UP) {\n      // Note that the use of maxLine here instead of minLine might\n      // seem counterintuitive, but in the case of (say) treble clef\n      // chord(F2, E4) stem up, we do not want to extend the stem because\n      // of F2, when a normal octave-length stem above E4 is fine.\n      //\n      // maxLine and minLine are set in calculateOptimalStemDirection() so\n      // will be known.\n      mid_line_distance = MIDDLE_LINE - this.maxLine;\n    } else {\n      mid_line_distance = this.minLine - MIDDLE_LINE;\n    }\n\n    // how many lines more than an octave is the relevant notehead?\n    const lines_over_octave_from_mid_line = mid_line_distance - 3.5;\n    if (lines_over_octave_from_mid_line <= 0) {\n      return super_stem_extension;\n    }\n    const stave = this.getStave();\n    let spacing_between_lines = 10;\n    if (stave != undefined) {\n      spacing_between_lines = stave.getSpacingBetweenLines();\n    }\n    return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;\n  }\n\n  // Draws all the `StaveNote` parts. This is the main drawing method.\n  draw(): void {\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    const ctx = this.checkContext();\n    const xBegin = this.getNoteHeadBeginX();\n    const shouldRenderStem = this.hasStem() && !this.beam;\n\n    // Format note head x positions\n    this.note_heads.forEach((notehead) => notehead.setX(xBegin));\n\n    // Format stem x positions\n    const stemX = this.getStemX();\n    this.stem?.setNoteHeadXBounds(stemX, stemX);\n\n    L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n\n    // Apply the overall style -- may be contradicted by local settings:\n    this.applyStyle();\n    this.setAttribute('el', ctx.openGroup('stavenote', this.getAttribute('id')));\n    this.drawLedgerLines();\n    ctx.openGroup('note', undefined, { pointerBBox: true });\n    if (shouldRenderStem) this.drawStem();\n    this.drawNoteHeads();\n    this.drawFlag();\n    ctx.closeGroup();\n    this.drawModifiers();\n    ctx.closeGroup();\n    this.restoreStyle();\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { RuntimeError } from './util';\nimport { StaveNote, StaveNoteStruct } from './stavenote';\nimport { Stem } from './stem';\nimport { Flow } from './flow';\n\nexport interface GraceNoteStruct extends StaveNoteStruct {\n  slash: boolean;\n}\nexport class GraceNote extends StaveNote {\n  protected slash: boolean;\n  protected slur: boolean;\n\n  static get CATEGORY(): string {\n    return 'gracenotes';\n  }\n\n  static get LEDGER_LINE_OFFSET(): number {\n    return 2;\n  }\n\n  static get SCALE(): number {\n    return 0.66;\n  }\n\n  constructor(note_struct: GraceNoteStruct) {\n    super({\n      ...{\n        glyph_font_scale: Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,\n        stroke_px: GraceNote.LEDGER_LINE_OFFSET,\n      },\n      ...note_struct,\n    });\n    this.setAttribute('type', 'GraceNote');\n\n    this.slash = note_struct.slash;\n    this.slur = true;\n\n    this.buildNoteHeads();\n\n    this.width = 3;\n  }\n\n  getStemExtension(): number {\n    if (this.stem_extension_override) {\n      return this.stem_extension_override;\n    }\n\n    const glyph = this.getGlyph();\n    if (glyph) {\n      let ret = super.getStemExtension();\n      if (glyph.stem) {\n        const staveNoteScale = this.getStaveNoteScale();\n        ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n      }\n      return ret;\n    }\n\n    return 0;\n  }\n\n  getCategory(): string {\n    return GraceNote.CATEGORY;\n  }\n\n  // FIXME: move this to more basic class.\n  getStaveNoteScale(): number {\n    return this.render_options.glyph_font_scale / Flow.DEFAULT_NOTATION_FONT_SCALE;\n  }\n\n  draw(): void {\n    super.draw();\n    this.setRendered();\n    const stem = this.stem;\n    if (this.slash && stem) {\n      const staveNoteScale = this.getStaveNoteScale();\n\n      // some magic numbers are based on the staveNoteScale 0.66.\n      const offsetScale = staveNoteScale / 0.66;\n      let slashBBox = undefined;\n      const beam = this.beam;\n      if (beam) {\n        // FIXME: should render slash after beam?\n        if (!beam.postFormatted) {\n          beam.postFormat();\n        }\n\n        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n          stem: 6 * offsetScale,\n          beam: 5 * offsetScale,\n        });\n      } else {\n        const stem_direction = this.getStemDirection();\n        const noteHeadBounds = this.getNoteHeadBounds();\n        const noteStemHeight = stem.getHeight();\n        let x = this.getAbsoluteX();\n        let y =\n          stem_direction === Stem.DOWN\n            ? noteHeadBounds.y_top - noteStemHeight\n            : noteHeadBounds.y_bottom - noteStemHeight;\n\n        const defaultStemExtention =\n          stem_direction === Stem.DOWN ? this.glyph.stem_down_extension : this.glyph.stem_up_extension;\n\n        let defaultOffsetY = Flow.STEM_HEIGHT;\n        defaultOffsetY -= defaultOffsetY / 2.8;\n        defaultOffsetY += defaultStemExtention;\n        y += defaultOffsetY * staveNoteScale * stem_direction;\n\n        const offsets =\n          stem_direction === Stem.UP\n            ? {\n                x1: 1,\n                y1: 0,\n                x2: 13,\n                y2: -9,\n              }\n            : {\n                x1: -4,\n                y1: 1,\n                x2: 13,\n                y2: 9,\n              };\n\n        x += offsets.x1 * offsetScale;\n        y += offsets.y1 * offsetScale;\n        slashBBox = {\n          x1: x,\n          y1: y,\n          x2: x + offsets.x2 * offsetScale,\n          y2: y + offsets.y2 * offsetScale,\n        };\n      }\n\n      // FIXME: avoide staff lines, leadger lines or others.\n\n      const ctx = this.checkContext();\n      ctx.save();\n      ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n      ctx.beginPath();\n      ctx.moveTo(slashBBox.x1, slashBBox.y1);\n      ctx.lineTo(slashBBox.x2, slashBBox.y2);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  calcBeamedNotesSlashBBox(\n    slashStemOffset: number,\n    slashBeamOffset: number,\n    protrusions: { beam: number; stem: number }\n  ): Record<string, number> {\n    const beam = this.beam;\n    if (!beam) throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n\n    const beam_slope = beam.slope;\n    const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n    const scaleX = isBeamEndNote ? -1 : 1;\n    const beam_angle = Math.atan(beam_slope * scaleX);\n\n    // slash line intersecting point on beam.\n    const iPointOnBeam = {\n      dx: Math.cos(beam_angle) * slashBeamOffset,\n      dy: Math.sin(beam_angle) * slashBeamOffset,\n    };\n\n    slashStemOffset *= this.getStemDirection();\n    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n\n    const stemX = this.getStemX();\n    const stem0X = beam.notes[0].getStemX();\n    const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n\n    const ret = {\n      x1: stemX - protrusion_stem_dx,\n      y1: stemY + slashStemOffset - protrusion_stem_dy,\n      x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n    };\n    return ret;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Ron B. Yeh\n// MIT License\n\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { StemmableNote } from './stemmablenote';\nimport { TabNote } from './tabnote';\n\n// Helper functions for checking an object's type, via `instanceof` and `obj.getCategory()`.\nexport const isNote = (obj: unknown): obj is Note => isCategory(obj, Note);\nexport const isStemmableNote = (obj: unknown): obj is StemmableNote => isCategory(obj, StemmableNote);\nexport const isStaveNote = (obj: unknown): obj is StaveNote => isCategory(obj, StaveNote);\nexport const isTabNote = (obj: unknown): obj is TabNote => isCategory(obj, TabNote);\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/ban-types */\n\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object is an instance of the provided `cls`.\n * @param cls a JavaScript class, such as `StaveNote`. `cls` is a constructor function, and it has a `prototype` property, and\n *            optionally a `CATEGORY` property (used in VexFlow for flexible type checking).\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `.getCategory()`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` is an instance of `ClassName`, or has a `.getCategory()` that matches `ClassName.CATEGORY`.\n */\nexport function isCategory<T>(\n  obj: any,\n  cls: Function & { prototype: T; CATEGORY?: string },\n  checkAncestors: boolean = true\n): obj is T {\n  // obj is NOT an instance of cls if it is: undefined, a number, a primitive string, or null.\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n  if (obj instanceof cls || obj.constructor === cls) {\n    return true;\n  }\n\n  // If instanceof fails, fall back to checking if the object's .getCategory() matches the class's .CATEGORY property.\n  const categoryToMatch = cls.CATEGORY;\n  if (categoryToMatch === undefined) {\n    return false;\n  }\n\n  if (checkAncestors) {\n    // Walk up the prototype chain to look for a matching .getCategory().\n    while (obj !== null) {\n      if ('getCategory' in obj && obj.getCategory() === categoryToMatch) {\n        return true;\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n    return false;\n  } else {\n    // Do not walk up the prototype chain. Just check this particular object's .getCategory().\n    return 'getCategory' in obj && obj.getCategory() === categoryToMatch;\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements dot modifiers for notes.\n\nimport { RuntimeError } from './util';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { TabNote } from './tabnote';\nimport { ModifierContextState } from './modifiercontext';\nimport { GraceNote } from './gracenote';\nimport { isStaveNote, isTabNote } from './typeguard';\n\nexport class Dot extends Modifier {\n  protected radius: number;\n  protected dot_shiftY: number;\n\n  static get CATEGORY(): string {\n    return 'dots';\n  }\n\n  // Arrange dots inside a ModifierContext.\n  static format(dots: Dot[], state: ModifierContextState): boolean {\n    const right_shift = state.right_shift;\n    const dot_spacing = 1;\n\n    if (!dots || dots.length === 0) return false;\n\n    const dot_list = [];\n    const max_shift_map: Record<string, number> = {};\n    for (let i = 0; i < dots.length; ++i) {\n      const dot = dots[i];\n      const note = dot.getNote();\n\n      let props;\n      let shift;\n\n      if (isStaveNote(note)) {\n        const index = dot.checkIndex();\n        props = note.getKeyProps()[index];\n        shift = note.getRightDisplacedHeadPx();\n      } else if (isTabNote(note)) {\n        props = { line: 0.5 }; // Shim key props for dot placement\n        shift = 0;\n      } else {\n        // note object is not StaveNote or TabNote.\n        throw new RuntimeError('Internal', 'Unexpected instance.');\n      }\n\n      const note_id = note.getAttribute('id');\n      dot_list.push({ line: props.line, note, note_id, dot });\n      max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\n    }\n\n    // Sort dots by line number.\n    dot_list.sort((a, b) => b.line - a.line);\n\n    let dot_shift = right_shift;\n    let x_width = 0;\n    let last_line = null;\n    let last_note = null;\n    let prev_dotted_space = null;\n    let half_shiftY = 0;\n\n    for (let i = 0; i < dot_list.length; ++i) {\n      const { dot, note, note_id, line } = dot_list[i];\n\n      // Reset the position of the dot every line.\n      if (line !== last_line || note !== last_note) {\n        dot_shift = max_shift_map[note_id];\n      }\n\n      if (!note.isRest() && line !== last_line) {\n        if (Math.abs(line % 1) === 0.5) {\n          // note is on a space, so no dot shift\n          half_shiftY = 0;\n        } else {\n          // note is on a line, so shift dot to space above the line\n          half_shiftY = 0.5;\n          if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {\n            // previous note on a space, so shift dot to space below the line\n            half_shiftY = -0.5;\n          } else if (line + half_shiftY === prev_dotted_space) {\n            // previous space is dotted, so shift dot to space below the line\n            half_shiftY = -0.5;\n          }\n        }\n      }\n\n      // convert half_shiftY to a multiplier for dots.draw()\n      if (note.isRest()) {\n        dot.dot_shiftY += -half_shiftY;\n      } else {\n        dot.dot_shiftY = -half_shiftY;\n      }\n      prev_dotted_space = line + half_shiftY;\n\n      dot.setXShift(dot_shift);\n      dot_shift += dot.getWidth() + dot_spacing; // spacing\n      x_width = dot_shift > x_width ? dot_shift : x_width;\n      last_line = line;\n      last_note = note;\n    }\n\n    // Update state.\n    state.right_shift += x_width;\n    return true;\n  }\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super();\n    this.setAttribute('type', 'Dot');\n\n    this.position = Modifier.Position.RIGHT;\n\n    this.radius = 2;\n    this.setWidth(5);\n    this.dot_shiftY = 0;\n  }\n\n  getCategory(): string {\n    return Dot.CATEGORY;\n  }\n\n  setNote(note: Note): this {\n    this.note = note;\n    if (note.getCategory() === GraceNote.CATEGORY) {\n      this.radius *= 0.5;\n      this.setWidth(3);\n    }\n    return this;\n  }\n\n  setDotShiftY(y: number): this {\n    this.dot_shiftY = y;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const stave = note.checkStave();\n    const lineSpace = stave.getOptions().spacing_between_lines_px;\n\n    const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n\n    // Set the starting y coordinate to the base of the stem for TabNotes\n    if (note.getCategory() === TabNote.CATEGORY) {\n      start.y = note.getStemExtents().baseY;\n    }\n\n    const x = start.x + this.x_shift + this.width - this.radius;\n    const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\n\n    ctx.beginPath();\n    ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\n\nimport { Dot } from './dot';\nimport { Flow } from './flow';\nimport { Glyph, GlyphProps } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stave } from './stave';\nimport { StaveNoteStruct } from './stavenote';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { defined, RuntimeError } from './util';\n\nexport interface TabNotePosition {\n  // For example, on a six stringed instrument, `str` ranges from 1 to 6.\n  str: number;\n\n  // fret: 'X' indicates an unused/muted string.\n  // fret: 3 indicates the third fret.\n  fret: number | string;\n}\n\nexport interface TabNoteStruct extends StaveNoteStruct {\n  positions: TabNotePosition[];\n}\n// Gets the unused strings grouped together if consecutive.\n//\n// Parameters:\n// * num_lines - The number of lines\n// * strings_used - An array of numbers representing which strings have fret positions\nfunction getUnusedStringGroups(num_lines: number, strings_used: number[]) {\n  const stem_through = [];\n  let group = [];\n  for (let string = 1; string <= num_lines; string++) {\n    const is_used = strings_used.indexOf(string) > -1;\n\n    if (!is_used) {\n      group.push(string);\n    } else {\n      stem_through.push(group);\n      group = [];\n    }\n  }\n  if (group.length > 0) stem_through.push(group);\n\n  return stem_through;\n}\n\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stem_Y - The `y` coordinate the stem is located on\n// * unused_strings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stem_direction - The direction of the stem\nfunction getPartialStemLines(stem_y: number, unused_strings: number[][], stave: Stave, stem_direction: number) {\n  const up_stem = stem_direction !== 1;\n  const down_stem = stem_direction !== -1;\n\n  const line_spacing = stave.getSpacingBetweenLines();\n  const total_lines = stave.getNumLines();\n\n  const stem_lines: number[][] = [];\n\n  unused_strings.forEach((strings) => {\n    const containsLastString = strings.indexOf(total_lines) > -1;\n    const containsFirstString = strings.indexOf(1) > -1;\n\n    if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {\n      return;\n    }\n\n    // If there's only one string in the group, push a duplicate value.\n    // We do this because we need 2 strings to convert into upper/lower y\n    // values.\n    if (strings.length === 1) {\n      strings.push(strings[0]);\n    }\n\n    const line_ys: number[] = [];\n    // Iterate through each group string and store it's y position\n    strings.forEach((string, index, strings) => {\n      const isTopBound = string === 1;\n      const isBottomBound = string === total_lines;\n\n      // Get the y value for the appropriate staff line,\n      // we adjust for a 0 index array, since string numbers are index 1\n      let y = stave.getYForLine(string - 1);\n\n      // Unless the string is the first or last, add padding to each side\n      // of the line\n      if (index === 0 && !isTopBound) {\n        y -= line_spacing / 2 - 1;\n      } else if (index === strings.length - 1 && !isBottomBound) {\n        y += line_spacing / 2 - 1;\n      }\n\n      // Store the y value\n      line_ys.push(y);\n\n      // Store a subsequent y value connecting this group to the main\n      // stem above/below the stave if it's the top/bottom string\n      if (stem_direction === 1 && isTopBound) {\n        line_ys.push(stem_y - 2);\n      } else if (stem_direction === -1 && isBottomBound) {\n        line_ys.push(stem_y + 2);\n      }\n    });\n\n    // Add the sorted y values to the\n    stem_lines.push(line_ys.sort((a, b) => a - b));\n  });\n\n  return stem_lines;\n}\n\nexport class TabNote extends StemmableNote {\n  protected ghost: boolean;\n  protected glyphs: GlyphProps[] = [];\n  protected positions: TabNotePosition[];\n\n  static get CATEGORY(): string {\n    return 'tabnotes';\n  }\n\n  // Initialize the TabNote with a `tab_struct` full of properties\n  // and whether to `draw_stem` when rendering the note\n  constructor(tab_struct: TabNoteStruct, draw_stem?: boolean) {\n    super(tab_struct);\n    this.setAttribute('type', 'TabNote');\n\n    this.ghost = false; // Renders parenthesis around notes\n\n    // Note properties\n    // The fret positions in the note. An array of `{ str: X, fret: X }`\n    this.positions = tab_struct.positions;\n\n    // Render Options\n    this.render_options = {\n      ...this.render_options,\n      ...{\n        // font size for note heads and rests\n        glyph_font_scale: Flow.DEFAULT_TABLATURE_FONT_SCALE,\n        // Flag to draw a stem\n        draw_stem,\n        // Flag to draw dot modifiers\n        draw_dots: draw_stem,\n        // Flag to extend the main stem through the stave and fret positions\n        draw_stem_through_stave: false,\n        // vertical shift from stave line\n        y_shift: 0,\n        // normal glyph scale\n        scale: 1.0,\n        // default tablature font\n        font: '10pt Arial',\n      },\n    };\n\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    this.buildStem();\n\n    if (tab_struct.stem_direction) {\n      this.setStemDirection(tab_struct.stem_direction);\n    } else {\n      this.setStemDirection(Stem.UP);\n    }\n\n    // Renders parenthesis around notes\n    this.ghost = false;\n    this.updateWidth();\n  }\n\n  reset(): this {\n    if (this.stave) this.setStave(this.stave);\n    return this;\n  }\n\n  // The ModifierContext category\n  getCategory(): string {\n    return TabNote.CATEGORY;\n  }\n\n  // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n  // Often used for indicating frets that are being bent to\n  setGhost(ghost: boolean): this {\n    this.ghost = ghost;\n    this.updateWidth();\n    return this;\n  }\n\n  // Determine if the note has a stem\n  hasStem(): boolean {\n    if (this.render_options.draw_stem) return true;\n    return false;\n  }\n\n  // Get the default stem extension for the note\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Add a dot to the note\n  addDot(): this {\n    const dot = new Dot();\n    this.dots += 1;\n    return this.addModifier(dot, 0);\n  }\n\n  // Calculate and store the width of the note\n  updateWidth(): void {\n    this.glyphs = [];\n    this.width = 0;\n    for (let i = 0; i < this.positions.length; ++i) {\n      let fret = this.positions[i].fret;\n      if (this.ghost) fret = '(' + fret + ')';\n      const glyph = Flow.tabToGlyph(fret.toString(), this.render_options.scale);\n      this.glyphs.push(glyph as GlyphProps);\n      this.width = Math.max(glyph.getWidth(), this.width);\n    }\n    // For some reason we associate a notehead glyph with a TabNote, and this\n    // glyph is used for certain width calculations. Of course, this is totally\n    // incorrect since a notehead is a poor approximation for the dimensions of\n    // a fret number which can have multiple digits. As a result, we must\n    // overwrite getWidth() to return the correct width\n    this.glyph.getWidth = () => this.width;\n  }\n\n  // Set the `stave` to the note\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    const ctx = stave.getContext();\n    this.setContext(ctx);\n\n    // Calculate the fret number width based on font used\n    if (ctx) {\n      this.width = 0;\n      for (let i = 0; i < this.glyphs.length; ++i) {\n        const glyph = this.glyphs[i];\n        const text = '' + glyph.text;\n        if (text.toUpperCase() !== 'X') {\n          ctx.save();\n          ctx.setRawFont(this.render_options.font as string);\n          glyph.width = ctx.measureText(text).width;\n          ctx.restore();\n          glyph.getWidth = () => glyph.width;\n        }\n        this.width = Math.max(glyph.getWidth(), this.width);\n      }\n      this.glyph.getWidth = () => this.width;\n    }\n\n    // we subtract 1 from `line` because getYForLine expects a 0-based index,\n    // while the position.str is a 1-based index\n    const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      this.stem.setYBounds(this.getStemY(), this.getStemY());\n    }\n\n    return this;\n  }\n\n  // Get the fret positions for the note\n  getPositions(): TabNotePosition[] {\n    return this.positions;\n  }\n\n  // Get the default `x` and `y` coordinates for a modifier at a specific\n  // `position` at a fret position `index`\n  getModifierStartXY(position: number, index: number): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    let x = 0;\n    if (position === Modifier.Position.LEFT) {\n      x = -1 * 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.RIGHT) {\n      x = this.width + 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n      const note_glyph_width = this.glyph.getWidth();\n      x = note_glyph_width / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Get the default line for rest\n  getLineForRest(): number {\n    return Number(this.positions[0].str);\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n    // width is already set during init()\n    this.setPreFormatted(true);\n  }\n\n  // Get the x position for the stem\n  getStemX(): number {\n    return this.getCenterGlyphX();\n  }\n\n  // Get the y position for the stem\n  getStemY(): number {\n    const num_lines = this.checkStave().getNumLines();\n\n    // The decimal staff line amounts provide optimal spacing between the\n    // fret number and the stem\n    const stemUpLine = -0.5;\n    const stemDownLine = num_lines - 0.5;\n    const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n\n    return this.checkStave().getYForLine(stemStartLine);\n  }\n\n  // Get the stem extents for the tabnote\n  getStemExtents(): Record<string, number> {\n    return this.checkStem().getExtents();\n  }\n\n  // Draw the fal onto the context\n  drawFlag(): void {\n    const {\n      beam,\n      glyph,\n      stem_direction,\n      render_options: { draw_stem, glyph_font_scale },\n    } = this;\n    const context = this.checkContext();\n\n    const shouldDrawFlag = beam == undefined && draw_stem;\n\n    // Now it's the flag's turn.\n    if (glyph.flag && shouldDrawFlag) {\n      const flag_x = this.getStemX() + 1;\n      const flag_y = this.getStemY() - this.checkStem().getHeight();\n\n      const flag_code =\n        stem_direction === Stem.DOWN\n          ? glyph.code_flag_downstem // Down stems have flags on the left.\n          : glyph.code_flag_upstem;\n\n      // Draw the Flag\n      Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code, { category: 'flag.tabStem' });\n    }\n  }\n\n  // Render the modifiers onto the context\n  drawModifiers(): void {\n    // Draw the modifiers\n    this.modifiers.forEach((modifier) => {\n      // Only draw the dots if enabled\n      if (modifier.getCategory() === Dot.CATEGORY && !this.render_options.draw_dots) return;\n\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    });\n  }\n\n  // Render the stem extension through the fret positions\n  drawStemThrough(): void {\n    const stem_x = this.getStemX();\n    const stem_y = this.getStemY();\n    const ctx = this.checkContext();\n\n    const stem_through = this.render_options.draw_stem_through_stave;\n    const draw_stem = this.render_options.draw_stem;\n    if (draw_stem && stem_through) {\n      const total_lines = this.checkStave().getNumLines();\n      const strings_used = this.positions.map((position) => Number(position.str));\n\n      const unused_strings = getUnusedStringGroups(total_lines, strings_used);\n      const stem_lines = getPartialStemLines(stem_y, unused_strings, this.checkStave(), this.getStemDirection());\n\n      ctx.save();\n      ctx.setLineWidth(Stem.WIDTH);\n      stem_lines.forEach((bounds) => {\n        if (bounds.length === 0) return;\n\n        ctx.beginPath();\n        ctx.moveTo(stem_x, bounds[0]);\n        ctx.lineTo(stem_x, bounds[bounds.length - 1]);\n        ctx.stroke();\n        ctx.closePath();\n      });\n      ctx.restore();\n    }\n  }\n\n  // Render the fret positions onto the context\n  drawPositions(): void {\n    const ctx = this.checkContext();\n    const x = this.getAbsoluteX();\n    const ys = this.ys;\n    for (let i = 0; i < this.positions.length; ++i) {\n      const y = ys[i] + this.render_options.y_shift;\n      const glyph = this.glyphs[i];\n\n      // Center the fret text beneath the notation note head\n      const note_glyph_width = this.glyph.getWidth();\n      const tab_x = x + note_glyph_width / 2 - glyph.getWidth() / 2;\n\n      // FIXME: Magic numbers.\n      ctx.clearRect(tab_x - 2, y - 3, glyph.getWidth() + 4, 6);\n\n      if (glyph.code) {\n        Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyph.code);\n      } else {\n        ctx.save();\n        ctx.setRawFont(this.render_options.font);\n        const text = glyph.text.toString();\n        ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\n        ctx.restore();\n      }\n    }\n  }\n\n  // The main rendering function for the entire note\n  draw(): void {\n    const ctx = this.checkContext();\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    this.setRendered();\n    const render_stem = this.beam == undefined && this.render_options.draw_stem;\n\n    ctx.openGroup('tabnote', undefined, { pointerBBox: true });\n    this.drawPositions();\n    this.drawStemThrough();\n\n    if (this.stem && render_stem) {\n      const stem_x = this.getStemX();\n      this.stem.setNoteHeadXBounds(stem_x, stem_x);\n      ctx.openGroup('stem', undefined, { pointerBBox: true });\n      this.stem.setContext(ctx).draw();\n      ctx.closeGroup();\n    }\n\n    this.drawFlag();\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Flow } from './flow';\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tuplet } from './tuplet';\nimport { Stem } from './stem';\nimport { Note } from './note';\nimport { StemmableNote } from './stemmablenote';\nimport { Voice } from './voice';\nimport { RenderContext } from './types/common';\nimport { TabNote } from './tabnote';\nimport { StaveNote } from './stavenote';\n\nfunction calculateStemDirection(notes: StemmableNote[]) {\n  let lineSum = 0;\n  notes.forEach((note) => {\n    if (note.keyProps) {\n      note.keyProps.forEach((keyProp) => {\n        lineSum += keyProp.line - 3;\n      });\n    }\n  });\n\n  if (lineSum >= 0) {\n    return Stem.DOWN;\n  }\n  return Stem.UP;\n}\n\nconst getStemSlope = (firstNote: StemmableNote, lastNote: StemmableNote) => {\n  const firstStemTipY = firstNote.getStemExtents().topY;\n  const firstStemX = firstNote.getStemX();\n  const lastStemTipY = lastNote.getStemExtents().topY;\n  const lastStemX = lastNote.getStemX();\n  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n};\n\nconst BEAM_LEFT = 'L';\nconst BEAM_RIGHT = 'R';\nconst BEAM_BOTH = 'B';\n\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n  render_options: {\n    flat_beam_offset?: number;\n    flat_beams: boolean;\n    secondary_break_ticks?: number;\n    show_stemlets: boolean;\n    beam_width: number;\n    max_slope: number;\n    min_slope: number;\n    slope_iterations: number;\n    slope_cost: number;\n    stemlet_extension: number;\n    partial_beam_length: number;\n    min_flat_beam_offset: number;\n  };\n  notes: StemmableNote[];\n  postFormatted: boolean;\n  slope: number = 0;\n\n  private readonly stem_direction: number;\n  private readonly ticks: number;\n\n  private y_shift: number = 0;\n  private break_on_indices: number[];\n  private beam_count: number;\n  private unbeamable?: boolean;\n  /**\n   * Get the default beam groups for a provided time signature.\n   * Attempt to guess if the time signature is not found in table.\n   * Currently this is fairly naive.\n   */\n  static getDefaultBeamGroups(time_sig: string): Fraction[] {\n    if (!time_sig || time_sig === 'c') {\n      time_sig = '4/4';\n    }\n\n    const defaults: { [key: string]: [string] } = {\n      '1/2': ['1/2'],\n      '2/2': ['1/2'],\n      '3/2': ['1/2'],\n      '4/2': ['1/2'],\n\n      '1/4': ['1/4'],\n      '2/4': ['1/4'],\n      '3/4': ['1/4'],\n      '4/4': ['1/4'],\n\n      '1/8': ['1/8'],\n      '2/8': ['2/8'],\n      '3/8': ['3/8'],\n      '4/8': ['2/8'],\n\n      '1/16': ['1/16'],\n      '2/16': ['2/16'],\n      '3/16': ['3/16'],\n      '4/16': ['2/16'],\n    };\n\n    const groups: string[] = defaults[time_sig];\n\n    if (groups === undefined) {\n      // If no beam groups found, naively determine\n      // the beam groupings from the time signature\n      const beatTotal = parseInt(time_sig.split('/')[0], 10);\n      const beatValue = parseInt(time_sig.split('/')[1], 10);\n\n      const tripleMeter = beatTotal % 3 === 0;\n\n      if (tripleMeter) {\n        return [new Fraction(3, beatValue)];\n      } else if (beatValue > 4) {\n        return [new Fraction(2, beatValue)];\n      } else if (beatValue <= 4) {\n        return [new Fraction(1, beatValue)];\n      }\n    } else {\n      return groups.map((group) => new Fraction().parse(group));\n    }\n\n    return [new Fraction(1, 4)];\n  }\n\n  /**\n   * A helper function to automatically build basic beams for a voice. For more\n   * complex auto-beaming use `Beam.generateBeams()`.\n   * @param voice the voice to generate the beams for\n   * @param stem_direction a stem direction to apply to the entire voice\n   * @param groups an array of `Fraction` representing beat groupings for the beam\n   */\n  static applyAndGetBeams(voice: Voice, stem_direction?: number, groups?: Fraction[]): Beam[] {\n    return Beam.generateBeams(voice.getTickables() as StemmableNote[], {\n      groups,\n      stem_direction,\n    });\n  }\n\n  /**\n   * A helper function to autimatically build beams for a voice with\n   * configuration options.\n   *\n   * Example configuration object:\n   *\n   * ```\n   * config = {\n   *   groups: [new Vex.Flow.Fraction(2, 8)],\n   *   stem_direction: -1,\n   *   beam_rests: true,\n   *   beam_middle_only: true,\n   *   show_stemlets: false\n   * };\n   * ```\n   * @param notes an array of notes to create the beams for\n   * @param config the configuration object\n   * @param config.stem_direction set to apply the same direction to all notes\n   * @param config.beam_rests set to `true` to include rests in the beams\n   * @param config.beam_middle_only set to `true` to only beam rests in the middle of the beat\n   * @param config.show_stemlets set to `true` to draw stemlets for rests\n   * @param config.maintain_stem_directions set to `true` to not apply new stem directions\n   * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n   *\n   */\n  static generateBeams(\n    notes: StemmableNote[],\n    config: {\n      flat_beam_offset?: number;\n      flat_beams?: boolean;\n      secondary_breaks?: string;\n      show_stemlets?: boolean;\n      maintain_stem_directions?: boolean;\n      beam_middle_only?: boolean;\n      beam_rests?: boolean;\n      groups?: Fraction[];\n      stem_direction?: number;\n    } = {}\n  ): Beam[] {\n    if (!config.groups || !config.groups.length) {\n      config.groups = [new Fraction(2, 8)];\n    }\n\n    // Convert beam groups to tick amounts\n    const tickGroups = config.groups.map((group) => {\n      if (!group.multiply) {\n        throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n      }\n      return group.clone().multiply(Flow.RESOLUTION, 1);\n    });\n\n    const unprocessedNotes: StemmableNote[] = notes;\n    let currentTickGroup = 0;\n    let noteGroups: StemmableNote[][] = [];\n    let currentGroup: StemmableNote[] = [];\n\n    function getTotalTicks(vf_notes: Note[]) {\n      return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n    }\n\n    function nextTickGroup() {\n      if (tickGroups.length - 1 > currentTickGroup) {\n        currentTickGroup += 1;\n      } else {\n        currentTickGroup = 0;\n      }\n    }\n\n    function createGroups() {\n      let nextGroup: StemmableNote[] = [];\n      // number of ticks in current group\n      let currentGroupTotalTicks = new Fraction(0, 1);\n      unprocessedNotes.forEach((unprocessedNote) => {\n        nextGroup = [];\n        if (unprocessedNote.shouldIgnoreTicks()) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          return; // Ignore untickables (like bar notes)\n        }\n        currentGroup.push(unprocessedNote);\n        const ticksPerGroup = tickGroups[currentTickGroup].clone();\n        const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n\n        // Double the amount of ticks in a group, if it's an unbeamable tuplet\n        const unbeamable = Flow.durationToNumber(unprocessedNote.getDuration()) < 8;\n        if (unbeamable && unprocessedNote.getTuplet()) {\n          ticksPerGroup.numerator *= 2;\n        }\n\n        // If the note that was just added overflows the group tick total\n        if (totalTicks.greaterThan(ticksPerGroup)) {\n          // If the overflow note can be beamed, start the next group\n          // with it. Unbeamable notes leave the group overflowed.\n          if (!unbeamable) {\n            const note = currentGroup.pop();\n            if (note) nextGroup.push(note);\n          }\n          noteGroups.push(currentGroup);\n\n          // We have overflown, so we're going to next tick group. As we might have\n          // overflown by more than 1 group, we need to go forward as many times as\n          // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n          // in current groups as we go forward.\n          do {\n            currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n            nextTickGroup();\n          } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n          currentGroup = nextGroup;\n        } else if (totalTicks.equals(ticksPerGroup)) {\n          noteGroups.push(currentGroup);\n          currentGroupTotalTicks = new Fraction(0, 1);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        }\n      });\n\n      // Adds any remainder notes beam\n      if (currentGroup.length > 0) {\n        noteGroups.push(currentGroup);\n      }\n    }\n    function getBeamGroups() {\n      return noteGroups.filter((group) => {\n        if (group.length > 1) {\n          let beamable = true;\n          group.forEach((note) => {\n            if (note.getIntrinsicTicks() >= Flow.durationToTicks('4')) {\n              beamable = false;\n            }\n          });\n          return beamable;\n        }\n        return false;\n      });\n    }\n\n    // Splits up groups by Rest\n    function sanitizeGroups() {\n      const sanitizedGroups: StemmableNote[][] = [];\n      noteGroups.forEach((group) => {\n        let tempGroup: StemmableNote[] = [];\n        group.forEach((note, index, group) => {\n          const isFirstOrLast = index === 0 || index === group.length - 1;\n          const prevNote = group[index - 1];\n\n          const breaksOnEachRest = !config.beam_rests && note.isRest();\n          const breaksOnFirstOrLastRest =\n            config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\n\n          let breakOnStemChange = false;\n          if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\n            const prevDirection = prevNote.getStemDirection();\n            const currentDirection = note.getStemDirection();\n            breakOnStemChange = currentDirection !== prevDirection;\n          }\n\n          const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n\n          // Determine if the group should be broken at this note\n          const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n\n          if (shouldBreak) {\n            // Add current group\n            if (tempGroup.length > 0) {\n              sanitizedGroups.push(tempGroup);\n            }\n\n            // Start a new group. Include the current note if the group\n            // was broken up by stem direction, as that note needs to start\n            // the next group of notes\n            tempGroup = breakOnStemChange ? [note] : [];\n          } else {\n            // Add note to group\n            tempGroup.push(note);\n          }\n        });\n\n        // If there is a remaining group, add it as well\n        if (tempGroup.length > 0) {\n          sanitizedGroups.push(tempGroup);\n        }\n      });\n\n      noteGroups = sanitizedGroups;\n    }\n\n    function formatStems() {\n      noteGroups.forEach((group) => {\n        let stemDirection;\n        if (config.maintain_stem_directions) {\n          const note = findFirstNote(group);\n          stemDirection = note ? note.getStemDirection() : Stem.UP;\n        } else {\n          if (config.stem_direction) {\n            stemDirection = config.stem_direction;\n          } else {\n            stemDirection = calculateStemDirection(group);\n          }\n        }\n        applyStemDirection(group, stemDirection);\n      });\n    }\n\n    function findFirstNote(group: StemmableNote[]) {\n      for (let i = 0; i < group.length; i++) {\n        const note = group[i];\n        if (!note.isRest()) {\n          return note;\n        }\n      }\n\n      return false;\n    }\n\n    function applyStemDirection(group: StemmableNote[], direction: number) {\n      group.forEach((note) => {\n        note.setStemDirection(direction);\n      });\n    }\n\n    // Get all of the tuplets in all of the note groups\n    function getTuplets() {\n      const uniqueTuplets: Tuplet[] = [];\n\n      // Go through all of the note groups and inspect for tuplets\n      noteGroups.forEach((group) => {\n        let tuplet: Tuplet;\n        group.forEach((note) => {\n          const noteTuplet = note.getTuplet();\n          if (noteTuplet && tuplet !== noteTuplet) {\n            tuplet = noteTuplet;\n            uniqueTuplets.push(tuplet);\n          }\n        });\n      });\n      return uniqueTuplets;\n    }\n\n    // Using closures to store the variables throughout the various functions\n    // IMO Keeps it this process lot cleaner - but not super consistent with\n    // the rest of the API's style - Silverwolf90 (Cyril)\n    createGroups();\n    sanitizeGroups();\n    formatStems();\n\n    // Get the notes to be beamed\n    const beamedNoteGroups = getBeamGroups();\n\n    // Get the tuplets in order to format them accurately\n    const allTuplets = getTuplets();\n\n    // Create a Vex.Flow.Beam from each group of notes to be beamed\n    const beams: Beam[] = [];\n    beamedNoteGroups.forEach((group) => {\n      const beam = new Beam(group);\n\n      if (config.show_stemlets) {\n        beam.render_options.show_stemlets = true;\n      }\n      if (config.secondary_breaks) {\n        beam.render_options.secondary_break_ticks = Flow.durationToTicks(config.secondary_breaks);\n      }\n      if (config.flat_beams === true) {\n        beam.render_options.flat_beams = true;\n        beam.render_options.flat_beam_offset = config.flat_beam_offset;\n      }\n      beams.push(beam);\n    });\n\n    // Reformat tuplets\n    allTuplets.forEach((tuplet) => {\n      // Set the tuplet location based on the stem direction\n      const direction =\n        (tuplet.notes[0] as StemmableNote).stem_direction === Stem.DOWN ? Tuplet.LOCATION_BOTTOM : Tuplet.LOCATION_TOP;\n      tuplet.setTupletLocation(direction);\n\n      // If any of the notes in the tuplet are not beamed, draw a bracket.\n      let bracketed = false;\n      for (let i = 0; i < tuplet.notes.length; i++) {\n        const note = tuplet.notes[i];\n        if (!note.hasBeam()) {\n          bracketed = true;\n          break;\n        }\n      }\n      tuplet.setBracketed(bracketed);\n    });\n\n    return beams;\n  }\n\n  constructor(notes: StemmableNote[], auto_stem: boolean = false) {\n    super();\n    this.setAttribute('type', 'Beam');\n\n    if (!notes || notes.length === 0) {\n      throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n    }\n\n    if (notes.length === 1) {\n      throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n    }\n\n    // Validate beam line, direction and ticks.\n    this.ticks = notes[0].getIntrinsicTicks();\n\n    if (this.ticks >= Flow.durationToTicks('4')) {\n      throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n    }\n\n    let i; // shared iterator\n    let note;\n\n    this.stem_direction = Stem.UP;\n\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (note.hasStem()) {\n        this.stem_direction = note.getStemDirection();\n        break;\n      }\n    }\n\n    let stem_direction = this.stem_direction;\n    // Figure out optimal stem direction based on given notes\n    if (auto_stem && notes[0].getCategory() === StaveNote.CATEGORY) {\n      stem_direction = calculateStemDirection(notes);\n    } else if (auto_stem && notes[0].getCategory() === TabNote.CATEGORY) {\n      // Auto Stem TabNotes\n      const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n\n      stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n    }\n\n    // Apply stem directions and attach beam to notes\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (auto_stem) {\n        note.setStemDirection(stem_direction);\n        this.stem_direction = stem_direction;\n      }\n      note.setBeam(this);\n    }\n\n    this.postFormatted = false;\n    this.notes = notes;\n    this.beam_count = this.getBeamCount();\n    this.break_on_indices = [];\n    this.render_options = {\n      beam_width: 5,\n      max_slope: 0.25,\n      min_slope: -0.25,\n      slope_iterations: 20,\n      slope_cost: 100,\n      show_stemlets: false,\n      stemlet_extension: 7,\n      partial_beam_length: 10,\n      flat_beams: false,\n      min_flat_beam_offset: 15,\n    };\n  }\n\n  /** Get the notes in this beam. */\n  getNotes(): StemmableNote[] {\n    return this.notes;\n  }\n\n  /** Get the max number of beams in the set of notes. */\n  getBeamCount(): number {\n    const beamCounts = this.notes.map((note) => note.getGlyph().beam_count);\n\n    const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n\n    return maxBeamCount;\n  }\n\n  /** Set which note `indices` to break the secondary beam at. */\n  breakSecondaryAt(indices: number[]): this {\n    this.break_on_indices = indices;\n    return this;\n  }\n\n  /** Return the y coordinate for linear function. */\n  getSlopeY(x: number, first_x_px: number, first_y_px: number, slope: number): number {\n    return first_y_px + (x - first_x_px) * slope;\n  }\n\n  /** Calculate the best possible slope for the provided notes. */\n  calculateSlope(): void {\n    const {\n      notes,\n      stem_direction: stemDirection,\n      render_options: { max_slope, min_slope, slope_iterations, slope_cost },\n    } = this;\n\n    const firstNote = notes[0];\n    const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n    const increment = (max_slope - min_slope) / slope_iterations;\n    let minCost = Number.MAX_VALUE;\n    let bestSlope = 0;\n    let yShift = 0;\n\n    // iterate through slope values to find best weighted fit\n    for (let slope = min_slope; slope <= max_slope; slope += increment) {\n      let totalStemExtension = 0;\n      let yShiftTemp = 0;\n\n      // iterate through notes, calculating y shift and stem extension\n      for (let i = 1; i < notes.length; ++i) {\n        const note = notes[i];\n        const adjustedStemTipY =\n          this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n\n        const stemTipY = note.getStemExtents().topY;\n        // beam needs to be shifted up to accommodate note\n        if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n          const diff = Math.abs(stemTipY - adjustedStemTipY);\n          yShiftTemp += diff * -stemDirection;\n          totalStemExtension += diff * i;\n        } else {\n          // beam overshoots note, account for the difference\n          totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n        }\n      }\n\n      // most engraving books suggest aiming for a slope about half the angle of the\n      // difference between the first and last notes' stem length;\n      const idealSlope = initialSlope / 2;\n      const distanceFromIdeal = Math.abs(idealSlope - slope);\n\n      // This tries to align most beams to something closer to the idealSlope, but\n      // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n      const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n\n      // update state when a more ideal slope is found\n      if (cost < minCost) {\n        minCost = cost;\n        bestSlope = slope;\n        yShift = yShiftTemp;\n      }\n    }\n\n    this.slope = bestSlope;\n    this.y_shift = yShift;\n  }\n\n  /** Calculate a slope and y-shift for flat beams. */\n  calculateFlatSlope(): void {\n    const {\n      notes,\n      stem_direction,\n      render_options: { beam_width, min_flat_beam_offset, flat_beam_offset },\n    } = this;\n\n    // If a flat beam offset has not yet been supplied or calculated,\n    // generate one based on the notes in this particular note group\n    let total = 0;\n    let extremeY = 0; // Store the highest or lowest note here\n    let extremeBeamCount = 0; // The beam count of the extreme note\n    let currentExtreme = 0;\n    for (let i = 0; i < notes.length; i++) {\n      // Total up all of the offsets so we can average them out later\n      const note = notes[i];\n      const stemTipY = note.getStemExtents().topY;\n      total += stemTipY;\n\n      // Store the highest (stems-up) or lowest (stems-down) note so the\n      //  offset can be adjusted in case the average isn't enough\n      if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\n        currentExtreme = stemTipY;\n        extremeY = Math.max(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      } else if (stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n        currentExtreme = stemTipY;\n        extremeY = Math.min(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      }\n    }\n\n    // Average the offsets to try and come up with a reasonable one that\n    //  works for all of the notes in the beam group.\n    let offset = total / notes.length;\n\n    // In case the average isn't long enough, add or subtract some more\n    //  based on the highest or lowest note (again, based on the stem\n    //  direction). This also takes into account the added height due to\n    //  the width of the beams.\n    const beamWidth = beam_width * 1.5;\n    const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\n    const newOffset = extremeY + extremeTest * -stem_direction;\n    if (stem_direction === Stem.DOWN && offset < newOffset) {\n      offset = extremeY + extremeTest;\n    } else if (stem_direction === Stem.UP && offset > newOffset) {\n      offset = extremeY - extremeTest;\n    }\n\n    if (!flat_beam_offset) {\n      // Set the offset for the group based on the calculations above.\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.DOWN && offset > flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.UP && offset < flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    }\n\n    // for flat beams, the slope and y_shift are simply 0\n    this.slope = 0;\n    this.y_shift = 0;\n  }\n\n  /** Return the Beam y offset. */\n  getBeamYToDraw(): number {\n    const firstNote = this.notes[0];\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    let beamY = firstStemTipY;\n\n    // For flat beams, set the first and last Y to the offset, rather than\n    //  using the note's stem extents.\n    if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n      beamY = this.render_options.flat_beam_offset;\n    }\n    return beamY;\n  }\n\n  /**\n   * Create new stems for the notes in the beam, so that each stem\n   * extends into the beams.\n   */\n  applyStemExtensions(): void {\n    const {\n      notes,\n      slope,\n      y_shift,\n      stem_direction,\n      beam_count,\n      render_options: { show_stemlets, stemlet_extension, beam_width },\n    } = this;\n\n    const firstNote = notes[0];\n    const firstStemTipY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n\n    for (let i = 0; i < notes.length; ++i) {\n      const note = notes[i];\n      const stem = note.getStem();\n      if (stem) {\n        const stemX = note.getStemX();\n        const { topY: stemTipY } = note.getStemExtents();\n        const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n        const preBeamExtension = stem.getExtension();\n        const beamExtension = stem_direction === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n\n        stem.setExtension(preBeamExtension + beamExtension);\n        stem.adjustHeightForBeam();\n\n        if (note.isRest() && show_stemlets) {\n          const beamWidth = beam_width;\n          const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\n          stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\n        }\n      } else {\n        throw new RuntimeError('NoStem', 'stem undefined.');\n      }\n    }\n  }\n\n  /** Return upper level beam direction. */\n  lookupBeamDirection(duration: string, prev_tick: number, tick: number, next_tick: number): string {\n    if (duration === '4') {\n      return BEAM_LEFT;\n    }\n\n    const lookup_duration = `${Flow.durationToNumber(duration) / 2}`;\n    const prev_note_gets_beam = prev_tick < Flow.durationToTicks(lookup_duration);\n    const next_note_gets_beam = next_tick < Flow.durationToTicks(lookup_duration);\n    const note_gets_beam = tick < Flow.durationToTicks(lookup_duration);\n\n    if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_BOTH;\n    } else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\n      return BEAM_LEFT;\n    } else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_RIGHT;\n    }\n\n    return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick);\n  }\n\n  /** Get the x coordinates for the beam lines of specific `duration`. */\n  getBeamLines(duration: string): { start: number; end?: number }[] {\n    const tick_of_duration = Flow.durationToTicks(duration);\n    let beam_started = false;\n\n    type BeamInfo = { start: number; end?: number };\n    const beam_lines: BeamInfo[] = [];\n    let current_beam: BeamInfo | undefined = undefined;\n    const partial_beam_length = this.render_options.partial_beam_length;\n    let previous_should_break = false;\n    let tick_tally = 0;\n    for (let i = 0; i < this.notes.length; ++i) {\n      const note = this.notes[i];\n\n      // See if we need to break secondary beams on this note.\n      const ticks = note.getTicks().value();\n      tick_tally += ticks;\n      let should_break = false;\n\n      // 8th note beams are always drawn.\n      if (parseInt(duration, 10) >= 8) {\n        // First, check to see if any indices were set up through breakSecondaryAt()\n        should_break = this.break_on_indices.indexOf(i) !== -1;\n\n        // If the secondary breaks were auto-configured in the render options,\n        //  handle that as well.\n        if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n          tick_tally = 0;\n          should_break = true;\n        }\n      }\n      const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\n\n      const stem_x = note.getStemX() - Stem.WIDTH / 2;\n\n      // Check to see if the next note in the group will get a beam at this\n      //  level. This will help to inform the partial beam logic below.\n      const prev_note = this.notes[i - 1];\n      const next_note = this.notes[i + 1];\n      const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\n      const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\n      const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      if (note_gets_beam) {\n        // This note gets a beam at the current level\n        if (beam_started) {\n          // We're currently in the middle of a beam. Just continue it on to\n          //  the stem X of the current note.\n          current_beam = beam_lines[beam_lines.length - 1];\n          current_beam.end = stem_x;\n\n          // If a secondary beam break is set up, end the beam right now.\n          if (should_break) {\n            beam_started = false;\n            if (next_note && !next_note_gets_beam && current_beam.end === undefined) {\n              // This note gets a beam,.but the next one does not. This means\n              //  we need a partial pointing right.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          }\n        } else {\n          // No beam started yet. Start a new one.\n          current_beam = { start: stem_x, end: undefined };\n          beam_started = true;\n\n          if (beam_alone) {\n            // previous and next beam exists and does not get a beam but current gets it.\n            const prev_tick = prev_note.getIntrinsicTicks();\n            const next_tick = next_note.getIntrinsicTicks();\n            const tick = note.getIntrinsicTicks();\n            const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick);\n\n            if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\n              current_beam.end = current_beam.start - partial_beam_length;\n            } else {\n              current_beam.end = current_beam.start + partial_beam_length;\n            }\n          } else if (!next_note_gets_beam) {\n            // The next note doesn't get a beam. Draw a partial.\n            if ((previous_should_break || i === 0) && next_note) {\n              // This is the first note (but not the last one), or it is\n              //  following a secondary break. Draw a partial to the right.\n              current_beam.end = current_beam.start + partial_beam_length;\n            } else {\n              // By default, draw a partial to the left.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          } else if (should_break) {\n            // This note should have a secondary break after it. Even though\n            //  we just started a beam, it needs to end immediately.\n            current_beam.end = current_beam.start - partial_beam_length;\n            beam_started = false;\n          }\n          beam_lines.push(current_beam);\n        }\n      } else {\n        // The current note does not get a beam.\n        beam_started = false;\n      }\n\n      // Store the secondary break flag to inform the partial beam logic in\n      //  the next iteration of the loop.\n      previous_should_break = should_break;\n    }\n\n    // Add a partial beam pointing left if this is the last note in the group\n    const last_beam = beam_lines[beam_lines.length - 1];\n    if (last_beam && last_beam.end === undefined) {\n      last_beam.end = last_beam.start - partial_beam_length;\n    }\n    return beam_lines;\n  }\n\n  /** Render the stems for each note. */\n  protected drawStems(ctx: RenderContext): void {\n    this.notes.forEach((note) => {\n      const stem = note.getStem();\n      if (stem) {\n        stem.setContext(ctx).draw();\n      }\n    }, this);\n  }\n\n  // Render the beam lines\n  protected drawBeamLines(ctx: RenderContext): void {\n    const valid_beam_durations = ['4', '8', '16', '32', '64'];\n\n    const firstNote = this.notes[0];\n    let beamY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n    const beamThickness = this.render_options.beam_width * this.stem_direction;\n\n    // Draw the beams.\n    for (let i = 0; i < valid_beam_durations.length; ++i) {\n      const duration = valid_beam_durations[i];\n      const beamLines = this.getBeamLines(duration);\n\n      for (let j = 0; j < beamLines.length; ++j) {\n        const beam_line = beamLines[j];\n        const startBeamX = beam_line.start;\n\n        const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n        const lastBeamX = beam_line.end;\n        if (lastBeamX) {\n          const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n\n          ctx.beginPath();\n          ctx.moveTo(startBeamX, startBeamY);\n          ctx.lineTo(startBeamX, startBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY);\n          ctx.closePath();\n          ctx.fill();\n        } else {\n          throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n        }\n      }\n\n      beamY += beamThickness * 1.5;\n    }\n  }\n\n  /** Pre-format the beam. */\n  preFormat(): this {\n    return this;\n  }\n\n  /**\n   * Post-format the beam. This can only be called after\n   * the notes in the beam have both `x` and `y` values. ie: they've\n   * been formatted and have staves.\n   */\n  postFormat(): void {\n    if (this.postFormatted) return;\n\n    // Calculate a smart slope if we're not forcing the beams to be flat.\n    if (this.notes[0].getCategory() === TabNote.CATEGORY || this.render_options.flat_beams) {\n      this.calculateFlatSlope();\n    } else {\n      this.calculateSlope();\n    }\n    this.applyStemExtensions();\n\n    this.postFormatted = true;\n  }\n\n  /** Render the beam to the canvas context */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    if (this.unbeamable) return;\n\n    if (!this.postFormatted) {\n      this.postFormat();\n    }\n\n    this.drawStems(ctx);\n    this.applyStyle();\n    this.drawBeamLines(ctx);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { RuntimeError, defined } from './util';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { Fraction } from './fraction';\nimport { RenderContext } from './types/common';\nimport { Stave } from './stave';\nimport { Tickable } from './tickable';\n\nexport interface VoiceTime {\n  num_beats: number;\n  beat_value: number;\n  resolution: number;\n}\n\nexport enum VoiceMode {\n  STRICT = 1,\n  SOFT = 2,\n  FULL = 3,\n}\n\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n  protected resolutionMultiplier: number;\n  protected smallestTickCount: Fraction;\n  protected stave?: Stave;\n  protected mode: VoiceMode;\n  protected expTicksUsed?: number;\n  protected preFormatted?: boolean;\n  protected options: { softmaxFactor: number };\n\n  protected readonly totalTicks: Fraction;\n  protected readonly ticksUsed: Fraction;\n  protected readonly largestTickWidth: number;\n  protected readonly tickables: Tickable[];\n  protected readonly time: VoiceTime;\n\n  /**\n   * Modes allow the addition of ticks in three different ways:\n   * - STRICT: This is the default. Ticks must fill the voice.\n   * - SOFT: Ticks can be added without restrictions.\n   * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n   */\n  static get Mode(): typeof VoiceMode {\n    return VoiceMode;\n  }\n\n  constructor(time?: Partial<VoiceTime> | string, options?: { softmaxFactor: number }) {\n    super();\n    this.setAttribute('type', 'Voice');\n\n    this.options = {\n      softmaxFactor: 100,\n      ...options,\n    };\n\n    // Time signature shortcut: \"4/4\", \"3/8\", etc.\n    if (typeof time === 'string') {\n      const match = time.match(/(\\d+)\\/(\\d+)/);\n      if (match) {\n        time = {\n          num_beats: parseInt(match[1]),\n          beat_value: parseInt(match[2]),\n          resolution: Flow.RESOLUTION,\n        };\n      }\n    }\n\n    // Default time sig is 4/4\n    this.time = {\n      ...{\n        num_beats: 4,\n        beat_value: 4,\n        resolution: Flow.RESOLUTION,\n      },\n      ...(time as VoiceTime),\n    };\n\n    // Recalculate total ticks.\n    this.totalTicks = new Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n\n    this.resolutionMultiplier = 1;\n\n    // Set defaults\n    this.tickables = [];\n    this.ticksUsed = new Fraction(0, 1);\n    this.smallestTickCount = this.totalTicks.clone();\n    this.largestTickWidth = 0;\n    // Do we care about strictly timed notes\n    this.mode = Voice.Mode.STRICT;\n  }\n\n  /** Get the total ticks in the voice. */\n  getTotalTicks(): Fraction {\n    return this.totalTicks;\n  }\n\n  /** Get the total ticks used in the voice by all the tickables. */\n  getTicksUsed(): Fraction {\n    return this.ticksUsed;\n  }\n\n  /** Get the largest width of all the tickables. */\n  getLargestTickWidth(): number {\n    return this.largestTickWidth;\n  }\n\n  /** Get the tick count for the shortest tickable */\n  getSmallestTickCount(): Fraction {\n    return this.smallestTickCount;\n  }\n\n  /** Get the tickables in the voice. */\n  getTickables(): Tickable[] {\n    return this.tickables;\n  }\n\n  /** Get the voice mode. */\n  getMode(): number {\n    return this.mode;\n  }\n\n  /**\n   * Set the voice mode.\n   * @param mode value from `Voice.Mode`\n   */\n  setMode(mode: number): this {\n    this.mode = mode;\n    return this;\n  }\n\n  /** Get the resolution multiplier for the voice. */\n  getResolutionMultiplier(): number {\n    return this.resolutionMultiplier;\n  }\n\n  /** Get the actual tick resolution for the voice. */\n  getActualResolution(): number {\n    return this.resolutionMultiplier * this.time.resolution;\n  }\n\n  /** Set the voice's stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    // Reset the bounding box so we can reformat.\n    this.boundingBox = undefined;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  /** Get the bounding box for the voice. */\n  getBoundingBox(): BoundingBox | undefined {\n    if (!this.boundingBox) {\n      const stave = this.checkStave();\n      let boundingBox = undefined;\n      for (let i = 0; i < this.tickables.length; ++i) {\n        const tickable = this.tickables[i];\n        tickable.setStave(stave);\n        const bb = tickable.getBoundingBox();\n        if (bb) {\n          boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n        }\n      }\n      this.boundingBox = boundingBox;\n    }\n    return this.boundingBox;\n  }\n\n  /** Set the voice mode to strict or soft. */\n  setStrict(strict: boolean): this {\n    this.mode = strict ? Voice.Mode.STRICT : Voice.Mode.SOFT;\n    return this;\n  }\n\n  /** Determine if the voice is complete according to the voice mode. */\n  isComplete(): boolean {\n    if (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) {\n      return this.ticksUsed.equals(this.totalTicks);\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * We use softmax to layout the tickables proportional to the exponent of\n   * their duration. The softmax factor is used to determine the 'linearness' of\n   * the layout.\n   *\n   * The softmax of all the tickables in this voice should sum to 1.\n   */\n  setSoftmaxFactor(factor: number): this {\n    this.options.softmaxFactor = factor;\n    return this;\n  }\n\n  /**\n   * Calculate the sum of the exponents of all the ticks in this voice to use\n   * as the denominator of softmax.\n   */\n  protected reCalculateExpTicksUsed(): number {\n    const totalTicks = this.ticksUsed.value();\n    const exp = (tickable: Tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n    this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b, 0);\n    return this.expTicksUsed;\n  }\n\n  /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n  softmax(tickValue: number): number {\n    if (!this.expTicksUsed) {\n      this.expTicksUsed = this.reCalculateExpTicksUsed();\n    }\n\n    const totalTicks = this.ticksUsed.value();\n    const exp = (v: number) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n    const sm = exp(tickValue) / this.expTicksUsed;\n    return sm;\n  }\n\n  /** Add a tickable to the voice. */\n  addTickable(tickable: Tickable): this {\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      // Update the total ticks for this line.\n      this.ticksUsed.add(ticks);\n      this.expTicksUsed = 0; // reset\n\n      if (\n        (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) &&\n        this.ticksUsed.greaterThan(this.totalTicks)\n      ) {\n        this.ticksUsed.subtract(ticks);\n        throw new RuntimeError('BadArgument', 'Too many ticks.');\n      }\n\n      // Track the smallest tickable for formatting.\n      if (ticks.lessThan(this.smallestTickCount)) {\n        this.smallestTickCount = ticks.clone();\n      }\n\n      this.resolutionMultiplier = this.ticksUsed.denominator;\n\n      // Expand total ticks using denominator from ticks used.\n      this.totalTicks.add(0, this.ticksUsed.denominator);\n    }\n\n    // Add the tickable to the line.\n    this.tickables.push(tickable);\n    tickable.setVoice(this);\n    return this;\n  }\n\n  /** Add an array of tickables to the voice. */\n  addTickables(tickables: Tickable[]): this {\n    for (let i = 0; i < tickables.length; ++i) {\n      this.addTickable(tickables[i]);\n    }\n    return this;\n  }\n\n  /** Preformat the voice by applying the voice's stave to each note. */\n  preFormat(): this {\n    if (this.preFormatted) return this;\n    const stave = this.checkStave();\n    this.tickables.forEach((tickable) => {\n      if (!tickable.getStave()) {\n        tickable.setStave(stave);\n      }\n    });\n    this.preFormatted = true;\n    return this;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  /**\n   * Render the voice onto the canvas `context` and an optional `stave`.\n   * If `stave` is omitted, it is expected that the notes have staves\n   * already set.\n   *\n   * This method also calculates the voice's boundingBox while drawing\n   * the notes. Note the similarities with this.getBoundingBox().\n   */\n  draw(context: RenderContext = this.checkContext(), stave?: Stave): void {\n    stave = stave ?? this.stave;\n    this.setRendered();\n    let boundingBox = undefined;\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      // Set the stave if provided.\n      if (stave) {\n        tickable.setStave(stave);\n      }\n      defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n      const bb = tickable.getBoundingBox();\n      if (bb) {\n        boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n      }\n\n      tickable.setContext(context);\n      tickable.drawWithStyle();\n    }\n\n    this.boundingBox = boundingBox;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { Glyph } from './glyph';\nimport { FontInfo, RenderContext } from './types/common';\nimport { Stave } from './stave';\n\nfunction drawBoldDoubleLine(ctx: RenderContext, type: number, topX: number, topY: number, botY: number) {\n  if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n  }\n\n  let x_shift = 3;\n  let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n  const thickLineOffset = 2; // For aesthetics\n\n  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    x_shift = -5; // Flips the side of the thin line\n    variableWidth = 3;\n  }\n\n  // Thin line\n  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n  // Thick line\n  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n  protected thickness: number;\n  protected width: number;\n  protected font: FontInfo;\n  protected texts: {\n    content: string;\n    options: {\n      shift_x: number;\n      shift_y: number;\n    };\n  }[];\n\n  protected type: number;\n  protected x_shift: number;\n  protected top_stave: Stave;\n  protected bottom_stave: Stave;\n\n  /**\n   * SINGLE_LEFT and SINGLE are the same value for compatibility\n   * with older versions of vexflow which didn't have right sided\n   * stave connectors.\n   */\n  static readonly type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n  };\n\n  /**\n   * Connector type:\n   * * \"singleRight\"\n   * * \"singleLeft\"\n   * * \"single\"\n   * * \"double\"\n   * * \"brace\"\n   * * \"bracket\"\n   * * \"boldDoubleLeft\"\n   * * \"boldDoubleRight\"\n   * * \"thinDouble\"\n   * * \"none\"\n   */\n  static readonly typeString: Record<string, number> = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n  };\n\n  constructor(top_stave: Stave, bottom_stave: Stave) {\n    super();\n    this.setAttribute('type', 'StaveConnector');\n\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n    this.width = 3;\n    this.top_stave = top_stave;\n    this.bottom_stave = bottom_stave;\n    this.type = StaveConnector.type.DOUBLE;\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n    // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n    // 2. Offset BRACE type not to overlap with another StaveConnector\n    this.x_shift = 0;\n    this.texts = [];\n  }\n\n  /**\n   * Set type.\n   * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n   */\n  setType(type: number | string): this {\n    type = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n\n    if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  /** Set optional associated Text. */\n  setText(\n    text: string,\n    options?: {\n      shift_x: number;\n      shift_y: number;\n    }\n  ): this {\n    this.texts.push({\n      content: text,\n      options: { ...{ shift_x: 0, shift_y: 0 }, ...options },\n    });\n    return this;\n  }\n\n  /** Set text font. */\n  setFont(font: FontInfo): void {\n    this.font = { ...this.font, ...font };\n  }\n\n  /** Set connector x shift. */\n  setXShift(x_shift: number): this {\n    if (typeof x_shift !== 'number') {\n      throw new RuntimeError('InvalidType', 'x_shift must be a Number');\n    }\n\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  /** Render connector and associated text. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let topY = this.top_stave.getYForLine(0);\n    let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n    let width = this.width;\n    let topX = this.top_stave.getX();\n\n    const isRightSidedConnector =\n      this.type === StaveConnector.type.SINGLE_RIGHT ||\n      this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n      this.type === StaveConnector.type.THIN_DOUBLE;\n\n    if (isRightSidedConnector) {\n      topX = this.top_stave.getX() + this.top_stave.getWidth();\n    }\n\n    let attachment_height = botY - topY;\n    switch (this.type) {\n      case StaveConnector.type.SINGLE:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_LEFT:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_RIGHT:\n        width = 1;\n        break;\n      case StaveConnector.type.DOUBLE:\n        topX -= this.width + 2;\n        topY -= this.thickness;\n        attachment_height += 0.5;\n        break;\n      case StaveConnector.type.BRACE: {\n        width = 12;\n        // May need additional code to draw brace\n        const x1 = this.top_stave.getX() - 2 + this.x_shift;\n        const y1 = topY;\n        const x3 = x1;\n        const y3 = botY;\n        const x2 = x1 - width;\n        const y2 = y1 + attachment_height / 2.0;\n        const cpx1 = x2 - 0.9 * width;\n        const cpy1 = y1 + 0.2 * attachment_height;\n        const cpx2 = x1 + 1.1 * width;\n        const cpy2 = y2 - 0.135 * attachment_height;\n        const cpx3 = cpx2;\n        const cpy3 = y2 + 0.135 * attachment_height;\n        const cpx4 = cpx1;\n        const cpy4 = y3 - 0.2 * attachment_height;\n        const cpx5 = x2 - width;\n        const cpy5 = cpy4;\n        const cpx6 = x1 + 0.4 * width;\n        const cpy6 = y2 + 0.135 * attachment_height;\n        const cpx7 = cpx6;\n        const cpy7 = y2 - 0.135 * attachment_height;\n        const cpx8 = cpx5;\n        const cpy8 = cpy1;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n        ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n        ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n        ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n        ctx.fill();\n        ctx.stroke();\n        break;\n      }\n      case StaveConnector.type.BRACKET:\n        topY -= 6;\n        botY += 6;\n        attachment_height = botY - topY;\n        Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n        Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n        topX -= this.width + 2;\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_LEFT:\n        drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n        drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.THIN_DOUBLE:\n        width = 1;\n        attachment_height -= this.thickness;\n        break;\n      case StaveConnector.type.NONE:\n        break;\n      default:\n        throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n    }\n\n    if (\n      this.type !== StaveConnector.type.BRACE &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n      this.type !== StaveConnector.type.NONE\n    ) {\n      ctx.fillRect(topX, topY, width, attachment_height);\n    }\n\n    // If the connector is a thin double barline, draw the paralell line\n    if (this.type === StaveConnector.type.THIN_DOUBLE) {\n      ctx.fillRect(topX - 3, topY, width, attachment_height);\n    }\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Add stave connector text\n    for (let i = 0; i < this.texts.length; i++) {\n      const text = this.texts[i];\n      const text_width = ctx.measureText('' + text.content).width;\n      const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n      const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n\n      ctx.fillText('' + text.content, x, y + 4);\n    }\n    ctx.restore();\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\n\nimport { RuntimeError } from './util';\nimport { Modifier } from './modifier';\nimport { FontInfo } from './types/common';\nimport { StaveNote } from './stavenote';\nimport { Builder } from './easyscore';\nimport { ModifierContextState } from './modifiercontext';\n\n/**\n * @constructor\n */\nexport class FretHandFinger extends Modifier {\n  protected finger: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'frethandfinger';\n  }\n\n  // Arrange fingerings inside a ModifierContext.\n  static format(nums: FretHandFinger[], state: ModifierContextState): boolean {\n    const { left_shift, right_shift } = state;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shiftLeft = 0;\n    let shiftRight = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote() as StaveNote;\n      const pos = num.getPosition();\n      const index = num.checkIndex();\n      const props = note.getKeyProps()[index];\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n          }\n          if (right_shift === 0) {\n            shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        note,\n        num,\n        pos,\n        line: props.line,\n        shiftL: shiftLeft,\n        shiftR: shiftRight,\n      });\n    }\n\n    // Sort fingernumbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let numShiftL = 0;\n    let numShiftR = 0;\n    let xWidthL = 0;\n    let xWidthR = 0;\n    let lastLine = null;\n    let lastNote = null;\n\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n\n      // Reset the position of the string number every line.\n      if (line !== lastLine || note !== lastNote) {\n        numShiftL = left_shift + shiftL;\n        numShiftR = right_shift + shiftR;\n      }\n\n      const numWidth = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift + numShiftL);\n        num_shift = left_shift + numWidth; // spacing\n        xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(numShiftR);\n        num_shift = shiftRight + numWidth; // spacing\n        xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n      }\n      lastLine = line;\n      lastNote = note;\n    }\n\n    state.left_shift += xWidthL;\n    state.right_shift += xWidthR;\n\n    return true;\n  }\n\n  static easyScoreHook({ fingerings }: { fingerings?: string } = {}, note: StaveNote, builder: Builder): void {\n    if (!fingerings) return;\n\n    fingerings\n      .split(',')\n      .map((fingeringString: string) => {\n        const split = fingeringString.trim().split('.');\n        const params: { number: string; position?: string } = { number: split[0] };\n        if (split[1]) params.position = split[1];\n        return builder.getFactory().Fingering(params);\n      })\n      .map((fingering: Modifier, index: number) => note.addModifier(fingering, index));\n  }\n\n  constructor(finger: string) {\n    super();\n    this.setAttribute('type', 'FretHandFinger');\n\n    this.finger = finger;\n    this.width = 7;\n    this.position = Modifier.Position.LEFT; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  getCategory(): string {\n    return FretHandFinger.CATEGORY;\n  }\n\n  setFretHandFinger(finger: string): this {\n    this.finger = finger;\n    return this;\n  }\n\n  getFretHandFinger(): string {\n    return this.finger;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset + 5;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n        dot_x -= 4;\n        dot_y -= 12;\n        break;\n      case Modifier.Position.BELOW:\n        dot_x -= 2;\n        dot_y += 10;\n        break;\n      case Modifier.Position.LEFT:\n        dot_x -= this.width;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += 1;\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n    }\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText('' + this.finger, dot_x, dot_y);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\n\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { RenderContext } from './types/common';\n\nexport class NoteSubGroup extends Modifier {\n  static get CATEGORY(): string {\n    return 'notesubgroup';\n  }\n\n  // Arrange groups inside a `ModifierContext`\n  static format(groups: NoteSubGroup[], state: ModifierContextState): boolean {\n    if (!groups || groups.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < groups.length; ++i) {\n      const group = groups[i];\n      group.preFormat();\n      width += group.getWidth();\n    }\n\n    state.left_shift += width;\n    return true;\n  }\n\n  protected subNotes: Note[];\n  protected preFormatted: boolean = false;\n  protected formatter: Formatter;\n  protected voice: Voice;\n\n  constructor(subNotes: Note[]) {\n    super();\n    this.setAttribute('type', 'NoteSubGroup');\n\n    this.position = Modifier.Position.LEFT;\n    this.subNotes = subNotes;\n    this.subNotes.forEach((subNote) => {\n      subNote.setIgnoreTicks(false);\n    });\n    this.width = 0;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.voice.addTickables(this.subNotes);\n  }\n\n  getCategory(): string {\n    return NoteSubGroup.CATEGORY;\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  draw(): void {\n    const ctx: RenderContext = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n    this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n    this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\n\nimport { RuntimeError } from './util';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { FontInfo } from './types/common';\nimport { ModifierContextState } from './modifiercontext';\nimport { isNote, isStaveNote, isTabNote } from './typeguard';\n\nexport class Stroke extends Modifier {\n  protected options: {\n    all_voices: boolean;\n  };\n  protected all_voices: boolean;\n  protected type: number;\n\n  protected note_end?: Note;\n  protected render_options: {\n    font_scale: number;\n    stroke_px: number;\n    stroke_spacing: number;\n  };\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'strokes';\n  }\n\n  static readonly Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3, // Arpeggiated chord\n    ROLL_UP: 4, // Arpeggiated chord\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n  };\n\n  // Arrange strokes inside `ModifierContext`\n  static format(strokes: Stroke[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const stroke_spacing = 0;\n\n    if (!strokes || strokes.length === 0) return false;\n\n    const strokeList = strokes.map((stroke) => {\n      const note = stroke.getNote();\n      const index = stroke.checkIndex();\n      if (isStaveNote(note)) {\n        // Only StaveNote objects have getKeyProps().\n        const { line } = note.getKeyProps()[index];\n        const shift = note.getLeftDisplacedHeadPx();\n        return { line, shift, stroke };\n      } else if (isTabNote(note)) {\n        // Only TabNote objects have getPositions().\n        const { str: string } = note.getPositions()[index];\n        return { line: string, shift: 0, stroke };\n      } else {\n        throw new RuntimeError('Internal', 'Unexpected instance.');\n      }\n    });\n\n    const strokeShift = left_shift;\n\n    // There can only be one stroke .. if more than one, they overlay each other\n    const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n      stroke.setXShift(strokeShift + shift);\n      return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n    }, 0);\n\n    state.left_shift += xShift;\n\n    return true;\n  }\n\n  constructor(type: number, options: { all_voices: boolean }) {\n    super();\n    this.setAttribute('type', 'Stroke');\n\n    this.options = { ...options };\n\n    // multi voice - span stroke across all voices if true\n    this.all_voices = 'all_voices' in this.options ? this.options.all_voices : true;\n\n    // multi voice - end note of stroke, set in draw()\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      font_scale: 38,\n      stroke_px: 3,\n      stroke_spacing: 10,\n    };\n\n    this.font = {\n      family: 'serif',\n      size: 10,\n      weight: 'bold italic',\n    };\n\n    this.setXShift(0);\n    this.setWidth(10);\n  }\n\n  getCategory(): string {\n    return Stroke.CATEGORY;\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  addEndNote(note: Note): this {\n    this.note_end = note;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let ys = note.getYs();\n    let topY = start.y;\n    let botY = start.y;\n    const x = start.x - 5;\n    const line_space = note.checkStave().getOptions().spacing_between_lines_px;\n\n    const notes = this.checkModifierContext().getMembers(note.getCategory());\n    for (let i = 0; i < notes.length; i++) {\n      const note = notes[i];\n      if (isNote(note)) {\n        // Only Note objects have getYs().\n        // note is an instance of either StaveNote or TabNote.\n        // note.getCategory() returns 'stavenotes' or 'tabnotes'\n        ys = note.getYs();\n        for (let n = 0; n < ys.length; n++) {\n          if (this.note === notes[i] || this.all_voices) {\n            topY = Math.min(topY, ys[n]);\n            botY = Math.max(botY, ys[n]);\n          }\n        }\n      }\n    }\n\n    let arrow = '';\n    let arrow_shift_x = 0;\n    let arrow_y = 0;\n    let text_shift_x = 0;\n    let text_y = 0;\n\n    switch (this.type) {\n      case Stroke.Type.BRUSH_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        arrow_y = topY - line_space / 2 + 10;\n        botY += line_space / 2;\n        break;\n      case Stroke.Type.BRUSH_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = 0.5;\n        arrow_y = botY + line_space / 2;\n        topY -= line_space / 2;\n        break;\n      case Stroke.Type.ROLL_DOWN:\n      case Stroke.Type.RASQUEDO_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        text_shift_x = this.x_shift + arrow_shift_x - 2;\n        if (isStaveNote(note)) {\n          topY += 1.5 * line_space;\n          if ((botY - topY) % 2 !== 0) {\n            botY += 0.5 * line_space;\n          } else {\n            botY += line_space;\n          }\n          arrow_y = topY - line_space;\n          text_y = botY + line_space + 2;\n        } else {\n          topY += 1.5 * line_space;\n          botY += line_space;\n          arrow_y = topY - 0.75 * line_space;\n          text_y = botY + 0.25 * line_space;\n        }\n        break;\n      case Stroke.Type.ROLL_UP:\n      case Stroke.Type.RASQUEDO_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = -4;\n        text_shift_x = this.x_shift + arrow_shift_x - 1;\n        if (isStaveNote(note)) {\n          arrow_y = line_space / 2;\n          topY += 0.5 * line_space;\n          if ((botY - topY) % 2 === 0) {\n            botY += line_space / 2;\n          }\n          arrow_y = botY + 0.5 * line_space;\n          text_y = topY - 1.25 * line_space;\n        } else {\n          topY += 0.25 * line_space;\n          botY += 0.5 * line_space;\n          arrow_y = botY + 0.25 * line_space;\n          text_y = topY - line_space;\n        }\n        break;\n      case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n        topY += 0.5 * line_space;\n        botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\n        break;\n      default:\n        throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n    }\n\n    let strokeLine = 'straight';\n    // Draw the stroke\n    if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n      ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);\n    } else {\n      strokeLine = 'wiggly';\n      if (isStaveNote(note)) {\n        for (let i = topY; i <= botY; i += line_space) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n      } else {\n        let i;\n        for (i = topY; i <= botY; i += 10) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n        if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n          text_y = i + 0.25 * line_space;\n        }\n      }\n    }\n\n    if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n      return; // skip drawing arrow heads or text\n    }\n\n    // Draw the arrow head\n    Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {\n      category: `stroke.${arrow}.${strokeLine}`,\n    });\n\n    // Draw the rasquedo \"R\"\n    if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText('R', x + text_shift_x, text_y);\n      ctx.restore();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { RenderContext } from './types/common';\nimport { warn } from './util';\n\n/**\n * A rendering context for the Canvas backend (CanvasRenderingContext2D).\n */\nexport class CanvasContext implements RenderContext {\n  vexFlowCanvasContext: CanvasRenderingContext2D;\n  canvas: HTMLCanvasElement | { width: number; height: number };\n  background_fillStyle?: string;\n\n  static get WIDTH(): number {\n    return 600;\n  }\n\n  static get HEIGHT(): number {\n    return 400;\n  }\n\n  static get CANVAS_BROWSER_SIZE_LIMIT(): number {\n    return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n  }\n\n  static SanitizeCanvasDims(width: number, height: number): [number, number] {\n    const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n    if (Math.max(width, height) > limit) {\n      warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n      if (width > limit) {\n        width = limit;\n      }\n      if (height > limit) {\n        height = limit;\n      }\n    }\n    return [width, height];\n  }\n\n  /**\n   * This constructor is only called if Renderer.USE_CANVAS_PROXY is true.\n   * In most instances, we do not need to create a CanvasContext object.\n   * See Renderer.bolsterCanvasContext().\n   * @param context\n   */\n  constructor(context: CanvasRenderingContext2D) {\n    // Use a name that is unlikely to clash with a canvas context property.\n    this.vexFlowCanvasContext = context;\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT,\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n\n  clear(): void {\n    this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // eslint-disable-next-line\n  openGroup(cls: string, id?: string, attrs?: { pointerBBox: boolean }): any {\n    // Containers not implemented.\n  }\n\n  closeGroup(): void {\n    // Containers not implemented.\n  }\n\n  // eslint-disable-next-line\n  add(child: any): void {\n    // Containers not implemented.\n  }\n\n  setFont(family: string, size: number, weight: string): this {\n    this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;\n    return this;\n  }\n\n  setRawFont(font: string): this {\n    this.vexFlowCanvasContext.font = font;\n    return this;\n  }\n\n  setFillStyle(style: string): this {\n    this.vexFlowCanvasContext.fillStyle = style;\n    return this;\n  }\n\n  // TODO: What is this method supposed to do?\n  // The SVGContext version doesn't do much...\n  // It only fills the area behind some tab number annotations.\n  setBackgroundFillStyle(style: string): this {\n    /*\n    // Should it fill the entire canvas rect? For example:\n    const oldFillStyle = this.vexFlowCanvasContext.fillStyle;\n    this.vexFlowCanvasContext.fillStyle = style;\n    this.vexFlowCanvasContext.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.vexFlowCanvasContext.fillStyle = oldFillStyle;\n    */\n    this.background_fillStyle = style;\n    return this;\n  }\n\n  setStrokeStyle(style: string): this {\n    this.vexFlowCanvasContext.strokeStyle = style;\n    return this;\n  }\n\n  setShadowColor(color: string): this {\n    this.vexFlowCanvasContext.shadowColor = color;\n    return this;\n  }\n\n  setShadowBlur(blur: number): this {\n    this.vexFlowCanvasContext.shadowBlur = blur;\n    return this;\n  }\n\n  setLineWidth(width: number): this {\n    this.vexFlowCanvasContext.lineWidth = width;\n    return this;\n  }\n\n  setLineCap(capType: CanvasLineCap): this {\n    this.vexFlowCanvasContext.lineCap = capType;\n    return this;\n  }\n\n  // setLineDash is the one native method in a canvas context\n  // that begins with set, therefore we don't bolster the method\n  // if it already exists (see Renderer.bolsterCanvasContext).\n  // If it doesn't exist, we bolster it and assume it's looking for\n  // a ctx.lineDash method, as previous versions of VexFlow\n  // expected.\n  setLineDash(dash: number[]): this {\n    // eslint-disable-next-line\n    (this.vexFlowCanvasContext as any).lineDash = dash;\n    return this;\n  }\n\n  // Only called if Renderer.USE_CANVAS_PROXY is true.\n  scale(x: number, y: number): this {\n    this.vexFlowCanvasContext.scale(x, y);\n    return this;\n  }\n\n  // CanvasRenderingContext2D does not have a resize function.\n  // renderer.ts calls ctx.scale() instead, so this method is never used.\n  // eslint-disable-next-line\n  resize(width: number, height: number): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  rect(x: number, y: number, width: number, height: number): this {\n    this.vexFlowCanvasContext.rect(x, y, width, height);\n    return this;\n  }\n\n  fillRect(x: number, y: number, width: number, height: number): this {\n    this.vexFlowCanvasContext.fillRect(x, y, width, height);\n    return this;\n  }\n\n  clearRect(x: number, y: number, width: number, height: number): this {\n    this.vexFlowCanvasContext.clearRect(x, y, width, height);\n    return this;\n  }\n\n  beginPath(): this {\n    this.vexFlowCanvasContext.beginPath();\n    return this;\n  }\n\n  moveTo(x: number, y: number): this {\n    this.vexFlowCanvasContext.moveTo(x, y);\n    return this;\n  }\n\n  lineTo(x: number, y: number): this {\n    this.vexFlowCanvasContext.lineTo(x, y);\n    return this;\n  }\n\n  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): this {\n    this.vexFlowCanvasContext.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    return this;\n  }\n\n  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): this {\n    this.vexFlowCanvasContext.quadraticCurveTo(cpx, cpy, x, y);\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas arc method.\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, antiClockwise: boolean): this {\n    this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);\n    return this;\n  }\n\n  // CanvasRenderingContext2D does not have a glow function.\n  glow(): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  fill(): this {\n    this.vexFlowCanvasContext.fill();\n    return this;\n  }\n\n  stroke(): this {\n    this.vexFlowCanvasContext.stroke();\n    return this;\n  }\n\n  closePath(): this {\n    this.vexFlowCanvasContext.closePath();\n    return this;\n  }\n\n  measureText(text: string): TextMetrics {\n    return this.vexFlowCanvasContext.measureText(text);\n  }\n\n  fillText(text: string, x: number, y: number): this {\n    this.vexFlowCanvasContext.fillText(text, x, y);\n    return this;\n  }\n\n  save(): this {\n    this.vexFlowCanvasContext.save();\n    return this;\n  }\n\n  restore(): this {\n    this.vexFlowCanvasContext.restore();\n    return this;\n  }\n\n  set font(value: string) {\n    this.vexFlowCanvasContext.font = value;\n  }\n\n  get font(): string {\n    return this.vexFlowCanvasContext.font;\n  }\n\n  set fillStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.vexFlowCanvasContext.fillStyle = style;\n  }\n\n  get fillStyle(): string | CanvasGradient | CanvasPattern {\n    return this.vexFlowCanvasContext.fillStyle;\n  }\n\n  set strokeStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.vexFlowCanvasContext.strokeStyle = style;\n  }\n\n  get strokeStyle(): string | CanvasGradient | CanvasPattern {\n    return this.vexFlowCanvasContext.strokeStyle;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Gregory Ristow (2015)\n\nimport { RuntimeError, prefix } from './util';\nimport { RenderContext } from './types/common';\n\n// eslint-disable-next-line\ntype Attributes = { [key: string]: any };\n\nconst attrNamesToIgnoreMap: { [nodeName: string]: Attributes } = {\n  path: {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  },\n  rect: {\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  },\n  text: {\n    width: true,\n    height: true,\n  },\n};\n\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\n\ninterface State {\n  state: Attributes;\n  attributes: Attributes;\n  shadow_attributes: Attributes;\n  lineWidth: number;\n}\n\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext implements RenderContext {\n  element: HTMLElement; // the parent DOM object\n  svg: SVGSVGElement;\n  width: number = 0;\n  height: number = 0;\n  path: string;\n  pen: { x: number; y: number };\n  lineWidth: number;\n  attributes: Attributes;\n  background_attributes: Attributes;\n  shadow_attributes: Attributes;\n  state: Attributes;\n  state_stack: State[];\n  parent: SVGGElement;\n  groups: SVGGElement[];\n  fontString: string = '';\n  fontSize: number = 0;\n  ie: boolean = false; // true if the browser is Internet Explorer.\n\n  constructor(element: HTMLElement) {\n    this.element = element;\n\n    const svg = this.create('svg') as SVGSVGElement;\n    // Add it to the canvas:\n    this.element.appendChild(svg);\n\n    // Point to it:\n    this.svg = svg;\n    this.groups = [this.svg]; // Create the group stack\n    this.parent = this.svg;\n\n    this.path = '';\n    this.pen = { x: NaN, y: NaN };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      'font-family': 'Arial',\n      'font-size': '8pt',\n      'font-weight': 'normal',\n    };\n\n    const defaultAttributes = {\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      fill: 'black',\n      stroke: 'black',\n      ...defaultAttributes,\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      fill: 'white',\n      stroke: 'white',\n      ...defaultAttributes,\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n\n    // Test for Internet Explorer\n    this.iePolyfill();\n  }\n\n  create(svgElementType: string): SVGElement {\n    return document.createElementNS(SVG_NS, svgElementType);\n  }\n\n  // Allow grouping elements in containers for interactivity.\n  openGroup(cls: string, id?: string, attrs?: { pointerBBox: boolean }): SVGGElement {\n    const group: SVGGElement = this.create('g') as SVGGElement;\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', prefix(cls));\n    if (id) group.setAttribute('id', prefix(id));\n\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n    return group;\n  }\n\n  closeGroup(): void {\n    this.groups.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n\n  add(elem: SVGElement): void {\n    this.parent.appendChild(elem);\n  }\n\n  // Tests if the browser is Internet Explorer; if it is,\n  // we do some tricks to improve text layout. See the\n  // note at ieMeasureTextFix() for details.\n  iePolyfill(): void {\n    if (typeof navigator !== 'undefined') {\n      this.ie =\n        /MSIE 9/i.test(navigator.userAgent) ||\n        /MSIE 10/i.test(navigator.userAgent) ||\n        /rv:11\\.0/i.test(navigator.userAgent) ||\n        /Trident/i.test(navigator.userAgent);\n    }\n  }\n\n  // ### Styling & State Methods:\n\n  setFont(family: string, size: number, weight: string): this {\n    // In SVG italic is handled by font-style.\n    // We search the weight argument and apply bold and italic\n    // to font-weight and font-style respectively.\n    let foundBold = false;\n    let foundItalic = false;\n    // Weight might also be a number (200, 400, etc...) so we\n    // test its type to be sure we have access to String methods.\n    if (typeof weight === 'string') {\n      // look for \"italic\" in the weight:\n      if (weight.indexOf('italic') !== -1) {\n        weight = weight.replace(/italic/g, '');\n        foundItalic = true;\n      }\n      // look for \"bold\" in weight\n      if (weight.indexOf('bold') !== -1) {\n        weight = weight.replace(/bold/g, '');\n        foundBold = true;\n      }\n      // remove any remaining spaces\n      weight = weight.replace(/ /g, '');\n    }\n    const noWeightProvided = typeof weight === 'undefined' || weight === '';\n    if (noWeightProvided) {\n      weight = 'normal';\n    }\n\n    const fontAttributes = {\n      'font-family': family,\n      'font-size': size + 'pt',\n      'font-weight': foundBold ? 'bold' : weight,\n      'font-style': foundItalic ? 'italic' : 'normal',\n    };\n\n    // Store the font size so that if the browser is Internet\n    // Explorer we can fix its calculations of text width.\n    this.fontSize = Number(size);\n    // Currently this.fontString only supports size & family. See setRawFont().\n    this.fontString = `${size}pt ${family}`;\n    this.attributes = { ...this.attributes, ...fontAttributes };\n    this.state = { ...this.state, ...fontAttributes };\n\n    return this;\n  }\n\n  setRawFont(font: string): this {\n    this.fontString = font.trim();\n    // Assumes size first, splits on space -- which is presently\n    // how all existing modules are calling this.\n    const fontArray = this.fontString.split(' ');\n\n    const size = fontArray[0];\n    this.attributes['font-size'] = size;\n    this.state['font-size'] = size;\n\n    const family = fontArray[1];\n    this.attributes['font-family'] = family;\n    this.state['font-family'] = family;\n\n    // Saves fontSize for IE polyfill.\n    // Use the Number() function to parse the array returned by String.prototype.match()!\n    this.fontSize = Number(size.match(/\\d+/));\n    return this;\n  }\n\n  setFillStyle(style: string): this {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style: string): this {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style: string): this {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(color: string): this {\n    this.shadow_attributes.color = color;\n    return this;\n  }\n\n  /**\n   * @param blur A non-negative float specifying the level of shadow blur, where 0\n   *             represents no blur and larger numbers represent increasingly more blur.\n   * @returns this\n   */\n  setShadowBlur(blur: number): this {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  /**\n   * @param width\n   * @returns this\n   */\n  setLineWidth(width: number): this {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n    return this;\n  }\n\n  /**\n   * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n   * @returns this\n   *\n   * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n   */\n  setLineDash(lineDash: number[]): this {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      this.attributes['stroke-dasharray'] = lineDash.join(',');\n      return this;\n    } else {\n      throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n\n  /**\n   * @param capType\n   * @returns this\n   */\n  setLineCap(capType: CanvasLineCap): this {\n    this.attributes['stroke-linecap'] = capType;\n    return this;\n  }\n\n  // ### Sizing & Scaling Methods:\n\n  // TODO (GCR): See note at scale() -- separate our internal\n  // conception of pixel-based width/height from the style.width\n  // and style.height properties eventually to allow users to\n  // apply responsive sizing attributes to the SVG.\n  resize(width: number, height: number): this {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width.toString();\n\n    this.svg.style.width = width.toString();\n    this.svg.style.height = height.toString();\n\n    const attributes = {\n      width,\n      height,\n    };\n\n    this.applyAttributes(this.svg, attributes);\n    this.scale(this.state.scale.x, this.state.scale.y);\n    return this;\n  }\n\n  scale(x: number, y: number): this {\n    // uses viewBox to scale\n    // TODO (GCR): we may at some point want to distinguish the\n    // style.width / style.height properties that are applied to\n    // the SVG object from our internal conception of the SVG\n    // width/height.  This would allow us to create automatically\n    // scaling SVG's that filled their containers, for instance.\n    //\n    // As this isn't implemented in Canvas contexts,\n    // I've left as is for now, but in using the viewBox to\n    // handle internal scaling, am trying to make it possible\n    // for us to eventually move in that direction.\n\n    this.state.scale = { x, y };\n    const visibleWidth = this.width / x;\n    const visibleHeight = this.height / y;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n\n    return this;\n  }\n\n  /**\n   * 1 arg: string in the \"x y w h\" format\n   * 4 args: x:number, y:number, w:number, h:number\n   */\n  setViewBox(viewBox_or_minX: string | number, minY?: number, width?: number, height?: number): void {\n    if (typeof viewBox_or_minX === 'string') {\n      this.svg.setAttribute('viewBox', viewBox_or_minX);\n    } else {\n      const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }\n\n  // ### Drawing helper methods:\n\n  applyAttributes(element: SVGElement, attributes: Attributes): SVGElement {\n    const attrNamesToIgnore = attrNamesToIgnoreMap[element.nodeName];\n    Object.keys(attributes).forEach((propertyName) => {\n      if (attrNamesToIgnore && attrNamesToIgnore[propertyName]) {\n        return;\n      }\n      element.setAttributeNS(null, propertyName, attributes[propertyName]);\n    });\n\n    return element;\n  }\n\n  // ### Shape & Path Methods:\n\n  clear(): void {\n    // Clear the SVG by removing all inner children.\n\n    // (This approach is usually slightly more efficient\n    // than removing the old SVG & adding a new one to\n    // the container element, since it does not cause the\n    // container to resize twice.  Also, the resize\n    // triggered by removing the entire SVG can trigger\n    // a touchcancel event when the element resizes away\n    // from a touch point.)\n\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    }\n\n    // Replace the viewbox attribute we just removed:\n    this.scale(this.state.scale.x, this.state.scale.y);\n  }\n\n  // ## Rectangles:\n  rect(x: number, y: number, width: number, height: number, attributes?: Attributes): this {\n    // Avoid invalid negative height attribs by\n    // flipping the rectangle on its head:\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    // Create the rect & style it:\n    const rectangle: SVGRectElement = this.create('rect') as SVGRectElement;\n    if (typeof attributes === 'undefined') {\n      attributes = {\n        fill: 'none',\n        'stroke-width': this.lineWidth,\n        stroke: 'black',\n      };\n    }\n\n    attributes = { ...attributes, x, y, width, height };\n\n    this.applyAttributes(rectangle, attributes);\n\n    this.add(rectangle);\n    return this;\n  }\n\n  fillRect(x: number, y: number, width: number, height: number): this {\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    this.rect(x, y, width, height, this.attributes);\n    return this;\n  }\n\n  clearRect(x: number, y: number, width: number, height: number): this {\n    // TODO(GCR): Improve implementation of this...\n    // Currently it draws a box of the background color, rather\n    // than creating alpha through lower z-levels.\n    //\n    // See the implementation of this in SVGKit:\n    // http://sourceforge.net/projects/svgkit/\n    // as a starting point.\n    //\n    // Adding a large number of transform paths (as we would\n    // have to do) could be a real performance hit.  Since\n    // tabNote seems to be the only module that makes use of this\n    // it may be worth creating a separate tabStave that would\n    // draw lines around locations of tablature fingering.\n    //\n    this.rect(x, y, width, height, this.background_attributes);\n    return this;\n  }\n\n  // ## Paths:\n\n  beginPath(): this {\n    this.path = '';\n    this.pen.x = NaN;\n    this.pen.y = NaN;\n    return this;\n  }\n\n  moveTo(x: number, y: number): this {\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x: number, y: number): this {\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x: number, y: number): this {\n    this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1: number, y1: number, x: number, y: number): this {\n    this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas arc method.\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, antiClockwise: boolean): this {\n    function normalizeAngle(angle: number) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    // Swap the start and end angles if necessary.\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n    } else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n    return this;\n  }\n\n  arcHelper(x: number, y: number, radius: number, startAngle: number, endAngle: number, antiClockwise: boolean): void {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n    if (antiClockwise) {\n      sweepFlag = 1;\n      if (endAngle - startAngle < Math.PI) {\n        largeArcFlag = 1;\n      }\n    } else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path += `M${x1} ${y1} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${x2} ${y2}`;\n\n    if (!isNaN(this.pen.x) && !isNaN(this.pen.y)) {\n      this.path += 'M' + this.pen.x + ' ' + this.pen.y;\n    }\n  }\n\n  closePath(): this {\n    this.path += 'Z';\n    return this;\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow(): this {\n    // Calculate the width & paths of the glow:\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n      // Stroke at varying widths to create effect of gaussian blur:\n      for (let i = 1; i <= num_paths; i++) {\n        const attributes: Attributes = {\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +(((sa.width * 0.4) / num_paths) * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n        };\n\n        const path = this.create('path');\n        attributes.d = this.path;\n        this.applyAttributes(path, attributes);\n        this.add(path);\n      }\n    }\n    return this;\n  }\n\n  fill(attributes: Attributes): this {\n    // If our current path is set to glow, make it glow\n    this.glow();\n\n    const path = this.create('path');\n    if (typeof attributes === 'undefined') {\n      attributes = { ...this.attributes, stroke: 'none' };\n    }\n\n    attributes.d = this.path;\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  stroke(): this {\n    // If our current path is set to glow, make it glow.\n    this.glow();\n\n    const path = this.create('path');\n    const attributes: Attributes = {\n      ...this.attributes,\n      fill: 'none',\n      'stroke-width': this.lineWidth,\n      d: this.path,\n    };\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  // ## Text Methods:\n  measureText(text: string): SVGRect {\n    const txt = this.create('text') as SVGTextElement;\n    if (typeof txt.getBBox !== 'function') {\n      return { x: 0, y: 0, width: 0, height: 0 } as SVGRect;\n    }\n\n    txt.textContent = text;\n    this.applyAttributes(txt, this.attributes);\n\n    // Temporarily add it to the document for measurement.\n    this.svg.appendChild(txt);\n\n    let bbox: SVGRect = txt.getBBox();\n    if (this.ie && text !== '' && this.attributes['font-style'] === 'italic') {\n      bbox = this.ieMeasureTextFix(bbox);\n    }\n\n    this.svg.removeChild(txt);\n    return bbox;\n  }\n\n  ieMeasureTextFix(bbox: DOMRect): SVGRect {\n    // Internet Explorer over-pads text in italics,\n    // resulting in giant width estimates for measureText.\n    // To fix this, we use this formula, tested against\n    // ie 11:\n    // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96\n    // And then subtract the overestimate from calculated width.\n\n    const fontSize = Number(this.fontSize);\n    const m = 1.196;\n    const b = 1.9598;\n    const widthCorrection = m * fontSize + b;\n    const width = bbox.width - widthCorrection;\n    const height = bbox.height - 1.5;\n\n    // Get non-protected copy:\n    const box = {\n      x: bbox.x,\n      y: bbox.y,\n      width,\n      height,\n    };\n\n    return box as SVGRect;\n  }\n\n  fillText(text: string, x: number, y: number): this {\n    if (!text || text.length <= 0) {\n      return this;\n    }\n    const attributes: Attributes = {\n      ...this.attributes,\n      stroke: 'none',\n      x,\n      y,\n    };\n\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n    return this;\n  }\n\n  save(): this {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n        scale: this.state.scale,\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n      lineWidth: this.lineWidth,\n    });\n    return this;\n  }\n\n  restore(): this {\n    // TODO(0xfe): State needs to be deep-restored.\n    const savedState = this.state_stack.pop();\n    if (savedState) {\n      const state = savedState;\n      this.state['font-family'] = state.state['font-family'];\n      this.state['font-weight'] = state.state['font-weight'];\n      this.state['font-style'] = state.state['font-style'];\n      this.state['font-size'] = state.state['font-size'];\n      this.state.scale = state.state.scale;\n\n      this.attributes['font-family'] = state.attributes['font-family'];\n      this.attributes['font-weight'] = state.attributes['font-weight'];\n      this.attributes['font-style'] = state.attributes['font-style'];\n      this.attributes['font-size'] = state.attributes['font-size'];\n\n      this.attributes.fill = state.attributes.fill;\n      this.attributes.stroke = state.attributes.stroke;\n      this.attributes['stroke-width'] = state.attributes['stroke-width'];\n      this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n\n      this.shadow_attributes.width = state.shadow_attributes.width;\n      this.shadow_attributes.color = state.shadow_attributes.color;\n\n      this.lineWidth = state.lineWidth;\n    }\n    return this;\n  }\n\n  set font(value: string) {\n    this.setRawFont(value);\n  }\n\n  get font(): string {\n    return this.fontString;\n  }\n\n  set fillStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.setFillStyle(style as string);\n  }\n\n  get fillStyle(): string | CanvasGradient | CanvasPattern {\n    return this.attributes.fill;\n  }\n\n  set strokeStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.setStrokeStyle(style as string);\n  }\n\n  get strokeStyle(): string | CanvasGradient | CanvasPattern {\n    return this.attributes.stroke;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { CanvasContext } from './canvascontext';\nimport { SVGContext } from './svgcontext';\nimport { RenderContext } from './types/common';\nimport { RuntimeError } from './util';\n\n// A ContextBuilder is either Renderer.getSVGContext or Renderer.getCanvasContext.\nexport type ContextBuilder = typeof Renderer.getSVGContext | typeof Renderer.getCanvasContext;\n\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n  protected elementId?: string;\n  protected element: HTMLCanvasElement | HTMLDivElement;\n  protected backend: number;\n\n  protected ctx: RenderContext;\n  // eslint-disable-next-line\n  protected paper: any;\n\n  static readonly Backends = {\n    CANVAS: 1,\n    SVG: 2,\n  };\n\n  // End of line types\n  static readonly LineEndType = {\n    NONE: 1, // No leg\n    UP: 2, // Upward leg\n    DOWN: 3, // Downward leg\n  };\n\n  /**\n   * Set this to true if you're using VexFlow inside a runtime\n   * that does not allow modifying canvas objects. There is a small\n   * performance degradation due to the extra indirection.\n   */\n  static readonly USE_CANVAS_PROXY = false;\n\n  static lastContext?: RenderContext = undefined;\n\n  static buildContext(\n    elementId: string,\n    backend: number,\n    width: number,\n    height: number,\n    background?: string\n  ): RenderContext {\n    const renderer = new Renderer(elementId, backend);\n    if (width && height) {\n      renderer.resize(width, height);\n    }\n\n    if (!background) background = '#FFF';\n    const ctx = renderer.getContext();\n    ctx.setBackgroundFillStyle(background);\n    Renderer.lastContext = ctx;\n    return ctx;\n  }\n\n  static getCanvasContext(elementId: string, width: number, height: number, background?: string): RenderContext {\n    return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n  }\n\n  static getSVGContext(elementId: string, width: number, height: number, background?: string): RenderContext {\n    return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n  }\n\n  // eslint-disable-next-line\n  static bolsterCanvasContext(ctx: any): RenderContext {\n    if (Renderer.USE_CANVAS_PROXY) {\n      return new CanvasContext(ctx);\n    }\n\n    // Modify the CanvasRenderingContext2D to include the following methods, if they do not already exist.\n    // TODO: Is a Proxy object appropriate here?\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n    const methodNames = [\n      'clear',\n      'setFont',\n      'setRawFont',\n      'setFillStyle',\n      'setBackgroundFillStyle',\n      'setStrokeStyle',\n      'setShadowColor',\n      'setShadowBlur',\n      'setLineWidth',\n      'setLineCap',\n      'openGroup',\n      'closeGroup',\n      'getGroup',\n    ];\n\n    ctx.vexFlowCanvasContext = ctx;\n\n    methodNames.forEach((methodName) => {\n      if (!(methodName in ctx)) {\n        // eslint-disable-next-line\n        ctx[methodName] = (CanvasContext.prototype as any)[methodName];\n      }\n    });\n\n    return ctx;\n  }\n\n  // Draw a dashed line (horizontal, vertical or diagonal\n  // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n  // setting the second number to 0 draws a solid line.\n  static drawDashedLine(\n    context: RenderContext,\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    dashPattern: number[]\n  ): void {\n    context.beginPath();\n\n    const dx = toX - fromX;\n    const dy = toY - fromY;\n    const angle = Math.atan2(dy, dx);\n    let x = fromX;\n    let y = fromY;\n    context.moveTo(fromX, fromY);\n    let idx = 0;\n    let draw = true;\n    while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n      const dashLength = dashPattern[idx++ % dashPattern.length];\n      const nx = x + Math.cos(angle) * dashLength;\n      x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n      const ny = y + Math.sin(angle) * dashLength;\n      y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n      if (draw) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n      draw = !draw;\n    }\n\n    context.closePath();\n    context.stroke();\n  }\n\n  /**\n   * @param canvasId can be:\n   *   - a string element ID (of a canvas or div element)\n   *   - a canvas element\n   *   - a div element, which will contain the SVG output\n   * @param backend Renderer.Backends.CANVAS or Renderer.Backends.SVG\n   */\n  constructor(canvasId: string | HTMLCanvasElement | HTMLDivElement, backend: number) {\n    if (!canvasId) {\n      throw new RuntimeError('BadArgument', 'Invalid id for renderer.');\n    } else if (typeof canvasId === 'string') {\n      this.elementId = canvasId;\n      this.element = document.getElementById(canvasId as string) as HTMLCanvasElement | HTMLDivElement;\n    } else if ('getContext' in canvasId /* HTMLCanvasElement */) {\n      this.element = canvasId as HTMLCanvasElement;\n    } else {\n      // Assume it's a HTMLDivElement.\n      this.element = canvasId as HTMLDivElement;\n    }\n\n    // Verify backend and create context\n    this.backend = backend;\n    if (this.backend === Renderer.Backends.CANVAS) {\n      const canvasElement = this.element as HTMLCanvasElement;\n      if (!canvasElement.getContext) {\n        throw new RuntimeError('BadElement', `Can't get canvas context from element: ${canvasId}`);\n      }\n      this.ctx = Renderer.bolsterCanvasContext(canvasElement.getContext('2d'));\n    } else if (this.backend === Renderer.Backends.SVG) {\n      this.ctx = new SVGContext(this.element);\n    } else {\n      throw new RuntimeError('InvalidBackend', `No support for backend: ${this.backend}`);\n    }\n  }\n\n  resize(width: number, height: number): this {\n    if (this.backend === Renderer.Backends.CANVAS) {\n      const canvasElement = this.element as HTMLCanvasElement;\n      [width, height] = CanvasContext.SanitizeCanvasDims(width, height);\n\n      const devicePixelRatio = window.devicePixelRatio || 1;\n\n      canvasElement.width = width * devicePixelRatio;\n      canvasElement.height = height * devicePixelRatio;\n      canvasElement.style.width = width + 'px';\n      canvasElement.style.height = height + 'px';\n\n      this.ctx.scale(devicePixelRatio, devicePixelRatio);\n    } else {\n      this.ctx.resize(width, height);\n    }\n\n    return this;\n  }\n\n  getContext(): RenderContext {\n    return this.ctx;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\n\nimport { RuntimeError } from './util';\nimport { Modifier } from './modifier';\nimport { Renderer } from './renderer';\nimport { StaveNote } from './stavenote';\nimport { FontInfo } from './types/common';\nimport { Note } from './note';\nimport { ModifierContextState } from './modifiercontext';\nimport { isStaveNote, isStemmableNote } from './typeguard';\n\nexport class StringNumber extends Modifier {\n  protected radius: number;\n\n  protected last_note?: Note;\n  protected string_number: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected dashed: boolean;\n  protected leg: number;\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'stringnumber';\n  }\n\n  // ## Static Methods\n  // Arrange string numbers inside a `ModifierContext`\n  static format(nums: StringNumber[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const right_shift = state.right_shift;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shift_left = 0;\n    let shift_right = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote();\n      const pos = num.getPosition();\n\n      if (!isStaveNote(note)) {\n        throw new RuntimeError('NoStaveNote');\n      }\n\n      const index = num.checkIndex();\n      const props = note.getKeyProps()[index];\n\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);\n          }\n          if (right_shift === 0) {\n            shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        pos,\n        note,\n        num,\n        line: props.line,\n        shiftL: shift_left,\n        shiftR: shift_right,\n      });\n    }\n\n    // Sort string numbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let num_shiftR = 0;\n    let x_widthL = 0;\n    let x_widthR = 0;\n    let last_line = null;\n    let last_note = null;\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const note = nums_list[i].note;\n      const pos = nums_list[i].pos;\n      const num = nums_list[i].num;\n      const line = nums_list[i].line;\n      const shiftR = nums_list[i].shiftR;\n\n      // Reset the position of the string number every line.\n      if (line !== last_line || note !== last_note) {\n        num_shiftR = right_shift + shiftR;\n      }\n\n      const num_width = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift);\n        num_shift = shift_left + num_width; // spacing\n        x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(num_shiftR);\n        num_shift += num_width; // spacing\n        x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\n      }\n      last_line = line;\n      last_note = note;\n    }\n\n    state.left_shift += x_widthL;\n    state.right_shift += x_widthR;\n    return true;\n  }\n\n  constructor(number: string) {\n    super();\n    this.setAttribute('type', 'StringNumber');\n\n    this.string_number = number;\n    this.setWidth(20); // ???\n    this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.dashed = true; // true - draw dashed extension  false - no extension\n    this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n    this.radius = 8;\n    this.font = {\n      family: 'sans-serif',\n      size: 10,\n      weight: 'bold',\n    };\n  }\n\n  getCategory(): string {\n    return StringNumber.CATEGORY;\n  }\n\n  setLineEndType(leg: number): this {\n    if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n      this.leg = leg;\n    }\n    return this;\n  }\n\n  setStringNumber(number: string): this {\n    this.string_number = number;\n    return this;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  setLastNote(note: Note): this {\n    this.last_note = note;\n    return this;\n  }\n\n  setDashed(dashed: boolean): this {\n    this.dashed = dashed;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const line_space = note.checkStave().getOptions().spacing_between_lines_px;\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n      case Modifier.Position.BELOW: {\n        const stem_ext = note.getStemExtents();\n        let top = stem_ext.topY;\n        let bottom = stem_ext.baseY + 2;\n\n        if (note.getStemDirection() === StaveNote.STEM_DOWN) {\n          top = stem_ext.baseY;\n          bottom = stem_ext.topY - 2;\n        }\n\n        if (this.position === Modifier.Position.ABOVE) {\n          dot_y = note.hasStem() ? top - line_space * 1.75 : start.y - line_space * 1.75;\n        } else {\n          dot_y = note.hasStem() ? bottom + line_space * 1.5 : start.y + line_space * 1.75;\n        }\n\n        dot_y += this.y_shift + this.y_offset;\n\n        break;\n      }\n      case Modifier.Position.LEFT:\n        dot_x -= this.radius / 2 + 5;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += this.radius / 2 + 6;\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n    ctx.setLineWidth(1.5);\n    ctx.stroke();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const x = dot_x - ctx.measureText(this.string_number).width / 2;\n    ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n\n    const lastNote = this.last_note;\n    if (isStemmableNote(lastNote)) {\n      // Only StemmableNote objects have getStemX().\n      const end = lastNote.getStemX() - note.getX() + 5;\n      ctx.setStrokeStyle('#000000');\n      ctx.setLineCap('round');\n      ctx.setLineWidth(0.6);\n      if (this.dashed) {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n      } else {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n      }\n\n      let len;\n      let pattern;\n      switch (this.leg) {\n        case Renderer.LineEndType.UP:\n          len = -10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        case Renderer.LineEndType.DOWN:\n          len = 10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        default:\n          break;\n      }\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { ModifierContextState } from './modifiercontext';\nimport { Builder } from './easyscore';\nimport { TabNote } from './tabnote';\nimport { GraceNote } from './gracenote';\nimport { isTabNote } from './typeguard';\n\nexport interface ArticulationStruct {\n  code?: string;\n  aboveCode?: string;\n  belowCode?: string;\n  between_lines: boolean;\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Articulation.DEBUG) log('Vex.Flow.Articulation', args);\n}\n\nconst { ABOVE, BELOW } = Modifier.Position;\n\nfunction roundToNearestHalf(mathFn: (a: number) => number, value: number): number {\n  return mathFn(value / 0.5) * 0.5;\n}\n\n// This includes both staff and ledger lines\nfunction isWithinLines(line: number, position: number): boolean {\n  return position === ABOVE ? line <= 5 : line >= 1;\n}\n\nfunction getRoundingFunction(line: number, position: number): (a: number) => number {\n  if (isWithinLines(line, position)) {\n    if (position === ABOVE) {\n      return Math.ceil;\n    } else {\n      return Math.floor;\n    }\n  } else {\n    return Math.round;\n  }\n}\n\nfunction snapLineToStaff(canSitBetweenLines: boolean, line: number, position: number, offsetDirection: number): number {\n  // Initially, snap to nearest staff line or space\n  const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n  const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n  const onStaffLine = snappedLine % 1 === 0;\n\n  if (canSnapToStaffSpace && onStaffLine) {\n    const HALF_STAFF_SPACE = 0.5;\n    return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n  } else {\n    return snappedLine;\n  }\n}\n\nfunction getTopY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveOrGraceNoteCategory(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return stemBaseY;\n      }\n    } else {\n      return Math.min(...note.getYs());\n    }\n  } else if (isTabNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return note.checkStave().getYForTopText(textLine);\n      }\n    } else {\n      return note.checkStave().getYForTopText(textLine);\n    }\n  } else {\n    throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\nfunction getBottomY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveOrGraceNoteCategory(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemBaseY;\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return Math.max(...note.getYs());\n    }\n  } else if (isTabNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return note.checkStave().getYForBottomText(textLine);\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return note.checkStave().getYForBottomText(textLine);\n    }\n  } else {\n    throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nfunction getInitialOffset(note: Note, position: number): number {\n  const isOnStemTip =\n    (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n    (position === BELOW && note.getStemDirection() === Stem.DOWN);\n\n  if (isStaveOrGraceNoteCategory(note)) {\n    if (note.hasStem() && isOnStemTip) {\n      return 0.5;\n    } else {\n      // this amount is larger than the stem-tip offset because we start from\n      // the center of the notehead\n      return 1;\n    }\n  } else {\n    if (note.hasStem() && isOnStemTip) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}\n\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nfunction isStaveOrGraceNoteCategory(note: Note): boolean {\n  const category = note.getCategory();\n  return category === StaveNote.CATEGORY || category === GraceNote.CATEGORY;\n}\n\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `Vex.Flow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n  /** Articulation code provided to the constructor. */\n  readonly type: string;\n  protected static readonly INITIAL_OFFSET: number = -0.5;\n\n  protected render_options: { font_scale: number };\n  // articulation defined calling reset in constructor\n  protected articulation!: ArticulationStruct;\n  // glyph defined calling reset in constructor\n  protected glyph!: Glyph;\n  /** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Articulations category string. */\n  static get CATEGORY(): string {\n    return 'articulations';\n  }\n\n  /**\n   * FIXME:\n   * Most of the complex formatting logic (ie: snapping to space) is\n   * actually done in .render(). But that logic belongs in this method.\n   *\n   * Unfortunately, this isn't possible because, by this point, stem lengths\n   * have not yet been finalized. Finalized stem lengths are required to determine the\n   * initial position of any stem-side articulation.\n   *\n   * This indicates that all objects should have their stave set before being\n   * formatted. It can't be an optional if you want accurate vertical positioning.\n   * Consistently positioned articulations that play nice with other modifiers\n   * won't be possible until we stop relying on render-time formatting.\n   *\n   * Ideally, when this function has completed, the vertical articulation positions\n   * should be ready to render without further adjustment. But the current state\n   * is far from this ideal.\n   */\n  static format(articulations: Articulation[], state: ModifierContextState): boolean {\n    if (!articulations || articulations.length === 0) return false;\n\n    const isAbove = (artic: Articulation) => artic.getPosition() === ABOVE;\n    const isBelow = (artic: Articulation) => artic.getPosition() === BELOW;\n    const margin = 0.5;\n    const getIncrement = (articulation: Articulation, line: number, position: number) =>\n      roundToNearestHalf(\n        getRoundingFunction(line, position),\n        defined(articulation.glyph.getMetrics().height) / 10 + margin\n      );\n\n    articulations.filter(isAbove).forEach((articulation) => {\n      articulation.setTextLine(state.top_text_line);\n      state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);\n    });\n\n    articulations.filter(isBelow).forEach((articulation) => {\n      articulation.setTextLine(state.text_line);\n      state.text_line += getIncrement(articulation, state.text_line, BELOW);\n    });\n\n    const width = articulations\n      .map((articulation) => articulation.getWidth())\n      .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  static easyScoreHook({ articulations }: { articulations: string }, note: StaveNote, builder: Builder): void {\n    if (!articulations) return;\n\n    const articNameToCode: Record<string, string> = {\n      staccato: 'a.',\n      tenuto: 'a-',\n      accent: 'a>',\n    };\n\n    articulations\n      .split(',')\n      .map((articString) => articString.trim().split('.'))\n      .map(([name, position]) => {\n        const artic: { type: string; position?: number } = { type: articNameToCode[name] };\n        if (position) artic.position = Modifier.PositionString[position];\n        return builder.getFactory().Articulation(artic);\n      })\n      .map((artic) => note.addModifier(artic, 0));\n  }\n\n  /**\n   * Create a new articulation.\n   * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts`\n   */\n  constructor(type: string) {\n    super();\n    this.setAttribute('type', 'Articulation');\n\n    this.type = type;\n    this.position = BELOW;\n    this.render_options = {\n      font_scale: 38,\n    };\n\n    this.reset();\n  }\n\n  protected reset(): void {\n    this.articulation = Flow.articulationCodes(this.type);\n    const articulation = defined(this.articulation, 'ArgumentError', `Articulation not found: ${this.type}`);\n    const code = (this.position === ABOVE ? articulation.aboveCode : articulation.belowCode) || articulation.code;\n    this.glyph = new Glyph(code ?? '', this.render_options.font_scale);\n\n    this.setWidth(defined(this.glyph.getMetrics().width));\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return Articulation.CATEGORY;\n  }\n\n  /** Render articulation in position next to note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const index = this.checkIndex();\n    const { position, glyph, text_line: textLine } = this;\n    const canSitBetweenLines = this.articulation.between_lines;\n\n    const stave = note.checkStave();\n    const staffSpace = stave.getSpacingBetweenLines();\n    const isTab = isTabNote(note);\n\n    // Articulations are centered over/under the note head.\n    const { x } = note.getModifierStartXY(position, index);\n    const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n\n    const initialOffset = getInitialOffset(note, position);\n\n    const padding = this.musicFont.lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);\n\n    let y = (\n      {\n        [ABOVE]: () => {\n          glyph.setOrigin(0.5, 1);\n          const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n        [BELOW]: () => {\n          glyph.setOrigin(0.5, 0);\n          const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n      } as Record<number, () => number>\n    )[position]();\n\n    if (!isTab) {\n      const offsetDirection = position === ABOVE ? -1 : +1;\n      const noteLine = isTab\n        ? (note as TabNote).getPositions()[index].str\n        : (note as StaveNote).getKeyProps()[index].line;\n      const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n      const articLine = distanceFromNote + Number(noteLine);\n      const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n\n      if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);\n\n      y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;\n    }\n\n    L(`Rendering articulation at (x: ${x}, y: ${y})`);\n\n    glyph.render(ctx, x, y);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\n\nimport { RuntimeError } from './util';\nimport { Tickable } from './tickable';\nimport { Fraction } from './fraction';\nimport { NoteMetrics } from './note';\nimport { Stave } from './stave';\n\nexport interface TickContextMetrics extends NoteMetrics {\n  totalLeftPx: number;\n  totalRightPx: number;\n}\n\nexport interface TickContextOptions {\n  tickID: number;\n}\n\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext extends Tickable {\n  protected readonly tickID: number;\n  protected readonly tickables: Tickable[];\n  protected readonly tickablesByVoice: Record<string, Tickable>;\n  protected currentTick: Fraction;\n  protected maxTicks: Fraction;\n  protected padding: number;\n  protected xBase: number;\n  protected x: number;\n  protected xOffset: number;\n  protected notePx: number;\n  protected glyphPx: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected modLeftPx: number;\n  protected modRightPx: number;\n  protected totalLeftPx: number;\n  protected totalRightPx: number;\n  protected maxTickable?: Tickable;\n  protected minTicks?: Fraction;\n  protected minTickable?: Tickable;\n  tContexts: TickContext[];\n\n  // eslint-disable-next-line\n  draw(...args: any[]): void {\n    // DO NOTHING.\n  }\n\n  static getNextContext(tContext: TickContext): TickContext | undefined {\n    const contexts = tContext.tContexts;\n    const index = contexts.indexOf(tContext);\n\n    if (index + 1 < contexts.length) return contexts[index + 1];\n  }\n\n  constructor(options?: TickContextOptions) {\n    super();\n    this.tickID = options && options.tickID ? options.tickID : 0;\n    this.setAttribute('type', 'TickContext');\n    this.currentTick = new Fraction(0, 1);\n\n    this.maxTicks = new Fraction(0, 1);\n    this.maxTickable = undefined; // Biggest tickable\n    this.minTicks = undefined; // this can remian null if all tickables have ignore_ticks\n    this.minTickable = undefined;\n\n    this.padding = 1; // padding on each side (width += padding * 2)\n    this.x = 0;\n    this.xBase = 0; // base x position without xOffset\n    this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n    this.tickables = []; // Notes, tabs, chords, lyrics.\n    this.tickablesByVoice = {}; // Tickables indexed by voice number\n\n    // Formatting metrics\n    this.notePx = 0; // width of widest note in this context\n    this.glyphPx = 0; // width of glyph (note head)\n    this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n    this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n    this.modLeftPx = 0; // Left modifier pixels\n    this.modRightPx = 0; // Right modifier pixels\n    this.totalLeftPx = 0; // Total left pixels\n    this.totalRightPx = 0; // Total right pixels\n    this.tContexts = []; // Parent array of tick contexts\n  }\n\n  getTickID(): number {\n    return this.tickID;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    this.xBase = x;\n    this.xOffset = 0;\n    return this;\n  }\n\n  getXBase(): number {\n    return this.xBase;\n  } // use of xBase and xOffset is optional, avoids offset creep\n\n  setXBase(xBase: number): void {\n    this.xBase = xBase;\n    this.x = xBase + this.xOffset;\n  }\n\n  getXOffset(): number {\n    return this.xOffset;\n  }\n\n  setXOffset(xOffset: number): void {\n    this.xOffset = xOffset;\n    this.x = this.xBase + xOffset;\n  }\n\n  getWidth(): number {\n    return this.width + this.padding * 2;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  getMaxTicks(): Fraction {\n    return this.maxTicks;\n  }\n\n  getMinTicks(): Fraction | undefined {\n    return this.minTicks;\n  }\n\n  getMaxTickable(): Tickable | undefined {\n    return this.maxTickable;\n  }\n\n  getMinTickable(): Tickable | undefined {\n    return this.minTickable;\n  }\n\n  getTickables(): Tickable[] {\n    return this.tickables;\n  }\n\n  /**\n   * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n   *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n   * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n   */\n  getTickableForVoice(voiceIndex: number): Tickable {\n    return this.tickablesByVoice[voiceIndex];\n  }\n\n  getTickablesByVoice(): Record<string, Tickable> {\n    return this.tickablesByVoice;\n  }\n\n  getCenterAlignedTickables(): Tickable[] {\n    return this.tickables.filter((tickable) => tickable.isCenterAligned());\n  }\n\n  /** Gets widths context, note and left/right modifiers for formatting. */\n  getMetrics(): TickContextMetrics {\n    const {\n      width,\n      glyphPx,\n      notePx,\n      leftDisplacedHeadPx,\n      rightDisplacedHeadPx,\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    } = this;\n    return {\n      width, // Width of largest tickable in context\n      glyphPx, // Width of largest glyph (note head)\n      notePx, // Width of notehead + stem\n      leftDisplacedHeadPx, // Left modifiers\n      rightDisplacedHeadPx, // Right modifiers\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    };\n  }\n\n  getCurrentTick(): Fraction {\n    return this.currentTick;\n  }\n\n  setCurrentTick(tick: Fraction): void {\n    this.currentTick = tick;\n    this.setPreFormatted(false);\n  }\n\n  addTickable(tickable: Tickable, voiceIndex?: number): this {\n    if (!tickable) {\n      throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n    }\n\n    if (!tickable.shouldIgnoreTicks()) {\n      this.ignore_ticks = false;\n\n      const ticks = tickable.getTicks();\n\n      if (ticks.greaterThan(this.maxTicks)) {\n        this.maxTicks = ticks.clone();\n        this.maxTickable = tickable;\n      }\n\n      if (this.minTicks == null) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      } else if (ticks.lessThan(this.minTicks)) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      }\n    }\n\n    tickable.setTickContext(this);\n    this.tickables.push(tickable);\n    this.tickablesByVoice[voiceIndex || 0] = tickable;\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      tickable.preFormat();\n      const metrics = tickable.getMetrics();\n\n      // Maintain max displaced head pixels from all tickables in the context\n      this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n      this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n\n      // Maintain the widest note for all tickables in the context\n      this.notePx = Math.max(this.notePx, metrics.notePx);\n\n      // Maintain the widest note head\n      this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);\n\n      // Total modifier shift\n      this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n      this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n\n      // Total shift\n      this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n      this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n\n      // Recalculate the tick context total width\n      this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n    }\n\n    return this;\n  }\n\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    throw new RuntimeError('NotImplemented', 'getStave() not implemented.');\n  }\n\n  // eslint-disable-next-line\n  setStave(stave: Stave): this {\n    throw new RuntimeError('NotImplemented', 'setStave() not implemented.');\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { TickContext } from './tickcontext';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\nimport { StemmableNote } from './stemmablenote';\nimport { ModifierContextState } from './modifiercontext';\nimport { TabNote } from './tabnote';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Ornament.DEBUG) log('Vex.Flow.Ornament', args);\n}\n\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  protected ornament: {\n    code: string;\n  };\n  protected stemUpYOffset: number;\n  protected ornamentAlignWithNoteHead: string[] | boolean;\n  protected type: string;\n\n  protected delayed: boolean;\n  protected reportedWidth: number;\n  protected adjustForStemDirection: boolean;\n  protected render_options: {\n    accidentalUpperPadding: number;\n    accidentalLowerPadding: number;\n    font_scale: number;\n  };\n  protected glyph: Glyph;\n  protected accidentalUpper?: Glyph;\n  protected accidentalLower?: Glyph;\n  protected delayXShift?: number;\n\n  /** Ornaments category string. */\n  static get CATEGORY(): string {\n    return 'ornaments';\n  }\n\n  /** Arrange ornaments inside `ModifierContext` */\n  static format(ornaments: Ornament[], state: ModifierContextState): boolean {\n    if (!ornaments || ornaments.length === 0) return false;\n\n    let width = 0; // width is used by ornaments, which are always centered on the note head\n    let right_shift = state.right_shift; // jazz ornaments calculate r/l shift separately\n    let left_shift = state.left_shift;\n    let yOffset = 0;\n\n    for (let i = 0; i < ornaments.length; ++i) {\n      const ornament = ornaments[i];\n      const increment = 2;\n\n      if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {\n        ornament.x_shift += right_shift + 2;\n      }\n      if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {\n        ornament.x_shift -= left_shift + 2;\n      }\n      if (ornament.reportedWidth && ornament.x_shift < 0) {\n        left_shift += ornament.reportedWidth;\n      } else if (ornament.reportedWidth && ornament.x_shift > 0) {\n        right_shift += ornament.reportedWidth;\n      } else {\n        width = Math.max(ornament.getWidth(), width);\n      }\n      // articulations above/below the line can be stacked.\n      if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {\n        // Unfortunately we don't know the stem direction.  So we base it\n        // on the line number, but also allow it to be overridden.\n        const ornamentNote = defined(ornament.note, 'NoAttachedNote');\n        if (ornamentNote.getLineNumber() >= 3 || ornament.getPosition() === Modifier.Position.ABOVE) {\n          state.top_text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset -= ornament.glyph.bbox.getH();\n        } else {\n          state.text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset += ornament.glyph.bbox.getH();\n        }\n      } else {\n        if (ornament.getPosition() === Modifier.Position.ABOVE) {\n          ornament.setTextLine(state.top_text_line);\n          state.top_text_line += increment;\n        } else {\n          ornament.setTextLine(state.text_line);\n          state.text_line += increment;\n        }\n      }\n    }\n\n    // Note: 'legit' ornaments don't consider other modifiers when calculating their\n    // X position, but jazz ornaments sometimes need to.\n    state.left_shift = left_shift + width / 2;\n    state.right_shift = right_shift + width / 2;\n    return true;\n  }\n\n  /**\n   * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n   * these are generally on the top of the staff.\n   */\n  static get ornamentNoteTransition(): string[] {\n    return ['flip', 'jazzTurn', 'smear'];\n  }\n\n  /**\n   * ornamentAttack indicates something that happens in the attach, placed before the note and\n   * any accidentals\n   */\n  static get ornamentAttack(): string[] {\n    return ['scoop'];\n  }\n\n  /**\n   * The ornament is aligned based on the note head, but without regard to whether the\n   * stem goes up or down.\n   */\n  static get ornamentAlignWithNoteHead(): string[] {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];\n  }\n\n  /**\n   * An ornament that happens on the release of the note, generally placed after the\n   * note and overlapping the next beat/measure..\n   */\n  static get ornamentRelease(): string[] {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n  }\n\n  /** ornamentArticulation goes above/below the note based on space availablity */\n  static get ornamentArticulation(): string[] {\n    return ['bend', 'plungerClosed', 'plungerOpen'];\n  }\n\n  /**\n   * Legacy ornaments have hard-coded metrics.  If additional ornament types are\n   * added, get their metrics here.\n   */\n  // eslint-disable-next-line\n  getMetrics(): any {\n    return this.getFontStack()[0].getMetrics().glyphs.jazzOrnaments[this.ornament.code];\n  }\n\n  /**\n   * Create a new ornament of type `type`, which is an entry in\n   * `Vex.Flow.ornamentCodes` in `tables.ts`.\n   */\n  constructor(type: string) {\n    super();\n    this.setAttribute('type', 'Ornament');\n\n    this.type = type;\n    this.delayed = false;\n\n    this.render_options = {\n      font_scale: 38,\n      accidentalLowerPadding: 3,\n      accidentalUpperPadding: 3,\n    };\n\n    this.ornament = Flow.ornamentCodes(this.type);\n\n    // new ornaments have their origin at the origin, and have more specific\n    // metrics.  Legacy ornaments do some\n    // x scaling, and have hard-coded metrics\n    const metrics = this.getMetrics();\n\n    // some jazz ornaments are above or below depending on stem direction.\n    this.adjustForStemDirection = false;\n\n    // some jazz ornaments like falls are supposed to overlap with future bars\n    // and so we report a different width than they actually take up.\n    this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;\n\n    this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;\n\n    this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n\n    if (!this.ornament) {\n      throw new RuntimeError('ArgumentError', `Ornament not found: '${this.type}'`);\n    }\n\n    this.x_shift = metrics ? metrics.xOffset : 0;\n    this.y_shift = metrics ? metrics.yOffset : 0;\n\n    this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale, {\n      category: `ornament.${this.ornament.code}`,\n    });\n\n    // Is this a jazz ornament that goes between this note and the next note.\n    if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      this.delayed = true;\n    }\n\n    // Legacy ornaments need this.  I don't know why, but horizontal spacing issues\n    // happen if I don't set it.\n    if (!metrics) {\n      this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\n    }\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return Ornament.CATEGORY;\n  }\n\n  /** Set whether the ornament is to be delayed. */\n  setDelayed(delayed: boolean): this {\n    this.delayed = delayed;\n    return this;\n  }\n\n  /** Set the upper accidental for the ornament. */\n  setUpperAccidental(accid: string): this {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalUpper = new Glyph(Flow.accidentalCodes(accid).code, scale);\n    this.accidentalUpper.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  /** Set the lower accidental for the ornament. */\n  setLowerAccidental(accid: string): this {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalLower = new Glyph(Flow.accidentalCodes(accid).code, scale);\n    this.accidentalLower.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  /** Render ornament in position next to note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote() as StemmableNote;\n    this.setRendered();\n\n    const stemDir = note.getStemDirection();\n    const stave = note.checkStave();\n\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n\n    // Get stem extents\n    const stemExtents = note.checkStem().getExtents();\n    let y = stemDir === StaveNote.STEM_DOWN ? stemExtents.baseY : stemExtents.topY;\n\n    // TabNotes don't have stems attached to them. Tab stems are rendered outside the stave.\n    if (note.getCategory() === TabNote.CATEGORY) {\n      if (note.hasStem()) {\n        if (stemDir === StaveNote.STEM_DOWN) {\n          y = stave.getYForTopText(this.text_line);\n        }\n      } else {\n        // Without a stem\n        y = stave.getYForTopText(this.text_line);\n      }\n    }\n\n    const isPlacedOnNoteheadSide = stemDir === StaveNote.STEM_DOWN;\n    const spacing = stave.getSpacingBetweenLines();\n    let lineSpacing = 1;\n\n    // Beamed stems are longer than quarter note stems, adjust accordingly\n    if (!isPlacedOnNoteheadSide && note.hasBeam()) {\n      lineSpacing += 0.5;\n    }\n\n    const totalSpacing = spacing * (this.text_line + lineSpacing);\n    const glyphYBetweenLines = y - totalSpacing;\n\n    // Get initial coordinates for the modifier position\n    const start = note.getModifierStartXY(this.position, this.index);\n    let glyphX = start.x;\n\n    // If the ornament is aligned with the note head, don't consider the stave y\n    // but use the 'natural' modifier y\n    let glyphY = this.ornamentAlignWithNoteHead\n      ? start.y\n      : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n    glyphY += this.y_shift;\n\n    // Ajdust x position if ornament is delayed\n    if (this.delayed) {\n      let delayXShift = 0;\n      const startX = glyphX - (stave.getX() - 10);\n      if (this.delayXShift !== undefined) {\n        delayXShift = this.delayXShift;\n      } else {\n        delayXShift += this.glyph.getMetrics().width / 2;\n        const nextContext = TickContext.getNextContext(note.getTickContext());\n        if (nextContext) {\n          delayXShift += (nextContext.getX() - startX) * 0.5;\n        } else {\n          delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\n        }\n        this.delayXShift = delayXShift;\n      }\n      glyphX += delayXShift;\n    }\n\n    L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n\n    if (this.accidentalLower) {\n      this.accidentalLower.render(ctx, glyphX, glyphY);\n      glyphY -= this.accidentalLower.getMetrics().height;\n      glyphY -= this.render_options.accidentalLowerPadding;\n    }\n\n    if (this.stemUpYOffset && note.hasStem() && note.getStemDirection() === 1) {\n      glyphY += this.stemUpYOffset;\n    }\n    if (note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      glyphY = note.checkStave().getBoundingBox().getY() + 40;\n    }\n\n    this.glyph.render(ctx, glyphX + this.x_shift, glyphY);\n\n    if (this.accidentalUpper) {\n      glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;\n      this.accidentalUpper.render(ctx, glyphX, glyphY);\n    }\n    ctx.closeGroup();\n  }\n}\n","export const PetalumaScriptTextMetrics = {\n  name: 'petalumaScript',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": 0,\n      \"y_max\": 500,\n      \"ha\": 500,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 250\n    },\"0\": {\n      \"x_min\": 33,\n      \"x_max\": 534,\n      \"y_min\": -13,\n      \"y_max\": 751,\n      \"ha\": 764,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 570\n    },\n    \"1\": {\n      \"x_min\": 48,\n      \"x_max\": 235,\n      \"y_min\": -17,\n      \"y_max\": 734,\n      \"ha\": 751,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 286\n    },\n    \"2\": {\n      \"x_min\": 56,\n      \"x_max\": 571,\n      \"y_min\": -19,\n      \"y_max\": 741,\n      \"ha\": 760,\n      \"leftSideBearing\": 56,\n      \"advanceWidth\": 626\n    },\n    \"3\": {\n      \"x_min\": 50,\n      \"x_max\": 528,\n      \"y_min\": -7,\n      \"y_max\": 731,\n      \"ha\": 738,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 589\n    },\n    \"4\": {\n      \"x_min\": 38,\n      \"x_max\": 564,\n      \"y_min\": -13,\n      \"y_max\": 743,\n      \"ha\": 756,\n      \"leftSideBearing\": 38,\n      \"advanceWidth\": 614\n    },\n    \"5\": {\n      \"x_min\": 42,\n      \"x_max\": 601,\n      \"y_min\": -34,\n      \"y_max\": 743,\n      \"ha\": 777,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 648\n    },\n    \"6\": {\n      \"x_min\": 47,\n      \"x_max\": 606,\n      \"y_min\": -16,\n      \"y_max\": 743,\n      \"ha\": 759,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 667\n    },\n    \"7\": {\n      \"x_min\": 47,\n      \"x_max\": 567,\n      \"y_min\": 5,\n      \"y_max\": 739,\n      \"ha\": 734,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 615\n    },\n    \"8\": {\n      \"x_min\": 40,\n      \"x_max\": 541,\n      \"y_min\": -15,\n      \"y_max\": 752,\n      \"ha\": 767,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 585\n    },\n    \"9\": {\n      \"x_min\": 40,\n      \"x_max\": 537,\n      \"y_min\": -52,\n      \"y_max\": 736,\n      \"ha\": 788,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 592\n    },\n    \"!\": {\n      \"x_min\": 49,\n      \"x_max\": 180,\n      \"y_min\": -7,\n      \"y_max\": 761,\n      \"ha\": 768,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 230\n    },\n    \"\\\"\": {\n      \"x_min\": 39,\n      \"x_max\": 304,\n      \"y_min\": 596,\n      \"y_max\": 804,\n      \"ha\": 208,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 353\n    },\n    \"#\": {\n      \"x_min\": 33,\n      \"x_max\": 599,\n      \"y_min\": -8,\n      \"y_max\": 765,\n      \"ha\": 773,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 648\n    },\n    \"$\": {\n      \"x_min\": 53,\n      \"x_max\": 495,\n      \"y_min\": -111,\n      \"y_max\": 823,\n      \"ha\": 934,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 560\n    },\n    \"%\": {\n      \"x_min\": 35,\n      \"x_max\": 656,\n      \"y_min\": -128,\n      \"y_max\": 808,\n      \"ha\": 936,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 711\n    },\n    \"&\": {\n      \"x_min\": 53,\n      \"x_max\": 441,\n      \"y_min\": -3,\n      \"y_max\": 753,\n      \"ha\": 756,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 500\n    },\n    \"'\": {\n      \"x_min\": 43,\n      \"x_max\": 161,\n      \"y_min\": 590,\n      \"y_max\": 811,\n      \"ha\": 221,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 217\n    },\n    \"(\": {\n      \"x_min\": 41,\n      \"x_max\": 311,\n      \"y_min\": -36,\n      \"y_max\": 845,\n      \"ha\": 881,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 308\n    },\n    \")\": {\n      \"x_min\": -8,\n      \"x_max\": 257,\n      \"y_min\": -21,\n      \"y_max\": 852,\n      \"ha\": 873,\n      \"leftSideBearing\": -8,\n      \"advanceWidth\": 280\n    },\n    \"*\": {\n      \"x_min\": 59,\n      \"x_max\": 539,\n      \"y_min\": 175,\n      \"y_max\": 589,\n      \"ha\": 414,\n      \"leftSideBearing\": 59,\n      \"advanceWidth\": 601\n    },\n    \"+\": {\n      \"x_min\": 33,\n      \"x_max\": 361,\n      \"y_min\": 180,\n      \"y_max\": 587,\n      \"ha\": 407,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 400\n    },\n    \",\": {\n      \"x_min\": 15,\n      \"x_max\": 176,\n      \"y_min\": -129,\n      \"y_max\": 92,\n      \"ha\": 221,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 205\n    },\n    \"-\": {\n      \"x_min\": 40,\n      \"x_max\": 380,\n      \"y_min\": 317,\n      \"y_max\": 452,\n      \"ha\": 135,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \".\": {\n      \"x_min\": 48,\n      \"x_max\": 185,\n      \"y_min\": -56,\n      \"y_max\": 84,\n      \"ha\": 140,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 227\n    },\n    \"/\": {\n      \"x_min\": -58,\n      \"x_max\": 654,\n      \"y_min\": -122,\n      \"y_max\": 844,\n      \"ha\": 966,\n      \"leftSideBearing\": -58,\n      \"advanceWidth\": 626\n    },\n    \":\": {\n      \"x_min\": 65,\n      \"x_max\": 225,\n      \"y_min\": 97,\n      \"y_max\": 536,\n      \"ha\": 439,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 302\n    },\n    \";\": {\n      \"x_min\": 13,\n      \"x_max\": 295,\n      \"y_min\": -139,\n      \"y_max\": 536,\n      \"ha\": 675,\n      \"leftSideBearing\": 13,\n      \"advanceWidth\": 334\n    },\n    \"<\": {\n      \"x_min\": 28,\n      \"x_max\": 438,\n      \"y_min\": -1,\n      \"y_max\": 607,\n      \"ha\": 608,\n      \"leftSideBearing\": 28,\n      \"advanceWidth\": 475\n    },\n    \"=\": {\n      \"x_min\": 40,\n      \"x_max\": 383,\n      \"y_min\": 199.9598640852289,\n      \"y_max\": 541,\n      \"ha\": 341.0401359147711,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \">\": {\n      \"x_min\": 35,\n      \"x_max\": 421,\n      \"y_min\": 28,\n      \"y_max\": 632,\n      \"ha\": 604,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 466\n    },\n    \"?\": {\n      \"x_min\": 45,\n      \"x_max\": 548,\n      \"y_min\": -17,\n      \"y_max\": 767,\n      \"ha\": 784,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 592\n    },\n    \"@\": {\n      \"x_min\": 51,\n      \"x_max\": 730,\n      \"y_min\": -78,\n      \"y_max\": 753,\n      \"ha\": 831,\n      \"leftSideBearing\": 51,\n      \"advanceWidth\": 781\n    },\n    \"A\": {\n      \"x_min\": 37,\n      \"x_max\": 554,\n      \"y_min\": -4,\n      \"y_max\": 746,\n      \"ha\": 750,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 617\n    },\n    \"B\": {\n      \"x_min\": 37,\n      \"x_max\": 532,\n      \"y_min\": 3,\n      \"y_max\": 783,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 579\n    },\n    \"C\": {\n      \"x_min\": 37,\n      \"x_max\": 583,\n      \"y_min\": -3,\n      \"y_max\": 775,\n      \"ha\": 778,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 623\n    },\n    \"D\": {\n      \"x_min\": 50,\n      \"x_max\": 530,\n      \"y_min\": -15,\n      \"y_max\": 749,\n      \"ha\": 764,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 579\n    },\n    \"E\": {\n      \"x_min\": 45,\n      \"x_max\": 531,\n      \"y_min\": -1,\n      \"y_max\": 743,\n      \"ha\": 744,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 585\n    },\n    \"F\": {\n      \"x_min\": 45,\n      \"x_max\": 459,\n      \"y_min\": 23,\n      \"y_max\": 727,\n      \"ha\": 704,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 510\n    },\n    \"G\": {\n      \"x_min\": 31,\n      \"x_max\": 577,\n      \"y_min\": -8,\n      \"y_max\": 733,\n      \"ha\": 741,\n      \"leftSideBearing\": 31,\n      \"advanceWidth\": 611\n    },\n    \"H\": {\n      \"x_min\": 37,\n      \"x_max\": 493,\n      \"y_min\": -22,\n      \"y_max\": 758,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 535\n    },\n    \"I\": {\n      \"x_min\": 47,\n      \"x_max\": 501,\n      \"y_min\": -3,\n      \"y_max\": 731,\n      \"ha\": 734,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 541\n    },\n    \"J\": {\n      \"x_min\": 33,\n      \"x_max\": 531,\n      \"y_min\": -23,\n      \"y_max\": 725,\n      \"ha\": 748,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 573\n    },\n    \"K\": {\n      \"x_min\": 43,\n      \"x_max\": 505,\n      \"y_min\": -10,\n      \"y_max\": 740,\n      \"ha\": 750,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 560\n    },\n    \"L\": {\n      \"x_min\": 49,\n      \"x_max\": 457,\n      \"y_min\": -2,\n      \"y_max\": 746,\n      \"ha\": 748,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 510\n    },\n    \"M\": {\n      \"x_min\": 35,\n      \"x_max\": 699,\n      \"y_min\": 1,\n      \"y_max\": 744,\n      \"ha\": 743,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 743\n    },\n    \"N\": {\n      \"x_min\": 34,\n      \"x_max\": 533,\n      \"y_min\": -17,\n      \"y_max\": 761,\n      \"ha\": 778,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 579\n    },\n    \"O\": {\n      \"x_min\": 41,\n      \"x_max\": 608,\n      \"y_min\": -5,\n      \"y_max\": 735,\n      \"ha\": 740,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 667\n    },\n    \"P\": {\n      \"x_min\": 53,\n      \"x_max\": 451,\n      \"y_min\": -18,\n      \"y_max\": 735,\n      \"ha\": 753,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 497\n    },\n    \"Q\": {\n      \"x_min\": 40,\n      \"x_max\": 599,\n      \"y_min\": -67,\n      \"y_max\": 744,\n      \"ha\": 811,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 648\n    },\n    \"R\": {\n      \"x_min\": 39,\n      \"x_max\": 487,\n      \"y_min\": 16,\n      \"y_max\": 735,\n      \"ha\": 719,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 535\n    },\n    \"S\": {\n      \"x_min\": 35,\n      \"x_max\": 552,\n      \"y_min\": -47,\n      \"y_max\": 708,\n      \"ha\": 755,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 604\n    },\n    \"T\": {\n      \"x_min\": 26,\n      \"x_max\": 656,\n      \"y_min\": -13,\n      \"y_max\": 718,\n      \"ha\": 731,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 705\n    },\n    \"U\": {\n      \"x_min\": 41,\n      \"x_max\": 518,\n      \"y_min\": -20,\n      \"y_max\": 748,\n      \"ha\": 768,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 567\n    },\n    \"V\": {\n      \"x_min\": 47,\n      \"x_max\": 509,\n      \"y_min\": -26,\n      \"y_max\": 744,\n      \"ha\": 770,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 567\n    },\n    \"W\": {\n      \"x_min\": 44,\n      \"x_max\": 789,\n      \"y_min\": -35,\n      \"y_max\": 720,\n      \"ha\": 755,\n      \"leftSideBearing\": 44,\n      \"advanceWidth\": 833\n    },\n    \"X\": {\n      \"x_min\": 63,\n      \"x_max\": 635,\n      \"y_min\": -10,\n      \"y_max\": 745,\n      \"ha\": 755,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 680\n    },\n    \"Y\": {\n      \"x_min\": 43,\n      \"x_max\": 503,\n      \"y_min\": -21,\n      \"y_max\": 734,\n      \"ha\": 755,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 541\n    },\n    \"Z\": {\n      \"x_min\": 42,\n      \"x_max\": 584,\n      \"y_min\": -10,\n      \"y_max\": 739,\n      \"ha\": 749,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 629\n    },\n    \"[\": {\n      \"x_min\": 46,\n      \"x_max\": 346,\n      \"y_min\": -150,\n      \"y_max\": 884,\n      \"ha\": 1034,\n      \"leftSideBearing\": 46,\n      \"advanceWidth\": 291\n    },\n    \"\\\\\": {\n      \"x_min\": 20,\n      \"x_max\": 616,\n      \"y_min\": -100,\n      \"y_max\": 797,\n      \"ha\": 897,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 645\n    },\n    \"]\": {\n      \"x_min\": -76,\n      \"x_max\": 226,\n      \"y_min\": -150,\n      \"y_max\": 881,\n      \"ha\": 1031,\n      \"leftSideBearing\": -76,\n      \"advanceWidth\": 297\n    },\n    \"^\": {\n      \"x_min\": 43,\n      \"x_max\": 437,\n      \"y_min\": 517,\n      \"y_max\": 812,\n      \"ha\": 295,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 478\n    },\n    \"_\": {\n      \"x_min\": 29,\n      \"x_max\": 563,\n      \"y_min\": -110,\n      \"y_max\": -1,\n      \"ha\": 109,\n      \"leftSideBearing\": 29,\n      \"advanceWidth\": 598\n    },\n    \"`\": {\n      \"x_min\": 54,\n      \"x_max\": 321,\n      \"y_min\": 540,\n      \"y_max\": 747,\n      \"ha\": 207,\n      \"leftSideBearing\": 54,\n      \"advanceWidth\": 368\n    },\n    \"a\": {\n      \"x_min\": 20,\n      \"x_max\": 447,\n      \"y_min\": -17,\n      \"y_max\": 495,\n      \"ha\": 512,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 494\n    },\n    \"b\": {\n      \"x_min\": 37,\n      \"x_max\": 466,\n      \"y_min\": -27,\n      \"y_max\": 770,\n      \"ha\": 797,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 510\n    },\n    \"c\": {\n      \"x_min\": 35,\n      \"x_max\": 456,\n      \"y_min\": -9,\n      \"y_max\": 507,\n      \"ha\": 516,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 460\n    },\n    \"d\": {\n      \"x_min\": 45,\n      \"x_max\": 520,\n      \"y_min\": -15,\n      \"y_max\": 764,\n      \"ha\": 779,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 560\n    },\n    \"e\": {\n      \"x_min\": 33,\n      \"x_max\": 370,\n      \"y_min\": -5,\n      \"y_max\": 501,\n      \"ha\": 506,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 397\n    },\n    \"f\": {\n      \"x_min\": 35,\n      \"x_max\": 411,\n      \"y_min\": -13,\n      \"y_max\": 695,\n      \"ha\": 708,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 453\n    },\n    \"g\": {\n      \"x_min\": 33,\n      \"x_max\": 551,\n      \"y_min\": -257,\n      \"y_max\": 505,\n      \"ha\": 762,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 611\n    },\n    \"h\": {\n      \"x_min\": 32,\n      \"x_max\": 458,\n      \"y_min\": -29,\n      \"y_max\": 743,\n      \"ha\": 772,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 491\n    },\n    \"i\": {\n      \"x_min\": 45,\n      \"x_max\": 167,\n      \"y_min\": -13,\n      \"y_max\": 631,\n      \"ha\": 644,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 220\n    },\n    \"j\": {\n      \"x_min\": -127,\n      \"x_max\": 261,\n      \"y_min\": -231,\n      \"y_max\": 601,\n      \"ha\": 832,\n      \"leftSideBearing\": -127,\n      \"advanceWidth\": 308\n    },\n    \"k\": {\n      \"x_min\": 39,\n      \"x_max\": 443,\n      \"y_min\": -3,\n      \"y_max\": 700,\n      \"ha\": 703,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 497\n    },\n    \"l\": {\n      \"x_min\": 58,\n      \"x_max\": 168,\n      \"y_min\": -8,\n      \"y_max\": 686,\n      \"ha\": 694,\n      \"leftSideBearing\": 58,\n      \"advanceWidth\": 227\n    },\n    \"m\": {\n      \"x_min\": 39,\n      \"x_max\": 688,\n      \"y_min\": -14,\n      \"y_max\": 501,\n      \"ha\": 515,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 718\n    },\n    \"n\": {\n      \"x_min\": 45,\n      \"x_max\": 491,\n      \"y_min\": -32,\n      \"y_max\": 512,\n      \"ha\": 544,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 541\n    },\n    \"o\": {\n      \"x_min\": 41,\n      \"x_max\": 424,\n      \"y_min\": -12,\n      \"y_max\": 493,\n      \"ha\": 505,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 447\n    },\n    \"p\": {\n      \"x_min\": 25,\n      \"x_max\": 529,\n      \"y_min\": -260,\n      \"y_max\": 500,\n      \"ha\": 760,\n      \"leftSideBearing\": 25,\n      \"advanceWidth\": 573\n    },\n    \"q\": {\n      \"x_min\": 53,\n      \"x_max\": 603,\n      \"y_min\": -235,\n      \"y_max\": 514,\n      \"ha\": 749,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 623\n    },\n    \"r\": {\n      \"x_min\": 32,\n      \"x_max\": 407,\n      \"y_min\": -7,\n      \"y_max\": 492,\n      \"ha\": 499,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 460\n    },\n    \"s\": {\n      \"x_min\": 49,\n      \"x_max\": 416,\n      \"y_min\": -12,\n      \"y_max\": 519,\n      \"ha\": 531,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 460\n    },\n    \"t\": {\n      \"x_min\": 32,\n      \"x_max\": 442,\n      \"y_min\": -5,\n      \"y_max\": 684,\n      \"ha\": 689,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 469\n    },\n    \"u\": {\n      \"x_min\": 41,\n      \"x_max\": 487,\n      \"y_min\": -5,\n      \"y_max\": 507,\n      \"ha\": 512,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 510\n    },\n    \"v\": {\n      \"x_min\": 16,\n      \"x_max\": 441,\n      \"y_min\": -20,\n      \"y_max\": 542,\n      \"ha\": 562,\n      \"leftSideBearing\": 16,\n      \"advanceWidth\": 456\n    },\n    \"w\": {\n      \"x_min\": 39,\n      \"x_max\": 639,\n      \"y_min\": -22,\n      \"y_max\": 505,\n      \"ha\": 527,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 661\n    },\n    \"x\": {\n      \"x_min\": 15,\n      \"x_max\": 505,\n      \"y_min\": -39,\n      \"y_max\": 539,\n      \"ha\": 578,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 541\n    },\n    \"y\": {\n      \"x_min\": -98,\n      \"x_max\": 501,\n      \"y_min\": -242,\n      \"y_max\": 511,\n      \"ha\": 753,\n      \"leftSideBearing\": -98,\n      \"advanceWidth\": 548\n    },\n    \"z\": {\n      \"x_min\": 27,\n      \"x_max\": 479,\n      \"y_min\": -3,\n      \"y_max\": 494,\n      \"ha\": 497,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 494\n    },\n    \"{\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"|\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"}\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"~\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    }\n\n  },\n  \"fontFamily\": \"Petaluma Script\",\n  \"resolution\": 1000,\n  \"generatedOn\": \"2020-06-14T18:33:25.407Z\"\n};\n","export const RobotoSlabTextMetrics = {\n  name: 'Roboto Slab',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 509,\n      \"y_min\": 0,\n      \"y_max\": 2000,\n      \"ha\": 2000,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 509\n    },\n    \"0\": {\n      \"x_min\": 121,\n      \"x_max\": 1048,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1168\n    },\n    \"1\": {\n      \"x_min\": 117,\n      \"x_max\": 767,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 117,\n      \"advanceWidth\": 844\n    },\n    \"2\": {\n      \"x_min\": 75.8474576645637,\n      \"x_max\": 1040,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 75,\n      \"advanceWidth\": 1131\n    },\n    \"3\": {\n      \"x_min\": 74.85365853658536,\n      \"x_max\": 994,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1106\n    },\n    \"4\": {\n      \"x_min\": 63,\n      \"x_max\": 1114,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1187\n    },\n    \"5\": {\n      \"x_min\": 96.8448275474953,\n      \"x_max\": 982,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1081\n    },\n    \"6\": {\n      \"x_min\": 121,\n      \"x_max\": 1067,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1144\n    },\n    \"7\": {\n      \"x_min\": 76,\n      \"x_max\": 1060,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": -30,\n      \"advanceWidth\": 1128\n    },\n    \"8\": {\n      \"x_min\": 92,\n      \"x_max\": 1039,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 92,\n      \"advanceWidth\": 1131\n    },\n    \"9\": {\n      \"x_min\": 84,\n      \"x_max\": 1026,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1154\n    },\n    \"!\": {\n      \"x_min\": 143,\n      \"x_max\": 340,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 143,\n      \"advanceWidth\": 483\n    },\n    \"\\\"\": {\n      \"x_min\": 166,\n      \"x_max\": 634,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 770\n    },\n    \"#\": {\n      \"x_min\": 63,\n      \"x_max\": 1179,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1246\n    },\n    \"$\": {\n      \"x_min\": 81.92156915727656,\n      \"x_max\": 1012,\n      \"y_min\": -208,\n      \"y_max\": 1693,\n      \"ha\": 1901,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1110\n    },\n    \"%\": {\n      \"x_min\": 77,\n      \"x_max\": 1384,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 77,\n      \"advanceWidth\": 1460\n    },\n    \"&\": {\n      \"x_min\": 74,\n      \"x_max\": 1242,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1289\n    },\n    \"'\": {\n      \"x_min\": 166,\n      \"x_max\": 324,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 460\n    },\n    \"(\": {\n      \"x_min\": 114,\n      \"x_max\": 650,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 114,\n      \"advanceWidth\": 662\n    },\n    \")\": {\n      \"x_min\": 11,\n      \"x_max\": 547,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 11,\n      \"advanceWidth\": 654\n    },\n    \"*\": {\n      \"x_min\": 66,\n      \"x_max\": 893,\n      \"y_min\": 607,\n      \"y_max\": 1456,\n      \"ha\": 849,\n      \"leftSideBearing\": 66,\n      \"advanceWidth\": 958\n    },\n    \"+\": {\n      \"x_min\": 73,\n      \"x_max\": 1071,\n      \"y_min\": 146,\n      \"y_max\": 1206,\n      \"ha\": 1060,\n      \"leftSideBearing\": 73,\n      \"advanceWidth\": 1145\n    },\n    \",\": {\n      \"x_min\": 23,\n      \"x_max\": 315,\n      \"y_min\": -311,\n      \"y_max\": 221,\n      \"ha\": 532,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 404\n    },\n    \"-\": {\n      \"x_min\": 154,\n      \"x_max\": 643,\n      \"y_min\": 538,\n      \"y_max\": 692,\n      \"ha\": 154,\n      \"leftSideBearing\": 154,\n      \"advanceWidth\": 797\n    },\n    \".\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 202,\n      \"ha\": 202,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 493\n    },\n    \"/\": {\n      \"x_min\": 0,\n      \"x_max\": 774,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 824\n    },\n    \":\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 419\n    },\n    \";\": {\n      \"x_min\": 53,\n      \"x_max\": 345,\n      \"y_min\": -311,\n      \"y_max\": 1082,\n      \"ha\": 1393,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 424\n    },\n    \"<\": {\n      \"x_min\": 76,\n      \"x_max\": 892,\n      \"y_min\": 107,\n      \"y_max\": 1013,\n      \"ha\": 906,\n      \"leftSideBearing\": 76,\n      \"advanceWidth\": 1017\n    },\n    \"=\": {\n      \"x_min\": 147,\n      \"x_max\": 981,\n      \"y_min\": 407,\n      \"y_max\": 987,\n      \"ha\": 580,\n      \"leftSideBearing\": 147,\n      \"advanceWidth\": 1127\n    },\n    \">\": {\n      \"x_min\": 125,\n      \"x_max\": 980,\n      \"y_min\": 87,\n      \"y_max\": 993,\n      \"ha\": 906,\n      \"leftSideBearing\": 125,\n      \"advanceWidth\": 1060\n    },\n    \"?\": {\n      \"x_min\": 65.92660602419838,\n      \"x_max\": 890,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 953\n    },\n    \"@\": {\n      \"x_min\": 84.3592218305664,\n      \"x_max\": 1705.2346925277395,\n      \"y_min\": -453,\n      \"y_max\": 1431,\n      \"ha\": 1884,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1821\n    },\n    \"A\": {\n      \"x_min\": 70,\n      \"x_max\": 1463,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1533\n    },\n    \"B\": {\n      \"x_min\": 81,\n      \"x_max\": 1253,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1322\n    },\n    \"C\": {\n      \"x_min\": 80,\n      \"x_max\": 1174,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1290\n    },\n    \"D\": {\n      \"x_min\": 81,\n      \"x_max\": 1291,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1356\n    },\n    \"E\": {\n      \"x_min\": 81,\n      \"x_max\": 1190,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1306\n    },\n    \"F\": {\n      \"x_min\": 81,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1256\n    },\n    \"G\": {\n      \"x_min\": 80,\n      \"x_max\": 1226,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1346\n    },\n    \"H\": {\n      \"x_min\": 81,\n      \"x_max\": 1497,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1578\n    },\n    \"I\": {\n      \"x_min\": 81,\n      \"x_max\": 604,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 685\n    },\n    \"J\": {\n      \"x_min\": 60,\n      \"x_max\": 1100,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 60,\n      \"advanceWidth\": 1169\n    },\n    \"K\": {\n      \"x_min\": 81,\n      \"x_max\": 1427,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1501\n    },\n    \"L\": {\n      \"x_min\": 81,\n      \"x_max\": 1130,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1210\n    },\n    \"M\": {\n      \"x_min\": 94,\n      \"x_max\": 1888,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 94,\n      \"advanceWidth\": 1982\n    },\n    \"N\": {\n      \"x_min\": 83,\n      \"x_max\": 1509,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 83,\n      \"advanceWidth\": 1592\n    },\n    \"O\": {\n      \"x_min\": 70,\n      \"x_max\": 1281,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1351\n    },\n    \"P\": {\n      \"x_min\": 81,\n      \"x_max\": 1242,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1297\n    },\n    \"Q\": {\n      \"x_min\": 70,\n      \"x_max\": 1348,\n      \"y_min\": -245,\n      \"y_max\": 1477,\n      \"ha\": 1722,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1376\n    },\n    \"R\": {\n      \"x_min\": 81,\n      \"x_max\": 1285,\n      \"y_min\": 0,\n      \"y_max\": 1455,\n      \"ha\": 1455,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1385\n    },\n    \"S\": {\n      \"x_min\": 115,\n      \"x_max\": 1116,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 115,\n      \"advanceWidth\": 1206\n    },\n    \"T\": {\n      \"x_min\": 96,\n      \"x_max\": 1306,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1406\n    },\n    \"U\": {\n      \"x_min\": 70,\n      \"x_max\": 1452,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1522\n    },\n    \"V\": {\n      \"x_min\": 65,\n      \"x_max\": 1443,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1508\n    },\n    \"W\": {\n      \"x_min\": 72,\n      \"x_max\": 2057,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 2129\n    },\n    \"X\": {\n      \"x_min\": 80,\n      \"x_max\": 1449,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1529\n    },\n    \"Y\": {\n      \"x_min\": 65,\n      \"x_max\": 1396,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1461\n    },\n    \"Z\": {\n      \"x_min\": 90,\n      \"x_max\": 1107,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 90,\n      \"advanceWidth\": 1197\n    },\n    \"[\": {\n      \"x_min\": 157,\n      \"x_max\": 541,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 157,\n      \"advanceWidth\": 573\n    },\n    \"\\\\\": {\n      \"x_min\": 36,\n      \"x_max\": 830,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 36,\n      \"advanceWidth\": 841\n    },\n    \"]\": {\n      \"x_min\": 23,\n      \"x_max\": 408,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 552\n    },\n    \"^\": {\n      \"x_min\": 71,\n      \"x_max\": 802,\n      \"y_min\": 729,\n      \"y_max\": 1456,\n      \"ha\": 727,\n      \"leftSideBearing\": 71,\n      \"advanceWidth\": 864\n    },\n    \"_\": {\n      \"x_min\": 119,\n      \"x_max\": 1041,\n      \"y_min\": -154,\n      \"y_max\": 0,\n      \"ha\": 154,\n      \"leftSideBearing\": 119,\n      \"advanceWidth\": 1168\n    },\n    \"`\": {\n      \"x_min\": 40,\n      \"x_max\": 456,\n      \"y_min\": 1288,\n      \"y_max\": 1560,\n      \"ha\": 272,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 496\n    },\n    \"a\": {\n      \"x_min\": 79,\n      \"x_max\": 1053,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 79,\n      \"advanceWidth\": 1132\n    },\n    \"b\": {\n      \"x_min\": -16,\n      \"x_max\": 1071,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": -16,\n      \"advanceWidth\": 1145\n    },\n    \"c\": {\n      \"x_min\": 78,\n      \"x_max\": 988,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1067\n    },\n    \"d\": {\n      \"x_min\": 78,\n      \"x_max\": 1156,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1218\n    },\n    \"e\": {\n      \"x_min\": 74,\n      \"x_max\": 980,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1059\n    },\n    \"f\": {\n      \"x_min\": 64,\n      \"x_max\": 731,\n      \"y_min\": 0,\n      \"y_max\": 1581,\n      \"ha\": 1581,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 725\n    },\n    \"g\": {\n      \"x_min\": 78,\n      \"x_max\": 1133,\n      \"y_min\": -437,\n      \"y_max\": 1102,\n      \"ha\": 1539,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1157\n    },\n    \"h\": {\n      \"x_min\": 49,\n      \"x_max\": 1255,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 1315\n    },\n    \"i\": {\n      \"x_min\": 67,\n      \"x_max\": 590,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 67,\n      \"advanceWidth\": 652\n    },\n    \"j\": {\n      \"x_min\": -56,\n      \"x_max\": 381,\n      \"y_min\": -437,\n      \"y_max\": 1560,\n      \"ha\": 1997,\n      \"leftSideBearing\": -56,\n      \"advanceWidth\": 525\n    },\n    \"k\": {\n      \"x_min\": 64,\n      \"x_max\": 1248,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 1287\n    },\n    \"l\": {\n      \"x_min\": 64,\n      \"x_max\": 587,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 653\n    },\n    \"m\": {\n      \"x_min\": 74,\n      \"x_max\": 1905,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1977\n    },\n    \"n\": {\n      \"x_min\": 74,\n      \"x_max\": 1278,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1343\n    },\n    \"o\": {\n      \"x_min\": 78,\n      \"x_max\": 1046,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1124\n    },\n    \"p\": {\n      \"x_min\": 34,\n      \"x_max\": 1119,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 1197\n    },\n    \"q\": {\n      \"x_min\": 78,\n      \"x_max\": 1135,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1139\n    },\n    \"r\": {\n      \"x_min\": 72,\n      \"x_max\": 808,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 854\n    },\n    \"s\": {\n      \"x_min\": 104,\n      \"x_max\": 933,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 104,\n      \"advanceWidth\": 1022\n    },\n    \"t\": {\n      \"x_min\": 24,\n      \"x_max\": 678,\n      \"y_min\": -17,\n      \"y_max\": 1343,\n      \"ha\": 1360,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 730\n    },\n    \"u\": {\n      \"x_min\": 52,\n      \"x_max\": 1181,\n      \"y_min\": -21,\n      \"y_max\": 1082,\n      \"ha\": 1103,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1245\n    },\n    \"v\": {\n      \"x_min\": 26,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 1206\n    },\n    \"w\": {\n      \"x_min\": 52,\n      \"x_max\": 1777,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1823\n    },\n    \"x\": {\n      \"x_min\": 42,\n      \"x_max\": 1163,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 1203\n    },\n    \"y\": {\n      \"x_min\": 24,\n      \"x_max\": 1172,\n      \"y_min\": -437,\n      \"y_max\": 1082,\n      \"ha\": 1519,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 1192\n    },\n    \"z\": {\n      \"x_min\": 88,\n      \"x_max\": 960,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 88,\n      \"advanceWidth\": 1032\n    },\n    \"{\": {\n      \"x_min\": 63,\n      \"x_max\": 671,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 701\n    },\n    \"|\": {\n      \"x_min\": 150,\n      \"x_max\": 307,\n      \"y_min\": -270,\n      \"y_max\": 1456,\n      \"ha\": 1726,\n      \"leftSideBearing\": 150,\n      \"advanceWidth\": 451\n    },\n    \"}\": {\n      \"x_min\": 27,\n      \"x_max\": 635,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 701\n    },\n    \"~\": {\n      \"x_min\": 121,\n      \"x_max\": 1257,\n      \"y_min\": 401,\n      \"y_max\": 803,\n      \"ha\": 402,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1386\n    }\n  },\n  \"fontFamily\": \"Roboto Slab\",\n  \"resolution\": 2048,\n  \"generatedOn\": \"2020-06-15T19:12:58.120Z\"\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file handles a registry of text font metric information, so all\n// VEX modules can take advantage of font metrics in a uniform way.\n//\n\nimport { RuntimeError, log } from './util';\nimport { PetalumaScriptTextMetrics } from './fonts/petalumascript_textmetrics';\nimport { RobotoSlabTextMetrics } from './fonts/robotoslab_textmetrics';\nimport { FontInfo } from './types/common';\n\nexport interface TextFontMetrics {\n  x_min: number;\n  x_max: number;\n  y_min: number;\n  y_max: number;\n  ha: number;\n  leftSideBearing: number;\n  advanceWidth: number;\n}\n\nexport interface TextFontRegistry {\n  [name: string]: unknown;\n  name?: string;\n  resolution?: number;\n  glyphs?: Record<string, TextFontMetrics>;\n  family: string;\n  serifs: boolean;\n  monospaced?: boolean;\n  italic: boolean;\n  bold: boolean;\n  maxSizeGlyph?: string;\n  superscriptOffset?: number;\n  subscriptOffset?: number;\n  description: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextFont.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (TextFont.DEBUG) log('Vex.Flow.TextFont', args);\n}\n\nexport class TextFont {\n  protected static debug: boolean;\n  resolution: number = 1000;\n  protected name?: string;\n  protected glyphs: Record<string, TextFontMetrics> = {};\n  protected family: string = '';\n  protected serifs?: boolean;\n  protected monospaced?: boolean;\n  protected italic?: boolean;\n  protected bold?: boolean;\n  protected superscriptOffset?: number;\n  protected subscriptOffset?: number;\n  protected description?: string;\n  protected maxSizeGlyph: string;\n  protected weight: string;\n  protected style: string;\n  protected fontCacheKey: string = '';\n\n  protected static registryInstance: TextFontRegistry[];\n  protected static textWidthCacheInstance?: Record<string, Record<string, number>>;\n\n  protected size: number;\n  protected attrs: { type: string };\n\n  static get CATEGORY(): string {\n    return 'textFont';\n  }\n\n  static get DEBUG(): boolean {\n    return TextFont.debug;\n  }\n\n  static set DEBUG(val: boolean) {\n    TextFont.debug = val;\n  }\n\n  // ### fontRegistry\n  // Getter of an array of available fonts.  Applications may register their\n  // own fonts and the metrics for those fonts will be available to the\n  // application.\n  static get fontRegistry(): TextFontRegistry[] {\n    if (!TextFont.registryInstance) {\n      TextFont.registryInstance = [];\n      TextFont.registryInstance.push({\n        name: 'Roboto Slab',\n        resolution: RobotoSlabTextMetrics.resolution,\n        glyphs: RobotoSlabTextMetrics.glyphs,\n        family: RobotoSlabTextMetrics.fontFamily,\n        serifs: true,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default serif text font to pair with Bravura/Gonville engraving font',\n      });\n      TextFont.registryInstance.push({\n        name: 'petalumaScript',\n        resolution: PetalumaScriptTextMetrics.resolution,\n        glyphs: PetalumaScriptTextMetrics.glyphs,\n        family: PetalumaScriptTextMetrics.fontFamily,\n        serifs: false,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default sans-serif text font to pair with Petaluma engraving font',\n      });\n    }\n    return TextFont.registryInstance;\n  }\n\n  // ### getFontFamilies\n  // Web font files are generally distributed per weight and style (bold, italic).\n  // return the family with the attributes that are available for that font.\n  // We assume descriptions are the same for different weights/styles.\n  static getFontFamilies(): TextFontRegistry[] {\n    const hash: Record<string, TextFontRegistry> = {};\n    const returnedFonts: TextFontRegistry[] = [];\n    TextFont.fontRegistry.forEach((font) => {\n      if (!hash[font.family]) {\n        hash[font.family] = {\n          family: font.family,\n          description: font.description,\n          bold: font.bold,\n          serifs: font.serifs,\n          italic: font.italic,\n        };\n      } else {\n        ['bold', 'italic', 'monospaced', 'serifs'].forEach((attr) => {\n          if (font[attr]) {\n            hash[font.family][attr] = true;\n          }\n        });\n      }\n    });\n    const keys = Object.keys(hash);\n    keys.forEach((key) => {\n      returnedFonts.push(hash[key]);\n    });\n    return returnedFonts;\n  }\n\n  // ### fontWeightToBold\n  // return true if the font weight indicates we desire a 'bold'\n  // used in getTextFontFromVexFontData\n  static fontWeightToBold(fw?: string): boolean {\n    if (!fw) {\n      return false;\n    }\n    if (isNaN(parseInt(fw, 10))) {\n      return fw.toLowerCase() === 'bold';\n    }\n    // very subjective...\n    return parseInt(fw, 10) >= 600;\n  }\n\n  // ### fontStyleToItalic\n  // return true if the font style indicates we desire 'italic' style\n  // used in getTextFontFromVexFontData\n  static fontStyleToItalic(fs?: string): boolean {\n    return typeof fs === 'string' && fs.toLowerCase() === 'italic';\n  }\n\n  // ### textWidthCache\n  // Static cache of widths hashed on font/string.\n  static get textWidthCache(): Record<string, Record<string, number>> {\n    if (typeof TextFont.textWidthCacheInstance === 'undefined') {\n      TextFont.textWidthCacheInstance = {};\n    }\n    return TextFont.textWidthCacheInstance;\n  }\n\n  // ### getTextFontFromVexFontData\n  // Find the font that most closely matches the parameters from the given font data.\n  // Primarily we look for font family, also bold and italic attributes.  This\n  // method will always return a fallback font if there are no matches.\n  static getTextFontFromVexFontData(fd: FontInfo): TextFont {\n    let i = 0;\n    let selectedFont = undefined;\n    const fallback = TextFont.fontRegistry[0];\n    let candidates: TextFontRegistry[] = [];\n    const families = fd.family.split(',');\n    for (i = 0; i < families.length; ++i) {\n      const famliy = families[i];\n      candidates = TextFont.fontRegistry.filter((font) => font.family === famliy);\n      if (candidates.length) {\n        break;\n      }\n    }\n    if (candidates.length === 0) {\n      selectedFont = new TextFont(fallback);\n    } else if (candidates.length === 1) {\n      selectedFont = new TextFont(candidates[0]);\n    } else {\n      const bold = TextFont.fontWeightToBold(fd.weight);\n      const italic = TextFont.fontStyleToItalic(fd.style);\n      const perfect = candidates.find((font) => font.bold === bold && font.italic === italic);\n      if (perfect) {\n        selectedFont = new TextFont(perfect);\n      } else {\n        const ok = candidates.find((font) => font.italic === italic || font.bold === bold);\n        if (ok) {\n          selectedFont = new TextFont(ok);\n        } else {\n          selectedFont = new TextFont(candidates[0]);\n        }\n      }\n    }\n    if (typeof fd.size === 'number' && fd.size > 0) {\n      selectedFont.setFontSize(fd.size);\n    }\n    return selectedFont;\n  }\n\n  static getFontDataByName(fontName: string): TextFontRegistry | undefined {\n    return TextFont.fontRegistry.find((fd) => fd.name === fontName);\n  }\n\n  // ### registerFont\n  // Applications may register their own fonts and the metrics, and those metrics\n  // will be available to the application for formatting.  See fontRegistry\n  // for format of font metrics.  Metrics can be generated from any font file\n  // using font_fontgen.js in the tools/smufl directory.\n  static registerFont(fontData: TextFontRegistry, overwrite?: boolean): void {\n    // Get via external reference to make sure initial object is created\n    const reg = TextFont.fontRegistry;\n    const exists = reg.find((td) => fontData.name === td.name);\n    if (exists && overwrite) {\n      TextFont.registryInstance = TextFont.fontRegistry.filter((fd) => fd.name !== exists.name);\n    }\n    if (!exists) {\n      L('registering font ' + fontData.name);\n      TextFont.registryInstance.push(fontData);\n    }\n  }\n\n  // ## Prototype Methods\n  //\n  // create a font instance.\n  // The preferred method for returning an instance of this class is via\n  // getTextFontFromVexFontData\n  constructor(params: TextFontRegistry) {\n    this.size = 14;\n    this.maxSizeGlyph = 'H';\n    this.weight = '';\n    this.style = '';\n    this.attrs = { type: 'TextFont' };\n    if (!params.name) {\n      throw new RuntimeError('BadArgument', 'Font constructor must specify a name');\n    }\n    const fontData = params.glyphs ? params : TextFont.getFontDataByName(params.name);\n    if (!fontData) {\n      if (params.glyphs && params.resolution) {\n        TextFont.registerFont(params);\n      } else {\n        throw new RuntimeError('BadArgument', 'Unknown font, must have glyph metrics and resolution');\n      }\n    } else {\n      this.updateParams(fontData);\n    }\n    this.updateParams(params);\n\n    this.updateCacheKey();\n  }\n\n  updateParams(params: TextFontRegistry): void {\n    if (params.name) this.name = params.name;\n    if (params.resolution) this.resolution = params.resolution;\n    if (params.glyphs) this.glyphs = params.glyphs;\n    this.family = params.family;\n    this.serifs = params.serifs;\n    if (params.monospaced) this.monospaced = params.monospaced;\n    this.italic = params.italic;\n    this.bold = params.bold;\n    if (params.maxSizeGlyph) this.maxSizeGlyph = params.maxSizeGlyph;\n    if (params.superscriptOffset) this.superscriptOffset = params.superscriptOffset;\n    if (params.subscriptOffset) this.subscriptOffset = params.subscriptOffset;\n  }\n\n  // Create a hash with the current font data, so we can cache computed widths\n  updateCacheKey(): void {\n    this.fontCacheKey = `${this.family}-${this.size}-${this.weight}-${this.style}`;\n  }\n\n  getMetricForCharacter(c: string): TextFontMetrics {\n    if (this.glyphs[c]) {\n      return this.glyphs[c];\n    }\n    return this.glyphs[this.maxSizeGlyph];\n  }\n\n  get maxHeight(): number {\n    const glyph = this.getMetricForCharacter(this.maxSizeGlyph);\n    return (glyph.ha / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForCharacter(c: string): number {\n    const metric = this.getMetricForCharacter(c);\n    if (!metric) {\n      return 0.65 * this.pointsToPixels;\n    }\n    return (metric.advanceWidth / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForString(s: string): number {\n    // Store width in 2-level cache, so I don't have to recompute for\n    // same string/font\n    if (typeof TextFont.textWidthCache[this.fontCacheKey] === 'undefined') {\n      TextFont.textWidthCache[this.fontCacheKey] = {};\n    }\n    let width = 0;\n    if (!TextFont.textWidthCache[this.fontCacheKey][s]) {\n      for (let j = 0; j < s.length; ++j) {\n        width += this.getWidthForCharacter(s[j]);\n      }\n      TextFont.textWidthCache[this.fontCacheKey][s] = width;\n    }\n    return TextFont.textWidthCache[this.fontCacheKey][s];\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels(): number {\n    return this.size / 72 / (1 / 96);\n  }\n\n  setFontSize(size: number): this {\n    this.size = size;\n    // font size mangled into cache key, so use the correct one.\n    this.updateCacheKey();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { StemmableNote } from './stemmablenote';\nimport { TextFont } from './textfont';\nimport { FontInfo } from './types/common';\nimport { log } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Annotation.DEBUG) log('Vex.Flow.Annotation', args);\n}\n\nenum Justify {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n  CENTER_STEM = 4,\n}\n\nenum VerticalJustify {\n  TOP = 1,\n  CENTER = 2,\n  BOTTOM = 3,\n  CENTER_STEM = 4,\n}\n\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  protected justification: Justify;\n  protected vert_justification: VerticalJustify;\n  protected text: string;\n  // Initialized by the constructor via this.setFont('Arial', 10)\n  protected font!: FontInfo;\n\n  /** Annotations category string. */\n  static get CATEGORY(): string {\n    return 'annotations';\n  }\n\n  /** Text annotations can be positioned and justified relative to the note. */\n  static Justify = Justify;\n\n  static JustifyString: Record<string, number> = {\n    left: Annotation.Justify.LEFT,\n    right: Annotation.Justify.RIGHT,\n    center: Annotation.Justify.CENTER,\n    centerStem: Annotation.Justify.CENTER_STEM,\n  };\n\n  static VerticalJustify = VerticalJustify;\n\n  static VerticalJustifyString: Record<string, number> = {\n    above: Annotation.VerticalJustify.TOP,\n    top: Annotation.VerticalJustify.TOP,\n    below: Annotation.VerticalJustify.BOTTOM,\n    bottom: Annotation.VerticalJustify.BOTTOM,\n    center: Annotation.VerticalJustify.CENTER,\n    centerStem: Annotation.VerticalJustify.CENTER_STEM,\n  };\n\n  /** Arrange annotations within a `ModifierContext` */\n  static format(annotations: Annotation[], state: ModifierContextState): boolean {\n    if (!annotations || annotations.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < annotations.length; ++i) {\n      let testWidth = 0;\n      const annotation = annotations[i];\n      const textFont = TextFont.getTextFontFromVexFontData({\n        family: annotation.font.family,\n        size: annotation.font.size,\n        weight: 'normal',\n      });\n      // Calculate if the vertical extent will exceed a single line and adjust accordingly.\n      const numLines = Math.floor(textFont.maxHeight / Flow.STAVE_LINE_DISTANCE) + 1;\n      // Get the string width from the font metrics\n      testWidth = textFont.getWidthForString(annotation.text);\n      width = Math.max(width, testWidth);\n      if (annotation.getPosition() === Modifier.Position.ABOVE) {\n        annotation.setTextLine(state.top_text_line);\n        state.top_text_line += numLines;\n      } else {\n        annotation.setTextLine(state.text_line);\n        state.text_line += numLines;\n      }\n    }\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  /**\n   * Annotations inherit from `Modifier` and is positioned correctly when\n   * in a `ModifierContext`.\n   * Create a new `Annotation` with the string `text`.\n   */\n  constructor(text: string) {\n    super();\n    this.setAttribute('type', 'Annotation');\n\n    this.text = text;\n    this.justification = Annotation.Justify.CENTER;\n    this.vert_justification = Annotation.VerticalJustify.TOP;\n    this.setFont('Arial', 10);\n\n    // The default width is calculated from the text.\n    this.setWidth(Flow.textWidth(text));\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return Annotation.CATEGORY;\n  }\n\n  /** Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`. */\n  setFont(family: string, size: number, weight: string = ''): this {\n    this.font = { family, size, weight };\n    return this;\n  }\n\n  /**\n   * Set vertical position of text (above or below stave).\n   * @param just value in `Annotation.VerticalJustify`.\n   */\n  setVerticalJustification(just: string | VerticalJustify): this {\n    this.vert_justification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n    return this;\n  }\n\n  /**\n   * Get horizontal justification.\n   */\n  getJustification(): Justify {\n    return this.justification;\n  }\n\n  /**\n   * Set horizontal justification.\n   * @param justification value in `Annotation.Justify`.\n   */\n  setJustification(just: string | Justify): this {\n    this.justification = typeof just === 'string' ? Annotation.JustifyString[just] : just;\n    return this;\n  }\n\n  /** Render text beside the note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n\n    // We're changing context parameters. Save current state.\n    ctx.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText(this.text).width;\n\n    // Estimate text height to be the same as the width of an 'm'.\n    //\n    // This is a hack to work around the inability to measure text height\n    // in HTML5 Canvas (and SVG).\n    const text_height = ctx.measureText('m').width;\n    let x;\n    let y;\n\n    if (this.justification === Annotation.Justify.LEFT) {\n      x = start.x;\n    } else if (this.justification === Annotation.Justify.RIGHT) {\n      x = start.x - text_width;\n    } else if (this.justification === Annotation.Justify.CENTER) {\n      x = start.x - text_width / 2;\n    } /* CENTER_STEM */ else {\n      x = (note as StemmableNote).getStemX() - text_width / 2;\n    }\n\n    let stem_ext: Record<string, number> = {};\n    let spacing = 0;\n    const has_stem = note.hasStem();\n    const stave = note.checkStave();\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    if (has_stem) {\n      stem_ext = (note as StemmableNote).checkStem().getExtents();\n      spacing = stave.getSpacingBetweenLines();\n    }\n\n    if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin\n      // is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n      if (has_stem) {\n        const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {\n      const yt = note.getYForTopText(this.text_line) - 1;\n      const yb = stave.getYForBottomText(this.text_line);\n      y = yt + (yb - yt) / 2 + text_height / 2;\n    } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {\n      y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\n      if (has_stem) {\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    } /* CENTER_STEM */ else {\n      const extents = note.getStemExtents();\n      y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\n    }\n\n    L('Rendering annotation: ', this.text, x, y);\n    ctx.fillText(this.text, x, y);\n    ctx.closeGroup();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\n\nimport { defined } from './util';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\n\nexport interface LayoutMetrics {\n  xMin: number;\n  xMax: number;\n  paddingLeft: number;\n  paddingRight: number;\n}\n\nexport enum StaveModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n  BEGIN = 5,\n  END = 6,\n}\n\nexport class StaveModifier extends Element {\n  protected width: number = 0;\n  protected x: number = 0;\n\n  protected padding: number;\n  protected position: StaveModifierPosition;\n  protected stave?: Stave;\n  protected layoutMetrics?: LayoutMetrics;\n\n  static get Position(): typeof StaveModifierPosition {\n    return StaveModifierPosition;\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'StaveModifier');\n\n    this.padding = 10;\n    this.position = StaveModifier.Position.ABOVE;\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  setPosition(position: number): this {\n    this.position = position;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  getCategory(): string {\n    return '';\n  }\n\n  placeGlyphOnLine(glyph: Glyph, stave: Stave, line?: number, customShift = 0): void {\n    glyph.setYShift(stave.getYForLine(line ?? 0) - stave.getYForGlyphs() + customShift);\n  }\n\n  getPadding(index: number): number {\n    return index !== undefined && index < 2 ? 0 : this.padding;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  setLayoutMetrics(layoutMetrics: LayoutMetrics): this {\n    this.layoutMetrics = layoutMetrics;\n    return this;\n  }\n\n  getLayoutMetrics(): LayoutMetrics | undefined {\n    return this.layoutMetrics;\n  }\n\n  // eslint-disable-next-line\n  draw(element?: Element, x_shift?: number): void {\n    // DO NOTHING.\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\n\nimport { Flow } from './flow';\nimport { LayoutMetrics, StaveModifier } from './stavemodifier';\nimport { Stave } from './stave';\n\nexport enum BarlineType {\n  SINGLE = 1,\n  DOUBLE = 2,\n  END = 3,\n  REPEAT_BEGIN = 4,\n  REPEAT_END = 5,\n  REPEAT_BOTH = 6,\n  NONE = 7,\n}\n\nexport class Barline extends StaveModifier {\n  protected widths: Record<string, number>;\n  protected paddings: Record<string, number>;\n  protected layoutMetricsMap: Record<number, LayoutMetrics>;\n\n  protected thickness: number;\n  protected type!: BarlineType;\n\n  static get CATEGORY(): string {\n    return 'barlines';\n  }\n\n  static get type(): typeof BarlineType {\n    return BarlineType;\n  }\n\n  static get typeString(): Record<string, BarlineType> {\n    return {\n      single: BarlineType.SINGLE,\n      double: BarlineType.DOUBLE,\n      end: BarlineType.END,\n      repeatBegin: BarlineType.REPEAT_BEGIN,\n      repeatEnd: BarlineType.REPEAT_END,\n      repeatBoth: BarlineType.REPEAT_BOTH,\n      none: BarlineType.NONE,\n    };\n  }\n\n  /**\n   * @constructor\n   */\n  constructor(type: BarlineType | string) {\n    super();\n    this.setAttribute('type', 'Barline');\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n\n    const TYPE = BarlineType;\n    this.widths = {};\n    this.widths[TYPE.SINGLE] = 5;\n    this.widths[TYPE.DOUBLE] = 5;\n    this.widths[TYPE.END] = 5;\n    this.widths[TYPE.REPEAT_BEGIN] = 5;\n    this.widths[TYPE.REPEAT_END] = 5;\n    this.widths[TYPE.REPEAT_BOTH] = 5;\n    this.widths[TYPE.NONE] = 5;\n\n    this.paddings = {};\n    this.paddings[TYPE.SINGLE] = 0;\n    this.paddings[TYPE.DOUBLE] = 0;\n    this.paddings[TYPE.END] = 0;\n    this.paddings[TYPE.REPEAT_BEGIN] = 15;\n    this.paddings[TYPE.REPEAT_END] = 15;\n    this.paddings[TYPE.REPEAT_BOTH] = 15;\n    this.paddings[TYPE.NONE] = 0;\n\n    this.layoutMetricsMap = {};\n    this.layoutMetricsMap[TYPE.SINGLE] = {\n      xMin: 0,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.DOUBLE] = {\n      xMin: -3,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.END] = {\n      xMin: -5,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_END] = {\n      xMin: -10,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n      xMin: -2,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n      xMin: -10,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.NONE] = {\n      xMin: 0,\n      xMax: 0,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type);\n  }\n\n  getCategory(): string {\n    return Barline.CATEGORY;\n  }\n\n  getType(): number {\n    return this.type;\n  }\n\n  setType(type: string | number): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    this.setWidth(this.widths[this.type]);\n    this.setPadding(this.paddings[this.type]);\n    this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n    return this;\n  }\n\n  // Draw barlines\n  draw(stave: Stave): void {\n    stave.checkContext();\n    this.setRendered();\n\n    switch (this.type) {\n      case BarlineType.SINGLE:\n        this.drawVerticalBar(stave, this.x, false);\n        break;\n      case BarlineType.DOUBLE:\n        this.drawVerticalBar(stave, this.x, true);\n        break;\n      case BarlineType.END:\n        this.drawVerticalEndBar(stave, this.x);\n        break;\n      case BarlineType.REPEAT_BEGIN:\n        // If the barline is shifted over (in front of clef/time/key)\n        // Draw vertical bar at the beginning.\n        this.drawRepeatBar(stave, this.x, true);\n        if (stave.getX() !== this.x) {\n          this.drawVerticalBar(stave, stave.getX());\n        }\n\n        break;\n      case BarlineType.REPEAT_END:\n        this.drawRepeatBar(stave, this.x, false);\n        break;\n      case BarlineType.REPEAT_BOTH:\n        this.drawRepeatBar(stave, this.x, false);\n        this.drawRepeatBar(stave, this.x, true);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n  }\n\n  drawVerticalBar(stave: Stave, x: number, double_bar?: boolean): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    if (double_bar) {\n      staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n    }\n    staveCtx.fillRect(x, topY, 1, botY - topY);\n  }\n\n  drawVerticalEndBar(stave: Stave, x: number): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n  }\n\n  drawRepeatBar(stave: Stave, x: number, begin: boolean): void {\n    const staveCtx = stave.checkContext();\n\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    let x_shift = 3;\n\n    if (!begin) {\n      x_shift = -5;\n    }\n\n    staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n\n    const dot_radius = 2;\n\n    // Shift dots left or right\n    if (begin) {\n      x_shift += 4;\n    } else {\n      x_shift -= 4;\n    }\n\n    const dot_x = x + x_shift + dot_radius / 2;\n\n    // calculate the y offset based on number of stave lines\n    let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n    y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n    let dot_y = topY + y_offset + dot_radius / 2;\n\n    // draw the top repeat dot\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n\n    // draw the bottom repeat dot\n    dot_y += stave.getSpacingBetweenLines();\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Note, NoteStruct } from './note';\nimport { Glyph } from './glyph';\nimport { FontInfo } from './types/common';\n\nexport enum Justification {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n}\n\nexport interface TextNoteStruct extends NoteStruct {\n  ignore_ticks?: boolean;\n  smooth?: boolean;\n  glyph?: string;\n  font?: FontInfo;\n  subscript?: string;\n  superscript?: string;\n  text: string;\n}\n\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n  protected text: string;\n  protected superscript?: string;\n  protected subscript?: string;\n  protected smooth: boolean;\n\n  protected font: FontInfo;\n  protected justification: Justification;\n  protected line: number;\n\n  static get Justification(): typeof Justification {\n    return Justification;\n  }\n\n  /** Glyph data. */\n  static get GLYPHS(): Record<string, { code: string }> {\n    return {\n      segno: {\n        code: 'segno',\n      },\n      tr: {\n        code: 'ornamentTrill',\n      },\n      mordent: {\n        code: 'ornamentMordent',\n      },\n      mordent_upper: {\n        code: 'ornamentShortTrill',\n      },\n      mordent_lower: {\n        code: 'ornamentMordent',\n      },\n      f: {\n        code: 'dynamicForte',\n      },\n      p: {\n        code: 'dynamicPiano',\n      },\n      m: {\n        code: 'dynamicMezzo',\n      },\n      s: {\n        code: 'dynamicSforzando',\n      },\n      z: {\n        code: 'dynamicZ',\n      },\n      coda: {\n        code: 'coda',\n      },\n      pedal_open: {\n        code: 'keyboardPedalPed',\n      },\n      pedal_close: {\n        code: 'keyboardPedalUp',\n      },\n      caesura_straight: {\n        code: 'caesura',\n      },\n      caesura_curved: {\n        code: 'caesuraCurved',\n      },\n      breath: {\n        code: 'breathMarkComma',\n      },\n      tick: {\n        code: 'breathMarkTick',\n      },\n      turn: {\n        code: 'ornamentTurn',\n      },\n      turn_inverted: {\n        code: 'ornamentTurnSlash',\n      },\n    };\n  }\n\n  constructor(options: TextNoteStruct) {\n    super(options);\n    this.setAttribute('type', 'TextNote');\n\n    // Note properties\n    this.text = options.text;\n    this.superscript = options.superscript;\n    this.subscript = options.subscript;\n    this.glyph = undefined;\n    this.font = {\n      family: 'Arial',\n      size: 12,\n      weight: '',\n      ...options.font,\n    };\n\n    // Determine and set initial note width. Note that the text width is\n    // an approximation and isn't very accurate. The only way to accurately\n    // measure the length of text is with `canvasmeasureText()`\n    if (options.glyph) {\n      const struct = TextNote.GLYPHS[options.glyph];\n      if (!struct) throw new RuntimeError('Invalid glyph type: ' + options.glyph);\n\n      this.glyph = new Glyph(struct.code, 40, { category: 'textNote' });\n      this.setWidth(this.glyph.getMetrics().width);\n    }\n\n    this.line = options.line || 0;\n    this.smooth = options.smooth || false;\n    this.ignore_ticks = options.ignore_ticks || false;\n    this.justification = TextNote.Justification.LEFT;\n  }\n\n  /** Set the horizontal justification of the TextNote. */\n  setJustification(just: Justification): this {\n    this.justification = just;\n    return this;\n  }\n\n  /** Set the Stave line on which the note should be placed. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Pre-render formatting. */\n  preFormat(): void {\n    if (this.preFormatted) return;\n    const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n\n    if (this.smooth) {\n      this.setWidth(0);\n    } else {\n      if (this.glyph) {\n        // Width already set.\n      } else {\n        const ctx = this.checkContext();\n        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n        this.setWidth(ctx.measureText(this.text).width);\n      }\n    }\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      this.leftDisplacedHeadPx = this.width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      this.leftDisplacedHeadPx = this.width;\n    }\n\n    // We reposition to the center of the note head\n    this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n    this.setPreFormatted(true);\n  }\n\n  /** Renders the TextNote. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n\n    this.setRendered();\n\n    // Reposition to center of note head\n    let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n\n    // Align based on tick-context width.\n    const width = this.getWidth();\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      x -= width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      x -= width;\n    }\n\n    let y;\n    if (this.glyph) {\n      y = stave.getYForLine(this.line + -3);\n      this.glyph.render(ctx, x, y);\n    } else {\n      y = stave.getYForLine(this.line + -3);\n      this.applyStyle(ctx);\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.text, x, y);\n\n      let height = ctx.measureText(this.text).height;\n      // CanvasRenderingContext2D.measureText() does not have a height field.\n      if (typeof height === 'undefined') {\n        // TODO: Consolidate calls to ctx.measureText('M').\n        height = ctx.measureText('M').width;\n      }\n\n      // Write superscript\n      if (this.superscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.superscript, x + width + 2, y - height / 2.2);\n      }\n\n      // Write subscript\n      if (this.subscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.subscript, x + width + 2, y + height / 2.2 - 1);\n      }\n\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport enum VoltaType {\n  NONE = 1,\n  BEGIN = 2,\n  MID = 3,\n  END = 4,\n  BEGIN_END = 5,\n}\n\nexport class Volta extends StaveModifier {\n  protected volta: number;\n  protected number: string;\n\n  protected font: FontInfo;\n  protected y_shift: number;\n  static get CATEGORY(): string {\n    return 'voltas';\n  }\n\n  static get type(): typeof VoltaType {\n    return VoltaType;\n  }\n\n  constructor(type: number, number: string, x: number, y_shift: number) {\n    super();\n    this.setAttribute('type', 'Volta');\n    this.volta = type;\n    this.x = x;\n    this.y_shift = y_shift;\n    this.number = number;\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  getCategory(): string {\n    return Volta.CATEGORY;\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    let width = stave.getWidth() - x; // don't include x (offset) for width\n    const top_y = stave.getYForTopText(stave.getOptions().num_lines) + this.y_shift;\n    const vert_height = 1.5 * stave.getOptions().spacing_between_lines_px;\n    switch (this.volta) {\n      case Volta.type.BEGIN:\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        break;\n      case Volta.type.END:\n        width -= 5;\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      case Volta.type.BEGIN_END:\n        width -= 3;\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      default:\n        break;\n    }\n    // If the beginning of a volta, draw measure number\n    if (this.volta === Volta.type.BEGIN || this.volta === Volta.type.BEGIN_END) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n      ctx.restore();\n    }\n\n    ctx.fillRect(this.x + x, top_y, width, 1);\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements chord symbols as modifiers that can be attached to\n// notes.  Chord symbols can contain multiple 'blocks' which can contain\n// text or glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\n\nimport { log } from './util';\nimport { Flow } from './flow';\nimport { Glyph } from './glyph';\nimport { TextFont } from './textfont';\nimport { Modifier } from './modifier';\nimport { FontInfo } from './types/common';\nimport { StemmableNote } from './stemmablenote';\n\nexport interface ChordSymbolBlock {\n  vAlign: boolean;\n  symbolModifier: number;\n  text: string;\n  yShift: number;\n  xShift: number;\n  width: number;\n  glyph: Glyph;\n  symbolType: number;\n}\n\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (ChordSymbol.DEBUG) log('Vex.Flow.ChordSymbol', args);\n}\n\nexport class ChordSymbol extends Modifier {\n  static DEBUG: boolean = false;\n  protected static noFormat: boolean;\n\n  protected symbolBlocks: ChordSymbolBlock[];\n\n  protected horizontal: number;\n  protected vertical: number;\n  protected useKerning: boolean;\n  protected reportWidth: boolean;\n  protected font: FontInfo;\n  protected textFont: TextFont;\n\n  static get CATEGORY(): string {\n    return 'chordSymbol';\n  }\n\n  // Chord symbols can be positioned and justified relative to the note.\n  static readonly horizontalJustify = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3,\n    CENTER_STEM: 4,\n  };\n\n  static readonly horizontalJustifyString: Record<string, number> = {\n    left: ChordSymbol.horizontalJustify.LEFT,\n    right: ChordSymbol.horizontalJustify.RIGHT,\n    center: ChordSymbol.horizontalJustify.CENTER,\n    centerStem: ChordSymbol.horizontalJustify.CENTER_STEM,\n  };\n\n  static readonly verticalJustify = {\n    TOP: 1,\n    BOTTOM: 2,\n  };\n\n  static get superSubRatio(): number {\n    return ChordSymbol.chordSymbolMetrics.global.superSubRatio;\n  }\n\n  // ### NOTEXTFORMAT\n  // used to globally turn off text formatting, if the built-in formatting does not\n  // work for your font..\n  static get NOTEXTFORMAT(): boolean {\n    return typeof ChordSymbol.noFormat === 'undefined' ? false : ChordSymbol.noFormat;\n  }\n\n  static set NOTEXTFORMAT(val: boolean) {\n    ChordSymbol.noFormat = val;\n  }\n\n  static readonly verticalJustifyString: Record<string, number> = {\n    top: ChordSymbol.verticalJustify.TOP,\n    above: ChordSymbol.verticalJustify.TOP,\n    below: ChordSymbol.verticalJustify.BOTTOM,\n    bottom: ChordSymbol.verticalJustify.BOTTOM,\n  };\n\n  // eslint-disable-next-line\n  static getMetricForGlyph(glyphCode: string): any {\n    if (ChordSymbol.chordSymbolMetrics[glyphCode]) {\n      return ChordSymbol.chordSymbolMetrics[glyphCode];\n    }\n    return undefined;\n  }\n\n  getYOffsetForText(text: string): number {\n    let acc = 0;\n    let ix = 0;\n    const resolution = this.textFont.resolution;\n    for (ix = 0; ix < text.length; ++ix) {\n      const metric = this.textFont.getMetricForCharacter(text[ix]);\n\n      if (metric) {\n        acc = metric.y_max < acc ? metric.y_max : acc;\n      }\n    }\n\n    return ix > 0 ? -1 * (acc / resolution) : 0;\n  }\n\n  static get engravingFontResolution(): number {\n    return Flow.DEFAULT_FONT_STACK[0].getResolution();\n  }\n\n  static get spacingBetweenBlocks(): number {\n    return ChordSymbol.chordSymbolMetrics.global.spacing / ChordSymbol.engravingFontResolution;\n  }\n\n  getWidthForCharacter(c: string): number {\n    return this.textFont.getMetricForCharacter(c).advanceWidth / this.textFont.resolution;\n  }\n\n  static getWidthForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0.65; // probably should do something here.\n    }\n    return metric.advanceWidth / ChordSymbol.engravingFontResolution;\n  }\n\n  static getYShiftForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return metric.yOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static getXShiftForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;\n  }\n\n  static get superscriptOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get subscriptOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get kerningOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.kerningOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  // Glyph data\n  static readonly glyphs: Record<string, { code: string }> = {\n    diminished: {\n      code: 'csymDiminished',\n    },\n    dim: {\n      code: 'csymDiminished',\n    },\n    halfDiminished: {\n      code: 'csymHalfDiminished',\n    },\n    '+': {\n      code: 'csymAugmented',\n    },\n    augmented: {\n      code: 'csymAugmented',\n    },\n    majorSeventh: {\n      code: 'csymMajorSeventh',\n    },\n    minor: {\n      code: 'csymMinor',\n    },\n    '-': {\n      code: 'csymMinor',\n    },\n    '(': {\n      code: 'csymParensLeftTall',\n    },\n    leftParen: {\n      code: 'csymParensLeftTall',\n    },\n    ')': {\n      code: 'csymParensRightTall',\n    },\n    rightParen: {\n      code: 'csymParensRightTall',\n    },\n    leftBracket: {\n      code: 'csymBracketLeftTall',\n    },\n    rightBracket: {\n      code: 'csymBracketRightTall',\n    },\n    leftParenTall: {\n      code: 'csymParensLeftVeryTall',\n    },\n    rightParenTall: {\n      code: 'csymParensRightVeryTall',\n    },\n    '/': {\n      code: 'csymDiagonalArrangementSlash',\n    },\n    over: {\n      code: 'csymDiagonalArrangementSlash',\n    },\n    '#': {\n      code: 'accidentalSharp',\n    },\n    b: {\n      code: 'accidentalFlat',\n    },\n  };\n\n  static readonly symbolTypes = {\n    GLYPH: 1,\n    TEXT: 2,\n    LINE: 3,\n  };\n\n  static readonly symbolModifiers = {\n    NONE: 1,\n    SUBSCRIPT: 2,\n    SUPERSCRIPT: 3,\n  };\n\n  // eslint-disable-next-line\n  static get chordSymbolMetrics(): any {\n    return Flow.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol;\n  }\n\n  static get lowerKerningText(): string[] {\n    return Flow.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol.global.lowerKerningText;\n  }\n\n  static get upperKerningText(): string[] {\n    return Flow.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol.global.upperKerningText;\n  }\n\n  // ### format\n  // try to estimate the width of the whole chord symbol, based on the\n  // sum of the widths of the individual blocks.  Also estimate how many\n  // lines above/below the staff we need`\n  // eslint-disable-next-line\n  static format(instances: any, state: any): boolean {\n    if (!instances || instances.length === 0) return false;\n\n    let width = 0;\n    let nonSuperWidth = 0;\n    const reportedWidths = [];\n\n    for (let i = 0; i < instances.length; ++i) {\n      const instance = instances[i];\n      const fontAdj = instance.font.size / 20;\n      const glyphAdj = fontAdj * 2;\n      let lineSpaces = 1;\n      let vAlign = false;\n\n      for (let j = 0; j < instance.symbolBlocks.length; ++j) {\n        const symbol = instance.symbolBlocks[j];\n        const sup = instance.isSuperscript(symbol);\n        const sub = instance.isSubscript(symbol);\n        const subAdj = sup || sub ? ChordSymbol.superSubRatio : 1;\n        const adj = symbol.symbolType === ChordSymbol.symbolTypes.GLYPH ? glyphAdj * subAdj : fontAdj * subAdj;\n\n        // If there are super/subscripts, they extend beyond the line so\n        // assume they take up 2 lines\n        if (sup || sub) {\n          lineSpaces = 2;\n        }\n\n        // If there is a symbol-specific offset, add it but consider font\n        // size since font and glyphs will be interspersed\n        if (symbol.symbolType === ChordSymbol.symbolTypes.GLYPH) {\n          symbol.yShift += ChordSymbol.getYShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.xShift += ChordSymbol.getXShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.glyph.scale = symbol.glyph.scale * adj;\n          symbol.width = ChordSymbol.getWidthForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n        } else if (symbol.symbolType === ChordSymbol.symbolTypes.TEXT) {\n          symbol.width = symbol.width * instance.textFont.pointsToPixels * subAdj;\n          symbol.yShift += instance.getYOffsetForText(symbol.text) * adj;\n        }\n\n        if (symbol.symbolType === ChordSymbol.symbolTypes.GLYPH && symbol.glyph.code === ChordSymbol.glyphs.over.code) {\n          lineSpaces = 2;\n        }\n        symbol.width += ChordSymbol.spacingBetweenBlocks * instance.pointsToPixels * subAdj;\n\n        // If a subscript immediately  follows a superscript block, try to\n        // overlay them.\n        if (sup && j > 0) {\n          const prev = instance.symbolBlocks[j - 1];\n          if (!instance.isSuperscript(prev)) {\n            nonSuperWidth = width;\n          }\n        }\n        if (sub && nonSuperWidth > 0) {\n          vAlign = true;\n          // slide the symbol over so it lines up with superscript\n          symbol.xShift = symbol.xShift + (nonSuperWidth - width);\n          width = nonSuperWidth;\n          nonSuperWidth = 0;\n          // If we have vertically lined up, turn kerning off.\n          instance.setEnableKerning(false);\n        }\n        if (!sup && !sub) {\n          nonSuperWidth = 0;\n        }\n        symbol.vAlign = vAlign;\n        width += symbol.width;\n      }\n\n      // make kerning adjustments after computing super/subscripts\n      instance.updateKerningAdjustments();\n      instance.updateOverBarAdjustments();\n\n      if (instance.getVertical() === ChordSymbol.verticalJustify.TOP) {\n        instance.setTextLine(state.top_text_line);\n        state.top_text_line += lineSpaces;\n      } else {\n        instance.setTextLine(state.text_line + 1);\n        state.text_line += lineSpaces + 1;\n      }\n      if (instance.getReportWidth()) {\n        reportedWidths.push(width);\n      } else {\n        reportedWidths.push(0);\n      }\n    }\n\n    width = reportedWidths.reduce((a, b) => a + b, 0);\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  // ## Prototype Methods\n  //\n  // chordSymbol is a modifier that creates a chord symbol above/below a chord\n  // This is the modifier version, meaning it is attached to an existing note.\n  constructor() {\n    super();\n    this.setAttribute('type', 'ChordSymbol');\n    this.symbolBlocks = [];\n    this.horizontal = ChordSymbol.horizontalJustify.LEFT;\n    this.vertical = ChordSymbol.verticalJustify.TOP;\n    this.useKerning = true;\n    this.reportWidth = true;\n\n    let fontFamily = 'Arial';\n    if (this.musicFont.getName() === 'Petaluma') {\n      fontFamily = 'petalumaScript,Arial';\n    } else {\n      fontFamily = 'Roboto Slab,Times';\n    }\n    this.font = {\n      family: fontFamily,\n      size: 12,\n      weight: '',\n    };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels(): number {\n    return this.textFont.pointsToPixels;\n  }\n\n  get superscriptOffset(): number {\n    return ChordSymbol.superscriptOffset * this.pointsToPixels;\n  }\n\n  get subscriptOffset(): number {\n    return ChordSymbol.subscriptOffset * this.pointsToPixels;\n  }\n\n  setReportWidth(value: boolean): this {\n    this.reportWidth = value;\n    return this;\n  }\n\n  getReportWidth(): boolean {\n    return this.reportWidth;\n  }\n\n  updateOverBarAdjustments(): void {\n    let symIx = 0;\n    const barIx = this.symbolBlocks.findIndex(\n      (symbol) =>\n        symbol.symbolType === ChordSymbol.symbolTypes.GLYPH && symbol.glyph.code === 'csymDiagonalArrangementSlash'\n    );\n\n    if (barIx < 0) {\n      return;\n    }\n    const bar = this.symbolBlocks[barIx];\n    const xoff = bar.width / 4;\n    const yoff = 0.25 * this.pointsToPixels;\n    for (symIx === 0; symIx < barIx; ++symIx) {\n      const symbol = this.symbolBlocks[symIx];\n      symbol.xShift = symbol.xShift + xoff;\n      symbol.yShift = symbol.yShift - yoff;\n    }\n\n    for (symIx = barIx + 1; symIx < this.symbolBlocks.length; ++symIx) {\n      const symbol = this.symbolBlocks[symIx];\n      symbol.xShift = symbol.xShift - xoff;\n      symbol.yShift = symbol.yShift + yoff;\n    }\n  }\n\n  updateKerningAdjustments(): void {\n    let accum = 0;\n    for (let j = 0; j < this.symbolBlocks.length; ++j) {\n      const symbol = this.symbolBlocks[j];\n      accum += this.getKerningAdjustment(j);\n      symbol.xShift += accum;\n    }\n  }\n\n  // ### getKerningAdjustment\n  // Do some very basic kerning so that letter chords like 'A' don't have\n  // the extensions hanging off to the right.\n  getKerningAdjustment(j: number): number {\n    if (!this.useKerning) {\n      return 0;\n    }\n    const symbol = this.symbolBlocks[j];\n    const kernConst = ChordSymbol.kerningOffset * this.pointsToPixels;\n    const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : undefined;\n    let rv = 0;\n\n    // Move things into the '/' over bar\n    if (symbol.symbolType === ChordSymbol.symbolTypes.GLYPH && symbol.glyph.code === ChordSymbol.glyphs.over.code) {\n      rv += symbol.glyph.metrics.x_shift;\n    }\n\n    if (\n      prevSymbol !== undefined &&\n      prevSymbol.symbolType === ChordSymbol.symbolTypes.GLYPH &&\n      prevSymbol.glyph.code === ChordSymbol.glyphs.over.code\n    ) {\n      rv += prevSymbol.glyph.metrics.x_shift;\n    }\n\n    // For superscripts that follow a letter without much top part, move it to the\n    // left slightly\n    let preKernUpper = false;\n    let preKernLower = false;\n    if (prevSymbol != null && prevSymbol.symbolType === ChordSymbol.symbolTypes.TEXT) {\n      preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n      preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n    }\n\n    // TODO: adjustkern for  for font size.\n    // Where should this constant live?\n    if (preKernUpper && symbol.symbolModifier === ChordSymbol.symbolModifiers.SUPERSCRIPT) {\n      rv += kernConst;\n    }\n\n    if (preKernLower && symbol.symbolType === ChordSymbol.symbolTypes.TEXT) {\n      if (symbol.text[0] >= 'a' && symbol.text[0] <= 'z') {\n        rv += kernConst / 2;\n      }\n      if (ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol?.text[prevSymbol.text.length - 1])) {\n        rv += kernConst / 2;\n      }\n    }\n    return rv;\n  }\n\n  // ### getSymbolBlock\n  // ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n  // Each block can have its own vertical orientation\n  // eslint-disable-next-line\n  getSymbolBlock(parameters: any): any {\n    parameters = parameters == undefined ? {} : parameters;\n    const symbolType = parameters.symbolType ? parameters.symbolType : ChordSymbol.symbolTypes.TEXT;\n    const text = parameters.text ? parameters.text : '';\n    const symbolModifier = parameters.symbolModifier ? parameters.symbolModifier : ChordSymbol.symbolModifiers.NONE;\n    const xShift = 0;\n    const yShift = 0;\n    const vAlign = 0;\n\n    const rv = {\n      text,\n      symbolType,\n      symbolModifier,\n      xShift,\n      yShift,\n      vAlign,\n      width: 0,\n      glyph: undefined as Glyph | undefined,\n    };\n\n    rv.width = 0;\n    // Note: all symbol widths are resolution and font-independent.  We convert to\n    // pixel values when we know what the font is.\n    if (symbolType === ChordSymbol.symbolTypes.GLYPH && typeof parameters.glyph === 'string') {\n      const glyphArgs = ChordSymbol.glyphs[parameters.glyph];\n      const glyphPoints = 20;\n      rv.glyph = new Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });\n      // Beware: glyph.metrics is not the same as glyph.getMetrics() !\n      // rv.glyph.point = rv.glyph.point * rv.glyph.metrics.scale;\n      // rv.width = rv.glyph.getMetrics().width;\n      // don't set yShift here, b/c we need to do it at formatting time after the font is set.\n    } else if (symbolType === ChordSymbol.symbolTypes.TEXT) {\n      let twidth = 0;\n      for (let i = 0; i < rv.text.length; ++i) {\n        twidth += this.getWidthForCharacter(rv.text[i]);\n      }\n      rv.width = twidth;\n    } else if (symbolType === ChordSymbol.symbolTypes.LINE) {\n      rv.width = parameters.width;\n    }\n\n    return rv;\n  }\n\n  // ### addSymbolBlock\n  // Add a symbol to this chord, could be text, glyph or line.\n  // eslint-disable-next-line\n  addSymbolBlock(parameters: any): this {\n    this.symbolBlocks.push(this.getSymbolBlock(parameters));\n    return this;\n  }\n\n  // ### Convenience functions follow that let you create different types of\n  // chord symbol parts easily\n  // ### addText\n  // Add a text block\n  // eslint-disable-next-line\n  addText(text: string, parameters: any): this {\n    parameters = parameters == null ? {} : parameters;\n    parameters.text = text;\n    parameters.symbolType = ChordSymbol.symbolTypes.TEXT;\n    return this.addSymbolBlock(parameters);\n  }\n\n  // ### addTextSuperscript\n  // add a text block with superscript modifier\n  addTextSuperscript(text: string): this {\n    const symbolType = ChordSymbol.symbolTypes.TEXT;\n    const symbolModifier = ChordSymbol.symbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  // ### addTextSubscript\n  // add a text block with subscript modifier\n  addTextSubscript(text: string): this {\n    const symbolType = ChordSymbol.symbolTypes.TEXT;\n    const symbolModifier = ChordSymbol.symbolModifiers.SUBSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  // ### addGlyphSuperscript\n  // add a glyph block with superscript modifier\n  addGlyphSuperscript(glyph: Glyph): this {\n    const symbolType = ChordSymbol.symbolTypes.GLYPH;\n    const symbolModifier = ChordSymbol.symbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ glyph, symbolType, symbolModifier });\n  }\n\n  // eslint-disable-next-line\n  addGlyph(glyph: string, parameters: any): this {\n    parameters = parameters == null ? {} : parameters;\n    parameters.glyph = glyph;\n    parameters.symbolType = ChordSymbol.symbolTypes.GLYPH;\n    return this.addSymbolBlock(parameters);\n  }\n\n  // ### addGlyphOrText\n  // Add a glyph for each character in 'text'.  If the glyph is not\n  // available, use text from the font.  E.g.:\n  // `addGlyphOrText(\"(+5#11)\")`\n  // will use text for the '5' and '11', and glyphs for everything else.\n  // eslint-disable-next-line\n  addGlyphOrText(text: string[], parameters: any): this {\n    parameters = parameters == null ? {} : parameters;\n    let str = '';\n    for (let i = 0; i < text.length; ++i) {\n      if (ChordSymbol.glyphs[text[i]]) {\n        if (str.length > 0) {\n          this.addText(str, parameters);\n          str = '';\n        }\n        this.addGlyph(text[i], parameters);\n      } else {\n        str += text[i];\n      }\n    }\n    if (str.length > 0) {\n      this.addText(str, parameters);\n    }\n    return this;\n  }\n\n  // ### Add a line of the given width, used as a continuation of the previous\n  // symbol in analysis, or lyrics, etc.\n  // eslint-disable-next-line\n  addLine(width: number, parameters: any): this {\n    parameters = parameters == null ? {} : parameters;\n    parameters.symbolType = ChordSymbol.symbolTypes.LINE;\n    parameters.width = width;\n    return this.addSymbolBlock(parameters);\n  }\n\n  getCategory(): string {\n    return ChordSymbol.CATEGORY;\n  }\n\n  // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n  setFont(family: string, size: number, weight: string): this {\n    this.font = { family, size, weight };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n    return this;\n  }\n\n  setFontSize(size: number): this {\n    this.font.size = size;\n    this.textFont.setFontSize(size);\n    return this;\n  }\n\n  setEnableKerning(val: boolean): this {\n    this.useKerning = val;\n    return this;\n  }\n\n  // Set vertical position of text (above or below stave). `just` must be\n  // a value in `ChordSymbol.vertical`.\n  setVertical(just: string | number): this {\n    this.vertical = typeof just === 'string' ? ChordSymbol.verticalJustifyString[just] : just;\n    return this;\n  }\n\n  getVertical(): number {\n    return this.vertical;\n  }\n\n  // Get and set horizontal justification. `justification` is a value in\n  // `ChordSymbol.Justify`.\n  setHorizontal(just: string | number): this {\n    this.horizontal = typeof just === 'string' ? ChordSymbol.horizontalJustifyString[just] : just;\n    return this;\n  }\n\n  getWidth(): number {\n    let rv = 0;\n    this.symbolBlocks.forEach((symbol) => {\n      rv += symbol.vAlign ? 0 : symbol.width;\n    });\n    return rv;\n  }\n\n  isSuperscript(symbol: ChordSymbolBlock): boolean {\n    return symbol.symbolModifier !== undefined && symbol.symbolModifier === ChordSymbol.symbolModifiers.SUPERSCRIPT;\n  }\n\n  isSubscript(symbol: ChordSymbolBlock): boolean {\n    return symbol.symbolModifier !== undefined && symbol.symbolModifier === ChordSymbol.symbolModifiers.SUBSCRIPT;\n  }\n\n  // Render text and glyphs above/below the note\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote() as StemmableNote;\n    this.setRendered();\n\n    // We're changing context parameters. Save current state.\n    ctx.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n\n    const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    let y: number;\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    const has_stem = note.hasStem();\n    const stave = note.checkStave();\n\n    if (this.vertical === ChordSymbol.verticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin\n      // is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n      if (has_stem) {\n        const stem_ext = note.checkStem().getExtents();\n        const spacing = stave.getSpacingBetweenLines();\n        const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else {\n      // (this.vertical === ChordSymbol.verticalJustify.TOP)\n      y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\n      if (has_stem) {\n        const stem_ext = note.checkStem().getExtents();\n        const spacing = stave.getSpacingBetweenLines();\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    }\n\n    let x = start.x;\n    if (this.horizontal === ChordSymbol.horizontalJustify.LEFT) {\n      x = start.x;\n    } else if (this.horizontal === ChordSymbol.horizontalJustify.RIGHT) {\n      x = start.x + this.getWidth();\n    } else if (this.horizontal === ChordSymbol.horizontalJustify.CENTER) {\n      x = start.x - this.getWidth() / 2;\n    } /* CENTER_STEM */ else {\n      x = note.getStemX() - this.getWidth() / 2;\n    }\n    L('Rendering ChordSymbol: ', this.textFont, x, y);\n\n    this.symbolBlocks.forEach((symbol) => {\n      const sp = this.isSuperscript(symbol);\n      const sub = this.isSubscript(symbol);\n      let curY = y;\n      L('shift was ', symbol.xShift, symbol.yShift);\n      L('curY pre sub ', curY);\n      if (sp) {\n        curY += this.superscriptOffset;\n      }\n      if (sub) {\n        curY += this.subscriptOffset;\n      }\n      L('curY sup/sub ', curY);\n\n      if (symbol.symbolType === ChordSymbol.symbolTypes.TEXT) {\n        if (sp || sub) {\n          ctx.save();\n          ctx.setFont(this.font.family, this.font.size * ChordSymbol.superSubRatio, this.font.weight);\n        }\n        // We estimate the text width, fill it in with the empirical value so the\n        // formatting is even.\n        /* const textDim = ctx.measureText(symbol.text);\n        symbol.width = textDim.width; */\n        L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);\n\n        ctx.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);\n        if (sp || sub) {\n          ctx.restore();\n        }\n      } else if (symbol.symbolType === ChordSymbol.symbolTypes.GLYPH) {\n        curY += symbol.yShift;\n        L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);\n        symbol.glyph.render(ctx, x + symbol.xShift, curY);\n      } else if (symbol.symbolType === ChordSymbol.symbolTypes.LINE) {\n        L('Rendering Line : ', symbol.width, x, curY);\n        ctx.beginPath();\n        ctx.setLineWidth(1); // ?\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + symbol.width, curY);\n        ctx.stroke();\n      }\n\n      x += symbol.width;\n      if (symbol.vAlign) {\n        x += symbol.xShift;\n      }\n    });\n    ctx.closeGroup();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\n\nexport interface BendPhrase {\n  x?: number;\n  type: number;\n  text: string;\n  width?: number;\n  draw_width?: number;\n}\n\nexport interface BendRenderOptions {\n  line_width: number;\n  release_width: number;\n  bend_width: number;\n  line_style: string;\n}\n\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n  protected text: string;\n  protected release: boolean;\n  protected phrase: BendPhrase[];\n  protected font: string;\n  protected render_options: BendRenderOptions;\n\n  static get CATEGORY(): string {\n    return 'bends';\n  }\n\n  static get UP(): number {\n    return 0;\n  }\n\n  static get DOWN(): number {\n    return 1;\n  }\n\n  // ## Static Methods\n  // Arrange bends in `ModifierContext`\n  static format(bends: Bend[], state: ModifierContextState): boolean {\n    if (!bends || bends.length === 0) return false;\n\n    let last_width = 0;\n    // Bends are always on top.\n    const text_line = state.top_text_line;\n\n    // Format Bends\n    for (let i = 0; i < bends.length; ++i) {\n      const bend = bends[i];\n      bend.setXShift(last_width);\n      last_width = bend.getWidth();\n      bend.setTextLine(text_line);\n    }\n\n    state.right_shift += last_width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  /**\n   * Constructor.\n   * Example of a phrase:\n   *    [{\n   *     type: UP,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: DOWN,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: UP,\n   *     text: \"half\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: UP,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: DOWN,\n   *     text: \"1 1/2\"\n   *     width: 8;\n   *   }]\n   * @param text text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n   * @param release if true, render a release. (DEPRECATED)\n   * @param phrase if set, ignore \"text\" and \"release\", and use the more sophisticated phrase specified\n   */\n  constructor(text: string, release: boolean = false, phrase?: BendPhrase[]) {\n    super();\n    this.setAttribute('type', 'Bend');\n\n    this.text = text;\n    this.x_shift = 0;\n    this.release = release;\n    this.font = '10pt Arial';\n    this.render_options = {\n      line_width: 1.5,\n      line_style: '#777777',\n      bend_width: 8,\n      release_width: 8,\n    };\n\n    if (phrase) {\n      this.phrase = phrase;\n    } else {\n      // Backward compatibility\n      this.phrase = [{ type: Bend.UP, text: this.text }];\n      if (this.release) this.phrase.push({ type: Bend.DOWN, text: '' });\n    }\n\n    this.updateWidth();\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return Bend.CATEGORY;\n  }\n\n  /** Set horizontal shift in pixels. */\n  setXShift(value: number): this {\n    this.x_shift = value;\n    this.updateWidth();\n    return this;\n  }\n\n  /** Set text's font. */\n  setFont(font: string): this {\n    this.font = font;\n    return this;\n  }\n\n  /** Get text provided in the constructor. */\n  getText(): string {\n    return this.text;\n  }\n\n  /** Recalculate width. */\n  protected updateWidth(): this {\n    // eslint-disable-next-line\n    const that = this;\n\n    function measure_text(text: string) {\n      let text_width;\n      const ctxThat = that.getContext();\n      if (ctxThat) {\n        text_width = ctxThat.measureText(text).width;\n      } else {\n        text_width = Flow.textWidth(text);\n      }\n\n      return text_width;\n    }\n\n    let total_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (bend.width != undefined) {\n        total_width += bend.width;\n      } else {\n        const additional_width =\n          bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\n\n        bend.width = Math.max(additional_width, measure_text(bend.text)) + 3;\n        bend.draw_width = bend.width / 2;\n        total_width += bend.width;\n      }\n    }\n\n    this.setWidth(total_width + this.x_shift);\n    return this;\n  }\n\n  /** Draw the bend on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n    start.x += 3;\n    start.y += 0.5;\n    const x_shift = this.x_shift;\n\n    const stave = note.checkStave();\n    const bend_height = stave.getYForTopText(this.text_line) + 3;\n    const annotation_y = stave.getYForTopText(this.text_line) - 1;\n    // eslint-disable-next-line\n    const that = this;\n\n    function renderBend(x: number, y: number, width: number, height: number) {\n      const cp_x = x + width;\n      const cp_y = y;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, y);\n      ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderRelease(x: number, y: number, width: number, height: number) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, height);\n      ctx.quadraticCurveTo(x + width, height, x + width, y);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderArrowHead(x: number, y: number, direction?: number) {\n      const width = 4;\n      const dir = direction || 1;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x - width, y + width * dir);\n      ctx.lineTo(x + width, y + width * dir);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    function renderText(x: number, text: string) {\n      ctx.save();\n      ctx.setRawFont(that.font);\n      const render_x = x - ctx.measureText(text).width / 2;\n      ctx.fillText(text, render_x, annotation_y);\n      ctx.restore();\n    }\n\n    let last_bend = undefined;\n    let last_bend_draw_width = 0;\n    let last_drawn_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (!bend.draw_width) bend.draw_width = 0;\n      if (i === 0) bend.draw_width += x_shift;\n\n      last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);\n      if (bend.type === Bend.UP) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderArrowHead(start.x, bend_height);\n        }\n\n        renderBend(start.x, start.y, last_drawn_width, bend_height);\n      }\n\n      if (bend.type === Bend.DOWN) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend && last_bend.type === Bend.DOWN) {\n          renderArrowHead(start.x, start.y, -1);\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (!last_bend) {\n          last_drawn_width = bend.draw_width;\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n      }\n\n      renderText(start.x + last_drawn_width, bend.text);\n      last_bend = bend;\n      last_bend_draw_width = bend.draw_width;\n      last_bend.x = start.x;\n\n      start.x += last_drawn_width;\n    }\n\n    if (!last_bend || last_bend.x == undefined) {\n      throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n    }\n\n    // Final arrowhead and text\n    if (last_bend.type === Bend.UP) {\n      renderArrowHead(last_bend.x + last_drawn_width, bend_height);\n    } else if (last_bend.type === Bend.DOWN) {\n      renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Modifier } from './modifier';\nimport { Bend } from './bend';\nimport { RenderContext } from './types/common';\nimport { ModifierContext, ModifierContextState } from './modifiercontext';\n\nexport interface VibratoRenderOptions {\n  wave_height: number;\n  wave_girth: number;\n  vibrato_width: number;\n  harsh: boolean;\n  wave_width: number;\n}\n\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n  protected render_options: VibratoRenderOptions;\n\n  /** Get element CATEGORY string. */\n  static get CATEGORY(): string {\n    return 'vibratos';\n  }\n\n  /** Arrange vibratos inside a `ModifierContext`. */\n  static format(vibratos: Vibrato[], state: ModifierContextState, context: ModifierContext): boolean {\n    if (!vibratos || vibratos.length === 0) return false;\n\n    // Vibratos are always on top.\n    let text_line = state.top_text_line;\n    let width = 0;\n    let shift = state.right_shift - 7;\n\n    // If there's a bend, drop the text line\n    const bends = context.getMembers(Bend.CATEGORY) as Modifier[];\n    if (bends && bends.length > 0) {\n      text_line--;\n    }\n\n    // Format Vibratos\n    for (let i = 0; i < vibratos.length; ++i) {\n      const vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'Vibrato');\n\n    this.position = Modifier.Position.RIGHT;\n    this.render_options = {\n      harsh: false,\n      vibrato_width: 20,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n    };\n\n    this.setVibratoWidth(this.render_options.vibrato_width);\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return Vibrato.CATEGORY;\n  }\n\n  /** Set harsh vibrato. */\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  /** Set vibrato width in pixels. */\n  setVibratoWidth(width: number): this {\n    this.render_options.vibrato_width = width;\n    this.setWidth(width);\n    return this;\n  }\n\n  /** Draw the vibrato on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n\n    const vx = start.x + this.x_shift;\n    const vy = note.getYForTopText(this.text_line) + 2;\n\n    Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n  }\n\n  /**\n   * Static rendering method that can be called from\n   * other classes (e.g. VibratoBracket).\n   */\n  static renderVibrato(ctx: RenderContext, x: number, y: number, opts: VibratoRenderOptions): void {\n    const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n    const num_waves = vibrato_width / wave_width;\n\n    ctx.beginPath();\n\n    let i;\n    if (harsh) {\n      ctx.moveTo(x, y + wave_girth + 1);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x + wave_width, y - wave_height / 2);\n        x += wave_width;\n        ctx.lineTo(x + wave_width, y + wave_height / 2);\n        x += wave_width;\n      }\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n        ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n      }\n      ctx.fill();\n    } else {\n      ctx.moveTo(x, y + wave_girth);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n        x += wave_width;\n        ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n        x += wave_width;\n      }\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n        ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n      }\n      ctx.fill();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.)\n\nimport { RuntimeError, log } from './util';\nimport { StaveNote } from './stavenote';\nimport { GlyphNote } from './glyphnote';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Accidental } from './accidental';\nimport { NoteSubGroup } from './notesubgroup';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Stroke } from './strokes';\nimport { StringNumber } from './stringnumber';\nimport { Articulation } from './articulation';\nimport { Ornament } from './ornament';\nimport { Annotation } from './annotation';\nimport { ChordSymbol } from './chordsymbol';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato';\nimport { Modifier } from './modifier';\nimport { TabNote } from './tabnote';\nimport { Note } from './note';\nimport { Tickable } from './tickable';\n\nexport interface ModifierContextState {\n  right_shift: number;\n  left_shift: number;\n  text_line: number;\n  top_text_line: number;\n}\n\nexport interface ModifierContextMetrics {\n  width: number;\n  spacing: number;\n}\n\nexport type ModifierContextMember = Tickable | Modifier | StaveNote | TabNote;\n\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (ModifierContext.DEBUG) log('Vex.Flow.ModifierContext', args);\n}\n\nexport class ModifierContext {\n  static DEBUG: boolean;\n\n  state: ModifierContextState;\n\n  protected spacing: number;\n  protected members: Record<string, ModifierContextMember[]>;\n\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected width: number;\n  protected formatted?: boolean;\n  // eslint-disable-next-line\n  protected PREFORMAT: any[];\n  // eslint-disable-next-line\n  protected POSTFORMAT: any[];\n\n  constructor() {\n    // Current members\n    this.members = {};\n\n    // Formatting data.\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0,\n    };\n\n    // Add new members to this array. The ordering is significant -- lower\n    // members are formatted and rendered before higher ones.\n    this.PREFORMAT = [\n      StaveNote,\n      Dot,\n      FretHandFinger,\n      Accidental,\n      Stroke,\n      GraceNoteGroup,\n      NoteSubGroup,\n      StringNumber,\n      Articulation,\n      Ornament,\n      Annotation,\n      ChordSymbol,\n      Bend,\n      Vibrato,\n    ];\n\n    // If post-formatting is required for an element, add it to this array.\n    this.POSTFORMAT = [StaveNote];\n  }\n\n  addModifier(member: ModifierContextMember): this {\n    L('addModifier is deprecated, use addMember instead.');\n    return this.addMember(member);\n  }\n\n  addMember(member: ModifierContextMember): this {\n    const category = member.getCategory();\n    if (!this.members[category]) {\n      this.members[category] = [];\n    }\n    this.members[category].push(member);\n    member.setModifierContext(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  getModifiers(category: string): ModifierContextMember[] {\n    L('getModifiers is deprecated, use getMembers instead.');\n    return this.getMembers(category);\n  }\n\n  getMembers(category: string): ModifierContextMember[] {\n    return this.members[category];\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getLeftShift(): number {\n    return this.state.left_shift;\n  }\n\n  getRightShift(): number {\n    return this.state.right_shift;\n  }\n\n  getState(): ModifierContextState {\n    return this.state;\n  }\n\n  getMetrics(): ModifierContextMetrics {\n    if (!this.formatted) {\n      throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n    }\n\n    return {\n      width: this.state.left_shift + this.state.right_shift + this.spacing,\n      spacing: this.spacing,\n    };\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n    this.PREFORMAT.forEach((member) => {\n      L('Preformatting ModifierContext: ', member.CATEGORY);\n      member.format(this.getMembers(member.CATEGORY), this.state, this);\n    });\n\n    // Update width of this member context\n    this.width = this.state.left_shift + this.state.right_shift;\n    this.preFormatted = true;\n  }\n\n  postFormat(): void {\n    if (this.postFormatted) return;\n    this.POSTFORMAT.forEach((member) => {\n      L('Postformatting ModifierContext: ', member.CATEGORY);\n      member.postFormat(this.getMembers(member.CATEGORY) as Note[]);\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\n\nexport interface ClefType {\n  point: number;\n  code: string;\n  line?: number;\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Clef.DEBUG) log('Vex.Flow.Clef', args);\n}\n\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n  /** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  annotation?: {\n    code: string;\n    line: number;\n    x_shift: number;\n    point: number;\n  };\n\n  /**\n   * The attribute `clef` must be a key from\n   * `Clef.types`\n   */\n  clef: ClefType = Clef.types['treble'];\n\n  protected glyph?: Glyph;\n  protected attachment?: Glyph;\n  protected size?: string;\n  protected type?: string;\n\n  /** Clefs category string. */\n  static get CATEGORY(): string {\n    return 'clefs';\n  }\n\n  /**\n   * Every clef name is associated with a glyph code from the font file\n   * and a default stave line number.\n   */\n  static get types(): Record<string, ClefType> {\n    return {\n      treble: {\n        code: 'gClef',\n        line: 3,\n        point: 0,\n      },\n      bass: {\n        code: 'fClef',\n        line: 1,\n        point: 0,\n      },\n      alto: {\n        code: 'cClef',\n        line: 2,\n        point: 0,\n      },\n      tenor: {\n        code: 'cClef',\n        line: 1,\n        point: 0,\n      },\n      percussion: {\n        code: 'restMaxima',\n        line: 2,\n        point: 0,\n      },\n      soprano: {\n        code: 'cClef',\n        line: 4,\n        point: 0,\n      },\n      'mezzo-soprano': {\n        code: 'cClef',\n        line: 3,\n        point: 0,\n      },\n      'baritone-c': {\n        code: 'cClef',\n        line: 0,\n        point: 0,\n      },\n      'baritone-f': {\n        code: 'fClef',\n        line: 2,\n        point: 0,\n      },\n      subbass: {\n        code: 'fClef',\n        line: 0,\n        point: 0,\n      },\n      french: {\n        code: 'gClef',\n        line: 4,\n        point: 0,\n      },\n      tab: {\n        code: '6stringTabClef',\n        point: 0,\n      },\n    };\n  }\n\n  /** Create a new clef. */\n  constructor(type: string, size?: string, annotation?: string) {\n    super();\n    this.setAttribute('type', 'Clef');\n\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(this.musicFont.lookupMetric(`clef.${this.size}.width`));\n    L('Creating clef:', type);\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return Clef.CATEGORY;\n  }\n\n  /** Set clef type, size and annotation. */\n  setType(type: string, size?: string, annotation?: string): this {\n    this.type = type;\n    this.clef = Clef.types[type];\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n    this.clef.point = this.musicFont.lookupMetric(`clef.${this.size}.point`, 0);\n    this.glyph = new Glyph(this.clef.code, this.clef.point, {\n      category: `clef.${this.clef.code}.${this.size}`,\n    });\n\n    // If an annotation, such as 8va, is specified, add it to the Clef object.\n    if (annotation !== undefined) {\n      const code = this.musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\n      const point = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\n      const line = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\n      const x_shift = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\n\n      this.annotation = { code, point, line, x_shift };\n\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n\n    return this;\n  }\n\n  /** Get clef width. */\n  getWidth(): number {\n    if (this.type === 'tab') {\n      defined(this.stave, 'ClefError', \"Can't get width without stave.\");\n    }\n    return this.width;\n  }\n\n  /** Set associated stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    if (this.type === 'tab') {\n      const glyph = defined(this.glyph, 'ClefError', \"Can't set stave without glyph.\");\n\n      const numLines = this.stave.getOptions().num_lines;\n      const point = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\n      const shiftY = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\n      glyph.setPoint(point);\n      glyph.setYShift(shiftY);\n    }\n    return this;\n  }\n\n  /** Render clef. */\n  draw(): void {\n    if (!this.x) throw new RuntimeError('ClefError', \"Can't draw clef without x.\");\n    const glyph = defined(this.glyph, 'ClefError', \"Can't draw clef without glyph.\");\n    const stave = this.checkStave();\n    this.setRendered();\n\n    glyph.setStave(stave);\n    glyph.setContext(stave.getContext());\n    if (this.clef.line !== undefined) {\n      this.placeGlyphOnLine(glyph, stave, this.clef.line);\n    }\n    glyph.renderToStave(this.x);\n\n    if (this.annotation !== undefined && this.attachment !== undefined) {\n      this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\n      this.attachment.setStave(stave);\n      this.attachment.setContext(stave.getContext());\n      this.attachment.renderToStave(this.x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\n\nimport { defined, RuntimeError } from './util';\nimport { Flow } from './flow';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\n\nexport class KeySignature extends StaveModifier {\n  protected glyphFontScale: number;\n\n  protected glyphs: Glyph[];\n  protected xPositions: number[];\n  protected paddingForced: boolean;\n  protected formatted?: boolean;\n  protected cancelKeySpec?: string;\n  protected accList: { type: string; line: number }[] = [];\n  protected keySpec?: string;\n  protected alterKeySpec?: string;\n\n  static get CATEGORY(): string {\n    return 'keysignatures';\n  }\n\n  // Space between natural and following accidental depending\n  // on vertical position\n  static accidentalSpacing: Record<string, { above: number; below: number }> = {\n    '#': {\n      above: 6,\n      below: 4,\n    },\n    b: {\n      above: 4,\n      below: 7,\n    },\n    n: {\n      above: 4,\n      below: 1,\n    },\n    '##': {\n      above: 6,\n      below: 4,\n    },\n    bb: {\n      above: 4,\n      below: 7,\n    },\n    db: {\n      above: 4,\n      below: 7,\n    },\n    d: {\n      above: 4,\n      below: 7,\n    },\n    bbs: {\n      above: 4,\n      below: 7,\n    },\n    '++': {\n      above: 6,\n      below: 4,\n    },\n    '+': {\n      above: 6,\n      below: 4,\n    },\n    '+-': {\n      above: 6,\n      below: 4,\n    },\n    '++-': {\n      above: 6,\n      below: 4,\n    },\n    bs: {\n      above: 4,\n      below: 10,\n    },\n    bss: {\n      above: 4,\n      below: 10,\n    },\n  };\n\n  // Create a new Key Signature based on a `key_spec`\n  constructor(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string) {\n    super();\n    this.setAttribute('type', 'KeySignature');\n\n    this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n    this.glyphs = [];\n    this.xPositions = []; // relative to this.x\n    this.paddingForced = false;\n  }\n\n  getCategory(): string {\n    return KeySignature.CATEGORY;\n  }\n\n  // Add an accidental glyph to the `KeySignature` instance which represents\n  // the provided `acc`. If `nextAcc` is also provided, the appropriate\n  // spacing will be included in the glyph's position\n  convertToGlyph(acc: { type: string; line: number }, nextAcc: { type: string; line: number }): void {\n    const accGlyphData = Flow.accidentalCodes(acc.type);\n    const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n\n    // Determine spacing between current accidental and the next accidental\n    let extraWidth = 1;\n    if (acc.type === 'n' && nextAcc) {\n      const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n      if (spacing) {\n        const isAbove = nextAcc.line >= acc.line;\n        extraWidth = isAbove ? spacing.above : spacing.below;\n      }\n    }\n\n    // Place the glyph on the stave\n    this.placeGlyphOnLine(glyph, this.checkStave(), acc.line);\n    this.glyphs.push(glyph);\n\n    const xPosition = this.xPositions[this.xPositions.length - 1];\n    const glyphWidth = glyph.getMetrics().width + extraWidth;\n    // Store the next accidental's x position\n    this.xPositions.push(xPosition + glyphWidth);\n    // Expand size of key signature\n    this.width += glyphWidth;\n  }\n\n  // Cancel out a key signature provided in the `spec` parameter. This will\n  // place appropriate natural accidentals before the key signature.\n  cancelKey(spec: string): this {\n    this.formatted = false;\n    this.cancelKeySpec = spec;\n\n    return this;\n  }\n\n  convertToCancelAccList(spec: string): { type: string; accList: { type: string; line: number }[] } | undefined {\n    // Get the accidental list for the cancelled key signature\n    const cancel_accList = Flow.keySignature(spec);\n\n    // If the cancelled key has a different accidental type, ie: # vs b\n    const different_types =\n      this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\n\n    // Determine how many naturals needed to add\n    const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\n\n    // Return if no naturals needed\n    if (naturals < 1) return undefined;\n\n    // Get the line position for each natural\n    const cancelled: { type: string; line: number }[] = [];\n    for (let i = 0; i < naturals; i++) {\n      let index = i;\n      if (!different_types) {\n        index = cancel_accList.length - naturals + i;\n      }\n\n      const acc = cancel_accList[index];\n      cancelled.push({ type: 'n', line: acc.line });\n    }\n\n    // Combine naturals with main accidental list for the key signature\n    this.accList = cancelled.concat(this.accList);\n\n    return {\n      accList: cancelled,\n      type: cancel_accList[0].type,\n    };\n  }\n\n  // Deprecated\n  addToStave(stave: Stave): this {\n    this.paddingForced = true;\n    stave.addModifier(this);\n\n    return this;\n  }\n\n  // Apply the accidental staff line placement based on the `clef` and\n  // the  accidental `type` for the key signature ('# or 'b').\n  convertAccLines(clef: string, type?: string, accList = this.accList): void {\n    let offset = 0.0; // if clef === \"treble\"\n    let customLines; // when clef doesn't follow treble key sig shape\n\n    switch (clef) {\n      // Treble & Subbass both have offsets of 0, so are not included.\n      case 'soprano':\n        if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n        else offset = -1;\n        break;\n      case 'mezzo-soprano':\n        if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n        else offset = 1.5;\n        break;\n      case 'alto':\n        offset = 0.5;\n        break;\n      case 'tenor':\n        if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n        else offset = -0.5;\n        break;\n      case 'baritone-f':\n      case 'baritone-c':\n        if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n        else offset = 2;\n        break;\n      case 'bass':\n      case 'french':\n        offset = 1;\n        break;\n      default:\n        break;\n    }\n\n    // If there's a special case, assign those lines/spaces:\n    let i;\n    if (typeof customLines !== 'undefined') {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line = customLines[i];\n      }\n    } else if (offset !== 0) {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line += offset;\n      }\n    }\n  }\n\n  getPadding(index: number): number {\n    if (!this.formatted) this.format();\n\n    return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n  }\n\n  getWidth(): number {\n    if (!this.formatted) this.format();\n\n    return this.width;\n  }\n\n  setKeySig(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string): this {\n    this.formatted = false;\n    this.keySpec = keySpec;\n    this.cancelKeySpec = cancelKeySpec;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  // Alter the accidentals of a key spec one by one.\n  // Each alteration is a new accidental that replaces the\n  // original accidental (or the canceled one).\n  alterKey(alterKeySpec: string): this {\n    this.formatted = false;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  convertToAlterAccList(alterKeySpec: string): void {\n    const max = Math.min(alterKeySpec.length, this.accList.length);\n    for (let i = 0; i < max; ++i) {\n      if (alterKeySpec[i]) {\n        this.accList[i].type = alterKeySpec[i];\n      }\n    }\n  }\n\n  format(): void {\n    const stave = this.checkStave();\n\n    this.width = 0;\n    this.glyphs = [];\n    this.xPositions = [0]; // initialize with initial x position\n    this.accList = Flow.keySignature(defined(this.keySpec));\n    const accList = this.accList;\n    const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n    let cancelAccList;\n    if (this.cancelKeySpec) {\n      cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n    }\n    if (this.alterKeySpec) {\n      this.convertToAlterAccList(this.alterKeySpec);\n    }\n\n    if (this.accList.length > 0) {\n      const clef =\n        (this.position === StaveModifier.Position.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n      if (cancelAccList) {\n        this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n      }\n      this.convertAccLines(clef, firstAccidentalType, accList);\n      for (let i = 0; i < this.accList.length; ++i) {\n        this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n      }\n    }\n\n    this.formatted = true;\n  }\n\n  draw(): void {\n    if (!this.x) {\n      throw new RuntimeError('KeySignatureError', \"Can't draw key signature without x.\");\n    }\n\n    const stave = this.checkStave();\n\n    if (!this.formatted) this.format();\n    this.setRendered();\n\n    for (let i = 0; i < this.glyphs.length; i++) {\n      const glyph = this.glyphs[i];\n      const x = this.x + this.xPositions[i];\n      glyph.setStave(stave);\n      glyph.setContext(stave.checkContext());\n      glyph.renderToStave(x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { FontInfo } from './types/common';\nimport { Stave } from './stave';\n\nexport class Repetition extends StaveModifier {\n  protected symbol_type: number;\n\n  protected x_shift: number;\n  protected y_shift: number;\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'repetitions';\n  }\n  static readonly type = {\n    NONE: 1, // no coda or segno\n    CODA_LEFT: 2, // coda at beginning of stave\n    CODA_RIGHT: 3, // coda at end of stave\n    SEGNO_LEFT: 4, // segno at beginning of stave\n    SEGNO_RIGHT: 5, // segno at end of stave\n    DC: 6, // D.C. at end of stave\n    DC_AL_CODA: 7, // D.C. al coda at end of stave\n    DC_AL_FINE: 8, // D.C. al Fine end of stave\n    DS: 9, // D.S. at end of stave\n    DS_AL_CODA: 10, // D.S. al coda at end of stave\n    DS_AL_FINE: 11, // D.S. al Fine at end of stave\n    FINE: 12, // Fine at end of stave\n  };\n\n  constructor(type: number, x: number, y_shift: number) {\n    super();\n    this.setAttribute('type', 'Repetition');\n\n    this.symbol_type = type;\n    this.x = x;\n    this.x_shift = 0;\n    this.y_shift = y_shift;\n    this.font = {\n      family: 'times',\n      size: 12,\n      weight: 'bold',\n      style: 'italic',\n    };\n  }\n\n  getCategory(): string {\n    return Repetition.CATEGORY;\n  }\n\n  setShiftX(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    this.setRendered();\n\n    switch (this.symbol_type) {\n      case Repetition.type.CODA_RIGHT:\n        this.drawCodaFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.CODA_LEFT:\n        this.drawSymbolText(stave, x, 'Coda', true);\n        break;\n      case Repetition.type.SEGNO_LEFT:\n        this.drawSignoFixed(stave, x);\n        break;\n      case Repetition.type.SEGNO_RIGHT:\n        this.drawSignoFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.DC:\n        this.drawSymbolText(stave, x, 'D.C.', false);\n        break;\n      case Repetition.type.DC_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.C. al', true);\n        break;\n      case Repetition.type.DC_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n        break;\n      case Repetition.type.DS:\n        this.drawSymbolText(stave, x, 'D.S.', false);\n        break;\n      case Repetition.type.DS_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.S. al', true);\n        break;\n      case Repetition.type.DS_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n        break;\n      case Repetition.type.FINE:\n        this.drawSymbolText(stave, x, 'Fine', false);\n        break;\n      default:\n        break;\n    }\n\n    return this;\n  }\n\n  drawCodaFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 40, 'coda', { category: 'coda' });\n    return this;\n  }\n\n  drawSignoFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 30, 'segno', { category: 'segno' });\n    return this;\n  }\n\n  drawSymbolText(stave: Stave, x: number, text: string, draw_coda: boolean): this {\n    const ctx = stave.checkContext();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Default to right symbol\n    let text_x = 0 + this.x_shift;\n    let symbol_x = x + this.x_shift;\n    if (this.symbol_type === Repetition.type.CODA_LEFT) {\n      // Offset Coda text to right of stave beginning\n      text_x = this.x + stave.getOptions().vertical_bar_width;\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    } else if (this.symbol_type === Repetition.type.DS) {\n      const modifierWidth = stave.getNoteStartX() - this.x;\n      text_x = this.x + x + this.x_shift + stave.getWidth() - 5 - modifierWidth - ctx.measureText(text).width;\n      // TODO this is weird. setting the x position should probably be refactored, parameters aren't clear here.\n    } else {\n      // Offset Signo text to left stave end\n      symbol_x = this.x + x + stave.getWidth() - 5 + this.x_shift;\n      text_x = symbol_x - +ctx.measureText(text).width - 12;\n    }\n\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    if (draw_coda) {\n      Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\n    }\n\n    ctx.fillText(text, text_x, y + 5);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport class StaveSection extends StaveModifier {\n  protected section: string;\n  protected shift_x: number;\n  protected shift_y: number;\n  protected font: FontInfo;\n\n  static get CATEGORY(): string {\n    return 'stavesection';\n  }\n\n  constructor(section: string, x: number, shift_y: number) {\n    super();\n    this.setAttribute('type', 'StaveSection');\n\n    this.setWidth(16);\n    this.section = section;\n    this.x = x;\n    this.shift_x = 0;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'sans-serif',\n      size: 12,\n      weight: 'bold',\n    };\n  }\n\n  getCategory(): string {\n    return StaveSection.CATEGORY;\n  }\n\n  setStaveSection(section: string): this {\n    this.section = section;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.section).width;\n    let width = text_width + 6; // add left & right padding\n    if (width < 18) width = 18;\n    const height = 20;\n    //  Seems to be a good default y\n    const y = stave.getYForTopText(3) + this.shift_y;\n    let x = this.x + shift_x;\n    ctx.beginPath();\n    ctx.setLineWidth(2);\n    ctx.rect(x, y, width, height);\n    ctx.stroke();\n    x += (width - text_width) / 2;\n    ctx.fillText('' + this.section, x, y + 16);\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Radosaw Eichler 2012\n\nimport { Flow } from './flow';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { FontInfo } from './types/common';\nimport { Stave } from './stave';\n\nexport interface StaveTempoOptions {\n  bpm: number;\n  dots: number;\n  duration: string;\n  name: string;\n}\n\nexport class StaveTempo extends StaveModifier {\n  protected font: FontInfo;\n  protected render_options: {\n    glyph_font_scale: number;\n  };\n\n  protected tempo: StaveTempoOptions;\n  protected shift_x: number;\n  protected shift_y: number;\n\n  static get CATEGORY(): string {\n    return 'stavetempo';\n  }\n\n  constructor(tempo: StaveTempoOptions, x: number, shift_y: number) {\n    super();\n    this.setAttribute('type', 'StaveTempo');\n\n    this.tempo = tempo;\n    this.position = StaveModifier.Position.ABOVE;\n    this.x = x;\n    this.shift_x = 10;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'times',\n      size: 14,\n      weight: 'bold',\n    };\n    this.render_options = {\n      glyph_font_scale: 30, // font size for note\n    };\n  }\n\n  getCategory(): string {\n    return StaveTempo.CATEGORY;\n  }\n\n  setTempo(tempo: StaveTempoOptions): this {\n    this.tempo = tempo;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    const options = this.render_options;\n    // FIXME: What does the '38' mean? Why 38? Is that supposed to\n    // be the default font size for standard notation?\n    const scale = options.glyph_font_scale / 38;\n    const name = this.tempo.name;\n    const duration = this.tempo.duration;\n    const dots = this.tempo.dots;\n    const bpm = this.tempo.bpm;\n    const font = this.font;\n    let x = this.x + this.shift_x + shift_x;\n    const y = stave.getYForTopText(1) + this.shift_y;\n\n    ctx.save();\n\n    if (name) {\n      ctx.setFont(font.family, font.size, font.weight);\n      ctx.fillText(name, x, y);\n      x += ctx.measureText(name).width;\n    }\n\n    if (duration && bpm) {\n      ctx.setFont(font.family, font.size, 'normal');\n\n      if (name) {\n        x += ctx.measureText(' ').width;\n        ctx.fillText('(', x, y);\n        x += ctx.measureText('(').width;\n      }\n\n      const code = Flow.getGlyphProps(duration);\n\n      x += 3 * scale;\n      Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n      x += code.getWidth() * scale;\n\n      // Draw stem and flags\n      if (code.stem) {\n        let stem_height = 30;\n\n        if (code.beam_count) stem_height += 3 * (code.beam_count - 1);\n\n        stem_height *= scale;\n\n        const y_top = y - stem_height;\n        ctx.fillRect(x - scale, y_top, scale, stem_height);\n\n        if (code.flag) {\n          Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem, {\n            category: 'flag.staveTempo',\n          });\n\n          if (!dots) x += 6 * scale;\n        }\n      }\n\n      // Draw dot\n      for (let i = 0; i < dots; i++) {\n        x += 6 * scale;\n        ctx.beginPath();\n        ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n        ctx.fill();\n      }\n\n      ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n    }\n\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { RuntimeError } from './util';\nimport { StaveModifier } from './stavemodifier';\nimport { TextNote } from './textnote';\nimport { FontInfo } from './types/common';\nimport { Stave } from './stave';\n\nexport class StaveText extends StaveModifier {\n  protected options: {\n    shift_x: number;\n    shift_y: number;\n    justification: number;\n  };\n  protected font: FontInfo;\n\n  protected text: string;\n  protected shift_x?: number;\n  protected shift_y?: number;\n\n  static get CATEGORY(): string {\n    return 'stavetext';\n  }\n\n  constructor(\n    text: string,\n    position: number,\n    options: {\n      shift_x: number;\n      shift_y: number;\n      justification: number;\n    }\n  ) {\n    super();\n    this.setAttribute('type', 'StaveText');\n\n    this.setWidth(16);\n    this.text = text;\n    this.position = position;\n    this.options = {\n      shift_x: 0,\n      shift_y: 0,\n      justification: TextNote.Justification.CENTER,\n    };\n    this.options = { ...this.options, ...options };\n\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n  }\n\n  getCategory(): string {\n    return StaveText.CATEGORY;\n  }\n\n  setStaveText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  draw(stave: Stave): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.text).width;\n\n    let x;\n    let y;\n    const Position = StaveModifier.Position;\n    const Justification = TextNote.Justification;\n    switch (this.position) {\n      case Position.LEFT:\n      case Position.RIGHT:\n        y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n        if (this.position === Position.LEFT) {\n          x = stave.getX() - text_width - 24 + this.options.shift_x;\n        } else {\n          x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n        }\n        break;\n      case Position.ABOVE:\n      case Position.BELOW:\n        x = stave.getX() + this.options.shift_x;\n        if (this.options.justification === Justification.CENTER) {\n          x += stave.getWidth() / 2 - text_width / 2;\n        } else if (this.options.justification === Justification.RIGHT) {\n          x += stave.getWidth() - text_width;\n        }\n\n        if (this.position === Position.ABOVE) {\n          y = stave.getYForTopText(2) + this.options.shift_y;\n        } else {\n          y = stave.getYForBottomText(2) + this.options.shift_y;\n        }\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n    }\n\n    ctx.fillText('' + this.text, x, y + 4);\n    ctx.restore();\n    return this;\n  }\n}\n","import { defined } from './util';\nimport { Glyph, GlyphMetrics } from './glyph';\nimport { TimeSignature } from './timesignature';\n\nexport class TimeSignatureGlyph extends Glyph {\n  timeSignature: TimeSignature;\n  topStartX: number;\n  botStartX: number;\n  width: number;\n  xMin: number;\n\n  constructor(\n    timeSignature: TimeSignature,\n    topDigits: string[],\n    botDigits: string[],\n    code: string,\n    point: number,\n    options?: { category: string }\n  ) {\n    super(code, point, options);\n    this.timeSignature = timeSignature;\n    this.topGlyphs = [];\n    this.botGlyphs = [];\n\n    let topWidth = 0;\n    for (let i = 0; i < topDigits.length; ++i) {\n      const num = topDigits[i];\n      const topGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.topGlyphs.push(topGlyph);\n      topWidth += topGlyph.getMetrics().width ?? 0;\n    }\n\n    let botWidth = 0;\n    for (let i = 0; i < botDigits.length; ++i) {\n      const num = botDigits[i];\n      const botGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.botGlyphs.push(botGlyph);\n      botWidth += defined(botGlyph.getMetrics().width);\n    }\n\n    this.width = Math.max(topWidth, botWidth);\n    this.xMin = this.getMetrics().x_min;\n    this.topStartX = (this.width - topWidth) / 2.0;\n    this.botStartX = (this.width - botWidth) / 2.0;\n    this.reset();\n  }\n\n  getMetrics(): GlyphMetrics {\n    return {\n      x_min: this.xMin,\n      x_max: this.xMin + this.width,\n      width: this.width,\n    } as GlyphMetrics;\n  }\n\n  renderToStave(x: number): void {\n    const stave = this.checkStave();\n\n    let start_x = x + this.topStartX;\n    for (let i = 0; i < this.topGlyphs.length; ++i) {\n      const glyph = this.topGlyphs[i];\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + this.x_shift,\n        stave.getYForLine(this.timeSignature.topLine)\n      );\n      start_x += defined(glyph.getMetrics().width);\n    }\n\n    start_x = x + this.botStartX;\n    for (let i = 0; i < this.botGlyphs.length; ++i) {\n      const glyph = this.botGlyphs[i];\n      this.timeSignature.placeGlyphOnLine(glyph, stave, 0);\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + glyph.getMetrics().x_shift,\n        stave.getYForLine(this.timeSignature.bottomLine)\n      );\n      start_x += defined(glyph.getMetrics().width);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\n\nimport { RuntimeError, defined } from './util';\nimport { Glyph } from './glyph';\nimport { StaveModifier } from './stavemodifier';\nimport { TimeSignatureGlyph } from './timesigglyph';\n\nexport interface TimeSignatureInfo {\n  glyph: Glyph;\n  line?: number;\n  num: boolean;\n}\n\nconst assertIsValidFraction = (timeSpec: string) => {\n  const numbers = timeSpec.split('/').filter((number) => number !== '');\n\n  if (numbers.length !== 2) {\n    throw new RuntimeError(\n      'BadTimeSignature',\n      `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`\n    );\n  }\n\n  numbers.forEach((number) => {\n    if (isNaN(Number(number))) {\n      throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain two valid numbers.`);\n    }\n  });\n};\n\nexport class TimeSignature extends StaveModifier {\n  point: number;\n  bottomLine: number;\n  topLine: number;\n\n  protected info: TimeSignatureInfo;\n  protected validate_args: boolean;\n\n  static get CATEGORY(): string {\n    return 'timesignatures';\n  }\n\n  static get glyphs(): Record<string, { code: string; point: number; line: number }> {\n    return {\n      C: {\n        code: 'timeSigCommon',\n        point: 40,\n        line: 2,\n      },\n      'C|': {\n        code: 'timeSigCutCommon',\n        point: 40,\n        line: 2,\n      },\n    };\n  }\n\n  constructor(timeSpec: string = '4/4', customPadding = 15, validate_args = true) {\n    super();\n    this.setAttribute('type', 'TimeSignature');\n    this.validate_args = validate_args;\n\n    const padding = customPadding;\n\n    this.point = this.musicFont.lookupMetric('digits.point');\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n    this.topLine = 2 + fontLineShift;\n    this.bottomLine = 4 + fontLineShift;\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.info = this.parseTimeSpec(timeSpec);\n    this.setWidth(defined(this.info.glyph.getMetrics().width));\n    this.setPadding(padding);\n  }\n\n  getCategory(): string {\n    return TimeSignature.CATEGORY;\n  }\n\n  parseTimeSpec(timeSpec: string): TimeSignatureInfo {\n    if (timeSpec === 'C' || timeSpec === 'C|') {\n      const { line, code, point } = TimeSignature.glyphs[timeSpec];\n      return {\n        line,\n        num: false,\n        glyph: new Glyph(code, point),\n      };\n    }\n\n    if (this.validate_args) {\n      assertIsValidFraction(timeSpec);\n    }\n\n    const [topDigits, botDigits] = timeSpec.split('/').map((number) => number.split(''));\n\n    return {\n      num: true,\n      glyph: this.makeTimeSignatureGlyph(topDigits, botDigits),\n    };\n  }\n\n  makeTimeSignatureGlyph(topDigits: string[], botDigits: string[]): Glyph {\n    return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n  }\n\n  getInfo(): TimeSignatureInfo {\n    return this.info;\n  }\n\n  setTimeSig(timeSpec: string): this {\n    this.info = this.parseTimeSpec(timeSpec);\n    return this;\n  }\n\n  draw(): void {\n    if (!this.x) {\n      throw new RuntimeError('TimeSignatureError', \"Can't draw time signature without x.\");\n    }\n\n    const stave = this.checkStave();\n\n    this.setRendered();\n    this.info.glyph.setStave(stave);\n    this.info.glyph.setContext(stave.getContext());\n    this.placeGlyphOnLine(this.info.glyph, stave, this.info.line);\n    this.info.glyph.renderToStave(this.x);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element, ElementStyle } from './element';\nimport { Flow } from './flow';\nimport { KeySignature } from './keysignature';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifier } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo, StaveTempoOptions } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { TimeSignature } from './timesignature';\nimport { Bounds, FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport interface StaveLineConfig {\n  visible: boolean;\n}\n\nexport interface StaveOptions {\n  // [name: string]: any;\n  spacing: number;\n  thickness: number;\n  x_shift: number;\n  y_shift: number;\n  position_end?: number;\n  invert?: boolean;\n  cps?: { x: number; y: number }[];\n  bottom_text_position: number;\n  line_config: StaveLineConfig[];\n  space_below_staff_ln: number;\n  glyph_spacing_px: number;\n  space_above_staff_ln: number;\n  vertical_bar_width: number;\n  fill_style: string;\n  left_bar: boolean;\n  right_bar: boolean;\n  spacing_between_lines_px: number;\n  top_text_position: number;\n  num_lines: number;\n}\n\nexport class Stave extends Element {\n  protected start_x: number;\n  protected clef: string;\n  protected options: StaveOptions;\n  protected endClef?: string;\n\n  protected x: number;\n  protected y: number;\n  protected width: number;\n  // Initialized by the constructor via this.resetLines().\n  protected height: number = 0;\n\n  protected formatted: boolean;\n  protected end_x: number;\n  protected measure: number;\n  protected font: FontInfo;\n  protected bounds: Bounds;\n  protected readonly modifiers: StaveModifier[];\n\n  protected defaultLedgerLineStyle: ElementStyle;\n\n  // This is the sum of the padding that normally goes on left + right of a stave during\n  // drawing.  Used to size staves correctly with content width\n  static get defaultPadding() {\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n  }\n  // Right padding, used by system if startX is already determined.\n  static get rightPadding(): number {\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('stave.endPaddingMax');\n  }\n\n  constructor(x: number, y: number, width: number, options?: Partial<StaveOptions>) {\n    super();\n    this.setAttribute('type', 'Stave');\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.formatted = false;\n    this.start_x = x + 5;\n    this.end_x = x + width;\n    this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n    this.measure = 0;\n    this.clef = 'treble';\n    this.endClef = undefined;\n    this.font = {\n      family: 'sans-serif',\n      size: 8,\n      weight: '',\n    };\n    this.options = {\n      spacing: 2,\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      vertical_bar_width: 10, // Width around vertical bar end-marker\n      glyph_spacing_px: 10,\n      num_lines: 5,\n      fill_style: '#999999',\n      left_bar: true, // draw vertical bar on left\n      right_bar: true, // draw vertical bar on right\n      spacing_between_lines_px: Flow.STAVE_LINE_DISTANCE, // in pixels\n      space_above_staff_ln: 4, // in staff lines\n      space_below_staff_ln: 4, // in staff lines\n      top_text_position: 1, // in staff lines\n      bottom_text_position: 4, // in staff lines\n      line_config: [],\n    };\n    this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n    this.options = { ...this.options, ...options };\n    this.defaultLedgerLineStyle = {};\n\n    this.resetLines();\n\n    // beg bar\n    this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\n    // end bar\n    this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\n  }\n\n  /** Set default style for ledger lines. */\n  setDefaultLedgerLineStyle(style: ElementStyle): void {\n    this.defaultLedgerLineStyle = style;\n  }\n\n  /** Get default style for ledger lines. */\n  getDefaultLedgerLineStyle(): ElementStyle {\n    return { ...this.getStyle(), ...this.defaultLedgerLineStyle };\n  }\n  space(spacing: number): number {\n    return this.options.spacing_between_lines_px * spacing;\n  }\n\n  resetLines(): void {\n    this.options.line_config = [];\n    for (let i = 0; i < this.options.num_lines; i++) {\n      this.options.line_config.push({ visible: true });\n    }\n    this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n    this.options.bottom_text_position = this.options.num_lines;\n  }\n\n  getOptions(): StaveOptions {\n    return this.options;\n  }\n\n  setNoteStartX(x: number): this {\n    if (!this.formatted) this.format();\n\n    this.start_x = x;\n    const begBarline = this.modifiers[0];\n    begBarline.setX(this.start_x - begBarline.getWidth());\n    return this;\n  }\n\n  getNoteStartX(): number {\n    if (!this.formatted) this.format();\n\n    return this.start_x;\n  }\n\n  getNoteEndX(): number {\n    if (!this.formatted) this.format();\n\n    return this.end_x;\n  }\n\n  getTieStartX(): number {\n    return this.start_x;\n  }\n\n  getTieEndX(): number {\n    return this.x + this.width;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  getNumLines(): number {\n    return this.options.num_lines;\n  }\n\n  setNumLines(n: number): this {\n    this.options.num_lines = n;\n    this.resetLines();\n    return this;\n  }\n\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  getY(): number {\n    return this.y;\n  }\n\n  getTopLineTopY(): number {\n    return this.getYForLine(0) - Flow.STAVE_LINE_THICKNESS / 2;\n  }\n\n  getBottomLineBottomY(): number {\n    return this.getYForLine(this.getNumLines() - 1) + Flow.STAVE_LINE_THICKNESS / 2;\n  }\n\n  setX(x: number): this {\n    const shift = x - this.x;\n    this.formatted = false;\n    this.x = x;\n    this.start_x += shift;\n    this.end_x += shift;\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const mod = this.modifiers[i];\n      mod.setX(mod.getX() + shift);\n    }\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.formatted = false;\n    this.width = width;\n    this.end_x = this.x + width;\n\n    // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n    // this.modifiers[1].setX(this.end_x);\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getStyle(): ElementStyle {\n    return {\n      fillStyle: this.options.fill_style,\n      strokeStyle: this.options.fill_style, // yes, this is correct for legacy compatibility\n      lineWidth: Flow.STAVE_LINE_THICKNESS,\n      ...(this.style || {}),\n    };\n  }\n\n  setMeasure(measure: number): this {\n    this.measure = measure;\n    return this;\n  }\n\n  /**\n   * Gets the pixels to shift from the beginning of the stave\n   * following the modifier at the provided index\n   * @param  {Number} index The index from which to determine the shift\n   * @return {Number}       The amount of pixels shifted\n   */\n  getModifierXShift(index = 0): number {\n    if (typeof index !== 'number') {\n      throw new RuntimeError('InvalidIndex', 'Must be of number type');\n    }\n\n    if (!this.formatted) this.format();\n\n    if (this.getModifiers(StaveModifier.Position.BEGIN).length === 1) {\n      return 0;\n    }\n\n    // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n    if (this.modifiers[index].getPosition() === StaveModifier.Position.RIGHT) {\n      return 0;\n    }\n\n    let start_x = this.start_x - this.x;\n    const begBarline = this.modifiers[0] as Barline;\n    if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n      start_x -= begBarline.getWidth();\n    }\n\n    return start_x;\n  }\n\n  // Coda & Segno Symbol functions\n  setRepetitionTypeLeft(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  setRepetitionTypeRight(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  // Volta functions\n  setVoltaType(type: number, number_t: string, y: number): this {\n    this.modifiers.push(new Volta(type, number_t, this.x, y));\n    return this;\n  }\n\n  // Section functions\n  setSection(section: string, y: number): this {\n    this.modifiers.push(new StaveSection(section, this.x, y));\n    return this;\n  }\n\n  // Tempo functions\n  setTempo(tempo: StaveTempoOptions, y: number): this {\n    this.modifiers.push(new StaveTempo(tempo, this.x, y));\n    return this;\n  }\n\n  // Text functions\n  setText(\n    text: string,\n    position: number,\n    options: {\n      shift_x: number;\n      shift_y: number;\n      justification: number;\n    }\n  ): this {\n    this.modifiers.push(new StaveText(text, position, options));\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  getSpacingBetweenLines(): number {\n    return this.options.spacing_between_lines_px;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n  }\n\n  getBottomY(): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n\n    return score_bottom;\n  }\n\n  getBottomLineY(): number {\n    return this.getYForLine(this.options.num_lines);\n  }\n\n  // This returns the y for the *center* of a staff line\n  getYForLine(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n\n    const y = this.y + line * spacing + headroom * spacing;\n\n    return y;\n  }\n\n  getLineForY(y: number): number {\n    // Does the reverse of getYForLine - somewhat dumb and just calls\n    // getYForLine until the right value is reaches\n\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return (y - this.y) / spacing - headroom;\n  }\n\n  getYForTopText(line: number = 0): number {\n    return this.getYForLine(-line - this.options.top_text_position);\n  }\n\n  getYForBottomText(line: number = 0): number {\n    return this.getYForLine(this.options.bottom_text_position + line);\n  }\n\n  getYForNote(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    const y = this.y + headroom * spacing + 5 * spacing - line * spacing;\n\n    return y;\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(3);\n  }\n\n  // This method adds a stave modifier to the stave. Note that the first two\n  // modifiers (BarLines) are automatically added upon construction.\n  addModifier(modifier: StaveModifier, position?: number): this {\n    if (position !== undefined) {\n      modifier.setPosition(position);\n    }\n\n    modifier.setStave(this);\n    this.formatted = false;\n    this.modifiers.push(modifier);\n    return this;\n  }\n\n  addEndModifier(modifier: StaveModifier): this {\n    this.addModifier(modifier, StaveModifier.Position.END);\n    return this;\n  }\n\n  // Bar Line functions\n  setBegBarType(type: number): this {\n    // Only valid bar types at beginning of stave is none, single or begin repeat\n    const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n    if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n      (this.modifiers[0] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setEndBarType(type: number): this {\n    // Repeat end not valid at end of stave\n    if (type !== BarlineType.REPEAT_BEGIN) {\n      (this.modifiers[1] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setClef(clefSpec: string, size?: string, annotation?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    if (position === StaveModifier.Position.END) {\n      this.endClef = clefSpec;\n    } else {\n      this.clef = clefSpec;\n    }\n\n    const clefs = this.getModifiers(position, Clef.CATEGORY) as Clef[];\n    if (clefs.length === 0) {\n      this.addClef(clefSpec, size, annotation, position);\n    } else {\n      clefs[0].setType(clefSpec, size, annotation);\n    }\n\n    return this;\n  }\n\n  getClef(): string {\n    return this.clef;\n  }\n\n  setEndClef(clefSpec: string, size?: string, annotation?: string): this {\n    this.setClef(clefSpec, size, annotation, StaveModifier.Position.END);\n    return this;\n  }\n\n  getEndClef(): string | undefined {\n    return this.endClef;\n  }\n\n  setKeySignature(keySpec: string, cancelKeySpec?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    const keySignatures = this.getModifiers(position, KeySignature.CATEGORY) as KeySignature[];\n    if (keySignatures.length === 0) {\n      this.addKeySignature(keySpec, cancelKeySpec, position);\n    } else {\n      keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n    }\n\n    return this;\n  }\n\n  setEndKeySignature(keySpec: string, cancelKeySpec?: string): this {\n    this.setKeySignature(keySpec, cancelKeySpec, StaveModifier.Position.END);\n    return this;\n  }\n\n  setTimeSignature(timeSpec: string, customPadding?: number, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY) as TimeSignature[];\n    if (timeSignatures.length === 0) {\n      this.addTimeSignature(timeSpec, customPadding, position);\n    } else {\n      timeSignatures[0].setTimeSig(timeSpec);\n    }\n\n    return this;\n  }\n\n  setEndTimeSignature(timeSpec: string, customPadding: number): this {\n    this.setTimeSignature(timeSpec, customPadding, StaveModifier.Position.END);\n    return this;\n  }\n\n  /**\n   * Add a key signature to the stave.\n   *\n   * Example:\n   * `stave.addKeySignature('Db');`\n   * @param keySpec new key specification `[A-G][b|#]?`\n   * @param cancelKeySpec\n   * @param position\n   * @returns\n   */\n  addKeySignature(keySpec: string, cancelKeySpec?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n    this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n    return this;\n  }\n\n  /**\n   * Add a clef to the stave.\n   *\n   * Example:\n   *\n   * stave.addClef('treble')\n   * @param clef clef (treble|bass|...) see {@link Clef.types}\n   * @param size\n   * @param annotation\n   * @param position\n   * @returns\n   */\n  addClef(clef: string, size?: string, annotation?: string, position?: number): this {\n    if (position === undefined || position === StaveModifier.Position.BEGIN) {\n      this.clef = clef;\n    } else if (position === StaveModifier.Position.END) {\n      this.endClef = clef;\n    }\n\n    this.addModifier(new Clef(clef, size, annotation), position);\n    return this;\n  }\n\n  addEndClef(clef: string, size?: string, annotation?: string): this {\n    this.addClef(clef, size, annotation, StaveModifier.Position.END);\n    return this;\n  }\n\n  /**\n   * Add a time signature to the stave\n   *\n   * Example:\n   *\n   * `stave.addTimeSignature('4/4');`\n   * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n   * @param customPadding\n   * @param position\n   * @returns\n   */\n  addTimeSignature(timeSpec: string, customPadding?: number, position?: number): this {\n    this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n    return this;\n  }\n\n  addEndTimeSignature(timeSpec: string, customPadding?: number): this {\n    this.addTimeSignature(timeSpec, customPadding, StaveModifier.Position.END);\n    return this;\n  }\n\n  // Deprecated\n  addTrebleGlyph(): this {\n    this.addClef('treble');\n    return this;\n  }\n\n  getModifiers(position?: number, category?: string): StaveModifier[] {\n    if (position === undefined && category === undefined) return this.modifiers;\n\n    return this.modifiers.filter(\n      (modifier) =>\n        (position === undefined || position === modifier.getPosition()) &&\n        (category === undefined || category === modifier.getCategory())\n    );\n  }\n\n  sortByCategory(items: StaveModifier[], order: Record<string, number>): void {\n    for (let i = items.length - 1; i >= 0; i--) {\n      for (let j = 0; j < i; j++) {\n        if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n          const temp = items[j];\n          items[j] = items[j + 1];\n          items[j + 1] = temp;\n        }\n      }\n    }\n  }\n\n  format(): void {\n    const begBarline = this.modifiers[0] as Barline;\n    const endBarline = this.modifiers[1];\n\n    const begModifiers = this.getModifiers(StaveModifier.Position.BEGIN);\n    const endModifiers = this.getModifiers(StaveModifier.Position.END);\n\n    this.sortByCategory(begModifiers, {\n      barlines: 0,\n      clefs: 1,\n      keysignatures: 2,\n      timesignatures: 3,\n    });\n\n    this.sortByCategory(endModifiers, {\n      timesignatures: 0,\n      keysignatures: 1,\n      barlines: 2,\n      clefs: 3,\n    });\n\n    if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n      begModifiers.push(begModifiers.splice(0, 1)[0]);\n      begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n    }\n\n    if (endModifiers.indexOf(endBarline) > 0) {\n      endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n    }\n\n    let width;\n    let padding;\n    let modifier;\n    let offset = 0;\n    let x = this.x;\n    for (let i = 0; i < begModifiers.length; i++) {\n      modifier = begModifiers[i];\n      padding = modifier.getPadding(i + offset);\n      width = modifier.getWidth();\n\n      x += padding;\n      modifier.setX(x);\n      x += width;\n\n      if (padding + width === 0) offset--;\n    }\n\n    this.start_x = x;\n    x = this.x + this.width;\n\n    const widths = {\n      left: 0,\n      right: 0,\n      paddingRight: 0,\n      paddingLeft: 0,\n    };\n\n    let lastBarlineIdx = 0;\n\n    for (let i = 0; i < endModifiers.length; i++) {\n      modifier = endModifiers[i];\n      lastBarlineIdx = modifier.getCategory() === Barline.CATEGORY ? i : lastBarlineIdx;\n\n      widths.right = 0;\n      widths.left = 0;\n      widths.paddingRight = 0;\n      widths.paddingLeft = 0;\n      const layoutMetrics = modifier.getLayoutMetrics();\n\n      if (layoutMetrics) {\n        if (i !== 0) {\n          widths.right = layoutMetrics.xMax || 0;\n          widths.paddingRight = layoutMetrics.paddingRight || 0;\n        }\n        widths.left = -layoutMetrics.xMin || 0;\n        widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n\n        if (i === endModifiers.length - 1) {\n          widths.paddingLeft = 0;\n        }\n      } else {\n        widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n        if (i !== 0) {\n          widths.right = modifier.getWidth();\n        }\n        if (i === 0) {\n          widths.left = modifier.getWidth();\n        }\n      }\n      x -= widths.paddingRight;\n      x -= widths.right;\n\n      modifier.setX(x);\n\n      x -= widths.left;\n      x -= widths.paddingLeft;\n    }\n\n    this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n    this.formatted = true;\n  }\n\n  /**\n   * All drawing functions below need the context to be set.\n   */\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (!this.formatted) this.format();\n\n    const num_lines = this.options.num_lines;\n    const width = this.width;\n    const x = this.x;\n    let y;\n\n    // Render lines\n    for (let line = 0; line < num_lines; line++) {\n      y = this.getYForLine(line);\n\n      this.applyStyle();\n      if (this.options.line_config[line].visible) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + width, y);\n        ctx.stroke();\n      }\n      this.restoreStyle();\n    }\n\n    // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n    for (let i = 0; i < this.modifiers.length; i++) {\n      // Only draw modifier if it has a draw function\n      if (typeof this.modifiers[i].draw === 'function') {\n        this.modifiers[i].applyStyle(ctx);\n        this.modifiers[i].draw(this, this.getModifierXShift(i));\n        this.modifiers[i].restoreStyle(ctx);\n      }\n    }\n\n    // Render measure numbers\n    if (this.measure > 0) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      const text_width = ctx.measureText('' + this.measure).width;\n      y = this.getYForTopText(0) + 3;\n      ctx.fillText('' + this.measure, this.x - text_width / 2, y);\n      ctx.restore();\n    }\n\n    return this;\n  }\n\n  // Draw Simple barlines for backward compatability\n  // Do not delete - draws the beginning bar of the stave\n  drawVertical(x: number, isDouble: boolean): void {\n    this.drawVerticalFixed(this.x + x, isDouble);\n  }\n\n  drawVerticalFixed(x: number, isDouble: boolean): void {\n    const ctx = this.checkContext();\n\n    const top_line = this.getYForLine(0);\n    const bottom_line = this.getYForLine(this.options.num_lines - 1);\n    if (isDouble) {\n      ctx.fillRect(x - 3, top_line, 1, bottom_line - top_line + 1);\n    }\n    ctx.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n  }\n\n  drawVerticalBar(x: number): void {\n    this.drawVerticalBarFixed(this.x + x);\n  }\n\n  drawVerticalBarFixed(x: number): void {\n    const ctx = this.checkContext();\n\n    const top_line = this.getYForLine(0);\n    const bottom_line = this.getYForLine(this.options.num_lines - 1);\n    ctx.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n  }\n\n  /**\n   * Get the current configuration for the Stave.\n   * @return {Array} An array of configuration objects.\n   */\n  getConfigForLines(): StaveLineConfig[] {\n    return this.options.line_config;\n  }\n\n  /**\n   * Configure properties of the lines in the Stave\n   * @param line_number The index of the line to configure.\n   * @param line_config An configuration object for the specified line.\n   * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n   *   range of the number of lines specified in the constructor.\n   */\n  setConfigForLine(line_number: number, line_config: StaveLineConfig): this {\n    if (line_number >= this.options.num_lines || line_number < 0) {\n      throw new RuntimeError(\n        'StaveConfigError',\n        'The line number must be within the range of the number of lines in the Stave.'\n      );\n    }\n\n    if (line_config.visible === undefined) {\n      throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n    }\n\n    if (typeof line_config.visible !== 'boolean') {\n      throw new RuntimeError(\n        'StaveConfigError',\n        \"The line configuration objects 'visible' property must be true or false.\"\n      );\n    }\n\n    this.options.line_config[line_number] = line_config;\n\n    return this;\n  }\n\n  /**\n   * Set the staff line configuration array for all of the lines at once.\n   * @param lines_configuration An array of line configuration objects.  These objects\n   *   are of the same format as the single one passed in to setLineConfiguration().\n   *   The caller can set null for any line config entry if it is desired that the default be used\n   * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n   *   exactly the same number of elements as the num_lines configuration object set in\n   *   the constructor.\n   */\n  setConfigForLines(lines_configuration: StaveLineConfig[]): this {\n    if (lines_configuration.length !== this.options.num_lines) {\n      throw new RuntimeError(\n        'StaveConfigError',\n        'The length of the lines configuration array must match the number of lines in the Stave'\n      );\n    }\n\n    // Make sure the defaults are present in case an incomplete set of\n    //  configuration options were supplied.\n    // eslint-disable-next-line\n    for (const line_config in lines_configuration) {\n      // Allow 'null' to be used if the caller just wants the default for a particular node.\n      if (!lines_configuration[line_config]) {\n        lines_configuration[line_config] = this.options.line_config[line_config];\n      }\n      this.options.line_config[line_config] = {\n        ...this.options.line_config[line_config],\n        ...lines_configuration[line_config],\n      };\n    }\n\n    this.options.line_config = lines_configuration;\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError, midLine, log, defined } from './util';\nimport { Beam } from './beam';\nimport { Flow } from './flow';\nimport { Fraction } from './fraction';\nimport { Voice } from './voice';\nimport { StaveConnector } from './staveconnector';\nimport { ModifierContext } from './modifiercontext';\nimport { TickContext } from './tickcontext';\nimport { RenderContext } from './types/common';\nimport { Stave } from './stave';\nimport { StemmableNote } from './stemmablenote';\nimport { Tickable } from './tickable';\nimport { TabStave } from './tabstave';\nimport { TabNote } from './tabnote';\nimport { BoundingBox } from './boundingbox';\nimport { isNote, isStaveNote } from './typeguard';\n\ninterface Distance {\n  maxNegativeShiftPx: number;\n  expectedDistance: number;\n  fromTickable?: Tickable;\n  errorPx?: number;\n  fromTickablePx?: number;\n}\n\nexport interface FormatterOptions {\n  softmaxFactor?: number;\n  globalSoftmax?: boolean;\n  maxIterations: number;\n}\n\nexport interface FormatOptions {\n  align_rests?: boolean;\n  padding?: number;\n  stave?: Stave;\n  context?: RenderContext;\n  auto_beam?: boolean;\n}\n\nexport interface AlignmentContexts<T> {\n  list: number[];\n  map: Record<number, T>;\n  array: T[];\n  resolutionMultiplier: number;\n}\n\ntype addToContextFn<T> = (tickable: Tickable, context: T, voiceIndex: number) => void;\ntype makeContextFn<T> = (tick?: { tickID: number }) => T;\n\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts<T>(\n  voices: Voice[],\n  makeContext: makeContextFn<T>,\n  addToContext: addToContextFn<T>\n): AlignmentContexts<T> {\n  const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n\n  // Initialize tick maps.\n  const tickToContextMap: Record<number, T> = {};\n  const tickList: number[] = [];\n  const contexts: T[] = [];\n\n  // For each voice, extract notes and create a context for every\n  // new tick that hasn't been seen before.\n  voices.forEach((voice, voiceIndex) => {\n    // Use resolution multiplier as denominator so that no additional expansion\n    // of fractional tick values is needed.\n    const ticksUsed = new Fraction(0, resolutionMultiplier);\n\n    voice.getTickables().forEach((tickable) => {\n      const integerTicks = ticksUsed.numerator;\n\n      // If we have no tick context for this tick, create one.\n      if (!tickToContextMap[integerTicks]) {\n        const newContext = makeContext({ tickID: integerTicks });\n        contexts.push(newContext);\n        tickToContextMap[integerTicks] = newContext;\n        // Maintain a list of unique integerTicks.\n        tickList.push(integerTicks);\n      }\n\n      // Add this tickable to the TickContext.\n      addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n      ticksUsed.add(tickable.getTicks());\n    });\n  });\n\n  return {\n    map: tickToContextMap,\n    array: contexts,\n    list: tickList.sort((a, b) => a - b),\n    resolutionMultiplier,\n  };\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Formatter.DEBUG) log('Vex.Flow.Formatter', args);\n}\n\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(\n  notes: Tickable[],\n  currRestLine: number,\n  currNoteIndex: number,\n  compare: boolean\n): number {\n  // If no valid next note group, nextRestLine is same as current.\n  let nextRestLine = currRestLine;\n\n  // Start with the next note and keep going until we find a valid non-rest note group.\n  for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n    const note = notes[noteIndex];\n    if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n      nextRestLine = note.getLineForRest();\n      break;\n    }\n  }\n\n  // Locate the mid point between two lines.\n  if (compare && currRestLine !== nextRestLine) {\n    const top = Math.max(currRestLine, nextRestLine);\n    const bot = Math.min(currRestLine, nextRestLine);\n    nextRestLine = midLine(top, bot);\n  }\n  return nextRestLine;\n}\n\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n  // To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\n  static DEBUG: boolean;\n  protected hasMinTotalWidth: boolean;\n  protected minTotalWidth: number;\n  protected contextGaps: {\n    total: number;\n    gaps: { x1: number; x2: number }[];\n  };\n  protected justifyWidth: number;\n  protected totalCost: number;\n  protected totalShift: number;\n  protected tickContexts?: AlignmentContexts<TickContext>;\n  protected formatterOptions: FormatterOptions;\n  protected modifierContexts?: AlignmentContexts<ModifierContext>;\n  protected voices: Voice[];\n  protected lossHistory: number[];\n  protected durationStats: Record<string, { mean: number; count: number }>;\n\n  /**\n   * Helper function to layout \"notes\" one after the other without\n   * regard for proportions. Useful for tests and debugging.\n   */\n  static SimpleFormat(notes: Tickable[], x = 0, { paddingBetween = 10 } = {}): void {\n    notes.reduce((accumulator, note) => {\n      note.addToModifierContext(new ModifierContext());\n      const tick = new TickContext().addTickable(note).preFormat();\n      const metrics = tick.getMetrics();\n      tick.setX(accumulator + metrics.totalLeftPx);\n\n      return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n    }, x);\n  }\n\n  /** Helper function to plot formatter debug info. */\n  static plotDebugging(\n    ctx: RenderContext,\n    formatter: Formatter,\n    xPos: number,\n    y1: number,\n    y2: number,\n    options?: { stavePadding: number }\n  ): void {\n    options = {\n      stavePadding: Flow.DEFAULT_FONT_STACK[0].lookupMetric('stave.padding'),\n      ...options,\n    };\n\n    const x = xPos + options.stavePadding;\n    const contextGaps = formatter.contextGaps;\n\n    function stroke(x1: number, x2: number, color: string) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(1);\n      ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n    }\n\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n\n    contextGaps.gaps.forEach((gap) => {\n      stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n      ctx.setFillStyle('green');\n      ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n    });\n\n    ctx.setFillStyle('red');\n    ctx.fillText(\n      `Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(\n        2\n      )} Gap: ${contextGaps.total.toFixed(2)}`,\n      x - 20,\n      y2 + 27\n    );\n    ctx.restore();\n  }\n\n  /**\n   * Helper function to format and draw a single voice. Returns a bounding\n   * box for the notation.\n   * @param ctx  the rendering context\n   * @param stave the stave to which to draw (`Stave` or `TabStave`)\n   * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n   * @param params one of below:\n   *    * Setting `autobeam` only `(context, stave, notes, true)` or\n   *      `(ctx, stave, notes, {autobeam: true})`\n   *    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n   *    * Setting both a struct is needed `(context, stave, notes, {\n   *      autobeam: true, align_rests: true})`\n   *    * `autobeam` automatically generates beams for the notes.\n   *    * `align_rests` aligns rests with nearby notes.\n   */\n  static FormatAndDraw(\n    ctx: RenderContext,\n    stave: Stave,\n    notes: StemmableNote[],\n    params?: FormatOptions | boolean\n  ): BoundingBox | undefined {\n    let options = {\n      auto_beam: false,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      options = { ...options, ...params };\n    } else if (typeof params === 'boolean') {\n      options.auto_beam = params;\n    }\n\n    // Start by creating a voice and adding all the notes to it.\n    const voice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Then create beams, if requested.\n    const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n\n    // Instantiate a `Formatter` and format the notes.\n    new Formatter()\n      .joinVoices([voice]) // , { align_rests: options.align_rests })\n      .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n\n    // Render the voice and beams to the stave.\n    voice.setStave(stave).draw(ctx, stave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Return the bounding box of the voice.\n    return voice.getBoundingBox();\n  }\n\n  /**\n   * Helper function to format and draw aligned tab and stave notes in two\n   * separate staves.\n   * @param ctx the rendering context\n   * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n   * @param stave a `Stave` instance on which to render `Note`s.\n   * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n   * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n   * @param autobeam automatically generate beams.\n   * @param params a configuration object:\n   *    * `autobeam` automatically generates beams for the notes.\n   *    * `align_rests` aligns rests with nearby notes.\n   */\n  static FormatAndDrawTab(\n    ctx: RenderContext,\n    tabstave: TabStave,\n    stave: Stave,\n    tabnotes: TabNote[],\n    notes: Tickable[],\n    autobeam: boolean,\n    params: FormatOptions\n  ): void {\n    let opts = {\n      auto_beam: autobeam,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      opts = { ...opts, ...params };\n    } else if (typeof params === 'boolean') {\n      opts.auto_beam = params;\n    }\n\n    // Create a `4/4` voice for `notes`.\n    const notevoice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Create a `4/4` voice for `tabnotes`.\n    const tabvoice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n\n    // Then create beams, if requested.\n    const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n\n    // Instantiate a `Formatter` and align tab and stave notes.\n    new Formatter()\n      .joinVoices([notevoice]) // , { align_rests: opts.align_rests })\n      .joinVoices([tabvoice])\n      .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n\n    // Render voices and beams to staves.\n    notevoice.draw(ctx, stave);\n    tabvoice.draw(ctx, tabstave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Draw a connector between tab and note staves.\n    new StaveConnector(stave, tabstave).setContext(ctx).draw();\n  }\n\n  /**\n   * Automatically set the vertical position of rests based on previous/next note positions.\n   * @param tickables an array of Tickables.\n   * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n   * @param alignTuplets If `false`, ignores tuplets.\n   */\n  static AlignRestsToNotes(tickables: Tickable[], alignAllNotes: boolean, alignTuplets?: boolean): void {\n    tickables.forEach((currTickable: Tickable, index: number) => {\n      if (isStaveNote(currTickable) && currTickable.isRest()) {\n        if (currTickable.getTuplet() && !alignTuplets) {\n          return;\n        }\n\n        // If activated rests not on default can be rendered as specified.\n        const position = currTickable.getGlyph().position.toUpperCase();\n        if (position !== 'R/4' && position !== 'B/4') {\n          return;\n        }\n\n        if (alignAllNotes || currTickable.getBeam()) {\n          // Align rests with previous/next notes.\n          const props = currTickable.getKeyProps()[0];\n          if (index === 0) {\n            props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n          } else if (index > 0 && index < tickables.length) {\n            // If previous tickable is a rest, use its line number.\n            const prevTickable = tickables[index - 1];\n            if (isStaveNote(prevTickable)) {\n              if (prevTickable.isRest()) {\n                props.line = prevTickable.getKeyProps()[0].line;\n              } else {\n                const restLine = prevTickable.getLineForRest();\n                // Get the rest line for next valid non-rest note group.\n                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n              }\n            }\n          }\n          currTickable.setKeyLine(0, props.line);\n        }\n      }\n    });\n  }\n\n  static estimateJustifiedMinWidth(voices: Voice[], formatterOptions?: FormatterOptions): number {\n    const formatter = new Formatter(formatterOptions);\n    voices.forEach((voice) => {\n      formatter.joinVoices([voice]);\n    });\n    return formatter.preCalculateMinTotalWidth(voices);\n  }\n\n  constructor(formatterOptions: Partial<FormatterOptions> = {}) {\n    this.formatterOptions = {\n      globalSoftmax: false,\n      maxIterations: 5,\n      ...formatterOptions,\n    };\n    this.justifyWidth = 0;\n    this.totalCost = 0;\n    this.totalShift = 0;\n    this.durationStats = {};\n\n    // Minimum width required to render all the notes in the voices.\n    this.minTotalWidth = 0;\n\n    // This is set to `true` after `minTotalWidth` is calculated.\n    this.hasMinTotalWidth = false;\n\n    // Arrays of tick and modifier contexts.\n    this.tickContexts = undefined;\n    this.modifierContexts = undefined;\n\n    // Gaps between contexts, for free movement of notes post\n    // formatting.\n    this.contextGaps = {\n      total: 0,\n      gaps: [],\n    };\n\n    this.voices = [];\n    this.lossHistory = [];\n  }\n\n  /**\n   * Find all the rests in each of the `voices` and align them to neighboring notes.\n   *\n   * @param voices\n   * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n   */\n  alignRests(voices: Voice[], alignAllNotes: boolean): void {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format rests');\n    }\n\n    voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n  }\n\n  /**\n   * Estimate the width required to render 'voices'.  This is done by:\n   * 1. Sum the widths of all the tick contexts\n   * 2. Estimate the padding.\n   * The latter is done by calculating the padding 3 different ways, and taking the\n   * greatest value:\n   * 1. the padding required for unaligned notes in different voices\n   * 2. the padding based on the stddev of the tickable widths\n   * 3. the padding based on the stddev of the tickable durations.\n   *\n   * The last 2 quantities estimate a 'width entropy', where notes might need more\n   * room than the proportional formatting gives them.  A measure of all same duration\n   * and width will need no extra padding, and all these quantities will be\n   * zero in that case.\n   *\n   * @param voices the voices that contain the notes\n   * @returns the estimated width in pixels\n   */\n  preCalculateMinTotalWidth(voices: Voice[]): number {\n    const unalignedPadding = Flow.DEFAULT_FONT_STACK[0].lookupMetric('stave.unalignedNotePadding');\n    // Calculate additional padding based on 3 methods:\n    // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n    let unalignedCtxCount = 0;\n    let wsum = 0;\n    let dsum = 0;\n    const widths: number[] = [];\n    const durations: number[] = [];\n\n    // Cache results.\n    if (this.hasMinTotalWidth) return this.minTotalWidth;\n\n    // Create tick contexts if not already created.\n    if (!this.tickContexts) {\n      if (!voices) {\n        throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n      }\n\n      this.createTickContexts(voices);\n    }\n\n    // eslint-disable-next-line\n  const { list: contextList, map: contextMap } = this.tickContexts!;\n    this.minTotalWidth = 0;\n\n    // Go through each tick context and calculate total width,\n    // and also accumulate values used in padding hints\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n      context.preFormat();\n      // If this TC doesn't have all the voices on it, it's unaligned.\n      // so increment the unaligned padding accumulator\n      if (context.getTickables().length < voices.length) {\n        unalignedCtxCount += 1;\n      }\n      // Calculate the 'width entropy' over all the Tickables.\n      context.getTickables().forEach((t: Tickable) => {\n        wsum += t.getMetrics().width;\n        dsum += t.getTicks().value();\n        widths.push(t.getMetrics().width);\n        durations.push(t.getTicks().value());\n      });\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n    });\n\n    this.hasMinTotalWidth = true;\n    // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n    const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n    const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n    const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n\n    const davg = dsum / durations.length;\n    const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n    const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n\n    // Find max of 3 methods pad the width with that\n    const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n    const unalignedPad = unalignedPadding * unalignedCtxCount;\n\n    return this.minTotalWidth + Math.max(unalignedPad, padmax);\n  }\n\n  /**\n   * Get minimum width required to render all voices. Either `format` or\n   * `preCalculateMinTotalWidth` must be called before this method.\n   */\n  getMinTotalWidth(): number {\n    if (!this.hasMinTotalWidth) {\n      throw new RuntimeError(\n        'NoMinTotalWidth',\n        \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\"\n      );\n    }\n\n    return this.minTotalWidth;\n  }\n\n  /** Calculate the resolution multiplier for `voices`. */\n  static getResolutionMultiplier(voices: Voice[]): number {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format');\n    }\n    const totalTicks = voices[0].getTotalTicks();\n    const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n      if (!voice.getTotalTicks().equals(totalTicks)) {\n        throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n      }\n\n      if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n        throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n      }\n\n      return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n    }, 1);\n    return resolutionMultiplier;\n  }\n\n  /** Create a `ModifierContext` for each tick in `voices`. */\n  createModifierContexts(voices: Voice[]): AlignmentContexts<ModifierContext> {\n    const fn: addToContextFn<ModifierContext> = (tickable: Tickable, context: ModifierContext) =>\n      tickable.addToModifierContext(context);\n    const contexts = createContexts(voices, () => new ModifierContext(), fn);\n    this.modifierContexts = contexts;\n    return contexts;\n  }\n\n  /**\n   * Create a `TickContext` for each tick in `voices`. Also calculate the\n   * total number of ticks in voices.\n   */\n  createTickContexts(voices: Voice[]): AlignmentContexts<TickContext> {\n    const fn: addToContextFn<TickContext> = (tickable: Tickable, context: TickContext, voiceIndex: number) =>\n      context.addTickable(tickable, voiceIndex);\n    const contexts = createContexts(voices, (tick?: { tickID: number }) => new TickContext(tick), fn);\n    this.tickContexts = contexts;\n    const contextArray = this.tickContexts.array;\n\n    contextArray.forEach((context) => {\n      context.tContexts = contextArray;\n    });\n    return contexts;\n  }\n\n  /**\n   * This is the core formatter logic. Format voices and justify them\n   * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n   * that can't retreive widths without a canvas. This method sets the `x` positions\n   * of all the tickables/notes in the formatter.\n   */\n  preFormat(justifyWidth = 0, renderingContext?: RenderContext, voicesParam?: Voice[], stave?: Stave): number {\n    // Initialize context maps.\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n    }\n\n    const { list: contextList, map: contextMap } = contexts;\n\n    // Reset loss history for evaluator.\n    this.lossHistory = [];\n\n    // If voices and a stave were provided, set the Stave for each voice\n    // and preFormat to apply Y values to the notes;\n    if (voicesParam && stave) {\n      voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n    }\n\n    // Now distribute the ticks to each tick context, and assign them their\n    // own X positions.\n    let x = 0;\n    let shift = 0;\n    this.minTotalWidth = 0;\n    let totalTicks = 0;\n\n    // Pass 1: Give each note maximum width requested by context.\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n      if (renderingContext) context.setContext(renderingContext);\n\n      // Make sure that all tickables in this context have calculated their\n      // space requirements.\n      context.preFormat();\n\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n\n      const maxTicks = context.getMaxTicks().value();\n      totalTicks += maxTicks;\n\n      const metrics = context.getMetrics();\n      x = x + shift + metrics.totalLeftPx;\n      context.setX(x);\n\n      // Calculate shift for the next tick.\n      shift = width - metrics.totalLeftPx;\n    });\n\n    // Use softmax based on all notes across all staves. (options.globalSoftmax)\n    const formatterOptions = this.formatterOptions;\n    const softmaxFactor = formatterOptions.softmaxFactor || 100;\n    const exp = (tick: number) => softmaxFactor ** (contextMap[tick].getMaxTicks().value() / totalTicks);\n    const expTicksUsed = sumArray(contextList.map(exp));\n\n    this.minTotalWidth = x + shift;\n    this.hasMinTotalWidth = true;\n\n    // No justification needed. End formatting.\n    if (justifyWidth <= 0) return this.evaluate();\n\n    // Start justification. Subtract the right extra pixels of the final context because the formatter\n    // justifies based on the context's X position, which is the left-most part of the note head.\n    const firstContext = contextMap[contextList[0]];\n    const lastContext = contextMap[contextList[contextList.length - 1]];\n\n    // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n    // the softmax of the ticks.\n    function calculateIdealDistances(adjustedJustifyWidth: number): Distance[] {\n      const distances: Distance[] = contextList.map((tick: number, i: number) => {\n        const context: TickContext = contextMap[tick];\n        const voices = context.getTickablesByVoice();\n        let backTickable: Tickable | undefined;\n        if (i > 0) {\n          const prevContext: TickContext = contextMap[contextList[i - 1]];\n          // Go through each tickable and search backwards for another tickable\n          // in the same voice. If found, use that duration (ticks) to calculate\n          // the expected distance.\n          for (let j = i - 1; j >= 0; j--) {\n            const backTick: TickContext = contextMap[contextList[j]];\n            const backVoices = backTick.getTickablesByVoice();\n\n            // Look for matching voices between tick contexts.\n            const matchingVoices: string[] = [];\n            Object.keys(voices).forEach((v) => {\n              if (backVoices[v]) {\n                matchingVoices.push(v);\n              }\n            });\n\n            if (matchingVoices.length > 0) {\n              // Found matching voices, get largest duration\n              let maxTicks = 0;\n              let maxNegativeShiftPx = Infinity;\n              let expectedDistance = 0;\n\n              matchingVoices.forEach((v) => {\n                const ticks = backVoices[v].getTicks().value();\n                if (ticks > maxTicks) {\n                  backTickable = backVoices[v];\n                  maxTicks = ticks;\n                }\n\n                // Calculate the limits of the shift based on modifiers, etc.\n                const thisTickable = voices[v];\n                const insideLeftEdge =\n                  thisTickable.getX() -\n                  (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n\n                const backMetrics = backVoices[v].getMetrics();\n                const insideRightEdge =\n                  backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n\n                // Don't allow shifting if notes in the same voice can collide\n                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n              });\n\n              // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n              // so that two different tick contexts don't align across staves.\n              maxNegativeShiftPx = Math.min(\n                maxNegativeShiftPx,\n                context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05)\n              );\n\n              // Calculate the expected distance of the current context from the last matching tickable. The\n              // distance is scaled down by the softmax for the voice.\n              if (formatterOptions.globalSoftmax) {\n                const t = totalTicks;\n                expectedDistance = (softmaxFactor ** (maxTicks / t) / expTicksUsed) * adjustedJustifyWidth;\n              } else if (typeof backTickable !== 'undefined') {\n                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n              }\n\n              return {\n                expectedDistance,\n                maxNegativeShiftPx,\n                fromTickable: backTickable,\n              };\n            }\n          }\n        }\n\n        return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n      });\n      return distances;\n    }\n\n    function shiftToIdealDistances(idealDistances: Distance[]): number {\n      // Distribute ticks to the contexts based on the calculated distance error.\n      const centerX = adjustedJustifyWidth / 2;\n      let spaceAccum = 0;\n\n      contextList.forEach((tick, index) => {\n        const context = contextMap[tick];\n        if (index > 0) {\n          const contextX = context.getX();\n          const ideal = idealDistances[index];\n          const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n\n          let negativeShiftPx = 0;\n          if (errorPx > 0) {\n            spaceAccum += errorPx;\n          } else if (errorPx < 0) {\n            negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n            spaceAccum += -negativeShiftPx;\n          }\n\n          context.setX(contextX + spaceAccum);\n        }\n\n        // Move center aligned tickables to middle\n        context.getCenterAlignedTickables().forEach((tickable: Tickable) => {\n          tickable.setCenterXShift(centerX - context.getX());\n        });\n      });\n\n      return lastContext.getX() - firstContext.getX();\n    }\n\n    const adjustedJustifyWidth =\n      justifyWidth -\n      lastContext.getMetrics().notePx -\n      lastContext.getMetrics().totalRightPx -\n      firstContext.getMetrics().totalLeftPx;\n    let targetWidth = adjustedJustifyWidth;\n    let actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    const paddingMax = musicFont.lookupMetric('stave.endPaddingMax');\n    const paddingMin = musicFont.lookupMetric('stave.endPaddingMin');\n    const maxX = adjustedJustifyWidth - paddingMin;\n\n    let iterations = this.formatterOptions.maxIterations;\n    while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n      // If we couldn't fit all the notes into the jusification width, it's because the softmax-scaled\n      // widths between different durations differ across stave (e.g., 1 quarter note is not the same pixel-width\n      // as 4 16th-notes). Run another pass, now that we know how much to justify.\n      targetWidth -= actualWidth - maxX;\n      actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n      iterations--;\n    }\n\n    // Just one context. Done formatting.\n    if (contextList.length === 1) return 0;\n\n    this.justifyWidth = justifyWidth;\n    return this.evaluate();\n  }\n\n  /** Calculate the total cost of this formatting decision. */\n  evaluate(): number {\n    if (!this.tickContexts) return 0;\n    const contexts = this.tickContexts;\n    const justifyWidth = this.justifyWidth;\n    // Calculate available slack per tick context. This works out how much freedom\n    // to move a context has in either direction, without affecting other notes.\n    this.contextGaps = { total: 0, gaps: [] };\n    contexts.list.forEach((tick, index) => {\n      if (index === 0) return;\n      const prevTick = contexts.list[index - 1];\n      const prevContext = contexts.map[prevTick];\n      const context = contexts.map[tick];\n      const prevMetrics = prevContext.getMetrics();\n      const currMetrics = context.getMetrics();\n\n      // Calculate X position of right edge of previous note\n      const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n      // Calculate X position of left edge of current note\n      const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n      const gap = insideLeftEdge - insideRightEdge;\n      this.contextGaps.total += gap;\n      this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n\n      // Tell the tick contexts how much they can reposition themselves.\n      context.getFormatterMetrics().freedom.left = gap;\n      prevContext.getFormatterMetrics().freedom.right = gap;\n    });\n\n    // Calculate mean distance in each voice for each duration type, then calculate\n    // how far each note is from the mean.\n    this.durationStats = {};\n    const durationStats = this.durationStats;\n\n    function updateStats(duration: string, space: number) {\n      const stats = durationStats[duration];\n      if (stats === undefined) {\n        durationStats[duration] = { mean: space, count: 1 };\n      } else {\n        stats.count += 1;\n        stats.mean = (stats.mean + space) / 2;\n      }\n    }\n\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note, i, notes) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getMetrics();\n        const formatterMetrics = note.getFormatterMetrics();\n        const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n        let space = 0;\n\n        if (i < notes.length - 1) {\n          const rightNote = notes[i + 1];\n          const rightMetrics = rightNote.getMetrics();\n          const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n\n          space = rightNoteEdge - leftNoteEdge;\n          formatterMetrics.space.used = rightNote.getX() - note.getX();\n          rightNote.getFormatterMetrics().freedom.left = space;\n        } else {\n          space = justifyWidth - leftNoteEdge;\n          formatterMetrics.space.used = justifyWidth - note.getX();\n        }\n\n        formatterMetrics.freedom.right = space;\n        updateStats(duration, formatterMetrics.space.used);\n      });\n    });\n\n    // Calculate how much each note deviates from the mean. Loss function is square\n    // root of the sum of squared deviations.\n    let totalDeviation = 0;\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getFormatterMetrics();\n\n        metrics.space.mean = durationStats[duration].mean;\n        metrics.duration = duration;\n        metrics.iterations += 1;\n        metrics.space.deviation = metrics.space.used - metrics.space.mean;\n\n        totalDeviation += metrics.space.deviation ** 2;\n      });\n    });\n\n    this.totalCost = Math.sqrt(totalDeviation);\n    this.lossHistory.push(this.totalCost);\n    return this.totalCost;\n  }\n\n  /**\n   * Run a single iteration of rejustification. At a high level, this method calculates\n   * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n   * attempt to reduce the cost. You can call this method multiple times until it finds\n   * and oscillates around a global minimum.\n   * @param alpha the \"learning rate\" for the formatter. It determines how much of a shift\n   * the formatter should make based on its cost function.\n   */\n  tune(options?: { alpha: number }): number {\n    if (!this.tickContexts) return 0;\n    const contexts = this.tickContexts;\n    options = {\n      alpha: 0.5,\n      ...options,\n    };\n\n    // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n    // on adjacent tickcontexts.\n    function move(current: TickContext, shift: number, prev?: TickContext, next?: TickContext) {\n      current.setX(current.getX() + shift);\n      current.getFormatterMetrics().freedom.left += shift;\n      current.getFormatterMetrics().freedom.right -= shift;\n\n      if (prev) prev.getFormatterMetrics().freedom.right += shift;\n      if (next) next.getFormatterMetrics().freedom.left -= shift;\n    }\n\n    let shift = 0;\n    this.totalShift = 0;\n    contexts.list.forEach((tick, index, list) => {\n      const context = contexts.map[tick];\n      const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n      const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n\n      move(context, shift, prevContext, nextContext);\n\n      const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n\n      if (cost > 0) {\n        shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n      } else if (cost < 0) {\n        if (nextContext) {\n          shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n        } else {\n          shift = 0;\n        }\n      }\n\n      shift *= defined(options).alpha;\n      this.totalShift += shift;\n    });\n\n    return this.evaluate();\n  }\n\n  /**\n   * This is the top-level call for all formatting logic completed\n   * after `x` *and* `y` values have been computed for the notes\n   * in the voices.\n   */\n  postFormat(): this {\n    const postFormatContexts = (contexts: AlignmentContexts<ModifierContext> | AlignmentContexts<TickContext>) =>\n      contexts.list.forEach((tick) => contexts.map[tick].postFormat());\n\n    if (this.modifierContexts) postFormatContexts(this.modifierContexts);\n    if (this.tickContexts) postFormatContexts(this.tickContexts);\n\n    return this;\n  }\n\n  /**\n   * Take all `voices` and create `ModifierContext`s out of them. This tells\n   * the formatters that the voices belong on a single stave.\n   */\n  joinVoices(voices: Voice[]): this {\n    this.createModifierContexts(voices);\n    this.hasMinTotalWidth = false;\n    return this;\n  }\n\n  /**\n   * Align rests in voices, justify the contexts, and position the notes\n   * so voices are aligned and ready to render onto the stave. This method\n   * mutates the `x` positions of all tickables in `voices`.\n   *\n   * Voices are full justified to fit in `justifyWidth` pixels.\n   *\n   * Set `options.context` to the rendering context. Set `options.align_rests`\n   * to true to enable rest alignment.\n   */\n  format(voices: Voice[], justifyWidth?: number, options?: FormatOptions): this {\n    const opts = {\n      align_rests: false,\n      ...options,\n    };\n\n    this.voices = voices;\n    const softmaxFactor = this.formatterOptions.softmaxFactor;\n    if (softmaxFactor) {\n      this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n    }\n\n    this.alignRests(voices, opts.align_rests);\n    this.createTickContexts(voices);\n    this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n\n    // Only postFormat if a stave was supplied for y value formatting\n    if (opts.stave) this.postFormat();\n\n    return this;\n  }\n\n  // This method is just like `format` except that the `justifyWidth` is inferred\n  // from the `stave`.\n  formatToStave(voices: Voice[], stave: Stave, optionsParam?: FormatOptions): this {\n    const options: FormatOptions = { padding: 10, /*stave,*/ context: stave.getContext(), ...optionsParam };\n\n    // eslint-disable-next-line\n    const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n    L('Formatting voices to width: ', justifyWidth);\n    return this.format(voices, justifyWidth, options);\n  }\n}\n\n// Helper functions.\nconst sum = (a: number, b: number) => a + b;\nconst sumArray = (arr: number[]) => arr.reduce(sum, 0);\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { FontInfo, TieNotes } from './types/common';\n\nexport class StaveTie extends Element {\n  render_options: {\n    cp2: number;\n    last_x_shift: number;\n    tie_spacing: number;\n    cp1: number;\n    first_x_shift: number;\n    text_shift_x: number;\n    y_shift: number;\n    font: FontInfo;\n  };\n\n  protected text?: string;\n\n  protected font: FontInfo;\n\n  // notes is initialized by the constructor via this.setNotes(notes).\n  protected notes!: TieNotes;\n\n  protected direction?: number;\n\n  /**\n   * @param notes is a struct that has:\n   *\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   *\n   * @param text\n   */\n  constructor(notes: TieNotes, text?: string) {\n    super();\n    this.setAttribute('type', 'StaveTie');\n    this.setNotes(notes);\n    this.text = text;\n    this.render_options = {\n      cp1: 8, // Curve control point 1\n      cp2: 12, // Curve control point 2\n      text_shift_x: 0,\n      first_x_shift: 0,\n      last_x_shift: 0,\n      y_shift: 7,\n      tie_spacing: 0,\n      font: { family: 'Arial', size: 10, weight: '' },\n    };\n\n    this.font = this.render_options.font;\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n\n  setDirection(direction: number): this {\n    this.direction = direction;\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this tie to.\n   *\n   * @param {!Object} notes The notes to tie up.\n   */\n  setNotes(notes: TieNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) {\n      notes.first_indices = [0];\n    }\n    if (!notes.last_indices) {\n      notes.last_indices = [0];\n    }\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new RuntimeError('BadArguments', 'Tied notes must have same number of indices.');\n    }\n\n    this.notes = notes;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.notes.first_note || !this.notes.last_note;\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new RuntimeError('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    let cp1 = this.render_options.cp1;\n    let cp2 = this.render_options.cp2;\n\n    if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n      cp1 = 2;\n      cp2 = 8;\n    }\n\n    const first_x_shift = this.render_options.first_x_shift;\n    const last_x_shift = this.render_options.last_x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    // setNotes(...) verified that first_indices and last_indices are not undefined.\n    // As a result, we use the ! non-null assertion operator here.\n    // eslint-disable-next-line\n    const first_indices = this.notes.first_indices!;\n    // eslint-disable-next-line\n    const last_indices = this.notes.last_indices!;\n    for (let i = 0; i < first_indices.length; ++i) {\n      const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\n      const first_y_px = params.first_ys[first_indices[i]] + y_shift;\n      const last_y_px = params.last_ys[last_indices[i]] + y_shift;\n\n      if (isNaN(first_y_px) || isNaN(last_y_px)) {\n        throw new RuntimeError('BadArguments', 'Bad indices for tie rendering.');\n      }\n\n      const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\n      const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\n\n      ctx.beginPath();\n      ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n      ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n      ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }\n\n  renderText(first_x_px: number, last_x_px: number): void {\n    if (!this.text) return;\n    const ctx = this.checkContext();\n    let center_x = (first_x_px + last_x_px) / 2;\n    center_x -= ctx.measureText(this.text).width / 2;\n    const stave = this.notes.first_note?.checkStave() ?? this.notes.last_note?.checkStave();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText(this.text, center_x + this.render_options.text_shift_x, stave.getYForTopText() - 1);\n    ctx.restore();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.notes.first_note;\n    const last_note = this.notes.last_note;\n\n    let first_x_px;\n    let last_x_px;\n    let first_ys;\n    let last_ys;\n    let stem_direction = 0;\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      stem_direction = first_note.getStemDirection();\n      first_ys = first_note.getYs();\n    } else {\n      const stave = last_note.checkStave();\n      first_x_px = stave.getTieStartX();\n      first_ys = last_note.getYs();\n      this.notes.first_indices = this.notes.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      stem_direction = last_note.getStemDirection();\n      last_ys = last_note.getYs();\n    } else {\n      const stave = first_note.checkStave();\n      last_x_px = stave.getTieEndX();\n      last_ys = first_note.getYs();\n      this.notes.last_indices = this.notes.first_indices;\n    }\n\n    if (this.direction) {\n      stem_direction = this.direction;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: stem_direction,\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n","// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { StaveTie } from './stavetie';\nimport { TieNotes } from './types/common';\n\nexport class TabTie extends StaveTie {\n  static createHammeron(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'H');\n  }\n\n  static createPulloff(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'P');\n  }\n\n  /**\n   * @param notes is a struct that has:\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   *\n   * @param text\n   */\n  constructor(notes: TieNotes, text?: string) {\n    super(notes, text);\n    this.setAttribute('type', 'TabTie');\n\n    this.render_options.cp1 = 9;\n    this.render_options.cp2 = 11;\n    this.render_options.y_shift = 3;\n\n    this.direction = -1; // Tab tie's are always face up.\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\n\nimport { log } from './util';\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\nimport { TabTie } from './tabtie';\nimport { StaveNote } from './stavenote';\nimport { Note } from './note';\nimport { StemmableNote } from './stemmablenote';\nimport { ModifierContextState } from './modifiercontext';\nimport { RenderContext } from './types/common';\n\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any) {\n  if (GraceNoteGroup.DEBUG) log('Vex.Flow.GraceNoteGroup', args);\n}\n\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n  static DEBUG: boolean;\n\n  protected readonly voice: Voice;\n  protected readonly grace_notes: StemmableNote[];\n  protected readonly show_slur?: boolean;\n\n  protected preFormatted: boolean = false;\n  protected formatter: Formatter;\n  protected render_options: { slur_y_shift: number };\n  protected slur?: StaveTie | TabTie;\n  protected beams: Beam[];\n\n  static get CATEGORY(): string {\n    return 'gracenotegroups';\n  }\n\n  /** Arranges groups inside a `ModifierContext`. */\n  static format(gracenote_groups: GraceNoteGroup[], state: ModifierContextState): boolean {\n    const group_spacing_stave = 4;\n    const group_spacing_tab = 0;\n\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\n    const group_list = [];\n    let prev_note = null;\n    let shiftL = 0;\n\n    for (let i = 0; i < gracenote_groups.length; ++i) {\n      const gracenote_group = gracenote_groups[i];\n      const note = gracenote_group.getNote();\n      const is_stavenote = note.getCategory() === StaveNote.CATEGORY;\n      const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n\n      if (is_stavenote && note !== prev_note) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prev_note = note;\n      }\n\n      group_list.push({ shift: shiftL, gracenote_group, spacing });\n    }\n\n    // If first note left shift in case it is displaced\n    let group_shift = group_list[0].shift;\n    let formatWidth;\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  }\n\n  //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n  constructor(grace_notes: StemmableNote[], show_slur?: boolean) {\n    super();\n    this.setAttribute('type', 'GraceNoteGroup');\n\n    this.position = Modifier.Position.LEFT;\n    this.grace_notes = grace_notes;\n    this.width = 0;\n\n    this.show_slur = show_slur;\n    this.slur = undefined;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.render_options = {\n      slur_y_shift: 0,\n    };\n\n    this.beams = [];\n\n    this.voice.addTickables(this.grace_notes);\n\n    return this;\n  }\n\n  getCategory(): string {\n    return GraceNoteGroup.CATEGORY;\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  beamNotes(grace_notes?: StemmableNote[]): this {\n    grace_notes = grace_notes || this.grace_notes;\n    if (grace_notes.length > 1) {\n      const beam = new Beam(grace_notes);\n\n      beam.render_options.beam_width = 3;\n      beam.render_options.partial_beam_length = 4;\n\n      this.beams.push(beam);\n    }\n\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getGraceNotes(): Note[] {\n    return this.grace_notes;\n  }\n\n  draw(): void {\n    const ctx: RenderContext = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    L('Drawing grace note group for:', note);\n\n    this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n\n    // Draw notes\n    this.grace_notes.forEach((graceNote) => {\n      graceNote.setContext(ctx).draw();\n    });\n\n    // Draw beam\n    this.beams.forEach((beam) => {\n      beam.setContext(ctx).draw();\n    });\n\n    if (this.show_slur) {\n      // Create and draw slur\n      const is_stavenote = note.getCategory() === StaveNote.CATEGORY;\n      const TieClass = is_stavenote ? StaveTie : TabTie;\n\n      this.slur = new TieClass({\n        last_note: this.grace_notes[0],\n        first_note: note,\n        first_indices: [0],\n        last_indices: [0],\n      });\n\n      this.slur.render_options.cp2 = 12;\n      this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n      this.slur.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\n\nimport { log, defined } from './util';\nimport { Fraction } from './fraction';\nimport { Flow } from './flow';\nimport { Music } from './music';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceNote } from './gracenote';\nimport { ModifierContextState } from './modifiercontext';\nimport { Voice } from './voice';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { Tickable } from './tickable';\nimport { isCategory, isStaveNote } from './typeguard';\n\ntype Line = {\n  column: number;\n  line: number;\n  flatLine: boolean;\n  dblSharpLine: boolean;\n  numAcc: number;\n  width: number;\n};\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Accidental.DEBUG) log('Vex.Flow.Accidental', args);\n}\n\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\n\nexport class Accidental extends Modifier {\n  /** Accidental code provided to the constructor. */\n  readonly type: string;\n  /** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\n  static DEBUG: boolean;\n  protected accidental: {\n    code: string;\n    parenRightPaddingAdjustment: number;\n  };\n  protected render_options: {\n    parenLeftPadding: number;\n    stroke_px: number;\n    font_scale: number;\n    parenRightPadding: number;\n  };\n  protected cautionary: boolean;\n  // initialised in reset which is called by the constructor\n  protected glyph!: Glyph;\n  protected parenRight?: Glyph;\n  protected parenLeft?: Glyph;\n\n  /** Accidentals category string. */\n  static get CATEGORY(): string {\n    return 'accidentals';\n  }\n\n  /** Arrange accidentals inside a ModifierContext. */\n  static format(accidentals: Accidental[], state: ModifierContextState): void {\n    type AccidentalListItem = {\n      y?: number;\n      line: number;\n      shift: number;\n      acc: Accidental;\n      lineSpace?: number;\n    };\n\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    const noteheadAccidentalPadding = musicFont.lookupMetric('accidental.noteheadAccidentalPadding');\n    const leftShift = state.left_shift + noteheadAccidentalPadding;\n    const accidentalSpacing = musicFont.lookupMetric('accidental.accidentalSpacing');\n    const additionalPadding = musicFont.lookupMetric('accidental.leftPadding'); // padding to the left of all accidentals\n\n    // If there are no accidentals, we needn't format their positions\n    if (!accidentals || accidentals.length === 0) return;\n\n    const accList: AccidentalListItem[] = [];\n    let prevNote = undefined;\n    let shiftL = 0;\n\n    // First determine the accidentals' Y positions from the note.keys\n    for (let i = 0; i < accidentals.length; ++i) {\n      const acc = accidentals[i];\n      const note = acc.getNote() as StaveNote;\n      const stave = note.getStave();\n      const index = acc.checkIndex();\n      const props = note.getKeyProps()[index];\n      if (note !== prevNote) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prevNote = note;\n      }\n      if (stave) {\n        const lineSpace = stave.getOptions().spacing_between_lines_px;\n        const y = stave.getYForLine(props.line);\n        const accLine = Math.round((y / lineSpace) * 2) / 2;\n        accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n      } else {\n        accList.push({ line: props.line, shift: shiftL, acc });\n      }\n    }\n\n    // Sort accidentals by line number.\n    accList.sort((a, b) => b.line - a.line);\n\n    // FIXME: Confusing name. Each object in this array has a property called `line`.\n    // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n    const lineList: Line[] = [];\n\n    // amount by which all accidentals must be shifted right or left for\n    // stem flipping, notehead shifting concerns.\n    let accShift = 0;\n    let previousLine = undefined;\n\n    // Create an array of unique line numbers (lineList) from accList\n    for (let i = 0; i < accList.length; i++) {\n      const acc = accList[i];\n\n      // if this is the first line, or a new line, add a lineList\n      if (previousLine === undefined || previousLine !== acc.line) {\n        lineList.push({\n          line: acc.line,\n          flatLine: true,\n          dblSharpLine: true,\n          numAcc: 0,\n          width: 0,\n          column: 0,\n        });\n      }\n      // if this accidental is not a flat, the accidental needs 3.0 lines lower\n      // clearance instead of 2.5 lines for b or bb.\n      // FIXME: Naming could use work. acc.acc is very awkward\n      if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n        lineList[lineList.length - 1].flatLine = false;\n      }\n\n      // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n      if (acc.acc.type !== '##') {\n        lineList[lineList.length - 1].dblSharpLine = false;\n      }\n\n      // Track how many accidentals are on this line:\n      lineList[lineList.length - 1].numAcc++;\n\n      // Track the total x_offset needed for this line which will be needed\n      // for formatting lines w/ multiple accidentals:\n\n      // width = accidental width + universal spacing between accidentals\n      lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n\n      // if this accShift is larger, use it to keep first column accidentals in the same line\n      accShift = acc.shift > accShift ? acc.shift : accShift;\n\n      previousLine = acc.line;\n    }\n\n    // ### Place Accidentals in Columns\n    //\n    // Default to a classic triangular layout (middle accidental farthest left),\n    // but follow exceptions as outlined in G. Read's _Music Notation_ and\n    // Elaine Gould's _Behind Bars_.\n    //\n    // Additionally, this implements different vertical collision rules for\n    // flats (only need 2.5 lines clearance below) and double sharps (only\n    // need 2.5 lines of clearance above or below).\n    //\n    // Classic layouts and exception patterns are found in the 'tables.js'\n    // in 'Vex.Flow.accidentalColumnsTable'\n    //\n    // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n    // using as few columns as possible for the verticle structure.\n    //\n    // TODO (?): Allow column to be specified for an accidental at run-time?\n\n    let totalColumns = 0;\n\n    // establish the boundaries for a group of notes with clashing accidentals:\n    for (let i = 0; i < lineList.length; i++) {\n      let noFurtherConflicts = false;\n      const groupStart = i;\n      let groupEnd = i;\n\n      while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n        // if this note conflicts with the next:\n        if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n          // include the next note in the group:\n          groupEnd++;\n        } else {\n          noFurtherConflicts = true;\n        }\n      }\n\n      // Gets an a line from the `lineList`, relative to the current group\n      const getGroupLine = (index: number) => lineList[groupStart + index];\n      const getGroupLines = (indexes: number[]) => indexes.map(getGroupLine);\n      const lineDifference = (indexA: number, indexB: number) => {\n        const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n        return a - b;\n      };\n\n      const notColliding = (...indexPairs: number[][]) =>\n        indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));\n\n      // Set columns for the lines in this group:\n      const groupLength = groupEnd - groupStart + 1;\n\n      // Set the accidental column for each line of the group\n      let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n\n      switch (groupLength) {\n        case 3:\n          if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n            endCase = 'second_on_bottom';\n          }\n          break;\n        case 4:\n          if (notColliding([0, 2], [1, 3])) {\n            endCase = 'spaced_out_tetrachord';\n          }\n          break;\n        case 5:\n          if (endCase === 'b' && notColliding([1, 3])) {\n            endCase = 'spaced_out_pentachord';\n            if (notColliding([0, 2], [2, 4])) {\n              endCase = 'very_spaced_out_pentachord';\n            }\n          }\n          break;\n        case 6:\n          if (notColliding([0, 3], [1, 4], [2, 5])) {\n            endCase = 'spaced_out_hexachord';\n          }\n          if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n            endCase = 'very_spaced_out_hexachord';\n          }\n          break;\n        default:\n          break;\n      }\n\n      let groupMember;\n      let column;\n      // If the group contains more than seven members, use ascending parallel lines\n      // of accidentals, using as few columns as possible while avoiding collisions.\n      if (groupLength >= 7) {\n        // First, determine how many columns to use:\n        let patternLength = 2;\n        let collisionDetected = true;\n        while (collisionDetected === true) {\n          collisionDetected = false;\n          for (let line = 0; line + patternLength < lineList.length; line++) {\n            if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n              collisionDetected = true;\n              patternLength++;\n              break;\n            }\n          }\n        }\n        // Then, assign a column to each line of accidentals\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = ((groupMember - i) % patternLength) + 1;\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n\n        // Otherwise, if the group contains fewer than seven members, use the layouts from\n        // the accidentalsColumnsTable housed in tables.js.\n      } else {\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = Flow.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n      }\n\n      // Increment i to the last note that was set, so that if a lower set of notes\n      // does not conflict at all with this group, it can have its own classic shape.\n      i = groupEnd;\n    }\n\n    // ### Convert Columns to x_offsets\n    //\n    // This keeps columns aligned, even if they have different accidentals within them\n    // which sometimes results in a larger x_offset than is an accidental might need\n    // to preserve the symmetry of the accidental shape.\n    //\n    // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n    // music with complex chord clusters.\n    //\n    // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n    // parallel columns.\n\n    // track each column's max width, which will be used as initial shift of later columns:\n    const columnWidths: number[] = [];\n    const columnXOffsets: number[] = [];\n    for (let i = 0; i <= totalColumns; i++) {\n      columnWidths[i] = 0;\n      columnXOffsets[i] = 0;\n    }\n\n    columnWidths[0] = accShift + leftShift;\n    columnXOffsets[0] = accShift + leftShift;\n\n    // Fill columnWidths with widest needed x-space;\n    // this is what keeps the columns parallel.\n    lineList.forEach((line) => {\n      if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;\n    });\n\n    for (let i = 1; i < columnWidths.length; i++) {\n      // this column's offset = this column's width + previous column's offset\n      columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n    }\n\n    const totalShift = columnXOffsets[columnXOffsets.length - 1];\n    // Set the xShift for each accidental according to column offsets:\n    let accCount = 0;\n    lineList.forEach((line) => {\n      let lineWidth = 0;\n      const lastAccOnLine = accCount + line.numAcc;\n      // handle all of the accidentals on a given line:\n      for (accCount; accCount < lastAccOnLine; accCount++) {\n        const xShift = columnXOffsets[line.column - 1] + lineWidth;\n        accList[accCount].acc.setXShift(xShift);\n        // keep track of the width of accidentals we've added so far, so that when\n        // we loop, we add space for them.\n        lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n        L('Line, accCount, shift: ', line.line, accCount, xShift);\n      }\n    });\n\n    // update the overall layout with the full width of the accidental shapes:\n    state.left_shift += totalShift + additionalPadding;\n  }\n\n  /** Helper function to determine whether two lines of accidentals collide vertically */\n  static checkCollision(line1: Line, line2: Line): boolean {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) {\n      // then line 2 is on top\n      clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n      if (line1.dblSharpLine) clearance -= 0.5;\n    } else {\n      // line 1 is on top\n      clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n      if (line2.dblSharpLine) clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n  }\n\n  /**\n   * Use this method to automatically apply accidentals to a set of `voices`.\n   * The accidentals will be remembered between all the voices provided.\n   * Optionally, you can also provide an initial `keySignature`.\n   */\n  static applyAccidentals(voices: Voice[], keySignature: string): void {\n    const tickPositions: number[] = [];\n    const tickNoteMap: Record<number, Tickable[]> = {};\n\n    // Sort the tickables in each voice by their tick position in the voice.\n    voices.forEach((voice) => {\n      const tickPosition = new Fraction(0, 1);\n      const tickable = voice.getTickables();\n      tickable.forEach((t) => {\n        if (t.shouldIgnoreTicks()) return;\n\n        const notesAtPosition = tickNoteMap[tickPosition.value()];\n\n        if (!notesAtPosition) {\n          tickPositions.push(tickPosition.value());\n          tickNoteMap[tickPosition.value()] = [t];\n        } else {\n          notesAtPosition.push(t);\n        }\n\n        tickPosition.add(t.getTicks());\n      });\n    });\n\n    const music = new Music();\n\n    // Default key signature is C major.\n    if (!keySignature) keySignature = 'C';\n\n    // Get the scale map, which represents the current state of each pitch.\n    const scaleMap = music.createScaleMap(keySignature);\n\n    tickPositions.forEach((tickPos: number) => {\n      const tickables = tickNoteMap[tickPos];\n\n      // Array to store all pitches that modified accidental states\n      // at this tick position\n      const modifiedPitches: string[] = [];\n\n      const processNote = (t: Tickable) => {\n        // Only StaveNote implements .addAccidental(), which is used below.\n        if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n          return;\n        }\n\n        // Go through each key and determine if an accidental should be applied.\n        const staveNote = t;\n        staveNote.keys.forEach((keyString: string, keyIndex: number) => {\n          const key = music.getNoteParts(keyString.split('/')[0]);\n\n          // Force a natural for every key without an accidental\n          const accidentalString = key.accidental || 'n';\n          const pitch = key.root + accidentalString;\n\n          // Determine if the current pitch has the same accidental\n          // as the scale state\n          const sameAccidental = scaleMap[key.root] === pitch;\n\n          // Determine if an identical pitch in the chord already\n          // modified the accidental state\n          const previouslyModified = modifiedPitches.indexOf(pitch) > -1;\n\n          // Remove accidentals\n          staveNote.getModifiers().forEach((modifier, index) => {\n            if (\n              isCategory(modifier, Accidental) &&\n              modifier.type == accidentalString &&\n              modifier.getIndex() == keyIndex\n            ) {\n              staveNote.getModifiers().splice(index, 1);\n            }\n          });\n\n          // Add the accidental to the StaveNote\n          if (!sameAccidental || (sameAccidental && previouslyModified)) {\n            // Modify the scale map so that the root pitch has an\n            // updated state\n            scaleMap[key.root] = pitch;\n\n            // Create the accidental\n            const accidental = new Accidental(accidentalString);\n\n            // Attach the accidental to the StaveNote\n            staveNote.addAccidental(keyIndex, accidental);\n\n            // Add the pitch to list of pitches that modified accidentals\n            modifiedPitches.push(pitch);\n          }\n        });\n\n        // process grace notes\n        staveNote.getModifiers().forEach((modifier: Modifier) => {\n          // TODO: Replace with isCategory()?\n          if (modifier.getCategory() === GraceNoteGroup.CATEGORY) {\n            (modifier as GraceNoteGroup).getGraceNotes().forEach(processNote);\n          }\n        });\n      };\n\n      tickables.forEach(processNote);\n    });\n  }\n\n  /**\n   * Create accidental.\n   * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\n   * For example: `#`, `##`, `b`, `n`, etc.\n   */\n  constructor(type: string) {\n    super();\n    this.setAttribute('type', 'Accidental');\n\n    L('New accidental: ', type);\n\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      // Font size for glyphs\n      font_scale: 38,\n\n      // Length of stroke across heads above or below the stave.\n      stroke_px: 3,\n\n      // Padding between accidental and parentheses on each side\n      parenLeftPadding: 2,\n      parenRightPadding: 2,\n    };\n\n    this.accidental = Flow.accidentalCodes(this.type);\n    defined(this.accidental, 'ArgumentError', `Unknown accidental type: ${type}`);\n\n    // Cautionary accidentals have parentheses around them\n    this.cautionary = false;\n\n    this.reset();\n  }\n\n  protected reset(): void {\n    const fontScale = this.render_options.font_scale;\n    this.glyph = new Glyph(this.accidental.code, fontScale);\n    this.glyph.setOriginX(1.0);\n\n    if (this.cautionary) {\n      this.parenLeft = new Glyph(Flow.accidentalCodes('{').code, fontScale);\n      this.parenRight = new Glyph(Flow.accidentalCodes('}').code, fontScale);\n      this.parenLeft.setOriginX(1.0);\n      this.parenRight.setOriginX(1.0);\n    }\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return Accidental.CATEGORY;\n  }\n\n  /** Get width in pixels. */\n  getWidth(): number {\n    if (this.cautionary) {\n      const parenLeft = defined(this.parenLeft);\n      const parenRight = defined(this.parenRight);\n      const parenWidth =\n        parenLeft.getMetrics().width +\n        parenRight.getMetrics().width +\n        this.render_options.parenLeftPadding +\n        this.render_options.parenRightPadding;\n      return this.glyph.getMetrics().width + parenWidth;\n    } else {\n      return this.glyph.getMetrics().width;\n    }\n  }\n\n  /** Attach this accidental to `note`, which must be a `StaveNote`. */\n  setNote(note: Note): this {\n    defined(note, 'ArgumentError', `Bad note value: ${note}`);\n\n    this.note = note;\n\n    // Accidentals attached to grace notes are rendered smaller.\n    if (note.getCategory() === GraceNote.CATEGORY) {\n      this.render_options.font_scale = 25;\n      this.reset();\n    }\n    return this;\n  }\n\n  /** If called, draws parenthesis around accidental. */\n  setAsCautionary(): this {\n    this.cautionary = true;\n    this.render_options.font_scale = 28;\n    this.reset();\n    return this;\n  }\n\n  /** Render accidental onto canvas. */\n  draw(): void {\n    const {\n      type,\n      position,\n      index,\n      cautionary,\n      x_shift,\n      y_shift,\n      glyph,\n      render_options: { parenLeftPadding, parenRightPadding },\n    } = this;\n\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    // Figure out the start `x` and `y` coordinates for note and index.\n    const start = note.getModifierStartXY(position, index);\n    let accX = start.x + x_shift;\n    const accY = start.y + y_shift;\n    L('Rendering: ', type, accX, accY);\n\n    if (!cautionary) {\n      glyph.render(ctx, accX, accY);\n    } else {\n      const parenLeft = defined(this.parenLeft);\n      const parenRight = defined(this.parenRight);\n\n      // Render the accidental in parentheses.\n      parenRight.render(ctx, accX, accY);\n      accX -= parenRight.getMetrics().width;\n      accX -= parenRightPadding;\n      accX -= this.accidental.parenRightPaddingAdjustment;\n      glyph.render(ctx, accX, accY);\n      accX -= glyph.getMetrics().width;\n      accX -= parenLeftPadding;\n      parenLeft.render(ctx, accX, accY);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { log } from './util';\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { ModifierContext } from './modifiercontext';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (BarNote.DEBUG) log('Vex.Flow.BarNote', args);\n}\n\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n  protected metrics: { widths: Record<string, number> };\n  /** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\n  static DEBUG: boolean;\n  // Initialized by the constructor via this.setType(type)\n  protected type!: BarlineType;\n\n  constructor(type = BarlineType.SINGLE) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'BarNote');\n\n    this.metrics = {\n      widths: {},\n    };\n\n    const TYPE = BarlineType;\n    this.metrics.widths = {\n      [TYPE.SINGLE]: 8,\n      [TYPE.DOUBLE]: 12,\n      [TYPE.END]: 15,\n      [TYPE.REPEAT_BEGIN]: 14,\n      [TYPE.REPEAT_END]: 14,\n      [TYPE.REPEAT_BOTH]: 18,\n      [TYPE.NONE]: 0,\n    };\n\n    // Tell the formatter that bar notes have no duration.\n    this.ignore_ticks = true;\n    this.setType(type);\n  }\n\n  /** Get the type of bar note.*/\n  getType(): BarlineType {\n    return this.type;\n  }\n\n  /** Set the type of bar note. */\n  setType(type: string | BarlineType): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    // Set width to width of relevant `Barline`.\n    this.setWidth(this.metrics.widths[this.type]);\n    return this;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  /** Overridden to ignore. */\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Render note to stave. */\n  draw(): void {\n    const ctx = this.checkContext();\n    L('Rendering bar line at: ', this.getAbsoluteX());\n    if (this.style) this.applyStyle(ctx);\n    const barline = new Barline(this.type);\n    barline.setX(this.getAbsoluteX());\n    barline.draw(this.checkStave());\n    if (this.style) this.restoreStyle(ctx);\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n// MIT License\n\nimport { Note } from './note';\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\nimport { RenderContext } from './types/common';\nimport { BoundingBox } from './boundingbox';\nimport { ClefType } from './clef';\nimport { ModifierContext } from './modifiercontext';\n\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n  protected clef_obj: Clef;\n  protected type: string;\n  protected clef: ClefType;\n\n  static get CATEGORY(): string {\n    return 'clefnote';\n  }\n\n  constructor(type: string, size?: string, annotation?: string) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'ClefNote');\n\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /** Set clef type, size and annotation. */\n  setType(type: string, size: string, annotation: string): this {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  /** Get associated clef. */\n  getClef(): ClefType {\n    return this.clef;\n  }\n\n  /** Set associated context. */\n  setContext(context: RenderContext): this {\n    super.setContext(context);\n    this.glyph.setContext(this.getContext());\n    return this;\n  }\n\n  /** Get bounding box. */\n  getBoundingBox(): BoundingBox | undefined {\n    return super.getBoundingBox();\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return ClefNote.CATEGORY;\n  }\n\n  /** Set preformatted. */\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Render clef note. */\n  draw(): void {\n    const stave = this.checkStave();\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.getContext());\n    }\n\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n\n    this.glyph.setStave(stave);\n    this.glyph.setYShift(stave.getYForLine(this.clef.line ?? 0) - stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x);\n\n    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n      if (!attachment.getContext()) {\n        attachment.setContext(this.getContext());\n      }\n      attachment.setStave(stave);\n      attachment.setYShift(stave.getYForLine(this.clef_obj.annotation.line) - stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\n\nimport { log } from './util';\nimport { Note, NoteStruct } from './note';\nimport { TickContext } from './tickcontext';\nimport { RenderContext } from './types/common';\n\nexport interface CrescendoParams {\n  reverse: boolean;\n  height: number;\n  y: number;\n  end_x: number;\n  begin_x: number;\n}\n\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Crescendo.DEBUG) log('Vex.Flow.Crescendo', args);\n}\n\n// Private helper to draw the hairpin\nfunction renderHairpin(ctx: RenderContext, params: CrescendoParams) {\n  const begin_x = params.begin_x;\n  const end_x = params.end_x;\n  const y = params.y;\n  const half_height = params.height / 2;\n\n  ctx.beginPath();\n\n  if (params.reverse) {\n    ctx.moveTo(begin_x, y - half_height);\n    ctx.lineTo(end_x, y);\n    ctx.lineTo(begin_x, y + half_height);\n  } else {\n    ctx.moveTo(end_x, y - half_height);\n    ctx.lineTo(begin_x, y);\n    ctx.lineTo(end_x, y + half_height);\n  }\n\n  ctx.stroke();\n  ctx.closePath();\n}\n\nexport class Crescendo extends Note {\n  static DEBUG: boolean;\n\n  protected decrescendo: boolean;\n  protected height: number;\n  protected line: number;\n  protected options = {\n    // Extensions to the length of the crescendo on either side\n    extend_left: 0,\n    extend_right: 0,\n    // Vertical shift\n    y_shift: 0,\n  };\n\n  // Initialize the crescendo's properties\n  constructor(note_struct: NoteStruct) {\n    super(note_struct);\n    this.setAttribute('type', 'Crescendo');\n\n    // Whether the object is a decrescendo\n    this.decrescendo = false;\n\n    // The staff line to be placed on\n    this.line = note_struct.line || 0;\n\n    // The height at the open end of the cresc/decresc\n    this.height = 15;\n  }\n\n  // Set the line to center the element on\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Set the full height at the open end\n  setHeight(height: number): this {\n    this.height = height;\n    return this;\n  }\n\n  // Set whether the sign should be a descresendo by passing a bool\n  // to `decresc`\n  setDecrescendo(decresc: boolean): this {\n    this.decrescendo = decresc;\n    return this;\n  }\n\n  // Preformat the note\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Render the Crescendo object onto the canvas\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    this.setRendered();\n\n    const tick_context = this.getTickContext();\n    const next_context = TickContext.getNextContext(tick_context);\n\n    const begin_x = this.getAbsoluteX();\n    const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();\n    const y = stave.getYForLine(this.line + -3) + 1;\n\n    L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\n\n    renderHairpin(ctx, {\n      begin_x: begin_x - this.options.extend_left,\n      end_x: end_x + this.options.extend_right,\n      y: y + this.options.y_shift,\n      height: this.height,\n      reverse: this.decrescendo,\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { Note } from './note';\n\nexport interface CurveOptions {\n  thickness: number;\n  x_shift: number;\n  y_shift: number;\n  position: string | number;\n  position_end: string | number;\n  invert: boolean;\n  cps: { x: number; y: number }[];\n}\n\nexport enum CurvePosition {\n  NEAR_HEAD = 1,\n  NEAR_TOP = 2,\n}\n\nexport class Curve extends Element {\n  protected readonly render_options: CurveOptions;\n  protected from: Note;\n  protected to: Note;\n\n  static get Position(): typeof CurvePosition {\n    return CurvePosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      nearHead: Curve.Position.NEAR_HEAD,\n      nearTop: Curve.Position.NEAR_TOP,\n    };\n  }\n\n  // from: Start note\n  // to: End note\n  // options:\n  //    cps: List of control points\n  //    x_shift: pixels to shift\n  //    y_shift: pixels to shift\n  constructor(from: Note, to: Note, options: Partial<CurveOptions>) {\n    super();\n    this.setAttribute('type', 'Curve');\n\n    this.render_options = {\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      position: Curve.Position.NEAR_HEAD,\n      position_end: Curve.Position.NEAR_HEAD,\n      invert: false,\n      cps: [\n        { x: 0, y: 10 },\n        { x: 0, y: 10 },\n      ],\n      ...options,\n    };\n\n    this.from = from;\n    this.to = to;\n  }\n\n  setNotes(from: Note, to: Note): this {\n    if (!from && !to) {\n      throw new RuntimeError('BadArguments', 'Curve needs to have either first_note or last_note set.');\n    }\n\n    this.from = from;\n    this.to = to;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.from || !this.to;\n  }\n\n  renderCurve(params: { last_y: number; last_x: number; first_y: number; first_x: number; direction: number }): void {\n    const ctx = this.checkContext();\n    const cps = this.render_options.cps;\n\n    const x_shift = this.render_options.x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    const first_x = params.first_x + x_shift;\n    const first_y = params.first_y + y_shift;\n    const last_x = params.last_x - x_shift;\n    const last_y = params.last_y + y_shift;\n    const thickness = this.render_options.thickness;\n\n    const cp_spacing = (last_x - first_x) / (cps.length + 2);\n\n    ctx.beginPath();\n    ctx.moveTo(first_x, first_y);\n    ctx.bezierCurveTo(\n      first_x + cp_spacing + cps[0].x,\n      first_y + cps[0].y * params.direction,\n      last_x - cp_spacing + cps[1].x,\n      last_y + cps[1].y * params.direction,\n      last_x,\n      last_y\n    );\n    ctx.bezierCurveTo(\n      last_x - cp_spacing + cps[1].x,\n      last_y + (cps[1].y + thickness) * params.direction,\n      first_x + cp_spacing + cps[0].x,\n      first_y + (cps[0].y + thickness) * params.direction,\n      first_x,\n      first_y\n    );\n    ctx.stroke();\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.from;\n    const last_note = this.to;\n    let first_x;\n    let last_x;\n    let first_y;\n    let last_y;\n    let stem_direction = 0;\n\n    let metric = 'baseY';\n    let end_metric = 'baseY';\n\n    function getPosition(position: string | number) {\n      return typeof position === 'string' ? Curve.PositionString[position] : position;\n    }\n    const position = getPosition(this.render_options.position);\n    const position_end = getPosition(this.render_options.position_end);\n\n    if (position === Curve.Position.NEAR_TOP) {\n      metric = 'topY';\n      end_metric = 'topY';\n    }\n\n    if (position_end === Curve.Position.NEAR_HEAD) {\n      end_metric = 'baseY';\n    } else if (position_end === Curve.Position.NEAR_TOP) {\n      end_metric = 'topY';\n    }\n\n    if (first_note) {\n      first_x = first_note.getTieRightX();\n      stem_direction = first_note.getStemDirection();\n      first_y = first_note.getStemExtents()[metric];\n    } else {\n      const stave = last_note.checkStave();\n      first_x = stave.getTieStartX();\n      first_y = last_note.getStemExtents()[metric];\n    }\n\n    if (last_note) {\n      last_x = last_note.getTieLeftX();\n      stem_direction = last_note.getStemDirection();\n      last_y = last_note.getStemExtents()[end_metric];\n    } else {\n      const stave = first_note.checkStave();\n      last_x = stave.getTieEndX();\n      last_y = first_note.getStemExtents()[end_metric];\n    }\n\n    this.renderCurve({\n      first_x,\n      last_x,\n      first_y,\n      last_y,\n      direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\n    });\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// A generic text parsing class for VexFlow.\n\nimport { RuntimeError, log } from './util';\n\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (Parser.DEBUG) log('Vex.Flow.Parser', args);\n}\n\nconst NO_ERROR_POS = -1;\n\nexport type Match = string | Match[] | null;\nexport type RuleFunction = () => Rule;\nexport type TriggerFunction = (state?: { matches: Match[] }) => void;\n\nexport interface Rule {\n  // Lexer Rules\n  token?: string; // The token property is a string that is compiled into a RegExp.\n  noSpace?: boolean;\n\n  // Parser Rules\n  expect?: RuleFunction[];\n  zeroOrMore?: boolean;\n  oneOrMore?: boolean;\n  maybe?: boolean;\n  or?: boolean;\n  run?: TriggerFunction;\n}\n\nexport interface Result {\n  success: boolean;\n\n  // Lexer Results\n  pos?: number;\n  incrementPos?: number;\n  matchedString?: string;\n\n  // Parser Results\n  matches?: Match[];\n  numMatches?: number;\n  results?: GroupedResults;\n  errorPos?: number; // Set to NO_ERROR if successful. N if there is an error in the string.\n}\n\n// Represents a mixed array containing Result and/or Result[].\n// The grouping is determined by the structure of the Grammar.\ntype GroupedResults = (Result | Result[])[];\n\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r: Result | Result[]): Match {\n  if ('matchedString' in r) return r.matchedString as string; // string\n  if ('results' in r) return flattenMatches(r.results as Result[]);\n  const results = r as Result[];\n  if (results.length === 1) return flattenMatches(results[0]);\n  if (results.length === 0) return null;\n  return results.map(flattenMatches); // nested array\n}\n\nexport interface Grammar {\n  begin(): RuleFunction;\n}\n\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n  static DEBUG: boolean = false;\n\n  protected grammar: Grammar;\n\n  protected line: string; // Use RegExp to extract tokens from this line.\n  protected pos: number;\n  protected errorPos: number;\n\n  // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n  // the EasyScore grammar in easyscore.ts.\n  constructor(grammar: Grammar) {\n    this.grammar = grammar;\n    this.line = '';\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Parse `line` using current grammar. Returns `{success: true}` if the\n  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n  // where `errorPos` is the location of the error in the string.\n  parse(line: string): Result {\n    this.line = line;\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n    const result = this.expect(this.grammar.begin());\n    result.errorPos = this.errorPos;\n    return result;\n  }\n\n  matchFail(returnPos: number): void {\n    if (this.errorPos === NO_ERROR_POS) this.errorPos = this.pos;\n    this.pos = returnPos;\n  }\n\n  matchSuccess(): void {\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Look for `token` in this.line[this.pos], and return success\n  // if one is found. `token` is specified as a regular expression.\n  matchToken(token: string, noSpace: boolean = false): Result {\n    const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n    const workingLine = this.line.slice(this.pos);\n    const result = workingLine.match(regexp);\n    if (result !== null) {\n      return {\n        success: true,\n        matchedString: result[2],\n        incrementPos: result[1].length,\n        pos: this.pos,\n      };\n    } else {\n      return { success: false, pos: this.pos };\n    }\n  }\n\n  // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n  // set, then return success even if the token is not found, but reset\n  // the position before exiting.\n  // TODO: expectOne(...) is never called with the `maybe` parameter.\n  expectOne(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n\n    let allMatches = true;\n    let oneMatch = false;\n    maybe = maybe === true || rule.maybe === true;\n\n    // Execute all sub rules in sequence.\n    if (rule.expect) {\n      for (const next of rule.expect) {\n        const localPos = this.pos;\n        const result = this.expect(next);\n\n        // If `rule.or` is set, then return success if any one\n        // of the subrules match, else all subrules must match.\n        if (result.success) {\n          results.push(result);\n          oneMatch = true;\n          if (rule.or) break;\n        } else {\n          allMatches = false;\n          if (!rule.or) {\n            this.pos = localPos;\n            break;\n          }\n        }\n      }\n    }\n\n    const gotOne = (rule.or && oneMatch) || allMatches;\n    const success = gotOne || maybe === true;\n    const numMatches = gotOne ? 1 : 0;\n    if (maybe && !gotOne) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n  // then a failed match is also a success (but the position is reset).\n  expectOneOrMore(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n    let numMatches = 0;\n    let more = true;\n\n    do {\n      const result = this.expectOne(rule);\n      if (result.success && result.results) {\n        numMatches++;\n        results.push(result.results as Result[]);\n      } else {\n        more = false;\n      }\n    } while (more);\n\n    const success = numMatches > 0 || maybe === true;\n    if (maybe && !(numMatches > 0)) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n  expectZeroOrMore(rule: Rule): Result {\n    return this.expectOneOrMore(rule, true);\n  }\n\n  // Execute the rule produced by the provided `rules` function. This\n  // offloads to one of the above matchers and consolidates the results. It is also\n  // responsible for executing any code triggered by the rule (in `rule.run`.)\n  expect(ruleFunc: RuleFunction): Result {\n    L('Evaluating rule function:', ruleFunc);\n    if (!ruleFunc) {\n      throw new RuntimeError('Invalid rule function');\n    }\n    let result: Result;\n\n    // Get rule from Grammar class.\n    // expect(...) handles both lexing & parsing:\n    // - lexer rules produce tokens.\n    // - parser rules produce expressions which may trigger code via the\n    //   { run: () => ... } trigger functions in easyscore.ts.\n    //   These functions build the VexFlow objects that are displayed on screen.\n    const rule: Rule = ruleFunc.bind(this.grammar)();\n    if (rule.token) {\n      // A lexer rule has a `token` property.\n      // Base case: parse the regex and throw an error if the\n      // line doesn't match.\n      result = this.matchToken(rule.token, rule.noSpace === true);\n      if (result.success) {\n        // Token match! Update position and throw away parsed portion\n        // of string.\n        this.pos += result.incrementPos as number;\n      }\n    } else if (rule.expect) {\n      // A parser rule has an `expect` property.\n      if (rule.oneOrMore) {\n        result = this.expectOneOrMore(rule);\n      } else if (rule.zeroOrMore) {\n        result = this.expectZeroOrMore(rule);\n      } else {\n        result = this.expectOne(rule);\n      }\n    } else {\n      L(rule);\n      throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n    }\n\n    // If there's a trigger attached to this rule, then run it.\n    // Make the matches accessible through `state.matches` in the\n    // `run: (state) => ...` trigger.\n    const matches: Match[] = [];\n    result.matches = matches;\n    if (result.results) {\n      result.results.forEach((r) => matches.push(flattenMatches(r)));\n    }\n    if (rule.run && result.success) {\n      rule.run({ matches });\n    }\n    return result;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Accidental } from './accidental';\nimport { Articulation } from './articulation';\nimport { Factory } from './factory';\nimport { FretHandFinger } from './frethandfinger';\nimport { Grammar, Parser, Match, Result, Rule, RuleFunction } from './parser';\nimport { RenderContext } from './types/common';\nimport { RuntimeError, log, defined } from './util';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { TupletOptions } from './tuplet';\nimport { Voice } from './voice';\nimport { Music } from './music';\n\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (EasyScore.DEBUG) log('Vex.Flow.EasyScore', args);\n}\n\n// eslint-disable-next-line\ntype CommitHook = (obj: any, note: StaveNote, builder: Builder) => void;\n\nclass EasyScoreGrammar implements Grammar {\n  builder: Builder;\n\n  constructor(builder: Builder) {\n    this.builder = builder;\n  }\n\n  begin(): RuleFunction {\n    return this.LINE;\n  }\n\n  LINE(): Rule {\n    return {\n      expect: [this.PIECE, this.PIECES, this.EOL],\n    };\n  }\n  PIECE(): Rule {\n    return {\n      expect: [this.CHORDORNOTE, this.PARAMS],\n      run: () => this.builder.commitPiece(),\n    };\n  }\n  PIECES(): Rule {\n    return {\n      expect: [this.COMMA, this.PIECE],\n      zeroOrMore: true,\n    };\n  }\n  PARAMS(): Rule {\n    return {\n      expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n    };\n  }\n  CHORDORNOTE(): Rule {\n    return {\n      expect: [this.CHORD, this.SINGLENOTE],\n      or: true,\n    };\n  }\n  CHORD(): Rule {\n    return {\n      expect: [this.LPAREN, this.NOTES, this.RPAREN],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addChord(state!.matches[1] as Match[]),\n    };\n  }\n  NOTES(): Rule {\n    return {\n      expect: [this.NOTE],\n      oneOrMore: true,\n    };\n  }\n  NOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n    };\n  }\n  SINGLENOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n      run: (state) => {\n        // eslint-disable-next-line\n        const s = state!;\n        this.builder.addSingleNote(s.matches[0] as string, s.matches[1] as string, s.matches[2] as string);\n      },\n    };\n  }\n  ACCIDENTAL(): Rule {\n    return {\n      expect: [this.MICROTONES, this.ACCIDENTALS],\n      maybe: true,\n      or: true,\n    };\n  }\n  DOTS(): Rule {\n    return {\n      expect: [this.DOT],\n      zeroOrMore: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDots(state!.matches),\n    };\n  }\n  TYPE(): Rule {\n    return {\n      expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteType(state!.matches[2] as string),\n    };\n  }\n  DURATION(): Rule {\n    return {\n      expect: [this.SLASH, this.DURATIONS],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDuration(state!.matches[1] as string),\n    };\n  }\n  OPTS(): Rule {\n    return {\n      expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n      maybe: true,\n    };\n  }\n  KEYVALS(): Rule {\n    return {\n      expect: [this.COMMA, this.KEYVAL],\n      zeroOrMore: true,\n    };\n  }\n  KEYVAL(): Rule {\n    const unquote = (str: string) => str.slice(1, -1);\n\n    return {\n      expect: [this.KEY, this.EQUALS, this.VAL],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addNoteOption(state!.matches[0] as string, unquote(state!.matches[2] as string)),\n    };\n  }\n  VAL(): Rule {\n    return {\n      expect: [this.SVAL, this.DVAL],\n      or: true,\n    };\n  }\n\n  KEY(): Rule {\n    return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n  }\n  DVAL(): Rule {\n    return { token: '[\"][^\"]*[\"]' };\n  }\n  SVAL(): Rule {\n    return { token: \"['][^']*[']\" };\n  }\n  NOTENAME(): Rule {\n    return { token: '[a-gA-G]' };\n  }\n  OCTAVE(): Rule {\n    return { token: '[0-9]+' };\n  }\n  ACCIDENTALS(): Rule {\n    return { token: 'bb|b|##|#|n' };\n  }\n  MICROTONES(): Rule {\n    return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n  }\n  DURATIONS(): Rule {\n    return { token: '[0-9whq]+' };\n  }\n  TYPES(): Rule {\n    return { token: '[rRsSxX]' };\n  }\n  LPAREN(): Rule {\n    return { token: '[(]' };\n  }\n  RPAREN(): Rule {\n    return { token: '[)]' };\n  }\n  COMMA(): Rule {\n    return { token: '[,]' };\n  }\n  DOT(): Rule {\n    return { token: '[.]' };\n  }\n  SLASH(): Rule {\n    return { token: '[/]' };\n  }\n  MAYBESLASH(): Rule {\n    return { token: '[/]?' };\n  }\n  EQUALS(): Rule {\n    return { token: '[=]' };\n  }\n  LBRACKET(): Rule {\n    return { token: '\\\\[' };\n  }\n  RBRACKET(): Rule {\n    return { token: '\\\\]' };\n  }\n  EOL(): Rule {\n    return { token: '$' };\n  }\n}\n\ninterface NotePiece {\n  key: string;\n  accid?: string | null;\n  octave?: string;\n}\n\nclass Piece {\n  chord: NotePiece[] = [];\n  duration: string;\n  dots: number = 0;\n  type?: string;\n  options: { [x: string]: string } = {};\n  constructor(duration: string) {\n    this.duration = duration;\n  }\n}\n\ninterface BuilderElements {\n  notes: StaveNote[];\n  accidentals: (Accidental | undefined)[][];\n}\n\nexport interface BuilderOptions {\n  stem?: string;\n  clef?: string;\n  // eslint-disable-next-line\n  [x: string]: any; // allow arbitrary properties via Builder.reset() & EasyScore.parse().\n}\n\nexport class Builder {\n  factory: Factory;\n  // Initialized by the constructor via this.reset().\n  elements!: BuilderElements;\n  // Initialized by the constructor via this.reset().\n  options!: BuilderOptions;\n  // Initialized by the constructor via this.resetPiece().\n  piece!: Piece;\n  commitHooks: CommitHook[] = [];\n  rollingDuration!: string;\n\n  constructor(factory: Factory) {\n    this.factory = factory;\n    this.reset();\n  }\n\n  reset(options: BuilderOptions = {}): void {\n    this.options = {\n      stem: 'auto',\n      clef: 'treble',\n      ...options,\n    };\n    this.elements = { notes: [], accidentals: [] };\n    this.rollingDuration = '8';\n    this.resetPiece();\n  }\n\n  getFactory(): Factory {\n    return this.factory;\n  }\n\n  getElements(): BuilderElements {\n    return this.elements;\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.commitHooks.push(commitHook);\n  }\n\n  resetPiece(): void {\n    L('resetPiece');\n    this.piece = new Piece(this.rollingDuration);\n  }\n\n  setNoteDots(dots: Match[]): void {\n    L('setNoteDots:', dots);\n    if (dots) this.piece.dots = dots.length;\n  }\n\n  setNoteDuration(duration?: string): void {\n    L('setNoteDuration:', duration);\n    this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n  }\n\n  setNoteType(type?: string): void {\n    L('setNoteType:', type);\n    if (type) this.piece.type = type;\n  }\n\n  addNoteOption(key: string, value: string): void {\n    L('addNoteOption: key:', key, 'value:', value);\n    this.piece.options[key] = value;\n  }\n\n  addNote(key?: string, accid?: string | null, octave?: string): void {\n    L('addNote:', key, accid, octave);\n    this.piece.chord.push({\n      key: key as string,\n      accid,\n      octave,\n    });\n  }\n\n  addSingleNote(key: string, accid?: string | null, octave?: string): void {\n    L('addSingleNote:', key, accid, octave);\n    this.addNote(key, accid, octave);\n  }\n\n  // notes is an array with 3 entries\n  addChord(notes: Match[]): void {\n    L('startChord');\n    if (typeof notes[0] !== 'object') {\n      this.addSingleNote(notes[0]);\n    } else {\n      notes.forEach((n) => {\n        if (n) this.addNote(...(n as string[])); // n => [string, string | null, string]\n      });\n    }\n    L('endChord');\n  }\n\n  commitPiece(): void {\n    L('commitPiece');\n    const { factory } = this;\n\n    if (!factory) return;\n\n    const options = { ...this.options, ...this.piece.options };\n\n    // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n    // e.g., auto | up | down\n    const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n    // e.g., treble | bass\n    const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n\n    const { chord, duration, dots, type } = this.piece;\n\n    // Create a string[] that will be assigned to the .keys property of the StaveNote.\n    // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n    // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n    const standardAccidentals = Music.accidentals;\n    const keys = chord.map(\n      (notePiece) =>\n        notePiece.key +\n        (standardAccidentals.includes(notePiece.accid ?? '') ? notePiece.accid : '') +\n        '/' +\n        notePiece.octave\n    );\n    const auto_stem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n\n    // Build a StaveNote using the information we gathered.\n    const note = factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });\n    if (!auto_stem) note.setStemDirection(stem === 'up' ? StaveNote.STEM_UP : StaveNote.STEM_DOWN);\n\n    // Attach accidentals.\n    const accidentals: (Accidental | undefined)[] = [];\n    chord.forEach((notePiece: NotePiece, index: number) => {\n      const accid = notePiece.accid;\n      if (typeof accid === 'string') {\n        const accidental = factory.Accidental({ type: accid });\n        note.addAccidental(index, accidental);\n        accidentals.push(accidental);\n      } else {\n        accidentals.push(undefined);\n      }\n    });\n\n    // Attach dots.\n    for (let i = 0; i < dots; i++) note.addDotToAll();\n\n    this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n\n    this.elements.notes.push(note);\n    this.elements.accidentals.push(accidentals);\n    this.resetPiece();\n  }\n}\n\nexport interface EasyScoreOptions {\n  factory: Factory;\n  builder: Builder;\n  commitHooks: CommitHook[];\n  throwOnError: boolean;\n}\n\nexport interface EasyScoreDefaults {\n  clef: string;\n  time: string;\n  stem: string;\n  // eslint-disable-next-line\n  [x: string]: any; // allow arbitrary properties via set(defaults)\n}\n\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options: { id?: string }, note: StaveNote) {\n  if (options.id === undefined) return;\n  note.setAttribute('id', options.id);\n}\n\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options: { class?: string }, note: StaveNote) {\n  if (options.class === undefined) return;\n  options.class.split(commaSeparatedRegex).forEach((className: string) => note.addClass(className));\n}\n\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n  static DEBUG: boolean = false;\n\n  defaults: EasyScoreDefaults = {\n    clef: 'treble',\n    time: '4/4',\n    stem: 'auto',\n  };\n\n  // options, factory, builder, grammar, and parser are all\n  // initialized by the constructor via this.setOptions().\n  options!: EasyScoreOptions;\n  factory!: Factory;\n  builder!: Builder;\n  grammar!: EasyScoreGrammar;\n  parser!: Parser;\n\n  constructor(options: Partial<EasyScoreOptions> = {}) {\n    this.setOptions(options);\n  }\n\n  /**\n   * Set the score defaults.\n   * clef must be set appropriately to avoid errors when adding Staves.\n   * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n   * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n   * @param defaults.stem default stem arrangement (auto | up | down)\n   * @returns this\n   */\n  set(defaults: Partial<EasyScoreDefaults>): this {\n    this.defaults = { ...this.defaults, ...defaults };\n    return this;\n  }\n\n  /**\n   * @param options.factory is required.\n   * @returns this\n   */\n  setOptions(options: Partial<EasyScoreOptions>): this {\n    // eslint-disable-next-line\n    const factory = options.factory!; // ! operator, because options.factory was set in Factory.EasyScore().\n    const builder = options.builder ?? new Builder(factory);\n\n    this.options = {\n      commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook],\n      throwOnError: false,\n      ...options,\n      factory,\n      builder,\n    };\n\n    this.factory = factory;\n    this.builder = builder;\n    this.grammar = new EasyScoreGrammar(this.builder);\n    this.parser = new Parser(this.grammar);\n    this.options.commitHooks.forEach((commitHook) => this.addCommitHook(commitHook));\n    return this;\n  }\n\n  setContext(context: RenderContext): this {\n    this.factory.setContext(context);\n    return this;\n  }\n\n  parse(line: string, options: BuilderOptions = {}): Result {\n    this.builder.reset(options);\n    const result = this.parser.parse(line);\n    if (!result.success && this.options.throwOnError) {\n      L(result);\n      throw new RuntimeError('Error parsing line: ' + line);\n    }\n    return result;\n  }\n\n  beam(notes: StaveNote[], options?: { autoStem?: boolean; secondaryBeamBreaks?: number[] }): StaveNote[] {\n    this.factory.Beam({ notes, options });\n    return notes;\n  }\n\n  tuplet(notes: StaveNote[], options?: TupletOptions): StaveNote[] {\n    this.factory.Tuplet({ notes, options });\n    return notes;\n  }\n\n  notes(line: string, options: BuilderOptions = {}): StaveNote[] {\n    options = { clef: this.defaults.clef, stem: this.defaults.stem, ...options };\n    this.parse(line, options);\n    return this.builder.getElements().notes;\n  }\n\n  voice(notes: Note[], options: { time?: string; options?: { softmaxFactor: number } } = {}): Voice {\n    options = { time: this.defaults.time, ...options };\n    return this.factory.Voice(options).addTickables(notes);\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.builder.addCommitHook(commitHook);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { Note } from './note';\nimport { Glyph } from './glyph';\nimport { TextNoteStruct } from './textnote';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextDynamics.DEBUG) log('Vex.Flow.TextDynamics', args);\n}\n\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  protected sequence: string;\n\n  protected line: number;\n  protected glyphs: Glyph[];\n\n  /** The glyph data for each dynamics letter. */\n  static get GLYPHS(): Record<string, { code: string; width: number }> {\n    return {\n      f: {\n        code: 'dynamicForte',\n        width: 12,\n      },\n      p: {\n        code: 'dynamicPiano',\n        width: 14,\n      },\n      m: {\n        code: 'dynamicMezzo',\n        width: 17,\n      },\n      s: {\n        code: 'dynamicSforzando',\n        width: 10,\n      },\n      z: {\n        code: 'dynamicZ',\n        width: 12,\n      },\n      r: {\n        code: 'dynamicRinforzando',\n        width: 12,\n      },\n    };\n  }\n\n  /**\n   * A `TextDynamics` object inherits from `Note` so that it can be formatted\n   * within a `Voice`.\n   * Create the dynamics marking. `text_struct` is an object\n   * that contains a `duration` property and a `sequence` of\n   * letters that represents the letters to render\n   */\n  constructor(text_struct: TextNoteStruct) {\n    super(text_struct);\n    this.setAttribute('type', 'TextDynamics');\n\n    this.sequence = text_struct.text.toLowerCase();\n    this.line = text_struct.line || 0;\n    this.glyphs = [];\n\n    this.render_options = {\n      ...this.render_options,\n      ...{\n        glyph_font_size: 40,\n      },\n    };\n\n    L('New Dynamics Text: ', this.sequence);\n  }\n\n  /** Set the Stave line on which the note should be placed. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Preformat the dynamics text. */\n  preFormat(): this {\n    let total_width = 0;\n    // length of this.glyphs must be <=\n    // length of this.sequence, so if we're formatted before\n    // create new glyphs.\n    this.glyphs = [];\n    // Iterate through each letter\n    this.sequence.split('').forEach((letter) => {\n      // Get the glyph data for the letter\n      const glyph_data = TextDynamics.GLYPHS[letter];\n      if (!glyph_data) throw new RuntimeError('Invalid dynamics character: ' + letter);\n\n      const size = defined(this.render_options.glyph_font_size);\n      const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\n\n      // Add the glyph\n      this.glyphs.push(glyph);\n\n      total_width += glyph_data.width;\n    });\n\n    // Store the width of the text\n    this.setWidth(total_width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Draw the dynamics text on the rendering context. */\n  draw(): void {\n    this.setRendered();\n    const x = this.getAbsoluteX();\n    const y = this.checkStave().getYForLine(this.line + -3);\n\n    L('Rendering Dynamics: ', this.sequence);\n\n    let letter_x = x;\n    this.glyphs.forEach((glyph, index) => {\n      const current_letter = this.sequence[index];\n      glyph.render(this.checkContext(), letter_x, y);\n      letter_x += TextDynamics.GLYPHS[current_letter].width;\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests\n\nimport { defined } from './util';\nimport { Flow } from './flow';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { StaveModifier } from './stavemodifier';\nimport { TimeSignature } from './timesignature';\nimport { Stave } from './stave';\nimport { RenderContext } from './types/common';\nimport { Barline } from './stavebarline';\n\nexport interface MultimeasureRestRenderOptions {\n  number_of_measures?: number;\n  padding_left?: number;\n  line: number;\n  number_glyph_point: number;\n  show_number: boolean;\n  line_thickness?: number;\n  symbol_spacing?: number;\n  serif_thickness: number;\n  use_symbols: boolean;\n  number_line: number;\n  spacing_between_lines_px: number;\n  semibrave_rest_glyph_scale: number;\n  padding_right?: number;\n}\n\nlet semibrave_rest: {\n  glyph_font_scale: number;\n  glyph_code: string;\n  width: number;\n};\n\nfunction get_semibrave_rest() {\n  if (!semibrave_rest) {\n    const notehead = new NoteHead({ duration: 'w', note_type: 'r' });\n    semibrave_rest = {\n      glyph_font_scale: notehead.render_options.glyph_font_scale,\n      glyph_code: notehead.glyph_code,\n      width: notehead.getWidth(),\n    };\n  }\n  return semibrave_rest;\n}\n\nexport class MultiMeasureRest extends Element {\n  protected render_options: MultimeasureRestRenderOptions;\n  protected xs: { left: number; right: number };\n  protected number_of_measures: number;\n\n  protected stave?: Stave;\n  // Parameters:\n  // * `number_of_measures` - Number of measures.\n  // * `options` - The options object.\n  //   * `show_number` - Show number of measures string or not.\n  //   * `number_line` -  Staff line to render the number of measures string.\n  //   * `number_glyph_point` - Size of the number of measures string glyphs.\n  //   * `padding_left` - Left padding from stave x.\n  //   * `padding_right` - Right padding from stave end x.\n  //   * `line` - Staff line to render rest line or rest symbols.\n  //   * `spacing_between_lines_px` - Spacing between staff lines to\n  // resolve serif height or {2-bar and 4-bar}rest symbol height.\n  //   * `line_thickness` - Rest line thickness.\n  //   * `serif_thickness` - Rest serif line thickness.\n  //   * `use_symbols` - Use rest symbols or not.\n  //   * `symbol_spacing` - Spacing between each rest symbol glyphs.\n  //   * `semibrave_rest_glyph_scale` - Size of the semibrave(1-bar) rest symbol.\n  constructor(number_of_measures: number, options: Partial<MultimeasureRestRenderOptions>) {\n    super();\n    this.setAttribute('type', 'MultiMeasureRest');\n\n    const point = this.musicFont.lookupMetric('digits.point');\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n\n    this.render_options = {\n      show_number: true,\n      number_line: -0.5,\n      number_glyph_point: point, // same as TimeSignature.\n\n      line: 2,\n\n      spacing_between_lines_px: 10, // same as Stave.\n\n      serif_thickness: 2,\n\n      use_symbols: false,\n\n      /* same as NoteHead. */\n      semibrave_rest_glyph_scale: Flow.DEFAULT_NOTATION_FONT_SCALE,\n    };\n    this.render_options = { ...this.render_options, ...options };\n\n    this.render_options.number_line += fontLineShift;\n\n    this.number_of_measures = number_of_measures;\n    this.xs = {\n      left: NaN,\n      right: NaN,\n    };\n  }\n\n  getXs(): { left: number; right: number } {\n    return this.xs;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  drawLine(ctx: RenderContext, left: number, right: number, sbl: number): void {\n    const y = this.checkStave().getYForLine(this.render_options.line);\n    const padding = (right - left) * 0.1;\n\n    left += padding;\n    right -= padding;\n\n    const serif = {\n      thickness: this.render_options.serif_thickness,\n      height: sbl,\n    };\n    let lineThicknessHalf = sbl * 0.25;\n    if (this.render_options.line_thickness != undefined) {\n      lineThicknessHalf = this.render_options.line_thickness * 0.5;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(left, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - sbl);\n    ctx.lineTo(right, y - sbl);\n    ctx.lineTo(right, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + sbl);\n    ctx.lineTo(left, y + sbl);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  drawSymbols(ctx: RenderContext, left: number, right: number, sbl: number): void {\n    const stave = this.checkStave();\n    const n4 = Math.floor(this.number_of_measures / 4);\n    const n = this.number_of_measures % 4;\n    const n2 = Math.floor(n / 2);\n    const n1 = n % 2;\n\n    const semibrave_rest = get_semibrave_rest();\n    const semibrave_rest_width =\n      semibrave_rest.width * (this.render_options.semibrave_rest_glyph_scale / semibrave_rest.glyph_font_scale);\n    const glyphs = {\n      2: {\n        width: semibrave_rest_width * 0.5,\n        height: sbl,\n      },\n      1: {\n        width: semibrave_rest_width,\n      },\n    };\n\n    let spacing = semibrave_rest_width * 1.35;\n    if (this.render_options.symbol_spacing != undefined) {\n      spacing = this.render_options.symbol_spacing;\n    }\n\n    const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n    let x = left + (right - left) * 0.5 - width * 0.5;\n    const yTop = stave.getYForLine(this.render_options.line - 1);\n    const yMiddle = stave.getYForLine(this.render_options.line);\n    const yBottom = stave.getYForLine(this.render_options.line + 1);\n\n    ctx.save();\n    ctx.setStrokeStyle('none');\n    ctx.setLineWidth(0);\n\n    for (let i = 0; i < n4; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n2; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n1; ++i) {\n      Glyph.renderGlyph(ctx, x, yTop, this.render_options.semibrave_rest_glyph_scale, semibrave_rest.glyph_code);\n      x += glyphs[1].width + spacing;\n    }\n\n    ctx.restore();\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const stave = this.checkStave();\n    const sbl = this.render_options.spacing_between_lines_px;\n\n    let left = stave.getNoteStartX();\n    let right = stave.getNoteEndX();\n\n    // FIXME: getNoteStartX() returns x+5(barline width) and\n    // getNoteEndX() returns x + width(no barline width) by default. how to fix?\n    const begModifiers = stave.getModifiers(StaveModifier.Position.BEGIN);\n    if (begModifiers.length === 1 && begModifiers[0].getCategory() === Barline.CATEGORY) {\n      left -= begModifiers[0].getWidth();\n    }\n\n    if (this.render_options.padding_left != undefined) {\n      left = stave.getX() + this.render_options.padding_left;\n    }\n\n    if (this.render_options.padding_right != undefined) {\n      right = stave.getX() + stave.getWidth() - this.render_options.padding_right;\n    }\n\n    this.xs.left = left;\n    this.xs.right = right;\n\n    if (this.render_options.use_symbols) {\n      this.drawSymbols(ctx, left, right, sbl);\n    } else {\n      this.drawLine(ctx, left, right, sbl);\n    }\n\n    if (this.render_options.show_number) {\n      const timeSpec = '/' + this.number_of_measures;\n      const timeSig = new TimeSignature(timeSpec, 0, false);\n      timeSig.point = this.render_options.number_glyph_point;\n      timeSig.setTimeSig(timeSpec);\n      timeSig.setStave(stave);\n      timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\n      timeSig.bottomLine = this.render_options.number_line;\n      timeSig.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { FontInfo, RenderContext } from './types/common';\nimport { StaveNote } from './stavenote';\n\nexport interface StaveLineNotes {\n  first_note: StaveNote;\n  first_indices: number[];\n  last_note: StaveNote;\n  last_indices: number[];\n}\n\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(\n  ctx: RenderContext,\n  x0: number,\n  y0: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n): void {\n  // all cases do this.\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x0, y0);\n  ctx.closePath();\n\n  ctx.fill();\n}\n\n// Helper function to draw a line with arrow heads\nfunction drawArrowLine(\n  ctx: RenderContext,\n  pt1: { x: number; y: number },\n  pt2: { x: number; y: number },\n  config: RenderOptions\n): void {\n  const both_arrows = config.draw_start_arrow && config.draw_end_arrow;\n\n  const x1 = pt1.x;\n  const y1 = pt1.y;\n  const x2 = pt2.x;\n  const y2 = pt2.y;\n\n  // For ends with arrow we actually want to stop before we get to the arrow\n  // so that wide lines won't put a flat end on the arrow.\n  const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  const ratio = (distance - config.arrowhead_length / 3) / distance;\n  let end_x;\n  let end_y;\n  let start_x;\n  let start_y;\n  if (config.draw_end_arrow || both_arrows) {\n    end_x = Math.round(x1 + (x2 - x1) * ratio);\n    end_y = Math.round(y1 + (y2 - y1) * ratio);\n  } else {\n    end_x = x2;\n    end_y = y2;\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    start_x = x1 + (x2 - x1) * (1 - ratio);\n    start_y = y1 + (y2 - y1) * (1 - ratio);\n  } else {\n    start_x = x1;\n    start_y = y1;\n  }\n\n  if (config.color) {\n    ctx.setStrokeStyle(config.color);\n    ctx.setFillStyle(config.color);\n  }\n\n  // Draw the shaft of the arrow\n  ctx.beginPath();\n  ctx.moveTo(start_x, start_y);\n  ctx.lineTo(end_x, end_y);\n  ctx.stroke();\n  ctx.closePath();\n\n  // calculate the angle of the line\n  const line_angle = Math.atan2(y2 - y1, x2 - x1);\n  // h is the line length of a side of the arrow head\n  const h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));\n\n  let angle1;\n  let angle2;\n  let top_x;\n  let top_y;\n  let bottom_x;\n  let bottom_y;\n\n  if (config.draw_end_arrow || both_arrows) {\n    angle1 = line_angle + Math.PI + config.arrowhead_angle;\n    top_x = x2 + Math.cos(angle1) * h;\n    top_y = y2 + Math.sin(angle1) * h;\n\n    angle2 = line_angle + Math.PI - config.arrowhead_angle;\n    bottom_x = x2 + Math.cos(angle2) * h;\n    bottom_y = y2 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    angle1 = line_angle + config.arrowhead_angle;\n    top_x = x1 + Math.cos(angle1) * h;\n    top_y = y1 + Math.sin(angle1) * h;\n\n    angle2 = line_angle - config.arrowhead_angle;\n    bottom_x = x1 + Math.cos(angle2) * h;\n    bottom_y = y1 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n  }\n}\n\ninterface RenderOptions {\n  padding_left: number;\n  padding_right: number;\n  line_width: number;\n  line_dash?: number[];\n  rounded_end: boolean;\n  color?: string;\n  draw_start_arrow: boolean;\n  draw_end_arrow: boolean;\n  arrowhead_length: number;\n  arrowhead_angle: number;\n  text_position_vertical: number;\n  text_justification: number;\n}\n\nexport class StaveLine extends Element {\n  readonly render_options: RenderOptions;\n\n  protected text: string;\n  protected font: FontInfo;\n\n  // These five instance variables are all initialized by the constructor via this.setNotes(notes).\n  protected notes!: StaveLineNotes;\n  protected first_note!: StaveNote;\n  protected first_indices!: number[];\n  protected last_note!: StaveNote;\n  protected last_indices!: number[];\n\n  // Text Positioning\n  static readonly TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n  };\n\n  static readonly TextJustification = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3,\n  };\n\n  // Initialize the StaveLine with the given `notes`.\n  //\n  // `notes` is a struct that has:\n  //\n  //  ```\n  //  {\n  //    first_note: Note,\n  //    last_note: Note,\n  //    first_indices: [n1, n2, n3],\n  //    last_indices: [n1, n2, n3]\n  //  }\n  //  ```\n  constructor(notes: StaveLineNotes) {\n    super();\n    this.setAttribute('type', 'StaveLine');\n\n    this.setNotes(notes);\n\n    this.text = '';\n\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    this.render_options = {\n      // Space to add to the left or the right\n      padding_left: 4,\n      padding_right: 3,\n\n      // The width of the line in pixels\n      line_width: 1,\n      // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n      line_dash: undefined,\n      // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n      rounded_end: true,\n      // The color of the line and arrowheads\n      color: undefined,\n\n      // Flags to draw arrows on each end of the line\n      draw_start_arrow: false,\n      draw_end_arrow: false,\n\n      // The length of the arrowhead sides\n      arrowhead_length: 10,\n      // The angle of the arrowhead\n      arrowhead_angle: Math.PI / 8,\n\n      // The position of the text\n      text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n      text_justification: StaveLine.TextJustification.CENTER,\n    };\n  }\n\n  // Set the font for the `StaveLine` text\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n  // The the annotation for the `StaveLine`\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  // Set the notes for the `StaveLine`\n  setNotes(notes: StaveLineNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\n    }\n\n    this.notes = notes;\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n\n  // Apply the style of the `StaveLine` to the context\n  applyLineStyle(): void {\n    const ctx = this.checkContext();\n    const render_options = this.render_options;\n\n    if (render_options.line_dash) {\n      ctx.setLineDash(render_options.line_dash);\n    }\n\n    if (render_options.line_width) {\n      ctx.setLineWidth(render_options.line_width);\n    }\n\n    if (render_options.rounded_end) {\n      ctx.setLineCap('round');\n    } else {\n      ctx.setLineCap('square');\n    }\n  }\n\n  // Apply the text styling to the context\n  applyFontStyle(): void {\n    const ctx = this.checkContext();\n\n    if (this.font) {\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    }\n\n    const render_options = this.render_options;\n    const color = render_options.color;\n    if (color) {\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n    }\n  }\n\n  // Renders the `StaveLine` on the context\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    const render_options = this.render_options;\n\n    ctx.save();\n    this.applyLineStyle();\n\n    // Cycle through each set of indices and draw lines\n    let start_position = { x: 0, y: 0 };\n    let end_position = { x: 0, y: 0 };\n    this.first_indices.forEach((first_index, i) => {\n      const last_index = this.last_indices[i];\n\n      // Get initial coordinates for the start/end of the line\n      start_position = first_note.getModifierStartXY(2, first_index);\n      end_position = last_note.getModifierStartXY(1, last_index);\n      const upwards_slope = start_position.y > end_position.y;\n\n      // Adjust `x` coordinates for modifiers\n      start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n      end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n\n      // Adjust first `x` coordinates for displacements\n      const notehead_width = first_note.getGlyph().getWidth();\n      const first_displaced = first_note.getKeyProps()[first_index].displaced;\n      if (first_displaced && first_note.getStemDirection() === 1) {\n        start_position.x += notehead_width + render_options.padding_left;\n      }\n\n      // Adjust last `x` coordinates for displacements\n      const last_displaced = last_note.getKeyProps()[last_index].displaced;\n      if (last_displaced && last_note.getStemDirection() === -1) {\n        end_position.x -= notehead_width + render_options.padding_right;\n      }\n\n      // Adjust y position better if it's not coming from the center of the note\n      start_position.y += upwards_slope ? -3 : 1;\n      end_position.y += upwards_slope ? 2 : 0;\n\n      drawArrowLine(ctx, start_position, end_position, this.render_options);\n    });\n\n    ctx.restore();\n\n    // Determine the x coordinate where to start the text\n    const text_width = ctx.measureText(this.text).width;\n    const justification = render_options.text_justification;\n    let x = 0;\n    if (justification === StaveLine.TextJustification.LEFT) {\n      x = start_position.x;\n    } else if (justification === StaveLine.TextJustification.CENTER) {\n      const delta_x = end_position.x - start_position.x;\n      const center_x = delta_x / 2 + start_position.x;\n      x = center_x - text_width / 2;\n    } else if (justification === StaveLine.TextJustification.RIGHT) {\n      x = end_position.x - text_width;\n    }\n\n    // Determine the y value to start the text\n    let y = 0;\n    const vertical_position = render_options.text_position_vertical;\n    if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n      y = first_note.checkStave().getYForTopText();\n    } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n      y = first_note.checkStave().getYForBottomText(Flow.TEXT_HEIGHT_OFFSET_HACK);\n    }\n\n    // Draw the text\n    ctx.save();\n    this.applyFontStyle();\n    ctx.fillText(this.text, x, y);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { BoundingBox } from './boundingbox';\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\n\nexport interface GlyphNoteOptions {\n  ignoreTicks?: boolean;\n  line?: number;\n}\n\nexport class GlyphNote extends Note {\n  protected options: GlyphNoteOptions;\n\n  constructor(glyph: Glyph | undefined, noteStruct: NoteStruct, options?: GlyphNoteOptions) {\n    super(noteStruct);\n    this.options = {\n      ignoreTicks: false,\n      line: 2,\n      ...options,\n    };\n    this.setAttribute('type', 'GlyphNote');\n\n    // Note properties\n    this.ignore_ticks = this.options.ignoreTicks as boolean;\n    if (glyph) {\n      this.setGlyph(glyph);\n    }\n  }\n\n  setGlyph(glyph: Glyph): this {\n    this.glyph = glyph;\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return this.glyph.getBoundingBox();\n  }\n\n  preFormat(): this {\n    if (!this.preFormatted && this.modifierContext) {\n      this.modifierContext.preFormat();\n    }\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n    }\n    ctx.closeGroup();\n  }\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n    ctx.openGroup('glyphNote', this.getAttribute('id'));\n\n    // Context is set when setStave is called on Note\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(ctx);\n    }\n\n    this.glyph.setStave(stave);\n    this.glyph.setYShift(stave.getYForLine(this.options.line as number) - stave.getYForGlyphs());\n\n    const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n    this.glyph.renderToStave(x);\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { GlyphNote } from './glyphnote';\nimport { Glyph } from './glyph';\nimport { NoteStruct } from './note';\nimport { GlyphNoteOptions } from './glyphnote';\n\nexport class RepeatNote extends GlyphNote {\n  constructor(type: string, noteStruct?: NoteStruct, options?: GlyphNoteOptions) {\n    // Smufl Codes\n    const CODES = {\n      '1': 'repeat1Bar',\n      '2': 'repeat2Bars',\n      '4': 'repeat4Bars',\n      slash: 'repeatBarSlash',\n    } as Record<string, string>;\n\n    super(undefined, { duration: 'q', align_center: type !== 'slash', ...noteStruct }, options);\n    this.setAttribute('type', 'RepeatNote');\n\n    const glyphCode = CODES[type] || 'repeat1Bar';\n    const glyph = new Glyph(glyphCode, this.musicFont.lookupMetric('repeatNote.point', 40), { category: 'repeatNote' });\n    this.setGlyph(glyph);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { FormatOptions, Formatter, FormatterOptions } from './formatter';\nimport { Note } from './note';\nimport { Stave, StaveOptions } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { RenderContext } from './types/common';\nimport { RuntimeError } from './util';\nimport { Voice } from './voice';\n\nexport interface SystemFormatterOptions extends Partial<FormatterOptions> {\n  alpha: number;\n}\n\nexport interface SystemParams {\n  stave: Stave;\n  voices: Voice[];\n  noJustification?: boolean;\n  options: Partial<StaveOptions>;\n  spaceAbove: number;\n  spaceBelow: number;\n  debugNoteMetrics: boolean;\n}\n\n/**\n * Formatting for systems created/drawn from factory:\n *\n * If width is provided, the system will use the specified width.\n *\n * If noJustification flag is 'true', there is no justification between voices\n * Otherwise, autoWidth defaults to true.\n *\n * If autowidth is true, the system uses format.preCalculateMinWidth\n * for the width of all voices, and default stave padding\n */\nexport interface SystemOptions {\n  factory?: Factory;\n  noPadding: boolean;\n  debugFormatter: boolean;\n  connector?: StaveConnector;\n  spaceBetweenStaves: number;\n  formatIterations: number;\n  autoWidth: boolean;\n  x: number;\n  width: number;\n  y: number;\n  details: SystemFormatterOptions;\n  formatOptions: FormatOptions;\n  noJustification: boolean;\n}\n\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n  protected options!: SystemOptions;\n  protected factory!: Factory;\n  protected formatter?: Formatter;\n  protected startX?: number;\n  protected lastY?: number;\n  protected parts: SystemParams[];\n  protected connector?: StaveConnector;\n  protected debugNoteMetricsYs?: { y: number; voice: Voice }[];\n  constructor(params: Partial<SystemOptions> = {}) {\n    super();\n    this.setAttribute('type', 'System');\n    this.setOptions(params);\n    this.parts = [];\n  }\n\n  /** Set formatting options. */\n  setOptions(options: Partial<SystemOptions> = {}): void {\n    this.options = {\n      x: 10,\n      y: 10,\n      width: 500,\n      spaceBetweenStaves: 12, // stave spaces\n      autoWidth: false,\n      noJustification: false,\n      debugFormatter: false,\n      formatIterations: 0, // number of formatter tuning steps\n      noPadding: false,\n      ...options,\n      details: {\n        alpha: 0.5, // formatter tuner learning/shifting rate\n        ...options.details,\n      },\n      formatOptions: {\n        ...options.formatOptions,\n      },\n    };\n    if (this.options.noJustification === false && typeof options.width === 'undefined') {\n      this.options.autoWidth = true;\n    }\n\n    this.factory = this.options.factory || new Factory({ renderer: { elementId: null, width: 0, height: 0 } });\n  }\n\n  /** Set associated context. */\n  setContext(context: RenderContext): this {\n    super.setContext(context);\n    this.factory.setContext(context);\n    return this;\n  }\n\n  /**\n   * Add connector between staves.\n   * @param type see {@link StaveConnector.typeString}\n   */\n  addConnector(type = 'double'): StaveConnector {\n    this.connector = this.factory.StaveConnector({\n      top_stave: this.parts[0].stave,\n      bottom_stave: this.parts[this.parts.length - 1].stave,\n      type,\n    });\n    return this.connector;\n  }\n\n  /**\n   * Add stave to the system.\n   *\n   * Examples:\n   *\n   *  (one voice)\n   *\n   * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n   *\n   *  (two voices)\n   *\n   * `system.addStave({voices: [`\n   *\n   *  `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n   *\n   *  `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))]});`\n   */\n  addStave(paramsItems: Partial<SystemParams>): Stave {\n    let stave = paramsItems.stave;\n    if (!stave) {\n      stave = this.factory.Stave({\n        x: this.options.x,\n        y: this.options.y,\n        width: this.options.width,\n        options: {\n          left_bar: false,\n          ...paramsItems.options,\n        },\n      });\n    }\n\n    const params: SystemParams = {\n      stave,\n      voices: [],\n      spaceAbove: 0, // stave spaces\n      spaceBelow: 0, // stave spaces\n      debugNoteMetrics: false,\n      ...paramsItems,\n      options: {\n        left_bar: false,\n        ...paramsItems.options,\n      },\n    };\n\n    params.voices.forEach((voice) =>\n      voice\n        .setContext(this.getContext())\n        .setStave(params.stave)\n        .getTickables()\n        .forEach((tickable) => tickable.setStave(params.stave))\n    );\n\n    this.parts.push(params);\n    return params.stave;\n  }\n\n  /** Format the system. */\n  format(): void {\n    let justifyWidth = 0;\n    const formatter = new Formatter({ ...this.options.details });\n    this.formatter = formatter;\n\n    let y = this.options.y;\n    let startX = 0;\n    let allVoices: Voice[] = [];\n    const debugNoteMetricsYs: { y: number; voice: Voice }[] = [];\n\n    // Join the voices for each stave.\n    this.parts.forEach((part) => {\n      y = y + part.stave.space(part.spaceAbove);\n      part.stave.setY(y);\n      if (this.options.autoWidth) {\n        part.voices.forEach((voice) => {\n          formatter.joinVoices([voice]);\n        });\n      } else {\n        formatter.joinVoices(part.voices);\n      }\n      y = y + part.stave.space(part.spaceBelow);\n      y = y + part.stave.space(this.options.spaceBetweenStaves);\n      if (part.debugNoteMetrics) {\n        debugNoteMetricsYs.push({ y, voice: part.voices[0] });\n        y += 15;\n      }\n      allVoices = allVoices.concat(part.voices);\n\n      startX = Math.max(startX, part.stave.getNoteStartX());\n    });\n\n    // Update the start position of all staves.\n    this.parts.forEach((part) => part.stave.setNoteStartX(startX));\n    if (this.options.autoWidth) {\n      justifyWidth = formatter.preCalculateMinTotalWidth(allVoices);\n      this.parts.forEach((part) => {\n        part.stave.setWidth(justifyWidth + Stave.rightPadding + (startX - this.options.x));\n      });\n    } else {\n      justifyWidth = this.options.noPadding\n        ? this.options.width - this.options.x\n        : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n    }\n    formatter.format(allVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n\n    for (let i = 0; i < this.options.formatIterations; i++) {\n      formatter.tune({ alpha: this.options.details.alpha });\n    }\n\n    this.startX = startX;\n    this.debugNoteMetricsYs = debugNoteMetricsYs;\n    this.lastY = y;\n    this.boundingBox = new BoundingBox(this.options.x, this.options.y, this.options.width, this.lastY - this.options.y);\n  }\n\n  /** Render the system. */\n  draw(): void {\n    // Render debugging information, if requested.\n    const ctx = this.checkContext();\n    if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n      throw new RuntimeError('NoFormated', 'Format must be instatiated before draw');\n    }\n    this.setRendered();\n\n    if (this.options.debugFormatter) {\n      Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n    }\n\n    this.debugNoteMetricsYs.forEach((d) => {\n      d.voice.getTickables().forEach((tickable) => Note.plotMetrics(ctx, tickable, d.y));\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { TimeSignature, TimeSignatureInfo } from './timesignature';\n\nexport class TimeSigNote extends Note {\n  protected timeSigInfo: TimeSignatureInfo;\n\n  constructor(timeSpec: string, customPadding?: number) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'TimeSigNote');\n\n    const timeSignature = new TimeSignature(timeSpec, customPadding);\n    this.timeSigInfo = timeSignature.getInfo();\n    this.setWidth(this.timeSigInfo.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (!this.timeSigInfo.glyph.getContext()) {\n      this.timeSigInfo.glyph.setContext(ctx);\n    }\n\n    this.timeSigInfo.glyph.setStave(stave);\n    this.timeSigInfo.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n    this.timeSigInfo.glyph.renderToStave(this.getAbsoluteX());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Mark Meeus 2019\n\nimport { Note } from './note';\nimport { KeySignature } from './keysignature';\nimport { ModifierContext } from './modifiercontext';\n\nexport class KeySigNote extends Note {\n  protected keySignature: KeySignature;\n\n  constructor(keySpec: string, cancelKeySpec: string, alterKeySpec: string) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'KeySigNote');\n\n    this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    this.keySignature.setStave(this.checkStave());\n    this.setWidth(this.keySignature.getWidth());\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkStave().checkContext();\n    this.setRendered();\n    this.keySignature.setX(this.getAbsoluteX());\n    this.keySignature.setContext(ctx);\n    this.keySignature.draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError, log } from './util';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { FontInfo, RenderContext } from './types/common';\nimport { StaveNote } from './stavenote';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (PedalMarking.DEBUG) log('Vex.Flow.PedalMarking', args);\n}\n\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name: string, context: RenderContext, x: number, y: number, point: number): void {\n  const glyph_data = PedalMarking.GLYPHS[name];\n  const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\n  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n  /** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  protected line: number;\n  protected type: number;\n  protected custom_depress_text: string;\n  protected custom_release_text: string;\n  protected render_options: {\n    color: string;\n    bracket_height: number;\n    text_margin_right: number;\n    bracket_line_width: number;\n  };\n  protected font: FontInfo;\n  protected notes: StaveNote[];\n\n  /** Glyph data */\n  static readonly GLYPHS: Record<string, { code: string; y_shift: number; x_shift: number }> = {\n    pedal_depress: {\n      code: 'keyboardPedalPed',\n      x_shift: -10,\n      y_shift: 0,\n    },\n    pedal_release: {\n      code: 'keyboardPedalUp',\n      x_shift: -2,\n      y_shift: 3,\n    },\n  };\n\n  /** Pedal type as number. */\n  static readonly type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n  };\n\n  /** Pedal type as string. */\n  static readonly typeString: Record<string, number> = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n  };\n\n  /** Set pedal type. */\n  setType(type: string | number): this {\n    type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n\n    if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  /**\n   * Create a sustain pedal marking. Returns the defaults PedalMarking.\n   * Which uses the traditional \"Ped\" and \"*\"\" markings.\n   */\n  static createSustain(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    return pedal;\n  }\n\n  /** Create a sostenuto pedal marking */\n  static createSostenuto(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.MIXED);\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n  }\n\n  /** Create an una corda pedal marking */\n  static createUnaCorda(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.TEXT);\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n  }\n\n  constructor(notes: StaveNote[]) {\n    super();\n    this.setAttribute('type', 'PedalMarking');\n\n    this.notes = notes;\n    this.type = PedalMarking.type.TEXT;\n    this.line = 0;\n\n    // Custom text for the release/depress markings\n    this.custom_depress_text = '';\n    this.custom_release_text = '';\n\n    this.font = {\n      family: 'Times New Roman',\n      size: 12,\n      weight: 'italic bold',\n    };\n\n    this.render_options = {\n      bracket_height: 10,\n      text_margin_right: 6,\n      bracket_line_width: 1,\n      color: 'black',\n    };\n  }\n\n  /**\n   * Set custom text for the `depress`/`release` pedal markings. No text is\n   * set if the parameter is falsy.\n   */\n  setCustomText(depress: string, release?: string): this {\n    this.custom_depress_text = depress || '';\n    this.custom_release_text = release || '';\n    return this;\n  }\n\n  /** Set the staff line to render the markings on. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Draw the bracket based pedal markings. */\n  drawBracketed(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n    let prev_x: number;\n    let prev_y: number;\n\n    // Iterate through each note\n    this.notes.forEach((note, index, notes) => {\n      // Each note triggers the opposite pedal action\n      is_pedal_depressed = !is_pedal_depressed;\n\n      // Get the initial coordinates for the note\n      const x = note.getAbsoluteX();\n      const y = note.checkStave().getYForBottomText(this.line + 3);\n\n      // Throw if current note is positioned before the previous note\n      if (x < prev_x) {\n        throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n      }\n\n      // Determine if the previous or next note are the same\n      // as the current note. We need to keep track of this for\n      // when adjustments are made for the release+depress action\n      const next_is_same = notes[index + 1] === note;\n      const prev_is_same = notes[index - 1] === note;\n\n      let x_shift = 0;\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      if (is_pedal_depressed) {\n        // Adjustment for release+depress\n        x_shift = prev_is_same ? 5 : 0;\n\n        if (this.type === PedalMarking.type.MIXED && !prev_is_same) {\n          // For MIXED style, start with text instead of bracket\n          if (this.custom_depress_text) {\n            // If we have custom text, use instead of the default \"Ped\" glyph\n            const text_width = ctx.measureText(this.custom_depress_text).width;\n            ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n            x_shift = text_width / 2 + this.render_options.text_margin_right;\n          } else {\n            // Render the Ped glyph in position\n            drawPedalGlyph('pedal_depress', ctx, x, y, point);\n            x_shift = 20 + this.render_options.text_margin_right;\n          }\n        } else {\n          // Draw start bracket\n          ctx.beginPath();\n          ctx.moveTo(x, y - this.render_options.bracket_height);\n          ctx.lineTo(x + x_shift, y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      } else {\n        // Adjustment for release+depress\n        x_shift = next_is_same ? -5 : 0;\n\n        // Draw end bracket\n        ctx.beginPath();\n        ctx.moveTo(prev_x, prev_y);\n        ctx.lineTo(x + x_shift, y);\n        ctx.lineTo(x, y - this.render_options.bracket_height);\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      // Store previous coordinates\n      prev_x = x + x_shift;\n      prev_y = y;\n    });\n  }\n\n  /**\n   * Draw the text based pedal markings. This defaults to the traditional\n   * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n   */\n  drawText(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n\n    // Iterate through each note, placing glyphs or custom text accordingly\n    this.notes.forEach((note) => {\n      is_pedal_depressed = !is_pedal_depressed;\n      const stave = note.checkStave();\n      const x = note.getAbsoluteX();\n      const y = stave.getYForBottomText(this.line + 3);\n\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      let text_width = 0;\n      if (is_pedal_depressed) {\n        if (this.custom_depress_text) {\n          text_width = ctx.measureText(this.custom_depress_text).width;\n          ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_depress', ctx, x, y, point);\n        }\n      } else {\n        if (this.custom_release_text) {\n          text_width = ctx.measureText(this.custom_release_text).width;\n          ctx.fillText(this.custom_release_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_release', ctx, x, y, point);\n        }\n      }\n    });\n  }\n\n  /** Render the pedal marking in position on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setStrokeStyle(this.render_options.color);\n    ctx.setFillStyle(this.render_options.color);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    L('Rendering Pedal Marking');\n\n    if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n      ctx.setLineWidth(this.render_options.bracket_line_width);\n      this.drawBracketed();\n    } else if (this.type === PedalMarking.type.TEXT) {\n      this.drawText();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\n\nimport { RuntimeError, log } from './util';\nimport { Flow } from './flow';\nimport { Element } from './element';\nimport { Renderer } from './renderer';\nimport { FontInfo, RenderContext } from './types/common';\nimport { Note } from './note';\n\nexport interface TextBracketParams {\n  start: Note;\n  stop: Note;\n  text: string;\n  superscript: string;\n  position: number | string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\nfunction L(\n  // eslint-disable-next-line\n  ...args: any[]) {\n  if (TextBracket.DEBUG) log('Vex.Flow.TextBracket', args);\n}\n\nexport enum TextBracketPosition {\n  TOP = 1,\n  BOTTOM = -1,\n}\n\nexport class TextBracket extends Element {\n  static DEBUG: boolean;\n\n  render_options: {\n    dashed: boolean;\n    color: string;\n    line_width: number;\n    underline_superscript: boolean;\n    show_bracket: boolean;\n    dash: number[];\n    bracket_height: number;\n  };\n\n  protected readonly text: string;\n  protected readonly superscript: string;\n  protected readonly position: TextBracketPosition;\n\n  protected line: number;\n  protected start: Note;\n  protected stop: Note;\n  protected font: FontInfo;\n\n  static get Positions(): typeof TextBracketPosition {\n    L('Positions is deprecated, use Position instead.');\n    return TextBracket.Position;\n  }\n\n  static get Position(): typeof TextBracketPosition {\n    return TextBracketPosition;\n  }\n\n  static get PositionsString(): Record<string, number> {\n    L('PositionsString is deprecated, use PositionString instead.');\n    return TextBracket.PositionsString;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      top: TextBracket.Position.TOP,\n      bottom: TextBracket.Position.BOTTOM,\n    };\n  }\n\n  constructor({ start, stop, text = '', superscript = '', position = TextBracket.Position.TOP }: TextBracketParams) {\n    super();\n    this.setAttribute('type', 'TextBracket');\n\n    this.start = start;\n    this.stop = stop;\n\n    this.text = text;\n    this.superscript = superscript;\n\n    this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n\n    this.line = 1;\n\n    this.font = {\n      family: 'Serif',\n      size: 15,\n      weight: 'italic',\n    };\n\n    this.render_options = {\n      dashed: true,\n      dash: [5],\n      color: 'black',\n      line_width: 1,\n      show_bracket: true,\n      bracket_height: 8,\n\n      // In the BOTTOM position, the bracket line can extend\n      // under the superscript.\n      underline_superscript: true,\n    };\n  }\n\n  // Apply the text backet styling to the provided `context`\n  applyStyle(context: RenderContext): this {\n    // Apply style for the octave bracket\n    context.setFont(this.font.family, this.font.size, this.font.weight);\n    context.setStrokeStyle(this.render_options.color);\n    context.setFillStyle(this.render_options.color);\n    context.setLineWidth(this.render_options.line_width);\n\n    return this;\n  }\n\n  // Set whether the bracket line should be `dashed`. You can also\n  // optionally set the `dash` pattern by passing in an array of numbers\n  setDashed(dashed: boolean, dash?: number[]): this {\n    this.render_options.dashed = dashed;\n    if (dash) this.render_options.dash = dash;\n    return this;\n  }\n\n  // Set the font for the text\n  setFont(font: Partial<FontInfo>): this {\n    // We use Object.assign to support partial updates to the font object\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n  // Set the rendering `context` for the octave bracket\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Draw the octave bracket on the rendering context\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let y = 0;\n    switch (this.position) {\n      case TextBracket.Position.TOP:\n        y = this.start.checkStave().getYForTopText(this.line);\n        break;\n      case TextBracket.Position.BOTTOM:\n        y = this.start.checkStave().getYForBottomText(this.line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n    }\n\n    // Get the preliminary start and stop coordintates for the bracket\n    const start = { x: this.start.getAbsoluteX(), y };\n    const stop = { x: this.stop.getAbsoluteX(), y };\n\n    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n\n    const bracket_height = this.render_options.bracket_height * this.position;\n\n    ctx.save();\n    this.applyStyle(ctx);\n\n    // Draw text\n    ctx.fillText(this.text, start.x, start.y);\n\n    // Get the width and height for the octave number\n    const main_width = ctx.measureText(this.text).width;\n    const main_height = ctx.measureText('M').width;\n\n    // Calculate the y position for the super script\n    const super_y = start.y - main_height / 2.5;\n\n    // Draw the superscript\n    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n    ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\n    // Determine width and height of the superscript\n    const superscript_width = ctx.measureText(this.superscript).width;\n    const super_height = ctx.measureText('M').width;\n\n    // Setup initial coordinates for the bracket line\n    let start_x = start.x;\n    let line_y = super_y;\n    const end_x = stop.x + this.stop.getGlyph().getWidth();\n\n    // Adjust x and y coordinates based on position\n    if (this.position === TextBracket.Position.TOP) {\n      start_x += main_width + superscript_width + 5;\n      line_y -= super_height / 2.7;\n    } else if (this.position === TextBracket.Position.BOTTOM) {\n      line_y += super_height / 2.7;\n      start_x += main_width + 2;\n\n      if (!this.render_options.underline_superscript) {\n        start_x += superscript_width;\n      }\n    }\n\n    if (this.render_options.dashed) {\n      // Main line\n      Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\n      // Ending Bracket\n      if (this.render_options.show_bracket) {\n        Renderer.drawDashedLine(\n          ctx,\n          end_x,\n          line_y + 1 * this.position,\n          end_x,\n          line_y + bracket_height,\n          this.render_options.dash\n        );\n      }\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(start_x, line_y);\n      // Main line\n      ctx.lineTo(end_x, line_y);\n      if (this.render_options.show_bracket) {\n        // Ending bracket\n        ctx.lineTo(end_x, line_y + bracket_height);\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Balazs Forian-Szabo\n// MIT License\n\nimport { log } from './util';\nimport { Element } from './element';\nimport { Vibrato } from './vibrato';\nimport { Note } from './note';\n\nfunction L(\n  // eslint-disable-next-line\n  ...args: any []) {\n  if (VibratoBracket.DEBUG) log('Vex.Flow.VibratoBracket', args);\n}\n\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n  /** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  protected line: number;\n\n  protected start?: Note;\n  protected stop?: Note;\n  protected render_options: {\n    vibrato_width: number;\n    wave_height: number;\n    wave_girth: number;\n    harsh: boolean;\n    wave_width: number;\n  };\n\n  /**\n   * Either the stop or start note must be set, or both of them.\n   * An undefined value for the start or stop note indicates that the vibrato\n   * is drawn from the beginning or until the end of the stave accordingly.\n   */\n  constructor(bracket_data: { stop?: Note; start?: Note }) {\n    super();\n    this.setAttribute('type', 'VibratoBracket');\n\n    this.start = bracket_data.start;\n    this.stop = bracket_data.stop;\n\n    this.line = 1;\n\n    this.render_options = {\n      harsh: false,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n      vibrato_width: 0,\n    };\n  }\n\n  /** Set line position of the vibrato bracket. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Set harsh vibrato bracket. */\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  /** Draw the vibrato bracket on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    const y: number =\n      (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n      (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n      0;\n    // If start note is not set then vibrato will be drawn\n    // from the beginning of the stave\n    const start_x: number =\n      (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n    // If stop note is not set then vibrato will be drawn\n    // until the end of the stave\n    const stop_x: number =\n      (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n      (this.start && this.start.checkStave().getTieEndX() - 10) ||\n      0;\n\n    this.render_options.vibrato_width = stop_x - start_x;\n\n    L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n\n    Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n\nimport { RuntimeError } from './util';\nimport { StemmableNote } from './stemmablenote';\nimport { Stave } from './stave';\nimport { NoteStruct } from './note';\nimport { ModifierContext } from './modifiercontext';\n\nexport class GhostNote extends StemmableNote {\n  /** @constructor */\n  constructor(parameter: string | NoteStruct) {\n    // Sanity check\n    if (!parameter) {\n      throw new RuntimeError('BadArguments', 'Ghost note must have valid initialization data to identify duration.');\n    }\n\n    let note_struct;\n\n    // Preserve backwards-compatibility\n    if (typeof parameter === 'string') {\n      note_struct = { duration: parameter };\n    } else if (typeof parameter === 'object') {\n      note_struct = parameter;\n    } else {\n      throw new RuntimeError(\n        'BadArguments',\n        'Ghost note must have valid initialization data to identify ' + 'duration.'\n      );\n    }\n\n    super(note_struct);\n    this.setAttribute('type', 'GhostNote');\n\n    // Note properties\n    this.setWidth(0);\n  }\n\n  /**\n   * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n   */\n  isRest(): boolean {\n    return true;\n  }\n\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    return this;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    // Draw the modifiers\n    this.setRendered();\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Stave, StaveOptions } from './stave';\n\nexport class TabStave extends Stave {\n  constructor(x: number, y: number, width: number, options?: Partial<StaveOptions>) {\n    const tab_options = {\n      ...{\n        spacing_between_lines_px: 13,\n        num_lines: 6,\n        top_text_position: 1,\n      },\n      ...options,\n    };\n\n    super(x, y, width, tab_options);\n    this.setAttribute('type', 'TabStave');\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(2.5);\n  }\n\n  // Deprecated\n  addTabGlyph(): this {\n    this.addClef('tab');\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\n\nimport { RuntimeError, log } from './util';\nimport { Accidental } from './accidental';\nimport { Articulation } from './articulation';\nimport { Annotation } from './annotation';\nimport { ChordSymbol } from './chordsymbol';\n// import { WidthFormatter } from './widthformatter';\nimport { Formatter, FormatterOptions } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { StringNumber } from './stringnumber';\nimport { TextDynamics } from './textdynamics';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest, MultimeasureRestRenderOptions } from './multimeasurerest';\nimport { Renderer } from './renderer';\nimport { Stave, StaveOptions } from './stave';\nimport { StaveTie } from './stavetie';\nimport { StaveLine } from './staveline';\nimport { StaveNote, StaveNoteStruct } from './stavenote';\nimport { GlyphNote, GlyphNoteOptions } from './glyphnote';\nimport { RepeatNote } from './repeatnote';\nimport { StaveConnector } from './staveconnector';\nimport { System, SystemOptions } from './system';\nimport { TickContext } from './tickcontext';\nimport { Tuplet, TupletOptions } from './tuplet';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { Curve, CurveOptions } from './curve';\nimport { GraceNote, GraceNoteStruct } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { EasyScore, EasyScoreOptions } from './easyscore';\nimport { TimeSigNote } from './timesignote';\nimport { KeySigNote } from './keysignote';\nimport { ClefNote } from './clefnote';\nimport { PedalMarking } from './pedalmarking';\nimport { TextBracket } from './textbracket';\nimport { VibratoBracket } from './vibratobracket';\nimport { GhostNote } from './ghostnote';\nimport { BarNote } from './barnote';\nimport { TabNote, TabNoteStruct } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextNote, TextNoteStruct } from './textnote';\nimport { TextFont, TextFontRegistry } from './textfont';\nimport { FontInfo, RenderContext } from './types/common';\nimport { Note, NoteStruct } from './note';\nimport { Glyph } from './glyph';\nimport { BarlineType } from './stavebarline';\nimport { StemmableNote } from './stemmablenote';\nimport { Element } from './element';\n\nexport interface FactoryOptions {\n  stave: {\n    space: number;\n  };\n  renderer: {\n    elementId: string | null;\n    backend?: number;\n    width: number;\n    height: number;\n    background?: string;\n  };\n  font: {\n    family: string;\n    size: number;\n    weight: string;\n  };\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Factory.DEBUG) log('Vex.Flow.Factory', args);\n}\n\n/**\n * Factory implements a high level API around VexFlow. It will eventually\n * become the canonical way to use VexFlow.\n *\n * *This API is currently DRAFT*\n */\nexport class Factory {\n  /** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  protected options: FactoryOptions;\n\n  protected stave?: Stave;\n  protected context!: RenderContext;\n  protected staves!: Stave[];\n  protected voices!: Voice[];\n  protected renderQ!: Element[];\n  protected systems!: System[];\n\n  /**\n   * Constructor.\n   *\n   * Example:\n   *\n   * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n   *\n   * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n   */\n  constructor(options: Partial<FactoryOptions> = {}) {\n    L('New factory: ', options);\n    const defaults: FactoryOptions = {\n      stave: {\n        space: 10,\n      },\n      renderer: {\n        elementId: '',\n        backend: Renderer.Backends.SVG,\n        width: 500,\n        height: 200,\n        background: '#FFF',\n      },\n      font: {\n        family: 'Arial',\n        size: 10,\n        weight: '',\n      },\n    };\n\n    this.options = defaults;\n    this.setOptions(options);\n  }\n\n  /**\n   * Static simplified function to access constructor without providing FactoryOptions\n   *\n   * Example:\n   *\n   * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n   *\n   * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\n   */\n  static newFromElementId(elementId: string | null, width = 500, height = 200): Factory {\n    return new Factory({ renderer: { elementId, width, height, backend: Renderer.Backends.SVG } });\n  }\n\n  reset(): void {\n    this.renderQ = [];\n    this.systems = [];\n    this.staves = [];\n    this.voices = [];\n    this.stave = undefined; // current stave\n  }\n\n  getOptions(): FactoryOptions {\n    return this.options;\n  }\n\n  setOptions(options: Partial<FactoryOptions> = {}): void {\n    if (options.stave) this.options.stave = options.stave;\n    if (options.renderer) this.options.renderer = options.renderer;\n    if (options.font) this.options.font = options.font;\n    if (this.options.renderer.elementId !== null) {\n      this.initRenderer();\n    }\n    this.reset();\n  }\n\n  initRenderer(): void {\n    if (!this.options.renderer) throw new RuntimeError('NoRenderer');\n    const { elementId, backend, width, height, background } = this.options.renderer;\n    if (elementId === '') {\n      L(this);\n      throw new RuntimeError('HTML DOM element not set in Factory');\n    }\n\n    this.context = Renderer.buildContext(\n      elementId as string,\n      backend ?? Renderer.Backends.SVG,\n      width,\n      height,\n      background\n    );\n  }\n\n  getContext(): RenderContext {\n    return this.context;\n  }\n\n  setContext(context: RenderContext): this {\n    this.context = context;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  getVoices(): Voice[] {\n    return this.voices;\n  }\n\n  /** Return pixels from current stave spacing. */\n  space(spacing: number): number {\n    if (!this.options.stave) throw new RuntimeError('NoStave');\n    return this.options.stave.space * spacing;\n  }\n\n  Stave(paramsP: { x?: number; y?: number; width?: number; options?: Partial<StaveOptions> } = {}): Stave {\n    if (!this.options.renderer) throw new RuntimeError('NoRenderer');\n    if (!this.options.stave) throw new RuntimeError('NoStave');\n    const params = {\n      ...{\n        x: 0,\n        y: 0,\n        width: this.options.renderer.width - this.space(1),\n        options: {\n          spacing_between_lines_px: this.options.stave.space,\n        },\n      },\n      ...paramsP,\n    };\n\n    const stave: Stave = new Stave(params.x, params.y, params.width, params.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  TabStave(paramsP: { x?: number; y?: number; width?: number; options?: Partial<StaveOptions> } = {}): TabStave {\n    if (!this.options.renderer) throw new RuntimeError('NoRenderer');\n    if (!this.options.stave) throw new RuntimeError('NoStave');\n    const params = {\n      ...{\n        x: 0,\n        y: 0,\n        width: this.options.renderer.width - this.space(1),\n        options: {\n          spacing_between_lines_px: this.options.stave.space * 1.3,\n        },\n      },\n      ...paramsP,\n    };\n\n    const stave = new TabStave(params.x, params.y, params.width, params.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  StaveNote(noteStruct: StaveNoteStruct): StaveNote {\n    const note = new StaveNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GlyphNote(glyph: Glyph, noteStruct: NoteStruct, options: GlyphNoteOptions): GlyphNote {\n    const note = new GlyphNote(glyph, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  RepeatNote(type: string, noteStruct: NoteStruct, options: GlyphNoteOptions): RepeatNote {\n    const note = new RepeatNote(type, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GhostNote(noteStruct: string | NoteStruct): GhostNote {\n    const ghostNote = new GhostNote(noteStruct);\n    if (this.stave) ghostNote.setStave(this.stave);\n    ghostNote.setContext(this.context);\n    this.renderQ.push(ghostNote);\n    return ghostNote;\n  }\n\n  TextNote(textNoteStruct: TextNoteStruct): TextNote {\n    const textNote = new TextNote(textNoteStruct);\n    if (this.stave) textNote.setStave(this.stave);\n    textNote.setContext(this.context);\n    this.renderQ.push(textNote);\n    return textNote;\n  }\n\n  BarNote(params: { type?: BarlineType } = {}): BarNote {\n    const barNote = new BarNote(params.type);\n    if (this.stave) barNote.setStave(this.stave);\n    barNote.setContext(this.context);\n    this.renderQ.push(barNote);\n    return barNote;\n  }\n\n  ClefNote(paramsP: { type?: string; options?: { size?: string; annotation?: string } } = {}): ClefNote {\n    const params = {\n      ...{\n        type: 'treble',\n        options: {\n          size: 'default',\n          annotation: undefined,\n        },\n      },\n      ...paramsP,\n    };\n\n    const clefNote = new ClefNote(params.type, params.options.size, params.options.annotation);\n    if (this.stave) clefNote.setStave(this.stave);\n    clefNote.setContext(this.context);\n    this.renderQ.push(clefNote);\n    return clefNote;\n  }\n\n  TimeSigNote(paramsP: { time?: string } = {}): TimeSigNote {\n    const params = {\n      ...{\n        time: '4/4',\n      },\n      ...paramsP,\n    };\n\n    const timeSigNote = new TimeSigNote(params.time);\n    if (this.stave) timeSigNote.setStave(this.stave);\n    timeSigNote.setContext(this.context);\n    this.renderQ.push(timeSigNote);\n    return timeSigNote;\n  }\n\n  KeySigNote(params: { key: string; cancelKey: string; alterKey: string }): KeySigNote {\n    const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n    if (this.stave) keySigNote.setStave(this.stave);\n    keySigNote.setContext(this.context);\n    this.renderQ.push(keySigNote);\n    return keySigNote;\n  }\n\n  TabNote(noteStruct: TabNoteStruct): TabNote {\n    const note = new TabNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GraceNote(noteStruct: GraceNoteStruct): GraceNote {\n    const note = new GraceNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    return note;\n  }\n\n  GraceNoteGroup(params: { notes: StemmableNote[]; slur?: boolean }): GraceNoteGroup {\n    const group = new GraceNoteGroup(params.notes, params.slur);\n    group.setContext(this.context);\n    return group;\n  }\n\n  Accidental(params: { type: string }): Accidental {\n    const accid = new Accidental(params.type);\n    accid.setContext(this.context);\n    return accid;\n  }\n\n  Annotation(\n    paramsP: {\n      text?: string;\n      vJustify?: string;\n      hJustify?: string;\n      fontFamily?: string;\n      fontSize?: number;\n      fontWeight?: string;\n    } = {}\n  ): Annotation {\n    const params = {\n      ...{\n        text: 'p',\n        vJustify: 'below',\n        hJustify: 'center',\n        fontFamily: 'Times',\n        fontSize: 14,\n        fontWeight: 'bold italic',\n        options: {},\n      },\n      ...paramsP,\n    };\n\n    const annotation = new Annotation(params.text);\n    annotation.setJustification(params.hJustify);\n    annotation.setVerticalJustification(params.vJustify);\n    annotation.setFont(params.fontFamily, params.fontSize, params.fontWeight);\n    annotation.setContext(this.context);\n    return annotation;\n  }\n\n  ChordSymbol(\n    paramsP: {\n      vJustify?: string;\n      hJustify?: string;\n      kerning?: boolean;\n      reportWidth?: boolean;\n      fontFamily?: string;\n      fontSize?: number;\n      fontWeight?: string;\n    } = {}\n  ): ChordSymbol {\n    const params = {\n      ...{\n        vJustify: 'top',\n        hJustify: 'center',\n        kerning: true,\n        reportWidth: true,\n      },\n      ...paramsP,\n    };\n\n    const chordSymbol = new ChordSymbol();\n    chordSymbol.setHorizontal(params.hJustify);\n    chordSymbol.setVertical(params.vJustify);\n    chordSymbol.setEnableKerning(params.kerning);\n    chordSymbol.setReportWidth(params.reportWidth);\n    // There is a default font based on the engraving font.  Only set then\n    // font if it is specific, else use the default\n    if (typeof params.fontFamily === 'string' && typeof params.fontSize === 'number') {\n      if (typeof params.fontWeight === 'string')\n        chordSymbol.setFont(params.fontFamily, params.fontSize, params.fontWeight);\n      else chordSymbol.setFont(params.fontFamily, params.fontSize, '');\n    } else if (typeof params.fontSize === 'number') {\n      chordSymbol.setFontSize(params.fontSize);\n    }\n    chordSymbol.setContext(this.context);\n    return chordSymbol;\n  }\n\n  Articulation(paramsP: { type?: string; position?: string | number } = {}): Articulation {\n    const params = {\n      ...{\n        type: 'a.',\n        position: 'above',\n      },\n      ...paramsP,\n    };\n\n    const articulation = new Articulation(params.type);\n    articulation.setPosition(params.position);\n    articulation.setContext(this.context);\n    return articulation;\n  }\n\n  TextDynamics(paramsP: { text?: string; duration?: string; dots?: number; line?: number } = {}): TextDynamics {\n    const params = {\n      ...{\n        text: 'p',\n        duration: 'q',\n        dots: 0,\n        line: 0,\n      },\n      ...paramsP,\n    };\n\n    const text = new TextDynamics({\n      text: params.text,\n      line: params.line,\n      duration: params.duration,\n      dots: params.dots,\n    });\n\n    if (this.stave) text.setStave(this.stave);\n    text.setContext(this.context);\n    this.renderQ.push(text);\n    return text;\n  }\n\n  Fingering(paramsP: { number: string; position?: string }): FretHandFinger {\n    const params = {\n      ...{\n        number: '0',\n        position: 'left',\n      },\n      ...paramsP,\n    };\n\n    const fingering = new FretHandFinger(params.number);\n    fingering.setPosition(params.position);\n    fingering.setContext(this.context);\n    return fingering;\n  }\n\n  StringNumber(params: { number: string; position: string }): StringNumber {\n    const stringNumber = new StringNumber(params.number);\n    stringNumber.setPosition(params.position);\n    stringNumber.setContext(this.context);\n    return stringNumber;\n  }\n\n  TickContext(): TickContext {\n    return new TickContext().setContext(this.context);\n  }\n\n  ModifierContext(): ModifierContext {\n    return new ModifierContext();\n  }\n\n  MultiMeasureRest(params: Partial<MultimeasureRestRenderOptions>): MultiMeasureRest {\n    if (params.number_of_measures === undefined) throw new RuntimeError('NoNumberOfMeasures');\n    const multimeasurerest = new MultiMeasureRest(params.number_of_measures, params);\n    multimeasurerest.setContext(this.context);\n    this.renderQ.push(multimeasurerest);\n    return multimeasurerest;\n  }\n\n  Voice(paramsP: { time?: string; options?: { softmaxFactor: number } } = {}): Voice {\n    const params = {\n      ...{\n        time: '4/4',\n      },\n      ...paramsP,\n    };\n    const voice = new Voice(params.time, params.options);\n    this.voices.push(voice);\n    return voice;\n  }\n\n  StaveConnector(params: { top_stave: Stave; bottom_stave: Stave; type: string }): StaveConnector {\n    const connector = new StaveConnector(params.top_stave, params.bottom_stave);\n    connector.setType(params.type).setContext(this.context);\n    this.renderQ.push(connector);\n    return connector;\n  }\n\n  Formatter(options: Partial<FormatterOptions> = {}): Formatter {\n    return new Formatter(options);\n  }\n\n  Tuplet(paramsP: { notes?: Note[]; options?: TupletOptions } = {}): Tuplet {\n    const params = {\n      ...{\n        notes: [],\n        options: {},\n      },\n      ...paramsP,\n    };\n\n    const tuplet = new Tuplet(params.notes, params.options).setContext(this.context);\n    this.renderQ.push(tuplet);\n    return tuplet;\n  }\n\n  Beam(params: { notes: StemmableNote[]; options?: { autoStem?: boolean; secondaryBeamBreaks?: number[] } }): Beam {\n    const beam = new Beam(params.notes, params.options?.autoStem).setContext(this.context);\n    beam.breakSecondaryAt(params.options?.secondaryBeamBreaks ?? []);\n    this.renderQ.push(beam);\n    return beam;\n  }\n\n  Curve(params: { from: Note; to: Note; options: Partial<CurveOptions> }): Curve {\n    const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n    this.renderQ.push(curve);\n    return curve;\n  }\n\n  StaveTie(params: {\n    from: Note;\n    to: Note;\n    first_indices?: number[];\n    last_indices?: number[];\n    text?: string;\n    options?: { direction?: number };\n  }): StaveTie {\n    const tie = new StaveTie(\n      {\n        first_note: params.from,\n        last_note: params.to,\n        first_indices: params.first_indices,\n        last_indices: params.last_indices,\n      },\n      params.text\n    );\n\n    if (params.options?.direction) tie.setDirection(params.options.direction);\n    tie.setContext(this.context);\n    this.renderQ.push(tie);\n    return tie;\n  }\n\n  StaveLine(params: {\n    from: StaveNote;\n    to: StaveNote;\n    first_indices: number[];\n    last_indices: number[];\n    options?: { text?: string; font?: FontInfo };\n  }): StaveLine {\n    const line = new StaveLine({\n      first_note: params.from,\n      last_note: params.to,\n      first_indices: params.first_indices,\n      last_indices: params.last_indices,\n    });\n\n    if (params.options?.text) line.setText(params.options.text);\n    if (params.options?.font) line.setFont(params.options.font);\n\n    line.setContext(this.context);\n    this.renderQ.push(line);\n    return line;\n  }\n\n  VibratoBracket(params: {\n    from: Note;\n    to: Note;\n    options: {\n      harsh?: boolean;\n      line?: number;\n    };\n  }): VibratoBracket {\n    const vibratoBracket = new VibratoBracket({\n      start: params.from,\n      stop: params.to,\n    });\n\n    if (params.options.line) vibratoBracket.setLine(params.options.line);\n    if (params.options.harsh) vibratoBracket.setHarsh(params.options.harsh);\n\n    vibratoBracket.setContext(this.context);\n    this.renderQ.push(vibratoBracket);\n\n    return vibratoBracket;\n  }\n\n  TextBracket(params: {\n    from: Note;\n    to: Note;\n    text: string;\n    options: {\n      superscript: string;\n      position: string;\n      line?: number;\n      font?: Partial<FontInfo>;\n    };\n  }): TextBracket {\n    const textBracket = new TextBracket({\n      start: params.from,\n      stop: params.to,\n      text: params.text,\n      superscript: params.options.superscript,\n      position: params.options.position,\n    });\n\n    if (params.options.line) textBracket.setLine(params.options.line);\n    if (params.options.font) textBracket.setFont(params.options.font);\n\n    textBracket.setContext(this.context);\n    this.renderQ.push(textBracket);\n    return textBracket;\n  }\n\n  System(params: Partial<SystemOptions> = {}): System {\n    params.factory = this;\n    const system = new System(params).setContext(this.context);\n    this.systems.push(system);\n    return system;\n  }\n\n  /**\n   * Creates EasyScore. Normally the first step after constructing a Factory.\n   *\n   * Example:\n   *\n   * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n   *\n   * `const score: EasyScore = vf.EasyScore();`\n   * @param options.factory optional instance of Factory\n   * @param options.builder instance of Builder\n   * @param options.commitHooks function to call after a note element is created\n   * @param options.throwOnError throw error in case of parsing error\n   */\n  EasyScore(options: Partial<EasyScoreOptions> = {}): EasyScore {\n    options.factory = this;\n    return new EasyScore(options);\n  }\n\n  PedalMarking(paramsP: { notes?: StaveNote[]; options?: { style: string } } = {}): PedalMarking {\n    const params = {\n      ...{\n        notes: [],\n        options: {\n          style: 'mixed',\n        },\n      },\n      ...paramsP,\n    };\n\n    const pedal = new PedalMarking(params.notes);\n    pedal.setType(PedalMarking.typeString[params.options.style]);\n    pedal.setContext(this.context);\n    this.renderQ.push(pedal);\n    return pedal;\n  }\n\n  NoteSubGroup(paramsP: { notes?: Note[] } = {}): NoteSubGroup {\n    const params = {\n      ...{\n        notes: [],\n      },\n      ...paramsP,\n    };\n\n    const group = new NoteSubGroup(params.notes);\n    group.setContext(this.context);\n    return group;\n  }\n\n  TextFont(params: TextFontRegistry): TextFont {\n    params.factory = this;\n    const textFont = new TextFont(params);\n    return textFont;\n  }\n\n  /** Render the score. */\n  draw(): void {\n    this.systems.forEach((i) => i.setContext(this.context).format());\n    this.staves.forEach((i) => i.setContext(this.context).draw());\n    this.voices.forEach((i) => i.setContext(this.context).draw());\n    this.renderQ.forEach((i) => {\n      if (!i.isRendered()) i.setContext(this.context).draw();\n    });\n    this.systems.forEach((i) => i.setContext(this.context).draw());\n    this.reset();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\n\nimport { TabNote, TabNoteStruct } from './tabnote';\n\nexport class GraceTabNote extends TabNote {\n  static get CATEGORY(): string {\n    return 'gracetabnotes';\n  }\n\n  constructor(note_struct: TabNoteStruct) {\n    super(note_struct, false);\n    this.setAttribute('type', 'GraceTabNote');\n\n    this.render_options = {\n      ...this.render_options,\n      ...{\n        // vertical shift from stave line\n        y_shift: 0.3,\n        // grace glyph scale\n        scale: 0.6,\n        // grace tablature font\n        font: '7.5pt Arial',\n      },\n    };\n\n    this.updateWidth();\n  }\n\n  getCategory(): string {\n    return GraceTabNote.CATEGORY;\n  }\n\n  draw(): void {\n    super.draw();\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Author: Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { RenderContext } from './types/common';\n\nexport interface StaveHairpinRenderOptions {\n  right_shift_ticks: number;\n  left_shift_ticks: number;\n  left_shift_px: number;\n  right_shift_px: number;\n  height: number;\n  y_shift: number;\n}\n\nexport class StaveHairpin extends Element {\n  protected hairpin: number;\n\n  protected position: number;\n  protected render_options: StaveHairpinRenderOptions;\n\n  // notes is initialized by the constructor via this.setNotes(notes).\n  protected notes!: Record<string, Note>;\n\n  protected first_note?: Note;\n  protected last_note?: Note;\n\n  static readonly type = {\n    CRESC: 1,\n    DECRESC: 2,\n  };\n\n  /* Helper function to convert ticks into pixels.\n   * Requires a Formatter with voices joined and formatted (to\n   * get pixels per tick)\n   *\n   * options is struct that has:\n   *\n   *  {\n   *   height: px,\n   *   y_shift: px, //vertical offset\n   *   left_shift_ticks: 0, //left horizontal offset expressed in ticks\n   *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n   *  }\n   *\n   **/\n  static FormatByTicksAndDraw(\n    ctx: RenderContext,\n    formatter: {\n      pixelsPerTick: number;\n    },\n    notes: Record<string, Note>,\n    type: number,\n    position: number,\n    options: StaveHairpinRenderOptions\n  ): void {\n    const ppt = formatter.pixelsPerTick;\n\n    if (ppt == null) {\n      throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n    }\n\n    const l_shift_px = ppt * options.left_shift_ticks;\n    const r_shift_px = ppt * options.right_shift_ticks;\n\n    const hairpin_options = {\n      height: options.height,\n      y_shift: options.y_shift,\n      left_shift_px: l_shift_px,\n      right_shift_px: r_shift_px,\n      right_shift_ticks: 0,\n      left_shift_ticks: 0,\n    };\n\n    new StaveHairpin(\n      {\n        first_note: notes.first_note,\n        last_note: notes.last_note,\n      },\n      type\n    )\n      .setContext(ctx)\n      .setRenderOptions(hairpin_options)\n      .setPosition(position)\n      .draw();\n  }\n\n  /**\n   * Create a new hairpin from the specified notes.\n   *\n   * @param {!Object} notes The notes to tie up.\n   * Notes is a struct that has:\n   *\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *  }\n   * @param {!Object} type The type of hairpin\n   */\n  constructor(notes: Record<string, Note>, type: number) {\n    super();\n    this.setAttribute('type', 'StaveHairpin');\n    this.setNotes(notes);\n    this.hairpin = type;\n    this.position = Modifier.Position.BELOW;\n\n    this.render_options = {\n      height: 10,\n      y_shift: 0, // vertical offset\n      left_shift_px: 0, // left horizontal offset\n      right_shift_px: 0, // right horizontal offset\n      right_shift_ticks: 0,\n      left_shift_ticks: 0,\n    };\n  }\n\n  setPosition(position: number): this {\n    if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n      this.position = position;\n    }\n    return this;\n  }\n\n  setRenderOptions(options: StaveHairpinRenderOptions): this {\n    if (\n      options.height != null &&\n      options.y_shift != null &&\n      options.left_shift_px != null &&\n      options.right_shift_px != null\n    ) {\n      this.render_options = options;\n    }\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this hairpin to.\n   *\n   * @param {!Object} notes The start and end notes.\n   */\n  setNotes(notes: Record<string, Note>): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\n    }\n\n    this.notes = notes;\n    this.first_note = notes.first_note;\n    this.last_note = notes.last_note;\n    return this;\n  }\n\n  renderHairpin(params: {\n    first_x: number;\n    last_x: number;\n    first_y: number;\n    last_y: number;\n    staff_height: number;\n  }): void {\n    const ctx = this.checkContext();\n    let dis = this.render_options.y_shift + 20;\n    let y_shift = params.first_y;\n\n    if (this.position === Modifier.Position.ABOVE) {\n      dis = -dis + 30;\n      y_shift = params.first_y - params.staff_height;\n    }\n\n    const l_shift = this.render_options.left_shift_px;\n    const r_shift = this.render_options.right_shift_px;\n\n    ctx.beginPath();\n\n    switch (this.hairpin) {\n      case StaveHairpin.type.CRESC:\n        ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n        break;\n      case StaveHairpin.type.DECRESC:\n        ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  draw(): void {\n    this.checkContext();\n    this.setRendered();\n\n    const firstNote = this.first_note;\n    const lastNote = this.last_note;\n    if (!firstNote || !lastNote) throw new RuntimeError('NoNote', 'Notes required to draw');\n\n    const start = firstNote.getModifierStartXY(this.position, 0);\n    const end = lastNote.getModifierStartXY(this.position, 0);\n\n    this.renderHairpin({\n      first_x: start.x,\n      last_x: end.x,\n      first_y: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n      last_y: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n      staff_height: firstNote.checkStave().getHeight(),\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { TabNote } from './tabnote';\nimport { TabTie } from './tabtie';\nimport { TieNotes } from './types/common';\nimport { RuntimeError } from './util';\n\nexport class TabSlide extends TabTie {\n  static get SLIDE_UP(): number {\n    return 1;\n  }\n\n  static get SLIDE_DOWN(): number {\n    return -1;\n  }\n\n  static createSlideUp(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_UP);\n  }\n\n  static createSlideDown(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n  }\n\n  /**\n   * @param notes is a struct of the form:\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   * @param notes.first_note the starting note of the slide\n   * @param notes.last_note the ending note of the slide\n   * @param notes.first_indices specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n   * @param notes.last_indices currently unused. we assume it's the same as first_indices.\n   *\n   * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n   */\n  constructor(notes: TieNotes, direction?: number) {\n    super(notes, 'sl.');\n    this.setAttribute('type', 'TabSlide');\n\n    // Determine the direction automatically if it is not provided.\n    if (!direction) {\n      let first_fret = (notes.first_note as TabNote).getPositions()[0].fret;\n      if (typeof first_fret === 'string') {\n        first_fret = parseInt(first_fret, 10);\n      }\n      let last_fret = (notes.last_note as TabNote).getPositions()[0].fret;\n      if (typeof last_fret === 'string') {\n        last_fret = parseInt(last_fret, 10);\n      }\n\n      // If either of the frets are 'X', parseInt() above will return NaN.\n      // Choose TabSlide.SLIDE_UP by default.\n      if (isNaN(first_fret) || isNaN(last_fret)) {\n        direction = TabSlide.SLIDE_UP;\n      } else {\n        direction = first_fret > last_fret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n      }\n    }\n\n    this.direction = direction;\n    this.render_options.cp1 = 11;\n    this.render_options.cp2 = 14;\n    this.render_options.y_shift = 0.5;\n\n    this.setFont({ family: 'Times', size: 10, weight: 'bold italic' });\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new RuntimeError('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    const first_x_px = params.first_x_px;\n    const first_ys = params.first_ys;\n    const last_x_px = params.last_x_px;\n\n    const direction = params.direction;\n    if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n      throw new RuntimeError('BadSlide', 'Invalid slide direction');\n    }\n\n    // eslint-disable-next-line\n    const first_indices = this.notes.first_indices!;\n    for (let i = 0; i < first_indices.length; ++i) {\n      const slide_y = first_ys[first_indices[i]] + this.render_options.y_shift;\n\n      if (isNaN(slide_y)) {\n        throw new RuntimeError('BadArguments', 'Bad indices for slide rendering.');\n      }\n\n      ctx.beginPath();\n      ctx.moveTo(first_x_px, slide_y + 3 * direction);\n      ctx.lineTo(last_x_px, slide_y - 3 * direction);\n      ctx.closePath();\n      ctx.stroke();\n    }\n\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n// MIT License\n\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Stem } from './stem';\n\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n  protected readonly code: string;\n  protected readonly num: number;\n\n  /** Tremolos category string. */\n  static get CATEGORY(): string {\n    return 'tremolo';\n  }\n\n  /**\n   * Constructor.\n   * @param num number of bars\n   */\n  constructor(num: number) {\n    super();\n    this.setAttribute('type', 'Tremolo');\n\n    this.num = num;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'tremolo1';\n  }\n\n  /** Get element CATEGORY string. */\n  getCategory(): string {\n    return Tremolo.CATEGORY;\n  }\n\n  /** Draw the tremolo on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const stemDirection = note.getStemDirection();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n    const isGraceNote = note.getCategory() === GraceNote.CATEGORY;\n    const scale = isGraceNote ? GraceNote.SCALE : 1;\n    const category = `tremolo.${isGraceNote ? 'grace' : 'default'}`;\n\n    const y_spacing = this.musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n    const height = this.num * y_spacing;\n    let y = note.getStemExtents().baseY - height;\n\n    if (stemDirection < 0) {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n    } else {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n    }\n\n    const fontScale = this.musicFont.lookupMetric(`${category}.point`);\n\n    x += this.musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(ctx, x, y, fontScale, this.code, { category });\n      y += y_spacing;\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Flow } from './flow';\n\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n  protected tuningValues: number[] = [];\n\n  static get names(): Record<string, string> {\n    return {\n      standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n      dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n      dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n      eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n      standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n    };\n  }\n\n  /**\n   * Constructor.\n   * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n   */\n  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n    // Default to standard tuning.\n    this.setTuning(tuningString);\n  }\n\n  /** Return the note number associated to the note string. */\n  noteToInteger(noteString: string): number {\n    return Flow.keyProperties(noteString).int_value;\n  }\n\n  /**\n   * Set tuning identified by tuning name (eg. 'dagdad')\n   * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n   */\n  setTuning(tuningString: string): void {\n    if (Tuning.names[tuningString]) {\n      tuningString = Tuning.names[tuningString];\n    }\n\n    this.tuningValues = [];\n\n    const keys = tuningString.split(/\\s*,\\s*/);\n    if (keys.length === 0) {\n      throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n    }\n\n    for (let i = 0; i < keys.length; ++i) {\n      this.tuningValues[i] = this.noteToInteger(keys[i]);\n    }\n  }\n\n  /** Return the note number associated with a tablature string. */\n  getValueForString(stringNum: string | number): number {\n    const s = Number(stringNum);\n    if (s < 1 || s > this.tuningValues.length) {\n      throw new RuntimeError(\n        'BadArguments',\n        `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`\n      );\n    }\n\n    return this.tuningValues[s - 1];\n  }\n\n  /** Return the note number associated with a tablature string and fret. */\n  getValueForFret(fretNum: string | number, stringNum: string | number): number {\n    const stringValue = this.getValueForString(stringNum);\n    const f = Number(fretNum);\n\n    if (f < 0) {\n      throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n    }\n\n    return stringValue + f;\n  }\n\n  /** Return the note string associated with tablature string and fret. */\n  getNoteForFret(fretNum: string | number, stringNum: string | number): string {\n    const noteValue = this.getValueForFret(fretNum, stringNum);\n\n    const octave = Math.floor(noteValue / 12);\n    const value = noteValue % 12;\n\n    return `${Flow.integerToNote(value)}/${octave}`;\n  }\n}\n","import { Tables } from './tables';\n\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Barline } from './stavebarline';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { ChordSymbol } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, Fonts } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Modifier } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Repetition } from './staverepetition';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { System } from './system';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextFont } from './textfont';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nimport { Volta } from './stavevolta';\n\nexport const Flow = {\n  ...Tables,\n\n  Accidental,\n  Annotation,\n  Articulation,\n  Barline,\n  BarNote,\n  Beam,\n  Bend,\n  BoundingBox,\n  BoundingBoxComputation,\n  ChordSymbol,\n  Clef,\n  ClefNote,\n  Crescendo,\n  Curve,\n  Dot,\n  EasyScore,\n  Element,\n  Factory,\n  Font,\n  Fonts,\n  Formatter,\n  Fraction,\n  FretHandFinger,\n  GhostNote,\n  Glyph,\n  GlyphNote,\n  GraceNote,\n  GraceNoteGroup,\n  GraceTabNote,\n  KeyManager,\n  KeySignature,\n  KeySigNote,\n  Modifier,\n  ModifierContext,\n  MultiMeasureRest,\n  Music,\n  Note,\n  NoteHead,\n  NoteSubGroup,\n  Ornament,\n  Parser,\n  PedalMarking,\n  Registry,\n  Renderer,\n  RepeatNote,\n  Repetition,\n  Stave,\n  StaveConnector,\n  StaveHairpin,\n  StaveLine,\n  StaveModifier,\n  StaveNote,\n  StaveTempo,\n  StaveText,\n  StaveTie,\n  Stem,\n  StringNumber,\n  Stroke,\n  System,\n  TabNote,\n  TabSlide,\n  TabStave,\n  TabTie,\n  TextBracket,\n  TextDynamics,\n  TextFont,\n  TextNote,\n  TickContext,\n  TimeSignature,\n  TimeSigNote,\n  Tremolo,\n  Tuning,\n  Tuplet,\n  Vibrato,\n  VibratoBracket,\n  Voice,\n  Volta,\n\n  // BUILD and VERSION are set by webpack. See: Gruntfile.js.\n  BUILD: '',\n  VERSION: '',\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\n\nimport { RuntimeError } from './util';\nimport { Music, KeyParts } from './music';\n\nexport class KeyManager {\n  protected music: Music;\n  // all attributes below are initialised in setKey which calls reset in the constructor\n  protected keyParts!: KeyParts;\n  protected keyString!: string;\n  protected key!: string;\n  protected scale!: number[];\n  protected scaleMap!: Record<string, string>;\n  protected scaleMapByValue!: Record<number, string>;\n  protected originalScaleMapByValue!: Record<number, string>;\n\n  constructor(key: string) {\n    this.music = new Music();\n    this.setKey(key);\n  }\n\n  setKey(key: string): this {\n    this.key = key;\n    this.reset();\n    return this;\n  }\n\n  getKey(): string {\n    return this.key;\n  }\n\n  reset(): this {\n    this.keyParts = this.music.getKeyParts(this.key);\n\n    this.keyString = this.keyParts.root;\n    if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\n    const is_supported_type = Music.scaleTypes[this.keyParts.type];\n    if (!is_supported_type) {\n      throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n    }\n\n    this.scale = this.music.getScaleTones(\n      this.music.getNoteValue(this.keyString),\n      Music.scaleTypes[this.keyParts.type]\n    );\n\n    this.scaleMap = {};\n    this.scaleMapByValue = {};\n    this.originalScaleMapByValue = {};\n\n    const noteLocation = Music.root_indices[this.keyParts.root];\n\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n\n      const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n      this.scaleMap[rootName] = noteName;\n      this.scaleMapByValue[this.scale[i]] = noteName;\n      this.originalScaleMapByValue[this.scale[i]] = noteName;\n    }\n\n    return this;\n  }\n\n  getAccidental(key: string): {\n    note: string;\n    accidental?: string;\n    change?: boolean;\n  } {\n    const root = this.music.getKeyParts(key).root;\n    const parts = this.music.getNoteParts(this.scaleMap[root]);\n\n    return {\n      note: this.scaleMap[root],\n      accidental: parts.accidental,\n    };\n  }\n\n  selectNote(note: string): {\n    note: string;\n    accidental?: string;\n    change: boolean;\n  } {\n    note = note.toLowerCase();\n    const parts = this.music.getNoteParts(note);\n\n    // First look for matching note in our altered scale\n    const scaleNote = this.scaleMap[parts.root];\n    const modparts = this.music.getNoteParts(scaleNote);\n\n    if (scaleNote === note) {\n      return {\n        note: scaleNote,\n        accidental: parts.accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in our altered scale\n    const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n    if (valueNote != null) {\n      return {\n        note: valueNote,\n        accidental: this.music.getNoteParts(valueNote).accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in the original scale\n    const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n    if (originalValueNote != null) {\n      this.scaleMap[modparts.root] = originalValueNote;\n      delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n      this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n      return {\n        note: originalValueNote,\n        accidental: this.music.getNoteParts(originalValueNote).accidental,\n        change: true,\n      };\n    }\n\n    // Then try to unmodify a currently modified note.\n    if (modparts.root === note) {\n      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n      this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n      this.scaleMap[modparts.root] = modparts.root;\n      return {\n        note: modparts.root,\n        accidental: undefined,\n        change: true,\n      };\n    }\n\n    // Last resort -- shitshoot\n    delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n    this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\n    delete this.scaleMap[modparts.root];\n    this.scaleMap[modparts.root] = note;\n\n    return {\n      note,\n      accidental: parts.accidental,\n      change: true,\n    };\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RenderContext } from './types/common';\n\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n  code: string;\n  constructor(code: string, message: string = '') {\n    super('[RuntimeError] ' + code + ': ' + message);\n    this.code = code;\n  }\n}\n\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined<T>(x?: T, code: string = 'undefined', message: string = ''): T {\n  if (x === undefined) {\n    throw new RuntimeError(code, message);\n  }\n  return x;\n}\n\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block: string, ...args: any[]): void {\n  if (!args) return;\n  const line = Array.prototype.slice.call(args).join(' ');\n  window.console.log(block + ': ' + line);\n}\n\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args: any[]): void {\n  const line = args.join(' ');\n  const err = new Error();\n  window.console.log('Warning: ', line, err.stack);\n}\n\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x: number, n: number): number {\n  return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a: number, b: number): number {\n  let mid_line = b + (a - b) / 2;\n  if (mid_line % 2 > 0) {\n    mid_line = roundN(mid_line * 10, 5) / 10;\n  }\n  return mid_line;\n}\n\n/**\n * Draw a tiny dot marker on the specified canvas. A great debugging aid.\n * @param ctx canvas context\n * @param x dot x coordinate\n * @param y dot y coordinate\n */\nexport function drawDot(ctx: RenderContext, x: number, y: number, color = '#55'): void {\n  ctx.save();\n  ctx.setFillStyle(color);\n\n  // draw a circle\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n}\n\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text: string): string {\n  return `vf-${text}`;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"vexflow-font-\" + {\"81\":\"leland\",\"289\":\"custom\",\"347\":\"bravura\",\"571\":\"gonville\",\"623\":\"petaluma\"}[chunkId] + \"-min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this[\"webpackChunkVex\"] = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this[\"webpackChunkVex\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","import{Flow}from'flow';Flow.VERSION=\"3.0.9\";Flow.BUILD=\"3c0b744d22fb5604b3c4475341ff14354d50453a\";","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n\nimport { log, RuntimeError } from './util';\nimport { Flow } from './flow';\n\nexport const Vex = {\n  Flow: Flow,\n\n  forEach:\n    // eslint-disable-next-line\n  (a: any[], fn: any) => {\n      for (let i = 0; i < a.length; i++) {\n        fn(a[i], i);\n      }\n    },\n\n  // Take `arr` and return a new list consisting of the sorted, unique,\n  // contents of arr. Does not modify `arr`.\n  SortAndUnique:\n    // eslint-disable-next-line\n    (arr: any[], cmp: any, eq: any) => {\n      if (arr.length > 1) {\n        const newArr = [];\n        let last;\n        arr.sort(cmp);\n\n        for (let i = 0; i < arr.length; ++i) {\n          if (i === 0 || !eq(arr[i], last)) {\n            newArr.push(arr[i]);\n          }\n          last = arr[i];\n        }\n\n        return newArr;\n      } else {\n        return arr;\n      }\n    },\n\n  // Check if array `a` contains `obj`.\n  Contains:\n    // eslint-disable-next-line\n    (a: any[], obj: any) => {\n      let i = a.length;\n      while (i--) {\n        if (a[i] === obj) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n  // Get the 2D Canvas context from DOM element `canvas_sel`.\n  getCanvasContext: (canvas_sel: string): RenderingContext => {\n    if (!canvas_sel) {\n      throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n    }\n\n    const canvas = document.getElementById(canvas_sel) as HTMLCanvasElement;\n    if (!(canvas && canvas.getContext)) {\n      throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n    }\n\n    return canvas.getContext('2d') as RenderingContext;\n  },\n\n  // Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\n  BM:\n    // eslint-disable-next-line\n  (s: any, f: any) => {\n      const start_time = new Date().getTime();\n      f();\n      const elapsed = new Date().getTime() - start_time;\n      log(s, elapsed + 'ms');\n    },\n\n  // Get stack trace.\n  StackTrace: (): string | undefined => {\n    const err = new Error();\n    return err.stack;\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\n\nexport default Vex;\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","inProgress","dataWebpackPrefix","Font","constructor","name","metrics","fontData","fontDataMetrics","undefined","_","default","loadBravura","loadCustom","loadGonville","loadPetaluma","loadLeland","getName","getResolution","getFontData","resolution","getMetrics","lookupMetric","key","defaultValue","keyParts","split","currObj","i","length","value","getGlyphs","glyphs","Fonts","Bravura","Gonville","Petaluma","Leland","Custom","Fraction","numerator","denominator","set","a","b","Number","isNaN","t","GCD","args","LCM","shift","LCMM","getCategory","CATEGORY","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","__staticFractionA","copy","__staticFractionB","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","Math","floor","remainder","makeAbs","abs","toString","toSimplifiedString","__staticFractionTmp","toMixedString","s","q","f","parse","str","n","parseInt","Index","id","type","class","Registry","index","defaultRegistry","registry","clear","setIndexValue","elem","updateIndex","oldValue","getElementById","getAttribute","register","setAttribute","onRegister","getElementsByAttribute","attribute","index_attr","index_attr_val","Object","keys","map","k","getElementsByType","getElementsByClass","className","onUpdate","info","includes","Element","attrs","newID","el","classes","rendered","setFontStack","Flow","DEFAULT_FONT_STACK","ID","fontStack","musicFont","getFontStack","setStyle","style","getStyle","applyStyle","context","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","addClass","removeClass","isRendered","setRendered","getAttributes","oldID","getBoundingBox","boundingBox","getContext","setContext","BoundingBoxComputation","x1","NaN","y1","x2","y2","getX1","getY1","width","height","addPoint","x","y","addX","addY","addQuadraticCurve","p0x","p0y","p1x","p1y","p2x","p2y","p01x","denom","it","p01y","addBezierCurve","p3x","p3y","p0","p1","p2","p3","pow","c","b2ac","t1","sqrt","t2","BoundingBox","w","h","that","getX","getY","getW","getH","setX","setY","setW","setH","move","mergeWith","ctx","new_x","new_y","new_w","max","new_h","rect","stroke","GlyphCacheEntry","code","category","point","Glyph","loadMetrics","bbox","getOutlineBoundingBox","outline","scale","x_shift","y_shift","lookupFontMetric","font","GlyphOutline","originX","originY","done","next","nextX","nextY","result","parts","push","options","super","topGlyphs","botGlyphs","originShift","setOptions","reset","glyph","lookupGlyph","o","x_min","x_max","ha","cached_outline","x_pos","y_pos","params","data","cache","lookup","renderOutline","go","beginPath","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","fill","bboxComp","penX","penY","getCode","setPoint","setStave","stave","setXShift","setYShift","checkMetrics","metricsScale","setOriginX","xShift","setOriginY","yShift","setOrigin","render","xPos","yPos","checkStave","renderToStave","getYForGlyphs","Map","entries","get","entry","customNoteHeads","D0","D1","D2","D3","T0","T1","T2","T3","X0","X1","X2","X3","S1","S2","R1","R2","RESOLUTION","durations","accidentals","parenRightPaddingAdjustment","bb","db","bs","bss","bbs","ashs","afhf","accSagittal5v7KleismaUp","accSagittal5v7KleismaDown","accSagittal5CommaUp","accSagittal5CommaDown","accSagittal7CommaUp","accSagittal7CommaDown","accSagittal25SmallDiesisUp","accSagittal25SmallDiesisDown","accSagittal35MediumDiesisUp","accSagittal35MediumDiesisDown","accSagittal11MediumDiesisUp","accSagittal11MediumDiesisDown","accSagittal11LargeDiesisUp","accSagittal11LargeDiesisDown","accSagittal35LargeDiesisUp","accSagittal35LargeDiesisDown","accSagittalSharp25SDown","accSagittalFlat25SUp","accSagittalSharp7CDown","accSagittalFlat7CUp","accSagittalSharp5CDown","accSagittalFlat5CUp","accSagittalSharp5v7kDown","accSagittalFlat5v7kUp","accSagittalSharp","accSagittalFlat","accSagittalSharp5v7kUp","accSagittalFlat5v7kDown","accSagittalSharp5CUp","accSagittalFlat5CDown","accSagittalSharp7CUp","accSagittalFlat7CDown","accSagittalSharp25SUp","accSagittalFlat25SDown","accSagittalSharp35MUp","accSagittalFlat35MDown","accSagittalSharp11MUp","accSagittalFlat11MDown","accSagittalSharp11LUp","accSagittalFlat11LDown","accSagittalSharp35LUp","accSagittalFlat35LDown","accSagittalDoubleSharp25SDown","accSagittalDoubleFlat25SUp","accSagittalDoubleSharp7CDown","accSagittalDoubleFlat7CUp","accSagittalDoubleSharp5CDown","accSagittalDoubleFlat5CUp","accSagittalDoubleSharp5v7kDown","accSagittalDoubleFlat5v7kUp","accSagittalDoubleSharp","accSagittalDoubleFlat","accSagittal7v11KleismaUp","accSagittal7v11KleismaDown","accSagittal17CommaUp","accSagittal17CommaDown","accSagittal55CommaUp","accSagittal55CommaDown","accSagittal7v11CommaUp","accSagittal7v11CommaDown","accSagittal5v11SmallDiesisUp","accSagittal5v11SmallDiesisDown","accSagittalSharp5v11SDown","accSagittalFlat5v11SUp","accSagittalSharp7v11CDown","accSagittalFlat7v11CUp","accSagittalSharp55CDown","accSagittalFlat55CUp","accSagittalSharp17CDown","accSagittalFlat17CUp","accSagittalSharp7v11kDown","accSagittalFlat7v11kUp","accSagittalSharp7v11kUp","accSagittalFlat7v11kDown","accSagittalSharp17CUp","accSagittalFlat17CDown","accSagittalSharp55CUp","accSagittalFlat55CDown","accSagittalSharp7v11CUp","accSagittalFlat7v11CDown","accSagittalSharp5v11SUp","accSagittalFlat5v11SDown","accSagittalDoubleSharp5v11SDown","accSagittalDoubleFlat5v11SUp","accSagittalDoubleSharp7v11CDown","accSagittalDoubleFlat7v11CUp","accSagittalDoubleSharp55CDown","accSagittalDoubleFlat55CUp","accSagittalDoubleSharp17CDown","accSagittalDoubleFlat17CUp","accSagittalDoubleSharp7v11kDown","accSagittalDoubleFlat7v11kUp","accSagittal23CommaUp","accSagittal23CommaDown","accSagittal5v19CommaUp","accSagittal5v19CommaDown","accSagittal5v23SmallDiesisUp","accSagittal5v23SmallDiesisDown","accSagittalSharp5v23SDown","accSagittalFlat5v23SUp","accSagittalSharp5v19CDown","accSagittalFlat5v19CUp","accSagittalSharp23CDown","accSagittalFlat23CUp","accSagittalSharp23CUp","accSagittalFlat23CDown","accSagittalSharp5v19CUp","accSagittalFlat5v19CDown","accSagittalSharp5v23SUp","accSagittalFlat5v23SDown","accSagittalDoubleSharp5v23SDown","accSagittalDoubleFlat5v23SUp","accSagittalDoubleSharp5v19CDown","accSagittalDoubleFlat5v19CUp","accSagittalDoubleSharp23CDown","accSagittalDoubleFlat23CUp","accSagittal19SchismaUp","accSagittal19SchismaDown","accSagittal17KleismaUp","accSagittal17KleismaDown","accSagittal143CommaUp","accSagittal143CommaDown","accSagittal11v49CommaUp","accSagittal11v49CommaDown","accSagittal19CommaUp","accSagittal19CommaDown","accSagittal7v19CommaUp","accSagittal7v19CommaDown","accSagittal49SmallDiesisUp","accSagittal49SmallDiesisDown","accSagittal23SmallDiesisUp","accSagittal23SmallDiesisDown","accSagittal5v13MediumDiesisUp","accSagittal5v13MediumDiesisDown","accSagittal11v19MediumDiesisUp","accSagittal11v19MediumDiesisDown","accSagittal49MediumDiesisUp","accSagittal49MediumDiesisDown","accSagittal5v49MediumDiesisUp","accSagittal5v49MediumDiesisDown","accSagittal49LargeDiesisUp","accSagittal49LargeDiesisDown","accSagittal11v19LargeDiesisUp","accSagittal11v19LargeDiesisDown","accSagittal5v13LargeDiesisUp","accSagittal5v13LargeDiesisDown","accSagittalSharp23SDown","accSagittalFlat23SUp","accSagittalSharp49SDown","accSagittalFlat49SUp","accSagittalSharp7v19CDown","accSagittalFlat7v19CUp","accSagittalSharp19CDown","accSagittalFlat19CUp","accSagittalSharp11v49CDown","accSagittalFlat11v49CUp","accSagittalSharp143CDown","accSagittalFlat143CUp","accSagittalSharp17kDown","accSagittalFlat17kUp","accSagittalSharp19sDown","accSagittalFlat19sUp","accSagittalSharp19sUp","accSagittalFlat19sDown","accSagittalSharp17kUp","accSagittalFlat17kDown","accSagittalSharp143CUp","accSagittalFlat143CDown","accSagittalSharp11v49CUp","accSagittalFlat11v49CDown","accSagittalSharp19CUp","accSagittalFlat19CDown","accSagittalSharp7v19CUp","accSagittalFlat7v19CDown","accSagittalSharp49SUp","accSagittalFlat49SDown","accSagittalSharp23SUp","accSagittalFlat23SDown","accSagittalSharp5v13MUp","accSagittalFlat5v13MDown","accSagittalSharp11v19MUp","accSagittalFlat11v19MDown","accSagittalSharp49MUp","accSagittalFlat49MDown","accSagittalSharp5v49MUp","accSagittalFlat5v49MDown","accSagittalSharp49LUp","accSagittalFlat49LDown","accSagittalSharp11v19LUp","accSagittalFlat11v19LDown","accSagittalSharp5v13LUp","accSagittalFlat5v13LDown","accSagittalDoubleSharp23SDown","accSagittalDoubleFlat23SUp","accSagittalDoubleSharp49SDown","accSagittalDoubleFlat49SUp","accSagittalDoubleSharp7v19CDown","accSagittalDoubleFlat7v19CUp","accSagittalDoubleSharp19CDown","accSagittalDoubleFlat19CUp","accSagittalDoubleSharp11v49CDown","accSagittalDoubleFlat11v49CUp","accSagittalDoubleSharp143CDown","accSagittalDoubleFlat143CUp","accSagittalDoubleSharp17kDown","accSagittalDoubleFlat17kUp","accSagittalDoubleSharp19sDown","accSagittalDoubleFlat19sUp","accSagittalShaftUp","accSagittalShaftDown","accSagittalAcute","accSagittalGrave","accSagittal1MinaUp","accSagittal1MinaDown","accSagittal2MinasUp","accSagittal2MinasDown","accSagittal1TinaUp","accSagittal1TinaDown","accSagittal2TinasUp","accSagittal2TinasDown","accSagittal3TinasUp","accSagittal3TinasDown","accSagittal4TinasUp","accSagittal4TinasDown","accSagittal5TinasUp","accSagittal5TinasDown","accSagittal6TinasUp","accSagittal6TinasDown","accSagittal7TinasUp","accSagittal7TinasDown","accSagittal8TinasUp","accSagittal8TinasDown","accSagittal9TinasUp","accSagittal9TinasDown","accSagittalFractionalTinaUp","accSagittalFractionalTinaDown","accidentalNarrowReversedFlat","accidentalNarrowReversedFlatAndFlat","accidentalWilsonPlus","accidentalWilsonMinus","duration_codes","Tables","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","DEFAULT_NOTATION_FONT_SCALE","DEFAULT_TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","IsKerned","clefProperties","clef","props","treble","line_shift","bass","tenor","alto","soprano","percussion","subbass","french","keyProperties","octave_shift","pieces","toUpperCase","C","int_val","CN","accidental","CB","CBB","D","DN","DB","DBB","E","EN","EB","EBB","F","FN","FB","FBB","G","GN","GB","GBB","A","AN","AB","ABB","B","BN","BB","BBB","R","rest","X","octave","shift_right","line","int_value","extraProps","glyph_name","displaced","integerToNote","integer","noteValue","tabToGlyph","fret","shift_y","glyphMetrics","textWidth","text","getWidth","articulationCodes","artic","between_lines","av","aboveCode","belowCode","ao","ah","am","accidentalMap","accidentalCodes","acc","accidentalColumnsTable","second_on_bottom","spaced_out_tetrachord","spaced_out_pentachord","very_spaced_out_pentachord","spaced_out_hexachord","very_spaced_out_hexachord","ornamentCodes","mordent","mordent_inverted","turn","turn_inverted","tr","upprall","downprall","prallup","pralldown","upmordent","downmordent","lineprall","prallprall","scoop","doit","fall","doitLong","fallLong","bend","plungerClosed","plungerOpen","flip","jazzTurn","smear","keySignature","spec","keySpec","num","Am","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","Em","Bm","notes","acc_list","unicode","sharp","String","fromCharCode","flat","natural","triangle","degrees","circle","sanitizeDuration","duration","alias","durationToFraction","durationToNumber","durationToTicks","ticks","getGlyphProps","common","stem","stem_offset","flag","stem_up_extension","stem_down_extension","tabnote_stem_up_extension","tabnote_stem_down_extension","dot_shiftY","line_above","line_below","code_head","m","r","position","beam_count","code_flag_upstem","code_flag_downstem","glyphTypeProperties","customGlyphTypeProperties","validTypes","TIME4_4","num_beats","beat_value","Music","canonical_notes","e","g","unison","note","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","M","scales","root_index","cn","cb","cbb","dn","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bbb","isValidNoteValue","isValidIntervalValue","interval","diatonic_intervals","getNoteParts","noteString","toLowerCase","match","exec","getKeyParts","keyString","getNoteValue","noteValues","getIntervalValue","intervalString","intervals","getCanonicalNoteName","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","sum","NUM_TONES","getRelativeNoteName","rootValue","multiplier","reverse_interval","relativeNoteName","getScaleTones","tones","nextNote","getIntervalBetween","note1","note2","difference","createScaleMap","keySigParts","scaleName","scaleTypes","keySigString","noteLocation","root_indices","scaleMap","roots","rootName","noteName","ModifierPosition","Modifier","text_line","Position","LEFT","spacingFromNextModifier","center","CENTER","above","ABOVE","below","BELOW","left","right","RIGHT","setWidth","getNote","checkAttachedNote","setNote","getIndex","checkIndex","setIndex","getModifierContext","modifierContext","checkModifierContext","setModifierContext","getPosition","setPosition","PositionString","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","getXShift","alignSubNotesWithNote","subNotes","tickContext","getTickContext","getStave","subNoteXOffset","modLeftPx","modRightPx","forEach","subNote","subTickContext","setXOffset","Stem","stem_up_y_offset","stem_down_y_offset","stem_up_y_base_offset","stem_down_y_base_offset","x_begin","x_end","y_top","y_bottom","stem_extension","stem_direction","hide","isStemlet","stemletHeight","renderHeightAdjustment","setNoteHeadXBounds","setDirection","setExtension","ext","getExtension","setYBounds","getHeight","y_offset","UP","HEIGHT","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","baseY","setVisibility","isVisible","setStemlet","adjustHeightForFlag","adjustHeightForBeam","WIDTH","stem_x","stem_y","y_base_offset","DOWN","DEBUG","L","stemletYOffset","Tuplet","numerator_glyphs","denom_glyphs","num_notes","beats_occupied","beatsOccupiedDeprecationWarning","notes_occupied","bracketed","some","hasBeam","ratioed","setTupletLocation","location","LOCATION_TOP","Formatter","AlignRestsToNotes","resolveGlyphs","attach","setTuplet","detach","resetTuplet","setBracketed","setRatioed","LOCATION_BOTTOM","console","warn","getNotes","getNoteCount","getBeatsOccupied","getNotesOccupied","setBeatsOccupied","beats","setNotesOccupied","unshift","getNestedTupletCount","first_note","maxTupletCount","countTuplets","minTupletCount","getTupletStack","filter","tuplet","tupletCount","getYPosition","nested_tuplet_y_offset","NESTING_OFFSET","getYForLine","top_y","getStemDirection","getStemExtents","bottom_y","last_note","getTieLeftX","getTieRightX","getStemX","addGlyphWidth","reduce","notation_start_x","line_width","fillRect","shiftY","x_offset","colon_x","colon_radius","arc","PI","closePath","Tickable","preFormatted","postFormatted","intrinsicTicks","tickMultiplier","modifiers","tupletStack","align_center","center_x_shift","ignore_ticks","formatterMetrics","freedom","iterations","space","used","mean","deviation","getTicks","shouldIgnoreTicks","setIgnoreTicks","checkTickContext","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterXShift","centerXShift","setCenterAlignment","getVoice","voice","setVoice","getTuplet","noteCount","notesOccupied","indexOf","splice","applyTickMultiplier","pop","addToModifierContext","mc","addMember","setPreFormatted","addModifier","mod","optionalArgs","getModifiers","setTickContext","tc","message","preFormat","postFormat","getIntrinsicTicks","setIntrinsicTicks","getTickMultiplier","setDuration","getAbsoluteX","Note","noteStruct","initStruct","parseNoteStruct","JSON","stringify","keyProps","dots","noteType","customTypes","duration_override","customGlyphs","playNote","leftDisplacedHeadPx","rightDisplacedHeadPx","render_options","annotation_spacing","glyph_font_scale","stroke_px","xStart","xPre1","xAbs","xPost1","notePx","xPost2","xEnd","xFreedomRight","xWidth","setFont","fillText","round","color","yy","spaceDeviation","prefix","durationString","durationProps","parseDuration","currentTicks","getPlayNote","setPlayNote","isRest","addStroke","setYs","getLeftDisplacedHeadPx","getRightDisplacedHeadPx","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","getLineNumber","isTopNote","getLineForRest","getGlyph","getGlyphWidth","getYs","getYForTopText","getDuration","isDotted","hasStem","getNoteType","getBeam","beam","checkBeam","setBeam","modifier","getModifierStartXY","state","left_shift","right_shift","glyphWidth","glyphPx","getNoteStartX","tieStartX","tieEndX","getKeys","getKeyProps","NoteHead","head_options","custom_glyph","stem_up_x_offset","stem_down_x_offset","note_type","StaveNote","STEM_UP","glyph_code","custom_glyph_code","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","fontShift","displacedFontShift","spacing","getSpacingBetweenLines","half_spacing","min_y","getYForNote","head_x","categorySuffix","staveSpace","breve_lines","drawSlashNoteHead","renderGlyph","StemmableNote","note_struct","getStem","checkStem","setStem","buildStem","buildFlag","hasFlag","flagCode","getBaseCustomNoteHeadGlyph","getStemLength","getStemExtension","getBeamCount","getStemMinimumLength","setStemDirection","offsets","offsetYBaseStemUp","offsetYTopStemUp","offsetYBaseStemDown","offsetYTopStemDown","getCenterGlyphX","stem_extension_override","setStemLength","textLine","extents","getYForBottomText","drawStem","stemOptions","shiftRestVertical","dir","delta","isrest","maxLine","minLine","setKeyLine","getKeyLine","ledgerLineStyle","use_default_head_x","note_heads","DEFAULT_LEDGER_LINE_OFFSET","calculateKeyProps","auto_stem","autoStem","formatByY","notesList","minL","stemDirection","stemMax","stemMin","maxL","voice_shift","getVoiceShiftWidth","is_displaced","voices","noteU","noteM","noteL","voiceXShift","stemDelta","lineSpacing","centerRest","hasStave","topNote","bottomNote","topKeys","bottomKeys","HALF_NOTEHEAD_HEIGHT","topNoteBottomY","bottomNoteTopY","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","head","calcNoteDisplacements","lastLine","lineDiff","start","end","step","noteProps","notehead","calculateOptimalStemDirection","sort","minY","maxY","halfLineSpacing","frac","resultLine","thisLine","isChord","getNoteHeadBounds","setNoteDisplaced","getRightShift","restLine","top","bot","forceFlagRight","isInnerNoteIndex","setStemStyle","getStemStyle","setLedgerLineStyle","getLedgerLineStyle","setFlagStyle","flagStyle","getFlagStyle","setKeyStyle","addAccidental","addArticulation","articulation","addAnnotation","annotation","addDot","dot","Dot","setDotShiftY","addDotToAll","getAccidentals","getMembers","getDots","noteHeadPadding","minNoteheadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","yTop","Infinity","yBottom","highestLine","getNumLines","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","displaced_x","non_displaced_x","highest_line","lowest_line","highest_displaced_line","lowest_displaced_line","highest_non_displaced_line","lowest_non_displaced_line","getNoteHeadBeginX","getNoteHeadEndX","drawLedgerLines","doubleWidth","min_x","drawLedgerLine","normal","ledgerWidth","drawModifiers","openGroup","noteheadStyle","closeGroup","hasNoBeam","drawFlag","noteStemHeight","flagX","flagY","pointerBBox","drawNoteHeads","super_stem_extension","mid_line_distance","lines_over_octave_from_mid_line","spacing_between_lines","xBegin","shouldRenderStem","stemX","GraceNote","SCALE","LEDGER_LINE_OFFSET","slash","slur","ret","staveNoteScale","getStaveNoteScale","offsetScale","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","defaultStemExtention","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beam_slope","slope","scaleX","beam_angle","atan","iPointOnBeam","cos","sin","slash_angle","protrusion_stem_dx","protrusion_stem_dy","protrusion_beam_dx","protrusion_beam_dy","stem0X","stemY","getBeamYToDraw","isNote","obj","isCategory","isStaveNote","isTabNote","TabNote","cls","checkAncestors","categoryToMatch","getPrototypeOf","radius","dot_list","max_shift_map","note_id","dot_shift","x_width","last_line","prev_dotted_space","half_shiftY","lineSpace","getOptions","spacing_between_lines_px","tab_struct","draw_stem","ghost","positions","draw_dots","draw_stem_through_stave","updateWidth","setGhost","setRawFont","measureText","getStemY","getPositions","stemDownLine","stemStartLine","flag_x","flag_y","flag_code","drawStemThrough","stem_through","stem_lines","unused_strings","up_stem","down_stem","line_spacing","total_lines","strings","containsLastString","containsFirstString","line_ys","string","isTopBound","isBottomBound","getPartialStemLines","num_lines","strings_used","group","getUnusedStringGroups","bounds","drawPositions","tab_x","clearRect","render_stem","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_BOTH","Beam","memo","break_on_indices","beam_width","max_slope","min_slope","slope_iterations","slope_cost","show_stemlets","stemlet_extension","partial_beam_length","flat_beams","min_flat_beam_offset","time_sig","groups","beatTotal","beatValue","generateBeams","getTickables","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","totalTicks","vf_notes","unbeamable","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","prevNote","breaksOnEachRest","beam_rests","breaksOnFirstOrLastRest","beam_middle_only","breakOnStemChange","maintain_stem_directions","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","beams","secondary_breaks","secondary_break_ticks","flat_beam_offset","beamCount","breakSecondaryAt","indices","getSlopeY","first_x_px","first_y_px","calculateSlope","firstNote","initialSlope","lastNote","firstStemTipY","firstStemX","getStemSlope","increment","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","stemTipY","diff","idealSlope","cost","calculateFlatSlope","total","extremeY","extremeBeamCount","currentExtreme","offset","extremeTest","newOffset","beamY","applyStemExtensions","beamedStemTipY","preBeamExtension","beamExtension","totalBeamWidth","lookupBeamDirection","prev_tick","tick","next_tick","lookup_duration","prev_note_gets_beam","next_note_gets_beam","note_gets_beam","getBeamLines","tick_of_duration","beam_started","beam_lines","current_beam","previous_should_break","tick_tally","should_break","prev_note","next_note","beam_alone","beam_direction","last_beam","drawStems","drawBeamLines","valid_beam_durations","beamThickness","beamLines","j","beam_line","startBeamX","startBeamY","lastBeamX","lastBeamY","VoiceMode","Voice","time","softmaxFactor","resolutionMultiplier","tickables","ticksUsed","smallestTickCount","largestTickWidth","mode","Mode","STRICT","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getMode","setMode","getResolutionMultiplier","getActualResolution","tickable","setStrict","strict","SOFT","isComplete","FULL","setSoftmaxFactor","factor","reCalculateExpTicksUsed","expTicksUsed","softmax","tickValue","v","exp","addTickable","addTickables","drawBoldDoubleLine","topX","botY","StaveConnector","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","top_stave","bottom_stave","thickness","DOUBLE","family","size","weight","texts","setType","typeString","SINGLE_RIGHT","NONE","setText","content","shift_x","THIN_DOUBLE","attachment_height","SINGLE","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","text_width","getBottomLineY","singleRight","singleLeft","single","double","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","none","FretHandFinger","finger","nums","nums_list","shiftLeft","shiftRight","pos","shiftL","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","num_shift","numWidth","fingerings","builder","fingeringString","trim","number","getFactory","Fingering","fingering","setFretHandFinger","getFretHandFinger","setOffsetX","setOffsetY","dot_x","dot_y","NoteSubGroup","formatter","joinVoices","format","getMinTotalWidth","Stroke","all_voices","font_scale","stroke_spacing","strokes","strokeList","strokeShift","addEndNote","note_end","line_space","arrow","arrow_shift_x","arrow_y","text_shift_x","text_y","Type","BRUSH_DOWN","BRUSH_UP","ROLL_DOWN","RASQUEDO_DOWN","ROLL_UP","RASQUEDO_UP","ARPEGGIO_DIRECTIONLESS","strokeLine","CanvasContext","vexFlowCanvasContext","canvas","limit","CANVAS_BROWSER_SIZE_LIMIT","child","setBackgroundFillStyle","background_fillStyle","blur","setLineCap","capType","lineCap","setLineDash","dash","lineDash","resize","cp1x","cp1y","cp2x","cp2y","cpx","cpy","startAngle","endAngle","antiClockwise","glow","attrNamesToIgnoreMap","path","SVGContext","element","fontString","fontSize","ie","svg","create","appendChild","parent","pen","defaultAttributes","attributes","background_attributes","shadow_attributes","state_stack","iePolyfill","svgElementType","document","createElementNS","navigator","test","userAgent","foundBold","foundItalic","replace","fontAttributes","fontArray","prototype","call","join","applyAttributes","visibleWidth","visibleHeight","setViewBox","viewBox_or_minX","viewBoxString","attrNamesToIgnore","nodeName","propertyName","setAttributeNS","lastChild","removeChild","rectangle","normalizeAngle","angle","tmp","arcHelper","largeArcFlag","sweepFlag","sa","num_paths","toFixed","opacity","txt","getBBox","textContent","ieMeasureTextFix","widthCorrection","savedState","Renderer","canvasId","backend","elementId","Backends","CANVAS","canvasElement","bolsterCanvasContext","SVG","background","renderer","lastContext","buildContext","USE_CANVAS_PROXY","methodName","fromX","fromY","toX","toY","dashPattern","dx","dy","atan2","idx","dashLength","nx","ny","SanitizeCanvasDims","devicePixelRatio","LineEndType","StringNumber","string_number","dashed","leg","shift_left","num_shiftR","x_widthL","x_widthR","num_width","setLineEndType","setStringNumber","setLastNote","setDashed","stem_ext","bottom","STEM_DOWN","len","pattern","drawDashedLine","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNoteCategory","Articulation","articulations","getIncrement","top_text_line","maxWidth","articWidth","articNameToCode","staccato","tenuto","accent","articString","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","isOnStemTip","getInitialOffset","padding","stemBaseY","getTopY","INITIAL_OFFSET","getBottomY","offsetDirection","noteLine","articLine","snappedLine","snapLineToStaff","TickContext","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","xOffset","tickablesByVoice","totalLeftPx","totalRightPx","tContexts","tContext","contexts","getTickID","getXBase","setXBase","getXOffset","setPadding","getMaxTicks","getMinTicks","getMaxTickable","getMinTickable","getTickableForVoice","voiceIndex","getTickablesByVoice","getCenterAlignedTickables","getCurrentTick","setCurrentTick","Ornament","delayed","accidentalLowerPadding","accidentalUpperPadding","ornament","adjustForStemDirection","reportedWidth","stemUpYOffset","ornamentAlignWithNoteHead","yOffset","ornamentNoteTransition","ornaments","ornamentRelease","ornamentAttack","ornamentArticulation","jazzOrnaments","setDelayed","setUpperAccidental","accid","accidentalUpper","setLowerAccidental","accidentalLower","stemDir","classString","stemExtents","isPlacedOnNoteheadSide","glyphYBetweenLines","glyphX","glyphY","delayXShift","startX","nextContext","getNextContext","PetalumaScriptTextMetrics","smufl","RobotoSlabTextMetrics","TextFont","fontCacheKey","maxSizeGlyph","getFontDataByName","updateParams","registerFont","updateCacheKey","debug","val","registryInstance","fontFamily","serifs","monospaced","italic","bold","superscriptOffset","subscriptOffset","description","hash","returnedFonts","fontRegistry","attr","fw","fs","textWidthCacheInstance","fd","selectedFont","fallback","candidates","families","famliy","fontWeightToBold","fontStyleToItalic","perfect","find","ok","setFontSize","fontName","overwrite","exists","td","getMetricForCharacter","pointsToPixels","getWidthForCharacter","metric","advanceWidth","getWidthForString","textWidthCache","Justify","VerticalJustify","StaveModifierPosition","BarlineType","Justification","VoltaType","Annotation","justification","vert_justification","TOP","annotations","testWidth","textFont","getTextFontFromVexFontData","numLines","maxHeight","setVerticalJustification","just","VerticalJustifyString","getJustification","setJustification","JustifyString","text_height","has_stem","BOTTOM","stem_base","yt","ChordSymbol","centerStem","CENTER_STEM","symbolBlocks","horizontal","horizontalJustify","vertical","verticalJustify","useKerning","reportWidth","chordSymbolMetrics","global","superSubRatio","noFormat","glyphCode","getYOffsetForText","ix","y_max","engravingFontResolution","getMetricForGlyph","leftSideBearing","kerningOffset","chordSymbol","lowerKerningText","upperKerningText","instances","nonSuperWidth","reportedWidths","instance","fontAdj","glyphAdj","lineSpaces","vAlign","symbol","sup","isSuperscript","sub","isSubscript","subAdj","adj","symbolType","symbolTypes","GLYPH","getYShiftForGlyph","getXShiftForGlyph","getWidthForGlyph","TEXT","over","spacingBetweenBlocks","prev","setEnableKerning","updateKerningAdjustments","updateOverBarAdjustments","getVertical","getReportWidth","setReportWidth","symIx","barIx","findIndex","xoff","yoff","accum","getKerningAdjustment","kernConst","prevSymbol","rv","preKernUpper","preKernLower","xx","symbolModifier","symbolModifiers","SUPERSCRIPT","getSymbolBlock","parameters","glyphArgs","glyphPoints","twidth","LINE","addSymbolBlock","addText","addTextSuperscript","addTextSubscript","SUBSCRIPT","addGlyphSuperscript","addGlyph","addGlyphOrText","addLine","setVertical","verticalJustifyString","setHorizontal","horizontalJustifyString","sp","curY","diminished","dim","halfDiminished","augmented","majorSeventh","leftParen","rightParen","leftBracket","rightBracket","leftParenTall","rightParenTall","Bend","release","phrase","line_style","bend_width","release_width","bends","last_width","getText","measure_text","ctxThat","total_width","additional_width","draw_width","bend_height","annotation_y","renderBend","cp_x","cp_y","renderRelease","renderArrowHead","renderText","render_x","last_bend","last_bend_draw_width","last_drawn_width","Vibrato","harsh","vibrato_width","wave_height","wave_width","wave_girth","setVibratoWidth","vibratos","vibrato","setHarsh","vx","vy","renderVibrato","opts","num_waves","ModifierContext","members","PREFORMAT","Accidental","GraceNoteGroup","POSTFORMAT","member","getLeftShift","getState","formatted","StaveModifier","placeGlyphOnLine","customShift","getPadding","setLayoutMetrics","layoutMetrics","getLayoutMetrics","Clef","types","BEGIN","tab","attachment","KeySignature","cancelKeySpec","alterKeySpec","accList","setKeySig","glyphFontScale","xPositions","paddingForced","convertToGlyph","nextAcc","accGlyphData","extraWidth","accidentalSpacing","xPosition","cancelKey","convertToCancelAccList","cancel_accList","different_types","naturals","cancelled","concat","addToStave","convertAccLines","customLines","alterKey","convertToAlterAccList","firstAccidentalType","cancelAccList","END","getEndClef","getClef","Barline","TYPE","widths","REPEAT_BEGIN","REPEAT_END","REPEAT_BOTH","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","repeatBegin","repeatEnd","repeatBoth","getType","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","double_bar","staveCtx","getTopLineTopY","getBottomLineBottomY","begin","dot_radius","Repetition","symbol_type","setShiftX","setShiftY","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSignoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","draw_coda","text_x","symbol_x","vertical_bar_width","modifierWidth","StaveSection","section","setStaveSection","StaveTempo","tempo","setTempo","bpm","stem_height","TextNote","superscript","subscript","struct","GLYPHS","smooth","segno","mordent_upper","mordent_lower","p","z","coda","pedal_open","pedal_close","caesura_straight","caesura_curved","breath","StaveText","setStaveText","Volta","volta","vert_height","BEGIN_END","TimeSignatureGlyph","timeSignature","topDigits","botDigits","topWidth","topGlyph","botWidth","botGlyph","topStartX","botStartX","start_x","topLine","bottomLine","TimeSignature","timeSpec","customPadding","validate_args","fontLineShift","parseTimeSpec","numbers","assertIsValidFraction","makeTimeSignatureGlyph","getInfo","setTimeSig","Stave","end_x","measure","endClef","glyph_spacing_px","fill_style","left_bar","right_bar","space_above_staff_ln","space_below_staff_ln","top_text_position","bottom_text_position","line_config","defaultLedgerLineStyle","resetLines","addEndModifier","setDefaultLedgerLineStyle","getDefaultLedgerLineStyle","visible","setNoteStartX","begBarline","getNoteEndX","getTieStartX","getTieEndX","setNumLines","setMeasure","getModifierXShift","setRepetitionTypeLeft","setRepetitionTypeRight","setVoltaType","number_t","setSection","headroom","getLineForY","setBegBarType","setEndBarType","setClef","clefSpec","clefs","addClef","setEndClef","setKeySignature","keySignatures","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","sortByCategory","items","order","temp","endBarline","begModifiers","endModifiers","barlines","keysignatures","timesignatures","lastBarlineIdx","drawVertical","isDouble","drawVerticalFixed","top_line","bottom_line","drawVerticalBarFixed","getConfigForLines","setConfigForLine","line_number","setConfigForLines","lines_configuration","createContexts","makeContext","addToContext","tickToContextMap","tickList","integerTicks","newContext","array","list","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","formatterOptions","globalSoftmax","maxIterations","justifyWidth","totalCost","totalShift","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","modifierContexts","contextGaps","gaps","lossHistory","paddingBetween","accumulator","stavePadding","gap","auto_beam","align_rests","applyAndGetBeams","formatToStave","tabstave","tabnotes","autobeam","notevoice","tabvoice","alignAllNotes","alignTuplets","currTickable","prevTickable","preCalculateMinTotalWidth","alignRests","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","sumArray","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","createModifierContexts","contextArray","renderingContext","voicesParam","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","centerX","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","targetWidth","actualWidth","paddingMax","paddingMin","maxX","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","tune","alpha","current","postFormatContexts","optionsParam","defaultPadding","arr","StaveTie","setNotes","cp1","cp2","first_x_shift","last_x_shift","tie_spacing","first_indices","last_indices","isPartial","renderTie","first_ys","last_ys","last_x_px","last_y_px","top_cp_y","bottom_cp_y","center_x","TabTie","grace_notes","show_slur","slur_y_shift","gracenote_groups","group_list","gracenote_group","is_stavenote","formatWidth","group_shift","beamNotes","getGraceNotes","graceNote","TieClass","parenLeftPadding","parenRightPadding","cautionary","noteheadAccidentalPadding","leftShift","additionalPadding","accLine","lineList","previousLine","accShift","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","checkCollision","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","accCount","lastAccOnLine","clearance","clearanceRequired","collision","tickPositions","tickNoteMap","tickPosition","notesAtPosition","music","tickPos","modifiedPitches","processNote","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","fontScale","parenLeft","parenRight","parenWidth","setAsCautionary","accX","accY","BarNote","barline","ClefNote","clef_obj","abs_x","Crescendo","extend_left","extend_right","decrescendo","setHeight","setDecrescendo","decresc","tick_context","next_context","begin_x","half_height","reverse","renderHairpin","CurvePosition","Curve","from","to","NEAR_HEAD","position_end","invert","cps","nearHead","nearTop","NEAR_TOP","renderCurve","first_x","first_y","last_x","last_y","cp_spacing","end_metric","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","RegExp","slice","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","ruleFunc","bind","oneOrMore","zeroOrMore","matches","run","EasyScore","EasyScoreGrammar","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","addNote","standardAccidentals","notePiece","setId","commaSeparatedRegex","setClass","defaults","easyScoreHook","throwOnError","parser","TextDynamics","text_struct","sequence","glyph_font_size","letter","glyph_data","letter_x","current_letter","semibrave_rest","get_semibrave_rest","MultiMeasureRest","number_of_measures","show_number","number_line","number_glyph_point","serif_thickness","use_symbols","semibrave_rest_glyph_scale","xs","getXs","drawLine","sbl","serif","lineThicknessHalf","line_thickness","drawSymbols","n4","n2","n1","semibrave_rest_width","symbol_spacing","yMiddle","padding_left","padding_right","timeSig","drawArrowHead","x0","y0","StaveLine","line_dash","rounded_end","draw_start_arrow","draw_end_arrow","arrowhead_length","arrowhead_angle","text_position_vertical","TextVerticalPosition","text_justification","TextJustification","applyLineStyle","applyFontStyle","start_position","end_position","first_index","last_index","upwards_slope","notehead_width","pt1","pt2","both_arrows","distance","ratio","end_y","start_y","line_angle","angle1","angle2","top_x","bottom_x","drawArrowLine","vertical_position","GlyphNote","ignoreTicks","setGlyph","RepeatNote","System","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","Factory","addConnector","connector","addStave","paramsItems","spaceAbove","spaceBelow","debugNoteMetrics","allVoices","debugNoteMetricsYs","part","rightPadding","lastY","plotDebugging","plotMetrics","TimeSigNote","timeSigInfo","KeySigNote","drawPedalGlyph","PedalMarking","custom_depress_text","custom_release_text","bracket_height","text_margin_right","bracket_line_width","MIXED","pedal","setCustomText","depress","drawBracketed","prev_x","prev_y","is_pedal_depressed","next_is_same","prev_is_same","drawText","TextBracket","TextBracketPosition","pedal_depress","pedal_release","mixed","stop","show_bracket","underline_superscript","PositionsString","main_width","main_height","super_y","superscript_width","super_height","line_y","VibratoBracket","bracket_data","stop_x","GhostNote","parameter","TabStave","addTabGlyph","renderQ","systems","staves","initRenderer","getVoices","paramsP","ghostNote","textNoteStruct","textNote","barNote","clefNote","timeSigNote","keySigNote","vJustify","hJustify","fontWeight","kerning","stringNumber","multimeasurerest","secondaryBeamBreaks","curve","tie","vibratoBracket","textBracket","system","GraceTabNote","StaveHairpin","hairpin","left_shift_px","right_shift_px","right_shift_ticks","left_shift_ticks","ppt","pixelsPerTick","l_shift_px","r_shift_px","hairpin_options","setRenderOptions","dis","staff_height","l_shift","r_shift","CRESC","DECRESC","TabSlide","SLIDE_UP","SLIDE_DOWN","first_fret","last_fret","slide_y","Tremolo","isGraceNote","y_spacing","Tuning","tuningString","tuningValues","setTuning","standard","dagdad","dropd","standardBanjo","noteToInteger","names","getValueForString","stringNum","getValueForFret","fretNum","stringValue","getNoteForFret","KeyManager","setKey","getKey","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","change","valueNote","originalValueNote","BUILD","VERSION","RuntimeError","Error","defined","log","block","Array","err","stack","midLine","mid_line","drawDot","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","defineProperty","enumerable","chunkId","Promise","all","promises","Function","prop","hasOwnProperty","l","url","script","needAttach","scripts","getElementsByTagName","createElement","charset","timeout","nc","src","onScriptComplete","event","onerror","onload","clearTimeout","doneFns","parentNode","setTimeout","target","Symbol","toStringTag","scriptUrl","importScripts","currentScript","installedChunks","installedChunkData","promise","resolve","reject","error","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","chunkLoadingGlobal","SortAndUnique","cmp","eq","newArr","last","Contains","getCanvasContext","canvas_sel","BM","start_time","Date","getTime","elapsed","StackTrace"],"sourceRoot":""}