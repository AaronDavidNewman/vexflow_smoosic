{"version":3,"file":"vexflow-core-min.js","mappings":"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S,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,EACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAM,CACJ,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,EACV,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,iBAAoB,EACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,GACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,GACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,GACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,kBACT,MAAS,IACT,GAAM,kBACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,KAAM,CACJ,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,OAAU,EACV,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,IACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,IACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,GACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,MAIpB,WAAc,kBACd,WAAc,IACd,YAAe,4BC/1BJixB,GAAwB,CACnC54D,KAAM,cACN24D,OAAO,EACPhxB,QAAQ,GACR,OAAU,CACR,IAAK,CACH,MAAS,EACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,EACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,EAAK,CACH,MAAS,iBACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,kBACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,iBACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAM,CACJ,MAAS,IACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,kBACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,IACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,kBACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,iBACT,MAAS,mBACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,KAAM,CACJ,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,IACV,MAAS,EACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,OAAU,GACV,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,KACT,MAAS,IACT,MAAS,I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","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/webpack/runtime/load script","webpack://Vex/./src/font.ts","webpack://Vex/./src/fonts/loadDynamic.ts","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/boundingboxcomputation.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/glyph.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/fonts/petalumascript_textmetrics.ts","webpack://Vex/./src/fonts/robotoslab_textmetrics.ts","webpack://Vex/./src/textfont.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/timesigglyph.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/util.ts","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/ensure chunk","webpack://Vex/webpack/runtime/get javascript chunk filename","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/webpack/runtime/make namespace object","webpack://Vex/webpack/runtime/publicPath","webpack://Vex/webpack/runtime/jsonp chunk loading","webpack://Vex/","webpack://Vex/./src/vex.ts","webpack://Vex/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})(typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this, function() {\nreturn ","var inProgress = {};\nvar dataWebpackPrefix = \"Vex:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { defined } from './util';\nimport { loadBravura } from '@bravura';\nimport { loadGonville } from '@gonville';\nimport { loadPetaluma } from '@petaluma';\nimport { loadLeland } from '@leland';\nimport { loadCustom } from '@custom';\n\nexport interface FontData {\n  glyphs: Record<string, FontGlyph>;\n  fontFamily?: string;\n  resolution: number;\n  generatedOn?: string;\n}\n\nexport interface FontDataMetrics {\n  fontData?: FontData;\n  // eslint-disable-next-line\n  metrics?: Record<string, any>;\n}\n\nexport interface FontGlyph {\n  x_min: number;\n  x_max: number;\n  y_min?: number;\n  y_max?: number;\n  ha: number;\n  o: string;\n  leftSideBearing?: number;\n  advanceWidth?: number;\n  cached_outline?: number[];\n}\n\nclass Font {\n  protected name: string;\n  protected fontDataMetrics: FontDataMetrics;\n\n  // eslint-disable-next-line\n  constructor(name: string, metrics?: Record<string, any>, fontData?: FontData) {\n    this.name = name;\n    this.fontDataMetrics = { fontData: undefined, metrics: undefined };\n    switch (name) {\n      case 'Bravura':\n        loadBravura(this.fontDataMetrics);\n        break;\n      case 'Custom':\n        loadCustom(this.fontDataMetrics);\n        break;\n      case 'Gonville':\n        loadGonville(this.fontDataMetrics);\n        break;\n      case 'Petaluma':\n        loadPetaluma(this.fontDataMetrics);\n        break;\n      case 'Leland':\n        loadLeland(this.fontDataMetrics);\n        break;\n      default:\n        this.fontDataMetrics.metrics = metrics;\n        this.fontDataMetrics.fontData = fontData;\n    }\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getResolution(): number {\n    return this.getFontData().resolution;\n  }\n\n  // eslint-disable-next-line\n  getMetrics(): Record<string, any> {\n    return defined(this.fontDataMetrics.metrics, 'FontError', 'Missing metrics');\n  }\n\n  /**\n   * Use the provided key to look up a value in this font's metrics file (e.g., bravura_metrics.ts, petaluma_metrics.ts).\n   * @param key is a string separated by periods (e.g., stave.endPaddingMax, clef.lineCount.'5'.shiftY).\n   * @param defaultValue is returned if the lookup fails.\n   * @returns the retrieved value (or `defaultValue` if the lookup fails).\n   */\n  // eslint-disable-next-line\n  lookupMetric(key: string, defaultValue?: Record<string, any> | number): any {\n    // console.log('lookupMetric:', key);\n\n    const keyParts = key.split('.');\n\n    // Start with the top level font metrics object, and keep looking deeper into the object (via each part of the period-delimited key).\n    let currObj = this.getMetrics();\n    for (let i = 0; i < keyParts.length; i++) {\n      const keyPart = keyParts[i];\n      const value = currObj[keyPart];\n      if (value === undefined) {\n        // If the key lookup fails, we fall back to the defaultValue.\n        return defaultValue;\n      }\n      // The most recent lookup succeeded, so we drill deeper into the object.\n      currObj = value;\n    }\n\n    // After checking every part of the key (i.e., the loop completed), return the most recently retrieved value.\n    // console.log('found:', key, currObj);\n    return currObj;\n  }\n\n  getFontData(): FontData {\n    return defined(this.fontDataMetrics.fontData, 'FontError', 'Missing font data');\n  }\n\n  getGlyphs(): Record<string, FontGlyph> {\n    return this.getFontData().glyphs;\n  }\n}\n\nconst Fonts = {\n  Bravura: (): Font => new Font('Bravura'),\n  Gonville: (): Font => new Font('Gonville'),\n  Petaluma: (): Font => new Font('Petaluma'),\n  Leland: (): Font => new Font('Leland'),\n  Custom: (): Font => new Font('Custom'),\n};\n\nexport { Fonts, Font };\n","import { FontDataMetrics } from '../font';\nexport async function loadBravura(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"bravura\" */ '../fonts/bravura');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadCustom(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"custom\" */ '../fonts/custom');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadGonville(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"gonville\" */ '../fonts/gonville');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadPetaluma(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"petaluma\" */ '../fonts/petaluma');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\nexport async function loadLeland(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"leland\" */ '../fonts/leland');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\n\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n//\n// Author: Joshua Koo / @zz85\n// Author: @incompleteopus\n\nimport { RuntimeError } from './util';\n\n/** Fraction represents a rational number. */\nexport class Fraction {\n  static get CATEGORY(): string {\n    return 'Fraction';\n  }\n\n  // Cached objects for comparisons.\n  private static __staticFractionA = new Fraction();\n  private static __staticFractionB = new Fraction();\n  private static __staticFractionTmp = new Fraction();\n\n  /** GCD: Greatest common divisor using Euclidean algorithm. */\n  static GCD(a: number, b: number): number {\n    if (typeof a !== 'number' || Number.isNaN(a) || a === 0 || typeof b !== 'number' || Number.isNaN(b) || b === 0) {\n      throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n    }\n\n    let t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  }\n\n  /** LCM: Lowest common multiple. */\n  static LCM(a: number, b: number): number {\n    return (a * b) / Fraction.GCD(a, b);\n  }\n\n  /** Lowest common multiple for more than two numbers. */\n  static LCMM(args: number[]): number {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length === 1) {\n      return args[0];\n    } else if (args.length === 2) {\n      return Fraction.LCM(args[0], args[1]);\n    } else {\n      // args.shift() removes the first number.\n      // LCM the first number with the rest of the numbers.\n      return Fraction.LCM(args.shift() as number, Fraction.LCMM(args));\n    }\n  }\n\n  numerator: number = 1;\n  denominator: number = 1;\n\n  /** Set the numerator and denominator. */\n  constructor(numerator?: number, denominator?: number) {\n    this.set(numerator, denominator);\n  }\n\n  /** Set the numerator and denominator. */\n  set(numerator: number = 1, denominator: number = 1): this {\n    this.numerator = numerator;\n    this.denominator = denominator;\n    return this;\n  }\n\n  /** Return the value of the fraction. */\n  value(): number {\n    return this.numerator / this.denominator;\n  }\n\n  /** Simplify numerator and denominator using GCD. */\n  simplify(): this {\n    let u = this.numerator;\n    let d = this.denominator;\n\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n    return this.set(u, d);\n  }\n\n  /** Add value of another fraction. */\n  add(param1: Fraction | number = 0, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Substract value of another fraction. */\n  subtract(param1: Fraction | number = 0, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Multiply by value of another fraction. */\n  multiply(param1: Fraction | number = 1, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n\n  /** Divide by value of another Fraction. */\n  divide(param1: Fraction | number = 1, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  }\n\n  /** Simplify both sides and check if they are equal. */\n  equals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionA.copy(compare).simplify();\n    const b = Fraction.__staticFractionB.copy(this).simplify();\n\n    return a.numerator === b.numerator && a.denominator === b.denominator;\n  }\n\n  /** Greater than operator. */\n  greaterThan(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator > 0;\n  }\n\n  /** Greater than or equals operator. */\n  greaterThanEquals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator >= 0;\n  }\n\n  /** Less than operator. */\n  lessThan(compare: Fraction | number): boolean {\n    return !this.greaterThanEquals(compare);\n  }\n\n  /** Less than or equals operator. */\n  lessThanEquals(compare: Fraction | number): boolean {\n    return !this.greaterThan(compare);\n  }\n\n  /** Return a new copy with current values. */\n  clone(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  /** Copy value of another fraction. */\n  copy(other: Fraction | number): this {\n    if (typeof other === 'number') {\n      return this.set(other, 1);\n    } else {\n      return this.set(other.numerator, other.denominator);\n    }\n  }\n\n  /** Return the integer component (eg. 5/2 => 2). */\n  quotient(): number {\n    return Math.floor(this.numerator / this.denominator);\n  }\n\n  /** Return the remainder component (eg. 5/2 => 1). */\n  remainder(): number {\n    return this.numerator % this.denominator;\n  }\n\n  /** Calculate absolute value. */\n  makeAbs(): this {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  }\n\n  /** Return a raw string representation (eg. \"5/2\"). */\n  toString(): string {\n    return `${this.numerator}/${this.denominator}`;\n  }\n\n  /** Return a simplified string respresentation. */\n  toSimplifiedString(): string {\n    return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n  }\n\n  /** Return string representation in mixed form. */\n  toMixedString(): string {\n    let s = '';\n    const q = this.quotient();\n    const f = Fraction.__staticFractionTmp.copy(this);\n\n    if (q < 0) {\n      f.makeAbs();\n    }\n\n    if (q !== 0) {\n      s += q;\n\n      if (f.numerator !== 0) {\n        s += ` ${f.toSimplifiedString()}`;\n      }\n    } else if (f.numerator === 0) {\n      s = '0';\n    } else {\n      s = f.toSimplifiedString();\n    }\n\n    return s;\n  }\n\n  /** Parse a fraction string. */\n  parse(str: string): this {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = i[1] ? parseInt(i[1], 10) : 1;\n\n    return this.set(n, d);\n  }\n}\n\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n: Fraction | number, d: number = 1): [number, number] {\n  if (typeof n === 'number') {\n    // Both params are numbers, so we return them as [numerator, denominator].\n    return [n, d];\n  } else {\n    // First param is a Fraction object. We ignore the second param.\n    return [n.numerator, n.denominator];\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\n\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n  // [attribute_name][attribute_value][element_id] => Element\n  [key: string]: { [key: string]: { [key: string]: Element } };\n  constructor() {\n    this.id = {};\n    this.type = {};\n    this.class = {};\n  }\n}\n\ninterface RegistryUpdate {\n  id: string;\n  name: string;\n  value: string | undefined;\n  oldValue: string | undefined;\n}\n\nexport class Registry {\n  private static defaultRegistry?: Registry;\n\n  static getDefaultRegistry(): Registry | undefined {\n    return Registry.defaultRegistry;\n  }\n\n  // If you call `enableDefaultRegistry`, any new elements will auto-register with\n  // the provided registry as soon as they're constructed.\n  static enableDefaultRegistry(registry: Registry): void {\n    Registry.defaultRegistry = registry;\n  }\n\n  static disableDefaultRegistry(): void {\n    Registry.defaultRegistry = undefined;\n  }\n\n  protected index: Index;\n\n  constructor() {\n    this.index = new Index();\n  }\n\n  clear(): this {\n    this.index = new Index();\n    return this;\n  }\n\n  setIndexValue(name: string, value: string, id: string, elem: Element): void {\n    const index = this.index;\n    if (!index[name][value]) {\n      index[name][value] = {};\n    }\n    index[name][value][id] = elem;\n  }\n\n  // Updates the indexes for element 'id'. If an element's attribute changes\n  // from A -> B, make sure to remove the element from A.\n  updateIndex({ id, name, value, oldValue }: RegistryUpdate): void {\n    const elem = this.getElementById(id);\n    if (oldValue !== undefined && this.index[name][oldValue]) {\n      delete this.index[name][oldValue][id];\n    }\n    if (value && elem) {\n      this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n    }\n  }\n\n  /**\n   * Register element `elem` with this registry.\n   * This adds the element to its index and watches it for attribute changes.\n   * @param elem\n   * @param id\n   * @returns this\n   */\n  register(elem: Element, id?: string): this {\n    id = id || elem.getAttribute('id');\n    if (!id) {\n      throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n    }\n\n    // Manually add id to index, then update other indexes.\n    elem.setAttribute('id', id);\n    this.setIndexValue('id', id, id, elem);\n    this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n    elem.onRegister(this);\n    return this;\n  }\n\n  getElementById(id: string): Element | undefined {\n    return this.index.id?.[id]?.[id]; // return undefined if the id is not found.\n  }\n\n  getElementsByAttribute(attribute: string, value: string): Element[] {\n    const index_attr = this.index[attribute];\n    if (index_attr) {\n      const index_attr_val = index_attr[value];\n      if (index_attr_val) {\n        const keys = Object.keys(index_attr_val);\n        return keys.map((k) => index_attr_val[k]);\n      }\n    }\n    return [];\n  }\n\n  getElementsByType(type: string): Element[] {\n    return this.getElementsByAttribute('type', type);\n  }\n\n  getElementsByClass(className: string): Element[] {\n    return this.getElementsByAttribute('class', className);\n  }\n\n  // This is called by the element when an attribute value changes. If an indexed\n  // attribute changes, then update the local index.\n  onUpdate(info: RegistryUpdate): this {\n    const allowedNames = ['id', 'type', 'class'];\n    if (allowedNames.includes(info.name)) {\n      this.updateIndex(info);\n    }\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\n\nimport { defined } from './util';\nimport { Registry } from './registry';\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { RenderContext } from './types/common';\nimport { Flow } from './flow';\n\n/** Element attributes. */\nexport interface ElementAttributes {\n  // eslint-disable-next-line\n  [name: string]: any;\n  id: string;\n  // eslint-disable-next-line\n  el?: any;\n  type: string;\n  classes: Record<string, boolean>;\n}\n\n/** Element style */\nexport interface ElementStyle {\n  shadowColor?: string;\n  shadowBlur?: number;\n  fillStyle?: string;\n  strokeStyle?: string;\n  lineWidth?: number;\n}\n\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n */\nexport abstract class Element {\n  static get CATEGORY(): string {\n    return 'Element';\n  }\n\n  protected static ID: number = 1000;\n  protected static newID(): string {\n    return `auto${Element.ID++}`;\n  }\n\n  private context?: RenderContext;\n  protected rendered: boolean;\n  protected style?: ElementStyle;\n  private attrs: ElementAttributes;\n  protected boundingBox?: BoundingBox;\n  protected registry?: Registry;\n\n  // fontStack and musicFont are both initialized by the constructor via this.setFontStack(...).\n  protected fontStack!: Font[];\n  protected musicFont!: Font;\n\n  constructor() {\n    this.attrs = {\n      id: Element.newID(),\n      el: undefined,\n      type: this.getCategory(),\n      classes: {},\n    };\n\n    this.rendered = false;\n    this.setFontStack(Flow.DEFAULT_FONT_STACK);\n\n    // If a default registry exist, then register with it right away.\n    Registry.getDefaultRegistry()?.register(this);\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return (<typeof Element>this.constructor).CATEGORY;\n  }\n\n  /** Set music fonts stack. */\n  setFontStack(fontStack: Font[]): this {\n    this.fontStack = fontStack;\n    this.musicFont = fontStack[0];\n    return this;\n  }\n\n  /** Get music fonts stack. */\n  getFontStack(): Font[] {\n    return this.fontStack;\n  }\n\n  /** Set the draw style of a stemmable note. */\n  setStyle(style: ElementStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  /** Get the draw style of a stemmable note. */\n  getStyle(): ElementStyle | undefined {\n    return this.style;\n  }\n\n  /** Apply current style to Canvas `context`. */\n  applyStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n\n    context.save();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    if (style.lineWidth) context.setLineWidth(style.lineWidth);\n    return this;\n  }\n\n  /** Restore style of `context`. */\n  restoreStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n    context.restore();\n    return this;\n  }\n\n  /** Draw with style of an element. */\n  drawWithStyle(): void {\n    this.checkContext();\n    this.applyStyle();\n    this.draw();\n    this.restoreStyle();\n  }\n\n  /** Draw an element. */\n  // eslint-disable-next-line\n  abstract draw(...args: any[]): void;\n\n  /** Check if it has a class label (An element can have multiple class labels).  */\n  hasClass(className: string): boolean {\n    return this.attrs.classes[className] === true;\n  }\n\n  /** Add a class label (An element can have multiple class labels).  */\n  addClass(className: string): this {\n    this.attrs.classes[className] = true;\n    this.registry?.onUpdate({\n      id: this.attrs.id,\n      name: 'class',\n      value: className,\n      oldValue: undefined,\n    });\n    return this;\n  }\n\n  /** Remove a class label (An element can have multiple class labels).  */\n  removeClass(className: string): this {\n    delete this.attrs.classes[className];\n    this.registry?.onUpdate({\n      id: this.attrs.id,\n      name: 'class',\n      value: undefined,\n      oldValue: className,\n    });\n    return this;\n  }\n\n  /** Call back from registry after the element is registered. */\n  onRegister(registry: Registry): this {\n    this.registry = registry;\n    return this;\n  }\n\n  /** Return the rendered status. */\n  isRendered(): boolean {\n    return this.rendered;\n  }\n\n  /** Set the rendered status. */\n  setRendered(rendered = true): this {\n    this.rendered = rendered;\n    return this;\n  }\n\n  /** Return the element attributes. */\n  getAttributes(): ElementAttributes {\n    return this.attrs;\n  }\n\n  /** Return an attribute. */\n  // eslint-disable-next-line\n  getAttribute(name: string): any {\n    return this.attrs[name];\n  }\n\n  /** Set an attribute. */\n  // eslint-disable-next-line\n  setAttribute(name: string, value: any): this {\n    const oldID = this.attrs.id;\n    const oldValue = this.attrs[name];\n    this.attrs[name] = value;\n    // Register with old id to support id changes.\n    this.registry?.onUpdate({ id: oldID, name, value, oldValue });\n    return this;\n  }\n\n  /** Get the boundingBox. */\n  getBoundingBox(): BoundingBox | undefined {\n    return this.boundingBox;\n  }\n\n  /** Return the context. */\n  getContext(): RenderContext | undefined {\n    return this.context;\n  }\n\n  /** Set the context. */\n  setContext(context?: RenderContext): this {\n    this.context = context;\n    return this;\n  }\n\n  /** Validate and return the context. */\n  checkContext(): RenderContext {\n    return defined(this.context, 'NoContext', 'No rendering context attached to instance.');\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\n/**\n * BoundingBoxComputation computes metrics for a bounding box by continuously\n * taking canvas path commands.\n *\n * Warning: This class is merely a crutch to get bounding box information without\n * explicit metadata. This is likely to get deprecated following SMuFL support.\n *\n * based on: https://github.com/canvg/canvg/blob/master/src/BoundingBox.ts (MIT License)\n */\nexport class BoundingBoxComputation {\n  protected x1: number = Number.NaN;\n  protected y1: number = Number.NaN;\n  protected x2: number = Number.NaN;\n  protected y2: number = Number.NaN;\n\n  /** Get calculated X1. */\n  getX1(): number {\n    return this.x1;\n  }\n\n  /** Get calculated Y1. */\n  getY1(): number {\n    return this.y1;\n  }\n\n  /** Get calculated width. */\n  width(): number {\n    return this.x2 - this.x1;\n  }\n\n  /** Get calculated height. */\n  height(): number {\n    return this.y2 - this.y1;\n  }\n\n  /** Add point to BoundingBox. */\n  addPoint(x: number, y: number): void {\n    if (isNaN(this.x1) || x < this.x1) this.x1 = x;\n    if (isNaN(this.x2) || x > this.x2) this.x2 = x;\n    if (isNaN(this.y1) || y < this.y1) this.y1 = y;\n    if (isNaN(this.y2) || y > this.y2) this.y2 = y;\n  }\n\n  /** Add X to BoundingBox. */\n  addX(x: number): void {\n    this.addPoint(x, this.y1);\n  }\n\n  /** Add Y to BoundingBox. */\n  addY(y: number): void {\n    this.addPoint(this.x1, y);\n  }\n\n  /** Add quadratic curve to BoundingBox. */\n  addQuadraticCurve(p0x: number, p0y: number, p1x: number, p1y: number, p2x: number, p2y: number): void {\n    this.addPoint(p0x, p0y);\n    this.addPoint(p2x, p2y);\n\n    const p01x = p1x - p0x;\n    const p12x = p2x - p1x;\n    let denom = p01x - p12x;\n    if (denom != 0) {\n      const t = p01x / denom;\n      if (t > 0 && t < 1) {\n        const it = 1 - t;\n        this.addX(it * it * p0x + 2 * it * t * p1x + t * t * p2x);\n      }\n    }\n\n    const p01y = p1y - p0y;\n    const p12y = p2y - p1y;\n    denom = p01y - p12y;\n    if (denom != 0) {\n      const t = p01y / denom;\n      if (t > 0 && t < 1) {\n        const it = 1 - t;\n        this.addY(it * it * p0y + 2 * it * t * p1y + t * t * p2y);\n      }\n    }\n  }\n\n  /** Add bezier curve to BoundingBox. */\n  addBezierCurve(\n    p0x: number,\n    p0y: number,\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number\n  ): void {\n    // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    const p0 = [p0x, p0y];\n    const p1 = [p1x, p1y];\n    const p2 = [p2x, p2y];\n    const p3 = [p3x, p3y];\n    let i;\n\n    this.addPoint(p0[0], p0[1]);\n    this.addPoint(p3[0], p3[1]);\n\n    const f = (t: number, i: number) =>\n      Math.pow(1 - t, 3) * p0[i] +\n      3 * Math.pow(1 - t, 2) * t * p1[i] +\n      3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n      Math.pow(t, 3) * p3[i];\n\n    for (i = 0; i <= 1; i++) {\n      const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n      const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n      const c = 3 * p1[i] - 3 * p0[i];\n\n      if (a === 0) {\n        if (b === 0) continue;\n        const t = -c / b;\n        if (0 < t && t < 1) {\n          if (i === 0) this.addX(f(t, i));\n          if (i === 1) this.addY(f(t, i));\n        }\n        continue;\n      }\n\n      const b2ac = Math.pow(b, 2) - 4 * c * a;\n      if (b2ac < 0) continue;\n      const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        if (i === 0) this.addX(f(t1, i));\n        if (i === 1) this.addY(f(t1, i));\n      }\n      const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        if (i === 0) this.addX(f(t2, i));\n        if (i === 1) this.addY(f(t2, i));\n      }\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RenderContext } from './types/common';\n\n/** Bounding boxes for interactive notation */\n\nexport class BoundingBox {\n  protected x: number;\n  protected y: number;\n  protected w: number;\n  protected h: number;\n\n  /**\n   * Create a new copy.\n   */\n  static copy(that: BoundingBox): BoundingBox {\n    return new BoundingBox(that.x, that.y, that.w, that.h);\n  }\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  /** Get x position. */\n  getX(): number {\n    return this.x;\n  }\n\n  /** Get y position. */\n  getY(): number {\n    return this.y;\n  }\n\n  /** Get width. */\n  getW(): number {\n    return this.w;\n  }\n\n  /** Get height. */\n  getH(): number {\n    return this.h;\n  }\n\n  /** Set x position. */\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  /** Set y position. */\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  /** Set width. */\n  setW(w: number): this {\n    this.w = w;\n    return this;\n  }\n\n  /** Set height. */\n  setH(h: number): this {\n    this.h = h;\n    return this;\n  }\n\n  /** Move to position. */\n  move(x: number, y: number): this {\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  /** Clone. */\n  clone(): BoundingBox {\n    return BoundingBox.copy(this);\n  }\n\n  /**\n   * Merge my box with given box. Creates a bigger bounding box unless\n   * the given box is contained in this one.\n   */\n  mergeWith(boundingBox: BoundingBox, ctx?: RenderContext): this {\n    const that = boundingBox;\n\n    const new_x = this.x < that.x ? this.x : that.x;\n    const new_y = this.y < that.y ? this.y : that.y;\n    const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n    const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n\n    this.x = new_x;\n    this.y = new_y;\n    this.w = new_w;\n    this.h = new_h;\n\n    if (ctx) this.draw(ctx);\n    return this;\n  }\n\n  /**\n   * Render the BoundingBox.\n   * @param ctx rendering context\n   * @param x horizontal shift\n   * @param y vertical shift\n   */\n  draw(ctx: RenderContext, x?: number, y?: number): void {\n    if (!x) x = 0;\n    if (!y) y = 0;\n    ctx.rect(this.x + x, this.y + y, this.w, this.h);\n    ctx.stroke();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { defined, RuntimeError } from './util';\nimport { Element } from './element';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { BoundingBox } from './boundingbox';\nimport { Font, FontGlyph } from './font';\nimport { RenderContext, TypeProps } from './types/common';\nimport { Stave } from './stave';\nimport { Stem } from './stem';\nimport { Flow } from './flow';\n\nexport interface DurationCode {\n  common: TypeProps;\n  type: Record<string, TypeProps>;\n}\n\nexport interface GlyphProps {\n  code_head: string;\n  dot_shiftY: number;\n  position: string;\n  rest: boolean;\n  line_below: number;\n  line_above: number;\n  stem_up_extension: number;\n  stem_down_extension: number;\n  stem: Stem;\n  code: string;\n  code_flag_upstem: string;\n  code_flag_downstem: string;\n  flag: boolean;\n  width: number;\n  text: string;\n  tabnote_stem_down_extension: number;\n  tabnote_stem_up_extension: number;\n  beam_count: number;\n  duration_codes: Record<string, DurationCode>;\n  validTypes: Record<string, string>;\n  shift_y: number;\n\n  getWidth(a?: number): number;\n\n  getMetrics(): GlyphMetrics;\n}\n\nexport interface GlyphOptions {\n  fontStack: Font[];\n  category?: string;\n}\n\nexport interface GlyphMetrics {\n  width: number;\n  height: number;\n  x_min: number;\n  x_max: number;\n  x_shift: number;\n  y_shift: number;\n  scale: number;\n  ha: number;\n  outline: number[];\n  font: Font;\n}\n\nexport const enum OutlineCode {\n  MOVE = 0,\n  LINE = 1,\n  QUADRATIC = 2,\n  BEZIER = 3,\n}\n\nclass GlyphCacheEntry {\n  metrics: GlyphMetrics;\n  bbox: BoundingBox;\n  point: number = -1;\n\n  constructor(fontStack: Font[], code: string, category?: string) {\n    this.metrics = Glyph.loadMetrics(fontStack, code, category);\n    this.bbox = Glyph.getOutlineBoundingBox(\n      this.metrics.outline,\n      this.metrics.scale,\n      this.metrics.x_shift,\n      this.metrics.y_shift\n    );\n\n    if (category) {\n      this.point = Glyph.lookupFontMetric(this.metrics.font, category, code, 'point', -1);\n    }\n  }\n}\n\nclass GlyphCache {\n  protected cache: Map<Font[], Record<string, GlyphCacheEntry>> = new Map();\n\n  lookup(fontStack: Font[], code: string, category?: string): GlyphCacheEntry {\n    let entries = this.cache.get(fontStack);\n    if (entries === undefined) {\n      entries = {};\n      this.cache.set(fontStack, entries);\n    }\n    const key = category ? `${code}%${category}` : code;\n    let entry = entries[key];\n    if (entry === undefined) {\n      entry = new GlyphCacheEntry(fontStack, code, category);\n      entries[key] = entry;\n    }\n    return entry;\n  }\n}\n\nclass GlyphOutline {\n  private i: number = 0;\n\n  constructor(private outline: number[], private originX: number, private originY: number, private scale: number) {}\n\n  done(): boolean {\n    return this.i >= this.outline.length;\n  }\n  next(): number {\n    return this.outline[this.i++];\n  }\n  nextX(): number {\n    return this.originX + this.outline[this.i++] * this.scale;\n  }\n  nextY(): number {\n    return this.originY - this.outline[this.i++] * this.scale;\n  }\n\n  static parse(str: string): number[] {\n    const result: number[] = [];\n    const parts = str.split(' ');\n    let i = 0;\n    while (i < parts.length) {\n      switch (parts[i++]) {\n        case 'm':\n          result.push(OutlineCode.MOVE, parseInt(parts[i++]), parseInt(parts[i++]));\n          break;\n        case 'l':\n          result.push(OutlineCode.LINE, parseInt(parts[i++]), parseInt(parts[i++]));\n          break;\n        case 'q':\n          result.push(\n            OutlineCode.QUADRATIC,\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++])\n          );\n          break;\n        case 'b':\n          result.push(\n            OutlineCode.BEZIER,\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++])\n          );\n          break;\n      }\n    }\n    return result;\n  }\n}\n\nexport class Glyph extends Element {\n  static get CATEGORY(): string {\n    return 'Glyph';\n  }\n\n  protected static cache = new GlyphCache();\n\n  bbox: BoundingBox = new BoundingBox(0, 0, 0, 0);\n  code: string;\n  // metrics is initialised in the constructor by either setOptions or reset\n  // eslint-disable-next-line\n  metrics!: GlyphMetrics;\n  topGlyphs: Glyph[] = [];\n  botGlyphs: Glyph[] = [];\n\n  protected options: GlyphOptions;\n  protected originShift: { x: number; y: number };\n  protected x_shift: number;\n  protected y_shift: number;\n  scale: number = 1;\n  protected point: number;\n  protected stave?: Stave;\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Static methods for loading and rendering glyphs.\n\n  /**\n   * Pass a key of the form `glyphs.{category}.{code}.{key}` to Font.lookupMetric(). If the initial lookup fails,\n   * try again with the path `glyphs.{category}.{key}`. If the second lookup fails, return the defaultValue.\n   *\n   * @param font\n   * @param category any metric path under 'glyphs', so 'stem.up' could resolve to glyphs.stem.up.shiftX, glyphs.stem.up.shiftY, etc.\n   * @param code\n   * @param key\n   * @param defaultValue\n   */\n  static lookupFontMetric(font: Font, category: string, code: string, key: string, defaultValue: number): number {\n    let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);\n    if (value === undefined) {\n      // The first lookup failed, so we omit .${code} and try again (with a defaultValue this time).\n      value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);\n    }\n    return value;\n  }\n\n  static lookupGlyph(fontStack: Font[], code: string): { font: Font; glyph: FontGlyph } {\n    defined(fontStack, 'BadFontStack', 'Font stack is misconfigured');\n\n    let glyph: FontGlyph;\n    let font: Font;\n    for (let i = 0; i < fontStack.length; i++) {\n      font = fontStack[i];\n      glyph = font.getGlyphs()[code];\n      if (glyph) return { glyph, font };\n    }\n\n    throw new RuntimeError('BadGlyph', `Glyph ${code} does not exist in font.`);\n  }\n\n  static loadMetrics(fontStack: Font[], code: string, category?: string): GlyphMetrics {\n    const { glyph, font } = Glyph.lookupGlyph(fontStack, code);\n\n    if (!glyph.o) throw new RuntimeError('BadGlyph', `Glyph ${code} has no outline defined.`);\n\n    let x_shift = 0;\n    let y_shift = 0;\n    let scale = 1;\n    if (category && font) {\n      x_shift = Glyph.lookupFontMetric(font, category, code, 'shiftX', 0);\n      y_shift = Glyph.lookupFontMetric(font, category, code, 'shiftY', 0);\n      scale = Glyph.lookupFontMetric(font, category, code, 'scale', 1);\n    }\n\n    const x_min = glyph.x_min;\n    const x_max = glyph.x_max;\n    const ha = glyph.ha;\n\n    if (!glyph.cached_outline) {\n      glyph.cached_outline = GlyphOutline.parse(glyph.o);\n    }\n\n    return {\n      x_min,\n      x_max,\n      x_shift,\n      y_shift,\n      scale,\n      ha,\n      outline: glyph.cached_outline,\n      font,\n      width: x_max - x_min,\n      height: ha,\n    };\n  }\n\n  /**\n   * Renders glyphs from the default font stack.\n   *\n   * @param ctx Canvas or SVG context\n   * @param x_pos x coordinate\n   * @param y_pos y coordinate\n   * @param point the point size of the font\n   * @param code the glyph code in font.getGlyphs()\n   * @param options\n   * @returns\n   */\n  static renderGlyph(\n    ctx: RenderContext,\n    x_pos: number,\n    y_pos: number,\n    point: number,\n    code: string,\n    options?: { font?: Font; category: string }\n  ): GlyphMetrics {\n    const params = {\n      fontStack: Flow.DEFAULT_FONT_STACK,\n      ...options,\n    };\n    const data = Glyph.cache.lookup(params.fontStack, code, params.category);\n    const metrics = data.metrics;\n    if (data.point != -1) {\n      point = data.point;\n    }\n\n    const scale = (point * 72.0) / (metrics.font.getResolution() * 100.0);\n\n    Glyph.renderOutline(ctx, metrics.outline, scale * metrics.scale, x_pos + metrics.x_shift, y_pos + metrics.y_shift);\n    return metrics;\n  }\n\n  static renderOutline(ctx: RenderContext, outline: number[], scale: number, x_pos: number, y_pos: number): void {\n    const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n\n    ctx.beginPath();\n    let x, y: number;\n    while (!go.done()) {\n      switch (go.next()) {\n        case OutlineCode.MOVE:\n          ctx.moveTo(go.nextX(), go.nextY());\n          break;\n        case OutlineCode.LINE:\n          ctx.lineTo(go.nextX(), go.nextY());\n          break;\n        case OutlineCode.QUADRATIC:\n          x = go.nextX();\n          y = go.nextY();\n          ctx.quadraticCurveTo(go.nextX(), go.nextY(), x, y);\n          break;\n        case OutlineCode.BEZIER:\n          x = go.nextX();\n          y = go.nextY();\n          ctx.bezierCurveTo(go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n          break;\n      }\n    }\n    ctx.fill();\n  }\n\n  static getOutlineBoundingBox(outline: number[], scale: number, x_pos: number, y_pos: number): BoundingBox {\n    const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n    const bboxComp = new BoundingBoxComputation();\n\n    // (penX, penY) hold the pen position: the start of each stroke.\n    let penX: number = x_pos;\n    let penY: number = y_pos;\n    let x, y: number;\n    while (!go.done()) {\n      switch (go.next()) {\n        case OutlineCode.MOVE:\n          // Note that we don't add any points to the bounding box until a srroke is actually drawn.\n          penX = go.nextX();\n          penY = go.nextY();\n          break;\n        case OutlineCode.LINE:\n          bboxComp.addPoint(penX, penY);\n          penX = go.nextX();\n          penY = go.nextY();\n          bboxComp.addPoint(penX, penY);\n          break;\n        case OutlineCode.QUADRATIC:\n          x = go.nextX();\n          y = go.nextY();\n          bboxComp.addQuadraticCurve(penX, penY, go.nextX(), go.nextY(), x, y);\n          penX = x;\n          penY = y;\n          break;\n        case OutlineCode.BEZIER:\n          x = go.nextX();\n          y = go.nextY();\n          bboxComp.addBezierCurve(penX, penY, go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n          penX = x;\n          penY = y;\n          break;\n      }\n    }\n\n    return new BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());\n  }\n\n  static getWidth(fontStack: Font[], code: string, point: number, category?: string): number {\n    const data = Glyph.cache.lookup(fontStack, code, category);\n    if (data.point != -1) {\n      point = data.point;\n    }\n    const scale = (point * 72) / (data.metrics.font.getResolution() * 100);\n    return data.bbox.getW() * scale;\n  }\n\n  /**\n   * @param code\n   * @param point\n   * @param options\n   */\n  constructor(code: string, point: number, options?: { category: string }) {\n    super();\n\n    this.code = code;\n    this.point = point;\n    this.options = {\n      fontStack: this.getFontStack(),\n    };\n\n    this.x_shift = 0;\n    this.y_shift = 0;\n\n    this.originShift = {\n      x: 0,\n      y: 0,\n    };\n\n    if (options) {\n      this.setOptions(options);\n    } else {\n      this.reset();\n    }\n  }\n\n  // eslint-disable-next-line\n  draw(...args: any[]): void {\n    // DO NOTHING.\n  }\n\n  getCode(): string {\n    return this.code;\n  }\n\n  // eslint-disable-next-line\n  setOptions(options: any): void {\n    this.options = { ...this.options, ...options };\n    this.reset();\n  }\n\n  setPoint(point: number): this {\n    this.point = point;\n    return this;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  setXShift(x_shift: number): this {\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  setYShift(y_shift: number): this {\n    this.y_shift = y_shift;\n    return this;\n  }\n\n  reset(): void {\n    const data = Glyph.cache.lookup(this.options.fontStack, this.code, this.options.category);\n    this.metrics = data.metrics;\n    // Override point from metrics file\n    if (data.point != -1) {\n      this.point = data.point;\n    }\n\n    this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);\n    this.bbox = new BoundingBox(\n      data.bbox.getX() * this.scale,\n      data.bbox.getY() * this.scale,\n      data.bbox.getW() * this.scale,\n      data.bbox.getH() * this.scale\n    );\n  }\n\n  checkMetrics(): GlyphMetrics {\n    return defined(this.metrics, 'BadGlyph', `Glyph ${this.code} is not initialized.`);\n  }\n\n  getMetrics(): GlyphMetrics {\n    const metrics = this.checkMetrics();\n    const metricsScale = metrics.scale;\n    return {\n      x_min: metrics.x_min * this.scale * metricsScale,\n      x_max: metrics.x_max * this.scale * metricsScale,\n      width: this.bbox.getW(),\n      height: this.bbox.getH(),\n      scale: this.scale * metricsScale,\n      x_shift: metrics.x_shift,\n      y_shift: metrics.y_shift,\n      outline: metrics.outline,\n      font: metrics.font,\n      ha: metrics.ha,\n    };\n  }\n\n  setOriginX(x: number): void {\n    const { bbox } = this;\n    const originX = Math.abs(bbox.getX() / bbox.getW());\n    const xShift = (x - originX) * bbox.getW();\n    this.originShift.x = -xShift;\n  }\n\n  setOriginY(y: number): void {\n    const { bbox } = this;\n    const originY = Math.abs(bbox.getY() / bbox.getH());\n    const yShift = (y - originY) * bbox.getH();\n    this.originShift.y = -yShift;\n  }\n\n  setOrigin(x: number, y: number): void {\n    this.setOriginX(x);\n    this.setOriginY(y);\n  }\n\n  render(ctx: RenderContext, x: number, y: number): void {\n    const metrics = this.checkMetrics();\n\n    const outline = metrics.outline;\n    const scale = this.scale * metrics.scale;\n\n    this.setRendered();\n    this.applyStyle(ctx);\n    const xPos = x + this.originShift.x + metrics.x_shift;\n    const yPos = y + this.originShift.y + metrics.y_shift;\n    Glyph.renderOutline(ctx, outline, scale, xPos, yPos);\n    this.restoreStyle(ctx);\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  renderToStave(x: number): void {\n    const context = this.checkContext();\n    const metrics = this.checkMetrics();\n    const stave = this.checkStave();\n\n    const outline = metrics.outline;\n    const scale = this.scale * metrics.scale;\n\n    this.setRendered();\n    this.applyStyle();\n\n    const xPos = x + this.x_shift + metrics.x_shift;\n    const yPos = stave.getYForGlyphs() + this.y_shift + metrics.y_shift;\n    Glyph.renderOutline(context, outline, scale, xPos, yPos);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/* eslint-disable key-spacing */\n\nimport { ArticulationStruct } from './articulation';\nimport { Flow } from './flow';\nimport { Fonts } from './font';\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { RuntimeError } from './util';\n\n// Custom note heads\nconst customNoteHeads: Record<string, { code: string }> = {\n  /* Diamond */\n  D0: { code: 'noteheadDiamondWhole' },\n  D1: { code: 'noteheadDiamondHalf' },\n  D2: { code: 'noteheadDiamondBlack' },\n  D3: { code: 'noteheadDiamondBlack' },\n\n  /* Triangle */\n  T0: { code: 'noteheadTriangleUpWhole' },\n  T1: { code: 'noteheadTriangleUpHalf' },\n  T2: { code: 'noteheadTriangleUpBlack' },\n  T3: { code: 'noteheadTriangleUpBlack' },\n\n  /* Cross */\n  X0: { code: 'noteheadXWhole' },\n  X1: { code: 'noteheadXHalf' },\n  X2: { code: 'noteheadXBlack' },\n  X3: { code: 'noteheadCircleX' },\n\n  /* Square */\n  S1: { code: 'noteheadSquareWhite' },\n  S2: { code: 'noteheadSquareBlack' },\n\n  /* Rectangle */\n  R1: { code: 'vexNoteHeadRectWhite' }, // no smufl code\n  R2: { code: 'vexNoteHeadRectBlack' }, // no smufl code\n};\n\nconst RESOLUTION = 16384;\n\nconst durations: Record<string, number> = {\n  '1/2': RESOLUTION * 2,\n  1: RESOLUTION / 1,\n  2: RESOLUTION / 2,\n  4: RESOLUTION / 4,\n  8: RESOLUTION / 8,\n  16: RESOLUTION / 16,\n  32: RESOLUTION / 32,\n  64: RESOLUTION / 64,\n  128: RESOLUTION / 128,\n  256: RESOLUTION / 256,\n};\n\nconst accidentals: Record<string, { code: string; parenRightPaddingAdjustment: number }> = {\n  '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\n  '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\n  bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\n  n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\n  '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\n  '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\n  db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\n  d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\n  '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\n  '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\n  '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\n  bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\n  bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\n  o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\n  k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\n  bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\n  '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\n  ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\n  afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },\n  accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },\n  accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlatAndFlat: {\n    code: 'accidentalNarrowReversedFlatAndFlat',\n    parenRightPaddingAdjustment: -1,\n  },\n  accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },\n  accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },\n};\n\n// eslint-disable-next-line\nlet duration_codes: Record<string, any>;\n\nexport const Tables = {\n  STEM_WIDTH: 1.5,\n  STEM_HEIGHT: 35,\n  STAVE_LINE_THICKNESS: 1,\n  RESOLUTION: RESOLUTION,\n\n  /**\n   * Customize this to choose a different music font.\n   * For example: Vex.Flow.DEFAULT_FONT_STACK = [Fonts.Petaluma(), Fonts.Custom()];\n   */\n  DEFAULT_FONT_STACK: [Fonts.Bravura(), Fonts.Gonville(), Fonts.Custom()],\n  DEFAULT_NOTATION_FONT_SCALE: 39,\n  DEFAULT_TABLATURE_FONT_SCALE: 39,\n  SLASH_NOTEHEAD_WIDTH: 15,\n  STAVE_LINE_DISTANCE: 10,\n\n  // HACK:\n  // Since text origins are positioned at the baseline, we must\n  // compensate for the ascender of the text. Of course, 1 staff space is\n  // a very poor approximation.\n  //\n  // This will be deprecated in the future. This is a temporary solution until\n  // we have more robust text metrics.\n  TEXT_HEIGHT_OFFSET_HACK: 1,\n\n  /* Kerning (DEPRECATED) */\n  IsKerned: true,\n\n  clefProperties: (clef: string): { line_shift: number } => {\n    const values: Record<string, { line_shift: number }> = {\n      treble: { line_shift: 0 },\n      bass: { line_shift: 6 },\n      tenor: { line_shift: 4 },\n      alto: { line_shift: 3 },\n      soprano: { line_shift: 1 },\n      percussion: { line_shift: 0 },\n      'mezzo-soprano': { line_shift: 2 },\n      'baritone-c': { line_shift: 5 },\n      'baritone-f': { line_shift: 5 },\n      subbass: { line_shift: 7 },\n      french: { line_shift: -1 },\n    };\n    if (!clef) throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n\n    const props = values[clef];\n    if (!props) throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n\n    return props;\n  },\n\n  /*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n  */\n  // eslint-disable-next-line\n  keyProperties(key: string, clef?: string, params?: any): any {\n    const noteValues: Record<\n      string,\n      {\n        index: number;\n        int_val?: number;\n        accidental?: string;\n        rest?: boolean;\n        octave?: number;\n        code?: string;\n        shift_right?: number;\n      }\n    > = {\n      C: { index: 0, int_val: 0 },\n      CN: { index: 0, int_val: 0, accidental: 'n' },\n      'C#': { index: 0, int_val: 1, accidental: '#' },\n      'C##': { index: 0, int_val: 2, accidental: '##' },\n      CB: { index: 0, int_val: 11, accidental: 'b' },\n      CBB: { index: 0, int_val: 10, accidental: 'bb' },\n      D: { index: 1, int_val: 2 },\n      DN: { index: 1, int_val: 2, accidental: 'n' },\n      'D#': { index: 1, int_val: 3, accidental: '#' },\n      'D##': { index: 1, int_val: 4, accidental: '##' },\n      DB: { index: 1, int_val: 1, accidental: 'b' },\n      DBB: { index: 1, int_val: 0, accidental: 'bb' },\n      E: { index: 2, int_val: 4 },\n      EN: { index: 2, int_val: 4, accidental: 'n' },\n      'E#': { index: 2, int_val: 5, accidental: '#' },\n      'E##': { index: 2, int_val: 6, accidental: '##' },\n      EB: { index: 2, int_val: 3, accidental: 'b' },\n      EBB: { index: 2, int_val: 2, accidental: 'bb' },\n      F: { index: 3, int_val: 5 },\n      FN: { index: 3, int_val: 5, accidental: 'n' },\n      'F#': { index: 3, int_val: 6, accidental: '#' },\n      'F##': { index: 3, int_val: 7, accidental: '##' },\n      FB: { index: 3, int_val: 4, accidental: 'b' },\n      FBB: { index: 3, int_val: 3, accidental: 'bb' },\n      G: { index: 4, int_val: 7 },\n      GN: { index: 4, int_val: 7, accidental: 'n' },\n      'G#': { index: 4, int_val: 8, accidental: '#' },\n      'G##': { index: 4, int_val: 9, accidental: '##' },\n      GB: { index: 4, int_val: 6, accidental: 'b' },\n      GBB: { index: 4, int_val: 5, accidental: 'bb' },\n      A: { index: 5, int_val: 9 },\n      AN: { index: 5, int_val: 9, accidental: 'n' },\n      'A#': { index: 5, int_val: 10, accidental: '#' },\n      'A##': { index: 5, int_val: 11, accidental: '##' },\n      AB: { index: 5, int_val: 8, accidental: 'b' },\n      ABB: { index: 5, int_val: 7, accidental: 'bb' },\n      B: { index: 6, int_val: 11 },\n      BN: { index: 6, int_val: 11, accidental: 'n' },\n      'B#': { index: 6, int_val: 12, accidental: '#' },\n      'B##': { index: 6, int_val: 13, accidental: '##' },\n      BB: { index: 6, int_val: 10, accidental: 'b' },\n      BBB: { index: 6, int_val: 9, accidental: 'bb' },\n      R: { index: 6, rest: true }, // Rest\n      X: {\n        index: 6,\n        accidental: '',\n        octave: 4,\n        code: 'noteheadXBlack',\n        shift_right: 5.5,\n      },\n    };\n\n    if (clef === undefined) {\n      clef = 'treble';\n    }\n\n    let options = { octave_shift: 0 };\n\n    if (typeof params === 'object') {\n      options = { ...options, ...params };\n    }\n\n    const pieces = key.split('/');\n\n    if (pieces.length < 2) {\n      throw new RuntimeError('BadArguments', `Key must have note + octave and an optional glyph: ${key}`);\n    }\n\n    const k = pieces[0].toUpperCase();\n    const value = noteValues[k];\n    if (!value) throw new RuntimeError('BadArguments', 'Invalid key name: ' + k);\n    if (value.octave) pieces[1] = value.octave.toString();\n\n    let octave = parseInt(pieces[1], 10);\n\n    // Octave_shift is the shift to compensate for clef 8va/8vb.\n    octave += -1 * options.octave_shift;\n\n    const base_index = octave * 7 - 4 * 7;\n    let line = (base_index + value.index) / 2;\n    line += Tables.clefProperties(clef).line_shift;\n\n    let stroke = 0;\n\n    if (line <= 0 && (line * 2) % 2 === 0) stroke = 1; // stroke up\n    if (line >= 6 && (line * 2) % 2 === 0) stroke = -1; // stroke down\n\n    // Integer value for note arithmetic.\n    const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : undefined;\n\n    /* Check if the user specified a glyph. */\n    const code = value.code;\n    const shift_right = value.shift_right;\n    let extraProps = {};\n    if (pieces.length > 2 && pieces[2]) {\n      const glyph_name = pieces[2].toUpperCase();\n      extraProps = customNoteHeads[glyph_name] || {};\n    }\n\n    return {\n      key: k,\n      octave,\n      line,\n      int_value,\n      accidental: value.accidental,\n      code,\n      stroke,\n      shift_right,\n      displaced: false,\n      ...extraProps,\n    };\n  },\n\n  integerToNote(integer?: number): string {\n    const table: Record<number, string> = {\n      0: 'C',\n      1: 'C#',\n      2: 'D',\n      3: 'D#',\n      4: 'E',\n      5: 'F',\n      6: 'F#',\n      7: 'G',\n      8: 'G#',\n      9: 'A',\n      10: 'A#',\n      11: 'B',\n    };\n\n    if (typeof integer === 'undefined') {\n      throw new RuntimeError('BadArguments', 'Undefined integer for integerToNote');\n    }\n\n    if (integer < -2) {\n      throw new RuntimeError('BadArguments', `integerToNote requires integer > -2: ${integer}`);\n    }\n\n    const noteValue = table[integer];\n    if (!noteValue) {\n      throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n    }\n\n    return noteValue;\n  },\n\n  tabToGlyph(fret: string, scale = 1.0): { text: string; code?: string; getWidth: () => number; shift_y: number } {\n    let glyph = undefined;\n    let width = 0;\n    let shift_y = 0;\n\n    if (fret.toUpperCase() === 'X') {\n      const glyphMetrics = new Glyph('accidentalDoubleSharp', Tables.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();\n      glyph = 'accidentalDoubleSharp';\n      if (glyphMetrics.width == undefined || glyphMetrics.height == undefined)\n        throw new RuntimeError('InvalidMetrics', 'Width and height required');\n      width = glyphMetrics.width;\n      shift_y = -glyphMetrics.height / 2;\n    } else {\n      width = Tables.textWidth(fret);\n    }\n\n    return {\n      text: fret,\n      code: glyph,\n      getWidth: () => width * scale,\n      shift_y,\n    };\n  },\n\n  textWidth(text: string): number {\n    return 7 * text.toString().length;\n  },\n\n  articulationCodes(artic: string): ArticulationStruct {\n    const articulations: Record<string, ArticulationStruct> = {\n      'a.': { code: 'augmentationDot', between_lines: true }, // Staccato\n      av: {\n        aboveCode: 'articStaccatissimoAbove',\n        belowCode: 'articStaccatissimoBelow',\n        between_lines: true,\n      }, // Staccatissimo\n      'a>': {\n        aboveCode: 'articAccentAbove',\n        belowCode: 'articAccentBelow',\n        between_lines: true,\n      }, // Accent\n      'a-': {\n        aboveCode: 'articTenutoAbove',\n        belowCode: 'articTenutoBelow',\n        between_lines: true,\n      }, // Tenuto\n      'a^': {\n        aboveCode: 'articMarcatoAbove',\n        belowCode: 'articMarcatoBelow',\n        between_lines: false,\n      }, // Marcato\n      'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false }, // Left hand pizzicato\n      ao: {\n        aboveCode: 'pluckedSnapPizzicatoAbove',\n        belowCode: 'pluckedSnapPizzicatoBelow',\n        between_lines: false,\n      }, // Snap pizzicato\n      ah: { code: 'stringsHarmonic', between_lines: false }, // Natural harmonic or open note\n      'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false }, // Fermata\n      'a@a': { code: 'fermataAbove', between_lines: false }, // Fermata above staff\n      'a@u': { code: 'fermataBelow', between_lines: false }, // Fermata below staff\n      'a|': { code: 'stringsUpBow', between_lines: false }, // Bow up - up stroke\n      am: { code: 'stringsDownBow', between_lines: false }, // Bow down - down stroke\n      'a,': { code: 'pictChokeCymbal', between_lines: false }, // Choked\n    };\n    return articulations[artic];\n  },\n\n  accidentalMap: accidentals,\n\n  accidentalCodes(acc: string): { code: string; parenRightPaddingAdjustment: number } {\n    return accidentals[acc];\n  },\n\n  accidentalColumnsTable: {\n    1: {\n      a: [1],\n      b: [1],\n    },\n    2: {\n      a: [1, 2],\n    },\n    3: {\n      a: [1, 3, 2],\n      b: [1, 2, 1],\n      second_on_bottom: [1, 2, 3],\n    },\n    4: {\n      a: [1, 3, 4, 2],\n      b: [1, 2, 3, 1],\n      spaced_out_tetrachord: [1, 2, 1, 2],\n    },\n    5: {\n      a: [1, 3, 5, 4, 2],\n      b: [1, 2, 4, 3, 1],\n      spaced_out_pentachord: [1, 2, 3, 2, 1],\n      very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n      a: [1, 3, 5, 6, 4, 2],\n      b: [1, 2, 4, 5, 3, 1],\n      spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n      very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n    },\n  } as Record<number, { [name: string]: number[] }>,\n\n  ornamentCodes(acc: string): { code: string } {\n    const ornaments: Record<string, { code: string }> = {\n      mordent: { code: 'ornamentShortTrill' },\n      mordent_inverted: { code: 'ornamentMordent' },\n      turn: { code: 'ornamentTurn' },\n      turn_inverted: { code: 'ornamentTurnSlash' },\n      tr: { code: 'ornamentTrill' },\n      upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },\n      downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\n      prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },\n      pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },\n      upmordent: { code: 'ornamentPrecompSlideTrillBach' },\n      downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\n      lineprall: { code: 'ornamentPrecompAppoggTrill' },\n      prallprall: { code: 'ornamentTremblement' },\n      scoop: { code: 'brassScoop' },\n      doit: { code: 'brassDoitMedium' },\n      fall: { code: 'brassFallLipShort' },\n      doitLong: { code: 'brassLiftMedium' },\n      fallLong: { code: 'brassFallRoughMedium' },\n      bend: { code: 'brassBend' },\n      plungerClosed: { code: 'brassMuteClosed' },\n      plungerOpen: { code: 'brassMuteOpen' },\n      flip: { code: 'brassFlip' },\n      jazzTurn: { code: 'brassJazzTurn' },\n      smear: { code: 'brassSmear' },\n    };\n    return ornaments[acc];\n  },\n\n  keySignature(spec: string): { type: string; line: number }[] {\n    const keySpecs: Record<string, { acc?: string; num: number }> = {\n      C: { num: 0 },\n      Am: { num: 0 },\n      F: { acc: 'b', num: 1 },\n      Dm: { acc: 'b', num: 1 },\n      Bb: { acc: 'b', num: 2 },\n      Gm: { acc: 'b', num: 2 },\n      Eb: { acc: 'b', num: 3 },\n      Cm: { acc: 'b', num: 3 },\n      Ab: { acc: 'b', num: 4 },\n      Fm: { acc: 'b', num: 4 },\n      Db: { acc: 'b', num: 5 },\n      Bbm: { acc: 'b', num: 5 },\n      Gb: { acc: 'b', num: 6 },\n      Ebm: { acc: 'b', num: 6 },\n      Cb: { acc: 'b', num: 7 },\n      Abm: { acc: 'b', num: 7 },\n      G: { acc: '#', num: 1 },\n      Em: { acc: '#', num: 1 },\n      D: { acc: '#', num: 2 },\n      Bm: { acc: '#', num: 2 },\n      A: { acc: '#', num: 3 },\n      'F#m': { acc: '#', num: 3 },\n      E: { acc: '#', num: 4 },\n      'C#m': { acc: '#', num: 4 },\n      B: { acc: '#', num: 5 },\n      'G#m': { acc: '#', num: 5 },\n      'F#': { acc: '#', num: 6 },\n      'D#m': { acc: '#', num: 6 },\n      'C#': { acc: '#', num: 7 },\n      'A#m': { acc: '#', num: 7 },\n    };\n    const keySpec = keySpecs[spec];\n\n    if (!keySpec) {\n      throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n    }\n\n    if (!keySpec.acc) {\n      return [];\n    }\n\n    const accidentalList: Record<string, number[]> = {\n      b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n      '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n    };\n\n    const notes = accidentalList[keySpec.acc];\n\n    const acc_list = [];\n    for (let i = 0; i < keySpec.num; ++i) {\n      const line = notes[i];\n      acc_list.push({ type: keySpec.acc, line });\n    }\n\n    return acc_list;\n  },\n\n  unicode: {\n    // ♯ accidental sharp\n    sharp: String.fromCharCode(0x266f),\n    // ♭ accidental flat\n    flat: String.fromCharCode(0x266d),\n    // ♮ accidental natural\n    natural: String.fromCharCode(0x266e),\n    // △ major seventh\n    triangle: String.fromCharCode(0x25b3),\n    // ø half-diminished\n    'o-with-slash': String.fromCharCode(0x00f8),\n    // ° diminished\n    degrees: String.fromCharCode(0x00b0),\n    // ○ diminished\n    circle: String.fromCharCode(0x25cb),\n  },\n\n  // Used to convert duration aliases to the number based duration.\n  // If the input isn't an alias, simply return the input.\n  //\n  // example: 'q' -> '4', '8' -> '8'\n  sanitizeDuration(duration: string): string {\n    const durationAliases: Record<string, string> = {\n      w: '1',\n      h: '2',\n      q: '4',\n\n      // This is the default duration used to render bars (BarNote). Bars no longer\n      // consume ticks, so this should be a no-op.\n      //\n      // TODO(0xfe): This needs to be cleaned up.\n      b: '256',\n    };\n    const alias = durationAliases[duration];\n    if (alias !== undefined) {\n      duration = alias;\n    }\n\n    if (durations[duration] === undefined) {\n      throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n    }\n\n    return duration;\n  },\n\n  // Convert the `duration` to an fraction\n  durationToFraction(duration: string): Fraction {\n    return new Fraction().parse(Tables.sanitizeDuration(duration));\n  },\n\n  // Convert the `duration` to an number\n  durationToNumber(duration: string): number {\n    return Tables.durationToFraction(duration).value();\n  },\n\n  // Convert the `duration` to total ticks\n  durationToTicks(duration: string): number {\n    duration = Tables.sanitizeDuration(duration);\n\n    const ticks = durations[duration];\n    if (ticks === undefined) {\n      throw new RuntimeError('InvalidDuration');\n    }\n\n    return ticks;\n  },\n\n  // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n  // eslint-disable-next-line\n  getGlyphProps(duration: string, type?: string): any {\n    duration_codes = duration_codes || {\n      '1/2': {\n        common: {\n          stem: false,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: -Tables.STEM_HEIGHT,\n          stem_down_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Breve note\n            code_head: 'noteheadDoubleWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDoubleWhole', scale);\n            },\n          },\n          h: {\n            // Breve note harmonic\n            code_head: 'unpitchedPercussionClef1',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'unpitchedPercussionClef1', scale);\n            },\n          },\n          m: {\n            // Breve note muted -\n            code_head: 'vexNoteHeadMutedBreve',\n            stem_offset: 0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'vexNoteHeadMutedBreve', scale);\n            },\n          },\n          r: {\n            // Breve rest\n            code_head: 'restDoubleWhole',\n            rest: true,\n            position: 'B/5',\n            dot_shiftY: 0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'restDoubleWhole', scale);\n            },\n          },\n          s: {\n            // Breve note slash -\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      1: {\n        common: {\n          stem: false,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: -Tables.STEM_HEIGHT,\n          stem_down_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Whole note\n            code_head: 'noteheadWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadWhole', scale);\n            },\n          },\n          h: {\n            // Whole note harmonic\n            code_head: 'noteheadDiamondWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondWhole', scale);\n            },\n          },\n          m: {\n            // Whole note muted\n            code_head: 'noteheadXWhole',\n            stem_offset: -3,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXWhole', scale);\n            },\n          },\n          r: {\n            // Whole rest\n            code_head: 'restWhole',\n            rest: true,\n            position: 'D/5',\n            dot_shiftY: 0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'restWhole', scale);\n            },\n          },\n          s: {\n            // Whole note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      2: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Half note\n            code_head: 'noteheadHalf',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadHalf', scale);\n            },\n          },\n          h: {\n            // Half note harmonic\n            code_head: 'noteheadDiamondHalf',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondHalf', scale);\n            },\n          },\n          m: {\n            // Half note muted\n            code_head: 'noteheadXHalf',\n            stem_offset: -3,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXHalf', scale);\n            },\n          },\n          r: {\n            // Half rest\n            code_head: 'restHalf',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'restHalf', scale);\n            },\n          },\n          s: {\n            // Half note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      4: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Quarter note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Quarter harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Quarter muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Quarter rest\n            code_head: 'restQuarter',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.5,\n            line_below: 1.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'restQuarter', scale);\n            },\n          },\n          s: {\n            // Quarter slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      8: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          beam_count: 1,\n          code_flag_upstem: 'flag8thUp',\n          code_flag_downstem: 'flag8thDown',\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Eighth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Eighth note harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Eighth note muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Eighth rest\n            code_head: 'rest8th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 1.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest8th', scale);\n            },\n          },\n          s: {\n            // Eight slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      16: {\n        common: {\n          beam_count: 2,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag16thUp',\n          code_flag_downstem: 'flag16thDown',\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Sixteenth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Sixteenth note harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Sixteenth note muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Sixteenth rest\n            code_head: 'rest16th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 2.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest16th', scale);\n            },\n          },\n          s: {\n            // Sixteenth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      32: {\n        common: {\n          beam_count: 3,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag32ndUp',\n          code_flag_downstem: 'flag32ndDown',\n          stem_up_extension: 9,\n          stem_down_extension: 9,\n          tabnote_stem_up_extension: 8,\n          tabnote_stem_down_extension: 5,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Thirty-second note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Thirty-second harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Thirty-second muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Thirty-second rest\n            code_head: 'rest32nd',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 2.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest32nd', scale);\n            },\n          },\n          s: {\n            // Thirty-second slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      64: {\n        common: {\n          beam_count: 4,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag64thUp',\n          code_flag_downstem: 'flag64thDown',\n          stem_up_extension: 13,\n          stem_down_extension: 13,\n          tabnote_stem_up_extension: 12,\n          tabnote_stem_down_extension: 9,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Sixty-fourth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Sixty-fourth harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Sixty-fourth muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Sixty-fourth rest\n            code_head: 'rest64th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 3.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest64th', scale);\n            },\n          },\n          s: {\n            // Sixty-fourth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      128: {\n        common: {\n          beam_count: 5,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag128thUp',\n          code_flag_downstem: 'flag128thDown',\n          stem_up_extension: 22,\n          stem_down_extension: 22,\n          tabnote_stem_up_extension: 21,\n          tabnote_stem_down_extension: 18,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Hundred-twenty-eight note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Hundred-twenty-eight harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Hundred-twenty-eight muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Hundred-twenty-eight rest\n            code_head: 'rest128th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -2.5,\n            line_above: 3.0,\n            line_below: 3.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Flow.DEFAULT_FONT_STACK, 'rest128th', scale);\n            },\n          },\n          s: {\n            // Hundred-twenty-eight rest\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n    };\n\n    duration = Tables.sanitizeDuration(duration);\n    type = type || 'n'; // default type is a regular note\n\n    // Lookup duration for default glyph head code\n    const code = duration_codes[duration];\n    if (code === undefined) {\n      return;\n    }\n\n    // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\n    let glyphTypeProperties = code.type[type];\n\n    // If this isn't a standard type, then lookup the custom note head map.\n    if (glyphTypeProperties === undefined) {\n      // Try and get it from the custom list of note heads\n      const customGlyphTypeProperties = customNoteHeads[type.toUpperCase()];\n\n      // If not, then return with nothing\n      if (customGlyphTypeProperties === undefined) {\n        return;\n      }\n\n      // Otherwise set it as the code_head value\n      glyphTypeProperties = {\n        code_head: customGlyphTypeProperties.code,\n        ...customGlyphTypeProperties,\n      };\n    }\n\n    // Merge duration props for 'duration' with the note head properties.\n    return { ...code.common, ...glyphTypeProperties };\n  },\n\n  validTypes: {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n  } as Record<string, Record<string, string>>,\n\n  // Default time signature.\n  TIME4_4: {\n    num_beats: 4,\n    beat_value: 4,\n    resolution: RESOLUTION,\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\n\nexport interface NoteAccidental {\n  note: number;\n  accidental: AccidentalValue;\n}\n\nexport interface NoteParts {\n  root: string;\n  accidental: string;\n}\n\nexport interface KeyParts {\n  root: string;\n  accidental: string;\n  type: string;\n}\n\nexport type KeyValue = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\n\nexport type RootValue = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport type AccidentalValue = -2 | -1 | 0 | 1 | 2;\n\nexport interface Key {\n  root_index: RootValue;\n  int_val: KeyValue;\n}\n\n/** Music implements some standard music theory routines. */\nexport class Music {\n  /** Number of an canonical notes (12). */\n  static get NUM_TONES(): number {\n    return this.canonical_notes.length;\n  }\n\n  /** Names of root notes ('c', 'd',...) */\n  static get roots(): string[] {\n    return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n  }\n\n  /** Values of the root notes.*/\n  static get root_values(): KeyValue[] {\n    return [0, 2, 4, 5, 7, 9, 11];\n  }\n\n  /** Indices of the root notes.*/\n  static get root_indices(): Record<string, RootValue> {\n    return {\n      c: 0,\n      d: 1,\n      e: 2,\n      f: 3,\n      g: 4,\n      a: 5,\n      b: 6,\n    };\n  }\n\n  /** Names of canonical notes ('c', 'c#', 'd',...). */\n  static get canonical_notes(): string[] {\n    return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n  }\n\n  /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n  static get diatonic_intervals(): string[] {\n    return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n  }\n\n  /** NoteAccidental associated to diatonic intervals. */\n  static get diatonic_accidentals(): Record<string, NoteAccidental> {\n    return {\n      unison: { note: 0, accidental: 0 },\n      m2: { note: 1, accidental: -1 },\n      M2: { note: 1, accidental: 0 },\n      m3: { note: 2, accidental: -1 },\n      M3: { note: 2, accidental: 0 },\n      p4: { note: 3, accidental: 0 },\n      dim5: { note: 4, accidental: -1 },\n      p5: { note: 4, accidental: 0 },\n      m6: { note: 5, accidental: -1 },\n      M6: { note: 5, accidental: 0 },\n      b7: { note: 6, accidental: -1 },\n      M7: { note: 6, accidental: 0 },\n      octave: { note: 7, accidental: 0 },\n    };\n  }\n\n  /** Semitones shift associated to intervals .*/\n  static get intervals(): Record<string, number> {\n    return {\n      u: 0,\n      unison: 0,\n      m2: 1,\n      b2: 1,\n      min2: 1,\n      S: 1,\n      H: 1,\n      2: 2,\n      M2: 2,\n      maj2: 2,\n      T: 2,\n      W: 2,\n      m3: 3,\n      b3: 3,\n      min3: 3,\n      M3: 4,\n      3: 4,\n      maj3: 4,\n      4: 5,\n      p4: 5,\n      '#4': 6,\n      b5: 6,\n      aug4: 6,\n      dim5: 6,\n      5: 7,\n      p5: 7,\n      '#5': 8,\n      b6: 8,\n      aug5: 8,\n      6: 9,\n      M6: 9,\n      maj6: 9,\n      b7: 10,\n      m7: 10,\n      min7: 10,\n      dom7: 10,\n      M7: 11,\n      maj7: 11,\n      8: 12,\n      octave: 12,\n    };\n  }\n\n  /** Semitones shifts associated with scales. */\n  static get scales(): Record<string, number[]> {\n    return {\n      major: [2, 2, 1, 2, 2, 2, 1],\n      minor: [2, 1, 2, 2, 1, 2, 2],\n      ionian: [2, 2, 1, 2, 2, 2, 1],\n      dorian: [2, 1, 2, 2, 2, 1, 2],\n      phyrgian: [1, 2, 2, 2, 1, 2, 2],\n      lydian: [2, 2, 2, 1, 2, 2, 1],\n      mixolydian: [2, 2, 1, 2, 2, 1, 2],\n      aeolian: [2, 1, 2, 2, 1, 2, 2],\n      locrian: [1, 2, 2, 1, 2, 2, 2],\n    };\n  }\n\n  /** Scales associated with m (minor) and M (major). */\n  static get scaleTypes(): Record<string, number[]> {\n    return {\n      M: Music.scales.major,\n      m: Music.scales.minor,\n    };\n  }\n\n  /** Accidentals abbreviations. */\n  static get accidentals(): string[] {\n    return ['bb', 'b', 'n', '#', '##'];\n  }\n\n  /** Note values. */\n  static get noteValues(): Record<string, Key> {\n    return {\n      c: { root_index: 0, int_val: 0 },\n      cn: { root_index: 0, int_val: 0 },\n      'c#': { root_index: 0, int_val: 1 },\n      'c##': { root_index: 0, int_val: 2 },\n      cb: { root_index: 0, int_val: 11 },\n      cbb: { root_index: 0, int_val: 10 },\n      d: { root_index: 1, int_val: 2 },\n      dn: { root_index: 1, int_val: 2 },\n      'd#': { root_index: 1, int_val: 3 },\n      'd##': { root_index: 1, int_val: 4 },\n      db: { root_index: 1, int_val: 1 },\n      dbb: { root_index: 1, int_val: 0 },\n      e: { root_index: 2, int_val: 4 },\n      en: { root_index: 2, int_val: 4 },\n      'e#': { root_index: 2, int_val: 5 },\n      'e##': { root_index: 2, int_val: 6 },\n      eb: { root_index: 2, int_val: 3 },\n      ebb: { root_index: 2, int_val: 2 },\n      f: { root_index: 3, int_val: 5 },\n      fn: { root_index: 3, int_val: 5 },\n      'f#': { root_index: 3, int_val: 6 },\n      'f##': { root_index: 3, int_val: 7 },\n      fb: { root_index: 3, int_val: 4 },\n      fbb: { root_index: 3, int_val: 3 },\n      g: { root_index: 4, int_val: 7 },\n      gn: { root_index: 4, int_val: 7 },\n      'g#': { root_index: 4, int_val: 8 },\n      'g##': { root_index: 4, int_val: 9 },\n      gb: { root_index: 4, int_val: 6 },\n      gbb: { root_index: 4, int_val: 5 },\n      a: { root_index: 5, int_val: 9 },\n      an: { root_index: 5, int_val: 9 },\n      'a#': { root_index: 5, int_val: 10 },\n      'a##': { root_index: 5, int_val: 11 },\n      ab: { root_index: 5, int_val: 8 },\n      abb: { root_index: 5, int_val: 7 },\n      b: { root_index: 6, int_val: 11 },\n      bn: { root_index: 6, int_val: 11 },\n      'b#': { root_index: 6, int_val: 0 },\n      'b##': { root_index: 6, int_val: 1 },\n      bb: { root_index: 6, int_val: 10 },\n      bbb: { root_index: 6, int_val: 9 },\n    };\n  }\n\n  protected isValidNoteValue(note: number): boolean {\n    return note >= 0 && note < Music.canonical_notes.length;\n  }\n\n  protected isValidIntervalValue(interval: number): boolean {\n    return interval >= 0 && interval < Music.diatonic_intervals.length;\n  }\n\n  /** Return root and accidental associated to a note. */\n  getNoteParts(noteString: string): NoteParts {\n    if (!noteString || noteString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    if (noteString.length > 3) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    const note = noteString.toLowerCase();\n\n    const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n    const match = regex.exec(note);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n\n      return {\n        root,\n        accidental,\n      };\n    } else {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n  }\n\n  /** Return root, accidental and type associated to a key. */\n  getKeyParts(keyString: string): KeyParts {\n    if (!keyString || keyString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n    }\n\n    const key = keyString.toLowerCase();\n\n    // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n    const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n    const match = regex.exec(key);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n      let type = match[3];\n\n      // Unspecified type implies major\n      if (!type) type = 'M';\n\n      return {\n        root,\n        accidental,\n        type,\n      };\n    } else {\n      throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n    }\n  }\n\n  /** Note value associated to a note name. */\n  getNoteValue(noteString: string): number {\n    const value = Music.noteValues[noteString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n    }\n    return value.int_val;\n  }\n\n  /** Interval value associated to an interval name. */\n  getIntervalValue(intervalString: string): number {\n    const value = Music.intervals[intervalString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n    }\n    return value;\n  }\n\n  /** Canonical note name associated to a value. */\n  getCanonicalNoteName(noteValue: number): string {\n    if (!this.isValidNoteValue(noteValue)) {\n      throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n    }\n    return Music.canonical_notes[noteValue];\n  }\n\n  /** Interval name associated to a value. */\n  getCanonicalIntervalName(intervalValue: number): string {\n    if (!this.isValidIntervalValue(intervalValue)) {\n      throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n    }\n    return Music.diatonic_intervals[intervalValue];\n  }\n\n  /**\n   * Given a note, interval, and interval direction, produce the relative note.\n   */\n  getRelativeNoteValue(noteValue: number, intervalValue: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n    if (sum < 0) sum += Music.NUM_TONES;\n\n    return sum;\n  }\n\n  /**\n   * Given a root and note value, produce the relative note name.\n   */\n  getRelativeNoteName(root: string, noteValue: number): string {\n    const parts = this.getNoteParts(root);\n    const rootValue = this.getNoteValue(parts.root);\n    let interval = noteValue - rootValue;\n\n    if (Math.abs(interval) > Music.NUM_TONES - 3) {\n      let multiplier = 1;\n      if (interval > 0) multiplier = -1;\n\n      // Possibly wrap around. (Add +1 for modulo operator)\n      const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n\n      if (Math.abs(reverse_interval) > 2) {\n        throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n      } else {\n        interval = reverse_interval;\n      }\n    }\n\n    if (Math.abs(interval) > 2) {\n      throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n    }\n\n    let relativeNoteName = parts.root;\n    if (interval > 0) {\n      for (let i = 1; i <= interval; ++i) {\n        relativeNoteName += '#';\n      }\n    } else if (interval < 0) {\n      for (let i = -1; i >= interval; --i) {\n        relativeNoteName += 'b';\n      }\n    }\n\n    return relativeNoteName;\n  }\n\n  /**\n   * Return scale tones, given intervals. Each successive interval is\n   * relative to the previous one, e.g., Major Scale:\n   *\n   *   TTSTTTS = [2,2,1,2,2,2,1]\n   *\n   * When used with key = 0, returns C scale (which is isomorphic to\n   * interval list).\n   */\n  getScaleTones(key: number, intervals: number[]): number[] {\n    const tones = [key];\n\n    let nextNote = key;\n    for (let i = 0; i < intervals.length; i++) {\n      nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n      if (nextNote !== key) tones.push(nextNote);\n    }\n\n    return tones;\n  }\n\n  /**\n   * Return the interval of a note, given a diatonic scale.\n   * e.g., given the scale C, and the note E, returns M3.\n   */\n  getIntervalBetween(note1: number, note2: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n      throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n    }\n\n    let difference = direction === 1 ? note2 - note1 : note1 - note2;\n\n    if (difference < 0) difference += Music.NUM_TONES;\n\n    return difference;\n  }\n\n  /**\n   * Create a scale map that represents the pitch state for a\n   * `keySignature`. For example, passing a `G` to `keySignature` would\n   * return a scale map with every note naturalized except for `F` which\n   * has an `F#` state.\n   */\n  createScaleMap(keySignature: string): Record<string, string> {\n    const keySigParts = this.getKeyParts(keySignature);\n    if (!keySigParts.type) throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n    const scaleName = Music.scaleTypes[keySigParts.type];\n\n    let keySigString = keySigParts.root;\n    if (keySigParts.accidental) keySigString += keySigParts.accidental;\n\n    if (!scaleName) throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n\n    const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n    const noteLocation = Music.root_indices[keySigParts.root];\n\n    const scaleMap = {} as Record<string, string>;\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n      let noteName = this.getRelativeNoteName(rootName, scale[i]);\n\n      if (noteName.length === 1) {\n        noteName += 'n';\n      }\n\n      scaleMap[rootName] = noteName;\n    }\n\n    return scaleMap;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { defined, RuntimeError } from './util';\nimport { Element } from './element';\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\n\nexport enum ModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n}\n\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\n\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n  /**\n   * Modifiers category string. Every modifier has a different category.\n   * The `ModifierContext` uses this to determine the type and order of the modifiers.\n   */\n  static get CATEGORY(): string {\n    return 'Modifier';\n  }\n\n  /** Modifiers can be positioned almost anywhere, relative to a note. */\n  static get Position(): typeof ModifierPosition {\n    return ModifierPosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      center: ModifierPosition.CENTER,\n      above: ModifierPosition.ABOVE,\n      below: ModifierPosition.BELOW,\n      left: ModifierPosition.LEFT,\n      right: ModifierPosition.RIGHT,\n    };\n  }\n\n  // Modifiers are attached to a note and an index. An index is a specific head in a chord.\n  protected note?: Note;\n  protected index?: number;\n\n  protected width: number;\n  protected text_line: number;\n  protected position: ModifierPosition;\n  protected y_shift: number;\n  protected x_shift: number;\n\n  private spacingFromNextModifier: number;\n  private modifierContext?: ModifierContext;\n\n  constructor() {\n    super();\n\n    this.width = 0;\n\n    // The `text_line` is reserved space above or below a stave.\n    this.text_line = 0;\n    this.position = Modifier.Position.LEFT;\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.spacingFromNextModifier = 0;\n  }\n\n  /** Called when position changes. */\n  protected reset(): void {\n    // DO NOTHING.\n  }\n\n  /** Get modifier widths. */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /** Set modifier widths. */\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n  getNote(): Note {\n    return defined(this.note, 'NoNote', 'Modifier has no note.');\n  }\n\n  /**\n   * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n   * Also verifies that the index is valid.\n   */\n  checkAttachedNote(): Note {\n    const category = this.getCategory();\n    defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n    return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n  }\n\n  /**\n   * Set attached note.\n   * @param note (`StaveNote`, `TabNote`, etc.)\n   */\n  setNote(note: Note): this {\n    this.note = note;\n    return this;\n  }\n\n  /** Get note index, which is a specific note in a chord. */\n  getIndex(): number | undefined {\n    return this.index;\n  }\n\n  /** Check and get note index, which is a specific note in a chord. */\n  checkIndex(): number {\n    return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n  }\n\n  /** Set note index, which is a specific note in a chord. */\n  setIndex(index: number): this {\n    this.index = index;\n    return this;\n  }\n\n  /** Get `ModifierContext`. */\n  getModifierContext(): ModifierContext | undefined {\n    return this.modifierContext;\n  }\n\n  /** Check and get `ModifierContext`. */\n  checkModifierContext(): ModifierContext {\n    return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');\n  }\n\n  /** Every modifier must be part of a `ModifierContext`. */\n  setModifierContext(c: ModifierContext): this {\n    this.modifierContext = c;\n    return this;\n  }\n\n  /** Get position. */\n  getPosition(): number {\n    return this.position;\n  }\n\n  /**\n   * Set position.\n   * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n   */\n  setPosition(position: string | number): this {\n    this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n    this.reset();\n    return this;\n  }\n\n  /** Set the `text_line` for the modifier. */\n  setTextLine(line: number): this {\n    this.text_line = line;\n    return this;\n  }\n\n  /** Shift modifier down `y` pixels. Negative values shift up. */\n  setYShift(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  /** Set spacing from next modifier. */\n  setSpacingFromNextModifier(x: number): void {\n    this.spacingFromNextModifier = x;\n  }\n\n  /** Get spacing from next modifier. */\n  getSpacingFromNextModifier(): number {\n    return this.spacingFromNextModifier;\n  }\n\n  /**\n   * Shift modifier `x` pixels in the direction of the modifier. Negative values\n   * shift reverse.\n   */\n  setXShift(x: number): this {\n    this.x_shift = 0;\n    if (this.position === Modifier.Position.LEFT) {\n      this.x_shift -= x;\n    } else {\n      this.x_shift += x;\n    }\n    return this;\n  }\n\n  /** Get shift modifier `x` */\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  /** Render the modifier onto the canvas. */\n  draw(): void {\n    this.checkContext();\n    throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n  }\n\n  // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n  alignSubNotesWithNote(subNotes: Note[], note: Note): void {\n    // Shift over the tick contexts of each note\n    const tickContext = note.getTickContext();\n    const metrics = tickContext.getMetrics();\n    const stave = note.getStave();\n    const subNoteXOffset =\n      tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n\n    subNotes.forEach((subNote) => {\n      const subTickContext = subNote.getTickContext();\n      if (stave) subNote.setStave(stave);\n      subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements dot modifiers for notes.\n\nimport { RuntimeError } from './util';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { ModifierContextState } from './modifiercontext';\nimport { isGraceNote, isStaveNote, isTabNote } from './typeguard';\n\nexport class Dot extends Modifier {\n  static get CATEGORY(): string {\n    return 'Dot';\n  }\n\n  protected radius: number;\n  protected dot_shiftY: number;\n\n  // Arrange dots inside a ModifierContext.\n  static format(dots: Dot[], state: ModifierContextState): boolean {\n    const right_shift = state.right_shift;\n    const dot_spacing = 1;\n\n    if (!dots || dots.length === 0) return false;\n\n    const dot_list = [];\n    const max_shift_map: Record<string, number> = {};\n    for (let i = 0; i < dots.length; ++i) {\n      const dot = dots[i];\n      const note = dot.getNote();\n\n      let props;\n      let shift;\n\n      if (isStaveNote(note)) {\n        const index = dot.checkIndex();\n        props = note.getKeyProps()[index];\n        shift = note.getRightDisplacedHeadPx();\n      } else if (isTabNote(note)) {\n        props = { line: 0.5 }; // Shim key props for dot placement\n        shift = 0;\n      } else {\n        // note object is not StaveNote or TabNote.\n        throw new RuntimeError('Internal', 'Unexpected instance.');\n      }\n\n      const note_id = note.getAttribute('id');\n      dot_list.push({ line: props.line, note, note_id, dot });\n      max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\n    }\n\n    // Sort dots by line number.\n    dot_list.sort((a, b) => b.line - a.line);\n\n    let dot_shift = right_shift;\n    let x_width = 0;\n    let last_line = null;\n    let last_note = null;\n    let prev_dotted_space = null;\n    let half_shiftY = 0;\n\n    for (let i = 0; i < dot_list.length; ++i) {\n      const { dot, note, note_id, line } = dot_list[i];\n\n      // Reset the position of the dot every line.\n      if (line !== last_line || note !== last_note) {\n        dot_shift = max_shift_map[note_id];\n      }\n\n      if (!note.isRest() && line !== last_line) {\n        if (Math.abs(line % 1) === 0.5) {\n          // note is on a space, so no dot shift\n          half_shiftY = 0;\n        } else {\n          // note is on a line, so shift dot to space above the line\n          half_shiftY = 0.5;\n          if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {\n            // previous note on a space, so shift dot to space below the line\n            half_shiftY = -0.5;\n          } else if (line + half_shiftY === prev_dotted_space) {\n            // previous space is dotted, so shift dot to space below the line\n            half_shiftY = -0.5;\n          }\n        }\n      }\n\n      // convert half_shiftY to a multiplier for dots.draw()\n      if (note.isRest()) {\n        dot.dot_shiftY += -half_shiftY;\n      } else {\n        dot.dot_shiftY = -half_shiftY;\n      }\n      prev_dotted_space = line + half_shiftY;\n\n      dot.setXShift(dot_shift);\n      dot_shift += dot.getWidth() + dot_spacing; // spacing\n      x_width = dot_shift > x_width ? dot_shift : x_width;\n      last_line = line;\n      last_note = note;\n    }\n\n    // Update state.\n    state.right_shift += x_width;\n    return true;\n  }\n\n  constructor() {\n    super();\n\n    this.position = Modifier.Position.RIGHT;\n\n    this.radius = 2;\n    this.setWidth(5);\n    this.dot_shiftY = 0;\n  }\n\n  setNote(note: Note): this {\n    this.note = note;\n    if (isGraceNote(note)) {\n      this.radius *= 0.5;\n      this.setWidth(3);\n    }\n    return this;\n  }\n\n  setDotShiftY(y: number): this {\n    this.dot_shiftY = y;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const stave = note.checkStave();\n    const lineSpace = stave.getSpacingBetweenLines();\n\n    const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n\n    // Set the starting y coordinate to the base of the stem for TabNotes.\n    if (isTabNote(note)) {\n      start.y = note.getStemExtents().baseY;\n    }\n\n    const x = start.x + this.x_shift + this.width - this.radius;\n    const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\n\n    ctx.beginPath();\n    ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\n\nimport { RuntimeError, log } from './util';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { BoundingBox } from './boundingbox';\n\n// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Stem.DEBUG) log('Vex.Flow.Stem', args);\n}\n\nexport interface StemOptions {\n  stem_down_y_base_offset?: number;\n  stem_up_y_base_offset?: number;\n  stem_down_y_offset?: number;\n  stem_up_y_offset?: number;\n  stemletHeight?: number;\n  isStemlet?: boolean;\n  hide?: boolean;\n  stem_direction?: number;\n  stem_extension?: number;\n  y_bottom?: number;\n  y_top?: number;\n  x_end?: number;\n  x_begin?: number;\n}\n\nexport class Stem extends Element {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'Stem';\n  }\n\n  // Stem directions\n  static get UP(): number {\n    return 1;\n  }\n  static get DOWN(): number {\n    return -1;\n  }\n\n  // Theme\n  static get WIDTH(): number {\n    return Flow.STEM_WIDTH;\n  }\n  static get HEIGHT(): number {\n    return Flow.STEM_HEIGHT;\n  }\n\n  protected hide: boolean;\n  protected isStemlet: boolean;\n  protected stemletHeight: number;\n  protected x_begin: number;\n  protected x_end: number;\n  protected y_top: number;\n  protected stem_up_y_offset: number = 0;\n  protected y_bottom: number;\n  protected stem_down_y_offset: number = 0;\n  protected stem_up_y_base_offset: number = 0;\n  protected stem_down_y_base_offset: number = 0;\n  protected stem_direction: number;\n  protected stem_extension: number;\n  protected renderHeightAdjustment: number;\n\n  constructor(options?: StemOptions) {\n    super();\n\n    // Default notehead x bounds\n    this.x_begin = options?.x_begin || 0;\n    this.x_end = options?.x_end || 0;\n\n    // Y bounds for top/bottom most notehead\n    this.y_top = options?.y_top || 0;\n    this.y_bottom = options?.y_bottom || 0;\n\n    // Stem top extension\n    this.stem_extension = options?.stem_extension || 0;\n\n    // Direction of the stem\n    this.stem_direction = options?.stem_direction || 0;\n\n    // Flag to override all draw calls\n    this.hide = options?.hide || false;\n\n    this.isStemlet = options?.isStemlet || false;\n    this.stemletHeight = options?.stemletHeight || 0;\n\n    // Use to adjust the rendered height without affecting\n    // the results of `.getExtents()`\n    this.renderHeightAdjustment = 0;\n    this.setOptions(options);\n  }\n\n  setOptions(options?: StemOptions): void {\n    // Changing where the stem meets the head\n    this.stem_up_y_offset = options?.stem_up_y_offset || 0;\n    this.stem_down_y_offset = options?.stem_down_y_offset || 0;\n    this.stem_up_y_base_offset = options?.stem_up_y_base_offset || 0;\n    this.stem_down_y_base_offset = options?.stem_down_y_base_offset || 0;\n  }\n\n  // Set the x bounds for the default notehead\n  setNoteHeadXBounds(x_begin: number, x_end: number): this {\n    this.x_begin = x_begin;\n    this.x_end = x_end;\n    return this;\n  }\n\n  // Set the direction of the stem in relation to the noteheads\n  setDirection(direction: number): void {\n    this.stem_direction = direction;\n  }\n\n  // Set the extension for the stem, generally for flags or beams\n  setExtension(ext: number): void {\n    this.stem_extension = ext;\n  }\n\n  getExtension(): number {\n    return this.stem_extension;\n  }\n\n  // The the y bounds for the top and bottom noteheads\n  setYBounds(y_top: number, y_bottom: number): void {\n    this.y_top = y_top;\n    this.y_bottom = y_bottom;\n  }\n\n  // Gets the entire height for the stem\n  getHeight(): number {\n    const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;\n    const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension); // parentheses just for grouping.\n    return unsigned_height * this.stem_direction;\n  }\n\n  getBoundingBox(): BoundingBox {\n    throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n  }\n\n  // Get the y coordinates for the very base of the stem to the top of\n  // the extension\n  getExtents(): Record<string, number> {\n    const isStemUp = this.stem_direction === Stem.UP;\n    const ys = [this.y_top, this.y_bottom];\n    const stemHeight = Stem.HEIGHT + this.stem_extension;\n\n    const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n    const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n    const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n\n    return { topY: stemTipY, baseY: outerMostNoteheadY };\n  }\n\n  setVisibility(isVisible: boolean): this {\n    this.hide = !isVisible;\n    return this;\n  }\n\n  setStemlet(isStemlet: boolean, stemletHeight: number): this {\n    this.isStemlet = isStemlet;\n    this.stemletHeight = stemletHeight;\n    return this;\n  }\n\n  adjustHeightForFlag(): void {\n    this.renderHeightAdjustment = this.musicFont.lookupMetric('stem.heightAdjustmentForFlag', -3);\n  }\n\n  adjustHeightForBeam(): void {\n    this.renderHeightAdjustment = -Stem.WIDTH / 2;\n  }\n\n  // Render the stem onto the canvas\n  draw(): void {\n    this.setRendered();\n    if (this.hide) return;\n    const ctx = this.checkContext();\n\n    let stem_x;\n    let stem_y;\n    const stem_direction = this.stem_direction;\n\n    let y_base_offset: number = 0;\n    if (stem_direction === Stem.DOWN) {\n      // Down stems are rendered to the left of the head.\n      stem_x = this.x_begin;\n      stem_y = this.y_top + this.stem_down_y_offset;\n      y_base_offset = this.stem_down_y_base_offset;\n    } else {\n      // Up stems are rendered to the right of the head.\n      stem_x = this.x_end;\n      stem_y = this.y_bottom - this.stem_up_y_offset;\n      y_base_offset = this.stem_up_y_base_offset;\n    }\n\n    const stemHeight = this.getHeight();\n\n    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n\n    // The offset from the stem's base which is required fo satisfy the stemlet height\n    const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\n\n    // Draw the stem\n    ctx.save();\n    this.applyStyle(ctx);\n    ctx.beginPath();\n    ctx.setLineWidth(Stem.WIDTH);\n    ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n    ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n    ctx.stroke();\n    this.restoreStyle(ctx);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Stave } from './stave';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { Fraction } from './fraction';\nimport { Modifier } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { TickContext } from './tickcontext';\nimport { Tuplet } from './tuplet';\nimport { defined, RuntimeError } from './util';\nimport { Voice } from './voice';\n\n/** Formatter metrics interface */\nexport interface FormatterMetrics {\n  duration: string;\n  freedom: {\n    left: number;\n    right: number;\n  };\n  iterations: number;\n  space: {\n    used: number;\n    mean: number;\n    deviation: number;\n  };\n}\n\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport abstract class Tickable extends Element {\n  static get CATEGORY(): string {\n    return 'Tickable';\n  }\n\n  protected ignore_ticks: boolean;\n  protected tupletStack: Tuplet[];\n  protected tuplet?: Tuplet;\n  protected ticks: Fraction;\n  protected center_x_shift: number;\n  protected voice?: Voice;\n  protected width: number;\n  protected x_shift: number;\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected modifierContext?: ModifierContext;\n  protected tickContext?: TickContext;\n  protected modifiers: Modifier[];\n  protected tickMultiplier: Fraction;\n  protected formatterMetrics: FormatterMetrics;\n  protected intrinsicTicks: number;\n  protected align_center: boolean;\n\n  constructor() {\n    super();\n\n    // These properties represent the duration of\n    // this tickable element.\n    this.ticks = new Fraction(0, 1); // Fractional value of ticks\n    this.intrinsicTicks = 0; // Floating point value of ticks\n    this.tickMultiplier = new Fraction(1, 1);\n\n    // Formatter metrics\n    this.width = 0;\n    this.x_shift = 0; // Shift from tick context\n\n    this.modifiers = [];\n    this.tupletStack = [];\n\n    this.align_center = false;\n    this.center_x_shift = 0; // Shift from tick context if center aligned\n\n    // This flag tells the formatter to ignore this tickable during\n    // formatting and justification. It is set by tickables such as BarNote.\n    this.ignore_ticks = false;\n\n    // This is a space for an external formatting class or function to maintain\n    // metrics.\n    this.formatterMetrics = {\n      // The freedom of a tickable is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n\n      // The simplified rational duration of this tick as a string. It can be\n      // used as an index to a map or hashtable.\n      duration: '',\n\n      // The number of formatting iterations undergone.\n      iterations: 0,\n\n      // The space in pixels allocated by this formatter, along with the mean space\n      // for tickables of this duration, and the deviation from the mean.\n      space: {\n        used: 0,\n        mean: 0,\n        deviation: 0,\n      },\n    };\n  }\n\n  /** Reset the Tickable, this function will be overloaded. */\n  reset(): this {\n    return this;\n  }\n\n  /** Return the ticks. */\n  getTicks(): Fraction {\n    return this.ticks;\n  }\n\n  /** Check if it ignores the ticks. */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Ignore the ticks. */\n  setIgnoreTicks(flag: boolean): this {\n    this.ignore_ticks = flag;\n    return this;\n  }\n\n  /** Set width of note. Used by the formatter for positioning. */\n  setWidth(width: number): void {\n    this.width = width;\n  }\n\n  /** Get width of note. Used by the formatter for positioning. */\n  getWidth(): number {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n    }\n\n    return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n  }\n\n  /** Displace note by `x` pixels. Used by the formatter. */\n  setXShift(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  /** Get the `x` displaced pixels of the note. */\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  /** Get `x` position of this tick context. */\n  getX(): number {\n    const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n    return tickContext.getX() + this.x_shift;\n  }\n\n  /** Return the formatterMetrics. */\n  getFormatterMetrics(): FormatterMetrics {\n    return this.formatterMetrics;\n  }\n\n  /** Return the center `x` shift. */\n  getCenterXShift(): number {\n    if (this.isCenterAligned()) {\n      return this.center_x_shift;\n    }\n\n    return 0;\n  }\n\n  /** Set the center `x` shift. */\n  setCenterXShift(centerXShift: number): this {\n    this.center_x_shift = centerXShift;\n    return this;\n  }\n\n  // Check if tickable is center aligned. */\n  isCenterAligned(): boolean {\n    return this.align_center;\n  }\n\n  // Set/unset center alignment. */\n  setCenterAlignment(align_center: boolean): this {\n    this.align_center = align_center;\n    return this;\n  }\n\n  /**\n   * Return the associated voice. Every tickable must be associated with a voice.\n   * This allows formatters and preFormatter to associate them with the right modifierContexts.\n   */\n  getVoice(): Voice {\n    return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n  }\n\n  /** Set the associated voice. */\n  setVoice(voice: Voice): void {\n    this.voice = voice;\n  }\n\n  /** Get the tuplet. */\n  getTuplet(): Tuplet | undefined {\n    return this.tuplet;\n  }\n\n  /** Return the intrinsic ticks. */\n  getTupletStack(): Tuplet[] {\n    return this.tupletStack;\n  }\n\n  /**\n   * Reset the specific Tuplet if this is not provided, all tuplets are reset.\n   * Remove any prior tuplets from the tick calculation and\n   * reset the intrinsic tick value.\n   */\n  resetTuplet(tuplet?: Tuplet): this {\n    let noteCount;\n    let notesOccupied;\n    if (tuplet) {\n      const i = this.tupletStack.indexOf(tuplet);\n      if (i !== -1) {\n        this.tupletStack.splice(i, 1);\n        noteCount = tuplet.getNoteCount();\n        notesOccupied = tuplet.getNotesOccupied();\n\n        // Revert old multiplier by inverting numerator & denom.:\n        this.applyTickMultiplier(noteCount, notesOccupied);\n      }\n      return this;\n    }\n\n    while (this.tupletStack.length) {\n      tuplet = this.tupletStack.pop() as Tuplet;\n      noteCount = tuplet.getNoteCount();\n      notesOccupied = tuplet.getNotesOccupied();\n\n      // Revert old multiplier by inverting numerator & denom.:\n      this.applyTickMultiplier(noteCount, notesOccupied);\n    }\n    return this;\n  }\n\n  /** Attach to new tuplet. */\n  setTuplet(tuplet: Tuplet): this {\n    if (tuplet) {\n      this.tupletStack.push(tuplet);\n\n      const noteCount = tuplet.getNoteCount();\n      const notesOccupied = tuplet.getNotesOccupied();\n\n      this.applyTickMultiplier(notesOccupied, noteCount);\n    }\n\n    this.tuplet = tuplet;\n\n    return this;\n  }\n\n  /**\n   * Add self to the provided ModifierContext `mc`.\n   * If this tickable has modifiers, set modifierContext.\n   * @returns this\n   */\n  addToModifierContext(mc: ModifierContext): this {\n    this.modifierContext = mc;\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addMember(this.modifiers[i]);\n    }\n    this.modifierContext.addMember(this);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Optional, if tickable has modifiers, associate a Modifier. */\n  // eslint-disable-next-line\n  addModifier(mod: Modifier, ...optionalArgs: any[]): this {\n    this.modifiers.push(mod);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the list of associated modifiers. */\n  getModifiers(): Modifier[] {\n    return this.modifiers;\n  }\n\n  /** Set the Tick Context. */\n  setTickContext(tc: TickContext): void {\n    this.tickContext = tc;\n    this.setPreFormatted(false);\n  }\n\n  checkTickContext(message = 'Tickable has no tick context.'): TickContext {\n    return defined(this.tickContext, 'NoTickContext', message);\n  }\n\n  /** Preformat the Tickable. */\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.width = 0;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      this.width += this.modifierContext.getWidth();\n    }\n  }\n\n  /** Set preformatted status. */\n  setPreFormatted(value: boolean): void {\n    this.preFormatted = value;\n  }\n\n  /** Postformat the Tickable. */\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n\n  /** Return the intrinsic ticks. */\n  getIntrinsicTicks(): number {\n    return this.intrinsicTicks;\n  }\n\n  /** Set the intrinsic ticks. */\n  setIntrinsicTicks(intrinsicTicks: number): void {\n    this.intrinsicTicks = intrinsicTicks;\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Get the tick multiplier. */\n  getTickMultiplier(): Fraction {\n    return this.tickMultiplier;\n  }\n\n  /** Apply a tick multiplier. */\n  applyTickMultiplier(numerator: number, denominator: number): void {\n    this.tickMultiplier.multiply(numerator, denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Set the duration. */\n  setDuration(duration: Fraction): void {\n    const ticks = duration.numerator * (Flow.RESOLUTION / duration.denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(ticks);\n    this.intrinsicTicks = this.ticks.value();\n  }\n\n  getAbsoluteX(): number {\n    const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n    return tickContext.getX();\n  }\n\n  /** Attach this note to a modifier context. */\n  setModifierContext(mc?: ModifierContext): this {\n    this.modifierContext = mc;\n    return this;\n  }\n\n  /** Get `ModifierContext`. */\n  getModifierContext(): ModifierContext | undefined {\n    return this.modifierContext;\n  }\n\n  /** Check and get `ModifierContext`. */\n  checkModifierContext(): ModifierContext {\n    return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n  }\n\n  /** Get the target stave. */\n  abstract getStave(): Stave | undefined;\n\n  /** Set the target stave. */\n  abstract setStave(stave: Stave): this;\n\n  // eslint-disable-next-line\n  abstract getMetrics(): any;\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Beam } from './beam';\nimport { RuntimeError, drawDot, defined } from './util';\nimport { Flow } from './flow';\nimport { Fraction } from './fraction';\nimport { GlyphProps } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stave } from './stave';\nimport { Stroke } from './strokes';\nimport { Tickable } from './tickable';\nimport { TickContext } from './tickcontext';\nimport { KeyProps, RenderContext } from './types/common';\nimport { Voice } from './voice';\n\nexport interface NoteMetrics {\n  /** The total width of the note (including modifiers). */\n  width: number;\n  glyphWidth?: number;\n  /** The width of the note head only. */\n  notePx: number;\n  /** Start `X` for left modifiers. */\n  modLeftPx: number;\n  /** Start `X` for right modifiers. */\n  modRightPx: number;\n  /** Extra space on left of note. */\n  leftDisplacedHeadPx: number;\n  glyphPx: number;\n  /** Extra space on right of note. */\n  rightDisplacedHeadPx: number;\n}\n\nexport interface NoteDuration {\n  duration: string;\n  dots: number;\n  type: string;\n}\n\nexport interface NoteRenderOptions {\n  draw_stem_through_stave?: boolean;\n  draw_dots?: boolean;\n  draw_stem?: boolean;\n  y_shift: number;\n  extend_left?: number;\n  extend_right?: number;\n  glyph_font_scale: number;\n  annotation_spacing: number;\n  glyph_font_size?: number;\n  scale: number;\n  font: string;\n  stroke_px: number;\n}\n\nexport interface ParsedNote {\n  duration: string;\n  type: string;\n  customTypes: string[];\n  dots: number;\n  ticks: number;\n}\n\nexport interface NoteStruct {\n  /** Array of pitches, e.g: `['c/4', 'e/4', 'g/4']` */\n  keys?: string[];\n  /** The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.). */\n  duration?: string;\n  line?: number;\n  /** The number of dots, which affects the duration. */\n  dots?: number;\n  /** The note type (e.g., `r` for rest, `s` for slash notes, etc.). */\n  type?: string;\n  align_center?: boolean;\n  duration_override?: Fraction;\n}\n\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport abstract class Note extends Tickable {\n  static get CATEGORY(): string {\n    return 'Note';\n  }\n\n  keys: string[];\n  keyProps: KeyProps[];\n\n  protected stave?: Stave;\n  render_options: NoteRenderOptions;\n  protected duration: string;\n  protected dots: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected noteType: string;\n  protected customGlyphs: GlyphProps[];\n  protected ys: number[];\n  // eslint-disable-next-line\n  protected glyph?: any;\n  protected customTypes: string[];\n  protected playNote?: Note;\n  protected beam?: Beam;\n\n  /** Debug helper. Displays various note metrics for the given note. */\n  static plotMetrics(ctx: RenderContext, note: Tickable, yPos: number): void {\n    const metrics = note.getMetrics();\n    const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n    const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n    const xAbs = note.getAbsoluteX();\n    const xPost1 = note.getAbsoluteX() + metrics.notePx;\n    const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n    const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n    const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);\n\n    const xWidth = xEnd - xStart;\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n    ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n\n    const y = yPos + 7;\n    function stroke(x1: number, x2: number, color: string, yy: number = y) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(3);\n      ctx.moveTo(x1 + note.getXShift(), yy);\n      ctx.lineTo(x2 + note.getXShift(), yy);\n      ctx.stroke();\n    }\n\n    stroke(xStart, xPre1, 'red');\n    stroke(xPre1, xAbs, '#999');\n    stroke(xAbs, xPost1, 'green');\n    stroke(xPost1, xPost2, '#999');\n    stroke(xPost2, xEnd, 'red');\n    stroke(xEnd, xFreedomRight, '#DD0');\n    stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n    drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n\n    const formatterMetrics = note.getFormatterMetrics();\n    if (formatterMetrics.iterations > 0) {\n      const spaceDeviation = formatterMetrics.space.deviation;\n      const prefix = spaceDeviation >= 0 ? '+' : '';\n      ctx.setFillStyle('red');\n      ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n    }\n    ctx.restore();\n  }\n\n  protected static parseDuration(durationString?: string): NoteDuration | undefined {\n    if (!durationString) {\n      return undefined;\n    }\n    const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n    const result = regexp.exec(durationString);\n    if (!result) {\n      return undefined;\n    }\n\n    const duration = result[1];\n    const dots = result[2].length;\n    const type = result[3] || 'n';\n\n    return { duration, dots, type };\n  }\n\n  protected static parseNoteStruct(noteStruct: NoteStruct): ParsedNote | undefined {\n    // Preserve backwards-compatibility\n    const durationProps = Note.parseDuration(noteStruct.duration);\n    if (!durationProps) {\n      return undefined;\n    }\n\n    // If specified type is invalid, return undefined\n    let type = noteStruct.type;\n    if (type && !Flow.validTypes[type]) {\n      return undefined;\n    }\n\n    // If no type specified, check duration or custom types\n    const customTypes: string[] = [];\n    if (!type) {\n      type = durationProps.type || 'n';\n\n      // If we have keys, try and check if we've got a custom glyph\n      if (noteStruct.keys !== undefined) {\n        noteStruct.keys.forEach((k, i) => {\n          const result = k.split('/');\n          // We have a custom glyph specified after the note eg. /X2\n          customTypes[i] = (result && result.length === 3 ? result[2] : type) as string;\n        });\n      }\n    }\n\n    // Calculate the tick duration of the note\n    let ticks = Flow.durationToTicks(durationProps.duration);\n    if (!ticks) {\n      return undefined;\n    }\n\n    // Are there any dots?\n    const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n    if (typeof dots !== 'number') {\n      return undefined;\n    }\n\n    // Add ticks as necessary depending on the numbr of dots\n    let currentTicks = ticks;\n    for (let i = 0; i < dots; i++) {\n      if (currentTicks <= 1) return undefined;\n\n      currentTicks = currentTicks / 2;\n      ticks += currentTicks;\n    }\n\n    return {\n      duration: durationProps.duration,\n      type,\n      customTypes,\n      dots,\n      ticks,\n    };\n  }\n\n  /**\n   * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n   * positioning and layout.\n   *\n   * @param noteStruct To create a new note you need to provide a `noteStruct`.\n   */\n  constructor(noteStruct: NoteStruct) {\n    super();\n\n    if (!noteStruct) {\n      throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n    }\n\n    /** Parses `noteStruct` and get note properties. */\n    const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n    if (!parsedNoteStruct) {\n      throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n    }\n\n    // Set note properties from parameters.\n    this.keys = noteStruct.keys || [];\n    // per-pitch properties\n    this.keyProps = [];\n\n    this.duration = parsedNoteStruct.duration;\n    this.dots = parsedNoteStruct.dots;\n    this.noteType = parsedNoteStruct.type;\n    this.customTypes = parsedNoteStruct.customTypes;\n\n    if (noteStruct.duration_override) {\n      // Custom duration\n      this.setDuration(noteStruct.duration_override);\n    } else {\n      // Default duration\n      this.setIntrinsicTicks(parsedNoteStruct.ticks);\n    }\n\n    this.modifiers = [];\n\n    // Get the glyph code for this note from the font.\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n    this.customGlyphs = this.customTypes.map((t) => Flow.getGlyphProps(this.duration, t));\n\n    // Note to play for audio players.\n    this.playNote = undefined;\n\n    // Positioning contexts used by the Formatter.\n    this.ignore_ticks = false;\n\n    // Positioning variables\n    this.width = 0; // Width in pixels calculated after preFormat\n    this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n    this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n    this.x_shift = 0; // X shift from tick context X\n    this.preFormatted = false; // Is this note preFormatted?\n    this.ys = []; // list of y coordinates for each note\n    // we need to hold on to these for ties and beams.\n\n    if (noteStruct.align_center) {\n      this.setCenterAlignment(noteStruct.align_center);\n    }\n\n    // The render surface.\n    this.render_options = {\n      annotation_spacing: 5,\n      glyph_font_scale: 1,\n      stroke_px: 1,\n      scale: 1,\n      font: '',\n      y_shift: 0,\n    };\n  }\n\n  /**\n   * Get the play note, which is arbitrary data that can be used by an\n   * audio player.\n   */\n  getPlayNote(): Note | undefined {\n    return this.playNote;\n  }\n\n  /**\n   * Set the play note, which is arbitrary data that can be used by an\n   * audio player.\n   */\n  setPlayNote(note: Note): this {\n    this.playNote = note;\n    return this;\n  }\n\n  /**\n   * @returns true if this note is a type of rest.\n   *\n   * Rests don't have pitches, but take up space in the score.\n   * Subclasses should override this default implementation.\n   */\n  isRest(): boolean {\n    return false;\n  }\n\n  /** Add stroke. */\n  addStroke(index: number, stroke: Stroke): this {\n    stroke.setNote(this);\n    stroke.setIndex(index);\n    this.modifiers.push(stroke);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the target stave. */\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  /** Check and get the target stave. */\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  /** Set the target stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n    this.setContext(this.stave.getContext());\n    return this;\n  }\n\n  /** Get spacing to the left of the notes. */\n  getLeftDisplacedHeadPx(): number {\n    return this.leftDisplacedHeadPx;\n  }\n\n  /** Get spacing to the right of the notes. */\n  getRightDisplacedHeadPx(): number {\n    return this.rightDisplacedHeadPx;\n  }\n\n  /** Set spacing to the left of the notes. */\n  setLeftDisplacedHeadPx(x: number): this {\n    this.leftDisplacedHeadPx = x;\n    return this;\n  }\n\n  /** Set spacing to the right of the notes. */\n  setRightDisplacedHeadPx(x: number): this {\n    this.rightDisplacedHeadPx = x;\n    return this;\n  }\n\n  /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Get the stave line number for the note. */\n  // eslint-disable-next-line\n  getLineNumber(isTopNote?: boolean): number {\n    return 0;\n  }\n\n  /** Get the stave line number for rest. */\n  getLineForRest(): number {\n    return 0;\n  }\n\n  /** Get the glyph associated with this note. */\n  // eslint-disable-next-line\n  getGlyph(): any {\n    return this.glyph;\n  }\n\n  /** Get the glyph width. */\n  getGlyphWidth(): number {\n    // TODO: FIXME (multiple potential values for this.glyph)\n    if (this.glyph) {\n      if (this.glyph.getMetrics) {\n        return this.glyph.getMetrics().width;\n      } else if (this.glyph.getWidth) {\n        return this.glyph.getWidth(this.render_options.glyph_font_scale);\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Set Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  setYs(ys: number[]): this {\n    this.ys = ys;\n    return this;\n  }\n\n  /**\n   * Get Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  getYs(): number[] {\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n    }\n\n    return this.ys;\n  }\n\n  /**\n   * Get the Y position of the space above the stave onto which text can\n   * be rendered.\n   */\n  getYForTopText(text_line: number): number {\n    return this.checkStave().getYForTopText(text_line);\n  }\n\n  /** Return the voice that this note belongs in. */\n  getVoice(): Voice {\n    if (!this.voice) throw new RuntimeError('NoVoice', 'Note has no voice.');\n    return this.voice;\n  }\n\n  /** Attach this note to `voice`. */\n  setVoice(voice: Voice): this {\n    this.voice = voice;\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the `TickContext` for this note. */\n  getTickContext(): TickContext {\n    return this.checkTickContext();\n  }\n\n  /** Set the `TickContext` for this note. */\n  setTickContext(tc: TickContext): this {\n    this.tickContext = tc;\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Accessor to duration. */\n  getDuration(): string {\n    return this.duration;\n  }\n\n  /** Accessor to isDotted. */\n  isDotted(): boolean {\n    return this.dots > 0;\n  }\n\n  /** Accessor to hasStem. */\n  hasStem(): boolean {\n    return false;\n  }\n\n  /** Accessor to note type. */\n  getNoteType(): string {\n    return this.noteType;\n  }\n\n  /** Get the beam. */\n  getBeam(): Beam | undefined {\n    return this.beam;\n  }\n\n  /** Check and get the beam. */\n  checkBeam(): Beam {\n    return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n  }\n\n  /** Check it has a beam. */\n  hasBeam(): boolean {\n    return this.beam != undefined;\n  }\n\n  /** Set the beam. */\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    return this;\n  }\n\n  /**\n   * Attach a modifier to this note.\n   * @param modifier the Modifier to add.\n   * @param index of the key to modify.\n   * @returns this\n   */\n  addModifier(modifier: Modifier, index: number = 0): this {\n    // Legacy versions of VexFlow had the two parameters swapped.\n    // We check here and throw an error if the argument types are not correct.\n    if (typeof modifier !== 'object' || typeof index !== 'number') {\n      throw new RuntimeError(\n        'WrongParams',\n        'Call signature to addModifier not supported, use addModifier(modifier: Modifier, index) instead.'\n      );\n    }\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the coordinates for where modifiers begin. */\n  // eslint-disable-next-line\n  getModifierStartXY(position?: number, index?: number, options?: any): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    return {\n      x: this.getAbsoluteX(),\n      y: this.ys[0],\n    };\n  }\n\n  /** Get the metrics for this note. */\n  getMetrics(): NoteMetrics {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n    }\n\n    const modLeftPx = this.modifierContext ? this.modifierContext.state.left_shift : 0;\n    const modRightPx = this.modifierContext ? this.modifierContext.state.right_shift : 0;\n    const width = this.getWidth();\n    const glyphWidth = this.getGlyphWidth();\n    const notePx =\n      width -\n      modLeftPx - // subtract left modifiers\n      modRightPx - // subtract right modifiers\n      this.leftDisplacedHeadPx - // subtract left displaced head\n      this.rightDisplacedHeadPx; // subtract right displaced head\n\n    return {\n      // ----------\n      // NOTE: If you change this, remember to update MockTickable in the tests/ directory.\n      // --------------\n      width,\n      glyphWidth,\n      notePx,\n\n      // Modifier spacing.\n      modLeftPx,\n      modRightPx,\n\n      // Displaced note head on left or right.\n      leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n      rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n      glyphPx: 0,\n    };\n  }\n\n  /**\n   * Get the absolute `X` position of this note's tick context. This\n   * excludes x_shift, so you'll need to factor it in if you're\n   * looking for the post-formatted x-position.\n   */\n  getAbsoluteX(): number {\n    const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n    // Position note to left edge of tick context.\n    let x = tickContext.getX();\n    if (this.stave) {\n      x += this.stave.getNoteStartX() + this.musicFont.lookupMetric('stave.padding');\n    }\n    if (this.isCenterAligned()) {\n      x += this.getCenterXShift();\n    }\n    return x;\n  }\n\n  /** Get the direction of the stem. */\n  getStemDirection(): number {\n    throw new RuntimeError('NoStem', 'No stem attached to this note.');\n  }\n\n  /** Get the top and bottom `y` values of the stem. */\n  getStemExtents(): Record<string, number> {\n    throw new RuntimeError('NoStem', 'No stem attached to this note.');\n  }\n\n  /** Get the `x` coordinate to the right of the note. */\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieStartX += note_glyph_width / 2;\n    tieStartX += -this.width / 2 + this.width + 2;\n\n    return tieStartX;\n  }\n\n  /** Get the `x` coordinate to the left of the note. */\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieEndX += note_glyph_width / 2;\n    tieEndX -= this.width / 2 + 2;\n\n    return tieEndX;\n  }\n\n  // Get the pitches in the note\n  getKeys(): string[] {\n    return this.keys;\n  }\n\n  // Get the properties for all the keys in the note\n  getKeyProps(): KeyProps[] {\n    return this.keyProps;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { Flow } from './flow';\nimport { Note, NoteStruct } from './note';\nimport { Stem } from './stem';\nimport { Glyph, GlyphProps } from './glyph';\nimport { RenderContext } from './types/common';\nimport { BoundingBox } from './boundingbox';\nimport { Stave } from './stave';\nimport { ElementStyle } from './element';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (NoteHead.DEBUG) log('Vex.Flow.NoteHead', args);\n}\n\nexport interface NoteHeadStruct extends NoteStruct {\n  line?: number;\n  glyph_font_scale?: number;\n  slashed?: boolean;\n  style?: ElementStyle;\n  stem_down_x_offset?: number;\n  stem_up_x_offset?: number;\n  custom_glyph_code?: string;\n  x_shift?: number;\n  stem_direction?: number;\n  displaced?: boolean;\n  note_type?: string;\n  x?: number;\n  y?: number;\n  index?: number;\n}\n\n/**\n * Draw slashnote head manually. No glyph exists for this.\n * @param ctx the Canvas context\n * @param duration the duration of the note. ex: \"4\"\n * @param x the x coordinate to draw at\n * @param y the y coordinate to draw at\n * @param stem_direction the direction of the stem\n */\nfunction drawSlashNoteHead(\n  ctx: RenderContext,\n  duration: string,\n  x: number,\n  y: number,\n  stem_direction: number,\n  staveSpace: number\n) {\n  const width = Flow.SLASH_NOTEHEAD_WIDTH;\n  ctx.save();\n  ctx.setLineWidth(Flow.STEM_WIDTH);\n\n  let fill = false;\n\n  if (Flow.durationToNumber(duration) > 2) {\n    fill = true;\n  }\n\n  if (!fill) x -= (Flow.STEM_WIDTH / 2) * stem_direction;\n\n  ctx.beginPath();\n  ctx.moveTo(x, y + staveSpace);\n  ctx.lineTo(x, y + 1);\n  ctx.lineTo(x + width, y - staveSpace);\n  ctx.lineTo(x + width, y);\n  ctx.lineTo(x, y + staveSpace);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n\n  if (Flow.durationToFraction(duration).equals(0.5)) {\n    const breve_lines = [-3, -1, width + 1, width + 3];\n    for (let i = 0; i < breve_lines.length; i++) {\n      ctx.beginPath();\n      ctx.moveTo(x + breve_lines[i], y - 10);\n      ctx.lineTo(x + breve_lines[i], y + 11);\n      ctx.stroke();\n    }\n  }\n\n  ctx.restore();\n}\n\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'NoteHead';\n  }\n\n  glyph_code: string;\n\n  protected custom_glyph: boolean = false;\n  protected stem_up_x_offset: number = 0;\n  protected stem_down_x_offset: number = 0;\n  protected displaced: boolean;\n  protected stem_direction: number;\n\n  protected x: number;\n  protected y: number;\n  protected line: number;\n  protected index?: number;\n  protected slashed: boolean;\n\n  constructor(noteStruct: NoteHeadStruct) {\n    super(noteStruct);\n\n    this.index = noteStruct.index;\n    this.x = noteStruct.x || 0;\n    this.y = noteStruct.y || 0;\n    if (noteStruct.note_type) this.noteType = noteStruct.note_type;\n    this.displaced = noteStruct.displaced || false;\n    this.stem_direction = noteStruct.stem_direction || Stem.UP;\n    this.line = noteStruct.line || 0;\n\n    // Get glyph code based on duration and note type. This could be\n    // regular notes, rests, or other custom codes.\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    this.glyph_code = this.glyph.code_head;\n    this.x_shift = noteStruct.x_shift || 0;\n    if (noteStruct.custom_glyph_code) {\n      this.custom_glyph = true;\n      this.glyph_code = noteStruct.custom_glyph_code;\n      this.stem_up_x_offset = noteStruct.stem_up_x_offset || 0;\n      this.stem_down_x_offset = noteStruct.stem_down_x_offset || 0;\n    }\n\n    this.style = noteStruct.style;\n    this.slashed = noteStruct.slashed || false;\n\n    this.render_options = {\n      ...this.render_options,\n      // font size for note heads\n      glyph_font_scale: noteStruct.glyph_font_scale || Flow.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: 3,\n    };\n\n    this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));\n  }\n\n  /** Get the width of the notehead. */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /** Determine if the notehead is displaced. */\n  isDisplaced(): boolean {\n    return this.displaced === true;\n  }\n\n  /** Get the glyph data. */\n  getGlyph(): GlyphProps {\n    return this.glyph;\n  }\n\n  /** Set the X coordinate. */\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  /** Get the Y coordinate. */\n  getY(): number {\n    return this.y;\n  }\n\n  /** Set the Y coordinate. */\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  /** Get the stave line the notehead is placed on. */\n  getLine(): number {\n    return this.line;\n  }\n\n  /** Set the stave line the notehead is placed on. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Get the canvas `x` coordinate position of the notehead. */\n  getAbsoluteX(): number {\n    // If the note has not been preformatted, then get the static x value\n    // Otherwise, it's been formatted and we should use it's x value relative\n    // to its tick context\n    const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n\n    // For a more natural displaced notehead, we adjust the displacement amount\n    // by half the stem width in order to maintain a slight overlap with the stem\n    const displacementStemAdjustment = Stem.WIDTH / 2;\n    const fontShift = this.musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\n    const displacedFontShift = this.musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;\n\n    return (\n      x +\n      fontShift +\n      (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0)\n    );\n  }\n\n  /** Get the `BoundingBox` for the `NoteHead`. */\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n    const spacing = this.checkStave().getSpacingBetweenLines();\n    const half_spacing = spacing / 2;\n    const min_y = this.y - half_spacing;\n\n    return new BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n  }\n\n  /** Set notehead to a provided `stave`. */\n  setStave(stave: Stave): this {\n    const line = this.getLine();\n\n    this.stave = stave;\n    if (this.stave) {\n      this.setY(this.stave.getYForNote(line));\n      this.setContext(this.stave.getContext());\n    }\n    return this;\n  }\n\n  /** Pre-render formatting. */\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Draw the notehead. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let head_x = this.getAbsoluteX();\n    if (this.custom_glyph) {\n      // head_x += this.x_shift;\n      head_x += this.stem_direction === Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;\n    }\n\n    const y = this.y;\n\n    L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", head_x, y);\n\n    // Begin and end positions for head.\n    const stem_direction = this.stem_direction;\n    const glyph_font_scale = this.render_options.glyph_font_scale;\n\n    if (this.style) {\n      this.applyStyle(ctx);\n    }\n\n    const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\n    if (this.noteType === 's') {\n      const staveSpace = this.checkStave().getSpacingBetweenLines();\n      drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n    } else {\n      Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\n        font: this.musicFont,\n        category: this.custom_glyph ? `noteHead.custom.${categorySuffix}` : `noteHead.standard.${categorySuffix}`,\n      });\n    }\n\n    if (this.style) {\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\n\nimport { RuntimeError } from './util';\nimport { Flow } from './flow';\nimport { Stem, StemOptions } from './stem';\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { GlyphProps } from './glyph';\n\nexport abstract class StemmableNote extends Note {\n  static get CATEGORY(): string {\n    return 'StemmableNote';\n  }\n\n  stem_direction?: number;\n  stem?: Stem;\n\n  protected flag?: Glyph;\n  protected stem_extension_override?: number;\n\n  constructor(noteStruct: NoteStruct) {\n    super(noteStruct);\n  }\n\n  // Get and set the note's `Stem`\n  getStem(): Stem | undefined {\n    return this.stem;\n  }\n\n  checkStem(): Stem {\n    if (!this.stem) {\n      throw new RuntimeError('NoStem', 'No stem attached to instance');\n    }\n    return this.stem;\n  }\n\n  setStem(stem: Stem): this {\n    this.stem = stem;\n    return this;\n  }\n\n  // Builds and sets a new stem\n  buildStem(): this {\n    const stem = new Stem();\n    this.setStem(stem);\n    return this;\n  }\n\n  buildFlag(category = 'flag'): void {\n    const { glyph } = this;\n\n    if (this.hasFlag()) {\n      const flagCode = this.getStemDirection() === Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;\n\n      this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\n    }\n  }\n\n  // Get the custom glyph associated with the outer note head on the base of the stem.\n  getBaseCustomNoteHeadGlyph(): GlyphProps {\n    if (this.getStemDirection() === Stem.DOWN) {\n      return this.customGlyphs[this.customGlyphs.length - 1];\n    } else {\n      return this.customGlyphs[0];\n    }\n  }\n\n  // Get the full length of stem\n  getStemLength(): number {\n    return Stem.HEIGHT + this.getStemExtension();\n  }\n\n  // Get the number of beams for this duration\n  getBeamCount(): number {\n    const glyph = this.getGlyph();\n\n    if (glyph) {\n      return glyph.beam_count;\n    } else {\n      return 0;\n    }\n  }\n\n  // Get the minimum length of stem\n  getStemMinimumLength(): number {\n    const frac = Flow.durationToFraction(this.duration);\n    let length = frac.value() <= 1 ? 0 : 20;\n    // if note is flagged, cannot shorten beam\n    switch (this.duration) {\n      case '8':\n        if (this.beam == undefined) length = 35;\n        break;\n      case '16':\n        length = this.beam == undefined ? 35 : 25;\n        break;\n      case '32':\n        length = this.beam == undefined ? 45 : 35;\n        break;\n      case '64':\n        length = this.beam == undefined ? 50 : 40;\n        break;\n      case '128':\n        length = this.beam == undefined ? 55 : 45;\n        break;\n      default:\n        break;\n    }\n    return length;\n  }\n\n  // Get/set the direction of the stem\n  getStemDirection(): number {\n    if (!this.stem_direction) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem_direction;\n  }\n\n  setStemDirection(direction?: number): this {\n    if (!direction) direction = Stem.UP;\n    if (direction !== Stem.UP && direction !== Stem.DOWN) {\n      throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n    }\n\n    this.stem_direction = direction;\n\n    if (this.stem) {\n      this.stem.setDirection(direction);\n      this.stem.setExtension(this.getStemExtension());\n\n      // Lookup the base custom notehead (closest to the base of the stem) to extend or shorten\n      // the stem appropriately. If there's no custom note head, lookup the standard notehead.\n      const glyph = this.getBaseCustomNoteHeadGlyph() || this.getGlyph();\n\n      // Get the font-specific customizations for the note heads.\n      const offsets = this.musicFont.lookupMetric(`stem.noteHead.${glyph.code_head}`, {\n        offsetYBaseStemUp: 0,\n        offsetYTopStemUp: 0,\n        offsetYBaseStemDown: 0,\n        offsetYTopStemDown: 0,\n      });\n\n      // Configure the stem to use these offsets.\n      this.stem.setOptions({\n        stem_up_y_offset: offsets.offsetYTopStemUp, // glyph.stem_up_y_offset,\n        stem_down_y_offset: offsets.offsetYTopStemDown, // glyph.stem_down_y_offset,\n        stem_up_y_base_offset: offsets.offsetYBaseStemUp, // glyph.stem_up_y_base_offset,\n        stem_down_y_base_offset: offsets.offsetYBaseStemDown, // glyph.stem_down_y_base_offset,\n      });\n    }\n\n    // Reset and reformat everything.\n    this.reset();\n    if (this.hasFlag()) {\n      this.buildFlag();\n    }\n    this.beam = undefined;\n    if (this.preFormatted) {\n      this.preFormat();\n    }\n    return this;\n  }\n\n  // Get the `x` coordinate of the stem\n  getStemX(): number {\n    const x_begin = this.getAbsoluteX() + this.x_shift;\n    const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n    const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n    return stem_x;\n  }\n\n  // Get the `x` coordinate for the center of the glyph.\n  // Used for `TabNote` stems and stemlets over rests\n  getCenterGlyphX(): number {\n    return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n  }\n\n  // Get the stem extension for the current duration\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != undefined) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === Stem.UP ? glyph.stem_up_extension : glyph.stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Set the stem length to a specific. Will override the default length.\n  setStemLength(height: number): this {\n    this.stem_extension_override = height - Stem.HEIGHT;\n    return this;\n  }\n\n  // Get the top and bottom `y` values of the stem.\n  getStemExtents(): Record<string, number> {\n    if (!this.stem) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem.getExtents();\n  }\n\n  /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n  getYForTopText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n\n      return Math.min(\n        stave.getYForTopText(textLine),\n        extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n      );\n    } else {\n      return stave.getYForTopText(textLine);\n    }\n  }\n\n  /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n  getYForBottomText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n\n      return Math.max(\n        stave.getYForTopText(textLine),\n        extents.baseY + this.render_options.annotation_spacing * textLine\n      );\n    } else {\n      return stave.getYForBottomText(textLine);\n    }\n  }\n\n  hasFlag(): boolean {\n    return Flow.getGlyphProps(this.duration).flag && !this.beam;\n  }\n\n  /** Post formats the note. */\n  postFormat(): this {\n    this.beam?.postFormat();\n    this.postFormatted = true;\n\n    return this;\n  }\n\n  /** Renders the stem onto the canvas. */\n  drawStem(stemOptions: StemOptions): void {\n    this.checkContext();\n    this.setRendered();\n\n    this.setStem(new Stem(stemOptions));\n    this.stem?.setContext(this.getContext()).draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// *Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.*\n//\n// See `tests/stavenote_tests.ts` for usage examples.\n\nimport { RuntimeError, log, midLine, warn, defined } from './util';\nimport { Flow } from './flow';\nimport { BoundingBox } from './boundingbox';\nimport { Stem } from './stem';\nimport { NoteHead } from './notehead';\nimport { StemmableNote } from './stemmablenote';\nimport { StemOptions } from './stem';\nimport { Modifier } from './modifier';\nimport { Dot } from './dot';\nimport { Beam } from './beam';\nimport { ElementStyle } from './element';\nimport { Stave } from './stave';\nimport { Note, NoteStruct } from './note';\nimport { ModifierContextState } from './modifiercontext';\nimport { Accidental } from './accidental';\n\nexport interface StaveNoteHeadBounds {\n  y_top: number;\n  y_bottom: number;\n  displaced_x?: number;\n  non_displaced_x?: number;\n  highest_line: number;\n  lowest_line: number;\n  highest_displaced_line?: number;\n  lowest_displaced_line?: number;\n  highest_non_displaced_line: number;\n  lowest_non_displaced_line: number;\n}\n\nexport interface StaveNoteFormatSettings {\n  line: number;\n  maxLine: number;\n  minLine: number;\n  isrest: boolean;\n  stemDirection?: number;\n  stemMax: number;\n  stemMin: number;\n  voice_shift: number;\n  is_displaced: boolean;\n  note: StaveNote;\n}\n\nexport interface StaveNoteStruct extends NoteStruct {\n  /** `Stem.UP` or `Stem.DOWN`. */\n  stem_direction?: number;\n  auto_stem?: boolean;\n  stem_down_x_offset?: number;\n  stem_up_x_offset?: number;\n  stroke_px?: number;\n  glyph_font_scale?: number;\n  octave_shift?: number;\n  clef?: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (StaveNote.DEBUG) log('Vex.Flow.StaveNote', args);\n}\n\nconst isInnerNoteIndex = (note: StaveNote, index: number) =>\n  index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest: StaveNoteFormatSettings, note: StaveNoteFormatSettings, dir: number) {\n  const delta = (note.isrest ? 0.0 : 1.0) * dir;\n\n  rest.line += delta;\n  rest.maxLine += delta;\n  rest.minLine += delta;\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest: StaveNoteFormatSettings, noteU: StaveNoteFormatSettings, noteL: StaveNoteFormatSettings) {\n  const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n  rest.line -= delta;\n  rest.maxLine -= delta;\n  rest.minLine -= delta;\n}\n\nexport class StaveNote extends StemmableNote {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'StaveNote';\n  }\n\n  /**\n   * @deprecated Use Stem.UP.\n   */\n  static get STEM_UP(): number {\n    return Stem.UP;\n  }\n\n  /**\n   * @deprecated Use Stem.DOWN.\n   */\n  static get STEM_DOWN(): number {\n    return Stem.DOWN;\n  }\n\n  static get DEFAULT_LEDGER_LINE_OFFSET(): number {\n    return 3;\n  }\n\n  static get minNoteheadPadding(): number {\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('glyphs.noteHead.minPadding');\n  }\n\n  minLine: number = 0;\n  maxLine: number = 0;\n\n  protected readonly clef: string;\n  protected readonly octave_shift?: number;\n\n  protected displaced: boolean;\n  protected dot_shiftY: number;\n  protected use_default_head_x: boolean;\n  protected note_heads: NoteHead[];\n  protected ledgerLineStyle: ElementStyle;\n  protected flagStyle?: ElementStyle;\n\n  // ## Static Methods\n  //\n  // Format notes inside a ModifierContext.\n  static format(notes: StaveNote[], state: ModifierContextState): boolean {\n    if (!notes || notes.length < 2) return false;\n\n    // FIXME: VexFlow will soon require that a stave be set before formatting.\n    // Which, according to the below condition, means that following branch will\n    // always be taken and the rest of this function is dead code.\n    //\n    // Problematically, `Formatter#formatByY` was not designed to work for more\n    // than 2 voices (although, doesn't throw on this condition, just tries\n    // to power through).\n    //\n    // Based on the above:\n    //   * 2 voices can be formatted *with or without* a stave being set but\n    //     the output will be different\n    //   * 3 voices can only be formatted *without* a stave\n    if (notes[0].getStave()) {\n      StaveNote.formatByY(notes, state);\n      return true;\n    }\n\n    const notesList: StaveNoteFormatSettings[] = [];\n\n    for (let i = 0; i < notes.length; i++) {\n      const props = notes[i].getKeyProps();\n      const line = props[0].line;\n      let minL = props[props.length - 1].line;\n      const stemDirection = notes[i].getStemDirection();\n      const stemMax = notes[i].getStemLength() / 10;\n      const stemMin = notes[i].getStemMinimumLength() / 10;\n\n      let maxL;\n      if (notes[i].isRest()) {\n        maxL = line + notes[i].glyph.line_above;\n        minL = line - notes[i].glyph.line_below;\n      } else {\n        maxL = stemDirection === 1 ? props[props.length - 1].line + stemMax : props[props.length - 1].line;\n\n        minL = stemDirection === 1 ? props[0].line : props[0].line - stemMax;\n      }\n\n      notesList.push({\n        line: props[0].line, // note/rest base line\n        maxLine: maxL, // note/rest upper bounds line\n        minLine: minL, // note/rest lower bounds line\n        isrest: notes[i].isRest(),\n        stemDirection: stemDirection,\n        stemMax, // Maximum (default) note stem length;\n        stemMin, // minimum note stem length\n        voice_shift: notes[i].getVoiceShiftWidth(),\n        is_displaced: notes[i].isDisplaced(), // note manually displaced\n        note: notes[i],\n      });\n    }\n\n    const voices = notesList.length;\n\n    let noteU = notesList[0];\n    const noteM = voices > 2 ? notesList[1] : undefined;\n    let noteL = voices > 2 ? notesList[2] : notesList[1];\n\n    // for two voice backward compatibility, ensure upper voice is stems up\n    // for three voices, the voices must be in order (upper, middle, lower)\n    if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n      noteU = notesList[1];\n      noteL = notesList[0];\n    }\n\n    const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n    let xShift = 0;\n    let stemDelta;\n\n    // Test for two voice note intersection\n    if (voices === 2) {\n      const lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n      // if top voice is a middle voice, check stem intersection with lower voice\n      if (noteU.stemDirection === noteL.stemDirection && noteU.minLine <= noteL.maxLine) {\n        if (!noteU.isrest) {\n          stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));\n          stemDelta = Math.max(stemDelta, noteU.stemMin);\n          noteU.minLine = noteU.line - stemDelta;\n          noteU.note.setStemLength(stemDelta * 10);\n        }\n      }\n      if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n        if (noteU.isrest) {\n          // shift rest up\n          shiftRestVertical(noteU, noteL, 1);\n        } else if (noteL.isrest) {\n          // shift rest down\n          shiftRestVertical(noteL, noteU, -1);\n        } else {\n          xShift = voiceXShift;\n          if (noteU.stemDirection === noteL.stemDirection) {\n            // upper voice is middle voice, so shift it right\n            noteU.note.setXShift(xShift + 3);\n          } else {\n            // shift lower voice right\n            noteL.note.setXShift(xShift);\n          }\n        }\n      }\n\n      // format complete\n      return true;\n    }\n\n    if (!noteM) throw new RuntimeError('InvalidState', 'noteM not defined.');\n\n    // Check middle voice stem intersection with lower voice\n    if (noteM.minLine < noteL.maxLine + 0.5) {\n      if (!noteM.isrest) {\n        stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));\n        stemDelta = Math.max(stemDelta, noteM.stemMin);\n        noteM.minLine = noteM.line - stemDelta;\n        noteM.note.setStemLength(stemDelta * 10);\n      }\n    }\n\n    // For three voices, test if rests can be repositioned\n    //\n    // Special case 1 :: middle voice rest between two notes\n    //\n    if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n      if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n        const restHeight = noteM.maxLine - noteM.minLine;\n        const space = noteU.minLine - noteL.maxLine;\n        if (restHeight < space) {\n          // center middle voice rest between the upper and lower voices\n          centerRest(noteM, noteU, noteL);\n        } else {\n          xShift = voiceXShift + 3; // shift middle rest right\n          noteM.note.setXShift(xShift);\n        }\n        // format complete\n        return true;\n      }\n    }\n\n    // Special case 2 :: all voices are rests\n    if (noteU.isrest && noteM.isrest && noteL.isrest) {\n      // Shift upper voice rest up\n      shiftRestVertical(noteU, noteM, 1);\n      // Shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n      // format complete\n      return true;\n    }\n\n    // Test if any other rests can be repositioned\n    if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n      // Shift middle voice rest up\n      shiftRestVertical(noteM, noteL, 1);\n    }\n    if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n      // Shift middle voice rest down\n      shiftRestVertical(noteM, noteU, -1);\n    }\n    if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n      // shift upper voice rest up;\n      shiftRestVertical(noteU, noteM, 1);\n    }\n    if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n      // shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n    }\n\n    // If middle voice intersects upper or lower voice\n    if (\n      (!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5) ||\n      (!noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine)\n    ) {\n      xShift = voiceXShift + 3; // shift middle note right\n      noteM.note.setXShift(xShift);\n    }\n\n    return true;\n  }\n\n  static formatByY(notes: StaveNote[], state: ModifierContextState): void {\n    // NOTE: this function does not support more than two voices per stave. Use with care.\n\n    let hasStave = true;\n    for (let i = 0; i < notes.length; i++) {\n      hasStave = hasStave && notes[i].getStave() != undefined;\n    }\n    if (!hasStave) {\n      throw new RuntimeError('NoStave', 'All notes must have a stave.');\n    }\n\n    let xShift = 0;\n\n    for (let i = 0; i < notes.length - 1; i++) {\n      let topNote = notes[i];\n      let bottomNote = notes[i + 1];\n\n      if (topNote.getStemDirection() === Stem.DOWN) {\n        topNote = notes[i + 1];\n        bottomNote = notes[i];\n      }\n\n      const topKeys = topNote.getKeyProps();\n      const bottomKeys = bottomNote.getKeyProps();\n\n      const HALF_NOTEHEAD_HEIGHT = 0.5;\n\n      // `keyProps` and `stave.getYForLine` have different notions of a `line`\n      // so we have to convert the keyProps value by subtracting 5.\n      // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas\n      //\n      // We also extend the y for each note by a half notehead because the\n      // notehead's origin is centered\n      const topStave = topNote.checkStave();\n      const topNoteBottomY = topStave.getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);\n\n      const bottomStave = bottomNote.checkStave();\n      const bottomNoteTopY = bottomStave.getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);\n\n      const areNotesColliding =\n        bottomNoteTopY != undefined && topNoteBottomY != undefined ? bottomNoteTopY - topNoteBottomY < 0 : false;\n\n      if (areNotesColliding) {\n        xShift = topNote.getVoiceShiftWidth() + 2;\n        bottomNote.setXShift(xShift);\n      }\n    }\n\n    state.right_shift += xShift;\n  }\n\n  static postFormat(notes: Note[]): boolean {\n    if (!notes) return false;\n\n    notes.forEach((note) => note.postFormat());\n\n    return true;\n  }\n\n  constructor(noteStruct: StaveNoteStruct) {\n    super(noteStruct);\n\n    this.ledgerLineStyle = {};\n\n    this.clef = noteStruct.clef ?? 'treble';\n    this.octave_shift = noteStruct.octave_shift ?? 0;\n\n    // Pull note rendering properties.\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    // if true, displace note to right\n    this.displaced = false;\n    this.dot_shiftY = 0;\n    // for displaced ledger lines\n    this.use_default_head_x = false;\n\n    // Drawing\n    this.note_heads = [];\n    this.modifiers = [];\n    this.ledgerLineStyle = {};\n\n    this.render_options = {\n      ...this.render_options,\n      // font size for note heads and rests\n      glyph_font_scale: noteStruct.glyph_font_scale || Flow.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET,\n    };\n\n    this.calculateKeyProps();\n    this.buildStem();\n\n    // Set the stem direction\n    if (noteStruct.auto_stem) {\n      this.autoStem();\n    } else {\n      this.setStemDirection(noteStruct.stem_direction ?? Stem.UP);\n    }\n    this.reset();\n    this.buildFlag();\n  }\n\n  reset(): this {\n    super.reset();\n\n    // Save prior noteHead styles & reapply them after making new noteheads.\n    const noteHeadStyles = this.note_heads.map((noteHead) => noteHead.getStyle());\n    this.buildNoteHeads();\n    this.note_heads.forEach((noteHead, index) => {\n      const noteHeadStyle = noteHeadStyles[index];\n      if (noteHeadStyle) noteHead.setStyle(noteHeadStyle);\n    });\n\n    const stave = this.stave;\n    if (stave) {\n      this.note_heads.forEach((head) => head.setStave(stave));\n    }\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  // Builds a `Stem` for the note\n  buildStem(): this {\n    this.setStem(new Stem({ hide: !!this.isRest() }));\n    return this;\n  }\n\n  // Builds a `NoteHead` for each key in the note\n  buildNoteHeads(): void {\n    this.note_heads = [];\n    const stemDirection = this.getStemDirection();\n    const keys = this.getKeys();\n\n    let lastLine = undefined;\n    let lineDiff = undefined;\n    let displaced = false;\n\n    // Draw notes from bottom to top.\n\n    // For down-stem notes, we draw from top to bottom.\n    let start: number;\n    let end: number;\n    let step: number;\n    if (stemDirection === Stem.UP) {\n      start = 0;\n      end = keys.length;\n      step = 1;\n    } else {\n      start = keys.length - 1;\n      end = -1;\n      step = -1;\n    }\n\n    for (let i = start; i !== end; i += step) {\n      const noteProps = this.keyProps[i];\n      const line = noteProps.line;\n\n      // Keep track of last line with a note head, so that consecutive heads\n      // are correctly displaced.\n      if (lastLine === undefined) {\n        lastLine = line;\n      } else {\n        lineDiff = Math.abs(lastLine - line);\n        if (lineDiff === 0 || lineDiff === 0.5) {\n          displaced = !displaced;\n        } else {\n          displaced = false;\n          this.use_default_head_x = true;\n        }\n      }\n      lastLine = line;\n\n      const notehead = new NoteHead({\n        duration: this.duration,\n        note_type: this.noteType,\n        displaced,\n        stem_direction: stemDirection,\n        custom_glyph_code: noteProps.code,\n        glyph_font_scale: this.render_options.glyph_font_scale,\n        x_shift: noteProps.shift_right,\n        stem_up_x_offset: noteProps.stem_up_x_offset,\n        stem_down_x_offset: noteProps.stem_down_x_offset,\n        line: noteProps.line,\n      });\n\n      this.note_heads[i] = notehead;\n    }\n  }\n\n  // Automatically sets the stem direction based on the keys in the note\n  autoStem(): void {\n    this.setStemDirection(this.calculateOptimalStemDirection());\n  }\n\n  calculateOptimalStemDirection(): number {\n    // Figure out optimal stem direction based on given notes\n    this.minLine = this.keyProps[0].line;\n    this.maxLine = this.keyProps[this.keyProps.length - 1].line;\n\n    const MIDDLE_LINE = 3;\n    const decider = (this.minLine + this.maxLine) / 2;\n    const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n\n    return stemDirection;\n  }\n\n  // Calculates and stores the properties for each key in the note\n  calculateKeyProps(): void {\n    let lastLine: number | undefined;\n    for (let i = 0; i < this.keys.length; ++i) {\n      const key = this.keys[i];\n\n      // All rests use the same position on the line.\n      // if (this.glyph.rest) key = this.glyph.position;\n      if (this.glyph.rest) this.glyph.position = key;\n\n      const options = { octave_shift: this.octave_shift || 0 };\n      const props = Flow.keyProperties(key, this.clef, options);\n\n      if (!props) {\n        throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n      }\n\n      // Override line placement for default rests\n      if (props.key === 'R') {\n        if (this.duration === '1' || this.duration === 'w') {\n          props.line = 4;\n        } else {\n          props.line = 3;\n        }\n      }\n\n      // Calculate displacement of this note\n      const line = props.line;\n      if (lastLine == undefined) {\n        lastLine = line;\n      } else {\n        if (Math.abs(lastLine - line) === 0.5) {\n          this.displaced = true;\n          props.displaced = true;\n\n          // Have to mark the previous note as\n          // displaced as well, for modifier placement\n          if (this.keyProps.length > 0) {\n            this.keyProps[i - 1].displaced = true;\n          }\n        }\n      }\n\n      lastLine = line;\n      this.keyProps.push(props);\n    }\n\n    // Sort the notes from lowest line to highest line\n    lastLine = undefined;\n    this.keyProps.forEach((key) => {\n      if (lastLine && key.line < lastLine) {\n        warn('Unsorted keys in note will be sorted. ' + 'See https://github.com/0xfe/vexflow/issues/104 for details.');\n      }\n      lastLine = key.line;\n    });\n    this.keyProps.sort((a, b) => a.line - b.line);\n  }\n\n  // Get the `BoundingBox` for the entire note\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n\n    const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();\n    const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;\n\n    let minY: number = 0;\n    let maxY: number = 0;\n    const halfLineSpacing = (this.getStave()?.getSpacingBetweenLines() ?? 0) / 2;\n    const lineSpacing = halfLineSpacing * 2;\n\n    if (this.isRest()) {\n      const y = this.ys[0];\n      const frac = Flow.durationToFraction(this.duration);\n      if (frac.equals(1) || frac.equals(2)) {\n        minY = y - halfLineSpacing;\n        maxY = y + halfLineSpacing;\n      } else {\n        minY = y - this.glyph.line_above * lineSpacing;\n        maxY = y + this.glyph.line_below * lineSpacing;\n      }\n    } else if (this.glyph.stem) {\n      const ys = this.getStemExtents();\n      ys.baseY += halfLineSpacing * this.getStemDirection();\n      minY = Math.min(ys.topY, ys.baseY);\n      maxY = Math.max(ys.topY, ys.baseY);\n    } else {\n      minY = 0;\n      maxY = 0;\n\n      for (let i = 0; i < this.ys.length; ++i) {\n        const yy = this.ys[i];\n        if (i === 0) {\n          minY = yy;\n          maxY = yy;\n        } else {\n          minY = Math.min(yy, minY);\n          maxY = Math.max(yy, maxY);\n        }\n      }\n      minY -= halfLineSpacing;\n      maxY += halfLineSpacing;\n    }\n\n    return new BoundingBox(x, minY, w, maxY - minY);\n  }\n\n  // Gets the line number of the bottom note in the chord.\n  // If `isTopNote` is `true` then get the top note's line number instead\n  getLineNumber(isTopNote?: boolean): number {\n    if (!this.keyProps.length) {\n      throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n    }\n\n    let resultLine = this.keyProps[0].line;\n\n    // No precondition assumed for sortedness of keyProps array\n    for (let i = 0; i < this.keyProps.length; i++) {\n      const thisLine = this.keyProps[i].line;\n      if (isTopNote) {\n        if (thisLine > resultLine) resultLine = thisLine;\n      } else {\n        if (thisLine < resultLine) resultLine = thisLine;\n      }\n    }\n\n    return resultLine;\n  }\n\n  /**\n   * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n   */\n  isRest(): boolean {\n    return this.glyph.rest;\n  }\n\n  // Determine if the current note is a chord\n  isChord(): boolean {\n    return !this.isRest() && this.keys.length > 1;\n  }\n\n  // Determine if the `StaveNote` has a stem\n  hasStem(): boolean {\n    return this.glyph.stem;\n  }\n\n  hasFlag(): boolean {\n    return super.hasFlag() && !this.isRest();\n  }\n\n  getStemX(): number {\n    if (this.noteType === 'r') {\n      return this.getCenterGlyphX();\n    } else {\n      // We adjust the origin of the stem because we want the stem left-aligned\n      // with the notehead if stemmed-down, and right-aligned if stemmed-up\n      return super.getStemX() + (this.stem_direction ? Stem.WIDTH / (2 * -this.stem_direction) : 0);\n    }\n  }\n\n  // Get the `y` coordinate for text placed on the top/bottom of a\n  // note at a desired `text_line`\n  getYForTopText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.min(\n      this.checkStave().getYForTopText(textLine),\n      extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n    );\n  }\n  getYForBottomText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.max(\n      this.checkStave().getYForTopText(textLine),\n      extents.baseY + this.render_options.annotation_spacing * textLine\n    );\n  }\n\n  // Sets the current note to the provided `stave`. This applies\n  // `y` values to the `NoteHeads`.\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n\n    const ys = this.note_heads.map((notehead) => {\n      notehead.setStave(stave);\n      return notehead.getY();\n    });\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      this.stem.setYBounds(y_top, y_bottom);\n    }\n\n    return this;\n  }\n\n  // Check if note is shifted to the right\n  isDisplaced(): boolean {\n    return this.displaced;\n  }\n\n  // Sets whether shift note to the right. `displaced` is a `boolean`\n  setNoteDisplaced(displaced: boolean): this {\n    this.displaced = displaced;\n    return this;\n  }\n\n  // Get the starting `x` coordinate for a `StaveTie`\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;\n    if (this.modifierContext) tieStartX += this.modifierContext.getRightShift();\n    return tieStartX;\n  }\n\n  // Get the ending `x` coordinate for a `StaveTie`\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    tieEndX += this.x_shift - this.leftDisplacedHeadPx;\n    return tieEndX;\n  }\n\n  // Get the stave line on which to place a rest\n  getLineForRest(): number {\n    let restLine = this.keyProps[0].line;\n    if (this.keyProps.length > 1) {\n      const lastLine = this.keyProps[this.keyProps.length - 1].line;\n      const top = Math.max(restLine, lastLine);\n      const bot = Math.min(restLine, lastLine);\n      restLine = midLine(top, bot);\n    }\n\n    return restLine;\n  }\n\n  // Get the default `x` and `y` coordinates for the provided `position`\n  // and key `index`\n  getModifierStartXY(\n    position: number,\n    index: number,\n    options: { forceFlagRight?: boolean } = {}\n  ): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n    let x = 0;\n    if (position === LEFT) {\n      // FIXME: Left modifier padding, move to font file\n      x = -1 * 2;\n    } else if (position === RIGHT) {\n      // FIXME: Right modifier padding, move to font file\n      x = this.getGlyphWidth() + this.x_shift + 2;\n\n      if (\n        this.stem_direction === Stem.UP &&\n        this.hasFlag() &&\n        (options.forceFlagRight || isInnerNoteIndex(this, index))\n      ) {\n        x += this?.flag?.getMetrics().width ?? 0;\n      }\n    } else if (position === BELOW || position === ABOVE) {\n      x = this.getGlyphWidth() / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Sets the style of the complete StaveNote, including all keys\n  // and the stem.\n  setStyle(style: ElementStyle): this {\n    super.setStyle(style);\n    this.note_heads.forEach((notehead) => notehead.setStyle(style));\n    this.stem?.setStyle(style);\n    return this;\n  }\n\n  setStemStyle(style: ElementStyle): this {\n    const stem = this.getStem();\n    stem?.setStyle(style);\n    return this;\n  }\n  getStemStyle(): ElementStyle | undefined {\n    return this.stem?.getStyle();\n  }\n\n  setLedgerLineStyle(style: ElementStyle): void {\n    this.ledgerLineStyle = style;\n  }\n\n  getLedgerLineStyle(): ElementStyle {\n    return this.ledgerLineStyle;\n  }\n\n  setFlagStyle(style: ElementStyle): void {\n    this.flagStyle = style;\n  }\n  getFlagStyle(): ElementStyle | undefined {\n    return this.flagStyle;\n  }\n\n  // Sets the notehead at `index` to the provided coloring `style`.\n  //\n  // `style` is an `object` with the following properties: `shadowColor`,\n  // `shadowBlur`, `fillStyle`, `strokeStyle`\n  setKeyStyle(index: number, style: ElementStyle): this {\n    this.note_heads[index].setStyle(style);\n    return this;\n  }\n\n  setKeyLine(index: number, line: number): this {\n    this.keyProps[index].line = line;\n    this.reset();\n    return this;\n  }\n\n  getKeyLine(index: number): number {\n    return this.keyProps[index].line;\n  }\n\n  // Helper function to add an accidental to a key\n  addAccidental(index: number, accidental: Modifier): this {\n    return this.addModifier(accidental, index);\n  }\n\n  // Helper function to add an articulation to a key\n  addArticulation(index: number, articulation: Modifier): this {\n    return this.addModifier(articulation, index);\n  }\n\n  // Helper function to add an annotation to a key\n  addAnnotation(index: number, annotation: Modifier): this {\n    return this.addModifier(annotation, index);\n  }\n\n  // Helper function to add a dot on a specific key\n  addDot(index: number): this {\n    const dot = new Dot();\n    dot.setDotShiftY(this.glyph.dot_shiftY);\n    this.dots++;\n    return this.addModifier(dot, index);\n  }\n\n  // Convenience method to add dot to all keys in note\n  addDotToAll(): this {\n    for (let i = 0; i < this.keys.length; ++i) {\n      this.addDot(i);\n    }\n    return this;\n  }\n\n  // Get all accidentals in the `ModifierContext`\n  getAccidentals(): Accidental[] {\n    return this.checkModifierContext().getMembers(Accidental.CATEGORY) as Accidental[];\n  }\n\n  // Get all dots in the `ModifierContext`\n  getDots(): Dot[] {\n    return this.checkModifierContext().getMembers(Dot.CATEGORY) as Dot[];\n  }\n\n  // Get the width of the note if it is displaced. Used for `Voice`\n  // formatting\n  getVoiceShiftWidth(): number {\n    // TODO: may need to accomodate for dot here.\n    return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n  }\n\n  // Calculates and sets the extra pixels to the left or right\n  // if the note is displaced.\n  calcNoteDisplacements(): void {\n    this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === Stem.DOWN ? this.getGlyphWidth() : 0);\n\n    // For upstems with flags, the extra space is unnecessary, since it's taken\n    // up by the flag.\n    this.setRightDisplacedHeadPx(\n      !this.hasFlag() && this.displaced && this.stem_direction === Stem.UP ? this.getGlyphWidth() : 0\n    );\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    let noteHeadPadding = 0;\n    if (this.preFormatted) return;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      // If there are no modifiers on this note, make sure there is adequate padding\n      // between the notes.\n      if (this.modifierContext.getWidth() === 0) {\n        noteHeadPadding = StaveNote.minNoteheadPadding;\n      }\n    }\n\n    let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n\n    // For upward flagged notes, the width of the flag needs to be added\n    if (this.shouldDrawFlag() && this.stem_direction === Stem.UP) {\n      width += this.getGlyphWidth();\n      // TODO: Add flag width as a separate metric\n    }\n    this.setWidth(width);\n    this.setPreFormatted(true);\n  }\n\n  /**\n   * @typedef {Object} noteHeadBounds\n   * @property {number} y_top the highest notehead bound\n   * @property {number} y_bottom the lowest notehead bound\n   * @property {number|Null} displaced_x the starting x for displaced noteheads\n   * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads\n   * @property {number} highest_line the highest notehead line in traditional music line\n   *  numbering (bottom line = 1, top line = 5)\n   * @property {number} lowest_line the lowest notehead line\n   * @property {number|false} highest_displaced_line the highest staff line number\n   *   for a displaced notehead\n   * @property {number|false} lowest_displaced_line\n   * @property {number} highest_non_displaced_line\n   * @property {number} lowest_non_displaced_line\n   */\n\n  /**\n   * Get the staff line and y value for the highest & lowest noteheads\n   * @returns {noteHeadBounds}\n   */\n  getNoteHeadBounds(): StaveNoteHeadBounds {\n    // Top and bottom Y values for stem.\n    let yTop: number = +Infinity;\n    let yBottom: number = -Infinity;\n    let nonDisplacedX: number | undefined;\n    let displacedX: number | undefined;\n\n    let highestLine = this.checkStave().getNumLines();\n    let lowestLine = 1;\n    let highestDisplacedLine: number | undefined;\n    let lowestDisplacedLine: number | undefined;\n    let highestNonDisplacedLine = highestLine;\n    let lowestNonDisplacedLine = lowestLine;\n\n    this.note_heads.forEach((notehead) => {\n      const line: number = notehead.getLine();\n      const y = notehead.getY();\n\n      yTop = Math.min(y, yTop);\n      yBottom = Math.max(y, yBottom);\n\n      if (displacedX === undefined && notehead.isDisplaced()) {\n        displacedX = notehead.getAbsoluteX();\n      }\n\n      if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n        nonDisplacedX = notehead.getAbsoluteX();\n      }\n\n      highestLine = Math.max(line, highestLine);\n      lowestLine = Math.min(line, lowestLine);\n\n      if (notehead.isDisplaced()) {\n        highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n        lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n      } else {\n        highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n        lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n      }\n    }, this);\n\n    return {\n      y_top: yTop,\n      y_bottom: yBottom,\n      displaced_x: displacedX,\n      non_displaced_x: nonDisplacedX,\n      highest_line: highestLine,\n      lowest_line: lowestLine,\n      highest_displaced_line: highestDisplacedLine,\n      lowest_displaced_line: lowestDisplacedLine,\n      highest_non_displaced_line: highestNonDisplacedLine,\n      lowest_non_displaced_line: lowestNonDisplacedLine,\n    };\n  }\n\n  // Get the starting `x` coordinate for the noteheads\n  getNoteHeadBeginX(): number {\n    return this.getAbsoluteX() + this.x_shift;\n  }\n\n  // Get the ending `x` coordinate for the noteheads\n  getNoteHeadEndX(): number {\n    const xBegin = this.getNoteHeadBeginX();\n    return xBegin + this.getGlyphWidth();\n  }\n\n  // Draw the ledger lines between the stave and the highest/lowest keys\n  drawLedgerLines(): void {\n    const stave = this.checkStave();\n    const {\n      glyph,\n      render_options: { stroke_px },\n    } = this;\n    const ctx = this.checkContext();\n    const width = glyph.getWidth() + stroke_px * 2;\n    const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - Stem.WIDTH / 2;\n\n    if (this.isRest()) return;\n    if (!ctx) {\n      throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const {\n      highest_line,\n      lowest_line,\n      highest_displaced_line,\n      highest_non_displaced_line,\n      lowest_displaced_line,\n      lowest_non_displaced_line,\n      displaced_x,\n      non_displaced_x,\n    } = this.getNoteHeadBounds();\n\n    // Early out if there are no ledger lines to draw.\n    if (highest_line < 6 && lowest_line > 0) return;\n\n    const min_x = Math.min(displaced_x ?? 0, non_displaced_x ?? 0);\n\n    const drawLedgerLine = (y: number, normal: boolean, displaced: boolean) => {\n      let x;\n      if (displaced && normal) x = min_x - stroke_px;\n      else if (normal) x = (non_displaced_x ?? 0) - stroke_px;\n      else x = (displaced_x ?? 0) - stroke_px;\n      const ledgerWidth = normal && displaced ? doubleWidth : width;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + ledgerWidth, y);\n      ctx.stroke();\n    };\n\n    const style = { ...(stave.getStyle() || {}), ...(this.getLedgerLineStyle() || {}) };\n    if (typeof style.lineWidth === 'undefined') {\n      style.lineWidth = Flow.STAVE_LINE_THICKNESS * 2;\n    } else {\n      style.lineWidth *= 2;\n    }\n    this.applyStyle(ctx, style);\n\n    // Draw ledger lines below the staff:\n    for (let line = 6; line <= highest_line; ++line) {\n      const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;\n      const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    // Draw ledger lines above the staff:\n    for (let line = 0; line >= lowest_line; --line) {\n      const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;\n      const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    this.restoreStyle(ctx, style);\n  }\n\n  // Draw all key modifiers\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      const index = modifier.checkIndex();\n      const notehead = this.note_heads[index];\n      const noteheadStyle = notehead.getStyle();\n      notehead.applyStyle(ctx, noteheadStyle);\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n      notehead.restoreStyle(ctx, noteheadStyle);\n    }\n    ctx.closeGroup();\n  }\n\n  shouldDrawFlag(): boolean {\n    const hasStem = this.stem !== undefined;\n    const hasFlag = this.glyph.flag as boolean; // specified in tables.js\n    const hasNoBeam = this.beam === undefined;\n    return hasStem && hasFlag && hasNoBeam;\n  }\n\n  // Draw the flag for the note\n  drawFlag(): void {\n    const ctx = this.checkContext();\n    if (!ctx) {\n      throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    if (this.shouldDrawFlag()) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      // eslint-disable-next-line\n      const noteStemHeight = this.stem!.getHeight();\n      const flagX = this.getStemX();\n      // FIXME: What's with the magic +/- 2\n      // ANSWER: a corner of the note stem pokes out beyond the tip of the flag.\n      // The extra +/- 2 pushes the flag glyph outward so it covers the stem entirely.\n      // Alternatively, we could shorten the stem.\n      const flagY =\n        this.getStemDirection() === Stem.DOWN\n          ? // Down stems are below the note head and have flags on the right.\n            y_top - noteStemHeight + 2\n          : // Up stems are above the note head and have flags on the right.\n            y_bottom - noteStemHeight - 2;\n\n      // Draw the Flag\n      ctx.openGroup('flag', undefined, { pointerBBox: true });\n      this.applyStyle(ctx, this.getFlagStyle());\n      this.flag?.render(ctx, flagX, flagY);\n      this.restoreStyle(ctx, this.getFlagStyle());\n      ctx.closeGroup();\n    }\n  }\n\n  // Draw the NoteHeads\n  drawNoteHeads(): void {\n    const ctx = this.checkContext();\n    this.note_heads.forEach((notehead) => {\n      ctx.openGroup('notehead', undefined, { pointerBBox: true });\n      notehead.setContext(ctx).draw();\n      ctx.closeGroup();\n    });\n  }\n\n  drawStem(stemOptions?: StemOptions): void {\n    // GCR TODO: I can't find any context in which this is called with the stemStruct\n    // argument in the codebase or tests. Nor can I find a case where super.drawStem\n    // is called at all. Perhaps these should be removed?\n    const ctx = this.checkContext();\n\n    if (stemOptions) {\n      this.setStem(new Stem(stemOptions));\n    }\n\n    // If we will render a flag, we shorten the stem so that the tip\n    // does not poke through the flag.\n    if (this.shouldDrawFlag() && this.stem) {\n      this.stem.adjustHeightForFlag();\n    }\n\n    ctx.openGroup('stem', undefined, { pointerBBox: true });\n    this.stem?.setContext(ctx).draw();\n    ctx.closeGroup();\n  }\n\n  /**\n   * Override stemmablenote stem extension to adjust for distance from middle line.\n   */\n  getStemExtension(): number {\n    const super_stem_extension = super.getStemExtension();\n    if (!this.glyph.stem) {\n      return super_stem_extension;\n    }\n\n    const stem_direction = this.getStemDirection();\n    if (stem_direction !== this.calculateOptimalStemDirection()) {\n      return super_stem_extension; // no adjustment for manually set stem direction.\n    }\n    let mid_line_distance;\n    const MIDDLE_LINE = 3;\n    if (stem_direction === Stem.UP) {\n      // Note that the use of maxLine here instead of minLine might\n      // seem counterintuitive, but in the case of (say) treble clef\n      // chord(F2, E4) stem up, we do not want to extend the stem because\n      // of F2, when a normal octave-length stem above E4 is fine.\n      //\n      // maxLine and minLine are set in calculateOptimalStemDirection() so\n      // will be known.\n      mid_line_distance = MIDDLE_LINE - this.maxLine;\n    } else {\n      mid_line_distance = this.minLine - MIDDLE_LINE;\n    }\n\n    // how many lines more than an octave is the relevant notehead?\n    const lines_over_octave_from_mid_line = mid_line_distance - 3.5;\n    if (lines_over_octave_from_mid_line <= 0) {\n      return super_stem_extension;\n    }\n    const stave = this.getStave();\n    let spacing_between_lines = 10;\n    if (stave != undefined) {\n      spacing_between_lines = stave.getSpacingBetweenLines();\n    }\n    return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;\n  }\n\n  // Draws all the `StaveNote` parts. This is the main drawing method.\n  draw(): void {\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    const ctx = this.checkContext();\n    const xBegin = this.getNoteHeadBeginX();\n    const shouldRenderStem = this.hasStem() && !this.beam;\n\n    // Format note head x positions\n    this.note_heads.forEach((notehead) => notehead.setX(xBegin));\n\n    // Format stem x positions\n    const stemX = this.getStemX();\n    this.stem?.setNoteHeadXBounds(stemX, stemX);\n\n    L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n\n    // Apply the overall style -- may be contradicted by local settings:\n    this.applyStyle();\n    this.setAttribute('el', ctx.openGroup('stavenote', this.getAttribute('id')));\n    this.drawLedgerLines();\n    ctx.openGroup('note', undefined, { pointerBBox: true });\n    if (shouldRenderStem) this.drawStem();\n    this.drawNoteHeads();\n    this.drawFlag();\n    ctx.closeGroup();\n    this.drawModifiers();\n    ctx.closeGroup();\n    this.restoreStyle();\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { RuntimeError } from './util';\nimport { StaveNote, StaveNoteStruct } from './stavenote';\nimport { Stem } from './stem';\nimport { Flow } from './flow';\n\nexport interface GraceNoteStruct extends StaveNoteStruct {\n  slash?: boolean;\n}\n\nexport class GraceNote extends StaveNote {\n  static get CATEGORY(): string {\n    return 'GraceNote';\n  }\n\n  static get LEDGER_LINE_OFFSET(): number {\n    return 2;\n  }\n\n  static get SCALE(): number {\n    return 0.66;\n  }\n\n  protected slash: boolean;\n  protected slur: boolean;\n\n  constructor(noteStruct: GraceNoteStruct) {\n    super({\n      glyph_font_scale: Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,\n      stroke_px: GraceNote.LEDGER_LINE_OFFSET,\n      ...noteStruct,\n    });\n\n    this.slash = noteStruct.slash || false;\n    this.slur = true;\n\n    this.buildNoteHeads();\n\n    this.width = 3;\n  }\n\n  getStemExtension(): number {\n    if (this.stem_extension_override) {\n      return this.stem_extension_override;\n    }\n\n    const glyph = this.getGlyph();\n    if (glyph) {\n      let ret = super.getStemExtension();\n      if (glyph.stem) {\n        const staveNoteScale = this.getStaveNoteScale();\n        ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n      }\n      return ret;\n    }\n\n    return 0;\n  }\n\n  // FIXME: move this to more basic class.\n  getStaveNoteScale(): number {\n    return this.render_options.glyph_font_scale / Flow.DEFAULT_NOTATION_FONT_SCALE;\n  }\n\n  draw(): void {\n    super.draw();\n    this.setRendered();\n    const stem = this.stem;\n    if (this.slash && stem) {\n      const staveNoteScale = this.getStaveNoteScale();\n\n      // some magic numbers are based on the staveNoteScale 0.66.\n      const offsetScale = staveNoteScale / 0.66;\n      let slashBBox = undefined;\n      const beam = this.beam;\n      if (beam) {\n        // FIXME: should render slash after beam?\n        if (!beam.postFormatted) {\n          beam.postFormat();\n        }\n\n        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n          stem: 6 * offsetScale,\n          beam: 5 * offsetScale,\n        });\n      } else {\n        const stem_direction = this.getStemDirection();\n        const noteHeadBounds = this.getNoteHeadBounds();\n        const noteStemHeight = stem.getHeight();\n        let x = this.getAbsoluteX();\n        let y =\n          stem_direction === Stem.DOWN\n            ? noteHeadBounds.y_top - noteStemHeight\n            : noteHeadBounds.y_bottom - noteStemHeight;\n\n        const defaultStemExtention =\n          stem_direction === Stem.DOWN ? this.glyph.stem_down_extension : this.glyph.stem_up_extension;\n\n        let defaultOffsetY = Flow.STEM_HEIGHT;\n        defaultOffsetY -= defaultOffsetY / 2.8;\n        defaultOffsetY += defaultStemExtention;\n        y += defaultOffsetY * staveNoteScale * stem_direction;\n\n        const offsets =\n          stem_direction === Stem.UP\n            ? {\n                x1: 1,\n                y1: 0,\n                x2: 13,\n                y2: -9,\n              }\n            : {\n                x1: -4,\n                y1: 1,\n                x2: 13,\n                y2: 9,\n              };\n\n        x += offsets.x1 * offsetScale;\n        y += offsets.y1 * offsetScale;\n        slashBBox = {\n          x1: x,\n          y1: y,\n          x2: x + offsets.x2 * offsetScale,\n          y2: y + offsets.y2 * offsetScale,\n        };\n      }\n\n      // FIXME: avoid staff lines, ledger lines or others.\n\n      const ctx = this.checkContext();\n      ctx.save();\n      ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n      ctx.beginPath();\n      ctx.moveTo(slashBBox.x1, slashBBox.y1);\n      ctx.lineTo(slashBBox.x2, slashBBox.y2);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  calcBeamedNotesSlashBBox(\n    slashStemOffset: number,\n    slashBeamOffset: number,\n    protrusions: { beam: number; stem: number }\n  ): Record<string, number> {\n    const beam = this.beam;\n    if (!beam) throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n\n    const beam_slope = beam.slope;\n    const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n    const scaleX = isBeamEndNote ? -1 : 1;\n    const beam_angle = Math.atan(beam_slope * scaleX);\n\n    // slash line intersecting point on beam.\n    const iPointOnBeam = {\n      dx: Math.cos(beam_angle) * slashBeamOffset,\n      dy: Math.sin(beam_angle) * slashBeamOffset,\n    };\n\n    slashStemOffset *= this.getStemDirection();\n    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n\n    const stemX = this.getStemX();\n    const stem0X = beam.notes[0].getStemX();\n    const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n\n    const ret = {\n      x1: stemX - protrusion_stem_dx,\n      y1: stemY + slashStemOffset - protrusion_stem_dy,\n      x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n    };\n    return ret;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.num_notes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   num_notes: fit this many notes into...\n *   notes_occupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of num_notes : notes_occupied.\n *       num_notes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notes_occupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between num_notes and\n *     notes_occupied is greater than 1.\n *\n *   y_offset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\n\nimport { RuntimeError, defined } from './util';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\nimport { Note } from './note';\nimport { StemmableNote } from './stemmablenote';\n\nexport interface TupletOptions {\n  beats_occupied?: number;\n  bracketed?: boolean;\n  location?: number;\n  notes_occupied?: number;\n  num_notes?: number;\n  ratioed?: boolean;\n  y_offset?: number;\n}\n\nexport class Tuplet extends Element {\n  static get CATEGORY(): string {\n    return 'Tuplet';\n  }\n\n  notes: Note[];\n\n  protected options: TupletOptions;\n  protected num_notes: number;\n  protected point: number;\n\n  protected bracketed: boolean;\n  protected y_pos: number;\n  protected x_pos: number;\n  protected width: number;\n\n  // location is initialized by the constructor via setTupletLocation(...).\n  protected location!: number;\n\n  protected notes_occupied: number;\n  protected ratioed: boolean;\n  protected numerator_glyphs: Glyph[] = [];\n  protected denom_glyphs: Glyph[] = [];\n\n  static get LOCATION_TOP(): number {\n    return 1;\n  }\n  static get LOCATION_BOTTOM(): number {\n    return -1;\n  }\n  static get NESTING_OFFSET(): number {\n    return 15;\n  }\n\n  constructor(notes: Note[], options: TupletOptions = {}) {\n    super();\n    if (!notes || !notes.length) {\n      throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n    }\n\n    this.options = options;\n    this.notes = notes;\n    this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\n\n    // We accept beats_occupied, but warn that it's deprecated:\n    // the preferred property name is now notes_occupied.\n    if (this.options.beats_occupied) {\n      this.beatsOccupiedDeprecationWarning();\n    }\n    this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n    if (this.options.bracketed != undefined) {\n      this.bracketed = this.options.bracketed;\n    } else {\n      this.bracketed = notes.some((note) => !note.hasBeam());\n    }\n\n    this.ratioed =\n      this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n    this.point = this.musicFont.lookupMetric('digits.tupletPoint');\n    this.y_pos = 16;\n    this.x_pos = 100;\n    this.width = 200;\n\n    this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n\n    Formatter.AlignRestsToNotes(notes, true, true);\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  attach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.setTuplet(this);\n    }\n  }\n\n  detach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.resetTuplet(this);\n    }\n  }\n\n  /**\n   * Set whether or not the bracket is drawn.\n   */\n  setBracketed(bracketed: boolean): this {\n    this.bracketed = !!bracketed;\n    return this;\n  }\n\n  /**\n   * Set whether or not the ratio is shown.\n   */\n  setRatioed(ratioed: boolean): this {\n    this.ratioed = !!ratioed;\n    return this;\n  }\n\n  /**\n   * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n   */\n  setTupletLocation(location: number): this {\n    if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n      // eslint-disable-next-line\n      console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n      location = Tuplet.LOCATION_TOP;\n    }\n\n    this.location = location;\n    return this;\n  }\n\n  getNotes(): Note[] {\n    return this.notes;\n  }\n\n  getNoteCount(): number {\n    return this.num_notes;\n  }\n\n  beatsOccupiedDeprecationWarning(): void {\n    // eslint-disable-next-line\n    console.warn(\n      'beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.',\n      'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.'\n    );\n  }\n\n  getBeatsOccupied(): number {\n    this.beatsOccupiedDeprecationWarning();\n    return this.getNotesOccupied();\n  }\n\n  setBeatsOccupied(beats: number): void {\n    this.beatsOccupiedDeprecationWarning();\n    return this.setNotesOccupied(beats);\n  }\n\n  getNotesOccupied(): number {\n    return this.notes_occupied;\n  }\n\n  setNotesOccupied(notes: number): void {\n    this.detach();\n    this.notes_occupied = notes;\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  resolveGlyphs(): void {\n    this.numerator_glyphs = [];\n    let n = this.num_notes;\n    while (n >= 1) {\n      this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n\n    this.denom_glyphs = [];\n    n = this.notes_occupied;\n    while (n >= 1) {\n      this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n  }\n\n  // determine how many tuplets are nested within this tuplet\n  // on the same side (above/below), to calculate a y\n  // offset for this tuplet:\n  getNestedTupletCount(): number {\n    const location = this.location;\n    const first_note = this.notes[0];\n    let maxTupletCount = countTuplets(first_note, location);\n    let minTupletCount = countTuplets(first_note, location);\n\n    // Count the tuplets that are on the same side (above/below)\n    // as this tuplet:\n    function countTuplets(note: Note, location: number) {\n      return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n    }\n\n    this.notes.forEach((note) => {\n      const tupletCount = countTuplets(note, location);\n      maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n      minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n    });\n\n    return maxTupletCount - minTupletCount;\n  }\n\n  // determine the y position of the tuplet:\n  getYPosition(): number {\n    // offset the tuplet for any nested tuplets between\n    // it and the notes:\n    const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n\n    // offset the tuplet for any manual y_offset:\n    const y_offset = this.options.y_offset || 0;\n\n    // now iterate through the notes and find our highest\n    // or lowest locations, to form a base y_pos\n    const first_note = this.notes[0];\n    let y_pos;\n    if (this.location === Tuplet.LOCATION_TOP) {\n      y_pos = first_note.checkStave().getYForLine(0) - 15;\n      // y_pos = first_note.getStemExtents().topY - 10;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const top_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().topY - 10\n            : this.notes[i].getStemExtents().baseY - 20;\n\n        if (top_y < y_pos) {\n          y_pos = top_y;\n        }\n      }\n    } else {\n      y_pos = first_note.checkStave().getYForLine(4) + 20;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const bottom_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().baseY + 20\n            : this.notes[i].getStemExtents().topY + 10;\n        if (bottom_y > y_pos) {\n          y_pos = bottom_y;\n        }\n      }\n    }\n\n    return y_pos + nested_tuplet_y_offset + y_offset;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    // determine x value of left bound of tuplet\n    const first_note = this.notes[0] as StemmableNote;\n    const last_note = this.notes[this.notes.length - 1] as StemmableNote;\n\n    if (!this.bracketed) {\n      this.x_pos = first_note.getStemX();\n      this.width = last_note.getStemX() - this.x_pos;\n    } else {\n      this.x_pos = first_note.getTieLeftX() - 5;\n      this.width = last_note.getTieRightX() - this.x_pos + 5;\n    }\n\n    // determine y value for tuplet\n    this.y_pos = this.getYPosition();\n\n    const addGlyphWidth = (width: number, glyph: Glyph) => width + defined(glyph.getMetrics().width);\n\n    // calculate total width of tuplet notation\n    let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n    if (this.ratioed) {\n      width = this.denom_glyphs.reduce(addGlyphWidth, width);\n      width += this.point * 0.32;\n    }\n\n    const notation_center_x = this.x_pos + this.width / 2;\n    const notation_start_x = notation_center_x - width / 2;\n\n    // draw bracket if the tuplet is not beamed\n    if (this.bracketed) {\n      const line_width = this.width / 2 - width / 2 - 5;\n\n      // only draw the bracket if it has positive length\n      if (line_width > 0) {\n        ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n        ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n        ctx.fillRect(\n          this.x_pos,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n        ctx.fillRect(\n          this.x_pos + this.width,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n      }\n    }\n\n    // draw numerator glyphs\n    const shiftY = this.musicFont.lookupMetric('digits.shiftY', 0);\n\n    let x_offset = 0;\n    this.numerator_glyphs.forEach((glyph) => {\n      glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n      x_offset += defined(glyph.getMetrics().width);\n    });\n\n    // display colon and denominator if the ratio is to be shown\n    if (this.ratioed) {\n      const colon_x = notation_start_x + x_offset + this.point * 0.16;\n      const colon_radius = this.point * 0.06;\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      x_offset += this.point * 0.32;\n      this.denom_glyphs.forEach((glyph) => {\n        glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n        x_offset += defined(glyph.getMetrics().width);\n      });\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Flow } from './flow';\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tuplet } from './tuplet';\nimport { Stem } from './stem';\nimport { Note } from './note';\nimport { StemmableNote } from './stemmablenote';\nimport { Voice } from './voice';\nimport { RenderContext } from './types/common';\nimport { isStaveNote, isTabNote } from 'typeguard';\n\nfunction calculateStemDirection(notes: StemmableNote[]) {\n  let lineSum = 0;\n  notes.forEach((note) => {\n    if (note.keyProps) {\n      note.keyProps.forEach((keyProp) => {\n        lineSum += keyProp.line - 3;\n      });\n    }\n  });\n\n  if (lineSum >= 0) {\n    return Stem.DOWN;\n  }\n  return Stem.UP;\n}\n\nfunction getStemSlope(firstNote: StemmableNote, lastNote: StemmableNote) {\n  const firstStemTipY = firstNote.getStemExtents().topY;\n  const firstStemX = firstNote.getStemX();\n  const lastStemTipY = lastNote.getStemExtents().topY;\n  const lastStemX = lastNote.getStemX();\n  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\n\nconst BEAM_LEFT = 'L';\nconst BEAM_RIGHT = 'R';\nconst BEAM_BOTH = 'B';\n\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n  static get CATEGORY(): string {\n    return 'Beam';\n  }\n\n  render_options: {\n    flat_beam_offset?: number;\n    flat_beams: boolean;\n    secondary_break_ticks?: number;\n    show_stemlets: boolean;\n    beam_width: number;\n    max_slope: number;\n    min_slope: number;\n    slope_iterations: number;\n    slope_cost: number;\n    stemlet_extension: number;\n    partial_beam_length: number;\n    min_flat_beam_offset: number;\n  };\n\n  notes: StemmableNote[];\n  postFormatted: boolean;\n  slope: number = 0;\n\n  private readonly stem_direction: number;\n  private readonly ticks: number;\n\n  private y_shift: number = 0;\n  private break_on_indices: number[];\n  private beam_count: number;\n  private unbeamable?: boolean;\n\n  /**\n   * Get the default beam groups for a provided time signature.\n   * Attempt to guess if the time signature is not found in table.\n   * Currently this is fairly naive.\n   */\n  static getDefaultBeamGroups(time_sig: string): Fraction[] {\n    if (!time_sig || time_sig === 'c') {\n      time_sig = '4/4';\n    }\n\n    const defaults: { [key: string]: [string] } = {\n      '1/2': ['1/2'],\n      '2/2': ['1/2'],\n      '3/2': ['1/2'],\n      '4/2': ['1/2'],\n\n      '1/4': ['1/4'],\n      '2/4': ['1/4'],\n      '3/4': ['1/4'],\n      '4/4': ['1/4'],\n\n      '1/8': ['1/8'],\n      '2/8': ['2/8'],\n      '3/8': ['3/8'],\n      '4/8': ['2/8'],\n\n      '1/16': ['1/16'],\n      '2/16': ['2/16'],\n      '3/16': ['3/16'],\n      '4/16': ['2/16'],\n    };\n\n    const groups: string[] = defaults[time_sig];\n\n    if (groups === undefined) {\n      // If no beam groups found, naively determine\n      // the beam groupings from the time signature\n      const beatTotal = parseInt(time_sig.split('/')[0], 10);\n      const beatValue = parseInt(time_sig.split('/')[1], 10);\n\n      const tripleMeter = beatTotal % 3 === 0;\n\n      if (tripleMeter) {\n        return [new Fraction(3, beatValue)];\n      } else if (beatValue > 4) {\n        return [new Fraction(2, beatValue)];\n      } else if (beatValue <= 4) {\n        return [new Fraction(1, beatValue)];\n      }\n    } else {\n      return groups.map((group) => new Fraction().parse(group));\n    }\n\n    return [new Fraction(1, 4)];\n  }\n\n  /**\n   * A helper function to automatically build basic beams for a voice. For more\n   * complex auto-beaming use `Beam.generateBeams()`.\n   * @param voice the voice to generate the beams for\n   * @param stem_direction a stem direction to apply to the entire voice\n   * @param groups an array of `Fraction` representing beat groupings for the beam\n   */\n  static applyAndGetBeams(voice: Voice, stem_direction?: number, groups?: Fraction[]): Beam[] {\n    return Beam.generateBeams(voice.getTickables() as StemmableNote[], { groups, stem_direction });\n  }\n\n  /**\n   * A helper function to autimatically build beams for a voice with\n   * configuration options.\n   *\n   * Example configuration object:\n   *\n   * ```\n   * config = {\n   *   groups: [new Vex.Flow.Fraction(2, 8)],\n   *   stem_direction: -1,\n   *   beam_rests: true,\n   *   beam_middle_only: true,\n   *   show_stemlets: false\n   * };\n   * ```\n   * @param notes an array of notes to create the beams for\n   * @param config the configuration object\n   * @param config.stem_direction set to apply the same direction to all notes\n   * @param config.beam_rests set to `true` to include rests in the beams\n   * @param config.beam_middle_only set to `true` to only beam rests in the middle of the beat\n   * @param config.show_stemlets set to `true` to draw stemlets for rests\n   * @param config.maintain_stem_directions set to `true` to not apply new stem directions\n   * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n   *\n   */\n  static generateBeams(\n    notes: StemmableNote[],\n    config: {\n      flat_beam_offset?: number;\n      flat_beams?: boolean;\n      secondary_breaks?: string;\n      show_stemlets?: boolean;\n      maintain_stem_directions?: boolean;\n      beam_middle_only?: boolean;\n      beam_rests?: boolean;\n      groups?: Fraction[];\n      stem_direction?: number;\n    } = {}\n  ): Beam[] {\n    if (!config.groups || !config.groups.length) {\n      config.groups = [new Fraction(2, 8)];\n    }\n\n    // Convert beam groups to tick amounts\n    const tickGroups = config.groups.map((group) => {\n      if (!group.multiply) {\n        throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n      }\n      return group.clone().multiply(Flow.RESOLUTION, 1);\n    });\n\n    const unprocessedNotes: StemmableNote[] = notes;\n    let currentTickGroup = 0;\n    let noteGroups: StemmableNote[][] = [];\n    let currentGroup: StemmableNote[] = [];\n\n    function getTotalTicks(vf_notes: Note[]) {\n      return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n    }\n\n    function nextTickGroup() {\n      if (tickGroups.length - 1 > currentTickGroup) {\n        currentTickGroup += 1;\n      } else {\n        currentTickGroup = 0;\n      }\n    }\n\n    function createGroups() {\n      let nextGroup: StemmableNote[] = [];\n      // number of ticks in current group\n      let currentGroupTotalTicks = new Fraction(0, 1);\n      unprocessedNotes.forEach((unprocessedNote) => {\n        nextGroup = [];\n        if (unprocessedNote.shouldIgnoreTicks()) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          return; // Ignore untickables (like bar notes)\n        }\n        currentGroup.push(unprocessedNote);\n        const ticksPerGroup = tickGroups[currentTickGroup].clone();\n        const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n\n        // Double the amount of ticks in a group, if it's an unbeamable tuplet\n        const unbeamable = Flow.durationToNumber(unprocessedNote.getDuration()) < 8;\n        if (unbeamable && unprocessedNote.getTuplet()) {\n          ticksPerGroup.numerator *= 2;\n        }\n\n        // If the note that was just added overflows the group tick total\n        if (totalTicks.greaterThan(ticksPerGroup)) {\n          // If the overflow note can be beamed, start the next group\n          // with it. Unbeamable notes leave the group overflowed.\n          if (!unbeamable) {\n            const note = currentGroup.pop();\n            if (note) nextGroup.push(note);\n          }\n          noteGroups.push(currentGroup);\n\n          // We have overflown, so we're going to next tick group. As we might have\n          // overflown by more than 1 group, we need to go forward as many times as\n          // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n          // in current groups as we go forward.\n          do {\n            currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n            nextTickGroup();\n          } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n          currentGroup = nextGroup;\n        } else if (totalTicks.equals(ticksPerGroup)) {\n          noteGroups.push(currentGroup);\n          currentGroupTotalTicks = new Fraction(0, 1);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        }\n      });\n\n      // Adds any remainder notes beam\n      if (currentGroup.length > 0) {\n        noteGroups.push(currentGroup);\n      }\n    }\n    function getBeamGroups() {\n      return noteGroups.filter((group) => {\n        if (group.length > 1) {\n          let beamable = true;\n          group.forEach((note) => {\n            if (note.getIntrinsicTicks() >= Flow.durationToTicks('4')) {\n              beamable = false;\n            }\n          });\n          return beamable;\n        }\n        return false;\n      });\n    }\n\n    // Splits up groups by Rest\n    function sanitizeGroups() {\n      const sanitizedGroups: StemmableNote[][] = [];\n      noteGroups.forEach((group) => {\n        let tempGroup: StemmableNote[] = [];\n        group.forEach((note, index, group) => {\n          const isFirstOrLast = index === 0 || index === group.length - 1;\n          const prevNote = group[index - 1];\n\n          const breaksOnEachRest = !config.beam_rests && note.isRest();\n          const breaksOnFirstOrLastRest =\n            config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\n\n          let breakOnStemChange = false;\n          if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\n            const prevDirection = prevNote.getStemDirection();\n            const currentDirection = note.getStemDirection();\n            breakOnStemChange = currentDirection !== prevDirection;\n          }\n\n          const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n\n          // Determine if the group should be broken at this note\n          const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n\n          if (shouldBreak) {\n            // Add current group\n            if (tempGroup.length > 0) {\n              sanitizedGroups.push(tempGroup);\n            }\n\n            // Start a new group. Include the current note if the group\n            // was broken up by stem direction, as that note needs to start\n            // the next group of notes\n            tempGroup = breakOnStemChange ? [note] : [];\n          } else {\n            // Add note to group\n            tempGroup.push(note);\n          }\n        });\n\n        // If there is a remaining group, add it as well\n        if (tempGroup.length > 0) {\n          sanitizedGroups.push(tempGroup);\n        }\n      });\n\n      noteGroups = sanitizedGroups;\n    }\n\n    function formatStems() {\n      noteGroups.forEach((group) => {\n        let stemDirection;\n        if (config.maintain_stem_directions) {\n          const note = findFirstNote(group);\n          stemDirection = note ? note.getStemDirection() : Stem.UP;\n        } else {\n          if (config.stem_direction) {\n            stemDirection = config.stem_direction;\n          } else {\n            stemDirection = calculateStemDirection(group);\n          }\n        }\n        applyStemDirection(group, stemDirection);\n      });\n    }\n\n    function findFirstNote(group: StemmableNote[]) {\n      for (let i = 0; i < group.length; i++) {\n        const note = group[i];\n        if (!note.isRest()) {\n          return note;\n        }\n      }\n\n      return false;\n    }\n\n    function applyStemDirection(group: StemmableNote[], direction: number) {\n      group.forEach((note) => {\n        note.setStemDirection(direction);\n      });\n    }\n\n    // Get all of the tuplets in all of the note groups\n    function getTuplets() {\n      const uniqueTuplets: Tuplet[] = [];\n\n      // Go through all of the note groups and inspect for tuplets\n      noteGroups.forEach((group) => {\n        let tuplet: Tuplet;\n        group.forEach((note) => {\n          const noteTuplet = note.getTuplet();\n          if (noteTuplet && tuplet !== noteTuplet) {\n            tuplet = noteTuplet;\n            uniqueTuplets.push(tuplet);\n          }\n        });\n      });\n      return uniqueTuplets;\n    }\n\n    // Using closures to store the variables throughout the various functions\n    // IMO Keeps it this process lot cleaner - but not super consistent with\n    // the rest of the API's style - Silverwolf90 (Cyril)\n    createGroups();\n    sanitizeGroups();\n    formatStems();\n\n    // Get the notes to be beamed\n    const beamedNoteGroups = getBeamGroups();\n\n    // Get the tuplets in order to format them accurately\n    const allTuplets = getTuplets();\n\n    // Create a Vex.Flow.Beam from each group of notes to be beamed\n    const beams: Beam[] = [];\n    beamedNoteGroups.forEach((group) => {\n      const beam = new Beam(group);\n\n      if (config.show_stemlets) {\n        beam.render_options.show_stemlets = true;\n      }\n      if (config.secondary_breaks) {\n        beam.render_options.secondary_break_ticks = Flow.durationToTicks(config.secondary_breaks);\n      }\n      if (config.flat_beams === true) {\n        beam.render_options.flat_beams = true;\n        beam.render_options.flat_beam_offset = config.flat_beam_offset;\n      }\n      beams.push(beam);\n    });\n\n    // Reformat tuplets\n    allTuplets.forEach((tuplet) => {\n      // Set the tuplet location based on the stem direction\n      const direction =\n        (tuplet.notes[0] as StemmableNote).stem_direction === Stem.DOWN ? Tuplet.LOCATION_BOTTOM : Tuplet.LOCATION_TOP;\n      tuplet.setTupletLocation(direction);\n\n      // If any of the notes in the tuplet are not beamed, draw a bracket.\n      let bracketed = false;\n      for (let i = 0; i < tuplet.notes.length; i++) {\n        const note = tuplet.notes[i];\n        if (!note.hasBeam()) {\n          bracketed = true;\n          break;\n        }\n      }\n      tuplet.setBracketed(bracketed);\n    });\n\n    return beams;\n  }\n\n  constructor(notes: StemmableNote[], auto_stem: boolean = false) {\n    super();\n\n    if (!notes || notes.length === 0) {\n      throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n    }\n\n    if (notes.length === 1) {\n      throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n    }\n\n    // Validate beam line, direction and ticks.\n    this.ticks = notes[0].getIntrinsicTicks();\n\n    if (this.ticks >= Flow.durationToTicks('4')) {\n      throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n    }\n\n    let i; // shared iterator\n    let note;\n\n    this.stem_direction = Stem.UP;\n\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (note.hasStem()) {\n        this.stem_direction = note.getStemDirection();\n        break;\n      }\n    }\n\n    let stem_direction = this.stem_direction;\n    // Figure out optimal stem direction based on given notes\n\n    if (auto_stem && isStaveNote(notes[0])) {\n      stem_direction = calculateStemDirection(notes);\n    } else if (auto_stem && isTabNote(notes[0])) {\n      // Auto Stem TabNotes\n      const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n      stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n    }\n\n    // Apply stem directions and attach beam to notes\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (auto_stem) {\n        note.setStemDirection(stem_direction);\n        this.stem_direction = stem_direction;\n      }\n      note.setBeam(this);\n    }\n\n    this.postFormatted = false;\n    this.notes = notes;\n    this.beam_count = this.getBeamCount();\n    this.break_on_indices = [];\n    this.render_options = {\n      beam_width: 5,\n      max_slope: 0.25,\n      min_slope: -0.25,\n      slope_iterations: 20,\n      slope_cost: 100,\n      show_stemlets: false,\n      stemlet_extension: 7,\n      partial_beam_length: 10,\n      flat_beams: false,\n      min_flat_beam_offset: 15,\n    };\n  }\n\n  /** Get the notes in this beam. */\n  getNotes(): StemmableNote[] {\n    return this.notes;\n  }\n\n  /** Get the max number of beams in the set of notes. */\n  getBeamCount(): number {\n    const beamCounts = this.notes.map((note) => note.getGlyph().beam_count);\n\n    const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n\n    return maxBeamCount;\n  }\n\n  /** Set which note `indices` to break the secondary beam at. */\n  breakSecondaryAt(indices: number[]): this {\n    this.break_on_indices = indices;\n    return this;\n  }\n\n  /** Return the y coordinate for linear function. */\n  getSlopeY(x: number, first_x_px: number, first_y_px: number, slope: number): number {\n    return first_y_px + (x - first_x_px) * slope;\n  }\n\n  /** Calculate the best possible slope for the provided notes. */\n  calculateSlope(): void {\n    const {\n      notes,\n      stem_direction: stemDirection,\n      render_options: { max_slope, min_slope, slope_iterations, slope_cost },\n    } = this;\n\n    const firstNote = notes[0];\n    const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n    const increment = (max_slope - min_slope) / slope_iterations;\n    let minCost = Number.MAX_VALUE;\n    let bestSlope = 0;\n    let yShift = 0;\n\n    // iterate through slope values to find best weighted fit\n    for (let slope = min_slope; slope <= max_slope; slope += increment) {\n      let totalStemExtension = 0;\n      let yShiftTemp = 0;\n\n      // iterate through notes, calculating y shift and stem extension\n      for (let i = 1; i < notes.length; ++i) {\n        const note = notes[i];\n        const adjustedStemTipY =\n          this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n\n        const stemTipY = note.getStemExtents().topY;\n        // beam needs to be shifted up to accommodate note\n        if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n          const diff = Math.abs(stemTipY - adjustedStemTipY);\n          yShiftTemp += diff * -stemDirection;\n          totalStemExtension += diff * i;\n        } else {\n          // beam overshoots note, account for the difference\n          totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n        }\n      }\n\n      // most engraving books suggest aiming for a slope about half the angle of the\n      // difference between the first and last notes' stem length;\n      const idealSlope = initialSlope / 2;\n      const distanceFromIdeal = Math.abs(idealSlope - slope);\n\n      // This tries to align most beams to something closer to the idealSlope, but\n      // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n      const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n\n      // update state when a more ideal slope is found\n      if (cost < minCost) {\n        minCost = cost;\n        bestSlope = slope;\n        yShift = yShiftTemp;\n      }\n    }\n\n    this.slope = bestSlope;\n    this.y_shift = yShift;\n  }\n\n  /** Calculate a slope and y-shift for flat beams. */\n  calculateFlatSlope(): void {\n    const {\n      notes,\n      stem_direction,\n      render_options: { beam_width, min_flat_beam_offset, flat_beam_offset },\n    } = this;\n\n    // If a flat beam offset has not yet been supplied or calculated,\n    // generate one based on the notes in this particular note group\n    let total = 0;\n    let extremeY = 0; // Store the highest or lowest note here\n    let extremeBeamCount = 0; // The beam count of the extreme note\n    let currentExtreme = 0;\n    for (let i = 0; i < notes.length; i++) {\n      // Total up all of the offsets so we can average them out later\n      const note = notes[i];\n      const stemTipY = note.getStemExtents().topY;\n      total += stemTipY;\n\n      // Store the highest (stems-up) or lowest (stems-down) note so the\n      //  offset can be adjusted in case the average isn't enough\n      if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\n        currentExtreme = stemTipY;\n        extremeY = Math.max(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      } else if (stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n        currentExtreme = stemTipY;\n        extremeY = Math.min(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      }\n    }\n\n    // Average the offsets to try and come up with a reasonable one that\n    //  works for all of the notes in the beam group.\n    let offset = total / notes.length;\n\n    // In case the average isn't long enough, add or subtract some more\n    //  based on the highest or lowest note (again, based on the stem\n    //  direction). This also takes into account the added height due to\n    //  the width of the beams.\n    const beamWidth = beam_width * 1.5;\n    const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\n    const newOffset = extremeY + extremeTest * -stem_direction;\n    if (stem_direction === Stem.DOWN && offset < newOffset) {\n      offset = extremeY + extremeTest;\n    } else if (stem_direction === Stem.UP && offset > newOffset) {\n      offset = extremeY - extremeTest;\n    }\n\n    if (!flat_beam_offset) {\n      // Set the offset for the group based on the calculations above.\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.DOWN && offset > flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.UP && offset < flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    }\n\n    // for flat beams, the slope and y_shift are simply 0\n    this.slope = 0;\n    this.y_shift = 0;\n  }\n\n  /** Return the Beam y offset. */\n  getBeamYToDraw(): number {\n    const firstNote = this.notes[0];\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    let beamY = firstStemTipY;\n\n    // For flat beams, set the first and last Y to the offset, rather than\n    //  using the note's stem extents.\n    if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n      beamY = this.render_options.flat_beam_offset;\n    }\n    return beamY;\n  }\n\n  /**\n   * Create new stems for the notes in the beam, so that each stem\n   * extends into the beams.\n   */\n  applyStemExtensions(): void {\n    const {\n      notes,\n      slope,\n      y_shift,\n      stem_direction,\n      beam_count,\n      render_options: { show_stemlets, stemlet_extension, beam_width },\n    } = this;\n\n    const firstNote = notes[0];\n    const firstStemTipY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n\n    for (let i = 0; i < notes.length; ++i) {\n      const note = notes[i];\n      const stem = note.getStem();\n      if (stem) {\n        const stemX = note.getStemX();\n        const { topY: stemTipY } = note.getStemExtents();\n        const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n        const preBeamExtension = stem.getExtension();\n        const beamExtension = stem_direction === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n\n        stem.setExtension(preBeamExtension + beamExtension);\n        stem.adjustHeightForBeam();\n\n        if (note.isRest() && show_stemlets) {\n          const beamWidth = beam_width;\n          const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\n          stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\n        }\n      } else {\n        throw new RuntimeError('NoStem', 'stem undefined.');\n      }\n    }\n  }\n\n  /** Return upper level beam direction. */\n  lookupBeamDirection(duration: string, prev_tick: number, tick: number, next_tick: number): string {\n    if (duration === '4') {\n      return BEAM_LEFT;\n    }\n\n    const lookup_duration = `${Flow.durationToNumber(duration) / 2}`;\n    const prev_note_gets_beam = prev_tick < Flow.durationToTicks(lookup_duration);\n    const next_note_gets_beam = next_tick < Flow.durationToTicks(lookup_duration);\n    const note_gets_beam = tick < Flow.durationToTicks(lookup_duration);\n\n    if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_BOTH;\n    } else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\n      return BEAM_LEFT;\n    } else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_RIGHT;\n    }\n\n    return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick);\n  }\n\n  /** Get the x coordinates for the beam lines of specific `duration`. */\n  getBeamLines(duration: string): { start: number; end?: number }[] {\n    const tick_of_duration = Flow.durationToTicks(duration);\n    let beam_started = false;\n\n    type BeamInfo = { start: number; end?: number };\n    const beam_lines: BeamInfo[] = [];\n    let current_beam: BeamInfo | undefined = undefined;\n    const partial_beam_length = this.render_options.partial_beam_length;\n    let previous_should_break = false;\n    let tick_tally = 0;\n    for (let i = 0; i < this.notes.length; ++i) {\n      const note = this.notes[i];\n\n      // See if we need to break secondary beams on this note.\n      const ticks = note.getTicks().value();\n      tick_tally += ticks;\n      let should_break = false;\n\n      // 8th note beams are always drawn.\n      if (parseInt(duration, 10) >= 8) {\n        // First, check to see if any indices were set up through breakSecondaryAt()\n        should_break = this.break_on_indices.indexOf(i) !== -1;\n\n        // If the secondary breaks were auto-configured in the render options,\n        //  handle that as well.\n        if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n          tick_tally = 0;\n          should_break = true;\n        }\n      }\n      const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\n\n      const stem_x = note.getStemX() - Stem.WIDTH / 2;\n\n      // Check to see if the next note in the group will get a beam at this\n      //  level. This will help to inform the partial beam logic below.\n      const prev_note = this.notes[i - 1];\n      const next_note = this.notes[i + 1];\n      const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\n      const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\n      const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      if (note_gets_beam) {\n        // This note gets a beam at the current level\n        if (beam_started) {\n          // We're currently in the middle of a beam. Just continue it on to\n          //  the stem X of the current note.\n          current_beam = beam_lines[beam_lines.length - 1];\n          current_beam.end = stem_x;\n\n          // If a secondary beam break is set up, end the beam right now.\n          if (should_break) {\n            beam_started = false;\n            if (next_note && !next_note_gets_beam && current_beam.end === undefined) {\n              // This note gets a beam,.but the next one does not. This means\n              //  we need a partial pointing right.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          }\n        } else {\n          // No beam started yet. Start a new one.\n          current_beam = { start: stem_x, end: undefined };\n          beam_started = true;\n\n          if (beam_alone) {\n            // previous and next beam exists and does not get a beam but current gets it.\n            const prev_tick = prev_note.getIntrinsicTicks();\n            const next_tick = next_note.getIntrinsicTicks();\n            const tick = note.getIntrinsicTicks();\n            const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick);\n\n            if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\n              current_beam.end = current_beam.start - partial_beam_length;\n            } else {\n              current_beam.end = current_beam.start + partial_beam_length;\n            }\n          } else if (!next_note_gets_beam) {\n            // The next note doesn't get a beam. Draw a partial.\n            if ((previous_should_break || i === 0) && next_note) {\n              // This is the first note (but not the last one), or it is\n              //  following a secondary break. Draw a partial to the right.\n              current_beam.end = current_beam.start + partial_beam_length;\n            } else {\n              // By default, draw a partial to the left.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          } else if (should_break) {\n            // This note should have a secondary break after it. Even though\n            //  we just started a beam, it needs to end immediately.\n            current_beam.end = current_beam.start - partial_beam_length;\n            beam_started = false;\n          }\n          beam_lines.push(current_beam);\n        }\n      } else {\n        // The current note does not get a beam.\n        beam_started = false;\n      }\n\n      // Store the secondary break flag to inform the partial beam logic in\n      //  the next iteration of the loop.\n      previous_should_break = should_break;\n    }\n\n    // Add a partial beam pointing left if this is the last note in the group\n    const last_beam = beam_lines[beam_lines.length - 1];\n    if (last_beam && last_beam.end === undefined) {\n      last_beam.end = last_beam.start - partial_beam_length;\n    }\n    return beam_lines;\n  }\n\n  /** Render the stems for each note. */\n  protected drawStems(ctx: RenderContext): void {\n    this.notes.forEach((note) => {\n      const stem = note.getStem();\n      if (stem) {\n        stem.setContext(ctx).draw();\n      }\n    }, this);\n  }\n\n  // Render the beam lines\n  protected drawBeamLines(ctx: RenderContext): void {\n    const valid_beam_durations = ['4', '8', '16', '32', '64'];\n\n    const firstNote = this.notes[0];\n    let beamY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n    const beamThickness = this.render_options.beam_width * this.stem_direction;\n\n    // Draw the beams.\n    for (let i = 0; i < valid_beam_durations.length; ++i) {\n      const duration = valid_beam_durations[i];\n      const beamLines = this.getBeamLines(duration);\n\n      for (let j = 0; j < beamLines.length; ++j) {\n        const beam_line = beamLines[j];\n        const startBeamX = beam_line.start;\n\n        const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n        const lastBeamX = beam_line.end;\n        if (lastBeamX) {\n          const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n\n          ctx.beginPath();\n          ctx.moveTo(startBeamX, startBeamY);\n          ctx.lineTo(startBeamX, startBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY);\n          ctx.closePath();\n          ctx.fill();\n        } else {\n          throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n        }\n      }\n\n      beamY += beamThickness * 1.5;\n    }\n  }\n\n  /** Pre-format the beam. */\n  preFormat(): this {\n    return this;\n  }\n\n  /**\n   * Post-format the beam. This can only be called after\n   * the notes in the beam have both `x` and `y` values. ie: they've\n   * been formatted and have staves.\n   */\n  postFormat(): void {\n    if (this.postFormatted) return;\n\n    // Calculate a smart slope if we're not forcing the beams to be flat.\n    if (isTabNote(this.notes[0]) || this.render_options.flat_beams) {\n      this.calculateFlatSlope();\n    } else {\n      this.calculateSlope();\n    }\n    this.applyStemExtensions();\n\n    this.postFormatted = true;\n  }\n\n  /** Render the beam to the canvas context */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    if (this.unbeamable) return;\n\n    if (!this.postFormatted) {\n      this.postFormat();\n    }\n\n    this.drawStems(ctx);\n    this.applyStyle();\n    this.drawBeamLines(ctx);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { RuntimeError, defined } from './util';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { Fraction } from './fraction';\nimport { RenderContext } from './types/common';\nimport { Stave } from './stave';\nimport { Tickable } from './tickable';\n\nexport interface VoiceTime {\n  num_beats: number;\n  beat_value: number;\n  /** Defaults to `Flow.RESOLUTION` if not provided. */\n  resolution?: number;\n}\n\nexport enum VoiceMode {\n  STRICT = 1,\n  SOFT = 2,\n  FULL = 3,\n}\n\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n  static get CATEGORY(): string {\n    return 'Voice';\n  }\n\n  /**\n   * Modes allow the addition of ticks in three different ways:\n   * - STRICT: This is the default. Ticks must fill the voice.\n   * - SOFT: Ticks can be added without restrictions.\n   * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n   */\n  static get Mode(): typeof VoiceMode {\n    return VoiceMode;\n  }\n\n  protected resolutionMultiplier: number = 1;\n  protected smallestTickCount: Fraction;\n  protected stave?: Stave;\n  protected mode: VoiceMode = VoiceMode.STRICT;\n  protected expTicksUsed?: number;\n  protected preFormatted?: boolean;\n  protected options: { softmaxFactor: number };\n\n  protected readonly totalTicks: Fraction;\n  protected readonly ticksUsed: Fraction = new Fraction(0, 1);\n  protected readonly largestTickWidth: number = 0;\n  protected readonly tickables: Tickable[] = [];\n  protected readonly time: Required<VoiceTime>;\n\n  constructor(time?: VoiceTime | string, options?: { softmaxFactor: number }) {\n    super();\n\n    this.options = {\n      softmaxFactor: 100,\n      ...options,\n    };\n\n    // Convert the `time` string into a VoiceTime object if necessary.\n    let voiceTime: VoiceTime | undefined;\n    if (typeof time === 'string') {\n      // Time signature shortcut: \"4/4\", \"3/8\", etc.\n      const match = time.match(/(\\d+)\\/(\\d+)/);\n      if (match) {\n        voiceTime = {\n          num_beats: parseInt(match[1]),\n          beat_value: parseInt(match[2]),\n        };\n      }\n    } else {\n      voiceTime = time;\n    }\n\n    // Default time signature is 4/4.\n    this.time = {\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n      ...voiceTime,\n    };\n\n    // Recalculate total ticks.\n    this.totalTicks = new Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n    this.smallestTickCount = this.totalTicks.clone();\n  }\n\n  /** Get the total ticks in the voice. */\n  getTotalTicks(): Fraction {\n    return this.totalTicks;\n  }\n\n  /** Get the total ticks used in the voice by all the tickables. */\n  getTicksUsed(): Fraction {\n    return this.ticksUsed;\n  }\n\n  /** Get the largest width of all the tickables. */\n  getLargestTickWidth(): number {\n    return this.largestTickWidth;\n  }\n\n  /** Get the tick count for the shortest tickable */\n  getSmallestTickCount(): Fraction {\n    return this.smallestTickCount;\n  }\n\n  /** Get the tickables in the voice. */\n  getTickables(): Tickable[] {\n    return this.tickables;\n  }\n\n  /** Get the voice mode. */\n  getMode(): number {\n    return this.mode;\n  }\n\n  /**\n   * Set the voice mode.\n   * @param mode value from `VoiceMode`\n   */\n  setMode(mode: number): this {\n    this.mode = mode;\n    return this;\n  }\n\n  /** Get the resolution multiplier for the voice. */\n  getResolutionMultiplier(): number {\n    return this.resolutionMultiplier;\n  }\n\n  /** Get the actual tick resolution for the voice. */\n  getActualResolution(): number {\n    return this.resolutionMultiplier * this.time.resolution;\n  }\n\n  /** Set the voice's stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    // Reset the bounding box so we can reformat.\n    this.boundingBox = undefined;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  /** Get the bounding box for the voice. */\n  getBoundingBox(): BoundingBox | undefined {\n    if (!this.boundingBox) {\n      const stave = this.checkStave();\n      let boundingBox = undefined;\n      for (let i = 0; i < this.tickables.length; ++i) {\n        const tickable = this.tickables[i];\n        tickable.setStave(stave);\n        const bb = tickable.getBoundingBox();\n        if (bb) {\n          boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n        }\n      }\n      this.boundingBox = boundingBox;\n    }\n    return this.boundingBox;\n  }\n\n  /** Set the voice mode to strict or soft. */\n  setStrict(strict: boolean): this {\n    this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n    return this;\n  }\n\n  /** Determine if the voice is complete according to the voice mode. */\n  isComplete(): boolean {\n    if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n      return this.ticksUsed.equals(this.totalTicks);\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * We use softmax to layout the tickables proportional to the exponent of\n   * their duration. The softmax factor is used to determine the 'linearness' of\n   * the layout.\n   *\n   * The softmax of all the tickables in this voice should sum to 1.\n   */\n  setSoftmaxFactor(factor: number): this {\n    this.options.softmaxFactor = factor;\n    return this;\n  }\n\n  /**\n   * Calculate the sum of the exponents of all the ticks in this voice to use\n   * as the denominator of softmax.\n   */\n  protected reCalculateExpTicksUsed(): number {\n    const totalTicks = this.ticksUsed.value();\n    const exp = (tickable: Tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n    this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b, 0);\n    return this.expTicksUsed;\n  }\n\n  /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n  softmax(tickValue: number): number {\n    if (!this.expTicksUsed) {\n      this.expTicksUsed = this.reCalculateExpTicksUsed();\n    }\n\n    const totalTicks = this.ticksUsed.value();\n    const exp = (v: number) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n    const sm = exp(tickValue) / this.expTicksUsed;\n    return sm;\n  }\n\n  /** Add a tickable to the voice. */\n  addTickable(tickable: Tickable): this {\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      // Update the total ticks for this line.\n      this.ticksUsed.add(ticks);\n      this.expTicksUsed = 0; // reset\n\n      if (\n        (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n        this.ticksUsed.greaterThan(this.totalTicks)\n      ) {\n        this.ticksUsed.subtract(ticks);\n        throw new RuntimeError('BadArgument', 'Too many ticks.');\n      }\n\n      // Track the smallest tickable for formatting.\n      if (ticks.lessThan(this.smallestTickCount)) {\n        this.smallestTickCount = ticks.clone();\n      }\n\n      this.resolutionMultiplier = this.ticksUsed.denominator;\n\n      // Expand total ticks using denominator from ticks used.\n      this.totalTicks.add(0, this.ticksUsed.denominator);\n    }\n\n    // Add the tickable to the line.\n    this.tickables.push(tickable);\n    tickable.setVoice(this);\n    return this;\n  }\n\n  /** Add an array of tickables to the voice. */\n  addTickables(tickables: Tickable[]): this {\n    for (let i = 0; i < tickables.length; ++i) {\n      this.addTickable(tickables[i]);\n    }\n    return this;\n  }\n\n  /** Preformat the voice by applying the voice's stave to each note. */\n  preFormat(): this {\n    if (this.preFormatted) return this;\n    const stave = this.checkStave();\n    this.tickables.forEach((tickable) => {\n      if (!tickable.getStave()) {\n        tickable.setStave(stave);\n      }\n    });\n    this.preFormatted = true;\n    return this;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  /**\n   * Render the voice onto the canvas `context` and an optional `stave`.\n   * If `stave` is omitted, it is expected that the notes have staves\n   * already set.\n   *\n   * This method also calculates the voice's boundingBox while drawing\n   * the notes. Note the similarities with this.getBoundingBox().\n   */\n  draw(context: RenderContext = this.checkContext(), stave?: Stave): void {\n    stave = stave ?? this.stave;\n    this.setRendered();\n    let boundingBox = undefined;\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      // Set the stave if provided.\n      if (stave) {\n        tickable.setStave(stave);\n      }\n      defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n      const bb = tickable.getBoundingBox();\n      if (bb) {\n        boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n      }\n\n      tickable.setContext(context);\n      tickable.drawWithStyle();\n    }\n\n    this.boundingBox = boundingBox;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { Glyph } from './glyph';\nimport { FontInfo, RenderContext } from './types/common';\nimport { Stave } from './stave';\n\nfunction drawBoldDoubleLine(ctx: RenderContext, type: number, topX: number, topY: number, botY: number) {\n  if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n  }\n\n  let x_shift = 3;\n  let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n  const thickLineOffset = 2; // For aesthetics\n\n  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    x_shift = -5; // Flips the side of the thin line\n    variableWidth = 3;\n  }\n\n  // Thin line\n  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n  // Thick line\n  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n  static get CATEGORY(): string {\n    return 'StaveConnector';\n  }\n\n  protected thickness: number;\n  protected width: number;\n  protected font: FontInfo;\n  protected texts: {\n    content: string;\n    options: {\n      shift_x: number;\n      shift_y: number;\n    };\n  }[];\n\n  protected type: number;\n  protected x_shift: number;\n  protected top_stave: Stave;\n  protected bottom_stave: Stave;\n\n  /**\n   * SINGLE_LEFT and SINGLE are the same value for compatibility\n   * with older versions of vexflow which didn't have right sided\n   * stave connectors.\n   */\n  static readonly type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n  };\n\n  /**\n   * Connector type:\n   * * \"singleRight\"\n   * * \"singleLeft\"\n   * * \"single\"\n   * * \"double\"\n   * * \"brace\"\n   * * \"bracket\"\n   * * \"boldDoubleLeft\"\n   * * \"boldDoubleRight\"\n   * * \"thinDouble\"\n   * * \"none\"\n   */\n  static readonly typeString: Record<string, number> = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n  };\n\n  constructor(top_stave: Stave, bottom_stave: Stave) {\n    super();\n\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n    this.width = 3;\n    this.top_stave = top_stave;\n    this.bottom_stave = bottom_stave;\n    this.type = StaveConnector.type.DOUBLE;\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n    // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n    // 2. Offset BRACE type not to overlap with another StaveConnector\n    this.x_shift = 0;\n    this.texts = [];\n  }\n\n  /**\n   * Set type.\n   * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n   */\n  setType(type: number | string): this {\n    type = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n\n    if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  /** Set optional associated Text. */\n  setText(text: string, options: { shift_x?: number; shift_y?: number } = {}): this {\n    this.texts.push({\n      content: text,\n      options: {\n        shift_x: 0,\n        shift_y: 0,\n        ...options,\n      },\n    });\n    return this;\n  }\n\n  /** Set connector x shift. */\n  setXShift(x_shift: number): this {\n    if (typeof x_shift !== 'number') {\n      throw new RuntimeError('InvalidType', 'x_shift must be a Number');\n    }\n\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  /** Render connector and associated text. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let topY = this.top_stave.getYForLine(0);\n    let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n    let width = this.width;\n    let topX = this.top_stave.getX();\n\n    const isRightSidedConnector =\n      this.type === StaveConnector.type.SINGLE_RIGHT ||\n      this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n      this.type === StaveConnector.type.THIN_DOUBLE;\n\n    if (isRightSidedConnector) {\n      topX = this.top_stave.getX() + this.top_stave.getWidth();\n    }\n\n    let attachment_height = botY - topY;\n    switch (this.type) {\n      case StaveConnector.type.SINGLE:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_LEFT:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_RIGHT:\n        width = 1;\n        break;\n      case StaveConnector.type.DOUBLE:\n        topX -= this.width + 2;\n        topY -= this.thickness;\n        attachment_height += 0.5;\n        break;\n      case StaveConnector.type.BRACE: {\n        width = 12;\n        // May need additional code to draw brace\n        const x1 = this.top_stave.getX() - 2 + this.x_shift;\n        const y1 = topY;\n        const x3 = x1;\n        const y3 = botY;\n        const x2 = x1 - width;\n        const y2 = y1 + attachment_height / 2.0;\n        const cpx1 = x2 - 0.9 * width;\n        const cpy1 = y1 + 0.2 * attachment_height;\n        const cpx2 = x1 + 1.1 * width;\n        const cpy2 = y2 - 0.135 * attachment_height;\n        const cpx3 = cpx2;\n        const cpy3 = y2 + 0.135 * attachment_height;\n        const cpx4 = cpx1;\n        const cpy4 = y3 - 0.2 * attachment_height;\n        const cpx5 = x2 - width;\n        const cpy5 = cpy4;\n        const cpx6 = x1 + 0.4 * width;\n        const cpy6 = y2 + 0.135 * attachment_height;\n        const cpx7 = cpx6;\n        const cpy7 = y2 - 0.135 * attachment_height;\n        const cpx8 = cpx5;\n        const cpy8 = cpy1;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n        ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n        ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n        ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n        ctx.fill();\n        ctx.stroke();\n        break;\n      }\n      case StaveConnector.type.BRACKET:\n        topY -= 6;\n        botY += 6;\n        attachment_height = botY - topY;\n        Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n        Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n        topX -= this.width + 2;\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_LEFT:\n        drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n        drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.THIN_DOUBLE:\n        width = 1;\n        attachment_height -= this.thickness;\n        break;\n      case StaveConnector.type.NONE:\n        break;\n      default:\n        throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n    }\n\n    if (\n      this.type !== StaveConnector.type.BRACE &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n      this.type !== StaveConnector.type.NONE\n    ) {\n      ctx.fillRect(topX, topY, width, attachment_height);\n    }\n\n    // If the connector is a thin double barline, draw the paralell line\n    if (this.type === StaveConnector.type.THIN_DOUBLE) {\n      ctx.fillRect(topX - 3, topY, width, attachment_height);\n    }\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Add stave connector text\n    for (let i = 0; i < this.texts.length; i++) {\n      const text = this.texts[i];\n      const text_width = ctx.measureText('' + text.content).width;\n      const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n      const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n\n      ctx.fillText('' + text.content, x, y + 4);\n    }\n    ctx.restore();\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\n\nimport { RuntimeError } from './util';\nimport { Modifier } from './modifier';\nimport { FontInfo } from './types/common';\nimport { StaveNote } from './stavenote';\nimport { Builder } from './easyscore';\nimport { ModifierContextState } from './modifiercontext';\n\nexport class FretHandFinger extends Modifier {\n  static get CATEGORY(): string {\n    return 'FretHandFinger';\n  }\n\n  // Arrange fingerings inside a ModifierContext.\n  static format(nums: FretHandFinger[], state: ModifierContextState): boolean {\n    const { left_shift, right_shift } = state;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shiftLeft = 0;\n    let shiftRight = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote();\n      const pos = num.getPosition();\n      const index = num.checkIndex();\n      const props = note.getKeyProps()[index];\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n          }\n          if (right_shift === 0) {\n            shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        note,\n        num,\n        pos,\n        line: props.line,\n        shiftL: shiftLeft,\n        shiftR: shiftRight,\n      });\n    }\n\n    // Sort fingernumbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let numShiftL = 0;\n    let numShiftR = 0;\n    let xWidthL = 0;\n    let xWidthR = 0;\n    let lastLine = null;\n    let lastNote = null;\n\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n\n      // Reset the position of the string number every line.\n      if (line !== lastLine || note !== lastNote) {\n        numShiftL = left_shift + shiftL;\n        numShiftR = right_shift + shiftR;\n      }\n\n      const numWidth = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift + numShiftL);\n        num_shift = left_shift + numWidth; // spacing\n        xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(numShiftR);\n        num_shift = shiftRight + numWidth; // spacing\n        xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n      }\n      lastLine = line;\n      lastNote = note;\n    }\n\n    state.left_shift += xWidthL;\n    state.right_shift += xWidthR;\n\n    return true;\n  }\n\n  static easyScoreHook({ fingerings }: { fingerings?: string } = {}, note: StaveNote, builder: Builder): void {\n    fingerings\n      ?.split(',')\n      .map((fingeringString: string) => {\n        const split = fingeringString.trim().split('.');\n        const params: { number: string; position?: string } = { number: split[0] };\n        if (split[1]) params.position = split[1];\n        return builder.getFactory().Fingering(params);\n      })\n      .map((fingering: Modifier, index: number) => note.addModifier(fingering, index));\n  }\n\n  protected finger: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected font: FontInfo;\n\n  constructor(finger: string) {\n    super();\n\n    this.finger = finger;\n    this.width = 7;\n    this.position = Modifier.Position.LEFT; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  setFretHandFinger(finger: string): this {\n    this.finger = finger;\n    return this;\n  }\n\n  getFretHandFinger(): string {\n    return this.finger;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset + 5;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n        dot_x -= 4;\n        dot_y -= 12;\n        break;\n      case Modifier.Position.BELOW:\n        dot_x -= 2;\n        dot_y += 10;\n        break;\n      case Modifier.Position.LEFT:\n        dot_x -= this.width;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += 1;\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n    }\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText('' + this.finger, dot_x, dot_y);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\n\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { RenderContext } from './types/common';\n\nexport class NoteSubGroup extends Modifier {\n  static get CATEGORY(): string {\n    return 'NoteSubGroup';\n  }\n\n  // Arrange groups inside a `ModifierContext`\n  static format(groups: NoteSubGroup[], state: ModifierContextState): boolean {\n    if (!groups || groups.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < groups.length; ++i) {\n      const group = groups[i];\n      group.preFormat();\n      width += group.getWidth();\n    }\n\n    state.left_shift += width;\n    return true;\n  }\n\n  protected subNotes: Note[];\n  protected preFormatted: boolean = false;\n  protected formatter: Formatter;\n  protected voice: Voice;\n\n  constructor(subNotes: Note[]) {\n    super();\n\n    this.position = Modifier.Position.LEFT;\n    this.subNotes = subNotes;\n    this.subNotes.forEach((subNote) => {\n      subNote.setIgnoreTicks(false);\n    });\n    this.width = 0;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.voice.addTickables(this.subNotes);\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  draw(): void {\n    const ctx: RenderContext = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n    this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n    this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\n\nimport { RuntimeError } from './util';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { FontInfo } from './types/common';\nimport { ModifierContextState } from './modifiercontext';\nimport { isNote, isStaveNote, isTabNote } from './typeguard';\n\nexport class Stroke extends Modifier {\n  static get CATEGORY(): string {\n    return 'Stroke';\n  }\n\n  static readonly Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3, // Arpeggiated chord\n    ROLL_UP: 4, // Arpeggiated chord\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n  };\n\n  protected options: {\n    all_voices: boolean;\n  };\n  protected all_voices: boolean;\n  protected type: number;\n\n  protected note_end?: Note;\n  protected render_options: {\n    font_scale: number;\n    stroke_px: number;\n    stroke_spacing: number;\n  };\n  protected font: FontInfo;\n\n  // Arrange strokes inside `ModifierContext`\n  static format(strokes: Stroke[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const stroke_spacing = 0;\n\n    if (!strokes || strokes.length === 0) return false;\n\n    const strokeList = strokes.map((stroke) => {\n      const note = stroke.getNote();\n      const index = stroke.checkIndex();\n      if (isStaveNote(note)) {\n        // Only StaveNote objects have getKeyProps().\n        const { line } = note.getKeyProps()[index];\n        const shift = note.getLeftDisplacedHeadPx();\n        return { line, shift, stroke };\n      } else if (isTabNote(note)) {\n        // Only TabNote objects have getPositions().\n        const { str: string } = note.getPositions()[index];\n        return { line: string, shift: 0, stroke };\n      } else {\n        throw new RuntimeError('Internal', 'Unexpected instance.');\n      }\n    });\n\n    const strokeShift = left_shift;\n\n    // There can only be one stroke .. if more than one, they overlay each other\n    const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n      stroke.setXShift(strokeShift + shift);\n      return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n    }, 0);\n\n    state.left_shift += xShift;\n\n    return true;\n  }\n\n  constructor(type: number, options?: { all_voices: boolean }) {\n    super();\n\n    this.options = { all_voices: true, ...options };\n\n    // multi voice - span stroke across all voices if true\n    this.all_voices = this.options.all_voices;\n\n    // multi voice - end note of stroke, set in draw()\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      font_scale: 38,\n      stroke_px: 3,\n      stroke_spacing: 10,\n    };\n\n    this.font = {\n      family: 'serif',\n      size: 10,\n      weight: 'bold italic',\n    };\n\n    this.setXShift(0);\n    this.setWidth(10);\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  addEndNote(note: Note): this {\n    this.note_end = note;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let ys = note.getYs();\n    let topY = start.y;\n    let botY = start.y;\n    const x = start.x - 5;\n    const line_space = note.checkStave().getSpacingBetweenLines();\n\n    const notes = this.checkModifierContext().getMembers(note.getCategory());\n    for (let i = 0; i < notes.length; i++) {\n      const note = notes[i];\n      if (isNote(note)) {\n        // Only Note objects have getYs().\n        // note is an instance of either StaveNote or TabNote.\n        ys = note.getYs();\n        for (let n = 0; n < ys.length; n++) {\n          if (this.note === notes[i] || this.all_voices) {\n            topY = Math.min(topY, ys[n]);\n            botY = Math.max(botY, ys[n]);\n          }\n        }\n      }\n    }\n\n    let arrow = '';\n    let arrow_shift_x = 0;\n    let arrow_y = 0;\n    let text_shift_x = 0;\n    let text_y = 0;\n\n    switch (this.type) {\n      case Stroke.Type.BRUSH_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        arrow_y = topY - line_space / 2 + 10;\n        botY += line_space / 2;\n        break;\n      case Stroke.Type.BRUSH_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = 0.5;\n        arrow_y = botY + line_space / 2;\n        topY -= line_space / 2;\n        break;\n      case Stroke.Type.ROLL_DOWN:\n      case Stroke.Type.RASQUEDO_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        text_shift_x = this.x_shift + arrow_shift_x - 2;\n        if (isStaveNote(note)) {\n          topY += 1.5 * line_space;\n          if ((botY - topY) % 2 !== 0) {\n            botY += 0.5 * line_space;\n          } else {\n            botY += line_space;\n          }\n          arrow_y = topY - line_space;\n          text_y = botY + line_space + 2;\n        } else {\n          topY += 1.5 * line_space;\n          botY += line_space;\n          arrow_y = topY - 0.75 * line_space;\n          text_y = botY + 0.25 * line_space;\n        }\n        break;\n      case Stroke.Type.ROLL_UP:\n      case Stroke.Type.RASQUEDO_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = -4;\n        text_shift_x = this.x_shift + arrow_shift_x - 1;\n        if (isStaveNote(note)) {\n          arrow_y = line_space / 2;\n          topY += 0.5 * line_space;\n          if ((botY - topY) % 2 === 0) {\n            botY += line_space / 2;\n          }\n          arrow_y = botY + 0.5 * line_space;\n          text_y = topY - 1.25 * line_space;\n        } else {\n          topY += 0.25 * line_space;\n          botY += 0.5 * line_space;\n          arrow_y = botY + 0.25 * line_space;\n          text_y = topY - line_space;\n        }\n        break;\n      case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n        topY += 0.5 * line_space;\n        botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\n        break;\n      default:\n        throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n    }\n\n    let strokeLine = 'straight';\n    // Draw the stroke\n    if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n      ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);\n    } else {\n      strokeLine = 'wiggly';\n      if (isStaveNote(note)) {\n        for (let i = topY; i <= botY; i += line_space) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n      } else {\n        let i;\n        for (i = topY; i <= botY; i += 10) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n        if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n          text_y = i + 0.25 * line_space;\n        }\n      }\n    }\n\n    if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n      return; // skip drawing arrow heads or text\n    }\n\n    // Draw the arrow head\n    Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {\n      category: `stroke.${arrow}.${strokeLine}`,\n    });\n\n    // Draw the rasquedo \"R\"\n    if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText('R', x + text_shift_x, text_y);\n      ctx.restore();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { RenderContext, TextMeasure } from './types/common';\nimport { warn } from './util';\n\n/**\n * A rendering context for the Canvas backend (CanvasRenderingContext2D).\n */\nexport class CanvasContext implements RenderContext {\n  vexFlowCanvasContext: CanvasRenderingContext2D;\n  canvas: HTMLCanvasElement | { width: number; height: number };\n  background_fillStyle?: string;\n  textHeight: number = 0;\n\n  static get WIDTH(): number {\n    return 600;\n  }\n\n  static get HEIGHT(): number {\n    return 400;\n  }\n\n  static get CANVAS_BROWSER_SIZE_LIMIT(): number {\n    return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n  }\n\n  static SanitizeCanvasDims(width: number, height: number): [number, number] {\n    const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n    if (Math.max(width, height) > limit) {\n      warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n      if (width > limit) {\n        width = limit;\n      }\n      if (height > limit) {\n        height = limit;\n      }\n    }\n    return [width, height];\n  }\n\n  /**\n   * @param context\n   */\n  constructor(context: CanvasRenderingContext2D) {\n    // Use a name that is unlikely to clash with a canvas context property.\n    this.vexFlowCanvasContext = context;\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT,\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n\n  clear(): void {\n    this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // eslint-disable-next-line\n  openGroup(cls: string, id?: string, attrs?: { pointerBBox: boolean }): any {\n    // Containers not implemented.\n  }\n\n  closeGroup(): void {\n    // Containers not implemented.\n  }\n\n  // eslint-disable-next-line\n  add(child: any): void {\n    // Containers not implemented.\n  }\n\n  setFont(family: string, size: number, weight: string): this {\n    this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;\n    this.textHeight = (size * 4) / 3;\n    return this;\n  }\n\n  setRawFont(font: string): this {\n    this.vexFlowCanvasContext.font = font;\n\n    const fontArray = font.split(' ');\n    const size = Number(fontArray[0].match(/\\d+/));\n    // The font size is specified in points, scale it to canvas units.\n    // CSS specifies dpi to be 96 and there are 72 points to an inch: 96/72 == 4/3.\n    this.textHeight = (size * 4) / 3;\n\n    return this;\n  }\n\n  setFillStyle(style: string): this {\n    this.vexFlowCanvasContext.fillStyle = style;\n    return this;\n  }\n\n  // TODO: What is this method supposed to do?\n  // The SVGContext version doesn't do much...\n  // It only fills the area behind some tab number annotations.\n  setBackgroundFillStyle(style: string): this {\n    /*\n    // Should it fill the entire canvas rect? For example:\n    const oldFillStyle = this.vexFlowCanvasContext.fillStyle;\n    this.vexFlowCanvasContext.fillStyle = style;\n    this.vexFlowCanvasContext.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.vexFlowCanvasContext.fillStyle = oldFillStyle;\n    */\n    this.background_fillStyle = style;\n    return this;\n  }\n\n  setStrokeStyle(style: string): this {\n    this.vexFlowCanvasContext.strokeStyle = style;\n    return this;\n  }\n\n  setShadowColor(color: string): this {\n    this.vexFlowCanvasContext.shadowColor = color;\n    return this;\n  }\n\n  setShadowBlur(blur: number): this {\n    // CanvasRenderingContext2D does not scale the shadow blur by the current\n    // transform, so we have to do it manually. We assume uniform scaling\n    // (though allow for rotation) because the blur can only be scaled\n    // uniformly anyway.\n    const t = this.vexFlowCanvasContext.getTransform();\n    const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n    this.vexFlowCanvasContext.shadowBlur = scale * blur;\n    return this;\n  }\n\n  setLineWidth(width: number): this {\n    this.vexFlowCanvasContext.lineWidth = width;\n    return this;\n  }\n\n  setLineCap(capType: CanvasLineCap): this {\n    this.vexFlowCanvasContext.lineCap = capType;\n    return this;\n  }\n\n  setLineDash(dash: number[]): this {\n    this.vexFlowCanvasContext.setLineDash(dash);\n    return this;\n  }\n\n  // Only called if Renderer.USE_CANVAS_PROXY is true.\n  scale(x: number, y: number): this {\n    this.vexFlowCanvasContext.scale(x, y);\n    return this;\n  }\n\n  // CanvasRenderingContext2D does not have a resize function.\n  // renderer.ts calls ctx.scale() instead, so this method is never used.\n  // eslint-disable-next-line\n  resize(width: number, height: number): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  rect(x: number, y: number, width: number, height: number): this {\n    this.vexFlowCanvasContext.rect(x, y, width, height);\n    return this;\n  }\n\n  fillRect(x: number, y: number, width: number, height: number): this {\n    this.vexFlowCanvasContext.fillRect(x, y, width, height);\n    return this;\n  }\n\n  clearRect(x: number, y: number, width: number, height: number): this {\n    this.vexFlowCanvasContext.clearRect(x, y, width, height);\n    return this;\n  }\n\n  beginPath(): this {\n    this.vexFlowCanvasContext.beginPath();\n    return this;\n  }\n\n  moveTo(x: number, y: number): this {\n    this.vexFlowCanvasContext.moveTo(x, y);\n    return this;\n  }\n\n  lineTo(x: number, y: number): this {\n    this.vexFlowCanvasContext.lineTo(x, y);\n    return this;\n  }\n\n  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): this {\n    this.vexFlowCanvasContext.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    return this;\n  }\n\n  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): this {\n    this.vexFlowCanvasContext.quadraticCurveTo(cpx, cpy, x, y);\n    return this;\n  }\n\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise: boolean): this {\n    this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n    return this;\n  }\n\n  fill(): this {\n    this.vexFlowCanvasContext.fill();\n    return this;\n  }\n\n  stroke(): this {\n    this.vexFlowCanvasContext.stroke();\n    return this;\n  }\n\n  closePath(): this {\n    this.vexFlowCanvasContext.closePath();\n    return this;\n  }\n\n  measureText(text: string): TextMeasure {\n    const metrics = this.vexFlowCanvasContext.measureText(text);\n    return {\n      width: metrics.width,\n      height: this.textHeight,\n    };\n  }\n\n  fillText(text: string, x: number, y: number): this {\n    this.vexFlowCanvasContext.fillText(text, x, y);\n    return this;\n  }\n\n  save(): this {\n    this.vexFlowCanvasContext.save();\n    return this;\n  }\n\n  restore(): this {\n    this.vexFlowCanvasContext.restore();\n    return this;\n  }\n\n  set font(value: string) {\n    this.setRawFont(value);\n  }\n\n  get font(): string {\n    return this.vexFlowCanvasContext.font;\n  }\n\n  set fillStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.vexFlowCanvasContext.fillStyle = style;\n  }\n\n  get fillStyle(): string | CanvasGradient | CanvasPattern {\n    return this.vexFlowCanvasContext.fillStyle;\n  }\n\n  set strokeStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.vexFlowCanvasContext.strokeStyle = style;\n  }\n\n  get strokeStyle(): string | CanvasGradient | CanvasPattern {\n    return this.vexFlowCanvasContext.strokeStyle;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Gregory Ristow (2015)\n\nimport { RuntimeError, normalizeAngle, prefix } from './util';\nimport { RenderContext, TextMeasure } from './types/common';\n\n// eslint-disable-next-line\ntype Attributes = { [key: string]: any };\n\nconst attrNamesToIgnoreMap: { [nodeName: string]: Attributes } = {\n  path: {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  },\n  rect: {\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  },\n  text: {\n    width: true,\n    height: true,\n  },\n};\n\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\n\nconst TWO_PI = 2 * Math.PI;\n\ninterface State {\n  state: Attributes;\n  attributes: Attributes;\n  shadow_attributes: Attributes;\n  lineWidth: number;\n}\n\nclass MeasureTextCache {\n  protected txt?: SVGTextElement;\n\n  // The cache is keyed first by the text string, then by the font attributes\n  // joined together.\n  protected cache: Record<string, Record<string, TextMeasure>> = {};\n\n  lookup(text: string, svg: SVGSVGElement, attributes: Attributes): TextMeasure {\n    let entries = this.cache[text];\n    if (entries === undefined) {\n      entries = {};\n      this.cache[text] = entries;\n    }\n\n    const family = attributes['font-family'];\n    const size = attributes['font-size'];\n    const style = attributes['font-style'];\n    const weight = attributes['font-weight'];\n\n    const key = `${family}%${size}%${style}%${weight}`;\n    let entry = entries[key];\n    if (entry === undefined) {\n      entry = this.measureImpl(text, svg, attributes);\n      entries[key] = entry;\n    }\n    return entry;\n  }\n\n  measureImpl(text: string, svg: SVGSVGElement, attributes: Attributes): TextMeasure {\n    let txt = this.txt;\n    if (!txt) {\n      // Create the SVG text element that will be used to measure text in the event\n      // of a cache miss.\n      txt = document.createElementNS(SVG_NS, 'text');\n      this.txt = txt;\n    }\n\n    txt.textContent = text;\n    txt.setAttributeNS(null, 'font-family', attributes['font-family']);\n    txt.setAttributeNS(null, 'font-size', attributes['font-size']);\n    txt.setAttributeNS(null, 'font-style', attributes['font-style']);\n    txt.setAttributeNS(null, 'font-weight', attributes['font-weight']);\n    svg.appendChild(txt);\n    const bbox = txt.getBBox();\n    svg.removeChild(txt);\n\n    // Remove the trailing 'pt' from the font size and scale to convert from points\n    // to canvas units.\n    // CSS specifies dpi to be 96 and there are 72 points to an inch: 96/72 == 4/3.\n    const fontSize = attributes['font-size'];\n    const height = (fontSize.substring(0, fontSize.length - 2) * 4) / 3;\n    return {\n      width: bbox.width,\n      height: height,\n    };\n  }\n}\n\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext implements RenderContext {\n  protected static measureTextCache = new MeasureTextCache();\n\n  element: HTMLElement; // the parent DOM object\n  svg: SVGSVGElement;\n  width: number = 0;\n  height: number = 0;\n  path: string;\n  pen: { x: number; y: number };\n  lineWidth: number;\n  attributes: Attributes;\n  background_attributes: Attributes;\n  shadow_attributes: Attributes;\n  state: Attributes;\n  state_stack: State[];\n  parent: SVGGElement;\n  groups: SVGGElement[];\n  fontString: string = '';\n\n  constructor(element: HTMLElement) {\n    this.element = element;\n\n    const svg = this.create('svg');\n    // Add it to the canvas:\n    this.element.appendChild(svg);\n\n    // Point to it:\n    this.svg = svg;\n    this.groups = [this.svg]; // Create the group stack\n    this.parent = this.svg;\n\n    this.path = '';\n    this.pen = { x: NaN, y: NaN };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      'font-family': 'Arial',\n      'font-size': '8pt',\n      'font-weight': 'normal',\n    };\n\n    const defaultAttributes = {\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      fill: 'black',\n      stroke: 'black',\n      ...defaultAttributes,\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      fill: 'white',\n      stroke: 'white',\n      ...defaultAttributes,\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n  }\n\n  /**\n   * Use one of the overload signatures to create an SVG element of a specific type.\n   * The last overload accepts an arbitrary string, and is identical to the\n   * implementation signature.\n   * Feel free to add new overloads for other SVG element types as required.\n   */\n  create(svgElementType: 'g'): SVGGElement;\n  create(svgElementType: 'path'): SVGPathElement;\n  create(svgElementType: 'rect'): SVGRectElement;\n  create(svgElementType: 'svg'): SVGSVGElement;\n  create(svgElementType: 'text'): SVGTextElement;\n  create(svgElementType: string): SVGElement;\n  create(svgElementType: string): SVGElement {\n    return document.createElementNS(SVG_NS, svgElementType);\n  }\n\n  // Allow grouping elements in containers for interactivity.\n  openGroup(cls: string, id?: string, attrs?: { pointerBBox: boolean }): SVGGElement {\n    const group = this.create('g');\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', prefix(cls));\n    if (id) group.setAttribute('id', prefix(id));\n\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n    return group;\n  }\n\n  closeGroup(): void {\n    this.groups.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n\n  add(elem: SVGElement): void {\n    this.parent.appendChild(elem);\n  }\n\n  // ### Styling & State Methods:\n\n  setFont(family: string, size: number, weight: string): this {\n    // In SVG italic is handled by font-style.\n    // We search the weight argument and apply bold and italic\n    // to font-weight and font-style respectively.\n    let foundBold = false;\n    let foundItalic = false;\n    // Weight might also be a number (200, 400, etc...) so we\n    // test its type to be sure we have access to String methods.\n    if (typeof weight === 'string') {\n      // look for \"italic\" in the weight:\n      if (weight.indexOf('italic') !== -1) {\n        weight = weight.replace(/italic/g, '');\n        foundItalic = true;\n      }\n      // look for \"bold\" in weight\n      if (weight.indexOf('bold') !== -1) {\n        weight = weight.replace(/bold/g, '');\n        foundBold = true;\n      }\n      // remove any remaining spaces\n      weight = weight.replace(/ /g, '');\n    }\n    const noWeightProvided = typeof weight === 'undefined' || weight === '';\n    if (noWeightProvided) {\n      weight = 'normal';\n    }\n\n    const fontAttributes = {\n      'font-family': family,\n      'font-size': size + 'pt',\n      'font-weight': foundBold ? 'bold' : weight,\n      'font-style': foundItalic ? 'italic' : 'normal',\n    };\n\n    // Currently this.fontString only supports size & family. See setRawFont().\n    this.fontString = `${size}pt ${family}`;\n    this.attributes = { ...this.attributes, ...fontAttributes };\n    this.state = { ...this.state, ...fontAttributes };\n\n    return this;\n  }\n\n  setRawFont(font: string): this {\n    this.fontString = font.trim();\n    // Assumes size first, splits on space -- which is presently\n    // how all existing modules are calling this.\n    const fontArray = this.fontString.split(' ');\n\n    const size = fontArray[0];\n    this.attributes['font-size'] = size;\n    this.state['font-size'] = size;\n\n    const family = fontArray[1];\n    this.attributes['font-family'] = family;\n    this.state['font-family'] = family;\n\n    return this;\n  }\n\n  setFillStyle(style: string): this {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style: string): this {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style: string): this {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(color: string): this {\n    this.shadow_attributes.color = color;\n    return this;\n  }\n\n  /**\n   * @param blur A non-negative float specifying the level of shadow blur, where 0\n   *             represents no blur and larger numbers represent increasingly more blur.\n   * @returns this\n   */\n  setShadowBlur(blur: number): this {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  /**\n   * @param width\n   * @returns this\n   */\n  setLineWidth(width: number): this {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n    return this;\n  }\n\n  /**\n   * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n   * @returns this\n   *\n   * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n   */\n  setLineDash(lineDash: number[]): this {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      this.attributes['stroke-dasharray'] = lineDash.join(',');\n      return this;\n    } else {\n      throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n\n  /**\n   * @param capType\n   * @returns this\n   */\n  setLineCap(capType: CanvasLineCap): this {\n    this.attributes['stroke-linecap'] = capType;\n    return this;\n  }\n\n  // ### Sizing & Scaling Methods:\n\n  // TODO (GCR): See note at scale() -- separate our internal\n  // conception of pixel-based width/height from the style.width\n  // and style.height properties eventually to allow users to\n  // apply responsive sizing attributes to the SVG.\n  resize(width: number, height: number): this {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width.toString();\n\n    this.svg.style.width = width.toString();\n    this.svg.style.height = height.toString();\n\n    const attributes = {\n      width,\n      height,\n    };\n\n    this.applyAttributes(this.svg, attributes);\n    this.scale(this.state.scale.x, this.state.scale.y);\n    return this;\n  }\n\n  scale(x: number, y: number): this {\n    // uses viewBox to scale\n    // TODO (GCR): we may at some point want to distinguish the\n    // style.width / style.height properties that are applied to\n    // the SVG object from our internal conception of the SVG\n    // width/height.  This would allow us to create automatically\n    // scaling SVG's that filled their containers, for instance.\n    //\n    // As this isn't implemented in Canvas contexts,\n    // I've left as is for now, but in using the viewBox to\n    // handle internal scaling, am trying to make it possible\n    // for us to eventually move in that direction.\n\n    this.state.scale = { x, y };\n    const visibleWidth = this.width / x;\n    const visibleHeight = this.height / y;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n\n    return this;\n  }\n\n  /**\n   * 1 arg: string in the \"x y w h\" format\n   * 4 args: x:number, y:number, w:number, h:number\n   */\n  setViewBox(viewBox_or_minX: string | number, minY?: number, width?: number, height?: number): void {\n    if (typeof viewBox_or_minX === 'string') {\n      this.svg.setAttribute('viewBox', viewBox_or_minX);\n    } else {\n      const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }\n\n  // ### Drawing helper methods:\n\n  applyAttributes(element: SVGElement, attributes: Attributes): SVGElement {\n    const attrNamesToIgnore = attrNamesToIgnoreMap[element.nodeName];\n    Object.keys(attributes).forEach((propertyName) => {\n      if (attrNamesToIgnore && attrNamesToIgnore[propertyName]) {\n        return;\n      }\n      element.setAttributeNS(null, propertyName, attributes[propertyName]);\n    });\n\n    return element;\n  }\n\n  // ### Shape & Path Methods:\n\n  clear(): void {\n    // Clear the SVG by removing all inner children.\n\n    // (This approach is usually slightly more efficient\n    // than removing the old SVG & adding a new one to\n    // the container element, since it does not cause the\n    // container to resize twice.  Also, the resize\n    // triggered by removing the entire SVG can trigger\n    // a touchcancel event when the element resizes away\n    // from a touch point.)\n\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    }\n\n    // Replace the viewbox attribute we just removed:\n    this.scale(this.state.scale.x, this.state.scale.y);\n  }\n\n  // ## Rectangles:\n  rect(x: number, y: number, width: number, height: number, attributes?: Attributes): this {\n    // Avoid invalid negative height attribs by\n    // flipping the rectangle on its head:\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    // Create the rect & style it:\n    const rectangle = this.create('rect');\n    if (typeof attributes === 'undefined') {\n      attributes = {\n        fill: 'none',\n        'stroke-width': this.lineWidth,\n        stroke: 'black',\n      };\n    }\n\n    attributes = { ...attributes, x, y, width, height };\n\n    this.applyAttributes(rectangle, attributes);\n\n    this.add(rectangle);\n    return this;\n  }\n\n  fillRect(x: number, y: number, width: number, height: number): this {\n    const attributes = { fill: this.attributes.fill };\n    this.rect(x, y, width, height, attributes);\n    return this;\n  }\n\n  clearRect(x: number, y: number, width: number, height: number): this {\n    // TODO(GCR): Improve implementation of this...\n    // Currently it draws a box of the background color, rather\n    // than creating alpha through lower z-levels.\n    //\n    // See the implementation of this in SVGKit:\n    // http://sourceforge.net/projects/svgkit/\n    // as a starting point.\n    //\n    // Adding a large number of transform paths (as we would\n    // have to do) could be a real performance hit.  Since\n    // tabNote seems to be the only module that makes use of this\n    // it may be worth creating a separate tabStave that would\n    // draw lines around locations of tablature fingering.\n    //\n    this.rect(x, y, width, height, this.background_attributes);\n    return this;\n  }\n\n  // ## Paths:\n\n  beginPath(): this {\n    this.path = '';\n    this.pen.x = NaN;\n    this.pen.y = NaN;\n    return this;\n  }\n\n  moveTo(x: number, y: number): this {\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x: number, y: number): this {\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x: number, y: number): this {\n    this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1: number, y1: number, x: number, y: number): this {\n    this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise: boolean): this {\n    const x0 = x + radius * Math.cos(startAngle);\n    const y0 = y + radius * Math.sin(startAngle);\n\n    // Handle the edge case where arc length is greater than or equal to\n    // the circle's circumference:\n    //   https://html.spec.whatwg.org/multipage/canvas.html#ellipse-method-steps\n    if (\n      (!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n      (counterclockwise && startAngle - endAngle >= TWO_PI)\n    ) {\n      const x1 = x + radius * Math.cos(startAngle + Math.PI);\n      const y1 = y + radius * Math.sin(startAngle + Math.PI);\n      // There's no way to specify a completely circular arc in SVG so we have to\n      // use two semi-circular arcs.\n      this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n      this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n      this.pen.x = x0;\n      this.pen.y = y0;\n    } else {\n      const x1 = x + radius * Math.cos(endAngle);\n      const y1 = y + radius * Math.sin(endAngle);\n\n      startAngle = normalizeAngle(startAngle);\n      endAngle = normalizeAngle(endAngle);\n\n      let large: boolean;\n      if (Math.abs(endAngle - startAngle) < Math.PI) {\n        large = counterclockwise;\n      } else {\n        large = !counterclockwise;\n      }\n      if (startAngle > endAngle) {\n        large = !large;\n      }\n\n      const sweep = !counterclockwise;\n\n      this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n      this.pen.x = x1;\n      this.pen.y = y1;\n    }\n    return this;\n  }\n\n  closePath(): this {\n    this.path += 'Z';\n    return this;\n  }\n\n  private getShadowStyle(): string {\n    const sa = this.shadow_attributes;\n    // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n    // of the same radius, so we scale the drop-shadow radius here to make it\n    // look close to the canvas shadow.\n    return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n  }\n\n  fill(attributes: Attributes): this {\n    const path = this.create('path');\n    if (typeof attributes === 'undefined') {\n      attributes = { ...this.attributes, stroke: 'none' };\n    }\n\n    attributes.d = this.path;\n    if (this.shadow_attributes.width > 0) {\n      attributes.style = this.getShadowStyle();\n    }\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  stroke(): this {\n    const path = this.create('path');\n    const attributes: Attributes = {\n      ...this.attributes,\n      fill: 'none',\n      'stroke-width': this.lineWidth,\n      d: this.path,\n    };\n    if (this.shadow_attributes.width > 0) {\n      attributes.style = this.getShadowStyle();\n    }\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  // ## Text Methods:\n  measureText(text: string): TextMeasure {\n    return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\n  }\n\n  fillText(text: string, x: number, y: number): this {\n    if (!text || text.length <= 0) {\n      return this;\n    }\n    const attributes: Attributes = {\n      ...this.attributes,\n      stroke: 'none',\n      x,\n      y,\n    };\n\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n    return this;\n  }\n\n  save(): this {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n        scale: this.state.scale,\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n      lineWidth: this.lineWidth,\n    });\n    return this;\n  }\n\n  restore(): this {\n    // TODO(0xfe): State needs to be deep-restored.\n    const savedState = this.state_stack.pop();\n    if (savedState) {\n      const state = savedState;\n      this.state['font-family'] = state.state['font-family'];\n      this.state['font-weight'] = state.state['font-weight'];\n      this.state['font-style'] = state.state['font-style'];\n      this.state['font-size'] = state.state['font-size'];\n      this.state.scale = state.state.scale;\n\n      this.attributes['font-family'] = state.attributes['font-family'];\n      this.attributes['font-weight'] = state.attributes['font-weight'];\n      this.attributes['font-style'] = state.attributes['font-style'];\n      this.attributes['font-size'] = state.attributes['font-size'];\n\n      this.attributes.fill = state.attributes.fill;\n      this.attributes.stroke = state.attributes.stroke;\n      this.attributes['stroke-width'] = state.attributes['stroke-width'];\n      this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n\n      this.shadow_attributes.width = state.shadow_attributes.width;\n      this.shadow_attributes.color = state.shadow_attributes.color;\n\n      this.lineWidth = state.lineWidth;\n    }\n    return this;\n  }\n\n  set font(value: string) {\n    this.setRawFont(value);\n  }\n\n  get font(): string {\n    return this.fontString;\n  }\n\n  set fillStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.setFillStyle(style as string);\n  }\n\n  get fillStyle(): string | CanvasGradient | CanvasPattern {\n    return this.attributes.fill;\n  }\n\n  set strokeStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.setStrokeStyle(style as string);\n  }\n\n  get strokeStyle(): string | CanvasGradient | CanvasPattern {\n    return this.attributes.stroke;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { CanvasContext } from './canvascontext';\nimport { SVGContext } from './svgcontext';\nimport { RenderContext } from './types/common';\nimport { RuntimeError } from './util';\n\n// A ContextBuilder is either Renderer.getSVGContext or Renderer.getCanvasContext.\nexport type ContextBuilder = typeof Renderer.getSVGContext | typeof Renderer.getCanvasContext;\n\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n  protected elementId?: string;\n  protected element: HTMLCanvasElement | HTMLDivElement;\n  protected backend: number;\n\n  protected ctx: RenderContext;\n  // eslint-disable-next-line\n  protected paper: any;\n\n  static readonly Backends = {\n    CANVAS: 1,\n    SVG: 2,\n  };\n\n  // End of line types\n  static readonly LineEndType = {\n    NONE: 1, // No leg\n    UP: 2, // Upward leg\n    DOWN: 3, // Downward leg\n  };\n\n  static lastContext?: RenderContext = undefined;\n\n  static buildContext(\n    elementId: string | HTMLCanvasElement | HTMLDivElement,\n    backend: number,\n    width: number,\n    height: number,\n    background: string = '#FFF'\n  ): RenderContext {\n    const renderer = new Renderer(elementId, backend);\n    if (width && height) {\n      renderer.resize(width, height);\n    }\n\n    const ctx = renderer.getContext();\n    ctx.setBackgroundFillStyle(background);\n    Renderer.lastContext = ctx;\n    return ctx;\n  }\n\n  static getCanvasContext(elementId: string, width: number, height: number, background?: string): RenderContext {\n    return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n  }\n\n  static getSVGContext(elementId: string, width: number, height: number, background?: string): RenderContext {\n    return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n  }\n\n  // Draw a dashed line (horizontal, vertical or diagonal\n  // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n  // setting the second number to 0 draws a solid line.\n  static drawDashedLine(\n    context: RenderContext,\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    dashPattern: number[]\n  ): void {\n    context.beginPath();\n\n    const dx = toX - fromX;\n    const dy = toY - fromY;\n    const angle = Math.atan2(dy, dx);\n    let x = fromX;\n    let y = fromY;\n    context.moveTo(fromX, fromY);\n    let idx = 0;\n    let draw = true;\n    while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n      const dashLength = dashPattern[idx++ % dashPattern.length];\n      const nx = x + Math.cos(angle) * dashLength;\n      x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n      const ny = y + Math.sin(angle) * dashLength;\n      y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n      if (draw) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n      draw = !draw;\n    }\n\n    context.closePath();\n    context.stroke();\n  }\n\n  /**\n   * @param canvasId can be:\n   *   - a string element ID (of a canvas or div element)\n   *   - a canvas element\n   *   - a div element, which will contain the SVG output\n   * @param backend Renderer.Backends.CANVAS or Renderer.Backends.SVG\n   */\n  constructor(canvasId: string | HTMLCanvasElement | HTMLDivElement, backend: number) {\n    if (!canvasId) {\n      throw new RuntimeError('BadArgument', 'Invalid id for renderer.');\n    } else if (typeof canvasId === 'string') {\n      this.elementId = canvasId;\n      this.element = document.getElementById(canvasId) as HTMLCanvasElement | HTMLDivElement;\n    } else if ('getContext' in canvasId /* HTMLCanvasElement */) {\n      this.element = canvasId as HTMLCanvasElement;\n    } else {\n      // Assume it's a HTMLDivElement.\n      this.element = canvasId as HTMLDivElement;\n    }\n\n    // Verify backend and create context\n    this.backend = backend;\n    if (this.backend === Renderer.Backends.CANVAS) {\n      const canvasElement = this.element as HTMLCanvasElement;\n      if (!canvasElement.getContext) {\n        throw new RuntimeError('BadElement', `Can't get canvas context from element: ${canvasId}`);\n      } else {\n        const context = canvasElement.getContext('2d');\n        if (context) {\n          this.ctx = new CanvasContext(context);\n        } else {\n          throw new RuntimeError('BadElement', `Can't get canvas context from element: ${canvasId}`);\n        }\n      }\n    } else if (this.backend === Renderer.Backends.SVG) {\n      this.ctx = new SVGContext(this.element);\n    } else {\n      throw new RuntimeError('InvalidBackend', `No support for backend: ${this.backend}`);\n    }\n  }\n\n  resize(width: number, height: number): this {\n    if (this.backend === Renderer.Backends.CANVAS) {\n      const canvasElement = this.element as HTMLCanvasElement;\n      const devicePixelRatio = window.devicePixelRatio || 1;\n\n      // Scale the canvas size by the device pixel ratio clamping to the maximum\n      // supported size.\n      [width, height] = CanvasContext.SanitizeCanvasDims(width * devicePixelRatio, height * devicePixelRatio);\n\n      // Divide back down by the pixel ratio and convert to integers.\n      width = (width / devicePixelRatio) | 0;\n      height = (height / devicePixelRatio) | 0;\n\n      canvasElement.width = width * devicePixelRatio;\n      canvasElement.height = height * devicePixelRatio;\n      canvasElement.style.width = width + 'px';\n      canvasElement.style.height = height + 'px';\n\n      this.ctx.scale(devicePixelRatio, devicePixelRatio);\n    } else {\n      this.ctx.resize(width, height);\n    }\n\n    return this;\n  }\n\n  getContext(): RenderContext {\n    return this.ctx;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\n\nimport { RuntimeError } from './util';\nimport { Modifier } from './modifier';\nimport { Renderer } from './renderer';\nimport { FontInfo } from './types/common';\nimport { Note } from './note';\nimport { ModifierContextState } from './modifiercontext';\nimport { isStaveNote, isStemmableNote } from './typeguard';\nimport { Stem } from 'stem';\n\nexport class StringNumber extends Modifier {\n  static get CATEGORY(): string {\n    return 'StringNumber';\n  }\n\n  protected radius: number;\n  protected last_note?: Note;\n  protected string_number: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected dashed: boolean;\n  protected leg: number;\n  protected font: FontInfo;\n\n  // ## Static Methods\n  // Arrange string numbers inside a `ModifierContext`\n  static format(nums: StringNumber[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const right_shift = state.right_shift;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shift_left = 0;\n    let shift_right = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote();\n      const pos = num.getPosition();\n\n      if (!isStaveNote(note)) {\n        throw new RuntimeError('NoStaveNote');\n      }\n\n      const index = num.checkIndex();\n      const props = note.getKeyProps()[index];\n\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);\n          }\n          if (right_shift === 0) {\n            shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        pos,\n        note,\n        num,\n        line: props.line,\n        shiftL: shift_left,\n        shiftR: shift_right,\n      });\n    }\n\n    // Sort string numbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let num_shiftR = 0;\n    let x_widthL = 0;\n    let x_widthR = 0;\n    let last_line = null;\n    let last_note = null;\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const note = nums_list[i].note;\n      const pos = nums_list[i].pos;\n      const num = nums_list[i].num;\n      const line = nums_list[i].line;\n      const shiftR = nums_list[i].shiftR;\n\n      // Reset the position of the string number every line.\n      if (line !== last_line || note !== last_note) {\n        num_shiftR = right_shift + shiftR;\n      }\n\n      const num_width = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift);\n        num_shift = shift_left + num_width; // spacing\n        x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(num_shiftR);\n        num_shift += num_width; // spacing\n        x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\n      }\n      last_line = line;\n      last_note = note;\n    }\n\n    state.left_shift += x_widthL;\n    state.right_shift += x_widthR;\n    return true;\n  }\n\n  constructor(number: string) {\n    super();\n\n    this.string_number = number;\n    this.setWidth(20); // ???\n    this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.dashed = true; // true - draw dashed extension  false - no extension\n    this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n    this.radius = 8;\n    this.font = {\n      family: 'sans-serif',\n      size: 10,\n      weight: 'bold',\n    };\n  }\n\n  setLineEndType(leg: number): this {\n    if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n      this.leg = leg;\n    }\n    return this;\n  }\n\n  setStringNumber(number: string): this {\n    this.string_number = number;\n    return this;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  setLastNote(note: Note): this {\n    this.last_note = note;\n    return this;\n  }\n\n  setDashed(dashed: boolean): this {\n    this.dashed = dashed;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const line_space = note.checkStave().getSpacingBetweenLines();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n      case Modifier.Position.BELOW: {\n        const stem_ext = note.getStemExtents();\n        let top = stem_ext.topY;\n        let bottom = stem_ext.baseY + 2;\n\n        if (note.getStemDirection() === Stem.DOWN) {\n          top = stem_ext.baseY;\n          bottom = stem_ext.topY - 2;\n        }\n\n        if (this.position === Modifier.Position.ABOVE) {\n          dot_y = note.hasStem() ? top - line_space * 1.75 : start.y - line_space * 1.75;\n        } else {\n          dot_y = note.hasStem() ? bottom + line_space * 1.5 : start.y + line_space * 1.75;\n        }\n\n        dot_y += this.y_shift + this.y_offset;\n\n        break;\n      }\n      case Modifier.Position.LEFT:\n        dot_x -= this.radius / 2 + 5;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += this.radius / 2 + 6;\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n    ctx.setLineWidth(1.5);\n    ctx.stroke();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const x = dot_x - ctx.measureText(this.string_number).width / 2;\n    ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n\n    const lastNote = this.last_note;\n    if (isStemmableNote(lastNote)) {\n      // Only StemmableNote objects have getStemX().\n      const end = lastNote.getStemX() - note.getX() + 5;\n      ctx.setStrokeStyle('#000000');\n      ctx.setLineCap('round');\n      ctx.setLineWidth(0.6);\n      if (this.dashed) {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n      } else {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n      }\n\n      let len;\n      let pattern;\n      switch (this.leg) {\n        case Renderer.LineEndType.UP:\n          len = -10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        case Renderer.LineEndType.DOWN:\n          len = 10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        default:\n          break;\n      }\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { ModifierContextState } from './modifiercontext';\nimport { Builder } from './easyscore';\nimport { isGraceNote, isStaveNote, isTabNote } from './typeguard';\n\nexport interface ArticulationStruct {\n  code?: string;\n  aboveCode?: string;\n  belowCode?: string;\n  between_lines: boolean;\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Articulation.DEBUG) log('Vex.Flow.Articulation', args);\n}\n\nconst { ABOVE, BELOW } = Modifier.Position;\n\nfunction roundToNearestHalf(mathFn: (a: number) => number, value: number): number {\n  return mathFn(value / 0.5) * 0.5;\n}\n\n// This includes both staff and ledger lines\nfunction isWithinLines(line: number, position: number): boolean {\n  return position === ABOVE ? line <= 5 : line >= 1;\n}\n\nfunction getRoundingFunction(line: number, position: number): (a: number) => number {\n  if (isWithinLines(line, position)) {\n    if (position === ABOVE) {\n      return Math.ceil;\n    } else {\n      return Math.floor;\n    }\n  } else {\n    return Math.round;\n  }\n}\n\nfunction snapLineToStaff(canSitBetweenLines: boolean, line: number, position: number, offsetDirection: number): number {\n  // Initially, snap to nearest staff line or space\n  const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n  const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n  const onStaffLine = snappedLine % 1 === 0;\n\n  if (canSnapToStaffSpace && onStaffLine) {\n    const HALF_STAFF_SPACE = 0.5;\n    return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n  } else {\n    return snappedLine;\n  }\n}\n\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note: Note) => isStaveNote(note) || isGraceNote(note);\n\nfunction getTopY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveOrGraceNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return stemBaseY;\n      }\n    } else {\n      return Math.min(...note.getYs());\n    }\n  } else if (isTabNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return note.checkStave().getYForTopText(textLine);\n      }\n    } else {\n      return note.checkStave().getYForTopText(textLine);\n    }\n  } else {\n    throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\nfunction getBottomY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveOrGraceNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemBaseY;\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return Math.max(...note.getYs());\n    }\n  } else if (isTabNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return note.checkStave().getYForBottomText(textLine);\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return note.checkStave().getYForBottomText(textLine);\n    }\n  } else {\n    throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nfunction getInitialOffset(note: Note, position: number): number {\n  const isOnStemTip =\n    (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n    (position === BELOW && note.getStemDirection() === Stem.DOWN);\n\n  if (isStaveOrGraceNote(note)) {\n    if (note.hasStem() && isOnStemTip) {\n      return 0.5;\n    } else {\n      // this amount is larger than the stem-tip offset because we start from\n      // the center of the notehead\n      return 1;\n    }\n  } else {\n    if (note.hasStem() && isOnStemTip) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}\n\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `Vex.Flow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Articulations category string. */\n  static get CATEGORY(): string {\n    return 'Articulation';\n  }\n\n  protected static readonly INITIAL_OFFSET: number = -0.5;\n\n  /** Articulation code provided to the constructor. */\n  readonly type: string;\n\n  protected render_options: { font_scale: number };\n  // articulation defined calling reset in constructor\n  protected articulation!: ArticulationStruct;\n  // glyph defined calling reset in constructor\n  protected glyph!: Glyph;\n\n  /**\n   * FIXME:\n   * Most of the complex formatting logic (ie: snapping to space) is\n   * actually done in .render(). But that logic belongs in this method.\n   *\n   * Unfortunately, this isn't possible because, by this point, stem lengths\n   * have not yet been finalized. Finalized stem lengths are required to determine the\n   * initial position of any stem-side articulation.\n   *\n   * This indicates that all objects should have their stave set before being\n   * formatted. It can't be an optional if you want accurate vertical positioning.\n   * Consistently positioned articulations that play nice with other modifiers\n   * won't be possible until we stop relying on render-time formatting.\n   *\n   * Ideally, when this function has completed, the vertical articulation positions\n   * should be ready to render without further adjustment. But the current state\n   * is far from this ideal.\n   */\n  static format(articulations: Articulation[], state: ModifierContextState): boolean {\n    if (!articulations || articulations.length === 0) return false;\n\n    const isAbove = (artic: Articulation) => artic.getPosition() === ABOVE;\n    const isBelow = (artic: Articulation) => artic.getPosition() === BELOW;\n    const margin = 0.5;\n    const getIncrement = (articulation: Articulation, line: number, position: number) =>\n      roundToNearestHalf(\n        getRoundingFunction(line, position),\n        defined(articulation.glyph.getMetrics().height) / 10 + margin\n      );\n\n    articulations.filter(isAbove).forEach((articulation) => {\n      articulation.setTextLine(state.top_text_line);\n      state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);\n    });\n\n    articulations.filter(isBelow).forEach((articulation) => {\n      articulation.setTextLine(state.text_line);\n      state.text_line += getIncrement(articulation, state.text_line, BELOW);\n    });\n\n    const width = articulations\n      .map((articulation) => articulation.getWidth())\n      .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  static easyScoreHook({ articulations }: { articulations: string }, note: StaveNote, builder: Builder): void {\n    if (!articulations) return;\n\n    const articNameToCode: Record<string, string> = {\n      staccato: 'a.',\n      tenuto: 'a-',\n      accent: 'a>',\n    };\n\n    articulations\n      .split(',')\n      .map((articString) => articString.trim().split('.'))\n      .map(([name, position]) => {\n        const artic: { type: string; position?: number } = { type: articNameToCode[name] };\n        if (position) artic.position = Modifier.PositionString[position];\n        return builder.getFactory().Articulation(artic);\n      })\n      .map((artic) => note.addModifier(artic, 0));\n  }\n\n  /**\n   * Create a new articulation.\n   * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts`\n   */\n  constructor(type: string) {\n    super();\n\n    this.type = type;\n    this.position = BELOW;\n    this.render_options = {\n      font_scale: 38,\n    };\n\n    this.reset();\n  }\n\n  protected reset(): void {\n    this.articulation = Flow.articulationCodes(this.type);\n    const articulation = defined(this.articulation, 'ArgumentError', `Articulation not found: ${this.type}`);\n    const code = (this.position === ABOVE ? articulation.aboveCode : articulation.belowCode) || articulation.code;\n    this.glyph = new Glyph(code ?? '', this.render_options.font_scale);\n\n    this.setWidth(defined(this.glyph.getMetrics().width));\n  }\n\n  /** Render articulation in position next to note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const index = this.checkIndex();\n    const { position, glyph, text_line: textLine } = this;\n    const canSitBetweenLines = this.articulation.between_lines;\n\n    const stave = note.checkStave();\n    const staffSpace = stave.getSpacingBetweenLines();\n    const isTab = isTabNote(note);\n\n    // Articulations are centered over/under the note head.\n    const { x } = note.getModifierStartXY(position, index);\n    const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n\n    const initialOffset = getInitialOffset(note, position);\n\n    const padding = this.musicFont.lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);\n\n    let y = (\n      {\n        [ABOVE]: () => {\n          glyph.setOrigin(0.5, 1);\n          const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n        [BELOW]: () => {\n          glyph.setOrigin(0.5, 0);\n          const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n      } as Record<number, () => number>\n    )[position]();\n\n    if (!isTab) {\n      const offsetDirection = position === ABOVE ? -1 : +1;\n      const noteLine = note.getKeyProps()[index].line;\n      const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n      const articLine = distanceFromNote + Number(noteLine);\n      const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n\n      if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);\n\n      y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;\n    }\n\n    L(`Rendering articulation at (x: ${x}, y: ${y})`);\n\n    glyph.render(ctx, x, y);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\n\nimport { RuntimeError } from './util';\nimport { Tickable } from './tickable';\nimport { Fraction } from './fraction';\nimport { NoteMetrics } from './note';\n\nexport interface TickContextMetrics extends NoteMetrics {\n  totalLeftPx: number;\n  totalRightPx: number;\n}\n\nexport interface TickContextOptions {\n  tickID: number;\n}\n\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext {\n  protected readonly tickID: number;\n  protected readonly tickables: Tickable[];\n  protected readonly tickablesByVoice: Record<string, Tickable>;\n  protected currentTick: Fraction;\n  protected maxTicks: Fraction;\n  protected padding: number;\n  protected xBase: number;\n  protected x: number;\n  protected xOffset: number;\n  protected notePx: number;\n  protected glyphPx: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected modLeftPx: number;\n  protected modRightPx: number;\n  protected totalLeftPx: number;\n  protected totalRightPx: number;\n  protected maxTickable?: Tickable;\n  protected minTicks?: Fraction;\n  protected minTickable?: Tickable;\n  tContexts: TickContext[];\n\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected width: number;\n  protected formatterMetrics: { freedom: { left: number; right: number } };\n\n  static getNextContext(tContext: TickContext): TickContext | undefined {\n    const contexts = tContext.tContexts;\n    const index = contexts.indexOf(tContext);\n\n    if (index + 1 < contexts.length) return contexts[index + 1];\n  }\n\n  constructor(options?: TickContextOptions) {\n    this.tickID = options && options.tickID ? options.tickID : 0;\n    this.currentTick = new Fraction(0, 1);\n\n    this.maxTicks = new Fraction(0, 1);\n    this.maxTickable = undefined; // Biggest tickable\n    this.minTicks = undefined; // this can remian null if all tickables have ignore_ticks\n    this.minTickable = undefined;\n\n    this.padding = 1; // padding on each side (width += padding * 2)\n    this.x = 0;\n    this.xBase = 0; // base x position without xOffset\n    this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n    this.tickables = []; // Notes, tabs, chords, lyrics.\n    this.tickablesByVoice = {}; // Tickables indexed by voice number\n\n    // Formatting metrics\n    this.notePx = 0; // width of widest note in this context\n    this.glyphPx = 0; // width of glyph (note head)\n    this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n    this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n    this.modLeftPx = 0; // Left modifier pixels\n    this.modRightPx = 0; // Right modifier pixels\n    this.totalLeftPx = 0; // Total left pixels\n    this.totalRightPx = 0; // Total right pixels\n    this.tContexts = []; // Parent array of tick contexts\n\n    this.width = 0;\n    this.formatterMetrics = {\n      // The freedom of a tickcontext is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n    };\n  }\n\n  getTickID(): number {\n    return this.tickID;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    this.xBase = x;\n    this.xOffset = 0;\n    return this;\n  }\n\n  getXBase(): number {\n    return this.xBase;\n  } // use of xBase and xOffset is optional, avoids offset creep\n\n  setXBase(xBase: number): void {\n    this.xBase = xBase;\n    this.x = xBase + this.xOffset;\n  }\n\n  getXOffset(): number {\n    return this.xOffset;\n  }\n\n  setXOffset(xOffset: number): void {\n    this.xOffset = xOffset;\n    this.x = this.xBase + xOffset;\n  }\n\n  getWidth(): number {\n    return this.width + this.padding * 2;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  getMaxTicks(): Fraction {\n    return this.maxTicks;\n  }\n\n  getMinTicks(): Fraction | undefined {\n    return this.minTicks;\n  }\n\n  getMaxTickable(): Tickable | undefined {\n    return this.maxTickable;\n  }\n\n  getMinTickable(): Tickable | undefined {\n    return this.minTickable;\n  }\n\n  getTickables(): Tickable[] {\n    return this.tickables;\n  }\n\n  /**\n   * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n   *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n   * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n   */\n  getTickableForVoice(voiceIndex: number): Tickable {\n    return this.tickablesByVoice[voiceIndex];\n  }\n\n  getTickablesByVoice(): Record<string, Tickable> {\n    return this.tickablesByVoice;\n  }\n\n  getCenterAlignedTickables(): Tickable[] {\n    return this.tickables.filter((tickable) => tickable.isCenterAligned());\n  }\n\n  /** Gets widths context, note and left/right modifiers for formatting. */\n  getMetrics(): TickContextMetrics {\n    const {\n      width,\n      glyphPx,\n      notePx,\n      leftDisplacedHeadPx,\n      rightDisplacedHeadPx,\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    } = this;\n    return {\n      width, // Width of largest tickable in context\n      glyphPx, // Width of largest glyph (note head)\n      notePx, // Width of notehead + stem\n      leftDisplacedHeadPx, // Left modifiers\n      rightDisplacedHeadPx, // Right modifiers\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    };\n  }\n\n  getCurrentTick(): Fraction {\n    return this.currentTick;\n  }\n\n  setCurrentTick(tick: Fraction): void {\n    this.currentTick = tick;\n    this.preFormatted = false;\n  }\n\n  addTickable(tickable: Tickable, voiceIndex?: number): this {\n    if (!tickable) {\n      throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n    }\n\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      if (ticks.greaterThan(this.maxTicks)) {\n        this.maxTicks = ticks.clone();\n        this.maxTickable = tickable;\n      }\n\n      if (this.minTicks == null) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      } else if (ticks.lessThan(this.minTicks)) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      }\n    }\n\n    tickable.setTickContext(this);\n    this.tickables.push(tickable);\n    this.tickablesByVoice[voiceIndex || 0] = tickable;\n    this.preFormatted = false;\n    return this;\n  }\n\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      tickable.preFormat();\n      const metrics = tickable.getMetrics();\n\n      // Maintain max displaced head pixels from all tickables in the context\n      this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n      this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n\n      // Maintain the widest note for all tickables in the context\n      this.notePx = Math.max(this.notePx, metrics.notePx);\n\n      // Maintain the widest note head\n      this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);\n\n      // Total modifier shift\n      this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n      this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n\n      // Total shift\n      this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n      this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n\n      // Recalculate the tick context total width\n      this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n    }\n\n    return this;\n  }\n\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n\n  getFormatterMetrics(): { freedom: { left: number; right: number } } {\n    return this.formatterMetrics;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { TickContext } from './tickcontext';\nimport { Glyph } from './glyph';\nimport { StemmableNote } from './stemmablenote';\nimport { ModifierContextState } from './modifiercontext';\nimport { Stem } from 'stem';\nimport { isTabNote } from 'typeguard';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Ornament.DEBUG) log('Vex.Flow.Ornament', args);\n}\n\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Ornaments category string. */\n  static get CATEGORY(): string {\n    return 'Ornament';\n  }\n\n  protected ornament: {\n    code: string;\n  };\n  protected stemUpYOffset: number;\n  protected ornamentAlignWithNoteHead: string[] | boolean;\n  protected type: string;\n\n  protected delayed: boolean;\n  protected reportedWidth: number;\n  protected adjustForStemDirection: boolean;\n  protected render_options: {\n    accidentalUpperPadding: number;\n    accidentalLowerPadding: number;\n    font_scale: number;\n  };\n  protected glyph: Glyph;\n  protected accidentalUpper?: Glyph;\n  protected accidentalLower?: Glyph;\n  protected delayXShift?: number;\n\n  /** Arrange ornaments inside `ModifierContext` */\n  static format(ornaments: Ornament[], state: ModifierContextState): boolean {\n    if (!ornaments || ornaments.length === 0) return false;\n\n    let width = 0; // width is used by ornaments, which are always centered on the note head\n    let right_shift = state.right_shift; // jazz ornaments calculate r/l shift separately\n    let left_shift = state.left_shift;\n    let yOffset = 0;\n\n    for (let i = 0; i < ornaments.length; ++i) {\n      const ornament = ornaments[i];\n      const increment = 2;\n\n      if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {\n        ornament.x_shift += right_shift + 2;\n      }\n      if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {\n        ornament.x_shift -= left_shift + 2;\n      }\n      if (ornament.reportedWidth && ornament.x_shift < 0) {\n        left_shift += ornament.reportedWidth;\n      } else if (ornament.reportedWidth && ornament.x_shift > 0) {\n        right_shift += ornament.reportedWidth;\n      } else {\n        width = Math.max(ornament.getWidth(), width);\n      }\n      // articulations above/below the line can be stacked.\n      if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {\n        // Unfortunately we don't know the stem direction.  So we base it\n        // on the line number, but also allow it to be overridden.\n        const ornamentNote = defined(ornament.note, 'NoAttachedNote');\n        if (ornamentNote.getLineNumber() >= 3 || ornament.getPosition() === Modifier.Position.ABOVE) {\n          state.top_text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset -= ornament.glyph.bbox.getH();\n        } else {\n          state.text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset += ornament.glyph.bbox.getH();\n        }\n      } else {\n        if (ornament.getPosition() === Modifier.Position.ABOVE) {\n          ornament.setTextLine(state.top_text_line);\n          state.top_text_line += increment;\n        } else {\n          ornament.setTextLine(state.text_line);\n          state.text_line += increment;\n        }\n      }\n    }\n\n    // Note: 'legit' ornaments don't consider other modifiers when calculating their\n    // X position, but jazz ornaments sometimes need to.\n    state.left_shift = left_shift + width / 2;\n    state.right_shift = right_shift + width / 2;\n    return true;\n  }\n\n  /**\n   * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n   * these are generally on the top of the staff.\n   */\n  static get ornamentNoteTransition(): string[] {\n    return ['flip', 'jazzTurn', 'smear'];\n  }\n\n  /**\n   * ornamentAttack indicates something that happens in the attach, placed before the note and\n   * any accidentals\n   */\n  static get ornamentAttack(): string[] {\n    return ['scoop'];\n  }\n\n  /**\n   * The ornament is aligned based on the note head, but without regard to whether the\n   * stem goes up or down.\n   */\n  static get ornamentAlignWithNoteHead(): string[] {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];\n  }\n\n  /**\n   * An ornament that happens on the release of the note, generally placed after the\n   * note and overlapping the next beat/measure..\n   */\n  static get ornamentRelease(): string[] {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n  }\n\n  /** ornamentArticulation goes above/below the note based on space availablity */\n  static get ornamentArticulation(): string[] {\n    return ['bend', 'plungerClosed', 'plungerOpen'];\n  }\n\n  /**\n   * Legacy ornaments have hard-coded metrics.  If additional ornament types are\n   * added, get their metrics here.\n   */\n  // eslint-disable-next-line\n  getMetrics(): any {\n    return this.getFontStack()[0].getMetrics().glyphs.jazzOrnaments[this.ornament.code];\n  }\n\n  /**\n   * Create a new ornament of type `type`, which is an entry in\n   * `Vex.Flow.ornamentCodes` in `tables.ts`.\n   */\n  constructor(type: string) {\n    super();\n\n    this.type = type;\n    this.delayed = false;\n\n    this.render_options = {\n      font_scale: 38,\n      accidentalLowerPadding: 3,\n      accidentalUpperPadding: 3,\n    };\n\n    this.ornament = Flow.ornamentCodes(this.type);\n\n    // new ornaments have their origin at the origin, and have more specific\n    // metrics.  Legacy ornaments do some\n    // x scaling, and have hard-coded metrics\n    const metrics = this.getMetrics();\n\n    // some jazz ornaments are above or below depending on stem direction.\n    this.adjustForStemDirection = false;\n\n    // some jazz ornaments like falls are supposed to overlap with future bars\n    // and so we report a different width than they actually take up.\n    this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;\n\n    this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;\n\n    this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n\n    if (!this.ornament) {\n      throw new RuntimeError('ArgumentError', `Ornament not found: '${this.type}'`);\n    }\n\n    this.x_shift = metrics ? metrics.xOffset : 0;\n    this.y_shift = metrics ? metrics.yOffset : 0;\n\n    this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale, {\n      category: `ornament.${this.ornament.code}`,\n    });\n\n    // Is this a jazz ornament that goes between this note and the next note.\n    if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      this.delayed = true;\n    }\n\n    // Legacy ornaments need this.  I don't know why, but horizontal spacing issues\n    // happen if I don't set it.\n    if (!metrics) {\n      this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\n    }\n  }\n\n  /** Set whether the ornament is to be delayed. */\n  setDelayed(delayed: boolean): this {\n    this.delayed = delayed;\n    return this;\n  }\n\n  /** Set the upper accidental for the ornament. */\n  setUpperAccidental(accid: string): this {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalUpper = new Glyph(Flow.accidentalCodes(accid).code, scale);\n    this.accidentalUpper.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  /** Set the lower accidental for the ornament. */\n  setLowerAccidental(accid: string): this {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalLower = new Glyph(Flow.accidentalCodes(accid).code, scale);\n    this.accidentalLower.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  /** Render ornament in position next to note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote() as StemmableNote;\n    this.setRendered();\n\n    const stemDir = note.getStemDirection();\n    const stave = note.checkStave();\n\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n\n    // Get stem extents\n    const stemExtents = note.checkStem().getExtents();\n    let y = stemDir === Stem.DOWN ? stemExtents.baseY : stemExtents.topY;\n\n    // TabNotes don't have stems attached to them. Tab stems are rendered outside the stave.\n    if (isTabNote(note)) {\n      if (note.hasStem()) {\n        if (stemDir === Stem.DOWN) {\n          y = stave.getYForTopText(this.text_line);\n        }\n      } else {\n        // Without a stem\n        y = stave.getYForTopText(this.text_line);\n      }\n    }\n\n    const isPlacedOnNoteheadSide = stemDir === Stem.DOWN;\n    const spacing = stave.getSpacingBetweenLines();\n    let lineSpacing = 1;\n\n    // Beamed stems are longer than quarter note stems, adjust accordingly\n    if (!isPlacedOnNoteheadSide && note.hasBeam()) {\n      lineSpacing += 0.5;\n    }\n\n    const totalSpacing = spacing * (this.text_line + lineSpacing);\n    const glyphYBetweenLines = y - totalSpacing;\n\n    // Get initial coordinates for the modifier position\n    const start = note.getModifierStartXY(this.position, this.index);\n    let glyphX = start.x;\n\n    // If the ornament is aligned with the note head, don't consider the stave y\n    // but use the 'natural' modifier y\n    let glyphY = this.ornamentAlignWithNoteHead\n      ? start.y\n      : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n    glyphY += this.y_shift;\n\n    // Ajdust x position if ornament is delayed\n    if (this.delayed) {\n      let delayXShift = 0;\n      const startX = glyphX - (stave.getX() - 10);\n      if (this.delayXShift !== undefined) {\n        delayXShift = this.delayXShift;\n      } else {\n        delayXShift += this.glyph.getMetrics().width / 2;\n        const nextContext = TickContext.getNextContext(note.getTickContext());\n        if (nextContext) {\n          delayXShift += (nextContext.getX() - startX) * 0.5;\n        } else {\n          delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\n        }\n        this.delayXShift = delayXShift;\n      }\n      glyphX += delayXShift;\n    }\n\n    L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n\n    if (this.accidentalLower) {\n      this.accidentalLower.render(ctx, glyphX, glyphY);\n      glyphY -= this.accidentalLower.getMetrics().height;\n      glyphY -= this.render_options.accidentalLowerPadding;\n    }\n\n    if (this.stemUpYOffset && note.hasStem() && note.getStemDirection() === 1) {\n      glyphY += this.stemUpYOffset;\n    }\n    if (note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      glyphY = note.checkStave().getBoundingBox().getY() + 40;\n    }\n\n    this.glyph.render(ctx, glyphX + this.x_shift, glyphY);\n\n    if (this.accidentalUpper) {\n      glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;\n      this.accidentalUpper.render(ctx, glyphX, glyphY);\n    }\n    ctx.closeGroup();\n  }\n}\n","export const PetalumaScriptTextMetrics = {\n  name: 'petalumaScript',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": 0,\n      \"y_max\": 500,\n      \"ha\": 500,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 250\n    },\"0\": {\n      \"x_min\": 33,\n      \"x_max\": 534,\n      \"y_min\": -13,\n      \"y_max\": 751,\n      \"ha\": 764,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 570\n    },\n    \"1\": {\n      \"x_min\": 48,\n      \"x_max\": 235,\n      \"y_min\": -17,\n      \"y_max\": 734,\n      \"ha\": 751,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 286\n    },\n    \"2\": {\n      \"x_min\": 56,\n      \"x_max\": 571,\n      \"y_min\": -19,\n      \"y_max\": 741,\n      \"ha\": 760,\n      \"leftSideBearing\": 56,\n      \"advanceWidth\": 626\n    },\n    \"3\": {\n      \"x_min\": 50,\n      \"x_max\": 528,\n      \"y_min\": -7,\n      \"y_max\": 731,\n      \"ha\": 738,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 589\n    },\n    \"4\": {\n      \"x_min\": 38,\n      \"x_max\": 564,\n      \"y_min\": -13,\n      \"y_max\": 743,\n      \"ha\": 756,\n      \"leftSideBearing\": 38,\n      \"advanceWidth\": 614\n    },\n    \"5\": {\n      \"x_min\": 42,\n      \"x_max\": 601,\n      \"y_min\": -34,\n      \"y_max\": 743,\n      \"ha\": 777,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 648\n    },\n    \"6\": {\n      \"x_min\": 47,\n      \"x_max\": 606,\n      \"y_min\": -16,\n      \"y_max\": 743,\n      \"ha\": 759,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 667\n    },\n    \"7\": {\n      \"x_min\": 47,\n      \"x_max\": 567,\n      \"y_min\": 5,\n      \"y_max\": 739,\n      \"ha\": 734,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 615\n    },\n    \"8\": {\n      \"x_min\": 40,\n      \"x_max\": 541,\n      \"y_min\": -15,\n      \"y_max\": 752,\n      \"ha\": 767,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 585\n    },\n    \"9\": {\n      \"x_min\": 40,\n      \"x_max\": 537,\n      \"y_min\": -52,\n      \"y_max\": 736,\n      \"ha\": 788,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 592\n    },\n    \"!\": {\n      \"x_min\": 49,\n      \"x_max\": 180,\n      \"y_min\": -7,\n      \"y_max\": 761,\n      \"ha\": 768,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 230\n    },\n    \"\\\"\": {\n      \"x_min\": 39,\n      \"x_max\": 304,\n      \"y_min\": 596,\n      \"y_max\": 804,\n      \"ha\": 208,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 353\n    },\n    \"#\": {\n      \"x_min\": 33,\n      \"x_max\": 599,\n      \"y_min\": -8,\n      \"y_max\": 765,\n      \"ha\": 773,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 648\n    },\n    \"$\": {\n      \"x_min\": 53,\n      \"x_max\": 495,\n      \"y_min\": -111,\n      \"y_max\": 823,\n      \"ha\": 934,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 560\n    },\n    \"%\": {\n      \"x_min\": 35,\n      \"x_max\": 656,\n      \"y_min\": -128,\n      \"y_max\": 808,\n      \"ha\": 936,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 711\n    },\n    \"&\": {\n      \"x_min\": 53,\n      \"x_max\": 441,\n      \"y_min\": -3,\n      \"y_max\": 753,\n      \"ha\": 756,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 500\n    },\n    \"'\": {\n      \"x_min\": 43,\n      \"x_max\": 161,\n      \"y_min\": 590,\n      \"y_max\": 811,\n      \"ha\": 221,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 217\n    },\n    \"(\": {\n      \"x_min\": 41,\n      \"x_max\": 311,\n      \"y_min\": -36,\n      \"y_max\": 845,\n      \"ha\": 881,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 308\n    },\n    \")\": {\n      \"x_min\": -8,\n      \"x_max\": 257,\n      \"y_min\": -21,\n      \"y_max\": 852,\n      \"ha\": 873,\n      \"leftSideBearing\": -8,\n      \"advanceWidth\": 280\n    },\n    \"*\": {\n      \"x_min\": 59,\n      \"x_max\": 539,\n      \"y_min\": 175,\n      \"y_max\": 589,\n      \"ha\": 414,\n      \"leftSideBearing\": 59,\n      \"advanceWidth\": 601\n    },\n    \"+\": {\n      \"x_min\": 33,\n      \"x_max\": 361,\n      \"y_min\": 180,\n      \"y_max\": 587,\n      \"ha\": 407,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 400\n    },\n    \",\": {\n      \"x_min\": 15,\n      \"x_max\": 176,\n      \"y_min\": -129,\n      \"y_max\": 92,\n      \"ha\": 221,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 205\n    },\n    \"-\": {\n      \"x_min\": 40,\n      \"x_max\": 380,\n      \"y_min\": 317,\n      \"y_max\": 452,\n      \"ha\": 135,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \".\": {\n      \"x_min\": 48,\n      \"x_max\": 185,\n      \"y_min\": -56,\n      \"y_max\": 84,\n      \"ha\": 140,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 227\n    },\n    \"/\": {\n      \"x_min\": -58,\n      \"x_max\": 654,\n      \"y_min\": -122,\n      \"y_max\": 844,\n      \"ha\": 966,\n      \"leftSideBearing\": -58,\n      \"advanceWidth\": 626\n    },\n    \":\": {\n      \"x_min\": 65,\n      \"x_max\": 225,\n      \"y_min\": 97,\n      \"y_max\": 536,\n      \"ha\": 439,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 302\n    },\n    \";\": {\n      \"x_min\": 13,\n      \"x_max\": 295,\n      \"y_min\": -139,\n      \"y_max\": 536,\n      \"ha\": 675,\n      \"leftSideBearing\": 13,\n      \"advanceWidth\": 334\n    },\n    \"<\": {\n      \"x_min\": 28,\n      \"x_max\": 438,\n      \"y_min\": -1,\n      \"y_max\": 607,\n      \"ha\": 608,\n      \"leftSideBearing\": 28,\n      \"advanceWidth\": 475\n    },\n    \"=\": {\n      \"x_min\": 40,\n      \"x_max\": 383,\n      \"y_min\": 199.9598640852289,\n      \"y_max\": 541,\n      \"ha\": 341.0401359147711,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \">\": {\n      \"x_min\": 35,\n      \"x_max\": 421,\n      \"y_min\": 28,\n      \"y_max\": 632,\n      \"ha\": 604,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 466\n    },\n    \"?\": {\n      \"x_min\": 45,\n      \"x_max\": 548,\n      \"y_min\": -17,\n      \"y_max\": 767,\n      \"ha\": 784,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 592\n    },\n    \"@\": {\n      \"x_min\": 51,\n      \"x_max\": 730,\n      \"y_min\": -78,\n      \"y_max\": 753,\n      \"ha\": 831,\n      \"leftSideBearing\": 51,\n      \"advanceWidth\": 781\n    },\n    \"A\": {\n      \"x_min\": 37,\n      \"x_max\": 554,\n      \"y_min\": -4,\n      \"y_max\": 746,\n      \"ha\": 750,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 617\n    },\n    \"B\": {\n      \"x_min\": 37,\n      \"x_max\": 532,\n      \"y_min\": 3,\n      \"y_max\": 783,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 579\n    },\n    \"C\": {\n      \"x_min\": 37,\n      \"x_max\": 583,\n      \"y_min\": -3,\n      \"y_max\": 775,\n      \"ha\": 778,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 623\n    },\n    \"D\": {\n      \"x_min\": 50,\n      \"x_max\": 530,\n      \"y_min\": -15,\n      \"y_max\": 749,\n      \"ha\": 764,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 579\n    },\n    \"E\": {\n      \"x_min\": 45,\n      \"x_max\": 531,\n      \"y_min\": -1,\n      \"y_max\": 743,\n      \"ha\": 744,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 585\n    },\n    \"F\": {\n      \"x_min\": 45,\n      \"x_max\": 459,\n      \"y_min\": 23,\n      \"y_max\": 727,\n      \"ha\": 704,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 510\n    },\n    \"G\": {\n      \"x_min\": 31,\n      \"x_max\": 577,\n      \"y_min\": -8,\n      \"y_max\": 733,\n      \"ha\": 741,\n      \"leftSideBearing\": 31,\n      \"advanceWidth\": 611\n    },\n    \"H\": {\n      \"x_min\": 37,\n      \"x_max\": 493,\n      \"y_min\": -22,\n      \"y_max\": 758,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 535\n    },\n    \"I\": {\n      \"x_min\": 47,\n      \"x_max\": 501,\n      \"y_min\": -3,\n      \"y_max\": 731,\n      \"ha\": 734,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 541\n    },\n    \"J\": {\n      \"x_min\": 33,\n      \"x_max\": 531,\n      \"y_min\": -23,\n      \"y_max\": 725,\n      \"ha\": 748,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 573\n    },\n    \"K\": {\n      \"x_min\": 43,\n      \"x_max\": 505,\n      \"y_min\": -10,\n      \"y_max\": 740,\n      \"ha\": 750,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 560\n    },\n    \"L\": {\n      \"x_min\": 49,\n      \"x_max\": 457,\n      \"y_min\": -2,\n      \"y_max\": 746,\n      \"ha\": 748,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 510\n    },\n    \"M\": {\n      \"x_min\": 35,\n      \"x_max\": 699,\n      \"y_min\": 1,\n      \"y_max\": 744,\n      \"ha\": 743,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 743\n    },\n    \"N\": {\n      \"x_min\": 34,\n      \"x_max\": 533,\n      \"y_min\": -17,\n      \"y_max\": 761,\n      \"ha\": 778,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 579\n    },\n    \"O\": {\n      \"x_min\": 41,\n      \"x_max\": 608,\n      \"y_min\": -5,\n      \"y_max\": 735,\n      \"ha\": 740,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 667\n    },\n    \"P\": {\n      \"x_min\": 53,\n      \"x_max\": 451,\n      \"y_min\": -18,\n      \"y_max\": 735,\n      \"ha\": 753,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 497\n    },\n    \"Q\": {\n      \"x_min\": 40,\n      \"x_max\": 599,\n      \"y_min\": -67,\n      \"y_max\": 744,\n      \"ha\": 811,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 648\n    },\n    \"R\": {\n      \"x_min\": 39,\n      \"x_max\": 487,\n      \"y_min\": 16,\n      \"y_max\": 735,\n      \"ha\": 719,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 535\n    },\n    \"S\": {\n      \"x_min\": 35,\n      \"x_max\": 552,\n      \"y_min\": -47,\n      \"y_max\": 708,\n      \"ha\": 755,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 604\n    },\n    \"T\": {\n      \"x_min\": 26,\n      \"x_max\": 656,\n      \"y_min\": -13,\n      \"y_max\": 718,\n      \"ha\": 731,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 705\n    },\n    \"U\": {\n      \"x_min\": 41,\n      \"x_max\": 518,\n      \"y_min\": -20,\n      \"y_max\": 748,\n      \"ha\": 768,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 567\n    },\n    \"V\": {\n      \"x_min\": 47,\n      \"x_max\": 509,\n      \"y_min\": -26,\n      \"y_max\": 744,\n      \"ha\": 770,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 567\n    },\n    \"W\": {\n      \"x_min\": 44,\n      \"x_max\": 789,\n      \"y_min\": -35,\n      \"y_max\": 720,\n      \"ha\": 755,\n      \"leftSideBearing\": 44,\n      \"advanceWidth\": 833\n    },\n    \"X\": {\n      \"x_min\": 63,\n      \"x_max\": 635,\n      \"y_min\": -10,\n      \"y_max\": 745,\n      \"ha\": 755,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 680\n    },\n    \"Y\": {\n      \"x_min\": 43,\n      \"x_max\": 503,\n      \"y_min\": -21,\n      \"y_max\": 734,\n      \"ha\": 755,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 541\n    },\n    \"Z\": {\n      \"x_min\": 42,\n      \"x_max\": 584,\n      \"y_min\": -10,\n      \"y_max\": 739,\n      \"ha\": 749,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 629\n    },\n    \"[\": {\n      \"x_min\": 46,\n      \"x_max\": 346,\n      \"y_min\": -150,\n      \"y_max\": 884,\n      \"ha\": 1034,\n      \"leftSideBearing\": 46,\n      \"advanceWidth\": 291\n    },\n    \"\\\\\": {\n      \"x_min\": 20,\n      \"x_max\": 616,\n      \"y_min\": -100,\n      \"y_max\": 797,\n      \"ha\": 897,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 645\n    },\n    \"]\": {\n      \"x_min\": -76,\n      \"x_max\": 226,\n      \"y_min\": -150,\n      \"y_max\": 881,\n      \"ha\": 1031,\n      \"leftSideBearing\": -76,\n      \"advanceWidth\": 297\n    },\n    \"^\": {\n      \"x_min\": 43,\n      \"x_max\": 437,\n      \"y_min\": 517,\n      \"y_max\": 812,\n      \"ha\": 295,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 478\n    },\n    \"_\": {\n      \"x_min\": 29,\n      \"x_max\": 563,\n      \"y_min\": -110,\n      \"y_max\": -1,\n      \"ha\": 109,\n      \"leftSideBearing\": 29,\n      \"advanceWidth\": 598\n    },\n    \"`\": {\n      \"x_min\": 54,\n      \"x_max\": 321,\n      \"y_min\": 540,\n      \"y_max\": 747,\n      \"ha\": 207,\n      \"leftSideBearing\": 54,\n      \"advanceWidth\": 368\n    },\n    \"a\": {\n      \"x_min\": 20,\n      \"x_max\": 447,\n      \"y_min\": -17,\n      \"y_max\": 495,\n      \"ha\": 512,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 494\n    },\n    \"b\": {\n      \"x_min\": 37,\n      \"x_max\": 466,\n      \"y_min\": -27,\n      \"y_max\": 770,\n      \"ha\": 797,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 510\n    },\n    \"c\": {\n      \"x_min\": 35,\n      \"x_max\": 456,\n      \"y_min\": -9,\n      \"y_max\": 507,\n      \"ha\": 516,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 460\n    },\n    \"d\": {\n      \"x_min\": 45,\n      \"x_max\": 520,\n      \"y_min\": -15,\n      \"y_max\": 764,\n      \"ha\": 779,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 560\n    },\n    \"e\": {\n      \"x_min\": 33,\n      \"x_max\": 370,\n      \"y_min\": -5,\n      \"y_max\": 501,\n      \"ha\": 506,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 397\n    },\n    \"f\": {\n      \"x_min\": 35,\n      \"x_max\": 411,\n      \"y_min\": -13,\n      \"y_max\": 695,\n      \"ha\": 708,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 453\n    },\n    \"g\": {\n      \"x_min\": 33,\n      \"x_max\": 551,\n      \"y_min\": -257,\n      \"y_max\": 505,\n      \"ha\": 762,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 611\n    },\n    \"h\": {\n      \"x_min\": 32,\n      \"x_max\": 458,\n      \"y_min\": -29,\n      \"y_max\": 743,\n      \"ha\": 772,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 491\n    },\n    \"i\": {\n      \"x_min\": 45,\n      \"x_max\": 167,\n      \"y_min\": -13,\n      \"y_max\": 631,\n      \"ha\": 644,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 220\n    },\n    \"j\": {\n      \"x_min\": -127,\n      \"x_max\": 261,\n      \"y_min\": -231,\n      \"y_max\": 601,\n      \"ha\": 832,\n      \"leftSideBearing\": -127,\n      \"advanceWidth\": 308\n    },\n    \"k\": {\n      \"x_min\": 39,\n      \"x_max\": 443,\n      \"y_min\": -3,\n      \"y_max\": 700,\n      \"ha\": 703,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 497\n    },\n    \"l\": {\n      \"x_min\": 58,\n      \"x_max\": 168,\n      \"y_min\": -8,\n      \"y_max\": 686,\n      \"ha\": 694,\n      \"leftSideBearing\": 58,\n      \"advanceWidth\": 227\n    },\n    \"m\": {\n      \"x_min\": 39,\n      \"x_max\": 688,\n      \"y_min\": -14,\n      \"y_max\": 501,\n      \"ha\": 515,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 718\n    },\n    \"n\": {\n      \"x_min\": 45,\n      \"x_max\": 491,\n      \"y_min\": -32,\n      \"y_max\": 512,\n      \"ha\": 544,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 541\n    },\n    \"o\": {\n      \"x_min\": 41,\n      \"x_max\": 424,\n      \"y_min\": -12,\n      \"y_max\": 493,\n      \"ha\": 505,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 447\n    },\n    \"p\": {\n      \"x_min\": 25,\n      \"x_max\": 529,\n      \"y_min\": -260,\n      \"y_max\": 500,\n      \"ha\": 760,\n      \"leftSideBearing\": 25,\n      \"advanceWidth\": 573\n    },\n    \"q\": {\n      \"x_min\": 53,\n      \"x_max\": 603,\n      \"y_min\": -235,\n      \"y_max\": 514,\n      \"ha\": 749,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 623\n    },\n    \"r\": {\n      \"x_min\": 32,\n      \"x_max\": 407,\n      \"y_min\": -7,\n      \"y_max\": 492,\n      \"ha\": 499,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 460\n    },\n    \"s\": {\n      \"x_min\": 49,\n      \"x_max\": 416,\n      \"y_min\": -12,\n      \"y_max\": 519,\n      \"ha\": 531,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 460\n    },\n    \"t\": {\n      \"x_min\": 32,\n      \"x_max\": 442,\n      \"y_min\": -5,\n      \"y_max\": 684,\n      \"ha\": 689,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 469\n    },\n    \"u\": {\n      \"x_min\": 41,\n      \"x_max\": 487,\n      \"y_min\": -5,\n      \"y_max\": 507,\n      \"ha\": 512,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 510\n    },\n    \"v\": {\n      \"x_min\": 16,\n      \"x_max\": 441,\n      \"y_min\": -20,\n      \"y_max\": 542,\n      \"ha\": 562,\n      \"leftSideBearing\": 16,\n      \"advanceWidth\": 456\n    },\n    \"w\": {\n      \"x_min\": 39,\n      \"x_max\": 639,\n      \"y_min\": -22,\n      \"y_max\": 505,\n      \"ha\": 527,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 661\n    },\n    \"x\": {\n      \"x_min\": 15,\n      \"x_max\": 505,\n      \"y_min\": -39,\n      \"y_max\": 539,\n      \"ha\": 578,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 541\n    },\n    \"y\": {\n      \"x_min\": -98,\n      \"x_max\": 501,\n      \"y_min\": -242,\n      \"y_max\": 511,\n      \"ha\": 753,\n      \"leftSideBearing\": -98,\n      \"advanceWidth\": 548\n    },\n    \"z\": {\n      \"x_min\": 27,\n      \"x_max\": 479,\n      \"y_min\": -3,\n      \"y_max\": 494,\n      \"ha\": 497,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 494\n    },\n    \"{\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"|\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"}\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"~\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    }\n\n  },\n  \"fontFamily\": \"Petaluma Script\",\n  \"resolution\": 1000,\n  \"generatedOn\": \"2020-06-14T18:33:25.407Z\"\n};\n","export const RobotoSlabTextMetrics = {\n  name: 'Roboto Slab',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 509,\n      \"y_min\": 0,\n      \"y_max\": 2000,\n      \"ha\": 2000,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 509\n    },\n    \"0\": {\n      \"x_min\": 121,\n      \"x_max\": 1048,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1168\n    },\n    \"1\": {\n      \"x_min\": 117,\n      \"x_max\": 767,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 117,\n      \"advanceWidth\": 844\n    },\n    \"2\": {\n      \"x_min\": 75.8474576645637,\n      \"x_max\": 1040,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 75,\n      \"advanceWidth\": 1131\n    },\n    \"3\": {\n      \"x_min\": 74.85365853658536,\n      \"x_max\": 994,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1106\n    },\n    \"4\": {\n      \"x_min\": 63,\n      \"x_max\": 1114,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1187\n    },\n    \"5\": {\n      \"x_min\": 96.8448275474953,\n      \"x_max\": 982,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1081\n    },\n    \"6\": {\n      \"x_min\": 121,\n      \"x_max\": 1067,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1144\n    },\n    \"7\": {\n      \"x_min\": 76,\n      \"x_max\": 1060,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": -30,\n      \"advanceWidth\": 1128\n    },\n    \"8\": {\n      \"x_min\": 92,\n      \"x_max\": 1039,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 92,\n      \"advanceWidth\": 1131\n    },\n    \"9\": {\n      \"x_min\": 84,\n      \"x_max\": 1026,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1154\n    },\n    \"!\": {\n      \"x_min\": 143,\n      \"x_max\": 340,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 143,\n      \"advanceWidth\": 483\n    },\n    \"\\\"\": {\n      \"x_min\": 166,\n      \"x_max\": 634,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 770\n    },\n    \"#\": {\n      \"x_min\": 63,\n      \"x_max\": 1179,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1246\n    },\n    \"$\": {\n      \"x_min\": 81.92156915727656,\n      \"x_max\": 1012,\n      \"y_min\": -208,\n      \"y_max\": 1693,\n      \"ha\": 1901,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1110\n    },\n    \"%\": {\n      \"x_min\": 77,\n      \"x_max\": 1384,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 77,\n      \"advanceWidth\": 1460\n    },\n    \"&\": {\n      \"x_min\": 74,\n      \"x_max\": 1242,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1289\n    },\n    \"'\": {\n      \"x_min\": 166,\n      \"x_max\": 324,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 460\n    },\n    \"(\": {\n      \"x_min\": 114,\n      \"x_max\": 650,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 114,\n      \"advanceWidth\": 662\n    },\n    \")\": {\n      \"x_min\": 11,\n      \"x_max\": 547,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 11,\n      \"advanceWidth\": 654\n    },\n    \"*\": {\n      \"x_min\": 66,\n      \"x_max\": 893,\n      \"y_min\": 607,\n      \"y_max\": 1456,\n      \"ha\": 849,\n      \"leftSideBearing\": 66,\n      \"advanceWidth\": 958\n    },\n    \"+\": {\n      \"x_min\": 73,\n      \"x_max\": 1071,\n      \"y_min\": 146,\n      \"y_max\": 1206,\n      \"ha\": 1060,\n      \"leftSideBearing\": 73,\n      \"advanceWidth\": 1145\n    },\n    \",\": {\n      \"x_min\": 23,\n      \"x_max\": 315,\n      \"y_min\": -311,\n      \"y_max\": 221,\n      \"ha\": 532,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 404\n    },\n    \"-\": {\n      \"x_min\": 154,\n      \"x_max\": 643,\n      \"y_min\": 538,\n      \"y_max\": 692,\n      \"ha\": 154,\n      \"leftSideBearing\": 154,\n      \"advanceWidth\": 797\n    },\n    \".\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 202,\n      \"ha\": 202,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 493\n    },\n    \"/\": {\n      \"x_min\": 0,\n      \"x_max\": 774,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 824\n    },\n    \":\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 419\n    },\n    \";\": {\n      \"x_min\": 53,\n      \"x_max\": 345,\n      \"y_min\": -311,\n      \"y_max\": 1082,\n      \"ha\": 1393,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 424\n    },\n    \"<\": {\n      \"x_min\": 76,\n      \"x_max\": 892,\n      \"y_min\": 107,\n      \"y_max\": 1013,\n      \"ha\": 906,\n      \"leftSideBearing\": 76,\n      \"advanceWidth\": 1017\n    },\n    \"=\": {\n      \"x_min\": 147,\n      \"x_max\": 981,\n      \"y_min\": 407,\n      \"y_max\": 987,\n      \"ha\": 580,\n      \"leftSideBearing\": 147,\n      \"advanceWidth\": 1127\n    },\n    \">\": {\n      \"x_min\": 125,\n      \"x_max\": 980,\n      \"y_min\": 87,\n      \"y_max\": 993,\n      \"ha\": 906,\n      \"leftSideBearing\": 125,\n      \"advanceWidth\": 1060\n    },\n    \"?\": {\n      \"x_min\": 65.92660602419838,\n      \"x_max\": 890,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 953\n    },\n    \"@\": {\n      \"x_min\": 84.3592218305664,\n      \"x_max\": 1705.2346925277395,\n      \"y_min\": -453,\n      \"y_max\": 1431,\n      \"ha\": 1884,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1821\n    },\n    \"A\": {\n      \"x_min\": 70,\n      \"x_max\": 1463,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1533\n    },\n    \"B\": {\n      \"x_min\": 81,\n      \"x_max\": 1253,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1322\n    },\n    \"C\": {\n      \"x_min\": 80,\n      \"x_max\": 1174,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1290\n    },\n    \"D\": {\n      \"x_min\": 81,\n      \"x_max\": 1291,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1356\n    },\n    \"E\": {\n      \"x_min\": 81,\n      \"x_max\": 1190,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1306\n    },\n    \"F\": {\n      \"x_min\": 81,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1256\n    },\n    \"G\": {\n      \"x_min\": 80,\n      \"x_max\": 1226,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1346\n    },\n    \"H\": {\n      \"x_min\": 81,\n      \"x_max\": 1497,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1578\n    },\n    \"I\": {\n      \"x_min\": 81,\n      \"x_max\": 604,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 685\n    },\n    \"J\": {\n      \"x_min\": 60,\n      \"x_max\": 1100,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 60,\n      \"advanceWidth\": 1169\n    },\n    \"K\": {\n      \"x_min\": 81,\n      \"x_max\": 1427,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1501\n    },\n    \"L\": {\n      \"x_min\": 81,\n      \"x_max\": 1130,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1210\n    },\n    \"M\": {\n      \"x_min\": 94,\n      \"x_max\": 1888,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 94,\n      \"advanceWidth\": 1982\n    },\n    \"N\": {\n      \"x_min\": 83,\n      \"x_max\": 1509,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 83,\n      \"advanceWidth\": 1592\n    },\n    \"O\": {\n      \"x_min\": 70,\n      \"x_max\": 1281,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1351\n    },\n    \"P\": {\n      \"x_min\": 81,\n      \"x_max\": 1242,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1297\n    },\n    \"Q\": {\n      \"x_min\": 70,\n      \"x_max\": 1348,\n      \"y_min\": -245,\n      \"y_max\": 1477,\n      \"ha\": 1722,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1376\n    },\n    \"R\": {\n      \"x_min\": 81,\n      \"x_max\": 1285,\n      \"y_min\": 0,\n      \"y_max\": 1455,\n      \"ha\": 1455,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1385\n    },\n    \"S\": {\n      \"x_min\": 115,\n      \"x_max\": 1116,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 115,\n      \"advanceWidth\": 1206\n    },\n    \"T\": {\n      \"x_min\": 96,\n      \"x_max\": 1306,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1406\n    },\n    \"U\": {\n      \"x_min\": 70,\n      \"x_max\": 1452,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1522\n    },\n    \"V\": {\n      \"x_min\": 65,\n      \"x_max\": 1443,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1508\n    },\n    \"W\": {\n      \"x_min\": 72,\n      \"x_max\": 2057,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 2129\n    },\n    \"X\": {\n      \"x_min\": 80,\n      \"x_max\": 1449,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1529\n    },\n    \"Y\": {\n      \"x_min\": 65,\n      \"x_max\": 1396,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1461\n    },\n    \"Z\": {\n      \"x_min\": 90,\n      \"x_max\": 1107,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 90,\n      \"advanceWidth\": 1197\n    },\n    \"[\": {\n      \"x_min\": 157,\n      \"x_max\": 541,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 157,\n      \"advanceWidth\": 573\n    },\n    \"\\\\\": {\n      \"x_min\": 36,\n      \"x_max\": 830,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 36,\n      \"advanceWidth\": 841\n    },\n    \"]\": {\n      \"x_min\": 23,\n      \"x_max\": 408,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 552\n    },\n    \"^\": {\n      \"x_min\": 71,\n      \"x_max\": 802,\n      \"y_min\": 729,\n      \"y_max\": 1456,\n      \"ha\": 727,\n      \"leftSideBearing\": 71,\n      \"advanceWidth\": 864\n    },\n    \"_\": {\n      \"x_min\": 119,\n      \"x_max\": 1041,\n      \"y_min\": -154,\n      \"y_max\": 0,\n      \"ha\": 154,\n      \"leftSideBearing\": 119,\n      \"advanceWidth\": 1168\n    },\n    \"`\": {\n      \"x_min\": 40,\n      \"x_max\": 456,\n      \"y_min\": 1288,\n      \"y_max\": 1560,\n      \"ha\": 272,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 496\n    },\n    \"a\": {\n      \"x_min\": 79,\n      \"x_max\": 1053,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 79,\n      \"advanceWidth\": 1132\n    },\n    \"b\": {\n      \"x_min\": -16,\n      \"x_max\": 1071,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": -16,\n      \"advanceWidth\": 1145\n    },\n    \"c\": {\n      \"x_min\": 78,\n      \"x_max\": 988,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1067\n    },\n    \"d\": {\n      \"x_min\": 78,\n      \"x_max\": 1156,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1218\n    },\n    \"e\": {\n      \"x_min\": 74,\n      \"x_max\": 980,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1059\n    },\n    \"f\": {\n      \"x_min\": 64,\n      \"x_max\": 731,\n      \"y_min\": 0,\n      \"y_max\": 1581,\n      \"ha\": 1581,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 725\n    },\n    \"g\": {\n      \"x_min\": 78,\n      \"x_max\": 1133,\n      \"y_min\": -437,\n      \"y_max\": 1102,\n      \"ha\": 1539,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1157\n    },\n    \"h\": {\n      \"x_min\": 49,\n      \"x_max\": 1255,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 1315\n    },\n    \"i\": {\n      \"x_min\": 67,\n      \"x_max\": 590,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 67,\n      \"advanceWidth\": 652\n    },\n    \"j\": {\n      \"x_min\": -56,\n      \"x_max\": 381,\n      \"y_min\": -437,\n      \"y_max\": 1560,\n      \"ha\": 1997,\n      \"leftSideBearing\": -56,\n      \"advanceWidth\": 525\n    },\n    \"k\": {\n      \"x_min\": 64,\n      \"x_max\": 1248,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 1287\n    },\n    \"l\": {\n      \"x_min\": 64,\n      \"x_max\": 587,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 653\n    },\n    \"m\": {\n      \"x_min\": 74,\n      \"x_max\": 1905,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1977\n    },\n    \"n\": {\n      \"x_min\": 74,\n      \"x_max\": 1278,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1343\n    },\n    \"o\": {\n      \"x_min\": 78,\n      \"x_max\": 1046,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1124\n    },\n    \"p\": {\n      \"x_min\": 34,\n      \"x_max\": 1119,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 1197\n    },\n    \"q\": {\n      \"x_min\": 78,\n      \"x_max\": 1135,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1139\n    },\n    \"r\": {\n      \"x_min\": 72,\n      \"x_max\": 808,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 854\n    },\n    \"s\": {\n      \"x_min\": 104,\n      \"x_max\": 933,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 104,\n      \"advanceWidth\": 1022\n    },\n    \"t\": {\n      \"x_min\": 24,\n      \"x_max\": 678,\n      \"y_min\": -17,\n      \"y_max\": 1343,\n      \"ha\": 1360,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 730\n    },\n    \"u\": {\n      \"x_min\": 52,\n      \"x_max\": 1181,\n      \"y_min\": -21,\n      \"y_max\": 1082,\n      \"ha\": 1103,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1245\n    },\n    \"v\": {\n      \"x_min\": 26,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 1206\n    },\n    \"w\": {\n      \"x_min\": 52,\n      \"x_max\": 1777,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1823\n    },\n    \"x\": {\n      \"x_min\": 42,\n      \"x_max\": 1163,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 1203\n    },\n    \"y\": {\n      \"x_min\": 24,\n      \"x_max\": 1172,\n      \"y_min\": -437,\n      \"y_max\": 1082,\n      \"ha\": 1519,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 1192\n    },\n    \"z\": {\n      \"x_min\": 88,\n      \"x_max\": 960,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 88,\n      \"advanceWidth\": 1032\n    },\n    \"{\": {\n      \"x_min\": 63,\n      \"x_max\": 671,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 701\n    },\n    \"|\": {\n      \"x_min\": 150,\n      \"x_max\": 307,\n      \"y_min\": -270,\n      \"y_max\": 1456,\n      \"ha\": 1726,\n      \"leftSideBearing\": 150,\n      \"advanceWidth\": 451\n    },\n    \"}\": {\n      \"x_min\": 27,\n      \"x_max\": 635,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 701\n    },\n    \"~\": {\n      \"x_min\": 121,\n      \"x_max\": 1257,\n      \"y_min\": 401,\n      \"y_max\": 803,\n      \"ha\": 402,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1386\n    }\n  },\n  \"fontFamily\": \"Roboto Slab\",\n  \"resolution\": 2048,\n  \"generatedOn\": \"2020-06-15T19:12:58.120Z\"\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file handles a registry of text font metric information, so all\n// VEX modules can take advantage of font metrics in a uniform way.\n//\n\nimport { RuntimeError, log } from './util';\nimport { PetalumaScriptTextMetrics } from './fonts/petalumascript_textmetrics';\nimport { RobotoSlabTextMetrics } from './fonts/robotoslab_textmetrics';\nimport { FontInfo } from './types/common';\n\nexport interface TextFontMetrics {\n  x_min: number;\n  x_max: number;\n  y_min: number;\n  y_max: number;\n  ha: number;\n  leftSideBearing: number;\n  advanceWidth: number;\n}\n\nexport interface TextFontRegistry {\n  [name: string]: unknown;\n  name?: string;\n  resolution?: number;\n  glyphs?: Record<string, TextFontMetrics>;\n  family: string;\n  serifs: boolean;\n  monospaced?: boolean;\n  italic: boolean;\n  bold: boolean;\n  maxSizeGlyph?: string;\n  superscriptOffset?: number;\n  subscriptOffset?: number;\n  description: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextFont.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextFont.DEBUG) log('Vex.Flow.TextFont', args);\n}\n\nexport class TextFont {\n  static DEBUG: boolean;\n  static get CATEGORY(): string {\n    return 'TextFont';\n  }\n\n  resolution: number = 1000;\n  protected name?: string;\n  protected glyphs: Record<string, TextFontMetrics> = {};\n  protected family: string = '';\n  protected serifs?: boolean;\n  protected monospaced?: boolean;\n  protected italic?: boolean;\n  protected bold?: boolean;\n  protected superscriptOffset?: number;\n  protected subscriptOffset?: number;\n  protected description?: string;\n  protected maxSizeGlyph: string;\n  protected weight: string;\n  protected style: string;\n  protected fontCacheKey: string = '';\n\n  protected static registryInstance: TextFontRegistry[];\n  protected static textWidthCacheInstance?: Record<string, Record<string, number>>;\n\n  protected size: number;\n  protected attrs: { type: string };\n\n  // ### fontRegistry\n  // Getter of an array of available fonts.  Applications may register their\n  // own fonts and the metrics for those fonts will be available to the\n  // application.\n  static get fontRegistry(): TextFontRegistry[] {\n    if (!TextFont.registryInstance) {\n      TextFont.registryInstance = [];\n      TextFont.registryInstance.push({\n        name: 'Roboto Slab',\n        resolution: RobotoSlabTextMetrics.resolution,\n        glyphs: RobotoSlabTextMetrics.glyphs,\n        family: RobotoSlabTextMetrics.fontFamily,\n        serifs: true,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default serif text font to pair with Bravura/Gonville engraving font',\n      });\n      TextFont.registryInstance.push({\n        name: 'petalumaScript',\n        resolution: PetalumaScriptTextMetrics.resolution,\n        glyphs: PetalumaScriptTextMetrics.glyphs,\n        family: PetalumaScriptTextMetrics.fontFamily,\n        serifs: false,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default sans-serif text font to pair with Petaluma engraving font',\n      });\n    }\n    return TextFont.registryInstance;\n  }\n\n  // ### getFontFamilies\n  // Web font files are generally distributed per weight and style (bold, italic).\n  // return the family with the attributes that are available for that font.\n  // We assume descriptions are the same for different weights/styles.\n  static getFontFamilies(): TextFontRegistry[] {\n    const hash: Record<string, TextFontRegistry> = {};\n    const returnedFonts: TextFontRegistry[] = [];\n    TextFont.fontRegistry.forEach((font) => {\n      if (!hash[font.family]) {\n        hash[font.family] = {\n          family: font.family,\n          description: font.description,\n          bold: font.bold,\n          serifs: font.serifs,\n          italic: font.italic,\n        };\n      } else {\n        ['bold', 'italic', 'monospaced', 'serifs'].forEach((attr) => {\n          if (font[attr]) {\n            hash[font.family][attr] = true;\n          }\n        });\n      }\n    });\n    const keys = Object.keys(hash);\n    keys.forEach((key) => {\n      returnedFonts.push(hash[key]);\n    });\n    return returnedFonts;\n  }\n\n  // ### fontWeightToBold\n  // return true if the font weight indicates we desire a 'bold'\n  // used in getTextFontFromVexFontData\n  static fontWeightToBold(fw?: string): boolean {\n    if (!fw) {\n      return false;\n    }\n    if (isNaN(parseInt(fw, 10))) {\n      return fw.toLowerCase() === 'bold';\n    }\n    // very subjective...\n    return parseInt(fw, 10) >= 600;\n  }\n\n  // ### fontStyleToItalic\n  // return true if the font style indicates we desire 'italic' style\n  // used in getTextFontFromVexFontData\n  static fontStyleToItalic(fs?: string): boolean {\n    return typeof fs === 'string' && fs.toLowerCase() === 'italic';\n  }\n\n  // ### textWidthCache\n  // Static cache of widths hashed on font/string.\n  static get textWidthCache(): Record<string, Record<string, number>> {\n    if (typeof TextFont.textWidthCacheInstance === 'undefined') {\n      TextFont.textWidthCacheInstance = {};\n    }\n    return TextFont.textWidthCacheInstance;\n  }\n\n  // ### getTextFontFromVexFontData\n  // Find the font that most closely matches the parameters from the given font data.\n  // Primarily we look for font family, also bold and italic attributes.  This\n  // method will always return a fallback font if there are no matches.\n  static getTextFontFromVexFontData(fd: FontInfo): TextFont {\n    let i = 0;\n    let selectedFont = undefined;\n    const fallback = TextFont.fontRegistry[0];\n    let candidates: TextFontRegistry[] = [];\n    if (!fd.family) {\n      fd.family = 'Arial';\n    }\n    const families = fd.family.split(',');\n    for (i = 0; i < families.length; ++i) {\n      const famliy = families[i];\n      candidates = TextFont.fontRegistry.filter((font) => font.family === famliy);\n      if (candidates.length) {\n        break;\n      }\n    }\n    if (candidates.length === 0) {\n      selectedFont = new TextFont(fallback);\n    } else if (candidates.length === 1) {\n      selectedFont = new TextFont(candidates[0]);\n    } else {\n      const bold = TextFont.fontWeightToBold(fd.weight);\n      const italic = TextFont.fontStyleToItalic(fd.style);\n      const perfect = candidates.find((font) => font.bold === bold && font.italic === italic);\n      if (perfect) {\n        selectedFont = new TextFont(perfect);\n      } else {\n        const ok = candidates.find((font) => font.italic === italic || font.bold === bold);\n        if (ok) {\n          selectedFont = new TextFont(ok);\n        } else {\n          selectedFont = new TextFont(candidates[0]);\n        }\n      }\n    }\n    if (typeof fd.size === 'number' && fd.size > 0) {\n      selectedFont.setFontSize(fd.size);\n    }\n    return selectedFont;\n  }\n\n  static getFontDataByName(fontName: string): TextFontRegistry | undefined {\n    return TextFont.fontRegistry.find((fd) => fd.name === fontName);\n  }\n\n  // ### registerFont\n  // Applications may register their own fonts and the metrics, and those metrics\n  // will be available to the application for formatting.  See fontRegistry\n  // for format of font metrics.  Metrics can be generated from any font file\n  // using font_fontgen.js in the tools/smufl directory.\n  static registerFont(fontData: TextFontRegistry, overwrite?: boolean): void {\n    // Get via external reference to make sure initial object is created\n    const reg = TextFont.fontRegistry;\n    const exists = reg.find((td) => fontData.name === td.name);\n    if (exists && overwrite) {\n      TextFont.registryInstance = TextFont.fontRegistry.filter((fd) => fd.name !== exists.name);\n    }\n    if (!exists) {\n      L('registering font ' + fontData.name);\n      TextFont.registryInstance.push(fontData);\n    }\n  }\n\n  // ## Prototype Methods\n  //\n  // create a font instance.\n  // The preferred method for returning an instance of this class is via\n  // getTextFontFromVexFontData\n  constructor(params: TextFontRegistry) {\n    this.size = 14;\n    this.maxSizeGlyph = 'H';\n    this.weight = '';\n    this.style = '';\n    this.attrs = { type: TextFont.CATEGORY };\n    if (!params.name) {\n      throw new RuntimeError('BadArgument', 'Font constructor must specify a name');\n    }\n    const fontData = params.glyphs ? params : TextFont.getFontDataByName(params.name);\n    if (!fontData) {\n      if (params.glyphs && params.resolution) {\n        TextFont.registerFont(params);\n      } else {\n        throw new RuntimeError('BadArgument', 'Unknown font, must have glyph metrics and resolution');\n      }\n    } else {\n      this.updateParams(fontData);\n    }\n    this.updateParams(params);\n\n    this.updateCacheKey();\n  }\n\n  updateParams(params: TextFontRegistry): void {\n    if (params.name) this.name = params.name;\n    if (params.resolution) this.resolution = params.resolution;\n    if (params.glyphs) this.glyphs = params.glyphs;\n    this.family = params.family;\n    this.serifs = params.serifs;\n    if (params.monospaced) this.monospaced = params.monospaced;\n    this.italic = params.italic;\n    this.bold = params.bold;\n    if (params.maxSizeGlyph) this.maxSizeGlyph = params.maxSizeGlyph;\n    if (params.superscriptOffset) this.superscriptOffset = params.superscriptOffset;\n    if (params.subscriptOffset) this.subscriptOffset = params.subscriptOffset;\n  }\n\n  // Create a hash with the current font data, so we can cache computed widths\n  updateCacheKey(): void {\n    this.fontCacheKey = `${this.family}-${this.size}-${this.weight}-${this.style}`;\n  }\n\n  getMetricForCharacter(c: string): TextFontMetrics {\n    if (this.glyphs[c]) {\n      return this.glyphs[c];\n    }\n    return this.glyphs[this.maxSizeGlyph];\n  }\n\n  get maxHeight(): number {\n    const glyph = this.getMetricForCharacter(this.maxSizeGlyph);\n    return (glyph.ha / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForCharacter(c: string): number {\n    const metric = this.getMetricForCharacter(c);\n    if (!metric) {\n      return 0.65 * this.pointsToPixels;\n    }\n    return (metric.advanceWidth / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForString(s: string): number {\n    // Store width in 2-level cache, so I don't have to recompute for\n    // same string/font\n    if (typeof TextFont.textWidthCache[this.fontCacheKey] === 'undefined') {\n      TextFont.textWidthCache[this.fontCacheKey] = {};\n    }\n    let width = 0;\n    if (!TextFont.textWidthCache[this.fontCacheKey][s]) {\n      for (let j = 0; j < s.length; ++j) {\n        width += this.getWidthForCharacter(s[j]);\n      }\n      TextFont.textWidthCache[this.fontCacheKey][s] = width;\n    }\n    return TextFont.textWidthCache[this.fontCacheKey][s];\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels(): number {\n    return this.size / 72 / (1 / 96);\n  }\n\n  setFontSize(size: number): this {\n    this.size = size;\n    // font size mangled into cache key, so use the correct one.\n    this.updateCacheKey();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { StemmableNote } from './stemmablenote';\nimport { TextFont } from './textfont';\nimport { FontInfo } from './types/common';\nimport { log } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Annotation.DEBUG) log('Vex.Flow.Annotation', args);\n}\n\nenum Justify {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n  CENTER_STEM = 4,\n}\n\nenum VerticalJustify {\n  TOP = 1,\n  CENTER = 2,\n  BOTTOM = 3,\n  CENTER_STEM = 4,\n}\n\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Annotations category string. */\n  static get CATEGORY(): string {\n    return 'Annotation';\n  }\n\n  /** Text annotations can be positioned and justified relative to the note. */\n  static Justify = Justify;\n\n  static JustifyString: Record<string, number> = {\n    left: Justify.LEFT,\n    right: Justify.RIGHT,\n    center: Justify.CENTER,\n    centerStem: Justify.CENTER_STEM,\n  };\n\n  static VerticalJustify = VerticalJustify;\n\n  static VerticalJustifyString: Record<string, number> = {\n    above: Annotation.VerticalJustify.TOP,\n    top: Annotation.VerticalJustify.TOP,\n    below: Annotation.VerticalJustify.BOTTOM,\n    bottom: Annotation.VerticalJustify.BOTTOM,\n    center: Annotation.VerticalJustify.CENTER,\n    centerStem: Annotation.VerticalJustify.CENTER_STEM,\n  };\n\n  /** Arrange annotations within a `ModifierContext` */\n  static format(annotations: Annotation[], state: ModifierContextState): boolean {\n    if (!annotations || annotations.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < annotations.length; ++i) {\n      let testWidth = 0;\n      const annotation = annotations[i];\n      const textFont = TextFont.getTextFontFromVexFontData({\n        family: annotation.font.family,\n        size: annotation.font.size,\n        weight: 'normal',\n      });\n      // Calculate if the vertical extent will exceed a single line and adjust accordingly.\n      const numLines = Math.floor(textFont.maxHeight / Flow.STAVE_LINE_DISTANCE) + 1;\n      // Get the string width from the font metrics\n      testWidth = textFont.getWidthForString(annotation.text);\n      width = Math.max(width, testWidth);\n      if (annotation.getPosition() === Modifier.Position.ABOVE) {\n        annotation.setTextLine(state.top_text_line);\n        state.top_text_line += numLines;\n      } else {\n        annotation.setTextLine(state.text_line);\n        state.text_line += numLines;\n      }\n    }\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  protected justification: Justify;\n  protected vert_justification: VerticalJustify;\n  protected text: string;\n  // Initialized by the constructor via this.setFont('Arial', 10).\n  protected font!: FontInfo;\n\n  /**\n   * Annotations inherit from `Modifier` and is positioned correctly when\n   * in a `ModifierContext`.\n   * Create a new `Annotation` with the string `text`.\n   */\n  constructor(text: string) {\n    super();\n\n    this.text = text;\n    this.justification = Justify.CENTER;\n    this.vert_justification = Annotation.VerticalJustify.TOP;\n    this.setFont('Arial', 10);\n\n    // The default width is calculated from the text.\n    this.setWidth(Flow.textWidth(text));\n  }\n\n  /** Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`. */\n  setFont(family: string, size: number, weight: string = ''): this {\n    this.font = { family, size, weight };\n    return this;\n  }\n\n  /**\n   * Set vertical position of text (above or below stave).\n   * @param just value in `Annotation.VerticalJustify`.\n   */\n  setVerticalJustification(just: string | VerticalJustify): this {\n    this.vert_justification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n    return this;\n  }\n\n  /**\n   * Get horizontal justification.\n   */\n  getJustification(): Justify {\n    return this.justification;\n  }\n\n  /**\n   * Set horizontal justification.\n   * @param justification value in `Annotation.Justify`.\n   */\n  setJustification(just: string | Justify): this {\n    this.justification = typeof just === 'string' ? Annotation.JustifyString[just] : just;\n    return this;\n  }\n\n  /** Render text beside the note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n\n    // We're changing context parameters. Save current state.\n    ctx.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText(this.text).width;\n\n    // Estimate text height to be the same as the width of an 'm'.\n    //\n    // This is a hack to work around the inability to measure text height\n    // in HTML5 Canvas (and SVG).\n    const text_height = ctx.measureText('m').width;\n    let x;\n    let y;\n\n    if (this.justification === Annotation.Justify.LEFT) {\n      x = start.x;\n    } else if (this.justification === Annotation.Justify.RIGHT) {\n      x = start.x - text_width;\n    } else if (this.justification === Annotation.Justify.CENTER) {\n      x = start.x - text_width / 2;\n    } /* CENTER_STEM */ else {\n      x = (note as StemmableNote).getStemX() - text_width / 2;\n    }\n\n    let stem_ext: Record<string, number> = {};\n    let spacing = 0;\n    const has_stem = note.hasStem();\n    const stave = note.checkStave();\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    if (has_stem) {\n      stem_ext = (note as StemmableNote).checkStem().getExtents();\n      spacing = stave.getSpacingBetweenLines();\n    }\n\n    if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin\n      // is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n      if (has_stem) {\n        const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {\n      const yt = note.getYForTopText(this.text_line) - 1;\n      const yb = stave.getYForBottomText(this.text_line);\n      y = yt + (yb - yt) / 2 + text_height / 2;\n    } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {\n      y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\n      if (has_stem) {\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    } /* CENTER_STEM */ else {\n      const extents = note.getStemExtents();\n      y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\n    }\n\n    L('Rendering annotation: ', this.text, x, y);\n    ctx.fillText(this.text, x, y);\n    ctx.closeGroup();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author: @AaronDavidNewman\n//\n// This implements chord symbols as modifiers that can be attached to notes.\n// Chord symbols can contain multiple 'blocks' which can contain\n// text or glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\n\nimport { log } from './util';\nimport { Flow } from './flow';\nimport { Glyph } from './glyph';\nimport { TextFont } from './textfont';\nimport { Modifier } from './modifier';\nimport { FontInfo } from './types/common';\nimport { StemmableNote } from './stemmablenote';\nimport { ModifierContextState } from 'modifiercontext';\n\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (ChordSymbol.DEBUG) log('Vex.Flow.ChordSymbol', args);\n}\n\nexport interface ChordSymbolBlock {\n  text: string;\n  symbolType: SymbolTypes;\n  symbolModifier: SymbolModifiers;\n  xShift: number;\n  yShift: number;\n  vAlign: boolean;\n  width: number;\n  glyph?: Glyph;\n}\n\nexport enum HorizontalJustify {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n  CENTER_STEM = 4,\n}\n\nexport enum VerticalJustify {\n  TOP = 1,\n  BOTTOM = 2,\n}\n\nexport enum SymbolTypes {\n  GLYPH = 1,\n  TEXT = 2,\n  LINE = 3,\n}\n\nexport enum SymbolModifiers {\n  NONE = 1,\n  SUBSCRIPT = 2,\n  SUPERSCRIPT = 3,\n}\n\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n  static DEBUG: boolean = false;\n\n  static get CATEGORY(): string {\n    return 'ChordSymbol';\n  }\n\n  protected symbolBlocks: ChordSymbolBlock[];\n  protected horizontal: number;\n  protected vertical: number;\n  protected useKerning: boolean;\n  protected reportWidth: boolean;\n  protected font: FontInfo;\n  protected textFont: TextFont;\n  /** Currently unused. */\n  protected static noFormat: boolean = false;\n\n  // Chord symbols can be positioned and justified relative to the note.\n  static readonly horizontalJustify = HorizontalJustify;\n\n  static readonly horizontalJustifyString: Record<string, HorizontalJustify> = {\n    left: HorizontalJustify.LEFT,\n    right: HorizontalJustify.RIGHT,\n    center: HorizontalJustify.CENTER,\n    centerStem: HorizontalJustify.CENTER_STEM,\n  };\n\n  static readonly verticalJustify = VerticalJustify;\n\n  static readonly verticalJustifyString: Record<string, VerticalJustify> = {\n    top: VerticalJustify.TOP,\n    above: VerticalJustify.TOP,\n    below: VerticalJustify.BOTTOM,\n    bottom: VerticalJustify.BOTTOM,\n  };\n\n  static get superSubRatio(): number {\n    return ChordSymbol.chordSymbolMetrics.global.superSubRatio;\n  }\n\n  /** Currently unused: Globally turn off text formatting, if the built-in formatting does not work for your font. */\n  static set NO_TEXT_FORMAT(val: boolean) {\n    ChordSymbol.noFormat = val;\n  }\n\n  static get NO_TEXT_FORMAT(): boolean {\n    return ChordSymbol.noFormat;\n  }\n\n  // eslint-disable-next-line\n  static getMetricForGlyph(glyphCode: string): any {\n    if (ChordSymbol.chordSymbolMetrics[glyphCode]) {\n      return ChordSymbol.chordSymbolMetrics[glyphCode];\n    }\n    return undefined;\n  }\n\n  getYOffsetForText(text: string): number {\n    let acc = 0;\n    let ix = 0;\n    const resolution = this.textFont.resolution;\n    for (ix = 0; ix < text.length; ++ix) {\n      const metric = this.textFont.getMetricForCharacter(text[ix]);\n\n      if (metric) {\n        acc = metric.y_max < acc ? metric.y_max : acc;\n      }\n    }\n\n    return ix > 0 ? -1 * (acc / resolution) : 0;\n  }\n\n  static get engravingFontResolution(): number {\n    return Flow.DEFAULT_FONT_STACK[0].getResolution();\n  }\n\n  static get spacingBetweenBlocks(): number {\n    return ChordSymbol.chordSymbolMetrics.global.spacing / ChordSymbol.engravingFontResolution;\n  }\n\n  getWidthForCharacter(c: string): number {\n    return this.textFont.getMetricForCharacter(c).advanceWidth / this.textFont.resolution;\n  }\n\n  static getWidthForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0.65; // probably should do something here.\n    }\n    return metric.advanceWidth / ChordSymbol.engravingFontResolution;\n  }\n\n  static getYShiftForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return metric.yOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static getXShiftForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;\n  }\n\n  static get superscriptOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get subscriptOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get kerningOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.kerningOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  // Glyph data\n  static readonly glyphs: Record<string, { code: string }> = {\n    diminished: {\n      code: 'csymDiminished',\n    },\n    dim: {\n      code: 'csymDiminished',\n    },\n    halfDiminished: {\n      code: 'csymHalfDiminished',\n    },\n    '+': {\n      code: 'csymAugmented',\n    },\n    augmented: {\n      code: 'csymAugmented',\n    },\n    majorSeventh: {\n      code: 'csymMajorSeventh',\n    },\n    minor: {\n      code: 'csymMinor',\n    },\n    '-': {\n      code: 'csymMinor',\n    },\n    '(': {\n      code: 'csymParensLeftTall',\n    },\n    leftParen: {\n      code: 'csymParensLeftTall',\n    },\n    ')': {\n      code: 'csymParensRightTall',\n    },\n    rightParen: {\n      code: 'csymParensRightTall',\n    },\n    leftBracket: {\n      code: 'csymBracketLeftTall',\n    },\n    rightBracket: {\n      code: 'csymBracketRightTall',\n    },\n    leftParenTall: {\n      code: 'csymParensLeftVeryTall',\n    },\n    rightParenTall: {\n      code: 'csymParensRightVeryTall',\n    },\n    '/': {\n      code: 'csymDiagonalArrangementSlash',\n    },\n    over: {\n      code: 'csymDiagonalArrangementSlash',\n    },\n    '#': {\n      code: 'accidentalSharp',\n    },\n    b: {\n      code: 'accidentalFlat',\n    },\n  };\n\n  static readonly symbolTypes = SymbolTypes;\n\n  static readonly symbolModifiers = SymbolModifiers;\n\n  // eslint-disable-next-line\n  static get chordSymbolMetrics(): any {\n    return Flow.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol;\n  }\n\n  static get lowerKerningText(): string[] {\n    return Flow.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol.global.lowerKerningText;\n  }\n\n  static get upperKerningText(): string[] {\n    return Flow.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol.global.upperKerningText;\n  }\n\n  /**\n   * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n   * Estimate how many lines above/below the staff we need.\n   */\n  static format(instances: ChordSymbol[], state: ModifierContextState): boolean {\n    if (!instances || instances.length === 0) return false;\n\n    let width = 0;\n    let nonSuperWidth = 0;\n    const reportedWidths = [];\n\n    for (let i = 0; i < instances.length; ++i) {\n      const instance = instances[i];\n      const fontAdj = instance.font.size / 20;\n      const glyphAdj = fontAdj * 2;\n      let lineSpaces = 1;\n      let vAlign = false;\n\n      for (let j = 0; j < instance.symbolBlocks.length; ++j) {\n        const symbol = instance.symbolBlocks[j];\n        const sup = instance.isSuperscript(symbol);\n        const sub = instance.isSubscript(symbol);\n        const subAdj = sup || sub ? ChordSymbol.superSubRatio : 1;\n        const adj = symbol.symbolType === SymbolTypes.GLYPH ? glyphAdj * subAdj : fontAdj * subAdj;\n\n        // If there are super/subscripts, they extend beyond the line so\n        // assume they take up 2 lines\n        if (sup || sub) {\n          lineSpaces = 2;\n        }\n\n        // If there is a symbol-specific offset, add it but consider font\n        // size since font and glyphs will be interspersed\n        if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph !== undefined) {\n          symbol.yShift += ChordSymbol.getYShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.xShift += ChordSymbol.getXShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.glyph.scale = symbol.glyph.scale * adj;\n          symbol.width = ChordSymbol.getWidthForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n        } else if (symbol.symbolType === SymbolTypes.TEXT) {\n          symbol.width = symbol.width * instance.textFont.pointsToPixels * subAdj;\n          symbol.yShift += instance.getYOffsetForText(symbol.text) * adj;\n        }\n\n        if (\n          symbol.symbolType === SymbolTypes.GLYPH &&\n          symbol.glyph !== undefined &&\n          symbol.glyph.code === ChordSymbol.glyphs.over.code\n        ) {\n          lineSpaces = 2;\n        }\n        symbol.width += ChordSymbol.spacingBetweenBlocks * instance.pointsToPixels * subAdj;\n\n        // If a subscript immediately  follows a superscript block, try to\n        // overlay them.\n        if (sup && j > 0) {\n          const prev = instance.symbolBlocks[j - 1];\n          if (!instance.isSuperscript(prev)) {\n            nonSuperWidth = width;\n          }\n        }\n        if (sub && nonSuperWidth > 0) {\n          vAlign = true;\n          // slide the symbol over so it lines up with superscript\n          symbol.xShift = symbol.xShift + (nonSuperWidth - width);\n          width = nonSuperWidth;\n          nonSuperWidth = 0;\n          // If we have vertically lined up, turn kerning off.\n          instance.setEnableKerning(false);\n        }\n        if (!sup && !sub) {\n          nonSuperWidth = 0;\n        }\n        symbol.vAlign = vAlign;\n        width += symbol.width;\n      }\n\n      // make kerning adjustments after computing super/subscripts\n      instance.updateKerningAdjustments();\n      instance.updateOverBarAdjustments();\n\n      if (instance.getVertical() === VerticalJustify.TOP) {\n        instance.setTextLine(state.top_text_line);\n        state.top_text_line += lineSpaces;\n      } else {\n        instance.setTextLine(state.text_line + 1);\n        state.text_line += lineSpaces + 1;\n      }\n      if (instance.getReportWidth()) {\n        reportedWidths.push(width);\n      } else {\n        reportedWidths.push(0);\n      }\n    }\n\n    width = reportedWidths.reduce((a, b) => a + b, 0);\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  constructor() {\n    super();\n    this.symbolBlocks = [];\n    this.horizontal = HorizontalJustify.LEFT;\n    this.vertical = VerticalJustify.TOP;\n    this.useKerning = true;\n    this.reportWidth = true;\n\n    let fontFamily = 'Arial';\n    if (this.musicFont.getName() === 'Petaluma') {\n      fontFamily = 'petalumaScript,Arial';\n    } else {\n      fontFamily = 'Roboto Slab,Times';\n    }\n    this.font = {\n      family: fontFamily,\n      size: 12,\n      weight: '',\n    };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels(): number {\n    return this.textFont.pointsToPixels;\n  }\n\n  get superscriptOffset(): number {\n    return ChordSymbol.superscriptOffset * this.pointsToPixels;\n  }\n\n  get subscriptOffset(): number {\n    return ChordSymbol.subscriptOffset * this.pointsToPixels;\n  }\n\n  setReportWidth(value: boolean): this {\n    this.reportWidth = value;\n    return this;\n  }\n\n  getReportWidth(): boolean {\n    return this.reportWidth;\n  }\n\n  updateOverBarAdjustments(): void {\n    const barIndex = this.symbolBlocks.findIndex(\n      ({ symbolType, glyph }: ChordSymbolBlock) =>\n        symbolType === SymbolTypes.GLYPH && glyph !== undefined && glyph.code === 'csymDiagonalArrangementSlash'\n    );\n\n    if (barIndex < 0) {\n      return;\n    }\n    const bar = this.symbolBlocks[barIndex];\n    const xoff = bar.width / 4;\n    const yoff = 0.25 * this.pointsToPixels;\n    let symIndex = 0;\n    for (symIndex === 0; symIndex < barIndex; ++symIndex) {\n      const symbol = this.symbolBlocks[symIndex];\n      symbol.xShift = symbol.xShift + xoff;\n      symbol.yShift = symbol.yShift - yoff;\n    }\n\n    for (symIndex = barIndex + 1; symIndex < this.symbolBlocks.length; ++symIndex) {\n      const symbol = this.symbolBlocks[symIndex];\n      symbol.xShift = symbol.xShift - xoff;\n      symbol.yShift = symbol.yShift + yoff;\n    }\n  }\n\n  updateKerningAdjustments(): void {\n    let accum = 0;\n    for (let j = 0; j < this.symbolBlocks.length; ++j) {\n      const symbol = this.symbolBlocks[j];\n      accum += this.getKerningAdjustment(j);\n      symbol.xShift += accum;\n    }\n  }\n\n  /** Do some basic kerning so that letter chords like 'A' don't have the extensions hanging off to the right. */\n  getKerningAdjustment(j: number): number {\n    if (!this.useKerning) {\n      return 0;\n    }\n    const currSymbol = this.symbolBlocks[j];\n    const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : undefined;\n    let adjustment = 0;\n\n    // Move things into the '/' over bar\n    if (\n      currSymbol.symbolType === SymbolTypes.GLYPH &&\n      currSymbol.glyph !== undefined &&\n      currSymbol.glyph.code === ChordSymbol.glyphs.over.code\n    ) {\n      adjustment += currSymbol.glyph.metrics.x_shift;\n    }\n\n    if (\n      prevSymbol !== undefined &&\n      prevSymbol.symbolType === SymbolTypes.GLYPH &&\n      prevSymbol.glyph !== undefined &&\n      prevSymbol.glyph.code === ChordSymbol.glyphs.over.code\n    ) {\n      adjustment += prevSymbol.glyph.metrics.x_shift;\n    }\n\n    // For superscripts that follow a letter without much top part, move it to the left slightly\n    let preKernUpper = false;\n    let preKernLower = false;\n    if (prevSymbol !== undefined && prevSymbol.symbolType === SymbolTypes.TEXT) {\n      preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n      preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n    }\n\n    const kerningOffsetPixels = ChordSymbol.kerningOffset * this.pointsToPixels;\n    // TODO: adjust kern for font size.\n    // Where should this constant live?\n    if (preKernUpper && currSymbol.symbolModifier === SymbolModifiers.SUPERSCRIPT) {\n      adjustment += kerningOffsetPixels;\n    }\n\n    if (preKernLower && currSymbol.symbolType === SymbolTypes.TEXT) {\n      if (currSymbol.text[0] >= 'a' && currSymbol.text[0] <= 'z') {\n        adjustment += kerningOffsetPixels / 2;\n      }\n      if (ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol?.text[prevSymbol.text.length - 1])) {\n        adjustment += kerningOffsetPixels / 2;\n      }\n    }\n    return adjustment;\n  }\n\n  /**\n   * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n   * Each block can have its own vertical orientation.\n   */\n  // eslint-disable-next-line\n  getSymbolBlock(params: any = {}): ChordSymbolBlock {\n    const symbolType = params.symbolType ?? SymbolTypes.TEXT;\n    const symbolBlock: ChordSymbolBlock = {\n      text: params.text ?? '',\n      symbolType,\n      symbolModifier: params.symbolModifier ?? SymbolModifiers.NONE,\n      xShift: 0,\n      yShift: 0,\n      vAlign: false,\n      width: 0,\n    };\n\n    // Note: all symbol widths are resolution and font-independent.\n    // We convert to pixel values when we know what the font is.\n    if (symbolType === SymbolTypes.GLYPH && typeof params.glyph === 'string') {\n      const glyphArgs = ChordSymbol.glyphs[params.glyph];\n      const glyphPoints = 20;\n      symbolBlock.glyph = new Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });\n      // Beware: glyph.metrics is not the same as glyph.getMetrics() !\n      // rv.glyph.point = rv.glyph.point * rv.glyph.metrics.scale;\n      // rv.width = rv.glyph.getMetrics().width;\n      // don't set yShift here, b/c we need to do it at formatting time after the font is set.\n    } else if (symbolType === SymbolTypes.TEXT) {\n      let textWidth = 0;\n      for (let i = 0; i < symbolBlock.text.length; ++i) {\n        textWidth += this.getWidthForCharacter(symbolBlock.text[i]);\n      }\n      symbolBlock.width = textWidth;\n    } else if (symbolType === SymbolTypes.LINE) {\n      symbolBlock.width = params.width;\n    }\n\n    return symbolBlock;\n  }\n\n  /** Add a symbol to this chord, could be text, glyph or line. */\n  // eslint-disable-next-line\n  addSymbolBlock(parameters: any): this {\n    this.symbolBlocks.push(this.getSymbolBlock(parameters));\n    return this;\n  }\n\n  // ### Convenience functions for creating different types of chord symbol parts.\n\n  /** Add a text block. */\n  // eslint-disable-next-line\n  addText(text: string, parameters: any = {}): this {\n    const symbolType = SymbolTypes.TEXT;\n    return this.addSymbolBlock({ ...parameters, text, symbolType });\n  }\n\n  /** Add a text block with superscript modifier. */\n  addTextSuperscript(text: string): this {\n    const symbolType = SymbolTypes.TEXT;\n    const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  /** Add a text block with subscript modifier. */\n  addTextSubscript(text: string): this {\n    const symbolType = SymbolTypes.TEXT;\n    const symbolModifier = SymbolModifiers.SUBSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  /** Add a glyph block with superscript modifier. */\n  addGlyphSuperscript(glyph: string): this {\n    const symbolType = SymbolTypes.GLYPH;\n    const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ glyph, symbolType, symbolModifier });\n  }\n\n  /** Add a glyph block. */\n  // eslint-disable-next-line\n  addGlyph(glyph: string, params: any = {}): this {\n    const symbolType = SymbolTypes.GLYPH;\n    return this.addSymbolBlock({ ...params, glyph, symbolType });\n  }\n\n  /**\n   * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n   * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n   */\n  // eslint-disable-next-line\n  addGlyphOrText(text: string, params: any = {}): this {\n    let str = '';\n    for (let i = 0; i < text.length; ++i) {\n      const char = text[i];\n      if (ChordSymbol.glyphs[char]) {\n        if (str.length > 0) {\n          this.addText(str, params);\n          str = '';\n        }\n        this.addGlyph(char, params);\n      } else {\n        // Collect consecutive characters with no glyphs.\n        str += char;\n      }\n    }\n    if (str.length > 0) {\n      this.addText(str, params);\n    }\n    return this;\n  }\n\n  /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n  // eslint-disable-next-line\n  addLine(width: number, params: any = {}): this {\n    const symbolType = SymbolTypes.LINE;\n    return this.addSymbolBlock({ ...params, symbolType, width });\n  }\n\n  // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n  setFont(family: string, size: number, weight: string): this {\n    this.font = { family, size, weight };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n    return this;\n  }\n\n  setFontSize(size: number): this {\n    this.font.size = size;\n    this.textFont.setFontSize(size);\n    return this;\n  }\n\n  setEnableKerning(val: boolean): this {\n    this.useKerning = val;\n    return this;\n  }\n\n  /** Set vertical position of text (above or below stave). */\n  setVertical(vj: VerticalJustify | string | number): this {\n    this.vertical = typeof vj === 'string' ? ChordSymbol.verticalJustifyString[vj] : vj;\n    return this;\n  }\n\n  getVertical(): number {\n    return this.vertical;\n  }\n\n  /** Set horizontal justification. */\n  setHorizontal(hj: HorizontalJustify | string | number): this {\n    this.horizontal = typeof hj === 'string' ? ChordSymbol.horizontalJustifyString[hj] : hj;\n    return this;\n  }\n\n  getHorizontal(): number {\n    return this.horizontal;\n  }\n\n  getWidth(): number {\n    let width = 0;\n    this.symbolBlocks.forEach((symbol) => {\n      width += symbol.vAlign ? 0 : symbol.width;\n    });\n    return width;\n  }\n\n  isSuperscript(symbol: ChordSymbolBlock): boolean {\n    return symbol.symbolModifier !== undefined && symbol.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n  }\n\n  isSubscript(symbol: ChordSymbolBlock): boolean {\n    return symbol.symbolModifier !== undefined && symbol.symbolModifier === SymbolModifiers.SUBSCRIPT;\n  }\n\n  /** Render text and glyphs above/below the note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote() as StemmableNote;\n    this.setRendered();\n\n    // We're changing context parameters. Save current state.\n    ctx.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n\n    const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    let y: number;\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    const hasStem = note.hasStem();\n    const stave = note.checkStave();\n\n    if (this.vertical === VerticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n      if (hasStem) {\n        const stem_ext = note.checkStem().getExtents();\n        const spacing = stave.getSpacingBetweenLines();\n        const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else {\n      // (this.vertical === VerticalJustify.TOP)\n      y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\n      if (hasStem) {\n        const stem_ext = note.checkStem().getExtents();\n        const spacing = stave.getSpacingBetweenLines();\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    }\n\n    let x = start.x;\n    if (this.horizontal === HorizontalJustify.LEFT) {\n      x = start.x;\n    } else if (this.horizontal === HorizontalJustify.RIGHT) {\n      x = start.x + this.getWidth();\n    } else if (this.horizontal === HorizontalJustify.CENTER) {\n      x = start.x - this.getWidth() / 2;\n    } else {\n      // HorizontalJustify.CENTER_STEM\n      x = note.getStemX() - this.getWidth() / 2;\n    }\n    L('Rendering ChordSymbol: ', this.textFont, x, y);\n\n    this.symbolBlocks.forEach((symbol) => {\n      const sp = this.isSuperscript(symbol);\n      const sub = this.isSubscript(symbol);\n      let curY = y;\n      L('shift was ', symbol.xShift, symbol.yShift);\n      L('curY pre sub ', curY);\n      if (sp) {\n        curY += this.superscriptOffset;\n      }\n      if (sub) {\n        curY += this.subscriptOffset;\n      }\n      L('curY sup/sub ', curY);\n\n      if (symbol.symbolType === SymbolTypes.TEXT) {\n        if (sp || sub) {\n          ctx.save();\n          ctx.setFont(this.font.family, this.font.size * ChordSymbol.superSubRatio, this.font.weight);\n        }\n        // TODO???\n        // We estimate the text width, fill it in with the empirical value so the formatting is even.\n        // const textDim = ctx.measureText(symbol.text);\n        // symbol.width = textDim.width;\n\n        L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);\n\n        ctx.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);\n        if (sp || sub) {\n          ctx.restore();\n        }\n      } else if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph) {\n        curY += symbol.yShift;\n        L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);\n        symbol.glyph.render(ctx, x + symbol.xShift, curY);\n      } else if (symbol.symbolType === SymbolTypes.LINE) {\n        L('Rendering Line : ', symbol.width, x, curY);\n        ctx.beginPath();\n        ctx.setLineWidth(1); // ?\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + symbol.width, curY);\n        ctx.stroke();\n      }\n\n      x += symbol.width;\n      if (symbol.vAlign) {\n        x += symbol.xShift;\n      }\n    });\n    ctx.closeGroup();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\n\nimport { defined } from './util';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\n\nexport interface LayoutMetrics {\n  xMin: number;\n  xMax: number;\n  paddingLeft: number;\n  paddingRight: number;\n}\n\nexport enum StaveModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n  BEGIN = 5,\n  END = 6,\n}\n\nexport class StaveModifier extends Element {\n  static get CATEGORY(): string {\n    return 'StaveModifier';\n  }\n\n  static get Position(): typeof StaveModifierPosition {\n    return StaveModifierPosition;\n  }\n\n  protected width: number = 0;\n  protected x: number = 0;\n\n  protected padding: number;\n  protected position: StaveModifierPosition;\n  protected stave?: Stave;\n  protected layoutMetrics?: LayoutMetrics;\n\n  constructor() {\n    super();\n\n    this.padding = 10;\n    this.position = StaveModifierPosition.ABOVE;\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  setPosition(position: number): this {\n    this.position = position;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  placeGlyphOnLine(glyph: Glyph, stave: Stave, line?: number, customShift = 0): void {\n    glyph.setYShift(stave.getYForLine(line ?? 0) - stave.getYForGlyphs() + customShift);\n  }\n\n  getPadding(index: number): number {\n    return index !== undefined && index < 2 ? 0 : this.padding;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  setLayoutMetrics(layoutMetrics: LayoutMetrics): this {\n    this.layoutMetrics = layoutMetrics;\n    return this;\n  }\n\n  getLayoutMetrics(): LayoutMetrics | undefined {\n    return this.layoutMetrics;\n  }\n\n  // eslint-disable-next-line\n  draw(element?: Element, x_shift?: number): void {\n    // DO NOTHING.\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\n\nimport { Flow } from './flow';\nimport { LayoutMetrics, StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Stave } from './stave';\n\nexport enum BarlineType {\n  SINGLE = 1,\n  DOUBLE = 2,\n  END = 3,\n  REPEAT_BEGIN = 4,\n  REPEAT_END = 5,\n  REPEAT_BOTH = 6,\n  NONE = 7,\n}\n\nexport class Barline extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'Barline';\n  }\n\n  protected widths: Record<string, number>;\n  protected paddings: Record<string, number>;\n  protected layoutMetricsMap: Record<number, LayoutMetrics>;\n\n  protected thickness: number;\n  protected type!: BarlineType;\n\n  static get type(): typeof BarlineType {\n    return BarlineType;\n  }\n\n  static get typeString(): Record<string, BarlineType> {\n    return {\n      single: BarlineType.SINGLE,\n      double: BarlineType.DOUBLE,\n      end: BarlineType.END,\n      repeatBegin: BarlineType.REPEAT_BEGIN,\n      repeatEnd: BarlineType.REPEAT_END,\n      repeatBoth: BarlineType.REPEAT_BOTH,\n      none: BarlineType.NONE,\n    };\n  }\n\n  constructor(type: BarlineType | string) {\n    super();\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n\n    const TYPE = BarlineType;\n    this.widths = {};\n    this.widths[TYPE.SINGLE] = 5;\n    this.widths[TYPE.DOUBLE] = 5;\n    this.widths[TYPE.END] = 5;\n    this.widths[TYPE.REPEAT_BEGIN] = 5;\n    this.widths[TYPE.REPEAT_END] = 5;\n    this.widths[TYPE.REPEAT_BOTH] = 5;\n    this.widths[TYPE.NONE] = 5;\n\n    this.paddings = {};\n    this.paddings[TYPE.SINGLE] = 0;\n    this.paddings[TYPE.DOUBLE] = 0;\n    this.paddings[TYPE.END] = 0;\n    this.paddings[TYPE.REPEAT_BEGIN] = 15;\n    this.paddings[TYPE.REPEAT_END] = 15;\n    this.paddings[TYPE.REPEAT_BOTH] = 15;\n    this.paddings[TYPE.NONE] = 0;\n\n    this.layoutMetricsMap = {};\n    this.layoutMetricsMap[TYPE.SINGLE] = {\n      xMin: 0,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.DOUBLE] = {\n      xMin: -3,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.END] = {\n      xMin: -5,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_END] = {\n      xMin: -10,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n      xMin: -2,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n      xMin: -10,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.NONE] = {\n      xMin: 0,\n      xMax: 0,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.setType(type);\n  }\n\n  getType(): number {\n    return this.type;\n  }\n\n  setType(type: string | number): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    this.setWidth(this.widths[this.type]);\n    this.setPadding(this.paddings[this.type]);\n    this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n    return this;\n  }\n\n  // Draw barlines\n  draw(stave: Stave): void {\n    stave.checkContext();\n    this.setRendered();\n\n    switch (this.type) {\n      case BarlineType.SINGLE:\n        this.drawVerticalBar(stave, this.x, false);\n        break;\n      case BarlineType.DOUBLE:\n        this.drawVerticalBar(stave, this.x, true);\n        break;\n      case BarlineType.END:\n        this.drawVerticalEndBar(stave, this.x);\n        break;\n      case BarlineType.REPEAT_BEGIN:\n        // If the barline is shifted over (in front of clef/time/key)\n        // Draw vertical bar at the beginning.\n        this.drawRepeatBar(stave, this.x, true);\n        if (stave.getX() !== this.x) {\n          this.drawVerticalBar(stave, stave.getX());\n        }\n\n        break;\n      case BarlineType.REPEAT_END:\n        this.drawRepeatBar(stave, this.x, false);\n        break;\n      case BarlineType.REPEAT_BOTH:\n        this.drawRepeatBar(stave, this.x, false);\n        this.drawRepeatBar(stave, this.x, true);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n  }\n\n  drawVerticalBar(stave: Stave, x: number, double_bar?: boolean): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    if (double_bar) {\n      staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n    }\n    staveCtx.fillRect(x, topY, 1, botY - topY);\n  }\n\n  drawVerticalEndBar(stave: Stave, x: number): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n  }\n\n  drawRepeatBar(stave: Stave, x: number, begin: boolean): void {\n    const staveCtx = stave.checkContext();\n\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    let x_shift = 3;\n\n    if (!begin) {\n      x_shift = -5;\n    }\n\n    staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n\n    const dot_radius = 2;\n\n    // Shift dots left or right\n    if (begin) {\n      x_shift += 4;\n    } else {\n      x_shift -= 4;\n    }\n\n    const dot_x = x + x_shift + dot_radius / 2;\n\n    // calculate the y offset based on number of stave lines\n    let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n    y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n    let dot_y = topY + y_offset + dot_radius / 2;\n\n    // draw the top repeat dot\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n\n    // draw the bottom repeat dot\n    dot_y += stave.getSpacingBetweenLines();\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Note, NoteStruct } from './note';\nimport { Glyph } from './glyph';\nimport { FontInfo } from './types/common';\n\nexport enum Justification {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n}\n\nexport interface TextNoteStruct extends NoteStruct {\n  text?: string;\n  glyph?: string;\n  ignore_ticks?: boolean;\n  smooth?: boolean;\n  font?: FontInfo;\n  subscript?: string;\n  superscript?: string;\n}\n\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n  static get CATEGORY(): string {\n    return 'TextNote';\n  }\n\n  protected text: string;\n  protected superscript?: string;\n  protected subscript?: string;\n  protected smooth: boolean;\n\n  protected font: FontInfo;\n  protected justification: Justification;\n  protected line: number;\n\n  static get Justification(): typeof Justification {\n    return Justification;\n  }\n\n  /** Glyph data. */\n  static get GLYPHS(): Record<string, { code: string }> {\n    return {\n      segno: {\n        code: 'segno',\n      },\n      tr: {\n        code: 'ornamentTrill',\n      },\n      mordent: {\n        code: 'ornamentMordent',\n      },\n      mordent_upper: {\n        code: 'ornamentShortTrill',\n      },\n      mordent_lower: {\n        code: 'ornamentMordent',\n      },\n      f: {\n        code: 'dynamicForte',\n      },\n      p: {\n        code: 'dynamicPiano',\n      },\n      m: {\n        code: 'dynamicMezzo',\n      },\n      s: {\n        code: 'dynamicSforzando',\n      },\n      z: {\n        code: 'dynamicZ',\n      },\n      coda: {\n        code: 'coda',\n      },\n      pedal_open: {\n        code: 'keyboardPedalPed',\n      },\n      pedal_close: {\n        code: 'keyboardPedalUp',\n      },\n      caesura_straight: {\n        code: 'caesura',\n      },\n      caesura_curved: {\n        code: 'caesuraCurved',\n      },\n      breath: {\n        code: 'breathMarkComma',\n      },\n      tick: {\n        code: 'breathMarkTick',\n      },\n      turn: {\n        code: 'ornamentTurn',\n      },\n      turn_inverted: {\n        code: 'ornamentTurnSlash',\n      },\n    };\n  }\n\n  constructor(noteStruct: TextNoteStruct) {\n    super(noteStruct);\n\n    this.text = noteStruct.text || '';\n    this.superscript = noteStruct.superscript;\n    this.subscript = noteStruct.subscript;\n    this.font = {\n      family: 'Arial',\n      size: 12,\n      weight: '',\n      ...noteStruct.font,\n    };\n    this.line = noteStruct.line || 0;\n    this.smooth = noteStruct.smooth || false;\n    this.ignore_ticks = noteStruct.ignore_ticks || false;\n    this.justification = Justification.LEFT;\n\n    // Determine and set initial note width. Note that the text width is\n    // an approximation and isn't very accurate. The only way to accurately\n    // measure the length of text is with `CanvasRenderingContext2D.measureText()`.\n    if (noteStruct.glyph) {\n      const struct = TextNote.GLYPHS[noteStruct.glyph];\n      if (!struct) throw new RuntimeError('Invalid glyph type: ' + noteStruct.glyph);\n\n      this.glyph = new Glyph(struct.code, 40, { category: 'textNote' });\n      this.setWidth(this.glyph.getMetrics().width);\n    } else {\n      this.glyph = undefined;\n    }\n  }\n\n  /** Set the horizontal justification of the TextNote. */\n  setJustification(just: Justification): this {\n    this.justification = just;\n    return this;\n  }\n\n  /** Set the Stave line on which the note should be placed. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Pre-render formatting. */\n  preFormat(): void {\n    if (this.preFormatted) return;\n    const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n\n    if (this.smooth) {\n      this.setWidth(0);\n    } else {\n      if (this.glyph) {\n        // Width already set.\n      } else {\n        const ctx = this.checkContext();\n        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n        this.setWidth(ctx.measureText(this.text).width);\n      }\n    }\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      this.leftDisplacedHeadPx = this.width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      this.leftDisplacedHeadPx = this.width;\n    }\n\n    // We reposition to the center of the note head\n    this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n    this.setPreFormatted(true);\n  }\n\n  /** Renders the TextNote. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n\n    this.setRendered();\n\n    // Reposition to center of note head\n    let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n\n    // Align based on tick-context width.\n    const width = this.getWidth();\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      x -= width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      x -= width;\n    }\n\n    let y;\n    if (this.glyph) {\n      y = stave.getYForLine(this.line + -3);\n      this.glyph.render(ctx, x, y);\n    } else {\n      y = stave.getYForLine(this.line + -3);\n      this.applyStyle(ctx);\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.text, x, y);\n\n      const height = ctx.measureText(this.text).height;\n\n      // Write superscript\n      if (this.superscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);\n      }\n\n      // Write subscript\n      if (this.subscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);\n      }\n\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport enum VoltaType {\n  NONE = 1,\n  BEGIN = 2,\n  MID = 3,\n  END = 4,\n  BEGIN_END = 5,\n}\n\nexport class Volta extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'Volta';\n  }\n\n  static get type(): typeof VoltaType {\n    return VoltaType;\n  }\n\n  protected volta: number;\n  protected number: string;\n\n  protected font: FontInfo;\n  protected y_shift: number;\n\n  constructor(type: number, number: string, x: number, y_shift: number) {\n    super();\n    this.volta = type;\n    this.x = x;\n    this.y_shift = y_shift;\n    this.number = number;\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    let width = stave.getWidth() - x; // don't include x (offset) for width\n    const top_y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    const vert_height = 1.5 * stave.getSpacingBetweenLines();\n    switch (this.volta) {\n      case VoltaType.BEGIN:\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        break;\n      case VoltaType.END:\n        width -= 5;\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      case VoltaType.BEGIN_END:\n        width -= 3;\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      default:\n        break;\n    }\n    // If the beginning of a volta, draw measure number\n    if (this.volta === VoltaType.BEGIN || this.volta === VoltaType.BEGIN_END) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n      ctx.restore();\n    }\n\n    ctx.fillRect(this.x + x, top_y, width, 1);\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\n\nexport interface BendPhrase {\n  x?: number;\n  type: number;\n  text: string;\n  width?: number;\n  draw_width?: number;\n}\n\nexport interface BendRenderOptions {\n  line_width: number;\n  release_width: number;\n  bend_width: number;\n  line_style: string;\n}\n\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n  static get CATEGORY(): string {\n    return 'Bend';\n  }\n\n  static get UP(): number {\n    return 0;\n  }\n\n  static get DOWN(): number {\n    return 1;\n  }\n\n  // Arrange bends in `ModifierContext`\n  static format(bends: Bend[], state: ModifierContextState): boolean {\n    if (!bends || bends.length === 0) return false;\n\n    let last_width = 0;\n    // Bends are always on top.\n    const text_line = state.top_text_line;\n\n    // Format Bends\n    for (let i = 0; i < bends.length; ++i) {\n      const bend = bends[i];\n      bend.setXShift(last_width);\n      last_width = bend.getWidth();\n      bend.setTextLine(text_line);\n    }\n\n    state.right_shift += last_width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  protected text: string;\n  protected release: boolean;\n  protected phrase: BendPhrase[];\n  protected font: string;\n  protected render_options: BendRenderOptions;\n\n  /**\n   * Example of a phrase:\n   * ```\n   *    [{\n   *     type: UP,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: DOWN,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: UP,\n   *     text: \"half\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: UP,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: DOWN,\n   *     text: \"1 1/2\"\n   *     width: 8;\n   *   }]\n   * ```\n   * @param text text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n   * @param release if true, render a release. (DEPRECATED)\n   * @param phrase if set, ignore \"text\" and \"release\", and use the more sophisticated phrase specified\n   */\n  constructor(text: string, release: boolean = false, phrase?: BendPhrase[]) {\n    super();\n\n    this.text = text;\n    this.x_shift = 0;\n    this.release = release;\n    this.font = '10pt Arial';\n    this.render_options = {\n      line_width: 1.5,\n      line_style: '#777777',\n      bend_width: 8,\n      release_width: 8,\n    };\n\n    if (phrase) {\n      this.phrase = phrase;\n    } else {\n      // Backward compatibility\n      this.phrase = [{ type: Bend.UP, text: this.text }];\n      if (this.release) this.phrase.push({ type: Bend.DOWN, text: '' });\n    }\n\n    this.updateWidth();\n  }\n\n  /** Set horizontal shift in pixels. */\n  setXShift(value: number): this {\n    this.x_shift = value;\n    this.updateWidth();\n    return this;\n  }\n\n  /** Set text's font. */\n  setFont(font: string): this {\n    this.font = font;\n    return this;\n  }\n\n  /** Get text provided in the constructor. */\n  getText(): string {\n    return this.text;\n  }\n\n  /** Recalculate width. */\n  protected updateWidth(): this {\n    // eslint-disable-next-line\n    const that = this;\n\n    function measure_text(text: string) {\n      let text_width;\n      const ctxThat = that.getContext();\n      if (ctxThat) {\n        text_width = ctxThat.measureText(text).width;\n      } else {\n        text_width = Flow.textWidth(text);\n      }\n\n      return text_width;\n    }\n\n    let total_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (bend.width != undefined) {\n        total_width += bend.width;\n      } else {\n        const additional_width =\n          bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\n\n        bend.width = Math.max(additional_width, measure_text(bend.text)) + 3;\n        bend.draw_width = bend.width / 2;\n        total_width += bend.width;\n      }\n    }\n\n    this.setWidth(total_width + this.x_shift);\n    return this;\n  }\n\n  /** Draw the bend on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n    start.x += 3;\n    start.y += 0.5;\n    const x_shift = this.x_shift;\n\n    const stave = note.checkStave();\n    const bend_height = stave.getYForTopText(this.text_line) + 3;\n    const annotation_y = stave.getYForTopText(this.text_line) - 1;\n    // eslint-disable-next-line\n    const that = this;\n\n    function renderBend(x: number, y: number, width: number, height: number) {\n      const cp_x = x + width;\n      const cp_y = y;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, y);\n      ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderRelease(x: number, y: number, width: number, height: number) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, height);\n      ctx.quadraticCurveTo(x + width, height, x + width, y);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderArrowHead(x: number, y: number, direction?: number) {\n      const width = 4;\n      const dir = direction || 1;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x - width, y + width * dir);\n      ctx.lineTo(x + width, y + width * dir);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    function renderText(x: number, text: string) {\n      ctx.save();\n      ctx.setRawFont(that.font);\n      const render_x = x - ctx.measureText(text).width / 2;\n      ctx.fillText(text, render_x, annotation_y);\n      ctx.restore();\n    }\n\n    let last_bend = undefined;\n    let last_bend_draw_width = 0;\n    let last_drawn_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (!bend.draw_width) bend.draw_width = 0;\n      if (i === 0) bend.draw_width += x_shift;\n\n      last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);\n      if (bend.type === Bend.UP) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderArrowHead(start.x, bend_height);\n        }\n\n        renderBend(start.x, start.y, last_drawn_width, bend_height);\n      }\n\n      if (bend.type === Bend.DOWN) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend && last_bend.type === Bend.DOWN) {\n          renderArrowHead(start.x, start.y, -1);\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (!last_bend) {\n          last_drawn_width = bend.draw_width;\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n      }\n\n      renderText(start.x + last_drawn_width, bend.text);\n      last_bend = bend;\n      last_bend_draw_width = bend.draw_width;\n      last_bend.x = start.x;\n\n      start.x += last_drawn_width;\n    }\n\n    if (!last_bend || last_bend.x == undefined) {\n      throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n    }\n\n    // Final arrowhead and text\n    if (last_bend.type === Bend.UP) {\n      renderArrowHead(last_bend.x + last_drawn_width, bend_height);\n    } else if (last_bend.type === Bend.DOWN) {\n      renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Modifier } from './modifier';\nimport { Bend } from './bend';\nimport { RenderContext } from './types/common';\nimport { ModifierContext, ModifierContextState } from './modifiercontext';\n\nexport interface VibratoRenderOptions {\n  wave_height: number;\n  wave_girth: number;\n  vibrato_width: number;\n  harsh: boolean;\n  wave_width: number;\n}\n\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n  static get CATEGORY(): string {\n    return 'Vibrato';\n  }\n\n  protected render_options: VibratoRenderOptions;\n\n  /** Arrange vibratos inside a `ModifierContext`. */\n  static format(vibratos: Vibrato[], state: ModifierContextState, context: ModifierContext): boolean {\n    if (!vibratos || vibratos.length === 0) return false;\n\n    // Vibratos are always on top.\n    let text_line = state.top_text_line;\n    let width = 0;\n    let shift = state.right_shift - 7;\n\n    // If there's a bend, drop the text line\n    const bends = context.getMembers(Bend.CATEGORY) as Bend[];\n    if (bends && bends.length > 0) {\n      text_line--;\n    }\n\n    // Format Vibratos\n    for (let i = 0; i < vibratos.length; ++i) {\n      const vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  constructor() {\n    super();\n\n    this.position = Modifier.Position.RIGHT;\n    this.render_options = {\n      harsh: false,\n      vibrato_width: 20,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n    };\n\n    this.setVibratoWidth(this.render_options.vibrato_width);\n  }\n\n  /** Set harsh vibrato. */\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  /** Set vibrato width in pixels. */\n  setVibratoWidth(width: number): this {\n    this.render_options.vibrato_width = width;\n    this.setWidth(width);\n    return this;\n  }\n\n  /** Draw the vibrato on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n\n    const vx = start.x + this.x_shift;\n    const vy = note.getYForTopText(this.text_line) + 2;\n\n    Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n  }\n\n  /**\n   * Static rendering method that can be called from\n   * other classes (e.g. VibratoBracket).\n   */\n  static renderVibrato(ctx: RenderContext, x: number, y: number, opts: VibratoRenderOptions): void {\n    const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n    const num_waves = vibrato_width / wave_width;\n\n    ctx.beginPath();\n\n    let i;\n    if (harsh) {\n      ctx.moveTo(x, y + wave_girth + 1);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x + wave_width, y - wave_height / 2);\n        x += wave_width;\n        ctx.lineTo(x + wave_width, y + wave_height / 2);\n        x += wave_width;\n      }\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n        ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n      }\n      ctx.fill();\n    } else {\n      ctx.moveTo(x, y + wave_girth);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n        x += wave_width;\n        ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n        x += wave_width;\n      }\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n        ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n      }\n      ctx.fill();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.)\n\nimport { RuntimeError, log } from './util';\nimport { StaveNote } from './stavenote';\nimport { GlyphNote } from './glyphnote';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Accidental } from './accidental';\nimport { NoteSubGroup } from './notesubgroup';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Stroke } from './strokes';\nimport { StringNumber } from './stringnumber';\nimport { Articulation } from './articulation';\nimport { Ornament } from './ornament';\nimport { Annotation } from './annotation';\nimport { ChordSymbol } from './chordsymbol';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato';\nimport { Modifier } from './modifier';\nimport { TabNote } from './tabnote';\nimport { Note } from './note';\nimport { Tickable } from './tickable';\n\nexport interface ModifierContextState {\n  right_shift: number;\n  left_shift: number;\n  text_line: number;\n  top_text_line: number;\n}\n\nexport interface ModifierContextMetrics {\n  width: number;\n  spacing: number;\n}\n\nexport type ModifierContextMember = Tickable | Modifier | StaveNote | TabNote;\n\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (ModifierContext.DEBUG) log('Vex.Flow.ModifierContext', args);\n}\n\nexport class ModifierContext {\n  static DEBUG: boolean;\n\n  state: ModifierContextState;\n\n  protected spacing: number;\n  protected members: Record<string, ModifierContextMember[]>;\n\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected width: number;\n  protected formatted?: boolean;\n  // eslint-disable-next-line\n  protected PREFORMAT: any[];\n  // eslint-disable-next-line\n  protected POSTFORMAT: any[];\n\n  constructor() {\n    // Current members\n    this.members = {};\n\n    // Formatting data.\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0,\n    };\n\n    // Add new members to this array. The ordering is significant -- lower\n    // members are formatted and rendered before higher ones.\n    this.PREFORMAT = [\n      StaveNote,\n      Dot,\n      FretHandFinger,\n      Accidental,\n      Stroke,\n      GraceNoteGroup,\n      NoteSubGroup,\n      StringNumber,\n      Articulation,\n      Ornament,\n      Annotation,\n      ChordSymbol,\n      Bend,\n      Vibrato,\n    ];\n\n    // If post-formatting is required for an element, add it to this array.\n    this.POSTFORMAT = [StaveNote];\n  }\n\n  addModifier(member: ModifierContextMember): this {\n    L('addModifier is deprecated, use addMember instead.');\n    return this.addMember(member);\n  }\n\n  /**\n   * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n   * Here we add a new member to this.members, and create a new array if needed.\n   * @param member\n   * @returns this\n   */\n  addMember(member: ModifierContextMember): this {\n    const category = member.getCategory();\n    if (!this.members[category]) {\n      this.members[category] = [];\n    }\n    this.members[category].push(member);\n    member.setModifierContext(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  /**\n   * @deprecated\n   */\n  getModifiers(category: string): ModifierContextMember[] {\n    L('getModifiers is deprecated, use getMembers instead.');\n    return this.getMembers(category);\n  }\n\n  getMembers(category: string): ModifierContextMember[] {\n    return this.members[category];\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getLeftShift(): number {\n    return this.state.left_shift;\n  }\n\n  getRightShift(): number {\n    return this.state.right_shift;\n  }\n\n  getState(): ModifierContextState {\n    return this.state;\n  }\n\n  getMetrics(): ModifierContextMetrics {\n    if (!this.formatted) {\n      throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n    }\n\n    return {\n      width: this.state.left_shift + this.state.right_shift + this.spacing,\n      spacing: this.spacing,\n    };\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n    this.PREFORMAT.forEach((member) => {\n      L('Preformatting ModifierContext: ', member.CATEGORY);\n      member.format(this.getMembers(member.CATEGORY), this.state, this);\n    });\n\n    // Update width of this member context\n    this.width = this.state.left_shift + this.state.right_shift;\n    this.preFormatted = true;\n  }\n\n  postFormat(): void {\n    if (this.postFormatted) return;\n    this.POSTFORMAT.forEach((member) => {\n      L('Postformatting ModifierContext: ', member.CATEGORY);\n      member.postFormat(this.getMembers(member.CATEGORY) as Note[]);\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n// MIT License\n\nimport { log, defined } from './util';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\n\nexport interface ClefType {\n  point: number;\n  code: string;\n  line?: number;\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Clef.DEBUG) log('Vex.Flow.Clef', args);\n}\n\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n  /** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'Clef';\n  }\n\n  annotation?: {\n    code: string;\n    line: number;\n    x_shift: number;\n    point: number;\n  };\n\n  /**\n   * The attribute `clef` must be a key from\n   * `Clef.types`\n   */\n  clef: ClefType = Clef.types['treble'];\n\n  protected glyph?: Glyph;\n  protected attachment?: Glyph;\n  protected size?: string;\n  protected type?: string;\n\n  /**\n   * Every clef name is associated with a glyph code from the font file\n   * and a default stave line number.\n   */\n  static get types(): Record<string, ClefType> {\n    return {\n      treble: {\n        code: 'gClef',\n        line: 3,\n        point: 0,\n      },\n      bass: {\n        code: 'fClef',\n        line: 1,\n        point: 0,\n      },\n      alto: {\n        code: 'cClef',\n        line: 2,\n        point: 0,\n      },\n      tenor: {\n        code: 'cClef',\n        line: 1,\n        point: 0,\n      },\n      percussion: {\n        code: 'restMaxima',\n        line: 2,\n        point: 0,\n      },\n      soprano: {\n        code: 'cClef',\n        line: 4,\n        point: 0,\n      },\n      'mezzo-soprano': {\n        code: 'cClef',\n        line: 3,\n        point: 0,\n      },\n      'baritone-c': {\n        code: 'cClef',\n        line: 0,\n        point: 0,\n      },\n      'baritone-f': {\n        code: 'fClef',\n        line: 2,\n        point: 0,\n      },\n      subbass: {\n        code: 'fClef',\n        line: 0,\n        point: 0,\n      },\n      french: {\n        code: 'gClef',\n        line: 4,\n        point: 0,\n      },\n      tab: {\n        code: '6stringTabClef',\n        point: 0,\n      },\n    };\n  }\n\n  /** Create a new clef. */\n  constructor(type: string, size?: string, annotation?: string) {\n    super();\n\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(this.musicFont.lookupMetric(`clef.${this.size}.width`));\n    L('Creating clef:', type);\n  }\n\n  /** Set clef type, size and annotation. */\n  setType(type: string, size?: string, annotation?: string): this {\n    this.type = type;\n    this.clef = Clef.types[type];\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n    this.clef.point = this.musicFont.lookupMetric(`clef.${this.size}.point`, 0);\n    this.glyph = new Glyph(this.clef.code, this.clef.point, {\n      category: `clef.${this.clef.code}.${this.size}`,\n    });\n\n    // If an annotation, such as 8va, is specified, add it to the Clef object.\n    if (annotation !== undefined) {\n      const code = this.musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\n      const point = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\n      const line = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\n      const x_shift = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\n\n      this.annotation = { code, point, line, x_shift };\n\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n\n    return this;\n  }\n\n  /** Get clef width. */\n  getWidth(): number {\n    if (this.type === 'tab') {\n      defined(this.stave, 'ClefError', \"Can't get width without stave.\");\n    }\n    return this.width;\n  }\n\n  /** Set associated stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    if (this.type === 'tab') {\n      const glyph = defined(this.glyph, 'ClefError', \"Can't set stave without glyph.\");\n\n      const numLines = this.stave.getNumLines();\n      const point = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\n      const shiftY = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\n      glyph.setPoint(point);\n      glyph.setYShift(shiftY);\n    }\n    return this;\n  }\n\n  /** Render clef. */\n  draw(): void {\n    const glyph = defined(this.glyph, 'ClefError', \"Can't draw clef without glyph.\");\n    const stave = this.checkStave();\n    this.setRendered();\n\n    glyph.setStave(stave);\n    glyph.setContext(stave.getContext());\n    if (this.clef.line !== undefined) {\n      this.placeGlyphOnLine(glyph, stave, this.clef.line);\n    }\n    glyph.renderToStave(this.x);\n\n    if (this.annotation !== undefined && this.attachment !== undefined) {\n      this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\n      this.attachment.setStave(stave);\n      this.attachment.setContext(stave.getContext());\n      this.attachment.renderToStave(this.x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\n\nimport { defined } from './util';\nimport { Flow } from './flow';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\n\nexport class KeySignature extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'KeySignature';\n  }\n\n  protected glyphFontScale: number;\n  protected glyphs: Glyph[];\n  protected xPositions: number[];\n  protected paddingForced: boolean;\n  protected formatted?: boolean;\n  protected cancelKeySpec?: string;\n  protected accList: { type: string; line: number }[] = [];\n  protected keySpec?: string;\n  protected alterKeySpec?: string[];\n\n  // Space between natural and following accidental depending\n  // on vertical position\n  static accidentalSpacing: Record<string, { above: number; below: number }> = {\n    '#': {\n      above: 6,\n      below: 4,\n    },\n    b: {\n      above: 4,\n      below: 7,\n    },\n    n: {\n      above: 4,\n      below: 1,\n    },\n    '##': {\n      above: 6,\n      below: 4,\n    },\n    bb: {\n      above: 4,\n      below: 7,\n    },\n    db: {\n      above: 4,\n      below: 7,\n    },\n    d: {\n      above: 4,\n      below: 7,\n    },\n    bbs: {\n      above: 4,\n      below: 7,\n    },\n    '++': {\n      above: 6,\n      below: 4,\n    },\n    '+': {\n      above: 6,\n      below: 4,\n    },\n    '+-': {\n      above: 6,\n      below: 4,\n    },\n    '++-': {\n      above: 6,\n      below: 4,\n    },\n    bs: {\n      above: 4,\n      below: 10,\n    },\n    bss: {\n      above: 4,\n      below: 10,\n    },\n  };\n\n  // Create a new Key Signature based on a `key_spec`\n  constructor(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string[]) {\n    super();\n\n    this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n    this.glyphs = [];\n    this.xPositions = []; // relative to this.x\n    this.paddingForced = false;\n  }\n\n  // Add an accidental glyph to the `KeySignature` instance which represents\n  // the provided `acc`. If `nextAcc` is also provided, the appropriate\n  // spacing will be included in the glyph's position\n  convertToGlyph(acc: { type: string; line: number }, nextAcc: { type: string; line: number }): void {\n    const accGlyphData = Flow.accidentalCodes(acc.type);\n    const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n\n    // Determine spacing between current accidental and the next accidental\n    let extraWidth = 1;\n    if (acc.type === 'n' && nextAcc) {\n      const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n      if (spacing) {\n        const isAbove = nextAcc.line >= acc.line;\n        extraWidth = isAbove ? spacing.above : spacing.below;\n      }\n    }\n\n    // Place the glyph on the stave\n    this.placeGlyphOnLine(glyph, this.checkStave(), acc.line);\n    this.glyphs.push(glyph);\n\n    const xPosition = this.xPositions[this.xPositions.length - 1];\n    const glyphWidth = glyph.getMetrics().width + extraWidth;\n    // Store the next accidental's x position\n    this.xPositions.push(xPosition + glyphWidth);\n    // Expand size of key signature\n    this.width += glyphWidth;\n  }\n\n  // Cancel out a key signature provided in the `spec` parameter. This will\n  // place appropriate natural accidentals before the key signature.\n  cancelKey(spec: string): this {\n    this.formatted = false;\n    this.cancelKeySpec = spec;\n\n    return this;\n  }\n\n  convertToCancelAccList(spec: string): { type: string; accList: { type: string; line: number }[] } | undefined {\n    // Get the accidental list for the cancelled key signature\n    const cancel_accList = Flow.keySignature(spec);\n\n    // If the cancelled key has a different accidental type, ie: # vs b\n    const different_types =\n      this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\n\n    // Determine how many naturals needed to add\n    const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\n\n    // Return if no naturals needed\n    if (naturals < 1) return undefined;\n\n    // Get the line position for each natural\n    const cancelled: { type: string; line: number }[] = [];\n    for (let i = 0; i < naturals; i++) {\n      let index = i;\n      if (!different_types) {\n        index = cancel_accList.length - naturals + i;\n      }\n\n      const acc = cancel_accList[index];\n      cancelled.push({ type: 'n', line: acc.line });\n    }\n\n    // Combine naturals with main accidental list for the key signature\n    this.accList = cancelled.concat(this.accList);\n\n    return {\n      accList: cancelled,\n      type: cancel_accList[0].type,\n    };\n  }\n\n  // Deprecated\n  addToStave(stave: Stave): this {\n    this.paddingForced = true;\n    stave.addModifier(this);\n\n    return this;\n  }\n\n  // Apply the accidental staff line placement based on the `clef` and\n  // the  accidental `type` for the key signature ('# or 'b').\n  convertAccLines(clef: string, type?: string, accList = this.accList): void {\n    let offset = 0.0; // if clef === \"treble\"\n    let customLines; // when clef doesn't follow treble key sig shape\n\n    switch (clef) {\n      // Treble & Subbass both have offsets of 0, so are not included.\n      case 'soprano':\n        if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n        else offset = -1;\n        break;\n      case 'mezzo-soprano':\n        if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n        else offset = 1.5;\n        break;\n      case 'alto':\n        offset = 0.5;\n        break;\n      case 'tenor':\n        if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n        else offset = -0.5;\n        break;\n      case 'baritone-f':\n      case 'baritone-c':\n        if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n        else offset = 2;\n        break;\n      case 'bass':\n      case 'french':\n        offset = 1;\n        break;\n      default:\n        break;\n    }\n\n    // If there's a special case, assign those lines/spaces:\n    let i;\n    if (typeof customLines !== 'undefined') {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line = customLines[i];\n      }\n    } else if (offset !== 0) {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line += offset;\n      }\n    }\n  }\n\n  getPadding(index: number): number {\n    if (!this.formatted) this.format();\n\n    return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n  }\n\n  getWidth(): number {\n    if (!this.formatted) this.format();\n\n    return this.width;\n  }\n\n  setKeySig(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string[]): this {\n    this.formatted = false;\n    this.keySpec = keySpec;\n    this.cancelKeySpec = cancelKeySpec;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  // Alter the accidentals of a key spec one by one.\n  // Each alteration is a new accidental that replaces the\n  // original accidental (or the canceled one).\n  alterKey(alterKeySpec: string[]): this {\n    this.formatted = false;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  convertToAlterAccList(alterKeySpec: string[]): void {\n    const max = Math.min(alterKeySpec.length, this.accList.length);\n    for (let i = 0; i < max; ++i) {\n      if (alterKeySpec[i]) {\n        this.accList[i].type = alterKeySpec[i];\n      }\n    }\n  }\n\n  format(): void {\n    const stave = this.checkStave();\n\n    this.width = 0;\n    this.glyphs = [];\n    this.xPositions = [0]; // initialize with initial x position\n    this.accList = Flow.keySignature(defined(this.keySpec));\n    const accList = this.accList;\n    const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n    let cancelAccList;\n    if (this.cancelKeySpec) {\n      cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n    }\n    if (this.alterKeySpec) {\n      this.convertToAlterAccList(this.alterKeySpec);\n    }\n\n    if (this.accList.length > 0) {\n      const clef =\n        (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n      if (cancelAccList) {\n        this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n      }\n      this.convertAccLines(clef, firstAccidentalType, accList);\n      for (let i = 0; i < this.accList.length; ++i) {\n        this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n      }\n    }\n\n    this.formatted = true;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n\n    if (!this.formatted) this.format();\n    this.setRendered();\n\n    for (let i = 0; i < this.glyphs.length; i++) {\n      const glyph = this.glyphs[i];\n      const x = this.x + this.xPositions[i];\n      glyph.setStave(stave);\n      glyph.setContext(stave.checkContext());\n      glyph.renderToStave(x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { FontInfo } from './types/common';\nimport { Stave } from './stave';\n\nexport class Repetition extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'Repetition';\n  }\n\n  static readonly type = {\n    NONE: 1, // no coda or segno\n    CODA_LEFT: 2, // coda at beginning of stave\n    CODA_RIGHT: 3, // coda at end of stave\n    SEGNO_LEFT: 4, // segno at beginning of stave\n    SEGNO_RIGHT: 5, // segno at end of stave\n    DC: 6, // D.C. at end of stave\n    DC_AL_CODA: 7, // D.C. al coda at end of stave\n    DC_AL_FINE: 8, // D.C. al Fine end of stave\n    DS: 9, // D.S. at end of stave\n    DS_AL_CODA: 10, // D.S. al coda at end of stave\n    DS_AL_FINE: 11, // D.S. al Fine at end of stave\n    FINE: 12, // Fine at end of stave\n  };\n\n  protected symbol_type: number;\n\n  protected x_shift: number;\n  protected y_shift: number;\n  protected font: FontInfo;\n\n  constructor(type: number, x: number, y_shift: number) {\n    super();\n\n    this.symbol_type = type;\n    this.x = x;\n    this.x_shift = 0;\n    this.y_shift = y_shift;\n    this.font = {\n      family: 'times',\n      size: 12,\n      weight: 'bold',\n      style: 'italic',\n    };\n  }\n\n  setShiftX(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    this.setRendered();\n\n    switch (this.symbol_type) {\n      case Repetition.type.CODA_RIGHT:\n        this.drawCodaFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.CODA_LEFT:\n        this.drawSymbolText(stave, x, 'Coda', true);\n        break;\n      case Repetition.type.SEGNO_LEFT:\n        this.drawSignoFixed(stave, x);\n        break;\n      case Repetition.type.SEGNO_RIGHT:\n        this.drawSignoFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.DC:\n        this.drawSymbolText(stave, x, 'D.C.', false);\n        break;\n      case Repetition.type.DC_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.C. al', true);\n        break;\n      case Repetition.type.DC_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n        break;\n      case Repetition.type.DS:\n        this.drawSymbolText(stave, x, 'D.S.', false);\n        break;\n      case Repetition.type.DS_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.S. al', true);\n        break;\n      case Repetition.type.DS_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n        break;\n      case Repetition.type.FINE:\n        this.drawSymbolText(stave, x, 'Fine', false);\n        break;\n      default:\n        break;\n    }\n\n    return this;\n  }\n\n  drawCodaFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 40, 'coda', { category: 'coda' });\n    return this;\n  }\n\n  drawSignoFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 30, 'segno', { category: 'segno' });\n    return this;\n  }\n\n  drawSymbolText(stave: Stave, x: number, text: string, draw_coda: boolean): this {\n    const ctx = stave.checkContext();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Default to right symbol\n    let text_x = 0 + this.x_shift;\n    let symbol_x = x + this.x_shift;\n    if (this.symbol_type === Repetition.type.CODA_LEFT) {\n      // Offset Coda text to right of stave beginning\n      text_x = this.x + stave.getVerticalBarWidth();\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    } else if (this.symbol_type === Repetition.type.DS) {\n      const modifierWidth = stave.getNoteStartX() - this.x;\n      text_x = this.x + x + this.x_shift + stave.getWidth() - 5 - modifierWidth - ctx.measureText(text).width;\n      // TODO this is weird. setting the x position should probably be refactored, parameters aren't clear here.\n    } else {\n      // Offset Signo text to left stave end\n      symbol_x = this.x + x + stave.getWidth() - 5 + this.x_shift;\n      text_x = symbol_x - +ctx.measureText(text).width - 12;\n    }\n\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    if (draw_coda) {\n      Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\n    }\n\n    ctx.fillText(text, text_x, y + 5);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport class StaveSection extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'StaveSection';\n  }\n\n  protected section: string;\n  protected shift_x: number;\n  protected shift_y: number;\n  protected font: FontInfo;\n\n  constructor(section: string, x: number, shift_y: number) {\n    super();\n\n    this.setWidth(16);\n    this.section = section;\n    this.x = x;\n    this.shift_x = 0;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'sans-serif',\n      size: 12,\n      weight: 'bold',\n    };\n  }\n\n  setStaveSection(section: string): this {\n    this.section = section;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.section).width;\n    let width = text_width + 6; // add left & right padding\n    if (width < 18) width = 18;\n    const height = 20;\n    //  Seems to be a good default y\n    const y = stave.getYForTopText(3) + this.shift_y;\n    let x = this.x + shift_x;\n    ctx.beginPath();\n    ctx.setLineWidth(2);\n    ctx.rect(x, y, width, height);\n    ctx.stroke();\n    x += (width - text_width) / 2;\n    ctx.fillText('' + this.section, x, y + 16);\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Radosaw Eichler 2012\n\nimport { Flow } from './flow';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { FontInfo } from 'types/common';\n\nexport interface StaveTempoOptions {\n  bpm?: number;\n  duration?: string;\n  dots?: number;\n  name?: string;\n}\n\nexport class StaveTempo extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'StaveTempo';\n  }\n\n  protected font: FontInfo;\n  /** Font size for note. */\n  protected render_options = { glyph_font_scale: 30 };\n  protected tempo: StaveTempoOptions;\n  protected shift_x: number;\n  protected shift_y: number;\n\n  constructor(tempo: StaveTempoOptions, x: number, shift_y: number) {\n    super();\n\n    this.tempo = tempo;\n    this.position = StaveModifierPosition.ABOVE;\n    this.x = x;\n    this.shift_x = 10;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'times',\n      size: 14,\n      weight: 'bold',\n    };\n  }\n\n  setTempo(tempo: StaveTempoOptions): this {\n    this.tempo = tempo;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    const options = this.render_options;\n    // FIXME: What does the '38' mean? Why 38? Is that supposed to\n    // be the default font size for standard notation?\n    const scale = options.glyph_font_scale / 38;\n    const name = this.tempo.name;\n    const duration = this.tempo.duration;\n    const dots = this.tempo.dots || 0;\n    const bpm = this.tempo.bpm;\n    const font = this.font;\n    let x = this.x + this.shift_x + shift_x;\n    const y = stave.getYForTopText(1) + this.shift_y;\n\n    ctx.save();\n\n    if (name) {\n      ctx.setFont(font.family, font.size, font.weight);\n      ctx.fillText(name, x, y);\n      x += ctx.measureText(name).width;\n    }\n\n    if (duration && bpm) {\n      ctx.setFont(font.family, font.size, 'normal');\n\n      if (name) {\n        x += ctx.measureText(' ').width;\n        ctx.fillText('(', x, y);\n        x += ctx.measureText('(').width;\n      }\n\n      const code = Flow.getGlyphProps(duration);\n\n      x += 3 * scale;\n      Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n      x += code.getWidth() * scale;\n\n      // Draw stem and flags\n      if (code.stem) {\n        let stem_height = 30;\n\n        if (code.beam_count) stem_height += 3 * (code.beam_count - 1);\n\n        stem_height *= scale;\n\n        const y_top = y - stem_height;\n        ctx.fillRect(x - scale, y_top, scale, stem_height);\n\n        if (code.flag) {\n          Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem, {\n            category: 'flag.staveTempo',\n          });\n\n          if (!dots) x += 6 * scale;\n        }\n      }\n\n      // Draw dot\n      for (let i = 0; i < dots; i++) {\n        x += 6 * scale;\n        ctx.beginPath();\n        ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n        ctx.fill();\n      }\n\n      ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n    }\n\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { RuntimeError } from './util';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Justification, TextNote } from './textnote';\nimport { Stave } from './stave';\nimport { FontInfo } from 'types/common';\n\nexport class StaveText extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'StaveText';\n  }\n\n  protected text: string;\n  protected shift_x?: number;\n  protected shift_y?: number;\n  protected options: {\n    shift_x: number;\n    shift_y: number;\n    justification: number;\n  };\n  protected font: FontInfo;\n\n  constructor(\n    text: string,\n    position: number,\n    options: { shift_x?: number; shift_y?: number; justification?: number } = {}\n  ) {\n    super();\n\n    this.setWidth(16);\n    this.text = text;\n    this.position = position;\n    this.options = {\n      shift_x: 0,\n      shift_y: 0,\n      justification: TextNote.Justification.CENTER,\n      ...options,\n    };\n\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n  }\n\n  setStaveText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  draw(stave: Stave): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.text).width;\n\n    let x;\n    let y;\n    switch (this.position) {\n      case StaveModifierPosition.LEFT:\n      case StaveModifierPosition.RIGHT:\n        y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n        if (this.position === StaveModifierPosition.LEFT) {\n          x = stave.getX() - text_width - 24 + this.options.shift_x;\n        } else {\n          x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n        }\n        break;\n      case StaveModifierPosition.ABOVE:\n      case StaveModifierPosition.BELOW:\n        x = stave.getX() + this.options.shift_x;\n        if (this.options.justification === Justification.CENTER) {\n          x += stave.getWidth() / 2 - text_width / 2;\n        } else if (this.options.justification === Justification.RIGHT) {\n          x += stave.getWidth() - text_width;\n        }\n\n        if (this.position === StaveModifierPosition.ABOVE) {\n          y = stave.getYForTopText(2) + this.options.shift_y;\n        } else {\n          y = stave.getYForBottomText(2) + this.options.shift_y;\n        }\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n    }\n\n    ctx.fillText('' + this.text, x, y + 4);\n    ctx.restore();\n    return this;\n  }\n}\n","import { defined } from './util';\nimport { Glyph, GlyphMetrics } from './glyph';\nimport { TimeSignature } from './timesignature';\n\nexport class TimeSignatureGlyph extends Glyph {\n  timeSignature: TimeSignature;\n  topStartX: number;\n  botStartX: number;\n  width: number;\n  xMin: number;\n\n  constructor(\n    timeSignature: TimeSignature,\n    topDigits: string[],\n    botDigits: string[],\n    code: string,\n    point: number,\n    options?: { category: string }\n  ) {\n    super(code, point, options);\n    this.timeSignature = timeSignature;\n    this.topGlyphs = [];\n    this.botGlyphs = [];\n\n    let topWidth = 0;\n    for (let i = 0; i < topDigits.length; ++i) {\n      const num = topDigits[i];\n      const topGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.topGlyphs.push(topGlyph);\n      topWidth += topGlyph.getMetrics().width ?? 0;\n    }\n\n    let botWidth = 0;\n    for (let i = 0; i < botDigits.length; ++i) {\n      const num = botDigits[i];\n      const botGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.botGlyphs.push(botGlyph);\n      botWidth += defined(botGlyph.getMetrics().width);\n    }\n\n    this.width = Math.max(topWidth, botWidth);\n    this.xMin = this.getMetrics().x_min;\n    this.topStartX = (this.width - topWidth) / 2.0;\n    this.botStartX = (this.width - botWidth) / 2.0;\n    this.reset();\n  }\n\n  getMetrics(): GlyphMetrics {\n    return {\n      x_min: this.xMin,\n      x_max: this.xMin + this.width,\n      width: this.width,\n    } as GlyphMetrics;\n  }\n\n  renderToStave(x: number): void {\n    const stave = this.checkStave();\n\n    let start_x = x + this.topStartX;\n    for (let i = 0; i < this.topGlyphs.length; ++i) {\n      const glyph = this.topGlyphs[i];\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + this.x_shift,\n        stave.getYForLine(this.timeSignature.topLine)\n      );\n      start_x += defined(glyph.getMetrics().width);\n    }\n\n    start_x = x + this.botStartX;\n    for (let i = 0; i < this.botGlyphs.length; ++i) {\n      const glyph = this.botGlyphs[i];\n      this.timeSignature.placeGlyphOnLine(glyph, stave, 0);\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + glyph.getMetrics().x_shift,\n        stave.getYForLine(this.timeSignature.bottomLine)\n      );\n      start_x += defined(glyph.getMetrics().width);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\n\nimport { RuntimeError, defined } from './util';\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { TimeSignatureGlyph } from './timesigglyph';\n\nexport interface TimeSignatureInfo {\n  glyph: Glyph;\n  line?: number;\n  num: boolean;\n}\n\nconst assertIsValidFraction = (timeSpec: string) => {\n  const numbers = timeSpec.split('/').filter((number) => number !== '');\n\n  if (numbers.length !== 2) {\n    throw new RuntimeError(\n      'BadTimeSignature',\n      `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`\n    );\n  }\n\n  numbers.forEach((number) => {\n    if (isNaN(Number(number))) {\n      throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain two valid numbers.`);\n    }\n  });\n};\n\nexport class TimeSignature extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'TimeSignature';\n  }\n\n  static get glyphs(): Record<string, { code: string; point: number; line: number }> {\n    return {\n      C: {\n        code: 'timeSigCommon',\n        point: 40,\n        line: 2,\n      },\n      'C|': {\n        code: 'timeSigCutCommon',\n        point: 40,\n        line: 2,\n      },\n    };\n  }\n\n  point: number;\n  bottomLine: number;\n  topLine: number;\n\n  protected info: TimeSignatureInfo;\n  protected validate_args: boolean;\n\n  constructor(timeSpec: string = '4/4', customPadding = 15, validate_args = true) {\n    super();\n    this.validate_args = validate_args;\n\n    const padding = customPadding;\n\n    this.point = this.musicFont.lookupMetric('digits.point');\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n    this.topLine = 2 + fontLineShift;\n    this.bottomLine = 4 + fontLineShift;\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.info = this.parseTimeSpec(timeSpec);\n    this.setWidth(defined(this.info.glyph.getMetrics().width));\n    this.setPadding(padding);\n  }\n\n  parseTimeSpec(timeSpec: string): TimeSignatureInfo {\n    if (timeSpec === 'C' || timeSpec === 'C|') {\n      const { line, code, point } = TimeSignature.glyphs[timeSpec];\n      return {\n        line,\n        num: false,\n        glyph: new Glyph(code, point),\n      };\n    }\n\n    if (this.validate_args) {\n      assertIsValidFraction(timeSpec);\n    }\n\n    const [topDigits, botDigits] = timeSpec.split('/').map((number) => number.split(''));\n\n    return {\n      num: true,\n      glyph: this.makeTimeSignatureGlyph(topDigits, botDigits),\n    };\n  }\n\n  makeTimeSignatureGlyph(topDigits: string[], botDigits: string[]): Glyph {\n    return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n  }\n\n  getInfo(): TimeSignatureInfo {\n    return this.info;\n  }\n\n  setTimeSig(timeSpec: string): this {\n    this.info = this.parseTimeSpec(timeSpec);\n    return this;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n\n    this.setRendered();\n    this.info.glyph.setStave(stave);\n    this.info.glyph.setContext(stave.getContext());\n    this.placeGlyphOnLine(this.info.glyph, stave, this.info.line);\n    this.info.glyph.renderToStave(this.x);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { isBarline } from 'typeguard';\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element, ElementStyle } from './element';\nimport { Flow } from './flow';\nimport { KeySignature } from './keysignature';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo, StaveTempoOptions } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { TimeSignature } from './timesignature';\nimport { Bounds, FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport interface StaveLineConfig {\n  visible?: boolean;\n}\n\nexport interface StaveOptions {\n  spacing?: number;\n  thickness?: number;\n  x_shift?: number;\n  y_shift?: number;\n  cps?: { x: number; y: number }[];\n  bottom_text_position?: number;\n  line_config?: StaveLineConfig[];\n  space_below_staff_ln?: number;\n  glyph_spacing_px?: number;\n  space_above_staff_ln?: number;\n  vertical_bar_width?: number;\n  fill_style?: string;\n  left_bar?: boolean;\n  right_bar?: boolean;\n  spacing_between_lines_px?: number;\n  top_text_position?: number;\n  num_lines?: number;\n}\n\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n  [Barline.CATEGORY]: 0,\n  [Clef.CATEGORY]: 1,\n  [KeySignature.CATEGORY]: 2,\n  [TimeSignature.CATEGORY]: 3,\n};\n\nconst SORT_ORDER_END_MODIFIERS = {\n  [TimeSignature.CATEGORY]: 0,\n  [KeySignature.CATEGORY]: 1,\n  [Barline.CATEGORY]: 2,\n  [Clef.CATEGORY]: 3,\n};\n\nexport class Stave extends Element {\n  static get CATEGORY(): string {\n    return 'Stave';\n  }\n\n  protected start_x: number;\n  protected clef: string;\n  protected options: Required<StaveOptions>;\n  protected endClef?: string;\n\n  protected x: number;\n  protected y: number;\n  protected width: number;\n  // Initialized by the constructor via this.resetLines().\n  protected height: number = 0;\n\n  protected formatted: boolean;\n  protected end_x: number;\n  protected measure: number;\n  protected font: FontInfo;\n  protected bounds: Bounds;\n  protected readonly modifiers: StaveModifier[];\n\n  protected defaultLedgerLineStyle: ElementStyle;\n\n  // This is the sum of the padding that normally goes on left + right of a stave during\n  // drawing.  Used to size staves correctly with content width\n  static get defaultPadding() {\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n  }\n  // Right padding, used by system if startX is already determined.\n  static get rightPadding(): number {\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('stave.endPaddingMax');\n  }\n\n  constructor(x: number, y: number, width: number, options?: StaveOptions) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.formatted = false;\n    this.start_x = x + 5;\n    this.end_x = x + width;\n    this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n    this.measure = 0;\n    this.clef = 'treble';\n    this.endClef = undefined;\n    this.font = {\n      family: 'sans-serif',\n      size: 8,\n      weight: '',\n    };\n    this.options = {\n      spacing: 2,\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      vertical_bar_width: 10, // Width around vertical bar end-marker\n      glyph_spacing_px: 10,\n      num_lines: 5,\n      fill_style: '#999999',\n      left_bar: true, // draw vertical bar on left\n      right_bar: true, // draw vertical bar on right\n      spacing_between_lines_px: Flow.STAVE_LINE_DISTANCE, // in pixels\n      space_above_staff_ln: 4, // in staff lines\n      space_below_staff_ln: 4, // in staff lines\n      top_text_position: 1, // in staff lines\n      bottom_text_position: 4, // in staff lines\n      line_config: [],\n      cps: [],\n      ...options,\n    };\n    this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n    this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n\n    this.resetLines();\n\n    // beg bar\n    this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\n    // end bar\n    this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\n  }\n\n  /** Set default style for ledger lines. */\n  setDefaultLedgerLineStyle(style: ElementStyle): void {\n    this.defaultLedgerLineStyle = style;\n  }\n\n  /** Get default style for ledger lines. */\n  getDefaultLedgerLineStyle(): ElementStyle {\n    return { ...this.getStyle(), ...this.defaultLedgerLineStyle };\n  }\n\n  space(spacing: number): number {\n    return this.options.spacing_between_lines_px * spacing;\n  }\n\n  resetLines(): void {\n    this.options.line_config = [];\n    for (let i = 0; i < this.options.num_lines; i++) {\n      this.options.line_config.push({ visible: true });\n    }\n    this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n    this.options.bottom_text_position = this.options.num_lines;\n  }\n\n  setNoteStartX(x: number): this {\n    if (!this.formatted) this.format();\n\n    this.start_x = x;\n    const begBarline = this.modifiers[0];\n    begBarline.setX(this.start_x - begBarline.getWidth());\n    return this;\n  }\n\n  getNoteStartX(): number {\n    if (!this.formatted) this.format();\n\n    return this.start_x;\n  }\n\n  getNoteEndX(): number {\n    if (!this.formatted) this.format();\n\n    return this.end_x;\n  }\n\n  getTieStartX(): number {\n    return this.start_x;\n  }\n\n  getTieEndX(): number {\n    return this.x + this.width;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  getNumLines(): number {\n    return this.options.num_lines;\n  }\n\n  setNumLines(n: number): this {\n    this.options.num_lines = n;\n    this.resetLines();\n    return this;\n  }\n\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  getY(): number {\n    return this.y;\n  }\n\n  getTopLineTopY(): number {\n    return this.getYForLine(0) - Flow.STAVE_LINE_THICKNESS / 2;\n  }\n\n  getBottomLineBottomY(): number {\n    return this.getYForLine(this.getNumLines() - 1) + Flow.STAVE_LINE_THICKNESS / 2;\n  }\n\n  setX(x: number): this {\n    const shift = x - this.x;\n    this.formatted = false;\n    this.x = x;\n    this.start_x += shift;\n    this.end_x += shift;\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const mod = this.modifiers[i];\n      mod.setX(mod.getX() + shift);\n    }\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.formatted = false;\n    this.width = width;\n    this.end_x = this.x + width;\n\n    // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n    // this.modifiers[1].setX(this.end_x);\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getStyle(): ElementStyle {\n    return {\n      fillStyle: this.options.fill_style,\n      strokeStyle: this.options.fill_style, // yes, this is correct for legacy compatibility\n      lineWidth: Flow.STAVE_LINE_THICKNESS,\n      ...this.style,\n    };\n  }\n\n  setMeasure(measure: number): this {\n    this.measure = measure;\n    return this;\n  }\n\n  /**\n   * Gets the pixels to shift from the beginning of the stave\n   * following the modifier at the provided index\n   * @param  {Number} index The index from which to determine the shift\n   * @return {Number}       The amount of pixels shifted\n   */\n  getModifierXShift(index: number = 0): number {\n    if (typeof index !== 'number') {\n      throw new RuntimeError('InvalidIndex', 'Must be of number type');\n    }\n\n    if (!this.formatted) this.format();\n\n    if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n      return 0;\n    }\n\n    // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n    if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n      return 0;\n    }\n\n    let start_x = this.start_x - this.x;\n    const begBarline = this.modifiers[0] as Barline;\n    if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n      start_x -= begBarline.getWidth();\n    }\n\n    return start_x;\n  }\n\n  // Coda & Segno Symbol functions\n  setRepetitionTypeLeft(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  setRepetitionTypeRight(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  // Volta functions\n  setVoltaType(type: number, number_t: string, y: number): this {\n    this.modifiers.push(new Volta(type, number_t, this.x, y));\n    return this;\n  }\n\n  // Section functions\n  setSection(section: string, y: number): this {\n    this.modifiers.push(new StaveSection(section, this.x, y));\n    return this;\n  }\n\n  // Tempo functions\n  setTempo(tempo: StaveTempoOptions, y: number): this {\n    this.modifiers.push(new StaveTempo(tempo, this.x, y));\n    return this;\n  }\n\n  // Text functions\n  setText(\n    text: string,\n    position: number,\n    options: {\n      shift_x?: number;\n      shift_y?: number;\n      justification?: number;\n    } = {}\n  ): this {\n    this.modifiers.push(new StaveText(text, position, options));\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  getSpacingBetweenLines(): number {\n    return this.options.spacing_between_lines_px;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n  }\n\n  getBottomY(): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n\n    return score_bottom;\n  }\n\n  getBottomLineY(): number {\n    return this.getYForLine(this.options.num_lines);\n  }\n\n  // This returns the y for the *center* of a staff line\n  getYForLine(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n\n    const y = this.y + line * spacing + headroom * spacing;\n\n    return y;\n  }\n\n  getLineForY(y: number): number {\n    // Does the reverse of getYForLine - somewhat dumb and just calls\n    // getYForLine until the right value is reaches\n\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return (y - this.y) / spacing - headroom;\n  }\n\n  getYForTopText(line: number = 0): number {\n    return this.getYForLine(-line - this.options.top_text_position);\n  }\n\n  getYForBottomText(line: number = 0): number {\n    return this.getYForLine(this.options.bottom_text_position + line);\n  }\n\n  getYForNote(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return this.y + headroom * spacing + 5 * spacing - line * spacing;\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(3);\n  }\n\n  // This method adds a stave modifier to the stave. Note that the first two\n  // modifiers (BarLines) are automatically added upon construction.\n  addModifier(modifier: StaveModifier, position?: number): this {\n    if (position !== undefined) {\n      modifier.setPosition(position);\n    }\n\n    modifier.setStave(this);\n    this.formatted = false;\n    this.modifiers.push(modifier);\n    return this;\n  }\n\n  addEndModifier(modifier: StaveModifier): this {\n    this.addModifier(modifier, StaveModifierPosition.END);\n    return this;\n  }\n\n  // Bar Line functions\n  setBegBarType(type: number): this {\n    // Only valid bar types at beginning of stave is none, single or begin repeat\n    const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n    if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n      (this.modifiers[0] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setEndBarType(type: number): this {\n    // Repeat end not valid at end of stave\n    if (type !== BarlineType.REPEAT_BEGIN) {\n      (this.modifiers[1] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setClef(clefSpec: string, size?: string, annotation?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n\n    if (position === StaveModifierPosition.END) {\n      this.endClef = clefSpec;\n    } else {\n      this.clef = clefSpec;\n    }\n\n    const clefs = this.getModifiers(position, Clef.CATEGORY) as Clef[];\n    if (clefs.length === 0) {\n      this.addClef(clefSpec, size, annotation, position);\n    } else {\n      clefs[0].setType(clefSpec, size, annotation);\n    }\n\n    return this;\n  }\n\n  getClef(): string {\n    return this.clef;\n  }\n\n  setEndClef(clefSpec: string, size?: string, annotation?: string): this {\n    this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n    return this;\n  }\n\n  getEndClef(): string | undefined {\n    return this.endClef;\n  }\n\n  setKeySignature(keySpec: string, cancelKeySpec?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n\n    const keySignatures = this.getModifiers(position, KeySignature.CATEGORY) as KeySignature[];\n    if (keySignatures.length === 0) {\n      this.addKeySignature(keySpec, cancelKeySpec, position);\n    } else {\n      keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n    }\n\n    return this;\n  }\n\n  setEndKeySignature(keySpec: string, cancelKeySpec?: string): this {\n    this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n    return this;\n  }\n\n  setTimeSignature(timeSpec: string, customPadding?: number, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n\n    const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY) as TimeSignature[];\n    if (timeSignatures.length === 0) {\n      this.addTimeSignature(timeSpec, customPadding, position);\n    } else {\n      timeSignatures[0].setTimeSig(timeSpec);\n    }\n\n    return this;\n  }\n\n  setEndTimeSignature(timeSpec: string, customPadding?: number): this {\n    this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n    return this;\n  }\n\n  /**\n   * Add a key signature to the stave.\n   *\n   * Example:\n   * `stave.addKeySignature('Db');`\n   * @param keySpec new key specification `[A-G][b|#]?`\n   * @param cancelKeySpec\n   * @param position\n   * @returns\n   */\n  addKeySignature(keySpec: string, cancelKeySpec?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n    this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n    return this;\n  }\n\n  /**\n   * Add a clef to the stave.\n   *\n   * Example:\n   *\n   * stave.addClef('treble')\n   * @param clef clef (treble|bass|...) see {@link Clef.types}\n   * @param size\n   * @param annotation\n   * @param position\n   * @returns\n   */\n  addClef(clef: string, size?: string, annotation?: string, position?: number): this {\n    if (position === undefined || position === StaveModifierPosition.BEGIN) {\n      this.clef = clef;\n    } else if (position === StaveModifierPosition.END) {\n      this.endClef = clef;\n    }\n\n    this.addModifier(new Clef(clef, size, annotation), position);\n    return this;\n  }\n\n  addEndClef(clef: string, size?: string, annotation?: string): this {\n    this.addClef(clef, size, annotation, StaveModifierPosition.END);\n    return this;\n  }\n\n  /**\n   * Add a time signature to the stave\n   *\n   * Example:\n   *\n   * `stave.addTimeSignature('4/4');`\n   * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n   * @param customPadding\n   * @param position\n   * @returns\n   */\n  addTimeSignature(timeSpec: string, customPadding?: number, position?: number): this {\n    this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n    return this;\n  }\n\n  addEndTimeSignature(timeSpec: string, customPadding?: number): this {\n    this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n    return this;\n  }\n\n  // Deprecated\n  addTrebleGlyph(): this {\n    this.addClef('treble');\n    return this;\n  }\n\n  /**\n   * @param position\n   * @param category\n   * @returns array of StaveModifiers that match the provided position and category.\n   */\n  getModifiers(position?: number, category?: string): StaveModifier[] {\n    const noPosition = position === undefined;\n    const noCategory = category === undefined;\n    if (noPosition && noCategory) {\n      return this.modifiers;\n    } else if (noPosition) {\n      // A category was provided.\n      return this.modifiers.filter((m: StaveModifier) => category === m.getCategory());\n    } else if (noCategory) {\n      // A position was provided.\n      return this.modifiers.filter((m: StaveModifier) => position === m.getPosition());\n    } else {\n      // Both position and category were provided!\n      return this.modifiers.filter((m: StaveModifier) => position === m.getPosition() && category === m.getCategory());\n    }\n  }\n\n  /**\n   * Use the modifier's `getCategory()` as a key for the `order` array.\n   * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n   */\n  sortByCategory(items: StaveModifier[], order: Record<string, number>): void {\n    for (let i = items.length - 1; i >= 0; i--) {\n      for (let j = 0; j < i; j++) {\n        if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n          const temp = items[j];\n          items[j] = items[j + 1];\n          items[j + 1] = temp;\n        }\n      }\n    }\n  }\n\n  format(): void {\n    const begBarline = this.modifiers[0] as Barline;\n    const endBarline = this.modifiers[1];\n\n    const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n    const endModifiers = this.getModifiers(StaveModifierPosition.END);\n\n    this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n    this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n\n    if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n      begModifiers.push(begModifiers.splice(0, 1)[0]);\n      begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n    }\n\n    if (endModifiers.indexOf(endBarline) > 0) {\n      endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n    }\n\n    let width;\n    let padding;\n    let modifier;\n    let offset = 0;\n    let x = this.x;\n    for (let i = 0; i < begModifiers.length; i++) {\n      modifier = begModifiers[i];\n      padding = modifier.getPadding(i + offset);\n      width = modifier.getWidth();\n\n      x += padding;\n      modifier.setX(x);\n      x += width;\n\n      if (padding + width === 0) offset--;\n    }\n\n    this.start_x = x;\n    x = this.x + this.width;\n\n    const widths = {\n      left: 0,\n      right: 0,\n      paddingRight: 0,\n      paddingLeft: 0,\n    };\n\n    let lastBarlineIdx = 0;\n\n    for (let i = 0; i < endModifiers.length; i++) {\n      modifier = endModifiers[i];\n      lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n\n      widths.right = 0;\n      widths.left = 0;\n      widths.paddingRight = 0;\n      widths.paddingLeft = 0;\n      const layoutMetrics = modifier.getLayoutMetrics();\n\n      if (layoutMetrics) {\n        if (i !== 0) {\n          widths.right = layoutMetrics.xMax || 0;\n          widths.paddingRight = layoutMetrics.paddingRight || 0;\n        }\n        widths.left = -layoutMetrics.xMin || 0;\n        widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n\n        if (i === endModifiers.length - 1) {\n          widths.paddingLeft = 0;\n        }\n      } else {\n        widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n        if (i !== 0) {\n          widths.right = modifier.getWidth();\n        }\n        if (i === 0) {\n          widths.left = modifier.getWidth();\n        }\n      }\n      x -= widths.paddingRight;\n      x -= widths.right;\n\n      modifier.setX(x);\n\n      x -= widths.left;\n      x -= widths.paddingLeft;\n    }\n\n    this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n    this.formatted = true;\n  }\n\n  /**\n   * All drawing functions below need the context to be set.\n   */\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (!this.formatted) this.format();\n\n    const num_lines = this.options.num_lines;\n    const width = this.width;\n    const x = this.x;\n    let y;\n\n    // Render lines\n    for (let line = 0; line < num_lines; line++) {\n      y = this.getYForLine(line);\n\n      this.applyStyle();\n      if (this.options.line_config[line].visible) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + width, y);\n        ctx.stroke();\n      }\n      this.restoreStyle();\n    }\n\n    // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      // Only draw modifier if it has a draw function\n      if (typeof modifier.draw === 'function') {\n        modifier.applyStyle(ctx);\n        modifier.draw(this, this.getModifierXShift(i));\n        modifier.restoreStyle(ctx);\n      }\n    }\n\n    // Render measure numbers\n    if (this.measure > 0) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      const text_width = ctx.measureText('' + this.measure).width;\n      y = this.getYForTopText(0) + 3;\n      ctx.fillText('' + this.measure, this.x - text_width / 2, y);\n      ctx.restore();\n    }\n\n    return this;\n  }\n\n  getVerticalBarWidth(): number {\n    return this.options.vertical_bar_width;\n  }\n\n  /**\n   * Get the current configuration for the Stave.\n   * @return {Array} An array of configuration objects.\n   */\n  getConfigForLines(): StaveLineConfig[] {\n    return this.options.line_config;\n  }\n\n  /**\n   * Configure properties of the lines in the Stave\n   * @param line_number The index of the line to configure.\n   * @param line_config An configuration object for the specified line.\n   * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n   *   range of the number of lines specified in the constructor.\n   */\n  setConfigForLine(line_number: number, line_config: StaveLineConfig): this {\n    if (line_number >= this.options.num_lines || line_number < 0) {\n      throw new RuntimeError(\n        'StaveConfigError',\n        'The line number must be within the range of the number of lines in the Stave.'\n      );\n    }\n\n    if (line_config.visible === undefined) {\n      throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n    }\n\n    if (typeof line_config.visible !== 'boolean') {\n      throw new RuntimeError(\n        'StaveConfigError',\n        \"The line configuration objects 'visible' property must be true or false.\"\n      );\n    }\n\n    this.options.line_config[line_number] = line_config;\n\n    return this;\n  }\n\n  /**\n   * Set the staff line configuration array for all of the lines at once.\n   * @param lines_configuration An array of line configuration objects.  These objects\n   *   are of the same format as the single one passed in to setLineConfiguration().\n   *   The caller can set null for any line config entry if it is desired that the default be used\n   * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n   *   exactly the same number of elements as the num_lines configuration object set in\n   *   the constructor.\n   */\n  setConfigForLines(lines_configuration: StaveLineConfig[]): this {\n    if (lines_configuration.length !== this.options.num_lines) {\n      throw new RuntimeError(\n        'StaveConfigError',\n        'The length of the lines configuration array must match the number of lines in the Stave'\n      );\n    }\n\n    // Make sure the defaults are present in case an incomplete set of\n    //  configuration options were supplied.\n    // eslint-disable-next-line\n    for (const line_config in lines_configuration) {\n      // Allow '{}' to be used if the caller just wants the default for a particular node.\n      if (lines_configuration[line_config].visible == undefined) {\n        lines_configuration[line_config] = this.options.line_config[line_config];\n      }\n      this.options.line_config[line_config] = {\n        ...this.options.line_config[line_config],\n        ...lines_configuration[line_config],\n      };\n    }\n\n    this.options.line_config = lines_configuration;\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError, midLine, log, defined } from './util';\nimport { Beam } from './beam';\nimport { Flow } from './flow';\nimport { Fraction } from './fraction';\nimport { Voice } from './voice';\nimport { StaveConnector } from './staveconnector';\nimport { ModifierContext } from './modifiercontext';\nimport { TickContext } from './tickcontext';\nimport { RenderContext } from './types/common';\nimport { Stave } from './stave';\nimport { StemmableNote } from './stemmablenote';\nimport { Tickable } from './tickable';\nimport { TabStave } from './tabstave';\nimport { TabNote } from './tabnote';\nimport { BoundingBox } from './boundingbox';\nimport { isNote, isStaveNote } from './typeguard';\n\ninterface Distance {\n  maxNegativeShiftPx: number;\n  expectedDistance: number;\n  fromTickable?: Tickable;\n  errorPx?: number;\n  fromTickablePx?: number;\n}\n\nexport interface FormatterOptions {\n  /** Defaults to 100. */\n  softmaxFactor?: number;\n\n  /** Defaults to `false`. */\n  globalSoftmax?: boolean;\n\n  /** Defaults to 5. */\n  maxIterations?: number;\n}\n\nexport interface FormatOptions {\n  align_rests?: boolean;\n  padding?: number;\n  stave?: Stave;\n  context?: RenderContext;\n  auto_beam?: boolean;\n}\n\nexport interface AlignmentContexts<T> {\n  list: number[];\n  map: Record<number, T>;\n  array: T[];\n  resolutionMultiplier: number;\n}\n\ntype addToContextFn<T> = (tickable: Tickable, context: T, voiceIndex: number) => void;\ntype makeContextFn<T> = (tick?: { tickID: number }) => T;\n\n// Helper function\nconst sumArray = (arr: number[]) => arr.reduce((a, b) => a + b, 0);\n\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts<T>(\n  voices: Voice[],\n  makeContext: makeContextFn<T>,\n  addToContext: addToContextFn<T>\n): AlignmentContexts<T> {\n  const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n\n  // Initialize tick maps.\n  const tickToContextMap: Record<number, T> = {};\n  const tickList: number[] = [];\n  const contexts: T[] = [];\n\n  // For each voice, extract notes and create a context for every\n  // new tick that hasn't been seen before.\n  voices.forEach((voice, voiceIndex) => {\n    // Use resolution multiplier as denominator so that no additional expansion\n    // of fractional tick values is needed.\n    const ticksUsed = new Fraction(0, resolutionMultiplier);\n\n    voice.getTickables().forEach((tickable) => {\n      const integerTicks = ticksUsed.numerator;\n\n      // If we have no tick context for this tick, create one.\n      if (!tickToContextMap[integerTicks]) {\n        const newContext = makeContext({ tickID: integerTicks });\n        contexts.push(newContext);\n        tickToContextMap[integerTicks] = newContext;\n        // Maintain a list of unique integerTicks.\n        tickList.push(integerTicks);\n      }\n\n      // Add this tickable to the TickContext.\n      addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n      ticksUsed.add(tickable.getTicks());\n    });\n  });\n\n  return {\n    map: tickToContextMap,\n    array: contexts,\n    list: tickList.sort((a, b) => a - b),\n    resolutionMultiplier,\n  };\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Formatter.DEBUG) log('Vex.Flow.Formatter', args);\n}\n\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(\n  notes: Tickable[],\n  currRestLine: number,\n  currNoteIndex: number,\n  compare: boolean\n): number {\n  // If no valid next note group, nextRestLine is same as current.\n  let nextRestLine = currRestLine;\n\n  // Start with the next note and keep going until we find a valid non-rest note group.\n  for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n    const note = notes[noteIndex];\n    if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n      nextRestLine = note.getLineForRest();\n      break;\n    }\n  }\n\n  // Locate the mid point between two lines.\n  if (compare && currRestLine !== nextRestLine) {\n    const top = Math.max(currRestLine, nextRestLine);\n    const bot = Math.min(currRestLine, nextRestLine);\n    nextRestLine = midLine(top, bot);\n  }\n  return nextRestLine;\n}\n\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n  // To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\n  static DEBUG: boolean;\n  protected hasMinTotalWidth: boolean;\n  protected minTotalWidth: number;\n  protected contextGaps: {\n    total: number;\n    gaps: { x1: number; x2: number }[];\n  };\n  protected justifyWidth: number;\n  protected totalCost: number;\n  protected totalShift: number;\n  protected tickContexts?: AlignmentContexts<TickContext>;\n  protected formatterOptions: Required<FormatterOptions>;\n  protected modifierContexts?: AlignmentContexts<ModifierContext>;\n  protected voices: Voice[];\n  protected lossHistory: number[];\n  protected durationStats: Record<string, { mean: number; count: number }>;\n\n  /**\n   * Helper function to layout \"notes\" one after the other without\n   * regard for proportions. Useful for tests and debugging.\n   */\n  static SimpleFormat(notes: Tickable[], x = 0, { paddingBetween = 10 } = {}): void {\n    notes.reduce((accumulator, note) => {\n      note.addToModifierContext(new ModifierContext());\n      const tick = new TickContext().addTickable(note).preFormat();\n      const metrics = tick.getMetrics();\n      tick.setX(accumulator + metrics.totalLeftPx);\n\n      return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n    }, x);\n  }\n\n  /** Helper function to plot formatter debug info. */\n  static plotDebugging(\n    ctx: RenderContext,\n    formatter: Formatter,\n    xPos: number,\n    y1: number,\n    y2: number,\n    options?: { stavePadding: number }\n  ): void {\n    options = {\n      stavePadding: Flow.DEFAULT_FONT_STACK[0].lookupMetric('stave.padding'),\n      ...options,\n    };\n\n    const x = xPos + options.stavePadding;\n    const contextGaps = formatter.contextGaps;\n\n    function stroke(x1: number, x2: number, color: string) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(1);\n      ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n    }\n\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n\n    contextGaps.gaps.forEach((gap) => {\n      stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n      ctx.setFillStyle('green');\n      ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n    });\n\n    ctx.setFillStyle('red');\n    ctx.fillText(\n      `Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(\n        2\n      )} Gap: ${contextGaps.total.toFixed(2)}`,\n      x - 20,\n      y2 + 27\n    );\n    ctx.restore();\n  }\n\n  /**\n   * Helper function to format and draw a single voice. Returns a bounding\n   * box for the notation.\n   * @param ctx  the rendering context\n   * @param stave the stave to which to draw (`Stave` or `TabStave`)\n   * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n   * @param params one of below:\n   *    * Setting `autobeam` only `(context, stave, notes, true)` or\n   *      `(ctx, stave, notes, {autobeam: true})`\n   *    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n   *    * Setting both a struct is needed `(context, stave, notes, {\n   *      autobeam: true, align_rests: true})`\n   *    * `autobeam` automatically generates beams for the notes.\n   *    * `align_rests` aligns rests with nearby notes.\n   */\n  static FormatAndDraw(\n    ctx: RenderContext,\n    stave: Stave,\n    notes: StemmableNote[],\n    params?: FormatOptions | boolean\n  ): BoundingBox | undefined {\n    let options = {\n      auto_beam: false,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      options = { ...options, ...params };\n    } else if (typeof params === 'boolean') {\n      options.auto_beam = params;\n    }\n\n    // Start by creating a voice and adding all the notes to it.\n    const voice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Then create beams, if requested.\n    const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n\n    // Instantiate a `Formatter` and format the notes.\n    new Formatter()\n      .joinVoices([voice]) // , { align_rests: options.align_rests })\n      .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n\n    // Render the voice and beams to the stave.\n    voice.setStave(stave).draw(ctx, stave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Return the bounding box of the voice.\n    return voice.getBoundingBox();\n  }\n\n  /**\n   * Helper function to format and draw aligned tab and stave notes in two\n   * separate staves.\n   * @param ctx the rendering context\n   * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n   * @param stave a `Stave` instance on which to render `Note`s.\n   * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n   * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n   * @param autobeam automatically generate beams.\n   * @param params a configuration object:\n   *    * `autobeam` automatically generates beams for the notes.\n   *    * `align_rests` aligns rests with nearby notes.\n   */\n  static FormatAndDrawTab(\n    ctx: RenderContext,\n    tabstave: TabStave,\n    stave: Stave,\n    tabnotes: TabNote[],\n    notes: Tickable[],\n    autobeam: boolean,\n    params: FormatOptions\n  ): void {\n    let opts = {\n      auto_beam: autobeam,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      opts = { ...opts, ...params };\n    } else if (typeof params === 'boolean') {\n      opts.auto_beam = params;\n    }\n\n    // Create a `4/4` voice for `notes`.\n    const notevoice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Create a `4/4` voice for `tabnotes`.\n    const tabvoice = new Voice(Flow.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n\n    // Then create beams, if requested.\n    const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n\n    // Instantiate a `Formatter` and align tab and stave notes.\n    new Formatter()\n      .joinVoices([notevoice]) // , { align_rests: opts.align_rests })\n      .joinVoices([tabvoice])\n      .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n\n    // Render voices and beams to staves.\n    notevoice.draw(ctx, stave);\n    tabvoice.draw(ctx, tabstave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Draw a connector between tab and note staves.\n    new StaveConnector(stave, tabstave).setContext(ctx).draw();\n  }\n\n  /**\n   * Automatically set the vertical position of rests based on previous/next note positions.\n   * @param tickables an array of Tickables.\n   * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n   * @param alignTuplets If `false`, ignores tuplets.\n   */\n  static AlignRestsToNotes(tickables: Tickable[], alignAllNotes: boolean, alignTuplets?: boolean): void {\n    tickables.forEach((currTickable: Tickable, index: number) => {\n      if (isStaveNote(currTickable) && currTickable.isRest()) {\n        if (currTickable.getTuplet() && !alignTuplets) {\n          return;\n        }\n\n        // If activated rests not on default can be rendered as specified.\n        const position = currTickable.getGlyph().position.toUpperCase();\n        if (position !== 'R/4' && position !== 'B/4') {\n          return;\n        }\n\n        if (alignAllNotes || currTickable.getBeam()) {\n          // Align rests with previous/next notes.\n          const props = currTickable.getKeyProps()[0];\n          if (index === 0) {\n            props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n          } else if (index > 0 && index < tickables.length) {\n            // If previous tickable is a rest, use its line number.\n            const prevTickable = tickables[index - 1];\n            if (isStaveNote(prevTickable)) {\n              if (prevTickable.isRest()) {\n                props.line = prevTickable.getKeyProps()[0].line;\n              } else {\n                const restLine = prevTickable.getLineForRest();\n                // Get the rest line for next valid non-rest note group.\n                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n              }\n            }\n          }\n          currTickable.setKeyLine(0, props.line);\n        }\n      }\n    });\n  }\n\n  constructor(options?: FormatterOptions) {\n    this.formatterOptions = {\n      globalSoftmax: false,\n      softmaxFactor: 100,\n      maxIterations: 5,\n      ...options,\n    };\n    this.justifyWidth = 0;\n    this.totalCost = 0;\n    this.totalShift = 0;\n    this.durationStats = {};\n\n    // Minimum width required to render all the notes in the voices.\n    this.minTotalWidth = 0;\n\n    // This is set to `true` after `minTotalWidth` is calculated.\n    this.hasMinTotalWidth = false;\n\n    // Arrays of tick and modifier contexts.\n    this.tickContexts = undefined;\n    this.modifierContexts = undefined;\n\n    // Gaps between contexts, for free movement of notes post\n    // formatting.\n    this.contextGaps = {\n      total: 0,\n      gaps: [],\n    };\n\n    this.voices = [];\n    this.lossHistory = [];\n  }\n\n  /**\n   * Find all the rests in each of the `voices` and align them to neighboring notes.\n   *\n   * @param voices\n   * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n   */\n  alignRests(voices: Voice[], alignAllNotes: boolean): void {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format rests');\n    }\n\n    voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n  }\n\n  /**\n   * Estimate the width required to render 'voices'.  This is done by:\n   * 1. Sum the widths of all the tick contexts\n   * 2. Estimate the padding.\n   * The latter is done by calculating the padding 3 different ways, and taking the\n   * greatest value:\n   * 1. the padding required for unaligned notes in different voices\n   * 2. the padding based on the stddev of the tickable widths\n   * 3. the padding based on the stddev of the tickable durations.\n   *\n   * The last 2 quantities estimate a 'width entropy', where notes might need more\n   * room than the proportional formatting gives them.  A measure of all same duration\n   * and width will need no extra padding, and all these quantities will be\n   * zero in that case.\n   *\n   * @param voices the voices that contain the notes\n   * @returns the estimated width in pixels\n   */\n  preCalculateMinTotalWidth(voices: Voice[]): number {\n    const unalignedPadding = Flow.DEFAULT_FONT_STACK[0].lookupMetric('stave.unalignedNotePadding');\n    // Calculate additional padding based on 3 methods:\n    // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n    let unalignedCtxCount = 0;\n    let wsum = 0;\n    let dsum = 0;\n    const widths: number[] = [];\n    const durations: number[] = [];\n\n    // Cache results.\n    if (this.hasMinTotalWidth) return this.minTotalWidth;\n\n    // Create tick contexts if not already created.\n    if (!this.tickContexts) {\n      if (!voices) {\n        throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n      }\n\n      this.createTickContexts(voices);\n    }\n\n    // eslint-disable-next-line\n  const { list: contextList, map: contextMap } = this.tickContexts!;\n    this.minTotalWidth = 0;\n\n    // Go through each tick context and calculate total width,\n    // and also accumulate values used in padding hints\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n      context.preFormat();\n      // If this TC doesn't have all the voices on it, it's unaligned.\n      // so increment the unaligned padding accumulator\n      if (context.getTickables().length < voices.length) {\n        unalignedCtxCount += 1;\n      }\n      // Calculate the 'width entropy' over all the Tickables.\n      context.getTickables().forEach((t: Tickable) => {\n        wsum += t.getMetrics().width;\n        dsum += t.getTicks().value();\n        widths.push(t.getMetrics().width);\n        durations.push(t.getTicks().value());\n      });\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n    });\n\n    this.hasMinTotalWidth = true;\n    // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n    const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n    const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n    const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n\n    const davg = dsum / durations.length;\n    const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n    const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n\n    // Find max of 3 methods pad the width with that\n    const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n    const unalignedPad = unalignedPadding * unalignedCtxCount;\n\n    return this.minTotalWidth + Math.max(unalignedPad, padmax);\n  }\n\n  /**\n   * Get minimum width required to render all voices. Either `format` or\n   * `preCalculateMinTotalWidth` must be called before this method.\n   */\n  getMinTotalWidth(): number {\n    if (!this.hasMinTotalWidth) {\n      throw new RuntimeError(\n        'NoMinTotalWidth',\n        \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\"\n      );\n    }\n\n    return this.minTotalWidth;\n  }\n\n  /** Calculate the resolution multiplier for `voices`. */\n  static getResolutionMultiplier(voices: Voice[]): number {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format');\n    }\n    const totalTicks = voices[0].getTotalTicks();\n    const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n      if (!voice.getTotalTicks().equals(totalTicks)) {\n        throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n      }\n\n      if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n        throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n      }\n\n      return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n    }, 1);\n    return resolutionMultiplier;\n  }\n\n  /** Create a `ModifierContext` for each tick in `voices`. */\n  createModifierContexts(voices: Voice[]): AlignmentContexts<ModifierContext> {\n    const fn: addToContextFn<ModifierContext> = (tickable: Tickable, context: ModifierContext) =>\n      tickable.addToModifierContext(context);\n    const contexts = createContexts(voices, () => new ModifierContext(), fn);\n    this.modifierContexts = contexts;\n    return contexts;\n  }\n\n  /**\n   * Create a `TickContext` for each tick in `voices`. Also calculate the\n   * total number of ticks in voices.\n   */\n  createTickContexts(voices: Voice[]): AlignmentContexts<TickContext> {\n    const fn: addToContextFn<TickContext> = (tickable: Tickable, context: TickContext, voiceIndex: number) =>\n      context.addTickable(tickable, voiceIndex);\n    const contexts = createContexts(voices, (tick?: { tickID: number }) => new TickContext(tick), fn);\n    this.tickContexts = contexts;\n    const contextArray = this.tickContexts.array;\n\n    contextArray.forEach((context) => {\n      context.tContexts = contextArray;\n    });\n    return contexts;\n  }\n\n  /**\n   * This is the core formatter logic. Format voices and justify them\n   * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n   * that can't retreive widths without a canvas. This method sets the `x` positions\n   * of all the tickables/notes in the formatter.\n   */\n  preFormat(justifyWidth = 0, renderingContext?: RenderContext, voicesParam?: Voice[], stave?: Stave): number {\n    // Initialize context maps.\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n    }\n\n    const { list: contextList, map: contextMap } = contexts;\n\n    // Reset loss history for evaluator.\n    this.lossHistory = [];\n\n    // If voices and a stave were provided, set the Stave for each voice\n    // and preFormat to apply Y values to the notes;\n    if (voicesParam && stave) {\n      voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n    }\n\n    // Now distribute the ticks to each tick context, and assign them their\n    // own X positions.\n    let x = 0;\n    let shift = 0;\n    this.minTotalWidth = 0;\n    let totalTicks = 0;\n\n    // Pass 1: Give each note maximum width requested by context.\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n\n      // Make sure that all tickables in this context have calculated their\n      // space requirements.\n      context.preFormat();\n\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n\n      const maxTicks = context.getMaxTicks().value();\n      totalTicks += maxTicks;\n\n      const metrics = context.getMetrics();\n      x = x + shift + metrics.totalLeftPx;\n      context.setX(x);\n\n      // Calculate shift for the next tick.\n      shift = width - metrics.totalLeftPx;\n    });\n\n    // Use softmax based on all notes across all staves. (options.globalSoftmax)\n    const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n\n    const exp = (tick: number) => softmaxFactor ** (contextMap[tick].getMaxTicks().value() / totalTicks);\n    const expTicksUsed = sumArray(contextList.map(exp));\n\n    this.minTotalWidth = x + shift;\n    this.hasMinTotalWidth = true;\n\n    // No justification needed. End formatting.\n    if (justifyWidth <= 0) return this.evaluate();\n\n    // Start justification. Subtract the right extra pixels of the final context because the formatter\n    // justifies based on the context's X position, which is the left-most part of the note head.\n    const firstContext = contextMap[contextList[0]];\n    const lastContext = contextMap[contextList[contextList.length - 1]];\n\n    // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n    // the softmax of the ticks.\n    function calculateIdealDistances(adjustedJustifyWidth: number): Distance[] {\n      const distances: Distance[] = contextList.map((tick: number, i: number) => {\n        const context: TickContext = contextMap[tick];\n        const voices = context.getTickablesByVoice();\n        let backTickable: Tickable | undefined;\n        if (i > 0) {\n          const prevContext: TickContext = contextMap[contextList[i - 1]];\n          // Go through each tickable and search backwards for another tickable\n          // in the same voice. If found, use that duration (ticks) to calculate\n          // the expected distance.\n          for (let j = i - 1; j >= 0; j--) {\n            const backTick: TickContext = contextMap[contextList[j]];\n            const backVoices = backTick.getTickablesByVoice();\n\n            // Look for matching voices between tick contexts.\n            const matchingVoices: string[] = [];\n            Object.keys(voices).forEach((v) => {\n              if (backVoices[v]) {\n                matchingVoices.push(v);\n              }\n            });\n\n            if (matchingVoices.length > 0) {\n              // Found matching voices, get largest duration\n              let maxTicks = 0;\n              let maxNegativeShiftPx = Infinity;\n              let expectedDistance = 0;\n\n              matchingVoices.forEach((v) => {\n                const ticks = backVoices[v].getTicks().value();\n                if (ticks > maxTicks) {\n                  backTickable = backVoices[v];\n                  maxTicks = ticks;\n                }\n\n                // Calculate the limits of the shift based on modifiers, etc.\n                const thisTickable = voices[v];\n                const insideLeftEdge =\n                  thisTickable.getX() -\n                  (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n\n                const backMetrics = backVoices[v].getMetrics();\n                const insideRightEdge =\n                  backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n\n                // Don't allow shifting if notes in the same voice can collide\n                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n              });\n\n              // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n              // so that two different tick contexts don't align across staves.\n              maxNegativeShiftPx = Math.min(\n                maxNegativeShiftPx,\n                context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05)\n              );\n\n              // Calculate the expected distance of the current context from the last matching tickable. The\n              // distance is scaled down by the softmax for the voice.\n              if (globalSoftmax) {\n                const t = totalTicks;\n                expectedDistance = (softmaxFactor ** (maxTicks / t) / expTicksUsed) * adjustedJustifyWidth;\n              } else if (typeof backTickable !== 'undefined') {\n                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n              }\n              return {\n                expectedDistance,\n                maxNegativeShiftPx,\n                fromTickable: backTickable,\n              };\n            }\n          }\n        }\n\n        return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n      });\n      return distances;\n    }\n\n    function shiftToIdealDistances(idealDistances: Distance[]): number {\n      // Distribute ticks to the contexts based on the calculated distance error.\n      const centerX = adjustedJustifyWidth / 2;\n      let spaceAccum = 0;\n\n      contextList.forEach((tick, index) => {\n        const context = contextMap[tick];\n        if (index > 0) {\n          const contextX = context.getX();\n          const ideal = idealDistances[index];\n          const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n\n          let negativeShiftPx = 0;\n          if (errorPx > 0) {\n            spaceAccum += errorPx;\n          } else if (errorPx < 0) {\n            negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n            spaceAccum += -negativeShiftPx;\n          }\n          context.setX(contextX + spaceAccum);\n        }\n        // Move center aligned tickables to middle\n        context.getCenterAlignedTickables().forEach((tickable: Tickable) => {\n          tickable.setCenterXShift(centerX - context.getX());\n        });\n      });\n\n      return lastContext.getX() - firstContext.getX();\n    }\n\n    const adjustedJustifyWidth =\n      justifyWidth -\n      lastContext.getMetrics().notePx -\n      lastContext.getMetrics().totalRightPx -\n      firstContext.getMetrics().totalLeftPx;\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');\n    const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');\n    let targetWidth = adjustedJustifyWidth;\n    let distances = calculateIdealDistances(targetWidth);\n    let actualWidth = shiftToIdealDistances(distances);\n    // Calculate right justification by finding max of (configured value, min distance between tickables)\n    // so measures with lots of white space use it evenly, and crowded measures use at least the configured\n    // space\n    const calcMinDistance = (targetWidth: number, distances: Distance[]) => {\n      let mdCalc = targetWidth / 2;\n      if (distances.length > 1) {\n        for (let di = 1; di < distances.length; ++di) {\n          mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n        }\n      }\n      return mdCalc;\n    };\n    const minDistance = calcMinDistance(targetWidth, distances);\n    const multiNote = contextList.length > 1;\n    // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n    let paddingMax = configMaxPadding;\n    // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n    // existing visual regression tests.\n    if (paddingMax * 2 < minDistance) {\n      paddingMax = minDistance;\n      L('Right padding to ' + minDistance);\n    }\n    const paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n    const maxX = adjustedJustifyWidth - paddingMin;\n\n    let iterations = maxIterations;\n    while (\n      (actualWidth > maxX && iterations > 0 && multiNote) ||\n      (actualWidth + paddingMax < maxX && iterations > 1 && multiNote)\n    ) {\n      // If we couldn't fit all the notes into the jusification width, it's because the softmax-scaled\n      // widths between different durations differ across stave (e.g., 1 quarter note is not the same pixel-width\n      // as 4 16th-notes). Run another pass, now that we know how much to justify.\n      targetWidth -= actualWidth - maxX;\n      distances = calculateIdealDistances(targetWidth);\n      actualWidth = shiftToIdealDistances(distances);\n      iterations--;\n    }\n\n    // Just one context. Done formatting.\n    if (contextList.length === 1) return 0;\n\n    this.justifyWidth = justifyWidth;\n    return this.evaluate();\n  }\n\n  /** Calculate the total cost of this formatting decision. */\n  evaluate(): number {\n    if (!this.tickContexts) return 0;\n    const contexts = this.tickContexts;\n    const justifyWidth = this.justifyWidth;\n    // Calculate available slack per tick context. This works out how much freedom\n    // to move a context has in either direction, without affecting other notes.\n    this.contextGaps = { total: 0, gaps: [] };\n    contexts.list.forEach((tick, index) => {\n      if (index === 0) return;\n      const prevTick = contexts.list[index - 1];\n      const prevContext = contexts.map[prevTick];\n      const context = contexts.map[tick];\n      const prevMetrics = prevContext.getMetrics();\n      const currMetrics = context.getMetrics();\n\n      // Calculate X position of right edge of previous note\n      const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n      // Calculate X position of left edge of current note\n      const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n      const gap = insideLeftEdge - insideRightEdge;\n      this.contextGaps.total += gap;\n      this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n\n      // Tell the tick contexts how much they can reposition themselves.\n      context.getFormatterMetrics().freedom.left = gap;\n      prevContext.getFormatterMetrics().freedom.right = gap;\n    });\n\n    // Calculate mean distance in each voice for each duration type, then calculate\n    // how far each note is from the mean.\n    this.durationStats = {};\n    const durationStats = this.durationStats;\n\n    function updateStats(duration: string, space: number) {\n      const stats = durationStats[duration];\n      if (stats === undefined) {\n        durationStats[duration] = { mean: space, count: 1 };\n      } else {\n        stats.count += 1;\n        stats.mean = (stats.mean + space) / 2;\n      }\n    }\n\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note, i, notes) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getMetrics();\n        const formatterMetrics = note.getFormatterMetrics();\n        const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n        let space = 0;\n\n        if (i < notes.length - 1) {\n          const rightNote = notes[i + 1];\n          const rightMetrics = rightNote.getMetrics();\n          const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n\n          space = rightNoteEdge - leftNoteEdge;\n          formatterMetrics.space.used = rightNote.getX() - note.getX();\n          rightNote.getFormatterMetrics().freedom.left = space;\n        } else {\n          space = justifyWidth - leftNoteEdge;\n          formatterMetrics.space.used = justifyWidth - note.getX();\n        }\n\n        formatterMetrics.freedom.right = space;\n        updateStats(duration, formatterMetrics.space.used);\n      });\n    });\n\n    // Calculate how much each note deviates from the mean. Loss function is square\n    // root of the sum of squared deviations.\n    let totalDeviation = 0;\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getFormatterMetrics();\n\n        metrics.space.mean = durationStats[duration].mean;\n        metrics.duration = duration;\n        metrics.iterations += 1;\n        metrics.space.deviation = metrics.space.used - metrics.space.mean;\n\n        totalDeviation += metrics.space.deviation ** 2;\n      });\n    });\n\n    this.totalCost = Math.sqrt(totalDeviation);\n    this.lossHistory.push(this.totalCost);\n    return this.totalCost;\n  }\n\n  /**\n   * Run a single iteration of rejustification. At a high level, this method calculates\n   * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n   * attempt to reduce the cost. You can call this method multiple times until it finds\n   * and oscillates around a global minimum.\n   * @param alpha the \"learning rate\" for the formatter. It determines how much of a shift\n   * the formatter should make based on its cost function.\n   */\n  tune(options?: { alpha?: number }): number {\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      return 0;\n    }\n\n    const alpha = options?.alpha ?? 0.5;\n\n    // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n    // on adjacent tickcontexts.\n    function move(current: TickContext, shift: number, prev?: TickContext, next?: TickContext) {\n      current.setX(current.getX() + shift);\n      current.getFormatterMetrics().freedom.left += shift;\n      current.getFormatterMetrics().freedom.right -= shift;\n\n      if (prev) prev.getFormatterMetrics().freedom.right += shift;\n      if (next) next.getFormatterMetrics().freedom.left -= shift;\n    }\n\n    let shift = 0;\n    this.totalShift = 0;\n    contexts.list.forEach((tick, index, list) => {\n      const context = contexts.map[tick];\n      const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n      const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n\n      move(context, shift, prevContext, nextContext);\n\n      const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n\n      if (cost > 0) {\n        shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n      } else if (cost < 0) {\n        if (nextContext) {\n          shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n        } else {\n          shift = 0;\n        }\n      }\n\n      shift *= alpha;\n      this.totalShift += shift;\n    });\n\n    return this.evaluate();\n  }\n\n  /**\n   * This is the top-level call for all formatting logic completed\n   * after `x` *and* `y` values have been computed for the notes\n   * in the voices.\n   */\n  postFormat(): this {\n    const postFormatContexts = (contexts: AlignmentContexts<ModifierContext> | AlignmentContexts<TickContext>) =>\n      contexts.list.forEach((tick) => contexts.map[tick].postFormat());\n\n    if (this.modifierContexts) postFormatContexts(this.modifierContexts);\n    if (this.tickContexts) postFormatContexts(this.tickContexts);\n\n    return this;\n  }\n\n  /**\n   * Take all `voices` and create `ModifierContext`s out of them. This tells\n   * the formatters that the voices belong on a single stave.\n   */\n  joinVoices(voices: Voice[]): this {\n    this.createModifierContexts(voices);\n    this.hasMinTotalWidth = false;\n    return this;\n  }\n\n  /**\n   * Align rests in voices, justify the contexts, and position the notes\n   * so voices are aligned and ready to render onto the stave. This method\n   * mutates the `x` positions of all tickables in `voices`.\n   *\n   * Voices are full justified to fit in `justifyWidth` pixels.\n   *\n   * Set `options.context` to the rendering context. Set `options.align_rests`\n   * to true to enable rest alignment.\n   */\n  format(voices: Voice[], justifyWidth?: number, options?: FormatOptions): this {\n    const opts = {\n      align_rests: false,\n      ...options,\n    };\n\n    this.voices = voices;\n    const softmaxFactor = this.formatterOptions.softmaxFactor;\n    if (softmaxFactor) {\n      this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n    }\n\n    this.alignRests(voices, opts.align_rests);\n    this.createTickContexts(voices);\n    this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n\n    // Only postFormat if a stave was supplied for y value formatting\n    if (opts.stave) this.postFormat();\n\n    return this;\n  }\n\n  // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n  formatToStave(voices: Voice[], stave: Stave, optionsParam?: FormatOptions): this {\n    const options: FormatOptions = { padding: 10, context: stave.getContext(), ...optionsParam };\n\n    // eslint-disable-next-line\n    const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n    L('Formatting voices to width: ', justifyWidth);\n    return this.format(voices, justifyWidth, options);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { FontInfo, TieNotes } from './types/common';\n\nexport class StaveTie extends Element {\n  static get CATEGORY(): string {\n    return 'StaveTie';\n  }\n\n  render_options: {\n    cp2: number;\n    last_x_shift: number;\n    tie_spacing: number;\n    cp1: number;\n    first_x_shift: number;\n    text_shift_x: number;\n    y_shift: number;\n    font: FontInfo;\n  };\n\n  protected text?: string;\n\n  protected font: FontInfo;\n\n  // notes is initialized by the constructor via this.setNotes(notes).\n  protected notes!: TieNotes;\n\n  protected direction?: number;\n\n  /**\n   * @param notes is a struct that has:\n   *\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   *\n   * @param text\n   */\n  constructor(notes: TieNotes, text?: string) {\n    super();\n    this.setNotes(notes);\n    this.text = text;\n    this.render_options = {\n      cp1: 8, // Curve control point 1\n      cp2: 12, // Curve control point 2\n      text_shift_x: 0,\n      first_x_shift: 0,\n      last_x_shift: 0,\n      y_shift: 7,\n      tie_spacing: 0,\n      font: { family: 'Arial', size: 10, weight: '' },\n    };\n\n    this.font = this.render_options.font;\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n\n  setDirection(direction: number): this {\n    this.direction = direction;\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this tie to.\n   *\n   * @param {!Object} notes The notes to tie up.\n   */\n  setNotes(notes: TieNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) {\n      notes.first_indices = [0];\n    }\n    if (!notes.last_indices) {\n      notes.last_indices = [0];\n    }\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new RuntimeError('BadArguments', 'Tied notes must have same number of indices.');\n    }\n\n    this.notes = notes;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.notes.first_note || !this.notes.last_note;\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new RuntimeError('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    let cp1 = this.render_options.cp1;\n    let cp2 = this.render_options.cp2;\n\n    if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n      cp1 = 2;\n      cp2 = 8;\n    }\n\n    const first_x_shift = this.render_options.first_x_shift;\n    const last_x_shift = this.render_options.last_x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    // setNotes(...) verified that first_indices and last_indices are not undefined.\n    // As a result, we use the ! non-null assertion operator here.\n    // eslint-disable-next-line\n    const first_indices = this.notes.first_indices!;\n    // eslint-disable-next-line\n    const last_indices = this.notes.last_indices!;\n    for (let i = 0; i < first_indices.length; ++i) {\n      const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\n      const first_y_px = params.first_ys[first_indices[i]] + y_shift;\n      const last_y_px = params.last_ys[last_indices[i]] + y_shift;\n\n      if (isNaN(first_y_px) || isNaN(last_y_px)) {\n        throw new RuntimeError('BadArguments', 'Bad indices for tie rendering.');\n      }\n\n      const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\n      const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\n\n      ctx.beginPath();\n      ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n      ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n      ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }\n\n  renderText(first_x_px: number, last_x_px: number): void {\n    if (!this.text) return;\n    const ctx = this.checkContext();\n    let center_x = (first_x_px + last_x_px) / 2;\n    center_x -= ctx.measureText(this.text).width / 2;\n    const stave = this.notes.first_note?.checkStave() ?? this.notes.last_note?.checkStave();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText(this.text, center_x + this.render_options.text_shift_x, stave.getYForTopText() - 1);\n    ctx.restore();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.notes.first_note;\n    const last_note = this.notes.last_note;\n\n    let first_x_px;\n    let last_x_px;\n    let first_ys;\n    let last_ys;\n    let stem_direction = 0;\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      stem_direction = first_note.getStemDirection();\n      first_ys = first_note.getYs();\n    } else {\n      const stave = last_note.checkStave();\n      first_x_px = stave.getTieStartX();\n      first_ys = last_note.getYs();\n      this.notes.first_indices = this.notes.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      stem_direction = last_note.getStemDirection();\n      last_ys = last_note.getYs();\n    } else {\n      const stave = first_note.checkStave();\n      last_x_px = stave.getTieEndX();\n      last_ys = first_note.getYs();\n      this.notes.last_indices = this.notes.first_indices;\n    }\n\n    if (this.direction) {\n      stem_direction = this.direction;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: stem_direction,\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n","// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { StaveTie } from './stavetie';\nimport { TieNotes } from './types/common';\n\nexport class TabTie extends StaveTie {\n  static get CATEGORY(): string {\n    return 'TabTie';\n  }\n\n  static createHammeron(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'H');\n  }\n\n  static createPulloff(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'P');\n  }\n\n  /**\n   * @param notes is a struct that has:\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   *\n   * @param text\n   */\n  constructor(notes: TieNotes, text?: string) {\n    super(notes, text);\n\n    this.render_options.cp1 = 9;\n    this.render_options.cp2 = 11;\n    this.render_options.y_shift = 3;\n\n    this.direction = -1; // Tab tie's are always face up.\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\n\nimport { log } from './util';\nimport { Flow } from './flow';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\nimport { TabTie } from './tabtie';\nimport { Note } from './note';\nimport { StemmableNote } from './stemmablenote';\nimport { ModifierContextState } from './modifiercontext';\nimport { RenderContext } from './types/common';\nimport { isStaveNote } from 'typeguard';\n\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any) {\n  if (GraceNoteGroup.DEBUG) log('Vex.Flow.GraceNoteGroup', args);\n}\n\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'GraceNoteGroup';\n  }\n\n  protected readonly voice: Voice;\n  protected readonly grace_notes: StemmableNote[];\n  protected readonly show_slur?: boolean;\n\n  protected preFormatted: boolean = false;\n  protected formatter: Formatter;\n  protected render_options: { slur_y_shift: number };\n  protected slur?: StaveTie | TabTie;\n  protected beams: Beam[];\n\n  /** Arranges groups inside a `ModifierContext`. */\n  static format(gracenote_groups: GraceNoteGroup[], state: ModifierContextState): boolean {\n    const group_spacing_stave = 4;\n    const group_spacing_tab = 0;\n\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\n    const group_list = [];\n    let prev_note = null;\n    let shiftL = 0;\n\n    for (let i = 0; i < gracenote_groups.length; ++i) {\n      const gracenote_group = gracenote_groups[i];\n      const note = gracenote_group.getNote();\n      const is_stavenote = isStaveNote(note);\n      const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n\n      if (is_stavenote && note !== prev_note) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prev_note = note;\n      }\n\n      group_list.push({ shift: shiftL, gracenote_group, spacing });\n    }\n\n    // If first note left shift in case it is displaced\n    let group_shift = group_list[0].shift;\n    let formatWidth;\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  }\n\n  //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n  constructor(grace_notes: StemmableNote[], show_slur?: boolean) {\n    super();\n\n    this.position = Modifier.Position.LEFT;\n    this.grace_notes = grace_notes;\n    this.width = 0;\n\n    this.show_slur = show_slur;\n    this.slur = undefined;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.render_options = {\n      slur_y_shift: 0,\n    };\n\n    this.beams = [];\n\n    this.voice.addTickables(this.grace_notes);\n\n    return this;\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  beamNotes(grace_notes?: StemmableNote[]): this {\n    grace_notes = grace_notes || this.grace_notes;\n    if (grace_notes.length > 1) {\n      const beam = new Beam(grace_notes);\n\n      beam.render_options.beam_width = 3;\n      beam.render_options.partial_beam_length = 4;\n\n      this.beams.push(beam);\n    }\n\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getGraceNotes(): Note[] {\n    return this.grace_notes;\n  }\n\n  draw(): void {\n    const ctx: RenderContext = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    L('Drawing grace note group for:', note);\n\n    this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n\n    // Draw grace notes.\n    this.grace_notes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n    // Draw beams.\n    this.beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    if (this.show_slur) {\n      // Create and draw slur.\n      const is_stavenote = isStaveNote(note);\n      const TieClass = is_stavenote ? StaveTie : TabTie;\n\n      this.slur = new TieClass({\n        last_note: this.grace_notes[0],\n        first_note: note,\n        first_indices: [0],\n        last_indices: [0],\n      });\n\n      this.slur.render_options.cp2 = 12;\n      this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n      this.slur.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\n\nimport { isDot } from 'typeguard';\nimport { Dot } from './dot';\nimport { Flow } from './flow';\nimport { Glyph, GlyphProps } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stave } from './stave';\nimport { StaveNoteStruct } from './stavenote';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { defined, RuntimeError } from './util';\n\nexport interface TabNotePosition {\n  // For example, on a six stringed instrument, `str` ranges from 1 to 6.\n  str: number;\n\n  // fret: 'X' indicates an unused/muted string.\n  // fret: 3 indicates the third fret.\n  fret: number | string;\n}\n\nexport interface TabNoteStruct extends StaveNoteStruct {\n  positions: TabNotePosition[];\n}\n\n// Gets the unused strings grouped together if consecutive.\n//\n// Parameters:\n// * num_lines - The number of lines\n// * strings_used - An array of numbers representing which strings have fret positions\nfunction getUnusedStringGroups(num_lines: number, strings_used: number[]) {\n  const stem_through = [];\n  let group = [];\n  for (let string = 1; string <= num_lines; string++) {\n    const is_used = strings_used.indexOf(string) > -1;\n\n    if (!is_used) {\n      group.push(string);\n    } else {\n      stem_through.push(group);\n      group = [];\n    }\n  }\n  if (group.length > 0) stem_through.push(group);\n\n  return stem_through;\n}\n\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stem_Y - The `y` coordinate the stem is located on\n// * unused_strings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stem_direction - The direction of the stem\nfunction getPartialStemLines(stem_y: number, unused_strings: number[][], stave: Stave, stem_direction: number) {\n  const up_stem = stem_direction !== 1;\n  const down_stem = stem_direction !== -1;\n\n  const line_spacing = stave.getSpacingBetweenLines();\n  const total_lines = stave.getNumLines();\n\n  const stem_lines: number[][] = [];\n\n  unused_strings.forEach((strings) => {\n    const containsLastString = strings.indexOf(total_lines) > -1;\n    const containsFirstString = strings.indexOf(1) > -1;\n\n    if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {\n      return;\n    }\n\n    // If there's only one string in the group, push a duplicate value.\n    // We do this because we need 2 strings to convert into upper/lower y\n    // values.\n    if (strings.length === 1) {\n      strings.push(strings[0]);\n    }\n\n    const line_ys: number[] = [];\n    // Iterate through each group string and store it's y position\n    strings.forEach((string, index, strings) => {\n      const isTopBound = string === 1;\n      const isBottomBound = string === total_lines;\n\n      // Get the y value for the appropriate staff line,\n      // we adjust for a 0 index array, since string numbers are index 1\n      let y = stave.getYForLine(string - 1);\n\n      // Unless the string is the first or last, add padding to each side\n      // of the line\n      if (index === 0 && !isTopBound) {\n        y -= line_spacing / 2 - 1;\n      } else if (index === strings.length - 1 && !isBottomBound) {\n        y += line_spacing / 2 - 1;\n      }\n\n      // Store the y value\n      line_ys.push(y);\n\n      // Store a subsequent y value connecting this group to the main\n      // stem above/below the stave if it's the top/bottom string\n      if (stem_direction === 1 && isTopBound) {\n        line_ys.push(stem_y - 2);\n      } else if (stem_direction === -1 && isBottomBound) {\n        line_ys.push(stem_y + 2);\n      }\n    });\n\n    // Add the sorted y values to the\n    stem_lines.push(line_ys.sort((a, b) => a - b));\n  });\n\n  return stem_lines;\n}\n\nexport class TabNote extends StemmableNote {\n  static get CATEGORY(): string {\n    return 'TabNote';\n  }\n\n  protected ghost: boolean;\n  protected glyphs: GlyphProps[] = [];\n  protected positions: TabNotePosition[];\n\n  // Initialize the TabNote with a `noteStruct` full of properties\n  // and whether to `draw_stem` when rendering the note\n  constructor(noteStruct: TabNoteStruct, draw_stem: boolean = false) {\n    super(noteStruct);\n\n    this.ghost = false; // Renders parenthesis around notes\n\n    // Note properties\n    // The fret positions in the note. An array of `{ str: X, fret: X }`\n    this.positions = noteStruct.positions || [];\n\n    // Render Options\n    this.render_options = {\n      ...this.render_options,\n      // font size for note heads and rests\n      glyph_font_scale: Flow.DEFAULT_TABLATURE_FONT_SCALE,\n      // Flag to draw a stem\n      draw_stem,\n      // Flag to draw dot modifiers\n      draw_dots: draw_stem,\n      // Flag to extend the main stem through the stave and fret positions\n      draw_stem_through_stave: false,\n      // vertical shift from stave line\n      y_shift: 0,\n      // normal glyph scale\n      scale: 1.0,\n      // default tablature font\n      font: '10pt Arial',\n    };\n\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    this.buildStem();\n\n    if (noteStruct.stem_direction) {\n      this.setStemDirection(noteStruct.stem_direction);\n    } else {\n      this.setStemDirection(Stem.UP);\n    }\n\n    // Renders parenthesis around notes\n    this.ghost = false;\n    this.updateWidth();\n  }\n\n  reset(): this {\n    if (this.stave) this.setStave(this.stave);\n    return this;\n  }\n\n  // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n  // Often used for indicating frets that are being bent to\n  setGhost(ghost: boolean): this {\n    this.ghost = ghost;\n    this.updateWidth();\n    return this;\n  }\n\n  // Determine if the note has a stem\n  hasStem(): boolean {\n    if (this.render_options.draw_stem) return true;\n    return false;\n  }\n\n  // Get the default stem extension for the note\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Add a dot to the note\n  addDot(): this {\n    const dot = new Dot();\n    this.dots += 1;\n    return this.addModifier(dot, 0);\n  }\n\n  // Calculate and store the width of the note\n  updateWidth(): void {\n    this.glyphs = [];\n    this.width = 0;\n    for (let i = 0; i < this.positions.length; ++i) {\n      let fret = this.positions[i].fret;\n      if (this.ghost) fret = '(' + fret + ')';\n      const glyph = Flow.tabToGlyph(fret.toString(), this.render_options.scale);\n      this.glyphs.push(glyph as GlyphProps);\n      this.width = Math.max(glyph.getWidth(), this.width);\n    }\n    // For some reason we associate a notehead glyph with a TabNote, and this\n    // glyph is used for certain width calculations. Of course, this is totally\n    // incorrect since a notehead is a poor approximation for the dimensions of\n    // a fret number which can have multiple digits. As a result, we must\n    // overwrite getWidth() to return the correct width\n    this.glyph.getWidth = () => this.width;\n  }\n\n  // Set the `stave` to the note\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    const ctx = stave.getContext();\n    this.setContext(ctx);\n\n    // Calculate the fret number width based on font used\n    if (ctx) {\n      this.width = 0;\n      for (let i = 0; i < this.glyphs.length; ++i) {\n        const glyph = this.glyphs[i];\n        const text = '' + glyph.text;\n        if (text.toUpperCase() !== 'X') {\n          ctx.save();\n          ctx.setRawFont(this.render_options.font);\n          glyph.width = ctx.measureText(text).width;\n          ctx.restore();\n          glyph.getWidth = () => glyph.width;\n        }\n        this.width = Math.max(glyph.getWidth(), this.width);\n      }\n      this.glyph.getWidth = () => this.width;\n    }\n\n    // we subtract 1 from `line` because getYForLine expects a 0-based index,\n    // while the position.str is a 1-based index\n    const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      this.stem.setYBounds(this.getStemY(), this.getStemY());\n    }\n\n    return this;\n  }\n\n  // Get the fret positions for the note\n  getPositions(): TabNotePosition[] {\n    return this.positions;\n  }\n\n  // Get the default `x` and `y` coordinates for a modifier at a specific\n  // `position` at a fret position `index`\n  getModifierStartXY(position: number, index: number): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    let x = 0;\n    if (position === Modifier.Position.LEFT) {\n      x = -1 * 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.RIGHT) {\n      x = this.width + 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n      const note_glyph_width = this.glyph.getWidth();\n      x = note_glyph_width / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Get the default line for rest\n  getLineForRest(): number {\n    return Number(this.positions[0].str);\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n    // width is already set during init()\n    this.setPreFormatted(true);\n  }\n\n  // Get the x position for the stem\n  getStemX(): number {\n    return this.getCenterGlyphX();\n  }\n\n  // Get the y position for the stem\n  getStemY(): number {\n    const num_lines = this.checkStave().getNumLines();\n\n    // The decimal staff line amounts provide optimal spacing between the\n    // fret number and the stem\n    const stemUpLine = -0.5;\n    const stemDownLine = num_lines - 0.5;\n    const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n\n    return this.checkStave().getYForLine(stemStartLine);\n  }\n\n  // Get the stem extents for the tabnote\n  getStemExtents(): Record<string, number> {\n    return this.checkStem().getExtents();\n  }\n\n  // Draw the fal onto the context\n  drawFlag(): void {\n    const {\n      beam,\n      glyph,\n      stem_direction,\n      render_options: { draw_stem, glyph_font_scale },\n    } = this;\n    const context = this.checkContext();\n\n    const shouldDrawFlag = beam == undefined && draw_stem;\n\n    // Now it's the flag's turn.\n    if (glyph.flag && shouldDrawFlag) {\n      const flag_x = this.getStemX() + 1;\n      const flag_y = this.getStemY() - this.checkStem().getHeight();\n\n      const flag_code =\n        stem_direction === Stem.DOWN\n          ? glyph.code_flag_downstem // Down stems have flags on the left.\n          : glyph.code_flag_upstem;\n\n      // Draw the Flag\n      Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code, { category: 'flag.tabStem' });\n    }\n  }\n\n  // Render the modifiers onto the context.\n  drawModifiers(): void {\n    this.modifiers.forEach((modifier) => {\n      // Only draw the dots if enabled.\n      if (isDot(modifier) && !this.render_options.draw_dots) {\n        return;\n      }\n\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    });\n  }\n\n  // Render the stem extension through the fret positions\n  drawStemThrough(): void {\n    const stem_x = this.getStemX();\n    const stem_y = this.getStemY();\n    const ctx = this.checkContext();\n\n    const stem_through = this.render_options.draw_stem_through_stave;\n    const draw_stem = this.render_options.draw_stem;\n    if (draw_stem && stem_through) {\n      const total_lines = this.checkStave().getNumLines();\n      const strings_used = this.positions.map((position) => Number(position.str));\n\n      const unused_strings = getUnusedStringGroups(total_lines, strings_used);\n      const stem_lines = getPartialStemLines(stem_y, unused_strings, this.checkStave(), this.getStemDirection());\n\n      ctx.save();\n      ctx.setLineWidth(Stem.WIDTH);\n      stem_lines.forEach((bounds) => {\n        if (bounds.length === 0) return;\n\n        ctx.beginPath();\n        ctx.moveTo(stem_x, bounds[0]);\n        ctx.lineTo(stem_x, bounds[bounds.length - 1]);\n        ctx.stroke();\n        ctx.closePath();\n      });\n      ctx.restore();\n    }\n  }\n\n  // Render the fret positions onto the context\n  drawPositions(): void {\n    const ctx = this.checkContext();\n    const x = this.getAbsoluteX();\n    const ys = this.ys;\n    for (let i = 0; i < this.positions.length; ++i) {\n      const y = ys[i] + this.render_options.y_shift;\n      const glyph = this.glyphs[i];\n\n      // Center the fret text beneath the notation note head\n      const note_glyph_width = this.glyph.getWidth();\n      const tab_x = x + note_glyph_width / 2 - glyph.getWidth() / 2;\n\n      // FIXME: Magic numbers.\n      ctx.clearRect(tab_x - 2, y - 3, glyph.getWidth() + 4, 6);\n\n      if (glyph.code) {\n        Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyph.code);\n      } else {\n        ctx.save();\n        ctx.setRawFont(this.render_options.font);\n        const text = glyph.text.toString();\n        ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\n        ctx.restore();\n      }\n    }\n  }\n\n  // The main rendering function for the entire note.\n  draw(): void {\n    const ctx = this.checkContext();\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    this.setRendered();\n    const render_stem = this.beam == undefined && this.render_options.draw_stem;\n\n    ctx.openGroup('tabnote', undefined, { pointerBBox: true });\n    this.drawPositions();\n    this.drawStemThrough();\n\n    if (this.stem && render_stem) {\n      const stem_x = this.getStemX();\n      this.stem.setNoteHeadXBounds(stem_x, stem_x);\n      ctx.openGroup('stem', undefined, { pointerBBox: true });\n      this.stem.setContext(ctx).draw();\n      ctx.closeGroup();\n    }\n\n    this.drawFlag();\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Ron B. Yeh\n// MIT License\n\nimport { Dot } from 'dot';\nimport { GraceNote } from 'gracenote';\nimport { GraceNoteGroup } from 'gracenotegroup';\nimport { Barline } from 'stavebarline';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { StemmableNote } from './stemmablenote';\nimport { TabNote } from './tabnote';\n\n// Helper functions for checking an object's type, via `instanceof` and `obj.constructor.CATEGORY`.\nexport const isNote = (obj: unknown): obj is Note => isCategory(obj, Note);\nexport const isStemmableNote = (obj: unknown): obj is StemmableNote => isCategory(obj, StemmableNote);\nexport const isStaveNote = (obj: unknown): obj is StaveNote => isCategory(obj, StaveNote);\nexport const isTabNote = (obj: unknown): obj is TabNote => isCategory(obj, TabNote);\nexport const isGraceNote = (obj: unknown): obj is GraceNote => isCategory(obj, GraceNote);\nexport const isGraceNoteGroup = (obj: unknown): obj is GraceNoteGroup => isCategory(obj, GraceNoteGroup);\nexport const isDot = (obj: unknown): obj is Dot => isCategory(obj, Dot);\nexport const isBarline = (obj: unknown): obj is Barline => isCategory(obj, Barline);\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/ban-types */\n\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object is an instance of the provided `cls`.\n * @param cls a JavaScript class, such as `StaveNote`. `cls` is a constructor function, and it has a `prototype` property, and\n *            optionally a `CATEGORY` property (used in VexFlow for flexible type checking).\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` is an instance of `ClassName`, or has a static `CATEGORY` property that matches `ClassName.CATEGORY`.\n */\nexport function isCategory<T>(\n  obj: any,\n  cls: Function & { prototype: T; CATEGORY?: string },\n  checkAncestors: boolean = true\n): obj is T {\n  // obj is NOT an instance of cls if it is: undefined, a number, a primitive string, or null.\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n  let constructorFcn = obj.constructor;\n  if (obj instanceof cls || constructorFcn === cls) {\n    return true;\n  }\n\n  // If instanceof fails, fall back to checking if the object's static .CATEGORY matches the class's .CATEGORY property.\n  const categoryToMatch = cls.CATEGORY;\n  if (categoryToMatch === undefined) {\n    return false;\n  }\n\n  if (checkAncestors) {\n    // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n    while (obj !== null) {\n      constructorFcn = obj.constructor;\n      if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === categoryToMatch) {\n        return true;\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n    return false;\n  } else {\n    // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n    return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === categoryToMatch;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\n\nimport { log, defined } from './util';\nimport { Fraction } from './fraction';\nimport { Flow } from './flow';\nimport { Music } from './music';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { ModifierContextState } from './modifiercontext';\nimport { Voice } from './voice';\nimport { Note } from './note';\nimport { Tickable } from './tickable';\nimport { isCategory, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\n\ntype Line = {\n  column: number;\n  line: number;\n  flatLine: boolean;\n  dblSharpLine: boolean;\n  numAcc: number;\n  width: number;\n};\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Accidental.DEBUG) log('Vex.Flow.Accidental', args);\n}\n\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\n\nexport class Accidental extends Modifier {\n  /** Accidental code provided to the constructor. */\n  readonly type: string;\n  /** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\n  static DEBUG: boolean;\n  protected accidental: {\n    code: string;\n    parenRightPaddingAdjustment: number;\n  };\n  protected render_options: {\n    parenLeftPadding: number;\n    stroke_px: number;\n    font_scale: number;\n    parenRightPadding: number;\n  };\n  protected cautionary: boolean;\n  // initialised in reset which is called by the constructor\n  protected glyph!: Glyph;\n  protected parenRight?: Glyph;\n  protected parenLeft?: Glyph;\n\n  /** Accidentals category string. */\n  static get CATEGORY(): string {\n    return 'Accidental';\n  }\n\n  /** Arrange accidentals inside a ModifierContext. */\n  static format(accidentals: Accidental[], state: ModifierContextState): void {\n    type AccidentalListItem = {\n      y?: number;\n      line: number;\n      shift: number;\n      acc: Accidental;\n      lineSpace?: number;\n    };\n\n    const musicFont = Flow.DEFAULT_FONT_STACK[0];\n    const noteheadAccidentalPadding = musicFont.lookupMetric('accidental.noteheadAccidentalPadding');\n    const leftShift = state.left_shift + noteheadAccidentalPadding;\n    const accidentalSpacing = musicFont.lookupMetric('accidental.accidentalSpacing');\n    const additionalPadding = musicFont.lookupMetric('accidental.leftPadding'); // padding to the left of all accidentals\n\n    // If there are no accidentals, we needn't format their positions\n    if (!accidentals || accidentals.length === 0) return;\n\n    const accList: AccidentalListItem[] = [];\n    let prevNote = undefined;\n    let shiftL = 0;\n\n    // First determine the accidentals' Y positions from the note.keys\n    for (let i = 0; i < accidentals.length; ++i) {\n      const acc = accidentals[i];\n      const note = acc.getNote();\n      const stave = note.getStave();\n      const index = acc.checkIndex();\n      const props = note.getKeyProps()[index];\n      if (note !== prevNote) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prevNote = note;\n      }\n      if (stave) {\n        const lineSpace = stave.getSpacingBetweenLines();\n        const y = stave.getYForLine(props.line);\n        const accLine = Math.round((y / lineSpace) * 2) / 2;\n        accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n      } else {\n        accList.push({ line: props.line, shift: shiftL, acc });\n      }\n    }\n\n    // Sort accidentals by line number.\n    accList.sort((a, b) => b.line - a.line);\n\n    // FIXME: Confusing name. Each object in this array has a property called `line`.\n    // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n    const lineList: Line[] = [];\n\n    // amount by which all accidentals must be shifted right or left for\n    // stem flipping, notehead shifting concerns.\n    let accShift = 0;\n    let previousLine = undefined;\n\n    // Create an array of unique line numbers (lineList) from accList\n    for (let i = 0; i < accList.length; i++) {\n      const acc = accList[i];\n\n      // if this is the first line, or a new line, add a lineList\n      if (previousLine === undefined || previousLine !== acc.line) {\n        lineList.push({\n          line: acc.line,\n          flatLine: true,\n          dblSharpLine: true,\n          numAcc: 0,\n          width: 0,\n          column: 0,\n        });\n      }\n      // if this accidental is not a flat, the accidental needs 3.0 lines lower\n      // clearance instead of 2.5 lines for b or bb.\n      // FIXME: Naming could use work. acc.acc is very awkward\n      if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n        lineList[lineList.length - 1].flatLine = false;\n      }\n\n      // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n      if (acc.acc.type !== '##') {\n        lineList[lineList.length - 1].dblSharpLine = false;\n      }\n\n      // Track how many accidentals are on this line:\n      lineList[lineList.length - 1].numAcc++;\n\n      // Track the total x_offset needed for this line which will be needed\n      // for formatting lines w/ multiple accidentals:\n\n      // width = accidental width + universal spacing between accidentals\n      lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n\n      // if this accShift is larger, use it to keep first column accidentals in the same line\n      accShift = acc.shift > accShift ? acc.shift : accShift;\n\n      previousLine = acc.line;\n    }\n\n    // ### Place Accidentals in Columns\n    //\n    // Default to a classic triangular layout (middle accidental farthest left),\n    // but follow exceptions as outlined in G. Read's _Music Notation_ and\n    // Elaine Gould's _Behind Bars_.\n    //\n    // Additionally, this implements different vertical collision rules for\n    // flats (only need 2.5 lines clearance below) and double sharps (only\n    // need 2.5 lines of clearance above or below).\n    //\n    // Classic layouts and exception patterns are found in the 'tables.js'\n    // in 'Vex.Flow.accidentalColumnsTable'\n    //\n    // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n    // using as few columns as possible for the verticle structure.\n    //\n    // TODO (?): Allow column to be specified for an accidental at run-time?\n\n    let totalColumns = 0;\n\n    // establish the boundaries for a group of notes with clashing accidentals:\n    for (let i = 0; i < lineList.length; i++) {\n      let noFurtherConflicts = false;\n      const groupStart = i;\n      let groupEnd = i;\n\n      while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n        // if this note conflicts with the next:\n        if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n          // include the next note in the group:\n          groupEnd++;\n        } else {\n          noFurtherConflicts = true;\n        }\n      }\n\n      // Gets an a line from the `lineList`, relative to the current group\n      const getGroupLine = (index: number) => lineList[groupStart + index];\n      const getGroupLines = (indexes: number[]) => indexes.map(getGroupLine);\n      const lineDifference = (indexA: number, indexB: number) => {\n        const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n        return a - b;\n      };\n\n      const notColliding = (...indexPairs: number[][]) =>\n        indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));\n\n      // Set columns for the lines in this group:\n      const groupLength = groupEnd - groupStart + 1;\n\n      // Set the accidental column for each line of the group\n      let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n\n      switch (groupLength) {\n        case 3:\n          if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n            endCase = 'second_on_bottom';\n          }\n          break;\n        case 4:\n          if (notColliding([0, 2], [1, 3])) {\n            endCase = 'spaced_out_tetrachord';\n          }\n          break;\n        case 5:\n          if (endCase === 'b' && notColliding([1, 3])) {\n            endCase = 'spaced_out_pentachord';\n            if (notColliding([0, 2], [2, 4])) {\n              endCase = 'very_spaced_out_pentachord';\n            }\n          }\n          break;\n        case 6:\n          if (notColliding([0, 3], [1, 4], [2, 5])) {\n            endCase = 'spaced_out_hexachord';\n          }\n          if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n            endCase = 'very_spaced_out_hexachord';\n          }\n          break;\n        default:\n          break;\n      }\n\n      let groupMember;\n      let column;\n      // If the group contains more than seven members, use ascending parallel lines\n      // of accidentals, using as few columns as possible while avoiding collisions.\n      if (groupLength >= 7) {\n        // First, determine how many columns to use:\n        let patternLength = 2;\n        let collisionDetected = true;\n        while (collisionDetected === true) {\n          collisionDetected = false;\n          for (let line = 0; line + patternLength < lineList.length; line++) {\n            if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n              collisionDetected = true;\n              patternLength++;\n              break;\n            }\n          }\n        }\n        // Then, assign a column to each line of accidentals\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = ((groupMember - i) % patternLength) + 1;\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n\n        // Otherwise, if the group contains fewer than seven members, use the layouts from\n        // the accidentalsColumnsTable housed in tables.js.\n      } else {\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = Flow.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n      }\n\n      // Increment i to the last note that was set, so that if a lower set of notes\n      // does not conflict at all with this group, it can have its own classic shape.\n      i = groupEnd;\n    }\n\n    // ### Convert Columns to x_offsets\n    //\n    // This keeps columns aligned, even if they have different accidentals within them\n    // which sometimes results in a larger x_offset than is an accidental might need\n    // to preserve the symmetry of the accidental shape.\n    //\n    // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n    // music with complex chord clusters.\n    //\n    // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n    // parallel columns.\n\n    // track each column's max width, which will be used as initial shift of later columns:\n    const columnWidths: number[] = [];\n    const columnXOffsets: number[] = [];\n    for (let i = 0; i <= totalColumns; i++) {\n      columnWidths[i] = 0;\n      columnXOffsets[i] = 0;\n    }\n\n    columnWidths[0] = accShift + leftShift;\n    columnXOffsets[0] = accShift + leftShift;\n\n    // Fill columnWidths with widest needed x-space;\n    // this is what keeps the columns parallel.\n    lineList.forEach((line) => {\n      if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;\n    });\n\n    for (let i = 1; i < columnWidths.length; i++) {\n      // this column's offset = this column's width + previous column's offset\n      columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n    }\n\n    const totalShift = columnXOffsets[columnXOffsets.length - 1];\n    // Set the xShift for each accidental according to column offsets:\n    let accCount = 0;\n    lineList.forEach((line) => {\n      let lineWidth = 0;\n      const lastAccOnLine = accCount + line.numAcc;\n      // handle all of the accidentals on a given line:\n      for (accCount; accCount < lastAccOnLine; accCount++) {\n        const xShift = columnXOffsets[line.column - 1] + lineWidth;\n        accList[accCount].acc.setXShift(xShift);\n        // keep track of the width of accidentals we've added so far, so that when\n        // we loop, we add space for them.\n        lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n        L('Line, accCount, shift: ', line.line, accCount, xShift);\n      }\n    });\n\n    // update the overall layout with the full width of the accidental shapes:\n    state.left_shift += totalShift + additionalPadding;\n  }\n\n  /** Helper function to determine whether two lines of accidentals collide vertically */\n  static checkCollision(line1: Line, line2: Line): boolean {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) {\n      // then line 2 is on top\n      clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n      if (line1.dblSharpLine) clearance -= 0.5;\n    } else {\n      // line 1 is on top\n      clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n      if (line2.dblSharpLine) clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n  }\n\n  /**\n   * Use this method to automatically apply accidentals to a set of `voices`.\n   * The accidentals will be remembered between all the voices provided.\n   * Optionally, you can also provide an initial `keySignature`.\n   */\n  static applyAccidentals(voices: Voice[], keySignature: string): void {\n    const tickPositions: number[] = [];\n    const tickNoteMap: Record<number, Tickable[]> = {};\n\n    // Sort the tickables in each voice by their tick position in the voice.\n    voices.forEach((voice) => {\n      const tickPosition = new Fraction(0, 1);\n      const tickable = voice.getTickables();\n      tickable.forEach((t) => {\n        if (t.shouldIgnoreTicks()) return;\n\n        const notesAtPosition = tickNoteMap[tickPosition.value()];\n\n        if (!notesAtPosition) {\n          tickPositions.push(tickPosition.value());\n          tickNoteMap[tickPosition.value()] = [t];\n        } else {\n          notesAtPosition.push(t);\n        }\n\n        tickPosition.add(t.getTicks());\n      });\n    });\n\n    const music = new Music();\n\n    // Default key signature is C major.\n    if (!keySignature) keySignature = 'C';\n\n    // Get the scale map, which represents the current state of each pitch.\n    const scaleMap = music.createScaleMap(keySignature);\n\n    tickPositions.forEach((tickPos: number) => {\n      const tickables = tickNoteMap[tickPos];\n\n      // Array to store all pitches that modified accidental states\n      // at this tick position\n      const modifiedPitches: string[] = [];\n\n      const processNote = (t: Tickable) => {\n        // Only StaveNote implements .addAccidental(), which is used below.\n        if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n          return;\n        }\n\n        // Go through each key and determine if an accidental should be applied.\n        const staveNote = t;\n        staveNote.keys.forEach((keyString: string, keyIndex: number) => {\n          const key = music.getNoteParts(keyString.split('/')[0]);\n\n          // Force a natural for every key without an accidental\n          const accidentalString = key.accidental || 'n';\n          const pitch = key.root + accidentalString;\n\n          // Determine if the current pitch has the same accidental\n          // as the scale state\n          const sameAccidental = scaleMap[key.root] === pitch;\n\n          // Determine if an identical pitch in the chord already\n          // modified the accidental state\n          const previouslyModified = modifiedPitches.indexOf(pitch) > -1;\n\n          // Remove accidentals\n          staveNote.getModifiers().forEach((modifier, index) => {\n            if (\n              isCategory(modifier, Accidental) &&\n              modifier.type == accidentalString &&\n              modifier.getIndex() == keyIndex\n            ) {\n              staveNote.getModifiers().splice(index, 1);\n            }\n          });\n\n          // Add the accidental to the StaveNote\n          if (!sameAccidental || (sameAccidental && previouslyModified)) {\n            // Modify the scale map so that the root pitch has an\n            // updated state\n            scaleMap[key.root] = pitch;\n\n            // Create the accidental\n            const accidental = new Accidental(accidentalString);\n\n            // Attach the accidental to the StaveNote\n            staveNote.addAccidental(keyIndex, accidental);\n\n            // Add the pitch to list of pitches that modified accidentals\n            modifiedPitches.push(pitch);\n          }\n        });\n\n        // process grace notes\n        staveNote.getModifiers().forEach((modifier: Modifier) => {\n          if (isGraceNoteGroup(modifier)) {\n            modifier.getGraceNotes().forEach(processNote);\n          }\n        });\n      };\n\n      tickables.forEach(processNote);\n    });\n  }\n\n  /**\n   * Create accidental.\n   * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\n   * For example: `#`, `##`, `b`, `n`, etc.\n   */\n  constructor(type: string) {\n    super();\n\n    L('New accidental: ', type);\n\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      // Font size for glyphs\n      font_scale: 38,\n\n      // Length of stroke across heads above or below the stave.\n      stroke_px: 3,\n\n      // Padding between accidental and parentheses on each side\n      parenLeftPadding: 2,\n      parenRightPadding: 2,\n    };\n\n    this.accidental = Flow.accidentalCodes(this.type);\n    defined(this.accidental, 'ArgumentError', `Unknown accidental type: ${type}`);\n\n    // Cautionary accidentals have parentheses around them\n    this.cautionary = false;\n\n    this.reset();\n  }\n\n  protected reset(): void {\n    const fontScale = this.render_options.font_scale;\n    this.glyph = new Glyph(this.accidental.code, fontScale);\n    this.glyph.setOriginX(1.0);\n\n    if (this.cautionary) {\n      this.parenLeft = new Glyph(Flow.accidentalCodes('{').code, fontScale);\n      this.parenRight = new Glyph(Flow.accidentalCodes('}').code, fontScale);\n      this.parenLeft.setOriginX(1.0);\n      this.parenRight.setOriginX(1.0);\n    }\n  }\n\n  /** Get width in pixels. */\n  getWidth(): number {\n    if (this.cautionary) {\n      const parenLeft = defined(this.parenLeft);\n      const parenRight = defined(this.parenRight);\n      const parenWidth =\n        parenLeft.getMetrics().width +\n        parenRight.getMetrics().width +\n        this.render_options.parenLeftPadding +\n        this.render_options.parenRightPadding;\n      return this.glyph.getMetrics().width + parenWidth;\n    } else {\n      return this.glyph.getMetrics().width;\n    }\n  }\n\n  /** Attach this accidental to `note`, which must be a `StaveNote`. */\n  setNote(note: Note): this {\n    defined(note, 'ArgumentError', `Bad note value: ${note}`);\n\n    this.note = note;\n\n    // Accidentals attached to grace notes are rendered smaller.\n    if (isGraceNote(note)) {\n      this.render_options.font_scale = 25;\n      this.reset();\n    }\n    return this;\n  }\n\n  /** If called, draws parenthesis around accidental. */\n  setAsCautionary(): this {\n    this.cautionary = true;\n    this.render_options.font_scale = 28;\n    this.reset();\n    return this;\n  }\n\n  /** Render accidental onto canvas. */\n  draw(): void {\n    const {\n      type,\n      position,\n      index,\n      cautionary,\n      x_shift,\n      y_shift,\n      glyph,\n      render_options: { parenLeftPadding, parenRightPadding },\n    } = this;\n\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    // Figure out the start `x` and `y` coordinates for note and index.\n    const start = note.getModifierStartXY(position, index);\n    let accX = start.x + x_shift;\n    const accY = start.y + y_shift;\n    L('Rendering: ', type, accX, accY);\n\n    if (!cautionary) {\n      glyph.render(ctx, accX, accY);\n    } else {\n      const parenLeft = defined(this.parenLeft);\n      const parenRight = defined(this.parenRight);\n\n      // Render the accidental in parentheses.\n      parenRight.render(ctx, accX, accY);\n      accX -= parenRight.getMetrics().width;\n      accX -= parenRightPadding;\n      accX -= this.accidental.parenRightPaddingAdjustment;\n      glyph.render(ctx, accX, accY);\n      accX -= glyph.getMetrics().width;\n      accX -= parenLeftPadding;\n      parenLeft.render(ctx, accX, accY);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { log } from './util';\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { ModifierContext } from './modifiercontext';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (BarNote.DEBUG) log('Vex.Flow.BarNote', args);\n}\n\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'BarNote';\n  }\n\n  protected metrics: { widths: Record<string, number> };\n  // Initialized by the constructor via this.setType(type)\n  protected type!: BarlineType;\n\n  constructor(type: string | BarlineType = BarlineType.SINGLE) {\n    super({ duration: 'b' });\n\n    this.metrics = {\n      widths: {},\n    };\n\n    const TYPE = BarlineType;\n    this.metrics.widths = {\n      [TYPE.SINGLE]: 8,\n      [TYPE.DOUBLE]: 12,\n      [TYPE.END]: 15,\n      [TYPE.REPEAT_BEGIN]: 14,\n      [TYPE.REPEAT_END]: 14,\n      [TYPE.REPEAT_BOTH]: 18,\n      [TYPE.NONE]: 0,\n    };\n\n    // Tell the formatter that bar notes have no duration.\n    this.ignore_ticks = true;\n    this.setType(type);\n  }\n\n  /** Get the type of bar note.*/\n  getType(): BarlineType {\n    return this.type;\n  }\n\n  /** Set the type of bar note. */\n  setType(type: string | BarlineType): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    // Set width to width of relevant `Barline`.\n    this.setWidth(this.metrics.widths[this.type]);\n    return this;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  /** Overridden to ignore. */\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Render note to stave. */\n  draw(): void {\n    const ctx = this.checkContext();\n    L('Rendering bar line at: ', this.getAbsoluteX());\n    if (this.style) this.applyStyle(ctx);\n    const barline = new Barline(this.type);\n    barline.setX(this.getAbsoluteX());\n    barline.draw(this.checkStave());\n    if (this.style) this.restoreStyle(ctx);\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n// MIT License\n\nimport { Note } from './note';\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\nimport { RenderContext } from './types/common';\nimport { BoundingBox } from './boundingbox';\nimport { ClefType } from './clef';\nimport { ModifierContext } from './modifiercontext';\n\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n  static get CATEGORY(): string {\n    return 'ClefNote';\n  }\n\n  protected clef_obj: Clef;\n  protected type: string;\n  protected clef: ClefType;\n\n  constructor(type: string, size?: string, annotation?: string) {\n    super({ duration: 'b' });\n\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /** Set clef type, size and annotation. */\n  setType(type: string, size: string, annotation: string): this {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  /** Get associated clef. */\n  getClef(): ClefType {\n    return this.clef;\n  }\n\n  /** Set associated context. */\n  setContext(context: RenderContext): this {\n    super.setContext(context);\n    this.glyph.setContext(this.getContext());\n    return this;\n  }\n\n  /** Get bounding box. */\n  getBoundingBox(): BoundingBox | undefined {\n    return super.getBoundingBox();\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  /** Set preformatted. */\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Render clef note. */\n  draw(): void {\n    const stave = this.checkStave();\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.getContext());\n    }\n\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n\n    this.glyph.setStave(stave);\n    this.glyph.setYShift(stave.getYForLine(this.clef.line ?? 0) - stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x);\n\n    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n      if (!attachment.getContext()) {\n        attachment.setContext(this.getContext());\n      }\n      attachment.setStave(stave);\n      attachment.setYShift(stave.getYForLine(this.clef_obj.annotation.line) - stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\n\nimport { log } from './util';\nimport { Note, NoteStruct } from './note';\nimport { TickContext } from './tickcontext';\nimport { RenderContext } from './types/common';\n\nexport interface CrescendoParams {\n  reverse: boolean;\n  height: number;\n  y: number;\n  end_x: number;\n  begin_x: number;\n}\n\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Crescendo.DEBUG) log('Vex.Flow.Crescendo', args);\n}\n\n// Private helper to draw the hairpin\nfunction renderHairpin(ctx: RenderContext, params: CrescendoParams) {\n  const begin_x = params.begin_x;\n  const end_x = params.end_x;\n  const y = params.y;\n  const half_height = params.height / 2;\n\n  ctx.beginPath();\n\n  if (params.reverse) {\n    ctx.moveTo(begin_x, y - half_height);\n    ctx.lineTo(end_x, y);\n    ctx.lineTo(begin_x, y + half_height);\n  } else {\n    ctx.moveTo(end_x, y - half_height);\n    ctx.lineTo(begin_x, y);\n    ctx.lineTo(end_x, y + half_height);\n  }\n\n  ctx.stroke();\n  ctx.closePath();\n}\n\nexport class Crescendo extends Note {\n  static DEBUG: boolean;\n\n  /** Crescendo category string. */\n  static get CATEGORY(): string {\n    return 'Crescendo';\n  }\n\n  protected decrescendo: boolean;\n  protected height: number;\n  protected line: number;\n  protected options = {\n    // Extensions to the length of the crescendo on either side\n    extend_left: 0,\n    extend_right: 0,\n    // Vertical shift\n    y_shift: 0,\n  };\n\n  // Initialize the crescendo's properties\n  constructor(noteStruct: NoteStruct) {\n    super(noteStruct);\n\n    // Whether the object is a decrescendo\n    this.decrescendo = false;\n\n    // The staff line to be placed on\n    this.line = noteStruct.line || 0;\n\n    // The height at the open end of the cresc/decresc\n    this.height = 15;\n  }\n\n  // Set the line to center the element on\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Set the full height at the open end\n  setHeight(height: number): this {\n    this.height = height;\n    return this;\n  }\n\n  // Set whether the sign should be a descresendo by passing a bool\n  // to `decresc`\n  setDecrescendo(decresc: boolean): this {\n    this.decrescendo = decresc;\n    return this;\n  }\n\n  // Preformat the note\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Render the Crescendo object onto the canvas\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    this.setRendered();\n\n    const tick_context = this.getTickContext();\n    const next_context = TickContext.getNextContext(tick_context);\n\n    const begin_x = this.getAbsoluteX();\n    const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();\n    const y = stave.getYForLine(this.line + -3) + 1;\n\n    L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\n\n    renderHairpin(ctx, {\n      begin_x: begin_x - this.options.extend_left,\n      end_x: end_x + this.options.extend_right,\n      y: y + this.options.y_shift,\n      height: this.height,\n      reverse: this.decrescendo,\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { Note } from './note';\n\nexport interface CurveOptions {\n  /** Two control points for the bezier curves. */\n  cps?: { x: number; y: number }[];\n  thickness?: number;\n  x_shift?: number;\n  y_shift?: number;\n  position?: string | number;\n  position_end?: string | number;\n  invert?: boolean;\n}\n\nexport enum CurvePosition {\n  NEAR_HEAD = 1,\n  NEAR_TOP = 2,\n}\n\nexport class Curve extends Element {\n  static get CATEGORY(): string {\n    return 'Curve';\n  }\n\n  protected readonly render_options: Required<CurveOptions>;\n  protected from: Note;\n  protected to: Note;\n\n  static get Position(): typeof CurvePosition {\n    return CurvePosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      nearHead: CurvePosition.NEAR_HEAD,\n      nearTop: CurvePosition.NEAR_TOP,\n    };\n  }\n\n  // from: Start note\n  // to: End note\n  // options:\n  //    cps: List of control points\n  //    x_shift: pixels to shift\n  //    y_shift: pixels to shift\n  constructor(from: Note, to: Note, options: CurveOptions) {\n    super();\n\n    this.render_options = {\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      position: CurvePosition.NEAR_HEAD,\n      position_end: CurvePosition.NEAR_HEAD,\n      invert: false,\n      cps: [\n        { x: 0, y: 10 },\n        { x: 0, y: 10 },\n      ],\n      ...options,\n    };\n\n    this.from = from;\n    this.to = to;\n  }\n\n  setNotes(from: Note, to: Note): this {\n    if (!from && !to) {\n      throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n    }\n\n    this.from = from;\n    this.to = to;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.from || !this.to;\n  }\n\n  renderCurve(params: { last_y: number; last_x: number; first_y: number; first_x: number; direction: number }): void {\n    const ctx = this.checkContext();\n\n    const x_shift = this.render_options.x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    const first_x = params.first_x + x_shift;\n    const first_y = params.first_y + y_shift;\n    const last_x = params.last_x - x_shift;\n    const last_y = params.last_y + y_shift;\n    const thickness = this.render_options.thickness;\n\n    const cps = this.render_options.cps;\n    const { x: cp0x, y: cp0y } = cps[0];\n    const { x: cp1x, y: cp1y } = cps[1];\n\n    const cp_spacing = (last_x - first_x) / (cps.length + 2);\n\n    ctx.beginPath();\n    ctx.moveTo(first_x, first_y);\n    ctx.bezierCurveTo(\n      first_x + cp_spacing + cp0x,\n      first_y + cp0y * params.direction,\n      last_x - cp_spacing + cp1x,\n      last_y + cp1y * params.direction,\n      last_x,\n      last_y\n    );\n    ctx.bezierCurveTo(\n      last_x - cp_spacing + cp1x,\n      last_y + (cp1y + thickness) * params.direction,\n      first_x + cp_spacing + cp0x,\n      first_y + (cp0y + thickness) * params.direction,\n      first_x,\n      first_y\n    );\n    ctx.stroke();\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.from;\n    const last_note = this.to;\n    let first_x;\n    let last_x;\n    let first_y;\n    let last_y;\n    let stem_direction = 0;\n\n    let metric = 'baseY';\n    let end_metric = 'baseY';\n\n    function getPosition(position: string | number) {\n      return typeof position === 'string' ? Curve.PositionString[position] : position;\n    }\n    const position = getPosition(this.render_options.position);\n    const position_end = getPosition(this.render_options.position_end);\n\n    if (position === CurvePosition.NEAR_TOP) {\n      metric = 'topY';\n      end_metric = 'topY';\n    }\n\n    if (position_end === CurvePosition.NEAR_HEAD) {\n      end_metric = 'baseY';\n    } else if (position_end === CurvePosition.NEAR_TOP) {\n      end_metric = 'topY';\n    }\n\n    if (first_note) {\n      first_x = first_note.getTieRightX();\n      stem_direction = first_note.getStemDirection();\n      first_y = first_note.getStemExtents()[metric];\n    } else {\n      const stave = last_note.checkStave();\n      first_x = stave.getTieStartX();\n      first_y = last_note.getStemExtents()[metric];\n    }\n\n    if (last_note) {\n      last_x = last_note.getTieLeftX();\n      stem_direction = last_note.getStemDirection();\n      last_y = last_note.getStemExtents()[end_metric];\n    } else {\n      const stave = first_note.checkStave();\n      last_x = stave.getTieEndX();\n      last_y = first_note.getStemExtents()[end_metric];\n    }\n\n    this.renderCurve({\n      first_x,\n      last_x,\n      first_y,\n      last_y,\n      direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\n    });\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// A generic text parsing class for VexFlow.\n\nimport { RuntimeError, log } from './util';\n\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (Parser.DEBUG) log('Vex.Flow.Parser', args);\n}\n\nconst NO_ERROR_POS = -1;\n\nexport type Match = string | Match[] | null;\nexport type RuleFunction = () => Rule;\nexport type TriggerFunction = (state?: { matches: Match[] }) => void;\n\nexport interface Rule {\n  // Lexer Rules\n  token?: string; // The token property is a string that is compiled into a RegExp.\n  noSpace?: boolean;\n\n  // Parser Rules\n  expect?: RuleFunction[];\n  zeroOrMore?: boolean;\n  oneOrMore?: boolean;\n  maybe?: boolean;\n  or?: boolean;\n  run?: TriggerFunction;\n}\n\nexport interface Result {\n  success: boolean;\n\n  // Lexer Results\n  pos?: number;\n  incrementPos?: number;\n  matchedString?: string;\n\n  // Parser Results\n  matches?: Match[];\n  numMatches?: number;\n  results?: GroupedResults;\n  errorPos?: number; // Set to NO_ERROR if successful. N if there is an error in the string.\n}\n\n// Represents a mixed array containing Result and/or Result[].\n// The grouping is determined by the structure of the Grammar.\ntype GroupedResults = (Result | Result[])[];\n\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r: Result | Result[]): Match {\n  if ('matchedString' in r) return r.matchedString as string; // string\n  if ('results' in r) return flattenMatches(r.results as Result[]);\n  const results = r as Result[];\n  if (results.length === 1) return flattenMatches(results[0]);\n  if (results.length === 0) return null;\n  return results.map(flattenMatches); // nested array\n}\n\nexport interface Grammar {\n  begin(): RuleFunction;\n}\n\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n  static DEBUG: boolean = false;\n\n  protected grammar: Grammar;\n\n  protected line: string; // Use RegExp to extract tokens from this line.\n  protected pos: number;\n  protected errorPos: number;\n\n  // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n  // the EasyScore grammar in easyscore.ts.\n  constructor(grammar: Grammar) {\n    this.grammar = grammar;\n    this.line = '';\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Parse `line` using current grammar. Returns `{success: true}` if the\n  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n  // where `errorPos` is the location of the error in the string.\n  parse(line: string): Result {\n    this.line = line;\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n    const result = this.expect(this.grammar.begin());\n    result.errorPos = this.errorPos;\n    return result;\n  }\n\n  matchFail(returnPos: number): void {\n    if (this.errorPos === NO_ERROR_POS) this.errorPos = this.pos;\n    this.pos = returnPos;\n  }\n\n  matchSuccess(): void {\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Look for `token` in this.line[this.pos], and return success\n  // if one is found. `token` is specified as a regular expression.\n  matchToken(token: string, noSpace: boolean = false): Result {\n    const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n    const workingLine = this.line.slice(this.pos);\n    const result = workingLine.match(regexp);\n    if (result !== null) {\n      return {\n        success: true,\n        matchedString: result[2],\n        incrementPos: result[1].length,\n        pos: this.pos,\n      };\n    } else {\n      return { success: false, pos: this.pos };\n    }\n  }\n\n  // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n  // set, then return success even if the token is not found, but reset\n  // the position before exiting.\n  // TODO: expectOne(...) is never called with the `maybe` parameter.\n  expectOne(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n\n    let allMatches = true;\n    let oneMatch = false;\n    maybe = maybe === true || rule.maybe === true;\n\n    // Execute all sub rules in sequence.\n    if (rule.expect) {\n      for (const next of rule.expect) {\n        const localPos = this.pos;\n        const result = this.expect(next);\n\n        // If `rule.or` is set, then return success if any one\n        // of the subrules match, else all subrules must match.\n        if (result.success) {\n          results.push(result);\n          oneMatch = true;\n          if (rule.or) break;\n        } else {\n          allMatches = false;\n          if (!rule.or) {\n            this.pos = localPos;\n            break;\n          }\n        }\n      }\n    }\n\n    const gotOne = (rule.or && oneMatch) || allMatches;\n    const success = gotOne || maybe === true;\n    const numMatches = gotOne ? 1 : 0;\n    if (maybe && !gotOne) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n  // then a failed match is also a success (but the position is reset).\n  expectOneOrMore(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n    let numMatches = 0;\n    let more = true;\n\n    do {\n      const result = this.expectOne(rule);\n      if (result.success && result.results) {\n        numMatches++;\n        results.push(result.results as Result[]);\n      } else {\n        more = false;\n      }\n    } while (more);\n\n    const success = numMatches > 0 || maybe === true;\n    if (maybe && !(numMatches > 0)) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n  expectZeroOrMore(rule: Rule): Result {\n    return this.expectOneOrMore(rule, true);\n  }\n\n  // Execute the rule produced by the provided `rules` function. This\n  // offloads to one of the above matchers and consolidates the results. It is also\n  // responsible for executing any code triggered by the rule (in `rule.run`.)\n  expect(ruleFunc: RuleFunction): Result {\n    L('Evaluating rule function:', ruleFunc);\n    if (!ruleFunc) {\n      throw new RuntimeError('Invalid rule function');\n    }\n    let result: Result;\n\n    // Get rule from Grammar class.\n    // expect(...) handles both lexing & parsing:\n    // - lexer rules produce tokens.\n    // - parser rules produce expressions which may trigger code via the\n    //   { run: () => ... } trigger functions in easyscore.ts.\n    //   These functions build the VexFlow objects that are displayed on screen.\n    const rule: Rule = ruleFunc.bind(this.grammar)();\n    if (rule.token) {\n      // A lexer rule has a `token` property.\n      // Base case: parse the regex and throw an error if the\n      // line doesn't match.\n      result = this.matchToken(rule.token, rule.noSpace === true);\n      if (result.success) {\n        // Token match! Update position and throw away parsed portion\n        // of string.\n        this.pos += result.incrementPos as number;\n      }\n    } else if (rule.expect) {\n      // A parser rule has an `expect` property.\n      if (rule.oneOrMore) {\n        result = this.expectOneOrMore(rule);\n      } else if (rule.zeroOrMore) {\n        result = this.expectZeroOrMore(rule);\n      } else {\n        result = this.expectOne(rule);\n      }\n    } else {\n      L(rule);\n      throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n    }\n\n    // If there's a trigger attached to this rule, then run it.\n    // Make the matches accessible through `state.matches` in the\n    // `run: (state) => ...` trigger.\n    const matches: Match[] = [];\n    result.matches = matches;\n    if (result.results) {\n      result.results.forEach((r) => matches.push(flattenMatches(r)));\n    }\n    if (rule.run && result.success) {\n      rule.run({ matches });\n    }\n    return result;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Accidental } from './accidental';\nimport { Articulation } from './articulation';\nimport { Factory } from './factory';\nimport { FretHandFinger } from './frethandfinger';\nimport { Grammar, Parser, Match, Result, Rule, RuleFunction } from './parser';\nimport { RenderContext } from './types/common';\nimport { RuntimeError, log, defined } from './util';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { TupletOptions } from './tuplet';\nimport { Voice } from './voice';\nimport { Music } from './music';\nimport { Stem } from 'stem';\n\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (EasyScore.DEBUG) log('Vex.Flow.EasyScore', args);\n}\n\n// eslint-disable-next-line\ntype CommitHook = (obj: any, note: StaveNote, builder: Builder) => void;\n\nclass EasyScoreGrammar implements Grammar {\n  builder: Builder;\n\n  constructor(builder: Builder) {\n    this.builder = builder;\n  }\n\n  begin(): RuleFunction {\n    return this.LINE;\n  }\n\n  LINE(): Rule {\n    return {\n      expect: [this.PIECE, this.PIECES, this.EOL],\n    };\n  }\n  PIECE(): Rule {\n    return {\n      expect: [this.CHORDORNOTE, this.PARAMS],\n      run: () => this.builder.commitPiece(),\n    };\n  }\n  PIECES(): Rule {\n    return {\n      expect: [this.COMMA, this.PIECE],\n      zeroOrMore: true,\n    };\n  }\n  PARAMS(): Rule {\n    return {\n      expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n    };\n  }\n  CHORDORNOTE(): Rule {\n    return {\n      expect: [this.CHORD, this.SINGLENOTE],\n      or: true,\n    };\n  }\n  CHORD(): Rule {\n    return {\n      expect: [this.LPAREN, this.NOTES, this.RPAREN],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addChord(state!.matches[1] as Match[]),\n    };\n  }\n  NOTES(): Rule {\n    return {\n      expect: [this.NOTE],\n      oneOrMore: true,\n    };\n  }\n  NOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n    };\n  }\n  SINGLENOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n      run: (state) => {\n        // eslint-disable-next-line\n        const s = state!;\n        this.builder.addSingleNote(s.matches[0] as string, s.matches[1] as string, s.matches[2] as string);\n      },\n    };\n  }\n  ACCIDENTAL(): Rule {\n    return {\n      expect: [this.MICROTONES, this.ACCIDENTALS],\n      maybe: true,\n      or: true,\n    };\n  }\n  DOTS(): Rule {\n    return {\n      expect: [this.DOT],\n      zeroOrMore: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDots(state!.matches),\n    };\n  }\n  TYPE(): Rule {\n    return {\n      expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteType(state!.matches[2] as string),\n    };\n  }\n  DURATION(): Rule {\n    return {\n      expect: [this.SLASH, this.DURATIONS],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDuration(state!.matches[1] as string),\n    };\n  }\n  OPTS(): Rule {\n    return {\n      expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n      maybe: true,\n    };\n  }\n  KEYVALS(): Rule {\n    return {\n      expect: [this.COMMA, this.KEYVAL],\n      zeroOrMore: true,\n    };\n  }\n  KEYVAL(): Rule {\n    const unquote = (str: string) => str.slice(1, -1);\n\n    return {\n      expect: [this.KEY, this.EQUALS, this.VAL],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addNoteOption(state!.matches[0] as string, unquote(state!.matches[2] as string)),\n    };\n  }\n  VAL(): Rule {\n    return {\n      expect: [this.SVAL, this.DVAL],\n      or: true,\n    };\n  }\n\n  KEY(): Rule {\n    return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n  }\n  DVAL(): Rule {\n    return { token: '[\"][^\"]*[\"]' };\n  }\n  SVAL(): Rule {\n    return { token: \"['][^']*[']\" };\n  }\n  NOTENAME(): Rule {\n    return { token: '[a-gA-G]' };\n  }\n  OCTAVE(): Rule {\n    return { token: '[0-9]+' };\n  }\n  ACCIDENTALS(): Rule {\n    return { token: 'bb|b|##|#|n' };\n  }\n  MICROTONES(): Rule {\n    return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n  }\n  DURATIONS(): Rule {\n    return { token: '[0-9whq]+' };\n  }\n  TYPES(): Rule {\n    return { token: '[rRsSxX]' };\n  }\n  LPAREN(): Rule {\n    return { token: '[(]' };\n  }\n  RPAREN(): Rule {\n    return { token: '[)]' };\n  }\n  COMMA(): Rule {\n    return { token: '[,]' };\n  }\n  DOT(): Rule {\n    return { token: '[.]' };\n  }\n  SLASH(): Rule {\n    return { token: '[/]' };\n  }\n  MAYBESLASH(): Rule {\n    return { token: '[/]?' };\n  }\n  EQUALS(): Rule {\n    return { token: '[=]' };\n  }\n  LBRACKET(): Rule {\n    return { token: '\\\\[' };\n  }\n  RBRACKET(): Rule {\n    return { token: '\\\\]' };\n  }\n  EOL(): Rule {\n    return { token: '$' };\n  }\n}\n\ninterface NotePiece {\n  key: string;\n  accid?: string | null;\n  octave?: string;\n}\n\nclass Piece {\n  chord: NotePiece[] = [];\n  duration: string;\n  dots: number = 0;\n  type?: string;\n  options: { [x: string]: string } = {};\n  constructor(duration: string) {\n    this.duration = duration;\n  }\n}\n\ninterface BuilderElements {\n  notes: StaveNote[];\n  accidentals: (Accidental | undefined)[][];\n}\n\n// Extending Record<string, any> allows arbitrary properties via Builder.reset() & EasyScore.parse().\n// eslint-disable-next-line\nexport interface BuilderOptions extends Record<string, any> {\n  stem?: string;\n  clef?: string;\n}\n\nexport class Builder {\n  factory: Factory;\n  // Initialized by the constructor via this.reset().\n  elements!: BuilderElements;\n  // Initialized by the constructor via this.reset().\n  options!: BuilderOptions;\n  // Initialized by the constructor via this.resetPiece().\n  piece!: Piece;\n  commitHooks: CommitHook[] = [];\n  rollingDuration!: string;\n\n  constructor(factory: Factory) {\n    this.factory = factory;\n    this.reset();\n  }\n\n  reset(options?: BuilderOptions): void {\n    this.options = {\n      stem: 'auto',\n      clef: 'treble',\n      ...options,\n    };\n    this.elements = { notes: [], accidentals: [] };\n    this.rollingDuration = '8';\n    this.resetPiece();\n  }\n\n  getFactory(): Factory {\n    return this.factory;\n  }\n\n  getElements(): BuilderElements {\n    return this.elements;\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.commitHooks.push(commitHook);\n  }\n\n  resetPiece(): void {\n    L('resetPiece');\n    this.piece = new Piece(this.rollingDuration);\n  }\n\n  setNoteDots(dots: Match[]): void {\n    L('setNoteDots:', dots);\n    if (dots) this.piece.dots = dots.length;\n  }\n\n  setNoteDuration(duration?: string): void {\n    L('setNoteDuration:', duration);\n    this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n  }\n\n  setNoteType(type?: string): void {\n    L('setNoteType:', type);\n    if (type) this.piece.type = type;\n  }\n\n  addNoteOption(key: string, value: string): void {\n    L('addNoteOption: key:', key, 'value:', value);\n    this.piece.options[key] = value;\n  }\n\n  addNote(key?: string, accid?: string | null, octave?: string): void {\n    L('addNote:', key, accid, octave);\n    this.piece.chord.push({\n      key: key as string,\n      accid,\n      octave,\n    });\n  }\n\n  addSingleNote(key: string, accid?: string | null, octave?: string): void {\n    L('addSingleNote:', key, accid, octave);\n    this.addNote(key, accid, octave);\n  }\n\n  // notes is an array with 3 entries\n  addChord(notes: Match[]): void {\n    L('startChord');\n    if (typeof notes[0] !== 'object') {\n      this.addSingleNote(notes[0]);\n    } else {\n      notes.forEach((n) => {\n        if (n) this.addNote(...(n as string[])); // n => [string, string | null, string]\n      });\n    }\n    L('endChord');\n  }\n\n  commitPiece(): void {\n    L('commitPiece');\n    const { factory } = this;\n\n    if (!factory) return;\n\n    const options = { ...this.options, ...this.piece.options };\n\n    // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n    // e.g., auto | up | down\n    const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n    // e.g., treble | bass\n    const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n\n    const { chord, duration, dots, type } = this.piece;\n\n    // Create a string[] that will be assigned to the .keys property of the StaveNote.\n    // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n    // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n    const standardAccidentals = Music.accidentals;\n    const keys = chord.map(\n      (notePiece) =>\n        notePiece.key +\n        (standardAccidentals.includes(notePiece.accid ?? '') ? notePiece.accid : '') +\n        '/' +\n        notePiece.octave\n    );\n    const auto_stem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n\n    // Build a StaveNote using the information we gathered.\n    const note = factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });\n    if (!auto_stem) note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n\n    // Attach accidentals.\n    const accidentals: (Accidental | undefined)[] = [];\n    chord.forEach((notePiece: NotePiece, index: number) => {\n      const accid = notePiece.accid;\n      if (typeof accid === 'string') {\n        const accidental = factory.Accidental({ type: accid });\n        note.addAccidental(index, accidental);\n        accidentals.push(accidental);\n      } else {\n        accidentals.push(undefined);\n      }\n    });\n\n    // Attach dots.\n    for (let i = 0; i < dots; i++) note.addDotToAll();\n\n    this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n\n    this.elements.notes.push(note);\n    this.elements.accidentals.push(accidentals);\n    this.resetPiece();\n  }\n}\n\nexport interface EasyScoreOptions {\n  factory?: Factory;\n  builder?: Builder;\n  commitHooks?: CommitHook[];\n  throwOnError?: boolean;\n}\n\n// Extending Record<string, any> allows arbitrary properties via set(defaults).\n// eslint-disable-next-line\nexport interface EasyScoreDefaults extends Record<string, any> {\n  clef?: string;\n  time?: string;\n  stem?: string;\n}\n\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options: { id?: string }, note: StaveNote) {\n  if (options.id === undefined) return;\n  note.setAttribute('id', options.id);\n}\n\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options: { class?: string }, note: StaveNote) {\n  if (options.class === undefined) return;\n  options.class.split(commaSeparatedRegex).forEach((className: string) => note.addClass(className));\n}\n\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n  static DEBUG: boolean = false;\n\n  defaults: EasyScoreDefaults = {\n    clef: 'treble',\n    time: '4/4',\n    stem: 'auto',\n  };\n\n  // options, factory, builder, grammar, and parser are all\n  // initialized by the constructor via this.setOptions().\n  options!: EasyScoreOptions;\n  factory!: Factory;\n  builder!: Builder;\n  grammar!: EasyScoreGrammar;\n  parser!: Parser;\n\n  constructor(options: EasyScoreOptions = {}) {\n    this.setOptions(options);\n  }\n\n  /**\n   * Set the score defaults.\n   * clef must be set appropriately to avoid errors when adding Staves.\n   * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n   * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n   * @param defaults.stem default stem arrangement (auto | up | down)\n   * @returns this\n   */\n  set(defaults: EasyScoreDefaults): this {\n    this.defaults = { ...this.defaults, ...defaults };\n    return this;\n  }\n\n  /**\n   * @param options.factory is required.\n   * @returns this\n   */\n  setOptions(options: EasyScoreOptions): this {\n    // eslint-disable-next-line\n    const factory = options.factory!; // ! operator, because options.factory was set in Factory.EasyScore().\n    const builder = options.builder ?? new Builder(factory);\n\n    this.options = {\n      commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook],\n      throwOnError: false,\n      ...options,\n      factory,\n      builder,\n    };\n\n    this.factory = factory;\n    this.builder = builder;\n    this.grammar = new EasyScoreGrammar(this.builder);\n    this.parser = new Parser(this.grammar);\n    this.options.commitHooks?.forEach((commitHook) => this.addCommitHook(commitHook));\n    return this;\n  }\n\n  setContext(context: RenderContext): this {\n    this.factory.setContext(context);\n    return this;\n  }\n\n  parse(line: string, options: BuilderOptions = {}): Result {\n    this.builder.reset(options);\n    const result = this.parser.parse(line);\n    if (!result.success && this.options.throwOnError) {\n      L(result);\n      throw new RuntimeError('Error parsing line: ' + line);\n    }\n    return result;\n  }\n\n  beam(notes: StaveNote[], options?: { autoStem?: boolean; secondaryBeamBreaks?: number[] }): StaveNote[] {\n    this.factory.Beam({ notes, options });\n    return notes;\n  }\n\n  tuplet(notes: StaveNote[], options?: TupletOptions): StaveNote[] {\n    this.factory.Tuplet({ notes, options });\n    return notes;\n  }\n\n  notes(line: string, options: BuilderOptions = {}): StaveNote[] {\n    options = { clef: this.defaults.clef, stem: this.defaults.stem, ...options };\n    this.parse(line, options);\n    return this.builder.getElements().notes;\n  }\n\n  voice(notes: Note[], options: { time?: string; options?: { softmaxFactor: number } } = {}): Voice {\n    options = { time: this.defaults.time, ...options };\n    return this.factory.Voice(options).addTickables(notes);\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.builder.addCommitHook(commitHook);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { Note } from './note';\nimport { Glyph } from './glyph';\nimport { TextNoteStruct } from './textnote';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextDynamics.DEBUG) log('Vex.Flow.TextDynamics', args);\n}\n\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'TextDynamics';\n  }\n\n  protected sequence: string;\n\n  protected line: number;\n  protected glyphs: Glyph[];\n\n  /** The glyph data for each dynamics letter. */\n  static get GLYPHS(): Record<string, { code: string; width: number }> {\n    return {\n      f: {\n        code: 'dynamicForte',\n        width: 12,\n      },\n      p: {\n        code: 'dynamicPiano',\n        width: 14,\n      },\n      m: {\n        code: 'dynamicMezzo',\n        width: 17,\n      },\n      s: {\n        code: 'dynamicSforzando',\n        width: 10,\n      },\n      z: {\n        code: 'dynamicZ',\n        width: 12,\n      },\n      r: {\n        code: 'dynamicRinforzando',\n        width: 12,\n      },\n    };\n  }\n\n  /**\n   * Create the dynamics marking.\n   *\n   * A `TextDynamics` object inherits from `Note` so that it can be formatted\n   * within a `Voice`.\n   *\n   * @param noteStruct an object that contains a `duration` property and a\n   * `sequence` of letters that represents the letters to render.\n   */\n  constructor(noteStruct: TextNoteStruct) {\n    super(noteStruct);\n\n    this.sequence = (noteStruct.text || '').toLowerCase();\n    this.line = noteStruct.line || 0;\n    this.glyphs = [];\n\n    this.render_options = { ...this.render_options, glyph_font_size: 40 };\n\n    L('New Dynamics Text: ', this.sequence);\n  }\n\n  /** Set the Stave line on which the note should be placed. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Preformat the dynamics text. */\n  preFormat(): this {\n    let total_width = 0;\n    // length of this.glyphs must be <=\n    // length of this.sequence, so if we're formatted before\n    // create new glyphs.\n    this.glyphs = [];\n    // Iterate through each letter\n    this.sequence.split('').forEach((letter) => {\n      // Get the glyph data for the letter\n      const glyph_data = TextDynamics.GLYPHS[letter];\n      if (!glyph_data) throw new RuntimeError('Invalid dynamics character: ' + letter);\n\n      const size = defined(this.render_options.glyph_font_size);\n      const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\n\n      // Add the glyph\n      this.glyphs.push(glyph);\n\n      total_width += glyph_data.width;\n    });\n\n    // Store the width of the text\n    this.setWidth(total_width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Draw the dynamics text on the rendering context. */\n  draw(): void {\n    this.setRendered();\n    const x = this.getAbsoluteX();\n    const y = this.checkStave().getYForLine(this.line + -3);\n\n    L('Rendering Dynamics: ', this.sequence);\n\n    let letter_x = x;\n    this.glyphs.forEach((glyph, index) => {\n      const current_letter = this.sequence[index];\n      glyph.render(this.checkContext(), letter_x, y);\n      letter_x += TextDynamics.GLYPHS[current_letter].width;\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests.\n\nimport { defined } from './util';\nimport { Flow } from './flow';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { TimeSignature } from './timesignature';\nimport { Stave } from './stave';\nimport { RenderContext } from './types/common';\nimport { isBarline } from 'typeguard';\n\nexport interface MultimeasureRestRenderOptions {\n  /** Extracted by Factory.MultiMeasureRest() and passed to the MultiMeasureRest constructor. */\n  number_of_measures: number;\n\n  /** Use rest symbols. Defaults to `false`, which renders a thick horizontal line with serifs at both ends. */\n  use_symbols?: boolean;\n\n  /** Horizontal spacing between rest symbol glyphs (if `use_symbols` is `true`).*/\n  symbol_spacing?: number;\n\n  /** Show the number of measures at the top. Defaults to `true`. */\n  show_number?: boolean;\n\n  /** Vertical position of the \"number of measures\" text (measured in stave lines). Defaults to -0.5, which is above the stave. 6.5 is below the stave. */\n  number_line?: number;\n\n  /** Font size of the \"number of measures\" text. */\n  number_glyph_point?: number;\n\n  /** Left padding from `stave.getX()`. */\n  padding_left?: number;\n\n  /** Right padding from `stave.getX() + stave.getWidth()` */\n  padding_right?: number;\n\n  /** Vertical position of the rest line or symbols, expressed as stave lines. Default: 2. The top stave line is 1, and the bottom stave line is 5. */\n  line?: number;\n\n  /** Defaults to the number of vertical pixels between stave lines. Used for serif height or 2-bar / 4-bar symbol height. */\n  spacing_between_lines_px?: number;\n\n  /** Size of the semibreve (1-bar) rest symbol. Other symbols are scaled accordingly. */\n  semibreve_rest_glyph_scale?: number;\n\n  /** Thickness of the rest line. Used when `use_symbols` is false. Defaults to half the space between stave lines. */\n  line_thickness?: number;\n\n  /** Thickness of the rest line's serif. Used when `use_symbols` is false. */\n  serif_thickness?: number;\n}\n\nlet semibreve_rest: { glyph_font_scale: number; glyph_code: string; width: number };\n\nfunction get_semibreve_rest() {\n  if (!semibreve_rest) {\n    const noteHead = new NoteHead({ duration: 'w', note_type: 'r' });\n    semibreve_rest = {\n      glyph_font_scale: noteHead.render_options.glyph_font_scale,\n      glyph_code: noteHead.glyph_code,\n      width: noteHead.getWidth(),\n    };\n  }\n  return semibreve_rest;\n}\n\nexport class MultiMeasureRest extends Element {\n  static get CATEGORY(): string {\n    return 'MultiMeasureRest';\n  }\n\n  protected render_options: Required<MultimeasureRestRenderOptions>;\n  protected xs = { left: NaN, right: NaN };\n  protected number_of_measures: number;\n\n  protected stave?: Stave;\n\n  private hasPaddingLeft = false;\n  private hasPaddingRight = false;\n  private hasLineThickness = false;\n  private hasSymbolSpacing = false;\n\n  /**\n   *\n   * @param number_of_measures Number of measures.\n   * @param options The options object.\n   */\n  constructor(number_of_measures: number, options: MultimeasureRestRenderOptions) {\n    super();\n\n    this.number_of_measures = number_of_measures;\n\n    // Keep track of whether these four options were provided.\n    this.hasPaddingLeft = typeof options.padding_left === 'number';\n    this.hasPaddingRight = typeof options.padding_right === 'number';\n    this.hasLineThickness = typeof options.line_thickness === 'number';\n    this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';\n\n    this.render_options = {\n      use_symbols: false,\n      show_number: true,\n      number_line: -0.5,\n      number_glyph_point: this.musicFont.lookupMetric('digits.point'), // same as TimeSignature.\n      line: 2,\n      spacing_between_lines_px: Flow.STAVE_LINE_DISTANCE, // same as Stave.\n      serif_thickness: 2,\n      semibreve_rest_glyph_scale: Flow.DEFAULT_NOTATION_FONT_SCALE, // same as NoteHead.\n      padding_left: 0,\n      padding_right: 0,\n      line_thickness: 5,\n      symbol_spacing: 0,\n      ...options,\n    };\n\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n    this.render_options.number_line += fontLineShift;\n  }\n\n  getXs(): { left: number; right: number } {\n    return this.xs;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  drawLine(stave: Stave, ctx: RenderContext, left: number, right: number, spacingBetweenLines: number): void {\n    const options = this.render_options;\n\n    const y = stave.getYForLine(options.line);\n    const padding = (right - left) * 0.1;\n    left += padding;\n    right -= padding;\n\n    let lineThicknessHalf;\n    if (this.hasLineThickness) {\n      lineThicknessHalf = options.line_thickness * 0.5;\n    } else {\n      lineThicknessHalf = spacingBetweenLines * 0.25;\n    }\n    const serifThickness = options.serif_thickness;\n    const top = y - spacingBetweenLines;\n    const bot = y + spacingBetweenLines;\n    const leftIndented = left + serifThickness;\n    const rightIndented = right - serifThickness;\n    const lineTop = y - lineThicknessHalf;\n    const lineBottom = y + lineThicknessHalf;\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(left, top);\n    ctx.lineTo(leftIndented, top);\n    ctx.lineTo(leftIndented, lineTop);\n    ctx.lineTo(rightIndented, lineTop);\n    ctx.lineTo(rightIndented, top);\n    ctx.lineTo(right, top);\n    ctx.lineTo(right, bot);\n    ctx.lineTo(rightIndented, bot);\n    ctx.lineTo(rightIndented, lineBottom);\n    ctx.lineTo(leftIndented, lineBottom);\n    ctx.lineTo(leftIndented, bot);\n    ctx.lineTo(left, bot);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  drawSymbols(stave: Stave, ctx: RenderContext, left: number, right: number, spacingBetweenLines: number): void {\n    const n4 = Math.floor(this.number_of_measures / 4);\n    const n = this.number_of_measures % 4;\n    const n2 = Math.floor(n / 2);\n    const n1 = n % 2;\n\n    const options = this.render_options;\n    const rest = get_semibreve_rest();\n    const rest_scale = options.semibreve_rest_glyph_scale;\n    const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);\n    const glyphs = {\n      2: {\n        width: rest_width * 0.5,\n        height: spacingBetweenLines,\n      },\n      1: {\n        width: rest_width,\n      },\n    };\n\n    const spacing = this.hasSymbolSpacing ? options.symbol_spacing : rest_width * 1.35;\n\n    const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n    let x = left + (right - left) * 0.5 - width * 0.5;\n    const line = options.line;\n    const yTop = stave.getYForLine(line - 1);\n    const yMiddle = stave.getYForLine(line);\n    const yBottom = stave.getYForLine(line + 1);\n\n    ctx.save();\n    ctx.setStrokeStyle('none');\n    ctx.setLineWidth(0);\n\n    for (let i = 0; i < n4; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n2; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n1; ++i) {\n      Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);\n      x += glyphs[1].width + spacing;\n    }\n\n    ctx.restore();\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const stave = this.checkStave();\n\n    let left = stave.getNoteStartX();\n    let right = stave.getNoteEndX();\n\n    // FIXME: getNoteStartX() returns x + 5(barline width)\n    //        getNoteEndX() returns x + width(no barline width)\n    // See Stave constructor. How do we fix this?\n    // Here, we subtract the barline width.\n    const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n    if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n      left -= begModifiers[0].getWidth();\n    }\n\n    const options = this.render_options;\n    if (this.hasPaddingLeft) {\n      left = stave.getX() + options.padding_left;\n    }\n    if (this.hasPaddingRight) {\n      right = stave.getX() + stave.getWidth() - options.padding_right;\n    }\n\n    this.xs.left = left;\n    this.xs.right = right;\n\n    const spacingBetweenLines = options.spacing_between_lines_px;\n    if (options.use_symbols) {\n      this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\n    } else {\n      this.drawLine(stave, ctx, left, right, spacingBetweenLines);\n    }\n\n    if (options.show_number) {\n      const timeSpec = '/' + this.number_of_measures;\n      const timeSig = new TimeSignature(timeSpec, 0, false);\n      timeSig.point = options.number_glyph_point;\n      timeSig.setTimeSig(timeSpec);\n      timeSig.setStave(stave);\n      timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\n      timeSig.bottomLine = options.number_line;\n      timeSig.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { Flow } from './flow';\nimport { FontInfo, RenderContext } from './types/common';\nimport { StaveNote } from './stavenote';\n\nexport interface StaveLineNotes {\n  first_note: StaveNote;\n  first_indices: number[];\n  last_note: StaveNote;\n  last_indices: number[];\n}\n\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(\n  ctx: RenderContext,\n  x0: number,\n  y0: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n): void {\n  // all cases do this.\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x0, y0);\n  ctx.closePath();\n\n  ctx.fill();\n}\n\n// Helper function to draw a line with arrow heads\nfunction drawArrowLine(\n  ctx: RenderContext,\n  pt1: { x: number; y: number },\n  pt2: { x: number; y: number },\n  config: RenderOptions\n): void {\n  const both_arrows = config.draw_start_arrow && config.draw_end_arrow;\n\n  const x1 = pt1.x;\n  const y1 = pt1.y;\n  const x2 = pt2.x;\n  const y2 = pt2.y;\n\n  // For ends with arrow we actually want to stop before we get to the arrow\n  // so that wide lines won't put a flat end on the arrow.\n  const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  const ratio = (distance - config.arrowhead_length / 3) / distance;\n  let end_x;\n  let end_y;\n  let start_x;\n  let start_y;\n  if (config.draw_end_arrow || both_arrows) {\n    end_x = Math.round(x1 + (x2 - x1) * ratio);\n    end_y = Math.round(y1 + (y2 - y1) * ratio);\n  } else {\n    end_x = x2;\n    end_y = y2;\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    start_x = x1 + (x2 - x1) * (1 - ratio);\n    start_y = y1 + (y2 - y1) * (1 - ratio);\n  } else {\n    start_x = x1;\n    start_y = y1;\n  }\n\n  if (config.color) {\n    ctx.setStrokeStyle(config.color);\n    ctx.setFillStyle(config.color);\n  }\n\n  // Draw the shaft of the arrow\n  ctx.beginPath();\n  ctx.moveTo(start_x, start_y);\n  ctx.lineTo(end_x, end_y);\n  ctx.stroke();\n  ctx.closePath();\n\n  // calculate the angle of the line\n  const line_angle = Math.atan2(y2 - y1, x2 - x1);\n  // h is the line length of a side of the arrow head\n  const h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));\n\n  let angle1;\n  let angle2;\n  let top_x;\n  let top_y;\n  let bottom_x;\n  let bottom_y;\n\n  if (config.draw_end_arrow || both_arrows) {\n    angle1 = line_angle + Math.PI + config.arrowhead_angle;\n    top_x = x2 + Math.cos(angle1) * h;\n    top_y = y2 + Math.sin(angle1) * h;\n\n    angle2 = line_angle + Math.PI - config.arrowhead_angle;\n    bottom_x = x2 + Math.cos(angle2) * h;\n    bottom_y = y2 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    angle1 = line_angle + config.arrowhead_angle;\n    top_x = x1 + Math.cos(angle1) * h;\n    top_y = y1 + Math.sin(angle1) * h;\n\n    angle2 = line_angle - config.arrowhead_angle;\n    bottom_x = x1 + Math.cos(angle2) * h;\n    bottom_y = y1 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n  }\n}\n\ninterface RenderOptions {\n  padding_left: number;\n  padding_right: number;\n  line_width: number;\n  line_dash?: number[];\n  rounded_end: boolean;\n  color?: string;\n  draw_start_arrow: boolean;\n  draw_end_arrow: boolean;\n  arrowhead_length: number;\n  arrowhead_angle: number;\n  text_position_vertical: number;\n  text_justification: number;\n}\n\nexport class StaveLine extends Element {\n  static get CATEGORY(): string {\n    return 'StaveLine';\n  }\n\n  // Text Positioning\n  static readonly TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n  };\n\n  static readonly TextJustification = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3,\n  };\n\n  readonly render_options: RenderOptions;\n\n  protected text: string;\n  protected font: FontInfo;\n\n  // These five instance variables are all initialized by the constructor via this.setNotes(notes).\n  protected notes!: StaveLineNotes;\n  protected first_note!: StaveNote;\n  protected first_indices!: number[];\n  protected last_note!: StaveNote;\n  protected last_indices!: number[];\n\n  // Initialize the StaveLine with the given `notes`.\n  //\n  // `notes` is a struct that has:\n  //\n  //  ```\n  //  {\n  //    first_note: Note,\n  //    last_note: Note,\n  //    first_indices: [n1, n2, n3],\n  //    last_indices: [n1, n2, n3]\n  //  }\n  //  ```\n  constructor(notes: StaveLineNotes) {\n    super();\n\n    this.setNotes(notes);\n\n    this.text = '';\n\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    this.render_options = {\n      // Space to add to the left or the right\n      padding_left: 4,\n      padding_right: 3,\n\n      // The width of the line in pixels\n      line_width: 1,\n      // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n      line_dash: undefined,\n      // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n      rounded_end: true,\n      // The color of the line and arrowheads\n      color: undefined,\n\n      // Flags to draw arrows on each end of the line\n      draw_start_arrow: false,\n      draw_end_arrow: false,\n\n      // The length of the arrowhead sides\n      arrowhead_length: 10,\n      // The angle of the arrowhead\n      arrowhead_angle: Math.PI / 8,\n\n      // The position of the text\n      text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n      text_justification: StaveLine.TextJustification.CENTER,\n    };\n  }\n\n  // Set the font for the `StaveLine` text\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n\n  // The the annotation for the `StaveLine`\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  // Set the notes for the `StaveLine`\n  setNotes(notes: StaveLineNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\n    }\n\n    this.notes = notes;\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n\n  // Apply the style of the `StaveLine` to the context\n  applyLineStyle(): void {\n    const ctx = this.checkContext();\n    const render_options = this.render_options;\n\n    if (render_options.line_dash) {\n      ctx.setLineDash(render_options.line_dash);\n    }\n\n    if (render_options.line_width) {\n      ctx.setLineWidth(render_options.line_width);\n    }\n\n    if (render_options.rounded_end) {\n      ctx.setLineCap('round');\n    } else {\n      ctx.setLineCap('square');\n    }\n  }\n\n  // Apply the text styling to the context\n  applyFontStyle(): void {\n    const ctx = this.checkContext();\n\n    if (this.font) {\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    }\n\n    const render_options = this.render_options;\n    const color = render_options.color;\n    if (color) {\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n    }\n  }\n\n  // Renders the `StaveLine` on the context\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    const render_options = this.render_options;\n\n    ctx.save();\n    this.applyLineStyle();\n\n    // Cycle through each set of indices and draw lines\n    let start_position = { x: 0, y: 0 };\n    let end_position = { x: 0, y: 0 };\n    this.first_indices.forEach((first_index, i) => {\n      const last_index = this.last_indices[i];\n\n      // Get initial coordinates for the start/end of the line\n      start_position = first_note.getModifierStartXY(2, first_index);\n      end_position = last_note.getModifierStartXY(1, last_index);\n      const upwards_slope = start_position.y > end_position.y;\n\n      // Adjust `x` coordinates for modifiers\n      start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n      end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n\n      // Adjust first `x` coordinates for displacements\n      const notehead_width = first_note.getGlyph().getWidth();\n      const first_displaced = first_note.getKeyProps()[first_index].displaced;\n      if (first_displaced && first_note.getStemDirection() === 1) {\n        start_position.x += notehead_width + render_options.padding_left;\n      }\n\n      // Adjust last `x` coordinates for displacements\n      const last_displaced = last_note.getKeyProps()[last_index].displaced;\n      if (last_displaced && last_note.getStemDirection() === -1) {\n        end_position.x -= notehead_width + render_options.padding_right;\n      }\n\n      // Adjust y position better if it's not coming from the center of the note\n      start_position.y += upwards_slope ? -3 : 1;\n      end_position.y += upwards_slope ? 2 : 0;\n\n      drawArrowLine(ctx, start_position, end_position, this.render_options);\n    });\n\n    ctx.restore();\n\n    // Determine the x coordinate where to start the text\n    const text_width = ctx.measureText(this.text).width;\n    const justification = render_options.text_justification;\n    let x = 0;\n    if (justification === StaveLine.TextJustification.LEFT) {\n      x = start_position.x;\n    } else if (justification === StaveLine.TextJustification.CENTER) {\n      const delta_x = end_position.x - start_position.x;\n      const center_x = delta_x / 2 + start_position.x;\n      x = center_x - text_width / 2;\n    } else if (justification === StaveLine.TextJustification.RIGHT) {\n      x = end_position.x - text_width;\n    }\n\n    // Determine the y value to start the text\n    let y = 0;\n    const vertical_position = render_options.text_position_vertical;\n    if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n      y = first_note.checkStave().getYForTopText();\n    } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n      y = first_note.checkStave().getYForBottomText(Flow.TEXT_HEIGHT_OFFSET_HACK);\n    }\n\n    // Draw the text\n    ctx.save();\n    this.applyFontStyle();\n    ctx.fillText(this.text, x, y);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { BoundingBox } from './boundingbox';\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\n\nexport interface GlyphNoteOptions {\n  ignoreTicks?: boolean;\n  line?: number;\n}\n\nexport class GlyphNote extends Note {\n  static get CATEGORY(): string {\n    return 'GlyphNote';\n  }\n\n  protected options: Required<GlyphNoteOptions>;\n\n  constructor(glyph: Glyph | undefined, noteStruct: NoteStruct, options?: GlyphNoteOptions) {\n    super(noteStruct);\n    this.options = {\n      ignoreTicks: false,\n      line: 2,\n      ...options,\n    };\n\n    // Note properties\n    this.ignore_ticks = this.options.ignoreTicks;\n    if (glyph) {\n      this.setGlyph(glyph);\n    }\n  }\n\n  setGlyph(glyph: Glyph): this {\n    this.glyph = glyph;\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return this.glyph.getBoundingBox();\n  }\n\n  preFormat(): this {\n    if (!this.preFormatted && this.modifierContext) {\n      this.modifierContext.preFormat();\n    }\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n    }\n    ctx.closeGroup();\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n    ctx.openGroup('glyphNote', this.getAttribute('id'));\n\n    // Context is set when setStave is called on Note\n    const glyph = this.glyph;\n    if (!glyph.getContext()) {\n      glyph.setContext(ctx);\n    }\n\n    glyph.setStave(stave);\n    glyph.setYShift(stave.getYForLine(this.options.line) - stave.getYForGlyphs());\n\n    const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n    glyph.renderToStave(x);\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { GlyphNote } from './glyphnote';\nimport { Glyph } from './glyph';\nimport { NoteStruct } from './note';\nimport { GlyphNoteOptions } from './glyphnote';\n\n// Map `type` to SMuFL glyph code.\nconst CODES: Record<string, string> = {\n  '1': 'repeat1Bar',\n  '2': 'repeat2Bars',\n  '4': 'repeat4Bars',\n  slash: 'repeatBarSlash',\n};\n\nexport class RepeatNote extends GlyphNote {\n  static get CATEGORY(): string {\n    return 'RepeatNote';\n  }\n\n  constructor(type: string, noteStruct?: NoteStruct, options?: GlyphNoteOptions) {\n    super(undefined, { duration: 'q', align_center: type !== 'slash', ...noteStruct }, options);\n\n    const glyphCode = CODES[type] || 'repeat1Bar';\n    const glyph = new Glyph(glyphCode, this.musicFont.lookupMetric('repeatNote.point', 40), { category: 'repeatNote' });\n    this.setGlyph(glyph);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { FormatOptions, Formatter, FormatterOptions } from './formatter';\nimport { Note } from './note';\nimport { Stave, StaveOptions } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { RenderContext } from './types/common';\nimport { RuntimeError } from './util';\nimport { Voice } from './voice';\n\nexport interface SystemFormatterOptions extends FormatterOptions {\n  alpha?: number;\n}\n\nexport interface SystemParams {\n  voices: Voice[];\n  stave?: Stave;\n  noJustification?: boolean;\n  options?: StaveOptions;\n  spaceAbove?: number;\n  spaceBelow?: number;\n  debugNoteMetrics?: boolean;\n}\n\n/**\n * Formatting for systems created/drawn from factory:\n *\n * If width is provided, the system will use the specified width.\n *\n * If noJustification flag is 'true', there is no justification between voices\n * Otherwise, autoWidth defaults to true.\n *\n * If autowidth is true, the system uses format.preCalculateMinWidth\n * for the width of all voices, and default stave padding\n */\nexport interface SystemOptions {\n  factory?: Factory;\n  noPadding?: boolean;\n  debugFormatter?: boolean;\n  spaceBetweenStaves?: number;\n  formatIterations?: number;\n  autoWidth?: boolean;\n  x?: number;\n  width?: number;\n  y?: number;\n  details?: SystemFormatterOptions;\n  formatOptions?: FormatOptions;\n  noJustification?: boolean;\n}\n\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n  static get CATEGORY(): string {\n    return 'System';\n  }\n\n  protected options!: Required<SystemOptions>;\n  protected factory!: Factory;\n  protected formatter?: Formatter;\n  protected startX?: number;\n  protected lastY?: number;\n  protected parts: Required<SystemParams>[];\n  protected connector?: StaveConnector;\n  protected debugNoteMetricsYs?: { y: number; voice: Voice }[];\n\n  constructor(params: SystemOptions = {}) {\n    super();\n    this.setOptions(params);\n    this.parts = [];\n  }\n\n  /** Set formatting options. */\n  setOptions(options: SystemOptions = {}): void {\n    this.factory = options.factory ?? new Factory({ renderer: { elementId: null, width: 0, height: 0 } });\n    this.options = {\n      factory: this.factory,\n      x: 10,\n      y: 10,\n      width: 500,\n      spaceBetweenStaves: 12, // stave spaces\n      autoWidth: false,\n      noJustification: false,\n      debugFormatter: false,\n      formatIterations: 0, // number of formatter tuning steps\n      noPadding: false,\n      ...options,\n      details: {\n        alpha: 0.5, // formatter tuner learning/shifting rate\n        ...options.details,\n      },\n      formatOptions: {\n        ...options.formatOptions,\n      },\n    };\n\n    if (this.options.noJustification === false && typeof options.width === 'undefined') {\n      this.options.autoWidth = true;\n    }\n  }\n\n  /** Set associated context. */\n  setContext(context: RenderContext): this {\n    super.setContext(context);\n    this.factory.setContext(context);\n    return this;\n  }\n\n  /**\n   * Add connector between staves.\n   * @param type see {@link StaveConnector.typeString}\n   */\n  addConnector(type: string = 'double'): StaveConnector {\n    this.connector = this.factory.StaveConnector({\n      top_stave: this.parts[0].stave,\n      bottom_stave: this.parts[this.parts.length - 1].stave,\n      type,\n    });\n    return this.connector;\n  }\n\n  /**\n   * Add stave to the system.\n   *\n   * Examples:\n   *\n   *  (one voice)\n   *\n   * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n   *\n   *  (two voices)\n   *\n   * `system.addStave({voices: [`\n   *\n   *  `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n   *\n   *  `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))]});`\n   */\n  addStave(params: SystemParams): Stave {\n    const staveOptions: StaveOptions = { left_bar: false, ...params.options };\n\n    const stave =\n      params.stave ??\n      this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n\n    const p = {\n      stave,\n      /* voices: [], */\n      spaceAbove: 0, // stave spaces\n      spaceBelow: 0, // stave spaces\n      debugNoteMetrics: false,\n      noJustification: false,\n      ...params,\n      options: staveOptions, // this needs to go after ...params, so we can override the options field.\n    };\n\n    const ctx = this.getContext();\n    p.voices.forEach((voice) =>\n      voice\n        .setContext(ctx)\n        .setStave(stave)\n        .getTickables()\n        .forEach((tickable) => tickable.setStave(stave))\n    );\n\n    this.parts.push(p);\n    return stave;\n  }\n\n  /** Format the system. */\n  format(): void {\n    const options_details = this.options.details;\n    let justifyWidth = 0;\n    const formatter = new Formatter(options_details);\n    this.formatter = formatter;\n\n    let y = this.options.y;\n    let startX = 0;\n    let allVoices: Voice[] = [];\n    const debugNoteMetricsYs: { y: number; voice: Voice }[] = [];\n\n    // Join the voices for each stave.\n    this.parts.forEach((part) => {\n      y = y + part.stave.space(part.spaceAbove);\n      part.stave.setY(y);\n      if (this.options.autoWidth) {\n        part.voices.forEach((voice) => {\n          formatter.joinVoices([voice]);\n        });\n      } else {\n        formatter.joinVoices(part.voices);\n      }\n      y = y + part.stave.space(part.spaceBelow);\n      y = y + part.stave.space(this.options.spaceBetweenStaves);\n      if (part.debugNoteMetrics) {\n        debugNoteMetricsYs.push({ y, voice: part.voices[0] });\n        y += 15;\n      }\n      allVoices = allVoices.concat(part.voices);\n\n      startX = Math.max(startX, part.stave.getNoteStartX());\n    });\n\n    // Update the start position of all staves.\n    this.parts.forEach((part) => part.stave.setNoteStartX(startX));\n    if (this.options.autoWidth) {\n      justifyWidth = formatter.preCalculateMinTotalWidth(allVoices);\n      this.parts.forEach((part) => {\n        part.stave.setWidth(justifyWidth + Stave.rightPadding + (startX - this.options.x));\n      });\n    } else {\n      justifyWidth = this.options.noPadding\n        ? this.options.width - this.options.x\n        : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n    }\n    formatter.format(allVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n\n    for (let i = 0; i < this.options.formatIterations; i++) {\n      formatter.tune(options_details);\n    }\n\n    this.startX = startX;\n    this.debugNoteMetricsYs = debugNoteMetricsYs;\n    this.lastY = y;\n    this.boundingBox = new BoundingBox(this.options.x, this.options.y, this.options.width, this.lastY - this.options.y);\n  }\n\n  /** Render the system. */\n  draw(): void {\n    // Render debugging information, if requested.\n    const ctx = this.checkContext();\n    if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n      throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n    }\n    this.setRendered();\n\n    if (this.options.debugFormatter) {\n      Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n    }\n\n    this.debugNoteMetricsYs.forEach((d) => {\n      d.voice.getTickables().forEach((tickable) => Note.plotMetrics(ctx, tickable, d.y));\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { TimeSignature, TimeSignatureInfo } from './timesignature';\n\nexport class TimeSigNote extends Note {\n  static get CATEGORY(): string {\n    return 'TimeSigNote';\n  }\n\n  protected timeSigInfo: TimeSignatureInfo;\n\n  constructor(timeSpec: string, customPadding?: number) {\n    super({ duration: 'b' });\n\n    const timeSignature = new TimeSignature(timeSpec, customPadding);\n    this.timeSigInfo = timeSignature.getInfo();\n    this.setWidth(this.timeSigInfo.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (!this.timeSigInfo.glyph.getContext()) {\n      this.timeSigInfo.glyph.setContext(ctx);\n    }\n\n    this.timeSigInfo.glyph.setStave(stave);\n    this.timeSigInfo.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n    this.timeSigInfo.glyph.renderToStave(this.getAbsoluteX());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Mark Meeus 2019\n\nimport { Note } from './note';\nimport { KeySignature } from './keysignature';\nimport { ModifierContext } from './modifiercontext';\n\nexport class KeySigNote extends Note {\n  static get CATEGORY(): string {\n    return 'KeySigNote';\n  }\n\n  protected keySignature: KeySignature;\n\n  constructor(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string[]) {\n    super({ duration: 'b' });\n\n    this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    this.keySignature.setStave(this.checkStave());\n    this.setWidth(this.keySignature.getWidth());\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkStave().checkContext();\n    this.setRendered();\n    this.keySignature.setX(this.getAbsoluteX());\n    this.keySignature.setContext(ctx);\n    this.keySignature.draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError, log } from './util';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { FontInfo, RenderContext } from './types/common';\nimport { StaveNote } from './stavenote';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (PedalMarking.DEBUG) log('Vex.Flow.PedalMarking', args);\n}\n\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name: string, context: RenderContext, x: number, y: number, point: number): void {\n  const glyph_data = PedalMarking.GLYPHS[name];\n  const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\n  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n  /** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'PedalMarking';\n  }\n\n  protected line: number;\n  protected type: number;\n  protected custom_depress_text: string;\n  protected custom_release_text: string;\n  protected render_options: {\n    color: string;\n    bracket_height: number;\n    text_margin_right: number;\n    bracket_line_width: number;\n  };\n  protected font: FontInfo;\n  protected notes: StaveNote[];\n\n  /** Glyph data */\n  static readonly GLYPHS: Record<string, { code: string; y_shift: number; x_shift: number }> = {\n    pedal_depress: {\n      code: 'keyboardPedalPed',\n      x_shift: -10,\n      y_shift: 0,\n    },\n    pedal_release: {\n      code: 'keyboardPedalUp',\n      x_shift: -2,\n      y_shift: 3,\n    },\n  };\n\n  /** Pedal type as number. */\n  static readonly type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n  };\n\n  /** Pedal type as string. */\n  static readonly typeString: Record<string, number> = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n  };\n\n  /**\n   * Create a sustain pedal marking. Returns the defaults PedalMarking.\n   * Which uses the traditional \"Ped\" and \"*\"\" markings.\n   */\n  static createSustain(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    return pedal;\n  }\n\n  /** Create a sostenuto pedal marking */\n  static createSostenuto(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.MIXED);\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n  }\n\n  /** Create an una corda pedal marking */\n  static createUnaCorda(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.TEXT);\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n  }\n\n  constructor(notes: StaveNote[]) {\n    super();\n\n    this.notes = notes;\n    this.type = PedalMarking.type.TEXT;\n    this.line = 0;\n\n    // Custom text for the release/depress markings\n    this.custom_depress_text = '';\n    this.custom_release_text = '';\n\n    this.font = {\n      family: 'Times New Roman',\n      size: 12,\n      weight: 'italic bold',\n    };\n\n    this.render_options = {\n      bracket_height: 10,\n      text_margin_right: 6,\n      bracket_line_width: 1,\n      color: 'black',\n    };\n  }\n\n  /** Set pedal type. */\n  setType(type: string | number): this {\n    type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n\n    if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  /**\n   * Set custom text for the `depress`/`release` pedal markings. No text is\n   * set if the parameter is falsy.\n   */\n  setCustomText(depress: string, release?: string): this {\n    this.custom_depress_text = depress || '';\n    this.custom_release_text = release || '';\n    return this;\n  }\n\n  /** Set the staff line to render the markings on. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Draw the bracket based pedal markings. */\n  drawBracketed(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n    let prev_x: number;\n    let prev_y: number;\n\n    // Iterate through each note\n    this.notes.forEach((note, index, notes) => {\n      // Each note triggers the opposite pedal action\n      is_pedal_depressed = !is_pedal_depressed;\n\n      // Get the initial coordinates for the note\n      const x = note.getAbsoluteX();\n      const y = note.checkStave().getYForBottomText(this.line + 3);\n\n      // Throw if current note is positioned before the previous note\n      if (x < prev_x) {\n        throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n      }\n\n      // Determine if the previous or next note are the same\n      // as the current note. We need to keep track of this for\n      // when adjustments are made for the release+depress action\n      const next_is_same = notes[index + 1] === note;\n      const prev_is_same = notes[index - 1] === note;\n\n      let x_shift = 0;\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      if (is_pedal_depressed) {\n        // Adjustment for release+depress\n        x_shift = prev_is_same ? 5 : 0;\n\n        if (this.type === PedalMarking.type.MIXED && !prev_is_same) {\n          // For MIXED style, start with text instead of bracket\n          if (this.custom_depress_text) {\n            // If we have custom text, use instead of the default \"Ped\" glyph\n            const text_width = ctx.measureText(this.custom_depress_text).width;\n            ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n            x_shift = text_width / 2 + this.render_options.text_margin_right;\n          } else {\n            // Render the Ped glyph in position\n            drawPedalGlyph('pedal_depress', ctx, x, y, point);\n            x_shift = 20 + this.render_options.text_margin_right;\n          }\n        } else {\n          // Draw start bracket\n          ctx.beginPath();\n          ctx.moveTo(x, y - this.render_options.bracket_height);\n          ctx.lineTo(x + x_shift, y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      } else {\n        // Adjustment for release+depress\n        x_shift = next_is_same ? -5 : 0;\n\n        // Draw end bracket\n        ctx.beginPath();\n        ctx.moveTo(prev_x, prev_y);\n        ctx.lineTo(x + x_shift, y);\n        ctx.lineTo(x, y - this.render_options.bracket_height);\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      // Store previous coordinates\n      prev_x = x + x_shift;\n      prev_y = y;\n    });\n  }\n\n  /**\n   * Draw the text based pedal markings. This defaults to the traditional\n   * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n   */\n  drawText(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n\n    // Iterate through each note, placing glyphs or custom text accordingly\n    this.notes.forEach((note) => {\n      is_pedal_depressed = !is_pedal_depressed;\n      const stave = note.checkStave();\n      const x = note.getAbsoluteX();\n      const y = stave.getYForBottomText(this.line + 3);\n\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      let text_width = 0;\n      if (is_pedal_depressed) {\n        if (this.custom_depress_text) {\n          text_width = ctx.measureText(this.custom_depress_text).width;\n          ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_depress', ctx, x, y, point);\n        }\n      } else {\n        if (this.custom_release_text) {\n          text_width = ctx.measureText(this.custom_release_text).width;\n          ctx.fillText(this.custom_release_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_release', ctx, x, y, point);\n        }\n      }\n    });\n  }\n\n  /** Render the pedal marking in position on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setStrokeStyle(this.render_options.color);\n    ctx.setFillStyle(this.render_options.color);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    L('Rendering Pedal Marking');\n\n    if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n      ctx.setLineWidth(this.render_options.bracket_line_width);\n      this.drawBracketed();\n    } else if (this.type === PedalMarking.type.TEXT) {\n      this.drawText();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\n\nimport { RuntimeError, log } from './util';\nimport { Flow } from './flow';\nimport { Element } from './element';\nimport { Renderer } from './renderer';\nimport { FontInfo, RenderContext } from './types/common';\nimport { Note } from './note';\n\nexport interface TextBracketParams {\n  start: Note;\n  stop: Note;\n  text: string;\n  superscript: string;\n  position: number | string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextBracket.DEBUG) log('Vex.Flow.TextBracket', args);\n}\n\nexport enum TextBracketPosition {\n  TOP = 1,\n  BOTTOM = -1,\n}\n\nexport class TextBracket extends Element {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'TextBracket';\n  }\n\n  render_options: {\n    dashed: boolean;\n    color: string;\n    line_width: number;\n    underline_superscript: boolean;\n    show_bracket: boolean;\n    dash: number[];\n    bracket_height: number;\n  };\n\n  protected readonly text: string;\n  protected readonly superscript: string;\n  protected readonly position: TextBracketPosition;\n\n  protected line: number;\n  protected start: Note;\n  protected stop: Note;\n  protected font: FontInfo;\n\n  /**\n   * @deprecated\n   */\n  static get Positions(): typeof TextBracketPosition {\n    L('Positions is deprecated, use TextBracketPosition instead.');\n    return TextBracketPosition;\n  }\n\n  static get Position(): typeof TextBracketPosition {\n    return TextBracketPosition;\n  }\n\n  /**\n   * @deprecated Use `TextBracket.PositionString` instead.\n   */\n  static get PositionsString(): Record<string, number> {\n    L('PositionsString is deprecated, use PositionString instead.');\n    return TextBracket.PositionString;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      top: TextBracketPosition.TOP,\n      bottom: TextBracketPosition.BOTTOM,\n    };\n  }\n\n  constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }: TextBracketParams) {\n    super();\n\n    this.start = start;\n    this.stop = stop;\n\n    this.text = text;\n    this.superscript = superscript;\n\n    this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n\n    this.line = 1;\n\n    this.font = {\n      family: 'Serif',\n      size: 15,\n      weight: 'italic',\n    };\n\n    this.render_options = {\n      dashed: true,\n      dash: [5],\n      color: 'black',\n      line_width: 1,\n      show_bracket: true,\n      bracket_height: 8,\n\n      // In the BOTTOM position, the bracket line can extend\n      // under the superscript.\n      underline_superscript: true,\n    };\n  }\n\n  // Apply the text backet styling to the provided `context`\n  applyStyle(context: RenderContext): this {\n    // Apply style for the octave bracket\n    context.setFont(this.font.family, this.font.size, this.font.weight);\n    context.setStrokeStyle(this.render_options.color);\n    context.setFillStyle(this.render_options.color);\n    context.setLineWidth(this.render_options.line_width);\n\n    return this;\n  }\n\n  // Set whether the bracket line should be `dashed`. You can also\n  // optionally set the `dash` pattern by passing in an array of numbers\n  setDashed(dashed: boolean, dash?: number[]): this {\n    this.render_options.dashed = dashed;\n    if (dash) this.render_options.dash = dash;\n    return this;\n  }\n\n  // Set the font for the text\n  setFont(font: FontInfo): this {\n    // We use Object.assign to support partial updates to the font object\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n  // Set the rendering `context` for the octave bracket\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Draw the octave bracket on the rendering context\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let y = 0;\n    switch (this.position) {\n      case TextBracketPosition.TOP:\n        y = this.start.checkStave().getYForTopText(this.line);\n        break;\n      case TextBracketPosition.BOTTOM:\n        y = this.start.checkStave().getYForBottomText(this.line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n    }\n\n    // Get the preliminary start and stop coordintates for the bracket\n    const start = { x: this.start.getAbsoluteX(), y };\n    const stop = { x: this.stop.getAbsoluteX(), y };\n\n    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n\n    const bracket_height = this.render_options.bracket_height * this.position;\n\n    ctx.save();\n    this.applyStyle(ctx);\n\n    // Draw text\n    ctx.fillText(this.text, start.x, start.y);\n\n    // Get the width and height for the octave number\n    const main_measure = ctx.measureText(this.text);\n    const main_width = main_measure.width;\n    const main_height = main_measure.height;\n\n    // Calculate the y position for the super script\n    const super_y = start.y - main_height / 2.5;\n\n    // Draw the superscript\n    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n    ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\n    // Determine width and height of the superscript\n    const super_measure = ctx.measureText(this.superscript);\n    const super_width = super_measure.width;\n    const super_height = super_measure.height;\n\n    // Setup initial coordinates for the bracket line\n    let start_x = start.x;\n    let line_y = super_y;\n    const end_x = stop.x + this.stop.getGlyph().getWidth();\n\n    // Adjust x and y coordinates based on position\n    if (this.position === TextBracketPosition.TOP) {\n      start_x += main_width + super_width + 5;\n      line_y -= super_height / 2.7;\n    } else if (this.position === TextBracketPosition.BOTTOM) {\n      line_y += super_height / 2.7;\n      start_x += main_width + 2;\n\n      if (!this.render_options.underline_superscript) {\n        start_x += super_width;\n      }\n    }\n\n    if (this.render_options.dashed) {\n      // Main line\n      Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\n      // Ending Bracket\n      if (this.render_options.show_bracket) {\n        Renderer.drawDashedLine(\n          ctx,\n          end_x,\n          line_y + 1 * this.position,\n          end_x,\n          line_y + bracket_height,\n          this.render_options.dash\n        );\n      }\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(start_x, line_y);\n      // Main line\n      ctx.lineTo(end_x, line_y);\n      if (this.render_options.show_bracket) {\n        // Ending bracket\n        ctx.lineTo(end_x, line_y + bracket_height);\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Balazs Forian-Szabo\n// MIT License\n\nimport { log } from './util';\nimport { Element } from './element';\nimport { Vibrato } from './vibrato';\nimport { Note } from './note';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (VibratoBracket.DEBUG) log('Vex.Flow.VibratoBracket', args);\n}\n\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n  /** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'VibratoBracket';\n  }\n\n  protected line: number;\n\n  protected start?: Note;\n  protected stop?: Note;\n  protected render_options: {\n    vibrato_width: number;\n    wave_height: number;\n    wave_girth: number;\n    harsh: boolean;\n    wave_width: number;\n  };\n\n  /**\n   * Either the stop or start note must be set, or both of them.\n   * An undefined value for the start or stop note indicates that the vibrato\n   * is drawn from the beginning or until the end of the stave accordingly.\n   */\n  constructor(bracket_data: { stop?: Note; start?: Note }) {\n    super();\n\n    this.start = bracket_data.start;\n    this.stop = bracket_data.stop;\n\n    this.line = 1;\n\n    this.render_options = {\n      harsh: false,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n      vibrato_width: 0,\n    };\n  }\n\n  /** Set line position of the vibrato bracket. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Set harsh vibrato bracket. */\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  /** Draw the vibrato bracket on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    const y: number =\n      (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n      (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n      0;\n    // If start note is not set then vibrato will be drawn\n    // from the beginning of the stave\n    const start_x: number =\n      (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n    // If stop note is not set then vibrato will be drawn\n    // until the end of the stave\n    const stop_x: number =\n      (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n      (this.start && this.start.checkStave().getTieEndX() - 10) ||\n      0;\n\n    this.render_options.vibrato_width = stop_x - start_x;\n\n    L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n\n    Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n\nimport { RuntimeError } from './util';\nimport { StemmableNote } from './stemmablenote';\nimport { Stave } from './stave';\nimport { NoteStruct } from './note';\nimport { ModifierContext } from './modifiercontext';\n\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\n\nexport class GhostNote extends StemmableNote {\n  static get CATEGORY(): string {\n    return 'GhostNote';\n  }\n\n  constructor(parameter: string | NoteStruct) {\n    if (!parameter) {\n      throw new RuntimeError('BadArguments', ERROR_MSG);\n    }\n\n    let noteStruct;\n    if (typeof parameter === 'string') {\n      // Preserve backwards-compatibility\n      noteStruct = { duration: parameter };\n    } else if (typeof parameter === 'object') {\n      noteStruct = parameter;\n    } else {\n      throw new RuntimeError('BadArguments', ERROR_MSG);\n    }\n\n    super(noteStruct);\n\n    // Note properties\n    this.setWidth(0);\n  }\n\n  /**\n   * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n   */\n  isRest(): boolean {\n    return true;\n  }\n\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    return this;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    // Draw the modifiers\n    this.setRendered();\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Stave, StaveOptions } from './stave';\n\nexport class TabStave extends Stave {\n  static get CATEGORY(): string {\n    return 'TabStave';\n  }\n\n  constructor(x: number, y: number, width: number, options?: StaveOptions) {\n    const tab_options = {\n      spacing_between_lines_px: 13,\n      num_lines: 6,\n      top_text_position: 1,\n      ...options,\n    };\n\n    super(x, y, width, tab_options);\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(2.5);\n  }\n\n  // Deprecated\n  addTabGlyph(): this {\n    this.addClef('tab');\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\n\nimport { RuntimeError, log, defined } from './util';\nimport { Accidental } from './accidental';\nimport { Articulation } from './articulation';\nimport { Annotation } from './annotation';\nimport { ChordSymbol } from './chordsymbol';\n// import { WidthFormatter } from './widthformatter';\nimport { Formatter, FormatterOptions } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { StringNumber } from './stringnumber';\nimport { TextDynamics } from './textdynamics';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest, MultimeasureRestRenderOptions } from './multimeasurerest';\nimport { Renderer } from './renderer';\nimport { Stave, StaveOptions } from './stave';\nimport { StaveTie } from './stavetie';\nimport { StaveLine } from './staveline';\nimport { StaveNote, StaveNoteStruct } from './stavenote';\nimport { GlyphNote, GlyphNoteOptions } from './glyphnote';\nimport { RepeatNote } from './repeatnote';\nimport { StaveConnector } from './staveconnector';\nimport { System, SystemOptions } from './system';\nimport { TickContext } from './tickcontext';\nimport { Tuplet, TupletOptions } from './tuplet';\nimport { Voice, VoiceTime } from './voice';\nimport { Beam } from './beam';\nimport { Curve, CurveOptions } from './curve';\nimport { GraceNote, GraceNoteStruct } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { EasyScore, EasyScoreOptions } from './easyscore';\nimport { TimeSigNote } from './timesignote';\nimport { KeySigNote } from './keysignote';\nimport { ClefNote } from './clefnote';\nimport { PedalMarking } from './pedalmarking';\nimport { TextBracket } from './textbracket';\nimport { VibratoBracket } from './vibratobracket';\nimport { GhostNote } from './ghostnote';\nimport { BarNote } from './barnote';\nimport { TabNote, TabNoteStruct } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextNote, TextNoteStruct } from './textnote';\nimport { TextFont, TextFontRegistry } from './textfont';\nimport { FontInfo, RenderContext } from './types/common';\nimport { Note, NoteStruct } from './note';\nimport { Glyph } from './glyph';\nimport { BarlineType } from './stavebarline';\nimport { StemmableNote } from './stemmablenote';\nimport { Element } from './element';\n\nexport interface FactoryOptions {\n  stave?: {\n    space: number;\n  };\n  renderer?: {\n    elementId: string | null;\n    backend?: number;\n    width: number;\n    height: number;\n    background?: string;\n  };\n  font?: {\n    family: string;\n    size: number;\n    weight: string;\n  };\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Factory.DEBUG) log('Vex.Flow.Factory', args);\n}\n\n/**\n * Factory implements a high level API around VexFlow. It will eventually\n * become the canonical way to use VexFlow.\n *\n * *This API is currently DRAFT*\n */\nexport class Factory {\n  /** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /**\n   * Static simplified function to access constructor without providing FactoryOptions\n   *\n   * Example:\n   *\n   * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n   *\n   * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\n   */\n  static newFromElementId(elementId: string | null, width = 500, height = 200): Factory {\n    return new Factory({ renderer: { elementId, width, height, backend: Renderer.Backends.SVG } });\n  }\n\n  protected options: Required<FactoryOptions>;\n\n  protected stave?: Stave;\n  protected context!: RenderContext;\n  protected staves!: Stave[];\n  protected voices!: Voice[];\n  protected renderQ!: Element[];\n  protected systems!: System[];\n\n  /**\n   * Example:\n   *\n   * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n   *\n   * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n   */\n  constructor(options: FactoryOptions = {}) {\n    L('New factory: ', options);\n    this.options = {\n      stave: {\n        space: 10,\n      },\n      renderer: {\n        elementId: '',\n        backend: Renderer.Backends.SVG,\n        width: 500,\n        height: 200,\n        background: '#FFF',\n      },\n      font: {\n        family: 'Arial',\n        size: 10,\n        weight: '',\n      },\n    };\n\n    this.setOptions(options);\n  }\n\n  reset(): void {\n    this.renderQ = [];\n    this.systems = [];\n    this.staves = [];\n    this.voices = [];\n    this.stave = undefined; // current stave\n  }\n\n  setOptions(options?: FactoryOptions): void {\n    this.options = { ...this.options, ...options };\n    this.initRenderer();\n    this.reset();\n  }\n\n  initRenderer(): void {\n    const { elementId, backend, width, height, background } = this.options.renderer;\n    if (elementId === null) {\n      return;\n    }\n\n    if (elementId === '') {\n      L(this);\n      throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n    }\n\n    this.context = Renderer.buildContext(\n      elementId as string,\n      backend ?? Renderer.Backends.SVG,\n      width,\n      height,\n      background\n    );\n  }\n\n  getContext(): RenderContext {\n    return this.context;\n  }\n\n  setContext(context: RenderContext): this {\n    this.context = context;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  getVoices(): Voice[] {\n    return this.voices;\n  }\n\n  /** Return pixels from current stave spacing. */\n\n  Stave(params?: { x?: number; y?: number; width?: number; options?: StaveOptions }): Stave {\n    const staveSpace = this.options.stave.space;\n    const p = {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - staveSpace * 1.0,\n      options: { spacing_between_lines_px: staveSpace * 1.0 },\n      ...params,\n    };\n\n    const stave: Stave = new Stave(p.x, p.y, p.width, p.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  TabStave(params?: { x?: number; y?: number; width?: number; options?: StaveOptions }): TabStave {\n    const staveSpace = this.options.stave.space;\n    const p = {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - staveSpace * 1.0,\n      options: { spacing_between_lines_px: staveSpace * 1.3 },\n      ...params,\n    };\n\n    const stave = new TabStave(p.x, p.y, p.width, p.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  StaveNote(noteStruct: StaveNoteStruct): StaveNote {\n    const note = new StaveNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GlyphNote(glyph: Glyph, noteStruct: NoteStruct, options?: GlyphNoteOptions): GlyphNote {\n    const note = new GlyphNote(glyph, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  RepeatNote(type: string, noteStruct?: NoteStruct, options?: GlyphNoteOptions): RepeatNote {\n    const note = new RepeatNote(type, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GhostNote(noteStruct: string | NoteStruct): GhostNote {\n    const ghostNote = new GhostNote(noteStruct);\n    if (this.stave) ghostNote.setStave(this.stave);\n    ghostNote.setContext(this.context);\n    this.renderQ.push(ghostNote);\n    return ghostNote;\n  }\n\n  TextNote(noteStruct: TextNoteStruct): TextNote {\n    const textNote = new TextNote(noteStruct);\n    if (this.stave) textNote.setStave(this.stave);\n    textNote.setContext(this.context);\n    this.renderQ.push(textNote);\n    return textNote;\n  }\n\n  BarNote(params: { type?: BarlineType | string } = {}): BarNote {\n    const barNote = new BarNote(params.type);\n    if (this.stave) barNote.setStave(this.stave);\n    barNote.setContext(this.context);\n    this.renderQ.push(barNote);\n    return barNote;\n  }\n\n  ClefNote(params?: { type?: string; options?: { size?: string; annotation?: string } }): ClefNote {\n    const p = {\n      type: 'treble',\n      options: {\n        size: 'default',\n        annotation: undefined,\n      },\n      ...params,\n    };\n\n    const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n    if (this.stave) clefNote.setStave(this.stave);\n    clefNote.setContext(this.context);\n    this.renderQ.push(clefNote);\n    return clefNote;\n  }\n\n  TimeSigNote(params?: { time?: string }): TimeSigNote {\n    const p = {\n      time: '4/4',\n      ...params,\n    };\n\n    const timeSigNote = new TimeSigNote(p.time);\n    if (this.stave) timeSigNote.setStave(this.stave);\n    timeSigNote.setContext(this.context);\n    this.renderQ.push(timeSigNote);\n    return timeSigNote;\n  }\n\n  KeySigNote(params: { key: string; cancelKey?: string; alterKey?: string[] }): KeySigNote {\n    const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n    if (this.stave) keySigNote.setStave(this.stave);\n    keySigNote.setContext(this.context);\n    this.renderQ.push(keySigNote);\n    return keySigNote;\n  }\n\n  TabNote(noteStruct: TabNoteStruct): TabNote {\n    const note = new TabNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GraceNote(noteStruct: GraceNoteStruct): GraceNote {\n    const note = new GraceNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    return note;\n  }\n\n  GraceNoteGroup(params: { notes: StemmableNote[]; slur?: boolean }): GraceNoteGroup {\n    const group = new GraceNoteGroup(params.notes, params.slur);\n    group.setContext(this.context);\n    return group;\n  }\n\n  Accidental(params: { type: string }): Accidental {\n    const accid = new Accidental(params.type);\n    accid.setContext(this.context);\n    return accid;\n  }\n\n  Annotation(params?: {\n    text?: string;\n    vJustify?: string;\n    hJustify?: string;\n    fontFamily?: string;\n    fontSize?: number;\n    fontWeight?: string;\n  }): Annotation {\n    const p = {\n      text: 'p',\n      vJustify: 'below',\n      hJustify: 'center',\n      fontFamily: 'Times',\n      fontSize: 14,\n      fontWeight: 'bold italic',\n      options: {},\n      ...params,\n    };\n\n    const annotation = new Annotation(p.text);\n    annotation.setJustification(p.hJustify);\n    annotation.setVerticalJustification(p.vJustify);\n    annotation.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n    annotation.setContext(this.context);\n    return annotation;\n  }\n\n  ChordSymbol(params?: {\n    vJustify?: string;\n    hJustify?: string;\n    kerning?: boolean;\n    reportWidth?: boolean;\n    fontFamily?: string;\n    fontSize?: number;\n    fontWeight?: string;\n  }): ChordSymbol {\n    const p = {\n      vJustify: 'top',\n      hJustify: 'center',\n      kerning: true,\n      reportWidth: true,\n      ...params,\n    };\n\n    const chordSymbol = new ChordSymbol();\n    chordSymbol.setHorizontal(p.hJustify);\n    chordSymbol.setVertical(p.vJustify);\n    chordSymbol.setEnableKerning(p.kerning);\n    chordSymbol.setReportWidth(p.reportWidth);\n    // There is a default font based on the engraving font.  Only set then\n    // font if it is specific, else use the default\n    if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n      if (typeof p.fontWeight === 'string') chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n      else chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n    } else if (typeof p.fontSize === 'number') {\n      chordSymbol.setFontSize(p.fontSize);\n    }\n    chordSymbol.setContext(this.context);\n    return chordSymbol;\n  }\n\n  Articulation(params?: { type?: string; position?: string | number }): Articulation {\n    const p = {\n      type: 'a.',\n      position: 'above',\n      ...params,\n    };\n\n    const articulation = new Articulation(p.type);\n    articulation.setPosition(p.position);\n    articulation.setContext(this.context);\n    return articulation;\n  }\n\n  TextDynamics(params?: { text?: string; duration?: string; dots?: number; line?: number }): TextDynamics {\n    const p = {\n      text: 'p',\n      duration: 'q',\n      dots: 0,\n      line: 0,\n      ...params,\n    };\n\n    const text = new TextDynamics({\n      text: p.text,\n      line: p.line,\n      duration: p.duration,\n      dots: p.dots,\n    });\n\n    if (this.stave) text.setStave(this.stave);\n    text.setContext(this.context);\n    this.renderQ.push(text);\n    return text;\n  }\n\n  Fingering(params: { number?: string; position?: string }): FretHandFinger {\n    const p = {\n      number: '0',\n      position: 'left',\n      ...params,\n    };\n\n    const fingering = new FretHandFinger(p.number);\n    fingering.setPosition(p.position);\n    fingering.setContext(this.context);\n    return fingering;\n  }\n\n  StringNumber(params: { number: string; position: string }): StringNumber {\n    const stringNumber = new StringNumber(params.number);\n    stringNumber.setPosition(params.position);\n    stringNumber.setContext(this.context);\n    return stringNumber;\n  }\n\n  TickContext(): TickContext {\n    return new TickContext();\n  }\n\n  ModifierContext(): ModifierContext {\n    return new ModifierContext();\n  }\n\n  MultiMeasureRest(params: MultimeasureRestRenderOptions): MultiMeasureRest {\n    const numMeasures = defined(params.number_of_measures, 'NoNumberOfMeasures');\n    const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n    multiMeasureRest.setContext(this.context);\n    this.renderQ.push(multiMeasureRest);\n    return multiMeasureRest;\n  }\n\n  Voice(params?: { time?: VoiceTime | string; options?: { softmaxFactor: number } }): Voice {\n    const p = {\n      time: '4/4',\n      ...params,\n    };\n    const voice = new Voice(p.time, p.options);\n    this.voices.push(voice);\n    return voice;\n  }\n\n  StaveConnector(params: { top_stave: Stave; bottom_stave: Stave; type: string }): StaveConnector {\n    const connector = new StaveConnector(params.top_stave, params.bottom_stave);\n    connector.setType(params.type).setContext(this.context);\n    this.renderQ.push(connector);\n    return connector;\n  }\n\n  Formatter(options?: FormatterOptions): Formatter {\n    return new Formatter(options);\n  }\n\n  Tuplet(params?: { notes?: Note[]; options?: TupletOptions }): Tuplet {\n    const p = {\n      notes: [],\n      options: {},\n      ...params,\n    };\n\n    const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n    this.renderQ.push(tuplet);\n    return tuplet;\n  }\n\n  Beam(params: { notes: StemmableNote[]; options?: { autoStem?: boolean; secondaryBeamBreaks?: number[] } }): Beam {\n    const beam = new Beam(params.notes, params.options?.autoStem).setContext(this.context);\n    beam.breakSecondaryAt(params.options?.secondaryBeamBreaks ?? []);\n    this.renderQ.push(beam);\n    return beam;\n  }\n\n  Curve(params: { from: Note; to: Note; options: CurveOptions }): Curve {\n    const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n    this.renderQ.push(curve);\n    return curve;\n  }\n\n  StaveTie(params: {\n    from: Note;\n    to: Note;\n    first_indices?: number[];\n    last_indices?: number[];\n    text?: string;\n    options?: { direction?: number };\n  }): StaveTie {\n    const tie = new StaveTie(\n      {\n        first_note: params.from,\n        last_note: params.to,\n        first_indices: params.first_indices,\n        last_indices: params.last_indices,\n      },\n      params.text\n    );\n\n    if (params.options?.direction) tie.setDirection(params.options.direction);\n    tie.setContext(this.context);\n    this.renderQ.push(tie);\n    return tie;\n  }\n\n  StaveLine(params: {\n    from: StaveNote;\n    to: StaveNote;\n    first_indices: number[];\n    last_indices: number[];\n    options?: { text?: string; font?: FontInfo };\n  }): StaveLine {\n    const line = new StaveLine({\n      first_note: params.from,\n      last_note: params.to,\n      first_indices: params.first_indices,\n      last_indices: params.last_indices,\n    });\n\n    if (params.options?.text) line.setText(params.options.text);\n    if (params.options?.font) line.setFont(params.options.font);\n\n    line.setContext(this.context);\n    this.renderQ.push(line);\n    return line;\n  }\n\n  VibratoBracket(params: {\n    from: Note;\n    to: Note;\n    options: {\n      harsh?: boolean;\n      line?: number;\n    };\n  }): VibratoBracket {\n    const vibratoBracket = new VibratoBracket({\n      start: params.from,\n      stop: params.to,\n    });\n\n    if (params.options.line) vibratoBracket.setLine(params.options.line);\n    if (params.options.harsh) vibratoBracket.setHarsh(params.options.harsh);\n\n    vibratoBracket.setContext(this.context);\n    this.renderQ.push(vibratoBracket);\n\n    return vibratoBracket;\n  }\n\n  TextBracket(params: {\n    from: Note;\n    to: Note;\n    text: string;\n    options: {\n      superscript: string;\n      position: string;\n      line?: number;\n      font?: FontInfo;\n    };\n  }): TextBracket {\n    const textBracket = new TextBracket({\n      start: params.from,\n      stop: params.to,\n      text: params.text,\n      superscript: params.options.superscript,\n      position: params.options.position,\n    });\n\n    if (params.options.line) textBracket.setLine(params.options.line);\n    if (params.options.font) textBracket.setFont(params.options.font);\n\n    textBracket.setContext(this.context);\n    this.renderQ.push(textBracket);\n    return textBracket;\n  }\n\n  // TODO: SystemOptions make all properties optional.\n  // eslint-disable-next-line\n  // @ts-ignore\n  System(params: SystemOptions = {}): System {\n    params.factory = this;\n    const system = new System(params).setContext(this.context);\n    this.systems.push(system);\n    return system;\n  }\n\n  /**\n   * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n   * ```\n   * const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n   * const score: EasyScore = vf.EasyScore();\n   * ```\n   * @param options.factory optional instance of Factory\n   * @param options.builder instance of Builder\n   * @param options.commitHooks function to call after a note element is created\n   * @param options.throwOnError throw error in case of parsing error\n   */\n  EasyScore(options: EasyScoreOptions = {}): EasyScore {\n    options.factory = this;\n    return new EasyScore(options);\n  }\n\n  PedalMarking(params?: { notes?: StaveNote[]; options?: { style: string } }): PedalMarking {\n    const p = {\n      notes: [],\n      options: {\n        style: 'mixed',\n      },\n      ...params,\n    };\n\n    const pedal = new PedalMarking(p.notes);\n    pedal.setType(PedalMarking.typeString[p.options.style]);\n    pedal.setContext(this.context);\n    this.renderQ.push(pedal);\n    return pedal;\n  }\n\n  NoteSubGroup(params?: { notes?: Note[] }): NoteSubGroup {\n    const p = {\n      notes: [],\n      ...params,\n    };\n\n    const group = new NoteSubGroup(p.notes);\n    group.setContext(this.context);\n    return group;\n  }\n\n  TextFont(params: TextFontRegistry): TextFont {\n    params.factory = this;\n    return new TextFont(params);\n  }\n\n  /** Render the score. */\n  draw(): void {\n    const ctx = this.context;\n    this.systems.forEach((s) => s.setContext(ctx).format());\n    this.staves.forEach((s) => s.setContext(ctx).draw());\n    this.voices.forEach((v) => v.setContext(ctx).draw());\n    this.renderQ.forEach((e) => {\n      if (!e.isRendered()) e.setContext(ctx).draw();\n    });\n    this.systems.forEach((s) => s.setContext(ctx).draw());\n    this.reset();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Author: Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\n\nimport { RuntimeError } from './util';\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { RenderContext } from './types/common';\n\nexport interface StaveHairpinRenderOptions {\n  right_shift_ticks: number;\n  left_shift_ticks: number;\n  left_shift_px: number;\n  right_shift_px: number;\n  height: number;\n  y_shift: number;\n}\n\nexport class StaveHairpin extends Element {\n  static get CATEGORY(): string {\n    return 'StaveHairpin';\n  }\n\n  protected hairpin: number;\n\n  protected position: number;\n  protected render_options: StaveHairpinRenderOptions;\n\n  // notes is initialized by the constructor via this.setNotes(notes).\n  protected notes!: Record<string, Note>;\n\n  protected first_note?: Note;\n  protected last_note?: Note;\n\n  static readonly type = {\n    CRESC: 1,\n    DECRESC: 2,\n  };\n\n  /* Helper function to convert ticks into pixels.\n   * Requires a Formatter with voices joined and formatted (to\n   * get pixels per tick)\n   *\n   * options is struct that has:\n   *\n   *  {\n   *   height: px,\n   *   y_shift: px, //vertical offset\n   *   left_shift_ticks: 0, //left horizontal offset expressed in ticks\n   *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n   *  }\n   *\n   **/\n  static FormatByTicksAndDraw(\n    ctx: RenderContext,\n    formatter: { pixelsPerTick: number },\n    notes: Record<string, Note>,\n    type: number,\n    position: number,\n    options: StaveHairpinRenderOptions\n  ): void {\n    const ppt = formatter.pixelsPerTick;\n\n    if (ppt == null) {\n      throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n    }\n\n    const l_shift_px = ppt * options.left_shift_ticks;\n    const r_shift_px = ppt * options.right_shift_ticks;\n\n    const hairpin_options = {\n      height: options.height,\n      y_shift: options.y_shift,\n      left_shift_px: l_shift_px,\n      right_shift_px: r_shift_px,\n      right_shift_ticks: 0,\n      left_shift_ticks: 0,\n    };\n\n    new StaveHairpin(\n      {\n        first_note: notes.first_note,\n        last_note: notes.last_note,\n      },\n      type\n    )\n      .setContext(ctx)\n      .setRenderOptions(hairpin_options)\n      .setPosition(position)\n      .draw();\n  }\n\n  /**\n   * Create a new hairpin from the specified notes.\n   *\n   * @param {!Object} notes The notes to tie up.\n   * Notes is a struct that has:\n   *\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *  }\n   * @param {!Object} type The type of hairpin\n   */\n  constructor(notes: Record<string, Note>, type: number) {\n    super();\n    this.setNotes(notes);\n    this.hairpin = type;\n    this.position = Modifier.Position.BELOW;\n\n    this.render_options = {\n      height: 10,\n      y_shift: 0, // vertical offset\n      left_shift_px: 0, // left horizontal offset\n      right_shift_px: 0, // right horizontal offset\n      right_shift_ticks: 0,\n      left_shift_ticks: 0,\n    };\n  }\n\n  setPosition(position: number): this {\n    if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n      this.position = position;\n    }\n    return this;\n  }\n\n  setRenderOptions(options: StaveHairpinRenderOptions): this {\n    if (\n      options.height != null &&\n      options.y_shift != null &&\n      options.left_shift_px != null &&\n      options.right_shift_px != null\n    ) {\n      this.render_options = options;\n    }\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this hairpin to.\n   *\n   * @param {!Object} notes The start and end notes.\n   */\n  setNotes(notes: Record<string, Note>): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\n    }\n\n    this.notes = notes;\n    this.first_note = notes.first_note;\n    this.last_note = notes.last_note;\n    return this;\n  }\n\n  renderHairpin(params: {\n    first_x: number;\n    last_x: number;\n    first_y: number;\n    last_y: number;\n    staff_height: number;\n  }): void {\n    const ctx = this.checkContext();\n    let dis = this.render_options.y_shift + 20;\n    let y_shift = params.first_y;\n\n    if (this.position === Modifier.Position.ABOVE) {\n      dis = -dis + 30;\n      y_shift = params.first_y - params.staff_height;\n    }\n\n    const l_shift = this.render_options.left_shift_px;\n    const r_shift = this.render_options.right_shift_px;\n\n    ctx.beginPath();\n\n    switch (this.hairpin) {\n      case StaveHairpin.type.CRESC:\n        ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n        break;\n      case StaveHairpin.type.DECRESC:\n        ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  draw(): void {\n    this.checkContext();\n    this.setRendered();\n\n    const firstNote = this.first_note;\n    const lastNote = this.last_note;\n    if (!firstNote || !lastNote) throw new RuntimeError('NoNote', 'Notes required to draw');\n\n    const start = firstNote.getModifierStartXY(this.position, 0);\n    const end = lastNote.getModifierStartXY(this.position, 0);\n\n    this.renderHairpin({\n      first_x: start.x,\n      last_x: end.x,\n      first_y: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n      last_y: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n      staff_height: firstNote.checkStave().getHeight(),\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { TabNote } from './tabnote';\nimport { TabTie } from './tabtie';\nimport { TieNotes } from './types/common';\nimport { RuntimeError } from './util';\n\nexport class TabSlide extends TabTie {\n  static get CATEGORY(): string {\n    return 'TabSlide';\n  }\n\n  static get SLIDE_UP(): number {\n    return 1;\n  }\n\n  static get SLIDE_DOWN(): number {\n    return -1;\n  }\n\n  static createSlideUp(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_UP);\n  }\n\n  static createSlideDown(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n  }\n\n  /**\n   * @param notes is a struct of the form:\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   * @param notes.first_note the starting note of the slide\n   * @param notes.last_note the ending note of the slide\n   * @param notes.first_indices specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n   * @param notes.last_indices currently unused. we assume it's the same as first_indices.\n   *\n   * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n   */\n  constructor(notes: TieNotes, direction?: number) {\n    super(notes, 'sl.');\n\n    // Determine the direction automatically if it is not provided.\n    if (!direction) {\n      let first_fret = (notes.first_note as TabNote).getPositions()[0].fret;\n      if (typeof first_fret === 'string') {\n        first_fret = parseInt(first_fret, 10);\n      }\n      let last_fret = (notes.last_note as TabNote).getPositions()[0].fret;\n      if (typeof last_fret === 'string') {\n        last_fret = parseInt(last_fret, 10);\n      }\n\n      // If either of the frets are 'X', parseInt() above will return NaN.\n      // Choose TabSlide.SLIDE_UP by default.\n      if (isNaN(first_fret) || isNaN(last_fret)) {\n        direction = TabSlide.SLIDE_UP;\n      } else {\n        direction = first_fret > last_fret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n      }\n    }\n\n    this.direction = direction;\n    this.render_options.cp1 = 11;\n    this.render_options.cp2 = 14;\n    this.render_options.y_shift = 0.5;\n\n    this.setFont({ family: 'Times', size: 10, weight: 'bold italic' });\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new RuntimeError('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    const first_x_px = params.first_x_px;\n    const first_ys = params.first_ys;\n    const last_x_px = params.last_x_px;\n\n    const direction = params.direction;\n    if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n      throw new RuntimeError('BadSlide', 'Invalid slide direction');\n    }\n\n    // eslint-disable-next-line\n    const first_indices = this.notes.first_indices!;\n    for (let i = 0; i < first_indices.length; ++i) {\n      const slide_y = first_ys[first_indices[i]] + this.render_options.y_shift;\n\n      if (isNaN(slide_y)) {\n        throw new RuntimeError('BadArguments', 'Bad indices for slide rendering.');\n      }\n\n      ctx.beginPath();\n      ctx.moveTo(first_x_px, slide_y + 3 * direction);\n      ctx.lineTo(last_x_px, slide_y - 3 * direction);\n      ctx.closePath();\n      ctx.stroke();\n    }\n\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\nimport { Flow } from './flow';\n\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n  protected tuningValues: number[] = [];\n\n  static get names(): Record<string, string> {\n    return {\n      standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n      dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n      dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n      eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n      standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n    };\n  }\n\n  /**\n   * Constructor.\n   * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n   */\n  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n    // Default to standard tuning.\n    this.setTuning(tuningString);\n  }\n\n  /** Return the note number associated to the note string. */\n  noteToInteger(noteString: string): number {\n    return Flow.keyProperties(noteString).int_value;\n  }\n\n  /**\n   * Set tuning identified by tuning name (eg. 'dagdad')\n   * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n   */\n  setTuning(tuningString: string): void {\n    if (Tuning.names[tuningString]) {\n      tuningString = Tuning.names[tuningString];\n    }\n\n    this.tuningValues = [];\n\n    const keys = tuningString.split(/\\s*,\\s*/);\n    if (keys.length === 0) {\n      throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n    }\n\n    for (let i = 0; i < keys.length; ++i) {\n      this.tuningValues[i] = this.noteToInteger(keys[i]);\n    }\n  }\n\n  /** Return the note number associated with a tablature string. */\n  getValueForString(stringNum: string | number): number {\n    const s = Number(stringNum);\n    if (s < 1 || s > this.tuningValues.length) {\n      throw new RuntimeError(\n        'BadArguments',\n        `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`\n      );\n    }\n\n    return this.tuningValues[s - 1];\n  }\n\n  /** Return the note number associated with a tablature string and fret. */\n  getValueForFret(fretNum: string | number, stringNum: string | number): number {\n    const stringValue = this.getValueForString(stringNum);\n    const f = Number(fretNum);\n\n    if (f < 0) {\n      throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n    }\n\n    return stringValue + f;\n  }\n\n  /** Return the note string associated with tablature string and fret. */\n  getNoteForFret(fretNum: string | number, stringNum: string | number): string {\n    const noteValue = this.getValueForFret(fretNum, stringNum);\n\n    const octave = Math.floor(noteValue / 12);\n    const value = noteValue % 12;\n\n    return `${Flow.integerToNote(value)}/${octave}`;\n  }\n}\n","import { Tables } from './tables';\n\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Barline } from './stavebarline';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { ChordSymbol } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, Fonts } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Modifier } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Repetition } from './staverepetition';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { System } from './system';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextFont } from './textfont';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nimport { Volta } from './stavevolta';\n\nexport const Flow = {\n  ...Tables,\n\n  Accidental,\n  Annotation,\n  Articulation,\n  Barline,\n  BarNote,\n  Beam,\n  Bend,\n  BoundingBox,\n  BoundingBoxComputation,\n  ChordSymbol,\n  Clef,\n  ClefNote,\n  Crescendo,\n  Curve,\n  Dot,\n  EasyScore,\n  Element,\n  Factory,\n  Font,\n  Fonts,\n  Formatter,\n  Fraction,\n  FretHandFinger,\n  GhostNote,\n  Glyph,\n  GlyphNote,\n  GraceNote,\n  GraceNoteGroup,\n  GraceTabNote,\n  KeyManager,\n  KeySignature,\n  KeySigNote,\n  Modifier,\n  ModifierContext,\n  MultiMeasureRest,\n  Music,\n  Note,\n  NoteHead,\n  NoteSubGroup,\n  Ornament,\n  Parser,\n  PedalMarking,\n  Registry,\n  Renderer,\n  RepeatNote,\n  Repetition,\n  Stave,\n  StaveConnector,\n  StaveHairpin,\n  StaveLine,\n  StaveModifier,\n  StaveNote,\n  StaveTempo,\n  StaveText,\n  StaveTie,\n  Stem,\n  StringNumber,\n  Stroke,\n  System,\n  TabNote,\n  TabSlide,\n  TabStave,\n  TabTie,\n  TextBracket,\n  TextDynamics,\n  TextFont,\n  TextNote,\n  TickContext,\n  TimeSignature,\n  TimeSigNote,\n  Tremolo,\n  Tuning,\n  Tuplet,\n  Vibrato,\n  VibratoBracket,\n  Voice,\n  Volta,\n\n  // BUILD and VERSION are set by webpack. See: Gruntfile.js.\n  BUILD: '',\n  VERSION: '',\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\n\nimport { TabNote, TabNoteStruct } from './tabnote';\n\nexport class GraceTabNote extends TabNote {\n  static get CATEGORY(): string {\n    return 'GraceTabNote';\n  }\n\n  constructor(noteStruct: TabNoteStruct) {\n    super(noteStruct, false);\n\n    this.render_options = {\n      ...this.render_options,\n      // vertical shift from stave line\n      y_shift: 0.3,\n      // grace glyph scale\n      scale: 0.6,\n      // grace tablature font\n      font: '7.5pt Arial',\n    };\n\n    this.updateWidth();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\n\nimport { RuntimeError } from './util';\nimport { Music, KeyParts } from './music';\n\nexport class KeyManager {\n  protected music: Music;\n  // all attributes below are initialised in setKey which calls reset in the constructor\n  protected keyParts!: KeyParts;\n  protected keyString!: string;\n  protected key!: string;\n  protected scale!: number[];\n  protected scaleMap!: Record<string, string>;\n  protected scaleMapByValue!: Record<number, string>;\n  protected originalScaleMapByValue!: Record<number, string>;\n\n  constructor(key: string) {\n    this.music = new Music();\n    this.setKey(key);\n  }\n\n  setKey(key: string): this {\n    this.key = key;\n    this.reset();\n    return this;\n  }\n\n  getKey(): string {\n    return this.key;\n  }\n\n  reset(): this {\n    this.keyParts = this.music.getKeyParts(this.key);\n\n    this.keyString = this.keyParts.root;\n    if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\n    const is_supported_type = Music.scaleTypes[this.keyParts.type];\n    if (!is_supported_type) {\n      throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n    }\n\n    this.scale = this.music.getScaleTones(\n      this.music.getNoteValue(this.keyString),\n      Music.scaleTypes[this.keyParts.type]\n    );\n\n    this.scaleMap = {};\n    this.scaleMapByValue = {};\n    this.originalScaleMapByValue = {};\n\n    const noteLocation = Music.root_indices[this.keyParts.root];\n\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n\n      const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n      this.scaleMap[rootName] = noteName;\n      this.scaleMapByValue[this.scale[i]] = noteName;\n      this.originalScaleMapByValue[this.scale[i]] = noteName;\n    }\n\n    return this;\n  }\n\n  getAccidental(key: string): {\n    note: string;\n    accidental?: string;\n    change?: boolean;\n  } {\n    const root = this.music.getKeyParts(key).root;\n    const parts = this.music.getNoteParts(this.scaleMap[root]);\n\n    return {\n      note: this.scaleMap[root],\n      accidental: parts.accidental,\n    };\n  }\n\n  selectNote(note: string): {\n    note: string;\n    accidental?: string;\n    change: boolean;\n  } {\n    note = note.toLowerCase();\n    const parts = this.music.getNoteParts(note);\n\n    // First look for matching note in our altered scale\n    const scaleNote = this.scaleMap[parts.root];\n    const modparts = this.music.getNoteParts(scaleNote);\n\n    if (scaleNote === note) {\n      return {\n        note: scaleNote,\n        accidental: parts.accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in our altered scale\n    const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n    if (valueNote != null) {\n      return {\n        note: valueNote,\n        accidental: this.music.getNoteParts(valueNote).accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in the original scale\n    const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n    if (originalValueNote != null) {\n      this.scaleMap[modparts.root] = originalValueNote;\n      delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n      this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n      return {\n        note: originalValueNote,\n        accidental: this.music.getNoteParts(originalValueNote).accidental,\n        change: true,\n      };\n    }\n\n    // Then try to unmodify a currently modified note.\n    if (modparts.root === note) {\n      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n      this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n      this.scaleMap[modparts.root] = modparts.root;\n      return {\n        note: modparts.root,\n        accidental: undefined,\n        change: true,\n      };\n    }\n\n    // Last resort -- shitshoot\n    delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n    this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\n    delete this.scaleMap[modparts.root];\n    this.scaleMap[modparts.root] = note;\n\n    return {\n      note,\n      accidental: parts.accidental,\n      change: true,\n    };\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n// MIT License\n\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Stem } from './stem';\nimport { isGraceNote } from 'typeguard';\n\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n  static get CATEGORY(): string {\n    return 'Tremolo';\n  }\n\n  protected readonly code: string;\n  protected readonly num: number;\n\n  /**\n   * @param num number of bars\n   */\n  constructor(num: number) {\n    super();\n\n    this.num = num;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'tremolo1';\n  }\n\n  /** Draw the tremolo on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const stemDirection = note.getStemDirection();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n\n    const gn = isGraceNote(note);\n    const scale = gn ? GraceNote.SCALE : 1;\n    const category = `tremolo.${gn ? 'grace' : 'default'}`;\n\n    const y_spacing = this.musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n    const height = this.num * y_spacing;\n    let y = note.getStemExtents().baseY - height;\n\n    if (stemDirection < 0) {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n    } else {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n    }\n\n    const fontScale = this.musicFont.lookupMetric(`${category}.point`);\n\n    x += this.musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(ctx, x, y, fontScale, this.code, { category });\n      y += y_spacing;\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RenderContext } from './types/common';\n\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n  code: string;\n  constructor(code: string, message: string = '') {\n    super('[RuntimeError] ' + code + ': ' + message);\n    this.code = code;\n  }\n}\n\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined<T>(x?: T, code: string = 'undefined', message: string = ''): T {\n  if (x === undefined) {\n    throw new RuntimeError(code, message);\n  }\n  return x;\n}\n\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block: string, ...args: any[]): void {\n  if (!args) return;\n  const line = Array.prototype.slice.call(args).join(' ');\n  window.console.log(block + ': ' + line);\n}\n\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args: any[]): void {\n  const line = args.join(' ');\n  const err = new Error();\n  window.console.log('Warning: ', line, err.stack);\n}\n\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x: number, n: number): number {\n  return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a: number, b: number): number {\n  let mid_line = b + (a - b) / 2;\n  if (mid_line % 2 > 0) {\n    mid_line = roundN(mid_line * 10, 5) / 10;\n  }\n  return mid_line;\n}\n\n/**\n * Draw a tiny dot marker on the specified canvas. A great debugging aid.\n * @param ctx canvas context\n * @param x dot x coordinate\n * @param y dot y coordinate\n */\nexport function drawDot(ctx: RenderContext, x: number, y: number, color = '#55'): void {\n  ctx.save();\n  ctx.setFillStyle(color);\n\n  // draw a circle\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n}\n\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text: string): string {\n  return `vf-${text}`;\n}\n\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a: number): number {\n  a = a % (2 * Math.PI);\n  if (a < 0) {\n    a += 2 * Math.PI;\n  }\n  return a;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"vexflow-font-\" + {\"81\":\"leland\",\"289\":\"custom\",\"347\":\"bravura\",\"571\":\"gonville\",\"623\":\"petaluma\"}[chunkId] + \"-min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this[\"webpackChunkVex\"] = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this[\"webpackChunkVex\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","import{Flow}from'flow';Flow.VERSION=\"3.0.9\";Flow.BUILD=\"123eca67e30641282721144f7d8bc32d3e6ee663\";","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n\nimport { log, RuntimeError } from './util';\nimport { Flow } from './flow';\n\nexport const Vex = {\n  Flow: Flow,\n\n  forEach:\n    // eslint-disable-next-line\n  (a: any[], fn: any) => {\n      for (let i = 0; i < a.length; i++) {\n        fn(a[i], i);\n      }\n    },\n\n  // Take `arr` and return a new list consisting of the sorted, unique,\n  // contents of arr. Does not modify `arr`.\n  SortAndUnique:\n    // eslint-disable-next-line\n    (arr: any[], cmp: any, eq: any) => {\n      if (arr.length > 1) {\n        const newArr = [];\n        let last;\n        arr.sort(cmp);\n\n        for (let i = 0; i < arr.length; ++i) {\n          if (i === 0 || !eq(arr[i], last)) {\n            newArr.push(arr[i]);\n          }\n          last = arr[i];\n        }\n\n        return newArr;\n      } else {\n        return arr;\n      }\n    },\n\n  // Check if array `a` contains `obj`.\n  Contains:\n    // eslint-disable-next-line\n    (a: any[], obj: any) => {\n      let i = a.length;\n      while (i--) {\n        if (a[i] === obj) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n  // Get the 2D Canvas context from DOM element `canvas_sel`.\n  getCanvasContext: (canvas_sel: string): RenderingContext => {\n    if (!canvas_sel) {\n      throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n    }\n\n    const canvas = document.getElementById(canvas_sel) as HTMLCanvasElement;\n    if (!(canvas && canvas.getContext)) {\n      throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n    }\n\n    return canvas.getContext('2d') as RenderingContext;\n  },\n\n  // Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\n  BM:\n    // eslint-disable-next-line\n  (s: any, f: any) => {\n      const start_time = new Date().getTime();\n      f();\n      const elapsed = new Date().getTime() - start_time;\n      log(s, elapsed + 'ms');\n    },\n\n  // Get stack trace.\n  StackTrace: (): string | undefined => {\n    const err = new Error();\n    return err.stack;\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\n\nexport default Vex;\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","inProgress","dataWebpackPrefix","Font","constructor","name","metrics","fontData","fontDataMetrics","undefined","_","default","loadBravura","loadCustom","loadGonville","loadPetaluma","loadLeland","getName","getResolution","getFontData","resolution","getMetrics","lookupMetric","key","defaultValue","keyParts","split","currObj","i","length","value","getGlyphs","glyphs","Fonts","Bravura","Gonville","Petaluma","Leland","Custom","Fraction","numerator","denominator","set","CATEGORY","static","a","b","Number","isNaN","t","GCD","args","LCM","shift","LCMM","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","__staticFractionA","copy","__staticFractionB","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","Math","floor","remainder","makeAbs","abs","toString","toSimplifiedString","__staticFractionTmp","toMixedString","s","q","f","parse","str","n","parseInt","Index","id","type","class","Registry","index","defaultRegistry","registry","clear","setIndexValue","elem","updateIndex","oldValue","getElementById","getAttribute","register","setAttribute","onRegister","getElementsByAttribute","attribute","index_attr","index_attr_val","Object","keys","map","k","getElementsByType","getElementsByClass","className","onUpdate","info","includes","Element","attrs","newID","el","getCategory","classes","rendered","setFontStack","Flow","DEFAULT_FONT_STACK","ID","fontStack","musicFont","getFontStack","setStyle","style","getStyle","applyStyle","context","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","addClass","removeClass","isRendered","setRendered","getAttributes","oldID","getBoundingBox","boundingBox","getContext","setContext","BoundingBoxComputation","x1","NaN","y1","x2","y2","getX1","getY1","width","height","addPoint","x","y","addX","addY","addQuadraticCurve","p0x","p0y","p1x","p1y","p2x","p2y","p01x","denom","it","p01y","addBezierCurve","p3x","p3y","p0","p1","p2","p3","pow","c","b2ac","t1","sqrt","t2","BoundingBox","w","h","that","getX","getY","getW","getH","setX","setY","setW","setH","move","mergeWith","ctx","new_x","new_y","new_w","max","new_h","rect","stroke","GlyphCacheEntry","code","category","point","Glyph","loadMetrics","bbox","getOutlineBoundingBox","outline","scale","x_shift","y_shift","lookupFontMetric","font","GlyphOutline","originX","originY","done","next","nextX","nextY","result","parts","push","options","super","topGlyphs","botGlyphs","originShift","setOptions","reset","glyph","lookupGlyph","o","x_min","x_max","ha","cached_outline","x_pos","y_pos","params","data","cache","lookup","renderOutline","go","beginPath","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","fill","bboxComp","penX","penY","getCode","setPoint","setStave","stave","setXShift","setYShift","checkMetrics","metricsScale","setOriginX","xShift","setOriginY","yShift","setOrigin","render","xPos","yPos","checkStave","renderToStave","getYForGlyphs","Map","entries","get","entry","customNoteHeads","D0","D1","D2","D3","T0","T1","T2","T3","X0","X1","X2","X3","S1","S2","R1","R2","RESOLUTION","durations","accidentals","parenRightPaddingAdjustment","bb","db","bs","bss","bbs","ashs","afhf","accSagittal5v7KleismaUp","accSagittal5v7KleismaDown","accSagittal5CommaUp","accSagittal5CommaDown","accSagittal7CommaUp","accSagittal7CommaDown","accSagittal25SmallDiesisUp","accSagittal25SmallDiesisDown","accSagittal35MediumDiesisUp","accSagittal35MediumDiesisDown","accSagittal11MediumDiesisUp","accSagittal11MediumDiesisDown","accSagittal11LargeDiesisUp","accSagittal11LargeDiesisDown","accSagittal35LargeDiesisUp","accSagittal35LargeDiesisDown","accSagittalSharp25SDown","accSagittalFlat25SUp","accSagittalSharp7CDown","accSagittalFlat7CUp","accSagittalSharp5CDown","accSagittalFlat5CUp","accSagittalSharp5v7kDown","accSagittalFlat5v7kUp","accSagittalSharp","accSagittalFlat","accSagittalSharp5v7kUp","accSagittalFlat5v7kDown","accSagittalSharp5CUp","accSagittalFlat5CDown","accSagittalSharp7CUp","accSagittalFlat7CDown","accSagittalSharp25SUp","accSagittalFlat25SDown","accSagittalSharp35MUp","accSagittalFlat35MDown","accSagittalSharp11MUp","accSagittalFlat11MDown","accSagittalSharp11LUp","accSagittalFlat11LDown","accSagittalSharp35LUp","accSagittalFlat35LDown","accSagittalDoubleSharp25SDown","accSagittalDoubleFlat25SUp","accSagittalDoubleSharp7CDown","accSagittalDoubleFlat7CUp","accSagittalDoubleSharp5CDown","accSagittalDoubleFlat5CUp","accSagittalDoubleSharp5v7kDown","accSagittalDoubleFlat5v7kUp","accSagittalDoubleSharp","accSagittalDoubleFlat","accSagittal7v11KleismaUp","accSagittal7v11KleismaDown","accSagittal17CommaUp","accSagittal17CommaDown","accSagittal55CommaUp","accSagittal55CommaDown","accSagittal7v11CommaUp","accSagittal7v11CommaDown","accSagittal5v11SmallDiesisUp","accSagittal5v11SmallDiesisDown","accSagittalSharp5v11SDown","accSagittalFlat5v11SUp","accSagittalSharp7v11CDown","accSagittalFlat7v11CUp","accSagittalSharp55CDown","accSagittalFlat55CUp","accSagittalSharp17CDown","accSagittalFlat17CUp","accSagittalSharp7v11kDown","accSagittalFlat7v11kUp","accSagittalSharp7v11kUp","accSagittalFlat7v11kDown","accSagittalSharp17CUp","accSagittalFlat17CDown","accSagittalSharp55CUp","accSagittalFlat55CDown","accSagittalSharp7v11CUp","accSagittalFlat7v11CDown","accSagittalSharp5v11SUp","accSagittalFlat5v11SDown","accSagittalDoubleSharp5v11SDown","accSagittalDoubleFlat5v11SUp","accSagittalDoubleSharp7v11CDown","accSagittalDoubleFlat7v11CUp","accSagittalDoubleSharp55CDown","accSagittalDoubleFlat55CUp","accSagittalDoubleSharp17CDown","accSagittalDoubleFlat17CUp","accSagittalDoubleSharp7v11kDown","accSagittalDoubleFlat7v11kUp","accSagittal23CommaUp","accSagittal23CommaDown","accSagittal5v19CommaUp","accSagittal5v19CommaDown","accSagittal5v23SmallDiesisUp","accSagittal5v23SmallDiesisDown","accSagittalSharp5v23SDown","accSagittalFlat5v23SUp","accSagittalSharp5v19CDown","accSagittalFlat5v19CUp","accSagittalSharp23CDown","accSagittalFlat23CUp","accSagittalSharp23CUp","accSagittalFlat23CDown","accSagittalSharp5v19CUp","accSagittalFlat5v19CDown","accSagittalSharp5v23SUp","accSagittalFlat5v23SDown","accSagittalDoubleSharp5v23SDown","accSagittalDoubleFlat5v23SUp","accSagittalDoubleSharp5v19CDown","accSagittalDoubleFlat5v19CUp","accSagittalDoubleSharp23CDown","accSagittalDoubleFlat23CUp","accSagittal19SchismaUp","accSagittal19SchismaDown","accSagittal17KleismaUp","accSagittal17KleismaDown","accSagittal143CommaUp","accSagittal143CommaDown","accSagittal11v49CommaUp","accSagittal11v49CommaDown","accSagittal19CommaUp","accSagittal19CommaDown","accSagittal7v19CommaUp","accSagittal7v19CommaDown","accSagittal49SmallDiesisUp","accSagittal49SmallDiesisDown","accSagittal23SmallDiesisUp","accSagittal23SmallDiesisDown","accSagittal5v13MediumDiesisUp","accSagittal5v13MediumDiesisDown","accSagittal11v19MediumDiesisUp","accSagittal11v19MediumDiesisDown","accSagittal49MediumDiesisUp","accSagittal49MediumDiesisDown","accSagittal5v49MediumDiesisUp","accSagittal5v49MediumDiesisDown","accSagittal49LargeDiesisUp","accSagittal49LargeDiesisDown","accSagittal11v19LargeDiesisUp","accSagittal11v19LargeDiesisDown","accSagittal5v13LargeDiesisUp","accSagittal5v13LargeDiesisDown","accSagittalSharp23SDown","accSagittalFlat23SUp","accSagittalSharp49SDown","accSagittalFlat49SUp","accSagittalSharp7v19CDown","accSagittalFlat7v19CUp","accSagittalSharp19CDown","accSagittalFlat19CUp","accSagittalSharp11v49CDown","accSagittalFlat11v49CUp","accSagittalSharp143CDown","accSagittalFlat143CUp","accSagittalSharp17kDown","accSagittalFlat17kUp","accSagittalSharp19sDown","accSagittalFlat19sUp","accSagittalSharp19sUp","accSagittalFlat19sDown","accSagittalSharp17kUp","accSagittalFlat17kDown","accSagittalSharp143CUp","accSagittalFlat143CDown","accSagittalSharp11v49CUp","accSagittalFlat11v49CDown","accSagittalSharp19CUp","accSagittalFlat19CDown","accSagittalSharp7v19CUp","accSagittalFlat7v19CDown","accSagittalSharp49SUp","accSagittalFlat49SDown","accSagittalSharp23SUp","accSagittalFlat23SDown","accSagittalSharp5v13MUp","accSagittalFlat5v13MDown","accSagittalSharp11v19MUp","accSagittalFlat11v19MDown","accSagittalSharp49MUp","accSagittalFlat49MDown","accSagittalSharp5v49MUp","accSagittalFlat5v49MDown","accSagittalSharp49LUp","accSagittalFlat49LDown","accSagittalSharp11v19LUp","accSagittalFlat11v19LDown","accSagittalSharp5v13LUp","accSagittalFlat5v13LDown","accSagittalDoubleSharp23SDown","accSagittalDoubleFlat23SUp","accSagittalDoubleSharp49SDown","accSagittalDoubleFlat49SUp","accSagittalDoubleSharp7v19CDown","accSagittalDoubleFlat7v19CUp","accSagittalDoubleSharp19CDown","accSagittalDoubleFlat19CUp","accSagittalDoubleSharp11v49CDown","accSagittalDoubleFlat11v49CUp","accSagittalDoubleSharp143CDown","accSagittalDoubleFlat143CUp","accSagittalDoubleSharp17kDown","accSagittalDoubleFlat17kUp","accSagittalDoubleSharp19sDown","accSagittalDoubleFlat19sUp","accSagittalShaftUp","accSagittalShaftDown","accSagittalAcute","accSagittalGrave","accSagittal1MinaUp","accSagittal1MinaDown","accSagittal2MinasUp","accSagittal2MinasDown","accSagittal1TinaUp","accSagittal1TinaDown","accSagittal2TinasUp","accSagittal2TinasDown","accSagittal3TinasUp","accSagittal3TinasDown","accSagittal4TinasUp","accSagittal4TinasDown","accSagittal5TinasUp","accSagittal5TinasDown","accSagittal6TinasUp","accSagittal6TinasDown","accSagittal7TinasUp","accSagittal7TinasDown","accSagittal8TinasUp","accSagittal8TinasDown","accSagittal9TinasUp","accSagittal9TinasDown","accSagittalFractionalTinaUp","accSagittalFractionalTinaDown","accidentalNarrowReversedFlat","accidentalNarrowReversedFlatAndFlat","accidentalWilsonPlus","accidentalWilsonMinus","duration_codes","Tables","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","DEFAULT_NOTATION_FONT_SCALE","DEFAULT_TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","IsKerned","clefProperties","clef","props","treble","line_shift","bass","tenor","alto","soprano","percussion","subbass","french","keyProperties","octave_shift","pieces","toUpperCase","C","int_val","CN","accidental","CB","CBB","D","DN","DB","DBB","E","EN","EB","EBB","F","FN","FB","FBB","G","GN","GB","GBB","A","AN","AB","ABB","B","BN","BB","BBB","R","rest","X","octave","shift_right","line","int_value","extraProps","glyph_name","displaced","integerToNote","integer","noteValue","tabToGlyph","fret","shift_y","glyphMetrics","textWidth","text","getWidth","articulationCodes","artic","between_lines","av","aboveCode","belowCode","ao","ah","am","accidentalMap","accidentalCodes","acc","accidentalColumnsTable","second_on_bottom","spaced_out_tetrachord","spaced_out_pentachord","very_spaced_out_pentachord","spaced_out_hexachord","very_spaced_out_hexachord","ornamentCodes","mordent","mordent_inverted","turn","turn_inverted","tr","upprall","downprall","prallup","pralldown","upmordent","downmordent","lineprall","prallprall","scoop","doit","fall","doitLong","fallLong","bend","plungerClosed","plungerOpen","flip","jazzTurn","smear","keySignature","spec","keySpec","num","Am","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","Em","Bm","notes","acc_list","unicode","sharp","String","fromCharCode","flat","natural","triangle","degrees","circle","sanitizeDuration","duration","alias","durationToFraction","durationToNumber","durationToTicks","ticks","getGlyphProps","common","stem","stem_offset","flag","stem_up_extension","stem_down_extension","tabnote_stem_up_extension","tabnote_stem_down_extension","dot_shiftY","line_above","line_below","code_head","m","r","position","beam_count","code_flag_upstem","code_flag_downstem","glyphTypeProperties","customGlyphTypeProperties","validTypes","TIME4_4","num_beats","beat_value","Music","NUM_TONES","canonical_notes","roots","root_values","root_indices","e","g","diatonic_intervals","diatonic_accidentals","unison","note","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","intervals","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","scales","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","scaleTypes","M","noteValues","root_index","cn","cb","cbb","dn","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bbb","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","toLowerCase","match","exec","getKeyParts","keyString","getNoteValue","getIntervalValue","intervalString","getCanonicalNoteName","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","sum","getRelativeNoteName","rootValue","multiplier","reverse_interval","relativeNoteName","getScaleTones","tones","nextNote","getIntervalBetween","note1","note2","difference","createScaleMap","keySigParts","scaleName","keySigString","noteLocation","scaleMap","rootName","noteName","ModifierPosition","Modifier","text_line","Position","LEFT","spacingFromNextModifier","PositionString","center","CENTER","above","ABOVE","below","BELOW","left","right","RIGHT","setWidth","getNote","checkAttachedNote","setNote","getIndex","checkIndex","setIndex","getModifierContext","modifierContext","checkModifierContext","setModifierContext","getPosition","setPosition","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","getXShift","alignSubNotesWithNote","subNotes","tickContext","getTickContext","getStave","subNoteXOffset","modLeftPx","modRightPx","forEach","subNote","subTickContext","setXOffset","Dot","radius","dots","state","right_shift","dot_list","max_shift_map","dot","isStaveNote","getKeyProps","getRightDisplacedHeadPx","isTabNote","note_id","sort","dot_shift","x_width","last_line","last_note","prev_dotted_space","half_shiftY","isRest","isGraceNote","setDotShiftY","lineSpace","getSpacingBetweenLines","start","getModifierStartXY","forceFlagRight","getStemExtents","baseY","arc","PI","Stem","stem_up_y_offset","stem_down_y_offset","stem_up_y_base_offset","stem_down_y_base_offset","x_begin","x_end","y_top","y_bottom","stem_extension","stem_direction","hide","isStemlet","stemletHeight","renderHeightAdjustment","UP","DOWN","WIDTH","HEIGHT","setNoteHeadXBounds","setDirection","setExtension","ext","getExtension","setYBounds","getHeight","y_offset","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","setVisibility","isVisible","setStemlet","adjustHeightForFlag","adjustHeightForBeam","stem_x","stem_y","y_base_offset","DEBUG","L","stemletYOffset","Tickable","preFormatted","postFormatted","intrinsicTicks","tickMultiplier","modifiers","tupletStack","align_center","center_x_shift","ignore_ticks","formatterMetrics","freedom","iterations","space","used","mean","deviation","getTicks","shouldIgnoreTicks","setIgnoreTicks","checkTickContext","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterXShift","centerXShift","setCenterAlignment","getVoice","voice","setVoice","getTuplet","tuplet","getTupletStack","resetTuplet","noteCount","notesOccupied","indexOf","splice","getNoteCount","getNotesOccupied","applyTickMultiplier","pop","setTuplet","addToModifierContext","mc","addMember","setPreFormatted","addModifier","mod","optionalArgs","getModifiers","setTickContext","tc","message","preFormat","postFormat","getIntrinsicTicks","setIntrinsicTicks","getTickMultiplier","setDuration","getAbsoluteX","Note","noteStruct","parsedNoteStruct","parseNoteStruct","JSON","stringify","keyProps","noteType","customTypes","duration_override","customGlyphs","playNote","leftDisplacedHeadPx","rightDisplacedHeadPx","render_options","annotation_spacing","glyph_font_scale","stroke_px","xStart","xPre1","xAbs","xPost1","notePx","xPost2","xEnd","xFreedomRight","xWidth","setFont","fillText","round","color","yy","spaceDeviation","prefix","durationString","durationProps","parseDuration","currentTicks","getPlayNote","setPlayNote","addStroke","setYs","getYForLine","getLeftDisplacedHeadPx","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","getLineNumber","isTopNote","getLineForRest","getGlyph","getGlyphWidth","getYs","getYForTopText","getDuration","isDotted","hasStem","getNoteType","getBeam","beam","checkBeam","hasBeam","setBeam","modifier","left_shift","glyphWidth","glyphPx","getNoteStartX","getStemDirection","getTieRightX","tieStartX","getTieLeftX","tieEndX","getKeys","NoteHead","custom_glyph","stem_up_x_offset","stem_down_x_offset","note_type","glyph_code","custom_glyph_code","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","fontShift","displacedFontShift","spacing","half_spacing","min_y","getYForNote","head_x","categorySuffix","staveSpace","closePath","breve_lines","drawSlashNoteHead","renderGlyph","StemmableNote","getStem","checkStem","setStem","buildStem","buildFlag","hasFlag","flagCode","getBaseCustomNoteHeadGlyph","getStemLength","getStemExtension","getBeamCount","getStemMinimumLength","setStemDirection","offsets","offsetYBaseStemUp","offsetYTopStemUp","offsetYBaseStemDown","offsetYTopStemDown","getStemX","getCenterGlyphX","stem_extension_override","setStemLength","textLine","extents","getYForBottomText","drawStem","stemOptions","shiftRestVertical","dir","delta","isrest","maxLine","minLine","setKeyLine","getKeyLine","StaveNote","ledgerLineStyle","use_default_head_x","note_heads","DEFAULT_LEDGER_LINE_OFFSET","calculateKeyProps","auto_stem","autoStem","STEM_UP","STEM_DOWN","minNoteheadPadding","formatByY","notesList","minL","stemDirection","stemMax","stemMin","maxL","voice_shift","getVoiceShiftWidth","is_displaced","voices","noteU","noteM","noteL","voiceXShift","stemDelta","lineSpacing","centerRest","hasStave","topNote","bottomNote","topKeys","bottomKeys","HALF_NOTEHEAD_HEIGHT","topNoteBottomY","bottomNoteTopY","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","head","calcNoteDisplacements","lastLine","lineDiff","end","step","noteProps","notehead","calculateOptimalStemDirection","minY","maxY","halfLineSpacing","frac","resultLine","thisLine","isChord","getNoteHeadBounds","setNoteDisplaced","getRightShift","restLine","top","bot","isInnerNoteIndex","setStemStyle","getStemStyle","setLedgerLineStyle","getLedgerLineStyle","setFlagStyle","flagStyle","getFlagStyle","setKeyStyle","addAccidental","addArticulation","articulation","addAnnotation","annotation","addDot","addDotToAll","getAccidentals","getMembers","Accidental","getDots","noteHeadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","yTop","Infinity","yBottom","highestLine","getNumLines","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","displaced_x","non_displaced_x","highest_line","lowest_line","highest_displaced_line","lowest_displaced_line","highest_non_displaced_line","lowest_non_displaced_line","getNoteHeadBeginX","getNoteHeadEndX","drawLedgerLines","doubleWidth","min_x","drawLedgerLine","normal","ledgerWidth","drawModifiers","openGroup","noteheadStyle","closeGroup","hasNoBeam","drawFlag","noteStemHeight","flagX","flagY","pointerBBox","drawNoteHeads","super_stem_extension","mid_line_distance","lines_over_octave_from_mid_line","spacing_between_lines","xBegin","shouldRenderStem","stemX","GraceNote","SCALE","LEDGER_LINE_OFFSET","slash","slur","ret","staveNoteScale","getStaveNoteScale","offsetScale","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","defaultStemExtention","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beam_slope","slope","scaleX","beam_angle","atan","iPointOnBeam","cos","sin","slash_angle","protrusion_stem_dx","protrusion_stem_dy","protrusion_beam_dx","protrusion_beam_dy","stem0X","stemY","getBeamYToDraw","Tuplet","numerator_glyphs","denom_glyphs","num_notes","beats_occupied","beatsOccupiedDeprecationWarning","notes_occupied","bracketed","some","ratioed","setTupletLocation","location","LOCATION_TOP","Formatter","AlignRestsToNotes","resolveGlyphs","attach","LOCATION_BOTTOM","NESTING_OFFSET","detach","setBracketed","setRatioed","console","warn","getNotes","getBeatsOccupied","setBeatsOccupied","beats","setNotesOccupied","unshift","getNestedTupletCount","first_note","maxTupletCount","countTuplets","minTupletCount","filter","tupletCount","getYPosition","nested_tuplet_y_offset","top_y","bottom_y","addGlyphWidth","reduce","notation_start_x","line_width","fillRect","shiftY","x_offset","colon_x","colon_radius","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_BOTH","Beam","stem_weight","memo","break_on_indices","beam_width","max_slope","min_slope","slope_iterations","slope_cost","show_stemlets","stemlet_extension","partial_beam_length","flat_beams","min_flat_beam_offset","time_sig","groups","group","beatTotal","beatValue","generateBeams","getTickables","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","totalTicks","vf_notes","unbeamable","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","prevNote","breaksOnEachRest","beam_rests","breaksOnFirstOrLastRest","beam_middle_only","breakOnStemChange","maintain_stem_directions","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","beams","secondary_breaks","secondary_break_ticks","flat_beam_offset","beamCount","breakSecondaryAt","indices","getSlopeY","first_x_px","first_y_px","calculateSlope","firstNote","initialSlope","lastNote","firstStemTipY","firstStemX","getStemSlope","increment","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","stemTipY","diff","idealSlope","cost","calculateFlatSlope","total","extremeY","extremeBeamCount","currentExtreme","offset","extremeTest","newOffset","beamY","applyStemExtensions","beamedStemTipY","preBeamExtension","beamExtension","totalBeamWidth","lookupBeamDirection","prev_tick","tick","next_tick","lookup_duration","prev_note_gets_beam","next_note_gets_beam","note_gets_beam","getBeamLines","tick_of_duration","beam_started","beam_lines","current_beam","previous_should_break","tick_tally","should_break","prev_note","next_note","beam_alone","beam_direction","last_beam","drawStems","drawBeamLines","valid_beam_durations","beamThickness","beamLines","j","beam_line","startBeamX","startBeamY","lastBeamX","lastBeamY","VoiceMode","Voice","time","voiceTime","resolutionMultiplier","mode","STRICT","ticksUsed","largestTickWidth","tickables","softmaxFactor","smallestTickCount","Mode","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getMode","setMode","getResolutionMultiplier","getActualResolution","tickable","setStrict","strict","SOFT","isComplete","FULL","setSoftmaxFactor","factor","reCalculateExpTicksUsed","expTicksUsed","softmax","tickValue","v","exp","addTickable","addTickables","drawBoldDoubleLine","topX","botY","StaveConnector","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","top_stave","bottom_stave","thickness","DOUBLE","family","size","weight","texts","setType","typeString","SINGLE_RIGHT","NONE","setText","content","shift_x","THIN_DOUBLE","attachment_height","SINGLE","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","text_width","measureText","getBottomLineY","singleRight","singleLeft","single","double","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","none","FretHandFinger","finger","nums","nums_list","shiftLeft","shiftRight","pos","shiftL","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","num_shift","numWidth","fingerings","builder","fingeringString","trim","number","getFactory","Fingering","fingering","setFretHandFinger","getFretHandFinger","setOffsetX","setOffsetY","dot_x","dot_y","NoteSubGroup","formatter","joinVoices","format","getMinTotalWidth","Stroke","all_voices","font_scale","stroke_spacing","strokes","strokeList","string","getPositions","strokeShift","addEndNote","note_end","line_space","isNote","arrow","arrow_shift_x","arrow_y","text_shift_x","text_y","Type","BRUSH_DOWN","BRUSH_UP","ROLL_DOWN","RASQUEDO_DOWN","ROLL_UP","RASQUEDO_UP","ARPEGGIO_DIRECTIONLESS","strokeLine","CanvasContext","textHeight","vexFlowCanvasContext","canvas","CANVAS_BROWSER_SIZE_LIMIT","limit","clearRect","cls","child","setRawFont","fontArray","setBackgroundFillStyle","background_fillStyle","blur","getTransform","setLineCap","capType","lineCap","setLineDash","dash","resize","cp1x","cp1y","cp2x","cp2y","cpx","cpy","startAngle","endAngle","counterclockwise","attrNamesToIgnoreMap","path","SVG_NS","TWO_PI","SVGContext","element","fontString","svg","create","appendChild","parent","pen","defaultAttributes","attributes","background_attributes","shadow_attributes","state_stack","svgElementType","document","createElementNS","foundBold","foundItalic","replace","fontAttributes","lineDash","prototype","call","join","applyAttributes","visibleWidth","visibleHeight","setViewBox","viewBox_or_minX","viewBoxString","attrNamesToIgnore","nodeName","propertyName","setAttributeNS","lastChild","removeChild","rectangle","x0","y0","large","sweep","getShadowStyle","sa","measureTextCache","txt","textContent","savedState","measureImpl","getBBox","fontSize","substring","Renderer","canvasId","backend","elementId","Backends","CANVAS","canvasElement","SVG","background","renderer","lastContext","buildContext","fromX","fromY","toX","toY","dashPattern","dx","dy","angle","atan2","idx","dashLength","nx","ny","devicePixelRatio","SanitizeCanvasDims","LineEndType","StringNumber","string_number","dashed","leg","shift_left","num_shiftR","x_widthL","x_widthR","num_width","setLineEndType","setStringNumber","setLastNote","setDashed","stem_ext","bottom","isStemmableNote","len","pattern","drawDashedLine","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNote","Articulation","articulations","getIncrement","top_text_line","maxWidth","articWidth","articNameToCode","staccato","tenuto","accent","articString","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","isOnStemTip","getInitialOffset","padding","stemBaseY","getTopY","INITIAL_OFFSET","getBottomY","offsetDirection","noteLine","articLine","snappedLine","snapLineToStaff","TickContext","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","xOffset","tickablesByVoice","totalLeftPx","totalRightPx","tContexts","tContext","contexts","getTickID","getXBase","setXBase","getXOffset","setPadding","getMaxTicks","getMinTicks","getMaxTickable","getMinTickable","getTickableForVoice","voiceIndex","getTickablesByVoice","getCenterAlignedTickables","getCurrentTick","setCurrentTick","Ornament","delayed","accidentalLowerPadding","accidentalUpperPadding","ornament","adjustForStemDirection","reportedWidth","stemUpYOffset","ornamentAlignWithNoteHead","yOffset","ornamentNoteTransition","ornaments","ornamentRelease","ornamentAttack","ornamentArticulation","jazzOrnaments","setDelayed","setUpperAccidental","accid","accidentalUpper","setLowerAccidental","accidentalLower","stemDir","classString","stemExtents","isPlacedOnNoteheadSide","glyphYBetweenLines","glyphX","glyphY","delayXShift","startX","nextContext","getNextContext","PetalumaScriptTextMetrics","smufl","RobotoSlabTextMetrics","TextFont","fontCacheKey","maxSizeGlyph","getFontDataByName","updateParams","registerFont","updateCacheKey","fontRegistry","registryInstance","fontFamily","serifs","monospaced","italic","bold","superscriptOffset","subscriptOffset","description","hash","returnedFonts","attr","fw","fs","textWidthCache","textWidthCacheInstance","fd","selectedFont","fallback","candidates","families","famliy","fontWeightToBold","fontStyleToItalic","perfect","find","ok","setFontSize","fontName","overwrite","exists","td","getMetricForCharacter","maxHeight","pointsToPixels","getWidthForCharacter","metric","advanceWidth","getWidthForString","Justify","VerticalJustify","HorizontalJustify","SymbolTypes","SymbolModifiers","StaveModifierPosition","BarlineType","Justification","VoltaType","Annotation","justification","vert_justification","TOP","annotations","testWidth","textFont","getTextFontFromVexFontData","numLines","setVerticalJustification","just","VerticalJustifyString","getJustification","setJustification","JustifyString","text_height","has_stem","BOTTOM","stem_base","yt","ChordSymbol","centerStem","CENTER_STEM","symbolBlocks","horizontal","vertical","useKerning","reportWidth","superSubRatio","chordSymbolMetrics","global","NO_TEXT_FORMAT","val","noFormat","glyphCode","getYOffsetForText","ix","y_max","engravingFontResolution","spacingBetweenBlocks","getMetricForGlyph","leftSideBearing","kerningOffset","chordSymbol","lowerKerningText","upperKerningText","instances","nonSuperWidth","reportedWidths","instance","fontAdj","glyphAdj","lineSpaces","vAlign","symbol","sup","isSuperscript","sub","isSubscript","subAdj","adj","symbolType","GLYPH","getYShiftForGlyph","getXShiftForGlyph","getWidthForGlyph","TEXT","over","prev","setEnableKerning","updateKerningAdjustments","updateOverBarAdjustments","getVertical","getReportWidth","setReportWidth","barIndex","findIndex","xoff","yoff","symIndex","accum","getKerningAdjustment","currSymbol","prevSymbol","adjustment","preKernUpper","preKernLower","xx","kerningOffsetPixels","symbolModifier","SUPERSCRIPT","getSymbolBlock","symbolBlock","glyphArgs","glyphPoints","LINE","addSymbolBlock","parameters","addText","addTextSuperscript","addTextSubscript","SUBSCRIPT","addGlyphSuperscript","addGlyph","addGlyphOrText","char","addLine","setVertical","vj","verticalJustifyString","setHorizontal","hj","horizontalJustifyString","getHorizontal","sp","curY","horizontalJustify","verticalJustify","diminished","dim","halfDiminished","augmented","majorSeventh","leftParen","rightParen","leftBracket","rightBracket","leftParenTall","rightParenTall","symbolTypes","symbolModifiers","Bend","release","phrase","line_style","bend_width","release_width","updateWidth","bends","last_width","getText","measure_text","ctxThat","total_width","additional_width","draw_width","bend_height","annotation_y","renderBend","cp_x","cp_y","renderRelease","renderArrowHead","renderText","render_x","last_bend","last_bend_draw_width","last_drawn_width","Vibrato","harsh","vibrato_width","wave_height","wave_width","wave_girth","setVibratoWidth","vibratos","vibrato","setHarsh","vx","vy","renderVibrato","opts","num_waves","ModifierContext","members","PREFORMAT","GraceNoteGroup","POSTFORMAT","member","getLeftShift","getState","formatted","StaveModifier","placeGlyphOnLine","customShift","getPadding","setLayoutMetrics","layoutMetrics","getLayoutMetrics","Clef","types","BEGIN","tab","attachment","KeySignature","cancelKeySpec","alterKeySpec","accList","setKeySig","glyphFontScale","xPositions","paddingForced","convertToGlyph","nextAcc","accGlyphData","extraWidth","accidentalSpacing","xPosition","cancelKey","convertToCancelAccList","cancel_accList","different_types","naturals","cancelled","concat","addToStave","convertAccLines","customLines","alterKey","convertToAlterAccList","firstAccidentalType","cancelAccList","END","getEndClef","getClef","Barline","TYPE","widths","REPEAT_BEGIN","REPEAT_END","REPEAT_BOTH","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","repeatBegin","repeatEnd","repeatBoth","getType","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","double_bar","staveCtx","getTopLineTopY","getBottomLineBottomY","begin","dot_radius","Repetition","symbol_type","setShiftX","setShiftY","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSignoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","draw_coda","text_x","symbol_x","getVerticalBarWidth","modifierWidth","StaveSection","section","setStaveSection","StaveTempo","tempo","setTempo","bpm","stem_height","TextNote","superscript","subscript","smooth","struct","GLYPHS","segno","mordent_upper","mordent_lower","p","z","coda","pedal_open","pedal_close","caesura_straight","caesura_curved","breath","StaveText","setStaveText","Volta","volta","vert_height","BEGIN_END","TimeSignatureGlyph","timeSignature","topDigits","botDigits","topWidth","topGlyph","botWidth","botGlyph","topStartX","botStartX","start_x","topLine","bottomLine","TimeSignature","timeSpec","customPadding","validate_args","fontLineShift","parseTimeSpec","numbers","assertIsValidFraction","makeTimeSignatureGlyph","getInfo","setTimeSig","SORT_ORDER_BEG_MODIFIERS","SORT_ORDER_END_MODIFIERS","Stave","end_x","measure","endClef","vertical_bar_width","glyph_spacing_px","num_lines","fill_style","left_bar","right_bar","spacing_between_lines_px","space_above_staff_ln","space_below_staff_ln","top_text_position","bottom_text_position","line_config","cps","bounds","defaultLedgerLineStyle","resetLines","addEndModifier","defaultPadding","rightPadding","setDefaultLedgerLineStyle","getDefaultLedgerLineStyle","visible","setNoteStartX","begBarline","getNoteEndX","getTieStartX","getTieEndX","setNumLines","setMeasure","getModifierXShift","setRepetitionTypeLeft","setRepetitionTypeRight","setVoltaType","number_t","setSection","headroom","getLineForY","setBegBarType","setEndBarType","setClef","clefSpec","clefs","addClef","setEndClef","setKeySignature","keySignatures","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","noPosition","noCategory","sortByCategory","items","order","temp","endBarline","begModifiers","endModifiers","lastBarlineIdx","isBarline","getConfigForLines","setConfigForLine","line_number","setConfigForLines","lines_configuration","sumArray","arr","createContexts","makeContext","addToContext","tickToContextMap","tickList","integerTicks","newContext","array","list","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","formatterOptions","globalSoftmax","maxIterations","justifyWidth","totalCost","totalShift","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","modifierContexts","contextGaps","gaps","lossHistory","paddingBetween","accumulator","stavePadding","gap","toFixed","auto_beam","align_rests","applyAndGetBeams","formatToStave","tabstave","tabnotes","autobeam","notevoice","tabvoice","alignAllNotes","alignTuplets","currTickable","prevTickable","alignRests","preCalculateMinTotalWidth","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","createModifierContexts","contextArray","renderingContext","voicesParam","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","centerX","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","configMinPadding","configMaxPadding","targetWidth","distances","actualWidth","minDistance","mdCalc","di","calcMinDistance","multiNote","paddingMax","maxX","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","tune","alpha","current","postFormatContexts","optionsParam","StaveTie","setNotes","cp1","cp2","first_x_shift","last_x_shift","tie_spacing","first_indices","last_indices","isPartial","renderTie","first_ys","last_ys","last_x_px","last_y_px","top_cp_y","bottom_cp_y","center_x","TabTie","grace_notes","show_slur","slur_y_shift","gracenote_groups","group_list","gracenote_group","is_stavenote","formatWidth","group_shift","beamNotes","getGraceNotes","graceNote","TieClass","TabNote","draw_stem","ghost","positions","draw_dots","draw_stem_through_stave","setGhost","getStemY","stemDownLine","stemStartLine","flag_x","flag_y","flag_code","isDot","drawStemThrough","stem_through","unused_strings","strings_used","getUnusedStringGroups","stem_lines","up_stem","down_stem","line_spacing","total_lines","strings","containsLastString","containsFirstString","line_ys","isTopBound","isBottomBound","getPartialStemLines","drawPositions","tab_x","render_stem","obj","isCategory","checkAncestors","constructorFcn","categoryToMatch","getPrototypeOf","parenLeftPadding","parenRightPadding","cautionary","noteheadAccidentalPadding","leftShift","additionalPadding","accLine","lineList","previousLine","accShift","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","checkCollision","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","accCount","lastAccOnLine","clearance","clearanceRequired","collision","tickPositions","tickNoteMap","tickPosition","notesAtPosition","music","tickPos","modifiedPitches","processNote","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","fontScale","parenLeft","parenRight","parenWidth","setAsCautionary","accX","accY","BarNote","barline","ClefNote","clef_obj","abs_x","Crescendo","extend_left","extend_right","decrescendo","setHeight","setDecrescendo","decresc","tick_context","next_context","begin_x","half_height","reverse","renderHairpin","CurvePosition","Curve","from","to","NEAR_HEAD","position_end","invert","nearHead","nearTop","NEAR_TOP","renderCurve","first_x","first_y","last_x","last_y","cp0x","cp0y","cp_spacing","end_metric","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","RegExp","slice","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","ruleFunc","bind","oneOrMore","zeroOrMore","matches","run","EasyScore","EasyScoreGrammar","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","addNote","standardAccidentals","notePiece","setId","commaSeparatedRegex","setClass","defaults","easyScoreHook","throwOnError","parser","TextDynamics","sequence","glyph_font_size","letter","glyph_data","letter_x","current_letter","semibreve_rest","MultiMeasureRest","number_of_measures","xs","hasPaddingLeft","hasPaddingRight","hasLineThickness","hasSymbolSpacing","padding_left","padding_right","line_thickness","symbol_spacing","use_symbols","show_number","number_line","number_glyph_point","serif_thickness","semibreve_rest_glyph_scale","getXs","drawLine","spacingBetweenLines","lineThicknessHalf","serifThickness","leftIndented","rightIndented","lineTop","lineBottom","drawSymbols","n4","n2","n1","get_semibreve_rest","rest_scale","rest_width","yMiddle","timeSig","drawArrowHead","StaveLine","line_dash","rounded_end","draw_start_arrow","draw_end_arrow","arrowhead_length","arrowhead_angle","text_position_vertical","TextVerticalPosition","text_justification","TextJustification","applyLineStyle","applyFontStyle","start_position","end_position","first_index","last_index","upwards_slope","notehead_width","pt1","pt2","both_arrows","distance","ratio","end_y","start_y","line_angle","angle1","angle2","top_x","bottom_x","drawArrowLine","vertical_position","GlyphNote","ignoreTicks","setGlyph","CODES","RepeatNote","System","Factory","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","addConnector","connector","addStave","staveOptions","spaceAbove","spaceBelow","debugNoteMetrics","options_details","allVoices","debugNoteMetricsYs","part","lastY","plotDebugging","plotMetrics","TimeSigNote","timeSigInfo","KeySigNote","drawPedalGlyph","PedalMarking","custom_depress_text","custom_release_text","bracket_height","text_margin_right","bracket_line_width","pedal","MIXED","setCustomText","depress","drawBracketed","prev_x","prev_y","is_pedal_depressed","next_is_same","prev_is_same","drawText","TextBracket","TextBracketPosition","pedal_depress","pedal_release","mixed","stop","show_bracket","underline_superscript","Positions","PositionsString","main_measure","main_width","main_height","super_y","super_measure","super_width","super_height","line_y","VibratoBracket","bracket_data","stop_x","ERROR_MSG","GhostNote","parameter","TabStave","addTabGlyph","renderQ","systems","staves","initRenderer","getVoices","ghostNote","textNote","barNote","clefNote","timeSigNote","keySigNote","vJustify","hJustify","fontWeight","kerning","stringNumber","numMeasures","multiMeasureRest","secondaryBeamBreaks","curve","tie","vibratoBracket","textBracket","system","StaveHairpin","hairpin","left_shift_px","right_shift_px","right_shift_ticks","left_shift_ticks","ppt","pixelsPerTick","l_shift_px","r_shift_px","hairpin_options","setRenderOptions","dis","staff_height","l_shift","r_shift","CRESC","DECRESC","TabSlide","SLIDE_UP","SLIDE_DOWN","first_fret","last_fret","slide_y","Tuning","tuningString","tuningValues","setTuning","names","standard","dagdad","dropd","standardBanjo","noteToInteger","getValueForString","stringNum","getValueForFret","fretNum","stringValue","getNoteForFret","GraceTabNote","KeyManager","setKey","getKey","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","change","valueNote","originalValueNote","Tremolo","y_spacing","BUILD","VERSION","RuntimeError","Error","defined","log","block","Array","err","stack","midLine","mid_line","drawDot","normalizeAngle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","defineProperty","enumerable","chunkId","Promise","all","promises","Function","prop","hasOwnProperty","l","url","script","needAttach","scripts","getElementsByTagName","createElement","charset","timeout","nc","src","onScriptComplete","event","onerror","onload","clearTimeout","doneFns","parentNode","setTimeout","target","Symbol","toStringTag","scriptUrl","importScripts","currentScript","installedChunks","installedChunkData","promise","resolve","reject","error","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","chunkLoadingGlobal","SortAndUnique","cmp","eq","newArr","last","Contains","getCanvasContext","canvas_sel","BM","start_time","Date","getTime","elapsed","StackTrace"],"sourceRoot":""}