{"version":3,"file":"vexflow-core-min.js","mappings":"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,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,EACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAM,CACJ,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,EACV,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,iBAAoB,EACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,GACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,GACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,GACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,kBACT,MAAS,IACT,GAAM,kBACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,KAAM,CACJ,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,OAAU,EACV,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,IACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,IACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,iBAAoB,GACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,EACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,GAAM,EACN,gBAAmB,EACnB,aAAgB,MAIpB,WAAc,kBACd,WAAc,IACd,YAAe,4BC/1BJqN,EAAwB,CACnC3sC,KAAM,cACN0sC,OAAO,EACPpN,QAAQ,GACR,OAAU,CACR,IAAK,CACH,MAAS,EACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,EACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,EAAK,CACH,MAAS,iBACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,kBACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,iBACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAM,CACJ,MAAS,IACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,kBACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,IACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,IACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,EACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,EACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,MAAS,GACT,MAAS,IACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,kBACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,iBACT,MAAS,mBACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,KAAM,CACJ,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,IACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,KACT,OAAU,IACV,MAAS,EACT,GAAM,IACN,gBAAmB,IACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,KACT,MAAS,KACT,GAAM,IACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,OAAU,GACV,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,OAAU,GACV,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,iBAAoB,GACpB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,GACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,KACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,EAAK,CACH,MAAS,GACT,MAAS,IACT,MAAS,EACT,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,MAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,IACnB,aAAgB,KAElB,IAAK,CACH,MAAS,GACT,MAAS,IACT,OAAU,IACV,MAAS,KACT,GAAM,KACN,gBAAmB,GACnB,aAAgB,KAElB,IAAK,CACH,MAAS,IACT,MAAS,KACT,MAAS,IACT,MAAS,IACT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","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/webpack/runtime/load script","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/boundingboxcomputation.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/font.ts","webpack://Vex/./src/fonts/loadDynamic.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/glyph.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/fonts/petalumascript_textmetrics.ts","webpack://Vex/./src/fonts/robotoslab_textmetrics.ts","webpack://Vex/./src/textfont.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/rendercontext.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/timesigglyph.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/util.ts","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/ensure chunk","webpack://Vex/webpack/runtime/get javascript chunk filename","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/webpack/runtime/make namespace object","webpack://Vex/webpack/runtime/publicPath","webpack://Vex/webpack/runtime/jsonp chunk loading","webpack://Vex/","webpack://Vex/./src/vex.ts","webpack://Vex/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})(typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this, function() {\nreturn ","var inProgress = {};\nvar dataWebpackPrefix = \"Vex:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n//\n// Author: Joshua Koo / @zz85\n// Author: @incompleteopus\n\nimport { RuntimeError } from './util';\n\n/** Fraction represents a rational number. */\nexport class Fraction {\n  static get CATEGORY(): string {\n    return 'Fraction';\n  }\n\n  // Cached objects for comparisons.\n  private static __staticFractionA = new Fraction();\n  private static __staticFractionB = new Fraction();\n  private static __staticFractionTmp = new Fraction();\n\n  /** GCD: Greatest common divisor using Euclidean algorithm. */\n  static GCD(a: number, b: number): number {\n    if (typeof a !== 'number' || Number.isNaN(a) || a === 0 || typeof b !== 'number' || Number.isNaN(b) || b === 0) {\n      throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n    }\n\n    let t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  }\n\n  /** LCM: Lowest common multiple. */\n  static LCM(a: number, b: number): number {\n    return (a * b) / Fraction.GCD(a, b);\n  }\n\n  /** Lowest common multiple for more than two numbers. */\n  static LCMM(args: number[]): number {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length === 1) {\n      return args[0];\n    } else if (args.length === 2) {\n      return Fraction.LCM(args[0], args[1]);\n    } else {\n      // args.shift() removes the first number.\n      // LCM the first number with the rest of the numbers.\n      return Fraction.LCM(args.shift() as number, Fraction.LCMM(args));\n    }\n  }\n\n  numerator: number = 1;\n  denominator: number = 1;\n\n  /** Set the numerator and denominator. */\n  constructor(numerator?: number, denominator?: number) {\n    this.set(numerator, denominator);\n  }\n\n  /** Set the numerator and denominator. */\n  set(numerator: number = 1, denominator: number = 1): this {\n    this.numerator = numerator;\n    this.denominator = denominator;\n    return this;\n  }\n\n  /** Return the value of the fraction. */\n  value(): number {\n    return this.numerator / this.denominator;\n  }\n\n  /** Simplify numerator and denominator using GCD. */\n  simplify(): this {\n    let u = this.numerator;\n    let d = this.denominator;\n\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n    return this.set(u, d);\n  }\n\n  /** Add value of another fraction. */\n  add(param1: Fraction | number = 0, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Substract value of another fraction. */\n  subtract(param1: Fraction | number = 0, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  /** Multiply by value of another fraction. */\n  multiply(param1: Fraction | number = 1, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n\n  /** Divide by value of another Fraction. */\n  divide(param1: Fraction | number = 1, param2: number = 1): this {\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  }\n\n  /** Simplify both sides and check if they are equal. */\n  equals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionA.copy(compare).simplify();\n    const b = Fraction.__staticFractionB.copy(this).simplify();\n\n    return a.numerator === b.numerator && a.denominator === b.denominator;\n  }\n\n  /** Greater than operator. */\n  greaterThan(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator > 0;\n  }\n\n  /** Greater than or equals operator. */\n  greaterThanEquals(compare: Fraction | number): boolean {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator >= 0;\n  }\n\n  /** Less than operator. */\n  lessThan(compare: Fraction | number): boolean {\n    return !this.greaterThanEquals(compare);\n  }\n\n  /** Less than or equals operator. */\n  lessThanEquals(compare: Fraction | number): boolean {\n    return !this.greaterThan(compare);\n  }\n\n  /** Return a new copy with current values. */\n  clone(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  /** Copy value of another fraction. */\n  copy(other: Fraction | number): this {\n    if (typeof other === 'number') {\n      return this.set(other, 1);\n    } else {\n      return this.set(other.numerator, other.denominator);\n    }\n  }\n\n  /** Return the integer component (eg. 5/2 => 2). */\n  quotient(): number {\n    return Math.floor(this.numerator / this.denominator);\n  }\n\n  /** Return the remainder component (eg. 5/2 => 1). */\n  remainder(): number {\n    return this.numerator % this.denominator;\n  }\n\n  /** Calculate absolute value. */\n  makeAbs(): this {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  }\n\n  /** Return a raw string representation (eg. \"5/2\"). */\n  toString(): string {\n    return `${this.numerator}/${this.denominator}`;\n  }\n\n  /** Return a simplified string respresentation. */\n  toSimplifiedString(): string {\n    return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n  }\n\n  /** Return string representation in mixed form. */\n  toMixedString(): string {\n    let s = '';\n    const q = this.quotient();\n    const f = Fraction.__staticFractionTmp.copy(this);\n\n    if (q < 0) {\n      f.makeAbs();\n    }\n\n    if (q !== 0) {\n      s += q;\n\n      if (f.numerator !== 0) {\n        s += ` ${f.toSimplifiedString()}`;\n      }\n    } else if (f.numerator === 0) {\n      s = '0';\n    } else {\n      s = f.toSimplifiedString();\n    }\n\n    return s;\n  }\n\n  /** Parse a fraction string. */\n  parse(str: string): this {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = i[1] ? parseInt(i[1], 10) : 1;\n\n    return this.set(n, d);\n  }\n}\n\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n: Fraction | number, d: number = 1): [number, number] {\n  if (typeof n === 'number') {\n    // Both params are numbers, so we return them as [numerator, denominator].\n    return [n, d];\n  } else {\n    // First param is a Fraction object. We ignore the second param.\n    return [n.numerator, n.denominator];\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\n/** Bounding boxes for interactive notation */\n\nexport class BoundingBox {\n  protected x: number;\n  protected y: number;\n  protected w: number;\n  protected h: number;\n\n  /**\n   * Create a new copy.\n   */\n  static copy(that: BoundingBox): BoundingBox {\n    return new BoundingBox(that.x, that.y, that.w, that.h);\n  }\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  /** Get x position. */\n  getX(): number {\n    return this.x;\n  }\n\n  /** Get y position. */\n  getY(): number {\n    return this.y;\n  }\n\n  /** Get width. */\n  getW(): number {\n    return this.w;\n  }\n\n  /** Get height. */\n  getH(): number {\n    return this.h;\n  }\n\n  /** Set x position. */\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  /** Set y position. */\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  /** Set width. */\n  setW(w: number): this {\n    this.w = w;\n    return this;\n  }\n\n  /** Set height. */\n  setH(h: number): this {\n    this.h = h;\n    return this;\n  }\n\n  /** Move to position. */\n  move(x: number, y: number): this {\n    this.x += x;\n    this.y += y;\n    return this;\n  }\n\n  /** Clone. */\n  clone(): BoundingBox {\n    return BoundingBox.copy(this);\n  }\n\n  /**\n   * Merge my box with given box. Creates a bigger bounding box unless\n   * the given box is contained in this one.\n   */\n  mergeWith(boundingBox: BoundingBox): this {\n    const that = boundingBox;\n\n    const new_x = this.x < that.x ? this.x : that.x;\n    const new_y = this.y < that.y ? this.y : that.y;\n    const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n    const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n\n    this.x = new_x;\n    this.y = new_y;\n    this.w = new_w;\n    this.h = new_h;\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\n/**\n * BoundingBoxComputation computes metrics for a bounding box by continuously\n * taking canvas path commands.\n *\n * Warning: This class is merely a crutch to get bounding box information without\n * explicit metadata. This is likely to get deprecated following SMuFL support.\n *\n * based on: https://github.com/canvg/canvg/blob/master/src/BoundingBox.ts (MIT License)\n */\nexport class BoundingBoxComputation {\n  protected x1: number = Number.NaN;\n  protected y1: number = Number.NaN;\n  protected x2: number = Number.NaN;\n  protected y2: number = Number.NaN;\n\n  /** Get calculated X1. */\n  getX1(): number {\n    return this.x1;\n  }\n\n  /** Get calculated Y1. */\n  getY1(): number {\n    return this.y1;\n  }\n\n  /** Get calculated width. */\n  width(): number {\n    return this.x2 - this.x1;\n  }\n\n  /** Get calculated height. */\n  height(): number {\n    return this.y2 - this.y1;\n  }\n\n  /** Add point to BoundingBox. */\n  addPoint(x: number, y: number): void {\n    if (isNaN(this.x1) || x < this.x1) this.x1 = x;\n    if (isNaN(this.x2) || x > this.x2) this.x2 = x;\n    if (isNaN(this.y1) || y < this.y1) this.y1 = y;\n    if (isNaN(this.y2) || y > this.y2) this.y2 = y;\n  }\n\n  /** Add X to BoundingBox. */\n  addX(x: number): void {\n    this.addPoint(x, this.y1);\n  }\n\n  /** Add Y to BoundingBox. */\n  addY(y: number): void {\n    this.addPoint(this.x1, y);\n  }\n\n  /** Add quadratic curve to BoundingBox. */\n  addQuadraticCurve(p0x: number, p0y: number, p1x: number, p1y: number, p2x: number, p2y: number): void {\n    this.addPoint(p0x, p0y);\n    this.addPoint(p2x, p2y);\n\n    const p01x = p1x - p0x;\n    const p12x = p2x - p1x;\n    let denom = p01x - p12x;\n    if (denom != 0) {\n      const t = p01x / denom;\n      if (t > 0 && t < 1) {\n        const it = 1 - t;\n        this.addX(it * it * p0x + 2 * it * t * p1x + t * t * p2x);\n      }\n    }\n\n    const p01y = p1y - p0y;\n    const p12y = p2y - p1y;\n    denom = p01y - p12y;\n    if (denom != 0) {\n      const t = p01y / denom;\n      if (t > 0 && t < 1) {\n        const it = 1 - t;\n        this.addY(it * it * p0y + 2 * it * t * p1y + t * t * p2y);\n      }\n    }\n  }\n\n  /** Add bezier curve to BoundingBox. */\n  addBezierCurve(\n    p0x: number,\n    p0y: number,\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number\n  ): void {\n    // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    const p0 = [p0x, p0y];\n    const p1 = [p1x, p1y];\n    const p2 = [p2x, p2y];\n    const p3 = [p3x, p3y];\n    let i;\n\n    this.addPoint(p0[0], p0[1]);\n    this.addPoint(p3[0], p3[1]);\n\n    const f = (t: number, i: number) =>\n      Math.pow(1 - t, 3) * p0[i] +\n      3 * Math.pow(1 - t, 2) * t * p1[i] +\n      3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n      Math.pow(t, 3) * p3[i];\n\n    for (i = 0; i <= 1; i++) {\n      const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n      const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n      const c = 3 * p1[i] - 3 * p0[i];\n\n      if (a === 0) {\n        if (b === 0) continue;\n        const t = -c / b;\n        if (0 < t && t < 1) {\n          if (i === 0) this.addX(f(t, i));\n          if (i === 1) this.addY(f(t, i));\n        }\n        continue;\n      }\n\n      const b2ac = Math.pow(b, 2) - 4 * c * a;\n      if (b2ac < 0) continue;\n      const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        if (i === 0) this.addX(f(t1, i));\n        if (i === 1) this.addY(f(t1, i));\n      }\n      const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        if (i === 0) this.addX(f(t2, i));\n        if (i === 1) this.addY(f(t2, i));\n      }\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\n\nimport { Element } from './element';\nimport { RuntimeError } from './util';\n\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n  // [attribute_name][attribute_value][element_id] => Element\n  [key: string]: { [key: string]: { [key: string]: Element } };\n  constructor() {\n    this.id = {};\n    this.type = {};\n    this.class = {};\n  }\n}\n\ninterface RegistryUpdate {\n  id: string;\n  name: string;\n  value: string | undefined;\n  oldValue: string | undefined;\n}\n\nexport class Registry {\n  private static defaultRegistry?: Registry;\n\n  static getDefaultRegistry(): Registry | undefined {\n    return Registry.defaultRegistry;\n  }\n\n  // If you call `enableDefaultRegistry`, any new elements will auto-register with\n  // the provided registry as soon as they're constructed.\n  static enableDefaultRegistry(registry: Registry): void {\n    Registry.defaultRegistry = registry;\n  }\n\n  static disableDefaultRegistry(): void {\n    Registry.defaultRegistry = undefined;\n  }\n\n  protected index: Index;\n\n  constructor() {\n    this.index = new Index();\n  }\n\n  clear(): this {\n    this.index = new Index();\n    return this;\n  }\n\n  setIndexValue(name: string, value: string, id: string, elem: Element): void {\n    const index = this.index;\n    if (!index[name][value]) {\n      index[name][value] = {};\n    }\n    index[name][value][id] = elem;\n  }\n\n  // Updates the indexes for element 'id'. If an element's attribute changes\n  // from A -> B, make sure to remove the element from A.\n  updateIndex({ id, name, value, oldValue }: RegistryUpdate): void {\n    const elem = this.getElementById(id);\n    if (oldValue !== undefined && this.index[name][oldValue]) {\n      delete this.index[name][oldValue][id];\n    }\n    if (value && elem) {\n      this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n    }\n  }\n\n  /**\n   * Register element `elem` with this registry.\n   * This adds the element to its index and watches it for attribute changes.\n   * @param elem\n   * @param id\n   * @returns this\n   */\n  register(elem: Element, id?: string): this {\n    id = id || elem.getAttribute('id');\n    if (!id) {\n      throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n    }\n\n    // Manually add id to index, then update other indexes.\n    elem.setAttribute('id', id);\n    this.setIndexValue('id', id, id, elem);\n    this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n    elem.onRegister(this);\n    return this;\n  }\n\n  getElementById(id: string): Element | undefined {\n    return this.index.id?.[id]?.[id]; // return undefined if the id is not found.\n  }\n\n  getElementsByAttribute(attribute: string, value: string): Element[] {\n    const index_attr = this.index[attribute];\n    if (index_attr) {\n      const index_attr_val = index_attr[value];\n      if (index_attr_val) {\n        const keys = Object.keys(index_attr_val);\n        return keys.map((k) => index_attr_val[k]);\n      }\n    }\n    return [];\n  }\n\n  getElementsByType(type: string): Element[] {\n    return this.getElementsByAttribute('type', type);\n  }\n\n  getElementsByClass(className: string): Element[] {\n    return this.getElementsByAttribute('class', className);\n  }\n\n  // This is called by the element when an attribute value changes. If an indexed\n  // attribute changes, then update the local index.\n  onUpdate(info: RegistryUpdate): this {\n    const allowedNames = ['id', 'type', 'class'];\n    if (allowedNames.includes(info.name)) {\n      this.updateIndex(info);\n    }\n    return this;\n  }\n}\n","import { loadBravura } from '@bravura';\nimport { loadCustom } from '@custom';\nimport { loadGonville } from '@gonville';\nimport { loadLeland } from '@leland';\nimport { loadPetaluma } from '@petaluma';\n\nimport { defined } from './util';\n\nexport interface FontData {\n  glyphs: Record<string, FontGlyph>;\n  fontFamily?: string;\n  resolution: number;\n  generatedOn?: string;\n}\n\nexport interface FontDataMetrics {\n  fontData?: FontData;\n  // eslint-disable-next-line\n  metrics?: Record<string, any>;\n}\n\nexport interface FontGlyph {\n  x_min: number;\n  x_max: number;\n  y_min?: number;\n  y_max?: number;\n  ha: number;\n  o: string;\n  leftSideBearing?: number;\n  advanceWidth?: number;\n  cached_outline?: number[];\n}\n\nclass Font {\n  protected name: string;\n  protected fontDataMetrics: FontDataMetrics;\n\n  // eslint-disable-next-line\n  constructor(name: string, metrics?: Record<string, any>, fontData?: FontData) {\n    this.name = name;\n    this.fontDataMetrics = { fontData: undefined, metrics: undefined };\n    switch (name) {\n      case 'Bravura':\n        loadBravura(this.fontDataMetrics);\n        break;\n      case 'Custom':\n        loadCustom(this.fontDataMetrics);\n        break;\n      case 'Gonville':\n        loadGonville(this.fontDataMetrics);\n        break;\n      case 'Petaluma':\n        loadPetaluma(this.fontDataMetrics);\n        break;\n      case 'Leland':\n        loadLeland(this.fontDataMetrics);\n        break;\n      default:\n        this.fontDataMetrics.metrics = metrics;\n        this.fontDataMetrics.fontData = fontData;\n    }\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getResolution(): number {\n    return this.getFontData().resolution;\n  }\n\n  // eslint-disable-next-line\n  getMetrics(): Record<string, any> {\n    return defined(this.fontDataMetrics.metrics, 'FontError', 'Missing metrics');\n  }\n\n  /**\n   * Use the provided key to look up a value in this font's metrics file (e.g., bravura_metrics.ts, petaluma_metrics.ts).\n   * @param key is a string separated by periods (e.g., stave.endPaddingMax, clef.lineCount.'5'.shiftY).\n   * @param defaultValue is returned if the lookup fails.\n   * @returns the retrieved value (or `defaultValue` if the lookup fails).\n   */\n  // eslint-disable-next-line\n  lookupMetric(key: string, defaultValue?: Record<string, any> | number): any {\n    // console.log('lookupMetric:', key);\n\n    const keyParts = key.split('.');\n\n    // Start with the top level font metrics object, and keep looking deeper into the object (via each part of the period-delimited key).\n    let currObj = this.getMetrics();\n    for (let i = 0; i < keyParts.length; i++) {\n      const keyPart = keyParts[i];\n      const value = currObj[keyPart];\n      if (value === undefined) {\n        // If the key lookup fails, we fall back to the defaultValue.\n        return defaultValue;\n      }\n      // The most recent lookup succeeded, so we drill deeper into the object.\n      currObj = value;\n    }\n\n    // After checking every part of the key (i.e., the loop completed), return the most recently retrieved value.\n    // console.log('found:', key, currObj);\n    return currObj;\n  }\n\n  getFontData(): FontData {\n    return defined(this.fontDataMetrics.fontData, 'FontError', 'Missing font data');\n  }\n\n  getGlyphs(): Record<string, FontGlyph> {\n    return this.getFontData().glyphs;\n  }\n}\n\nconst Fonts = {\n  Bravura: (): Font => new Font('Bravura'),\n  Gonville: (): Font => new Font('Gonville'),\n  Petaluma: (): Font => new Font('Petaluma'),\n  Leland: (): Font => new Font('Leland'),\n  Custom: (): Font => new Font('Custom'),\n};\n\nexport { Font, Fonts };\n","import { FontDataMetrics } from '../font';\nexport async function loadBravura(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"bravura\" */ '../fonts/bravura');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadCustom(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"custom\" */ '../fonts/custom');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadGonville(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"gonville\" */ '../fonts/gonville');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\nexport async function loadPetaluma(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"petaluma\" */ '../fonts/petaluma');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\nexport async function loadLeland(fontDataMetrics: FontDataMetrics) {\n  const _ = await import(/* webpackChunkName: \"leland\" */ '../fonts/leland');\n  fontDataMetrics.fontData = _.default.fontData;\n  fontDataMetrics.metrics = _.default.metrics;\n}\n\n\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/* eslint-disable key-spacing */\n\nimport { ArticulationStruct } from './articulation';\nimport { Fonts } from './font';\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { RuntimeError } from './util';\n\n// Custom note heads\nconst customNoteHeads: Record<string, { code: string }> = {\n  /* Diamond */\n  D0: { code: 'noteheadDiamondWhole' },\n  D1: { code: 'noteheadDiamondHalf' },\n  D2: { code: 'noteheadDiamondBlack' },\n  D3: { code: 'noteheadDiamondBlack' },\n\n  /* Triangle */\n  T0: { code: 'noteheadTriangleUpWhole' },\n  T1: { code: 'noteheadTriangleUpHalf' },\n  T2: { code: 'noteheadTriangleUpBlack' },\n  T3: { code: 'noteheadTriangleUpBlack' },\n\n  /* Cross */\n  X0: { code: 'noteheadXWhole' },\n  X1: { code: 'noteheadXHalf' },\n  X2: { code: 'noteheadXBlack' },\n  X3: { code: 'noteheadCircleX' },\n\n  /* Square */\n  S1: { code: 'noteheadSquareWhite' },\n  S2: { code: 'noteheadSquareBlack' },\n\n  /* Rectangle */\n  R1: { code: 'vexNoteHeadRectWhite' }, // no smufl code\n  R2: { code: 'vexNoteHeadRectBlack' }, // no smufl code\n};\n\nconst RESOLUTION = 16384;\n\nconst durations: Record<string, number> = {\n  '1/2': RESOLUTION * 2,\n  1: RESOLUTION / 1,\n  2: RESOLUTION / 2,\n  4: RESOLUTION / 4,\n  8: RESOLUTION / 8,\n  16: RESOLUTION / 16,\n  32: RESOLUTION / 32,\n  64: RESOLUTION / 64,\n  128: RESOLUTION / 128,\n  256: RESOLUTION / 256,\n};\n\nconst accidentals: Record<string, { code: string; parenRightPaddingAdjustment: number }> = {\n  '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\n  '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\n  bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\n  n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\n  '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\n  '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\n  db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\n  d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\n  '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\n  '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\n  '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\n  bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\n  bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\n  o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\n  k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\n  bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\n  '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\n  ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\n  afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },\n  accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },\n  accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },\n  accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },\n  accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },\n  accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },\n  accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },\n  accidentalNarrowReversedFlatAndFlat: {\n    code: 'accidentalNarrowReversedFlatAndFlat',\n    parenRightPaddingAdjustment: -1,\n  },\n  accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },\n  accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },\n};\n\n// eslint-disable-next-line\nlet duration_codes: Record<string, any>;\n\nexport const Tables = {\n  STEM_WIDTH: 1.5,\n  STEM_HEIGHT: 35,\n  STAVE_LINE_THICKNESS: 1,\n  RESOLUTION: RESOLUTION,\n\n  /**\n   * Customize this to choose a different music font.\n   * For example: Vex.Flow.DEFAULT_FONT_STACK = [Fonts.Petaluma(), Fonts.Custom()];\n   */\n  DEFAULT_FONT_STACK: [Fonts.Bravura(), Fonts.Gonville(), Fonts.Custom()],\n  DEFAULT_NOTATION_FONT_SCALE: 39,\n  DEFAULT_TABLATURE_FONT_SCALE: 39,\n  SLASH_NOTEHEAD_WIDTH: 15,\n  STAVE_LINE_DISTANCE: 10,\n\n  // HACK:\n  // Since text origins are positioned at the baseline, we must\n  // compensate for the ascender of the text. Of course, 1 staff space is\n  // a very poor approximation.\n  //\n  // This will be deprecated in the future. This is a temporary solution until\n  // we have more robust text metrics.\n  TEXT_HEIGHT_OFFSET_HACK: 1,\n\n  /* Kerning (DEPRECATED) */\n  IsKerned: true,\n\n  clefProperties: (clef: string): { line_shift: number } => {\n    const values: Record<string, { line_shift: number }> = {\n      treble: { line_shift: 0 },\n      bass: { line_shift: 6 },\n      tenor: { line_shift: 4 },\n      alto: { line_shift: 3 },\n      soprano: { line_shift: 1 },\n      percussion: { line_shift: 0 },\n      'mezzo-soprano': { line_shift: 2 },\n      'baritone-c': { line_shift: 5 },\n      'baritone-f': { line_shift: 5 },\n      subbass: { line_shift: 7 },\n      french: { line_shift: -1 },\n    };\n    if (!clef) throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n\n    const props = values[clef];\n    if (!props) throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n\n    return props;\n  },\n\n  /*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n  */\n  // eslint-disable-next-line\n  keyProperties(key: string, clef?: string, params?: any): any {\n    const noteValues: Record<\n      string,\n      {\n        index: number;\n        int_val?: number;\n        accidental?: string;\n        rest?: boolean;\n        octave?: number;\n        code?: string;\n        shift_right?: number;\n      }\n    > = {\n      C: { index: 0, int_val: 0 },\n      CN: { index: 0, int_val: 0, accidental: 'n' },\n      'C#': { index: 0, int_val: 1, accidental: '#' },\n      'C##': { index: 0, int_val: 2, accidental: '##' },\n      CB: { index: 0, int_val: 11, accidental: 'b' },\n      CBB: { index: 0, int_val: 10, accidental: 'bb' },\n      D: { index: 1, int_val: 2 },\n      DN: { index: 1, int_val: 2, accidental: 'n' },\n      'D#': { index: 1, int_val: 3, accidental: '#' },\n      'D##': { index: 1, int_val: 4, accidental: '##' },\n      DB: { index: 1, int_val: 1, accidental: 'b' },\n      DBB: { index: 1, int_val: 0, accidental: 'bb' },\n      E: { index: 2, int_val: 4 },\n      EN: { index: 2, int_val: 4, accidental: 'n' },\n      'E#': { index: 2, int_val: 5, accidental: '#' },\n      'E##': { index: 2, int_val: 6, accidental: '##' },\n      EB: { index: 2, int_val: 3, accidental: 'b' },\n      EBB: { index: 2, int_val: 2, accidental: 'bb' },\n      F: { index: 3, int_val: 5 },\n      FN: { index: 3, int_val: 5, accidental: 'n' },\n      'F#': { index: 3, int_val: 6, accidental: '#' },\n      'F##': { index: 3, int_val: 7, accidental: '##' },\n      FB: { index: 3, int_val: 4, accidental: 'b' },\n      FBB: { index: 3, int_val: 3, accidental: 'bb' },\n      G: { index: 4, int_val: 7 },\n      GN: { index: 4, int_val: 7, accidental: 'n' },\n      'G#': { index: 4, int_val: 8, accidental: '#' },\n      'G##': { index: 4, int_val: 9, accidental: '##' },\n      GB: { index: 4, int_val: 6, accidental: 'b' },\n      GBB: { index: 4, int_val: 5, accidental: 'bb' },\n      A: { index: 5, int_val: 9 },\n      AN: { index: 5, int_val: 9, accidental: 'n' },\n      'A#': { index: 5, int_val: 10, accidental: '#' },\n      'A##': { index: 5, int_val: 11, accidental: '##' },\n      AB: { index: 5, int_val: 8, accidental: 'b' },\n      ABB: { index: 5, int_val: 7, accidental: 'bb' },\n      B: { index: 6, int_val: 11 },\n      BN: { index: 6, int_val: 11, accidental: 'n' },\n      'B#': { index: 6, int_val: 12, accidental: '#' },\n      'B##': { index: 6, int_val: 13, accidental: '##' },\n      BB: { index: 6, int_val: 10, accidental: 'b' },\n      BBB: { index: 6, int_val: 9, accidental: 'bb' },\n      R: { index: 6, rest: true }, // Rest\n      X: {\n        index: 6,\n        accidental: '',\n        octave: 4,\n        code: 'noteheadXBlack',\n        shift_right: 5.5,\n      },\n    };\n\n    if (clef === undefined) {\n      clef = 'treble';\n    }\n\n    let options = { octave_shift: 0 };\n\n    if (typeof params === 'object') {\n      options = { ...options, ...params };\n    }\n\n    const pieces = key.split('/');\n\n    if (pieces.length < 2) {\n      throw new RuntimeError('BadArguments', `Key must have note + octave and an optional glyph: ${key}`);\n    }\n\n    const k = pieces[0].toUpperCase();\n    const value = noteValues[k];\n    if (!value) throw new RuntimeError('BadArguments', 'Invalid key name: ' + k);\n    if (value.octave) pieces[1] = value.octave.toString();\n\n    let octave = parseInt(pieces[1], 10);\n\n    // Octave_shift is the shift to compensate for clef 8va/8vb.\n    octave += -1 * options.octave_shift;\n\n    const base_index = octave * 7 - 4 * 7;\n    let line = (base_index + value.index) / 2;\n    line += Tables.clefProperties(clef).line_shift;\n\n    let stroke = 0;\n\n    if (line <= 0 && (line * 2) % 2 === 0) stroke = 1; // stroke up\n    if (line >= 6 && (line * 2) % 2 === 0) stroke = -1; // stroke down\n\n    // Integer value for note arithmetic.\n    const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : undefined;\n\n    /* Check if the user specified a glyph. */\n    const code = value.code;\n    const shift_right = value.shift_right;\n    let extraProps = {};\n    if (pieces.length > 2 && pieces[2]) {\n      const glyph_name = pieces[2].toUpperCase();\n      extraProps = customNoteHeads[glyph_name] || {};\n    }\n\n    return {\n      key: k,\n      octave,\n      line,\n      int_value,\n      accidental: value.accidental,\n      code,\n      stroke,\n      shift_right,\n      displaced: false,\n      ...extraProps,\n    };\n  },\n\n  integerToNote(integer?: number): string {\n    const table: Record<number, string> = {\n      0: 'C',\n      1: 'C#',\n      2: 'D',\n      3: 'D#',\n      4: 'E',\n      5: 'F',\n      6: 'F#',\n      7: 'G',\n      8: 'G#',\n      9: 'A',\n      10: 'A#',\n      11: 'B',\n    };\n\n    if (typeof integer === 'undefined') {\n      throw new RuntimeError('BadArguments', 'Undefined integer for integerToNote');\n    }\n\n    if (integer < -2) {\n      throw new RuntimeError('BadArguments', `integerToNote requires integer > -2: ${integer}`);\n    }\n\n    const noteValue = table[integer];\n    if (!noteValue) {\n      throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n    }\n\n    return noteValue;\n  },\n\n  tabToGlyph(fret: string, scale = 1.0): { text: string; code?: string; getWidth: () => number; shift_y: number } {\n    let glyph = undefined;\n    let width = 0;\n    let shift_y = 0;\n\n    if (fret.toUpperCase() === 'X') {\n      const glyphMetrics = new Glyph('accidentalDoubleSharp', Tables.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();\n      glyph = 'accidentalDoubleSharp';\n      if (glyphMetrics.width == undefined || glyphMetrics.height == undefined)\n        throw new RuntimeError('InvalidMetrics', 'Width and height required');\n      width = glyphMetrics.width;\n      shift_y = -glyphMetrics.height / 2;\n    } else {\n      width = Tables.textWidth(fret);\n    }\n\n    return {\n      text: fret,\n      code: glyph,\n      getWidth: () => width * scale,\n      shift_y,\n    };\n  },\n\n  textWidth(text: string): number {\n    return 7 * text.toString().length;\n  },\n\n  articulationCodes(artic: string): ArticulationStruct {\n    const articulations: Record<string, ArticulationStruct> = {\n      'a.': { code: 'augmentationDot', between_lines: true }, // Staccato\n      av: {\n        aboveCode: 'articStaccatissimoAbove',\n        belowCode: 'articStaccatissimoBelow',\n        between_lines: true,\n      }, // Staccatissimo\n      'a>': {\n        aboveCode: 'articAccentAbove',\n        belowCode: 'articAccentBelow',\n        between_lines: true,\n      }, // Accent\n      'a-': {\n        aboveCode: 'articTenutoAbove',\n        belowCode: 'articTenutoBelow',\n        between_lines: true,\n      }, // Tenuto\n      'a^': {\n        aboveCode: 'articMarcatoAbove',\n        belowCode: 'articMarcatoBelow',\n        between_lines: false,\n      }, // Marcato\n      'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false }, // Left hand pizzicato\n      ao: {\n        aboveCode: 'pluckedSnapPizzicatoAbove',\n        belowCode: 'pluckedSnapPizzicatoBelow',\n        between_lines: false,\n      }, // Snap pizzicato\n      ah: { code: 'stringsHarmonic', between_lines: false }, // Natural harmonic or open note\n      'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false }, // Fermata\n      'a@a': { code: 'fermataAbove', between_lines: false }, // Fermata above staff\n      'a@u': { code: 'fermataBelow', between_lines: false }, // Fermata below staff\n      'a|': { code: 'stringsUpBow', between_lines: false }, // Bow up - up stroke\n      am: { code: 'stringsDownBow', between_lines: false }, // Bow down - down stroke\n      'a,': { code: 'pictChokeCymbal', between_lines: false }, // Choked\n    };\n    return articulations[artic];\n  },\n\n  accidentalMap: accidentals,\n\n  accidentalCodes(acc: string): { code: string; parenRightPaddingAdjustment: number } {\n    return accidentals[acc];\n  },\n\n  accidentalColumnsTable: {\n    1: {\n      a: [1],\n      b: [1],\n    },\n    2: {\n      a: [1, 2],\n    },\n    3: {\n      a: [1, 3, 2],\n      b: [1, 2, 1],\n      second_on_bottom: [1, 2, 3],\n    },\n    4: {\n      a: [1, 3, 4, 2],\n      b: [1, 2, 3, 1],\n      spaced_out_tetrachord: [1, 2, 1, 2],\n    },\n    5: {\n      a: [1, 3, 5, 4, 2],\n      b: [1, 2, 4, 3, 1],\n      spaced_out_pentachord: [1, 2, 3, 2, 1],\n      very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n      a: [1, 3, 5, 6, 4, 2],\n      b: [1, 2, 4, 5, 3, 1],\n      spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n      very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n    },\n  } as Record<number, { [name: string]: number[] }>,\n\n  ornamentCodes(acc: string): { code: string } {\n    const ornaments: Record<string, { code: string }> = {\n      mordent: { code: 'ornamentShortTrill' },\n      mordent_inverted: { code: 'ornamentMordent' },\n      turn: { code: 'ornamentTurn' },\n      turn_inverted: { code: 'ornamentTurnSlash' },\n      tr: { code: 'ornamentTrill' },\n      upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },\n      downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\n      prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },\n      pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },\n      upmordent: { code: 'ornamentPrecompSlideTrillBach' },\n      downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\n      lineprall: { code: 'ornamentPrecompAppoggTrill' },\n      prallprall: { code: 'ornamentTremblement' },\n      scoop: { code: 'brassScoop' },\n      doit: { code: 'brassDoitMedium' },\n      fall: { code: 'brassFallLipShort' },\n      doitLong: { code: 'brassLiftMedium' },\n      fallLong: { code: 'brassFallRoughMedium' },\n      bend: { code: 'brassBend' },\n      plungerClosed: { code: 'brassMuteClosed' },\n      plungerOpen: { code: 'brassMuteOpen' },\n      flip: { code: 'brassFlip' },\n      jazzTurn: { code: 'brassJazzTurn' },\n      smear: { code: 'brassSmear' },\n    };\n    return ornaments[acc];\n  },\n\n  keySignature(spec: string): { type: string; line: number }[] {\n    const keySpecs: Record<string, { acc?: string; num: number }> = {\n      C: { num: 0 },\n      Am: { num: 0 },\n      F: { acc: 'b', num: 1 },\n      Dm: { acc: 'b', num: 1 },\n      Bb: { acc: 'b', num: 2 },\n      Gm: { acc: 'b', num: 2 },\n      Eb: { acc: 'b', num: 3 },\n      Cm: { acc: 'b', num: 3 },\n      Ab: { acc: 'b', num: 4 },\n      Fm: { acc: 'b', num: 4 },\n      Db: { acc: 'b', num: 5 },\n      Bbm: { acc: 'b', num: 5 },\n      Gb: { acc: 'b', num: 6 },\n      Ebm: { acc: 'b', num: 6 },\n      Cb: { acc: 'b', num: 7 },\n      Abm: { acc: 'b', num: 7 },\n      G: { acc: '#', num: 1 },\n      Em: { acc: '#', num: 1 },\n      D: { acc: '#', num: 2 },\n      Bm: { acc: '#', num: 2 },\n      A: { acc: '#', num: 3 },\n      'F#m': { acc: '#', num: 3 },\n      E: { acc: '#', num: 4 },\n      'C#m': { acc: '#', num: 4 },\n      B: { acc: '#', num: 5 },\n      'G#m': { acc: '#', num: 5 },\n      'F#': { acc: '#', num: 6 },\n      'D#m': { acc: '#', num: 6 },\n      'C#': { acc: '#', num: 7 },\n      'A#m': { acc: '#', num: 7 },\n    };\n    const keySpec = keySpecs[spec];\n\n    if (!keySpec) {\n      throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n    }\n\n    if (!keySpec.acc) {\n      return [];\n    }\n\n    const accidentalList: Record<string, number[]> = {\n      b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n      '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n    };\n\n    const notes = accidentalList[keySpec.acc];\n\n    const acc_list = [];\n    for (let i = 0; i < keySpec.num; ++i) {\n      const line = notes[i];\n      acc_list.push({ type: keySpec.acc, line });\n    }\n\n    return acc_list;\n  },\n\n  unicode: {\n    // ♯ accidental sharp\n    sharp: String.fromCharCode(0x266f),\n    // ♭ accidental flat\n    flat: String.fromCharCode(0x266d),\n    // ♮ accidental natural\n    natural: String.fromCharCode(0x266e),\n    // △ major seventh\n    triangle: String.fromCharCode(0x25b3),\n    // ø half-diminished\n    'o-with-slash': String.fromCharCode(0x00f8),\n    // ° diminished\n    degrees: String.fromCharCode(0x00b0),\n    // ○ diminished\n    circle: String.fromCharCode(0x25cb),\n  },\n\n  // Used to convert duration aliases to the number based duration.\n  // If the input isn't an alias, simply return the input.\n  //\n  // example: 'q' -> '4', '8' -> '8'\n  sanitizeDuration(duration: string): string {\n    const durationAliases: Record<string, string> = {\n      w: '1',\n      h: '2',\n      q: '4',\n\n      // This is the default duration used to render bars (BarNote). Bars no longer\n      // consume ticks, so this should be a no-op.\n      //\n      // TODO(0xfe): This needs to be cleaned up.\n      b: '256',\n    };\n    const alias = durationAliases[duration];\n    if (alias !== undefined) {\n      duration = alias;\n    }\n\n    if (durations[duration] === undefined) {\n      throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n    }\n\n    return duration;\n  },\n\n  // Convert the `duration` to an fraction\n  durationToFraction(duration: string): Fraction {\n    return new Fraction().parse(Tables.sanitizeDuration(duration));\n  },\n\n  // Convert the `duration` to an number\n  durationToNumber(duration: string): number {\n    return Tables.durationToFraction(duration).value();\n  },\n\n  // Convert the `duration` to total ticks\n  durationToTicks(duration: string): number {\n    duration = Tables.sanitizeDuration(duration);\n\n    const ticks = durations[duration];\n    if (ticks === undefined) {\n      throw new RuntimeError('InvalidDuration');\n    }\n\n    return ticks;\n  },\n\n  // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n  // eslint-disable-next-line\n  getGlyphProps(duration: string, type?: string): any {\n    duration_codes = duration_codes || {\n      '1/2': {\n        common: {\n          stem: false,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: -Tables.STEM_HEIGHT,\n          stem_down_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Breve note\n            code_head: 'noteheadDoubleWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDoubleWhole', scale);\n            },\n          },\n          h: {\n            // Breve note harmonic\n            code_head: 'unpitchedPercussionClef1',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'unpitchedPercussionClef1', scale);\n            },\n          },\n          m: {\n            // Breve note muted -\n            code_head: 'vexNoteHeadMutedBreve',\n            stem_offset: 0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'vexNoteHeadMutedBreve', scale);\n            },\n          },\n          r: {\n            // Breve rest\n            code_head: 'restDoubleWhole',\n            rest: true,\n            position: 'B/5',\n            dot_shiftY: 0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'restDoubleWhole', scale);\n            },\n          },\n          s: {\n            // Breve note slash -\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      1: {\n        common: {\n          stem: false,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: -Tables.STEM_HEIGHT,\n          stem_down_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n          tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Whole note\n            code_head: 'noteheadWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadWhole', scale);\n            },\n          },\n          h: {\n            // Whole note harmonic\n            code_head: 'noteheadDiamondWhole',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondWhole', scale);\n            },\n          },\n          m: {\n            // Whole note muted\n            code_head: 'noteheadXWhole',\n            stem_offset: -3,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXWhole', scale);\n            },\n          },\n          r: {\n            // Whole rest\n            code_head: 'restWhole',\n            rest: true,\n            position: 'D/5',\n            dot_shiftY: 0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'restWhole', scale);\n            },\n          },\n          s: {\n            // Whole note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      2: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Half note\n            code_head: 'noteheadHalf',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadHalf', scale);\n            },\n          },\n          h: {\n            // Half note harmonic\n            code_head: 'noteheadDiamondHalf',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondHalf', scale);\n            },\n          },\n          m: {\n            // Half note muted\n            code_head: 'noteheadXHalf',\n            stem_offset: -3,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXHalf', scale);\n            },\n          },\n          r: {\n            // Half rest\n            code_head: 'restHalf',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'restHalf', scale);\n            },\n          },\n          s: {\n            // Half note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      4: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: false,\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Quarter note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Quarter harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Quarter muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Quarter rest\n            code_head: 'restQuarter',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.5,\n            line_below: 1.5,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'restQuarter', scale);\n            },\n          },\n          s: {\n            // Quarter slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      8: {\n        common: {\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          beam_count: 1,\n          code_flag_upstem: 'flag8thUp',\n          code_flag_downstem: 'flag8thDown',\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Eighth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Eighth note harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Eighth note muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Eighth rest\n            code_head: 'rest8th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 1.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest8th', scale);\n            },\n          },\n          s: {\n            // Eight slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      16: {\n        common: {\n          beam_count: 2,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag16thUp',\n          code_flag_downstem: 'flag16thDown',\n          stem_up_extension: 0,\n          stem_down_extension: 0,\n          tabnote_stem_up_extension: 0,\n          tabnote_stem_down_extension: 0,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Sixteenth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Sixteenth note harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Sixteenth note muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Sixteenth rest\n            code_head: 'rest16th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 2.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest16th', scale);\n            },\n          },\n          s: {\n            // Sixteenth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      32: {\n        common: {\n          beam_count: 3,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag32ndUp',\n          code_flag_downstem: 'flag32ndDown',\n          stem_up_extension: 9,\n          stem_down_extension: 9,\n          tabnote_stem_up_extension: 8,\n          tabnote_stem_down_extension: 5,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Thirty-second note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Thirty-second harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Thirty-second muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Thirty-second rest\n            code_head: 'rest32nd',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 2.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest32nd', scale);\n            },\n          },\n          s: {\n            // Thirty-second slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      64: {\n        common: {\n          beam_count: 4,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag64thUp',\n          code_flag_downstem: 'flag64thDown',\n          stem_up_extension: 13,\n          stem_down_extension: 13,\n          tabnote_stem_up_extension: 12,\n          tabnote_stem_down_extension: 9,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Sixty-fourth note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Sixty-fourth harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Sixty-fourth muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Sixty-fourth rest\n            code_head: 'rest64th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 3.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest64th', scale);\n            },\n          },\n          s: {\n            // Sixty-fourth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n      128: {\n        common: {\n          beam_count: 5,\n          stem: true,\n          stem_offset: 0,\n          flag: true,\n          code_flag_upstem: 'flag128thUp',\n          code_flag_downstem: 'flag128thDown',\n          stem_up_extension: 22,\n          stem_down_extension: 22,\n          tabnote_stem_up_extension: 21,\n          tabnote_stem_down_extension: 18,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0,\n        },\n        type: {\n          n: {\n            // Hundred-twenty-eight note\n            code_head: 'noteheadBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadBlack', scale);\n            },\n          },\n          h: {\n            // Hundred-twenty-eight harmonic\n            code_head: 'noteheadDiamondBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadDiamondBlack', scale);\n            },\n          },\n          m: {\n            // Hundred-twenty-eight muted\n            code_head: 'noteheadXBlack',\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'noteheadXBlack', scale);\n            },\n          },\n          r: {\n            // Hundred-twenty-eight rest\n            code_head: 'rest128th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -2.5,\n            line_above: 3.0,\n            line_below: 3.0,\n            getWidth(scale = Tables.DEFAULT_NOTATION_FONT_SCALE): number | undefined {\n              return Glyph.getWidth(Tables.DEFAULT_FONT_STACK, 'rest128th', scale);\n            },\n          },\n          s: {\n            // Hundred-twenty-eight rest\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n          },\n        },\n      },\n    };\n\n    duration = Tables.sanitizeDuration(duration);\n    type = type || 'n'; // default type is a regular note\n\n    // Lookup duration for default glyph head code\n    const code = duration_codes[duration];\n    if (code === undefined) {\n      return;\n    }\n\n    // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\n    let glyphTypeProperties = code.type[type];\n\n    // If this isn't a standard type, then lookup the custom note head map.\n    if (glyphTypeProperties === undefined) {\n      // Try and get it from the custom list of note heads\n      const customGlyphTypeProperties = customNoteHeads[type.toUpperCase()];\n\n      // If not, then return with nothing\n      if (customGlyphTypeProperties === undefined) {\n        return;\n      }\n\n      // Otherwise set it as the code_head value\n      glyphTypeProperties = {\n        code_head: customGlyphTypeProperties.code,\n        ...customGlyphTypeProperties,\n      };\n    }\n\n    // Merge duration props for 'duration' with the note head properties.\n    return { ...code.common, ...glyphTypeProperties };\n  },\n\n  validTypes: {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n  } as Record<string, Record<string, string>>,\n\n  // Default time signature.\n  TIME4_4: {\n    num_beats: 4,\n    beat_value: 4,\n    resolution: RESOLUTION,\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { defined } from './util';\n\n/** Element attributes. */\nexport interface ElementAttributes {\n  // eslint-disable-next-line\n  [name: string]: any;\n  id: string;\n  // eslint-disable-next-line\n  el?: any;\n  type: string;\n  classes: Record<string, boolean>;\n}\n\n/** Element style */\nexport interface ElementStyle {\n  shadowColor?: string;\n  shadowBlur?: number;\n  fillStyle?: string;\n  strokeStyle?: string;\n  lineWidth?: number;\n}\n\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n */\nexport abstract class Element {\n  static get CATEGORY(): string {\n    return 'Element';\n  }\n\n  protected static ID: number = 1000;\n  protected static newID(): string {\n    return `auto${Element.ID++}`;\n  }\n\n  private context?: RenderContext;\n  protected rendered: boolean;\n  protected style?: ElementStyle;\n  private attrs: ElementAttributes;\n  protected boundingBox?: BoundingBox;\n  protected registry?: Registry;\n\n  // fontStack and musicFont are both initialized by the constructor via this.setFontStack(...).\n  protected fontStack!: Font[];\n  protected musicFont!: Font;\n\n  constructor() {\n    this.attrs = {\n      id: Element.newID(),\n      el: undefined,\n      type: this.getCategory(),\n      classes: {},\n    };\n\n    this.rendered = false;\n    this.setFontStack(Tables.DEFAULT_FONT_STACK);\n\n    // If a default registry exist, then register with it right away.\n    Registry.getDefaultRegistry()?.register(this);\n  }\n\n  /** Get element category string. */\n  getCategory(): string {\n    return (<typeof Element>this.constructor).CATEGORY;\n  }\n\n  /** Set music fonts stack. */\n  setFontStack(fontStack: Font[]): this {\n    this.fontStack = fontStack;\n    this.musicFont = fontStack[0];\n    return this;\n  }\n\n  /** Get music fonts stack. */\n  getFontStack(): Font[] {\n    return this.fontStack;\n  }\n\n  /** Set the draw style of a stemmable note. */\n  setStyle(style: ElementStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  /** Get the draw style of a stemmable note. */\n  getStyle(): ElementStyle | undefined {\n    return this.style;\n  }\n\n  /** Apply current style to Canvas `context`. */\n  applyStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n\n    context.save();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    if (style.lineWidth) context.setLineWidth(style.lineWidth);\n    return this;\n  }\n\n  /** Restore style of `context`. */\n  restoreStyle(\n    context: RenderContext | undefined = this.context,\n    style: ElementStyle | undefined = this.getStyle()\n  ): this {\n    if (!style) return this;\n    if (!context) return this;\n    context.restore();\n    return this;\n  }\n\n  /** Draw with style of an element. */\n  drawWithStyle(): void {\n    this.checkContext();\n    this.applyStyle();\n    this.draw();\n    this.restoreStyle();\n  }\n\n  /** Draw an element. */\n  // eslint-disable-next-line\n  abstract draw(...args: any[]): void;\n\n  /** Check if it has a class label (An element can have multiple class labels).  */\n  hasClass(className: string): boolean {\n    return this.attrs.classes[className] === true;\n  }\n\n  /** Add a class label (An element can have multiple class labels).  */\n  addClass(className: string): this {\n    this.attrs.classes[className] = true;\n    this.registry?.onUpdate({\n      id: this.attrs.id,\n      name: 'class',\n      value: className,\n      oldValue: undefined,\n    });\n    return this;\n  }\n\n  /** Remove a class label (An element can have multiple class labels).  */\n  removeClass(className: string): this {\n    delete this.attrs.classes[className];\n    this.registry?.onUpdate({\n      id: this.attrs.id,\n      name: 'class',\n      value: undefined,\n      oldValue: className,\n    });\n    return this;\n  }\n\n  /** Call back from registry after the element is registered. */\n  onRegister(registry: Registry): this {\n    this.registry = registry;\n    return this;\n  }\n\n  /** Return the rendered status. */\n  isRendered(): boolean {\n    return this.rendered;\n  }\n\n  /** Set the rendered status. */\n  setRendered(rendered = true): this {\n    this.rendered = rendered;\n    return this;\n  }\n\n  /** Return the element attributes. */\n  getAttributes(): ElementAttributes {\n    return this.attrs;\n  }\n\n  /** Return an attribute. */\n  // eslint-disable-next-line\n  getAttribute(name: string): any {\n    return this.attrs[name];\n  }\n\n  /** Set an attribute. */\n  // eslint-disable-next-line\n  setAttribute(name: string, value: any): this {\n    const oldID = this.attrs.id;\n    const oldValue = this.attrs[name];\n    this.attrs[name] = value;\n    // Register with old id to support id changes.\n    this.registry?.onUpdate({ id: oldID, name, value, oldValue });\n    return this;\n  }\n\n  /** Get the boundingBox. */\n  getBoundingBox(): BoundingBox | undefined {\n    return this.boundingBox;\n  }\n\n  /** Return the context. */\n  getContext(): RenderContext | undefined {\n    return this.context;\n  }\n\n  /** Set the context. */\n  setContext(context?: RenderContext): this {\n    this.context = context;\n    return this;\n  }\n\n  /** Validate and return the context. */\n  checkContext(): RenderContext {\n    return defined(this.context, 'NoContext', 'No rendering context attached to instance.');\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { Element } from './element';\nimport { Font, FontGlyph } from './font';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TypeProps } from './types/common';\nimport { defined, RuntimeError } from './util';\n\nexport interface DurationCode {\n  common: TypeProps;\n  type: Record<string, TypeProps>;\n}\n\nexport interface GlyphProps {\n  code_head: string;\n  dot_shiftY: number;\n  position: string;\n  rest: boolean;\n  line_below: number;\n  line_above: number;\n  stem_up_extension: number;\n  stem_down_extension: number;\n  stem: Stem;\n  code: string;\n  code_flag_upstem: string;\n  code_flag_downstem: string;\n  flag: boolean;\n  width: number;\n  text: string;\n  tabnote_stem_down_extension: number;\n  tabnote_stem_up_extension: number;\n  beam_count: number;\n  duration_codes: Record<string, DurationCode>;\n  validTypes: Record<string, string>;\n  shift_y: number;\n\n  getWidth(a?: number): number;\n\n  getMetrics(): GlyphMetrics;\n}\n\nexport interface GlyphOptions {\n  fontStack: Font[];\n  category?: string;\n}\n\nexport interface GlyphMetrics {\n  width: number;\n  height: number;\n  x_min: number;\n  x_max: number;\n  x_shift: number;\n  y_shift: number;\n  scale: number;\n  ha: number;\n  outline: number[];\n  font: Font;\n}\n\nexport const enum OutlineCode {\n  MOVE = 0,\n  LINE = 1,\n  QUADRATIC = 2,\n  BEZIER = 3,\n}\n\nclass GlyphCacheEntry {\n  metrics: GlyphMetrics;\n  bbox: BoundingBox;\n  point: number = -1;\n\n  constructor(fontStack: Font[], code: string, category?: string) {\n    this.metrics = Glyph.loadMetrics(fontStack, code, category);\n    this.bbox = Glyph.getOutlineBoundingBox(\n      this.metrics.outline,\n      this.metrics.scale,\n      this.metrics.x_shift,\n      this.metrics.y_shift\n    );\n\n    if (category) {\n      this.point = Glyph.lookupFontMetric(this.metrics.font, category, code, 'point', -1);\n    }\n  }\n}\n\nclass GlyphCache {\n  protected cache: Map<Font[], Record<string, GlyphCacheEntry>> = new Map();\n\n  lookup(fontStack: Font[], code: string, category?: string): GlyphCacheEntry {\n    let entries = this.cache.get(fontStack);\n    if (entries === undefined) {\n      entries = {};\n      this.cache.set(fontStack, entries);\n    }\n    const key = category ? `${code}%${category}` : code;\n    let entry = entries[key];\n    if (entry === undefined) {\n      entry = new GlyphCacheEntry(fontStack, code, category);\n      entries[key] = entry;\n    }\n    return entry;\n  }\n}\n\nclass GlyphOutline {\n  private i: number = 0;\n\n  constructor(private outline: number[], private originX: number, private originY: number, private scale: number) {}\n\n  done(): boolean {\n    return this.i >= this.outline.length;\n  }\n  next(): number {\n    return this.outline[this.i++];\n  }\n  nextX(): number {\n    return this.originX + this.outline[this.i++] * this.scale;\n  }\n  nextY(): number {\n    return this.originY - this.outline[this.i++] * this.scale;\n  }\n\n  static parse(str: string): number[] {\n    const result: number[] = [];\n    const parts = str.split(' ');\n    let i = 0;\n    while (i < parts.length) {\n      switch (parts[i++]) {\n        case 'm':\n          result.push(OutlineCode.MOVE, parseInt(parts[i++]), parseInt(parts[i++]));\n          break;\n        case 'l':\n          result.push(OutlineCode.LINE, parseInt(parts[i++]), parseInt(parts[i++]));\n          break;\n        case 'q':\n          result.push(\n            OutlineCode.QUADRATIC,\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++])\n          );\n          break;\n        case 'b':\n          result.push(\n            OutlineCode.BEZIER,\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++]),\n            parseInt(parts[i++])\n          );\n          break;\n      }\n    }\n    return result;\n  }\n}\n\nexport class Glyph extends Element {\n  static get CATEGORY(): string {\n    return 'Glyph';\n  }\n\n  protected static cache = new GlyphCache();\n\n  bbox: BoundingBox = new BoundingBox(0, 0, 0, 0);\n  code: string;\n  // metrics is initialised in the constructor by either setOptions or reset\n  // eslint-disable-next-line\n  metrics!: GlyphMetrics;\n  topGlyphs: Glyph[] = [];\n  botGlyphs: Glyph[] = [];\n\n  protected options: GlyphOptions;\n  protected originShift: { x: number; y: number };\n  protected x_shift: number;\n  protected y_shift: number;\n  scale: number = 1;\n  protected point: number;\n  protected stave?: Stave;\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Static methods for loading and rendering glyphs.\n\n  /**\n   * Pass a key of the form `glyphs.{category}.{code}.{key}` to Font.lookupMetric(). If the initial lookup fails,\n   * try again with the path `glyphs.{category}.{key}`. If the second lookup fails, return the defaultValue.\n   *\n   * @param font\n   * @param category any metric path under 'glyphs', so 'stem.up' could resolve to glyphs.stem.up.shiftX, glyphs.stem.up.shiftY, etc.\n   * @param code\n   * @param key\n   * @param defaultValue\n   */\n  static lookupFontMetric(font: Font, category: string, code: string, key: string, defaultValue: number): number {\n    let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);\n    if (value === undefined) {\n      // The first lookup failed, so we omit .${code} and try again (with a defaultValue this time).\n      value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);\n    }\n    return value;\n  }\n\n  static lookupGlyph(fontStack: Font[], code: string): { font: Font; glyph: FontGlyph } {\n    defined(fontStack, 'BadFontStack', 'Font stack is misconfigured');\n\n    let glyph: FontGlyph;\n    let font: Font;\n    for (let i = 0; i < fontStack.length; i++) {\n      font = fontStack[i];\n      glyph = font.getGlyphs()[code];\n      if (glyph) return { glyph, font };\n    }\n\n    throw new RuntimeError('BadGlyph', `Glyph ${code} does not exist in font.`);\n  }\n\n  static loadMetrics(fontStack: Font[], code: string, category?: string): GlyphMetrics {\n    const { glyph, font } = Glyph.lookupGlyph(fontStack, code);\n\n    if (!glyph.o) throw new RuntimeError('BadGlyph', `Glyph ${code} has no outline defined.`);\n\n    let x_shift = 0;\n    let y_shift = 0;\n    let scale = 1;\n    if (category && font) {\n      x_shift = Glyph.lookupFontMetric(font, category, code, 'shiftX', 0);\n      y_shift = Glyph.lookupFontMetric(font, category, code, 'shiftY', 0);\n      scale = Glyph.lookupFontMetric(font, category, code, 'scale', 1);\n    }\n\n    const x_min = glyph.x_min;\n    const x_max = glyph.x_max;\n    const ha = glyph.ha;\n\n    if (!glyph.cached_outline) {\n      glyph.cached_outline = GlyphOutline.parse(glyph.o);\n    }\n\n    return {\n      x_min,\n      x_max,\n      x_shift,\n      y_shift,\n      scale,\n      ha,\n      outline: glyph.cached_outline,\n      font,\n      width: x_max - x_min,\n      height: ha,\n    };\n  }\n\n  /**\n   * Renders glyphs from the default font stack.\n   *\n   * @param ctx Canvas or SVG context\n   * @param x_pos x coordinate\n   * @param y_pos y coordinate\n   * @param point the point size of the font\n   * @param code the glyph code in font.getGlyphs()\n   * @param options\n   * @returns\n   */\n  static renderGlyph(\n    ctx: RenderContext,\n    x_pos: number,\n    y_pos: number,\n    point: number,\n    code: string,\n    options?: { font?: Font; category: string }\n  ): GlyphMetrics {\n    const params = {\n      fontStack: Tables.DEFAULT_FONT_STACK,\n      ...options,\n    };\n    const data = Glyph.cache.lookup(params.fontStack, code, params.category);\n    const metrics = data.metrics;\n    if (data.point != -1) {\n      point = data.point;\n    }\n\n    const scale = (point * 72.0) / (metrics.font.getResolution() * 100.0);\n\n    Glyph.renderOutline(ctx, metrics.outline, scale * metrics.scale, x_pos + metrics.x_shift, y_pos + metrics.y_shift);\n    return metrics;\n  }\n\n  static renderOutline(ctx: RenderContext, outline: number[], scale: number, x_pos: number, y_pos: number): void {\n    const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n\n    ctx.beginPath();\n    let x, y: number;\n    while (!go.done()) {\n      switch (go.next()) {\n        case OutlineCode.MOVE:\n          ctx.moveTo(go.nextX(), go.nextY());\n          break;\n        case OutlineCode.LINE:\n          ctx.lineTo(go.nextX(), go.nextY());\n          break;\n        case OutlineCode.QUADRATIC:\n          x = go.nextX();\n          y = go.nextY();\n          ctx.quadraticCurveTo(go.nextX(), go.nextY(), x, y);\n          break;\n        case OutlineCode.BEZIER:\n          x = go.nextX();\n          y = go.nextY();\n          ctx.bezierCurveTo(go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n          break;\n      }\n    }\n    ctx.fill();\n  }\n\n  static getOutlineBoundingBox(outline: number[], scale: number, x_pos: number, y_pos: number): BoundingBox {\n    const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n    const bboxComp = new BoundingBoxComputation();\n\n    // (penX, penY) hold the pen position: the start of each stroke.\n    let penX: number = x_pos;\n    let penY: number = y_pos;\n    let x, y: number;\n    while (!go.done()) {\n      switch (go.next()) {\n        case OutlineCode.MOVE:\n          // Note that we don't add any points to the bounding box until a srroke is actually drawn.\n          penX = go.nextX();\n          penY = go.nextY();\n          break;\n        case OutlineCode.LINE:\n          bboxComp.addPoint(penX, penY);\n          penX = go.nextX();\n          penY = go.nextY();\n          bboxComp.addPoint(penX, penY);\n          break;\n        case OutlineCode.QUADRATIC:\n          x = go.nextX();\n          y = go.nextY();\n          bboxComp.addQuadraticCurve(penX, penY, go.nextX(), go.nextY(), x, y);\n          penX = x;\n          penY = y;\n          break;\n        case OutlineCode.BEZIER:\n          x = go.nextX();\n          y = go.nextY();\n          bboxComp.addBezierCurve(penX, penY, go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n          penX = x;\n          penY = y;\n          break;\n      }\n    }\n\n    return new BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());\n  }\n\n  static getWidth(fontStack: Font[], code: string, point: number, category?: string): number {\n    const data = Glyph.cache.lookup(fontStack, code, category);\n    if (data.point != -1) {\n      point = data.point;\n    }\n    const scale = (point * 72) / (data.metrics.font.getResolution() * 100);\n    return data.bbox.getW() * scale;\n  }\n\n  /**\n   * @param code\n   * @param point\n   * @param options\n   */\n  constructor(code: string, point: number, options?: { category: string }) {\n    super();\n\n    this.code = code;\n    this.point = point;\n    this.options = {\n      fontStack: this.getFontStack(),\n    };\n\n    this.x_shift = 0;\n    this.y_shift = 0;\n\n    this.originShift = {\n      x: 0,\n      y: 0,\n    };\n\n    if (options) {\n      this.setOptions(options);\n    } else {\n      this.reset();\n    }\n  }\n\n  // eslint-disable-next-line\n  draw(...args: any[]): void {\n    // DO NOTHING.\n  }\n\n  getCode(): string {\n    return this.code;\n  }\n\n  // eslint-disable-next-line\n  setOptions(options: any): void {\n    this.options = { ...this.options, ...options };\n    this.reset();\n  }\n\n  setPoint(point: number): this {\n    this.point = point;\n    return this;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  setXShift(x_shift: number): this {\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  setYShift(y_shift: number): this {\n    this.y_shift = y_shift;\n    return this;\n  }\n\n  reset(): void {\n    const data = Glyph.cache.lookup(this.options.fontStack, this.code, this.options.category);\n    this.metrics = data.metrics;\n    // Override point from metrics file\n    if (data.point != -1) {\n      this.point = data.point;\n    }\n\n    this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);\n    this.bbox = new BoundingBox(\n      data.bbox.getX() * this.scale,\n      data.bbox.getY() * this.scale,\n      data.bbox.getW() * this.scale,\n      data.bbox.getH() * this.scale\n    );\n  }\n\n  checkMetrics(): GlyphMetrics {\n    return defined(this.metrics, 'BadGlyph', `Glyph ${this.code} is not initialized.`);\n  }\n\n  getMetrics(): GlyphMetrics {\n    const metrics = this.checkMetrics();\n    const metricsScale = metrics.scale;\n    return {\n      x_min: metrics.x_min * this.scale * metricsScale,\n      x_max: metrics.x_max * this.scale * metricsScale,\n      width: this.bbox.getW(),\n      height: this.bbox.getH(),\n      scale: this.scale * metricsScale,\n      x_shift: metrics.x_shift,\n      y_shift: metrics.y_shift,\n      outline: metrics.outline,\n      font: metrics.font,\n      ha: metrics.ha,\n    };\n  }\n\n  setOriginX(x: number): void {\n    const { bbox } = this;\n    const originX = Math.abs(bbox.getX() / bbox.getW());\n    const xShift = (x - originX) * bbox.getW();\n    this.originShift.x = -xShift;\n  }\n\n  setOriginY(y: number): void {\n    const { bbox } = this;\n    const originY = Math.abs(bbox.getY() / bbox.getH());\n    const yShift = (y - originY) * bbox.getH();\n    this.originShift.y = -yShift;\n  }\n\n  setOrigin(x: number, y: number): void {\n    this.setOriginX(x);\n    this.setOriginY(y);\n  }\n\n  render(ctx: RenderContext, x: number, y: number): void {\n    const metrics = this.checkMetrics();\n\n    const outline = metrics.outline;\n    const scale = this.scale * metrics.scale;\n\n    this.setRendered();\n    this.applyStyle(ctx);\n    const xPos = x + this.originShift.x + metrics.x_shift;\n    const yPos = y + this.originShift.y + metrics.y_shift;\n    Glyph.renderOutline(ctx, outline, scale, xPos, yPos);\n    this.restoreStyle(ctx);\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  renderToStave(x: number): void {\n    const context = this.checkContext();\n    const metrics = this.checkMetrics();\n    const stave = this.checkStave();\n\n    const outline = metrics.outline;\n    const scale = this.scale * metrics.scale;\n\n    this.setRendered();\n    this.applyStyle();\n\n    const xPos = x + this.x_shift + metrics.x_shift;\n    const yPos = stave.getYForGlyphs() + this.y_shift + metrics.y_shift;\n    Glyph.renderOutline(context, outline, scale, xPos, yPos);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Element } from './element';\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { defined, RuntimeError } from './util';\n\nexport enum ModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n}\n\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\n\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n  /**\n   * Modifiers category string. Every modifier has a different category.\n   * The `ModifierContext` uses this to determine the type and order of the modifiers.\n   */\n  static get CATEGORY(): string {\n    return 'Modifier';\n  }\n\n  /** Modifiers can be positioned almost anywhere, relative to a note. */\n  static get Position(): typeof ModifierPosition {\n    return ModifierPosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      center: ModifierPosition.CENTER,\n      above: ModifierPosition.ABOVE,\n      below: ModifierPosition.BELOW,\n      left: ModifierPosition.LEFT,\n      right: ModifierPosition.RIGHT,\n    };\n  }\n\n  // Modifiers are attached to a note and an index. An index is a specific head in a chord.\n  protected note?: Note;\n  protected index?: number;\n\n  protected width: number;\n  protected text_line: number;\n  protected position: ModifierPosition;\n  protected y_shift: number;\n  protected x_shift: number;\n\n  private spacingFromNextModifier: number;\n  private modifierContext?: ModifierContext;\n\n  constructor() {\n    super();\n\n    this.width = 0;\n\n    // The `text_line` is reserved space above or below a stave.\n    this.text_line = 0;\n    this.position = Modifier.Position.LEFT;\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.spacingFromNextModifier = 0;\n  }\n\n  /** Called when position changes. */\n  protected reset(): void {\n    // DO NOTHING.\n  }\n\n  /** Get modifier widths. */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /** Set modifier widths. */\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n  getNote(): Note {\n    return defined(this.note, 'NoNote', 'Modifier has no note.');\n  }\n\n  /**\n   * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n   * Also verifies that the index is valid.\n   */\n  checkAttachedNote(): Note {\n    const category = this.getCategory();\n    defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n    return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n  }\n\n  /**\n   * Set attached note.\n   * @param note (`StaveNote`, `TabNote`, etc.)\n   */\n  setNote(note: Note): this {\n    this.note = note;\n    return this;\n  }\n\n  /** Get note index, which is a specific note in a chord. */\n  getIndex(): number | undefined {\n    return this.index;\n  }\n\n  /** Check and get note index, which is a specific note in a chord. */\n  checkIndex(): number {\n    return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n  }\n\n  /** Set note index, which is a specific note in a chord. */\n  setIndex(index: number): this {\n    this.index = index;\n    return this;\n  }\n\n  /** Get `ModifierContext`. */\n  getModifierContext(): ModifierContext | undefined {\n    return this.modifierContext;\n  }\n\n  /** Check and get `ModifierContext`. */\n  checkModifierContext(): ModifierContext {\n    return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');\n  }\n\n  /** Every modifier must be part of a `ModifierContext`. */\n  setModifierContext(c: ModifierContext): this {\n    this.modifierContext = c;\n    return this;\n  }\n\n  /** Get position. */\n  getPosition(): number {\n    return this.position;\n  }\n\n  /**\n   * Set position.\n   * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n   */\n  setPosition(position: string | number): this {\n    this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n    this.reset();\n    return this;\n  }\n\n  /** Set the `text_line` for the modifier. */\n  setTextLine(line: number): this {\n    this.text_line = line;\n    return this;\n  }\n\n  /** Shift modifier down `y` pixels. Negative values shift up. */\n  setYShift(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  /** Set spacing from next modifier. */\n  setSpacingFromNextModifier(x: number): void {\n    this.spacingFromNextModifier = x;\n  }\n\n  /** Get spacing from next modifier. */\n  getSpacingFromNextModifier(): number {\n    return this.spacingFromNextModifier;\n  }\n\n  /**\n   * Shift modifier `x` pixels in the direction of the modifier. Negative values\n   * shift reverse.\n   */\n  setXShift(x: number): this {\n    this.x_shift = 0;\n    if (this.position === Modifier.Position.LEFT) {\n      this.x_shift -= x;\n    } else {\n      this.x_shift += x;\n    }\n    return this;\n  }\n\n  /** Get shift modifier `x` */\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  /** Render the modifier onto the canvas. */\n  draw(): void {\n    this.checkContext();\n    throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n  }\n\n  // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n  alignSubNotesWithNote(subNotes: Note[], note: Note): void {\n    // Shift over the tick contexts of each note\n    const tickContext = note.getTickContext();\n    const metrics = tickContext.getMetrics();\n    const stave = note.getStave();\n    const subNoteXOffset =\n      tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n\n    subNotes.forEach((subNote) => {\n      const subTickContext = subNote.getTickContext();\n      if (stave) subNote.setStave(stave);\n      subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RuntimeError } from './util';\n\nexport interface NoteAccidental {\n  note: number;\n  accidental: AccidentalValue;\n}\n\nexport interface NoteParts {\n  root: string;\n  accidental: string;\n}\n\nexport interface KeyParts {\n  root: string;\n  accidental: string;\n  type: string;\n}\n\nexport type KeyValue = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\n\nexport type RootValue = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport type AccidentalValue = -2 | -1 | 0 | 1 | 2;\n\nexport interface Key {\n  root_index: RootValue;\n  int_val: KeyValue;\n}\n\n/** Music implements some standard music theory routines. */\nexport class Music {\n  /** Number of an canonical notes (12). */\n  static get NUM_TONES(): number {\n    return this.canonical_notes.length;\n  }\n\n  /** Names of root notes ('c', 'd',...) */\n  static get roots(): string[] {\n    return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n  }\n\n  /** Values of the root notes.*/\n  static get root_values(): KeyValue[] {\n    return [0, 2, 4, 5, 7, 9, 11];\n  }\n\n  /** Indices of the root notes.*/\n  static get root_indices(): Record<string, RootValue> {\n    return {\n      c: 0,\n      d: 1,\n      e: 2,\n      f: 3,\n      g: 4,\n      a: 5,\n      b: 6,\n    };\n  }\n\n  /** Names of canonical notes ('c', 'c#', 'd',...). */\n  static get canonical_notes(): string[] {\n    return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n  }\n\n  /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n  static get diatonic_intervals(): string[] {\n    return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n  }\n\n  /** NoteAccidental associated to diatonic intervals. */\n  static get diatonic_accidentals(): Record<string, NoteAccidental> {\n    return {\n      unison: { note: 0, accidental: 0 },\n      m2: { note: 1, accidental: -1 },\n      M2: { note: 1, accidental: 0 },\n      m3: { note: 2, accidental: -1 },\n      M3: { note: 2, accidental: 0 },\n      p4: { note: 3, accidental: 0 },\n      dim5: { note: 4, accidental: -1 },\n      p5: { note: 4, accidental: 0 },\n      m6: { note: 5, accidental: -1 },\n      M6: { note: 5, accidental: 0 },\n      b7: { note: 6, accidental: -1 },\n      M7: { note: 6, accidental: 0 },\n      octave: { note: 7, accidental: 0 },\n    };\n  }\n\n  /** Semitones shift associated to intervals .*/\n  static get intervals(): Record<string, number> {\n    return {\n      u: 0,\n      unison: 0,\n      m2: 1,\n      b2: 1,\n      min2: 1,\n      S: 1,\n      H: 1,\n      2: 2,\n      M2: 2,\n      maj2: 2,\n      T: 2,\n      W: 2,\n      m3: 3,\n      b3: 3,\n      min3: 3,\n      M3: 4,\n      3: 4,\n      maj3: 4,\n      4: 5,\n      p4: 5,\n      '#4': 6,\n      b5: 6,\n      aug4: 6,\n      dim5: 6,\n      5: 7,\n      p5: 7,\n      '#5': 8,\n      b6: 8,\n      aug5: 8,\n      6: 9,\n      M6: 9,\n      maj6: 9,\n      b7: 10,\n      m7: 10,\n      min7: 10,\n      dom7: 10,\n      M7: 11,\n      maj7: 11,\n      8: 12,\n      octave: 12,\n    };\n  }\n\n  /** Semitones shifts associated with scales. */\n  static get scales(): Record<string, number[]> {\n    return {\n      major: [2, 2, 1, 2, 2, 2, 1],\n      minor: [2, 1, 2, 2, 1, 2, 2],\n      ionian: [2, 2, 1, 2, 2, 2, 1],\n      dorian: [2, 1, 2, 2, 2, 1, 2],\n      phyrgian: [1, 2, 2, 2, 1, 2, 2],\n      lydian: [2, 2, 2, 1, 2, 2, 1],\n      mixolydian: [2, 2, 1, 2, 2, 1, 2],\n      aeolian: [2, 1, 2, 2, 1, 2, 2],\n      locrian: [1, 2, 2, 1, 2, 2, 2],\n    };\n  }\n\n  /** Scales associated with m (minor) and M (major). */\n  static get scaleTypes(): Record<string, number[]> {\n    return {\n      M: Music.scales.major,\n      m: Music.scales.minor,\n    };\n  }\n\n  /** Accidentals abbreviations. */\n  static get accidentals(): string[] {\n    return ['bb', 'b', 'n', '#', '##'];\n  }\n\n  /** Note values. */\n  static get noteValues(): Record<string, Key> {\n    return {\n      c: { root_index: 0, int_val: 0 },\n      cn: { root_index: 0, int_val: 0 },\n      'c#': { root_index: 0, int_val: 1 },\n      'c##': { root_index: 0, int_val: 2 },\n      cb: { root_index: 0, int_val: 11 },\n      cbb: { root_index: 0, int_val: 10 },\n      d: { root_index: 1, int_val: 2 },\n      dn: { root_index: 1, int_val: 2 },\n      'd#': { root_index: 1, int_val: 3 },\n      'd##': { root_index: 1, int_val: 4 },\n      db: { root_index: 1, int_val: 1 },\n      dbb: { root_index: 1, int_val: 0 },\n      e: { root_index: 2, int_val: 4 },\n      en: { root_index: 2, int_val: 4 },\n      'e#': { root_index: 2, int_val: 5 },\n      'e##': { root_index: 2, int_val: 6 },\n      eb: { root_index: 2, int_val: 3 },\n      ebb: { root_index: 2, int_val: 2 },\n      f: { root_index: 3, int_val: 5 },\n      fn: { root_index: 3, int_val: 5 },\n      'f#': { root_index: 3, int_val: 6 },\n      'f##': { root_index: 3, int_val: 7 },\n      fb: { root_index: 3, int_val: 4 },\n      fbb: { root_index: 3, int_val: 3 },\n      g: { root_index: 4, int_val: 7 },\n      gn: { root_index: 4, int_val: 7 },\n      'g#': { root_index: 4, int_val: 8 },\n      'g##': { root_index: 4, int_val: 9 },\n      gb: { root_index: 4, int_val: 6 },\n      gbb: { root_index: 4, int_val: 5 },\n      a: { root_index: 5, int_val: 9 },\n      an: { root_index: 5, int_val: 9 },\n      'a#': { root_index: 5, int_val: 10 },\n      'a##': { root_index: 5, int_val: 11 },\n      ab: { root_index: 5, int_val: 8 },\n      abb: { root_index: 5, int_val: 7 },\n      b: { root_index: 6, int_val: 11 },\n      bn: { root_index: 6, int_val: 11 },\n      'b#': { root_index: 6, int_val: 0 },\n      'b##': { root_index: 6, int_val: 1 },\n      bb: { root_index: 6, int_val: 10 },\n      bbb: { root_index: 6, int_val: 9 },\n    };\n  }\n\n  protected isValidNoteValue(note: number): boolean {\n    return note >= 0 && note < Music.canonical_notes.length;\n  }\n\n  protected isValidIntervalValue(interval: number): boolean {\n    return interval >= 0 && interval < Music.diatonic_intervals.length;\n  }\n\n  /** Return root and accidental associated to a note. */\n  getNoteParts(noteString: string): NoteParts {\n    if (!noteString || noteString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    if (noteString.length > 3) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    const note = noteString.toLowerCase();\n\n    const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n    const match = regex.exec(note);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n\n      return {\n        root,\n        accidental,\n      };\n    } else {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n  }\n\n  /** Return root, accidental and type associated to a key. */\n  getKeyParts(keyString: string): KeyParts {\n    if (!keyString || keyString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n    }\n\n    const key = keyString.toLowerCase();\n\n    // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n    const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n    const match = regex.exec(key);\n\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n      let type = match[3];\n\n      // Unspecified type implies major\n      if (!type) type = 'M';\n\n      return {\n        root,\n        accidental,\n        type,\n      };\n    } else {\n      throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n    }\n  }\n\n  /** Note value associated to a note name. */\n  getNoteValue(noteString: string): number {\n    const value = Music.noteValues[noteString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n    }\n    return value.int_val;\n  }\n\n  /** Interval value associated to an interval name. */\n  getIntervalValue(intervalString: string): number {\n    const value = Music.intervals[intervalString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n    }\n    return value;\n  }\n\n  /** Canonical note name associated to a value. */\n  getCanonicalNoteName(noteValue: number): string {\n    if (!this.isValidNoteValue(noteValue)) {\n      throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n    }\n    return Music.canonical_notes[noteValue];\n  }\n\n  /** Interval name associated to a value. */\n  getCanonicalIntervalName(intervalValue: number): string {\n    if (!this.isValidIntervalValue(intervalValue)) {\n      throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n    }\n    return Music.diatonic_intervals[intervalValue];\n  }\n\n  /**\n   * Given a note, interval, and interval direction, produce the relative note.\n   */\n  getRelativeNoteValue(noteValue: number, intervalValue: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n    if (sum < 0) sum += Music.NUM_TONES;\n\n    return sum;\n  }\n\n  /**\n   * Given a root and note value, produce the relative note name.\n   */\n  getRelativeNoteName(root: string, noteValue: number): string {\n    const parts = this.getNoteParts(root);\n    const rootValue = this.getNoteValue(parts.root);\n    let interval = noteValue - rootValue;\n\n    if (Math.abs(interval) > Music.NUM_TONES - 3) {\n      let multiplier = 1;\n      if (interval > 0) multiplier = -1;\n\n      // Possibly wrap around. (Add +1 for modulo operator)\n      const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n\n      if (Math.abs(reverse_interval) > 2) {\n        throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n      } else {\n        interval = reverse_interval;\n      }\n    }\n\n    if (Math.abs(interval) > 2) {\n      throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n    }\n\n    let relativeNoteName = parts.root;\n    if (interval > 0) {\n      for (let i = 1; i <= interval; ++i) {\n        relativeNoteName += '#';\n      }\n    } else if (interval < 0) {\n      for (let i = -1; i >= interval; --i) {\n        relativeNoteName += 'b';\n      }\n    }\n\n    return relativeNoteName;\n  }\n\n  /**\n   * Return scale tones, given intervals. Each successive interval is\n   * relative to the previous one, e.g., Major Scale:\n   *\n   *   TTSTTTS = [2,2,1,2,2,2,1]\n   *\n   * When used with key = 0, returns C scale (which is isomorphic to\n   * interval list).\n   */\n  getScaleTones(key: number, intervals: number[]): number[] {\n    const tones = [key];\n\n    let nextNote = key;\n    for (let i = 0; i < intervals.length; i++) {\n      nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n      if (nextNote !== key) tones.push(nextNote);\n    }\n\n    return tones;\n  }\n\n  /**\n   * Return the interval of a note, given a diatonic scale.\n   * e.g., given the scale C, and the note E, returns M3.\n   */\n  getIntervalBetween(note1: number, note2: number, direction: number = 1): number {\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n      throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n    }\n\n    let difference = direction === 1 ? note2 - note1 : note1 - note2;\n\n    if (difference < 0) difference += Music.NUM_TONES;\n\n    return difference;\n  }\n\n  /**\n   * Create a scale map that represents the pitch state for a\n   * `keySignature`. For example, passing a `G` to `keySignature` would\n   * return a scale map with every note naturalized except for `F` which\n   * has an `F#` state.\n   */\n  createScaleMap(keySignature: string): Record<string, string> {\n    const keySigParts = this.getKeyParts(keySignature);\n    if (!keySigParts.type) throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n    const scaleName = Music.scaleTypes[keySigParts.type];\n\n    let keySigString = keySigParts.root;\n    if (keySigParts.accidental) keySigString += keySigParts.accidental;\n\n    if (!scaleName) throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n\n    const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n    const noteLocation = Music.root_indices[keySigParts.root];\n\n    const scaleMap = {} as Record<string, string>;\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n      let noteName = this.getRelativeNoteName(rootName, scale[i]);\n\n      if (noteName.length === 1) {\n        noteName += 'n';\n      }\n\n      scaleMap[rootName] = noteName;\n    }\n\n    return scaleMap;\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements dot modifiers for notes.\n\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { isGraceNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\n\nexport class Dot extends Modifier {\n  static get CATEGORY(): string {\n    return 'Dot';\n  }\n\n  protected radius: number;\n  protected dot_shiftY: number;\n\n  // Arrange dots inside a ModifierContext.\n  static format(dots: Dot[], state: ModifierContextState): boolean {\n    const right_shift = state.right_shift;\n    const dot_spacing = 1;\n\n    if (!dots || dots.length === 0) return false;\n\n    const dot_list = [];\n    const max_shift_map: Record<string, number> = {};\n    for (let i = 0; i < dots.length; ++i) {\n      const dot = dots[i];\n      const note = dot.getNote();\n\n      let props;\n      let shift;\n\n      if (isStaveNote(note)) {\n        const index = dot.checkIndex();\n        props = note.getKeyProps()[index];\n        shift = note.getRightDisplacedHeadPx();\n      } else if (isTabNote(note)) {\n        props = { line: 0.5 }; // Shim key props for dot placement\n        shift = 0;\n      } else {\n        // note object is not StaveNote or TabNote.\n        throw new RuntimeError('Internal', 'Unexpected instance.');\n      }\n\n      const note_id = note.getAttribute('id');\n      dot_list.push({ line: props.line, note, note_id, dot });\n      max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\n    }\n\n    // Sort dots by line number.\n    dot_list.sort((a, b) => b.line - a.line);\n\n    let dot_shift = right_shift;\n    let x_width = 0;\n    let last_line = null;\n    let last_note = null;\n    let prev_dotted_space = null;\n    let half_shiftY = 0;\n\n    for (let i = 0; i < dot_list.length; ++i) {\n      const { dot, note, note_id, line } = dot_list[i];\n\n      // Reset the position of the dot every line.\n      if (line !== last_line || note !== last_note) {\n        dot_shift = max_shift_map[note_id];\n      }\n\n      if (!note.isRest() && line !== last_line) {\n        if (Math.abs(line % 1) === 0.5) {\n          // note is on a space, so no dot shift\n          half_shiftY = 0;\n        } else {\n          // note is on a line, so shift dot to space above the line\n          half_shiftY = 0.5;\n          if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {\n            // previous note on a space, so shift dot to space below the line\n            half_shiftY = -0.5;\n          } else if (line + half_shiftY === prev_dotted_space) {\n            // previous space is dotted, so shift dot to space below the line\n            half_shiftY = -0.5;\n          }\n        }\n      }\n\n      // convert half_shiftY to a multiplier for dots.draw()\n      if (note.isRest()) {\n        dot.dot_shiftY += -half_shiftY;\n      } else {\n        dot.dot_shiftY = -half_shiftY;\n      }\n      prev_dotted_space = line + half_shiftY;\n\n      dot.setXShift(dot_shift);\n      dot_shift += dot.getWidth() + dot_spacing; // spacing\n      x_width = dot_shift > x_width ? dot_shift : x_width;\n      last_line = line;\n      last_note = note;\n    }\n\n    // Update state.\n    state.right_shift += x_width;\n    return true;\n  }\n\n  constructor() {\n    super();\n\n    this.position = Modifier.Position.RIGHT;\n\n    this.radius = 2;\n    this.setWidth(5);\n    this.dot_shiftY = 0;\n  }\n\n  setNote(note: Note): this {\n    this.note = note;\n    if (isGraceNote(note)) {\n      this.radius *= 0.5;\n      this.setWidth(3);\n    }\n    return this;\n  }\n\n  setDotShiftY(y: number): this {\n    this.dot_shiftY = y;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const stave = note.checkStave();\n    const lineSpace = stave.getSpacingBetweenLines();\n\n    const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n\n    // Set the starting y coordinate to the base of the stem for TabNotes.\n    if (isTabNote(note)) {\n      start.y = note.getStemExtents().baseY;\n    }\n\n    const x = start.x + this.x_shift + this.width - this.radius;\n    const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\n\n    ctx.beginPath();\n    ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Modifier } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { Stave } from './stave';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { Tuplet } from './tuplet';\nimport { defined, RuntimeError } from './util';\nimport { Voice } from './voice';\n\n/** Formatter metrics interface */\nexport interface FormatterMetrics {\n  duration: string;\n  freedom: {\n    left: number;\n    right: number;\n  };\n  iterations: number;\n  space: {\n    used: number;\n    mean: number;\n    deviation: number;\n  };\n}\n\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport abstract class Tickable extends Element {\n  static get CATEGORY(): string {\n    return 'Tickable';\n  }\n\n  protected ignore_ticks: boolean;\n  protected tupletStack: Tuplet[];\n  protected tuplet?: Tuplet;\n  protected ticks: Fraction;\n  protected center_x_shift: number;\n  protected voice?: Voice;\n  protected width: number;\n  protected x_shift: number;\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected modifierContext?: ModifierContext;\n  protected tickContext?: TickContext;\n  protected modifiers: Modifier[];\n  protected tickMultiplier: Fraction;\n  protected formatterMetrics: FormatterMetrics;\n  protected intrinsicTicks: number;\n  protected align_center: boolean;\n\n  constructor() {\n    super();\n\n    // These properties represent the duration of\n    // this tickable element.\n    this.ticks = new Fraction(0, 1); // Fractional value of ticks\n    this.intrinsicTicks = 0; // Floating point value of ticks\n    this.tickMultiplier = new Fraction(1, 1);\n\n    // Formatter metrics\n    this.width = 0;\n    this.x_shift = 0; // Shift from tick context\n\n    this.modifiers = [];\n    this.tupletStack = [];\n\n    this.align_center = false;\n    this.center_x_shift = 0; // Shift from tick context if center aligned\n\n    // This flag tells the formatter to ignore this tickable during\n    // formatting and justification. It is set by tickables such as BarNote.\n    this.ignore_ticks = false;\n\n    // This is a space for an external formatting class or function to maintain\n    // metrics.\n    this.formatterMetrics = {\n      // The freedom of a tickable is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n\n      // The simplified rational duration of this tick as a string. It can be\n      // used as an index to a map or hashtable.\n      duration: '',\n\n      // The number of formatting iterations undergone.\n      iterations: 0,\n\n      // The space in pixels allocated by this formatter, along with the mean space\n      // for tickables of this duration, and the deviation from the mean.\n      space: {\n        used: 0,\n        mean: 0,\n        deviation: 0,\n      },\n    };\n  }\n\n  /** Reset the Tickable, this function will be overloaded. */\n  reset(): this {\n    return this;\n  }\n\n  /** Return the ticks. */\n  getTicks(): Fraction {\n    return this.ticks;\n  }\n\n  /** Check if it ignores the ticks. */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Ignore the ticks. */\n  setIgnoreTicks(flag: boolean): this {\n    this.ignore_ticks = flag;\n    return this;\n  }\n\n  /** Set width of note. Used by the formatter for positioning. */\n  setWidth(width: number): void {\n    this.width = width;\n  }\n\n  /** Get width of note. Used by the formatter for positioning. */\n  getWidth(): number {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n    }\n\n    return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n  }\n\n  /** Displace note by `x` pixels. Used by the formatter. */\n  setXShift(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  /** Get the `x` displaced pixels of the note. */\n  getXShift(): number {\n    return this.x_shift;\n  }\n\n  /** Get `x` position of this tick context. */\n  getX(): number {\n    const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n    return tickContext.getX() + this.x_shift;\n  }\n\n  /** Return the formatterMetrics. */\n  getFormatterMetrics(): FormatterMetrics {\n    return this.formatterMetrics;\n  }\n\n  /** Return the center `x` shift. */\n  getCenterXShift(): number {\n    if (this.isCenterAligned()) {\n      return this.center_x_shift;\n    }\n\n    return 0;\n  }\n\n  /** Set the center `x` shift. */\n  setCenterXShift(centerXShift: number): this {\n    this.center_x_shift = centerXShift;\n    return this;\n  }\n\n  // Check if tickable is center aligned. */\n  isCenterAligned(): boolean {\n    return this.align_center;\n  }\n\n  // Set/unset center alignment. */\n  setCenterAlignment(align_center: boolean): this {\n    this.align_center = align_center;\n    return this;\n  }\n\n  /**\n   * Return the associated voice. Every tickable must be associated with a voice.\n   * This allows formatters and preFormatter to associate them with the right modifierContexts.\n   */\n  getVoice(): Voice {\n    return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n  }\n\n  /** Set the associated voice. */\n  setVoice(voice: Voice): void {\n    this.voice = voice;\n  }\n\n  /** Get the tuplet. */\n  getTuplet(): Tuplet | undefined {\n    return this.tuplet;\n  }\n\n  /** Return the intrinsic ticks. */\n  getTupletStack(): Tuplet[] {\n    return this.tupletStack;\n  }\n\n  /**\n   * Reset the specific Tuplet if this is not provided, all tuplets are reset.\n   * Remove any prior tuplets from the tick calculation and\n   * reset the intrinsic tick value.\n   */\n  resetTuplet(tuplet?: Tuplet): this {\n    let noteCount;\n    let notesOccupied;\n    if (tuplet) {\n      const i = this.tupletStack.indexOf(tuplet);\n      if (i !== -1) {\n        this.tupletStack.splice(i, 1);\n        noteCount = tuplet.getNoteCount();\n        notesOccupied = tuplet.getNotesOccupied();\n\n        // Revert old multiplier by inverting numerator & denom.:\n        this.applyTickMultiplier(noteCount, notesOccupied);\n      }\n      return this;\n    }\n\n    while (this.tupletStack.length) {\n      tuplet = this.tupletStack.pop() as Tuplet;\n      noteCount = tuplet.getNoteCount();\n      notesOccupied = tuplet.getNotesOccupied();\n\n      // Revert old multiplier by inverting numerator & denom.:\n      this.applyTickMultiplier(noteCount, notesOccupied);\n    }\n    return this;\n  }\n\n  /** Attach to new tuplet. */\n  setTuplet(tuplet: Tuplet): this {\n    if (tuplet) {\n      this.tupletStack.push(tuplet);\n\n      const noteCount = tuplet.getNoteCount();\n      const notesOccupied = tuplet.getNotesOccupied();\n\n      this.applyTickMultiplier(notesOccupied, noteCount);\n    }\n\n    this.tuplet = tuplet;\n\n    return this;\n  }\n\n  /**\n   * Add self to the provided ModifierContext `mc`.\n   * If this tickable has modifiers, set modifierContext.\n   * @returns this\n   */\n  addToModifierContext(mc: ModifierContext): this {\n    this.modifierContext = mc;\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addMember(this.modifiers[i]);\n    }\n    this.modifierContext.addMember(this);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Optional, if tickable has modifiers, associate a Modifier. */\n  // eslint-disable-next-line\n  addModifier(mod: Modifier, ...optionalArgs: any[]): this {\n    this.modifiers.push(mod);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the list of associated modifiers. */\n  getModifiers(): Modifier[] {\n    return this.modifiers;\n  }\n\n  /** Set the Tick Context. */\n  setTickContext(tc: TickContext): void {\n    this.tickContext = tc;\n    this.setPreFormatted(false);\n  }\n\n  checkTickContext(message = 'Tickable has no tick context.'): TickContext {\n    return defined(this.tickContext, 'NoTickContext', message);\n  }\n\n  /** Preformat the Tickable. */\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.width = 0;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      this.width += this.modifierContext.getWidth();\n    }\n  }\n\n  /** Set preformatted status. */\n  setPreFormatted(value: boolean): void {\n    this.preFormatted = value;\n  }\n\n  /** Postformat the Tickable. */\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n\n  /** Return the intrinsic ticks. */\n  getIntrinsicTicks(): number {\n    return this.intrinsicTicks;\n  }\n\n  /** Set the intrinsic ticks. */\n  setIntrinsicTicks(intrinsicTicks: number): void {\n    this.intrinsicTicks = intrinsicTicks;\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Get the tick multiplier. */\n  getTickMultiplier(): Fraction {\n    return this.tickMultiplier;\n  }\n\n  /** Apply a tick multiplier. */\n  applyTickMultiplier(numerator: number, denominator: number): void {\n    this.tickMultiplier.multiply(numerator, denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n\n  /** Set the duration. */\n  setDuration(duration: Fraction): void {\n    const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(ticks);\n    this.intrinsicTicks = this.ticks.value();\n  }\n\n  getAbsoluteX(): number {\n    const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n    return tickContext.getX();\n  }\n\n  /** Attach this note to a modifier context. */\n  setModifierContext(mc?: ModifierContext): this {\n    this.modifierContext = mc;\n    return this;\n  }\n\n  /** Get `ModifierContext`. */\n  getModifierContext(): ModifierContext | undefined {\n    return this.modifierContext;\n  }\n\n  /** Check and get `ModifierContext`. */\n  checkModifierContext(): ModifierContext {\n    return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n  }\n\n  /** Get the target stave. */\n  abstract getStave(): Stave | undefined;\n\n  /** Set the target stave. */\n  abstract setStave(stave: Stave): this;\n\n  // eslint-disable-next-line\n  abstract getMetrics(): any;\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Beam } from './beam';\nimport { Fraction } from './fraction';\nimport { GlyphProps } from './glyph';\nimport { Modifier } from './modifier';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Stroke } from './strokes';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { TickContext } from './tickcontext';\nimport { KeyProps } from './types/common';\nimport { defined, drawDot, RuntimeError } from './util';\nimport { Voice } from './voice';\n\nexport interface NoteMetrics {\n  /** The total width of the note (including modifiers). */\n  width: number;\n  glyphWidth?: number;\n  /** The width of the note head only. */\n  notePx: number;\n  /** Start `X` for left modifiers. */\n  modLeftPx: number;\n  /** Start `X` for right modifiers. */\n  modRightPx: number;\n  /** Extra space on left of note. */\n  leftDisplacedHeadPx: number;\n  glyphPx: number;\n  /** Extra space on right of note. */\n  rightDisplacedHeadPx: number;\n}\n\nexport interface NoteDuration {\n  duration: string;\n  dots: number;\n  type: string;\n}\n\nexport interface ParsedNote {\n  duration: string;\n  type: string;\n  customTypes: string[];\n  dots: number;\n  ticks: number;\n}\n\nexport interface NoteStruct {\n  /** Array of pitches, e.g: `['c/4', 'e/4', 'g/4']` */\n  keys?: string[];\n  /** The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.). */\n  duration?: string;\n  line?: number;\n  /** The number of dots, which affects the duration. */\n  dots?: number;\n  /** The note type (e.g., `r` for rest, `s` for slash notes, etc.). */\n  type?: string;\n  align_center?: boolean;\n  duration_override?: Fraction;\n}\n\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport abstract class Note extends Tickable {\n  static get CATEGORY(): string {\n    return 'Note';\n  }\n\n  keys: string[];\n  keyProps: KeyProps[];\n\n  protected stave?: Stave;\n  public render_options: {\n    draw_stem_through_stave?: boolean;\n    draw_dots?: boolean;\n    draw_stem?: boolean;\n    y_shift: number;\n    extend_left?: number;\n    extend_right?: number;\n    glyph_font_scale: number;\n    annotation_spacing: number;\n    glyph_font_size?: number;\n    scale: number;\n    font: string;\n    stroke_px: number;\n  };\n  protected duration: string;\n  protected dots: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected noteType: string;\n  protected customGlyphs: GlyphProps[];\n  protected ys: number[];\n  // eslint-disable-next-line\n  protected glyph?: any;\n  protected customTypes: string[];\n  protected playNote?: Note;\n  protected beam?: Beam;\n\n  /** Debug helper. Displays various note metrics for the given note. */\n  static plotMetrics(ctx: RenderContext, note: Tickable, yPos: number): void {\n    const metrics = note.getMetrics();\n    const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n    const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n    const xAbs = note.getAbsoluteX();\n    const xPost1 = note.getAbsoluteX() + metrics.notePx;\n    const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n    const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n    const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);\n\n    const xWidth = xEnd - xStart;\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n    ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n\n    const y = yPos + 7;\n    function stroke(x1: number, x2: number, color: string, yy: number = y) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(3);\n      ctx.moveTo(x1 + note.getXShift(), yy);\n      ctx.lineTo(x2 + note.getXShift(), yy);\n      ctx.stroke();\n    }\n\n    stroke(xStart, xPre1, 'red');\n    stroke(xPre1, xAbs, '#999');\n    stroke(xAbs, xPost1, 'green');\n    stroke(xPost1, xPost2, '#999');\n    stroke(xPost2, xEnd, 'red');\n    stroke(xEnd, xFreedomRight, '#DD0');\n    stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n    drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n\n    const formatterMetrics = note.getFormatterMetrics();\n    if (formatterMetrics.iterations > 0) {\n      const spaceDeviation = formatterMetrics.space.deviation;\n      const prefix = spaceDeviation >= 0 ? '+' : '';\n      ctx.setFillStyle('red');\n      ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n    }\n    ctx.restore();\n  }\n\n  protected static parseDuration(durationString?: string): NoteDuration | undefined {\n    if (!durationString) {\n      return undefined;\n    }\n    const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n    const result = regexp.exec(durationString);\n    if (!result) {\n      return undefined;\n    }\n\n    const duration = result[1];\n    const dots = result[2].length;\n    const type = result[3] || 'n';\n\n    return { duration, dots, type };\n  }\n\n  protected static parseNoteStruct(noteStruct: NoteStruct): ParsedNote | undefined {\n    // Preserve backwards-compatibility\n    const durationProps = Note.parseDuration(noteStruct.duration);\n    if (!durationProps) {\n      return undefined;\n    }\n\n    // If specified type is invalid, return undefined\n    let type = noteStruct.type;\n    if (type && !Tables.validTypes[type]) {\n      return undefined;\n    }\n\n    // If no type specified, check duration or custom types\n    const customTypes: string[] = [];\n    if (!type) {\n      type = durationProps.type || 'n';\n\n      // If we have keys, try and check if we've got a custom glyph\n      if (noteStruct.keys !== undefined) {\n        noteStruct.keys.forEach((k, i) => {\n          const result = k.split('/');\n          // We have a custom glyph specified after the note eg. /X2\n          customTypes[i] = (result && result.length === 3 ? result[2] : type) as string;\n        });\n      }\n    }\n\n    // Calculate the tick duration of the note\n    let ticks = Tables.durationToTicks(durationProps.duration);\n    if (!ticks) {\n      return undefined;\n    }\n\n    // Are there any dots?\n    const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n    if (typeof dots !== 'number') {\n      return undefined;\n    }\n\n    // Add ticks as necessary depending on the numbr of dots\n    let currentTicks = ticks;\n    for (let i = 0; i < dots; i++) {\n      if (currentTicks <= 1) return undefined;\n\n      currentTicks = currentTicks / 2;\n      ticks += currentTicks;\n    }\n\n    return {\n      duration: durationProps.duration,\n      type,\n      customTypes,\n      dots,\n      ticks,\n    };\n  }\n\n  /**\n   * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n   * positioning and layout.\n   *\n   * @param noteStruct To create a new note you need to provide a `noteStruct`.\n   */\n  constructor(noteStruct: NoteStruct) {\n    super();\n\n    if (!noteStruct) {\n      throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n    }\n\n    /** Parses `noteStruct` and get note properties. */\n    const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n    if (!parsedNoteStruct) {\n      throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n    }\n\n    // Set note properties from parameters.\n    this.keys = noteStruct.keys || [];\n    // per-pitch properties\n    this.keyProps = [];\n\n    this.duration = parsedNoteStruct.duration;\n    this.dots = parsedNoteStruct.dots;\n    this.noteType = parsedNoteStruct.type;\n    this.customTypes = parsedNoteStruct.customTypes;\n\n    if (noteStruct.duration_override) {\n      // Custom duration\n      this.setDuration(noteStruct.duration_override);\n    } else {\n      // Default duration\n      this.setIntrinsicTicks(parsedNoteStruct.ticks);\n    }\n\n    this.modifiers = [];\n\n    // Get the glyph code for this note from the font.\n    this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n    this.customGlyphs = this.customTypes.map((t) => Tables.getGlyphProps(this.duration, t));\n\n    // Note to play for audio players.\n    this.playNote = undefined;\n\n    // Positioning contexts used by the Formatter.\n    this.ignore_ticks = false;\n\n    // Positioning variables\n    this.width = 0; // Width in pixels calculated after preFormat\n    this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n    this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n    this.x_shift = 0; // X shift from tick context X\n    this.preFormatted = false; // Is this note preFormatted?\n    this.ys = []; // list of y coordinates for each note\n    // we need to hold on to these for ties and beams.\n\n    if (noteStruct.align_center) {\n      this.setCenterAlignment(noteStruct.align_center);\n    }\n\n    // The render surface.\n    this.render_options = {\n      annotation_spacing: 5,\n      glyph_font_scale: 1,\n      stroke_px: 1,\n      scale: 1,\n      font: '',\n      y_shift: 0,\n    };\n  }\n\n  /**\n   * Get the play note, which is arbitrary data that can be used by an\n   * audio player.\n   */\n  getPlayNote(): Note | undefined {\n    return this.playNote;\n  }\n\n  /**\n   * Set the play note, which is arbitrary data that can be used by an\n   * audio player.\n   */\n  setPlayNote(note: Note): this {\n    this.playNote = note;\n    return this;\n  }\n\n  /**\n   * @returns true if this note is a type of rest.\n   *\n   * Rests don't have pitches, but take up space in the score.\n   * Subclasses should override this default implementation.\n   */\n  isRest(): boolean {\n    return false;\n  }\n\n  /** Add stroke. */\n  addStroke(index: number, stroke: Stroke): this {\n    stroke.setNote(this);\n    stroke.setIndex(index);\n    this.modifiers.push(stroke);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the target stave. */\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  /** Check and get the target stave. */\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  /** Set the target stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n    this.setContext(this.stave.getContext());\n    return this;\n  }\n\n  /** Get spacing to the left of the notes. */\n  getLeftDisplacedHeadPx(): number {\n    return this.leftDisplacedHeadPx;\n  }\n\n  /** Get spacing to the right of the notes. */\n  getRightDisplacedHeadPx(): number {\n    return this.rightDisplacedHeadPx;\n  }\n\n  /** Set spacing to the left of the notes. */\n  setLeftDisplacedHeadPx(x: number): this {\n    this.leftDisplacedHeadPx = x;\n    return this;\n  }\n\n  /** Set spacing to the right of the notes. */\n  setRightDisplacedHeadPx(x: number): this {\n    this.rightDisplacedHeadPx = x;\n    return this;\n  }\n\n  /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n  shouldIgnoreTicks(): boolean {\n    return this.ignore_ticks;\n  }\n\n  /** Get the stave line number for the note. */\n  // eslint-disable-next-line\n  getLineNumber(isTopNote?: boolean): number {\n    return 0;\n  }\n\n  /** Get the stave line number for rest. */\n  getLineForRest(): number {\n    return 0;\n  }\n\n  /** Get the glyph associated with this note. */\n  // eslint-disable-next-line\n  getGlyph(): any {\n    return this.glyph;\n  }\n\n  /** Get the glyph width. */\n  getGlyphWidth(): number {\n    // TODO: FIXME (multiple potential values for this.glyph)\n    if (this.glyph) {\n      if (this.glyph.getMetrics) {\n        return this.glyph.getMetrics().width;\n      } else if (this.glyph.getWidth) {\n        return this.glyph.getWidth(this.render_options.glyph_font_scale);\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Set Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  setYs(ys: number[]): this {\n    this.ys = ys;\n    return this;\n  }\n\n  /**\n   * Get Y positions for this note. Each Y value is associated with\n   * an individual pitch/key within the note/chord.\n   */\n  getYs(): number[] {\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n    }\n\n    return this.ys;\n  }\n\n  /**\n   * Get the Y position of the space above the stave onto which text can\n   * be rendered.\n   */\n  getYForTopText(text_line: number): number {\n    return this.checkStave().getYForTopText(text_line);\n  }\n\n  /** Return the voice that this note belongs in. */\n  getVoice(): Voice {\n    if (!this.voice) throw new RuntimeError('NoVoice', 'Note has no voice.');\n    return this.voice;\n  }\n\n  /** Attach this note to `voice`. */\n  setVoice(voice: Voice): this {\n    this.voice = voice;\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the `TickContext` for this note. */\n  getTickContext(): TickContext {\n    return this.checkTickContext();\n  }\n\n  /** Set the `TickContext` for this note. */\n  setTickContext(tc: TickContext): this {\n    this.tickContext = tc;\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Accessor to duration. */\n  getDuration(): string {\n    return this.duration;\n  }\n\n  /** Accessor to isDotted. */\n  isDotted(): boolean {\n    return this.dots > 0;\n  }\n\n  /** Accessor to hasStem. */\n  hasStem(): boolean {\n    return false;\n  }\n\n  /** Accessor to note type. */\n  getNoteType(): string {\n    return this.noteType;\n  }\n\n  /** Get the beam. */\n  getBeam(): Beam | undefined {\n    return this.beam;\n  }\n\n  /** Check and get the beam. */\n  checkBeam(): Beam {\n    return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n  }\n\n  /** Check it has a beam. */\n  hasBeam(): boolean {\n    return this.beam != undefined;\n  }\n\n  /** Set the beam. */\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    return this;\n  }\n\n  /**\n   * Attach a modifier to this note.\n   * @param modifier the Modifier to add.\n   * @param index of the key to modify.\n   * @returns this\n   */\n  addModifier(modifier: Modifier, index: number = 0): this {\n    // Legacy versions of VexFlow had the two parameters swapped.\n    // We check here and throw an error if the argument types are not correct.\n    if (typeof modifier !== 'object' || typeof index !== 'number') {\n      throw new RuntimeError(\n        'WrongParams',\n        'Call signature to addModifier not supported, use addModifier(modifier: Modifier, index) instead.'\n      );\n    }\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  /** Get the coordinates for where modifiers begin. */\n  // eslint-disable-next-line\n  getModifierStartXY(position?: number, index?: number, options?: any): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    return {\n      x: this.getAbsoluteX(),\n      y: this.ys[0],\n    };\n  }\n\n  /** Get the metrics for this note. */\n  getMetrics(): NoteMetrics {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n    }\n\n    const modLeftPx = this.modifierContext ? this.modifierContext.state.left_shift : 0;\n    const modRightPx = this.modifierContext ? this.modifierContext.state.right_shift : 0;\n    const width = this.getWidth();\n    const glyphWidth = this.getGlyphWidth();\n    const notePx =\n      width -\n      modLeftPx - // subtract left modifiers\n      modRightPx - // subtract right modifiers\n      this.leftDisplacedHeadPx - // subtract left displaced head\n      this.rightDisplacedHeadPx; // subtract right displaced head\n\n    return {\n      // ----------\n      // NOTE: If you change this, remember to update MockTickable in the tests/ directory.\n      // --------------\n      width,\n      glyphWidth,\n      notePx,\n\n      // Modifier spacing.\n      modLeftPx,\n      modRightPx,\n\n      // Displaced note head on left or right.\n      leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n      rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n      glyphPx: 0,\n    };\n  }\n\n  /**\n   * Get the absolute `X` position of this note's tick context. This\n   * excludes x_shift, so you'll need to factor it in if you're\n   * looking for the post-formatted x-position.\n   */\n  getAbsoluteX(): number {\n    const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n    // Position note to left edge of tick context.\n    let x = tickContext.getX();\n    if (this.stave) {\n      x += this.stave.getNoteStartX() + this.musicFont.lookupMetric('stave.padding');\n    }\n    if (this.isCenterAligned()) {\n      x += this.getCenterXShift();\n    }\n    return x;\n  }\n\n  /** Get the direction of the stem. */\n  getStemDirection(): number {\n    throw new RuntimeError('NoStem', 'No stem attached to this note.');\n  }\n\n  /** Get the top and bottom `y` values of the stem. */\n  getStemExtents(): Record<string, number> {\n    throw new RuntimeError('NoStem', 'No stem attached to this note.');\n  }\n\n  /** Get the `x` coordinate to the right of the note. */\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieStartX += note_glyph_width / 2;\n    tieStartX += -this.width / 2 + this.width + 2;\n\n    return tieStartX;\n  }\n\n  /** Get the `x` coordinate to the left of the note. */\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieEndX += note_glyph_width / 2;\n    tieEndX -= this.width / 2 + 2;\n\n    return tieEndX;\n  }\n\n  // Get the pitches in the note\n  getKeys(): string[] {\n    return this.keys;\n  }\n\n  // Get the properties for all the keys in the note\n  getKeyProps(): KeyProps[] {\n    return this.keyProps;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\n\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { log, RuntimeError } from './util';\n\n// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Stem.DEBUG) log('Vex.Flow.Stem', args);\n}\n\nexport interface StemOptions {\n  stem_down_y_base_offset?: number;\n  stem_up_y_base_offset?: number;\n  stem_down_y_offset?: number;\n  stem_up_y_offset?: number;\n  stemletHeight?: number;\n  isStemlet?: boolean;\n  hide?: boolean;\n  stem_direction?: number;\n  stem_extension?: number;\n  y_bottom?: number;\n  y_top?: number;\n  x_end?: number;\n  x_begin?: number;\n}\n\nexport class Stem extends Element {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'Stem';\n  }\n\n  // Stem directions\n  static get UP(): number {\n    return 1;\n  }\n  static get DOWN(): number {\n    return -1;\n  }\n\n  // Theme\n  static get WIDTH(): number {\n    return Tables.STEM_WIDTH;\n  }\n  static get HEIGHT(): number {\n    return Tables.STEM_HEIGHT;\n  }\n\n  protected hide: boolean;\n  protected isStemlet: boolean;\n  protected stemletHeight: number;\n  protected x_begin: number;\n  protected x_end: number;\n  protected y_top: number;\n  protected stem_up_y_offset: number = 0;\n  protected y_bottom: number;\n  protected stem_down_y_offset: number = 0;\n  protected stem_up_y_base_offset: number = 0;\n  protected stem_down_y_base_offset: number = 0;\n  protected stem_direction: number;\n  protected stem_extension: number;\n  protected renderHeightAdjustment: number;\n\n  constructor(options?: StemOptions) {\n    super();\n\n    // Default notehead x bounds\n    this.x_begin = options?.x_begin || 0;\n    this.x_end = options?.x_end || 0;\n\n    // Y bounds for top/bottom most notehead\n    this.y_top = options?.y_top || 0;\n    this.y_bottom = options?.y_bottom || 0;\n\n    // Stem top extension\n    this.stem_extension = options?.stem_extension || 0;\n\n    // Direction of the stem\n    this.stem_direction = options?.stem_direction || 0;\n\n    // Flag to override all draw calls\n    this.hide = options?.hide || false;\n\n    this.isStemlet = options?.isStemlet || false;\n    this.stemletHeight = options?.stemletHeight || 0;\n\n    // Use to adjust the rendered height without affecting\n    // the results of `.getExtents()`\n    this.renderHeightAdjustment = 0;\n    this.setOptions(options);\n  }\n\n  setOptions(options?: StemOptions): void {\n    // Changing where the stem meets the head\n    this.stem_up_y_offset = options?.stem_up_y_offset || 0;\n    this.stem_down_y_offset = options?.stem_down_y_offset || 0;\n    this.stem_up_y_base_offset = options?.stem_up_y_base_offset || 0;\n    this.stem_down_y_base_offset = options?.stem_down_y_base_offset || 0;\n  }\n\n  // Set the x bounds for the default notehead\n  setNoteHeadXBounds(x_begin: number, x_end: number): this {\n    this.x_begin = x_begin;\n    this.x_end = x_end;\n    return this;\n  }\n\n  // Set the direction of the stem in relation to the noteheads\n  setDirection(direction: number): void {\n    this.stem_direction = direction;\n  }\n\n  // Set the extension for the stem, generally for flags or beams\n  setExtension(ext: number): void {\n    this.stem_extension = ext;\n  }\n\n  getExtension(): number {\n    return this.stem_extension;\n  }\n\n  // The the y bounds for the top and bottom noteheads\n  setYBounds(y_top: number, y_bottom: number): void {\n    this.y_top = y_top;\n    this.y_bottom = y_bottom;\n  }\n\n  // Gets the entire height for the stem\n  getHeight(): number {\n    const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;\n    const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension); // parentheses just for grouping.\n    return unsigned_height * this.stem_direction;\n  }\n\n  getBoundingBox(): BoundingBox {\n    throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n  }\n\n  // Get the y coordinates for the very base of the stem to the top of\n  // the extension\n  getExtents(): Record<string, number> {\n    const isStemUp = this.stem_direction === Stem.UP;\n    const ys = [this.y_top, this.y_bottom];\n    const stemHeight = Stem.HEIGHT + this.stem_extension;\n\n    const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n    const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n    const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n\n    return { topY: stemTipY, baseY: outerMostNoteheadY };\n  }\n\n  setVisibility(isVisible: boolean): this {\n    this.hide = !isVisible;\n    return this;\n  }\n\n  setStemlet(isStemlet: boolean, stemletHeight: number): this {\n    this.isStemlet = isStemlet;\n    this.stemletHeight = stemletHeight;\n    return this;\n  }\n\n  adjustHeightForFlag(): void {\n    this.renderHeightAdjustment = this.musicFont.lookupMetric('stem.heightAdjustmentForFlag', -3);\n  }\n\n  adjustHeightForBeam(): void {\n    this.renderHeightAdjustment = -Stem.WIDTH / 2;\n  }\n\n  // Render the stem onto the canvas\n  draw(): void {\n    this.setRendered();\n    if (this.hide) return;\n    const ctx = this.checkContext();\n\n    let stem_x;\n    let stem_y;\n    const stem_direction = this.stem_direction;\n\n    let y_base_offset: number = 0;\n    if (stem_direction === Stem.DOWN) {\n      // Down stems are rendered to the left of the head.\n      stem_x = this.x_begin;\n      stem_y = this.y_top + this.stem_down_y_offset;\n      y_base_offset = this.stem_down_y_base_offset;\n    } else {\n      // Up stems are rendered to the right of the head.\n      stem_x = this.x_end;\n      stem_y = this.y_bottom - this.stem_up_y_offset;\n      y_base_offset = this.stem_up_y_base_offset;\n    }\n\n    const stemHeight = this.getHeight();\n\n    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n\n    // The offset from the stem's base which is required fo satisfy the stemlet height\n    const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\n\n    // Draw the stem\n    ctx.save();\n    this.applyStyle(ctx);\n    ctx.beginPath();\n    ctx.setLineWidth(Stem.WIDTH);\n    ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n    ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n    ctx.stroke();\n    this.restoreStyle(ctx);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { ElementStyle } from './element';\nimport { Glyph, GlyphProps } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { defined, log, RuntimeError } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (NoteHead.DEBUG) log('Vex.Flow.NoteHead', args);\n}\n\nexport interface NoteHeadStruct extends NoteStruct {\n  line?: number;\n  glyph_font_scale?: number;\n  slashed?: boolean;\n  style?: ElementStyle;\n  stem_down_x_offset?: number;\n  stem_up_x_offset?: number;\n  custom_glyph_code?: string;\n  x_shift?: number;\n  stem_direction?: number;\n  displaced?: boolean;\n  note_type?: string;\n  x?: number;\n  y?: number;\n  index?: number;\n}\n\n/**\n * Draw slashnote head manually. No glyph exists for this.\n * @param ctx the Canvas context\n * @param duration the duration of the note. ex: \"4\"\n * @param x the x coordinate to draw at\n * @param y the y coordinate to draw at\n * @param stem_direction the direction of the stem\n */\nfunction drawSlashNoteHead(\n  ctx: RenderContext,\n  duration: string,\n  x: number,\n  y: number,\n  stem_direction: number,\n  staveSpace: number\n) {\n  const width = Tables.SLASH_NOTEHEAD_WIDTH;\n  ctx.save();\n  ctx.setLineWidth(Tables.STEM_WIDTH);\n\n  let fill = false;\n\n  if (Tables.durationToNumber(duration) > 2) {\n    fill = true;\n  }\n\n  if (!fill) x -= (Tables.STEM_WIDTH / 2) * stem_direction;\n\n  ctx.beginPath();\n  ctx.moveTo(x, y + staveSpace);\n  ctx.lineTo(x, y + 1);\n  ctx.lineTo(x + width, y - staveSpace);\n  ctx.lineTo(x + width, y);\n  ctx.lineTo(x, y + staveSpace);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n\n  if (Tables.durationToFraction(duration).equals(0.5)) {\n    const breve_lines = [-3, -1, width + 1, width + 3];\n    for (let i = 0; i < breve_lines.length; i++) {\n      ctx.beginPath();\n      ctx.moveTo(x + breve_lines[i], y - 10);\n      ctx.lineTo(x + breve_lines[i], y + 11);\n      ctx.stroke();\n    }\n  }\n\n  ctx.restore();\n}\n\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'NoteHead';\n  }\n\n  glyph_code: string;\n\n  protected custom_glyph: boolean = false;\n  protected stem_up_x_offset: number = 0;\n  protected stem_down_x_offset: number = 0;\n  protected displaced: boolean;\n  protected stem_direction: number;\n\n  protected x: number;\n  protected y: number;\n  protected line: number;\n  protected index?: number;\n  protected slashed: boolean;\n\n  constructor(noteStruct: NoteHeadStruct) {\n    super(noteStruct);\n\n    this.index = noteStruct.index;\n    this.x = noteStruct.x || 0;\n    this.y = noteStruct.y || 0;\n    if (noteStruct.note_type) this.noteType = noteStruct.note_type;\n    this.displaced = noteStruct.displaced || false;\n    this.stem_direction = noteStruct.stem_direction || Stem.UP;\n    this.line = noteStruct.line || 0;\n\n    // Get glyph code based on duration and note type. This could be\n    // regular notes, rests, or other custom codes.\n    this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    this.glyph_code = this.glyph.code_head;\n    this.x_shift = noteStruct.x_shift || 0;\n    if (noteStruct.custom_glyph_code) {\n      this.custom_glyph = true;\n      this.glyph_code = noteStruct.custom_glyph_code;\n      this.stem_up_x_offset = noteStruct.stem_up_x_offset || 0;\n      this.stem_down_x_offset = noteStruct.stem_down_x_offset || 0;\n    }\n\n    this.style = noteStruct.style;\n    this.slashed = noteStruct.slashed || false;\n\n    this.render_options = {\n      ...this.render_options,\n      // font size for note heads\n      glyph_font_scale: noteStruct.glyph_font_scale || Tables.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: 3,\n    };\n\n    this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));\n  }\n\n  /** Get the width of the notehead. */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /** Determine if the notehead is displaced. */\n  isDisplaced(): boolean {\n    return this.displaced === true;\n  }\n\n  /** Get the glyph data. */\n  getGlyph(): GlyphProps {\n    return this.glyph;\n  }\n\n  /** Set the X coordinate. */\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  /** Get the Y coordinate. */\n  getY(): number {\n    return this.y;\n  }\n\n  /** Set the Y coordinate. */\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  /** Get the stave line the notehead is placed on. */\n  getLine(): number {\n    return this.line;\n  }\n\n  /** Set the stave line the notehead is placed on. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Get the canvas `x` coordinate position of the notehead. */\n  getAbsoluteX(): number {\n    // If the note has not been preformatted, then get the static x value\n    // Otherwise, it's been formatted and we should use it's x value relative\n    // to its tick context\n    const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n\n    // For a more natural displaced notehead, we adjust the displacement amount\n    // by half the stem width in order to maintain a slight overlap with the stem\n    const displacementStemAdjustment = Stem.WIDTH / 2;\n    const fontShift = this.musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\n    const displacedFontShift = this.musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;\n\n    return (\n      x +\n      fontShift +\n      (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0)\n    );\n  }\n\n  /** Get the `BoundingBox` for the `NoteHead`. */\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n    const spacing = this.checkStave().getSpacingBetweenLines();\n    const half_spacing = spacing / 2;\n    const min_y = this.y - half_spacing;\n\n    return new BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n  }\n\n  /** Set notehead to a provided `stave`. */\n  setStave(stave: Stave): this {\n    const line = this.getLine();\n\n    this.stave = stave;\n    if (this.stave) {\n      this.setY(this.stave.getYForNote(line));\n      this.setContext(this.stave.getContext());\n    }\n    return this;\n  }\n\n  /** Pre-render formatting. */\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Draw the notehead. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let head_x = this.getAbsoluteX();\n    if (this.custom_glyph) {\n      // head_x += this.x_shift;\n      head_x += this.stem_direction === Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;\n    }\n\n    const y = this.y;\n\n    L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", head_x, y);\n\n    // Begin and end positions for head.\n    const stem_direction = this.stem_direction;\n    const glyph_font_scale = this.render_options.glyph_font_scale;\n\n    if (this.style) {\n      this.applyStyle(ctx);\n    }\n\n    const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\n    if (this.noteType === 's') {\n      const staveSpace = this.checkStave().getSpacingBetweenLines();\n      drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n    } else {\n      Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\n        font: this.musicFont,\n        category: this.custom_glyph ? `noteHead.custom.${categorySuffix}` : `noteHead.standard.${categorySuffix}`,\n      });\n    }\n\n    if (this.style) {\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\n\nimport { Glyph } from './glyph';\nimport { GlyphProps } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { Stem, StemOptions } from './stem';\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n\nexport abstract class StemmableNote extends Note {\n  static get CATEGORY(): string {\n    return 'StemmableNote';\n  }\n\n  stem_direction?: number;\n  stem?: Stem;\n\n  protected flag?: Glyph;\n  protected stem_extension_override?: number;\n\n  constructor(noteStruct: NoteStruct) {\n    super(noteStruct);\n  }\n\n  // Get and set the note's `Stem`\n  getStem(): Stem | undefined {\n    return this.stem;\n  }\n\n  checkStem(): Stem {\n    if (!this.stem) {\n      throw new RuntimeError('NoStem', 'No stem attached to instance');\n    }\n    return this.stem;\n  }\n\n  setStem(stem: Stem): this {\n    this.stem = stem;\n    return this;\n  }\n\n  // Builds and sets a new stem\n  buildStem(): this {\n    const stem = new Stem();\n    this.setStem(stem);\n    return this;\n  }\n\n  buildFlag(category = 'flag'): void {\n    const { glyph } = this;\n\n    if (this.hasFlag()) {\n      const flagCode = this.getStemDirection() === Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;\n\n      this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\n    }\n  }\n\n  // Get the custom glyph associated with the outer note head on the base of the stem.\n  getBaseCustomNoteHeadGlyph(): GlyphProps {\n    if (this.getStemDirection() === Stem.DOWN) {\n      return this.customGlyphs[this.customGlyphs.length - 1];\n    } else {\n      return this.customGlyphs[0];\n    }\n  }\n\n  // Get the full length of stem\n  getStemLength(): number {\n    return Stem.HEIGHT + this.getStemExtension();\n  }\n\n  // Get the number of beams for this duration\n  getBeamCount(): number {\n    const glyph = this.getGlyph();\n\n    if (glyph) {\n      return glyph.beam_count;\n    } else {\n      return 0;\n    }\n  }\n\n  // Get the minimum length of stem\n  getStemMinimumLength(): number {\n    const frac = Tables.durationToFraction(this.duration);\n    let length = frac.value() <= 1 ? 0 : 20;\n    // if note is flagged, cannot shorten beam\n    switch (this.duration) {\n      case '8':\n        if (this.beam == undefined) length = 35;\n        break;\n      case '16':\n        length = this.beam == undefined ? 35 : 25;\n        break;\n      case '32':\n        length = this.beam == undefined ? 45 : 35;\n        break;\n      case '64':\n        length = this.beam == undefined ? 50 : 40;\n        break;\n      case '128':\n        length = this.beam == undefined ? 55 : 45;\n        break;\n      default:\n        break;\n    }\n    return length;\n  }\n\n  // Get/set the direction of the stem\n  getStemDirection(): number {\n    if (!this.stem_direction) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem_direction;\n  }\n\n  setStemDirection(direction?: number): this {\n    if (!direction) direction = Stem.UP;\n    if (direction !== Stem.UP && direction !== Stem.DOWN) {\n      throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n    }\n\n    this.stem_direction = direction;\n\n    if (this.stem) {\n      this.stem.setDirection(direction);\n      this.stem.setExtension(this.getStemExtension());\n\n      // Lookup the base custom notehead (closest to the base of the stem) to extend or shorten\n      // the stem appropriately. If there's no custom note head, lookup the standard notehead.\n      const glyph = this.getBaseCustomNoteHeadGlyph() || this.getGlyph();\n\n      // Get the font-specific customizations for the note heads.\n      const offsets = this.musicFont.lookupMetric(`stem.noteHead.${glyph.code_head}`, {\n        offsetYBaseStemUp: 0,\n        offsetYTopStemUp: 0,\n        offsetYBaseStemDown: 0,\n        offsetYTopStemDown: 0,\n      });\n\n      // Configure the stem to use these offsets.\n      this.stem.setOptions({\n        stem_up_y_offset: offsets.offsetYTopStemUp, // glyph.stem_up_y_offset,\n        stem_down_y_offset: offsets.offsetYTopStemDown, // glyph.stem_down_y_offset,\n        stem_up_y_base_offset: offsets.offsetYBaseStemUp, // glyph.stem_up_y_base_offset,\n        stem_down_y_base_offset: offsets.offsetYBaseStemDown, // glyph.stem_down_y_base_offset,\n      });\n    }\n\n    // Reset and reformat everything.\n    this.reset();\n    if (this.hasFlag()) {\n      this.buildFlag();\n    }\n    this.beam = undefined;\n    if (this.preFormatted) {\n      this.preFormat();\n    }\n    return this;\n  }\n\n  // Get the `x` coordinate of the stem\n  getStemX(): number {\n    const x_begin = this.getAbsoluteX() + this.x_shift;\n    const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n    const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n    return stem_x;\n  }\n\n  // Get the `x` coordinate for the center of the glyph.\n  // Used for `TabNote` stems and stemlets over rests\n  getCenterGlyphX(): number {\n    return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n  }\n\n  // Get the stem extension for the current duration\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != undefined) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === Stem.UP ? glyph.stem_up_extension : glyph.stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Set the stem length to a specific. Will override the default length.\n  setStemLength(height: number): this {\n    this.stem_extension_override = height - Stem.HEIGHT;\n    return this;\n  }\n\n  // Get the top and bottom `y` values of the stem.\n  getStemExtents(): Record<string, number> {\n    if (!this.stem) throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    return this.stem.getExtents();\n  }\n\n  /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n  getYForTopText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n\n      return Math.min(\n        stave.getYForTopText(textLine),\n        extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n      );\n    } else {\n      return stave.getYForTopText(textLine);\n    }\n  }\n\n  /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n  getYForBottomText(textLine: number): number {\n    const stave = this.checkStave();\n    if (this.hasStem()) {\n      const extents = this.getStemExtents();\n      if (!extents) throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n\n      return Math.max(\n        stave.getYForTopText(textLine),\n        extents.baseY + this.render_options.annotation_spacing * textLine\n      );\n    } else {\n      return stave.getYForBottomText(textLine);\n    }\n  }\n\n  hasFlag(): boolean {\n    return Tables.getGlyphProps(this.duration).flag && !this.beam;\n  }\n\n  /** Post formats the note. */\n  postFormat(): this {\n    this.beam?.postFormat();\n    this.postFormatted = true;\n\n    return this;\n  }\n\n  /** Renders the stem onto the canvas. */\n  drawStem(stemOptions: StemOptions): void {\n    this.checkContext();\n    this.setRendered();\n\n    this.setStem(new Stem(stemOptions));\n    this.stem?.setContext(this.getContext()).draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// *Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.*\n//\n// See `tests/stavenote_tests.ts` for usage examples.\n\nimport { Accidental } from './accidental';\nimport { Beam } from './beam';\nimport { BoundingBox } from './boundingbox';\nimport { Dot } from './dot';\nimport { ElementStyle } from './element';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note, NoteStruct } from './note';\nimport { NoteHead } from './notehead';\nimport { Stave } from './stave';\nimport { Stem } from './stem';\nimport { StemOptions } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { defined, log, midLine, RuntimeError, warn } from './util';\n\nexport interface StaveNoteHeadBounds {\n  y_top: number;\n  y_bottom: number;\n  displaced_x?: number;\n  non_displaced_x?: number;\n  highest_line: number;\n  lowest_line: number;\n  highest_displaced_line?: number;\n  lowest_displaced_line?: number;\n  highest_non_displaced_line: number;\n  lowest_non_displaced_line: number;\n}\n\nexport interface StaveNoteFormatSettings {\n  line: number;\n  maxLine: number;\n  minLine: number;\n  isrest: boolean;\n  stemDirection?: number;\n  stemMax: number;\n  stemMin: number;\n  voice_shift: number;\n  is_displaced: boolean;\n  note: StaveNote;\n}\n\nexport interface StaveNoteStruct extends NoteStruct {\n  /** `Stem.UP` or `Stem.DOWN`. */\n  stem_direction?: number;\n  auto_stem?: boolean;\n  stem_down_x_offset?: number;\n  stem_up_x_offset?: number;\n  stroke_px?: number;\n  glyph_font_scale?: number;\n  octave_shift?: number;\n  clef?: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (StaveNote.DEBUG) log('Vex.Flow.StaveNote', args);\n}\n\nconst isInnerNoteIndex = (note: StaveNote, index: number) =>\n  index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest: StaveNoteFormatSettings, note: StaveNoteFormatSettings, dir: number) {\n  const delta = (note.isrest ? 0.0 : 1.0) * dir;\n\n  rest.line += delta;\n  rest.maxLine += delta;\n  rest.minLine += delta;\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest: StaveNoteFormatSettings, noteU: StaveNoteFormatSettings, noteL: StaveNoteFormatSettings) {\n  const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n  rest.line -= delta;\n  rest.maxLine -= delta;\n  rest.minLine -= delta;\n}\n\nexport class StaveNote extends StemmableNote {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'StaveNote';\n  }\n\n  /**\n   * @deprecated Use Stem.UP.\n   */\n  static get STEM_UP(): number {\n    return Stem.UP;\n  }\n\n  /**\n   * @deprecated Use Stem.DOWN.\n   */\n  static get STEM_DOWN(): number {\n    return Stem.DOWN;\n  }\n\n  static get DEFAULT_LEDGER_LINE_OFFSET(): number {\n    return 3;\n  }\n\n  static get minNoteheadPadding(): number {\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('glyphs.noteHead.minPadding');\n  }\n\n  minLine: number = 0;\n  maxLine: number = 0;\n\n  protected readonly clef: string;\n  protected readonly octave_shift?: number;\n\n  protected displaced: boolean;\n  protected dot_shiftY: number;\n  protected use_default_head_x: boolean;\n  protected note_heads: NoteHead[];\n  protected ledgerLineStyle: ElementStyle;\n  protected flagStyle?: ElementStyle;\n\n  // ## Static Methods\n  //\n  // Format notes inside a ModifierContext.\n  static format(notes: StaveNote[], state: ModifierContextState): boolean {\n    if (!notes || notes.length < 2) return false;\n\n    // FIXME: VexFlow will soon require that a stave be set before formatting.\n    // Which, according to the below condition, means that following branch will\n    // always be taken and the rest of this function is dead code.\n    //\n    // Problematically, `Formatter#formatByY` was not designed to work for more\n    // than 2 voices (although, doesn't throw on this condition, just tries\n    // to power through).\n    //\n    // Based on the above:\n    //   * 2 voices can be formatted *with or without* a stave being set but\n    //     the output will be different\n    //   * 3 voices can only be formatted *without* a stave\n    if (notes[0].getStave()) {\n      StaveNote.formatByY(notes, state);\n      return true;\n    }\n\n    const notesList: StaveNoteFormatSettings[] = [];\n\n    for (let i = 0; i < notes.length; i++) {\n      const props = notes[i].getKeyProps();\n      const line = props[0].line;\n      let minL = props[props.length - 1].line;\n      const stemDirection = notes[i].getStemDirection();\n      const stemMax = notes[i].getStemLength() / 10;\n      const stemMin = notes[i].getStemMinimumLength() / 10;\n\n      let maxL;\n      if (notes[i].isRest()) {\n        maxL = line + notes[i].glyph.line_above;\n        minL = line - notes[i].glyph.line_below;\n      } else {\n        maxL = stemDirection === 1 ? props[props.length - 1].line + stemMax : props[props.length - 1].line;\n\n        minL = stemDirection === 1 ? props[0].line : props[0].line - stemMax;\n      }\n\n      notesList.push({\n        line: props[0].line, // note/rest base line\n        maxLine: maxL, // note/rest upper bounds line\n        minLine: minL, // note/rest lower bounds line\n        isrest: notes[i].isRest(),\n        stemDirection: stemDirection,\n        stemMax, // Maximum (default) note stem length;\n        stemMin, // minimum note stem length\n        voice_shift: notes[i].getVoiceShiftWidth(),\n        is_displaced: notes[i].isDisplaced(), // note manually displaced\n        note: notes[i],\n      });\n    }\n\n    const voices = notesList.length;\n\n    let noteU = notesList[0];\n    const noteM = voices > 2 ? notesList[1] : undefined;\n    let noteL = voices > 2 ? notesList[2] : notesList[1];\n\n    // for two voice backward compatibility, ensure upper voice is stems up\n    // for three voices, the voices must be in order (upper, middle, lower)\n    if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n      noteU = notesList[1];\n      noteL = notesList[0];\n    }\n\n    const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n    let xShift = 0;\n    let stemDelta;\n\n    // Test for two voice note intersection\n    if (voices === 2) {\n      const lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n      // if top voice is a middle voice, check stem intersection with lower voice\n      if (noteU.stemDirection === noteL.stemDirection && noteU.minLine <= noteL.maxLine) {\n        if (!noteU.isrest) {\n          stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));\n          stemDelta = Math.max(stemDelta, noteU.stemMin);\n          noteU.minLine = noteU.line - stemDelta;\n          noteU.note.setStemLength(stemDelta * 10);\n        }\n      }\n      if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n        if (noteU.isrest) {\n          // shift rest up\n          shiftRestVertical(noteU, noteL, 1);\n        } else if (noteL.isrest) {\n          // shift rest down\n          shiftRestVertical(noteL, noteU, -1);\n        } else {\n          xShift = voiceXShift;\n          if (noteU.stemDirection === noteL.stemDirection) {\n            // upper voice is middle voice, so shift it right\n            noteU.note.setXShift(xShift + 3);\n          } else {\n            // shift lower voice right\n            noteL.note.setXShift(xShift);\n          }\n        }\n      }\n\n      // format complete\n      return true;\n    }\n\n    if (!noteM) throw new RuntimeError('InvalidState', 'noteM not defined.');\n\n    // Check middle voice stem intersection with lower voice\n    if (noteM.minLine < noteL.maxLine + 0.5) {\n      if (!noteM.isrest) {\n        stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));\n        stemDelta = Math.max(stemDelta, noteM.stemMin);\n        noteM.minLine = noteM.line - stemDelta;\n        noteM.note.setStemLength(stemDelta * 10);\n      }\n    }\n\n    // For three voices, test if rests can be repositioned\n    //\n    // Special case 1 :: middle voice rest between two notes\n    //\n    if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n      if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n        const restHeight = noteM.maxLine - noteM.minLine;\n        const space = noteU.minLine - noteL.maxLine;\n        if (restHeight < space) {\n          // center middle voice rest between the upper and lower voices\n          centerRest(noteM, noteU, noteL);\n        } else {\n          xShift = voiceXShift + 3; // shift middle rest right\n          noteM.note.setXShift(xShift);\n        }\n        // format complete\n        return true;\n      }\n    }\n\n    // Special case 2 :: all voices are rests\n    if (noteU.isrest && noteM.isrest && noteL.isrest) {\n      // Shift upper voice rest up\n      shiftRestVertical(noteU, noteM, 1);\n      // Shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n      // format complete\n      return true;\n    }\n\n    // Test if any other rests can be repositioned\n    if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n      // Shift middle voice rest up\n      shiftRestVertical(noteM, noteL, 1);\n    }\n    if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n      // Shift middle voice rest down\n      shiftRestVertical(noteM, noteU, -1);\n    }\n    if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n      // shift upper voice rest up;\n      shiftRestVertical(noteU, noteM, 1);\n    }\n    if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n      // shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n    }\n\n    // If middle voice intersects upper or lower voice\n    if (\n      (!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5) ||\n      (!noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine)\n    ) {\n      xShift = voiceXShift + 3; // shift middle note right\n      noteM.note.setXShift(xShift);\n    }\n\n    return true;\n  }\n\n  static formatByY(notes: StaveNote[], state: ModifierContextState): void {\n    // NOTE: this function does not support more than two voices per stave. Use with care.\n\n    let hasStave = true;\n    for (let i = 0; i < notes.length; i++) {\n      hasStave = hasStave && notes[i].getStave() != undefined;\n    }\n    if (!hasStave) {\n      throw new RuntimeError('NoStave', 'All notes must have a stave.');\n    }\n\n    let xShift = 0;\n\n    for (let i = 0; i < notes.length - 1; i++) {\n      let topNote = notes[i];\n      let bottomNote = notes[i + 1];\n\n      if (topNote.getStemDirection() === Stem.DOWN) {\n        topNote = notes[i + 1];\n        bottomNote = notes[i];\n      }\n\n      const topKeys = topNote.getKeyProps();\n      const bottomKeys = bottomNote.getKeyProps();\n\n      const HALF_NOTEHEAD_HEIGHT = 0.5;\n\n      // `keyProps` and `stave.getYForLine` have different notions of a `line`\n      // so we have to convert the keyProps value by subtracting 5.\n      // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas\n      //\n      // We also extend the y for each note by a half notehead because the\n      // notehead's origin is centered\n      const topStave = topNote.checkStave();\n      const topNoteBottomY = topStave.getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);\n\n      const bottomStave = bottomNote.checkStave();\n      const bottomNoteTopY = bottomStave.getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);\n\n      const areNotesColliding =\n        bottomNoteTopY != undefined && topNoteBottomY != undefined ? bottomNoteTopY - topNoteBottomY < 0 : false;\n\n      if (areNotesColliding) {\n        xShift = topNote.getVoiceShiftWidth() + 2;\n        bottomNote.setXShift(xShift);\n      }\n    }\n\n    state.right_shift += xShift;\n  }\n\n  static postFormat(notes: Note[]): boolean {\n    if (!notes) return false;\n\n    notes.forEach((note) => note.postFormat());\n\n    return true;\n  }\n\n  constructor(noteStruct: StaveNoteStruct) {\n    super(noteStruct);\n\n    this.ledgerLineStyle = {};\n\n    this.clef = noteStruct.clef ?? 'treble';\n    this.octave_shift = noteStruct.octave_shift ?? 0;\n\n    // Pull note rendering properties.\n    this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    // if true, displace note to right\n    this.displaced = false;\n    this.dot_shiftY = 0;\n    // for displaced ledger lines\n    this.use_default_head_x = false;\n\n    // Drawing\n    this.note_heads = [];\n    this.modifiers = [];\n    this.ledgerLineStyle = {};\n\n    this.render_options = {\n      ...this.render_options,\n      // font size for note heads and rests\n      glyph_font_scale: noteStruct.glyph_font_scale || Tables.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET,\n    };\n\n    this.calculateKeyProps();\n    this.buildStem();\n\n    // Set the stem direction\n    if (noteStruct.auto_stem) {\n      this.autoStem();\n    } else {\n      this.setStemDirection(noteStruct.stem_direction ?? Stem.UP);\n    }\n    this.reset();\n    this.buildFlag();\n  }\n\n  reset(): this {\n    super.reset();\n\n    // Save prior noteHead styles & reapply them after making new noteheads.\n    const noteHeadStyles = this.note_heads.map((noteHead) => noteHead.getStyle());\n    this.buildNoteHeads();\n    this.note_heads.forEach((noteHead, index) => {\n      const noteHeadStyle = noteHeadStyles[index];\n      if (noteHeadStyle) noteHead.setStyle(noteHeadStyle);\n    });\n\n    const stave = this.stave;\n    if (stave) {\n      this.note_heads.forEach((head) => head.setStave(stave));\n    }\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  setBeam(beam: Beam): this {\n    this.beam = beam;\n    this.calcNoteDisplacements();\n    return this;\n  }\n\n  // Builds a `Stem` for the note\n  buildStem(): this {\n    this.setStem(new Stem({ hide: !!this.isRest() }));\n    return this;\n  }\n\n  // Builds a `NoteHead` for each key in the note\n  buildNoteHeads(): void {\n    this.note_heads = [];\n    const stemDirection = this.getStemDirection();\n    const keys = this.getKeys();\n\n    let lastLine = undefined;\n    let lineDiff = undefined;\n    let displaced = false;\n\n    // Draw notes from bottom to top.\n\n    // For down-stem notes, we draw from top to bottom.\n    let start: number;\n    let end: number;\n    let step: number;\n    if (stemDirection === Stem.UP) {\n      start = 0;\n      end = keys.length;\n      step = 1;\n    } else {\n      start = keys.length - 1;\n      end = -1;\n      step = -1;\n    }\n\n    for (let i = start; i !== end; i += step) {\n      const noteProps = this.keyProps[i];\n      const line = noteProps.line;\n\n      // Keep track of last line with a note head, so that consecutive heads\n      // are correctly displaced.\n      if (lastLine === undefined) {\n        lastLine = line;\n      } else {\n        lineDiff = Math.abs(lastLine - line);\n        if (lineDiff === 0 || lineDiff === 0.5) {\n          displaced = !displaced;\n        } else {\n          displaced = false;\n          this.use_default_head_x = true;\n        }\n      }\n      lastLine = line;\n\n      const notehead = new NoteHead({\n        duration: this.duration,\n        note_type: this.noteType,\n        displaced,\n        stem_direction: stemDirection,\n        custom_glyph_code: noteProps.code,\n        glyph_font_scale: this.render_options.glyph_font_scale,\n        x_shift: noteProps.shift_right,\n        stem_up_x_offset: noteProps.stem_up_x_offset,\n        stem_down_x_offset: noteProps.stem_down_x_offset,\n        line: noteProps.line,\n      });\n\n      this.note_heads[i] = notehead;\n    }\n  }\n\n  // Automatically sets the stem direction based on the keys in the note\n  autoStem(): void {\n    this.setStemDirection(this.calculateOptimalStemDirection());\n  }\n\n  calculateOptimalStemDirection(): number {\n    // Figure out optimal stem direction based on given notes\n    this.minLine = this.keyProps[0].line;\n    this.maxLine = this.keyProps[this.keyProps.length - 1].line;\n\n    const MIDDLE_LINE = 3;\n    const decider = (this.minLine + this.maxLine) / 2;\n    const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n\n    return stemDirection;\n  }\n\n  // Calculates and stores the properties for each key in the note\n  calculateKeyProps(): void {\n    let lastLine: number | undefined;\n    for (let i = 0; i < this.keys.length; ++i) {\n      const key = this.keys[i];\n\n      // All rests use the same position on the line.\n      // if (this.glyph.rest) key = this.glyph.position;\n      if (this.glyph.rest) this.glyph.position = key;\n\n      const options = { octave_shift: this.octave_shift || 0 };\n      const props = Tables.keyProperties(key, this.clef, options);\n\n      if (!props) {\n        throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n      }\n\n      // Override line placement for default rests\n      if (props.key === 'R') {\n        if (this.duration === '1' || this.duration === 'w') {\n          props.line = 4;\n        } else {\n          props.line = 3;\n        }\n      }\n\n      // Calculate displacement of this note\n      const line = props.line;\n      if (lastLine == undefined) {\n        lastLine = line;\n      } else {\n        if (Math.abs(lastLine - line) === 0.5) {\n          this.displaced = true;\n          props.displaced = true;\n\n          // Have to mark the previous note as\n          // displaced as well, for modifier placement\n          if (this.keyProps.length > 0) {\n            this.keyProps[i - 1].displaced = true;\n          }\n        }\n      }\n\n      lastLine = line;\n      this.keyProps.push(props);\n    }\n\n    // Sort the notes from lowest line to highest line\n    lastLine = undefined;\n    this.keyProps.forEach((key) => {\n      if (lastLine && key.line < lastLine) {\n        warn('Unsorted keys in note will be sorted. ' + 'See https://github.com/0xfe/vexflow/issues/104 for details.');\n      }\n      lastLine = key.line;\n    });\n    this.keyProps.sort((a, b) => a.line - b.line);\n  }\n\n  // Get the `BoundingBox` for the entire note\n  getBoundingBox(): BoundingBox {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n\n    const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();\n    const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;\n\n    let minY: number = 0;\n    let maxY: number = 0;\n    const halfLineSpacing = (this.getStave()?.getSpacingBetweenLines() ?? 0) / 2;\n    const lineSpacing = halfLineSpacing * 2;\n\n    if (this.isRest()) {\n      const y = this.ys[0];\n      const frac = Tables.durationToFraction(this.duration);\n      if (frac.equals(1) || frac.equals(2)) {\n        minY = y - halfLineSpacing;\n        maxY = y + halfLineSpacing;\n      } else {\n        minY = y - this.glyph.line_above * lineSpacing;\n        maxY = y + this.glyph.line_below * lineSpacing;\n      }\n    } else if (this.glyph.stem) {\n      const ys = this.getStemExtents();\n      ys.baseY += halfLineSpacing * this.getStemDirection();\n      minY = Math.min(ys.topY, ys.baseY);\n      maxY = Math.max(ys.topY, ys.baseY);\n    } else {\n      minY = 0;\n      maxY = 0;\n\n      for (let i = 0; i < this.ys.length; ++i) {\n        const yy = this.ys[i];\n        if (i === 0) {\n          minY = yy;\n          maxY = yy;\n        } else {\n          minY = Math.min(yy, minY);\n          maxY = Math.max(yy, maxY);\n        }\n      }\n      minY -= halfLineSpacing;\n      maxY += halfLineSpacing;\n    }\n\n    return new BoundingBox(x, minY, w, maxY - minY);\n  }\n\n  // Gets the line number of the bottom note in the chord.\n  // If `isTopNote` is `true` then get the top note's line number instead\n  getLineNumber(isTopNote?: boolean): number {\n    if (!this.keyProps.length) {\n      throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n    }\n\n    let resultLine = this.keyProps[0].line;\n\n    // No precondition assumed for sortedness of keyProps array\n    for (let i = 0; i < this.keyProps.length; i++) {\n      const thisLine = this.keyProps[i].line;\n      if (isTopNote) {\n        if (thisLine > resultLine) resultLine = thisLine;\n      } else {\n        if (thisLine < resultLine) resultLine = thisLine;\n      }\n    }\n\n    return resultLine;\n  }\n\n  /**\n   * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n   */\n  isRest(): boolean {\n    return this.glyph.rest;\n  }\n\n  // Determine if the current note is a chord\n  isChord(): boolean {\n    return !this.isRest() && this.keys.length > 1;\n  }\n\n  // Determine if the `StaveNote` has a stem\n  hasStem(): boolean {\n    return this.glyph.stem;\n  }\n\n  hasFlag(): boolean {\n    return super.hasFlag() && !this.isRest();\n  }\n\n  getStemX(): number {\n    if (this.noteType === 'r') {\n      return this.getCenterGlyphX();\n    } else {\n      // We adjust the origin of the stem because we want the stem left-aligned\n      // with the notehead if stemmed-down, and right-aligned if stemmed-up\n      return super.getStemX() + (this.stem_direction ? Stem.WIDTH / (2 * -this.stem_direction) : 0);\n    }\n  }\n\n  // Get the `y` coordinate for text placed on the top/bottom of a\n  // note at a desired `text_line`\n  getYForTopText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.min(\n      this.checkStave().getYForTopText(textLine),\n      extents.topY - this.render_options.annotation_spacing * (textLine + 1)\n    );\n  }\n  getYForBottomText(textLine: number): number {\n    const extents = this.getStemExtents();\n    return Math.max(\n      this.checkStave().getYForTopText(textLine),\n      extents.baseY + this.render_options.annotation_spacing * textLine\n    );\n  }\n\n  // Sets the current note to the provided `stave`. This applies\n  // `y` values to the `NoteHeads`.\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n\n    const ys = this.note_heads.map((notehead) => {\n      notehead.setStave(stave);\n      return notehead.getY();\n    });\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      this.stem.setYBounds(y_top, y_bottom);\n    }\n\n    return this;\n  }\n\n  // Check if note is shifted to the right\n  isDisplaced(): boolean {\n    return this.displaced;\n  }\n\n  // Sets whether shift note to the right. `displaced` is a `boolean`\n  setNoteDisplaced(displaced: boolean): this {\n    this.displaced = displaced;\n    return this;\n  }\n\n  // Get the starting `x` coordinate for a `StaveTie`\n  getTieRightX(): number {\n    let tieStartX = this.getAbsoluteX();\n    tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;\n    if (this.modifierContext) tieStartX += this.modifierContext.getRightShift();\n    return tieStartX;\n  }\n\n  // Get the ending `x` coordinate for a `StaveTie`\n  getTieLeftX(): number {\n    let tieEndX = this.getAbsoluteX();\n    tieEndX += this.x_shift - this.leftDisplacedHeadPx;\n    return tieEndX;\n  }\n\n  // Get the stave line on which to place a rest\n  getLineForRest(): number {\n    let restLine = this.keyProps[0].line;\n    if (this.keyProps.length > 1) {\n      const lastLine = this.keyProps[this.keyProps.length - 1].line;\n      const top = Math.max(restLine, lastLine);\n      const bot = Math.min(restLine, lastLine);\n      restLine = midLine(top, bot);\n    }\n\n    return restLine;\n  }\n\n  // Get the default `x` and `y` coordinates for the provided `position`\n  // and key `index`\n  getModifierStartXY(\n    position: number,\n    index: number,\n    options: { forceFlagRight?: boolean } = {}\n  ): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n    let x = 0;\n    if (position === LEFT) {\n      // FIXME: Left modifier padding, move to font file\n      x = -1 * 2;\n    } else if (position === RIGHT) {\n      // FIXME: Right modifier padding, move to font file\n      x = this.getGlyphWidth() + this.x_shift + 2;\n\n      if (\n        this.stem_direction === Stem.UP &&\n        this.hasFlag() &&\n        (options.forceFlagRight || isInnerNoteIndex(this, index))\n      ) {\n        x += this?.flag?.getMetrics().width ?? 0;\n      }\n    } else if (position === BELOW || position === ABOVE) {\n      x = this.getGlyphWidth() / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Sets the style of the complete StaveNote, including all keys\n  // and the stem.\n  setStyle(style: ElementStyle): this {\n    super.setStyle(style);\n    this.note_heads.forEach((notehead) => notehead.setStyle(style));\n    this.stem?.setStyle(style);\n    return this;\n  }\n\n  setStemStyle(style: ElementStyle): this {\n    const stem = this.getStem();\n    stem?.setStyle(style);\n    return this;\n  }\n  getStemStyle(): ElementStyle | undefined {\n    return this.stem?.getStyle();\n  }\n\n  setLedgerLineStyle(style: ElementStyle): void {\n    this.ledgerLineStyle = style;\n  }\n\n  getLedgerLineStyle(): ElementStyle {\n    return this.ledgerLineStyle;\n  }\n\n  setFlagStyle(style: ElementStyle): void {\n    this.flagStyle = style;\n  }\n  getFlagStyle(): ElementStyle | undefined {\n    return this.flagStyle;\n  }\n\n  // Sets the notehead at `index` to the provided coloring `style`.\n  //\n  // `style` is an `object` with the following properties: `shadowColor`,\n  // `shadowBlur`, `fillStyle`, `strokeStyle`\n  setKeyStyle(index: number, style: ElementStyle): this {\n    this.note_heads[index].setStyle(style);\n    return this;\n  }\n\n  setKeyLine(index: number, line: number): this {\n    this.keyProps[index].line = line;\n    this.reset();\n    return this;\n  }\n\n  getKeyLine(index: number): number {\n    return this.keyProps[index].line;\n  }\n\n  // Helper function to add an accidental to a key\n  addAccidental(index: number, accidental: Modifier): this {\n    return this.addModifier(accidental, index);\n  }\n\n  // Helper function to add an articulation to a key\n  addArticulation(index: number, articulation: Modifier): this {\n    return this.addModifier(articulation, index);\n  }\n\n  // Helper function to add an annotation to a key\n  addAnnotation(index: number, annotation: Modifier): this {\n    return this.addModifier(annotation, index);\n  }\n\n  // Helper function to add a dot on a specific key\n  addDot(index: number): this {\n    const dot = new Dot();\n    dot.setDotShiftY(this.glyph.dot_shiftY);\n    this.dots++;\n    return this.addModifier(dot, index);\n  }\n\n  // Convenience method to add dot to all keys in note\n  addDotToAll(): this {\n    for (let i = 0; i < this.keys.length; ++i) {\n      this.addDot(i);\n    }\n    return this;\n  }\n\n  // Get all accidentals in the `ModifierContext`\n  getAccidentals(): Accidental[] {\n    return this.checkModifierContext().getMembers(Accidental.CATEGORY) as Accidental[];\n  }\n\n  // Get all dots in the `ModifierContext`\n  getDots(): Dot[] {\n    return this.checkModifierContext().getMembers(Dot.CATEGORY) as Dot[];\n  }\n\n  // Get the width of the note if it is displaced. Used for `Voice`\n  // formatting\n  getVoiceShiftWidth(): number {\n    // TODO: may need to accomodate for dot here.\n    return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n  }\n\n  // Calculates and sets the extra pixels to the left or right\n  // if the note is displaced.\n  calcNoteDisplacements(): void {\n    this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === Stem.DOWN ? this.getGlyphWidth() : 0);\n\n    // For upstems with flags, the extra space is unnecessary, since it's taken\n    // up by the flag.\n    this.setRightDisplacedHeadPx(\n      !this.hasFlag() && this.displaced && this.stem_direction === Stem.UP ? this.getGlyphWidth() : 0\n    );\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    let noteHeadPadding = 0;\n    if (this.preFormatted) return;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      // If there are no modifiers on this note, make sure there is adequate padding\n      // between the notes.\n      if (this.modifierContext.getWidth() === 0) {\n        noteHeadPadding = StaveNote.minNoteheadPadding;\n      }\n    }\n\n    let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n\n    // For upward flagged notes, the width of the flag needs to be added\n    if (this.shouldDrawFlag() && this.stem_direction === Stem.UP) {\n      width += this.getGlyphWidth();\n      // TODO: Add flag width as a separate metric\n    }\n    this.setWidth(width);\n    this.setPreFormatted(true);\n  }\n\n  /**\n   * @typedef {Object} noteHeadBounds\n   * @property {number} y_top the highest notehead bound\n   * @property {number} y_bottom the lowest notehead bound\n   * @property {number|Null} displaced_x the starting x for displaced noteheads\n   * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads\n   * @property {number} highest_line the highest notehead line in traditional music line\n   *  numbering (bottom line = 1, top line = 5)\n   * @property {number} lowest_line the lowest notehead line\n   * @property {number|false} highest_displaced_line the highest staff line number\n   *   for a displaced notehead\n   * @property {number|false} lowest_displaced_line\n   * @property {number} highest_non_displaced_line\n   * @property {number} lowest_non_displaced_line\n   */\n\n  /**\n   * Get the staff line and y value for the highest & lowest noteheads\n   * @returns {noteHeadBounds}\n   */\n  getNoteHeadBounds(): StaveNoteHeadBounds {\n    // Top and bottom Y values for stem.\n    let yTop: number = +Infinity;\n    let yBottom: number = -Infinity;\n    let nonDisplacedX: number | undefined;\n    let displacedX: number | undefined;\n\n    let highestLine = this.checkStave().getNumLines();\n    let lowestLine = 1;\n    let highestDisplacedLine: number | undefined;\n    let lowestDisplacedLine: number | undefined;\n    let highestNonDisplacedLine = highestLine;\n    let lowestNonDisplacedLine = lowestLine;\n\n    this.note_heads.forEach((notehead) => {\n      const line: number = notehead.getLine();\n      const y = notehead.getY();\n\n      yTop = Math.min(y, yTop);\n      yBottom = Math.max(y, yBottom);\n\n      if (displacedX === undefined && notehead.isDisplaced()) {\n        displacedX = notehead.getAbsoluteX();\n      }\n\n      if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n        nonDisplacedX = notehead.getAbsoluteX();\n      }\n\n      highestLine = Math.max(line, highestLine);\n      lowestLine = Math.min(line, lowestLine);\n\n      if (notehead.isDisplaced()) {\n        highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n        lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n      } else {\n        highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n        lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n      }\n    }, this);\n\n    return {\n      y_top: yTop,\n      y_bottom: yBottom,\n      displaced_x: displacedX,\n      non_displaced_x: nonDisplacedX,\n      highest_line: highestLine,\n      lowest_line: lowestLine,\n      highest_displaced_line: highestDisplacedLine,\n      lowest_displaced_line: lowestDisplacedLine,\n      highest_non_displaced_line: highestNonDisplacedLine,\n      lowest_non_displaced_line: lowestNonDisplacedLine,\n    };\n  }\n\n  // Get the starting `x` coordinate for the noteheads\n  getNoteHeadBeginX(): number {\n    return this.getAbsoluteX() + this.x_shift;\n  }\n\n  // Get the ending `x` coordinate for the noteheads\n  getNoteHeadEndX(): number {\n    const xBegin = this.getNoteHeadBeginX();\n    return xBegin + this.getGlyphWidth();\n  }\n\n  // Draw the ledger lines between the stave and the highest/lowest keys\n  drawLedgerLines(): void {\n    const stave = this.checkStave();\n    const {\n      glyph,\n      render_options: { stroke_px },\n    } = this;\n    const ctx = this.checkContext();\n    const width = glyph.getWidth() + stroke_px * 2;\n    const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - Stem.WIDTH / 2;\n\n    if (this.isRest()) return;\n    if (!ctx) {\n      throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const {\n      highest_line,\n      lowest_line,\n      highest_displaced_line,\n      highest_non_displaced_line,\n      lowest_displaced_line,\n      lowest_non_displaced_line,\n      displaced_x,\n      non_displaced_x,\n    } = this.getNoteHeadBounds();\n\n    // Early out if there are no ledger lines to draw.\n    if (highest_line < 6 && lowest_line > 0) return;\n\n    const min_x = Math.min(displaced_x ?? 0, non_displaced_x ?? 0);\n\n    const drawLedgerLine = (y: number, normal: boolean, displaced: boolean) => {\n      let x;\n      if (displaced && normal) x = min_x - stroke_px;\n      else if (normal) x = (non_displaced_x ?? 0) - stroke_px;\n      else x = (displaced_x ?? 0) - stroke_px;\n      const ledgerWidth = normal && displaced ? doubleWidth : width;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + ledgerWidth, y);\n      ctx.stroke();\n    };\n\n    const style = { ...(stave.getStyle() || {}), ...(this.getLedgerLineStyle() || {}) };\n    if (typeof style.lineWidth === 'undefined') {\n      style.lineWidth = Tables.STAVE_LINE_THICKNESS * 2;\n    } else {\n      style.lineWidth *= 2;\n    }\n    this.applyStyle(ctx, style);\n\n    // Draw ledger lines below the staff:\n    for (let line = 6; line <= highest_line; ++line) {\n      const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;\n      const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    // Draw ledger lines above the staff:\n    for (let line = 0; line >= lowest_line; --line) {\n      const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;\n      const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    this.restoreStyle(ctx, style);\n  }\n\n  // Draw all key modifiers\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      const index = modifier.checkIndex();\n      const notehead = this.note_heads[index];\n      const noteheadStyle = notehead.getStyle();\n      notehead.applyStyle(ctx, noteheadStyle);\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n      notehead.restoreStyle(ctx, noteheadStyle);\n    }\n    ctx.closeGroup();\n  }\n\n  shouldDrawFlag(): boolean {\n    const hasStem = this.stem !== undefined;\n    const hasFlag = this.glyph.flag as boolean; // specified in tables.js\n    const hasNoBeam = this.beam === undefined;\n    return hasStem && hasFlag && hasNoBeam;\n  }\n\n  // Draw the flag for the note\n  drawFlag(): void {\n    const ctx = this.checkContext();\n    if (!ctx) {\n      throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    if (this.shouldDrawFlag()) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      // eslint-disable-next-line\n      const noteStemHeight = this.stem!.getHeight();\n      const flagX = this.getStemX();\n      // FIXME: What's with the magic +/- 2\n      // ANSWER: a corner of the note stem pokes out beyond the tip of the flag.\n      // The extra +/- 2 pushes the flag glyph outward so it covers the stem entirely.\n      // Alternatively, we could shorten the stem.\n      const flagY =\n        this.getStemDirection() === Stem.DOWN\n          ? // Down stems are below the note head and have flags on the right.\n            y_top - noteStemHeight + 2\n          : // Up stems are above the note head and have flags on the right.\n            y_bottom - noteStemHeight - 2;\n\n      // Draw the Flag\n      ctx.openGroup('flag', undefined, { pointerBBox: true });\n      this.applyStyle(ctx, this.getFlagStyle());\n      this.flag?.render(ctx, flagX, flagY);\n      this.restoreStyle(ctx, this.getFlagStyle());\n      ctx.closeGroup();\n    }\n  }\n\n  // Draw the NoteHeads\n  drawNoteHeads(): void {\n    const ctx = this.checkContext();\n    this.note_heads.forEach((notehead) => {\n      ctx.openGroup('notehead', undefined, { pointerBBox: true });\n      notehead.setContext(ctx).draw();\n      ctx.closeGroup();\n    });\n  }\n\n  drawStem(stemOptions?: StemOptions): void {\n    // GCR TODO: I can't find any context in which this is called with the stemStruct\n    // argument in the codebase or tests. Nor can I find a case where super.drawStem\n    // is called at all. Perhaps these should be removed?\n    const ctx = this.checkContext();\n\n    if (stemOptions) {\n      this.setStem(new Stem(stemOptions));\n    }\n\n    // If we will render a flag, we shorten the stem so that the tip\n    // does not poke through the flag.\n    if (this.shouldDrawFlag() && this.stem) {\n      this.stem.adjustHeightForFlag();\n    }\n\n    ctx.openGroup('stem', undefined, { pointerBBox: true });\n    this.stem?.setContext(ctx).draw();\n    ctx.closeGroup();\n  }\n\n  /**\n   * Override stemmablenote stem extension to adjust for distance from middle line.\n   */\n  getStemExtension(): number {\n    const super_stem_extension = super.getStemExtension();\n    if (!this.glyph.stem) {\n      return super_stem_extension;\n    }\n\n    const stem_direction = this.getStemDirection();\n    if (stem_direction !== this.calculateOptimalStemDirection()) {\n      return super_stem_extension; // no adjustment for manually set stem direction.\n    }\n    let mid_line_distance;\n    const MIDDLE_LINE = 3;\n    if (stem_direction === Stem.UP) {\n      // Note that the use of maxLine here instead of minLine might\n      // seem counterintuitive, but in the case of (say) treble clef\n      // chord(F2, E4) stem up, we do not want to extend the stem because\n      // of F2, when a normal octave-length stem above E4 is fine.\n      //\n      // maxLine and minLine are set in calculateOptimalStemDirection() so\n      // will be known.\n      mid_line_distance = MIDDLE_LINE - this.maxLine;\n    } else {\n      mid_line_distance = this.minLine - MIDDLE_LINE;\n    }\n\n    // how many lines more than an octave is the relevant notehead?\n    const lines_over_octave_from_mid_line = mid_line_distance - 3.5;\n    if (lines_over_octave_from_mid_line <= 0) {\n      return super_stem_extension;\n    }\n    const stave = this.getStave();\n    let spacing_between_lines = 10;\n    if (stave != undefined) {\n      spacing_between_lines = stave.getSpacingBetweenLines();\n    }\n    return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;\n  }\n\n  // Draws all the `StaveNote` parts. This is the main drawing method.\n  draw(): void {\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    const ctx = this.checkContext();\n    const xBegin = this.getNoteHeadBeginX();\n    const shouldRenderStem = this.hasStem() && !this.beam;\n\n    // Format note head x positions\n    this.note_heads.forEach((notehead) => notehead.setX(xBegin));\n\n    // Format stem x positions\n    const stemX = this.getStemX();\n    this.stem?.setNoteHeadXBounds(stemX, stemX);\n\n    L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n\n    // Apply the overall style -- may be contradicted by local settings:\n    this.applyStyle();\n    this.setAttribute('el', ctx.openGroup('stavenote', this.getAttribute('id')));\n    this.drawLedgerLines();\n    ctx.openGroup('note', undefined, { pointerBBox: true });\n    if (shouldRenderStem) this.drawStem();\n    this.drawNoteHeads();\n    this.drawFlag();\n    ctx.closeGroup();\n    this.drawModifiers();\n    ctx.closeGroup();\n    this.restoreStyle();\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { StaveNote, StaveNoteStruct } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n\nexport interface GraceNoteStruct extends StaveNoteStruct {\n  slash?: boolean;\n}\n\nexport class GraceNote extends StaveNote {\n  static get CATEGORY(): string {\n    return 'GraceNote';\n  }\n\n  static get LEDGER_LINE_OFFSET(): number {\n    return 2;\n  }\n\n  static get SCALE(): number {\n    return 0.66;\n  }\n\n  protected slash: boolean;\n  protected slur: boolean;\n\n  constructor(noteStruct: GraceNoteStruct) {\n    super({\n      glyph_font_scale: Tables.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,\n      stroke_px: GraceNote.LEDGER_LINE_OFFSET,\n      ...noteStruct,\n    });\n\n    this.slash = noteStruct.slash || false;\n    this.slur = true;\n\n    this.buildNoteHeads();\n\n    this.width = 3;\n  }\n\n  getStemExtension(): number {\n    if (this.stem_extension_override) {\n      return this.stem_extension_override;\n    }\n\n    const glyph = this.getGlyph();\n    if (glyph) {\n      let ret = super.getStemExtension();\n      if (glyph.stem) {\n        const staveNoteScale = this.getStaveNoteScale();\n        ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n      }\n      return ret;\n    }\n\n    return 0;\n  }\n\n  // FIXME: move this to more basic class.\n  getStaveNoteScale(): number {\n    return this.render_options.glyph_font_scale / Tables.DEFAULT_NOTATION_FONT_SCALE;\n  }\n\n  draw(): void {\n    super.draw();\n    this.setRendered();\n    const stem = this.stem;\n    if (this.slash && stem) {\n      const staveNoteScale = this.getStaveNoteScale();\n\n      // some magic numbers are based on the staveNoteScale 0.66.\n      const offsetScale = staveNoteScale / 0.66;\n      let slashBBox = undefined;\n      const beam = this.beam;\n      if (beam) {\n        // FIXME: should render slash after beam?\n        if (!beam.postFormatted) {\n          beam.postFormat();\n        }\n\n        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n          stem: 6 * offsetScale,\n          beam: 5 * offsetScale,\n        });\n      } else {\n        const stem_direction = this.getStemDirection();\n        const noteHeadBounds = this.getNoteHeadBounds();\n        const noteStemHeight = stem.getHeight();\n        let x = this.getAbsoluteX();\n        let y =\n          stem_direction === Stem.DOWN\n            ? noteHeadBounds.y_top - noteStemHeight\n            : noteHeadBounds.y_bottom - noteStemHeight;\n\n        const defaultStemExtention =\n          stem_direction === Stem.DOWN ? this.glyph.stem_down_extension : this.glyph.stem_up_extension;\n\n        let defaultOffsetY = Tables.STEM_HEIGHT;\n        defaultOffsetY -= defaultOffsetY / 2.8;\n        defaultOffsetY += defaultStemExtention;\n        y += defaultOffsetY * staveNoteScale * stem_direction;\n\n        const offsets =\n          stem_direction === Stem.UP\n            ? {\n                x1: 1,\n                y1: 0,\n                x2: 13,\n                y2: -9,\n              }\n            : {\n                x1: -4,\n                y1: 1,\n                x2: 13,\n                y2: 9,\n              };\n\n        x += offsets.x1 * offsetScale;\n        y += offsets.y1 * offsetScale;\n        slashBBox = {\n          x1: x,\n          y1: y,\n          x2: x + offsets.x2 * offsetScale,\n          y2: y + offsets.y2 * offsetScale,\n        };\n      }\n\n      // FIXME: avoid staff lines, ledger lines or others.\n\n      const ctx = this.checkContext();\n      ctx.save();\n      ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n      ctx.beginPath();\n      ctx.moveTo(slashBBox.x1, slashBBox.y1);\n      ctx.lineTo(slashBBox.x2, slashBBox.y2);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  calcBeamedNotesSlashBBox(\n    slashStemOffset: number,\n    slashBeamOffset: number,\n    protrusions: { beam: number; stem: number }\n  ): Record<string, number> {\n    const beam = this.beam;\n    if (!beam) throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n\n    const beam_slope = beam.slope;\n    const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n    const scaleX = isBeamEndNote ? -1 : 1;\n    const beam_angle = Math.atan(beam_slope * scaleX);\n\n    // slash line intersecting point on beam.\n    const iPointOnBeam = {\n      dx: Math.cos(beam_angle) * slashBeamOffset,\n      dy: Math.sin(beam_angle) * slashBeamOffset,\n    };\n\n    slashStemOffset *= this.getStemDirection();\n    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n\n    const stemX = this.getStemX();\n    const stem0X = beam.notes[0].getStemX();\n    const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n\n    const ret = {\n      x1: stemX - protrusion_stem_dx,\n      y1: stemY + slashStemOffset - protrusion_stem_dy,\n      x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n    };\n    return ret;\n  }\n}\n","export const PetalumaScriptTextMetrics = {\n  name: 'petalumaScript',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 250,\n      \"y_min\": 0,\n      \"y_max\": 500,\n      \"ha\": 500,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 250\n    },\"0\": {\n      \"x_min\": 33,\n      \"x_max\": 534,\n      \"y_min\": -13,\n      \"y_max\": 751,\n      \"ha\": 764,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 570\n    },\n    \"1\": {\n      \"x_min\": 48,\n      \"x_max\": 235,\n      \"y_min\": -17,\n      \"y_max\": 734,\n      \"ha\": 751,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 286\n    },\n    \"2\": {\n      \"x_min\": 56,\n      \"x_max\": 571,\n      \"y_min\": -19,\n      \"y_max\": 741,\n      \"ha\": 760,\n      \"leftSideBearing\": 56,\n      \"advanceWidth\": 626\n    },\n    \"3\": {\n      \"x_min\": 50,\n      \"x_max\": 528,\n      \"y_min\": -7,\n      \"y_max\": 731,\n      \"ha\": 738,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 589\n    },\n    \"4\": {\n      \"x_min\": 38,\n      \"x_max\": 564,\n      \"y_min\": -13,\n      \"y_max\": 743,\n      \"ha\": 756,\n      \"leftSideBearing\": 38,\n      \"advanceWidth\": 614\n    },\n    \"5\": {\n      \"x_min\": 42,\n      \"x_max\": 601,\n      \"y_min\": -34,\n      \"y_max\": 743,\n      \"ha\": 777,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 648\n    },\n    \"6\": {\n      \"x_min\": 47,\n      \"x_max\": 606,\n      \"y_min\": -16,\n      \"y_max\": 743,\n      \"ha\": 759,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 667\n    },\n    \"7\": {\n      \"x_min\": 47,\n      \"x_max\": 567,\n      \"y_min\": 5,\n      \"y_max\": 739,\n      \"ha\": 734,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 615\n    },\n    \"8\": {\n      \"x_min\": 40,\n      \"x_max\": 541,\n      \"y_min\": -15,\n      \"y_max\": 752,\n      \"ha\": 767,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 585\n    },\n    \"9\": {\n      \"x_min\": 40,\n      \"x_max\": 537,\n      \"y_min\": -52,\n      \"y_max\": 736,\n      \"ha\": 788,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 592\n    },\n    \"!\": {\n      \"x_min\": 49,\n      \"x_max\": 180,\n      \"y_min\": -7,\n      \"y_max\": 761,\n      \"ha\": 768,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 230\n    },\n    \"\\\"\": {\n      \"x_min\": 39,\n      \"x_max\": 304,\n      \"y_min\": 596,\n      \"y_max\": 804,\n      \"ha\": 208,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 353\n    },\n    \"#\": {\n      \"x_min\": 33,\n      \"x_max\": 599,\n      \"y_min\": -8,\n      \"y_max\": 765,\n      \"ha\": 773,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 648\n    },\n    \"$\": {\n      \"x_min\": 53,\n      \"x_max\": 495,\n      \"y_min\": -111,\n      \"y_max\": 823,\n      \"ha\": 934,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 560\n    },\n    \"%\": {\n      \"x_min\": 35,\n      \"x_max\": 656,\n      \"y_min\": -128,\n      \"y_max\": 808,\n      \"ha\": 936,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 711\n    },\n    \"&\": {\n      \"x_min\": 53,\n      \"x_max\": 441,\n      \"y_min\": -3,\n      \"y_max\": 753,\n      \"ha\": 756,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 500\n    },\n    \"'\": {\n      \"x_min\": 43,\n      \"x_max\": 161,\n      \"y_min\": 590,\n      \"y_max\": 811,\n      \"ha\": 221,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 217\n    },\n    \"(\": {\n      \"x_min\": 41,\n      \"x_max\": 311,\n      \"y_min\": -36,\n      \"y_max\": 845,\n      \"ha\": 881,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 308\n    },\n    \")\": {\n      \"x_min\": -8,\n      \"x_max\": 257,\n      \"y_min\": -21,\n      \"y_max\": 852,\n      \"ha\": 873,\n      \"leftSideBearing\": -8,\n      \"advanceWidth\": 280\n    },\n    \"*\": {\n      \"x_min\": 59,\n      \"x_max\": 539,\n      \"y_min\": 175,\n      \"y_max\": 589,\n      \"ha\": 414,\n      \"leftSideBearing\": 59,\n      \"advanceWidth\": 601\n    },\n    \"+\": {\n      \"x_min\": 33,\n      \"x_max\": 361,\n      \"y_min\": 180,\n      \"y_max\": 587,\n      \"ha\": 407,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 400\n    },\n    \",\": {\n      \"x_min\": 15,\n      \"x_max\": 176,\n      \"y_min\": -129,\n      \"y_max\": 92,\n      \"ha\": 221,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 205\n    },\n    \"-\": {\n      \"x_min\": 40,\n      \"x_max\": 380,\n      \"y_min\": 317,\n      \"y_max\": 452,\n      \"ha\": 135,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \".\": {\n      \"x_min\": 48,\n      \"x_max\": 185,\n      \"y_min\": -56,\n      \"y_max\": 84,\n      \"ha\": 140,\n      \"leftSideBearing\": 48,\n      \"advanceWidth\": 227\n    },\n    \"/\": {\n      \"x_min\": -58,\n      \"x_max\": 654,\n      \"y_min\": -122,\n      \"y_max\": 844,\n      \"ha\": 966,\n      \"leftSideBearing\": -58,\n      \"advanceWidth\": 626\n    },\n    \":\": {\n      \"x_min\": 65,\n      \"x_max\": 225,\n      \"y_min\": 97,\n      \"y_max\": 536,\n      \"ha\": 439,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 302\n    },\n    \";\": {\n      \"x_min\": 13,\n      \"x_max\": 295,\n      \"y_min\": -139,\n      \"y_max\": 536,\n      \"ha\": 675,\n      \"leftSideBearing\": 13,\n      \"advanceWidth\": 334\n    },\n    \"<\": {\n      \"x_min\": 28,\n      \"x_max\": 438,\n      \"y_min\": -1,\n      \"y_max\": 607,\n      \"ha\": 608,\n      \"leftSideBearing\": 28,\n      \"advanceWidth\": 475\n    },\n    \"=\": {\n      \"x_min\": 40,\n      \"x_max\": 383,\n      \"y_min\": 199.9598640852289,\n      \"y_max\": 541,\n      \"ha\": 341.0401359147711,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 422\n    },\n    \">\": {\n      \"x_min\": 35,\n      \"x_max\": 421,\n      \"y_min\": 28,\n      \"y_max\": 632,\n      \"ha\": 604,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 466\n    },\n    \"?\": {\n      \"x_min\": 45,\n      \"x_max\": 548,\n      \"y_min\": -17,\n      \"y_max\": 767,\n      \"ha\": 784,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 592\n    },\n    \"@\": {\n      \"x_min\": 51,\n      \"x_max\": 730,\n      \"y_min\": -78,\n      \"y_max\": 753,\n      \"ha\": 831,\n      \"leftSideBearing\": 51,\n      \"advanceWidth\": 781\n    },\n    \"A\": {\n      \"x_min\": 37,\n      \"x_max\": 554,\n      \"y_min\": -4,\n      \"y_max\": 746,\n      \"ha\": 750,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 617\n    },\n    \"B\": {\n      \"x_min\": 37,\n      \"x_max\": 532,\n      \"y_min\": 3,\n      \"y_max\": 783,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 579\n    },\n    \"C\": {\n      \"x_min\": 37,\n      \"x_max\": 583,\n      \"y_min\": -3,\n      \"y_max\": 775,\n      \"ha\": 778,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 623\n    },\n    \"D\": {\n      \"x_min\": 50,\n      \"x_max\": 530,\n      \"y_min\": -15,\n      \"y_max\": 749,\n      \"ha\": 764,\n      \"leftSideBearing\": 50,\n      \"advanceWidth\": 579\n    },\n    \"E\": {\n      \"x_min\": 45,\n      \"x_max\": 531,\n      \"y_min\": -1,\n      \"y_max\": 743,\n      \"ha\": 744,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 585\n    },\n    \"F\": {\n      \"x_min\": 45,\n      \"x_max\": 459,\n      \"y_min\": 23,\n      \"y_max\": 727,\n      \"ha\": 704,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 510\n    },\n    \"G\": {\n      \"x_min\": 31,\n      \"x_max\": 577,\n      \"y_min\": -8,\n      \"y_max\": 733,\n      \"ha\": 741,\n      \"leftSideBearing\": 31,\n      \"advanceWidth\": 611\n    },\n    \"H\": {\n      \"x_min\": 37,\n      \"x_max\": 493,\n      \"y_min\": -22,\n      \"y_max\": 758,\n      \"ha\": 780,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 535\n    },\n    \"I\": {\n      \"x_min\": 47,\n      \"x_max\": 501,\n      \"y_min\": -3,\n      \"y_max\": 731,\n      \"ha\": 734,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 541\n    },\n    \"J\": {\n      \"x_min\": 33,\n      \"x_max\": 531,\n      \"y_min\": -23,\n      \"y_max\": 725,\n      \"ha\": 748,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 573\n    },\n    \"K\": {\n      \"x_min\": 43,\n      \"x_max\": 505,\n      \"y_min\": -10,\n      \"y_max\": 740,\n      \"ha\": 750,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 560\n    },\n    \"L\": {\n      \"x_min\": 49,\n      \"x_max\": 457,\n      \"y_min\": -2,\n      \"y_max\": 746,\n      \"ha\": 748,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 510\n    },\n    \"M\": {\n      \"x_min\": 35,\n      \"x_max\": 699,\n      \"y_min\": 1,\n      \"y_max\": 744,\n      \"ha\": 743,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 743\n    },\n    \"N\": {\n      \"x_min\": 34,\n      \"x_max\": 533,\n      \"y_min\": -17,\n      \"y_max\": 761,\n      \"ha\": 778,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 579\n    },\n    \"O\": {\n      \"x_min\": 41,\n      \"x_max\": 608,\n      \"y_min\": -5,\n      \"y_max\": 735,\n      \"ha\": 740,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 667\n    },\n    \"P\": {\n      \"x_min\": 53,\n      \"x_max\": 451,\n      \"y_min\": -18,\n      \"y_max\": 735,\n      \"ha\": 753,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 497\n    },\n    \"Q\": {\n      \"x_min\": 40,\n      \"x_max\": 599,\n      \"y_min\": -67,\n      \"y_max\": 744,\n      \"ha\": 811,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 648\n    },\n    \"R\": {\n      \"x_min\": 39,\n      \"x_max\": 487,\n      \"y_min\": 16,\n      \"y_max\": 735,\n      \"ha\": 719,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 535\n    },\n    \"S\": {\n      \"x_min\": 35,\n      \"x_max\": 552,\n      \"y_min\": -47,\n      \"y_max\": 708,\n      \"ha\": 755,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 604\n    },\n    \"T\": {\n      \"x_min\": 26,\n      \"x_max\": 656,\n      \"y_min\": -13,\n      \"y_max\": 718,\n      \"ha\": 731,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 705\n    },\n    \"U\": {\n      \"x_min\": 41,\n      \"x_max\": 518,\n      \"y_min\": -20,\n      \"y_max\": 748,\n      \"ha\": 768,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 567\n    },\n    \"V\": {\n      \"x_min\": 47,\n      \"x_max\": 509,\n      \"y_min\": -26,\n      \"y_max\": 744,\n      \"ha\": 770,\n      \"leftSideBearing\": 47,\n      \"advanceWidth\": 567\n    },\n    \"W\": {\n      \"x_min\": 44,\n      \"x_max\": 789,\n      \"y_min\": -35,\n      \"y_max\": 720,\n      \"ha\": 755,\n      \"leftSideBearing\": 44,\n      \"advanceWidth\": 833\n    },\n    \"X\": {\n      \"x_min\": 63,\n      \"x_max\": 635,\n      \"y_min\": -10,\n      \"y_max\": 745,\n      \"ha\": 755,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 680\n    },\n    \"Y\": {\n      \"x_min\": 43,\n      \"x_max\": 503,\n      \"y_min\": -21,\n      \"y_max\": 734,\n      \"ha\": 755,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 541\n    },\n    \"Z\": {\n      \"x_min\": 42,\n      \"x_max\": 584,\n      \"y_min\": -10,\n      \"y_max\": 739,\n      \"ha\": 749,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 629\n    },\n    \"[\": {\n      \"x_min\": 46,\n      \"x_max\": 346,\n      \"y_min\": -150,\n      \"y_max\": 884,\n      \"ha\": 1034,\n      \"leftSideBearing\": 46,\n      \"advanceWidth\": 291\n    },\n    \"\\\\\": {\n      \"x_min\": 20,\n      \"x_max\": 616,\n      \"y_min\": -100,\n      \"y_max\": 797,\n      \"ha\": 897,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 645\n    },\n    \"]\": {\n      \"x_min\": -76,\n      \"x_max\": 226,\n      \"y_min\": -150,\n      \"y_max\": 881,\n      \"ha\": 1031,\n      \"leftSideBearing\": -76,\n      \"advanceWidth\": 297\n    },\n    \"^\": {\n      \"x_min\": 43,\n      \"x_max\": 437,\n      \"y_min\": 517,\n      \"y_max\": 812,\n      \"ha\": 295,\n      \"leftSideBearing\": 43,\n      \"advanceWidth\": 478\n    },\n    \"_\": {\n      \"x_min\": 29,\n      \"x_max\": 563,\n      \"y_min\": -110,\n      \"y_max\": -1,\n      \"ha\": 109,\n      \"leftSideBearing\": 29,\n      \"advanceWidth\": 598\n    },\n    \"`\": {\n      \"x_min\": 54,\n      \"x_max\": 321,\n      \"y_min\": 540,\n      \"y_max\": 747,\n      \"ha\": 207,\n      \"leftSideBearing\": 54,\n      \"advanceWidth\": 368\n    },\n    \"a\": {\n      \"x_min\": 20,\n      \"x_max\": 447,\n      \"y_min\": -17,\n      \"y_max\": 495,\n      \"ha\": 512,\n      \"leftSideBearing\": 20,\n      \"advanceWidth\": 494\n    },\n    \"b\": {\n      \"x_min\": 37,\n      \"x_max\": 466,\n      \"y_min\": -27,\n      \"y_max\": 770,\n      \"ha\": 797,\n      \"leftSideBearing\": 37,\n      \"advanceWidth\": 510\n    },\n    \"c\": {\n      \"x_min\": 35,\n      \"x_max\": 456,\n      \"y_min\": -9,\n      \"y_max\": 507,\n      \"ha\": 516,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 460\n    },\n    \"d\": {\n      \"x_min\": 45,\n      \"x_max\": 520,\n      \"y_min\": -15,\n      \"y_max\": 764,\n      \"ha\": 779,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 560\n    },\n    \"e\": {\n      \"x_min\": 33,\n      \"x_max\": 370,\n      \"y_min\": -5,\n      \"y_max\": 501,\n      \"ha\": 506,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 397\n    },\n    \"f\": {\n      \"x_min\": 35,\n      \"x_max\": 411,\n      \"y_min\": -13,\n      \"y_max\": 695,\n      \"ha\": 708,\n      \"leftSideBearing\": 35,\n      \"advanceWidth\": 453\n    },\n    \"g\": {\n      \"x_min\": 33,\n      \"x_max\": 551,\n      \"y_min\": -257,\n      \"y_max\": 505,\n      \"ha\": 762,\n      \"leftSideBearing\": 33,\n      \"advanceWidth\": 611\n    },\n    \"h\": {\n      \"x_min\": 32,\n      \"x_max\": 458,\n      \"y_min\": -29,\n      \"y_max\": 743,\n      \"ha\": 772,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 491\n    },\n    \"i\": {\n      \"x_min\": 45,\n      \"x_max\": 167,\n      \"y_min\": -13,\n      \"y_max\": 631,\n      \"ha\": 644,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 220\n    },\n    \"j\": {\n      \"x_min\": -127,\n      \"x_max\": 261,\n      \"y_min\": -231,\n      \"y_max\": 601,\n      \"ha\": 832,\n      \"leftSideBearing\": -127,\n      \"advanceWidth\": 308\n    },\n    \"k\": {\n      \"x_min\": 39,\n      \"x_max\": 443,\n      \"y_min\": -3,\n      \"y_max\": 700,\n      \"ha\": 703,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 497\n    },\n    \"l\": {\n      \"x_min\": 58,\n      \"x_max\": 168,\n      \"y_min\": -8,\n      \"y_max\": 686,\n      \"ha\": 694,\n      \"leftSideBearing\": 58,\n      \"advanceWidth\": 227\n    },\n    \"m\": {\n      \"x_min\": 39,\n      \"x_max\": 688,\n      \"y_min\": -14,\n      \"y_max\": 501,\n      \"ha\": 515,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 718\n    },\n    \"n\": {\n      \"x_min\": 45,\n      \"x_max\": 491,\n      \"y_min\": -32,\n      \"y_max\": 512,\n      \"ha\": 544,\n      \"leftSideBearing\": 45,\n      \"advanceWidth\": 541\n    },\n    \"o\": {\n      \"x_min\": 41,\n      \"x_max\": 424,\n      \"y_min\": -12,\n      \"y_max\": 493,\n      \"ha\": 505,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 447\n    },\n    \"p\": {\n      \"x_min\": 25,\n      \"x_max\": 529,\n      \"y_min\": -260,\n      \"y_max\": 500,\n      \"ha\": 760,\n      \"leftSideBearing\": 25,\n      \"advanceWidth\": 573\n    },\n    \"q\": {\n      \"x_min\": 53,\n      \"x_max\": 603,\n      \"y_min\": -235,\n      \"y_max\": 514,\n      \"ha\": 749,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 623\n    },\n    \"r\": {\n      \"x_min\": 32,\n      \"x_max\": 407,\n      \"y_min\": -7,\n      \"y_max\": 492,\n      \"ha\": 499,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 460\n    },\n    \"s\": {\n      \"x_min\": 49,\n      \"x_max\": 416,\n      \"y_min\": -12,\n      \"y_max\": 519,\n      \"ha\": 531,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 460\n    },\n    \"t\": {\n      \"x_min\": 32,\n      \"x_max\": 442,\n      \"y_min\": -5,\n      \"y_max\": 684,\n      \"ha\": 689,\n      \"leftSideBearing\": 32,\n      \"advanceWidth\": 469\n    },\n    \"u\": {\n      \"x_min\": 41,\n      \"x_max\": 487,\n      \"y_min\": -5,\n      \"y_max\": 507,\n      \"ha\": 512,\n      \"leftSideBearing\": 41,\n      \"advanceWidth\": 510\n    },\n    \"v\": {\n      \"x_min\": 16,\n      \"x_max\": 441,\n      \"y_min\": -20,\n      \"y_max\": 542,\n      \"ha\": 562,\n      \"leftSideBearing\": 16,\n      \"advanceWidth\": 456\n    },\n    \"w\": {\n      \"x_min\": 39,\n      \"x_max\": 639,\n      \"y_min\": -22,\n      \"y_max\": 505,\n      \"ha\": 527,\n      \"leftSideBearing\": 39,\n      \"advanceWidth\": 661\n    },\n    \"x\": {\n      \"x_min\": 15,\n      \"x_max\": 505,\n      \"y_min\": -39,\n      \"y_max\": 539,\n      \"ha\": 578,\n      \"leftSideBearing\": 15,\n      \"advanceWidth\": 541\n    },\n    \"y\": {\n      \"x_min\": -98,\n      \"x_max\": 501,\n      \"y_min\": -242,\n      \"y_max\": 511,\n      \"ha\": 753,\n      \"leftSideBearing\": -98,\n      \"advanceWidth\": 548\n    },\n    \"z\": {\n      \"x_min\": 27,\n      \"x_max\": 479,\n      \"y_min\": -3,\n      \"y_max\": 494,\n      \"ha\": 497,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 494\n    },\n    \"{\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"|\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"}\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    },\n    \"~\": {\n      \"x_min\": 0,\n      \"x_max\": 0,\n      \"y_min\": 0,\n      \"y_max\": 0,\n      \"ha\": 0,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 308\n    }\n\n  },\n  \"fontFamily\": \"Petaluma Script\",\n  \"resolution\": 1000,\n  \"generatedOn\": \"2020-06-14T18:33:25.407Z\"\n};\n","export const RobotoSlabTextMetrics = {\n  name: 'Roboto Slab',\n  smufl: false,\n  spacing:50,\n  \"glyphs\": {\n    \" \": {\n      \"x_min\": 0,\n      \"x_max\": 509,\n      \"y_min\": 0,\n      \"y_max\": 2000,\n      \"ha\": 2000,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 509\n    },\n    \"0\": {\n      \"x_min\": 121,\n      \"x_max\": 1048,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1168\n    },\n    \"1\": {\n      \"x_min\": 117,\n      \"x_max\": 767,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 117,\n      \"advanceWidth\": 844\n    },\n    \"2\": {\n      \"x_min\": 75.8474576645637,\n      \"x_max\": 1040,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 75,\n      \"advanceWidth\": 1131\n    },\n    \"3\": {\n      \"x_min\": 74.85365853658536,\n      \"x_max\": 994,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1106\n    },\n    \"4\": {\n      \"x_min\": 63,\n      \"x_max\": 1114,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1187\n    },\n    \"5\": {\n      \"x_min\": 96.8448275474953,\n      \"x_max\": 982,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1081\n    },\n    \"6\": {\n      \"x_min\": 121,\n      \"x_max\": 1067,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1144\n    },\n    \"7\": {\n      \"x_min\": 76,\n      \"x_max\": 1060,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": -30,\n      \"advanceWidth\": 1128\n    },\n    \"8\": {\n      \"x_min\": 92,\n      \"x_max\": 1039,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 92,\n      \"advanceWidth\": 1131\n    },\n    \"9\": {\n      \"x_min\": 84,\n      \"x_max\": 1026,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1154\n    },\n    \"!\": {\n      \"x_min\": 143,\n      \"x_max\": 340,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 143,\n      \"advanceWidth\": 483\n    },\n    \"\\\"\": {\n      \"x_min\": 166,\n      \"x_max\": 634,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 770\n    },\n    \"#\": {\n      \"x_min\": 63,\n      \"x_max\": 1179,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 1246\n    },\n    \"$\": {\n      \"x_min\": 81.92156915727656,\n      \"x_max\": 1012,\n      \"y_min\": -208,\n      \"y_max\": 1693,\n      \"ha\": 1901,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1110\n    },\n    \"%\": {\n      \"x_min\": 77,\n      \"x_max\": 1384,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 77,\n      \"advanceWidth\": 1460\n    },\n    \"&\": {\n      \"x_min\": 74,\n      \"x_max\": 1242,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1289\n    },\n    \"'\": {\n      \"x_min\": 166,\n      \"x_max\": 324,\n      \"y_min\": 1055,\n      \"y_max\": 1560,\n      \"ha\": 505,\n      \"leftSideBearing\": 166,\n      \"advanceWidth\": 460\n    },\n    \"(\": {\n      \"x_min\": 114,\n      \"x_max\": 650,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 114,\n      \"advanceWidth\": 662\n    },\n    \")\": {\n      \"x_min\": 11,\n      \"x_max\": 547,\n      \"y_min\": -463,\n      \"y_max\": 1636,\n      \"ha\": 2099,\n      \"leftSideBearing\": 11,\n      \"advanceWidth\": 654\n    },\n    \"*\": {\n      \"x_min\": 66,\n      \"x_max\": 893,\n      \"y_min\": 607,\n      \"y_max\": 1456,\n      \"ha\": 849,\n      \"leftSideBearing\": 66,\n      \"advanceWidth\": 958\n    },\n    \"+\": {\n      \"x_min\": 73,\n      \"x_max\": 1071,\n      \"y_min\": 146,\n      \"y_max\": 1206,\n      \"ha\": 1060,\n      \"leftSideBearing\": 73,\n      \"advanceWidth\": 1145\n    },\n    \",\": {\n      \"x_min\": 23,\n      \"x_max\": 315,\n      \"y_min\": -311,\n      \"y_max\": 221,\n      \"ha\": 532,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 404\n    },\n    \"-\": {\n      \"x_min\": 154,\n      \"x_max\": 643,\n      \"y_min\": 538,\n      \"y_max\": 692,\n      \"ha\": 154,\n      \"leftSideBearing\": 154,\n      \"advanceWidth\": 797\n    },\n    \".\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 202,\n      \"ha\": 202,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 493\n    },\n    \"/\": {\n      \"x_min\": 0,\n      \"x_max\": 774,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 0,\n      \"advanceWidth\": 824\n    },\n    \":\": {\n      \"x_min\": 145,\n      \"x_max\": 342,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 145,\n      \"advanceWidth\": 419\n    },\n    \";\": {\n      \"x_min\": 53,\n      \"x_max\": 345,\n      \"y_min\": -311,\n      \"y_max\": 1082,\n      \"ha\": 1393,\n      \"leftSideBearing\": 53,\n      \"advanceWidth\": 424\n    },\n    \"<\": {\n      \"x_min\": 76,\n      \"x_max\": 892,\n      \"y_min\": 107,\n      \"y_max\": 1013,\n      \"ha\": 906,\n      \"leftSideBearing\": 76,\n      \"advanceWidth\": 1017\n    },\n    \"=\": {\n      \"x_min\": 147,\n      \"x_max\": 981,\n      \"y_min\": 407,\n      \"y_max\": 987,\n      \"ha\": 580,\n      \"leftSideBearing\": 147,\n      \"advanceWidth\": 1127\n    },\n    \">\": {\n      \"x_min\": 125,\n      \"x_max\": 980,\n      \"y_min\": 87,\n      \"y_max\": 993,\n      \"ha\": 906,\n      \"leftSideBearing\": 125,\n      \"advanceWidth\": 1060\n    },\n    \"?\": {\n      \"x_min\": 65.92660602419838,\n      \"x_max\": 890,\n      \"y_min\": 0,\n      \"y_max\": 1477,\n      \"ha\": 1477,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 953\n    },\n    \"@\": {\n      \"x_min\": 84.3592218305664,\n      \"x_max\": 1705.2346925277395,\n      \"y_min\": -453,\n      \"y_max\": 1431,\n      \"ha\": 1884,\n      \"leftSideBearing\": 84,\n      \"advanceWidth\": 1821\n    },\n    \"A\": {\n      \"x_min\": 70,\n      \"x_max\": 1463,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1533\n    },\n    \"B\": {\n      \"x_min\": 81,\n      \"x_max\": 1253,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1322\n    },\n    \"C\": {\n      \"x_min\": 80,\n      \"x_max\": 1174,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1290\n    },\n    \"D\": {\n      \"x_min\": 81,\n      \"x_max\": 1291,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1356\n    },\n    \"E\": {\n      \"x_min\": 81,\n      \"x_max\": 1190,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1306\n    },\n    \"F\": {\n      \"x_min\": 81,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1256\n    },\n    \"G\": {\n      \"x_min\": 80,\n      \"x_max\": 1226,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1346\n    },\n    \"H\": {\n      \"x_min\": 81,\n      \"x_max\": 1497,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1578\n    },\n    \"I\": {\n      \"x_min\": 81,\n      \"x_max\": 604,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 685\n    },\n    \"J\": {\n      \"x_min\": 60,\n      \"x_max\": 1100,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 60,\n      \"advanceWidth\": 1169\n    },\n    \"K\": {\n      \"x_min\": 81,\n      \"x_max\": 1427,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1501\n    },\n    \"L\": {\n      \"x_min\": 81,\n      \"x_max\": 1130,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1210\n    },\n    \"M\": {\n      \"x_min\": 94,\n      \"x_max\": 1888,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 94,\n      \"advanceWidth\": 1982\n    },\n    \"N\": {\n      \"x_min\": 83,\n      \"x_max\": 1509,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 83,\n      \"advanceWidth\": 1592\n    },\n    \"O\": {\n      \"x_min\": 70,\n      \"x_max\": 1281,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1351\n    },\n    \"P\": {\n      \"x_min\": 81,\n      \"x_max\": 1242,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1297\n    },\n    \"Q\": {\n      \"x_min\": 70,\n      \"x_max\": 1348,\n      \"y_min\": -245,\n      \"y_max\": 1477,\n      \"ha\": 1722,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1376\n    },\n    \"R\": {\n      \"x_min\": 81,\n      \"x_max\": 1285,\n      \"y_min\": 0,\n      \"y_max\": 1455,\n      \"ha\": 1455,\n      \"leftSideBearing\": 81,\n      \"advanceWidth\": 1385\n    },\n    \"S\": {\n      \"x_min\": 115,\n      \"x_max\": 1116,\n      \"y_min\": -21,\n      \"y_max\": 1477,\n      \"ha\": 1498,\n      \"leftSideBearing\": 115,\n      \"advanceWidth\": 1206\n    },\n    \"T\": {\n      \"x_min\": 96,\n      \"x_max\": 1306,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 96,\n      \"advanceWidth\": 1406\n    },\n    \"U\": {\n      \"x_min\": 70,\n      \"x_max\": 1452,\n      \"y_min\": -21,\n      \"y_max\": 1456,\n      \"ha\": 1477,\n      \"leftSideBearing\": 70,\n      \"advanceWidth\": 1522\n    },\n    \"V\": {\n      \"x_min\": 65,\n      \"x_max\": 1443,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1508\n    },\n    \"W\": {\n      \"x_min\": 72,\n      \"x_max\": 2057,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 2129\n    },\n    \"X\": {\n      \"x_min\": 80,\n      \"x_max\": 1449,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 80,\n      \"advanceWidth\": 1529\n    },\n    \"Y\": {\n      \"x_min\": 65,\n      \"x_max\": 1396,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 65,\n      \"advanceWidth\": 1461\n    },\n    \"Z\": {\n      \"x_min\": 90,\n      \"x_max\": 1107,\n      \"y_min\": 0,\n      \"y_max\": 1456,\n      \"ha\": 1456,\n      \"leftSideBearing\": 90,\n      \"advanceWidth\": 1197\n    },\n    \"[\": {\n      \"x_min\": 157,\n      \"x_max\": 541,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 157,\n      \"advanceWidth\": 573\n    },\n    \"\\\\\": {\n      \"x_min\": 36,\n      \"x_max\": 830,\n      \"y_min\": -125,\n      \"y_max\": 1456,\n      \"ha\": 1581,\n      \"leftSideBearing\": 36,\n      \"advanceWidth\": 841\n    },\n    \"]\": {\n      \"x_min\": 23,\n      \"x_max\": 408,\n      \"y_min\": -312,\n      \"y_max\": 1664,\n      \"ha\": 1976,\n      \"leftSideBearing\": 23,\n      \"advanceWidth\": 552\n    },\n    \"^\": {\n      \"x_min\": 71,\n      \"x_max\": 802,\n      \"y_min\": 729,\n      \"y_max\": 1456,\n      \"ha\": 727,\n      \"leftSideBearing\": 71,\n      \"advanceWidth\": 864\n    },\n    \"_\": {\n      \"x_min\": 119,\n      \"x_max\": 1041,\n      \"y_min\": -154,\n      \"y_max\": 0,\n      \"ha\": 154,\n      \"leftSideBearing\": 119,\n      \"advanceWidth\": 1168\n    },\n    \"`\": {\n      \"x_min\": 40,\n      \"x_max\": 456,\n      \"y_min\": 1288,\n      \"y_max\": 1560,\n      \"ha\": 272,\n      \"leftSideBearing\": 40,\n      \"advanceWidth\": 496\n    },\n    \"a\": {\n      \"x_min\": 79,\n      \"x_max\": 1053,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 79,\n      \"advanceWidth\": 1132\n    },\n    \"b\": {\n      \"x_min\": -16,\n      \"x_max\": 1071,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": -16,\n      \"advanceWidth\": 1145\n    },\n    \"c\": {\n      \"x_min\": 78,\n      \"x_max\": 988,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1067\n    },\n    \"d\": {\n      \"x_min\": 78,\n      \"x_max\": 1156,\n      \"y_min\": -21,\n      \"y_max\": 1560,\n      \"ha\": 1581,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1218\n    },\n    \"e\": {\n      \"x_min\": 74,\n      \"x_max\": 980,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1059\n    },\n    \"f\": {\n      \"x_min\": 64,\n      \"x_max\": 731,\n      \"y_min\": 0,\n      \"y_max\": 1581,\n      \"ha\": 1581,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 725\n    },\n    \"g\": {\n      \"x_min\": 78,\n      \"x_max\": 1133,\n      \"y_min\": -437,\n      \"y_max\": 1102,\n      \"ha\": 1539,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1157\n    },\n    \"h\": {\n      \"x_min\": 49,\n      \"x_max\": 1255,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 49,\n      \"advanceWidth\": 1315\n    },\n    \"i\": {\n      \"x_min\": 67,\n      \"x_max\": 590,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 67,\n      \"advanceWidth\": 652\n    },\n    \"j\": {\n      \"x_min\": -56,\n      \"x_max\": 381,\n      \"y_min\": -437,\n      \"y_max\": 1560,\n      \"ha\": 1997,\n      \"leftSideBearing\": -56,\n      \"advanceWidth\": 525\n    },\n    \"k\": {\n      \"x_min\": 64,\n      \"x_max\": 1248,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 1287\n    },\n    \"l\": {\n      \"x_min\": 64,\n      \"x_max\": 587,\n      \"y_min\": 0,\n      \"y_max\": 1560,\n      \"ha\": 1560,\n      \"leftSideBearing\": 64,\n      \"advanceWidth\": 653\n    },\n    \"m\": {\n      \"x_min\": 74,\n      \"x_max\": 1905,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1977\n    },\n    \"n\": {\n      \"x_min\": 74,\n      \"x_max\": 1278,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 74,\n      \"advanceWidth\": 1343\n    },\n    \"o\": {\n      \"x_min\": 78,\n      \"x_max\": 1046,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1124\n    },\n    \"p\": {\n      \"x_min\": 34,\n      \"x_max\": 1119,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 34,\n      \"advanceWidth\": 1197\n    },\n    \"q\": {\n      \"x_min\": 78,\n      \"x_max\": 1135,\n      \"y_min\": -416,\n      \"y_max\": 1102,\n      \"ha\": 1518,\n      \"leftSideBearing\": 78,\n      \"advanceWidth\": 1139\n    },\n    \"r\": {\n      \"x_min\": 72,\n      \"x_max\": 808,\n      \"y_min\": 0,\n      \"y_max\": 1102,\n      \"ha\": 1102,\n      \"leftSideBearing\": 72,\n      \"advanceWidth\": 854\n    },\n    \"s\": {\n      \"x_min\": 104,\n      \"x_max\": 933,\n      \"y_min\": -21,\n      \"y_max\": 1102,\n      \"ha\": 1123,\n      \"leftSideBearing\": 104,\n      \"advanceWidth\": 1022\n    },\n    \"t\": {\n      \"x_min\": 24,\n      \"x_max\": 678,\n      \"y_min\": -17,\n      \"y_max\": 1343,\n      \"ha\": 1360,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 730\n    },\n    \"u\": {\n      \"x_min\": 52,\n      \"x_max\": 1181,\n      \"y_min\": -21,\n      \"y_max\": 1082,\n      \"ha\": 1103,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1245\n    },\n    \"v\": {\n      \"x_min\": 26,\n      \"x_max\": 1176,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 26,\n      \"advanceWidth\": 1206\n    },\n    \"w\": {\n      \"x_min\": 52,\n      \"x_max\": 1777,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 52,\n      \"advanceWidth\": 1823\n    },\n    \"x\": {\n      \"x_min\": 42,\n      \"x_max\": 1163,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 42,\n      \"advanceWidth\": 1203\n    },\n    \"y\": {\n      \"x_min\": 24,\n      \"x_max\": 1172,\n      \"y_min\": -437,\n      \"y_max\": 1082,\n      \"ha\": 1519,\n      \"leftSideBearing\": 24,\n      \"advanceWidth\": 1192\n    },\n    \"z\": {\n      \"x_min\": 88,\n      \"x_max\": 960,\n      \"y_min\": 0,\n      \"y_max\": 1082,\n      \"ha\": 1082,\n      \"leftSideBearing\": 88,\n      \"advanceWidth\": 1032\n    },\n    \"{\": {\n      \"x_min\": 63,\n      \"x_max\": 671,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 63,\n      \"advanceWidth\": 701\n    },\n    \"|\": {\n      \"x_min\": 150,\n      \"x_max\": 307,\n      \"y_min\": -270,\n      \"y_max\": 1456,\n      \"ha\": 1726,\n      \"leftSideBearing\": 150,\n      \"advanceWidth\": 451\n    },\n    \"}\": {\n      \"x_min\": 27,\n      \"x_max\": 635,\n      \"y_min\": -364,\n      \"y_max\": 1597,\n      \"ha\": 1961,\n      \"leftSideBearing\": 27,\n      \"advanceWidth\": 701\n    },\n    \"~\": {\n      \"x_min\": 121,\n      \"x_max\": 1257,\n      \"y_min\": 401,\n      \"y_max\": 803,\n      \"ha\": 402,\n      \"leftSideBearing\": 121,\n      \"advanceWidth\": 1386\n    }\n  },\n  \"fontFamily\": \"Roboto Slab\",\n  \"resolution\": 2048,\n  \"generatedOn\": \"2020-06-15T19:12:58.120Z\"\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file handles a registry of text font metric information, so all\n// VEX modules can take advantage of font metrics in a uniform way.\n//\n\nimport { PetalumaScriptTextMetrics } from './fonts/petalumascript_textmetrics';\nimport { RobotoSlabTextMetrics } from './fonts/robotoslab_textmetrics';\nimport { FontInfo } from './types/common';\nimport { log, RuntimeError } from './util';\n\nexport interface TextFontMetrics {\n  x_min: number;\n  x_max: number;\n  y_min: number;\n  y_max: number;\n  ha: number;\n  leftSideBearing: number;\n  advanceWidth: number;\n}\n\nexport interface TextFontRegistry {\n  [name: string]: unknown;\n  name?: string;\n  resolution?: number;\n  glyphs?: Record<string, TextFontMetrics>;\n  family: string;\n  serifs: boolean;\n  monospaced?: boolean;\n  italic: boolean;\n  bold: boolean;\n  maxSizeGlyph?: string;\n  superscriptOffset?: number;\n  subscriptOffset?: number;\n  description: string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextFont.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextFont.DEBUG) log('Vex.Flow.TextFont', args);\n}\n\nexport class TextFont {\n  static DEBUG: boolean;\n  static get CATEGORY(): string {\n    return 'TextFont';\n  }\n\n  resolution: number = 1000;\n  protected name?: string;\n  protected glyphs: Record<string, TextFontMetrics> = {};\n  protected family: string = '';\n  protected serifs?: boolean;\n  protected monospaced?: boolean;\n  protected italic?: boolean;\n  protected bold?: boolean;\n  protected superscriptOffset?: number;\n  protected subscriptOffset?: number;\n  protected description?: string;\n  protected maxSizeGlyph: string;\n  protected weight: string;\n  protected style: string;\n  protected fontCacheKey: string = '';\n\n  protected static registryInstance: TextFontRegistry[];\n  protected static textWidthCacheInstance?: Record<string, Record<string, number>>;\n\n  protected size: number;\n  protected attrs: { type: string };\n\n  // ### fontRegistry\n  // Getter of an array of available fonts.  Applications may register their\n  // own fonts and the metrics for those fonts will be available to the\n  // application.\n  static get fontRegistry(): TextFontRegistry[] {\n    if (!TextFont.registryInstance) {\n      TextFont.registryInstance = [];\n      TextFont.registryInstance.push({\n        name: 'Roboto Slab',\n        resolution: RobotoSlabTextMetrics.resolution,\n        glyphs: RobotoSlabTextMetrics.glyphs,\n        family: RobotoSlabTextMetrics.fontFamily,\n        serifs: true,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default serif text font to pair with Bravura/Gonville engraving font',\n      });\n      TextFont.registryInstance.push({\n        name: 'petalumaScript',\n        resolution: PetalumaScriptTextMetrics.resolution,\n        glyphs: PetalumaScriptTextMetrics.glyphs,\n        family: PetalumaScriptTextMetrics.fontFamily,\n        serifs: false,\n        monospaced: false,\n        italic: false,\n        bold: false,\n        maxSizeGlyph: 'H',\n        superscriptOffset: 0.66,\n        subscriptOffset: 0.66,\n        description: 'Default sans-serif text font to pair with Petaluma engraving font',\n      });\n    }\n    return TextFont.registryInstance;\n  }\n\n  // ### getFontFamilies\n  // Web font files are generally distributed per weight and style (bold, italic).\n  // return the family with the attributes that are available for that font.\n  // We assume descriptions are the same for different weights/styles.\n  static getFontFamilies(): TextFontRegistry[] {\n    const hash: Record<string, TextFontRegistry> = {};\n    const returnedFonts: TextFontRegistry[] = [];\n    TextFont.fontRegistry.forEach((font) => {\n      if (!hash[font.family]) {\n        hash[font.family] = {\n          family: font.family,\n          description: font.description,\n          bold: font.bold,\n          serifs: font.serifs,\n          italic: font.italic,\n        };\n      } else {\n        ['bold', 'italic', 'monospaced', 'serifs'].forEach((attr) => {\n          if (font[attr]) {\n            hash[font.family][attr] = true;\n          }\n        });\n      }\n    });\n    const keys = Object.keys(hash);\n    keys.forEach((key) => {\n      returnedFonts.push(hash[key]);\n    });\n    return returnedFonts;\n  }\n\n  // ### fontWeightToBold\n  // return true if the font weight indicates we desire a 'bold'\n  // used in getTextFontFromVexFontData\n  static fontWeightToBold(fw?: string): boolean {\n    if (!fw) {\n      return false;\n    }\n    if (isNaN(parseInt(fw, 10))) {\n      return fw.toLowerCase() === 'bold';\n    }\n    // very subjective...\n    return parseInt(fw, 10) >= 600;\n  }\n\n  // ### fontStyleToItalic\n  // return true if the font style indicates we desire 'italic' style\n  // used in getTextFontFromVexFontData\n  static fontStyleToItalic(fs?: string): boolean {\n    return typeof fs === 'string' && fs.toLowerCase() === 'italic';\n  }\n\n  // ### textWidthCache\n  // Static cache of widths hashed on font/string.\n  static get textWidthCache(): Record<string, Record<string, number>> {\n    if (typeof TextFont.textWidthCacheInstance === 'undefined') {\n      TextFont.textWidthCacheInstance = {};\n    }\n    return TextFont.textWidthCacheInstance;\n  }\n\n  // ### getTextFontFromVexFontData\n  // Find the font that most closely matches the parameters from the given font data.\n  // Primarily we look for font family, also bold and italic attributes.  This\n  // method will always return a fallback font if there are no matches.\n  static getTextFontFromVexFontData(fd: FontInfo): TextFont {\n    let i = 0;\n    let selectedFont = undefined;\n    const fallback = TextFont.fontRegistry[0];\n    let candidates: TextFontRegistry[] = [];\n    if (!fd.family) {\n      fd.family = 'Arial';\n    }\n    const families = fd.family.split(',');\n    for (i = 0; i < families.length; ++i) {\n      const famliy = families[i];\n      candidates = TextFont.fontRegistry.filter((font) => font.family === famliy);\n      if (candidates.length) {\n        break;\n      }\n    }\n    if (candidates.length === 0) {\n      selectedFont = new TextFont(fallback);\n    } else if (candidates.length === 1) {\n      selectedFont = new TextFont(candidates[0]);\n    } else {\n      const bold = TextFont.fontWeightToBold(fd.weight);\n      const italic = TextFont.fontStyleToItalic(fd.style);\n      const perfect = candidates.find((font) => font.bold === bold && font.italic === italic);\n      if (perfect) {\n        selectedFont = new TextFont(perfect);\n      } else {\n        const ok = candidates.find((font) => font.italic === italic || font.bold === bold);\n        if (ok) {\n          selectedFont = new TextFont(ok);\n        } else {\n          selectedFont = new TextFont(candidates[0]);\n        }\n      }\n    }\n    if (typeof fd.size === 'number' && fd.size > 0) {\n      selectedFont.setFontSize(fd.size);\n    }\n    return selectedFont;\n  }\n\n  static getFontDataByName(fontName: string): TextFontRegistry | undefined {\n    return TextFont.fontRegistry.find((fd) => fd.name === fontName);\n  }\n\n  // ### registerFont\n  // Applications may register their own fonts and the metrics, and those metrics\n  // will be available to the application for formatting.  See fontRegistry\n  // for format of font metrics.  Metrics can be generated from any font file\n  // using font_fontgen.js in the tools/smufl directory.\n  static registerFont(fontData: TextFontRegistry, overwrite?: boolean): void {\n    // Get via external reference to make sure initial object is created\n    const reg = TextFont.fontRegistry;\n    const exists = reg.find((td) => fontData.name === td.name);\n    if (exists && overwrite) {\n      TextFont.registryInstance = TextFont.fontRegistry.filter((fd) => fd.name !== exists.name);\n    }\n    if (!exists) {\n      L('registering font ' + fontData.name);\n      TextFont.registryInstance.push(fontData);\n    }\n  }\n\n  // ## Prototype Methods\n  //\n  // create a font instance.\n  // The preferred method for returning an instance of this class is via\n  // getTextFontFromVexFontData\n  constructor(params: TextFontRegistry) {\n    this.size = 14;\n    this.maxSizeGlyph = 'H';\n    this.weight = '';\n    this.style = '';\n    this.attrs = { type: TextFont.CATEGORY };\n    if (!params.name) {\n      throw new RuntimeError('BadArgument', 'Font constructor must specify a name');\n    }\n    const fontData = params.glyphs ? params : TextFont.getFontDataByName(params.name);\n    if (!fontData) {\n      if (params.glyphs && params.resolution) {\n        TextFont.registerFont(params);\n      } else {\n        throw new RuntimeError('BadArgument', 'Unknown font, must have glyph metrics and resolution');\n      }\n    } else {\n      this.updateParams(fontData);\n    }\n    this.updateParams(params);\n\n    this.updateCacheKey();\n  }\n\n  updateParams(params: TextFontRegistry): void {\n    if (params.name) this.name = params.name;\n    if (params.resolution) this.resolution = params.resolution;\n    if (params.glyphs) this.glyphs = params.glyphs;\n    this.family = params.family;\n    this.serifs = params.serifs;\n    if (params.monospaced) this.monospaced = params.monospaced;\n    this.italic = params.italic;\n    this.bold = params.bold;\n    if (params.maxSizeGlyph) this.maxSizeGlyph = params.maxSizeGlyph;\n    if (params.superscriptOffset) this.superscriptOffset = params.superscriptOffset;\n    if (params.subscriptOffset) this.subscriptOffset = params.subscriptOffset;\n  }\n\n  // Create a hash with the current font data, so we can cache computed widths\n  updateCacheKey(): void {\n    this.fontCacheKey = `${this.family}-${this.size}-${this.weight}-${this.style}`;\n  }\n\n  getMetricForCharacter(c: string): TextFontMetrics {\n    if (this.glyphs[c]) {\n      return this.glyphs[c];\n    }\n    return this.glyphs[this.maxSizeGlyph];\n  }\n\n  get maxHeight(): number {\n    const glyph = this.getMetricForCharacter(this.maxSizeGlyph);\n    return (glyph.ha / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForCharacter(c: string): number {\n    const metric = this.getMetricForCharacter(c);\n    if (!metric) {\n      return 0.65 * this.pointsToPixels;\n    }\n    return (metric.advanceWidth / this.resolution) * this.pointsToPixels;\n  }\n\n  getWidthForString(s: string): number {\n    // Store width in 2-level cache, so I don't have to recompute for\n    // same string/font\n    if (typeof TextFont.textWidthCache[this.fontCacheKey] === 'undefined') {\n      TextFont.textWidthCache[this.fontCacheKey] = {};\n    }\n    let width = 0;\n    if (!TextFont.textWidthCache[this.fontCacheKey][s]) {\n      for (let j = 0; j < s.length; ++j) {\n        width += this.getWidthForCharacter(s[j]);\n      }\n      TextFont.textWidthCache[this.fontCacheKey][s] = width;\n    }\n    return TextFont.textWidthCache[this.fontCacheKey][s];\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels(): number {\n    return this.size / 72 / (1 / 96);\n  }\n\n  setFontSize(size: number): this {\n    this.size = size;\n    // font size mangled into cache key, so use the correct one.\n    this.updateCacheKey();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TextFont } from './textfont';\nimport { FontInfo } from './types/common';\nimport { log } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Annotation.DEBUG) log('Vex.Flow.Annotation', args);\n}\n\nenum Justify {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n  CENTER_STEM = 4,\n}\n\nenum VerticalJustify {\n  TOP = 1,\n  CENTER = 2,\n  BOTTOM = 3,\n  CENTER_STEM = 4,\n}\n\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Annotations category string. */\n  static get CATEGORY(): string {\n    return 'Annotation';\n  }\n\n  /** Text annotations can be positioned and justified relative to the note. */\n  static Justify = Justify;\n\n  static JustifyString: Record<string, number> = {\n    left: Justify.LEFT,\n    right: Justify.RIGHT,\n    center: Justify.CENTER,\n    centerStem: Justify.CENTER_STEM,\n  };\n\n  static VerticalJustify = VerticalJustify;\n\n  static VerticalJustifyString: Record<string, number> = {\n    above: Annotation.VerticalJustify.TOP,\n    top: Annotation.VerticalJustify.TOP,\n    below: Annotation.VerticalJustify.BOTTOM,\n    bottom: Annotation.VerticalJustify.BOTTOM,\n    center: Annotation.VerticalJustify.CENTER,\n    centerStem: Annotation.VerticalJustify.CENTER_STEM,\n  };\n\n  /** Arrange annotations within a `ModifierContext` */\n  static format(annotations: Annotation[], state: ModifierContextState): boolean {\n    if (!annotations || annotations.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < annotations.length; ++i) {\n      let testWidth = 0;\n      const annotation = annotations[i];\n      const textFont = TextFont.getTextFontFromVexFontData({\n        family: annotation.font.family,\n        size: annotation.font.size,\n        weight: 'normal',\n      });\n      // Calculate if the vertical extent will exceed a single line and adjust accordingly.\n      const numLines = Math.floor(textFont.maxHeight / Tables.STAVE_LINE_DISTANCE) + 1;\n      // Get the string width from the font metrics\n      testWidth = textFont.getWidthForString(annotation.text);\n      width = Math.max(width, testWidth);\n      if (annotation.getPosition() === Modifier.Position.ABOVE) {\n        annotation.setTextLine(state.top_text_line);\n        state.top_text_line += numLines;\n      } else {\n        annotation.setTextLine(state.text_line);\n        state.text_line += numLines;\n      }\n    }\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  protected justification: Justify;\n  protected vert_justification: VerticalJustify;\n  protected text: string;\n  // Initialized by the constructor via this.setFont('Arial', 10).\n  protected font!: FontInfo;\n\n  /**\n   * Annotations inherit from `Modifier` and is positioned correctly when\n   * in a `ModifierContext`.\n   * Create a new `Annotation` with the string `text`.\n   */\n  constructor(text: string) {\n    super();\n\n    this.text = text;\n    this.justification = Justify.CENTER;\n    this.vert_justification = Annotation.VerticalJustify.TOP;\n    this.setFont('Arial', 10);\n\n    // The default width is calculated from the text.\n    this.setWidth(Tables.textWidth(text));\n  }\n\n  /** Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`. */\n  setFont(family: string, size: number, weight: string = ''): this {\n    this.font = { family, size, weight };\n    return this;\n  }\n\n  /**\n   * Set vertical position of text (above or below stave).\n   * @param just value in `Annotation.VerticalJustify`.\n   */\n  setVerticalJustification(just: string | VerticalJustify): this {\n    this.vert_justification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n    return this;\n  }\n\n  /**\n   * Get horizontal justification.\n   */\n  getJustification(): Justify {\n    return this.justification;\n  }\n\n  /**\n   * Set horizontal justification.\n   * @param justification value in `Annotation.Justify`.\n   */\n  setJustification(just: string | Justify): this {\n    this.justification = typeof just === 'string' ? Annotation.JustifyString[just] : just;\n    return this;\n  }\n\n  /** Render text beside the note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n\n    // We're changing context parameters. Save current state.\n    ctx.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText(this.text).width;\n\n    // Estimate text height to be the same as the width of an 'm'.\n    //\n    // This is a hack to work around the inability to measure text height\n    // in HTML5 Canvas (and SVG).\n    const text_height = ctx.measureText('m').width;\n    let x;\n    let y;\n\n    if (this.justification === Annotation.Justify.LEFT) {\n      x = start.x;\n    } else if (this.justification === Annotation.Justify.RIGHT) {\n      x = start.x - text_width;\n    } else if (this.justification === Annotation.Justify.CENTER) {\n      x = start.x - text_width / 2;\n    } /* CENTER_STEM */ else {\n      x = (note as StemmableNote).getStemX() - text_width / 2;\n    }\n\n    let stem_ext: Record<string, number> = {};\n    let spacing = 0;\n    const has_stem = note.hasStem();\n    const stave = note.checkStave();\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    if (has_stem) {\n      stem_ext = (note as StemmableNote).checkStem().getExtents();\n      spacing = stave.getSpacingBetweenLines();\n    }\n\n    if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin\n      // is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n      if (has_stem) {\n        const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {\n      const yt = note.getYForTopText(this.text_line) - 1;\n      const yb = stave.getYForBottomText(this.text_line);\n      y = yt + (yb - yt) / 2 + text_height / 2;\n    } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {\n      y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\n      if (has_stem) {\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    } /* CENTER_STEM */ else {\n      const extents = note.getStemExtents();\n      y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\n    }\n\n    L('Rendering annotation: ', this.text, x, y);\n    ctx.fillText(this.text, x, y);\n    ctx.closeGroup();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n// MIT License\n\nimport { Builder } from './easyscore';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { isGraceNote, isStaveNote, isTabNote } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n\nexport interface ArticulationStruct {\n  code?: string;\n  aboveCode?: string;\n  belowCode?: string;\n  between_lines: boolean;\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Articulation.DEBUG) log('Vex.Flow.Articulation', args);\n}\n\nconst { ABOVE, BELOW } = Modifier.Position;\n\nfunction roundToNearestHalf(mathFn: (a: number) => number, value: number): number {\n  return mathFn(value / 0.5) * 0.5;\n}\n\n// This includes both staff and ledger lines\nfunction isWithinLines(line: number, position: number): boolean {\n  return position === ABOVE ? line <= 5 : line >= 1;\n}\n\nfunction getRoundingFunction(line: number, position: number): (a: number) => number {\n  if (isWithinLines(line, position)) {\n    if (position === ABOVE) {\n      return Math.ceil;\n    } else {\n      return Math.floor;\n    }\n  } else {\n    return Math.round;\n  }\n}\n\nfunction snapLineToStaff(canSitBetweenLines: boolean, line: number, position: number, offsetDirection: number): number {\n  // Initially, snap to nearest staff line or space\n  const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n  const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n  const onStaffLine = snappedLine % 1 === 0;\n\n  if (canSnapToStaffSpace && onStaffLine) {\n    const HALF_STAFF_SPACE = 0.5;\n    return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n  } else {\n    return snappedLine;\n  }\n}\n\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note: Note) => isStaveNote(note) || isGraceNote(note);\n\nfunction getTopY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveOrGraceNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return stemBaseY;\n      }\n    } else {\n      return Math.min(...note.getYs());\n    }\n  } else if (isTabNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return note.checkStave().getYForTopText(textLine);\n      }\n    } else {\n      return note.checkStave().getYForTopText(textLine);\n    }\n  } else {\n    throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\nfunction getBottomY(note: Note, textLine: number): number {\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveOrGraceNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemBaseY;\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return Math.max(...note.getYs());\n    }\n  } else if (isTabNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return note.checkStave().getYForBottomText(textLine);\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return note.checkStave().getYForBottomText(textLine);\n    }\n  } else {\n    throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n  }\n}\n\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nfunction getInitialOffset(note: Note, position: number): number {\n  const isOnStemTip =\n    (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n    (position === BELOW && note.getStemDirection() === Stem.DOWN);\n\n  if (isStaveOrGraceNote(note)) {\n    if (note.hasStem() && isOnStemTip) {\n      return 0.5;\n    } else {\n      // this amount is larger than the stem-tip offset because we start from\n      // the center of the notehead\n      return 1;\n    }\n  } else {\n    if (note.hasStem() && isOnStemTip) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}\n\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `Vex.Flow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Articulations category string. */\n  static get CATEGORY(): string {\n    return 'Articulation';\n  }\n\n  protected static readonly INITIAL_OFFSET: number = -0.5;\n\n  /** Articulation code provided to the constructor. */\n  readonly type: string;\n\n  public render_options: { font_scale: number };\n  // articulation defined calling reset in constructor\n  protected articulation!: ArticulationStruct;\n  // glyph defined calling reset in constructor\n  protected glyph!: Glyph;\n\n  /**\n   * FIXME:\n   * Most of the complex formatting logic (ie: snapping to space) is\n   * actually done in .render(). But that logic belongs in this method.\n   *\n   * Unfortunately, this isn't possible because, by this point, stem lengths\n   * have not yet been finalized. Finalized stem lengths are required to determine the\n   * initial position of any stem-side articulation.\n   *\n   * This indicates that all objects should have their stave set before being\n   * formatted. It can't be an optional if you want accurate vertical positioning.\n   * Consistently positioned articulations that play nice with other modifiers\n   * won't be possible until we stop relying on render-time formatting.\n   *\n   * Ideally, when this function has completed, the vertical articulation positions\n   * should be ready to render without further adjustment. But the current state\n   * is far from this ideal.\n   */\n  static format(articulations: Articulation[], state: ModifierContextState): boolean {\n    if (!articulations || articulations.length === 0) return false;\n\n    const isAbove = (artic: Articulation) => artic.getPosition() === ABOVE;\n    const isBelow = (artic: Articulation) => artic.getPosition() === BELOW;\n    const margin = 0.5;\n    const getIncrement = (articulation: Articulation, line: number, position: number) =>\n      roundToNearestHalf(\n        getRoundingFunction(line, position),\n        defined(articulation.glyph.getMetrics().height) / 10 + margin\n      );\n\n    articulations.filter(isAbove).forEach((articulation) => {\n      articulation.setTextLine(state.top_text_line);\n      state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);\n    });\n\n    articulations.filter(isBelow).forEach((articulation) => {\n      articulation.setTextLine(state.text_line);\n      state.text_line += getIncrement(articulation, state.text_line, BELOW);\n    });\n\n    const width = articulations\n      .map((articulation) => articulation.getWidth())\n      .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  static easyScoreHook({ articulations }: { articulations: string }, note: StaveNote, builder: Builder): void {\n    if (!articulations) return;\n\n    const articNameToCode: Record<string, string> = {\n      staccato: 'a.',\n      tenuto: 'a-',\n      accent: 'a>',\n    };\n\n    articulations\n      .split(',')\n      .map((articString) => articString.trim().split('.'))\n      .map(([name, position]) => {\n        const artic: { type: string; position?: number } = { type: articNameToCode[name] };\n        if (position) artic.position = Modifier.PositionString[position];\n        return builder.getFactory().Articulation(artic);\n      })\n      .map((artic) => note.addModifier(artic, 0));\n  }\n\n  /**\n   * Create a new articulation.\n   * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts`\n   */\n  constructor(type: string) {\n    super();\n\n    this.type = type;\n    this.position = BELOW;\n    this.render_options = {\n      font_scale: 38,\n    };\n\n    this.reset();\n  }\n\n  protected reset(): void {\n    this.articulation = Tables.articulationCodes(this.type);\n    const articulation = defined(this.articulation, 'ArgumentError', `Articulation not found: ${this.type}`);\n    const code = (this.position === ABOVE ? articulation.aboveCode : articulation.belowCode) || articulation.code;\n    this.glyph = new Glyph(code ?? '', this.render_options.font_scale);\n\n    this.setWidth(defined(this.glyph.getMetrics().width));\n  }\n\n  /** Render articulation in position next to note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const index = this.checkIndex();\n    const { position, glyph, text_line: textLine } = this;\n    const canSitBetweenLines = this.articulation.between_lines;\n\n    const stave = note.checkStave();\n    const staffSpace = stave.getSpacingBetweenLines();\n    const isTab = isTabNote(note);\n\n    // Articulations are centered over/under the note head.\n    const { x } = note.getModifierStartXY(position, index);\n    const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n\n    const initialOffset = getInitialOffset(note, position);\n\n    const padding = this.musicFont.lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);\n\n    let y = (\n      {\n        [ABOVE]: () => {\n          glyph.setOrigin(0.5, 1);\n          const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n        [BELOW]: () => {\n          glyph.setOrigin(0.5, 0);\n          const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n          return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n        },\n      } as Record<number, () => number>\n    )[position]();\n\n    if (!isTab) {\n      const offsetDirection = position === ABOVE ? -1 : +1;\n      const noteLine = note.getKeyProps()[index].line;\n      const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n      const articLine = distanceFromNote + Number(noteLine);\n      const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n\n      if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);\n\n      y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;\n    }\n\n    L(`Rendering articulation at (x: ${x}, y: ${y})`);\n\n    glyph.render(ctx, x, y);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n\nexport interface BendPhrase {\n  x?: number;\n  type: number;\n  text: string;\n  width?: number;\n  draw_width?: number;\n}\n\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n  static get CATEGORY(): string {\n    return 'Bend';\n  }\n\n  static get UP(): number {\n    return 0;\n  }\n\n  static get DOWN(): number {\n    return 1;\n  }\n\n  // Arrange bends in `ModifierContext`\n  static format(bends: Bend[], state: ModifierContextState): boolean {\n    if (!bends || bends.length === 0) return false;\n\n    let last_width = 0;\n    // Bends are always on top.\n    const text_line = state.top_text_line;\n\n    // Format Bends\n    for (let i = 0; i < bends.length; ++i) {\n      const bend = bends[i];\n      bend.setXShift(last_width);\n      last_width = bend.getWidth();\n      bend.setTextLine(text_line);\n    }\n\n    state.right_shift += last_width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  protected text: string;\n  protected release: boolean;\n  protected phrase: BendPhrase[];\n  protected font: string;\n  public render_options: {\n    line_width: number;\n    release_width: number;\n    bend_width: number;\n    line_style: string;\n  };\n\n  /**\n   * Example of a phrase:\n   * ```\n   *    [{\n   *     type: UP,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: DOWN,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: UP,\n   *     text: \"half\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: UP,\n   *     text: \"whole\"\n   *     width: 8;\n   *   },\n   *   {\n   *     type: DOWN,\n   *     text: \"1 1/2\"\n   *     width: 8;\n   *   }]\n   * ```\n   * @param text text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n   * @param release if true, render a release. (DEPRECATED)\n   * @param phrase if set, ignore \"text\" and \"release\", and use the more sophisticated phrase specified\n   */\n  constructor(text: string, release: boolean = false, phrase?: BendPhrase[]) {\n    super();\n\n    this.text = text;\n    this.x_shift = 0;\n    this.release = release;\n    this.font = '10pt Arial';\n    this.render_options = {\n      line_width: 1.5,\n      line_style: '#777777',\n      bend_width: 8,\n      release_width: 8,\n    };\n\n    if (phrase) {\n      this.phrase = phrase;\n    } else {\n      // Backward compatibility\n      this.phrase = [{ type: Bend.UP, text: this.text }];\n      if (this.release) this.phrase.push({ type: Bend.DOWN, text: '' });\n    }\n\n    this.updateWidth();\n  }\n\n  /** Set horizontal shift in pixels. */\n  setXShift(value: number): this {\n    this.x_shift = value;\n    this.updateWidth();\n    return this;\n  }\n\n  /** Set text's font. */\n  setFont(font: string): this {\n    this.font = font;\n    return this;\n  }\n\n  /** Get text provided in the constructor. */\n  getText(): string {\n    return this.text;\n  }\n\n  /** Recalculate width. */\n  protected updateWidth(): this {\n    // eslint-disable-next-line\n    const that = this;\n\n    function measure_text(text: string) {\n      let text_width;\n      const ctxThat = that.getContext();\n      if (ctxThat) {\n        text_width = ctxThat.measureText(text).width;\n      } else {\n        text_width = Tables.textWidth(text);\n      }\n\n      return text_width;\n    }\n\n    let total_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (bend.width != undefined) {\n        total_width += bend.width;\n      } else {\n        const additional_width =\n          bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\n\n        bend.width = Math.max(additional_width, measure_text(bend.text)) + 3;\n        bend.draw_width = bend.width / 2;\n        total_width += bend.width;\n      }\n    }\n\n    this.setWidth(total_width + this.x_shift);\n    return this;\n  }\n\n  /** Draw the bend on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n    start.x += 3;\n    start.y += 0.5;\n    const x_shift = this.x_shift;\n\n    const stave = note.checkStave();\n    const bend_height = stave.getYForTopText(this.text_line) + 3;\n    const annotation_y = stave.getYForTopText(this.text_line) - 1;\n    // eslint-disable-next-line\n    const that = this;\n\n    function renderBend(x: number, y: number, width: number, height: number) {\n      const cp_x = x + width;\n      const cp_y = y;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, y);\n      ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderRelease(x: number, y: number, width: number, height: number) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, height);\n      ctx.quadraticCurveTo(x + width, height, x + width, y);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderArrowHead(x: number, y: number, direction?: number) {\n      const width = 4;\n      const dir = direction || 1;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x - width, y + width * dir);\n      ctx.lineTo(x + width, y + width * dir);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    function renderText(x: number, text: string) {\n      ctx.save();\n      ctx.setRawFont(that.font);\n      const render_x = x - ctx.measureText(text).width / 2;\n      ctx.fillText(text, render_x, annotation_y);\n      ctx.restore();\n    }\n\n    let last_bend = undefined;\n    let last_bend_draw_width = 0;\n    let last_drawn_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (!bend.draw_width) bend.draw_width = 0;\n      if (i === 0) bend.draw_width += x_shift;\n\n      last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);\n      if (bend.type === Bend.UP) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderArrowHead(start.x, bend_height);\n        }\n\n        renderBend(start.x, start.y, last_drawn_width, bend_height);\n      }\n\n      if (bend.type === Bend.DOWN) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend && last_bend.type === Bend.DOWN) {\n          renderArrowHead(start.x, start.y, -1);\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (!last_bend) {\n          last_drawn_width = bend.draw_width;\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n      }\n\n      renderText(start.x + last_drawn_width, bend.text);\n      last_bend = bend;\n      last_bend_draw_width = bend.draw_width;\n      last_bend.x = start.x;\n\n      start.x += last_drawn_width;\n    }\n\n    if (!last_bend || last_bend.x == undefined) {\n      throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n    }\n\n    // Final arrowhead and text\n    if (last_bend.type === Bend.UP) {\n      renderArrowHead(last_bend.x + last_drawn_width, bend_height);\n    } else if (last_bend.type === Bend.DOWN) {\n      renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author: @AaronDavidNewman\n//\n// This implements chord symbols as modifiers that can be attached to notes.\n// Chord symbols can contain multiple 'blocks' which can contain\n// text or glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\n\nimport { ModifierContextState } from 'modifiercontext';\n\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TextFont } from './textfont';\nimport { FontInfo } from './types/common';\nimport { log } from './util';\n\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (ChordSymbol.DEBUG) log('Vex.Flow.ChordSymbol', args);\n}\n\nexport interface ChordSymbolBlock {\n  text: string;\n  symbolType: SymbolTypes;\n  symbolModifier: SymbolModifiers;\n  xShift: number;\n  yShift: number;\n  vAlign: boolean;\n  width: number;\n  glyph?: Glyph;\n}\n\nexport enum HorizontalJustify {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n  CENTER_STEM = 4,\n}\n\nexport enum VerticalJustify {\n  TOP = 1,\n  BOTTOM = 2,\n}\n\nexport enum SymbolTypes {\n  GLYPH = 1,\n  TEXT = 2,\n  LINE = 3,\n}\n\nexport enum SymbolModifiers {\n  NONE = 1,\n  SUBSCRIPT = 2,\n  SUPERSCRIPT = 3,\n}\n\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n  static DEBUG: boolean = false;\n\n  static get CATEGORY(): string {\n    return 'ChordSymbol';\n  }\n\n  protected symbolBlocks: ChordSymbolBlock[];\n  protected horizontal: number;\n  protected vertical: number;\n  protected useKerning: boolean;\n  protected reportWidth: boolean;\n  protected font: FontInfo;\n  protected textFont: TextFont;\n  /** Currently unused. */\n  protected static noFormat: boolean = false;\n\n  // Chord symbols can be positioned and justified relative to the note.\n  static readonly horizontalJustify = HorizontalJustify;\n\n  static readonly horizontalJustifyString: Record<string, HorizontalJustify> = {\n    left: HorizontalJustify.LEFT,\n    right: HorizontalJustify.RIGHT,\n    center: HorizontalJustify.CENTER,\n    centerStem: HorizontalJustify.CENTER_STEM,\n  };\n\n  static readonly verticalJustify = VerticalJustify;\n\n  static readonly verticalJustifyString: Record<string, VerticalJustify> = {\n    top: VerticalJustify.TOP,\n    above: VerticalJustify.TOP,\n    below: VerticalJustify.BOTTOM,\n    bottom: VerticalJustify.BOTTOM,\n  };\n\n  static get superSubRatio(): number {\n    return ChordSymbol.chordSymbolMetrics.global.superSubRatio;\n  }\n\n  /** Currently unused: Globally turn off text formatting, if the built-in formatting does not work for your font. */\n  static set NO_TEXT_FORMAT(val: boolean) {\n    ChordSymbol.noFormat = val;\n  }\n\n  static get NO_TEXT_FORMAT(): boolean {\n    return ChordSymbol.noFormat;\n  }\n\n  // eslint-disable-next-line\n  static getMetricForGlyph(glyphCode: string): any {\n    if (ChordSymbol.chordSymbolMetrics[glyphCode]) {\n      return ChordSymbol.chordSymbolMetrics[glyphCode];\n    }\n    return undefined;\n  }\n\n  getYOffsetForText(text: string): number {\n    let acc = 0;\n    let ix = 0;\n    const resolution = this.textFont.resolution;\n    for (ix = 0; ix < text.length; ++ix) {\n      const metric = this.textFont.getMetricForCharacter(text[ix]);\n\n      if (metric) {\n        acc = metric.y_max < acc ? metric.y_max : acc;\n      }\n    }\n\n    return ix > 0 ? -1 * (acc / resolution) : 0;\n  }\n\n  static get engravingFontResolution(): number {\n    return Tables.DEFAULT_FONT_STACK[0].getResolution();\n  }\n\n  static get spacingBetweenBlocks(): number {\n    return ChordSymbol.chordSymbolMetrics.global.spacing / ChordSymbol.engravingFontResolution;\n  }\n\n  getWidthForCharacter(c: string): number {\n    return this.textFont.getMetricForCharacter(c).advanceWidth / this.textFont.resolution;\n  }\n\n  static getWidthForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0.65; // probably should do something here.\n    }\n    return metric.advanceWidth / ChordSymbol.engravingFontResolution;\n  }\n\n  static getYShiftForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return metric.yOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static getXShiftForGlyph(glyph: Glyph): number {\n    const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n    if (!metric) {\n      return 0;\n    }\n    return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;\n  }\n\n  static get superscriptOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get subscriptOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  static get kerningOffset(): number {\n    return ChordSymbol.chordSymbolMetrics.global.kerningOffset / ChordSymbol.engravingFontResolution;\n  }\n\n  // Glyph data\n  static readonly glyphs: Record<string, { code: string }> = {\n    diminished: {\n      code: 'csymDiminished',\n    },\n    dim: {\n      code: 'csymDiminished',\n    },\n    halfDiminished: {\n      code: 'csymHalfDiminished',\n    },\n    '+': {\n      code: 'csymAugmented',\n    },\n    augmented: {\n      code: 'csymAugmented',\n    },\n    majorSeventh: {\n      code: 'csymMajorSeventh',\n    },\n    minor: {\n      code: 'csymMinor',\n    },\n    '-': {\n      code: 'csymMinor',\n    },\n    '(': {\n      code: 'csymParensLeftTall',\n    },\n    leftParen: {\n      code: 'csymParensLeftTall',\n    },\n    ')': {\n      code: 'csymParensRightTall',\n    },\n    rightParen: {\n      code: 'csymParensRightTall',\n    },\n    leftBracket: {\n      code: 'csymBracketLeftTall',\n    },\n    rightBracket: {\n      code: 'csymBracketRightTall',\n    },\n    leftParenTall: {\n      code: 'csymParensLeftVeryTall',\n    },\n    rightParenTall: {\n      code: 'csymParensRightVeryTall',\n    },\n    '/': {\n      code: 'csymDiagonalArrangementSlash',\n    },\n    over: {\n      code: 'csymDiagonalArrangementSlash',\n    },\n    '#': {\n      code: 'accidentalSharp',\n    },\n    b: {\n      code: 'accidentalFlat',\n    },\n  };\n\n  static readonly symbolTypes = SymbolTypes;\n\n  static readonly symbolModifiers = SymbolModifiers;\n\n  // eslint-disable-next-line\n  static get chordSymbolMetrics(): any {\n    return Tables.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol;\n  }\n\n  static get lowerKerningText(): string[] {\n    return Tables.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol.global.lowerKerningText;\n  }\n\n  static get upperKerningText(): string[] {\n    return Tables.DEFAULT_FONT_STACK[0].getMetrics().glyphs.chordSymbol.global.upperKerningText;\n  }\n\n  /**\n   * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n   * Estimate how many lines above/below the staff we need.\n   */\n  static format(instances: ChordSymbol[], state: ModifierContextState): boolean {\n    if (!instances || instances.length === 0) return false;\n\n    let width = 0;\n    let nonSuperWidth = 0;\n    const reportedWidths = [];\n\n    for (let i = 0; i < instances.length; ++i) {\n      const instance = instances[i];\n      const fontAdj = instance.font.size / 20;\n      const glyphAdj = fontAdj * 2;\n      let lineSpaces = 1;\n      let vAlign = false;\n\n      for (let j = 0; j < instance.symbolBlocks.length; ++j) {\n        const symbol = instance.symbolBlocks[j];\n        const sup = instance.isSuperscript(symbol);\n        const sub = instance.isSubscript(symbol);\n        const subAdj = sup || sub ? ChordSymbol.superSubRatio : 1;\n        const adj = symbol.symbolType === SymbolTypes.GLYPH ? glyphAdj * subAdj : fontAdj * subAdj;\n\n        // If there are super/subscripts, they extend beyond the line so\n        // assume they take up 2 lines\n        if (sup || sub) {\n          lineSpaces = 2;\n        }\n\n        // If there is a symbol-specific offset, add it but consider font\n        // size since font and glyphs will be interspersed\n        if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph !== undefined) {\n          symbol.yShift += ChordSymbol.getYShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.xShift += ChordSymbol.getXShiftForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n          symbol.glyph.scale = symbol.glyph.scale * adj;\n          symbol.width = ChordSymbol.getWidthForGlyph(symbol.glyph) * instance.pointsToPixels * subAdj;\n        } else if (symbol.symbolType === SymbolTypes.TEXT) {\n          symbol.width = symbol.width * instance.textFont.pointsToPixels * subAdj;\n          symbol.yShift += instance.getYOffsetForText(symbol.text) * adj;\n        }\n\n        if (\n          symbol.symbolType === SymbolTypes.GLYPH &&\n          symbol.glyph !== undefined &&\n          symbol.glyph.code === ChordSymbol.glyphs.over.code\n        ) {\n          lineSpaces = 2;\n        }\n        symbol.width += ChordSymbol.spacingBetweenBlocks * instance.pointsToPixels * subAdj;\n\n        // If a subscript immediately  follows a superscript block, try to\n        // overlay them.\n        if (sup && j > 0) {\n          const prev = instance.symbolBlocks[j - 1];\n          if (!instance.isSuperscript(prev)) {\n            nonSuperWidth = width;\n          }\n        }\n        if (sub && nonSuperWidth > 0) {\n          vAlign = true;\n          // slide the symbol over so it lines up with superscript\n          symbol.xShift = symbol.xShift + (nonSuperWidth - width);\n          width = nonSuperWidth;\n          nonSuperWidth = 0;\n          // If we have vertically lined up, turn kerning off.\n          instance.setEnableKerning(false);\n        }\n        if (!sup && !sub) {\n          nonSuperWidth = 0;\n        }\n        symbol.vAlign = vAlign;\n        width += symbol.width;\n      }\n\n      // make kerning adjustments after computing super/subscripts\n      instance.updateKerningAdjustments();\n      instance.updateOverBarAdjustments();\n\n      if (instance.getVertical() === VerticalJustify.TOP) {\n        instance.setTextLine(state.top_text_line);\n        state.top_text_line += lineSpaces;\n      } else {\n        instance.setTextLine(state.text_line + 1);\n        state.text_line += lineSpaces + 1;\n      }\n      if (instance.getReportWidth()) {\n        reportedWidths.push(width);\n      } else {\n        reportedWidths.push(0);\n      }\n    }\n\n    width = reportedWidths.reduce((a, b) => a + b, 0);\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  constructor() {\n    super();\n    this.symbolBlocks = [];\n    this.horizontal = HorizontalJustify.LEFT;\n    this.vertical = VerticalJustify.TOP;\n    this.useKerning = true;\n    this.reportWidth = true;\n\n    let fontFamily = 'Arial';\n    if (this.musicFont.getName() === 'Petaluma') {\n      fontFamily = 'petalumaScript,Arial';\n    } else {\n      fontFamily = 'Roboto Slab,Times';\n    }\n    this.font = {\n      family: fontFamily,\n      size: 12,\n      weight: '',\n    };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n  }\n\n  // ### pointsToPixels\n  // The font size is specified in points, convert to 'pixels' in the svg space\n  get pointsToPixels(): number {\n    return this.textFont.pointsToPixels;\n  }\n\n  get superscriptOffset(): number {\n    return ChordSymbol.superscriptOffset * this.pointsToPixels;\n  }\n\n  get subscriptOffset(): number {\n    return ChordSymbol.subscriptOffset * this.pointsToPixels;\n  }\n\n  setReportWidth(value: boolean): this {\n    this.reportWidth = value;\n    return this;\n  }\n\n  getReportWidth(): boolean {\n    return this.reportWidth;\n  }\n\n  updateOverBarAdjustments(): void {\n    const barIndex = this.symbolBlocks.findIndex(\n      ({ symbolType, glyph }: ChordSymbolBlock) =>\n        symbolType === SymbolTypes.GLYPH && glyph !== undefined && glyph.code === 'csymDiagonalArrangementSlash'\n    );\n\n    if (barIndex < 0) {\n      return;\n    }\n    const bar = this.symbolBlocks[barIndex];\n    const xoff = bar.width / 4;\n    const yoff = 0.25 * this.pointsToPixels;\n    let symIndex = 0;\n    for (symIndex === 0; symIndex < barIndex; ++symIndex) {\n      const symbol = this.symbolBlocks[symIndex];\n      symbol.xShift = symbol.xShift + xoff;\n      symbol.yShift = symbol.yShift - yoff;\n    }\n\n    for (symIndex = barIndex + 1; symIndex < this.symbolBlocks.length; ++symIndex) {\n      const symbol = this.symbolBlocks[symIndex];\n      symbol.xShift = symbol.xShift - xoff;\n      symbol.yShift = symbol.yShift + yoff;\n    }\n  }\n\n  updateKerningAdjustments(): void {\n    let accum = 0;\n    for (let j = 0; j < this.symbolBlocks.length; ++j) {\n      const symbol = this.symbolBlocks[j];\n      accum += this.getKerningAdjustment(j);\n      symbol.xShift += accum;\n    }\n  }\n\n  /** Do some basic kerning so that letter chords like 'A' don't have the extensions hanging off to the right. */\n  getKerningAdjustment(j: number): number {\n    if (!this.useKerning) {\n      return 0;\n    }\n    const currSymbol = this.symbolBlocks[j];\n    const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : undefined;\n    let adjustment = 0;\n\n    // Move things into the '/' over bar\n    if (\n      currSymbol.symbolType === SymbolTypes.GLYPH &&\n      currSymbol.glyph !== undefined &&\n      currSymbol.glyph.code === ChordSymbol.glyphs.over.code\n    ) {\n      adjustment += currSymbol.glyph.metrics.x_shift;\n    }\n\n    if (\n      prevSymbol !== undefined &&\n      prevSymbol.symbolType === SymbolTypes.GLYPH &&\n      prevSymbol.glyph !== undefined &&\n      prevSymbol.glyph.code === ChordSymbol.glyphs.over.code\n    ) {\n      adjustment += prevSymbol.glyph.metrics.x_shift;\n    }\n\n    // For superscripts that follow a letter without much top part, move it to the left slightly\n    let preKernUpper = false;\n    let preKernLower = false;\n    if (prevSymbol !== undefined && prevSymbol.symbolType === SymbolTypes.TEXT) {\n      preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n      preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n    }\n\n    const kerningOffsetPixels = ChordSymbol.kerningOffset * this.pointsToPixels;\n    // TODO: adjust kern for font size.\n    // Where should this constant live?\n    if (preKernUpper && currSymbol.symbolModifier === SymbolModifiers.SUPERSCRIPT) {\n      adjustment += kerningOffsetPixels;\n    }\n\n    if (preKernLower && currSymbol.symbolType === SymbolTypes.TEXT) {\n      if (currSymbol.text[0] >= 'a' && currSymbol.text[0] <= 'z') {\n        adjustment += kerningOffsetPixels / 2;\n      }\n      if (ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol?.text[prevSymbol.text.length - 1])) {\n        adjustment += kerningOffsetPixels / 2;\n      }\n    }\n    return adjustment;\n  }\n\n  /**\n   * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n   * Each block can have its own vertical orientation.\n   */\n  // eslint-disable-next-line\n  getSymbolBlock(params: any = {}): ChordSymbolBlock {\n    const symbolType = params.symbolType ?? SymbolTypes.TEXT;\n    const symbolBlock: ChordSymbolBlock = {\n      text: params.text ?? '',\n      symbolType,\n      symbolModifier: params.symbolModifier ?? SymbolModifiers.NONE,\n      xShift: 0,\n      yShift: 0,\n      vAlign: false,\n      width: 0,\n    };\n\n    // Note: all symbol widths are resolution and font-independent.\n    // We convert to pixel values when we know what the font is.\n    if (symbolType === SymbolTypes.GLYPH && typeof params.glyph === 'string') {\n      const glyphArgs = ChordSymbol.glyphs[params.glyph];\n      const glyphPoints = 20;\n      symbolBlock.glyph = new Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });\n      // Beware: glyph.metrics is not the same as glyph.getMetrics() !\n      // rv.glyph.point = rv.glyph.point * rv.glyph.metrics.scale;\n      // rv.width = rv.glyph.getMetrics().width;\n      // don't set yShift here, b/c we need to do it at formatting time after the font is set.\n    } else if (symbolType === SymbolTypes.TEXT) {\n      let textWidth = 0;\n      for (let i = 0; i < symbolBlock.text.length; ++i) {\n        textWidth += this.getWidthForCharacter(symbolBlock.text[i]);\n      }\n      symbolBlock.width = textWidth;\n    } else if (symbolType === SymbolTypes.LINE) {\n      symbolBlock.width = params.width;\n    }\n\n    return symbolBlock;\n  }\n\n  /** Add a symbol to this chord, could be text, glyph or line. */\n  // eslint-disable-next-line\n  addSymbolBlock(parameters: any): this {\n    this.symbolBlocks.push(this.getSymbolBlock(parameters));\n    return this;\n  }\n\n  // ### Convenience functions for creating different types of chord symbol parts.\n\n  /** Add a text block. */\n  // eslint-disable-next-line\n  addText(text: string, parameters: any = {}): this {\n    const symbolType = SymbolTypes.TEXT;\n    return this.addSymbolBlock({ ...parameters, text, symbolType });\n  }\n\n  /** Add a text block with superscript modifier. */\n  addTextSuperscript(text: string): this {\n    const symbolType = SymbolTypes.TEXT;\n    const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  /** Add a text block with subscript modifier. */\n  addTextSubscript(text: string): this {\n    const symbolType = SymbolTypes.TEXT;\n    const symbolModifier = SymbolModifiers.SUBSCRIPT;\n    return this.addSymbolBlock({ text, symbolType, symbolModifier });\n  }\n\n  /** Add a glyph block with superscript modifier. */\n  addGlyphSuperscript(glyph: string): this {\n    const symbolType = SymbolTypes.GLYPH;\n    const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n    return this.addSymbolBlock({ glyph, symbolType, symbolModifier });\n  }\n\n  /** Add a glyph block. */\n  // eslint-disable-next-line\n  addGlyph(glyph: string, params: any = {}): this {\n    const symbolType = SymbolTypes.GLYPH;\n    return this.addSymbolBlock({ ...params, glyph, symbolType });\n  }\n\n  /**\n   * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n   * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n   */\n  // eslint-disable-next-line\n  addGlyphOrText(text: string, params: any = {}): this {\n    let str = '';\n    for (let i = 0; i < text.length; ++i) {\n      const char = text[i];\n      if (ChordSymbol.glyphs[char]) {\n        if (str.length > 0) {\n          this.addText(str, params);\n          str = '';\n        }\n        this.addGlyph(char, params);\n      } else {\n        // Collect consecutive characters with no glyphs.\n        str += char;\n      }\n    }\n    if (str.length > 0) {\n      this.addText(str, params);\n    }\n    return this;\n  }\n\n  /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n  // eslint-disable-next-line\n  addLine(width: number, params: any = {}): this {\n    const symbolType = SymbolTypes.LINE;\n    return this.addSymbolBlock({ ...params, symbolType, width });\n  }\n\n  // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n  setFont(family: string, size: number, weight: string): this {\n    this.font = { family, size, weight };\n    this.textFont = TextFont.getTextFontFromVexFontData(this.font);\n    return this;\n  }\n\n  setFontSize(size: number): this {\n    this.font.size = size;\n    this.textFont.setFontSize(size);\n    return this;\n  }\n\n  setEnableKerning(val: boolean): this {\n    this.useKerning = val;\n    return this;\n  }\n\n  /** Set vertical position of text (above or below stave). */\n  setVertical(vj: VerticalJustify | string | number): this {\n    this.vertical = typeof vj === 'string' ? ChordSymbol.verticalJustifyString[vj] : vj;\n    return this;\n  }\n\n  getVertical(): number {\n    return this.vertical;\n  }\n\n  /** Set horizontal justification. */\n  setHorizontal(hj: HorizontalJustify | string | number): this {\n    this.horizontal = typeof hj === 'string' ? ChordSymbol.horizontalJustifyString[hj] : hj;\n    return this;\n  }\n\n  getHorizontal(): number {\n    return this.horizontal;\n  }\n\n  getWidth(): number {\n    let width = 0;\n    this.symbolBlocks.forEach((symbol) => {\n      width += symbol.vAlign ? 0 : symbol.width;\n    });\n    return width;\n  }\n\n  isSuperscript(symbol: ChordSymbolBlock): boolean {\n    return symbol.symbolModifier !== undefined && symbol.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n  }\n\n  isSubscript(symbol: ChordSymbolBlock): boolean {\n    return symbol.symbolModifier !== undefined && symbol.symbolModifier === SymbolModifiers.SUBSCRIPT;\n  }\n\n  /** Render text and glyphs above/below the note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote() as StemmableNote;\n    this.setRendered();\n\n    // We're changing context parameters. Save current state.\n    ctx.save();\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n\n    const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    let y: number;\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    const hasStem = note.hasStem();\n    const stave = note.checkStave();\n\n    if (this.vertical === VerticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n      if (hasStem) {\n        const stem_ext = note.checkStem().getExtents();\n        const spacing = stave.getSpacingBetweenLines();\n        const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n        y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n      }\n    } else {\n      // (this.vertical === VerticalJustify.TOP)\n      y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\n      if (hasStem) {\n        const stem_ext = note.checkStem().getExtents();\n        const spacing = stave.getSpacingBetweenLines();\n        y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n      }\n    }\n\n    let x = start.x;\n    if (this.horizontal === HorizontalJustify.LEFT) {\n      x = start.x;\n    } else if (this.horizontal === HorizontalJustify.RIGHT) {\n      x = start.x + this.getWidth();\n    } else if (this.horizontal === HorizontalJustify.CENTER) {\n      x = start.x - this.getWidth() / 2;\n    } else {\n      // HorizontalJustify.CENTER_STEM\n      x = note.getStemX() - this.getWidth() / 2;\n    }\n    L('Rendering ChordSymbol: ', this.textFont, x, y);\n\n    this.symbolBlocks.forEach((symbol) => {\n      const sp = this.isSuperscript(symbol);\n      const sub = this.isSubscript(symbol);\n      let curY = y;\n      L('shift was ', symbol.xShift, symbol.yShift);\n      L('curY pre sub ', curY);\n      if (sp) {\n        curY += this.superscriptOffset;\n      }\n      if (sub) {\n        curY += this.subscriptOffset;\n      }\n      L('curY sup/sub ', curY);\n\n      if (symbol.symbolType === SymbolTypes.TEXT) {\n        if (sp || sub) {\n          ctx.save();\n          ctx.setFont(this.font.family, this.font.size * ChordSymbol.superSubRatio, this.font.weight);\n        }\n        // TODO???\n        // We estimate the text width, fill it in with the empirical value so the formatting is even.\n        // const textDim = ctx.measureText(symbol.text);\n        // symbol.width = textDim.width;\n\n        L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);\n\n        ctx.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);\n        if (sp || sub) {\n          ctx.restore();\n        }\n      } else if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph) {\n        curY += symbol.yShift;\n        L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);\n        symbol.glyph.render(ctx, x + symbol.xShift, curY);\n      } else if (symbol.symbolType === SymbolTypes.LINE) {\n        L('Rendering Line : ', symbol.width, x, curY);\n        ctx.beginPath();\n        ctx.setLineWidth(1); // ?\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + symbol.width, curY);\n        ctx.stroke();\n      }\n\n      x += symbol.width;\n      if (symbol.vAlign) {\n        x += symbol.xShift;\n      }\n    });\n    ctx.closeGroup();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { defined, RuntimeError } from './util';\n\nexport interface VoiceTime {\n  num_beats: number;\n  beat_value: number;\n  /** Defaults to `Flow.RESOLUTION` if not provided. */\n  resolution?: number;\n}\n\nexport enum VoiceMode {\n  STRICT = 1,\n  SOFT = 2,\n  FULL = 3,\n}\n\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n  static get CATEGORY(): string {\n    return 'Voice';\n  }\n\n  /**\n   * Modes allow the addition of ticks in three different ways:\n   * - STRICT: This is the default. Ticks must fill the voice.\n   * - SOFT: Ticks can be added without restrictions.\n   * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n   */\n  static get Mode(): typeof VoiceMode {\n    return VoiceMode;\n  }\n\n  protected resolutionMultiplier: number = 1;\n  protected smallestTickCount: Fraction;\n  protected stave?: Stave;\n  protected mode: VoiceMode = VoiceMode.STRICT;\n  protected expTicksUsed?: number;\n  protected preFormatted?: boolean;\n  protected options: { softmaxFactor: number };\n\n  protected readonly totalTicks: Fraction;\n  protected readonly ticksUsed: Fraction = new Fraction(0, 1);\n  protected readonly largestTickWidth: number = 0;\n  protected readonly tickables: Tickable[] = [];\n  protected readonly time: Required<VoiceTime>;\n\n  constructor(time?: VoiceTime | string, options?: { softmaxFactor: number }) {\n    super();\n\n    this.options = {\n      softmaxFactor: 100,\n      ...options,\n    };\n\n    // Convert the `time` string into a VoiceTime object if necessary.\n    let voiceTime: VoiceTime | undefined;\n    if (typeof time === 'string') {\n      // Time signature shortcut: \"4/4\", \"3/8\", etc.\n      const match = time.match(/(\\d+)\\/(\\d+)/);\n      if (match) {\n        voiceTime = {\n          num_beats: parseInt(match[1]),\n          beat_value: parseInt(match[2]),\n        };\n      }\n    } else {\n      voiceTime = time;\n    }\n\n    // Default time signature is 4/4.\n    this.time = {\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Tables.RESOLUTION,\n      ...voiceTime,\n    };\n\n    // Recalculate total ticks.\n    this.totalTicks = new Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n    this.smallestTickCount = this.totalTicks.clone();\n  }\n\n  /** Get the total ticks in the voice. */\n  getTotalTicks(): Fraction {\n    return this.totalTicks;\n  }\n\n  /** Get the total ticks used in the voice by all the tickables. */\n  getTicksUsed(): Fraction {\n    return this.ticksUsed;\n  }\n\n  /** Get the largest width of all the tickables. */\n  getLargestTickWidth(): number {\n    return this.largestTickWidth;\n  }\n\n  /** Get the tick count for the shortest tickable */\n  getSmallestTickCount(): Fraction {\n    return this.smallestTickCount;\n  }\n\n  /** Get the tickables in the voice. */\n  getTickables(): Tickable[] {\n    return this.tickables;\n  }\n\n  /** Get the voice mode. */\n  getMode(): number {\n    return this.mode;\n  }\n\n  /**\n   * Set the voice mode.\n   * @param mode value from `VoiceMode`\n   */\n  setMode(mode: number): this {\n    this.mode = mode;\n    return this;\n  }\n\n  /** Get the resolution multiplier for the voice. */\n  getResolutionMultiplier(): number {\n    return this.resolutionMultiplier;\n  }\n\n  /** Get the actual tick resolution for the voice. */\n  getActualResolution(): number {\n    return this.resolutionMultiplier * this.time.resolution;\n  }\n\n  /** Set the voice's stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    // Reset the bounding box so we can reformat.\n    this.boundingBox = undefined;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  /** Get the bounding box for the voice. */\n  getBoundingBox(): BoundingBox | undefined {\n    if (!this.boundingBox) {\n      const stave = this.checkStave();\n      let boundingBox = undefined;\n      for (let i = 0; i < this.tickables.length; ++i) {\n        const tickable = this.tickables[i];\n        tickable.setStave(stave);\n        const bb = tickable.getBoundingBox();\n        if (bb) {\n          boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n        }\n      }\n      this.boundingBox = boundingBox;\n    }\n    return this.boundingBox;\n  }\n\n  /** Set the voice mode to strict or soft. */\n  setStrict(strict: boolean): this {\n    this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n    return this;\n  }\n\n  /** Determine if the voice is complete according to the voice mode. */\n  isComplete(): boolean {\n    if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n      return this.ticksUsed.equals(this.totalTicks);\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * We use softmax to layout the tickables proportional to the exponent of\n   * their duration. The softmax factor is used to determine the 'linearness' of\n   * the layout.\n   *\n   * The softmax of all the tickables in this voice should sum to 1.\n   */\n  setSoftmaxFactor(factor: number): this {\n    this.options.softmaxFactor = factor;\n    return this;\n  }\n\n  /**\n   * Calculate the sum of the exponents of all the ticks in this voice to use\n   * as the denominator of softmax.\n   */\n  protected reCalculateExpTicksUsed(): number {\n    const totalTicks = this.ticksUsed.value();\n    const exp = (tickable: Tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n    this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b, 0);\n    return this.expTicksUsed;\n  }\n\n  /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n  softmax(tickValue: number): number {\n    if (!this.expTicksUsed) {\n      this.expTicksUsed = this.reCalculateExpTicksUsed();\n    }\n\n    const totalTicks = this.ticksUsed.value();\n    const exp = (v: number) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n    const sm = exp(tickValue) / this.expTicksUsed;\n    return sm;\n  }\n\n  /** Add a tickable to the voice. */\n  addTickable(tickable: Tickable): this {\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      // Update the total ticks for this line.\n      this.ticksUsed.add(ticks);\n      this.expTicksUsed = 0; // reset\n\n      if (\n        (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n        this.ticksUsed.greaterThan(this.totalTicks)\n      ) {\n        this.ticksUsed.subtract(ticks);\n        throw new RuntimeError('BadArgument', 'Too many ticks.');\n      }\n\n      // Track the smallest tickable for formatting.\n      if (ticks.lessThan(this.smallestTickCount)) {\n        this.smallestTickCount = ticks.clone();\n      }\n\n      this.resolutionMultiplier = this.ticksUsed.denominator;\n\n      // Expand total ticks using denominator from ticks used.\n      this.totalTicks.add(0, this.ticksUsed.denominator);\n    }\n\n    // Add the tickable to the line.\n    this.tickables.push(tickable);\n    tickable.setVoice(this);\n    return this;\n  }\n\n  /** Add an array of tickables to the voice. */\n  addTickables(tickables: Tickable[]): this {\n    for (let i = 0; i < tickables.length; ++i) {\n      this.addTickable(tickables[i]);\n    }\n    return this;\n  }\n\n  /** Preformat the voice by applying the voice's stave to each note. */\n  preFormat(): this {\n    if (this.preFormatted) return this;\n    const stave = this.checkStave();\n    this.tickables.forEach((tickable) => {\n      if (!tickable.getStave()) {\n        tickable.setStave(stave);\n      }\n    });\n    this.preFormatted = true;\n    return this;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  /**\n   * Render the voice onto the canvas `context` and an optional `stave`.\n   * If `stave` is omitted, it is expected that the notes have staves\n   * already set.\n   *\n   * This method also calculates the voice's boundingBox while drawing\n   * the notes. Note the similarities with this.getBoundingBox().\n   */\n  draw(context: RenderContext = this.checkContext(), stave?: Stave): void {\n    stave = stave ?? this.stave;\n    this.setRendered();\n    let boundingBox = undefined;\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      // Set the stave if provided.\n      if (stave) {\n        tickable.setStave(stave);\n      }\n      defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n      const bb = tickable.getBoundingBox();\n      if (bb) {\n        boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n      }\n\n      tickable.setContext(context);\n      tickable.drawWithStyle();\n    }\n\n    this.boundingBox = boundingBox;\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\n\nimport { Builder } from './easyscore';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { StaveNote } from './stavenote';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport class FretHandFinger extends Modifier {\n  static get CATEGORY(): string {\n    return 'FretHandFinger';\n  }\n\n  // Arrange fingerings inside a ModifierContext.\n  static format(nums: FretHandFinger[], state: ModifierContextState): boolean {\n    const { left_shift, right_shift } = state;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shiftLeft = 0;\n    let shiftRight = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote();\n      const pos = num.getPosition();\n      const index = num.checkIndex();\n      const props = note.getKeyProps()[index];\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n          }\n          if (right_shift === 0) {\n            shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        note,\n        num,\n        pos,\n        line: props.line,\n        shiftL: shiftLeft,\n        shiftR: shiftRight,\n      });\n    }\n\n    // Sort fingernumbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let numShiftL = 0;\n    let numShiftR = 0;\n    let xWidthL = 0;\n    let xWidthR = 0;\n    let lastLine = null;\n    let lastNote = null;\n\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n\n      // Reset the position of the string number every line.\n      if (line !== lastLine || note !== lastNote) {\n        numShiftL = left_shift + shiftL;\n        numShiftR = right_shift + shiftR;\n      }\n\n      const numWidth = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift + numShiftL);\n        num_shift = left_shift + numWidth; // spacing\n        xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(numShiftR);\n        num_shift = shiftRight + numWidth; // spacing\n        xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n      }\n      lastLine = line;\n      lastNote = note;\n    }\n\n    state.left_shift += xWidthL;\n    state.right_shift += xWidthR;\n\n    return true;\n  }\n\n  static easyScoreHook({ fingerings }: { fingerings?: string } = {}, note: StaveNote, builder: Builder): void {\n    fingerings\n      ?.split(',')\n      .map((fingeringString: string) => {\n        const split = fingeringString.trim().split('.');\n        const params: { number: string; position?: string } = { number: split[0] };\n        if (split[1]) params.position = split[1];\n        return builder.getFactory().Fingering(params);\n      })\n      .map((fingering: Modifier, index: number) => note.addModifier(fingering, index));\n  }\n\n  protected finger: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected font: FontInfo;\n\n  constructor(finger: string) {\n    super();\n\n    this.finger = finger;\n    this.width = 7;\n    this.position = Modifier.Position.LEFT; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  setFretHandFinger(finger: string): this {\n    this.finger = finger;\n    return this;\n  }\n\n  getFretHandFinger(): string {\n    return this.finger;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset + 5;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n        dot_x -= 4;\n        dot_y -= 12;\n        break;\n      case Modifier.Position.BELOW:\n        dot_x -= 2;\n        dot_y += 10;\n        break;\n      case Modifier.Position.LEFT:\n        dot_x -= this.width;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += 1;\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n    }\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText('' + this.finger, dot_x, dot_y);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\n\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { Voice } from './voice';\n\nexport class NoteSubGroup extends Modifier {\n  static get CATEGORY(): string {\n    return 'NoteSubGroup';\n  }\n\n  // Arrange groups inside a `ModifierContext`\n  static format(groups: NoteSubGroup[], state: ModifierContextState): boolean {\n    if (!groups || groups.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < groups.length; ++i) {\n      const group = groups[i];\n      group.preFormat();\n      width += group.getWidth();\n    }\n\n    state.left_shift += width;\n    return true;\n  }\n\n  protected subNotes: Note[];\n  protected preFormatted: boolean = false;\n  protected formatter: Formatter;\n  protected voice: Voice;\n\n  constructor(subNotes: Note[]) {\n    super();\n\n    this.position = Modifier.Position.LEFT;\n    this.subNotes = subNotes;\n    this.subNotes.forEach((subNote) => {\n      subNote.setIgnoreTicks(false);\n    });\n    this.width = 0;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Tables.RESOLUTION,\n    }).setStrict(false);\n\n    this.voice.addTickables(this.subNotes);\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  draw(): void {\n    const ctx: RenderContext = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n    this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n    this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\n\nimport { Fraction } from './fraction';\nimport { NoteMetrics } from './note';\nimport { Tickable } from './tickable';\nimport { RuntimeError } from './util';\n\nexport interface TickContextMetrics extends NoteMetrics {\n  totalLeftPx: number;\n  totalRightPx: number;\n}\n\nexport interface TickContextOptions {\n  tickID: number;\n}\n\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext {\n  protected readonly tickID: number;\n  protected readonly tickables: Tickable[];\n  protected readonly tickablesByVoice: Record<string, Tickable>;\n  protected currentTick: Fraction;\n  protected maxTicks: Fraction;\n  protected padding: number;\n  protected xBase: number;\n  protected x: number;\n  protected xOffset: number;\n  protected notePx: number;\n  protected glyphPx: number;\n  protected leftDisplacedHeadPx: number;\n  protected rightDisplacedHeadPx: number;\n  protected modLeftPx: number;\n  protected modRightPx: number;\n  protected totalLeftPx: number;\n  protected totalRightPx: number;\n  protected maxTickable?: Tickable;\n  protected minTicks?: Fraction;\n  protected minTickable?: Tickable;\n  tContexts: TickContext[];\n\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected width: number;\n  protected formatterMetrics: { freedom: { left: number; right: number } };\n\n  static getNextContext(tContext: TickContext): TickContext | undefined {\n    const contexts = tContext.tContexts;\n    const index = contexts.indexOf(tContext);\n\n    if (index + 1 < contexts.length) return contexts[index + 1];\n  }\n\n  constructor(options?: TickContextOptions) {\n    this.tickID = options && options.tickID ? options.tickID : 0;\n    this.currentTick = new Fraction(0, 1);\n\n    this.maxTicks = new Fraction(0, 1);\n    this.maxTickable = undefined; // Biggest tickable\n    this.minTicks = undefined; // this can remian null if all tickables have ignore_ticks\n    this.minTickable = undefined;\n\n    this.padding = 1; // padding on each side (width += padding * 2)\n    this.x = 0;\n    this.xBase = 0; // base x position without xOffset\n    this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n    this.tickables = []; // Notes, tabs, chords, lyrics.\n    this.tickablesByVoice = {}; // Tickables indexed by voice number\n\n    // Formatting metrics\n    this.notePx = 0; // width of widest note in this context\n    this.glyphPx = 0; // width of glyph (note head)\n    this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n    this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n    this.modLeftPx = 0; // Left modifier pixels\n    this.modRightPx = 0; // Right modifier pixels\n    this.totalLeftPx = 0; // Total left pixels\n    this.totalRightPx = 0; // Total right pixels\n    this.tContexts = []; // Parent array of tick contexts\n\n    this.width = 0;\n    this.formatterMetrics = {\n      // The freedom of a tickcontext is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n    };\n  }\n\n  getTickID(): number {\n    return this.tickID;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    this.xBase = x;\n    this.xOffset = 0;\n    return this;\n  }\n\n  getXBase(): number {\n    return this.xBase;\n  } // use of xBase and xOffset is optional, avoids offset creep\n\n  setXBase(xBase: number): void {\n    this.xBase = xBase;\n    this.x = xBase + this.xOffset;\n  }\n\n  getXOffset(): number {\n    return this.xOffset;\n  }\n\n  setXOffset(xOffset: number): void {\n    this.xOffset = xOffset;\n    this.x = this.xBase + xOffset;\n  }\n\n  getWidth(): number {\n    return this.width + this.padding * 2;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  getMaxTicks(): Fraction {\n    return this.maxTicks;\n  }\n\n  getMinTicks(): Fraction | undefined {\n    return this.minTicks;\n  }\n\n  getMaxTickable(): Tickable | undefined {\n    return this.maxTickable;\n  }\n\n  getMinTickable(): Tickable | undefined {\n    return this.minTickable;\n  }\n\n  getTickables(): Tickable[] {\n    return this.tickables;\n  }\n\n  /**\n   * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n   *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n   * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n   */\n  getTickableForVoice(voiceIndex: number): Tickable {\n    return this.tickablesByVoice[voiceIndex];\n  }\n\n  getTickablesByVoice(): Record<string, Tickable> {\n    return this.tickablesByVoice;\n  }\n\n  getCenterAlignedTickables(): Tickable[] {\n    return this.tickables.filter((tickable) => tickable.isCenterAligned());\n  }\n\n  /** Gets widths context, note and left/right modifiers for formatting. */\n  getMetrics(): TickContextMetrics {\n    const {\n      width,\n      glyphPx,\n      notePx,\n      leftDisplacedHeadPx,\n      rightDisplacedHeadPx,\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    } = this;\n    return {\n      width, // Width of largest tickable in context\n      glyphPx, // Width of largest glyph (note head)\n      notePx, // Width of notehead + stem\n      leftDisplacedHeadPx, // Left modifiers\n      rightDisplacedHeadPx, // Right modifiers\n      modLeftPx,\n      modRightPx,\n      totalLeftPx,\n      totalRightPx,\n    };\n  }\n\n  getCurrentTick(): Fraction {\n    return this.currentTick;\n  }\n\n  setCurrentTick(tick: Fraction): void {\n    this.currentTick = tick;\n    this.preFormatted = false;\n  }\n\n  addTickable(tickable: Tickable, voiceIndex?: number): this {\n    if (!tickable) {\n      throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n    }\n\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      if (ticks.greaterThan(this.maxTicks)) {\n        this.maxTicks = ticks.clone();\n        this.maxTickable = tickable;\n      }\n\n      if (this.minTicks == null) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      } else if (ticks.lessThan(this.minTicks)) {\n        this.minTicks = ticks.clone();\n        this.minTickable = tickable;\n      }\n    }\n\n    tickable.setTickContext(this);\n    this.tickables.push(tickable);\n    this.tickablesByVoice[voiceIndex || 0] = tickable;\n    this.preFormatted = false;\n    return this;\n  }\n\n  preFormat(): this {\n    if (this.preFormatted) return this;\n\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      tickable.preFormat();\n      const metrics = tickable.getMetrics();\n\n      // Maintain max displaced head pixels from all tickables in the context\n      this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n      this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n\n      // Maintain the widest note for all tickables in the context\n      this.notePx = Math.max(this.notePx, metrics.notePx);\n\n      // Maintain the widest note head\n      this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);\n\n      // Total modifier shift\n      this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n      this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n\n      // Total shift\n      this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n      this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n\n      // Recalculate the tick context total width\n      this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n    }\n\n    return this;\n  }\n\n  postFormat(): this {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n\n  getFormatterMetrics(): { freedom: { left: number; right: number } } {\n    return this.formatterMetrics;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n// MIT License\n\nimport { Stem } from 'stem';\nimport { isTabNote } from 'typeguard';\n\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { defined, log, RuntimeError } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Ornament.DEBUG) log('Vex.Flow.Ornament', args);\n}\n\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n  /** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /** Ornaments category string. */\n  static get CATEGORY(): string {\n    return 'Ornament';\n  }\n\n  protected ornament: {\n    code: string;\n  };\n  protected stemUpYOffset: number;\n  protected ornamentAlignWithNoteHead: string[] | boolean;\n  protected type: string;\n\n  protected delayed: boolean;\n  protected reportedWidth: number;\n  protected adjustForStemDirection: boolean;\n  public render_options: {\n    accidentalUpperPadding: number;\n    accidentalLowerPadding: number;\n    font_scale: number;\n  };\n  protected glyph: Glyph;\n  protected accidentalUpper?: Glyph;\n  protected accidentalLower?: Glyph;\n  protected delayXShift?: number;\n\n  /** Arrange ornaments inside `ModifierContext` */\n  static format(ornaments: Ornament[], state: ModifierContextState): boolean {\n    if (!ornaments || ornaments.length === 0) return false;\n\n    let width = 0; // width is used by ornaments, which are always centered on the note head\n    let right_shift = state.right_shift; // jazz ornaments calculate r/l shift separately\n    let left_shift = state.left_shift;\n    let yOffset = 0;\n\n    for (let i = 0; i < ornaments.length; ++i) {\n      const ornament = ornaments[i];\n      const increment = 2;\n\n      if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {\n        ornament.x_shift += right_shift + 2;\n      }\n      if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {\n        ornament.x_shift -= left_shift + 2;\n      }\n      if (ornament.reportedWidth && ornament.x_shift < 0) {\n        left_shift += ornament.reportedWidth;\n      } else if (ornament.reportedWidth && ornament.x_shift > 0) {\n        right_shift += ornament.reportedWidth;\n      } else {\n        width = Math.max(ornament.getWidth(), width);\n      }\n      // articulations above/below the line can be stacked.\n      if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {\n        // Unfortunately we don't know the stem direction.  So we base it\n        // on the line number, but also allow it to be overridden.\n        const ornamentNote = defined(ornament.note, 'NoAttachedNote');\n        if (ornamentNote.getLineNumber() >= 3 || ornament.getPosition() === Modifier.Position.ABOVE) {\n          state.top_text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset -= ornament.glyph.bbox.getH();\n        } else {\n          state.text_line += increment;\n          ornament.y_shift += yOffset;\n          yOffset += ornament.glyph.bbox.getH();\n        }\n      } else {\n        if (ornament.getPosition() === Modifier.Position.ABOVE) {\n          ornament.setTextLine(state.top_text_line);\n          state.top_text_line += increment;\n        } else {\n          ornament.setTextLine(state.text_line);\n          state.text_line += increment;\n        }\n      }\n    }\n\n    // Note: 'legit' ornaments don't consider other modifiers when calculating their\n    // X position, but jazz ornaments sometimes need to.\n    state.left_shift = left_shift + width / 2;\n    state.right_shift = right_shift + width / 2;\n    return true;\n  }\n\n  /**\n   * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n   * these are generally on the top of the staff.\n   */\n  static get ornamentNoteTransition(): string[] {\n    return ['flip', 'jazzTurn', 'smear'];\n  }\n\n  /**\n   * ornamentAttack indicates something that happens in the attach, placed before the note and\n   * any accidentals\n   */\n  static get ornamentAttack(): string[] {\n    return ['scoop'];\n  }\n\n  /**\n   * The ornament is aligned based on the note head, but without regard to whether the\n   * stem goes up or down.\n   */\n  static get ornamentAlignWithNoteHead(): string[] {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];\n  }\n\n  /**\n   * An ornament that happens on the release of the note, generally placed after the\n   * note and overlapping the next beat/measure..\n   */\n  static get ornamentRelease(): string[] {\n    return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n  }\n\n  /** ornamentArticulation goes above/below the note based on space availablity */\n  static get ornamentArticulation(): string[] {\n    return ['bend', 'plungerClosed', 'plungerOpen'];\n  }\n\n  /**\n   * Legacy ornaments have hard-coded metrics.  If additional ornament types are\n   * added, get their metrics here.\n   */\n  // eslint-disable-next-line\n  getMetrics(): any {\n    return this.getFontStack()[0].getMetrics().glyphs.jazzOrnaments[this.ornament.code];\n  }\n\n  /**\n   * Create a new ornament of type `type`, which is an entry in\n   * `Vex.Flow.ornamentCodes` in `tables.ts`.\n   */\n  constructor(type: string) {\n    super();\n\n    this.type = type;\n    this.delayed = false;\n\n    this.render_options = {\n      font_scale: 38,\n      accidentalLowerPadding: 3,\n      accidentalUpperPadding: 3,\n    };\n\n    this.ornament = Tables.ornamentCodes(this.type);\n\n    // new ornaments have their origin at the origin, and have more specific\n    // metrics.  Legacy ornaments do some\n    // x scaling, and have hard-coded metrics\n    const metrics = this.getMetrics();\n\n    // some jazz ornaments are above or below depending on stem direction.\n    this.adjustForStemDirection = false;\n\n    // some jazz ornaments like falls are supposed to overlap with future bars\n    // and so we report a different width than they actually take up.\n    this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;\n\n    this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;\n\n    this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n\n    if (!this.ornament) {\n      throw new RuntimeError('ArgumentError', `Ornament not found: '${this.type}'`);\n    }\n\n    this.x_shift = metrics ? metrics.xOffset : 0;\n    this.y_shift = metrics ? metrics.yOffset : 0;\n\n    this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale, {\n      category: `ornament.${this.ornament.code}`,\n    });\n\n    // Is this a jazz ornament that goes between this note and the next note.\n    if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      this.delayed = true;\n    }\n\n    // Legacy ornaments need this.  I don't know why, but horizontal spacing issues\n    // happen if I don't set it.\n    if (!metrics) {\n      this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\n    }\n  }\n\n  /** Set whether the ornament is to be delayed. */\n  setDelayed(delayed: boolean): this {\n    this.delayed = delayed;\n    return this;\n  }\n\n  /** Set the upper accidental for the ornament. */\n  setUpperAccidental(accid: string): this {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalUpper = new Glyph(Tables.accidentalCodes(accid).code, scale);\n    this.accidentalUpper.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  /** Set the lower accidental for the ornament. */\n  setLowerAccidental(accid: string): this {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalLower = new Glyph(Tables.accidentalCodes(accid).code, scale);\n    this.accidentalLower.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  /** Render ornament in position next to note. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote() as StemmableNote;\n    this.setRendered();\n\n    const stemDir = note.getStemDirection();\n    const stave = note.checkStave();\n\n    const classString = Object.keys(this.getAttribute('classes')).join(' ');\n    ctx.openGroup(classString, this.getAttribute('id'));\n\n    // Get stem extents\n    const stemExtents = note.checkStem().getExtents();\n    let y = stemDir === Stem.DOWN ? stemExtents.baseY : stemExtents.topY;\n\n    // TabNotes don't have stems attached to them. Tab stems are rendered outside the stave.\n    if (isTabNote(note)) {\n      if (note.hasStem()) {\n        if (stemDir === Stem.DOWN) {\n          y = stave.getYForTopText(this.text_line);\n        }\n      } else {\n        // Without a stem\n        y = stave.getYForTopText(this.text_line);\n      }\n    }\n\n    const isPlacedOnNoteheadSide = stemDir === Stem.DOWN;\n    const spacing = stave.getSpacingBetweenLines();\n    let lineSpacing = 1;\n\n    // Beamed stems are longer than quarter note stems, adjust accordingly\n    if (!isPlacedOnNoteheadSide && note.hasBeam()) {\n      lineSpacing += 0.5;\n    }\n\n    const totalSpacing = spacing * (this.text_line + lineSpacing);\n    const glyphYBetweenLines = y - totalSpacing;\n\n    // Get initial coordinates for the modifier position\n    const start = note.getModifierStartXY(this.position, this.index);\n    let glyphX = start.x;\n\n    // If the ornament is aligned with the note head, don't consider the stave y\n    // but use the 'natural' modifier y\n    let glyphY = this.ornamentAlignWithNoteHead\n      ? start.y\n      : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n    glyphY += this.y_shift;\n\n    // Ajdust x position if ornament is delayed\n    if (this.delayed) {\n      let delayXShift = 0;\n      const startX = glyphX - (stave.getX() - 10);\n      if (this.delayXShift !== undefined) {\n        delayXShift = this.delayXShift;\n      } else {\n        delayXShift += this.glyph.getMetrics().width / 2;\n        const nextContext = TickContext.getNextContext(note.getTickContext());\n        if (nextContext) {\n          delayXShift += (nextContext.getX() - startX) * 0.5;\n        } else {\n          delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\n        }\n        this.delayXShift = delayXShift;\n      }\n      glyphX += delayXShift;\n    }\n\n    L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n\n    if (this.accidentalLower) {\n      this.accidentalLower.render(ctx, glyphX, glyphY);\n      glyphY -= this.accidentalLower.getMetrics().height;\n      glyphY -= this.render_options.accidentalLowerPadding;\n    }\n\n    if (this.stemUpYOffset && note.hasStem() && note.getStemDirection() === 1) {\n      glyphY += this.stemUpYOffset;\n    }\n    if (note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n      glyphY = note.checkStave().getBoundingBox().getY() + 40;\n    }\n\n    this.glyph.render(ctx, glyphX + this.x_shift, glyphY);\n\n    if (this.accidentalUpper) {\n      glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;\n      this.accidentalUpper.render(ctx, glyphX, glyphY);\n    }\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2021.\n// MIT License\n\nexport interface TextMeasure {\n  width: number;\n  height: number;\n}\n\nexport interface GroupAttributes {\n  pointerBBox: boolean;\n}\n\nexport abstract class RenderContext {\n  abstract clear(): void;\n  abstract setFont(family: string, size: number, weight?: string): this;\n  abstract setRawFont(font: string): this;\n  abstract setFillStyle(style: string): this;\n  abstract setBackgroundFillStyle(style: string): this;\n  abstract setStrokeStyle(style: string): this;\n  abstract setShadowColor(color: string): this;\n  abstract setShadowBlur(blur: number): this;\n  abstract setLineWidth(width: number): this;\n  abstract setLineCap(capType: CanvasLineCap): this;\n  abstract setLineDash(dashPattern: number[]): this;\n  abstract scale(x: number, y: number): this;\n  abstract rect(x: number, y: number, width: number, height: number): this;\n  abstract resize(width: number, height: number): this;\n  abstract fillRect(x: number, y: number, width: number, height: number): this;\n  abstract clearRect(x: number, y: number, width: number, height: number): this;\n  abstract beginPath(): this;\n  abstract moveTo(x: number, y: number): this;\n  abstract lineTo(x: number, y: number): this;\n  abstract bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): this;\n  abstract quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): this;\n  abstract arc(\n    x: number,\n    y: number,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n    antiClockwise: boolean\n  ): this;\n  // eslint-disable-next-line\n  abstract fill(attributes?: any): this;\n  abstract stroke(): this;\n  abstract closePath(): this;\n  abstract fillText(text: string, x: number, y: number): this;\n  abstract save(): this;\n  abstract restore(): this;\n  // eslint-disable-next-line\n  abstract openGroup(cls: string, id?: string, attrs?: GroupAttributes): any;\n  abstract closeGroup(): void;\n  // eslint-disable-next-line\n  abstract add(child: any): void;\n\n  abstract measureText(text: string): TextMeasure;\n\n  abstract set font(value: string);\n  abstract get font(): string;\n  abstract set fillStyle(style: string | CanvasGradient | CanvasPattern);\n  abstract get fillStyle(): string | CanvasGradient | CanvasPattern;\n  abstract set strokeStyle(style: string | CanvasGradient | CanvasPattern);\n  abstract get strokeStyle(): string | CanvasGradient | CanvasPattern;\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { GroupAttributes, RenderContext, TextMeasure } from './rendercontext';\nimport { warn } from './util';\n\n/**\n * A rendering context for the Canvas backend (CanvasRenderingContext2D).\n */\nexport class CanvasContext extends RenderContext {\n  context2D: CanvasRenderingContext2D;\n  canvas: HTMLCanvasElement | { width: number; height: number };\n\n  /** Height of one line of text (in pixels). */\n  textHeight: number = 0;\n\n  static get WIDTH(): number {\n    return 600;\n  }\n\n  static get HEIGHT(): number {\n    return 400;\n  }\n\n  static get CANVAS_BROWSER_SIZE_LIMIT(): number {\n    return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n  }\n\n  /**\n   * Ensure that width and height do not exceed the browser limit.\n   * @returns array of [width, height] clamped to the browser limit.\n   */\n  static sanitizeCanvasDims(width: number, height: number): [number, number] {\n    const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n    if (Math.max(width, height) > limit) {\n      warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n      if (width > limit) {\n        width = limit;\n      }\n      if (height > limit) {\n        height = limit;\n      }\n    }\n    return [width, height];\n  }\n\n  constructor(context: CanvasRenderingContext2D) {\n    super();\n    this.context2D = context;\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT,\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n\n  /**\n   * Set all pixels to transparent black rgba(0,0,0,0).\n   */\n  clear(): void {\n    this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // eslint-disable-next-line\n  openGroup(cls: string, id?: string, attrs?: GroupAttributes): any {\n    // Containers not implemented.\n  }\n\n  closeGroup(): void {\n    // Containers not implemented.\n  }\n\n  // eslint-disable-next-line\n  add(child: any): void {\n    // Containers not implemented.\n  }\n\n  setFillStyle(style: string): this {\n    this.context2D.fillStyle = style;\n    return this;\n  }\n\n  /** CanvasContext ignores `setBackgroundFillStyle()`. */\n  // eslint-disable-next-line\n  setBackgroundFillStyle(style: string): this {\n    // DO NOTHING\n    return this;\n  }\n\n  setStrokeStyle(style: string): this {\n    this.context2D.strokeStyle = style;\n    return this;\n  }\n\n  setShadowColor(color: string): this {\n    this.context2D.shadowColor = color;\n    return this;\n  }\n\n  setShadowBlur(blur: number): this {\n    // CanvasRenderingContext2D does not scale the shadow blur by the current\n    // transform, so we have to do it manually. We assume uniform scaling\n    // (though allow for rotation) because the blur can only be scaled\n    // uniformly anyway.\n    const t = this.context2D.getTransform();\n    const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n    this.context2D.shadowBlur = scale * blur;\n    return this;\n  }\n\n  setLineWidth(width: number): this {\n    this.context2D.lineWidth = width;\n    return this;\n  }\n\n  setLineCap(capType: CanvasLineCap): this {\n    this.context2D.lineCap = capType;\n    return this;\n  }\n\n  setLineDash(dash: number[]): this {\n    this.context2D.setLineDash(dash);\n    return this;\n  }\n\n  scale(x: number, y: number): this {\n    this.context2D.scale(x, y);\n    return this;\n  }\n\n  resize(width: number, height: number): this {\n    const canvasElement = this.context2D.canvas;\n    const devicePixelRatio = window.devicePixelRatio || 1;\n\n    // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\n    [width, height] = CanvasContext.sanitizeCanvasDims(width * devicePixelRatio, height * devicePixelRatio);\n\n    // Divide back down by the pixel ratio and convert to integers.\n    width = (width / devicePixelRatio) | 0;\n    height = (height / devicePixelRatio) | 0;\n\n    canvasElement.width = width * devicePixelRatio;\n    canvasElement.height = height * devicePixelRatio;\n    canvasElement.style.width = width + 'px';\n    canvasElement.style.height = height + 'px';\n\n    return this.scale(devicePixelRatio, devicePixelRatio);\n  }\n\n  rect(x: number, y: number, width: number, height: number): this {\n    this.context2D.rect(x, y, width, height);\n    return this;\n  }\n\n  fillRect(x: number, y: number, width: number, height: number): this {\n    this.context2D.fillRect(x, y, width, height);\n    return this;\n  }\n\n  /**\n   * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\n   */\n  clearRect(x: number, y: number, width: number, height: number): this {\n    this.context2D.clearRect(x, y, width, height);\n    return this;\n  }\n\n  beginPath(): this {\n    this.context2D.beginPath();\n    return this;\n  }\n\n  moveTo(x: number, y: number): this {\n    this.context2D.moveTo(x, y);\n    return this;\n  }\n\n  lineTo(x: number, y: number): this {\n    this.context2D.lineTo(x, y);\n    return this;\n  }\n\n  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): this {\n    this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    return this;\n  }\n\n  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): this {\n    this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n    return this;\n  }\n\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise: boolean): this {\n    this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n    return this;\n  }\n\n  fill(): this {\n    this.context2D.fill();\n    return this;\n  }\n\n  stroke(): this {\n    this.context2D.stroke();\n    return this;\n  }\n\n  closePath(): this {\n    this.context2D.closePath();\n    return this;\n  }\n\n  measureText(text: string): TextMeasure {\n    const metrics = this.context2D.measureText(text);\n    return {\n      width: metrics.width,\n      height: this.textHeight,\n    };\n  }\n\n  fillText(text: string, x: number, y: number): this {\n    this.context2D.fillText(text, x, y);\n    return this;\n  }\n\n  save(): this {\n    this.context2D.save();\n    return this;\n  }\n\n  restore(): this {\n    this.context2D.restore();\n    return this;\n  }\n\n  set fillStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.context2D.fillStyle = style;\n  }\n\n  get fillStyle(): string | CanvasGradient | CanvasPattern {\n    return this.context2D.fillStyle;\n  }\n\n  set strokeStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.context2D.strokeStyle = style;\n  }\n\n  get strokeStyle(): string | CanvasGradient | CanvasPattern {\n    return this.context2D.strokeStyle;\n  }\n\n  setFont(family: string, size: number, weight?: string): this {\n    this.context2D.font = (weight || '') + ' ' + size + 'pt ' + family;\n    this.textHeight = (size * 4) / 3;\n    return this;\n  }\n\n  /** Return a string of the form `'italic bold 15pt Arial'` */\n  getFont(): string {\n    return this.context2D.font;\n  }\n\n  setRawFont(font: string): this {\n    this.context2D.font = font;\n\n    const fontArray = font.split(' ');\n    const size = Number(fontArray[0].match(/\\d+/));\n    // The font size is specified in points, scale it to canvas units.\n    // CSS specifies dpi to be 96 and there are 72 points to an inch: 96/72 == 4/3.\n    this.textHeight = (size * 4) / 3;\n\n    return this;\n  }\n\n  set font(value: string) {\n    this.setRawFont(value);\n  }\n\n  get font(): string {\n    return this.context2D.font;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Gregory Ristow (2015)\n\nimport { GroupAttributes, RenderContext, TextMeasure } from './rendercontext';\nimport { normalizeAngle, prefix, RuntimeError } from './util';\n\n// eslint-disable-next-line\ntype Attributes = { [key: string]: any };\n\nconst attrNamesToIgnoreMap: { [nodeName: string]: Attributes } = {\n  path: {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  },\n  rect: {\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  },\n  text: {\n    width: true,\n    height: true,\n  },\n};\n\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\n\nconst TWO_PI = 2 * Math.PI;\n\ninterface State {\n  state: Attributes;\n  attributes: Attributes;\n  shadow_attributes: Attributes;\n  lineWidth: number;\n}\n\nclass MeasureTextCache {\n  protected txt?: SVGTextElement;\n\n  // The cache is keyed first by the text string, then by the font attributes\n  // joined together.\n  protected cache: Record<string, Record<string, TextMeasure>> = {};\n\n  lookup(text: string, svg: SVGSVGElement, attributes: Attributes): TextMeasure {\n    let entries = this.cache[text];\n    if (entries === undefined) {\n      entries = {};\n      this.cache[text] = entries;\n    }\n\n    const family = attributes['font-family'];\n    const size = attributes['font-size'];\n    const style = attributes['font-style'];\n    const weight = attributes['font-weight'];\n\n    const key = `${family}%${size}%${style}%${weight}`;\n    let entry = entries[key];\n    if (entry === undefined) {\n      entry = this.measureImpl(text, svg, attributes);\n      entries[key] = entry;\n    }\n    return entry;\n  }\n\n  measureImpl(text: string, svg: SVGSVGElement, attributes: Attributes): TextMeasure {\n    let txt = this.txt;\n    if (!txt) {\n      // Create the SVG text element that will be used to measure text in the event\n      // of a cache miss.\n      txt = document.createElementNS(SVG_NS, 'text');\n      this.txt = txt;\n    }\n\n    txt.textContent = text;\n    txt.setAttributeNS(null, 'font-family', attributes['font-family']);\n    txt.setAttributeNS(null, 'font-size', attributes['font-size']);\n    txt.setAttributeNS(null, 'font-style', attributes['font-style']);\n    txt.setAttributeNS(null, 'font-weight', attributes['font-weight']);\n    svg.appendChild(txt);\n    const bbox = txt.getBBox();\n    svg.removeChild(txt);\n\n    // Remove the trailing 'pt' from the font size and scale to convert from points\n    // to canvas units.\n    // CSS specifies dpi to be 96 and there are 72 points to an inch: 96/72 == 4/3.\n    const fontSize = attributes['font-size'];\n    const height = (fontSize.substring(0, fontSize.length - 2) * 4) / 3;\n    return {\n      width: bbox.width,\n      height: height,\n    };\n  }\n}\n\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext extends RenderContext {\n  protected static measureTextCache = new MeasureTextCache();\n\n  element: HTMLElement; // the parent DOM object\n  svg: SVGSVGElement;\n  width: number = 0;\n  height: number = 0;\n  path: string;\n  pen: { x: number; y: number };\n  lineWidth: number;\n  attributes: Attributes;\n  background_attributes: Attributes;\n  shadow_attributes: Attributes;\n  state: Attributes;\n  state_stack: State[];\n  parent: SVGGElement;\n  groups: SVGGElement[];\n  fontString: string = '';\n\n  constructor(element: HTMLElement) {\n    super();\n    this.element = element;\n\n    const svg = this.create('svg');\n    // Add it to the canvas:\n    this.element.appendChild(svg);\n\n    // Point to it:\n    this.svg = svg;\n    this.groups = [this.svg]; // Create the group stack\n    this.parent = this.svg;\n\n    this.path = '';\n    this.pen = { x: NaN, y: NaN };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      'font-family': 'Arial',\n      'font-size': '8pt',\n      'font-weight': 'normal',\n    };\n\n    const defaultAttributes = {\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      fill: 'black',\n      stroke: 'black',\n      ...defaultAttributes,\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      fill: 'white',\n      stroke: 'white',\n      ...defaultAttributes,\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n  }\n\n  /**\n   * Use one of the overload signatures to create an SVG element of a specific type.\n   * The last overload accepts an arbitrary string, and is identical to the\n   * implementation signature.\n   * Feel free to add new overloads for other SVG element types as required.\n   */\n  create(svgElementType: 'g'): SVGGElement;\n  create(svgElementType: 'path'): SVGPathElement;\n  create(svgElementType: 'rect'): SVGRectElement;\n  create(svgElementType: 'svg'): SVGSVGElement;\n  create(svgElementType: 'text'): SVGTextElement;\n  create(svgElementType: string): SVGElement;\n  create(svgElementType: string): SVGElement {\n    return document.createElementNS(SVG_NS, svgElementType);\n  }\n\n  // Allow grouping elements in containers for interactivity.\n  openGroup(cls: string, id?: string, attrs?: GroupAttributes): SVGGElement {\n    const group = this.create('g');\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', prefix(cls));\n    if (id) group.setAttribute('id', prefix(id));\n\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n    return group;\n  }\n\n  closeGroup(): void {\n    this.groups.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n\n  add(elem: SVGElement): void {\n    this.parent.appendChild(elem);\n  }\n\n  // ### Styling & State Methods:\n\n  setFont(family: string, size: number, weight?: string): this {\n    // In SVG italic is handled by font-style.\n    // We search the weight argument and apply bold and italic\n    // to font-weight and font-style respectively.\n    let foundBold = false;\n    let foundItalic = false;\n    // Weight might also be a number (200, 400, etc...) so we\n    // test its type to be sure we have access to String methods.\n    if (typeof weight === 'string') {\n      // look for \"italic\" in the weight:\n      if (weight.indexOf('italic') !== -1) {\n        weight = weight.replace(/italic/g, '');\n        foundItalic = true;\n      }\n      // look for \"bold\" in weight\n      if (weight.indexOf('bold') !== -1) {\n        weight = weight.replace(/bold/g, '');\n        foundBold = true;\n      }\n      // remove any remaining spaces\n      weight = weight.replace(/ /g, '');\n    }\n    const noWeightProvided = typeof weight === 'undefined' || weight === '';\n    if (noWeightProvided) {\n      weight = 'normal';\n    }\n\n    const fontAttributes = {\n      'font-family': family,\n      'font-size': size + 'pt',\n      'font-weight': foundBold ? 'bold' : weight,\n      'font-style': foundItalic ? 'italic' : 'normal',\n    };\n\n    // Currently this.fontString only supports size & family. See setRawFont().\n    this.fontString = `${size}pt ${family}`;\n    this.attributes = { ...this.attributes, ...fontAttributes };\n    this.state = { ...this.state, ...fontAttributes };\n\n    return this;\n  }\n\n  setRawFont(font: string): this {\n    this.fontString = font.trim();\n    // Assumes size first, splits on space -- which is presently\n    // how all existing modules are calling this.\n    const fontArray = this.fontString.split(' ');\n\n    const size = fontArray[0];\n    this.attributes['font-size'] = size;\n    this.state['font-size'] = size;\n\n    const family = fontArray[1];\n    this.attributes['font-family'] = family;\n    this.state['font-family'] = family;\n\n    return this;\n  }\n\n  setFillStyle(style: string): this {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style: string): this {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style: string): this {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(color: string): this {\n    this.shadow_attributes.color = color;\n    return this;\n  }\n\n  /**\n   * @param blur A non-negative float specifying the level of shadow blur, where 0\n   *             represents no blur and larger numbers represent increasingly more blur.\n   * @returns this\n   */\n  setShadowBlur(blur: number): this {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  /**\n   * @param width\n   * @returns this\n   */\n  setLineWidth(width: number): this {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n    return this;\n  }\n\n  /**\n   * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n   * @returns this\n   *\n   * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n   */\n  setLineDash(lineDash: number[]): this {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      this.attributes['stroke-dasharray'] = lineDash.join(',');\n      return this;\n    } else {\n      throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n\n  /**\n   * @param capType\n   * @returns this\n   */\n  setLineCap(capType: CanvasLineCap): this {\n    this.attributes['stroke-linecap'] = capType;\n    return this;\n  }\n\n  // ### Sizing & Scaling Methods:\n\n  // TODO (GCR): See note at scale() -- separate our internal\n  // conception of pixel-based width/height from the style.width\n  // and style.height properties eventually to allow users to\n  // apply responsive sizing attributes to the SVG.\n  resize(width: number, height: number): this {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width.toString();\n\n    this.svg.style.width = width.toString();\n    this.svg.style.height = height.toString();\n\n    const attributes = {\n      width,\n      height,\n    };\n\n    this.applyAttributes(this.svg, attributes);\n    this.scale(this.state.scale.x, this.state.scale.y);\n    return this;\n  }\n\n  scale(x: number, y: number): this {\n    // uses viewBox to scale\n    // TODO (GCR): we may at some point want to distinguish the\n    // style.width / style.height properties that are applied to\n    // the SVG object from our internal conception of the SVG\n    // width/height.  This would allow us to create automatically\n    // scaling SVG's that filled their containers, for instance.\n    //\n    // As this isn't implemented in Canvas contexts,\n    // I've left as is for now, but in using the viewBox to\n    // handle internal scaling, am trying to make it possible\n    // for us to eventually move in that direction.\n\n    this.state.scale = { x, y };\n    const visibleWidth = this.width / x;\n    const visibleHeight = this.height / y;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n\n    return this;\n  }\n\n  /**\n   * 1 arg: string in the \"x y w h\" format\n   * 4 args: x:number, y:number, w:number, h:number\n   */\n  setViewBox(viewBox_or_minX: string | number, minY?: number, width?: number, height?: number): void {\n    if (typeof viewBox_or_minX === 'string') {\n      this.svg.setAttribute('viewBox', viewBox_or_minX);\n    } else {\n      const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }\n\n  // ### Drawing helper methods:\n\n  applyAttributes(element: SVGElement, attributes: Attributes): SVGElement {\n    const attrNamesToIgnore = attrNamesToIgnoreMap[element.nodeName];\n    Object.keys(attributes).forEach((propertyName) => {\n      if (attrNamesToIgnore && attrNamesToIgnore[propertyName]) {\n        return;\n      }\n      element.setAttributeNS(null, propertyName, attributes[propertyName]);\n    });\n\n    return element;\n  }\n\n  // ### Shape & Path Methods:\n\n  clear(): void {\n    // Clear the SVG by removing all inner children.\n\n    // (This approach is usually slightly more efficient\n    // than removing the old SVG & adding a new one to\n    // the container element, since it does not cause the\n    // container to resize twice.  Also, the resize\n    // triggered by removing the entire SVG can trigger\n    // a touchcancel event when the element resizes away\n    // from a touch point.)\n\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    }\n\n    // Replace the viewbox attribute we just removed:\n    this.scale(this.state.scale.x, this.state.scale.y);\n  }\n\n  // ## Rectangles:\n  rect(x: number, y: number, width: number, height: number, attributes?: Attributes): this {\n    // Avoid invalid negative height attribs by\n    // flipping the rectangle on its head:\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    // Create the rect & style it:\n    const rectangle = this.create('rect');\n    if (typeof attributes === 'undefined') {\n      attributes = {\n        fill: 'none',\n        'stroke-width': this.lineWidth,\n        stroke: 'black',\n      };\n    }\n\n    attributes = { ...attributes, x, y, width, height };\n\n    this.applyAttributes(rectangle, attributes);\n\n    this.add(rectangle);\n    return this;\n  }\n\n  fillRect(x: number, y: number, width: number, height: number): this {\n    const attributes = { fill: this.attributes.fill };\n    this.rect(x, y, width, height, attributes);\n    return this;\n  }\n\n  clearRect(x: number, y: number, width: number, height: number): this {\n    // TODO(GCR): Improve implementation of this...\n    // Currently it draws a box of the background color, rather\n    // than creating alpha through lower z-levels.\n    //\n    // See the implementation of this in SVGKit:\n    // http://sourceforge.net/projects/svgkit/\n    // as a starting point.\n    //\n    // Adding a large number of transform paths (as we would\n    // have to do) could be a real performance hit.  Since\n    // tabNote seems to be the only module that makes use of this\n    // it may be worth creating a separate tabStave that would\n    // draw lines around locations of tablature fingering.\n    //\n    this.rect(x, y, width, height, this.background_attributes);\n    return this;\n  }\n\n  // ## Paths:\n\n  beginPath(): this {\n    this.path = '';\n    this.pen.x = NaN;\n    this.pen.y = NaN;\n    return this;\n  }\n\n  moveTo(x: number, y: number): this {\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x: number, y: number): this {\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x: number, y: number): this {\n    this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1: number, y1: number, x: number, y: number): this {\n    this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise: boolean): this {\n    const x0 = x + radius * Math.cos(startAngle);\n    const y0 = y + radius * Math.sin(startAngle);\n\n    // Handle the edge case where arc length is greater than or equal to\n    // the circle's circumference:\n    //   https://html.spec.whatwg.org/multipage/canvas.html#ellipse-method-steps\n    if (\n      (!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n      (counterclockwise && startAngle - endAngle >= TWO_PI)\n    ) {\n      const x1 = x + radius * Math.cos(startAngle + Math.PI);\n      const y1 = y + radius * Math.sin(startAngle + Math.PI);\n      // There's no way to specify a completely circular arc in SVG so we have to\n      // use two semi-circular arcs.\n      this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n      this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n      this.pen.x = x0;\n      this.pen.y = y0;\n    } else {\n      const x1 = x + radius * Math.cos(endAngle);\n      const y1 = y + radius * Math.sin(endAngle);\n\n      startAngle = normalizeAngle(startAngle);\n      endAngle = normalizeAngle(endAngle);\n\n      let large: boolean;\n      if (Math.abs(endAngle - startAngle) < Math.PI) {\n        large = counterclockwise;\n      } else {\n        large = !counterclockwise;\n      }\n      if (startAngle > endAngle) {\n        large = !large;\n      }\n\n      const sweep = !counterclockwise;\n\n      this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n      this.pen.x = x1;\n      this.pen.y = y1;\n    }\n    return this;\n  }\n\n  closePath(): this {\n    this.path += 'Z';\n    return this;\n  }\n\n  private getShadowStyle(): string {\n    const sa = this.shadow_attributes;\n    // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n    // of the same radius, so we scale the drop-shadow radius here to make it\n    // look close to the canvas shadow.\n    return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n  }\n\n  fill(attributes: Attributes): this {\n    const path = this.create('path');\n    if (typeof attributes === 'undefined') {\n      attributes = { ...this.attributes, stroke: 'none' };\n    }\n\n    attributes.d = this.path;\n    if (this.shadow_attributes.width > 0) {\n      attributes.style = this.getShadowStyle();\n    }\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  stroke(): this {\n    const path = this.create('path');\n    const attributes: Attributes = {\n      ...this.attributes,\n      fill: 'none',\n      'stroke-width': this.lineWidth,\n      d: this.path,\n    };\n    if (this.shadow_attributes.width > 0) {\n      attributes.style = this.getShadowStyle();\n    }\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  // ## Text Methods:\n  measureText(text: string): TextMeasure {\n    return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\n  }\n\n  fillText(text: string, x: number, y: number): this {\n    if (!text || text.length <= 0) {\n      return this;\n    }\n    const attributes: Attributes = {\n      ...this.attributes,\n      stroke: 'none',\n      x,\n      y,\n    };\n\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n    return this;\n  }\n\n  save(): this {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n        scale: this.state.scale,\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n      lineWidth: this.lineWidth,\n    });\n    return this;\n  }\n\n  restore(): this {\n    // TODO(0xfe): State needs to be deep-restored.\n    const savedState = this.state_stack.pop();\n    if (savedState) {\n      const state = savedState;\n      this.state['font-family'] = state.state['font-family'];\n      this.state['font-weight'] = state.state['font-weight'];\n      this.state['font-style'] = state.state['font-style'];\n      this.state['font-size'] = state.state['font-size'];\n      this.state.scale = state.state.scale;\n\n      this.attributes['font-family'] = state.attributes['font-family'];\n      this.attributes['font-weight'] = state.attributes['font-weight'];\n      this.attributes['font-style'] = state.attributes['font-style'];\n      this.attributes['font-size'] = state.attributes['font-size'];\n\n      this.attributes.fill = state.attributes.fill;\n      this.attributes.stroke = state.attributes.stroke;\n      this.attributes['stroke-width'] = state.attributes['stroke-width'];\n      this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n\n      this.shadow_attributes.width = state.shadow_attributes.width;\n      this.shadow_attributes.color = state.shadow_attributes.color;\n\n      this.lineWidth = state.lineWidth;\n    }\n    return this;\n  }\n\n  set font(value: string) {\n    this.setRawFont(value);\n  }\n\n  get font(): string {\n    return this.fontString;\n  }\n\n  set fillStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.setFillStyle(style as string);\n  }\n\n  get fillStyle(): string | CanvasGradient | CanvasPattern {\n    return this.attributes.fill;\n  }\n\n  set strokeStyle(style: string | CanvasGradient | CanvasPattern) {\n    this.setStrokeStyle(style as string);\n  }\n\n  get strokeStyle(): string | CanvasGradient | CanvasPattern {\n    return this.attributes.stroke;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { CanvasContext } from './canvascontext';\nimport { RenderContext } from './rendercontext';\nimport { SVGContext } from './svgcontext';\nimport { RuntimeError } from './util';\n\n// A ContextBuilder is either Renderer.getSVGContext or Renderer.getCanvasContext.\nexport type ContextBuilder = typeof Renderer.getSVGContext | typeof Renderer.getCanvasContext;\n\n// eslint-disable-next-line\nfunction isRenderContext(obj: any): obj is RenderContext {\n  return obj.setShadowBlur !== undefined;\n}\n\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n  protected ctx: RenderContext;\n\n  static lastContext?: RenderContext = undefined;\n\n  static buildContext(\n    elementId: string | HTMLCanvasElement | HTMLDivElement,\n    backend: number,\n    width: number,\n    height: number,\n    background: string = '#FFF'\n  ): RenderContext {\n    const renderer = new Renderer(elementId, backend);\n    if (width && height) {\n      renderer.resize(width, height);\n    }\n\n    const ctx = renderer.getContext();\n    ctx.setBackgroundFillStyle(background);\n    Renderer.lastContext = ctx;\n    return ctx;\n  }\n\n  static getCanvasContext(elementId: string, width: number, height: number, background?: string): RenderContext {\n    return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n  }\n\n  static getSVGContext(elementId: string, width: number, height: number, background?: string): RenderContext {\n    return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n  }\n\n  // Draw a dashed line (horizontal, vertical or diagonal\n  // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n  // setting the second number to 0 draws a solid line.\n  static drawDashedLine(\n    context: RenderContext,\n    fromX: number,\n    fromY: number,\n    toX: number,\n    toY: number,\n    dashPattern: number[]\n  ): void {\n    context.beginPath();\n\n    const dx = toX - fromX;\n    const dy = toY - fromY;\n    const angle = Math.atan2(dy, dx);\n    let x = fromX;\n    let y = fromY;\n    context.moveTo(fromX, fromY);\n    let idx = 0;\n    let draw = true;\n    while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n      const dashLength = dashPattern[idx++ % dashPattern.length];\n      const nx = x + Math.cos(angle) * dashLength;\n      x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n      const ny = y + Math.sin(angle) * dashLength;\n      y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n      if (draw) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n      draw = !draw;\n    }\n\n    context.closePath();\n    context.stroke();\n  }\n\n  /**\n   * @param canvasId can be:\n   *   - a string element ID (of a canvas or div element)\n   *   - a canvas element\n   *   - a div element, which will contain the SVG output\n   * @param backend Renderer.Backends.CANVAS or Renderer.Backends.SVG\n   */\n  constructor(context: RenderContext);\n  constructor(canvas: string | HTMLCanvasElement | HTMLDivElement, backend: number);\n  constructor(arg0: string | HTMLCanvasElement | HTMLDivElement | RenderContext, arg1?: number) {\n    if (isRenderContext(arg0)) {\n      // The user has provided what looks like a RenderContext, let's just use it.\n      // TODO(tommadams): RenderContext is an interface, can we introduce a context base class\n      // to make this check more robust?\n      this.ctx = arg0;\n    } else {\n      if (arg1 === undefined) {\n        // The backend must be specified if the render context isn't directly provided.\n        throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n      }\n      const backend: number = arg1;\n\n      let element: HTMLElement;\n      if (typeof arg0 == 'string') {\n        const maybeElement = document.getElementById(arg0);\n        if (maybeElement == null) {\n          throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n        }\n        element = maybeElement;\n      } else {\n        element = arg0 as HTMLElement;\n      }\n\n      // Verify backend and create context\n      if (backend === Renderer.Backends.CANVAS) {\n        if (!(element instanceof window.HTMLCanvasElement)) {\n          throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement');\n        }\n        const context = element.getContext('2d');\n        if (!context) {\n          throw new RuntimeError('BadElement', \"Can't get canvas context\");\n        }\n        this.ctx = new CanvasContext(context);\n      } else if (backend === Renderer.Backends.SVG) {\n        if (!(element instanceof window.HTMLDivElement)) {\n          throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n        }\n        this.ctx = new SVGContext(element);\n      } else {\n        throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n      }\n    }\n  }\n\n  resize(width: number, height: number): this {\n    this.ctx.resize(width, height);\n    return this;\n  }\n\n  getContext(): RenderContext {\n    return this.ctx;\n  }\n}\n\n// eslint-disable-next-line\nexport namespace Renderer {\n  export enum Backends {\n    CANVAS = 1,\n    SVG = 2,\n  }\n\n  // End of line types\n  export enum LineEndType {\n    NONE = 1, // No leg\n    UP = 2, // Upward leg\n    DOWN = 3, // Downward leg\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\n\nimport { Stem } from 'stem';\n\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { Renderer } from './renderer';\nimport { isStaveNote, isStemmableNote } from './typeguard';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport class StringNumber extends Modifier {\n  static get CATEGORY(): string {\n    return 'StringNumber';\n  }\n\n  protected radius: number;\n  protected last_note?: Note;\n  protected string_number: string;\n  protected x_offset: number;\n  protected y_offset: number;\n  protected dashed: boolean;\n  protected leg: number;\n  protected font: FontInfo;\n\n  // ## Static Methods\n  // Arrange string numbers inside a `ModifierContext`\n  static format(nums: StringNumber[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const right_shift = state.right_shift;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shift_left = 0;\n    let shift_right = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote();\n      const pos = num.getPosition();\n\n      if (!isStaveNote(note)) {\n        throw new RuntimeError('NoStaveNote');\n      }\n\n      const index = num.checkIndex();\n      const props = note.getKeyProps()[index];\n\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);\n          }\n          if (right_shift === 0) {\n            shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        pos,\n        note,\n        num,\n        line: props.line,\n        shiftL: shift_left,\n        shiftR: shift_right,\n      });\n    }\n\n    // Sort string numbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let num_shiftR = 0;\n    let x_widthL = 0;\n    let x_widthR = 0;\n    let last_line = null;\n    let last_note = null;\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const note = nums_list[i].note;\n      const pos = nums_list[i].pos;\n      const num = nums_list[i].num;\n      const line = nums_list[i].line;\n      const shiftR = nums_list[i].shiftR;\n\n      // Reset the position of the string number every line.\n      if (line !== last_line || note !== last_note) {\n        num_shiftR = right_shift + shiftR;\n      }\n\n      const num_width = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift);\n        num_shift = shift_left + num_width; // spacing\n        x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(num_shiftR);\n        num_shift += num_width; // spacing\n        x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\n      }\n      last_line = line;\n      last_note = note;\n    }\n\n    state.left_shift += x_widthL;\n    state.right_shift += x_widthR;\n    return true;\n  }\n\n  constructor(number: string) {\n    super();\n\n    this.string_number = number;\n    this.setWidth(20); // ???\n    this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.dashed = true; // true - draw dashed extension  false - no extension\n    this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n    this.radius = 8;\n    this.font = {\n      family: 'sans-serif',\n      size: 10,\n      weight: 'bold',\n    };\n  }\n\n  setLineEndType(leg: number): this {\n    if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n      this.leg = leg;\n    }\n    return this;\n  }\n\n  setStringNumber(number: string): this {\n    this.string_number = number;\n    return this;\n  }\n\n  setOffsetX(x: number): this {\n    this.x_offset = x;\n    return this;\n  }\n\n  setOffsetY(y: number): this {\n    this.y_offset = y;\n    return this;\n  }\n\n  setLastNote(note: Note): this {\n    this.last_note = note;\n    return this;\n  }\n\n  setDashed(dashed: boolean): this {\n    this.dashed = dashed;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const line_space = note.checkStave().getSpacingBetweenLines();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n      case Modifier.Position.BELOW: {\n        const stem_ext = note.getStemExtents();\n        let top = stem_ext.topY;\n        let bottom = stem_ext.baseY + 2;\n\n        if (note.getStemDirection() === Stem.DOWN) {\n          top = stem_ext.baseY;\n          bottom = stem_ext.topY - 2;\n        }\n\n        if (this.position === Modifier.Position.ABOVE) {\n          dot_y = note.hasStem() ? top - line_space * 1.75 : start.y - line_space * 1.75;\n        } else {\n          dot_y = note.hasStem() ? bottom + line_space * 1.5 : start.y + line_space * 1.75;\n        }\n\n        dot_y += this.y_shift + this.y_offset;\n\n        break;\n      }\n      case Modifier.Position.LEFT:\n        dot_x -= this.radius / 2 + 5;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += this.radius / 2 + 6;\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n    ctx.setLineWidth(1.5);\n    ctx.stroke();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const x = dot_x - ctx.measureText(this.string_number).width / 2;\n    ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n\n    const lastNote = this.last_note;\n    if (isStemmableNote(lastNote)) {\n      // Only StemmableNote objects have getStemX().\n      const end = lastNote.getStemX() - note.getX() + 5;\n      ctx.setStrokeStyle('#000000');\n      ctx.setLineCap('round');\n      ctx.setLineWidth(0.6);\n      if (this.dashed) {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n      } else {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n      }\n\n      let len;\n      let pattern;\n      switch (this.leg) {\n        case Renderer.LineEndType.UP:\n          len = -10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        case Renderer.LineEndType.DOWN:\n          len = 10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        default:\n          break;\n      }\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\n\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { isNote, isStaveNote, isTabNote } from './typeguard';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport class Stroke extends Modifier {\n  static get CATEGORY(): string {\n    return 'Stroke';\n  }\n\n  static readonly Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3, // Arpeggiated chord\n    ROLL_UP: 4, // Arpeggiated chord\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n  };\n\n  protected options: {\n    all_voices: boolean;\n  };\n  protected all_voices: boolean;\n  protected type: number;\n\n  protected note_end?: Note;\n  public render_options: {\n    font_scale: number;\n    stroke_px: number;\n    stroke_spacing: number;\n  };\n  protected font: FontInfo;\n\n  // Arrange strokes inside `ModifierContext`\n  static format(strokes: Stroke[], state: ModifierContextState): boolean {\n    const left_shift = state.left_shift;\n    const stroke_spacing = 0;\n\n    if (!strokes || strokes.length === 0) return false;\n\n    const strokeList = strokes.map((stroke) => {\n      const note = stroke.getNote();\n      const index = stroke.checkIndex();\n      if (isStaveNote(note)) {\n        // Only StaveNote objects have getKeyProps().\n        const { line } = note.getKeyProps()[index];\n        const shift = note.getLeftDisplacedHeadPx();\n        return { line, shift, stroke };\n      } else if (isTabNote(note)) {\n        // Only TabNote objects have getPositions().\n        const { str: string } = note.getPositions()[index];\n        return { line: string, shift: 0, stroke };\n      } else {\n        throw new RuntimeError('Internal', 'Unexpected instance.');\n      }\n    });\n\n    const strokeShift = left_shift;\n\n    // There can only be one stroke .. if more than one, they overlay each other\n    const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n      stroke.setXShift(strokeShift + shift);\n      return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n    }, 0);\n\n    state.left_shift += xShift;\n\n    return true;\n  }\n\n  constructor(type: number, options?: { all_voices: boolean }) {\n    super();\n\n    this.options = { all_voices: true, ...options };\n\n    // multi voice - span stroke across all voices if true\n    this.all_voices = this.options.all_voices;\n\n    // multi voice - end note of stroke, set in draw()\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      font_scale: 38,\n      stroke_px: 3,\n      stroke_spacing: 10,\n    };\n\n    this.font = {\n      family: 'serif',\n      size: 10,\n      weight: 'bold italic',\n    };\n\n    this.setXShift(0);\n    this.setWidth(10);\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  addEndNote(note: Note): this {\n    this.note_end = note;\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let ys = note.getYs();\n    let topY = start.y;\n    let botY = start.y;\n    const x = start.x - 5;\n    const line_space = note.checkStave().getSpacingBetweenLines();\n\n    const notes = this.checkModifierContext().getMembers(note.getCategory());\n    for (let i = 0; i < notes.length; i++) {\n      const note = notes[i];\n      if (isNote(note)) {\n        // Only Note objects have getYs().\n        // note is an instance of either StaveNote or TabNote.\n        ys = note.getYs();\n        for (let n = 0; n < ys.length; n++) {\n          if (this.note === notes[i] || this.all_voices) {\n            topY = Math.min(topY, ys[n]);\n            botY = Math.max(botY, ys[n]);\n          }\n        }\n      }\n    }\n\n    let arrow = '';\n    let arrow_shift_x = 0;\n    let arrow_y = 0;\n    let text_shift_x = 0;\n    let text_y = 0;\n\n    switch (this.type) {\n      case Stroke.Type.BRUSH_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        arrow_y = topY - line_space / 2 + 10;\n        botY += line_space / 2;\n        break;\n      case Stroke.Type.BRUSH_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = 0.5;\n        arrow_y = botY + line_space / 2;\n        topY -= line_space / 2;\n        break;\n      case Stroke.Type.ROLL_DOWN:\n      case Stroke.Type.RASQUEDO_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        text_shift_x = this.x_shift + arrow_shift_x - 2;\n        if (isStaveNote(note)) {\n          topY += 1.5 * line_space;\n          if ((botY - topY) % 2 !== 0) {\n            botY += 0.5 * line_space;\n          } else {\n            botY += line_space;\n          }\n          arrow_y = topY - line_space;\n          text_y = botY + line_space + 2;\n        } else {\n          topY += 1.5 * line_space;\n          botY += line_space;\n          arrow_y = topY - 0.75 * line_space;\n          text_y = botY + 0.25 * line_space;\n        }\n        break;\n      case Stroke.Type.ROLL_UP:\n      case Stroke.Type.RASQUEDO_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = -4;\n        text_shift_x = this.x_shift + arrow_shift_x - 1;\n        if (isStaveNote(note)) {\n          arrow_y = line_space / 2;\n          topY += 0.5 * line_space;\n          if ((botY - topY) % 2 === 0) {\n            botY += line_space / 2;\n          }\n          arrow_y = botY + 0.5 * line_space;\n          text_y = topY - 1.25 * line_space;\n        } else {\n          topY += 0.25 * line_space;\n          botY += 0.5 * line_space;\n          arrow_y = botY + 0.25 * line_space;\n          text_y = topY - line_space;\n        }\n        break;\n      case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n        topY += 0.5 * line_space;\n        botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\n        break;\n      default:\n        throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n    }\n\n    let strokeLine = 'straight';\n    // Draw the stroke\n    if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n      ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);\n    } else {\n      strokeLine = 'wiggly';\n      if (isStaveNote(note)) {\n        for (let i = topY; i <= botY; i += line_space) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n      } else {\n        let i;\n        for (i = topY; i <= botY; i += 10) {\n          Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n        }\n        if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n          text_y = i + 0.25 * line_space;\n        }\n      }\n    }\n\n    if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n      return; // skip drawing arrow heads or text\n    }\n\n    // Draw the arrow head\n    Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {\n      category: `stroke.${arrow}.${strokeLine}`,\n    });\n\n    // Draw the rasquedo \"R\"\n    if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText('R', x + text_shift_x, text_y);\n      ctx.restore();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Bend } from './bend';\nimport { Modifier } from './modifier';\nimport { ModifierContext, ModifierContextState } from './modifiercontext';\nimport { RenderContext } from './rendercontext';\n\nexport interface VibratoRenderOptions {\n  wave_height: number;\n  wave_girth: number;\n  vibrato_width: number;\n  harsh: boolean;\n  wave_width: number;\n}\n\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n  static get CATEGORY(): string {\n    return 'Vibrato';\n  }\n\n  public render_options: VibratoRenderOptions;\n\n  /** Arrange vibratos inside a `ModifierContext`. */\n  static format(vibratos: Vibrato[], state: ModifierContextState, context: ModifierContext): boolean {\n    if (!vibratos || vibratos.length === 0) return false;\n\n    // Vibratos are always on top.\n    let text_line = state.top_text_line;\n    let width = 0;\n    let shift = state.right_shift - 7;\n\n    // If there's a bend, drop the text line\n    const bends = context.getMembers(Bend.CATEGORY) as Bend[];\n    if (bends && bends.length > 0) {\n      text_line--;\n    }\n\n    // Format Vibratos\n    for (let i = 0; i < vibratos.length; ++i) {\n      const vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  constructor() {\n    super();\n\n    this.position = Modifier.Position.RIGHT;\n    this.render_options = {\n      harsh: false,\n      vibrato_width: 20,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n    };\n\n    this.setVibratoWidth(this.render_options.vibrato_width);\n  }\n\n  /** Set harsh vibrato. */\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  /** Set vibrato width in pixels. */\n  setVibratoWidth(width: number): this {\n    this.render_options.vibrato_width = width;\n    this.setWidth(width);\n    return this;\n  }\n\n  /** Draw the vibrato on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n\n    const vx = start.x + this.x_shift;\n    const vy = note.getYForTopText(this.text_line) + 2;\n\n    Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n  }\n\n  /**\n   * Static rendering method that can be called from\n   * other classes (e.g. VibratoBracket).\n   */\n  static renderVibrato(ctx: RenderContext, x: number, y: number, opts: VibratoRenderOptions): void {\n    const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n    const num_waves = vibrato_width / wave_width;\n\n    ctx.beginPath();\n\n    let i;\n    if (harsh) {\n      ctx.moveTo(x, y + wave_girth + 1);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x + wave_width, y - wave_height / 2);\n        x += wave_width;\n        ctx.lineTo(x + wave_width, y + wave_height / 2);\n        x += wave_width;\n      }\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n        ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n      }\n      ctx.fill();\n    } else {\n      ctx.moveTo(x, y + wave_girth);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n        x += wave_width;\n        ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n        x += wave_width;\n      }\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n        ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n      }\n      ctx.fill();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.)\n\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Bend } from './bend';\nimport { ChordSymbol } from './chordsymbol';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { StaveNote } from './stavenote';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { TabNote } from './tabnote';\nimport { Tickable } from './tickable';\nimport { log, RuntimeError } from './util';\nimport { Vibrato } from './vibrato';\n\nexport interface ModifierContextState {\n  right_shift: number;\n  left_shift: number;\n  text_line: number;\n  top_text_line: number;\n}\n\nexport interface ModifierContextMetrics {\n  width: number;\n  spacing: number;\n}\n\nexport type ModifierContextMember = Tickable | Modifier | StaveNote | TabNote;\n\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (ModifierContext.DEBUG) log('Vex.Flow.ModifierContext', args);\n}\n\nexport class ModifierContext {\n  static DEBUG: boolean;\n\n  state: ModifierContextState;\n\n  protected spacing: number;\n  protected members: Record<string, ModifierContextMember[]>;\n\n  protected preFormatted: boolean = false;\n  protected postFormatted: boolean = false;\n  protected width: number;\n  protected formatted?: boolean;\n  // eslint-disable-next-line\n  protected PREFORMAT: any[];\n  // eslint-disable-next-line\n  protected POSTFORMAT: any[];\n\n  constructor() {\n    // Current members\n    this.members = {};\n\n    // Formatting data.\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0,\n    };\n\n    // Add new members to this array. The ordering is significant -- lower\n    // members are formatted and rendered before higher ones.\n    this.PREFORMAT = [\n      StaveNote,\n      Dot,\n      FretHandFinger,\n      Accidental,\n      Stroke,\n      GraceNoteGroup,\n      NoteSubGroup,\n      StringNumber,\n      Articulation,\n      Ornament,\n      Annotation,\n      ChordSymbol,\n      Bend,\n      Vibrato,\n    ];\n\n    // If post-formatting is required for an element, add it to this array.\n    this.POSTFORMAT = [StaveNote];\n  }\n\n  addModifier(member: ModifierContextMember): this {\n    L('addModifier is deprecated, use addMember instead.');\n    return this.addMember(member);\n  }\n\n  /**\n   * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n   * Here we add a new member to this.members, and create a new array if needed.\n   * @param member\n   * @returns this\n   */\n  addMember(member: ModifierContextMember): this {\n    const category = member.getCategory();\n    if (!this.members[category]) {\n      this.members[category] = [];\n    }\n    this.members[category].push(member);\n    member.setModifierContext(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  /**\n   * @deprecated\n   */\n  getModifiers(category: string): ModifierContextMember[] {\n    L('getModifiers is deprecated, use getMembers instead.');\n    return this.getMembers(category);\n  }\n\n  getMembers(category: string): ModifierContextMember[] {\n    return this.members[category];\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getLeftShift(): number {\n    return this.state.left_shift;\n  }\n\n  getRightShift(): number {\n    return this.state.right_shift;\n  }\n\n  getState(): ModifierContextState {\n    return this.state;\n  }\n\n  getMetrics(): ModifierContextMetrics {\n    if (!this.formatted) {\n      throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n    }\n\n    return {\n      width: this.state.left_shift + this.state.right_shift + this.spacing,\n      spacing: this.spacing,\n    };\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n    this.PREFORMAT.forEach((member) => {\n      L('Preformatting ModifierContext: ', member.CATEGORY);\n      member.format(this.getMembers(member.CATEGORY), this.state, this);\n    });\n\n    // Update width of this member context\n    this.width = this.state.left_shift + this.state.right_shift;\n    this.preFormatted = true;\n  }\n\n  postFormat(): void {\n    if (this.postFormatted) return;\n    this.POSTFORMAT.forEach((member) => {\n      L('Postformatting ModifierContext: ', member.CATEGORY);\n      member.postFormat(this.getMembers(member.CATEGORY) as Note[]);\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\n\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { defined } from './util';\n\nexport interface LayoutMetrics {\n  xMin: number;\n  xMax: number;\n  paddingLeft: number;\n  paddingRight: number;\n}\n\nexport enum StaveModifierPosition {\n  CENTER = 0,\n  LEFT = 1,\n  RIGHT = 2,\n  ABOVE = 3,\n  BELOW = 4,\n  BEGIN = 5,\n  END = 6,\n}\n\nexport class StaveModifier extends Element {\n  static get CATEGORY(): string {\n    return 'StaveModifier';\n  }\n\n  static get Position(): typeof StaveModifierPosition {\n    return StaveModifierPosition;\n  }\n\n  protected width: number = 0;\n  protected x: number = 0;\n\n  protected padding: number;\n  protected position: StaveModifierPosition;\n  protected stave?: Stave;\n  protected layoutMetrics?: LayoutMetrics;\n\n  constructor() {\n    super();\n\n    this.padding = 10;\n    this.position = StaveModifierPosition.ABOVE;\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  setPosition(position: number): this {\n    this.position = position;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  setX(x: number): this {\n    this.x = x;\n    return this;\n  }\n\n  placeGlyphOnLine(glyph: Glyph, stave: Stave, line?: number, customShift = 0): void {\n    glyph.setYShift(stave.getYForLine(line ?? 0) - stave.getYForGlyphs() + customShift);\n  }\n\n  getPadding(index: number): number {\n    return index !== undefined && index < 2 ? 0 : this.padding;\n  }\n\n  setPadding(padding: number): this {\n    this.padding = padding;\n    return this;\n  }\n\n  setLayoutMetrics(layoutMetrics: LayoutMetrics): this {\n    this.layoutMetrics = layoutMetrics;\n    return this;\n  }\n\n  getLayoutMetrics(): LayoutMetrics | undefined {\n    return this.layoutMetrics;\n  }\n\n  // eslint-disable-next-line\n  draw(element?: Element, x_shift?: number): void {\n    // DO NOTHING.\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { LayoutMetrics, StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\n\nexport enum BarlineType {\n  SINGLE = 1,\n  DOUBLE = 2,\n  END = 3,\n  REPEAT_BEGIN = 4,\n  REPEAT_END = 5,\n  REPEAT_BOTH = 6,\n  NONE = 7,\n}\n\nexport class Barline extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'Barline';\n  }\n\n  protected widths: Record<string, number>;\n  protected paddings: Record<string, number>;\n  protected layoutMetricsMap: Record<number, LayoutMetrics>;\n\n  protected thickness: number;\n  protected type!: BarlineType;\n\n  static get type(): typeof BarlineType {\n    return BarlineType;\n  }\n\n  static get typeString(): Record<string, BarlineType> {\n    return {\n      single: BarlineType.SINGLE,\n      double: BarlineType.DOUBLE,\n      end: BarlineType.END,\n      repeatBegin: BarlineType.REPEAT_BEGIN,\n      repeatEnd: BarlineType.REPEAT_END,\n      repeatBoth: BarlineType.REPEAT_BOTH,\n      none: BarlineType.NONE,\n    };\n  }\n\n  constructor(type: BarlineType | string) {\n    super();\n    this.thickness = Tables.STAVE_LINE_THICKNESS;\n\n    const TYPE = BarlineType;\n    this.widths = {};\n    this.widths[TYPE.SINGLE] = 5;\n    this.widths[TYPE.DOUBLE] = 5;\n    this.widths[TYPE.END] = 5;\n    this.widths[TYPE.REPEAT_BEGIN] = 5;\n    this.widths[TYPE.REPEAT_END] = 5;\n    this.widths[TYPE.REPEAT_BOTH] = 5;\n    this.widths[TYPE.NONE] = 5;\n\n    this.paddings = {};\n    this.paddings[TYPE.SINGLE] = 0;\n    this.paddings[TYPE.DOUBLE] = 0;\n    this.paddings[TYPE.END] = 0;\n    this.paddings[TYPE.REPEAT_BEGIN] = 15;\n    this.paddings[TYPE.REPEAT_END] = 15;\n    this.paddings[TYPE.REPEAT_BOTH] = 15;\n    this.paddings[TYPE.NONE] = 0;\n\n    this.layoutMetricsMap = {};\n    this.layoutMetricsMap[TYPE.SINGLE] = {\n      xMin: 0,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.DOUBLE] = {\n      xMin: -3,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.END] = {\n      xMin: -5,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_END] = {\n      xMin: -10,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n      xMin: -2,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n      xMin: -10,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.NONE] = {\n      xMin: 0,\n      xMax: 0,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.setType(type);\n  }\n\n  getType(): number {\n    return this.type;\n  }\n\n  setType(type: string | number): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    this.setWidth(this.widths[this.type]);\n    this.setPadding(this.paddings[this.type]);\n    this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n    return this;\n  }\n\n  // Draw barlines\n  draw(stave: Stave): void {\n    stave.checkContext();\n    this.setRendered();\n\n    switch (this.type) {\n      case BarlineType.SINGLE:\n        this.drawVerticalBar(stave, this.x, false);\n        break;\n      case BarlineType.DOUBLE:\n        this.drawVerticalBar(stave, this.x, true);\n        break;\n      case BarlineType.END:\n        this.drawVerticalEndBar(stave, this.x);\n        break;\n      case BarlineType.REPEAT_BEGIN:\n        // If the barline is shifted over (in front of clef/time/key)\n        // Draw vertical bar at the beginning.\n        this.drawRepeatBar(stave, this.x, true);\n        if (stave.getX() !== this.x) {\n          this.drawVerticalBar(stave, stave.getX());\n        }\n\n        break;\n      case BarlineType.REPEAT_END:\n        this.drawRepeatBar(stave, this.x, false);\n        break;\n      case BarlineType.REPEAT_BOTH:\n        this.drawRepeatBar(stave, this.x, false);\n        this.drawRepeatBar(stave, this.x, true);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n  }\n\n  drawVerticalBar(stave: Stave, x: number, double_bar?: boolean): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    if (double_bar) {\n      staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n    }\n    staveCtx.fillRect(x, topY, 1, botY - topY);\n  }\n\n  drawVerticalEndBar(stave: Stave, x: number): void {\n    const staveCtx = stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n  }\n\n  drawRepeatBar(stave: Stave, x: number, begin: boolean): void {\n    const staveCtx = stave.checkContext();\n\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    let x_shift = 3;\n\n    if (!begin) {\n      x_shift = -5;\n    }\n\n    staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);\n    staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n\n    const dot_radius = 2;\n\n    // Shift dots left or right\n    if (begin) {\n      x_shift += 4;\n    } else {\n      x_shift -= 4;\n    }\n\n    const dot_x = x + x_shift + dot_radius / 2;\n\n    // calculate the y offset based on number of stave lines\n    let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n    y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n    let dot_y = topY + y_offset + dot_radius / 2;\n\n    // draw the top repeat dot\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n\n    // draw the bottom repeat dot\n    dot_y += stave.getSpacingBetweenLines();\n    staveCtx.beginPath();\n    staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    staveCtx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport enum Justification {\n  LEFT = 1,\n  CENTER = 2,\n  RIGHT = 3,\n}\n\nexport interface TextNoteStruct extends NoteStruct {\n  text?: string;\n  glyph?: string;\n  ignore_ticks?: boolean;\n  smooth?: boolean;\n  font?: FontInfo;\n  subscript?: string;\n  superscript?: string;\n}\n\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n  static get CATEGORY(): string {\n    return 'TextNote';\n  }\n\n  protected text: string;\n  protected superscript?: string;\n  protected subscript?: string;\n  protected smooth: boolean;\n\n  protected font: FontInfo;\n  protected justification: Justification;\n  protected line: number;\n\n  static get Justification(): typeof Justification {\n    return Justification;\n  }\n\n  /** Glyph data. */\n  static get GLYPHS(): Record<string, { code: string }> {\n    return {\n      segno: {\n        code: 'segno',\n      },\n      tr: {\n        code: 'ornamentTrill',\n      },\n      mordent: {\n        code: 'ornamentMordent',\n      },\n      mordent_upper: {\n        code: 'ornamentShortTrill',\n      },\n      mordent_lower: {\n        code: 'ornamentMordent',\n      },\n      f: {\n        code: 'dynamicForte',\n      },\n      p: {\n        code: 'dynamicPiano',\n      },\n      m: {\n        code: 'dynamicMezzo',\n      },\n      s: {\n        code: 'dynamicSforzando',\n      },\n      z: {\n        code: 'dynamicZ',\n      },\n      coda: {\n        code: 'coda',\n      },\n      pedal_open: {\n        code: 'keyboardPedalPed',\n      },\n      pedal_close: {\n        code: 'keyboardPedalUp',\n      },\n      caesura_straight: {\n        code: 'caesura',\n      },\n      caesura_curved: {\n        code: 'caesuraCurved',\n      },\n      breath: {\n        code: 'breathMarkComma',\n      },\n      tick: {\n        code: 'breathMarkTick',\n      },\n      turn: {\n        code: 'ornamentTurn',\n      },\n      turn_inverted: {\n        code: 'ornamentTurnSlash',\n      },\n    };\n  }\n\n  constructor(noteStruct: TextNoteStruct) {\n    super(noteStruct);\n\n    this.text = noteStruct.text || '';\n    this.superscript = noteStruct.superscript;\n    this.subscript = noteStruct.subscript;\n    this.font = {\n      family: 'Arial',\n      size: 12,\n      weight: '',\n      ...noteStruct.font,\n    };\n    this.line = noteStruct.line || 0;\n    this.smooth = noteStruct.smooth || false;\n    this.ignore_ticks = noteStruct.ignore_ticks || false;\n    this.justification = Justification.LEFT;\n\n    // Determine and set initial note width. Note that the text width is\n    // an approximation and isn't very accurate. The only way to accurately\n    // measure the length of text is with `CanvasRenderingContext2D.measureText()`.\n    if (noteStruct.glyph) {\n      const struct = TextNote.GLYPHS[noteStruct.glyph];\n      if (!struct) throw new RuntimeError('Invalid glyph type: ' + noteStruct.glyph);\n\n      this.glyph = new Glyph(struct.code, 40, { category: 'textNote' });\n      this.setWidth(this.glyph.getMetrics().width);\n    } else {\n      this.glyph = undefined;\n    }\n  }\n\n  /** Set the horizontal justification of the TextNote. */\n  setJustification(just: Justification): this {\n    this.justification = just;\n    return this;\n  }\n\n  /** Set the Stave line on which the note should be placed. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Pre-render formatting. */\n  preFormat(): void {\n    if (this.preFormatted) return;\n    const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n\n    if (this.smooth) {\n      this.setWidth(0);\n    } else {\n      if (this.glyph) {\n        // Width already set.\n      } else {\n        const ctx = this.checkContext();\n        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n        this.setWidth(ctx.measureText(this.text).width);\n      }\n    }\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      this.leftDisplacedHeadPx = this.width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      this.leftDisplacedHeadPx = this.width;\n    }\n\n    // We reposition to the center of the note head\n    this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n    this.setPreFormatted(true);\n  }\n\n  /**\n   * Renders the TextNote.\n   * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n   */\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n\n    this.setRendered();\n\n    // Reposition to center of note head\n    let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n\n    // Align based on tick-context width.\n    const width = this.getWidth();\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      x -= width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      x -= width;\n    }\n\n    let y;\n    if (this.glyph) {\n      y = stave.getYForLine(this.line + -3);\n      this.glyph.render(ctx, x, y);\n    } else {\n      y = stave.getYForLine(this.line + -3);\n      this.applyStyle(ctx);\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.text, x, y);\n\n      const height = ctx.measureText(this.text).height;\n\n      // Write superscript\n      if (this.superscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);\n      }\n\n      // Write subscript\n      if (this.subscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);\n      }\n\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport enum VoltaType {\n  NONE = 1,\n  BEGIN = 2,\n  MID = 3,\n  END = 4,\n  BEGIN_END = 5,\n}\n\nexport class Volta extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'Volta';\n  }\n\n  static get type(): typeof VoltaType {\n    return VoltaType;\n  }\n\n  protected volta: number;\n  protected number: string;\n\n  protected font: FontInfo;\n  protected y_shift: number;\n\n  constructor(type: number, number: string, x: number, y_shift: number) {\n    super();\n    this.volta = type;\n    this.x = x;\n    this.y_shift = y_shift;\n    this.number = number;\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    let width = stave.getWidth() - x; // don't include x (offset) for width\n    const top_y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    const vert_height = 1.5 * stave.getSpacingBetweenLines();\n    switch (this.volta) {\n      case VoltaType.BEGIN:\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        break;\n      case VoltaType.END:\n        width -= 5;\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      case VoltaType.BEGIN_END:\n        width -= 3;\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      default:\n        break;\n    }\n    // If the beginning of a volta, draw measure number\n    if (this.volta === VoltaType.BEGIN || this.volta === VoltaType.BEGIN_END) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n      ctx.restore();\n    }\n\n    ctx.fillRect(this.x + x, top_y, width, 1);\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n// MIT License\n\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { defined, log } from './util';\n\nexport interface ClefType {\n  point: number;\n  code: string;\n  line?: number;\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Clef.DEBUG) log('Vex.Flow.Clef', args);\n}\n\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n  /** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'Clef';\n  }\n\n  annotation?: {\n    code: string;\n    line: number;\n    x_shift: number;\n    point: number;\n  };\n\n  /**\n   * The attribute `clef` must be a key from\n   * `Clef.types`\n   */\n  clef: ClefType = Clef.types['treble'];\n\n  protected glyph?: Glyph;\n  protected attachment?: Glyph;\n  protected size?: string;\n  protected type?: string;\n\n  /**\n   * Every clef name is associated with a glyph code from the font file\n   * and a default stave line number.\n   */\n  static get types(): Record<string, ClefType> {\n    return {\n      treble: {\n        code: 'gClef',\n        line: 3,\n        point: 0,\n      },\n      bass: {\n        code: 'fClef',\n        line: 1,\n        point: 0,\n      },\n      alto: {\n        code: 'cClef',\n        line: 2,\n        point: 0,\n      },\n      tenor: {\n        code: 'cClef',\n        line: 1,\n        point: 0,\n      },\n      percussion: {\n        code: 'restMaxima',\n        line: 2,\n        point: 0,\n      },\n      soprano: {\n        code: 'cClef',\n        line: 4,\n        point: 0,\n      },\n      'mezzo-soprano': {\n        code: 'cClef',\n        line: 3,\n        point: 0,\n      },\n      'baritone-c': {\n        code: 'cClef',\n        line: 0,\n        point: 0,\n      },\n      'baritone-f': {\n        code: 'fClef',\n        line: 2,\n        point: 0,\n      },\n      subbass: {\n        code: 'fClef',\n        line: 0,\n        point: 0,\n      },\n      french: {\n        code: 'gClef',\n        line: 4,\n        point: 0,\n      },\n      tab: {\n        code: '6stringTabClef',\n        point: 0,\n      },\n    };\n  }\n\n  /** Create a new clef. */\n  constructor(type: string, size?: string, annotation?: string) {\n    super();\n\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(this.musicFont.lookupMetric(`clef.${this.size}.width`));\n    L('Creating clef:', type);\n  }\n\n  /** Set clef type, size and annotation. */\n  setType(type: string, size?: string, annotation?: string): this {\n    this.type = type;\n    this.clef = Clef.types[type];\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n    this.clef.point = this.musicFont.lookupMetric(`clef.${this.size}.point`, 0);\n    this.glyph = new Glyph(this.clef.code, this.clef.point, {\n      category: `clef.${this.clef.code}.${this.size}`,\n    });\n\n    // If an annotation, such as 8va, is specified, add it to the Clef object.\n    if (annotation !== undefined) {\n      const code = this.musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\n      const point = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\n      const line = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\n      const x_shift = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\n\n      this.annotation = { code, point, line, x_shift };\n\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n\n    return this;\n  }\n\n  /** Get clef width. */\n  getWidth(): number {\n    if (this.type === 'tab') {\n      defined(this.stave, 'ClefError', \"Can't get width without stave.\");\n    }\n    return this.width;\n  }\n\n  /** Set associated stave. */\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    if (this.type === 'tab') {\n      const glyph = defined(this.glyph, 'ClefError', \"Can't set stave without glyph.\");\n\n      const numLines = this.stave.getNumLines();\n      const point = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\n      const shiftY = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\n      glyph.setPoint(point);\n      glyph.setYShift(shiftY);\n    }\n    return this;\n  }\n\n  /** Render clef. */\n  draw(): void {\n    const glyph = defined(this.glyph, 'ClefError', \"Can't draw clef without glyph.\");\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.openGroup('clef', this.getAttribute('id'));\n    glyph.setStave(stave);\n    glyph.setContext(ctx);\n    if (this.clef.line !== undefined) {\n      this.placeGlyphOnLine(glyph, stave, this.clef.line);\n    }\n    glyph.renderToStave(this.x);\n\n    if (this.annotation !== undefined && this.attachment !== undefined) {\n      this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\n      this.attachment.setStave(stave);\n      this.attachment.setContext(ctx);\n      this.attachment.renderToStave(this.x);\n    }\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\n\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { defined } from './util';\n\nexport class KeySignature extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'KeySignature';\n  }\n\n  protected glyphFontScale: number;\n  protected glyphs: Glyph[];\n  protected xPositions: number[];\n  protected paddingForced: boolean;\n  protected formatted?: boolean;\n  protected cancelKeySpec?: string;\n  protected accList: { type: string; line: number }[] = [];\n  protected keySpec?: string;\n  protected alterKeySpec?: string[];\n\n  // Space between natural and following accidental depending\n  // on vertical position\n  static accidentalSpacing: Record<string, { above: number; below: number }> = {\n    '#': {\n      above: 6,\n      below: 4,\n    },\n    b: {\n      above: 4,\n      below: 7,\n    },\n    n: {\n      above: 4,\n      below: 1,\n    },\n    '##': {\n      above: 6,\n      below: 4,\n    },\n    bb: {\n      above: 4,\n      below: 7,\n    },\n    db: {\n      above: 4,\n      below: 7,\n    },\n    d: {\n      above: 4,\n      below: 7,\n    },\n    bbs: {\n      above: 4,\n      below: 7,\n    },\n    '++': {\n      above: 6,\n      below: 4,\n    },\n    '+': {\n      above: 6,\n      below: 4,\n    },\n    '+-': {\n      above: 6,\n      below: 4,\n    },\n    '++-': {\n      above: 6,\n      below: 4,\n    },\n    bs: {\n      above: 4,\n      below: 10,\n    },\n    bss: {\n      above: 4,\n      below: 10,\n    },\n  };\n\n  // Create a new Key Signature based on a `key_spec`\n  constructor(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string[]) {\n    super();\n\n    this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n    this.glyphs = [];\n    this.xPositions = []; // relative to this.x\n    this.paddingForced = false;\n  }\n\n  // Add an accidental glyph to the `KeySignature` instance which represents\n  // the provided `acc`. If `nextAcc` is also provided, the appropriate\n  // spacing will be included in the glyph's position\n  convertToGlyph(acc: { type: string; line: number }, nextAcc: { type: string; line: number }): void {\n    const accGlyphData = Tables.accidentalCodes(acc.type);\n    const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n\n    // Determine spacing between current accidental and the next accidental\n    let extraWidth = 1;\n    if (acc.type === 'n' && nextAcc) {\n      const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n      if (spacing) {\n        const isAbove = nextAcc.line >= acc.line;\n        extraWidth = isAbove ? spacing.above : spacing.below;\n      }\n    }\n\n    // Place the glyph on the stave\n    this.placeGlyphOnLine(glyph, this.checkStave(), acc.line);\n    this.glyphs.push(glyph);\n\n    const xPosition = this.xPositions[this.xPositions.length - 1];\n    const glyphWidth = glyph.getMetrics().width + extraWidth;\n    // Store the next accidental's x position\n    this.xPositions.push(xPosition + glyphWidth);\n    // Expand size of key signature\n    this.width += glyphWidth;\n  }\n\n  // Cancel out a key signature provided in the `spec` parameter. This will\n  // place appropriate natural accidentals before the key signature.\n  cancelKey(spec: string): this {\n    this.formatted = false;\n    this.cancelKeySpec = spec;\n\n    return this;\n  }\n\n  convertToCancelAccList(spec: string): { type: string; accList: { type: string; line: number }[] } | undefined {\n    // Get the accidental list for the cancelled key signature\n    const cancel_accList = Tables.keySignature(spec);\n\n    // If the cancelled key has a different accidental type, ie: # vs b\n    const different_types =\n      this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\n\n    // Determine how many naturals needed to add\n    const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\n\n    // Return if no naturals needed\n    if (naturals < 1) return undefined;\n\n    // Get the line position for each natural\n    const cancelled: { type: string; line: number }[] = [];\n    for (let i = 0; i < naturals; i++) {\n      let index = i;\n      if (!different_types) {\n        index = cancel_accList.length - naturals + i;\n      }\n\n      const acc = cancel_accList[index];\n      cancelled.push({ type: 'n', line: acc.line });\n    }\n\n    // Combine naturals with main accidental list for the key signature\n    this.accList = cancelled.concat(this.accList);\n\n    return {\n      accList: cancelled,\n      type: cancel_accList[0].type,\n    };\n  }\n\n  // Deprecated\n  addToStave(stave: Stave): this {\n    this.paddingForced = true;\n    stave.addModifier(this);\n\n    return this;\n  }\n\n  // Apply the accidental staff line placement based on the `clef` and\n  // the  accidental `type` for the key signature ('# or 'b').\n  convertAccLines(clef: string, type?: string, accList = this.accList): void {\n    let offset = 0.0; // if clef === \"treble\"\n    let customLines; // when clef doesn't follow treble key sig shape\n\n    switch (clef) {\n      // Treble & Subbass both have offsets of 0, so are not included.\n      case 'soprano':\n        if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n        else offset = -1;\n        break;\n      case 'mezzo-soprano':\n        if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n        else offset = 1.5;\n        break;\n      case 'alto':\n        offset = 0.5;\n        break;\n      case 'tenor':\n        if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n        else offset = -0.5;\n        break;\n      case 'baritone-f':\n      case 'baritone-c':\n        if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n        else offset = 2;\n        break;\n      case 'bass':\n      case 'french':\n        offset = 1;\n        break;\n      default:\n        break;\n    }\n\n    // If there's a special case, assign those lines/spaces:\n    let i;\n    if (typeof customLines !== 'undefined') {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line = customLines[i];\n      }\n    } else if (offset !== 0) {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line += offset;\n      }\n    }\n  }\n\n  getPadding(index: number): number {\n    if (!this.formatted) this.format();\n\n    return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n  }\n\n  getWidth(): number {\n    if (!this.formatted) this.format();\n\n    return this.width;\n  }\n\n  setKeySig(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string[]): this {\n    this.formatted = false;\n    this.keySpec = keySpec;\n    this.cancelKeySpec = cancelKeySpec;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  // Alter the accidentals of a key spec one by one.\n  // Each alteration is a new accidental that replaces the\n  // original accidental (or the canceled one).\n  alterKey(alterKeySpec: string[]): this {\n    this.formatted = false;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  convertToAlterAccList(alterKeySpec: string[]): void {\n    const max = Math.min(alterKeySpec.length, this.accList.length);\n    for (let i = 0; i < max; ++i) {\n      if (alterKeySpec[i]) {\n        this.accList[i].type = alterKeySpec[i];\n      }\n    }\n  }\n\n  format(): void {\n    const stave = this.checkStave();\n\n    this.width = 0;\n    this.glyphs = [];\n    this.xPositions = [0]; // initialize with initial x position\n    this.accList = Tables.keySignature(defined(this.keySpec));\n    const accList = this.accList;\n    const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n    let cancelAccList;\n    if (this.cancelKeySpec) {\n      cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n    }\n    if (this.alterKeySpec) {\n      this.convertToAlterAccList(this.alterKeySpec);\n    }\n\n    if (this.accList.length > 0) {\n      const clef =\n        (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n      if (cancelAccList) {\n        this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n      }\n      this.convertAccLines(clef, firstAccidentalType, accList);\n      for (let i = 0; i < this.accList.length; ++i) {\n        this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n      }\n    }\n\n    this.formatted = true;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n\n    if (!this.formatted) this.format();\n    this.setRendered();\n\n    ctx.openGroup('keysignature', this.getAttribute('id'));\n    for (let i = 0; i < this.glyphs.length; i++) {\n      const glyph = this.glyphs[i];\n      const x = this.x + this.xPositions[i];\n      glyph.setStave(stave);\n      glyph.setContext(ctx);\n      glyph.renderToStave(x);\n    }\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport class Repetition extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'Repetition';\n  }\n\n  static readonly type = {\n    NONE: 1, // no coda or segno\n    CODA_LEFT: 2, // coda at beginning of stave\n    CODA_RIGHT: 3, // coda at end of stave\n    SEGNO_LEFT: 4, // segno at beginning of stave\n    SEGNO_RIGHT: 5, // segno at end of stave\n    DC: 6, // D.C. at end of stave\n    DC_AL_CODA: 7, // D.C. al coda at end of stave\n    DC_AL_FINE: 8, // D.C. al Fine end of stave\n    DS: 9, // D.S. at end of stave\n    DS_AL_CODA: 10, // D.S. al coda at end of stave\n    DS_AL_FINE: 11, // D.S. al Fine at end of stave\n    FINE: 12, // Fine at end of stave\n  };\n\n  protected symbol_type: number;\n\n  protected x_shift: number;\n  protected y_shift: number;\n  protected font: FontInfo;\n\n  constructor(type: number, x: number, y_shift: number) {\n    super();\n\n    this.symbol_type = type;\n    this.x = x;\n    this.x_shift = 0;\n    this.y_shift = y_shift;\n    this.font = {\n      family: 'times',\n      size: 12,\n      weight: 'bold',\n      style: 'italic',\n    };\n  }\n\n  setShiftX(x: number): this {\n    this.x_shift = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave: Stave, x: number): this {\n    this.setRendered();\n\n    switch (this.symbol_type) {\n      case Repetition.type.CODA_RIGHT:\n        this.drawCodaFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.CODA_LEFT:\n        this.drawSymbolText(stave, x, 'Coda', true);\n        break;\n      case Repetition.type.SEGNO_LEFT:\n        this.drawSignoFixed(stave, x);\n        break;\n      case Repetition.type.SEGNO_RIGHT:\n        this.drawSignoFixed(stave, x + stave.getWidth());\n        break;\n      case Repetition.type.DC:\n        this.drawSymbolText(stave, x, 'D.C.', false);\n        break;\n      case Repetition.type.DC_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.C. al', true);\n        break;\n      case Repetition.type.DC_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n        break;\n      case Repetition.type.DS:\n        this.drawSymbolText(stave, x, 'D.S.', false);\n        break;\n      case Repetition.type.DS_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.S. al', true);\n        break;\n      case Repetition.type.DS_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n        break;\n      case Repetition.type.FINE:\n        this.drawSymbolText(stave, x, 'Fine', false);\n        break;\n      default:\n        break;\n    }\n\n    return this;\n  }\n\n  drawCodaFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 40, 'coda', { category: 'coda' });\n    return this;\n  }\n\n  drawSignoFixed(stave: Stave, x: number): this {\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + 25, 30, 'segno', { category: 'segno' });\n    return this;\n  }\n\n  drawSymbolText(stave: Stave, x: number, text: string, draw_coda: boolean): this {\n    const ctx = stave.checkContext();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Default to right symbol\n    let text_x = 0 + this.x_shift;\n    let symbol_x = x + this.x_shift;\n    if (this.symbol_type === Repetition.type.CODA_LEFT) {\n      // Offset Coda text to right of stave beginning\n      text_x = this.x + stave.getVerticalBarWidth();\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    } else if (this.symbol_type === Repetition.type.DS) {\n      const modifierWidth = stave.getNoteStartX() - this.x;\n      text_x = this.x + x + this.x_shift + stave.getWidth() - 5 - modifierWidth - ctx.measureText(text).width;\n      // TODO this is weird. setting the x position should probably be refactored, parameters aren't clear here.\n    } else {\n      // Offset Signo text to left stave end\n      symbol_x = this.x + x + stave.getWidth() - 5 + this.x_shift;\n      text_x = symbol_x - +ctx.measureText(text).width - 12;\n    }\n\n    const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n    if (draw_coda) {\n      Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\n    }\n\n    ctx.fillText(text, text_x, y + 5);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Stave } from './stave';\nimport { StaveModifier } from './stavemodifier';\nimport { FontInfo } from './types/common';\n\nexport class StaveSection extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'StaveSection';\n  }\n\n  protected section: string;\n  protected shift_x: number;\n  protected shift_y: number;\n  protected font: FontInfo;\n\n  constructor(section: string, x: number, shift_y: number) {\n    super();\n\n    this.setWidth(16);\n    this.section = section;\n    this.x = x;\n    this.shift_x = 0;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'sans-serif',\n      size: 12,\n      weight: 'bold',\n    };\n  }\n\n  setStaveSection(section: string): this {\n    this.section = section;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.section).width;\n    let width = text_width + 6; // add left & right padding\n    if (width < 18) width = 18;\n    const height = 20;\n    //  Seems to be a good default y\n    const y = stave.getYForTopText(3) + this.shift_y;\n    let x = this.x + shift_x;\n    ctx.beginPath();\n    ctx.setLineWidth(2);\n    ctx.rect(x, y, width, height);\n    ctx.stroke();\n    x += (width - text_width) / 2;\n    ctx.fillText('' + this.section, x, y + 16);\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Radosaw Eichler 2012\n\nimport { FontInfo } from 'types/common';\n\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\n\nexport interface StaveTempoOptions {\n  bpm?: number;\n  duration?: string;\n  dots?: number;\n  name?: string;\n}\n\nexport class StaveTempo extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'StaveTempo';\n  }\n\n  protected font: FontInfo;\n  /** Font size for note. */\n  public render_options = { glyph_font_scale: 30 };\n  protected tempo: StaveTempoOptions;\n  protected shift_x: number;\n  protected shift_y: number;\n\n  constructor(tempo: StaveTempoOptions, x: number, shift_y: number) {\n    super();\n\n    this.tempo = tempo;\n    this.position = StaveModifierPosition.ABOVE;\n    this.x = x;\n    this.shift_x = 10;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'times',\n      size: 14,\n      weight: 'bold',\n    };\n  }\n\n  setTempo(tempo: StaveTempoOptions): this {\n    this.tempo = tempo;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  draw(stave: Stave, shift_x: number): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    const options = this.render_options;\n    // FIXME: What does the '38' mean? Why 38? Is that supposed to\n    // be the default font size for standard notation?\n    const scale = options.glyph_font_scale / 38;\n    const name = this.tempo.name;\n    const duration = this.tempo.duration;\n    const dots = this.tempo.dots || 0;\n    const bpm = this.tempo.bpm;\n    const font = this.font;\n    let x = this.x + this.shift_x + shift_x;\n    const y = stave.getYForTopText(1) + this.shift_y;\n\n    ctx.save();\n\n    if (name) {\n      ctx.setFont(font.family, font.size, font.weight);\n      ctx.fillText(name, x, y);\n      x += ctx.measureText(name).width;\n    }\n\n    if (duration && bpm) {\n      ctx.setFont(font.family, font.size, 'normal');\n\n      if (name) {\n        x += ctx.measureText(' ').width;\n        ctx.fillText('(', x, y);\n        x += ctx.measureText('(').width;\n      }\n\n      const code = Tables.getGlyphProps(duration);\n\n      x += 3 * scale;\n      Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n      x += code.getWidth() * scale;\n\n      // Draw stem and flags\n      if (code.stem) {\n        let stem_height = 30;\n\n        if (code.beam_count) stem_height += 3 * (code.beam_count - 1);\n\n        stem_height *= scale;\n\n        const y_top = y - stem_height;\n        ctx.fillRect(x - scale, y_top, scale, stem_height);\n\n        if (code.flag) {\n          Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem, {\n            category: 'flag.staveTempo',\n          });\n\n          if (!dots) x += 6 * scale;\n        }\n      }\n\n      // Draw dot\n      for (let i = 0; i < dots; i++) {\n        x += 6 * scale;\n        ctx.beginPath();\n        ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n        ctx.fill();\n      }\n\n      ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n    }\n\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { FontInfo } from 'types/common';\n\nimport { Stave } from './stave';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Justification, TextNote } from './textnote';\nimport { RuntimeError } from './util';\n\nexport class StaveText extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'StaveText';\n  }\n\n  protected text: string;\n  protected shift_x?: number;\n  protected shift_y?: number;\n  protected options: {\n    shift_x: number;\n    shift_y: number;\n    justification: number;\n  };\n  protected font: FontInfo;\n\n  constructor(\n    text: string,\n    position: number,\n    options: { shift_x?: number; shift_y?: number; justification?: number } = {}\n  ) {\n    super();\n\n    this.setWidth(16);\n    this.text = text;\n    this.position = position;\n    this.options = {\n      shift_x: 0,\n      shift_y: 0,\n      justification: TextNote.Justification.CENTER,\n      ...options,\n    };\n\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n  }\n\n  setStaveText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  setShiftX(x: number): this {\n    this.shift_x = x;\n    return this;\n  }\n\n  setShiftY(y: number): this {\n    this.shift_y = y;\n    return this;\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  draw(stave: Stave): this {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.text).width;\n\n    let x;\n    let y;\n    switch (this.position) {\n      case StaveModifierPosition.LEFT:\n      case StaveModifierPosition.RIGHT:\n        y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n        if (this.position === StaveModifierPosition.LEFT) {\n          x = stave.getX() - text_width - 24 + this.options.shift_x;\n        } else {\n          x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n        }\n        break;\n      case StaveModifierPosition.ABOVE:\n      case StaveModifierPosition.BELOW:\n        x = stave.getX() + this.options.shift_x;\n        if (this.options.justification === Justification.CENTER) {\n          x += stave.getWidth() / 2 - text_width / 2;\n        } else if (this.options.justification === Justification.RIGHT) {\n          x += stave.getWidth() - text_width;\n        }\n\n        if (this.position === StaveModifierPosition.ABOVE) {\n          y = stave.getYForTopText(2) + this.options.shift_y;\n        } else {\n          y = stave.getYForBottomText(2) + this.options.shift_y;\n        }\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n    }\n\n    ctx.fillText('' + this.text, x, y + 4);\n    ctx.restore();\n    return this;\n  }\n}\n","import { Glyph, GlyphMetrics } from './glyph';\nimport { TimeSignature } from './timesignature';\nimport { defined } from './util';\n\nexport class TimeSignatureGlyph extends Glyph {\n  timeSignature: TimeSignature;\n  topStartX: number;\n  botStartX: number;\n  width: number;\n  xMin: number;\n\n  constructor(\n    timeSignature: TimeSignature,\n    topDigits: string[],\n    botDigits: string[],\n    code: string,\n    point: number,\n    options?: { category: string }\n  ) {\n    super(code, point, options);\n    this.timeSignature = timeSignature;\n    this.topGlyphs = [];\n    this.botGlyphs = [];\n\n    let topWidth = 0;\n    for (let i = 0; i < topDigits.length; ++i) {\n      const num = topDigits[i];\n      const topGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.topGlyphs.push(topGlyph);\n      topWidth += topGlyph.getMetrics().width ?? 0;\n    }\n\n    let botWidth = 0;\n    for (let i = 0; i < botDigits.length; ++i) {\n      const num = botDigits[i];\n      const botGlyph = new Glyph('timeSig' + num, this.timeSignature.point);\n\n      this.botGlyphs.push(botGlyph);\n      botWidth += defined(botGlyph.getMetrics().width);\n    }\n\n    this.width = Math.max(topWidth, botWidth);\n    this.xMin = this.getMetrics().x_min;\n    this.topStartX = (this.width - topWidth) / 2.0;\n    this.botStartX = (this.width - botWidth) / 2.0;\n    this.reset();\n  }\n\n  getMetrics(): GlyphMetrics {\n    return {\n      x_min: this.xMin,\n      x_max: this.xMin + this.width,\n      width: this.width,\n    } as GlyphMetrics;\n  }\n\n  renderToStave(x: number): void {\n    const stave = this.checkStave();\n\n    let start_x = x + this.topStartX;\n    for (let i = 0; i < this.topGlyphs.length; ++i) {\n      const glyph = this.topGlyphs[i];\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + this.x_shift,\n        stave.getYForLine(this.timeSignature.topLine)\n      );\n      start_x += defined(glyph.getMetrics().width);\n    }\n\n    start_x = x + this.botStartX;\n    for (let i = 0; i < this.botGlyphs.length; ++i) {\n      const glyph = this.botGlyphs[i];\n      this.timeSignature.placeGlyphOnLine(glyph, stave, 0);\n      Glyph.renderOutline(\n        this.checkContext(),\n        glyph.getMetrics().outline,\n        this.scale,\n        start_x + glyph.getMetrics().x_shift,\n        stave.getYForLine(this.timeSignature.bottomLine)\n      );\n      start_x += defined(glyph.getMetrics().width);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\n\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { TimeSignatureGlyph } from './timesigglyph';\nimport { defined, RuntimeError } from './util';\n\nexport interface TimeSignatureInfo {\n  glyph: Glyph;\n  line?: number;\n  num: boolean;\n}\n\nconst assertIsValidFraction = (timeSpec: string) => {\n  const numbers = timeSpec.split('/').filter((number) => number !== '');\n\n  if (numbers.length !== 2) {\n    throw new RuntimeError(\n      'BadTimeSignature',\n      `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`\n    );\n  }\n\n  numbers.forEach((number) => {\n    if (isNaN(Number(number))) {\n      throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain two valid numbers.`);\n    }\n  });\n};\n\nexport class TimeSignature extends StaveModifier {\n  static get CATEGORY(): string {\n    return 'TimeSignature';\n  }\n\n  static get glyphs(): Record<string, { code: string; point: number; line: number }> {\n    return {\n      C: {\n        code: 'timeSigCommon',\n        point: 40,\n        line: 2,\n      },\n      'C|': {\n        code: 'timeSigCutCommon',\n        point: 40,\n        line: 2,\n      },\n    };\n  }\n\n  point: number;\n  bottomLine: number;\n  topLine: number;\n\n  protected info: TimeSignatureInfo;\n  protected validate_args: boolean;\n\n  constructor(timeSpec: string = '4/4', customPadding = 15, validate_args = true) {\n    super();\n    this.validate_args = validate_args;\n\n    const padding = customPadding;\n\n    this.point = this.musicFont.lookupMetric('digits.point');\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n    this.topLine = 2 + fontLineShift;\n    this.bottomLine = 4 + fontLineShift;\n    this.setPosition(StaveModifierPosition.BEGIN);\n    this.info = this.parseTimeSpec(timeSpec);\n    this.setWidth(defined(this.info.glyph.getMetrics().width));\n    this.setPadding(padding);\n  }\n\n  parseTimeSpec(timeSpec: string): TimeSignatureInfo {\n    if (timeSpec === 'C' || timeSpec === 'C|') {\n      const { line, code, point } = TimeSignature.glyphs[timeSpec];\n      return {\n        line,\n        num: false,\n        glyph: new Glyph(code, point),\n      };\n    }\n\n    if (this.validate_args) {\n      assertIsValidFraction(timeSpec);\n    }\n\n    const [topDigits, botDigits] = timeSpec.split('/').map((number) => number.split(''));\n\n    return {\n      num: true,\n      glyph: this.makeTimeSignatureGlyph(topDigits, botDigits),\n    };\n  }\n\n  makeTimeSignatureGlyph(topDigits: string[], botDigits: string[]): Glyph {\n    return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n  }\n\n  getInfo(): TimeSignatureInfo {\n    return this.info;\n  }\n\n  setTimeSig(timeSpec: string): this {\n    this.info = this.parseTimeSpec(timeSpec);\n    return this;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.openGroup('timesignature', this.getAttribute('id'));\n    this.info.glyph.setStave(stave);\n    this.info.glyph.setContext(ctx);\n    this.placeGlyphOnLine(this.info.glyph, stave, this.info.line);\n    this.info.glyph.renderToStave(this.x);\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { isBarline } from 'typeguard';\n\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element, ElementStyle } from './element';\nimport { KeySignature } from './keysignature';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo, StaveTempoOptions } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Bounds, FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport interface StaveLineConfig {\n  visible?: boolean;\n}\n\nexport interface StaveOptions {\n  spacing?: number;\n  thickness?: number;\n  x_shift?: number;\n  y_shift?: number;\n  cps?: { x: number; y: number }[];\n  bottom_text_position?: number;\n  line_config?: StaveLineConfig[];\n  space_below_staff_ln?: number;\n  glyph_spacing_px?: number;\n  space_above_staff_ln?: number;\n  vertical_bar_width?: number;\n  fill_style?: string;\n  left_bar?: boolean;\n  right_bar?: boolean;\n  spacing_between_lines_px?: number;\n  top_text_position?: number;\n  num_lines?: number;\n}\n\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n  [Barline.CATEGORY]: 0,\n  [Clef.CATEGORY]: 1,\n  [KeySignature.CATEGORY]: 2,\n  [TimeSignature.CATEGORY]: 3,\n};\n\nconst SORT_ORDER_END_MODIFIERS = {\n  [TimeSignature.CATEGORY]: 0,\n  [KeySignature.CATEGORY]: 1,\n  [Barline.CATEGORY]: 2,\n  [Clef.CATEGORY]: 3,\n};\n\nexport class Stave extends Element {\n  static get CATEGORY(): string {\n    return 'Stave';\n  }\n\n  protected start_x: number;\n  protected clef: string;\n  protected options: Required<StaveOptions>;\n  protected endClef?: string;\n\n  protected x: number;\n  protected y: number;\n  protected width: number;\n  // Initialized by the constructor via this.resetLines().\n  protected height: number = 0;\n\n  protected formatted: boolean;\n  protected end_x: number;\n  protected measure: number;\n  protected font: FontInfo;\n  protected bounds: Bounds;\n  protected readonly modifiers: StaveModifier[];\n\n  protected defaultLedgerLineStyle: ElementStyle;\n\n  // This is the sum of the padding that normally goes on left + right of a stave during\n  // drawing. Used to size staves correctly with content width.\n  static get defaultPadding(): number {\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n  }\n  // Right padding, used by system if startX is already determined.\n  static get rightPadding(): number {\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    return musicFont.lookupMetric('stave.endPaddingMax');\n  }\n\n  constructor(x: number, y: number, width: number, options?: StaveOptions) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.formatted = false;\n    this.start_x = x + 5;\n    this.end_x = x + width;\n    this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n    this.measure = 0;\n    this.clef = 'treble';\n    this.endClef = undefined;\n    this.font = {\n      family: 'sans-serif',\n      size: 8,\n      weight: '',\n    };\n    this.options = {\n      spacing: 2,\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      vertical_bar_width: 10, // Width around vertical bar end-marker\n      glyph_spacing_px: 10,\n      num_lines: 5,\n      fill_style: '#999999',\n      left_bar: true, // draw vertical bar on left\n      right_bar: true, // draw vertical bar on right\n      spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, // in pixels\n      space_above_staff_ln: 4, // in staff lines\n      space_below_staff_ln: 4, // in staff lines\n      top_text_position: 1, // in staff lines\n      bottom_text_position: 4, // in staff lines\n      line_config: [],\n      cps: [],\n      ...options,\n    };\n    this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n    this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n\n    this.resetLines();\n\n    // beg bar\n    this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\n    // end bar\n    this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\n  }\n\n  /** Set default style for ledger lines. */\n  setDefaultLedgerLineStyle(style: ElementStyle): void {\n    this.defaultLedgerLineStyle = style;\n  }\n\n  /** Get default style for ledger lines. */\n  getDefaultLedgerLineStyle(): ElementStyle {\n    return { ...this.getStyle(), ...this.defaultLedgerLineStyle };\n  }\n\n  space(spacing: number): number {\n    return this.options.spacing_between_lines_px * spacing;\n  }\n\n  resetLines(): void {\n    this.options.line_config = [];\n    for (let i = 0; i < this.options.num_lines; i++) {\n      this.options.line_config.push({ visible: true });\n    }\n    this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n    this.options.bottom_text_position = this.options.num_lines;\n  }\n\n  setNoteStartX(x: number): this {\n    if (!this.formatted) this.format();\n\n    this.start_x = x;\n    const begBarline = this.modifiers[0];\n    begBarline.setX(this.start_x - begBarline.getWidth());\n    return this;\n  }\n\n  getNoteStartX(): number {\n    if (!this.formatted) this.format();\n\n    return this.start_x;\n  }\n\n  getNoteEndX(): number {\n    if (!this.formatted) this.format();\n\n    return this.end_x;\n  }\n\n  getTieStartX(): number {\n    return this.start_x;\n  }\n\n  getTieEndX(): number {\n    return this.x + this.width;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  getNumLines(): number {\n    return this.options.num_lines;\n  }\n\n  setNumLines(n: number): this {\n    this.options.num_lines = n;\n    this.resetLines();\n    return this;\n  }\n\n  setY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  getY(): number {\n    return this.y;\n  }\n\n  getTopLineTopY(): number {\n    return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n  }\n\n  getBottomLineBottomY(): number {\n    return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n  }\n\n  setX(x: number): this {\n    const shift = x - this.x;\n    this.formatted = false;\n    this.x = x;\n    this.start_x += shift;\n    this.end_x += shift;\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const mod = this.modifiers[i];\n      mod.setX(mod.getX() + shift);\n    }\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.formatted = false;\n    this.width = width;\n    this.end_x = this.x + width;\n\n    // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n    // this.modifiers[1].setX(this.end_x);\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getStyle(): ElementStyle {\n    return {\n      fillStyle: this.options.fill_style,\n      strokeStyle: this.options.fill_style, // yes, this is correct for legacy compatibility\n      lineWidth: Tables.STAVE_LINE_THICKNESS,\n      ...this.style,\n    };\n  }\n\n  setMeasure(measure: number): this {\n    this.measure = measure;\n    return this;\n  }\n\n  /**\n   * Gets the pixels to shift from the beginning of the stave\n   * following the modifier at the provided index\n   * @param  {Number} index The index from which to determine the shift\n   * @return {Number}       The amount of pixels shifted\n   */\n  getModifierXShift(index: number = 0): number {\n    if (typeof index !== 'number') {\n      throw new RuntimeError('InvalidIndex', 'Must be of number type');\n    }\n\n    if (!this.formatted) this.format();\n\n    if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n      return 0;\n    }\n\n    // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n    if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n      return 0;\n    }\n\n    let start_x = this.start_x - this.x;\n    const begBarline = this.modifiers[0] as Barline;\n    if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n      start_x -= begBarline.getWidth();\n    }\n\n    return start_x;\n  }\n\n  // Coda & Segno Symbol functions\n  setRepetitionTypeLeft(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  setRepetitionTypeRight(type: number, y: number): this {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  // Volta functions\n  setVoltaType(type: number, number_t: string, y: number): this {\n    this.modifiers.push(new Volta(type, number_t, this.x, y));\n    return this;\n  }\n\n  // Section functions\n  setSection(section: string, y: number): this {\n    this.modifiers.push(new StaveSection(section, this.x, y));\n    return this;\n  }\n\n  // Tempo functions\n  setTempo(tempo: StaveTempoOptions, y: number): this {\n    this.modifiers.push(new StaveTempo(tempo, this.x, y));\n    return this;\n  }\n\n  // Text functions\n  setText(\n    text: string,\n    position: number,\n    options: {\n      shift_x?: number;\n      shift_y?: number;\n      justification?: number;\n    } = {}\n  ): this {\n    this.modifiers.push(new StaveText(text, position, options));\n    return this;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  getSpacingBetweenLines(): number {\n    return this.options.spacing_between_lines_px;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n  }\n\n  getBottomY(): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n\n    return score_bottom;\n  }\n\n  getBottomLineY(): number {\n    return this.getYForLine(this.options.num_lines);\n  }\n\n  // This returns the y for the *center* of a staff line\n  getYForLine(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n\n    const y = this.y + line * spacing + headroom * spacing;\n\n    return y;\n  }\n\n  getLineForY(y: number): number {\n    // Does the reverse of getYForLine - somewhat dumb and just calls\n    // getYForLine until the right value is reaches\n\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return (y - this.y) / spacing - headroom;\n  }\n\n  getYForTopText(line: number = 0): number {\n    return this.getYForLine(-line - this.options.top_text_position);\n  }\n\n  getYForBottomText(line: number = 0): number {\n    return this.getYForLine(this.options.bottom_text_position + line);\n  }\n\n  getYForNote(line: number): number {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return this.y + headroom * spacing + 5 * spacing - line * spacing;\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(3);\n  }\n\n  // This method adds a stave modifier to the stave. Note that the first two\n  // modifiers (BarLines) are automatically added upon construction.\n  addModifier(modifier: StaveModifier, position?: number): this {\n    if (position !== undefined) {\n      modifier.setPosition(position);\n    }\n\n    modifier.setStave(this);\n    this.formatted = false;\n    this.modifiers.push(modifier);\n    return this;\n  }\n\n  addEndModifier(modifier: StaveModifier): this {\n    this.addModifier(modifier, StaveModifierPosition.END);\n    return this;\n  }\n\n  // Bar Line functions\n  setBegBarType(type: number): this {\n    // Only valid bar types at beginning of stave is none, single or begin repeat\n    const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n    if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n      (this.modifiers[0] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setEndBarType(type: number): this {\n    // Repeat end not valid at end of stave\n    if (type !== BarlineType.REPEAT_BEGIN) {\n      (this.modifiers[1] as Barline).setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setClef(clefSpec: string, size?: string, annotation?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n\n    if (position === StaveModifierPosition.END) {\n      this.endClef = clefSpec;\n    } else {\n      this.clef = clefSpec;\n    }\n\n    const clefs = this.getModifiers(position, Clef.CATEGORY) as Clef[];\n    if (clefs.length === 0) {\n      this.addClef(clefSpec, size, annotation, position);\n    } else {\n      clefs[0].setType(clefSpec, size, annotation);\n    }\n\n    return this;\n  }\n\n  getClef(): string {\n    return this.clef;\n  }\n\n  setEndClef(clefSpec: string, size?: string, annotation?: string): this {\n    this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n    return this;\n  }\n\n  getEndClef(): string | undefined {\n    return this.endClef;\n  }\n\n  setKeySignature(keySpec: string, cancelKeySpec?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n\n    const keySignatures = this.getModifiers(position, KeySignature.CATEGORY) as KeySignature[];\n    if (keySignatures.length === 0) {\n      this.addKeySignature(keySpec, cancelKeySpec, position);\n    } else {\n      keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n    }\n\n    return this;\n  }\n\n  setEndKeySignature(keySpec: string, cancelKeySpec?: string): this {\n    this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n    return this;\n  }\n\n  setTimeSignature(timeSpec: string, customPadding?: number, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n\n    const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY) as TimeSignature[];\n    if (timeSignatures.length === 0) {\n      this.addTimeSignature(timeSpec, customPadding, position);\n    } else {\n      timeSignatures[0].setTimeSig(timeSpec);\n    }\n\n    return this;\n  }\n\n  setEndTimeSignature(timeSpec: string, customPadding?: number): this {\n    this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n    return this;\n  }\n\n  /**\n   * Add a key signature to the stave.\n   *\n   * Example:\n   * `stave.addKeySignature('Db');`\n   * @param keySpec new key specification `[A-G][b|#]?`\n   * @param cancelKeySpec\n   * @param position\n   * @returns\n   */\n  addKeySignature(keySpec: string, cancelKeySpec?: string, position?: number): this {\n    if (position === undefined) {\n      position = StaveModifierPosition.BEGIN;\n    }\n    this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n    return this;\n  }\n\n  /**\n   * Add a clef to the stave.\n   *\n   * Example:\n   *\n   * stave.addClef('treble')\n   * @param clef clef (treble|bass|...) see {@link Clef.types}\n   * @param size\n   * @param annotation\n   * @param position\n   * @returns\n   */\n  addClef(clef: string, size?: string, annotation?: string, position?: number): this {\n    if (position === undefined || position === StaveModifierPosition.BEGIN) {\n      this.clef = clef;\n    } else if (position === StaveModifierPosition.END) {\n      this.endClef = clef;\n    }\n\n    this.addModifier(new Clef(clef, size, annotation), position);\n    return this;\n  }\n\n  addEndClef(clef: string, size?: string, annotation?: string): this {\n    this.addClef(clef, size, annotation, StaveModifierPosition.END);\n    return this;\n  }\n\n  /**\n   * Add a time signature to the stave\n   *\n   * Example:\n   *\n   * `stave.addTimeSignature('4/4');`\n   * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n   * @param customPadding\n   * @param position\n   * @returns\n   */\n  addTimeSignature(timeSpec: string, customPadding?: number, position?: number): this {\n    this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n    return this;\n  }\n\n  addEndTimeSignature(timeSpec: string, customPadding?: number): this {\n    this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n    return this;\n  }\n\n  // Deprecated\n  addTrebleGlyph(): this {\n    this.addClef('treble');\n    return this;\n  }\n\n  /**\n   * @param position\n   * @param category\n   * @returns array of StaveModifiers that match the provided position and category.\n   */\n  getModifiers(position?: number, category?: string): StaveModifier[] {\n    const noPosition = position === undefined;\n    const noCategory = category === undefined;\n    if (noPosition && noCategory) {\n      return this.modifiers;\n    } else if (noPosition) {\n      // A category was provided.\n      return this.modifiers.filter((m: StaveModifier) => category === m.getCategory());\n    } else if (noCategory) {\n      // A position was provided.\n      return this.modifiers.filter((m: StaveModifier) => position === m.getPosition());\n    } else {\n      // Both position and category were provided!\n      return this.modifiers.filter((m: StaveModifier) => position === m.getPosition() && category === m.getCategory());\n    }\n  }\n\n  /**\n   * Use the modifier's `getCategory()` as a key for the `order` array.\n   * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n   */\n  sortByCategory(items: StaveModifier[], order: Record<string, number>): void {\n    for (let i = items.length - 1; i >= 0; i--) {\n      for (let j = 0; j < i; j++) {\n        if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n          const temp = items[j];\n          items[j] = items[j + 1];\n          items[j + 1] = temp;\n        }\n      }\n    }\n  }\n\n  format(): void {\n    const begBarline = this.modifiers[0] as Barline;\n    const endBarline = this.modifiers[1];\n\n    const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n    const endModifiers = this.getModifiers(StaveModifierPosition.END);\n\n    this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n    this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n\n    if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n      begModifiers.push(begModifiers.splice(0, 1)[0]);\n      begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n    }\n\n    if (endModifiers.indexOf(endBarline) > 0) {\n      endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n    }\n\n    let width;\n    let padding;\n    let modifier;\n    let offset = 0;\n    let x = this.x;\n    for (let i = 0; i < begModifiers.length; i++) {\n      modifier = begModifiers[i];\n      padding = modifier.getPadding(i + offset);\n      width = modifier.getWidth();\n\n      x += padding;\n      modifier.setX(x);\n      x += width;\n\n      if (padding + width === 0) offset--;\n    }\n\n    this.start_x = x;\n    x = this.x + this.width;\n\n    const widths = {\n      left: 0,\n      right: 0,\n      paddingRight: 0,\n      paddingLeft: 0,\n    };\n\n    let lastBarlineIdx = 0;\n\n    for (let i = 0; i < endModifiers.length; i++) {\n      modifier = endModifiers[i];\n      lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n\n      widths.right = 0;\n      widths.left = 0;\n      widths.paddingRight = 0;\n      widths.paddingLeft = 0;\n      const layoutMetrics = modifier.getLayoutMetrics();\n\n      if (layoutMetrics) {\n        if (i !== 0) {\n          widths.right = layoutMetrics.xMax || 0;\n          widths.paddingRight = layoutMetrics.paddingRight || 0;\n        }\n        widths.left = -layoutMetrics.xMin || 0;\n        widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n\n        if (i === endModifiers.length - 1) {\n          widths.paddingLeft = 0;\n        }\n      } else {\n        widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n        if (i !== 0) {\n          widths.right = modifier.getWidth();\n        }\n        if (i === 0) {\n          widths.left = modifier.getWidth();\n        }\n      }\n      x -= widths.paddingRight;\n      x -= widths.right;\n\n      modifier.setX(x);\n\n      x -= widths.left;\n      x -= widths.paddingLeft;\n    }\n\n    this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n    this.formatted = true;\n  }\n\n  /**\n   * All drawing functions below need the context to be set.\n   */\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    ctx.openGroup('stave', this.getAttribute('id'));\n    if (!this.formatted) this.format();\n\n    const num_lines = this.options.num_lines;\n    const width = this.width;\n    const x = this.x;\n    let y;\n\n    // Render lines\n    for (let line = 0; line < num_lines; line++) {\n      y = this.getYForLine(line);\n\n      this.applyStyle();\n      if (this.options.line_config[line].visible) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + width, y);\n        ctx.stroke();\n      }\n      this.restoreStyle();\n    }\n\n    // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      // Only draw modifier if it has a draw function\n      if (typeof modifier.draw === 'function') {\n        modifier.applyStyle(ctx);\n        modifier.draw(this, this.getModifierXShift(i));\n        modifier.restoreStyle(ctx);\n      }\n    }\n\n    // Render measure numbers\n    if (this.measure > 0) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      const text_width = ctx.measureText('' + this.measure).width;\n      y = this.getYForTopText(0) + 3;\n      ctx.fillText('' + this.measure, this.x - text_width / 2, y);\n      ctx.restore();\n    }\n    ctx.closeGroup();\n    return this;\n  }\n\n  getVerticalBarWidth(): number {\n    return this.options.vertical_bar_width;\n  }\n\n  /**\n   * Get the current configuration for the Stave.\n   * @return {Array} An array of configuration objects.\n   */\n  getConfigForLines(): StaveLineConfig[] {\n    return this.options.line_config;\n  }\n\n  /**\n   * Configure properties of the lines in the Stave\n   * @param line_number The index of the line to configure.\n   * @param line_config An configuration object for the specified line.\n   * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n   *   range of the number of lines specified in the constructor.\n   */\n  setConfigForLine(line_number: number, line_config: StaveLineConfig): this {\n    if (line_number >= this.options.num_lines || line_number < 0) {\n      throw new RuntimeError(\n        'StaveConfigError',\n        'The line number must be within the range of the number of lines in the Stave.'\n      );\n    }\n\n    if (line_config.visible === undefined) {\n      throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n    }\n\n    if (typeof line_config.visible !== 'boolean') {\n      throw new RuntimeError(\n        'StaveConfigError',\n        \"The line configuration objects 'visible' property must be true or false.\"\n      );\n    }\n\n    this.options.line_config[line_number] = line_config;\n\n    return this;\n  }\n\n  /**\n   * Set the staff line configuration array for all of the lines at once.\n   * @param lines_configuration An array of line configuration objects.  These objects\n   *   are of the same format as the single one passed in to setLineConfiguration().\n   *   The caller can set null for any line config entry if it is desired that the default be used\n   * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n   *   exactly the same number of elements as the num_lines configuration object set in\n   *   the constructor.\n   */\n  setConfigForLines(lines_configuration: StaveLineConfig[]): this {\n    if (lines_configuration.length !== this.options.num_lines) {\n      throw new RuntimeError(\n        'StaveConfigError',\n        'The length of the lines configuration array must match the number of lines in the Stave'\n      );\n    }\n\n    // Make sure the defaults are present in case an incomplete set of\n    //  configuration options were supplied.\n    // eslint-disable-next-line\n    for (const line_config in lines_configuration) {\n      // Allow '{}' to be used if the caller just wants the default for a particular node.\n      if (lines_configuration[line_config].visible == undefined) {\n        lines_configuration[line_config] = this.options.line_config[line_config];\n      }\n      this.options.line_config[line_config] = {\n        ...this.options.line_config[line_config],\n        ...lines_configuration[line_config],\n      };\n    }\n\n    this.options.line_config = lines_configuration;\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { Tables } from './tables';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nfunction drawBoldDoubleLine(ctx: RenderContext, type: number, topX: number, topY: number, botY: number) {\n  if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n  }\n\n  let x_shift = 3;\n  let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n  const thickLineOffset = 2; // For aesthetics\n\n  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    x_shift = -5; // Flips the side of the thin line\n    variableWidth = 3;\n  }\n\n  // Thin line\n  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n  // Thick line\n  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n  static get CATEGORY(): string {\n    return 'StaveConnector';\n  }\n\n  protected thickness: number;\n  protected width: number;\n  protected font: FontInfo;\n  protected texts: {\n    content: string;\n    options: {\n      shift_x: number;\n      shift_y: number;\n    };\n  }[];\n\n  protected type: number;\n  protected x_shift: number;\n  protected top_stave: Stave;\n  protected bottom_stave: Stave;\n\n  /**\n   * SINGLE_LEFT and SINGLE are the same value for compatibility\n   * with older versions of vexflow which didn't have right sided\n   * stave connectors.\n   */\n  static readonly type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n  };\n\n  /**\n   * Connector type:\n   * * \"singleRight\"\n   * * \"singleLeft\"\n   * * \"single\"\n   * * \"double\"\n   * * \"brace\"\n   * * \"bracket\"\n   * * \"boldDoubleLeft\"\n   * * \"boldDoubleRight\"\n   * * \"thinDouble\"\n   * * \"none\"\n   */\n  static readonly typeString: Record<string, number> = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n  };\n\n  constructor(top_stave: Stave, bottom_stave: Stave) {\n    super();\n\n    this.thickness = Tables.STAVE_LINE_THICKNESS;\n    this.width = 3;\n    this.top_stave = top_stave;\n    this.bottom_stave = bottom_stave;\n    this.type = StaveConnector.type.DOUBLE;\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n    // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n    // 2. Offset BRACE type not to overlap with another StaveConnector\n    this.x_shift = 0;\n    this.texts = [];\n  }\n\n  /**\n   * Set type.\n   * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n   */\n  setType(type: number | string): this {\n    type = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n\n    if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  /** Set optional associated Text. */\n  setText(text: string, options: { shift_x?: number; shift_y?: number } = {}): this {\n    this.texts.push({\n      content: text,\n      options: {\n        shift_x: 0,\n        shift_y: 0,\n        ...options,\n      },\n    });\n    return this;\n  }\n\n  /** Set connector x shift. */\n  setXShift(x_shift: number): this {\n    if (typeof x_shift !== 'number') {\n      throw new RuntimeError('InvalidType', 'x_shift must be a Number');\n    }\n\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  /** Render connector and associated text. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let topY = this.top_stave.getYForLine(0);\n    let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n    let width = this.width;\n    let topX = this.top_stave.getX();\n\n    const isRightSidedConnector =\n      this.type === StaveConnector.type.SINGLE_RIGHT ||\n      this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n      this.type === StaveConnector.type.THIN_DOUBLE;\n\n    if (isRightSidedConnector) {\n      topX = this.top_stave.getX() + this.top_stave.getWidth();\n    }\n\n    let attachment_height = botY - topY;\n    switch (this.type) {\n      case StaveConnector.type.SINGLE:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_LEFT:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_RIGHT:\n        width = 1;\n        break;\n      case StaveConnector.type.DOUBLE:\n        topX -= this.width + 2;\n        topY -= this.thickness;\n        attachment_height += 0.5;\n        break;\n      case StaveConnector.type.BRACE: {\n        width = 12;\n        // May need additional code to draw brace\n        const x1 = this.top_stave.getX() - 2 + this.x_shift;\n        const y1 = topY;\n        const x3 = x1;\n        const y3 = botY;\n        const x2 = x1 - width;\n        const y2 = y1 + attachment_height / 2.0;\n        const cpx1 = x2 - 0.9 * width;\n        const cpy1 = y1 + 0.2 * attachment_height;\n        const cpx2 = x1 + 1.1 * width;\n        const cpy2 = y2 - 0.135 * attachment_height;\n        const cpx3 = cpx2;\n        const cpy3 = y2 + 0.135 * attachment_height;\n        const cpx4 = cpx1;\n        const cpy4 = y3 - 0.2 * attachment_height;\n        const cpx5 = x2 - width;\n        const cpy5 = cpy4;\n        const cpx6 = x1 + 0.4 * width;\n        const cpy6 = y2 + 0.135 * attachment_height;\n        const cpx7 = cpx6;\n        const cpy7 = y2 - 0.135 * attachment_height;\n        const cpx8 = cpx5;\n        const cpy8 = cpy1;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n        ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n        ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n        ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n        ctx.fill();\n        ctx.stroke();\n        break;\n      }\n      case StaveConnector.type.BRACKET:\n        topY -= 6;\n        botY += 6;\n        attachment_height = botY - topY;\n        Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n        Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n        topX -= this.width + 2;\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_LEFT:\n        drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n        drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.THIN_DOUBLE:\n        width = 1;\n        attachment_height -= this.thickness;\n        break;\n      case StaveConnector.type.NONE:\n        break;\n      default:\n        throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n    }\n\n    if (\n      this.type !== StaveConnector.type.BRACE &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n      this.type !== StaveConnector.type.NONE\n    ) {\n      ctx.fillRect(topX, topY, width, attachment_height);\n    }\n\n    // If the connector is a thin double barline, draw the paralell line\n    if (this.type === StaveConnector.type.THIN_DOUBLE) {\n      ctx.fillRect(topX - 3, topY, width, attachment_height);\n    }\n\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Add stave connector text\n    for (let i = 0; i < this.texts.length; i++) {\n      const text = this.texts[i];\n      const text_width = ctx.measureText('' + text.content).width;\n      const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n      const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n\n      ctx.fillText('' + text.content, x, y + 4);\n    }\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Beam } from './beam';\nimport { BoundingBox } from './boundingbox';\nimport { Fraction } from './fraction';\nimport { ModifierContext } from './modifiercontext';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { Tickable } from './tickable';\nimport { TickContext } from './tickcontext';\nimport { isNote, isStaveNote } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\nimport { Voice } from './voice';\n\ninterface Distance {\n  maxNegativeShiftPx: number;\n  expectedDistance: number;\n  fromTickable?: Tickable;\n  errorPx?: number;\n  fromTickablePx?: number;\n}\n\nexport interface FormatterOptions {\n  /** Defaults to 100. */\n  softmaxFactor?: number;\n\n  /** Defaults to `false`. */\n  globalSoftmax?: boolean;\n\n  /** Defaults to 5. */\n  maxIterations?: number;\n}\n\nexport interface FormatOptions {\n  align_rests?: boolean;\n  padding?: number;\n  stave?: Stave;\n  context?: RenderContext;\n  auto_beam?: boolean;\n}\n\nexport interface AlignmentContexts<T> {\n  list: number[];\n  map: Record<number, T>;\n  array: T[];\n  resolutionMultiplier: number;\n}\n\ntype addToContextFn<T> = (tickable: Tickable, context: T, voiceIndex: number) => void;\ntype makeContextFn<T> = (tick?: { tickID: number }) => T;\n\n// Helper function\nconst sumArray = (arr: number[]) => arr.reduce((a, b) => a + b, 0);\n\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts<T>(\n  voices: Voice[],\n  makeContext: makeContextFn<T>,\n  addToContext: addToContextFn<T>\n): AlignmentContexts<T> {\n  const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n\n  // Initialize tick maps.\n  const tickToContextMap: Record<number, T> = {};\n  const tickList: number[] = [];\n  const contexts: T[] = [];\n\n  // For each voice, extract notes and create a context for every\n  // new tick that hasn't been seen before.\n  voices.forEach((voice, voiceIndex) => {\n    // Use resolution multiplier as denominator so that no additional expansion\n    // of fractional tick values is needed.\n    const ticksUsed = new Fraction(0, resolutionMultiplier);\n\n    voice.getTickables().forEach((tickable) => {\n      const integerTicks = ticksUsed.numerator;\n\n      // If we have no tick context for this tick, create one.\n      if (!tickToContextMap[integerTicks]) {\n        const newContext = makeContext({ tickID: integerTicks });\n        contexts.push(newContext);\n        tickToContextMap[integerTicks] = newContext;\n        // Maintain a list of unique integerTicks.\n        tickList.push(integerTicks);\n      }\n\n      // Add this tickable to the TickContext.\n      addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n      ticksUsed.add(tickable.getTicks());\n    });\n  });\n\n  return {\n    map: tickToContextMap,\n    array: contexts,\n    list: tickList.sort((a, b) => a - b),\n    resolutionMultiplier,\n  };\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Formatter.DEBUG) log('Vex.Flow.Formatter', args);\n}\n\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(\n  notes: Tickable[],\n  currRestLine: number,\n  currNoteIndex: number,\n  compare: boolean\n): number {\n  // If no valid next note group, nextRestLine is same as current.\n  let nextRestLine = currRestLine;\n\n  // Start with the next note and keep going until we find a valid non-rest note group.\n  for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n    const note = notes[noteIndex];\n    if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n      nextRestLine = note.getLineForRest();\n      break;\n    }\n  }\n\n  // Locate the mid point between two lines.\n  if (compare && currRestLine !== nextRestLine) {\n    const top = Math.max(currRestLine, nextRestLine);\n    const bot = Math.min(currRestLine, nextRestLine);\n    nextRestLine = midLine(top, bot);\n  }\n  return nextRestLine;\n}\n\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n  // To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\n  static DEBUG: boolean;\n  protected hasMinTotalWidth: boolean;\n  protected minTotalWidth: number;\n  protected contextGaps: {\n    total: number;\n    gaps: { x1: number; x2: number }[];\n  };\n  protected justifyWidth: number;\n  protected totalCost: number;\n  protected totalShift: number;\n  protected tickContexts?: AlignmentContexts<TickContext>;\n  protected formatterOptions: Required<FormatterOptions>;\n  protected modifierContexts?: AlignmentContexts<ModifierContext>;\n  protected voices: Voice[];\n  protected lossHistory: number[];\n  protected durationStats: Record<string, { mean: number; count: number }>;\n\n  /**\n   * Helper function to layout \"notes\" one after the other without\n   * regard for proportions. Useful for tests and debugging.\n   */\n  static SimpleFormat(notes: Tickable[], x = 0, { paddingBetween = 10 } = {}): void {\n    notes.reduce((accumulator, note) => {\n      note.addToModifierContext(new ModifierContext());\n      const tick = new TickContext().addTickable(note).preFormat();\n      const metrics = tick.getMetrics();\n      tick.setX(accumulator + metrics.totalLeftPx);\n\n      return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n    }, x);\n  }\n\n  /** Helper function to plot formatter debug info. */\n  static plotDebugging(\n    ctx: RenderContext,\n    formatter: Formatter,\n    xPos: number,\n    y1: number,\n    y2: number,\n    options?: { stavePadding: number }\n  ): void {\n    options = {\n      stavePadding: Tables.DEFAULT_FONT_STACK[0].lookupMetric('stave.padding'),\n      ...options,\n    };\n\n    const x = xPos + options.stavePadding;\n    const contextGaps = formatter.contextGaps;\n\n    function stroke(x1: number, x2: number, color: string) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(1);\n      ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n    }\n\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n\n    contextGaps.gaps.forEach((gap) => {\n      stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n      ctx.setFillStyle('green');\n      ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n    });\n\n    ctx.setFillStyle('red');\n    ctx.fillText(\n      `Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(\n        2\n      )} Gap: ${contextGaps.total.toFixed(2)}`,\n      x - 20,\n      y2 + 27\n    );\n    ctx.restore();\n  }\n\n  /**\n   * Helper function to format and draw a single voice. Returns a bounding\n   * box for the notation.\n   * @param ctx  the rendering context\n   * @param stave the stave to which to draw (`Stave` or `TabStave`)\n   * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n   * @param params one of below:\n   *    * Setting `autobeam` only `(context, stave, notes, true)` or\n   *      `(ctx, stave, notes, {autobeam: true})`\n   *    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n   *    * Setting both a struct is needed `(context, stave, notes, {\n   *      autobeam: true, align_rests: true})`\n   *    * `autobeam` automatically generates beams for the notes.\n   *    * `align_rests` aligns rests with nearby notes.\n   */\n  static FormatAndDraw(\n    ctx: RenderContext,\n    stave: Stave,\n    notes: StemmableNote[],\n    params?: FormatOptions | boolean\n  ): BoundingBox | undefined {\n    let options = {\n      auto_beam: false,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      options = { ...options, ...params };\n    } else if (typeof params === 'boolean') {\n      options.auto_beam = params;\n    }\n\n    // Start by creating a voice and adding all the notes to it.\n    const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Then create beams, if requested.\n    const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n\n    // Instantiate a `Formatter` and format the notes.\n    new Formatter()\n      .joinVoices([voice]) // , { align_rests: options.align_rests })\n      .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n\n    // Render the voice and beams to the stave.\n    voice.setStave(stave).draw(ctx, stave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Return the bounding box of the voice.\n    return voice.getBoundingBox();\n  }\n\n  /**\n   * Helper function to format and draw aligned tab and stave notes in two\n   * separate staves.\n   * @param ctx the rendering context\n   * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n   * @param stave a `Stave` instance on which to render `Note`s.\n   * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n   * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n   * @param autobeam automatically generate beams.\n   * @param params a configuration object:\n   *    * `autobeam` automatically generates beams for the notes.\n   *    * `align_rests` aligns rests with nearby notes.\n   */\n  static FormatAndDrawTab(\n    ctx: RenderContext,\n    tabstave: TabStave,\n    stave: Stave,\n    tabnotes: TabNote[],\n    notes: Tickable[],\n    autobeam: boolean,\n    params: FormatOptions\n  ): void {\n    let opts = {\n      auto_beam: autobeam,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      opts = { ...opts, ...params };\n    } else if (typeof params === 'boolean') {\n      opts.auto_beam = params;\n    }\n\n    // Create a `4/4` voice for `notes`.\n    const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n\n    // Create a `4/4` voice for `tabnotes`.\n    const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n\n    // Then create beams, if requested.\n    const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n\n    // Instantiate a `Formatter` and align tab and stave notes.\n    new Formatter()\n      .joinVoices([notevoice]) // , { align_rests: opts.align_rests })\n      .joinVoices([tabvoice])\n      .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n\n    // Render voices and beams to staves.\n    notevoice.draw(ctx, stave);\n    tabvoice.draw(ctx, tabstave);\n    beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    // Draw a connector between tab and note staves.\n    new StaveConnector(stave, tabstave).setContext(ctx).draw();\n  }\n\n  /**\n   * Automatically set the vertical position of rests based on previous/next note positions.\n   * @param tickables an array of Tickables.\n   * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n   * @param alignTuplets If `false`, ignores tuplets.\n   */\n  static AlignRestsToNotes(tickables: Tickable[], alignAllNotes: boolean, alignTuplets?: boolean): void {\n    tickables.forEach((currTickable: Tickable, index: number) => {\n      if (isStaveNote(currTickable) && currTickable.isRest()) {\n        if (currTickable.getTuplet() && !alignTuplets) {\n          return;\n        }\n\n        // If activated rests not on default can be rendered as specified.\n        const position = currTickable.getGlyph().position.toUpperCase();\n        if (position !== 'R/4' && position !== 'B/4') {\n          return;\n        }\n\n        if (alignAllNotes || currTickable.getBeam()) {\n          // Align rests with previous/next notes.\n          const props = currTickable.getKeyProps()[0];\n          if (index === 0) {\n            props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n          } else if (index > 0 && index < tickables.length) {\n            // If previous tickable is a rest, use its line number.\n            const prevTickable = tickables[index - 1];\n            if (isStaveNote(prevTickable)) {\n              if (prevTickable.isRest()) {\n                props.line = prevTickable.getKeyProps()[0].line;\n              } else {\n                const restLine = prevTickable.getLineForRest();\n                // Get the rest line for next valid non-rest note group.\n                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n              }\n            }\n          }\n          currTickable.setKeyLine(0, props.line);\n        }\n      }\n    });\n  }\n\n  constructor(options?: FormatterOptions) {\n    this.formatterOptions = {\n      globalSoftmax: false,\n      softmaxFactor: 100,\n      maxIterations: 5,\n      ...options,\n    };\n    this.justifyWidth = 0;\n    this.totalCost = 0;\n    this.totalShift = 0;\n    this.durationStats = {};\n\n    // Minimum width required to render all the notes in the voices.\n    this.minTotalWidth = 0;\n\n    // This is set to `true` after `minTotalWidth` is calculated.\n    this.hasMinTotalWidth = false;\n\n    // Arrays of tick and modifier contexts.\n    this.tickContexts = undefined;\n    this.modifierContexts = undefined;\n\n    // Gaps between contexts, for free movement of notes post\n    // formatting.\n    this.contextGaps = {\n      total: 0,\n      gaps: [],\n    };\n\n    this.voices = [];\n    this.lossHistory = [];\n  }\n\n  /**\n   * Find all the rests in each of the `voices` and align them to neighboring notes.\n   *\n   * @param voices\n   * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n   */\n  alignRests(voices: Voice[], alignAllNotes: boolean): void {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format rests');\n    }\n\n    voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n  }\n\n  /**\n   * Estimate the width required to render 'voices'.  This is done by:\n   * 1. Sum the widths of all the tick contexts\n   * 2. Estimate the padding.\n   * The latter is done by calculating the padding 3 different ways, and taking the\n   * greatest value:\n   * 1. the padding required for unaligned notes in different voices\n   * 2. the padding based on the stddev of the tickable widths\n   * 3. the padding based on the stddev of the tickable durations.\n   *\n   * The last 2 quantities estimate a 'width entropy', where notes might need more\n   * room than the proportional formatting gives them.  A measure of all same duration\n   * and width will need no extra padding, and all these quantities will be\n   * zero in that case.\n   *\n   * @param voices the voices that contain the notes\n   * @returns the estimated width in pixels\n   */\n  preCalculateMinTotalWidth(voices: Voice[]): number {\n    const unalignedPadding = Tables.DEFAULT_FONT_STACK[0].lookupMetric('stave.unalignedNotePadding');\n    // Calculate additional padding based on 3 methods:\n    // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n    let unalignedCtxCount = 0;\n    let wsum = 0;\n    let dsum = 0;\n    const widths: number[] = [];\n    const durations: number[] = [];\n\n    // Cache results.\n    if (this.hasMinTotalWidth) return this.minTotalWidth;\n\n    // Create tick contexts if not already created.\n    if (!this.tickContexts) {\n      if (!voices) {\n        throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n      }\n\n      this.createTickContexts(voices);\n    }\n\n    // eslint-disable-next-line\n  const { list: contextList, map: contextMap } = this.tickContexts!;\n    this.minTotalWidth = 0;\n\n    // Go through each tick context and calculate total width,\n    // and also accumulate values used in padding hints\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n      context.preFormat();\n      // If this TC doesn't have all the voices on it, it's unaligned.\n      // so increment the unaligned padding accumulator\n      if (context.getTickables().length < voices.length) {\n        unalignedCtxCount += 1;\n      }\n      // Calculate the 'width entropy' over all the Tickables.\n      context.getTickables().forEach((t: Tickable) => {\n        wsum += t.getMetrics().width;\n        dsum += t.getTicks().value();\n        widths.push(t.getMetrics().width);\n        durations.push(t.getTicks().value());\n      });\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n    });\n\n    this.hasMinTotalWidth = true;\n    // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n    const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n    const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n    const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n\n    const davg = dsum / durations.length;\n    const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n    const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n\n    // Find max of 3 methods pad the width with that\n    const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n    const unalignedPad = unalignedPadding * unalignedCtxCount;\n\n    return this.minTotalWidth + Math.max(unalignedPad, padmax);\n  }\n\n  /**\n   * Get minimum width required to render all voices. Either `format` or\n   * `preCalculateMinTotalWidth` must be called before this method.\n   */\n  getMinTotalWidth(): number {\n    if (!this.hasMinTotalWidth) {\n      throw new RuntimeError(\n        'NoMinTotalWidth',\n        \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\"\n      );\n    }\n\n    return this.minTotalWidth;\n  }\n\n  /** Calculate the resolution multiplier for `voices`. */\n  static getResolutionMultiplier(voices: Voice[]): number {\n    if (!voices || !voices.length) {\n      throw new RuntimeError('BadArgument', 'No voices to format');\n    }\n    const totalTicks = voices[0].getTotalTicks();\n    const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n      if (!voice.getTotalTicks().equals(totalTicks)) {\n        throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n      }\n\n      if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n        throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n      }\n\n      return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n    }, 1);\n    return resolutionMultiplier;\n  }\n\n  /** Create a `ModifierContext` for each tick in `voices`. */\n  createModifierContexts(voices: Voice[]): AlignmentContexts<ModifierContext> {\n    const fn: addToContextFn<ModifierContext> = (tickable: Tickable, context: ModifierContext) =>\n      tickable.addToModifierContext(context);\n    const contexts = createContexts(voices, () => new ModifierContext(), fn);\n    this.modifierContexts = contexts;\n    return contexts;\n  }\n\n  /**\n   * Create a `TickContext` for each tick in `voices`. Also calculate the\n   * total number of ticks in voices.\n   */\n  createTickContexts(voices: Voice[]): AlignmentContexts<TickContext> {\n    const fn: addToContextFn<TickContext> = (tickable: Tickable, context: TickContext, voiceIndex: number) =>\n      context.addTickable(tickable, voiceIndex);\n    const contexts = createContexts(voices, (tick?: { tickID: number }) => new TickContext(tick), fn);\n    this.tickContexts = contexts;\n    const contextArray = this.tickContexts.array;\n\n    contextArray.forEach((context) => {\n      context.tContexts = contextArray;\n    });\n    return contexts;\n  }\n\n  /**\n   * This is the core formatter logic. Format voices and justify them\n   * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n   * that can't retreive widths without a canvas. This method sets the `x` positions\n   * of all the tickables/notes in the formatter.\n   */\n  preFormat(justifyWidth = 0, renderingContext?: RenderContext, voicesParam?: Voice[], stave?: Stave): number {\n    // Initialize context maps.\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n    }\n\n    const { list: contextList, map: contextMap } = contexts;\n\n    // Reset loss history for evaluator.\n    this.lossHistory = [];\n\n    // If voices and a stave were provided, set the Stave for each voice\n    // and preFormat to apply Y values to the notes;\n    if (voicesParam && stave) {\n      voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n    }\n\n    // Now distribute the ticks to each tick context, and assign them their\n    // own X positions.\n    let x = 0;\n    let shift = 0;\n    this.minTotalWidth = 0;\n    let totalTicks = 0;\n\n    // Pass 1: Give each note maximum width requested by context.\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n\n      // Make sure that all tickables in this context have calculated their\n      // space requirements.\n      context.preFormat();\n\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n\n      const maxTicks = context.getMaxTicks().value();\n      totalTicks += maxTicks;\n\n      const metrics = context.getMetrics();\n      x = x + shift + metrics.totalLeftPx;\n      context.setX(x);\n\n      // Calculate shift for the next tick.\n      shift = width - metrics.totalLeftPx;\n    });\n\n    // Use softmax based on all notes across all staves. (options.globalSoftmax)\n    const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n\n    const exp = (tick: number) => softmaxFactor ** (contextMap[tick].getMaxTicks().value() / totalTicks);\n    const expTicksUsed = sumArray(contextList.map(exp));\n\n    this.minTotalWidth = x + shift;\n    this.hasMinTotalWidth = true;\n\n    // No justification needed. End formatting.\n    if (justifyWidth <= 0) return this.evaluate();\n\n    // Start justification. Subtract the right extra pixels of the final context because the formatter\n    // justifies based on the context's X position, which is the left-most part of the note head.\n    const firstContext = contextMap[contextList[0]];\n    const lastContext = contextMap[contextList[contextList.length - 1]];\n\n    // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n    // the softmax of the ticks.\n    function calculateIdealDistances(adjustedJustifyWidth: number): Distance[] {\n      const distances: Distance[] = contextList.map((tick: number, i: number) => {\n        const context: TickContext = contextMap[tick];\n        const voices = context.getTickablesByVoice();\n        let backTickable: Tickable | undefined;\n        if (i > 0) {\n          const prevContext: TickContext = contextMap[contextList[i - 1]];\n          // Go through each tickable and search backwards for another tickable\n          // in the same voice. If found, use that duration (ticks) to calculate\n          // the expected distance.\n          for (let j = i - 1; j >= 0; j--) {\n            const backTick: TickContext = contextMap[contextList[j]];\n            const backVoices = backTick.getTickablesByVoice();\n\n            // Look for matching voices between tick contexts.\n            const matchingVoices: string[] = [];\n            Object.keys(voices).forEach((v) => {\n              if (backVoices[v]) {\n                matchingVoices.push(v);\n              }\n            });\n\n            if (matchingVoices.length > 0) {\n              // Found matching voices, get largest duration\n              let maxTicks = 0;\n              let maxNegativeShiftPx = Infinity;\n              let expectedDistance = 0;\n\n              matchingVoices.forEach((v) => {\n                const ticks = backVoices[v].getTicks().value();\n                if (ticks > maxTicks) {\n                  backTickable = backVoices[v];\n                  maxTicks = ticks;\n                }\n\n                // Calculate the limits of the shift based on modifiers, etc.\n                const thisTickable = voices[v];\n                const insideLeftEdge =\n                  thisTickable.getX() -\n                  (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n\n                const backMetrics = backVoices[v].getMetrics();\n                const insideRightEdge =\n                  backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n\n                // Don't allow shifting if notes in the same voice can collide\n                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n              });\n\n              // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n              // so that two different tick contexts don't align across staves.\n              maxNegativeShiftPx = Math.min(\n                maxNegativeShiftPx,\n                context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05)\n              );\n\n              // Calculate the expected distance of the current context from the last matching tickable. The\n              // distance is scaled down by the softmax for the voice.\n              if (globalSoftmax) {\n                const t = totalTicks;\n                expectedDistance = (softmaxFactor ** (maxTicks / t) / expTicksUsed) * adjustedJustifyWidth;\n              } else if (typeof backTickable !== 'undefined') {\n                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n              }\n              return {\n                expectedDistance,\n                maxNegativeShiftPx,\n                fromTickable: backTickable,\n              };\n            }\n          }\n        }\n\n        return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n      });\n      return distances;\n    }\n\n    function shiftToIdealDistances(idealDistances: Distance[]): number {\n      // Distribute ticks to the contexts based on the calculated distance error.\n      const centerX = adjustedJustifyWidth / 2;\n      let spaceAccum = 0;\n\n      contextList.forEach((tick, index) => {\n        const context = contextMap[tick];\n        if (index > 0) {\n          const contextX = context.getX();\n          const ideal = idealDistances[index];\n          const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n\n          let negativeShiftPx = 0;\n          if (errorPx > 0) {\n            spaceAccum += errorPx;\n          } else if (errorPx < 0) {\n            negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n            spaceAccum += -negativeShiftPx;\n          }\n          context.setX(contextX + spaceAccum);\n        }\n        // Move center aligned tickables to middle\n        context.getCenterAlignedTickables().forEach((tickable: Tickable) => {\n          tickable.setCenterXShift(centerX - context.getX());\n        });\n      });\n\n      return lastContext.getX() - firstContext.getX();\n    }\n\n    const adjustedJustifyWidth =\n      justifyWidth -\n      lastContext.getMetrics().notePx -\n      lastContext.getMetrics().totalRightPx -\n      firstContext.getMetrics().totalLeftPx;\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');\n    const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');\n    let targetWidth = adjustedJustifyWidth;\n    const distances = calculateIdealDistances(targetWidth);\n    let actualWidth = shiftToIdealDistances(distances);\n    // Calculate right justification by finding max of (configured value, min distance between tickables)\n    // so measures with lots of white space use it evenly, and crowded measures use at least the configured\n    // space\n    const calcMinDistance = (targetWidth: number, distances: Distance[]) => {\n      let mdCalc = targetWidth / 2;\n      if (distances.length > 1) {\n        for (let di = 1; di < distances.length; ++di) {\n          mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n        }\n      }\n      return mdCalc;\n    };\n    const minDistance = calcMinDistance(targetWidth, distances);\n\n    // Just one context. Done formatting.\n    if (contextList.length === 1) return 0;\n\n    // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n    // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n    // existing visual regression tests.\n    const paddingMax = configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n    const paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n    const maxX = adjustedJustifyWidth - paddingMin;\n\n    let iterations = maxIterations;\n    // Adjust justification width until the right margin is as close as possible to the calculated padding,\n    // without going over\n    while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n      targetWidth -= actualWidth - maxX;\n      actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n      iterations--;\n    }\n\n    this.justifyWidth = justifyWidth;\n    return this.evaluate();\n  }\n\n  /** Calculate the total cost of this formatting decision. */\n  evaluate(): number {\n    if (!this.tickContexts) return 0;\n    const contexts = this.tickContexts;\n    const justifyWidth = this.justifyWidth;\n    // Calculate available slack per tick context. This works out how much freedom\n    // to move a context has in either direction, without affecting other notes.\n    this.contextGaps = { total: 0, gaps: [] };\n    contexts.list.forEach((tick, index) => {\n      if (index === 0) return;\n      const prevTick = contexts.list[index - 1];\n      const prevContext = contexts.map[prevTick];\n      const context = contexts.map[tick];\n      const prevMetrics = prevContext.getMetrics();\n      const currMetrics = context.getMetrics();\n\n      // Calculate X position of right edge of previous note\n      const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n      // Calculate X position of left edge of current note\n      const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n      const gap = insideLeftEdge - insideRightEdge;\n      this.contextGaps.total += gap;\n      this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n\n      // Tell the tick contexts how much they can reposition themselves.\n      context.getFormatterMetrics().freedom.left = gap;\n      prevContext.getFormatterMetrics().freedom.right = gap;\n    });\n\n    // Calculate mean distance in each voice for each duration type, then calculate\n    // how far each note is from the mean.\n    this.durationStats = {};\n    const durationStats = this.durationStats;\n\n    function updateStats(duration: string, space: number) {\n      const stats = durationStats[duration];\n      if (stats === undefined) {\n        durationStats[duration] = { mean: space, count: 1 };\n      } else {\n        stats.count += 1;\n        stats.mean = (stats.mean + space) / 2;\n      }\n    }\n\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note, i, notes) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getMetrics();\n        const formatterMetrics = note.getFormatterMetrics();\n        const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n        let space = 0;\n\n        if (i < notes.length - 1) {\n          const rightNote = notes[i + 1];\n          const rightMetrics = rightNote.getMetrics();\n          const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n\n          space = rightNoteEdge - leftNoteEdge;\n          formatterMetrics.space.used = rightNote.getX() - note.getX();\n          rightNote.getFormatterMetrics().freedom.left = space;\n        } else {\n          space = justifyWidth - leftNoteEdge;\n          formatterMetrics.space.used = justifyWidth - note.getX();\n        }\n\n        formatterMetrics.freedom.right = space;\n        updateStats(duration, formatterMetrics.space.used);\n      });\n    });\n\n    // Calculate how much each note deviates from the mean. Loss function is square\n    // root of the sum of squared deviations.\n    let totalDeviation = 0;\n    this.voices.forEach((voice) => {\n      voice.getTickables().forEach((note) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getFormatterMetrics();\n\n        metrics.space.mean = durationStats[duration].mean;\n        metrics.duration = duration;\n        metrics.iterations += 1;\n        metrics.space.deviation = metrics.space.used - metrics.space.mean;\n\n        totalDeviation += metrics.space.deviation ** 2;\n      });\n    });\n\n    this.totalCost = Math.sqrt(totalDeviation);\n    this.lossHistory.push(this.totalCost);\n    return this.totalCost;\n  }\n\n  /**\n   * Run a single iteration of rejustification. At a high level, this method calculates\n   * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n   * attempt to reduce the cost. You can call this method multiple times until it finds\n   * and oscillates around a global minimum.\n   * @param alpha the \"learning rate\" for the formatter. It determines how much of a shift\n   * the formatter should make based on its cost function.\n   */\n  tune(options?: { alpha?: number }): number {\n    const contexts = this.tickContexts;\n    if (!contexts) {\n      return 0;\n    }\n\n    const alpha = options?.alpha ?? 0.5;\n\n    // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n    // on adjacent tickcontexts.\n    function move(current: TickContext, shift: number, prev?: TickContext, next?: TickContext) {\n      current.setX(current.getX() + shift);\n      current.getFormatterMetrics().freedom.left += shift;\n      current.getFormatterMetrics().freedom.right -= shift;\n\n      if (prev) prev.getFormatterMetrics().freedom.right += shift;\n      if (next) next.getFormatterMetrics().freedom.left -= shift;\n    }\n\n    let shift = 0;\n    this.totalShift = 0;\n    contexts.list.forEach((tick, index, list) => {\n      const context = contexts.map[tick];\n      const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n      const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n\n      move(context, shift, prevContext, nextContext);\n\n      const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n\n      if (cost > 0) {\n        shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n      } else if (cost < 0) {\n        if (nextContext) {\n          shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n        } else {\n          shift = 0;\n        }\n      }\n\n      shift *= alpha;\n      this.totalShift += shift;\n    });\n\n    return this.evaluate();\n  }\n\n  /**\n   * This is the top-level call for all formatting logic completed\n   * after `x` *and* `y` values have been computed for the notes\n   * in the voices.\n   */\n  postFormat(): this {\n    const postFormatContexts = (contexts: AlignmentContexts<ModifierContext> | AlignmentContexts<TickContext>) =>\n      contexts.list.forEach((tick) => contexts.map[tick].postFormat());\n\n    if (this.modifierContexts) postFormatContexts(this.modifierContexts);\n    if (this.tickContexts) postFormatContexts(this.tickContexts);\n\n    return this;\n  }\n\n  /**\n   * Take all `voices` and create `ModifierContext`s out of them. This tells\n   * the formatters that the voices belong on a single stave.\n   */\n  joinVoices(voices: Voice[]): this {\n    this.createModifierContexts(voices);\n    this.hasMinTotalWidth = false;\n    return this;\n  }\n\n  /**\n   * Align rests in voices, justify the contexts, and position the notes\n   * so voices are aligned and ready to render onto the stave. This method\n   * mutates the `x` positions of all tickables in `voices`.\n   *\n   * Voices are full justified to fit in `justifyWidth` pixels.\n   *\n   * Set `options.context` to the rendering context. Set `options.align_rests`\n   * to true to enable rest alignment.\n   */\n  format(voices: Voice[], justifyWidth?: number, options?: FormatOptions): this {\n    const opts = {\n      align_rests: false,\n      ...options,\n    };\n\n    this.voices = voices;\n    const softmaxFactor = this.formatterOptions.softmaxFactor;\n    if (softmaxFactor) {\n      this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n    }\n\n    this.alignRests(voices, opts.align_rests);\n    this.createTickContexts(voices);\n    this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n\n    // Only postFormat if a stave was supplied for y value formatting\n    if (opts.stave) this.postFormat();\n\n    return this;\n  }\n\n  // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n  formatToStave(voices: Voice[], stave: Stave, optionsParam?: FormatOptions): this {\n    const options: FormatOptions = { padding: 10, context: stave.getContext(), ...optionsParam };\n\n    // eslint-disable-next-line\n    const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n    L('Formatting voices to width: ', justifyWidth);\n    return this.format(voices, justifyWidth, options);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.num_notes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   num_notes: fit this many notes into...\n *   notes_occupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of num_notes : notes_occupied.\n *       num_notes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notes_occupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between num_notes and\n *     notes_occupied is greater than 1.\n *\n *   y_offset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\n\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { defined, RuntimeError } from './util';\n\nexport interface TupletOptions {\n  beats_occupied?: number;\n  bracketed?: boolean;\n  location?: number;\n  notes_occupied?: number;\n  num_notes?: number;\n  ratioed?: boolean;\n  y_offset?: number;\n}\n\nexport class Tuplet extends Element {\n  static get CATEGORY(): string {\n    return 'Tuplet';\n  }\n\n  notes: Note[];\n\n  protected options: TupletOptions;\n  protected num_notes: number;\n  protected point: number;\n\n  protected bracketed: boolean;\n  protected y_pos: number;\n  protected x_pos: number;\n  protected width: number;\n\n  // location is initialized by the constructor via setTupletLocation(...).\n  protected location!: number;\n\n  protected notes_occupied: number;\n  protected ratioed: boolean;\n  protected numerator_glyphs: Glyph[] = [];\n  protected denom_glyphs: Glyph[] = [];\n\n  static get LOCATION_TOP(): number {\n    return 1;\n  }\n  static get LOCATION_BOTTOM(): number {\n    return -1;\n  }\n  static get NESTING_OFFSET(): number {\n    return 15;\n  }\n\n  constructor(notes: Note[], options: TupletOptions = {}) {\n    super();\n    if (!notes || !notes.length) {\n      throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n    }\n\n    this.options = options;\n    this.notes = notes;\n    this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\n\n    // We accept beats_occupied, but warn that it's deprecated:\n    // the preferred property name is now notes_occupied.\n    if (this.options.beats_occupied) {\n      this.beatsOccupiedDeprecationWarning();\n    }\n    this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n    if (this.options.bracketed != undefined) {\n      this.bracketed = this.options.bracketed;\n    } else {\n      this.bracketed = notes.some((note) => !note.hasBeam());\n    }\n\n    this.ratioed =\n      this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n    this.point = this.musicFont.lookupMetric('digits.tupletPoint');\n    this.y_pos = 16;\n    this.x_pos = 100;\n    this.width = 200;\n\n    this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n\n    Formatter.AlignRestsToNotes(notes, true, true);\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  attach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.setTuplet(this);\n    }\n  }\n\n  detach(): void {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.resetTuplet(this);\n    }\n  }\n\n  /**\n   * Set whether or not the bracket is drawn.\n   */\n  setBracketed(bracketed: boolean): this {\n    this.bracketed = !!bracketed;\n    return this;\n  }\n\n  /**\n   * Set whether or not the ratio is shown.\n   */\n  setRatioed(ratioed: boolean): this {\n    this.ratioed = !!ratioed;\n    return this;\n  }\n\n  /**\n   * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n   */\n  setTupletLocation(location: number): this {\n    if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n      // eslint-disable-next-line\n      console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n      location = Tuplet.LOCATION_TOP;\n    }\n\n    this.location = location;\n    return this;\n  }\n\n  getNotes(): Note[] {\n    return this.notes;\n  }\n\n  getNoteCount(): number {\n    return this.num_notes;\n  }\n\n  beatsOccupiedDeprecationWarning(): void {\n    // eslint-disable-next-line\n    console.warn(\n      'beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.',\n      'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.'\n    );\n  }\n\n  getBeatsOccupied(): number {\n    this.beatsOccupiedDeprecationWarning();\n    return this.getNotesOccupied();\n  }\n\n  setBeatsOccupied(beats: number): void {\n    this.beatsOccupiedDeprecationWarning();\n    return this.setNotesOccupied(beats);\n  }\n\n  getNotesOccupied(): number {\n    return this.notes_occupied;\n  }\n\n  setNotesOccupied(notes: number): void {\n    this.detach();\n    this.notes_occupied = notes;\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  resolveGlyphs(): void {\n    this.numerator_glyphs = [];\n    let n = this.num_notes;\n    while (n >= 1) {\n      this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n\n    this.denom_glyphs = [];\n    n = this.notes_occupied;\n    while (n >= 1) {\n      this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n  }\n\n  // determine how many tuplets are nested within this tuplet\n  // on the same side (above/below), to calculate a y\n  // offset for this tuplet:\n  getNestedTupletCount(): number {\n    const location = this.location;\n    const first_note = this.notes[0];\n    let maxTupletCount = countTuplets(first_note, location);\n    let minTupletCount = countTuplets(first_note, location);\n\n    // Count the tuplets that are on the same side (above/below)\n    // as this tuplet:\n    function countTuplets(note: Note, location: number) {\n      return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n    }\n\n    this.notes.forEach((note) => {\n      const tupletCount = countTuplets(note, location);\n      maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n      minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n    });\n\n    return maxTupletCount - minTupletCount;\n  }\n\n  // determine the y position of the tuplet:\n  getYPosition(): number {\n    // offset the tuplet for any nested tuplets between\n    // it and the notes:\n    const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n\n    // offset the tuplet for any manual y_offset:\n    const y_offset = this.options.y_offset || 0;\n\n    // now iterate through the notes and find our highest\n    // or lowest locations, to form a base y_pos\n    const first_note = this.notes[0];\n    let y_pos;\n    if (this.location === Tuplet.LOCATION_TOP) {\n      y_pos = first_note.checkStave().getYForLine(0) - 15;\n      // y_pos = first_note.getStemExtents().topY - 10;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const top_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().topY - 10\n            : this.notes[i].getStemExtents().baseY - 20;\n\n        if (top_y < y_pos) {\n          y_pos = top_y;\n        }\n      }\n    } else {\n      y_pos = first_note.checkStave().getYForLine(4) + 20;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const bottom_y =\n          this.notes[i].getStemDirection() === Stem.UP\n            ? this.notes[i].getStemExtents().baseY + 20\n            : this.notes[i].getStemExtents().topY + 10;\n        if (bottom_y > y_pos) {\n          y_pos = bottom_y;\n        }\n      }\n    }\n\n    return y_pos + nested_tuplet_y_offset + y_offset;\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    // determine x value of left bound of tuplet\n    const first_note = this.notes[0] as StemmableNote;\n    const last_note = this.notes[this.notes.length - 1] as StemmableNote;\n\n    if (!this.bracketed) {\n      this.x_pos = first_note.getStemX();\n      this.width = last_note.getStemX() - this.x_pos;\n    } else {\n      this.x_pos = first_note.getTieLeftX() - 5;\n      this.width = last_note.getTieRightX() - this.x_pos + 5;\n    }\n\n    // determine y value for tuplet\n    this.y_pos = this.getYPosition();\n\n    const addGlyphWidth = (width: number, glyph: Glyph) => width + defined(glyph.getMetrics().width);\n\n    // calculate total width of tuplet notation\n    let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n    if (this.ratioed) {\n      width = this.denom_glyphs.reduce(addGlyphWidth, width);\n      width += this.point * 0.32;\n    }\n\n    const notation_center_x = this.x_pos + this.width / 2;\n    const notation_start_x = notation_center_x - width / 2;\n\n    // draw bracket if the tuplet is not beamed\n    if (this.bracketed) {\n      const line_width = this.width / 2 - width / 2 - 5;\n\n      // only draw the bracket if it has positive length\n      if (line_width > 0) {\n        ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n        ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n        ctx.fillRect(\n          this.x_pos,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n        ctx.fillRect(\n          this.x_pos + this.width,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0),\n          1,\n          this.location * 10\n        );\n      }\n    }\n\n    // draw numerator glyphs\n    const shiftY = this.musicFont.lookupMetric('digits.shiftY', 0);\n\n    let x_offset = 0;\n    this.numerator_glyphs.forEach((glyph) => {\n      glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n      x_offset += defined(glyph.getMetrics().width);\n    });\n\n    // display colon and denominator if the ratio is to be shown\n    if (this.ratioed) {\n      const colon_x = notation_start_x + x_offset + this.point * 0.16;\n      const colon_radius = this.point * 0.06;\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.fill();\n      x_offset += this.point * 0.32;\n      this.denom_glyphs.forEach((glyph) => {\n        glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n        x_offset += defined(glyph.getMetrics().width);\n      });\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { isStaveNote, isTabNote } from 'typeguard';\n\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Tuplet } from './tuplet';\nimport { RuntimeError } from './util';\nimport { Voice } from './voice';\n\nfunction calculateStemDirection(notes: StemmableNote[]) {\n  let lineSum = 0;\n  notes.forEach((note) => {\n    if (note.keyProps) {\n      note.keyProps.forEach((keyProp) => {\n        lineSum += keyProp.line - 3;\n      });\n    }\n  });\n\n  if (lineSum >= 0) {\n    return Stem.DOWN;\n  }\n  return Stem.UP;\n}\n\nfunction getStemSlope(firstNote: StemmableNote, lastNote: StemmableNote) {\n  const firstStemTipY = firstNote.getStemExtents().topY;\n  const firstStemX = firstNote.getStemX();\n  const lastStemTipY = lastNote.getStemExtents().topY;\n  const lastStemX = lastNote.getStemX();\n  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\n\nconst BEAM_LEFT = 'L';\nconst BEAM_RIGHT = 'R';\nconst BEAM_BOTH = 'B';\n\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n  static get CATEGORY(): string {\n    return 'Beam';\n  }\n\n  public render_options: {\n    flat_beam_offset?: number;\n    flat_beams: boolean;\n    secondary_break_ticks?: number;\n    show_stemlets: boolean;\n    beam_width: number;\n    max_slope: number;\n    min_slope: number;\n    slope_iterations: number;\n    slope_cost: number;\n    stemlet_extension: number;\n    partial_beam_length: number;\n    min_flat_beam_offset: number;\n  };\n\n  notes: StemmableNote[];\n  postFormatted: boolean;\n  slope: number = 0;\n\n  private readonly stem_direction: number;\n  private readonly ticks: number;\n\n  private y_shift: number = 0;\n  private break_on_indices: number[];\n  private beam_count: number;\n  private unbeamable?: boolean;\n\n  /** Get the direction of the beam */\n  getStemDirection(): number {\n    return this.stem_direction;\n  }\n\n  /**\n   * Get the default beam groups for a provided time signature.\n   * Attempt to guess if the time signature is not found in table.\n   * Currently this is fairly naive.\n   */\n  static getDefaultBeamGroups(time_sig: string): Fraction[] {\n    if (!time_sig || time_sig === 'c') {\n      time_sig = '4/4';\n    }\n\n    const defaults: { [key: string]: [string] } = {\n      '1/2': ['1/2'],\n      '2/2': ['1/2'],\n      '3/2': ['1/2'],\n      '4/2': ['1/2'],\n\n      '1/4': ['1/4'],\n      '2/4': ['1/4'],\n      '3/4': ['1/4'],\n      '4/4': ['1/4'],\n\n      '1/8': ['1/8'],\n      '2/8': ['2/8'],\n      '3/8': ['3/8'],\n      '4/8': ['2/8'],\n\n      '1/16': ['1/16'],\n      '2/16': ['2/16'],\n      '3/16': ['3/16'],\n      '4/16': ['2/16'],\n    };\n\n    const groups: string[] = defaults[time_sig];\n\n    if (groups === undefined) {\n      // If no beam groups found, naively determine\n      // the beam groupings from the time signature\n      const beatTotal = parseInt(time_sig.split('/')[0], 10);\n      const beatValue = parseInt(time_sig.split('/')[1], 10);\n\n      const tripleMeter = beatTotal % 3 === 0;\n\n      if (tripleMeter) {\n        return [new Fraction(3, beatValue)];\n      } else if (beatValue > 4) {\n        return [new Fraction(2, beatValue)];\n      } else if (beatValue <= 4) {\n        return [new Fraction(1, beatValue)];\n      }\n    } else {\n      return groups.map((group) => new Fraction().parse(group));\n    }\n\n    return [new Fraction(1, 4)];\n  }\n\n  /**\n   * A helper function to automatically build basic beams for a voice. For more\n   * complex auto-beaming use `Beam.generateBeams()`.\n   * @param voice the voice to generate the beams for\n   * @param stem_direction a stem direction to apply to the entire voice\n   * @param groups an array of `Fraction` representing beat groupings for the beam\n   */\n  static applyAndGetBeams(voice: Voice, stem_direction?: number, groups?: Fraction[]): Beam[] {\n    return Beam.generateBeams(voice.getTickables() as StemmableNote[], { groups, stem_direction });\n  }\n\n  /**\n   * A helper function to autimatically build beams for a voice with\n   * configuration options.\n   *\n   * Example configuration object:\n   *\n   * ```\n   * config = {\n   *   groups: [new Vex.Flow.Fraction(2, 8)],\n   *   stem_direction: -1,\n   *   beam_rests: true,\n   *   beam_middle_only: true,\n   *   show_stemlets: false\n   * };\n   * ```\n   * @param notes an array of notes to create the beams for\n   * @param config the configuration object\n   * @param config.stem_direction set to apply the same direction to all notes\n   * @param config.beam_rests set to `true` to include rests in the beams\n   * @param config.beam_middle_only set to `true` to only beam rests in the middle of the beat\n   * @param config.show_stemlets set to `true` to draw stemlets for rests\n   * @param config.maintain_stem_directions set to `true` to not apply new stem directions\n   * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n   *\n   */\n  static generateBeams(\n    notes: StemmableNote[],\n    config: {\n      flat_beam_offset?: number;\n      flat_beams?: boolean;\n      secondary_breaks?: string;\n      show_stemlets?: boolean;\n      maintain_stem_directions?: boolean;\n      beam_middle_only?: boolean;\n      beam_rests?: boolean;\n      groups?: Fraction[];\n      stem_direction?: number;\n    } = {}\n  ): Beam[] {\n    if (!config.groups || !config.groups.length) {\n      config.groups = [new Fraction(2, 8)];\n    }\n\n    // Convert beam groups to tick amounts\n    const tickGroups = config.groups.map((group) => {\n      if (!group.multiply) {\n        throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n      }\n      return group.clone().multiply(Tables.RESOLUTION, 1);\n    });\n\n    const unprocessedNotes: StemmableNote[] = notes;\n    let currentTickGroup = 0;\n    let noteGroups: StemmableNote[][] = [];\n    let currentGroup: StemmableNote[] = [];\n\n    function getTotalTicks(vf_notes: Note[]) {\n      return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n    }\n\n    function nextTickGroup() {\n      if (tickGroups.length - 1 > currentTickGroup) {\n        currentTickGroup += 1;\n      } else {\n        currentTickGroup = 0;\n      }\n    }\n\n    function createGroups() {\n      let nextGroup: StemmableNote[] = [];\n      // number of ticks in current group\n      let currentGroupTotalTicks = new Fraction(0, 1);\n      unprocessedNotes.forEach((unprocessedNote) => {\n        nextGroup = [];\n        if (unprocessedNote.shouldIgnoreTicks()) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          return; // Ignore untickables (like bar notes)\n        }\n        currentGroup.push(unprocessedNote);\n        const ticksPerGroup = tickGroups[currentTickGroup].clone();\n        const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n\n        // Double the amount of ticks in a group, if it's an unbeamable tuplet\n        const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n        if (unbeamable && unprocessedNote.getTuplet()) {\n          ticksPerGroup.numerator *= 2;\n        }\n\n        // If the note that was just added overflows the group tick total\n        if (totalTicks.greaterThan(ticksPerGroup)) {\n          // If the overflow note can be beamed, start the next group\n          // with it. Unbeamable notes leave the group overflowed.\n          if (!unbeamable) {\n            const note = currentGroup.pop();\n            if (note) nextGroup.push(note);\n          }\n          noteGroups.push(currentGroup);\n\n          // We have overflown, so we're going to next tick group. As we might have\n          // overflown by more than 1 group, we need to go forward as many times as\n          // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n          // in current groups as we go forward.\n          do {\n            currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n            nextTickGroup();\n          } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n          currentGroup = nextGroup;\n        } else if (totalTicks.equals(ticksPerGroup)) {\n          noteGroups.push(currentGroup);\n          currentGroupTotalTicks = new Fraction(0, 1);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        }\n      });\n\n      // Adds any remainder notes beam\n      if (currentGroup.length > 0) {\n        noteGroups.push(currentGroup);\n      }\n    }\n    function getBeamGroups() {\n      return noteGroups.filter((group) => {\n        if (group.length > 1) {\n          let beamable = true;\n          group.forEach((note) => {\n            if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n              beamable = false;\n            }\n          });\n          return beamable;\n        }\n        return false;\n      });\n    }\n\n    // Splits up groups by Rest\n    function sanitizeGroups() {\n      const sanitizedGroups: StemmableNote[][] = [];\n      noteGroups.forEach((group) => {\n        let tempGroup: StemmableNote[] = [];\n        group.forEach((note, index, group) => {\n          const isFirstOrLast = index === 0 || index === group.length - 1;\n          const prevNote = group[index - 1];\n\n          const breaksOnEachRest = !config.beam_rests && note.isRest();\n          const breaksOnFirstOrLastRest =\n            config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\n\n          let breakOnStemChange = false;\n          if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\n            const prevDirection = prevNote.getStemDirection();\n            const currentDirection = note.getStemDirection();\n            breakOnStemChange = currentDirection !== prevDirection;\n          }\n\n          const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n\n          // Determine if the group should be broken at this note\n          const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n\n          if (shouldBreak) {\n            // Add current group\n            if (tempGroup.length > 0) {\n              sanitizedGroups.push(tempGroup);\n            }\n\n            // Start a new group. Include the current note if the group\n            // was broken up by stem direction, as that note needs to start\n            // the next group of notes\n            tempGroup = breakOnStemChange ? [note] : [];\n          } else {\n            // Add note to group\n            tempGroup.push(note);\n          }\n        });\n\n        // If there is a remaining group, add it as well\n        if (tempGroup.length > 0) {\n          sanitizedGroups.push(tempGroup);\n        }\n      });\n\n      noteGroups = sanitizedGroups;\n    }\n\n    function formatStems() {\n      noteGroups.forEach((group) => {\n        let stemDirection;\n        if (config.maintain_stem_directions) {\n          const note = findFirstNote(group);\n          stemDirection = note ? note.getStemDirection() : Stem.UP;\n        } else {\n          if (config.stem_direction) {\n            stemDirection = config.stem_direction;\n          } else {\n            stemDirection = calculateStemDirection(group);\n          }\n        }\n        applyStemDirection(group, stemDirection);\n      });\n    }\n\n    function findFirstNote(group: StemmableNote[]) {\n      for (let i = 0; i < group.length; i++) {\n        const note = group[i];\n        if (!note.isRest()) {\n          return note;\n        }\n      }\n\n      return false;\n    }\n\n    function applyStemDirection(group: StemmableNote[], direction: number) {\n      group.forEach((note) => {\n        note.setStemDirection(direction);\n      });\n    }\n\n    // Get all of the tuplets in all of the note groups\n    function getTuplets() {\n      const uniqueTuplets: Tuplet[] = [];\n\n      // Go through all of the note groups and inspect for tuplets\n      noteGroups.forEach((group) => {\n        let tuplet: Tuplet;\n        group.forEach((note) => {\n          const noteTuplet = note.getTuplet();\n          if (noteTuplet && tuplet !== noteTuplet) {\n            tuplet = noteTuplet;\n            uniqueTuplets.push(tuplet);\n          }\n        });\n      });\n      return uniqueTuplets;\n    }\n\n    // Using closures to store the variables throughout the various functions\n    // IMO Keeps it this process lot cleaner - but not super consistent with\n    // the rest of the API's style - Silverwolf90 (Cyril)\n    createGroups();\n    sanitizeGroups();\n    formatStems();\n\n    // Get the notes to be beamed\n    const beamedNoteGroups = getBeamGroups();\n\n    // Get the tuplets in order to format them accurately\n    const allTuplets = getTuplets();\n\n    // Create a Vex.Flow.Beam from each group of notes to be beamed\n    const beams: Beam[] = [];\n    beamedNoteGroups.forEach((group) => {\n      const beam = new Beam(group);\n\n      if (config.show_stemlets) {\n        beam.render_options.show_stemlets = true;\n      }\n      if (config.secondary_breaks) {\n        beam.render_options.secondary_break_ticks = Tables.durationToTicks(config.secondary_breaks);\n      }\n      if (config.flat_beams === true) {\n        beam.render_options.flat_beams = true;\n        beam.render_options.flat_beam_offset = config.flat_beam_offset;\n      }\n      beams.push(beam);\n    });\n\n    // Reformat tuplets\n    allTuplets.forEach((tuplet) => {\n      // Set the tuplet location based on the stem direction\n      const direction =\n        (tuplet.notes[0] as StemmableNote).stem_direction === Stem.DOWN ? Tuplet.LOCATION_BOTTOM : Tuplet.LOCATION_TOP;\n      tuplet.setTupletLocation(direction);\n\n      // If any of the notes in the tuplet are not beamed, draw a bracket.\n      let bracketed = false;\n      for (let i = 0; i < tuplet.notes.length; i++) {\n        const note = tuplet.notes[i];\n        if (!note.hasBeam()) {\n          bracketed = true;\n          break;\n        }\n      }\n      tuplet.setBracketed(bracketed);\n    });\n\n    return beams;\n  }\n\n  constructor(notes: StemmableNote[], auto_stem: boolean = false) {\n    super();\n\n    if (!notes || notes.length === 0) {\n      throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n    }\n\n    if (notes.length === 1) {\n      throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n    }\n\n    // Validate beam line, direction and ticks.\n    this.ticks = notes[0].getIntrinsicTicks();\n\n    if (this.ticks >= Tables.durationToTicks('4')) {\n      throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n    }\n\n    let i; // shared iterator\n    let note;\n\n    this.stem_direction = Stem.UP;\n\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (note.hasStem()) {\n        this.stem_direction = note.getStemDirection();\n        break;\n      }\n    }\n\n    let stem_direction = this.stem_direction;\n    // Figure out optimal stem direction based on given notes\n\n    if (auto_stem && isStaveNote(notes[0])) {\n      stem_direction = calculateStemDirection(notes);\n    } else if (auto_stem && isTabNote(notes[0])) {\n      // Auto Stem TabNotes\n      const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n      stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n    }\n\n    // Apply stem directions and attach beam to notes\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (auto_stem) {\n        note.setStemDirection(stem_direction);\n        this.stem_direction = stem_direction;\n      }\n      note.setBeam(this);\n    }\n\n    this.postFormatted = false;\n    this.notes = notes;\n    this.beam_count = this.getBeamCount();\n    this.break_on_indices = [];\n    this.render_options = {\n      beam_width: 5,\n      max_slope: 0.25,\n      min_slope: -0.25,\n      slope_iterations: 20,\n      slope_cost: 100,\n      show_stemlets: false,\n      stemlet_extension: 7,\n      partial_beam_length: 10,\n      flat_beams: false,\n      min_flat_beam_offset: 15,\n    };\n  }\n\n  /** Get the notes in this beam. */\n  getNotes(): StemmableNote[] {\n    return this.notes;\n  }\n\n  /** Get the max number of beams in the set of notes. */\n  getBeamCount(): number {\n    const beamCounts = this.notes.map((note) => note.getGlyph().beam_count);\n\n    const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n\n    return maxBeamCount;\n  }\n\n  /** Set which note `indices` to break the secondary beam at. */\n  breakSecondaryAt(indices: number[]): this {\n    this.break_on_indices = indices;\n    return this;\n  }\n\n  /** Return the y coordinate for linear function. */\n  getSlopeY(x: number, first_x_px: number, first_y_px: number, slope: number): number {\n    return first_y_px + (x - first_x_px) * slope;\n  }\n\n  /** Calculate the best possible slope for the provided notes. */\n  calculateSlope(): void {\n    const {\n      notes,\n      stem_direction: stemDirection,\n      render_options: { max_slope, min_slope, slope_iterations, slope_cost },\n    } = this;\n\n    const firstNote = notes[0];\n    const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n    const increment = (max_slope - min_slope) / slope_iterations;\n    let minCost = Number.MAX_VALUE;\n    let bestSlope = 0;\n    let yShift = 0;\n\n    // iterate through slope values to find best weighted fit\n    for (let slope = min_slope; slope <= max_slope; slope += increment) {\n      let totalStemExtension = 0;\n      let yShiftTemp = 0;\n\n      // iterate through notes, calculating y shift and stem extension\n      for (let i = 1; i < notes.length; ++i) {\n        const note = notes[i];\n        const adjustedStemTipY =\n          this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n\n        const stemTipY = note.getStemExtents().topY;\n        // beam needs to be shifted up to accommodate note\n        if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n          const diff = Math.abs(stemTipY - adjustedStemTipY);\n          yShiftTemp += diff * -stemDirection;\n          totalStemExtension += diff * i;\n        } else {\n          // beam overshoots note, account for the difference\n          totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n        }\n      }\n\n      // most engraving books suggest aiming for a slope about half the angle of the\n      // difference between the first and last notes' stem length;\n      const idealSlope = initialSlope / 2;\n      const distanceFromIdeal = Math.abs(idealSlope - slope);\n\n      // This tries to align most beams to something closer to the idealSlope, but\n      // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n      const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n\n      // update state when a more ideal slope is found\n      if (cost < minCost) {\n        minCost = cost;\n        bestSlope = slope;\n        yShift = yShiftTemp;\n      }\n    }\n\n    this.slope = bestSlope;\n    this.y_shift = yShift;\n  }\n\n  /** Calculate a slope and y-shift for flat beams. */\n  calculateFlatSlope(): void {\n    const {\n      notes,\n      stem_direction,\n      render_options: { beam_width, min_flat_beam_offset, flat_beam_offset },\n    } = this;\n\n    // If a flat beam offset has not yet been supplied or calculated,\n    // generate one based on the notes in this particular note group\n    let total = 0;\n    let extremeY = 0; // Store the highest or lowest note here\n    let extremeBeamCount = 0; // The beam count of the extreme note\n    let currentExtreme = 0;\n    for (let i = 0; i < notes.length; i++) {\n      // Total up all of the offsets so we can average them out later\n      const note = notes[i];\n      const stemTipY = note.getStemExtents().topY;\n      total += stemTipY;\n\n      // Store the highest (stems-up) or lowest (stems-down) note so the\n      //  offset can be adjusted in case the average isn't enough\n      if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\n        currentExtreme = stemTipY;\n        extremeY = Math.max(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      } else if (stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n        currentExtreme = stemTipY;\n        extremeY = Math.min(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      }\n    }\n\n    // Average the offsets to try and come up with a reasonable one that\n    //  works for all of the notes in the beam group.\n    let offset = total / notes.length;\n\n    // In case the average isn't long enough, add or subtract some more\n    //  based on the highest or lowest note (again, based on the stem\n    //  direction). This also takes into account the added height due to\n    //  the width of the beams.\n    const beamWidth = beam_width * 1.5;\n    const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\n    const newOffset = extremeY + extremeTest * -stem_direction;\n    if (stem_direction === Stem.DOWN && offset < newOffset) {\n      offset = extremeY + extremeTest;\n    } else if (stem_direction === Stem.UP && offset > newOffset) {\n      offset = extremeY - extremeTest;\n    }\n\n    if (!flat_beam_offset) {\n      // Set the offset for the group based on the calculations above.\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.DOWN && offset > flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.UP && offset < flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    }\n\n    // for flat beams, the slope and y_shift are simply 0\n    this.slope = 0;\n    this.y_shift = 0;\n  }\n\n  /** Return the Beam y offset. */\n  getBeamYToDraw(): number {\n    const firstNote = this.notes[0];\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    let beamY = firstStemTipY;\n\n    // For flat beams, set the first and last Y to the offset, rather than\n    //  using the note's stem extents.\n    if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n      beamY = this.render_options.flat_beam_offset;\n    }\n    return beamY;\n  }\n\n  /**\n   * Create new stems for the notes in the beam, so that each stem\n   * extends into the beams.\n   */\n  applyStemExtensions(): void {\n    const {\n      notes,\n      slope,\n      y_shift,\n      stem_direction,\n      beam_count,\n      render_options: { show_stemlets, stemlet_extension, beam_width },\n    } = this;\n\n    const firstNote = notes[0];\n    const firstStemTipY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n\n    for (let i = 0; i < notes.length; ++i) {\n      const note = notes[i];\n      const stem = note.getStem();\n      if (stem) {\n        const stemX = note.getStemX();\n        const { topY: stemTipY } = note.getStemExtents();\n        const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n        const preBeamExtension = stem.getExtension();\n        const beamExtension = stem_direction === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n\n        stem.setExtension(preBeamExtension + beamExtension);\n        stem.adjustHeightForBeam();\n\n        if (note.isRest() && show_stemlets) {\n          const beamWidth = beam_width;\n          const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\n          stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\n        }\n      } else {\n        throw new RuntimeError('NoStem', 'stem undefined.');\n      }\n    }\n  }\n\n  /** Return upper level beam direction. */\n  lookupBeamDirection(duration: string, prev_tick: number, tick: number, next_tick: number): string {\n    if (duration === '4') {\n      return BEAM_LEFT;\n    }\n\n    const lookup_duration = `${Tables.durationToNumber(duration) / 2}`;\n    const prev_note_gets_beam = prev_tick < Tables.durationToTicks(lookup_duration);\n    const next_note_gets_beam = next_tick < Tables.durationToTicks(lookup_duration);\n    const note_gets_beam = tick < Tables.durationToTicks(lookup_duration);\n\n    if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_BOTH;\n    } else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\n      return BEAM_LEFT;\n    } else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_RIGHT;\n    }\n\n    return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick);\n  }\n\n  /** Get the x coordinates for the beam lines of specific `duration`. */\n  getBeamLines(duration: string): { start: number; end?: number }[] {\n    const tick_of_duration = Tables.durationToTicks(duration);\n    let beam_started = false;\n\n    type BeamInfo = { start: number; end?: number };\n    const beam_lines: BeamInfo[] = [];\n    let current_beam: BeamInfo | undefined = undefined;\n    const partial_beam_length = this.render_options.partial_beam_length;\n    let previous_should_break = false;\n    let tick_tally = 0;\n    for (let i = 0; i < this.notes.length; ++i) {\n      const note = this.notes[i];\n\n      // See if we need to break secondary beams on this note.\n      const ticks = note.getTicks().value();\n      tick_tally += ticks;\n      let should_break = false;\n\n      // 8th note beams are always drawn.\n      if (parseInt(duration, 10) >= 8) {\n        // First, check to see if any indices were set up through breakSecondaryAt()\n        should_break = this.break_on_indices.indexOf(i) !== -1;\n\n        // If the secondary breaks were auto-configured in the render options,\n        //  handle that as well.\n        if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n          tick_tally = 0;\n          should_break = true;\n        }\n      }\n      const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\n\n      const stem_x = note.getStemX() - Stem.WIDTH / 2;\n\n      // Check to see if the next note in the group will get a beam at this\n      //  level. This will help to inform the partial beam logic below.\n      const prev_note = this.notes[i - 1];\n      const next_note = this.notes[i + 1];\n      const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\n      const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\n      const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      if (note_gets_beam) {\n        // This note gets a beam at the current level\n        if (beam_started) {\n          // We're currently in the middle of a beam. Just continue it on to\n          //  the stem X of the current note.\n          current_beam = beam_lines[beam_lines.length - 1];\n          current_beam.end = stem_x;\n\n          // If a secondary beam break is set up, end the beam right now.\n          if (should_break) {\n            beam_started = false;\n            if (next_note && !next_note_gets_beam && current_beam.end === undefined) {\n              // This note gets a beam,.but the next one does not. This means\n              //  we need a partial pointing right.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          }\n        } else {\n          // No beam started yet. Start a new one.\n          current_beam = { start: stem_x, end: undefined };\n          beam_started = true;\n\n          if (beam_alone) {\n            // previous and next beam exists and does not get a beam but current gets it.\n            const prev_tick = prev_note.getIntrinsicTicks();\n            const next_tick = next_note.getIntrinsicTicks();\n            const tick = note.getIntrinsicTicks();\n            const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick);\n\n            if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\n              current_beam.end = current_beam.start - partial_beam_length;\n            } else {\n              current_beam.end = current_beam.start + partial_beam_length;\n            }\n          } else if (!next_note_gets_beam) {\n            // The next note doesn't get a beam. Draw a partial.\n            if ((previous_should_break || i === 0) && next_note) {\n              // This is the first note (but not the last one), or it is\n              //  following a secondary break. Draw a partial to the right.\n              current_beam.end = current_beam.start + partial_beam_length;\n            } else {\n              // By default, draw a partial to the left.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          } else if (should_break) {\n            // This note should have a secondary break after it. Even though\n            //  we just started a beam, it needs to end immediately.\n            current_beam.end = current_beam.start - partial_beam_length;\n            beam_started = false;\n          }\n          beam_lines.push(current_beam);\n        }\n      } else {\n        // The current note does not get a beam.\n        beam_started = false;\n      }\n\n      // Store the secondary break flag to inform the partial beam logic in\n      //  the next iteration of the loop.\n      previous_should_break = should_break;\n    }\n\n    // Add a partial beam pointing left if this is the last note in the group\n    const last_beam = beam_lines[beam_lines.length - 1];\n    if (last_beam && last_beam.end === undefined) {\n      last_beam.end = last_beam.start - partial_beam_length;\n    }\n    return beam_lines;\n  }\n\n  /** Render the stems for each note. */\n  protected drawStems(ctx: RenderContext): void {\n    this.notes.forEach((note) => {\n      const stem = note.getStem();\n      if (stem) {\n        stem.setContext(ctx).draw();\n      }\n    }, this);\n  }\n\n  // Render the beam lines\n  protected drawBeamLines(ctx: RenderContext): void {\n    const valid_beam_durations = ['4', '8', '16', '32', '64'];\n\n    const firstNote = this.notes[0];\n    let beamY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n    const beamThickness = this.render_options.beam_width * this.stem_direction;\n\n    // Draw the beams.\n    for (let i = 0; i < valid_beam_durations.length; ++i) {\n      const duration = valid_beam_durations[i];\n      const beamLines = this.getBeamLines(duration);\n\n      for (let j = 0; j < beamLines.length; ++j) {\n        const beam_line = beamLines[j];\n        const startBeamX = beam_line.start;\n\n        const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n        const lastBeamX = beam_line.end;\n        if (lastBeamX) {\n          const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n\n          ctx.beginPath();\n          ctx.moveTo(startBeamX, startBeamY);\n          ctx.lineTo(startBeamX, startBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n          ctx.lineTo(lastBeamX + 1, lastBeamY);\n          ctx.closePath();\n          ctx.fill();\n        } else {\n          throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n        }\n      }\n\n      beamY += beamThickness * 1.5;\n    }\n  }\n\n  /** Pre-format the beam. */\n  preFormat(): this {\n    return this;\n  }\n\n  /**\n   * Post-format the beam. This can only be called after\n   * the notes in the beam have both `x` and `y` values. ie: they've\n   * been formatted and have staves.\n   */\n  postFormat(): void {\n    if (this.postFormatted) return;\n\n    // Calculate a smart slope if we're not forcing the beams to be flat.\n    if (isTabNote(this.notes[0]) || this.render_options.flat_beams) {\n      this.calculateFlatSlope();\n    } else {\n      this.calculateSlope();\n    }\n    this.applyStemExtensions();\n\n    this.postFormatted = true;\n  }\n\n  /** Render the beam to the canvas context */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    if (this.unbeamable) return;\n\n    if (!this.postFormatted) {\n      this.postFormat();\n    }\n\n    this.drawStems(ctx);\n    this.applyStyle();\n    this.drawBeamLines(ctx);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { Element } from './element';\nimport { Note } from './note';\nimport { Stave } from './stave';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport interface TieNotes {\n  first_note: Note | null;\n  last_note: Note | null;\n  first_indices?: number[];\n  last_indices?: number[];\n}\n\nexport class StaveTie extends Element {\n  static get CATEGORY(): string {\n    return 'StaveTie';\n  }\n\n  public render_options: {\n    cp2: number;\n    last_x_shift: number;\n    tie_spacing: number;\n    cp1: number;\n    first_x_shift: number;\n    text_shift_x: number;\n    y_shift: number;\n    font: FontInfo;\n  };\n\n  protected text?: string;\n\n  protected font: FontInfo;\n\n  // notes is initialized by the constructor via this.setNotes(notes).\n  protected notes!: TieNotes;\n\n  protected direction?: number;\n\n  /**\n   * @param notes is a struct that has:\n   *\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   *\n   * @param text\n   */\n  constructor(notes: TieNotes, text?: string) {\n    super();\n    this.setNotes(notes);\n    this.text = text;\n    this.render_options = {\n      cp1: 8, // Curve control point 1\n      cp2: 12, // Curve control point 2\n      text_shift_x: 0,\n      first_x_shift: 0,\n      last_x_shift: 0,\n      y_shift: 7,\n      tie_spacing: 0,\n      font: { family: 'Arial', size: 10, weight: '' },\n    };\n\n    this.font = this.render_options.font;\n  }\n\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n\n  setDirection(direction: number): this {\n    this.direction = direction;\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this tie to.\n   *\n   * @param {!Object} notes The notes to tie up.\n   */\n  setNotes(notes: TieNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) {\n      notes.first_indices = [0];\n    }\n    if (!notes.last_indices) {\n      notes.last_indices = [0];\n    }\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new RuntimeError('BadArguments', 'Tied notes must have same number of indices.');\n    }\n\n    this.notes = notes;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.notes.first_note || !this.notes.last_note;\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new RuntimeError('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    let cp1 = this.render_options.cp1;\n    let cp2 = this.render_options.cp2;\n\n    if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n      cp1 = 2;\n      cp2 = 8;\n    }\n\n    const first_x_shift = this.render_options.first_x_shift;\n    const last_x_shift = this.render_options.last_x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    // setNotes(...) verified that first_indices and last_indices are not undefined.\n    // As a result, we use the ! non-null assertion operator here.\n    // eslint-disable-next-line\n    const first_indices = this.notes.first_indices!;\n    // eslint-disable-next-line\n    const last_indices = this.notes.last_indices!;\n    for (let i = 0; i < first_indices.length; ++i) {\n      const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\n      const first_y_px = params.first_ys[first_indices[i]] + y_shift;\n      const last_y_px = params.last_ys[last_indices[i]] + y_shift;\n\n      if (isNaN(first_y_px) || isNaN(last_y_px)) {\n        throw new RuntimeError('BadArguments', 'Bad indices for tie rendering.');\n      }\n\n      const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\n      const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\n\n      ctx.beginPath();\n      ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n      ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n      ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }\n\n  renderText(first_x_px: number, last_x_px: number): void {\n    if (!this.text) return;\n    const ctx = this.checkContext();\n    let center_x = (first_x_px + last_x_px) / 2;\n    center_x -= ctx.measureText(this.text).width / 2;\n    const stave = this.notes.first_note?.checkStave() ?? this.notes.last_note?.checkStave();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText(this.text, center_x + this.render_options.text_shift_x, (stave as Stave).getYForTopText() - 1);\n    ctx.restore();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.notes.first_note;\n    const last_note = this.notes.last_note;\n\n    let first_x_px;\n    let last_x_px;\n    let first_ys;\n    let last_ys;\n    let stem_direction = 0;\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      stem_direction = first_note.getStemDirection();\n      first_ys = first_note.getYs();\n    } else {\n      const stave = (last_note as Note).checkStave();\n      first_x_px = stave.getTieStartX();\n      first_ys = (last_note as Note).getYs();\n      this.notes.first_indices = this.notes.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      stem_direction = last_note.getStemDirection();\n      last_ys = last_note.getYs();\n    } else {\n      const stave = (first_note as Note).checkStave();\n      last_x_px = stave.getTieEndX();\n      last_ys = (first_note as Note).getYs();\n      this.notes.last_indices = this.notes.first_indices;\n    }\n\n    if (this.direction) {\n      stem_direction = this.direction;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: stem_direction,\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n","// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { StaveTie, TieNotes } from './stavetie';\n\nexport class TabTie extends StaveTie {\n  static get CATEGORY(): string {\n    return 'TabTie';\n  }\n\n  static createHammeron(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'H');\n  }\n\n  static createPulloff(notes: TieNotes): TabTie {\n    return new TabTie(notes, 'P');\n  }\n\n  /**\n   * @param notes is a struct that has:\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   *\n   * @param text\n   */\n  constructor(notes: TieNotes, text?: string) {\n    super(notes, text);\n\n    this.render_options.cp1 = 9;\n    this.render_options.cp2 = 11;\n    this.render_options.y_shift = 3;\n\n    this.direction = -1; // Tab tie's are always face up.\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\n\nimport { isStaveNote } from 'typeguard';\n\nimport { Beam } from './beam';\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { StaveTie } from './stavetie';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { TabTie } from './tabtie';\nimport { log } from './util';\nimport { Voice } from './voice';\n\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any) {\n  if (GraceNoteGroup.DEBUG) log('Vex.Flow.GraceNoteGroup', args);\n}\n\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'GraceNoteGroup';\n  }\n\n  protected readonly voice: Voice;\n  protected readonly grace_notes: StemmableNote[];\n  protected readonly show_slur?: boolean;\n\n  protected preFormatted: boolean = false;\n  protected formatter: Formatter;\n  public render_options: { slur_y_shift: number };\n  protected slur?: StaveTie | TabTie;\n  protected beams: Beam[];\n\n  /** Arranges groups inside a `ModifierContext`. */\n  static format(gracenote_groups: GraceNoteGroup[], state: ModifierContextState): boolean {\n    const group_spacing_stave = 4;\n    const group_spacing_tab = 0;\n\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\n    const group_list = [];\n    let prev_note = null;\n    let shiftL = 0;\n\n    for (let i = 0; i < gracenote_groups.length; ++i) {\n      const gracenote_group = gracenote_groups[i];\n      const note = gracenote_group.getNote();\n      const is_stavenote = isStaveNote(note);\n      const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n\n      if (is_stavenote && note !== prev_note) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prev_note = note;\n      }\n\n      group_list.push({ shift: shiftL, gracenote_group, spacing });\n    }\n\n    // If first note left shift in case it is displaced\n    let group_shift = group_list[0].shift;\n    let formatWidth;\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  }\n\n  //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n  constructor(grace_notes: StemmableNote[], show_slur?: boolean) {\n    super();\n\n    this.position = Modifier.Position.LEFT;\n    this.grace_notes = grace_notes;\n    this.width = 0;\n\n    this.show_slur = show_slur;\n    this.slur = undefined;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Tables.RESOLUTION,\n    }).setStrict(false);\n\n    this.render_options = {\n      slur_y_shift: 0,\n    };\n\n    this.beams = [];\n\n    this.voice.addTickables(this.grace_notes);\n\n    return this;\n  }\n\n  preFormat(): void {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  beamNotes(grace_notes?: StemmableNote[]): this {\n    grace_notes = grace_notes || this.grace_notes;\n    if (grace_notes.length > 1) {\n      const beam = new Beam(grace_notes);\n\n      beam.render_options.beam_width = 3;\n      beam.render_options.partial_beam_length = 4;\n\n      this.beams.push(beam);\n    }\n\n    return this;\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  getGraceNotes(): Note[] {\n    return this.grace_notes;\n  }\n\n  draw(): void {\n    const ctx: RenderContext = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    L('Drawing grace note group for:', note);\n\n    this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n\n    // Draw grace notes.\n    this.grace_notes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n    // Draw beams.\n    this.beams.forEach((beam) => beam.setContext(ctx).draw());\n\n    if (this.show_slur) {\n      // Create and draw slur.\n      const is_stavenote = isStaveNote(note);\n      const TieClass = is_stavenote ? StaveTie : TabTie;\n\n      this.slur = new TieClass({\n        last_note: this.grace_notes[0],\n        first_note: note,\n        first_indices: [0],\n        last_indices: [0],\n      });\n\n      this.slur.render_options.cp2 = 12;\n      this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n      this.slur.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\n\nimport { isDot } from 'typeguard';\n\nimport { Dot } from './dot';\nimport { Glyph, GlyphProps } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stave } from './stave';\nimport { StaveNoteStruct } from './stavenote';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { defined, RuntimeError } from './util';\n\nexport interface TabNotePosition {\n  // For example, on a six stringed instrument, `str` ranges from 1 to 6.\n  str: number;\n\n  // fret: 'X' indicates an unused/muted string.\n  // fret: 3 indicates the third fret.\n  fret: number | string;\n}\n\nexport interface TabNoteStruct extends StaveNoteStruct {\n  positions: TabNotePosition[];\n}\n\n// Gets the unused strings grouped together if consecutive.\n//\n// Parameters:\n// * num_lines - The number of lines\n// * strings_used - An array of numbers representing which strings have fret positions\nfunction getUnusedStringGroups(num_lines: number, strings_used: number[]) {\n  const stem_through = [];\n  let group = [];\n  for (let string = 1; string <= num_lines; string++) {\n    const is_used = strings_used.indexOf(string) > -1;\n\n    if (!is_used) {\n      group.push(string);\n    } else {\n      stem_through.push(group);\n      group = [];\n    }\n  }\n  if (group.length > 0) stem_through.push(group);\n\n  return stem_through;\n}\n\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stem_Y - The `y` coordinate the stem is located on\n// * unused_strings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stem_direction - The direction of the stem\nfunction getPartialStemLines(stem_y: number, unused_strings: number[][], stave: Stave, stem_direction: number) {\n  const up_stem = stem_direction !== 1;\n  const down_stem = stem_direction !== -1;\n\n  const line_spacing = stave.getSpacingBetweenLines();\n  const total_lines = stave.getNumLines();\n\n  const stem_lines: number[][] = [];\n\n  unused_strings.forEach((strings) => {\n    const containsLastString = strings.indexOf(total_lines) > -1;\n    const containsFirstString = strings.indexOf(1) > -1;\n\n    if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {\n      return;\n    }\n\n    // If there's only one string in the group, push a duplicate value.\n    // We do this because we need 2 strings to convert into upper/lower y\n    // values.\n    if (strings.length === 1) {\n      strings.push(strings[0]);\n    }\n\n    const line_ys: number[] = [];\n    // Iterate through each group string and store it's y position\n    strings.forEach((string, index, strings) => {\n      const isTopBound = string === 1;\n      const isBottomBound = string === total_lines;\n\n      // Get the y value for the appropriate staff line,\n      // we adjust for a 0 index array, since string numbers are index 1\n      let y = stave.getYForLine(string - 1);\n\n      // Unless the string is the first or last, add padding to each side\n      // of the line\n      if (index === 0 && !isTopBound) {\n        y -= line_spacing / 2 - 1;\n      } else if (index === strings.length - 1 && !isBottomBound) {\n        y += line_spacing / 2 - 1;\n      }\n\n      // Store the y value\n      line_ys.push(y);\n\n      // Store a subsequent y value connecting this group to the main\n      // stem above/below the stave if it's the top/bottom string\n      if (stem_direction === 1 && isTopBound) {\n        line_ys.push(stem_y - 2);\n      } else if (stem_direction === -1 && isBottomBound) {\n        line_ys.push(stem_y + 2);\n      }\n    });\n\n    // Add the sorted y values to the\n    stem_lines.push(line_ys.sort((a, b) => a - b));\n  });\n\n  return stem_lines;\n}\n\nexport class TabNote extends StemmableNote {\n  static get CATEGORY(): string {\n    return 'TabNote';\n  }\n\n  protected ghost: boolean;\n  protected glyphs: GlyphProps[] = [];\n  protected positions: TabNotePosition[];\n\n  // Initialize the TabNote with a `noteStruct` full of properties\n  // and whether to `draw_stem` when rendering the note\n  constructor(noteStruct: TabNoteStruct, draw_stem: boolean = false) {\n    super(noteStruct);\n\n    this.ghost = false; // Renders parenthesis around notes\n\n    // Note properties\n    // The fret positions in the note. An array of `{ str: X, fret: X }`\n    this.positions = noteStruct.positions || [];\n\n    // Render Options\n    this.render_options = {\n      ...this.render_options,\n      // font size for note heads and rests\n      glyph_font_scale: Tables.DEFAULT_TABLATURE_FONT_SCALE,\n      // Flag to draw a stem\n      draw_stem,\n      // Flag to draw dot modifiers\n      draw_dots: draw_stem,\n      // Flag to extend the main stem through the stave and fret positions\n      draw_stem_through_stave: false,\n      // vertical shift from stave line\n      y_shift: 0,\n      // normal glyph scale\n      scale: 1.0,\n      // default tablature font\n      font: '10pt Arial',\n    };\n\n    this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n    defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n\n    this.buildStem();\n\n    if (noteStruct.stem_direction) {\n      this.setStemDirection(noteStruct.stem_direction);\n    } else {\n      this.setStemDirection(Stem.UP);\n    }\n\n    // Renders parenthesis around notes\n    this.ghost = false;\n    this.updateWidth();\n  }\n\n  reset(): this {\n    if (this.stave) this.setStave(this.stave);\n    return this;\n  }\n\n  // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n  // Often used for indicating frets that are being bent to\n  setGhost(ghost: boolean): this {\n    this.ghost = ghost;\n    this.updateWidth();\n    return this;\n  }\n\n  // Determine if the note has a stem\n  hasStem(): boolean {\n    if (this.render_options.draw_stem) return true;\n    return false;\n  }\n\n  // Get the default stem extension for the note\n  getStemExtension(): number {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Add a dot to the note\n  addDot(): this {\n    const dot = new Dot();\n    this.dots += 1;\n    return this.addModifier(dot, 0);\n  }\n\n  // Calculate and store the width of the note\n  updateWidth(): void {\n    this.glyphs = [];\n    this.width = 0;\n    for (let i = 0; i < this.positions.length; ++i) {\n      let fret = this.positions[i].fret;\n      if (this.ghost) fret = '(' + fret + ')';\n      const glyph = Tables.tabToGlyph(fret.toString(), this.render_options.scale);\n      this.glyphs.push(glyph as GlyphProps);\n      this.width = Math.max(glyph.getWidth(), this.width);\n    }\n    // For some reason we associate a notehead glyph with a TabNote, and this\n    // glyph is used for certain width calculations. Of course, this is totally\n    // incorrect since a notehead is a poor approximation for the dimensions of\n    // a fret number which can have multiple digits. As a result, we must\n    // overwrite getWidth() to return the correct width\n    this.glyph.getWidth = () => this.width;\n  }\n\n  // Set the `stave` to the note\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    const ctx = stave.getContext();\n    this.setContext(ctx);\n\n    // Calculate the fret number width based on font used\n    if (ctx) {\n      this.width = 0;\n      for (let i = 0; i < this.glyphs.length; ++i) {\n        const glyph = this.glyphs[i];\n        const text = '' + glyph.text;\n        if (text.toUpperCase() !== 'X') {\n          ctx.save();\n          ctx.setRawFont(this.render_options.font);\n          glyph.width = ctx.measureText(text).width;\n          ctx.restore();\n          glyph.getWidth = () => glyph.width;\n        }\n        this.width = Math.max(glyph.getWidth(), this.width);\n      }\n      this.glyph.getWidth = () => this.width;\n    }\n\n    // we subtract 1 from `line` because getYForLine expects a 0-based index,\n    // while the position.str is a 1-based index\n    const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      this.stem.setYBounds(this.getStemY(), this.getStemY());\n    }\n\n    return this;\n  }\n\n  // Get the fret positions for the note\n  getPositions(): TabNotePosition[] {\n    return this.positions;\n  }\n\n  // Get the default `x` and `y` coordinates for a modifier at a specific\n  // `position` at a fret position `index`\n  getModifierStartXY(position: number, index: number): { x: number; y: number } {\n    if (!this.preFormatted) {\n      throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    let x = 0;\n    if (position === Modifier.Position.LEFT) {\n      x = -1 * 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.RIGHT) {\n      x = this.width + 2; // FIXME: modifier padding, move to font file\n    } else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n      const note_glyph_width = this.glyph.getWidth();\n      x = note_glyph_width / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Get the default line for rest\n  getLineForRest(): number {\n    return Number(this.positions[0].str);\n  }\n\n  // Pre-render formatting\n  preFormat(): void {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n    // width is already set during init()\n    this.setPreFormatted(true);\n  }\n\n  // Get the x position for the stem\n  getStemX(): number {\n    return this.getCenterGlyphX();\n  }\n\n  // Get the y position for the stem\n  getStemY(): number {\n    const num_lines = this.checkStave().getNumLines();\n\n    // The decimal staff line amounts provide optimal spacing between the\n    // fret number and the stem\n    const stemUpLine = -0.5;\n    const stemDownLine = num_lines - 0.5;\n    const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n\n    return this.checkStave().getYForLine(stemStartLine);\n  }\n\n  // Get the stem extents for the tabnote\n  getStemExtents(): Record<string, number> {\n    return this.checkStem().getExtents();\n  }\n\n  // Draw the fal onto the context\n  drawFlag(): void {\n    const {\n      beam,\n      glyph,\n      stem_direction,\n      render_options: { draw_stem, glyph_font_scale },\n    } = this;\n    const context = this.checkContext();\n\n    const shouldDrawFlag = beam == undefined && draw_stem;\n\n    // Now it's the flag's turn.\n    if (glyph.flag && shouldDrawFlag) {\n      const flag_x = this.getStemX() + 1;\n      const flag_y = this.getStemY() - this.checkStem().getHeight();\n\n      const flag_code =\n        stem_direction === Stem.DOWN\n          ? glyph.code_flag_downstem // Down stems have flags on the left.\n          : glyph.code_flag_upstem;\n\n      // Draw the Flag\n      Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code, { category: 'flag.tabStem' });\n    }\n  }\n\n  // Render the modifiers onto the context.\n  drawModifiers(): void {\n    this.modifiers.forEach((modifier) => {\n      // Only draw the dots if enabled.\n      if (isDot(modifier) && !this.render_options.draw_dots) {\n        return;\n      }\n\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    });\n  }\n\n  // Render the stem extension through the fret positions\n  drawStemThrough(): void {\n    const stem_x = this.getStemX();\n    const stem_y = this.getStemY();\n    const ctx = this.checkContext();\n\n    const stem_through = this.render_options.draw_stem_through_stave;\n    const draw_stem = this.render_options.draw_stem;\n    if (draw_stem && stem_through) {\n      const total_lines = this.checkStave().getNumLines();\n      const strings_used = this.positions.map((position) => Number(position.str));\n\n      const unused_strings = getUnusedStringGroups(total_lines, strings_used);\n      const stem_lines = getPartialStemLines(stem_y, unused_strings, this.checkStave(), this.getStemDirection());\n\n      ctx.save();\n      ctx.setLineWidth(Stem.WIDTH);\n      stem_lines.forEach((bounds) => {\n        if (bounds.length === 0) return;\n\n        ctx.beginPath();\n        ctx.moveTo(stem_x, bounds[0]);\n        ctx.lineTo(stem_x, bounds[bounds.length - 1]);\n        ctx.stroke();\n        ctx.closePath();\n      });\n      ctx.restore();\n    }\n  }\n\n  // Render the fret positions onto the context\n  drawPositions(): void {\n    const ctx = this.checkContext();\n    const x = this.getAbsoluteX();\n    const ys = this.ys;\n    for (let i = 0; i < this.positions.length; ++i) {\n      const y = ys[i] + this.render_options.y_shift;\n      const glyph = this.glyphs[i];\n\n      // Center the fret text beneath the notation note head\n      const note_glyph_width = this.glyph.getWidth();\n      const tab_x = x + note_glyph_width / 2 - glyph.getWidth() / 2;\n\n      // FIXME: Magic numbers.\n      ctx.clearRect(tab_x - 2, y - 3, glyph.getWidth() + 4, 6);\n\n      if (glyph.code) {\n        Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyph.code);\n      } else {\n        ctx.save();\n        ctx.setRawFont(this.render_options.font);\n        const text = glyph.text.toString();\n        ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\n        ctx.restore();\n      }\n    }\n  }\n\n  // The main rendering function for the entire note.\n  draw(): void {\n    const ctx = this.checkContext();\n\n    if (this.ys.length === 0) {\n      throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    this.setRendered();\n    const render_stem = this.beam == undefined && this.render_options.draw_stem;\n\n    ctx.openGroup('tabnote', undefined, { pointerBBox: true });\n    this.drawPositions();\n    this.drawStemThrough();\n\n    if (this.stem && render_stem) {\n      const stem_x = this.getStemX();\n      this.stem.setNoteHeadXBounds(stem_x, stem_x);\n      ctx.openGroup('stem', undefined, { pointerBBox: true });\n      this.stem.setContext(ctx).draw();\n      ctx.closeGroup();\n    }\n\n    this.drawFlag();\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Ron B. Yeh\n// MIT License\n\nimport { Dot } from 'dot';\nimport { GraceNote } from 'gracenote';\nimport { GraceNoteGroup } from 'gracenotegroup';\nimport { Barline } from 'stavebarline';\n\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { StemmableNote } from './stemmablenote';\nimport { TabNote } from './tabnote';\n\n// Helper functions for checking an object's type, via `instanceof` and `obj.constructor.CATEGORY`.\nexport const isNote = (obj: unknown): obj is Note => isCategory(obj, Note);\nexport const isStemmableNote = (obj: unknown): obj is StemmableNote => isCategory(obj, StemmableNote);\nexport const isStaveNote = (obj: unknown): obj is StaveNote => isCategory(obj, StaveNote);\nexport const isTabNote = (obj: unknown): obj is TabNote => isCategory(obj, TabNote);\nexport const isGraceNote = (obj: unknown): obj is GraceNote => isCategory(obj, GraceNote);\nexport const isGraceNoteGroup = (obj: unknown): obj is GraceNoteGroup => isCategory(obj, GraceNoteGroup);\nexport const isDot = (obj: unknown): obj is Dot => isCategory(obj, Dot);\nexport const isBarline = (obj: unknown): obj is Barline => isCategory(obj, Barline);\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/ban-types */\n\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object is an instance of the provided `cls`.\n * @param cls a JavaScript class, such as `StaveNote`. `cls` is a constructor function, and it has a `prototype` property, and\n *            optionally a `CATEGORY` property (used in VexFlow for flexible type checking).\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` is an instance of `ClassName`, or has a static `CATEGORY` property that matches `ClassName.CATEGORY`.\n */\nexport function isCategory<T>(\n  obj: any,\n  cls: Function & { prototype: T; CATEGORY?: string },\n  checkAncestors: boolean = true\n): obj is T {\n  // obj is NOT an instance of cls if it is: undefined, a number, a primitive string, or null.\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n  let constructorFcn = obj.constructor;\n  if (obj instanceof cls || constructorFcn === cls) {\n    return true;\n  }\n\n  // If instanceof fails, fall back to checking if the object's static .CATEGORY matches the class's .CATEGORY property.\n  const categoryToMatch = cls.CATEGORY;\n  if (categoryToMatch === undefined) {\n    return false;\n  }\n\n  if (checkAncestors) {\n    // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n    while (obj !== null) {\n      constructorFcn = obj.constructor;\n      if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === categoryToMatch) {\n        return true;\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n    return false;\n  } else {\n    // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n    return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === categoryToMatch;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\n\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { ModifierContextState } from './modifiercontext';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { isCategory, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\nimport { defined, log } from './util';\nimport { Voice } from './voice';\n\ntype Line = {\n  column: number;\n  line: number;\n  flatLine: boolean;\n  dblSharpLine: boolean;\n  numAcc: number;\n  width: number;\n};\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Accidental.DEBUG) log('Vex.Flow.Accidental', args);\n}\n\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\n\nexport class Accidental extends Modifier {\n  /** Accidental code provided to the constructor. */\n  readonly type: string;\n  /** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\n  static DEBUG: boolean;\n  protected accidental: {\n    code: string;\n    parenRightPaddingAdjustment: number;\n  };\n  public render_options: {\n    parenLeftPadding: number;\n    stroke_px: number;\n    font_scale: number;\n    parenRightPadding: number;\n  };\n  protected cautionary: boolean;\n  // initialised in reset which is called by the constructor\n  protected glyph!: Glyph;\n  protected parenRight?: Glyph;\n  protected parenLeft?: Glyph;\n\n  /** Accidentals category string. */\n  static get CATEGORY(): string {\n    return 'Accidental';\n  }\n\n  /** Arrange accidentals inside a ModifierContext. */\n  static format(accidentals: Accidental[], state: ModifierContextState): void {\n    type AccidentalListItem = {\n      y?: number;\n      line: number;\n      shift: number;\n      acc: Accidental;\n      lineSpace?: number;\n    };\n\n    const musicFont = Tables.DEFAULT_FONT_STACK[0];\n    const noteheadAccidentalPadding = musicFont.lookupMetric('accidental.noteheadAccidentalPadding');\n    const leftShift = state.left_shift + noteheadAccidentalPadding;\n    const accidentalSpacing = musicFont.lookupMetric('accidental.accidentalSpacing');\n    const additionalPadding = musicFont.lookupMetric('accidental.leftPadding'); // padding to the left of all accidentals\n\n    // If there are no accidentals, we needn't format their positions\n    if (!accidentals || accidentals.length === 0) return;\n\n    const accList: AccidentalListItem[] = [];\n    let prevNote = undefined;\n    let shiftL = 0;\n\n    // First determine the accidentals' Y positions from the note.keys\n    for (let i = 0; i < accidentals.length; ++i) {\n      const acc = accidentals[i];\n      const note = acc.getNote();\n      const stave = note.getStave();\n      const index = acc.checkIndex();\n      const props = note.getKeyProps()[index];\n      if (note !== prevNote) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prevNote = note;\n      }\n      if (stave) {\n        const lineSpace = stave.getSpacingBetweenLines();\n        const y = stave.getYForLine(props.line);\n        const accLine = Math.round((y / lineSpace) * 2) / 2;\n        accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n      } else {\n        accList.push({ line: props.line, shift: shiftL, acc });\n      }\n    }\n\n    // Sort accidentals by line number.\n    accList.sort((a, b) => b.line - a.line);\n\n    // FIXME: Confusing name. Each object in this array has a property called `line`.\n    // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n    const lineList: Line[] = [];\n\n    // amount by which all accidentals must be shifted right or left for\n    // stem flipping, notehead shifting concerns.\n    let accShift = 0;\n    let previousLine = undefined;\n\n    // Create an array of unique line numbers (lineList) from accList\n    for (let i = 0; i < accList.length; i++) {\n      const acc = accList[i];\n\n      // if this is the first line, or a new line, add a lineList\n      if (previousLine === undefined || previousLine !== acc.line) {\n        lineList.push({\n          line: acc.line,\n          flatLine: true,\n          dblSharpLine: true,\n          numAcc: 0,\n          width: 0,\n          column: 0,\n        });\n      }\n      // if this accidental is not a flat, the accidental needs 3.0 lines lower\n      // clearance instead of 2.5 lines for b or bb.\n      // FIXME: Naming could use work. acc.acc is very awkward\n      if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n        lineList[lineList.length - 1].flatLine = false;\n      }\n\n      // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n      if (acc.acc.type !== '##') {\n        lineList[lineList.length - 1].dblSharpLine = false;\n      }\n\n      // Track how many accidentals are on this line:\n      lineList[lineList.length - 1].numAcc++;\n\n      // Track the total x_offset needed for this line which will be needed\n      // for formatting lines w/ multiple accidentals:\n\n      // width = accidental width + universal spacing between accidentals\n      lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n\n      // if this accShift is larger, use it to keep first column accidentals in the same line\n      accShift = acc.shift > accShift ? acc.shift : accShift;\n\n      previousLine = acc.line;\n    }\n\n    // ### Place Accidentals in Columns\n    //\n    // Default to a classic triangular layout (middle accidental farthest left),\n    // but follow exceptions as outlined in G. Read's _Music Notation_ and\n    // Elaine Gould's _Behind Bars_.\n    //\n    // Additionally, this implements different vertical collision rules for\n    // flats (only need 2.5 lines clearance below) and double sharps (only\n    // need 2.5 lines of clearance above or below).\n    //\n    // Classic layouts and exception patterns are found in the 'tables.js'\n    // in 'Vex.Flow.accidentalColumnsTable'\n    //\n    // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n    // using as few columns as possible for the verticle structure.\n    //\n    // TODO (?): Allow column to be specified for an accidental at run-time?\n\n    let totalColumns = 0;\n\n    // establish the boundaries for a group of notes with clashing accidentals:\n    for (let i = 0; i < lineList.length; i++) {\n      let noFurtherConflicts = false;\n      const groupStart = i;\n      let groupEnd = i;\n\n      while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n        // if this note conflicts with the next:\n        if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n          // include the next note in the group:\n          groupEnd++;\n        } else {\n          noFurtherConflicts = true;\n        }\n      }\n\n      // Gets an a line from the `lineList`, relative to the current group\n      const getGroupLine = (index: number) => lineList[groupStart + index];\n      const getGroupLines = (indexes: number[]) => indexes.map(getGroupLine);\n      const lineDifference = (indexA: number, indexB: number) => {\n        const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n        return a - b;\n      };\n\n      const notColliding = (...indexPairs: number[][]) =>\n        indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));\n\n      // Set columns for the lines in this group:\n      const groupLength = groupEnd - groupStart + 1;\n\n      // Set the accidental column for each line of the group\n      let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n\n      switch (groupLength) {\n        case 3:\n          if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n            endCase = 'second_on_bottom';\n          }\n          break;\n        case 4:\n          if (notColliding([0, 2], [1, 3])) {\n            endCase = 'spaced_out_tetrachord';\n          }\n          break;\n        case 5:\n          if (endCase === 'b' && notColliding([1, 3])) {\n            endCase = 'spaced_out_pentachord';\n            if (notColliding([0, 2], [2, 4])) {\n              endCase = 'very_spaced_out_pentachord';\n            }\n          }\n          break;\n        case 6:\n          if (notColliding([0, 3], [1, 4], [2, 5])) {\n            endCase = 'spaced_out_hexachord';\n          }\n          if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n            endCase = 'very_spaced_out_hexachord';\n          }\n          break;\n        default:\n          break;\n      }\n\n      let groupMember;\n      let column;\n      // If the group contains more than seven members, use ascending parallel lines\n      // of accidentals, using as few columns as possible while avoiding collisions.\n      if (groupLength >= 7) {\n        // First, determine how many columns to use:\n        let patternLength = 2;\n        let collisionDetected = true;\n        while (collisionDetected === true) {\n          collisionDetected = false;\n          for (let line = 0; line + patternLength < lineList.length; line++) {\n            if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n              collisionDetected = true;\n              patternLength++;\n              break;\n            }\n          }\n        }\n        // Then, assign a column to each line of accidentals\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = ((groupMember - i) % patternLength) + 1;\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n\n        // Otherwise, if the group contains fewer than seven members, use the layouts from\n        // the accidentalsColumnsTable housed in tables.js.\n      } else {\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n          lineList[groupMember].column = column;\n          totalColumns = totalColumns > column ? totalColumns : column;\n        }\n      }\n\n      // Increment i to the last note that was set, so that if a lower set of notes\n      // does not conflict at all with this group, it can have its own classic shape.\n      i = groupEnd;\n    }\n\n    // ### Convert Columns to x_offsets\n    //\n    // This keeps columns aligned, even if they have different accidentals within them\n    // which sometimes results in a larger x_offset than is an accidental might need\n    // to preserve the symmetry of the accidental shape.\n    //\n    // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n    // music with complex chord clusters.\n    //\n    // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n    // parallel columns.\n\n    // track each column's max width, which will be used as initial shift of later columns:\n    const columnWidths: number[] = [];\n    const columnXOffsets: number[] = [];\n    for (let i = 0; i <= totalColumns; i++) {\n      columnWidths[i] = 0;\n      columnXOffsets[i] = 0;\n    }\n\n    columnWidths[0] = accShift + leftShift;\n    columnXOffsets[0] = accShift + leftShift;\n\n    // Fill columnWidths with widest needed x-space;\n    // this is what keeps the columns parallel.\n    lineList.forEach((line) => {\n      if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;\n    });\n\n    for (let i = 1; i < columnWidths.length; i++) {\n      // this column's offset = this column's width + previous column's offset\n      columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n    }\n\n    const totalShift = columnXOffsets[columnXOffsets.length - 1];\n    // Set the xShift for each accidental according to column offsets:\n    let accCount = 0;\n    lineList.forEach((line) => {\n      let lineWidth = 0;\n      const lastAccOnLine = accCount + line.numAcc;\n      // handle all of the accidentals on a given line:\n      for (accCount; accCount < lastAccOnLine; accCount++) {\n        const xShift = columnXOffsets[line.column - 1] + lineWidth;\n        accList[accCount].acc.setXShift(xShift);\n        // keep track of the width of accidentals we've added so far, so that when\n        // we loop, we add space for them.\n        lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n        L('Line, accCount, shift: ', line.line, accCount, xShift);\n      }\n    });\n\n    // update the overall layout with the full width of the accidental shapes:\n    state.left_shift += totalShift + additionalPadding;\n  }\n\n  /** Helper function to determine whether two lines of accidentals collide vertically */\n  static checkCollision(line1: Line, line2: Line): boolean {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) {\n      // then line 2 is on top\n      clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n      if (line1.dblSharpLine) clearance -= 0.5;\n    } else {\n      // line 1 is on top\n      clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n      if (line2.dblSharpLine) clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n  }\n\n  /**\n   * Use this method to automatically apply accidentals to a set of `voices`.\n   * The accidentals will be remembered between all the voices provided.\n   * Optionally, you can also provide an initial `keySignature`.\n   */\n  static applyAccidentals(voices: Voice[], keySignature: string): void {\n    const tickPositions: number[] = [];\n    const tickNoteMap: Record<number, Tickable[]> = {};\n\n    // Sort the tickables in each voice by their tick position in the voice.\n    voices.forEach((voice) => {\n      const tickPosition = new Fraction(0, 1);\n      const tickable = voice.getTickables();\n      tickable.forEach((t) => {\n        if (t.shouldIgnoreTicks()) return;\n\n        const notesAtPosition = tickNoteMap[tickPosition.value()];\n\n        if (!notesAtPosition) {\n          tickPositions.push(tickPosition.value());\n          tickNoteMap[tickPosition.value()] = [t];\n        } else {\n          notesAtPosition.push(t);\n        }\n\n        tickPosition.add(t.getTicks());\n      });\n    });\n\n    const music = new Music();\n\n    // Default key signature is C major.\n    if (!keySignature) keySignature = 'C';\n\n    // Get the scale map, which represents the current state of each pitch.\n    const scaleMapKey = music.createScaleMap(keySignature);\n    const scaleMap: Record<string, string> = {};\n\n    tickPositions.forEach((tickPos: number) => {\n      const tickables = tickNoteMap[tickPos];\n\n      // Array to store all pitches that modified accidental states\n      // at this tick position\n      const modifiedPitches: string[] = [];\n\n      const processNote = (t: Tickable) => {\n        // Only StaveNote implements .addAccidental(), which is used below.\n        if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n          return;\n        }\n\n        // Go through each key and determine if an accidental should be applied.\n        const staveNote = t;\n        staveNote.keys.forEach((keyString: string, keyIndex: number) => {\n          const key = music.getNoteParts(keyString.split('/')[0]);\n          const octave = keyString.split('/')[1];\n\n          // Force a natural for every key without an accidental\n          const accidentalString = key.accidental || 'n';\n          const pitch = key.root + accidentalString;\n\n          // Determine if the current pitch has the same accidental\n          // as the scale state\n          if (!scaleMap[key.root + octave]) scaleMap[key.root + octave] = scaleMapKey[key.root];\n          const sameAccidental = scaleMap[key.root + octave] === pitch;\n\n          // Determine if an identical pitch in the chord already\n          // modified the accidental state\n          const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n\n          // Remove accidentals\n          staveNote.getModifiers().forEach((modifier, index) => {\n            if (\n              isCategory(modifier, Accidental) &&\n              modifier.type == accidentalString &&\n              modifier.getIndex() == keyIndex\n            ) {\n              staveNote.getModifiers().splice(index, 1);\n            }\n          });\n\n          // Add the accidental to the StaveNote\n          if (!sameAccidental || (sameAccidental && previouslyModified)) {\n            // Modify the scale map so that the root pitch has an\n            // updated state\n            scaleMap[key.root + octave] = pitch;\n\n            // Create the accidental\n            const accidental = new Accidental(accidentalString);\n\n            // Attach the accidental to the StaveNote\n            staveNote.addAccidental(keyIndex, accidental);\n\n            // Add the pitch to list of pitches that modified accidentals\n            modifiedPitches.push(keyString);\n          }\n        });\n\n        // process grace notes\n        staveNote.getModifiers().forEach((modifier: Modifier) => {\n          if (isGraceNoteGroup(modifier)) {\n            modifier.getGraceNotes().forEach(processNote);\n          }\n        });\n      };\n\n      tickables.forEach(processNote);\n    });\n  }\n\n  /**\n   * Create accidental.\n   * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\n   * For example: `#`, `##`, `b`, `n`, etc.\n   */\n  constructor(type: string) {\n    super();\n\n    L('New accidental: ', type);\n\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      // Font size for glyphs\n      font_scale: 38,\n\n      // Length of stroke across heads above or below the stave.\n      stroke_px: 3,\n\n      // Padding between accidental and parentheses on each side\n      parenLeftPadding: 2,\n      parenRightPadding: 2,\n    };\n\n    this.accidental = Tables.accidentalCodes(this.type);\n    defined(this.accidental, 'ArgumentError', `Unknown accidental type: ${type}`);\n\n    // Cautionary accidentals have parentheses around them\n    this.cautionary = false;\n\n    this.reset();\n  }\n\n  protected reset(): void {\n    const fontScale = this.render_options.font_scale;\n    this.glyph = new Glyph(this.accidental.code, fontScale);\n    this.glyph.setOriginX(1.0);\n\n    if (this.cautionary) {\n      this.parenLeft = new Glyph(Tables.accidentalCodes('{').code, fontScale);\n      this.parenRight = new Glyph(Tables.accidentalCodes('}').code, fontScale);\n      this.parenLeft.setOriginX(1.0);\n      this.parenRight.setOriginX(1.0);\n    }\n  }\n\n  /** Get width in pixels. */\n  getWidth(): number {\n    if (this.cautionary) {\n      const parenLeft = defined(this.parenLeft);\n      const parenRight = defined(this.parenRight);\n      const parenWidth =\n        parenLeft.getMetrics().width +\n        parenRight.getMetrics().width +\n        this.render_options.parenLeftPadding +\n        this.render_options.parenRightPadding;\n      return this.glyph.getMetrics().width + parenWidth;\n    } else {\n      return this.glyph.getMetrics().width;\n    }\n  }\n\n  /** Attach this accidental to `note`, which must be a `StaveNote`. */\n  setNote(note: Note): this {\n    defined(note, 'ArgumentError', `Bad note value: ${note}`);\n\n    this.note = note;\n\n    // Accidentals attached to grace notes are rendered smaller.\n    if (isGraceNote(note)) {\n      this.render_options.font_scale = 25;\n      this.reset();\n    }\n    return this;\n  }\n\n  /** If called, draws parenthesis around accidental. */\n  setAsCautionary(): this {\n    this.cautionary = true;\n    this.render_options.font_scale = 28;\n    this.reset();\n    return this;\n  }\n\n  /** Render accidental onto canvas. */\n  draw(): void {\n    const {\n      type,\n      position,\n      index,\n      cautionary,\n      x_shift,\n      y_shift,\n      glyph,\n      render_options: { parenLeftPadding, parenRightPadding },\n    } = this;\n\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    // Figure out the start `x` and `y` coordinates for note and index.\n    const start = note.getModifierStartXY(position, index);\n    let accX = start.x + x_shift;\n    const accY = start.y + y_shift;\n    L('Rendering: ', type, accX, accY);\n\n    if (!cautionary) {\n      glyph.render(ctx, accX, accY);\n    } else {\n      const parenLeft = defined(this.parenLeft);\n      const parenRight = defined(this.parenRight);\n\n      // Render the accidental in parentheses.\n      parenRight.render(ctx, accX, accY);\n      accX -= parenRight.getMetrics().width;\n      accX -= parenRightPadding;\n      accX -= this.accidental.parenRightPaddingAdjustment;\n      glyph.render(ctx, accX, accY);\n      accX -= glyph.getMetrics().width;\n      accX -= parenLeftPadding;\n      parenLeft.render(ctx, accX, accY);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { log } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (BarNote.DEBUG) log('Vex.Flow.BarNote', args);\n}\n\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'BarNote';\n  }\n\n  protected metrics: { widths: Record<string, number> };\n  // Initialized by the constructor via this.setType(type)\n  protected type!: BarlineType;\n\n  constructor(type: string | BarlineType = BarlineType.SINGLE) {\n    super({ duration: 'b' });\n\n    this.metrics = {\n      widths: {},\n    };\n\n    const TYPE = BarlineType;\n    this.metrics.widths = {\n      [TYPE.SINGLE]: 8,\n      [TYPE.DOUBLE]: 12,\n      [TYPE.END]: 15,\n      [TYPE.REPEAT_BEGIN]: 14,\n      [TYPE.REPEAT_END]: 14,\n      [TYPE.REPEAT_BOTH]: 18,\n      [TYPE.NONE]: 0,\n    };\n\n    // Tell the formatter that bar notes have no duration.\n    this.ignore_ticks = true;\n    this.setType(type);\n  }\n\n  /** Get the type of bar note.*/\n  getType(): BarlineType {\n    return this.type;\n  }\n\n  /** Set the type of bar note. */\n  setType(type: string | BarlineType): this {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n\n    // Set width to width of relevant `Barline`.\n    this.setWidth(this.metrics.widths[this.type]);\n    return this;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  /** Overridden to ignore. */\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Render note to stave. */\n  draw(): void {\n    const ctx = this.checkContext();\n    L('Rendering bar line at: ', this.getAbsoluteX());\n    if (this.style) this.applyStyle(ctx);\n    const barline = new Barline(this.type);\n    barline.setX(this.getAbsoluteX());\n    barline.draw(this.checkStave());\n    if (this.style) this.restoreStyle(ctx);\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { ClefType } from './clef';\nimport { Glyph } from './glyph';\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\n\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n  static get CATEGORY(): string {\n    return 'ClefNote';\n  }\n\n  protected clef_obj: Clef;\n  protected type: string;\n  protected clef: ClefType;\n\n  constructor(type: string, size?: string, annotation?: string) {\n    super({ duration: 'b' });\n\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /** Set clef type, size and annotation. */\n  setType(type: string, size: string, annotation: string): this {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  /** Get associated clef. */\n  getClef(): ClefType {\n    return this.clef;\n  }\n\n  /** Set associated context. */\n  setContext(context: RenderContext): this {\n    super.setContext(context);\n    this.glyph.setContext(this.getContext());\n    return this;\n  }\n\n  /** Get bounding box. */\n  getBoundingBox(): BoundingBox | undefined {\n    return super.getBoundingBox();\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  /** Set preformatted. */\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Render clef note. */\n  draw(): void {\n    const stave = this.checkStave();\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.getContext());\n    }\n\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n\n    this.glyph.setStave(stave);\n    this.glyph.setYShift(stave.getYForLine(this.clef.line ?? 0) - stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x);\n\n    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n      if (!attachment.getContext()) {\n        attachment.setContext(this.getContext());\n      }\n      attachment.setStave(stave);\n      attachment.setYShift(stave.getYForLine(this.clef_obj.annotation.line) - stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\n\nimport { Note, NoteStruct } from './note';\nimport { RenderContext } from './rendercontext';\nimport { TickContext } from './tickcontext';\nimport { log } from './util';\n\nexport interface CrescendoParams {\n  reverse: boolean;\n  height: number;\n  y: number;\n  end_x: number;\n  begin_x: number;\n}\n\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Crescendo.DEBUG) log('Vex.Flow.Crescendo', args);\n}\n\n// Private helper to draw the hairpin\nfunction renderHairpin(ctx: RenderContext, params: CrescendoParams) {\n  const begin_x = params.begin_x;\n  const end_x = params.end_x;\n  const y = params.y;\n  const half_height = params.height / 2;\n\n  ctx.beginPath();\n\n  if (params.reverse) {\n    ctx.moveTo(begin_x, y - half_height);\n    ctx.lineTo(end_x, y);\n    ctx.lineTo(begin_x, y + half_height);\n  } else {\n    ctx.moveTo(end_x, y - half_height);\n    ctx.lineTo(begin_x, y);\n    ctx.lineTo(end_x, y + half_height);\n  }\n\n  ctx.stroke();\n  ctx.closePath();\n}\n\nexport class Crescendo extends Note {\n  static DEBUG: boolean;\n\n  /** Crescendo category string. */\n  static get CATEGORY(): string {\n    return 'Crescendo';\n  }\n\n  protected decrescendo: boolean;\n  protected height: number;\n  protected line: number;\n  protected options = {\n    // Extensions to the length of the crescendo on either side\n    extend_left: 0,\n    extend_right: 0,\n    // Vertical shift\n    y_shift: 0,\n  };\n\n  // Initialize the crescendo's properties\n  constructor(noteStruct: NoteStruct) {\n    super(noteStruct);\n\n    // Whether the object is a decrescendo\n    this.decrescendo = false;\n\n    // The staff line to be placed on\n    this.line = noteStruct.line || 0;\n\n    // The height at the open end of the cresc/decresc\n    this.height = 15;\n  }\n\n  // Set the line to center the element on\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Set the full height at the open end\n  setHeight(height: number): this {\n    this.height = height;\n    return this;\n  }\n\n  // Set whether the sign should be a descresendo by passing a bool\n  // to `decresc`\n  setDecrescendo(decresc: boolean): this {\n    this.decrescendo = decresc;\n    return this;\n  }\n\n  // Preformat the note\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Render the Crescendo object onto the canvas\n  draw(): void {\n    const ctx = this.checkContext();\n    const stave = this.checkStave();\n    this.setRendered();\n\n    const tick_context = this.getTickContext();\n    const next_context = TickContext.getNextContext(tick_context);\n\n    const begin_x = this.getAbsoluteX();\n    const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();\n    const y = stave.getYForLine(this.line + -3) + 1;\n\n    L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\n\n    renderHairpin(ctx, {\n      begin_x: begin_x - this.options.extend_left,\n      end_x: end_x + this.options.extend_right,\n      y: y + this.options.y_shift,\n      height: this.height,\n      reverse: this.decrescendo,\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\n\nimport { Element } from './element';\nimport { Note } from './note';\nimport { RuntimeError } from './util';\n\nexport interface CurveOptions {\n  /** Two control points for the bezier curves. */\n  cps?: { x: number; y: number }[];\n  thickness?: number;\n  x_shift?: number;\n  y_shift?: number;\n  position?: string | number;\n  position_end?: string | number;\n  invert?: boolean;\n}\n\nexport enum CurvePosition {\n  NEAR_HEAD = 1,\n  NEAR_TOP = 2,\n}\n\nexport class Curve extends Element {\n  static get CATEGORY(): string {\n    return 'Curve';\n  }\n\n  public render_options: Required<CurveOptions>;\n  protected from: Note;\n  protected to: Note;\n\n  static get Position(): typeof CurvePosition {\n    return CurvePosition;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      nearHead: CurvePosition.NEAR_HEAD,\n      nearTop: CurvePosition.NEAR_TOP,\n    };\n  }\n\n  // from: Start note\n  // to: End note\n  // options:\n  //    cps: List of control points\n  //    x_shift: pixels to shift\n  //    y_shift: pixels to shift\n  constructor(from: Note, to: Note, options: CurveOptions) {\n    super();\n\n    this.render_options = {\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      position: CurvePosition.NEAR_HEAD,\n      position_end: CurvePosition.NEAR_HEAD,\n      invert: false,\n      cps: [\n        { x: 0, y: 10 },\n        { x: 0, y: 10 },\n      ],\n      ...options,\n    };\n\n    this.from = from;\n    this.to = to;\n  }\n\n  setNotes(from: Note, to: Note): this {\n    if (!from && !to) {\n      throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n    }\n\n    this.from = from;\n    this.to = to;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial(): boolean {\n    return !this.from || !this.to;\n  }\n\n  renderCurve(params: { last_y: number; last_x: number; first_y: number; first_x: number; direction: number }): void {\n    const ctx = this.checkContext();\n\n    const x_shift = this.render_options.x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    const first_x = params.first_x + x_shift;\n    const first_y = params.first_y + y_shift;\n    const last_x = params.last_x - x_shift;\n    const last_y = params.last_y + y_shift;\n    const thickness = this.render_options.thickness;\n\n    const cps = this.render_options.cps;\n    const { x: cp0x, y: cp0y } = cps[0];\n    const { x: cp1x, y: cp1y } = cps[1];\n\n    const cp_spacing = (last_x - first_x) / (cps.length + 2);\n\n    ctx.beginPath();\n    ctx.moveTo(first_x, first_y);\n    ctx.bezierCurveTo(\n      first_x + cp_spacing + cp0x,\n      first_y + cp0y * params.direction,\n      last_x - cp_spacing + cp1x,\n      last_y + cp1y * params.direction,\n      last_x,\n      last_y\n    );\n    ctx.bezierCurveTo(\n      last_x - cp_spacing + cp1x,\n      last_y + (cp1y + thickness) * params.direction,\n      first_x + cp_spacing + cp0x,\n      first_y + (cp0y + thickness) * params.direction,\n      first_x,\n      first_y\n    );\n    ctx.stroke();\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  draw(): boolean {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.from;\n    const last_note = this.to;\n    let first_x;\n    let last_x;\n    let first_y;\n    let last_y;\n    let stem_direction = 0;\n\n    let metric = 'baseY';\n    let end_metric = 'baseY';\n\n    function getPosition(position: string | number) {\n      return typeof position === 'string' ? Curve.PositionString[position] : position;\n    }\n    const position = getPosition(this.render_options.position);\n    const position_end = getPosition(this.render_options.position_end);\n\n    if (position === CurvePosition.NEAR_TOP) {\n      metric = 'topY';\n      end_metric = 'topY';\n    }\n\n    if (position_end === CurvePosition.NEAR_HEAD) {\n      end_metric = 'baseY';\n    } else if (position_end === CurvePosition.NEAR_TOP) {\n      end_metric = 'topY';\n    }\n\n    if (first_note) {\n      first_x = first_note.getTieRightX();\n      stem_direction = first_note.getStemDirection();\n      first_y = first_note.getStemExtents()[metric];\n    } else {\n      const stave = last_note.checkStave();\n      first_x = stave.getTieStartX();\n      first_y = last_note.getStemExtents()[metric];\n    }\n\n    if (last_note) {\n      last_x = last_note.getTieLeftX();\n      stem_direction = last_note.getStemDirection();\n      last_y = last_note.getStemExtents()[end_metric];\n    } else {\n      const stave = first_note.checkStave();\n      last_x = stave.getTieEndX();\n      last_y = first_note.getStemExtents()[end_metric];\n    }\n\n    this.renderCurve({\n      first_x,\n      last_x,\n      first_y,\n      last_y,\n      direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\n    });\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// A generic text parsing class for VexFlow.\n\nimport { log, RuntimeError } from './util';\n\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (Parser.DEBUG) log('Vex.Flow.Parser', args);\n}\n\nconst NO_ERROR_POS = -1;\n\nexport type Match = string | Match[] | null;\nexport type RuleFunction = () => Rule;\nexport type TriggerFunction = (state?: { matches: Match[] }) => void;\n\nexport interface Rule {\n  // Lexer Rules\n  token?: string; // The token property is a string that is compiled into a RegExp.\n  noSpace?: boolean;\n\n  // Parser Rules\n  expect?: RuleFunction[];\n  zeroOrMore?: boolean;\n  oneOrMore?: boolean;\n  maybe?: boolean;\n  or?: boolean;\n  run?: TriggerFunction;\n}\n\nexport interface Result {\n  success: boolean;\n\n  // Lexer Results\n  pos?: number;\n  incrementPos?: number;\n  matchedString?: string;\n\n  // Parser Results\n  matches?: Match[];\n  numMatches?: number;\n  results?: GroupedResults;\n  errorPos?: number; // Set to NO_ERROR if successful. N if there is an error in the string.\n}\n\n// Represents a mixed array containing Result and/or Result[].\n// The grouping is determined by the structure of the Grammar.\ntype GroupedResults = (Result | Result[])[];\n\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r: Result | Result[]): Match {\n  if ('matchedString' in r) return r.matchedString as string; // string\n  if ('results' in r) return flattenMatches(r.results as Result[]);\n  const results = r as Result[];\n  if (results.length === 1) return flattenMatches(results[0]);\n  if (results.length === 0) return null;\n  return results.map(flattenMatches); // nested array\n}\n\nexport interface Grammar {\n  begin(): RuleFunction;\n}\n\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n  static DEBUG: boolean = false;\n\n  protected grammar: Grammar;\n\n  protected line: string; // Use RegExp to extract tokens from this line.\n  protected pos: number;\n  protected errorPos: number;\n\n  // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n  // the EasyScore grammar in easyscore.ts.\n  constructor(grammar: Grammar) {\n    this.grammar = grammar;\n    this.line = '';\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Parse `line` using current grammar. Returns `{success: true}` if the\n  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n  // where `errorPos` is the location of the error in the string.\n  parse(line: string): Result {\n    this.line = line;\n    this.pos = 0;\n    this.errorPos = NO_ERROR_POS;\n    const result = this.expect(this.grammar.begin());\n    result.errorPos = this.errorPos;\n    return result;\n  }\n\n  matchFail(returnPos: number): void {\n    if (this.errorPos === NO_ERROR_POS) this.errorPos = this.pos;\n    this.pos = returnPos;\n  }\n\n  matchSuccess(): void {\n    this.errorPos = NO_ERROR_POS;\n  }\n\n  // Look for `token` in this.line[this.pos], and return success\n  // if one is found. `token` is specified as a regular expression.\n  matchToken(token: string, noSpace: boolean = false): Result {\n    const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n    const workingLine = this.line.slice(this.pos);\n    const result = workingLine.match(regexp);\n    if (result !== null) {\n      return {\n        success: true,\n        matchedString: result[2],\n        incrementPos: result[1].length,\n        pos: this.pos,\n      };\n    } else {\n      return { success: false, pos: this.pos };\n    }\n  }\n\n  // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n  // set, then return success even if the token is not found, but reset\n  // the position before exiting.\n  // TODO: expectOne(...) is never called with the `maybe` parameter.\n  expectOne(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n\n    let allMatches = true;\n    let oneMatch = false;\n    maybe = maybe === true || rule.maybe === true;\n\n    // Execute all sub rules in sequence.\n    if (rule.expect) {\n      for (const next of rule.expect) {\n        const localPos = this.pos;\n        const result = this.expect(next);\n\n        // If `rule.or` is set, then return success if any one\n        // of the subrules match, else all subrules must match.\n        if (result.success) {\n          results.push(result);\n          oneMatch = true;\n          if (rule.or) break;\n        } else {\n          allMatches = false;\n          if (!rule.or) {\n            this.pos = localPos;\n            break;\n          }\n        }\n      }\n    }\n\n    const gotOne = (rule.or && oneMatch) || allMatches;\n    const success = gotOne || maybe === true;\n    const numMatches = gotOne ? 1 : 0;\n    if (maybe && !gotOne) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n  // then a failed match is also a success (but the position is reset).\n  expectOneOrMore(rule: Rule, maybe: boolean = false): Result {\n    const results: GroupedResults = [];\n    const pos = this.pos;\n    let numMatches = 0;\n    let more = true;\n\n    do {\n      const result = this.expectOne(rule);\n      if (result.success && result.results) {\n        numMatches++;\n        results.push(result.results as Result[]);\n      } else {\n        more = false;\n      }\n    } while (more);\n\n    const success = numMatches > 0 || maybe === true;\n    if (maybe && !(numMatches > 0)) this.pos = pos;\n    if (success) {\n      this.matchSuccess();\n    } else {\n      this.matchFail(pos);\n    }\n    return { success, results, numMatches };\n  }\n\n  // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n  expectZeroOrMore(rule: Rule): Result {\n    return this.expectOneOrMore(rule, true);\n  }\n\n  // Execute the rule produced by the provided `rules` function. This\n  // offloads to one of the above matchers and consolidates the results. It is also\n  // responsible for executing any code triggered by the rule (in `rule.run`.)\n  expect(ruleFunc: RuleFunction): Result {\n    L('Evaluating rule function:', ruleFunc);\n    if (!ruleFunc) {\n      throw new RuntimeError('Invalid rule function');\n    }\n    let result: Result;\n\n    // Get rule from Grammar class.\n    // expect(...) handles both lexing & parsing:\n    // - lexer rules produce tokens.\n    // - parser rules produce expressions which may trigger code via the\n    //   { run: () => ... } trigger functions in easyscore.ts.\n    //   These functions build the VexFlow objects that are displayed on screen.\n    const rule: Rule = ruleFunc.bind(this.grammar)();\n    if (rule.token) {\n      // A lexer rule has a `token` property.\n      // Base case: parse the regex and throw an error if the\n      // line doesn't match.\n      result = this.matchToken(rule.token, rule.noSpace === true);\n      if (result.success) {\n        // Token match! Update position and throw away parsed portion\n        // of string.\n        this.pos += result.incrementPos as number;\n      }\n    } else if (rule.expect) {\n      // A parser rule has an `expect` property.\n      if (rule.oneOrMore) {\n        result = this.expectOneOrMore(rule);\n      } else if (rule.zeroOrMore) {\n        result = this.expectZeroOrMore(rule);\n      } else {\n        result = this.expectOne(rule);\n      }\n    } else {\n      L(rule);\n      throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n    }\n\n    // If there's a trigger attached to this rule, then run it.\n    // Make the matches accessible through `state.matches` in the\n    // `run: (state) => ...` trigger.\n    const matches: Match[] = [];\n    result.matches = matches;\n    if (result.results) {\n      result.results.forEach((r) => matches.push(flattenMatches(r)));\n    }\n    if (rule.run && result.success) {\n      rule.run({ matches });\n    }\n    return result;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Stem } from 'stem';\n\nimport { Accidental } from './accidental';\nimport { Articulation } from './articulation';\nimport { Factory } from './factory';\nimport { FretHandFinger } from './frethandfinger';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { Grammar, Match, Parser, Result, Rule, RuleFunction } from './parser';\nimport { RenderContext } from './rendercontext';\nimport { StaveNote } from './stavenote';\nimport { TupletOptions } from './tuplet';\nimport { defined, log, RuntimeError } from './util';\nimport { Voice } from './voice';\n\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]): void {\n  if (EasyScore.DEBUG) log('Vex.Flow.EasyScore', args);\n}\n\n// eslint-disable-next-line\ntype CommitHook = (obj: any, note: StaveNote, builder: Builder) => void;\n\nclass EasyScoreGrammar implements Grammar {\n  builder: Builder;\n\n  constructor(builder: Builder) {\n    this.builder = builder;\n  }\n\n  begin(): RuleFunction {\n    return this.LINE;\n  }\n\n  LINE(): Rule {\n    return {\n      expect: [this.PIECE, this.PIECES, this.EOL],\n    };\n  }\n  PIECE(): Rule {\n    return {\n      expect: [this.CHORDORNOTE, this.PARAMS],\n      run: () => this.builder.commitPiece(),\n    };\n  }\n  PIECES(): Rule {\n    return {\n      expect: [this.COMMA, this.PIECE],\n      zeroOrMore: true,\n    };\n  }\n  PARAMS(): Rule {\n    return {\n      expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n    };\n  }\n  CHORDORNOTE(): Rule {\n    return {\n      expect: [this.CHORD, this.SINGLENOTE],\n      or: true,\n    };\n  }\n  CHORD(): Rule {\n    return {\n      expect: [this.LPAREN, this.NOTES, this.RPAREN],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addChord(state!.matches[1] as Match[]),\n    };\n  }\n  NOTES(): Rule {\n    return {\n      expect: [this.NOTE],\n      oneOrMore: true,\n    };\n  }\n  NOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n    };\n  }\n  SINGLENOTE(): Rule {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n      run: (state) => {\n        // eslint-disable-next-line\n        const s = state!;\n        this.builder.addSingleNote(s.matches[0] as string, s.matches[1] as string, s.matches[2] as string);\n      },\n    };\n  }\n  ACCIDENTAL(): Rule {\n    return {\n      expect: [this.MICROTONES, this.ACCIDENTALS],\n      maybe: true,\n      or: true,\n    };\n  }\n  DOTS(): Rule {\n    return {\n      expect: [this.DOT],\n      zeroOrMore: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDots(state!.matches),\n    };\n  }\n  TYPE(): Rule {\n    return {\n      expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteType(state!.matches[2] as string),\n    };\n  }\n  DURATION(): Rule {\n    return {\n      expect: [this.SLASH, this.DURATIONS],\n      maybe: true,\n      // eslint-disable-next-line\n      run: (state) => this.builder.setNoteDuration(state!.matches[1] as string),\n    };\n  }\n  OPTS(): Rule {\n    return {\n      expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n      maybe: true,\n    };\n  }\n  KEYVALS(): Rule {\n    return {\n      expect: [this.COMMA, this.KEYVAL],\n      zeroOrMore: true,\n    };\n  }\n  KEYVAL(): Rule {\n    const unquote = (str: string) => str.slice(1, -1);\n\n    return {\n      expect: [this.KEY, this.EQUALS, this.VAL],\n      // eslint-disable-next-line\n      run: (state) => this.builder.addNoteOption(state!.matches[0] as string, unquote(state!.matches[2] as string)),\n    };\n  }\n  VAL(): Rule {\n    return {\n      expect: [this.SVAL, this.DVAL],\n      or: true,\n    };\n  }\n\n  KEY(): Rule {\n    return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n  }\n  DVAL(): Rule {\n    return { token: '[\"][^\"]*[\"]' };\n  }\n  SVAL(): Rule {\n    return { token: \"['][^']*[']\" };\n  }\n  NOTENAME(): Rule {\n    return { token: '[a-gA-G]' };\n  }\n  OCTAVE(): Rule {\n    return { token: '[0-9]+' };\n  }\n  ACCIDENTALS(): Rule {\n    return { token: 'bb|b|##|#|n' };\n  }\n  MICROTONES(): Rule {\n    return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n  }\n  DURATIONS(): Rule {\n    return { token: '[0-9whq]+' };\n  }\n  TYPES(): Rule {\n    return { token: '[rRsSxX]' };\n  }\n  LPAREN(): Rule {\n    return { token: '[(]' };\n  }\n  RPAREN(): Rule {\n    return { token: '[)]' };\n  }\n  COMMA(): Rule {\n    return { token: '[,]' };\n  }\n  DOT(): Rule {\n    return { token: '[.]' };\n  }\n  SLASH(): Rule {\n    return { token: '[/]' };\n  }\n  MAYBESLASH(): Rule {\n    return { token: '[/]?' };\n  }\n  EQUALS(): Rule {\n    return { token: '[=]' };\n  }\n  LBRACKET(): Rule {\n    return { token: '\\\\[' };\n  }\n  RBRACKET(): Rule {\n    return { token: '\\\\]' };\n  }\n  EOL(): Rule {\n    return { token: '$' };\n  }\n}\n\ninterface NotePiece {\n  key: string;\n  accid?: string | null;\n  octave?: string;\n}\n\nclass Piece {\n  chord: NotePiece[] = [];\n  duration: string;\n  dots: number = 0;\n  type?: string;\n  options: { [x: string]: string } = {};\n  constructor(duration: string) {\n    this.duration = duration;\n  }\n}\n\ninterface BuilderElements {\n  notes: StaveNote[];\n  accidentals: (Accidental | undefined)[][];\n}\n\n// Extending Record<string, any> allows arbitrary properties via Builder.reset() & EasyScore.parse().\n// eslint-disable-next-line\nexport interface BuilderOptions extends Record<string, any> {\n  stem?: string;\n  clef?: string;\n}\n\nexport class Builder {\n  factory: Factory;\n  // Initialized by the constructor via this.reset().\n  elements!: BuilderElements;\n  // Initialized by the constructor via this.reset().\n  options!: BuilderOptions;\n  // Initialized by the constructor via this.resetPiece().\n  piece!: Piece;\n  commitHooks: CommitHook[] = [];\n  rollingDuration!: string;\n\n  constructor(factory: Factory) {\n    this.factory = factory;\n    this.reset();\n  }\n\n  reset(options?: BuilderOptions): void {\n    this.options = {\n      stem: 'auto',\n      clef: 'treble',\n      ...options,\n    };\n    this.elements = { notes: [], accidentals: [] };\n    this.rollingDuration = '8';\n    this.resetPiece();\n  }\n\n  getFactory(): Factory {\n    return this.factory;\n  }\n\n  getElements(): BuilderElements {\n    return this.elements;\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.commitHooks.push(commitHook);\n  }\n\n  resetPiece(): void {\n    L('resetPiece');\n    this.piece = new Piece(this.rollingDuration);\n  }\n\n  setNoteDots(dots: Match[]): void {\n    L('setNoteDots:', dots);\n    if (dots) this.piece.dots = dots.length;\n  }\n\n  setNoteDuration(duration?: string): void {\n    L('setNoteDuration:', duration);\n    this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n  }\n\n  setNoteType(type?: string): void {\n    L('setNoteType:', type);\n    if (type) this.piece.type = type;\n  }\n\n  addNoteOption(key: string, value: string): void {\n    L('addNoteOption: key:', key, 'value:', value);\n    this.piece.options[key] = value;\n  }\n\n  addNote(key?: string, accid?: string | null, octave?: string): void {\n    L('addNote:', key, accid, octave);\n    this.piece.chord.push({\n      key: key as string,\n      accid,\n      octave,\n    });\n  }\n\n  addSingleNote(key: string, accid?: string | null, octave?: string): void {\n    L('addSingleNote:', key, accid, octave);\n    this.addNote(key, accid, octave);\n  }\n\n  // notes is an array with 3 entries\n  addChord(notes: Match[]): void {\n    L('startChord');\n    if (typeof notes[0] !== 'object') {\n      this.addSingleNote(notes[0]);\n    } else {\n      notes.forEach((n) => {\n        if (n) this.addNote(...(n as string[])); // n => [string, string | null, string]\n      });\n    }\n    L('endChord');\n  }\n\n  commitPiece(): void {\n    L('commitPiece');\n    const { factory } = this;\n\n    if (!factory) return;\n\n    const options = { ...this.options, ...this.piece.options };\n\n    // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n    // e.g., auto | up | down\n    const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n    // e.g., treble | bass\n    const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n\n    const { chord, duration, dots, type } = this.piece;\n\n    // Create a string[] that will be assigned to the .keys property of the StaveNote.\n    // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n    // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n    const standardAccidentals = Music.accidentals;\n    const keys = chord.map(\n      (notePiece) =>\n        notePiece.key +\n        (standardAccidentals.includes(notePiece.accid ?? '') ? notePiece.accid : '') +\n        '/' +\n        notePiece.octave\n    );\n    const auto_stem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n\n    // Build a StaveNote using the information we gathered.\n    const note = factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });\n    if (!auto_stem) note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n\n    // Attach accidentals.\n    const accidentals: (Accidental | undefined)[] = [];\n    chord.forEach((notePiece: NotePiece, index: number) => {\n      const accid = notePiece.accid;\n      if (typeof accid === 'string') {\n        const accidental = factory.Accidental({ type: accid });\n        note.addAccidental(index, accidental);\n        accidentals.push(accidental);\n      } else {\n        accidentals.push(undefined);\n      }\n    });\n\n    // Attach dots.\n    for (let i = 0; i < dots; i++) note.addDotToAll();\n\n    this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n\n    this.elements.notes.push(note);\n    this.elements.accidentals.push(accidentals);\n    this.resetPiece();\n  }\n}\n\nexport interface EasyScoreOptions {\n  factory?: Factory;\n  builder?: Builder;\n  commitHooks?: CommitHook[];\n  throwOnError?: boolean;\n}\n\n// Extending Record<string, any> allows arbitrary properties via set(defaults).\n// eslint-disable-next-line\nexport interface EasyScoreDefaults extends Record<string, any> {\n  clef?: string;\n  time?: string;\n  stem?: string;\n}\n\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options: { id?: string }, note: StaveNote) {\n  if (options.id === undefined) return;\n  note.setAttribute('id', options.id);\n}\n\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options: { class?: string }, note: StaveNote) {\n  if (options.class === undefined) return;\n  options.class.split(commaSeparatedRegex).forEach((className: string) => note.addClass(className));\n}\n\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n  static DEBUG: boolean = false;\n\n  defaults: EasyScoreDefaults = {\n    clef: 'treble',\n    time: '4/4',\n    stem: 'auto',\n  };\n\n  // options, factory, builder, grammar, and parser are all\n  // initialized by the constructor via this.setOptions().\n  options!: EasyScoreOptions;\n  factory!: Factory;\n  builder!: Builder;\n  grammar!: EasyScoreGrammar;\n  parser!: Parser;\n\n  constructor(options: EasyScoreOptions = {}) {\n    this.setOptions(options);\n  }\n\n  /**\n   * Set the score defaults.\n   * clef must be set appropriately to avoid errors when adding Staves.\n   * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n   * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n   * @param defaults.stem default stem arrangement (auto | up | down)\n   * @returns this\n   */\n  set(defaults: EasyScoreDefaults): this {\n    this.defaults = { ...this.defaults, ...defaults };\n    return this;\n  }\n\n  /**\n   * @param options.factory is required.\n   * @returns this\n   */\n  setOptions(options: EasyScoreOptions): this {\n    // eslint-disable-next-line\n    const factory = options.factory!; // ! operator, because options.factory was set in Factory.EasyScore().\n    const builder = options.builder ?? new Builder(factory);\n\n    this.options = {\n      commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook],\n      throwOnError: false,\n      ...options,\n      factory,\n      builder,\n    };\n\n    this.factory = factory;\n    this.builder = builder;\n    this.grammar = new EasyScoreGrammar(this.builder);\n    this.parser = new Parser(this.grammar);\n    this.options.commitHooks?.forEach((commitHook) => this.addCommitHook(commitHook));\n    return this;\n  }\n\n  setContext(context: RenderContext): this {\n    this.factory.setContext(context);\n    return this;\n  }\n\n  parse(line: string, options: BuilderOptions = {}): Result {\n    this.builder.reset(options);\n    const result = this.parser.parse(line);\n    if (!result.success && this.options.throwOnError) {\n      L(result);\n      throw new RuntimeError('Error parsing line: ' + line);\n    }\n    return result;\n  }\n\n  beam(notes: StaveNote[], options?: { autoStem?: boolean; secondaryBeamBreaks?: number[] }): StaveNote[] {\n    this.factory.Beam({ notes, options });\n    return notes;\n  }\n\n  tuplet(notes: StaveNote[], options?: TupletOptions): StaveNote[] {\n    this.factory.Tuplet({ notes, options });\n    return notes;\n  }\n\n  notes(line: string, options: BuilderOptions = {}): StaveNote[] {\n    options = { clef: this.defaults.clef, stem: this.defaults.stem, ...options };\n    this.parse(line, options);\n    return this.builder.getElements().notes;\n  }\n\n  voice(notes: Note[], options: { time?: string; options?: { softmaxFactor: number } } = {}): Voice {\n    options = { time: this.defaults.time, ...options };\n    return this.factory.Voice(options).addTickables(notes);\n  }\n\n  addCommitHook(commitHook: CommitHook): void {\n    this.builder.addCommitHook(commitHook);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n\nimport { ModifierContext } from './modifiercontext';\nimport { NoteStruct } from './note';\nimport { Stave } from './stave';\nimport { StemmableNote } from './stemmablenote';\nimport { RuntimeError } from './util';\n\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\n\nexport class GhostNote extends StemmableNote {\n  static get CATEGORY(): string {\n    return 'GhostNote';\n  }\n\n  constructor(parameter: string | NoteStruct) {\n    if (!parameter) {\n      throw new RuntimeError('BadArguments', ERROR_MSG);\n    }\n\n    let noteStruct;\n    if (typeof parameter === 'string') {\n      // Preserve backwards-compatibility\n      noteStruct = { duration: parameter };\n    } else if (typeof parameter === 'object') {\n      noteStruct = parameter;\n    } else {\n      throw new RuntimeError('BadArguments', ERROR_MSG);\n    }\n\n    super(noteStruct);\n\n    // Note properties\n    this.setWidth(0);\n  }\n\n  /**\n   * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n   */\n  isRest(): boolean {\n    return true;\n  }\n\n  setStave(stave: Stave): this {\n    super.setStave(stave);\n    return this;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    // Draw the modifiers\n    this.setRendered();\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(this.getContext());\n      modifier.drawWithStyle();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { BoundingBox } from './boundingbox';\nimport { Glyph } from './glyph';\nimport { Note, NoteStruct } from './note';\n\nexport interface GlyphNoteOptions {\n  ignoreTicks?: boolean;\n  line?: number;\n}\n\nexport class GlyphNote extends Note {\n  static get CATEGORY(): string {\n    return 'GlyphNote';\n  }\n\n  protected options: Required<GlyphNoteOptions>;\n\n  constructor(glyph: Glyph | undefined, noteStruct: NoteStruct, options?: GlyphNoteOptions) {\n    super(noteStruct);\n    this.options = {\n      ignoreTicks: false,\n      line: 2,\n      ...options,\n    };\n\n    // Note properties\n    this.ignore_ticks = this.options.ignoreTicks;\n    if (glyph) {\n      this.setGlyph(glyph);\n    }\n  }\n\n  setGlyph(glyph: Glyph): this {\n    this.glyph = glyph;\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getBoundingBox(): BoundingBox {\n    return this.glyph.getBoundingBox();\n  }\n\n  preFormat(): this {\n    if (!this.preFormatted && this.modifierContext) {\n      this.modifierContext.preFormat();\n    }\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  drawModifiers(): void {\n    const ctx = this.checkContext();\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n    }\n    ctx.closeGroup();\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = stave.checkContext();\n    this.setRendered();\n    ctx.openGroup('glyphNote', this.getAttribute('id'));\n\n    // Context is set when setStave is called on Note\n    const glyph = this.glyph;\n    if (!glyph.getContext()) {\n      glyph.setContext(ctx);\n    }\n\n    glyph.setStave(stave);\n    glyph.setYShift(stave.getYForLine(this.options.line) - stave.getYForGlyphs());\n\n    const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n    glyph.renderToStave(x);\n    this.drawModifiers();\n    ctx.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Mark Meeus 2019\n\nimport { KeySignature } from './keysignature';\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\n\nexport class KeySigNote extends Note {\n  static get CATEGORY(): string {\n    return 'KeySigNote';\n  }\n\n  protected keySignature: KeySignature;\n\n  constructor(keySpec: string, cancelKeySpec?: string, alterKeySpec?: string[]) {\n    super({ duration: 'b' });\n\n    this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    this.keySignature.setStave(this.checkStave());\n    this.setWidth(this.keySignature.getWidth());\n    return this;\n  }\n\n  draw(): void {\n    const ctx = this.checkStave().checkContext();\n    this.setRendered();\n    this.keySignature.setX(this.getAbsoluteX());\n    this.keySignature.setContext(ctx);\n    this.keySignature.draw();\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests.\n\nimport { isBarline } from 'typeguard';\n\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { RenderContext } from './rendercontext';\nimport { Stave } from './stave';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { defined } from './util';\n\nexport interface MultimeasureRestRenderOptions {\n  /** Extracted by Factory.MultiMeasureRest() and passed to the MultiMeasureRest constructor. */\n  number_of_measures: number;\n\n  /** Use rest symbols. Defaults to `false`, which renders a thick horizontal line with serifs at both ends. */\n  use_symbols?: boolean;\n\n  /** Horizontal spacing between rest symbol glyphs (if `use_symbols` is `true`).*/\n  symbol_spacing?: number;\n\n  /** Show the number of measures at the top. Defaults to `true`. */\n  show_number?: boolean;\n\n  /** Vertical position of the \"number of measures\" text (measured in stave lines). Defaults to -0.5, which is above the stave. 6.5 is below the stave. */\n  number_line?: number;\n\n  /** Font size of the \"number of measures\" text. */\n  number_glyph_point?: number;\n\n  /** Left padding from `stave.getX()`. */\n  padding_left?: number;\n\n  /** Right padding from `stave.getX() + stave.getWidth()` */\n  padding_right?: number;\n\n  /** Vertical position of the rest line or symbols, expressed as stave lines. Default: 2. The top stave line is 1, and the bottom stave line is 5. */\n  line?: number;\n\n  /** Defaults to the number of vertical pixels between stave lines. Used for serif height or 2-bar / 4-bar symbol height. */\n  spacing_between_lines_px?: number;\n\n  /** Size of the semibreve (1-bar) rest symbol. Other symbols are scaled accordingly. */\n  semibreve_rest_glyph_scale?: number;\n\n  /** Thickness of the rest line. Used when `use_symbols` is false. Defaults to half the space between stave lines. */\n  line_thickness?: number;\n\n  /** Thickness of the rest line's serif. Used when `use_symbols` is false. */\n  serif_thickness?: number;\n}\n\nlet semibreve_rest: { glyph_font_scale: number; glyph_code: string; width: number } | undefined;\n\nfunction get_semibreve_rest() {\n  if (!semibreve_rest) {\n    const noteHead = new NoteHead({ duration: 'w', note_type: 'r' });\n    semibreve_rest = {\n      glyph_font_scale: noteHead.render_options.glyph_font_scale,\n      glyph_code: noteHead.glyph_code,\n      width: noteHead.getWidth(),\n    };\n  }\n  return semibreve_rest;\n}\n\nexport class MultiMeasureRest extends Element {\n  static get CATEGORY(): string {\n    return 'MultiMeasureRest';\n  }\n\n  public render_options: Required<MultimeasureRestRenderOptions>;\n  protected xs = { left: NaN, right: NaN };\n  protected number_of_measures: number;\n\n  protected stave?: Stave;\n\n  private hasPaddingLeft = false;\n  private hasPaddingRight = false;\n  private hasLineThickness = false;\n  private hasSymbolSpacing = false;\n\n  /**\n   *\n   * @param number_of_measures Number of measures.\n   * @param options The options object.\n   */\n  constructor(number_of_measures: number, options: MultimeasureRestRenderOptions) {\n    super();\n\n    this.number_of_measures = number_of_measures;\n\n    // Keep track of whether these four options were provided.\n    this.hasPaddingLeft = typeof options.padding_left === 'number';\n    this.hasPaddingRight = typeof options.padding_right === 'number';\n    this.hasLineThickness = typeof options.line_thickness === 'number';\n    this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';\n\n    this.render_options = {\n      use_symbols: false,\n      show_number: true,\n      number_line: -0.5,\n      number_glyph_point: this.musicFont.lookupMetric('digits.point'), // same as TimeSignature.\n      line: 2,\n      spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, // same as Stave.\n      serif_thickness: 2,\n      semibreve_rest_glyph_scale: Tables.DEFAULT_NOTATION_FONT_SCALE, // same as NoteHead.\n      padding_left: 0,\n      padding_right: 0,\n      line_thickness: 5,\n      symbol_spacing: 0,\n      ...options,\n    };\n\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n    this.render_options.number_line += fontLineShift;\n  }\n\n  getXs(): { left: number; right: number } {\n    return this.xs;\n  }\n\n  setStave(stave: Stave): this {\n    this.stave = stave;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  checkStave(): Stave {\n    return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n  }\n\n  drawLine(stave: Stave, ctx: RenderContext, left: number, right: number, spacingBetweenLines: number): void {\n    const options = this.render_options;\n\n    const y = stave.getYForLine(options.line);\n    const padding = (right - left) * 0.1;\n    left += padding;\n    right -= padding;\n\n    let lineThicknessHalf;\n    if (this.hasLineThickness) {\n      lineThicknessHalf = options.line_thickness * 0.5;\n    } else {\n      lineThicknessHalf = spacingBetweenLines * 0.25;\n    }\n    const serifThickness = options.serif_thickness;\n    const top = y - spacingBetweenLines;\n    const bot = y + spacingBetweenLines;\n    const leftIndented = left + serifThickness;\n    const rightIndented = right - serifThickness;\n    const lineTop = y - lineThicknessHalf;\n    const lineBottom = y + lineThicknessHalf;\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(left, top);\n    ctx.lineTo(leftIndented, top);\n    ctx.lineTo(leftIndented, lineTop);\n    ctx.lineTo(rightIndented, lineTop);\n    ctx.lineTo(rightIndented, top);\n    ctx.lineTo(right, top);\n    ctx.lineTo(right, bot);\n    ctx.lineTo(rightIndented, bot);\n    ctx.lineTo(rightIndented, lineBottom);\n    ctx.lineTo(leftIndented, lineBottom);\n    ctx.lineTo(leftIndented, bot);\n    ctx.lineTo(left, bot);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  drawSymbols(stave: Stave, ctx: RenderContext, left: number, right: number, spacingBetweenLines: number): void {\n    const n4 = Math.floor(this.number_of_measures / 4);\n    const n = this.number_of_measures % 4;\n    const n2 = Math.floor(n / 2);\n    const n1 = n % 2;\n\n    const options = this.render_options;\n\n    // FIXME: TODO: invalidate semibreve_rest at the appropriate time\n    // (e.g., if the system font settings are changed).\n    semibreve_rest = undefined;\n\n    const rest = get_semibreve_rest();\n    const rest_scale = options.semibreve_rest_glyph_scale;\n    const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);\n    const glyphs = {\n      2: {\n        width: rest_width * 0.5,\n        height: spacingBetweenLines,\n      },\n      1: {\n        width: rest_width,\n      },\n    };\n\n    /* 10: normal spacingBetweenLines */\n    const spacing = this.hasSymbolSpacing ? options.symbol_spacing : 10;\n\n    const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n    let x = left + (right - left) * 0.5 - width * 0.5;\n    const line = options.line;\n    const yTop = stave.getYForLine(line - 1);\n    const yMiddle = stave.getYForLine(line);\n    const yBottom = stave.getYForLine(line + 1);\n\n    ctx.save();\n    ctx.setStrokeStyle('none');\n    ctx.setLineWidth(0);\n\n    for (let i = 0; i < n4; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n2; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n1; ++i) {\n      Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);\n      x += glyphs[1].width + spacing;\n    }\n\n    ctx.restore();\n  }\n\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const stave = this.checkStave();\n\n    let left = stave.getNoteStartX();\n    let right = stave.getNoteEndX();\n\n    // FIXME: getNoteStartX() returns x + 5(barline width)\n    //        getNoteEndX() returns x + width(no barline width)\n    // See Stave constructor. How do we fix this?\n    // Here, we subtract the barline width.\n    const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n    if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n      left -= begModifiers[0].getWidth();\n    }\n\n    const options = this.render_options;\n    if (this.hasPaddingLeft) {\n      left = stave.getX() + options.padding_left;\n    }\n    if (this.hasPaddingRight) {\n      right = stave.getX() + stave.getWidth() - options.padding_right;\n    }\n\n    this.xs.left = left;\n    this.xs.right = right;\n\n    const spacingBetweenLines = options.spacing_between_lines_px;\n    if (options.use_symbols) {\n      this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\n    } else {\n      this.drawLine(stave, ctx, left, right, spacingBetweenLines);\n    }\n\n    if (options.show_number) {\n      const timeSpec = '/' + this.number_of_measures;\n      const timeSig = new TimeSignature(timeSpec, 0, false);\n      timeSig.point = options.number_glyph_point;\n      timeSig.setTimeSig(timeSpec);\n      timeSig.setStave(stave);\n      timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\n      timeSig.bottomLine = options.number_line;\n      timeSig.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { RenderContext } from './rendercontext';\nimport { StaveNote } from './stavenote';\nimport { FontInfo } from './types/common';\nimport { log, RuntimeError } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (PedalMarking.DEBUG) log('Vex.Flow.PedalMarking', args);\n}\n\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name: string, context: RenderContext, x: number, y: number, point: number): void {\n  const glyph_data = PedalMarking.GLYPHS[name];\n  const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\n  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n  /** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'PedalMarking';\n  }\n\n  protected line: number;\n  protected type: number;\n  protected custom_depress_text: string;\n  protected custom_release_text: string;\n  public render_options: {\n    color: string;\n    bracket_height: number;\n    text_margin_right: number;\n    bracket_line_width: number;\n  };\n  protected font: FontInfo;\n  protected notes: StaveNote[];\n\n  /** Glyph data */\n  static readonly GLYPHS: Record<string, { code: string; y_shift: number; x_shift: number }> = {\n    pedal_depress: {\n      code: 'keyboardPedalPed',\n      x_shift: -10,\n      y_shift: 0,\n    },\n    pedal_release: {\n      code: 'keyboardPedalUp',\n      x_shift: -2,\n      y_shift: 3,\n    },\n  };\n\n  /** Pedal type as number. */\n  static readonly type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n  };\n\n  /** Pedal type as string. */\n  static readonly typeString: Record<string, number> = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n  };\n\n  /**\n   * Create a sustain pedal marking. Returns the defaults PedalMarking.\n   * Which uses the traditional \"Ped\" and \"*\"\" markings.\n   */\n  static createSustain(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    return pedal;\n  }\n\n  /** Create a sostenuto pedal marking */\n  static createSostenuto(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.MIXED);\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n  }\n\n  /** Create an una corda pedal marking */\n  static createUnaCorda(notes: StaveNote[]): PedalMarking {\n    const pedal = new PedalMarking(notes);\n    pedal.setType(PedalMarking.type.TEXT);\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n  }\n\n  constructor(notes: StaveNote[]) {\n    super();\n\n    this.notes = notes;\n    this.type = PedalMarking.type.TEXT;\n    this.line = 0;\n\n    // Custom text for the release/depress markings\n    this.custom_depress_text = '';\n    this.custom_release_text = '';\n\n    this.font = {\n      family: 'Times New Roman',\n      size: 12,\n      weight: 'italic bold',\n    };\n\n    this.render_options = {\n      bracket_height: 10,\n      text_margin_right: 6,\n      bracket_line_width: 1,\n      color: 'black',\n    };\n  }\n\n  /** Set pedal type. */\n  setType(type: string | number): this {\n    type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n\n    if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  /**\n   * Set custom text for the `depress`/`release` pedal markings. No text is\n   * set if the parameter is falsy.\n   */\n  setCustomText(depress: string, release?: string): this {\n    this.custom_depress_text = depress || '';\n    this.custom_release_text = release || '';\n    return this;\n  }\n\n  /** Set the staff line to render the markings on. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Draw the bracket based pedal markings. */\n  drawBracketed(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n    let prev_x: number;\n    let prev_y: number;\n\n    // Iterate through each note\n    this.notes.forEach((note, index, notes) => {\n      // Each note triggers the opposite pedal action\n      is_pedal_depressed = !is_pedal_depressed;\n\n      // Get the initial coordinates for the note\n      const x = note.getAbsoluteX();\n      const y = note.checkStave().getYForBottomText(this.line + 3);\n\n      // Throw if current note is positioned before the previous note\n      if (x < prev_x) {\n        throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n      }\n\n      // Determine if the previous or next note are the same\n      // as the current note. We need to keep track of this for\n      // when adjustments are made for the release+depress action\n      const next_is_same = notes[index + 1] === note;\n      const prev_is_same = notes[index - 1] === note;\n\n      let x_shift = 0;\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      if (is_pedal_depressed) {\n        // Adjustment for release+depress\n        x_shift = prev_is_same ? 5 : 0;\n\n        if (this.type === PedalMarking.type.MIXED && !prev_is_same) {\n          // For MIXED style, start with text instead of bracket\n          if (this.custom_depress_text) {\n            // If we have custom text, use instead of the default \"Ped\" glyph\n            const text_width = ctx.measureText(this.custom_depress_text).width;\n            ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n            x_shift = text_width / 2 + this.render_options.text_margin_right;\n          } else {\n            // Render the Ped glyph in position\n            drawPedalGlyph('pedal_depress', ctx, x, y, point);\n            x_shift = 20 + this.render_options.text_margin_right;\n          }\n        } else {\n          // Draw start bracket\n          ctx.beginPath();\n          ctx.moveTo(x, y - this.render_options.bracket_height);\n          ctx.lineTo(x + x_shift, y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      } else {\n        // Adjustment for release+depress\n        x_shift = next_is_same ? -5 : 0;\n\n        // Draw end bracket\n        ctx.beginPath();\n        ctx.moveTo(prev_x, prev_y);\n        ctx.lineTo(x + x_shift, y);\n        ctx.lineTo(x, y - this.render_options.bracket_height);\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      // Store previous coordinates\n      prev_x = x + x_shift;\n      prev_y = y;\n    });\n  }\n\n  /**\n   * Draw the text based pedal markings. This defaults to the traditional\n   * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n   */\n  drawText(): void {\n    const ctx = this.checkContext();\n    let is_pedal_depressed = false;\n\n    // Iterate through each note, placing glyphs or custom text accordingly\n    this.notes.forEach((note) => {\n      is_pedal_depressed = !is_pedal_depressed;\n      const stave = note.checkStave();\n      const x = note.getAbsoluteX();\n      const y = stave.getYForBottomText(this.line + 3);\n\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      let text_width = 0;\n      if (is_pedal_depressed) {\n        if (this.custom_depress_text) {\n          text_width = ctx.measureText(this.custom_depress_text).width;\n          ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_depress', ctx, x, y, point);\n        }\n      } else {\n        if (this.custom_release_text) {\n          text_width = ctx.measureText(this.custom_release_text).width;\n          ctx.fillText(this.custom_release_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_release', ctx, x, y, point);\n        }\n      }\n    });\n  }\n\n  /** Render the pedal marking in position on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setStrokeStyle(this.render_options.color);\n    ctx.setFillStyle(this.render_options.color);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    L('Rendering Pedal Marking');\n\n    if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n      ctx.setLineWidth(this.render_options.bracket_line_width);\n      this.drawBracketed();\n    } else if (this.type === PedalMarking.type.TEXT) {\n      this.drawText();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { GlyphNoteOptions } from './glyphnote';\nimport { NoteStruct } from './note';\n\n// Map `type` to SMuFL glyph code.\nconst CODES: Record<string, string> = {\n  '1': 'repeat1Bar',\n  '2': 'repeat2Bars',\n  '4': 'repeat4Bars',\n  slash: 'repeatBarSlash',\n};\n\nexport class RepeatNote extends GlyphNote {\n  static get CATEGORY(): string {\n    return 'RepeatNote';\n  }\n\n  constructor(type: string, noteStruct?: NoteStruct, options?: GlyphNoteOptions) {\n    super(undefined, { duration: 'q', align_center: type !== 'slash', ...noteStruct }, options);\n\n    const glyphCode = CODES[type] || 'repeat1Bar';\n    const glyph = new Glyph(glyphCode, this.musicFont.lookupMetric('repeatNote.point', 40), { category: 'repeatNote' });\n    this.setGlyph(glyph);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Element } from './element';\nimport { RenderContext } from './rendercontext';\nimport { StaveNote } from './stavenote';\nimport { Tables } from './tables';\nimport { FontInfo } from './types/common';\nimport { RuntimeError } from './util';\n\nexport interface StaveLineNotes {\n  first_note: StaveNote;\n  first_indices: number[];\n  last_note: StaveNote;\n  last_indices: number[];\n}\n\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(\n  ctx: RenderContext,\n  x0: number,\n  y0: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n): void {\n  // all cases do this.\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x0, y0);\n  ctx.closePath();\n\n  ctx.fill();\n}\n\nexport class StaveLine extends Element {\n  static get CATEGORY(): string {\n    return 'StaveLine';\n  }\n\n  // Text Positioning\n  static readonly TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n  };\n\n  static readonly TextJustification = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3,\n  };\n\n  public render_options: {\n    padding_left: number;\n    padding_right: number;\n    line_width: number;\n    line_dash?: number[];\n    rounded_end: boolean;\n    color?: string;\n    draw_start_arrow: boolean;\n    draw_end_arrow: boolean;\n    arrowhead_length: number;\n    arrowhead_angle: number;\n    text_position_vertical: number;\n    text_justification: number;\n  };\n\n  protected text: string;\n  protected font: FontInfo;\n\n  // These five instance variables are all initialized by the constructor via this.setNotes(notes).\n  protected notes!: StaveLineNotes;\n  protected first_note!: StaveNote;\n  protected first_indices!: number[];\n  protected last_note!: StaveNote;\n  protected last_indices!: number[];\n\n  // Initialize the StaveLine with the given `notes`.\n  //\n  // `notes` is a struct that has:\n  //\n  //  ```\n  //  {\n  //    first_note: Note,\n  //    last_note: Note,\n  //    first_indices: [n1, n2, n3],\n  //    last_indices: [n1, n2, n3]\n  //  }\n  //  ```\n  constructor(notes: StaveLineNotes) {\n    super();\n\n    this.setNotes(notes);\n\n    this.text = '';\n\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    this.render_options = {\n      // Space to add to the left or the right\n      padding_left: 4,\n      padding_right: 3,\n\n      // The width of the line in pixels\n      line_width: 1,\n      // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n      line_dash: undefined,\n      // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n      rounded_end: true,\n      // The color of the line and arrowheads\n      color: undefined,\n\n      // Flags to draw arrows on each end of the line\n      draw_start_arrow: false,\n      draw_end_arrow: false,\n\n      // The length of the arrowhead sides\n      arrowhead_length: 10,\n      // The angle of the arrowhead\n      arrowhead_angle: Math.PI / 8,\n\n      // The position of the text\n      text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n      text_justification: StaveLine.TextJustification.CENTER,\n    };\n  }\n\n  // Set the font for the `StaveLine` text\n  setFont(font: FontInfo): this {\n    this.font = font;\n    return this;\n  }\n\n  // The the annotation for the `StaveLine`\n  setText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  // Set the notes for the `StaveLine`\n  setNotes(notes: StaveLineNotes): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n    }\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\n    }\n\n    this.notes = notes;\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n\n  // Apply the style of the `StaveLine` to the context\n  applyLineStyle(): void {\n    const ctx = this.checkContext();\n    const render_options = this.render_options;\n\n    if (render_options.line_dash) {\n      ctx.setLineDash(render_options.line_dash);\n    }\n\n    if (render_options.line_width) {\n      ctx.setLineWidth(render_options.line_width);\n    }\n\n    if (render_options.rounded_end) {\n      ctx.setLineCap('round');\n    } else {\n      ctx.setLineCap('square');\n    }\n  }\n\n  // Apply the text styling to the context\n  applyFontStyle(): void {\n    const ctx = this.checkContext();\n\n    if (this.font) {\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    }\n\n    const render_options = this.render_options;\n    const color = render_options.color;\n    if (color) {\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n    }\n  }\n\n  // Helper function to draw a line with arrow heads\n  protected drawArrowLine(ctx: RenderContext, pt1: { x: number; y: number }, pt2: { x: number; y: number }): void {\n    const both_arrows = this.render_options.draw_start_arrow && this.render_options.draw_end_arrow;\n\n    const x1 = pt1.x;\n    const y1 = pt1.y;\n    const x2 = pt2.x;\n    const y2 = pt2.y;\n\n    // For ends with arrow we actually want to stop before we get to the arrow\n    // so that wide lines won't put a flat end on the arrow.\n    const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    const ratio = (distance - this.render_options.arrowhead_length / 3) / distance;\n    let end_x;\n    let end_y;\n    let start_x;\n    let start_y;\n    if (this.render_options.draw_end_arrow || both_arrows) {\n      end_x = Math.round(x1 + (x2 - x1) * ratio);\n      end_y = Math.round(y1 + (y2 - y1) * ratio);\n    } else {\n      end_x = x2;\n      end_y = y2;\n    }\n\n    if (this.render_options.draw_start_arrow || both_arrows) {\n      start_x = x1 + (x2 - x1) * (1 - ratio);\n      start_y = y1 + (y2 - y1) * (1 - ratio);\n    } else {\n      start_x = x1;\n      start_y = y1;\n    }\n\n    if (this.render_options.color) {\n      ctx.setStrokeStyle(this.render_options.color);\n      ctx.setFillStyle(this.render_options.color);\n    }\n\n    // Draw the shaft of the arrow\n    ctx.beginPath();\n    ctx.moveTo(start_x, start_y);\n    ctx.lineTo(end_x, end_y);\n    ctx.stroke();\n    ctx.closePath();\n\n    // calculate the angle of the line\n    const line_angle = Math.atan2(y2 - y1, x2 - x1);\n    // h is the line length of a side of the arrow head\n    const h = Math.abs(this.render_options.arrowhead_length / Math.cos(this.render_options.arrowhead_angle));\n\n    let angle1;\n    let angle2;\n    let top_x;\n    let top_y;\n    let bottom_x;\n    let bottom_y;\n\n    if (this.render_options.draw_end_arrow || both_arrows) {\n      angle1 = line_angle + Math.PI + this.render_options.arrowhead_angle;\n      top_x = x2 + Math.cos(angle1) * h;\n      top_y = y2 + Math.sin(angle1) * h;\n\n      angle2 = line_angle + Math.PI - this.render_options.arrowhead_angle;\n      bottom_x = x2 + Math.cos(angle2) * h;\n      bottom_y = y2 + Math.sin(angle2) * h;\n\n      drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n    }\n\n    if (this.render_options.draw_start_arrow || both_arrows) {\n      angle1 = line_angle + this.render_options.arrowhead_angle;\n      top_x = x1 + Math.cos(angle1) * h;\n      top_y = y1 + Math.sin(angle1) * h;\n\n      angle2 = line_angle - this.render_options.arrowhead_angle;\n      bottom_x = x1 + Math.cos(angle2) * h;\n      bottom_y = y1 + Math.sin(angle2) * h;\n\n      drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n    }\n  }\n\n  // Renders the `StaveLine` on the context\n  draw(): this {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    const render_options = this.render_options;\n\n    ctx.save();\n    this.applyLineStyle();\n\n    // Cycle through each set of indices and draw lines\n    let start_position = { x: 0, y: 0 };\n    let end_position = { x: 0, y: 0 };\n    this.first_indices.forEach((first_index, i) => {\n      const last_index = this.last_indices[i];\n\n      // Get initial coordinates for the start/end of the line\n      start_position = first_note.getModifierStartXY(2, first_index);\n      end_position = last_note.getModifierStartXY(1, last_index);\n      const upwards_slope = start_position.y > end_position.y;\n\n      // Adjust `x` coordinates for modifiers\n      start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n      end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n\n      // Adjust first `x` coordinates for displacements\n      const notehead_width = first_note.getGlyph().getWidth();\n      const first_displaced = first_note.getKeyProps()[first_index].displaced;\n      if (first_displaced && first_note.getStemDirection() === 1) {\n        start_position.x += notehead_width + render_options.padding_left;\n      }\n\n      // Adjust last `x` coordinates for displacements\n      const last_displaced = last_note.getKeyProps()[last_index].displaced;\n      if (last_displaced && last_note.getStemDirection() === -1) {\n        end_position.x -= notehead_width + render_options.padding_right;\n      }\n\n      // Adjust y position better if it's not coming from the center of the note\n      start_position.y += upwards_slope ? -3 : 1;\n      end_position.y += upwards_slope ? 2 : 0;\n\n      this.drawArrowLine(ctx, start_position, end_position);\n    });\n\n    ctx.restore();\n\n    // Determine the x coordinate where to start the text\n    const text_width = ctx.measureText(this.text).width;\n    const justification = render_options.text_justification;\n    let x = 0;\n    if (justification === StaveLine.TextJustification.LEFT) {\n      x = start_position.x;\n    } else if (justification === StaveLine.TextJustification.CENTER) {\n      const delta_x = end_position.x - start_position.x;\n      const center_x = delta_x / 2 + start_position.x;\n      x = center_x - text_width / 2;\n    } else if (justification === StaveLine.TextJustification.RIGHT) {\n      x = end_position.x - text_width;\n    }\n\n    // Determine the y value to start the text\n    let y = 0;\n    const vertical_position = render_options.text_position_vertical;\n    if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n      y = first_note.checkStave().getYForTopText();\n    } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n      y = first_note.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n    }\n\n    // Draw the text\n    ctx.save();\n    this.applyFontStyle();\n    ctx.fillText(this.text, x, y);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { FormatOptions, Formatter, FormatterOptions } from './formatter';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Stave, StaveOptions } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { RuntimeError } from './util';\nimport { Voice } from './voice';\n\nexport interface SystemFormatterOptions extends FormatterOptions {\n  alpha?: number;\n}\n\nexport interface SystemParams {\n  voices: Voice[];\n  stave?: Stave;\n  noJustification?: boolean;\n  options?: StaveOptions;\n  spaceAbove?: number;\n  spaceBelow?: number;\n  debugNoteMetrics?: boolean;\n}\n\n/**\n * Formatting for systems created/drawn from factory:\n *\n * If width is provided, the system will use the specified width.\n *\n * If noJustification flag is 'true', there is no justification between voices\n * Otherwise, autoWidth defaults to true.\n *\n * If autowidth is true, the system uses format.preCalculateMinWidth\n * for the width of all voices, and default stave padding\n */\nexport interface SystemOptions {\n  factory?: Factory;\n  noPadding?: boolean;\n  debugFormatter?: boolean;\n  spaceBetweenStaves?: number;\n  formatIterations?: number;\n  autoWidth?: boolean;\n  x?: number;\n  width?: number;\n  y?: number;\n  details?: SystemFormatterOptions;\n  formatOptions?: FormatOptions;\n  noJustification?: boolean;\n}\n\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n  static get CATEGORY(): string {\n    return 'System';\n  }\n\n  protected options!: Required<SystemOptions>;\n  protected factory!: Factory;\n  protected formatter?: Formatter;\n  protected startX?: number;\n  protected lastY?: number;\n  protected parts: Required<SystemParams>[];\n  protected connector?: StaveConnector;\n  protected debugNoteMetricsYs?: { y: number; voice: Voice }[];\n\n  constructor(params: SystemOptions = {}) {\n    super();\n    this.setOptions(params);\n    this.parts = [];\n  }\n\n  /** Set formatting options. */\n  setOptions(options: SystemOptions = {}): void {\n    this.factory = options.factory ?? new Factory({ renderer: { elementId: null, width: 0, height: 0 } });\n    this.options = {\n      factory: this.factory,\n      x: 10,\n      y: 10,\n      width: 500,\n      spaceBetweenStaves: 12, // stave spaces\n      autoWidth: false,\n      noJustification: false,\n      debugFormatter: false,\n      formatIterations: 0, // number of formatter tuning steps\n      noPadding: false,\n      ...options,\n      details: {\n        alpha: 0.5, // formatter tuner learning/shifting rate\n        ...options.details,\n      },\n      formatOptions: {\n        ...options.formatOptions,\n      },\n    };\n\n    if (this.options.noJustification === false && typeof options.width === 'undefined') {\n      this.options.autoWidth = true;\n    }\n  }\n\n  /** Set associated context. */\n  setContext(context: RenderContext): this {\n    super.setContext(context);\n    this.factory.setContext(context);\n    return this;\n  }\n\n  /**\n   * Add connector between staves.\n   * @param type see {@link StaveConnector.typeString}\n   */\n  addConnector(type: string = 'double'): StaveConnector {\n    this.connector = this.factory.StaveConnector({\n      top_stave: this.parts[0].stave,\n      bottom_stave: this.parts[this.parts.length - 1].stave,\n      type,\n    });\n    return this.connector;\n  }\n\n  /**\n   * Add stave to the system.\n   *\n   * Examples:\n   *\n   *  (one voice)\n   *\n   * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n   *\n   *  (two voices)\n   *\n   * `system.addStave({voices: [`\n   *\n   *  `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n   *\n   *  `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))]});`\n   */\n  addStave(params: SystemParams): Stave {\n    const staveOptions: StaveOptions = { left_bar: false, ...params.options };\n\n    const stave =\n      params.stave ??\n      this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n\n    const p = {\n      stave,\n      /* voices: [], */\n      spaceAbove: 0, // stave spaces\n      spaceBelow: 0, // stave spaces\n      debugNoteMetrics: false,\n      noJustification: false,\n      ...params,\n      options: staveOptions, // this needs to go after ...params, so we can override the options field.\n    };\n\n    const ctx = this.getContext();\n    p.voices.forEach((voice) =>\n      voice\n        .setContext(ctx)\n        .setStave(stave)\n        .getTickables()\n        .forEach((tickable) => tickable.setStave(stave))\n    );\n\n    this.parts.push(p);\n    return stave;\n  }\n\n  /** Format the system. */\n  format(): void {\n    const options_details = this.options.details;\n    let justifyWidth = 0;\n    const formatter = new Formatter(options_details);\n    this.formatter = formatter;\n\n    let y = this.options.y;\n    let startX = 0;\n    let allVoices: Voice[] = [];\n    const debugNoteMetricsYs: { y: number; voice: Voice }[] = [];\n\n    // Join the voices for each stave.\n    this.parts.forEach((part) => {\n      y = y + part.stave.space(part.spaceAbove);\n      part.stave.setY(y);\n      if (this.options.autoWidth) {\n        part.voices.forEach((voice) => {\n          formatter.joinVoices([voice]);\n        });\n      } else {\n        formatter.joinVoices(part.voices);\n      }\n      y = y + part.stave.space(part.spaceBelow);\n      y = y + part.stave.space(this.options.spaceBetweenStaves);\n      if (part.debugNoteMetrics) {\n        debugNoteMetricsYs.push({ y, voice: part.voices[0] });\n        y += 15;\n      }\n      allVoices = allVoices.concat(part.voices);\n\n      startX = Math.max(startX, part.stave.getNoteStartX());\n    });\n\n    // Update the start position of all staves.\n    this.parts.forEach((part) => part.stave.setNoteStartX(startX));\n    if (this.options.autoWidth) {\n      justifyWidth = formatter.preCalculateMinTotalWidth(allVoices);\n      this.parts.forEach((part) => {\n        part.stave.setWidth(justifyWidth + Stave.rightPadding + (startX - this.options.x));\n      });\n    } else {\n      justifyWidth = this.options.noPadding\n        ? this.options.width - this.options.x\n        : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n    }\n    formatter.format(allVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n\n    for (let i = 0; i < this.options.formatIterations; i++) {\n      formatter.tune(options_details);\n    }\n\n    this.startX = startX;\n    this.debugNoteMetricsYs = debugNoteMetricsYs;\n    this.lastY = y;\n    this.boundingBox = new BoundingBox(this.options.x, this.options.y, this.options.width, this.lastY - this.options.y);\n  }\n\n  /** Render the system. */\n  draw(): void {\n    // Render debugging information, if requested.\n    const ctx = this.checkContext();\n    if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n      throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n    }\n    this.setRendered();\n\n    if (this.options.debugFormatter) {\n      Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n    }\n\n    this.debugNoteMetricsYs.forEach((d) => {\n      d.voice.getTickables().forEach((tickable) => Note.plotMetrics(ctx, tickable, d.y));\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Stave, StaveOptions } from './stave';\n\nexport class TabStave extends Stave {\n  static get CATEGORY(): string {\n    return 'TabStave';\n  }\n\n  constructor(x: number, y: number, width: number, options?: StaveOptions) {\n    const tab_options = {\n      spacing_between_lines_px: 13,\n      num_lines: 6,\n      top_text_position: 1,\n      ...options,\n    };\n\n    super(x, y, width, tab_options);\n  }\n\n  getYForGlyphs(): number {\n    return this.getYForLine(2.5);\n  }\n\n  // Deprecated\n  addTabGlyph(): this {\n    this.addClef('tab');\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\n\nimport { Element } from './element';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { Renderer } from './renderer';\nimport { Tables } from './tables';\nimport { FontInfo } from './types/common';\nimport { log, RuntimeError } from './util';\n\nexport interface TextBracketParams {\n  start: Note;\n  stop: Note;\n  text: string;\n  superscript: string;\n  position: number | string;\n}\n\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextBracket.DEBUG) log('Vex.Flow.TextBracket', args);\n}\n\nexport enum TextBracketPosition {\n  TOP = 1,\n  BOTTOM = -1,\n}\n\nexport class TextBracket extends Element {\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'TextBracket';\n  }\n\n  public render_options: {\n    dashed: boolean;\n    color: string;\n    line_width: number;\n    underline_superscript: boolean;\n    show_bracket: boolean;\n    dash: number[];\n    bracket_height: number;\n  };\n\n  protected readonly text: string;\n  protected readonly superscript: string;\n  protected readonly position: TextBracketPosition;\n\n  protected line: number;\n  protected start: Note;\n  protected stop: Note;\n  protected font: FontInfo;\n\n  /**\n   * @deprecated\n   */\n  static get Positions(): typeof TextBracketPosition {\n    L('Positions is deprecated, use TextBracketPosition instead.');\n    return TextBracketPosition;\n  }\n\n  static get Position(): typeof TextBracketPosition {\n    return TextBracketPosition;\n  }\n\n  /**\n   * @deprecated Use `TextBracket.PositionString` instead.\n   */\n  static get PositionsString(): Record<string, number> {\n    L('PositionsString is deprecated, use PositionString instead.');\n    return TextBracket.PositionString;\n  }\n\n  static get PositionString(): Record<string, number> {\n    return {\n      top: TextBracketPosition.TOP,\n      bottom: TextBracketPosition.BOTTOM,\n    };\n  }\n\n  constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }: TextBracketParams) {\n    super();\n\n    this.start = start;\n    this.stop = stop;\n\n    this.text = text;\n    this.superscript = superscript;\n\n    this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n\n    this.line = 1;\n\n    this.font = {\n      family: 'Serif',\n      size: 15,\n      weight: 'italic',\n    };\n\n    this.render_options = {\n      dashed: true,\n      dash: [5],\n      color: 'black',\n      line_width: 1,\n      show_bracket: true,\n      bracket_height: 8,\n\n      // In the BOTTOM position, the bracket line can extend\n      // under the superscript.\n      underline_superscript: true,\n    };\n  }\n\n  // Apply the text backet styling to the provided `context`\n  applyStyle(context: RenderContext): this {\n    // Apply style for the octave bracket\n    context.setFont(this.font.family, this.font.size, this.font.weight);\n    context.setStrokeStyle(this.render_options.color);\n    context.setFillStyle(this.render_options.color);\n    context.setLineWidth(this.render_options.line_width);\n\n    return this;\n  }\n\n  // Set whether the bracket line should be `dashed`. You can also\n  // optionally set the `dash` pattern by passing in an array of numbers\n  setDashed(dashed: boolean, dash?: number[]): this {\n    this.render_options.dashed = dashed;\n    if (dash) this.render_options.dash = dash;\n    return this;\n  }\n\n  // Set the font for the text\n  setFont(font: FontInfo): this {\n    // We use Object.assign to support partial updates to the font object\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n  // Set the rendering `context` for the octave bracket\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  // Draw the octave bracket on the rendering context\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let y = 0;\n    switch (this.position) {\n      case TextBracketPosition.TOP:\n        y = this.start.checkStave().getYForTopText(this.line);\n        break;\n      case TextBracketPosition.BOTTOM:\n        y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n        break;\n      default:\n        throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n    }\n\n    // Get the preliminary start and stop coordintates for the bracket\n    const start = { x: this.start.getAbsoluteX(), y };\n    const stop = { x: this.stop.getAbsoluteX(), y };\n\n    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n\n    const bracket_height = this.render_options.bracket_height * this.position;\n\n    ctx.save();\n    this.applyStyle(ctx);\n\n    // Draw text\n    ctx.fillText(this.text, start.x, start.y);\n\n    // Get the width and height for the octave number\n    const main_measure = ctx.measureText(this.text);\n    const main_width = main_measure.width;\n    const main_height = main_measure.height;\n\n    // Calculate the y position for the super script\n    const super_y = start.y - main_height / 2.5;\n\n    // Draw the superscript\n    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n    ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\n    // Determine width and height of the superscript\n    const super_measure = ctx.measureText(this.superscript);\n    const super_width = super_measure.width;\n    const super_height = super_measure.height;\n\n    // Setup initial coordinates for the bracket line\n    let start_x = start.x;\n    let line_y = super_y;\n    const end_x = stop.x + this.stop.getGlyph().getWidth();\n\n    // Adjust x and y coordinates based on position\n    if (this.position === TextBracketPosition.TOP) {\n      start_x += main_width + super_width + 5;\n      line_y -= super_height / 2.7;\n    } else if (this.position === TextBracketPosition.BOTTOM) {\n      line_y += super_height / 2.7;\n      start_x += main_width + 2;\n\n      if (!this.render_options.underline_superscript) {\n        start_x += super_width;\n      }\n    }\n\n    if (this.render_options.dashed) {\n      // Main line\n      Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\n      // Ending Bracket\n      if (this.render_options.show_bracket) {\n        Renderer.drawDashedLine(\n          ctx,\n          end_x,\n          line_y + 1 * this.position,\n          end_x,\n          line_y + bracket_height,\n          this.render_options.dash\n        );\n      }\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(start_x, line_y);\n      // Main line\n      ctx.lineTo(end_x, line_y);\n      if (this.render_options.show_bracket) {\n        // Ending bracket\n        ctx.lineTo(end_x, line_y + bracket_height);\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { TextNoteStruct } from './textnote';\nimport { defined, log, RuntimeError } from './util';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (TextDynamics.DEBUG) log('Vex.Flow.TextDynamics', args);\n}\n\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n  /** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'TextDynamics';\n  }\n\n  protected sequence: string;\n\n  protected line: number;\n  protected glyphs: Glyph[];\n\n  /** The glyph data for each dynamics letter. */\n  static get GLYPHS(): Record<string, { code: string; width: number }> {\n    return {\n      f: {\n        code: 'dynamicForte',\n        width: 12,\n      },\n      p: {\n        code: 'dynamicPiano',\n        width: 14,\n      },\n      m: {\n        code: 'dynamicMezzo',\n        width: 17,\n      },\n      s: {\n        code: 'dynamicSforzando',\n        width: 10,\n      },\n      z: {\n        code: 'dynamicZ',\n        width: 12,\n      },\n      r: {\n        code: 'dynamicRinforzando',\n        width: 12,\n      },\n    };\n  }\n\n  /**\n   * Create the dynamics marking.\n   *\n   * A `TextDynamics` object inherits from `Note` so that it can be formatted\n   * within a `Voice`.\n   *\n   * @param noteStruct an object that contains a `duration` property and a\n   * `sequence` of letters that represents the letters to render.\n   */\n  constructor(noteStruct: TextNoteStruct) {\n    super(noteStruct);\n\n    this.sequence = (noteStruct.text || '').toLowerCase();\n    this.line = noteStruct.line || 0;\n    this.glyphs = [];\n\n    this.render_options = { ...this.render_options, glyph_font_size: 40 };\n\n    L('New Dynamics Text: ', this.sequence);\n  }\n\n  /** Set the Stave line on which the note should be placed. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Preformat the dynamics text. */\n  preFormat(): this {\n    let total_width = 0;\n    // length of this.glyphs must be <=\n    // length of this.sequence, so if we're formatted before\n    // create new glyphs.\n    this.glyphs = [];\n    // Iterate through each letter\n    this.sequence.split('').forEach((letter) => {\n      // Get the glyph data for the letter\n      const glyph_data = TextDynamics.GLYPHS[letter];\n      if (!glyph_data) throw new RuntimeError('Invalid dynamics character: ' + letter);\n\n      const size = defined(this.render_options.glyph_font_size);\n      const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\n\n      // Add the glyph\n      this.glyphs.push(glyph);\n\n      total_width += glyph_data.width;\n    });\n\n    // Store the width of the text\n    this.setWidth(total_width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  /** Draw the dynamics text on the rendering context. */\n  draw(): void {\n    this.setRendered();\n    const x = this.getAbsoluteX();\n    const y = this.checkStave().getYForLine(this.line + -3);\n\n    L('Rendering Dynamics: ', this.sequence);\n\n    let letter_x = x;\n    this.glyphs.forEach((glyph, index) => {\n      const current_letter = this.sequence[index];\n      glyph.render(this.checkContext(), letter_x, y);\n      letter_x += TextDynamics.GLYPHS[current_letter].width;\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { ModifierContext } from './modifiercontext';\nimport { Note } from './note';\nimport { TimeSignature, TimeSignatureInfo } from './timesignature';\n\nexport class TimeSigNote extends Note {\n  static get CATEGORY(): string {\n    return 'TimeSigNote';\n  }\n\n  protected timeSigInfo: TimeSignatureInfo;\n\n  constructor(timeSpec: string, customPadding?: number) {\n    super({ duration: 'b' });\n\n    const timeSignature = new TimeSignature(timeSpec, customPadding);\n    this.timeSigInfo = timeSignature.getInfo();\n    this.setWidth(this.timeSigInfo.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  /* Overridden to ignore */\n  // eslint-disable-next-line\n  addToModifierContext(mc: ModifierContext): this {\n    // DO NOTHING.\n    return this;\n  }\n\n  preFormat(): this {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw(): void {\n    const stave = this.checkStave();\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (!this.timeSigInfo.glyph.getContext()) {\n      this.timeSigInfo.glyph.setContext(ctx);\n    }\n\n    this.timeSigInfo.glyph.setStave(stave);\n    this.timeSigInfo.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n    this.timeSigInfo.glyph.renderToStave(this.getAbsoluteX());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Balazs Forian-Szabo\n// MIT License\n\nimport { Element } from './element';\nimport { Note } from './note';\nimport { log } from './util';\nimport { Vibrato } from './vibrato';\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (VibratoBracket.DEBUG) log('Vex.Flow.VibratoBracket', args);\n}\n\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n  /** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  static get CATEGORY(): string {\n    return 'VibratoBracket';\n  }\n\n  protected line: number;\n\n  protected start?: Note;\n  protected stop?: Note;\n  public render_options: {\n    vibrato_width: number;\n    wave_height: number;\n    wave_girth: number;\n    harsh: boolean;\n    wave_width: number;\n  };\n\n  /**\n   * Either the stop or start note must be set, or both of them.\n   * An undefined value for the start or stop note indicates that the vibrato\n   * is drawn from the beginning or until the end of the stave accordingly.\n   */\n  constructor(bracket_data: { stop?: Note | null; start?: Note | null }) {\n    super();\n\n    if (bracket_data.start) this.start = bracket_data.start;\n    if (bracket_data.stop) this.stop = bracket_data.stop;\n\n    this.line = 1;\n\n    this.render_options = {\n      harsh: false,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n      vibrato_width: 0,\n    };\n  }\n\n  /** Set line position of the vibrato bracket. */\n  setLine(line: number): this {\n    this.line = line;\n    return this;\n  }\n\n  /** Set harsh vibrato bracket. */\n  setHarsh(harsh: boolean): this {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  /** Draw the vibrato bracket on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    this.setRendered();\n    const y: number =\n      (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n      (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n      0;\n    // If start note is not set then vibrato will be drawn\n    // from the beginning of the stave\n    const start_x: number =\n      (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n    // If stop note is not set then vibrato will be drawn\n    // until the end of the stave\n    const stop_x: number =\n      (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n      (this.start && this.start.checkStave().getTieEndX() - 10) ||\n      0;\n\n    this.render_options.vibrato_width = stop_x - start_x;\n\n    L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n\n    Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\n\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { ChordSymbol } from './chordsymbol';\nimport { ClefNote } from './clefnote';\nimport { Curve, CurveOptions } from './curve';\nimport { EasyScore, EasyScoreOptions } from './easyscore';\nimport { Element } from './element';\nimport { Formatter, FormatterOptions } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { Glyph } from './glyph';\nimport { GlyphNote, GlyphNoteOptions } from './glyphnote';\nimport { GraceNote, GraceNoteStruct } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { KeySigNote } from './keysignote';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest, MultimeasureRestRenderOptions } from './multimeasurerest';\nimport { Note, NoteStruct } from './note';\nimport { NoteSubGroup } from './notesubgroup';\nimport { PedalMarking } from './pedalmarking';\nimport { RenderContext } from './rendercontext';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave, StaveOptions } from './stave';\nimport { BarlineType } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveLine } from './staveline';\nimport { StaveNote, StaveNoteStruct } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { StemmableNote } from './stemmablenote';\nimport { StringNumber } from './stringnumber';\nimport { System, SystemOptions } from './system';\nimport { TabNote, TabNoteStruct } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextFont, TextFontRegistry } from './textfont';\nimport { TextNote, TextNoteStruct } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSigNote } from './timesignote';\nimport { Tuplet, TupletOptions } from './tuplet';\nimport { FontInfo } from './types/common';\nimport { defined, log, RuntimeError } from './util';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice, VoiceTime } from './voice';\n\nexport interface FactoryOptions {\n  stave?: {\n    space: number;\n  };\n  renderer?: {\n    elementId: string | null;\n    backend?: number;\n    width: number;\n    height: number;\n    background?: string;\n  };\n  font?: {\n    family: string;\n    size: number;\n    weight: string;\n  };\n}\n\n// eslint-disable-next-line\nfunction L(...args: any[]) {\n  if (Factory.DEBUG) log('Vex.Flow.Factory', args);\n}\n\n/**\n * Factory implements a high level API around VexFlow. It will eventually\n * become the canonical way to use VexFlow.\n *\n * *This API is currently DRAFT*\n */\nexport class Factory {\n  /** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\n  static DEBUG: boolean;\n\n  /**\n   * Static simplified function to access constructor without providing FactoryOptions\n   *\n   * Example:\n   *\n   * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n   *\n   * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\n   */\n  static newFromElementId(elementId: string | null, width = 500, height = 200): Factory {\n    return new Factory({ renderer: { elementId, width, height } });\n  }\n\n  protected options: Required<FactoryOptions>;\n\n  protected stave?: Stave;\n  protected context!: RenderContext;\n  protected staves!: Stave[];\n  protected voices!: Voice[];\n  protected renderQ!: Element[];\n  protected systems!: System[];\n\n  /**\n   * Example:\n   *\n   * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n   *\n   * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n   */\n  constructor(options: FactoryOptions = {}) {\n    L('New factory: ', options);\n    this.options = {\n      stave: {\n        space: 10,\n      },\n      renderer: {\n        elementId: '',\n        width: 500,\n        height: 200,\n        background: '#FFF',\n      },\n      font: {\n        family: 'Arial',\n        size: 10,\n        weight: '',\n      },\n    };\n\n    this.setOptions(options);\n  }\n\n  reset(): void {\n    this.renderQ = [];\n    this.systems = [];\n    this.staves = [];\n    this.voices = [];\n    this.stave = undefined; // current stave\n  }\n\n  setOptions(options?: FactoryOptions): void {\n    this.options = { ...this.options, ...options };\n    this.initRenderer();\n    this.reset();\n  }\n\n  initRenderer(): void {\n    const { elementId, width, height, background } = this.options.renderer;\n    if (elementId == null) {\n      return;\n    }\n\n    if (elementId == '') {\n      L(this);\n      throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n    }\n\n    let backend = this.options.renderer.backend;\n    if (backend === undefined) {\n      const elem = document.getElementById(elementId);\n      if (elem instanceof window.HTMLCanvasElement) {\n        backend = Renderer.Backends.CANVAS;\n      } else {\n        backend = Renderer.Backends.SVG;\n      }\n    }\n\n    this.context = Renderer.buildContext(elementId as string, backend, width, height, background);\n  }\n\n  getContext(): RenderContext {\n    return this.context;\n  }\n\n  setContext(context: RenderContext): this {\n    this.context = context;\n    return this;\n  }\n\n  getStave(): Stave | undefined {\n    return this.stave;\n  }\n\n  getVoices(): Voice[] {\n    return this.voices;\n  }\n\n  /** Return pixels from current stave spacing. */\n\n  Stave(params?: { x?: number; y?: number; width?: number; options?: StaveOptions }): Stave {\n    const staveSpace = this.options.stave.space;\n    const p = {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - staveSpace * 1.0,\n      options: { spacing_between_lines_px: staveSpace * 1.0 },\n      ...params,\n    };\n\n    const stave: Stave = new Stave(p.x, p.y, p.width, p.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  TabStave(params?: { x?: number; y?: number; width?: number; options?: StaveOptions }): TabStave {\n    const staveSpace = this.options.stave.space;\n    const p = {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - staveSpace * 1.0,\n      options: { spacing_between_lines_px: staveSpace * 1.3 },\n      ...params,\n    };\n\n    const stave = new TabStave(p.x, p.y, p.width, p.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  StaveNote(noteStruct: StaveNoteStruct): StaveNote {\n    const note = new StaveNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GlyphNote(glyph: Glyph, noteStruct: NoteStruct, options?: GlyphNoteOptions): GlyphNote {\n    const note = new GlyphNote(glyph, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  RepeatNote(type: string, noteStruct?: NoteStruct, options?: GlyphNoteOptions): RepeatNote {\n    const note = new RepeatNote(type, noteStruct, options);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GhostNote(noteStruct: string | NoteStruct): GhostNote {\n    const ghostNote = new GhostNote(noteStruct);\n    if (this.stave) ghostNote.setStave(this.stave);\n    ghostNote.setContext(this.context);\n    this.renderQ.push(ghostNote);\n    return ghostNote;\n  }\n\n  TextNote(noteStruct: TextNoteStruct): TextNote {\n    const textNote = new TextNote(noteStruct);\n    if (this.stave) textNote.setStave(this.stave);\n    textNote.setContext(this.context);\n    this.renderQ.push(textNote);\n    return textNote;\n  }\n\n  BarNote(params: { type?: BarlineType | string } = {}): BarNote {\n    const barNote = new BarNote(params.type);\n    if (this.stave) barNote.setStave(this.stave);\n    barNote.setContext(this.context);\n    this.renderQ.push(barNote);\n    return barNote;\n  }\n\n  ClefNote(params?: { type?: string; options?: { size?: string; annotation?: string } }): ClefNote {\n    const p = {\n      type: 'treble',\n      options: {\n        size: 'default',\n        annotation: undefined,\n      },\n      ...params,\n    };\n\n    const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n    if (this.stave) clefNote.setStave(this.stave);\n    clefNote.setContext(this.context);\n    this.renderQ.push(clefNote);\n    return clefNote;\n  }\n\n  TimeSigNote(params?: { time?: string }): TimeSigNote {\n    const p = {\n      time: '4/4',\n      ...params,\n    };\n\n    const timeSigNote = new TimeSigNote(p.time);\n    if (this.stave) timeSigNote.setStave(this.stave);\n    timeSigNote.setContext(this.context);\n    this.renderQ.push(timeSigNote);\n    return timeSigNote;\n  }\n\n  KeySigNote(params: { key: string; cancelKey?: string; alterKey?: string[] }): KeySigNote {\n    const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n    if (this.stave) keySigNote.setStave(this.stave);\n    keySigNote.setContext(this.context);\n    this.renderQ.push(keySigNote);\n    return keySigNote;\n  }\n\n  TabNote(noteStruct: TabNoteStruct): TabNote {\n    const note = new TabNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GraceNote(noteStruct: GraceNoteStruct): GraceNote {\n    const note = new GraceNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    return note;\n  }\n\n  GraceNoteGroup(params: { notes: StemmableNote[]; slur?: boolean }): GraceNoteGroup {\n    const group = new GraceNoteGroup(params.notes, params.slur);\n    group.setContext(this.context);\n    return group;\n  }\n\n  Accidental(params: { type: string }): Accidental {\n    const accid = new Accidental(params.type);\n    accid.setContext(this.context);\n    return accid;\n  }\n\n  Annotation(params?: {\n    text?: string;\n    vJustify?: string;\n    hJustify?: string;\n    fontFamily?: string;\n    fontSize?: number;\n    fontWeight?: string;\n  }): Annotation {\n    const p = {\n      text: 'p',\n      vJustify: 'below',\n      hJustify: 'center',\n      fontFamily: 'Times',\n      fontSize: 14,\n      fontWeight: 'bold italic',\n      options: {},\n      ...params,\n    };\n\n    const annotation = new Annotation(p.text);\n    annotation.setJustification(p.hJustify);\n    annotation.setVerticalJustification(p.vJustify);\n    annotation.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n    annotation.setContext(this.context);\n    return annotation;\n  }\n\n  ChordSymbol(params?: {\n    vJustify?: string;\n    hJustify?: string;\n    kerning?: boolean;\n    reportWidth?: boolean;\n    fontFamily?: string;\n    fontSize?: number;\n    fontWeight?: string;\n  }): ChordSymbol {\n    const p = {\n      vJustify: 'top',\n      hJustify: 'center',\n      kerning: true,\n      reportWidth: true,\n      ...params,\n    };\n\n    const chordSymbol = new ChordSymbol();\n    chordSymbol.setHorizontal(p.hJustify);\n    chordSymbol.setVertical(p.vJustify);\n    chordSymbol.setEnableKerning(p.kerning);\n    chordSymbol.setReportWidth(p.reportWidth);\n    // There is a default font based on the engraving font.  Only set then\n    // font if it is specific, else use the default\n    if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n      if (typeof p.fontWeight === 'string') chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n      else chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n    } else if (typeof p.fontSize === 'number') {\n      chordSymbol.setFontSize(p.fontSize);\n    }\n    chordSymbol.setContext(this.context);\n    return chordSymbol;\n  }\n\n  Articulation(params?: { type?: string; position?: string | number }): Articulation {\n    const p = {\n      type: 'a.',\n      position: 'above',\n      ...params,\n    };\n\n    const articulation = new Articulation(p.type);\n    articulation.setPosition(p.position);\n    articulation.setContext(this.context);\n    return articulation;\n  }\n\n  TextDynamics(params?: { text?: string; duration?: string; dots?: number; line?: number }): TextDynamics {\n    const p = {\n      text: 'p',\n      duration: 'q',\n      dots: 0,\n      line: 0,\n      ...params,\n    };\n\n    const text = new TextDynamics({\n      text: p.text,\n      line: p.line,\n      duration: p.duration,\n      dots: p.dots,\n    });\n\n    if (this.stave) text.setStave(this.stave);\n    text.setContext(this.context);\n    this.renderQ.push(text);\n    return text;\n  }\n\n  Fingering(params: { number?: string; position?: string }): FretHandFinger {\n    const p = {\n      number: '0',\n      position: 'left',\n      ...params,\n    };\n\n    const fingering = new FretHandFinger(p.number);\n    fingering.setPosition(p.position);\n    fingering.setContext(this.context);\n    return fingering;\n  }\n\n  StringNumber(params: { number: string; position: string }): StringNumber {\n    const stringNumber = new StringNumber(params.number);\n    stringNumber.setPosition(params.position);\n    stringNumber.setContext(this.context);\n    return stringNumber;\n  }\n\n  TickContext(): TickContext {\n    return new TickContext();\n  }\n\n  ModifierContext(): ModifierContext {\n    return new ModifierContext();\n  }\n\n  MultiMeasureRest(params: MultimeasureRestRenderOptions): MultiMeasureRest {\n    const numMeasures = defined(params.number_of_measures, 'NoNumberOfMeasures');\n    const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n    multiMeasureRest.setContext(this.context);\n    this.renderQ.push(multiMeasureRest);\n    return multiMeasureRest;\n  }\n\n  Voice(params?: { time?: VoiceTime | string; options?: { softmaxFactor: number } }): Voice {\n    const p = {\n      time: '4/4',\n      ...params,\n    };\n    const voice = new Voice(p.time, p.options);\n    this.voices.push(voice);\n    return voice;\n  }\n\n  StaveConnector(params: { top_stave: Stave; bottom_stave: Stave; type: string }): StaveConnector {\n    const connector = new StaveConnector(params.top_stave, params.bottom_stave);\n    connector.setType(params.type).setContext(this.context);\n    this.renderQ.push(connector);\n    return connector;\n  }\n\n  Formatter(options?: FormatterOptions): Formatter {\n    return new Formatter(options);\n  }\n\n  Tuplet(params?: { notes?: Note[]; options?: TupletOptions }): Tuplet {\n    const p = {\n      notes: [],\n      options: {},\n      ...params,\n    };\n\n    const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n    this.renderQ.push(tuplet);\n    return tuplet;\n  }\n\n  Beam(params: { notes: StemmableNote[]; options?: { autoStem?: boolean; secondaryBeamBreaks?: number[] } }): Beam {\n    const beam = new Beam(params.notes, params.options?.autoStem).setContext(this.context);\n    beam.breakSecondaryAt(params.options?.secondaryBeamBreaks ?? []);\n    this.renderQ.push(beam);\n    return beam;\n  }\n\n  Curve(params: { from: Note; to: Note; options: CurveOptions }): Curve {\n    const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n    this.renderQ.push(curve);\n    return curve;\n  }\n\n  StaveTie(params: {\n    from: Note | null;\n    to: Note | null;\n    first_indices?: number[];\n    last_indices?: number[];\n    text?: string;\n    options?: { direction?: number };\n  }): StaveTie {\n    const tie = new StaveTie(\n      {\n        first_note: params.from,\n        last_note: params.to,\n        first_indices: params.first_indices,\n        last_indices: params.last_indices,\n      },\n      params.text\n    );\n\n    if (params.options?.direction) tie.setDirection(params.options.direction);\n    tie.setContext(this.context);\n    this.renderQ.push(tie);\n    return tie;\n  }\n\n  StaveLine(params: {\n    from: StaveNote;\n    to: StaveNote;\n    first_indices: number[];\n    last_indices: number[];\n    options?: { text?: string; font?: FontInfo };\n  }): StaveLine {\n    const line = new StaveLine({\n      first_note: params.from,\n      last_note: params.to,\n      first_indices: params.first_indices,\n      last_indices: params.last_indices,\n    });\n\n    if (params.options?.text) line.setText(params.options.text);\n    if (params.options?.font) line.setFont(params.options.font);\n\n    line.setContext(this.context);\n    this.renderQ.push(line);\n    return line;\n  }\n\n  VibratoBracket(params: {\n    from: Note | null;\n    to: Note | null;\n    options: {\n      harsh?: boolean;\n      line?: number;\n    };\n  }): VibratoBracket {\n    const vibratoBracket = new VibratoBracket({\n      start: params.from,\n      stop: params.to,\n    });\n\n    if (params.options.line) vibratoBracket.setLine(params.options.line);\n    if (params.options.harsh) vibratoBracket.setHarsh(params.options.harsh);\n\n    vibratoBracket.setContext(this.context);\n    this.renderQ.push(vibratoBracket);\n\n    return vibratoBracket;\n  }\n\n  TextBracket(params: {\n    from: Note;\n    to: Note;\n    text: string;\n    options: {\n      superscript: string;\n      position: string;\n      line?: number;\n      font?: FontInfo;\n    };\n  }): TextBracket {\n    const textBracket = new TextBracket({\n      start: params.from,\n      stop: params.to,\n      text: params.text,\n      superscript: params.options.superscript,\n      position: params.options.position,\n    });\n\n    if (params.options.line) textBracket.setLine(params.options.line);\n    if (params.options.font) textBracket.setFont(params.options.font);\n\n    textBracket.setContext(this.context);\n    this.renderQ.push(textBracket);\n    return textBracket;\n  }\n\n  System(params: SystemOptions = {}): System {\n    params.factory = this;\n    const system = new System(params).setContext(this.context);\n    this.systems.push(system);\n    return system;\n  }\n\n  /**\n   * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n   * ```\n   * const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n   * const score: EasyScore = vf.EasyScore();\n   * ```\n   * @param options.factory optional instance of Factory\n   * @param options.builder instance of Builder\n   * @param options.commitHooks function to call after a note element is created\n   * @param options.throwOnError throw error in case of parsing error\n   */\n  EasyScore(options: EasyScoreOptions = {}): EasyScore {\n    options.factory = this;\n    return new EasyScore(options);\n  }\n\n  PedalMarking(params?: { notes?: StaveNote[]; options?: { style: string } }): PedalMarking {\n    const p = {\n      notes: [],\n      options: {\n        style: 'mixed',\n      },\n      ...params,\n    };\n\n    const pedal = new PedalMarking(p.notes);\n    pedal.setType(PedalMarking.typeString[p.options.style]);\n    pedal.setContext(this.context);\n    this.renderQ.push(pedal);\n    return pedal;\n  }\n\n  NoteSubGroup(params?: { notes?: Note[] }): NoteSubGroup {\n    const p = {\n      notes: [],\n      ...params,\n    };\n\n    const group = new NoteSubGroup(p.notes);\n    group.setContext(this.context);\n    return group;\n  }\n\n  TextFont(params: TextFontRegistry): TextFont {\n    params.factory = this;\n    return new TextFont(params);\n  }\n\n  /** Render the score. */\n  draw(): void {\n    const ctx = this.context;\n    this.systems.forEach((s) => s.setContext(ctx).format());\n    this.staves.forEach((s) => s.setContext(ctx).draw());\n    this.voices.forEach((v) => v.setContext(ctx).draw());\n    this.renderQ.forEach((e) => {\n      if (!e.isRendered()) e.setContext(ctx).draw();\n    });\n    this.systems.forEach((s) => s.setContext(ctx).draw());\n    this.reset();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Author: Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\n\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { RenderContext } from './rendercontext';\nimport { RuntimeError } from './util';\n\nexport interface StaveHairpinRenderOptions {\n  right_shift_ticks?: number;\n  left_shift_ticks?: number;\n  left_shift_px: number;\n  right_shift_px: number;\n  height: number;\n  y_shift: number;\n}\n\nexport class StaveHairpin extends Element {\n  static get CATEGORY(): string {\n    return 'StaveHairpin';\n  }\n\n  protected hairpin: number;\n\n  protected position: number;\n  public render_options: StaveHairpinRenderOptions;\n\n  // notes is initialized by the constructor via this.setNotes(notes).\n  protected notes!: Record<string, Note>;\n\n  protected first_note?: Note;\n  protected last_note?: Note;\n\n  static readonly type = {\n    CRESC: 1,\n    DECRESC: 2,\n  };\n\n  /* Helper function to convert ticks into pixels.\n   * Requires a Formatter with voices joined and formatted (to\n   * get pixels per tick)\n   *\n   * options is struct that has:\n   *\n   *  {\n   *   height: px,\n   *   y_shift: px, //vertical offset\n   *   left_shift_ticks: 0, //left horizontal offset expressed in ticks\n   *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n   *  }\n   *\n   **/\n  static FormatByTicksAndDraw(\n    ctx: RenderContext,\n    formatter: { pixelsPerTick: number },\n    notes: Record<string, Note>,\n    type: number,\n    position: number,\n    options: StaveHairpinRenderOptions\n  ): void {\n    const ppt = formatter.pixelsPerTick;\n\n    if (ppt == null) {\n      throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n    }\n\n    const l_shift_px = ppt * (options.left_shift_ticks ?? 0);\n    const r_shift_px = ppt * (options.right_shift_ticks ?? 0);\n\n    const hairpin_options = {\n      height: options.height,\n      y_shift: options.y_shift,\n      left_shift_px: l_shift_px,\n      right_shift_px: r_shift_px,\n      right_shift_ticks: 0,\n      left_shift_ticks: 0,\n    };\n\n    new StaveHairpin(\n      {\n        first_note: notes.first_note,\n        last_note: notes.last_note,\n      },\n      type\n    )\n      .setContext(ctx)\n      .setRenderOptions(hairpin_options)\n      .setPosition(position)\n      .draw();\n  }\n\n  /**\n   * Create a new hairpin from the specified notes.\n   *\n   * @param {!Object} notes The notes to tie up.\n   * Notes is a struct that has:\n   *\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *  }\n   * @param {!Object} type The type of hairpin\n   */\n  constructor(notes: Record<string, Note>, type: number) {\n    super();\n    this.setNotes(notes);\n    this.hairpin = type;\n    this.position = Modifier.Position.BELOW;\n\n    this.render_options = {\n      height: 10,\n      y_shift: 0, // vertical offset\n      left_shift_px: 0, // left horizontal offset\n      right_shift_px: 0, // right horizontal offset\n      right_shift_ticks: 0,\n      left_shift_ticks: 0,\n    };\n  }\n\n  setPosition(position: number): this {\n    if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n      this.position = position;\n    }\n    return this;\n  }\n\n  setRenderOptions(options: StaveHairpinRenderOptions): this {\n    if (\n      options.height != null &&\n      options.y_shift != null &&\n      options.left_shift_px != null &&\n      options.right_shift_px != null\n    ) {\n      this.render_options = options;\n    }\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this hairpin to.\n   *\n   * @param {!Object} notes The start and end notes.\n   */\n  setNotes(notes: Record<string, Note>): this {\n    if (!notes.first_note && !notes.last_note) {\n      throw new RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\n    }\n\n    this.notes = notes;\n    this.first_note = notes.first_note;\n    this.last_note = notes.last_note;\n    return this;\n  }\n\n  renderHairpin(params: {\n    first_x: number;\n    last_x: number;\n    first_y: number;\n    last_y: number;\n    staff_height: number;\n  }): void {\n    const ctx = this.checkContext();\n    let dis = this.render_options.y_shift + 20;\n    let y_shift = params.first_y;\n\n    if (this.position === Modifier.Position.ABOVE) {\n      dis = -dis + 30;\n      y_shift = params.first_y - params.staff_height;\n    }\n\n    const l_shift = this.render_options.left_shift_px;\n    const r_shift = this.render_options.right_shift_px;\n\n    ctx.beginPath();\n\n    switch (this.hairpin) {\n      case StaveHairpin.type.CRESC:\n        ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n        break;\n      case StaveHairpin.type.DECRESC:\n        ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  draw(): void {\n    this.checkContext();\n    this.setRendered();\n\n    const firstNote = this.first_note;\n    const lastNote = this.last_note;\n    if (!firstNote || !lastNote) throw new RuntimeError('NoNote', 'Notes required to draw');\n\n    const start = firstNote.getModifierStartXY(this.position, 0);\n    const end = lastNote.getModifierStartXY(this.position, 0);\n\n    this.renderHairpin({\n      first_x: start.x,\n      last_x: end.x,\n      first_y: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n      last_y: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n      staff_height: firstNote.checkStave().getHeight(),\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { TieNotes } from './stavetie';\nimport { TabNote } from './tabnote';\nimport { TabTie } from './tabtie';\nimport { RuntimeError } from './util';\n\nexport class TabSlide extends TabTie {\n  static get CATEGORY(): string {\n    return 'TabSlide';\n  }\n\n  static get SLIDE_UP(): number {\n    return 1;\n  }\n\n  static get SLIDE_DOWN(): number {\n    return -1;\n  }\n\n  static createSlideUp(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_UP);\n  }\n\n  static createSlideDown(notes: TieNotes): TabSlide {\n    return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n  }\n\n  /**\n   * @param notes is a struct of the form:\n   *  {\n   *    first_note: Note,\n   *    last_note: Note,\n   *    first_indices: [n1, n2, n3],\n   *    last_indices: [n1, n2, n3]\n   *  }\n   * @param notes.first_note the starting note of the slide\n   * @param notes.last_note the ending note of the slide\n   * @param notes.first_indices specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n   * @param notes.last_indices currently unused. we assume it's the same as first_indices.\n   *\n   * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n   */\n  constructor(notes: TieNotes, direction?: number) {\n    super(notes, 'sl.');\n\n    // Determine the direction automatically if it is not provided.\n    if (!direction) {\n      let first_fret = (notes.first_note as TabNote).getPositions()[0].fret;\n      if (typeof first_fret === 'string') {\n        first_fret = parseInt(first_fret, 10);\n      }\n      let last_fret = (notes.last_note as TabNote).getPositions()[0].fret;\n      if (typeof last_fret === 'string') {\n        last_fret = parseInt(last_fret, 10);\n      }\n\n      // If either of the frets are 'X', parseInt() above will return NaN.\n      // Choose TabSlide.SLIDE_UP by default.\n      if (isNaN(first_fret) || isNaN(last_fret)) {\n        direction = TabSlide.SLIDE_UP;\n      } else {\n        direction = first_fret > last_fret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n      }\n    }\n\n    this.direction = direction;\n    this.render_options.cp1 = 11;\n    this.render_options.cp2 = 14;\n    this.render_options.y_shift = 0.5;\n\n    this.setFont({ family: 'Times', size: 10, weight: 'bold italic' });\n  }\n\n  renderTie(params: {\n    direction: number;\n    first_x_px: number;\n    last_x_px: number;\n    last_ys: number[];\n    first_ys: number[];\n  }): void {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new RuntimeError('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.checkContext();\n    const first_x_px = params.first_x_px;\n    const first_ys = params.first_ys;\n    const last_x_px = params.last_x_px;\n\n    const direction = params.direction;\n    if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n      throw new RuntimeError('BadSlide', 'Invalid slide direction');\n    }\n\n    // eslint-disable-next-line\n    const first_indices = this.notes.first_indices!;\n    for (let i = 0; i < first_indices.length; ++i) {\n      const slide_y = first_ys[first_indices[i]] + this.render_options.y_shift;\n\n      if (isNaN(slide_y)) {\n        throw new RuntimeError('BadArguments', 'Bad indices for slide rendering.');\n      }\n\n      ctx.beginPath();\n      ctx.moveTo(first_x_px, slide_y + 3 * direction);\n      ctx.lineTo(last_x_px, slide_y - 3 * direction);\n      ctx.closePath();\n      ctx.stroke();\n    }\n\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n  protected tuningValues: number[] = [];\n\n  static get names(): Record<string, string> {\n    return {\n      standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n      dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n      dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n      eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n      standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n    };\n  }\n\n  /**\n   * Constructor.\n   * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n   */\n  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n    // Default to standard tuning.\n    this.setTuning(tuningString);\n  }\n\n  /** Return the note number associated to the note string. */\n  noteToInteger(noteString: string): number {\n    return Tables.keyProperties(noteString).int_value;\n  }\n\n  /**\n   * Set tuning identified by tuning name (eg. 'dagdad')\n   * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n   */\n  setTuning(tuningString: string): void {\n    if (Tuning.names[tuningString]) {\n      tuningString = Tuning.names[tuningString];\n    }\n\n    this.tuningValues = [];\n\n    const keys = tuningString.split(/\\s*,\\s*/);\n    if (keys.length === 0) {\n      throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n    }\n\n    for (let i = 0; i < keys.length; ++i) {\n      this.tuningValues[i] = this.noteToInteger(keys[i]);\n    }\n  }\n\n  /** Return the note number associated with a tablature string. */\n  getValueForString(stringNum: string | number): number {\n    const s = Number(stringNum);\n    if (s < 1 || s > this.tuningValues.length) {\n      throw new RuntimeError(\n        'BadArguments',\n        `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`\n      );\n    }\n\n    return this.tuningValues[s - 1];\n  }\n\n  /** Return the note number associated with a tablature string and fret. */\n  getValueForFret(fretNum: string | number, stringNum: string | number): number {\n    const stringValue = this.getValueForString(stringNum);\n    const f = Number(fretNum);\n\n    if (f < 0) {\n      throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n    }\n\n    return stringValue + f;\n  }\n\n  /** Return the note string associated with tablature string and fret. */\n  getNoteForFret(fretNum: string | number, stringNum: string | number): string {\n    const noteValue = this.getValueForFret(fretNum, stringNum);\n\n    const octave = Math.floor(noteValue / 12);\n    const value = noteValue % 12;\n\n    return `${Tables.integerToNote(value)}/${octave}`;\n  }\n}\n","import { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { ChordSymbol } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, Fonts } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Modifier } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { Barline } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { Repetition } from './staverepetition';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Volta } from './stavevolta';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { System } from './system';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextFont } from './textfont';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\n\nexport const Flow = {\n  Accidental,\n  Annotation,\n  Articulation,\n  Barline,\n  BarNote,\n  Beam,\n  Bend,\n  BoundingBox,\n  BoundingBoxComputation,\n  ChordSymbol,\n  Clef,\n  ClefNote,\n  Crescendo,\n  Curve,\n  Dot,\n  EasyScore,\n  Element,\n  Factory,\n  Font,\n  Fonts,\n  Formatter,\n  Fraction,\n  FretHandFinger,\n  GhostNote,\n  Glyph,\n  GlyphNote,\n  GraceNote,\n  GraceNoteGroup,\n  GraceTabNote,\n  KeyManager,\n  KeySignature,\n  KeySigNote,\n  Modifier,\n  ModifierContext,\n  MultiMeasureRest,\n  Music,\n  Note,\n  NoteHead,\n  NoteSubGroup,\n  Ornament,\n  Parser,\n  PedalMarking,\n  Registry,\n  RenderContext,\n  Renderer,\n  RepeatNote,\n  Repetition,\n  Stave,\n  StaveConnector,\n  StaveHairpin,\n  StaveLine,\n  StaveModifier,\n  StaveNote,\n  StaveTempo,\n  StaveText,\n  StaveTie,\n  Stem,\n  StringNumber,\n  Stroke,\n  System,\n  TabNote,\n  TabSlide,\n  TabStave,\n  TabTie,\n  TextBracket,\n  TextDynamics,\n  TextFont,\n  TextNote,\n  TickContext,\n  TimeSignature,\n  TimeSigNote,\n  Tremolo,\n  Tuning,\n  Tuplet,\n  Vibrato,\n  VibratoBracket,\n  Voice,\n  Volta,\n\n  // BUILD and VERSION are set by webpack. See: Gruntfile.js.\n  BUILD: '',\n  VERSION: '',\n\n  get DEFAULT_FONT_STACK(): Font[] {\n    return Tables.DEFAULT_FONT_STACK;\n  },\n  set DEFAULT_FONT_STACK(value: Font[]) {\n    Tables.DEFAULT_FONT_STACK = value;\n  },\n  get DEFAULT_NOTATION_FONT_SCALE(): number {\n    return Tables.DEFAULT_NOTATION_FONT_SCALE;\n  },\n  set DEFAULT_NOTATION_FONT_SCALE(value: number) {\n    Tables.DEFAULT_NOTATION_FONT_SCALE = value;\n  },\n  get DEFAULT_TABLATURE_FONT_SCALE(): number {\n    return Tables.DEFAULT_TABLATURE_FONT_SCALE;\n  },\n  set DEFAULT_TABLATURE_FONT_SCALE(value: number) {\n    Tables.DEFAULT_TABLATURE_FONT_SCALE = value;\n  },\n  get RESOLUTION(): number {\n    return Tables.RESOLUTION;\n  },\n  set RESOLUTION(value: number) {\n    Tables.RESOLUTION = value;\n  },\n  get SLASH_NOTEHEAD_WIDTH(): number {\n    return Tables.SLASH_NOTEHEAD_WIDTH;\n  },\n  set SLASH_NOTEHEAD_WIDTH(value: number) {\n    Tables.SLASH_NOTEHEAD_WIDTH = value;\n  },\n  get STAVE_LINE_DISTANCE(): number {\n    return Tables.STAVE_LINE_DISTANCE;\n  },\n  set STAVE_LINE_DISTANCE(value: number) {\n    Tables.STAVE_LINE_DISTANCE = value;\n  },\n  get STAVE_LINE_THICKNESS(): number {\n    return Tables.STAVE_LINE_THICKNESS;\n  },\n  set STAVE_LINE_THICKNESS(value: number) {\n    Tables.STAVE_LINE_THICKNESS = value;\n  },\n  get STEM_HEIGHT(): number {\n    return Tables.STEM_HEIGHT;\n  },\n  set STEM_HEIGHT(value: number) {\n    Tables.STEM_HEIGHT = value;\n  },\n  get STEM_WIDTH(): number {\n    return Tables.STEM_WIDTH;\n  },\n  set STEM_WIDTH(value: number) {\n    Tables.STEM_WIDTH = value;\n  },\n  get TIME4_4(): { num_beats: number; beat_value: number; resolution: number } {\n    return Tables.TIME4_4;\n  },\n  set TIME4_4(value: { num_beats: number; beat_value: number; resolution: number }) {\n    Tables.TIME4_4 = value;\n  },\n  get accidentalMap(): Record<string, { code: string; parenRightPaddingAdjustment: number }> {\n    return Tables.accidentalMap;\n  },\n  get unicode(): Record<string, string> {\n    return Tables.unicode;\n  },\n  keySignature(spec: string): { type: string; line: number }[] {\n    return Tables.keySignature(spec);\n  },\n  clefProperties(clef: string): { line_shift: number } {\n    return Tables.clefProperties(clef);\n  },\n  keyProperties(key: string, clef?: string, params?: any): any {\n    return Tables.keyProperties(key, clef, params);\n  },\n  durationToTicks(duration: string): number {\n    return Tables.durationToTicks(duration);\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\n\nimport { TabNote, TabNoteStruct } from './tabnote';\n\nexport class GraceTabNote extends TabNote {\n  static get CATEGORY(): string {\n    return 'GraceTabNote';\n  }\n\n  constructor(noteStruct: TabNoteStruct) {\n    super(noteStruct, false);\n\n    this.render_options = {\n      ...this.render_options,\n      // vertical shift from stave line\n      y_shift: 0.3,\n      // grace glyph scale\n      scale: 0.6,\n      // grace tablature font\n      font: '7.5pt Arial',\n    };\n\n    this.updateWidth();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\n\nimport { KeyParts, Music } from './music';\nimport { RuntimeError } from './util';\n\nexport class KeyManager {\n  protected music: Music;\n  // all attributes below are initialised in setKey which calls reset in the constructor\n  protected keyParts!: KeyParts;\n  protected keyString!: string;\n  protected key!: string;\n  protected scale!: number[];\n  protected scaleMap!: Record<string, string>;\n  protected scaleMapByValue!: Record<number, string>;\n  protected originalScaleMapByValue!: Record<number, string>;\n\n  constructor(key: string) {\n    this.music = new Music();\n    this.setKey(key);\n  }\n\n  setKey(key: string): this {\n    this.key = key;\n    this.reset();\n    return this;\n  }\n\n  getKey(): string {\n    return this.key;\n  }\n\n  reset(): this {\n    this.keyParts = this.music.getKeyParts(this.key);\n\n    this.keyString = this.keyParts.root;\n    if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\n    const is_supported_type = Music.scaleTypes[this.keyParts.type];\n    if (!is_supported_type) {\n      throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n    }\n\n    this.scale = this.music.getScaleTones(\n      this.music.getNoteValue(this.keyString),\n      Music.scaleTypes[this.keyParts.type]\n    );\n\n    this.scaleMap = {};\n    this.scaleMapByValue = {};\n    this.originalScaleMapByValue = {};\n\n    const noteLocation = Music.root_indices[this.keyParts.root];\n\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n\n      const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n      this.scaleMap[rootName] = noteName;\n      this.scaleMapByValue[this.scale[i]] = noteName;\n      this.originalScaleMapByValue[this.scale[i]] = noteName;\n    }\n\n    return this;\n  }\n\n  getAccidental(key: string): {\n    note: string;\n    accidental?: string;\n    change?: boolean;\n  } {\n    const root = this.music.getKeyParts(key).root;\n    const parts = this.music.getNoteParts(this.scaleMap[root]);\n\n    return {\n      note: this.scaleMap[root],\n      accidental: parts.accidental,\n    };\n  }\n\n  selectNote(note: string): {\n    note: string;\n    accidental?: string;\n    change: boolean;\n  } {\n    note = note.toLowerCase();\n    const parts = this.music.getNoteParts(note);\n\n    // First look for matching note in our altered scale\n    const scaleNote = this.scaleMap[parts.root];\n    const modparts = this.music.getNoteParts(scaleNote);\n\n    if (scaleNote === note) {\n      return {\n        note: scaleNote,\n        accidental: parts.accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in our altered scale\n    const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n    if (valueNote != null) {\n      return {\n        note: valueNote,\n        accidental: this.music.getNoteParts(valueNote).accidental,\n        change: false,\n      };\n    }\n\n    // Then search for a note of equivalent value in the original scale\n    const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n    if (originalValueNote != null) {\n      this.scaleMap[modparts.root] = originalValueNote;\n      delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n      this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n      return {\n        note: originalValueNote,\n        accidental: this.music.getNoteParts(originalValueNote).accidental,\n        change: true,\n      };\n    }\n\n    // Then try to unmodify a currently modified note.\n    if (modparts.root === note) {\n      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n      this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n      this.scaleMap[modparts.root] = modparts.root;\n      return {\n        note: modparts.root,\n        accidental: undefined,\n        change: true,\n      };\n    }\n\n    // Last resort -- shitshoot\n    delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n    this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\n    delete this.scaleMap[modparts.root];\n    this.scaleMap[modparts.root] = note;\n\n    return {\n      note,\n      accidental: parts.accidental,\n      change: true,\n    };\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n// MIT License\n\nimport { isGraceNote } from 'typeguard';\n\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\n\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n  static get CATEGORY(): string {\n    return 'Tremolo';\n  }\n\n  protected readonly code: string;\n  protected readonly num: number;\n\n  /**\n   * @param num number of bars\n   */\n  constructor(num: number) {\n    super();\n\n    this.num = num;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'tremolo1';\n  }\n\n  /** Draw the tremolo on the rendering context. */\n  draw(): void {\n    const ctx = this.checkContext();\n    const note = this.checkAttachedNote();\n    this.setRendered();\n\n    const stemDirection = note.getStemDirection();\n\n    const start = note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n\n    const gn = isGraceNote(note);\n    const scale = gn ? GraceNote.SCALE : 1;\n    const category = `tremolo.${gn ? 'grace' : 'default'}`;\n\n    const y_spacing = this.musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n    const height = this.num * y_spacing;\n    let y = note.getStemExtents().baseY - height;\n\n    if (stemDirection < 0) {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n    } else {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n    }\n\n    const fontScale = this.musicFont.lookupMetric(`${category}.point`);\n\n    x += this.musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(ctx, x, y, fontScale, this.code, { category });\n      y += y_spacing;\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n\nimport { RenderContext } from './rendercontext';\n\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n  code: string;\n  constructor(code: string, message: string = '') {\n    super('[RuntimeError] ' + code + ': ' + message);\n    this.code = code;\n  }\n}\n\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined<T>(x?: T, code: string = 'undefined', message: string = ''): T {\n  if (x === undefined) {\n    throw new RuntimeError(code, message);\n  }\n  return x;\n}\n\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block: string, ...args: any[]): void {\n  if (!args) return;\n  const line = Array.prototype.slice.call(args).join(' ');\n  window.console.log(block + ': ' + line);\n}\n\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args: any[]): void {\n  const line = args.join(' ');\n  const err = new Error();\n  window.console.log('Warning: ', line, err.stack);\n}\n\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x: number, n: number): number {\n  return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a: number, b: number): number {\n  let mid_line = b + (a - b) / 2;\n  if (mid_line % 2 > 0) {\n    mid_line = roundN(mid_line * 10, 5) / 10;\n  }\n  return mid_line;\n}\n\n/**\n * Draw a tiny dot marker on the specified canvas. A great debugging aid.\n * @param ctx canvas context\n * @param x dot x coordinate\n * @param y dot y coordinate\n */\nexport function drawDot(ctx: RenderContext, x: number, y: number, color = '#55'): void {\n  ctx.save();\n  ctx.setFillStyle(color);\n\n  // draw a circle\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n}\n\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text: string): string {\n  return `vf-${text}`;\n}\n\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a: number): number {\n  a = a % (2 * Math.PI);\n  if (a < 0) {\n    a += 2 * Math.PI;\n  }\n  return a;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"vexflow-font-\" + {\"81\":\"leland\",\"289\":\"custom\",\"347\":\"bravura\",\"571\":\"gonville\",\"623\":\"petaluma\"}[chunkId] + \"-min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this[\"webpackChunkVex\"] = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this[\"webpackChunkVex\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","import{Flow}from'flow';Flow.VERSION=\"3.0.9\";Flow.BUILD=\"bb6b7443c9d50c426788e11b8e84f20b0bcae81a\";","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n\nimport { Flow } from './flow';\nimport { log, RuntimeError } from './util';\n\nexport const Vex = {\n  Flow: Flow,\n\n  forEach:\n    // eslint-disable-next-line\n  (a: any[], fn: any) => {\n      for (let i = 0; i < a.length; i++) {\n        fn(a[i], i);\n      }\n    },\n\n  // Take `arr` and return a new list consisting of the sorted, unique,\n  // contents of arr. Does not modify `arr`.\n  SortAndUnique:\n    // eslint-disable-next-line\n    (arr: any[], cmp: any, eq: any) => {\n      if (arr.length > 1) {\n        const newArr = [];\n        let last;\n        arr.sort(cmp);\n\n        for (let i = 0; i < arr.length; ++i) {\n          if (i === 0 || !eq(arr[i], last)) {\n            newArr.push(arr[i]);\n          }\n          last = arr[i];\n        }\n\n        return newArr;\n      } else {\n        return arr;\n      }\n    },\n\n  // Check if array `a` contains `obj`.\n  Contains:\n    // eslint-disable-next-line\n    (a: any[], obj: any) => {\n      let i = a.length;\n      while (i--) {\n        if (a[i] === obj) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n  // Get the 2D Canvas context from DOM element `canvas_sel`.\n  getCanvasContext: (canvas_sel: string): RenderingContext => {\n    if (!canvas_sel) {\n      throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n    }\n\n    const canvas = document.getElementById(canvas_sel) as HTMLCanvasElement;\n    if (!(canvas && canvas.getContext)) {\n      throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n    }\n\n    return canvas.getContext('2d') as RenderingContext;\n  },\n\n  // Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\n  BM:\n    // eslint-disable-next-line\n  (s: any, f: any) => {\n      const start_time = new Date().getTime();\n      f();\n      const elapsed = new Date().getTime() - start_time;\n      log(s, elapsed + 'ms');\n    },\n\n  // Get stack trace.\n  StackTrace: (): string | undefined => {\n    const err = new Error();\n    return err.stack;\n  },\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\n\nexport default Vex;\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","inProgress","dataWebpackPrefix","Fraction","constructor","numerator","denominator","set","CATEGORY","static","a","b","Number","isNaN","t","GCD","args","length","LCM","shift","LCMM","value","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","__staticFractionA","copy","__staticFractionB","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","Math","floor","remainder","makeAbs","abs","toString","toSimplifiedString","__staticFractionTmp","toMixedString","s","q","f","parse","str","i","split","n","parseInt","BoundingBox","x","y","w","h","that","getX","getY","getW","getH","setX","setY","setW","setH","move","mergeWith","boundingBox","new_x","new_y","new_w","max","new_h","BoundingBoxComputation","x1","NaN","y1","x2","y2","getX1","getY1","width","height","addPoint","addX","addY","addQuadraticCurve","p0x","p0y","p1x","p1y","p2x","p2y","p01x","denom","it","p01y","addBezierCurve","p3x","p3y","p0","p1","p2","p3","pow","c","b2ac","t1","sqrt","t2","Index","id","type","class","Registry","index","defaultRegistry","registry","undefined","clear","setIndexValue","name","elem","updateIndex","oldValue","getElementById","getAttribute","register","setAttribute","onRegister","getElementsByAttribute","attribute","index_attr","index_attr_val","Object","keys","map","k","getElementsByType","getElementsByClass","className","onUpdate","info","includes","Font","metrics","fontData","fontDataMetrics","_","default","loadBravura","loadCustom","loadGonville","loadPetaluma","loadLeland","getName","getResolution","getFontData","resolution","getMetrics","lookupMetric","key","defaultValue","keyParts","currObj","getGlyphs","glyphs","Fonts","Bravura","Gonville","Petaluma","Leland","Custom","customNoteHeads","D0","code","D1","D2","D3","T0","T1","T2","T3","X0","X1","X2","X3","S1","S2","R1","R2","RESOLUTION","durations","accidentals","parenRightPaddingAdjustment","bb","db","bs","bss","o","bbs","ashs","afhf","accSagittal5v7KleismaUp","accSagittal5v7KleismaDown","accSagittal5CommaUp","accSagittal5CommaDown","accSagittal7CommaUp","accSagittal7CommaDown","accSagittal25SmallDiesisUp","accSagittal25SmallDiesisDown","accSagittal35MediumDiesisUp","accSagittal35MediumDiesisDown","accSagittal11MediumDiesisUp","accSagittal11MediumDiesisDown","accSagittal11LargeDiesisUp","accSagittal11LargeDiesisDown","accSagittal35LargeDiesisUp","accSagittal35LargeDiesisDown","accSagittalSharp25SDown","accSagittalFlat25SUp","accSagittalSharp7CDown","accSagittalFlat7CUp","accSagittalSharp5CDown","accSagittalFlat5CUp","accSagittalSharp5v7kDown","accSagittalFlat5v7kUp","accSagittalSharp","accSagittalFlat","accSagittalSharp5v7kUp","accSagittalFlat5v7kDown","accSagittalSharp5CUp","accSagittalFlat5CDown","accSagittalSharp7CUp","accSagittalFlat7CDown","accSagittalSharp25SUp","accSagittalFlat25SDown","accSagittalSharp35MUp","accSagittalFlat35MDown","accSagittalSharp11MUp","accSagittalFlat11MDown","accSagittalSharp11LUp","accSagittalFlat11LDown","accSagittalSharp35LUp","accSagittalFlat35LDown","accSagittalDoubleSharp25SDown","accSagittalDoubleFlat25SUp","accSagittalDoubleSharp7CDown","accSagittalDoubleFlat7CUp","accSagittalDoubleSharp5CDown","accSagittalDoubleFlat5CUp","accSagittalDoubleSharp5v7kDown","accSagittalDoubleFlat5v7kUp","accSagittalDoubleSharp","accSagittalDoubleFlat","accSagittal7v11KleismaUp","accSagittal7v11KleismaDown","accSagittal17CommaUp","accSagittal17CommaDown","accSagittal55CommaUp","accSagittal55CommaDown","accSagittal7v11CommaUp","accSagittal7v11CommaDown","accSagittal5v11SmallDiesisUp","accSagittal5v11SmallDiesisDown","accSagittalSharp5v11SDown","accSagittalFlat5v11SUp","accSagittalSharp7v11CDown","accSagittalFlat7v11CUp","accSagittalSharp55CDown","accSagittalFlat55CUp","accSagittalSharp17CDown","accSagittalFlat17CUp","accSagittalSharp7v11kDown","accSagittalFlat7v11kUp","accSagittalSharp7v11kUp","accSagittalFlat7v11kDown","accSagittalSharp17CUp","accSagittalFlat17CDown","accSagittalSharp55CUp","accSagittalFlat55CDown","accSagittalSharp7v11CUp","accSagittalFlat7v11CDown","accSagittalSharp5v11SUp","accSagittalFlat5v11SDown","accSagittalDoubleSharp5v11SDown","accSagittalDoubleFlat5v11SUp","accSagittalDoubleSharp7v11CDown","accSagittalDoubleFlat7v11CUp","accSagittalDoubleSharp55CDown","accSagittalDoubleFlat55CUp","accSagittalDoubleSharp17CDown","accSagittalDoubleFlat17CUp","accSagittalDoubleSharp7v11kDown","accSagittalDoubleFlat7v11kUp","accSagittal23CommaUp","accSagittal23CommaDown","accSagittal5v19CommaUp","accSagittal5v19CommaDown","accSagittal5v23SmallDiesisUp","accSagittal5v23SmallDiesisDown","accSagittalSharp5v23SDown","accSagittalFlat5v23SUp","accSagittalSharp5v19CDown","accSagittalFlat5v19CUp","accSagittalSharp23CDown","accSagittalFlat23CUp","accSagittalSharp23CUp","accSagittalFlat23CDown","accSagittalSharp5v19CUp","accSagittalFlat5v19CDown","accSagittalSharp5v23SUp","accSagittalFlat5v23SDown","accSagittalDoubleSharp5v23SDown","accSagittalDoubleFlat5v23SUp","accSagittalDoubleSharp5v19CDown","accSagittalDoubleFlat5v19CUp","accSagittalDoubleSharp23CDown","accSagittalDoubleFlat23CUp","accSagittal19SchismaUp","accSagittal19SchismaDown","accSagittal17KleismaUp","accSagittal17KleismaDown","accSagittal143CommaUp","accSagittal143CommaDown","accSagittal11v49CommaUp","accSagittal11v49CommaDown","accSagittal19CommaUp","accSagittal19CommaDown","accSagittal7v19CommaUp","accSagittal7v19CommaDown","accSagittal49SmallDiesisUp","accSagittal49SmallDiesisDown","accSagittal23SmallDiesisUp","accSagittal23SmallDiesisDown","accSagittal5v13MediumDiesisUp","accSagittal5v13MediumDiesisDown","accSagittal11v19MediumDiesisUp","accSagittal11v19MediumDiesisDown","accSagittal49MediumDiesisUp","accSagittal49MediumDiesisDown","accSagittal5v49MediumDiesisUp","accSagittal5v49MediumDiesisDown","accSagittal49LargeDiesisUp","accSagittal49LargeDiesisDown","accSagittal11v19LargeDiesisUp","accSagittal11v19LargeDiesisDown","accSagittal5v13LargeDiesisUp","accSagittal5v13LargeDiesisDown","accSagittalSharp23SDown","accSagittalFlat23SUp","accSagittalSharp49SDown","accSagittalFlat49SUp","accSagittalSharp7v19CDown","accSagittalFlat7v19CUp","accSagittalSharp19CDown","accSagittalFlat19CUp","accSagittalSharp11v49CDown","accSagittalFlat11v49CUp","accSagittalSharp143CDown","accSagittalFlat143CUp","accSagittalSharp17kDown","accSagittalFlat17kUp","accSagittalSharp19sDown","accSagittalFlat19sUp","accSagittalSharp19sUp","accSagittalFlat19sDown","accSagittalSharp17kUp","accSagittalFlat17kDown","accSagittalSharp143CUp","accSagittalFlat143CDown","accSagittalSharp11v49CUp","accSagittalFlat11v49CDown","accSagittalSharp19CUp","accSagittalFlat19CDown","accSagittalSharp7v19CUp","accSagittalFlat7v19CDown","accSagittalSharp49SUp","accSagittalFlat49SDown","accSagittalSharp23SUp","accSagittalFlat23SDown","accSagittalSharp5v13MUp","accSagittalFlat5v13MDown","accSagittalSharp11v19MUp","accSagittalFlat11v19MDown","accSagittalSharp49MUp","accSagittalFlat49MDown","accSagittalSharp5v49MUp","accSagittalFlat5v49MDown","accSagittalSharp49LUp","accSagittalFlat49LDown","accSagittalSharp11v19LUp","accSagittalFlat11v19LDown","accSagittalSharp5v13LUp","accSagittalFlat5v13LDown","accSagittalDoubleSharp23SDown","accSagittalDoubleFlat23SUp","accSagittalDoubleSharp49SDown","accSagittalDoubleFlat49SUp","accSagittalDoubleSharp7v19CDown","accSagittalDoubleFlat7v19CUp","accSagittalDoubleSharp19CDown","accSagittalDoubleFlat19CUp","accSagittalDoubleSharp11v49CDown","accSagittalDoubleFlat11v49CUp","accSagittalDoubleSharp143CDown","accSagittalDoubleFlat143CUp","accSagittalDoubleSharp17kDown","accSagittalDoubleFlat17kUp","accSagittalDoubleSharp19sDown","accSagittalDoubleFlat19sUp","accSagittalShaftUp","accSagittalShaftDown","accSagittalAcute","accSagittalGrave","accSagittal1MinaUp","accSagittal1MinaDown","accSagittal2MinasUp","accSagittal2MinasDown","accSagittal1TinaUp","accSagittal1TinaDown","accSagittal2TinasUp","accSagittal2TinasDown","accSagittal3TinasUp","accSagittal3TinasDown","accSagittal4TinasUp","accSagittal4TinasDown","accSagittal5TinasUp","accSagittal5TinasDown","accSagittal6TinasUp","accSagittal6TinasDown","accSagittal7TinasUp","accSagittal7TinasDown","accSagittal8TinasUp","accSagittal8TinasDown","accSagittal9TinasUp","accSagittal9TinasDown","accSagittalFractionalTinaUp","accSagittalFractionalTinaDown","accidentalNarrowReversedFlat","accidentalNarrowReversedFlatAndFlat","accidentalWilsonPlus","accidentalWilsonMinus","duration_codes","Tables","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","DEFAULT_FONT_STACK","DEFAULT_NOTATION_FONT_SCALE","DEFAULT_TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","IsKerned","clefProperties","clef","props","treble","line_shift","bass","tenor","alto","soprano","percussion","subbass","french","keyProperties","params","options","octave_shift","pieces","toUpperCase","C","int_val","CN","accidental","CB","CBB","D","DN","DB","DBB","E","EN","EB","EBB","F","FN","FB","FBB","G","GN","GB","GBB","A","AN","AB","ABB","B","BN","BB","BBB","R","rest","X","octave","shift_right","line","stroke","int_value","extraProps","glyph_name","displaced","integerToNote","integer","noteValue","tabToGlyph","fret","scale","glyph","shift_y","glyphMetrics","Glyph","textWidth","text","getWidth","articulationCodes","artic","between_lines","av","aboveCode","belowCode","ao","ah","am","accidentalMap","accidentalCodes","acc","accidentalColumnsTable","second_on_bottom","spaced_out_tetrachord","spaced_out_pentachord","very_spaced_out_pentachord","spaced_out_hexachord","very_spaced_out_hexachord","ornamentCodes","mordent","mordent_inverted","turn","turn_inverted","tr","upprall","downprall","prallup","pralldown","upmordent","downmordent","lineprall","prallprall","scoop","doit","fall","doitLong","fallLong","bend","plungerClosed","plungerOpen","flip","jazzTurn","smear","keySignature","spec","keySpec","num","Am","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","Em","Bm","notes","acc_list","push","unicode","sharp","String","fromCharCode","flat","natural","triangle","degrees","circle","sanitizeDuration","duration","alias","durationToFraction","durationToNumber","durationToTicks","ticks","getGlyphProps","common","stem","stem_offset","flag","stem_up_extension","stem_down_extension","tabnote_stem_up_extension","tabnote_stem_down_extension","dot_shiftY","line_above","line_below","code_head","m","r","position","beam_count","code_flag_upstem","code_flag_downstem","glyphTypeProperties","customGlyphTypeProperties","validTypes","TIME4_4","num_beats","beat_value","Element","attrs","newID","el","getCategory","classes","rendered","setFontStack","ID","fontStack","musicFont","getFontStack","setStyle","style","getStyle","applyStyle","context","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","addClass","removeClass","isRendered","setRendered","getAttributes","oldID","getBoundingBox","getContext","setContext","GlyphCacheEntry","category","point","loadMetrics","bbox","getOutlineBoundingBox","outline","x_shift","y_shift","lookupFontMetric","font","GlyphOutline","originX","originY","done","next","nextX","nextY","result","parts","super","topGlyphs","botGlyphs","originShift","setOptions","reset","lookupGlyph","x_min","x_max","ha","cached_outline","ctx","x_pos","y_pos","data","cache","lookup","renderOutline","go","beginPath","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","fill","bboxComp","penX","penY","getCode","setPoint","setStave","stave","setXShift","setYShift","checkMetrics","metricsScale","setOriginX","xShift","setOriginY","yShift","setOrigin","render","xPos","yPos","checkStave","renderToStave","getYForGlyphs","ModifierPosition","Map","entries","get","entry","Modifier","text_line","Position","LEFT","spacingFromNextModifier","PositionString","center","CENTER","above","ABOVE","below","BELOW","left","right","RIGHT","setWidth","getNote","note","checkAttachedNote","setNote","getIndex","checkIndex","setIndex","getModifierContext","modifierContext","checkModifierContext","setModifierContext","getPosition","setPosition","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","getXShift","alignSubNotesWithNote","subNotes","tickContext","getTickContext","getStave","subNoteXOffset","modLeftPx","modRightPx","forEach","subNote","subTickContext","setXOffset","Music","NUM_TONES","canonical_notes","roots","root_values","root_indices","e","g","diatonic_intervals","diatonic_accidentals","unison","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","intervals","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","scales","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","scaleTypes","M","noteValues","root_index","cn","cb","cbb","dn","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bbb","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","toLowerCase","match","exec","getKeyParts","keyString","getNoteValue","getIntervalValue","intervalString","getCanonicalNoteName","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","sum","getRelativeNoteName","rootValue","multiplier","reverse_interval","relativeNoteName","getScaleTones","tones","nextNote","getIntervalBetween","note1","note2","difference","createScaleMap","keySigParts","scaleName","keySigString","noteLocation","scaleMap","rootName","noteName","Dot","radius","dots","state","right_shift","dot_list","max_shift_map","dot","isStaveNote","getKeyProps","getRightDisplacedHeadPx","isTabNote","note_id","sort","dot_shift","x_width","last_line","last_note","prev_dotted_space","half_shiftY","isRest","isGraceNote","setDotShiftY","lineSpace","getSpacingBetweenLines","start","getModifierStartXY","forceFlagRight","getStemExtents","baseY","arc","PI","Tickable","preFormatted","postFormatted","intrinsicTicks","tickMultiplier","modifiers","tupletStack","align_center","center_x_shift","ignore_ticks","formatterMetrics","freedom","iterations","space","used","mean","deviation","getTicks","shouldIgnoreTicks","setIgnoreTicks","checkTickContext","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterXShift","centerXShift","setCenterAlignment","getVoice","voice","setVoice","getTuplet","tuplet","getTupletStack","resetTuplet","noteCount","notesOccupied","indexOf","splice","getNoteCount","getNotesOccupied","applyTickMultiplier","pop","setTuplet","addToModifierContext","mc","addMember","setPreFormatted","addModifier","mod","optionalArgs","getModifiers","setTickContext","tc","message","preFormat","postFormat","getIntrinsicTicks","setIntrinsicTicks","getTickMultiplier","setDuration","getAbsoluteX","Note","noteStruct","parsedNoteStruct","parseNoteStruct","JSON","stringify","keyProps","noteType","customTypes","duration_override","customGlyphs","playNote","leftDisplacedHeadPx","rightDisplacedHeadPx","ys","render_options","annotation_spacing","glyph_font_scale","stroke_px","xStart","xPre1","xAbs","xPost1","notePx","xPost2","xEnd","xFreedomRight","xWidth","setFont","fillText","round","color","yy","spaceDeviation","prefix","durationString","durationProps","parseDuration","currentTicks","getPlayNote","setPlayNote","addStroke","setYs","getYForLine","getLeftDisplacedHeadPx","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","getLineNumber","isTopNote","getLineForRest","getGlyph","getGlyphWidth","getYs","getYForTopText","getDuration","isDotted","hasStem","getNoteType","getBeam","beam","checkBeam","hasBeam","setBeam","modifier","left_shift","glyphWidth","glyphPx","getNoteStartX","getStemDirection","getTieRightX","tieStartX","getTieLeftX","tieEndX","getKeys","Stem","stem_up_y_offset","stem_down_y_offset","stem_up_y_base_offset","stem_down_y_base_offset","x_begin","x_end","y_top","y_bottom","stem_extension","stem_direction","hide","isStemlet","stemletHeight","renderHeightAdjustment","UP","DOWN","WIDTH","HEIGHT","setNoteHeadXBounds","setDirection","setExtension","ext","getExtension","setYBounds","getHeight","y_offset","getExtents","isStemUp","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","setVisibility","isVisible","setStemlet","adjustHeightForFlag","adjustHeightForBeam","stem_x","stem_y","y_base_offset","DEBUG","L","stemletYOffset","NoteHead","custom_glyph","stem_up_x_offset","stem_down_x_offset","note_type","glyph_code","custom_glyph_code","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","fontShift","displacedFontShift","spacing","half_spacing","min_y","getYForNote","head_x","categorySuffix","staveSpace","closePath","breve_lines","drawSlashNoteHead","renderGlyph","StemmableNote","getStem","checkStem","setStem","buildStem","buildFlag","hasFlag","flagCode","getBaseCustomNoteHeadGlyph","getStemLength","getStemExtension","getBeamCount","getStemMinimumLength","setStemDirection","offsets","offsetYBaseStemUp","offsetYTopStemUp","offsetYBaseStemDown","offsetYTopStemDown","getStemX","getCenterGlyphX","stem_extension_override","setStemLength","textLine","extents","getYForBottomText","drawStem","stemOptions","shiftRestVertical","dir","delta","isrest","maxLine","minLine","setKeyLine","getKeyLine","StaveNote","ledgerLineStyle","use_default_head_x","note_heads","DEFAULT_LEDGER_LINE_OFFSET","calculateKeyProps","auto_stem","autoStem","STEM_UP","STEM_DOWN","minNoteheadPadding","formatByY","notesList","minL","stemDirection","stemMax","stemMin","maxL","voice_shift","getVoiceShiftWidth","is_displaced","voices","noteU","noteM","noteL","voiceXShift","stemDelta","lineSpacing","centerRest","hasStave","topNote","bottomNote","topKeys","bottomKeys","HALF_NOTEHEAD_HEIGHT","topNoteBottomY","bottomNoteTopY","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","head","calcNoteDisplacements","lastLine","lineDiff","end","step","noteProps","notehead","calculateOptimalStemDirection","minY","maxY","halfLineSpacing","frac","resultLine","thisLine","isChord","getNoteHeadBounds","setNoteDisplaced","getRightShift","restLine","top","bot","isInnerNoteIndex","setStemStyle","getStemStyle","setLedgerLineStyle","getLedgerLineStyle","setFlagStyle","flagStyle","getFlagStyle","setKeyStyle","addAccidental","addArticulation","articulation","addAnnotation","annotation","addDot","addDotToAll","getAccidentals","getMembers","Accidental","getDots","noteHeadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","yTop","Infinity","yBottom","highestLine","getNumLines","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","displaced_x","non_displaced_x","highest_line","lowest_line","highest_displaced_line","lowest_displaced_line","highest_non_displaced_line","lowest_non_displaced_line","getNoteHeadBeginX","getNoteHeadEndX","drawLedgerLines","doubleWidth","min_x","drawLedgerLine","normal","ledgerWidth","drawModifiers","openGroup","noteheadStyle","closeGroup","hasNoBeam","drawFlag","noteStemHeight","flagX","flagY","pointerBBox","drawNoteHeads","super_stem_extension","mid_line_distance","lines_over_octave_from_mid_line","spacing_between_lines","xBegin","shouldRenderStem","stemX","GraceNote","SCALE","LEDGER_LINE_OFFSET","slash","slur","ret","staveNoteScale","getStaveNoteScale","offsetScale","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","defaultStemExtention","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beam_slope","slope","scaleX","beam_angle","atan","iPointOnBeam","cos","sin","slash_angle","protrusion_stem_dx","protrusion_stem_dy","protrusion_beam_dx","protrusion_beam_dy","stem0X","stemY","getBeamYToDraw","PetalumaScriptTextMetrics","smufl","RobotoSlabTextMetrics","TextFont","family","fontCacheKey","size","maxSizeGlyph","weight","getFontDataByName","updateParams","registerFont","updateCacheKey","fontRegistry","registryInstance","fontFamily","serifs","monospaced","italic","bold","superscriptOffset","subscriptOffset","description","hash","returnedFonts","attr","fw","fs","textWidthCache","textWidthCacheInstance","fd","selectedFont","fallback","candidates","families","famliy","filter","fontWeightToBold","fontStyleToItalic","perfect","find","ok","setFontSize","fontName","overwrite","exists","td","getMetricForCharacter","maxHeight","pointsToPixels","getWidthForCharacter","metric","advanceWidth","getWidthForString","j","Justify","VerticalJustify","Annotation","justification","vert_justification","TOP","annotations","testWidth","textFont","getTextFontFromVexFontData","numLines","top_text_line","setVerticalJustification","just","VerticalJustifyString","getJustification","setJustification","JustifyString","classString","join","text_width","measureText","text_height","stem_ext","has_stem","BOTTOM","stem_base","yt","centerStem","CENTER_STEM","bottom","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNote","Articulation","font_scale","articulations","getIncrement","reduce","maxWidth","articWidth","builder","articNameToCode","staccato","tenuto","accent","articString","trim","getFactory","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","isOnStemTip","getInitialOffset","padding","stemTipY","stemBaseY","getTopY","INITIAL_OFFSET","getBottomY","offsetDirection","noteLine","articLine","snappedLine","snapLineToStaff","Bend","release","phrase","line_width","line_style","bend_width","release_width","updateWidth","bends","last_width","getText","measure_text","ctxThat","total_width","additional_width","draw_width","bend_height","annotation_y","renderBend","cp_x","cp_y","renderRelease","renderArrowHead","renderText","setRawFont","render_x","last_bend","last_bend_draw_width","last_drawn_width","ChordSymbol","HorizontalJustify","SymbolTypes","SymbolModifiers","VoiceMode","symbolBlocks","horizontal","vertical","useKerning","reportWidth","superSubRatio","chordSymbolMetrics","global","NO_TEXT_FORMAT","val","noFormat","glyphCode","getYOffsetForText","ix","y_max","engravingFontResolution","spacingBetweenBlocks","getMetricForGlyph","yOffset","leftSideBearing","kerningOffset","chordSymbol","lowerKerningText","upperKerningText","instances","nonSuperWidth","reportedWidths","instance","fontAdj","glyphAdj","lineSpaces","vAlign","symbol","sup","isSuperscript","sub","isSubscript","subAdj","adj","symbolType","GLYPH","getYShiftForGlyph","getXShiftForGlyph","getWidthForGlyph","TEXT","over","prev","setEnableKerning","updateKerningAdjustments","updateOverBarAdjustments","getVertical","getReportWidth","setReportWidth","barIndex","findIndex","xoff","yoff","symIndex","accum","getKerningAdjustment","currSymbol","prevSymbol","adjustment","preKernUpper","preKernLower","some","xx","kerningOffsetPixels","symbolModifier","SUPERSCRIPT","getSymbolBlock","symbolBlock","NONE","glyphArgs","glyphPoints","LINE","addSymbolBlock","parameters","addText","addTextSuperscript","addTextSubscript","SUBSCRIPT","addGlyphSuperscript","addGlyph","addGlyphOrText","char","addLine","setVertical","vj","verticalJustifyString","setHorizontal","hj","horizontalJustifyString","getHorizontal","sp","curY","horizontalJustify","verticalJustify","diminished","dim","halfDiminished","augmented","majorSeventh","leftParen","rightParen","leftBracket","rightBracket","leftParenTall","rightParenTall","symbolTypes","symbolModifiers","FretHandFinger","finger","x_offset","nums","nums_list","prev_note","shiftLeft","shiftRight","pos","shiftL","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","lastNote","num_shift","numWidth","fingerings","fingeringString","number","Fingering","fingering","setFretHandFinger","getFretHandFinger","setOffsetX","setOffsetY","dot_x","dot_y","Voice","time","voiceTime","resolutionMultiplier","mode","STRICT","ticksUsed","largestTickWidth","tickables","softmaxFactor","totalTicks","smallestTickCount","Mode","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getTickables","getMode","setMode","getResolutionMultiplier","getActualResolution","tickable","setStrict","strict","SOFT","isComplete","FULL","setSoftmaxFactor","factor","reCalculateExpTicksUsed","expTicksUsed","softmax","tickValue","v","exp","addTickable","addTickables","NoteSubGroup","formatter","Formatter","groups","group","joinVoices","format","getMinTotalWidth","TickContext","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","xOffset","tickablesByVoice","totalLeftPx","totalRightPx","tContexts","tContext","contexts","getTickID","getXBase","setXBase","getXOffset","setPadding","getMaxTicks","getMinTicks","getMaxTickable","getMinTickable","getTickableForVoice","voiceIndex","getTickablesByVoice","getCenterAlignedTickables","getCurrentTick","setCurrentTick","tick","Ornament","delayed","accidentalLowerPadding","accidentalUpperPadding","ornament","adjustForStemDirection","reportedWidth","stemUpYOffset","ornamentAlignWithNoteHead","ornamentNoteTransition","ornaments","increment","ornamentRelease","ornamentAttack","ornamentArticulation","jazzOrnaments","setDelayed","setUpperAccidental","accid","accidentalUpper","setLowerAccidental","accidentalLower","stemDir","stemExtents","isPlacedOnNoteheadSide","glyphYBetweenLines","glyphX","glyphY","delayXShift","startX","nextContext","getNextContext","RenderContext","CanvasContext","textHeight","context2D","canvas","CANVAS_BROWSER_SIZE_LIMIT","limit","clearRect","cls","child","setBackgroundFillStyle","blur","getTransform","setLineCap","capType","lineCap","setLineDash","dash","resize","canvasElement","devicePixelRatio","sanitizeCanvasDims","rect","fillRect","cp1x","cp1y","cp2x","cp2y","cpx","cpy","startAngle","endAngle","counterclockwise","getFont","fontArray","attrNamesToIgnoreMap","path","SVG_NS","TWO_PI","SVGContext","element","fontString","svg","create","appendChild","parent","pen","defaultAttributes","attributes","background_attributes","shadow_attributes","state_stack","svgElementType","document","createElementNS","foundBold","foundItalic","replace","fontAttributes","lineDash","prototype","call","applyAttributes","visibleWidth","visibleHeight","setViewBox","viewBox_or_minX","viewBoxString","attrNamesToIgnore","nodeName","propertyName","setAttributeNS","lastChild","removeChild","rectangle","x0","y0","large","sweep","getShadowStyle","sa","measureTextCache","txt","textContent","savedState","measureImpl","getBBox","fontSize","substring","Renderer","arg0","arg1","backend","maybeElement","Backends","CANVAS","HTMLCanvasElement","SVG","HTMLDivElement","elementId","background","renderer","lastContext","buildContext","fromX","fromY","toX","toY","dashPattern","dx","dy","angle","atan2","idx","dashLength","nx","ny","LineEndType","StringNumber","string_number","dashed","leg","shift_left","num_shiftR","x_widthL","x_widthR","num_width","setLineEndType","setStringNumber","setLastNote","setDashed","line_space","isStemmableNote","len","pattern","drawDashedLine","Stroke","all_voices","stroke_spacing","strokes","strokeList","string","getPositions","strokeShift","addEndNote","note_end","botY","isNote","arrow","arrow_shift_x","arrow_y","text_shift_x","text_y","Type","BRUSH_DOWN","BRUSH_UP","ROLL_DOWN","RASQUEDO_DOWN","ROLL_UP","RASQUEDO_UP","ARPEGGIO_DIRECTIONLESS","strokeLine","Vibrato","harsh","vibrato_width","wave_height","wave_width","wave_girth","setVibratoWidth","vibratos","vibrato","setHarsh","vx","vy","renderVibrato","opts","num_waves","ModifierContext","members","PREFORMAT","GraceNoteGroup","POSTFORMAT","member","getLeftShift","getState","formatted","StaveModifierPosition","BarlineType","Justification","VoltaType","StaveModifier","placeGlyphOnLine","customShift","getPadding","setLayoutMetrics","layoutMetrics","getLayoutMetrics","Clef","types","BEGIN","setType","tab","attachment","shiftY","KeySignature","cancelKeySpec","alterKeySpec","accList","setKeySig","glyphFontScale","xPositions","paddingForced","convertToGlyph","nextAcc","accGlyphData","extraWidth","accidentalSpacing","xPosition","cancelKey","convertToCancelAccList","cancel_accList","different_types","naturals","cancelled","concat","addToStave","convertAccLines","customLines","offset","alterKey","convertToAlterAccList","firstAccidentalType","cancelAccList","END","getEndClef","getClef","Barline","thickness","TYPE","widths","SINGLE","DOUBLE","REPEAT_BEGIN","REPEAT_END","REPEAT_BOTH","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","typeString","single","double","repeatBegin","repeatEnd","repeatBoth","none","getType","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","double_bar","staveCtx","getTopLineTopY","getBottomLineBottomY","begin","dot_radius","Repetition","symbol_type","setShiftX","setShiftY","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSignoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","draw_coda","text_x","symbol_x","getVerticalBarWidth","modifierWidth","StaveSection","section","shift_x","setStaveSection","StaveTempo","tempo","setTempo","bpm","stem_height","TextNote","superscript","subscript","smooth","struct","GLYPHS","segno","mordent_upper","mordent_lower","p","z","coda","pedal_open","pedal_close","caesura_straight","caesura_curved","breath","StaveText","setStaveText","setText","getBottomLineY","Volta","volta","top_y","vert_height","BEGIN_END","TimeSignatureGlyph","timeSignature","topDigits","botDigits","topWidth","topGlyph","botWidth","botGlyph","topStartX","botStartX","start_x","topLine","bottomLine","TimeSignature","timeSpec","customPadding","validate_args","fontLineShift","parseTimeSpec","numbers","assertIsValidFraction","makeTimeSignatureGlyph","getInfo","setTimeSig","SORT_ORDER_BEG_MODIFIERS","SORT_ORDER_END_MODIFIERS","Stave","end_x","measure","endClef","vertical_bar_width","glyph_spacing_px","num_lines","fill_style","left_bar","right_bar","spacing_between_lines_px","space_above_staff_ln","space_below_staff_ln","top_text_position","bottom_text_position","line_config","cps","bounds","defaultLedgerLineStyle","resetLines","addEndModifier","defaultPadding","rightPadding","setDefaultLedgerLineStyle","getDefaultLedgerLineStyle","visible","setNoteStartX","begBarline","getNoteEndX","getTieStartX","getTieEndX","setNumLines","setMeasure","getModifierXShift","setRepetitionTypeLeft","setRepetitionTypeRight","setVoltaType","number_t","setSection","headroom","getLineForY","setBegBarType","setEndBarType","setClef","clefSpec","clefs","addClef","setEndClef","setKeySignature","keySignatures","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","noPosition","noCategory","sortByCategory","items","order","temp","endBarline","begModifiers","endModifiers","lastBarlineIdx","isBarline","getConfigForLines","setConfigForLine","line_number","setConfigForLines","lines_configuration","drawBoldDoubleLine","topX","StaveConnector","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","top_stave","bottom_stave","texts","SINGLE_RIGHT","content","THIN_DOUBLE","attachment_height","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","singleRight","singleLeft","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","sumArray","arr","createContexts","makeContext","addToContext","tickToContextMap","tickList","integerTicks","newContext","array","list","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","formatterOptions","globalSoftmax","maxIterations","justifyWidth","totalCost","totalShift","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","modifierContexts","contextGaps","total","gaps","lossHistory","paddingBetween","accumulator","stavePadding","gap","toFixed","auto_beam","align_rests","beams","Beam","applyAndGetBeams","formatToStave","tabstave","tabnotes","autobeam","notevoice","tabvoice","alignAllNotes","alignTuplets","currTickable","prevTickable","alignRests","AlignRestsToNotes","preCalculateMinTotalWidth","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","createModifierContexts","contextArray","renderingContext","voicesParam","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","centerX","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","configMinPadding","configMaxPadding","targetWidth","distances","actualWidth","minDistance","mdCalc","di","calcMinDistance","paddingMax","maxX","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","tune","alpha","current","cost","postFormatContexts","optionsParam","Tuplet","numerator_glyphs","denom_glyphs","num_notes","beats_occupied","beatsOccupiedDeprecationWarning","notes_occupied","bracketed","ratioed","setTupletLocation","location","LOCATION_TOP","resolveGlyphs","attach","LOCATION_BOTTOM","NESTING_OFFSET","detach","setBracketed","setRatioed","console","warn","getNotes","getBeatsOccupied","setBeatsOccupied","beats","setNotesOccupied","unshift","getNestedTupletCount","first_note","maxTupletCount","countTuplets","minTupletCount","tupletCount","getYPosition","nested_tuplet_y_offset","bottom_y","addGlyphWidth","notation_start_x","colon_x","colon_radius","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_BOTH","stem_weight","memo","break_on_indices","beam_width","max_slope","min_slope","slope_iterations","slope_cost","show_stemlets","stemlet_extension","partial_beam_length","flat_beams","min_flat_beam_offset","time_sig","beatTotal","beatValue","generateBeams","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","vf_notes","unbeamable","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","prevNote","breaksOnEachRest","beam_rests","breaksOnFirstOrLastRest","beam_middle_only","breakOnStemChange","maintain_stem_directions","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","secondary_breaks","secondary_break_ticks","flat_beam_offset","beamCount","breakSecondaryAt","indices","getSlopeY","first_x_px","first_y_px","calculateSlope","firstNote","initialSlope","firstStemTipY","firstStemX","getStemSlope","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","diff","idealSlope","calculateFlatSlope","extremeY","extremeBeamCount","currentExtreme","extremeTest","newOffset","beamY","applyStemExtensions","beamedStemTipY","preBeamExtension","beamExtension","totalBeamWidth","lookupBeamDirection","prev_tick","next_tick","lookup_duration","prev_note_gets_beam","next_note_gets_beam","note_gets_beam","getBeamLines","tick_of_duration","beam_started","beam_lines","current_beam","previous_should_break","tick_tally","should_break","next_note","beam_alone","beam_direction","last_beam","drawStems","drawBeamLines","valid_beam_durations","beamThickness","beamLines","beam_line","startBeamX","startBeamY","lastBeamX","lastBeamY","StaveTie","setNotes","cp1","cp2","first_x_shift","last_x_shift","tie_spacing","first_indices","last_indices","isPartial","renderTie","first_ys","last_ys","last_x_px","last_y_px","top_cp_y","bottom_cp_y","center_x","TabTie","grace_notes","show_slur","slur_y_shift","gracenote_groups","group_list","gracenote_group","is_stavenote","formatWidth","group_shift","beamNotes","getGraceNotes","graceNote","TieClass","TabNote","draw_stem","ghost","positions","draw_dots","draw_stem_through_stave","setGhost","getStemY","stemDownLine","stemStartLine","flag_x","flag_y","flag_code","isDot","drawStemThrough","stem_through","unused_strings","strings_used","getUnusedStringGroups","stem_lines","up_stem","down_stem","line_spacing","total_lines","strings","containsLastString","containsFirstString","line_ys","isTopBound","isBottomBound","getPartialStemLines","drawPositions","tab_x","render_stem","obj","isCategory","checkAncestors","constructorFcn","categoryToMatch","getPrototypeOf","parenLeftPadding","parenRightPadding","cautionary","noteheadAccidentalPadding","leftShift","additionalPadding","accLine","lineList","previousLine","accShift","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","checkCollision","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","accCount","lastAccOnLine","clearance","clearanceRequired","collision","tickPositions","tickNoteMap","tickPosition","notesAtPosition","music","scaleMapKey","tickPos","modifiedPitches","processNote","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","fontScale","parenLeft","parenRight","parenWidth","setAsCautionary","accX","accY","BarNote","barline","ClefNote","clef_obj","abs_x","Crescendo","extend_left","extend_right","decrescendo","setHeight","setDecrescendo","decresc","tick_context","next_context","begin_x","half_height","reverse","renderHairpin","CurvePosition","Curve","from","to","NEAR_HEAD","position_end","invert","nearHead","nearTop","NEAR_TOP","renderCurve","first_x","first_y","last_x","last_y","cp0x","cp0y","cp_spacing","end_metric","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","RegExp","slice","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","ruleFunc","bind","oneOrMore","zeroOrMore","matches","run","EasyScore","EasyScoreGrammar","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","addNote","standardAccidentals","notePiece","setId","commaSeparatedRegex","setClass","defaults","easyScoreHook","throwOnError","parser","ERROR_MSG","GhostNote","parameter","GlyphNote","ignoreTicks","setGlyph","KeySigNote","semibreve_rest","MultiMeasureRest","number_of_measures","xs","hasPaddingLeft","hasPaddingRight","hasLineThickness","hasSymbolSpacing","padding_left","padding_right","line_thickness","symbol_spacing","use_symbols","show_number","number_line","number_glyph_point","serif_thickness","semibreve_rest_glyph_scale","getXs","drawLine","spacingBetweenLines","lineThicknessHalf","serifThickness","leftIndented","rightIndented","lineTop","lineBottom","drawSymbols","n4","n2","n1","get_semibreve_rest","rest_scale","rest_width","yMiddle","timeSig","drawPedalGlyph","glyph_data","PedalMarking","custom_depress_text","custom_release_text","bracket_height","text_margin_right","bracket_line_width","pedal","MIXED","setCustomText","depress","drawBracketed","prev_x","prev_y","is_pedal_depressed","next_is_same","prev_is_same","drawText","pedal_depress","pedal_release","mixed","CODES","RepeatNote","drawArrowHead","StaveLine","line_dash","rounded_end","draw_start_arrow","draw_end_arrow","arrowhead_length","arrowhead_angle","text_position_vertical","TextVerticalPosition","text_justification","TextJustification","applyLineStyle","applyFontStyle","drawArrowLine","pt1","pt2","both_arrows","distance","ratio","end_y","start_y","line_angle","angle1","angle2","top_x","bottom_x","start_position","end_position","first_index","last_index","upwards_slope","notehead_width","vertical_position","System","Factory","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","addConnector","connector","addStave","staveOptions","spaceAbove","spaceBelow","debugNoteMetrics","options_details","allVoices","debugNoteMetricsYs","part","lastY","plotDebugging","plotMetrics","TabStave","addTabGlyph","TextBracket","TextBracketPosition","stop","show_bracket","underline_superscript","Positions","PositionsString","main_measure","main_width","main_height","super_y","super_measure","super_width","super_height","line_y","TextDynamics","sequence","glyph_font_size","letter","letter_x","current_letter","TimeSigNote","timeSigInfo","VibratoBracket","bracket_data","stop_x","renderQ","systems","staves","initRenderer","getVoices","ghostNote","textNote","barNote","clefNote","timeSigNote","keySigNote","vJustify","hJustify","fontWeight","kerning","stringNumber","numMeasures","multiMeasureRest","secondaryBeamBreaks","curve","tie","vibratoBracket","textBracket","system","StaveHairpin","hairpin","left_shift_px","right_shift_px","right_shift_ticks","left_shift_ticks","ppt","pixelsPerTick","l_shift_px","r_shift_px","hairpin_options","setRenderOptions","dis","staff_height","l_shift","r_shift","CRESC","DECRESC","TabSlide","SLIDE_UP","SLIDE_DOWN","first_fret","last_fret","slide_y","Tuning","tuningString","tuningValues","setTuning","names","standard","dagdad","dropd","standardBanjo","noteToInteger","getValueForString","stringNum","getValueForFret","fretNum","stringValue","getNoteForFret","Flow","GraceTabNote","KeyManager","setKey","getKey","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","change","valueNote","originalValueNote","Tremolo","y_spacing","BUILD","VERSION","RuntimeError","Error","defined","log","block","Array","err","stack","midLine","mid_line","drawDot","normalizeAngle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","defineProperty","enumerable","chunkId","Promise","all","promises","Function","prop","hasOwnProperty","l","url","script","needAttach","scripts","getElementsByTagName","createElement","charset","timeout","nc","src","onScriptComplete","event","onerror","onload","clearTimeout","doneFns","parentNode","setTimeout","target","Symbol","toStringTag","scriptUrl","importScripts","currentScript","installedChunks","installedChunkData","promise","resolve","reject","error","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","chunkLoadingGlobal","SortAndUnique","cmp","eq","newArr","last","Contains","getCanvasContext","canvas_sel","BM","start_time","Date","getTime","elapsed","StackTrace"],"sourceRoot":""}